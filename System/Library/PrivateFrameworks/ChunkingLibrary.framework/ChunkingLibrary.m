void _CKFileDigestResultsCFFinalize(uint64_t a1)
{
  uint64_t v2;

  v2 = *(int *)(a1 + 16);
  if ((_DWORD)v2)
    _requestCallbacks_3[4 * v2 + 3](a1);
  free(*(void **)(a1 + 32));
}

uint64_t CKFileDigestArgumentsFileSchemeByte(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16);
  if (v1)
    return _requestCallbacks_4[6 * v1 + 1]();
  else
    return 0;
}

uint64_t CKFileSignatureGeneratorV1Update(uint64_t a1, const void *a2, uint64_t a3)
{
  CC_SHA1_CTX *v3;

  v3 = *(CC_SHA1_CTX **)(a1 + 48);
  *(_QWORD *)(a1 + 40) += a3;
  CC_SHA1_Update(v3, a2, a3);
  return 1;
}

uint64_t CKFileDigestArgumentsGetClass(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t CKFileDigestArgumentsV1WithFileCreate(CFTypeRef *a1, char a2, CFTypeRef *a3)
{
  return _CKFileDigestArgumentsV1Create(a1, 1, a2, a3);
}

uint64_t CKFileSignatureGeneratorV1Init(uint64_t a1)
{
  CC_SHA1_Init(*(CC_SHA1_CTX **)(a1 + 48));
  CC_SHA1_Update(*(CC_SHA1_CTX **)(a1 + 48), "com.apple.XattrObjectSalt", 0x1Au);
  CC_SHA1_Update(*(CC_SHA1_CTX **)(a1 + 48), "com.apple.DataObjectSalt", 0x19u);
  *(_QWORD *)(a1 + 40) = 0;
  return 1;
}

uint64_t CKFileSchemeAndSignatureSize(_BYTE *a1)
{
  uint64_t v1;

  v1 = CKFileSignatureSize(a1);
  if (v1)
    return v1 + 1;
  else
    return 0;
}

uint64_t CKFileSignatureGeneratorV1Finish(uint64_t a1, uint64_t a2, _QWORD *a3, CFErrorRef *a4)
{
  CFTypeRef *v8;
  _BYTE *v9;
  uint64_t v10;
  CFTypeRef v11;
  uint64_t v12;
  size_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  CFErrorRef v17;
  CFErrorRef v18;
  char v20;
  unsigned __int8 md[8];
  uint64_t v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (a4)
    *a4 = 0;
  *(_QWORD *)md = 0;
  v22 = 0;
  v23 = 0;
  v8 = (CFTypeRef *)(a1 + 32);
  if (*(_QWORD *)(a1 + 32))
  {
    v9 = 0;
    goto LABEL_5;
  }
  CC_SHA1_Final(md, *(CC_SHA1_CTX **)(a1 + 48));
  v20 = CKFileDigestArgumentsFileSchemeByte(*(_QWORD *)(a1 + 24));
  v9 = (_BYTE *)CKFileSchemeAndSignatureSize(&v20);
  v12 = CKFileSignatureSize(&v20);
  if (!v9)
    goto LABEL_22;
  v13 = v12;
  v14 = malloc_type_calloc(1uLL, (size_t)v9, 0x1C42D82EuLL);
  v9 = v14;
  if (!v14)
    goto LABEL_22;
  *v14 = v20;
  memcpy(v14 + 1, md, v13);
  CKFileDigestResultsCreate((_QWORD *)(a1 + 32), v9, *(_QWORD *)(a1 + 40), 0);
  v15 = *(_QWORD *)(a1 + 32);
  if (!v15)
    goto LABEL_22;
  if (!a2)
  {
LABEL_5:
    v10 = 1;
    if (!a3)
      goto LABEL_23;
    goto LABEL_6;
  }
  v16 = CKFileDigestResultsEqual(a2, v15);
  if (!(_DWORD)v16)
  {
    v17 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], CFSTR("com.apple.chunkinglibrary"), 3, 0);
    v18 = v17;
    if (a4 && v17)
    {
      CFRetain(v17);
      *a4 = v18;
LABEL_21:
      CFRelease(v18);
      goto LABEL_22;
    }
    if (v17)
      goto LABEL_21;
LABEL_22:
    v10 = 0;
    goto LABEL_23;
  }
  v10 = v16;
  if (!a3)
    goto LABEL_23;
LABEL_6:
  if (*v8)
  {
    CFRetain(*v8);
    v11 = *v8;
  }
  else
  {
    v11 = 0;
  }
  *a3 = v11;
LABEL_23:
  free(v9);
  return v10;
}

uint64_t CKFileDigestArgumentsV1FileSchemeByte(uint64_t a1)
{
  return **(unsigned __int8 **)(a1 + 24) | ((*(_BYTE *)(a1 + 20) == 0) << 7);
}

uint64_t CKFileSignatureGeneratorCreate(_QWORD *a1, const void *a2)
{
  int Class;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int *v8;
  uint64_t (*v9)(void);
  CFTypeRef v11;
  CFTypeRef cf;

  if (a1)
    *a1 = 0;
  Class = CKFileDigestArgumentsGetClass((uint64_t)a2);
  if (Class == 1)
  {
    cf = 0;
    v5 = 96;
  }
  else
  {
    if (Class != 2)
      return 0;
    cf = 0;
    v5 = 8;
  }
  v11 = 0;
  *a1 = 0;
  v6 = CKFileSignatureGeneratorAllocate((uint64_t *)&v11, Class, v5);
  v7 = 0;
  v8 = (int *)v11;
  if (v6 && v11)
  {
    cf = 0;
    CKBaseRetain(a2);
    *((_QWORD *)v8 + 3) = a2;
    v9 = _requestCallbacks_2[4 * v8[4]];
    if (v9 && ((unsigned int (*)(int *, const void *, CFTypeRef *))v9)(v8, a2, &cf))
    {
      CFRetain(v8);
      *a1 = v8;
      v7 = 1;
    }
    else
    {
      v7 = 0;
    }
  }
  if (cf)
    CFRelease(cf);
  if (v8)
    CFRelease(v8);
  return v7;
}

uint64_t CKFileSignatureSize(_BYTE *a1)
{
  uint64_t v1;
  CFStringRef v2;
  NSObject *v3;
  uint8_t buf[4];
  CFStringRef v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v1 = *a1 & 0x7F;
  if ((v1 - 1) < 0xB && ((0x48Bu >> (v1 - 1)) & 1) != 0)
    return 20;
  if (CK_DEFAULT_LOG_BLOCK_3 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_3, &__block_literal_global_3);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_3, OS_LOG_TYPE_ERROR))
  {
    v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Unknown file signature scheme: 0x%x\n"), v1);
    if (CK_DEFAULT_LOG_BLOCK_3 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_3, &__block_literal_global_5_1);
    v3 = CK_DEFAULT_LOG_INTERNAL_3;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v6 = v2;
      _os_log_impl(&dword_20A95C000, v3, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v2)
      CFRelease(v2);
  }
  return 0;
}

uint64_t CKFileSignatureGeneratorUpdate(uint64_t a1)
{
  uint64_t v1;

  v1 = *(int *)(a1 + 16);
  if ((_DWORD)v1)
    return _requestCallbacks_2[4 * v1 + 1]();
  else
    return 0;
}

void _CKFileSignatureGeneratorCFFinalize(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;

  v2 = *(int *)(a1 + 16);
  if ((_DWORD)v2)
    ((void (*)(uint64_t))_requestCallbacks_2[4 * v2 + 3])(a1);
  v3 = *(const void **)(a1 + 24);
  if (v3)
    CKBaseRelease(v3);
  *(_QWORD *)(a1 + 24) = 0;
  v4 = *(const void **)(a1 + 32);
  if (v4)
    CKBaseRelease(v4);
  *(_QWORD *)(a1 + 32) = 0;
}

uint64_t CKFileDigestResultsCreate(_QWORD *a1, _BYTE *a2, uint64_t a3, const void *a4)
{
  int v4;

  if (!a2)
    return 0;
  v4 = *a2 & 0x7F;
  if (v4 == 8 || v4 == 4)
    return CKFileDigestResultsV2Create(a1, a2, a3, a4);
  else
    return CKFileDigestResultsV1Create(a1, a2, a3);
}

uint64_t CKTypeRegister(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    pthread_mutex_lock(&CKTypeRegister_lock);
    if (!*a1)
      *a1 = _CFRuntimeRegisterClass();
    pthread_mutex_unlock(&CKTypeRegister_lock);
    return *a1;
  }
  return result;
}

uint64_t CKFileSignatureGeneratorFinish(uint64_t a1)
{
  uint64_t v1;

  v1 = *(int *)(a1 + 16);
  if ((_DWORD)v1)
    return _requestCallbacks_2[4 * v1 + 2]();
  else
    return 0;
}

void *CKFileSignatureCopy(_BYTE *a1)
{
  uint64_t v2;
  size_t v3;
  void *v4;
  void *v5;

  v2 = CKFileSignatureSize(a1);
  if (!v2)
    return 0;
  v3 = v2 + 1;
  v4 = malloc_type_malloc(v2 + 1, 0xDD5359uLL);
  v5 = v4;
  if (v4)
    memcpy(v4, a1, v3);
  return v5;
}

uint64_t CKFileSignatureGeneratorAllocate(uint64_t *a1, int a2, uint64_t a3)
{
  size_t v5;
  uint64_t v6;
  uint64_t result;

  *a1 = 0;
  v5 = a3 + 56;
  v6 = CKTypeRegister(&CKFileSignatureGeneratorGetTypeID_typeID);
  result = CKTypeCreateInstance_(0, v6, v5);
  if (result)
  {
    *(_DWORD *)(result + 16) = a2;
    *(_QWORD *)(result + 48) = result + 56;
    *a1 = result;
    return 1;
  }
  return result;
}

uint64_t _CKFileDigestArgumentsV1Create(CFTypeRef *a1, int a2, char a3, CFTypeRef *a4)
{
  int v8;
  uint64_t v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef cf;
  CFTypeRef v15;

  cf = 0;
  v15 = 0;
  *a1 = 0;
  v8 = CKFileDigestArgumentsAllocate((uint64_t *)&cf, 1, 4);
  v9 = 0;
  v10 = cf;
  if (v8 && cf)
  {
    if (_CKChunkDigestArgumentsInit((uint64_t)cf, a3, &v15))
    {
      v11 = cf;
      **((_DWORD **)cf + 3) = a2;
      CFRetain(v11);
      v12 = v15;
      *a1 = cf;
      v9 = 1;
    }
    else
    {
      v9 = 0;
      v12 = v15;
      if (a4 && v15)
      {
        CFRetain(v15);
        v9 = 0;
        v12 = v15;
        *a4 = v15;
      }
    }
    if (v12)
      CFRelease(v12);
    v10 = cf;
  }
  if (v10)
    CFRelease(v10);
  return v9;
}

uint64_t CKFileDigestArgumentsAllocate(uint64_t *a1, int a2, uint64_t a3)
{
  size_t v5;
  uint64_t v6;
  uint64_t result;

  *a1 = 0;
  v5 = a3 + 32;
  v6 = CKTypeRegister(&CKFileDigestArgumentsGetTypeID_typeID);
  result = CKTypeCreateInstance_(0, v6, v5);
  if (result)
  {
    *(_DWORD *)(result + 16) = a2;
    *(_QWORD *)(result + 24) = result + 32;
    *a1 = result;
    return 1;
  }
  return result;
}

uint64_t CKFileDigestResultsV1Create(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  CFTypeRef v8;
  int v9;
  CFTypeRef cf;
  uint64_t v12;

  cf = 0;
  v12 = 0;
  *a1 = 0;
  v6 = CKFileDigestResultsAllocate((uint64_t *)&cf, 1, 0);
  v7 = 0;
  v8 = cf;
  if (v6 && cf)
  {
    v9 = _CKFileDigestResultsInit((uint64_t)cf, a2, a3, &v12);
    v8 = cf;
    if (!v9)
    {
      v7 = 0;
      if (!cf)
        return v7;
      goto LABEL_8;
    }
    if (cf)
    {
      CFRetain(cf);
      v8 = cf;
    }
    *a1 = v8;
    v7 = 1;
  }
  if (v8)
LABEL_8:
    CFRelease(v8);
  return v7;
}

uint64_t CKTypeCreateInstance_(uint64_t a1, uint64_t a2, size_t a3)
{
  uint64_t v3;
  uint64_t Instance;

  if (HIDWORD(a3))
    return 0;
  Instance = _CFRuntimeCreateInstance();
  v3 = Instance;
  if (Instance)
    bzero((void *)(Instance + 16), a3);
  return v3;
}

uint64_t CKFileDigestResultsAllocate(uint64_t *a1, int a2, uint64_t a3)
{
  size_t v5;
  uint64_t v6;
  uint64_t result;

  *a1 = 0;
  v5 = a3 + 48;
  v6 = CKTypeRegister(&CKFileDigestResultsGetTypeID_typeID);
  result = CKTypeCreateInstance_(0, v6, v5);
  if (result)
  {
    *(_DWORD *)(result + 16) = a2;
    *(_QWORD *)(result + 40) = result + 48;
    *a1 = result;
    return 1;
  }
  return result;
}

uint64_t make_fd_uncached(int a1)
{
  return fcntl(a1, 48, 1);
}

uint64_t open_dir_for_fd(const char *a1)
{
  return open(a1, 0x200000);
}

uint64_t get_path_for_fd(int a1, char *a2)
{
  int v4;
  fsid_t v7;
  stat v8;

  memset(&v8, 0, sizeof(v8));
  v4 = -5;
  v7 = 0;
  while (1)
  {
    if (fstat(a1, &v8) < 0)
      return 0xFFFFFFFFLL;
    v7.val[1] = 0;
    v7.val[0] = v8.st_dev;
    if ((fsgetpath(a2, 0x400uLL, &v7, v8.st_ino) & 0x8000000000000000) == 0)
      break;
    if (*__error() != 35 || v4++ == 0)
      return 0xFFFFFFFFLL;
  }
  return 0;
}

uint64_t mkdir_recursive(uint64_t a1, mode_t a2)
{
  int v3;
  uint64_t result;
  char path[1024];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  bzero(path, 0x400uLL);
  if ((unint64_t)__strlcpy_chk() <= 0x3FF)
  {
    result = mkpath_np(path, a2);
    v3 = result;
    if (!(_DWORD)result)
      return result;
  }
  else
  {
    v3 = 63;
  }
  *__error() = v3;
  return 0xFFFFFFFFLL;
}

const void **CKChunkCryptorV2Finalize(uint64_t a1)
{
  const void **result;

  result = **(const void ****)(a1 + 40);
  if (result)
    return (const void **)CSContext_Destroy(result, 0);
  return result;
}

uint64_t CKChunkCryptorV2Init(uint64_t a1, int a2, uint64_t a3, int a4)
{
  unint64_t v4;
  uint64_t v8;
  const __CFAllocator *v9;
  const UInt8 *v10;
  CFIndex v11;
  const __CFData *v12;
  _BYTE *v13;
  const UInt8 *v14;
  CFIndex v15;
  const __CFData *v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFErrorRef v22;

  LODWORD(v4) = a4;
  v22 = 0;
  v8 = CKChunkDigestResultsChunkKey(a3);
  v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v10 = (const UInt8 *)(v8 + 1);
  v11 = CKEncryptionKeySize();
  v12 = CFDataCreate(v9, v10, v11);
  v13 = (_BYTE *)CKChunkDigestResultsChunkSignature(a3);
  v14 = v13 + 1;
  v15 = CKChunkSignatureSize(v13);
  v16 = CFDataCreate(v9, v14, v15);
  v17 = CKChunkDigestResultsChunkLength(a3);
  v18 = v17;
  if ((_DWORD)v4)
    v4 = v4;
  else
    v4 = v17;
  if (v4 < v17)
    CKChunkCryptorV2Init_cold_1();
  if (!CSContext_Initialize(*(_QWORD **)(a1 + 40), &v22))
    goto LABEL_11;
  v19 = **(_QWORD **)(a1 + 40);
  if (a2)
  {
    if (CSChunkCryptor_InitializeEncryptor(v19, v12, v16, v18, v4, &v22))
      goto LABEL_8;
LABEL_11:
    v20 = 0;
    if (!v12)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (!CSChunkCryptor_InitializeDecryptor(v19, v12, v16, v18, v4, &v22))
    goto LABEL_11;
LABEL_8:
  v20 = 1;
  if (v12)
LABEL_12:
    CFRelease(v12);
LABEL_13:
  if (v16)
    CFRelease(v16);
  return v20;
}

uint64_t CKChunkCryptorV2Update(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  CFTypeRef cf;

  cf = 0;
  v3 = CSChunkCryptor_Update(**(_QWORD **)(a1 + 40), a2, a3, (CFErrorRef *)&cf);
  if (cf)
    CFRelease(cf);
  return v3;
}

uint64_t CKChunkCryptorV2Finish(uint64_t a1, CFErrorRef *a2)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_BYTE *)CKChunkDigestResultsChunkSignature(*(_QWORD *)(a1 + 24));
  v5 = **(_QWORD **)(a1 + 40);
  v6 = (uint64_t)(v4 + 1);
  v7 = CKChunkSignatureSize(v4);
  return CSChunkCryptor_Finalize(v5, v6, v7, a2);
}

uint64_t CKChunkSignatureGeneratorAllocate(uint64_t *a1, int a2, uint64_t a3)
{
  size_t v5;
  uint64_t v6;
  uint64_t result;

  *a1 = 0;
  v5 = a3 + 56;
  v6 = CKTypeRegister(&CKChunkSignatureGeneratorGetTypeID_typeID);
  result = CKTypeCreateInstance_(0, v6, v5);
  if (result)
  {
    *(_DWORD *)(result + 16) = a2;
    *(_QWORD *)(result + 48) = result + 56;
    *a1 = result;
    return 1;
  }
  return result;
}

uint64_t CKChunkSignatureGeneratorCreate(_QWORD *a1, const void *a2)
{
  int Class;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int *v8;
  uint64_t (*v9)(void);
  CFTypeRef v11;
  CFTypeRef cf;

  if (!a1)
    return 0;
  *a1 = 0;
  Class = CKChunkDigestArgumentsGetClass((uint64_t)a2);
  if (Class != 1)
  {
    if (Class == 2)
    {
      cf = 0;
      v5 = 8;
      goto LABEL_7;
    }
    return 0;
  }
  cf = 0;
  v5 = 104;
LABEL_7:
  v11 = 0;
  *a1 = 0;
  v7 = CKChunkSignatureGeneratorAllocate((uint64_t *)&v11, Class, v5);
  v6 = 0;
  v8 = (int *)v11;
  if (v7 && v11)
  {
    cf = 0;
    CKBaseRetain(a2);
    *((_QWORD *)v8 + 3) = a2;
    v9 = _requestCallbacks[4 * v8[4]];
    if (v9 && ((unsigned int (*)(int *, const void *, CFTypeRef *))v9)(v8, a2, &cf))
    {
      CFRetain(v8);
      *a1 = v8;
      v6 = 1;
    }
    else
    {
      v6 = 0;
    }
  }
  if (cf)
    CFRelease(cf);
  if (v8)
    CFRelease(v8);
  return v6;
}

uint64_t CKChunkSignatureGeneratorUpdate(uint64_t a1)
{
  uint64_t v1;

  v1 = *(int *)(a1 + 16);
  if ((_DWORD)v1)
    return _requestCallbacks[4 * v1 + 1]();
  else
    return 0;
}

uint64_t CKChunkSignatureGeneratorFinish(uint64_t a1)
{
  uint64_t v1;

  v1 = *(int *)(a1 + 16);
  if ((_DWORD)v1)
    return _requestCallbacks[4 * v1 + 2]();
  else
    return 0;
}

void _CKChunkSignatureGeneratorCFFinalize(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;

  v2 = *(int *)(a1 + 16);
  if ((_DWORD)v2)
    ((void (*)(uint64_t))_requestCallbacks[4 * v2 + 3])(a1);
  v3 = *(const void **)(a1 + 24);
  if (v3)
    CKBaseRelease(v3);
  *(_QWORD *)(a1 + 24) = 0;
  v4 = *(const void **)(a1 + 32);
  if (v4)
    CKBaseRelease(v4);
  *(_QWORD *)(a1 + 32) = 0;
}

BOOL _CKChunkSignatureGeneratorCFEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t _CKChunkSignatureGeneratorCFCopyFormatDescription()
{
  return 0;
}

uint64_t _CKChunkSignatureGeneratorCFCopyDebugDescription()
{
  return 0;
}

uint64_t CSCopier_Destroy(uint64_t a1, CFErrorRef *a2)
{
  uint64_t v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  uint64_t result;
  CFErrorRef v11;

  if (a1 && (v4 = *(_QWORD *)(a1 + 64)) != 0)
  {
    if (*(_QWORD *)v4)
    {
      CFRelease(*(CFTypeRef *)v4);
      *(_QWORD *)v4 = 0;
    }
    v5 = *(const void **)(v4 + 8);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(v4 + 8) = 0;
    }
    v6 = *(const void **)(v4 + 16);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(v4 + 16) = 0;
    }
    v7 = *(const void **)(v4 + 24);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(v4 + 24) = 0;
    }
    v8 = *(const void **)(v4 + 32);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(v4 + 32) = 0;
    }
    v9 = *(const void **)(v4 + 40);
    if (v9)
      CFRelease(v9);
    free((void *)v4);
    *(_QWORD *)(a1 + 64) = 0;
    return 1;
  }
  else
  {
    v11 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFErrorDomain)*MEMORY[0x24BDBD390], 6, 0);
    result = 0;
    *a2 = v11;
  }
  return result;
}

uint64_t CSCopier_Initialize(uint64_t a1, const __CFData *a2, const __CFData *a3, const __CFData *a4, CFErrorRef *a5)
{
  const __CFData **v10;
  const __CFData **v11;
  uint64_t v12;
  int v13;
  const __CFAllocator *v14;
  const __CFData *v15;
  const __CFAllocator *v16;
  const __CFString *v17;
  CFIndex v18;
  CFErrorRef v19;
  uint64_t result;
  CFErrorRef v21;
  CFErrorRef *v22;
  UInt8 bytes[16];
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 32))
  {
    v16 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v17 = (const __CFString *)*MEMORY[0x24BDBD390];
    v18 = 6;
LABEL_8:
    v19 = CFErrorCreate(v16, v17, v18, 0);
    result = 0;
    *a5 = v19;
    return result;
  }
  v10 = (const __CFData **)malloc_type_malloc(0x30uLL, 0x60040620FCCB7uLL);
  if (!v10)
  {
    v16 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v17 = (const __CFString *)*MEMORY[0x24BDBD390];
    v18 = 1;
    goto LABEL_8;
  }
  v11 = v10;
  v22 = a5;
  v12 = ccsha256_di();
  *(_OWORD *)bytes = 0u;
  v24 = 0u;
  CFDataGetLength(*(CFDataRef *)(a1 + 32));
  CFDataGetBytePtr(*(CFDataRef *)(a1 + 32));
  CFDataGetLength(a3);
  CFDataGetBytePtr(a3);
  CFDataGetLength(a2);
  CFDataGetBytePtr(a2);
  v13 = cchkdf();
  v14 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (v13)
    goto LABEL_10;
  v15 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], bytes, 32);
  *v11 = v15;
  *(_OWORD *)bytes = 0u;
  v24 = 0u;
  if (a4)
  {
    CFDataGetLength(a4);
    CFDataGetBytePtr(a4);
    v15 = *v11;
  }
  CFDataGetLength(v15);
  CFDataGetBytePtr(*v11);
  if (cchkdf())
  {
LABEL_10:
    v21 = CFErrorCreate(v14, (CFErrorDomain)*MEMORY[0x24BDBD390], 2, 0);
    result = 0;
    *v22 = v21;
  }
  else
  {
    v11[1] = CFDataCreate(v14, bytes, 32);
    cc_clear();
    *(_QWORD *)(a1 + 64) = v11;
    return _CSCopier_DeriveKeysFromCopyKey(a1, v12, v22);
  }
  return result;
}

uint64_t _CSCopier_DeriveKeysFromCopyKey(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  uint64_t v4;
  int v5;
  const __CFAllocator *v6;
  const __CFString *v7;
  const __CFAllocator *v8;
  CFIndex v9;
  CFErrorRef v10;
  uint64_t result;
  UInt8 v12[16];
  __int128 v13;
  uint64_t v14;
  UInt8 bytes[16];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
  {
    v17 = 0;
    *(_OWORD *)bytes = 0u;
    v16 = 0u;
    CFDataGetLength(*(CFDataRef *)(v4 + 8));
    CFDataGetBytePtr(*(CFDataRef *)(v4 + 8));
    v5 = cchkdf();
    v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    if (!v5)
    {
      *(_QWORD *)(v4 + 16) = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], bytes, 8);
      *(_QWORD *)(v4 + 24) = CFDataCreate(v6, &bytes[8], 32);
      v14 = 0;
      *(_OWORD *)v12 = 0u;
      v13 = 0u;
      CFDataGetLength(*(CFDataRef *)(v4 + 8));
      CFDataGetBytePtr(*(CFDataRef *)(v4 + 8));
      if (!cchkdf())
      {
        *(_QWORD *)(v4 + 32) = CFDataCreate(v6, v12, 8);
        *(_QWORD *)(v4 + 40) = CFDataCreate(v6, &v12[8], 32);
        cc_clear();
        cc_clear();
        return 1;
      }
    }
    v7 = (const __CFString *)*MEMORY[0x24BDBD390];
    v8 = v6;
    v9 = 2;
  }
  else
  {
    v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v7 = (const __CFString *)*MEMORY[0x24BDBD390];
    v9 = 6;
  }
  v10 = CFErrorCreate(v8, v7, v9, 0);
  result = 0;
  *a3 = v10;
  return result;
}

uint64_t CSCopier_InitializeFromKey(uint64_t a1, const __CFData *a2, CFErrorRef *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  const __CFAllocator *v8;
  CFIndex Length;
  uint64_t v10;
  uint64_t result;
  CFErrorRef v12;

  v6 = malloc_type_malloc(0x30uLL, 0x60040620FCCB7uLL);
  if (v6)
  {
    v7 = v6;
    *(_QWORD *)(a1 + 64) = v6;
    v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Length = CFDataGetLength(a2);
    v7[1] = CFDataCreateMutableCopy(v8, Length, a2);
    v10 = ccsha256_di();
    result = _CSCopier_DeriveKeysFromCopyKey(a1, v10, a3);
    if ((_DWORD)result)
    {
      *(_QWORD *)(a1 + 64) = v7;
      return 1;
    }
  }
  else
  {
    v12 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFErrorDomain)*MEMORY[0x24BDBD390], 1, 0);
    result = 0;
    *a3 = v12;
  }
  return result;
}

uint64_t CSCopier_ExportCopyKey(uint64_t a1, CFMutableDataRef *a2, CFErrorRef *a3)
{
  uint64_t v4;
  const __CFData *v5;
  const __CFAllocator *v6;
  CFIndex Length;
  uint64_t result;
  const __CFAllocator *v10;
  const __CFString *v11;
  CFErrorRef v12;

  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
  {
    v5 = *(const __CFData **)(v4 + 8);
    v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    if (v5)
    {
      Length = CFDataGetLength(v5);
      *a2 = CFDataCreateMutableCopy(v6, Length, *(CFDataRef *)(v4 + 8));
      return 1;
    }
    v11 = (const __CFString *)*MEMORY[0x24BDBD390];
    v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  }
  else
  {
    v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v11 = (const __CFString *)*MEMORY[0x24BDBD390];
  }
  v12 = CFErrorCreate(v10, v11, 6, 0);
  result = 0;
  *a3 = v12;
  return result;
}

uint64_t CSCopier_ExportCopyCredentials(uint64_t a1, CFMutableDataRef *a2, CFMutableDataRef *a3, CFErrorRef *a4)
{
  uint64_t v5;
  const __CFData *v6;
  const __CFAllocator *v9;
  CFIndex Length;
  CFIndex v11;
  uint64_t result;
  CFErrorRef v13;

  v5 = *(_QWORD *)(a1 + 64);
  if (v5 && (v6 = *(const __CFData **)(v5 + 16)) != 0 && *(_QWORD *)(v5 + 24))
  {
    v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Length = CFDataGetLength(v6);
    *a2 = CFDataCreateMutableCopy(v9, Length, *(CFDataRef *)(v5 + 16));
    v11 = CFDataGetLength(*(CFDataRef *)(v5 + 24));
    *a3 = CFDataCreateMutableCopy(v9, v11, *(CFDataRef *)(v5 + 24));
    return 1;
  }
  else
  {
    v13 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFErrorDomain)*MEMORY[0x24BDBD390], 6, 0);
    result = 0;
    *a4 = v13;
  }
  return result;
}

uint64_t CSCopier_CreateChunkSignature(uint64_t a1, uint64_t a2, const __CFData *a3, CFErrorRef *a4)
{
  uint64_t v4;
  const __CFAllocator *v6;
  const __CFString *v7;
  CFIndex v8;

  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
  {
    if (a2)
      return _CSCopier_PermuteChunkSignature(a1, a2, *(const __CFData **)(v4 + 40), a3, a4);
    v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v7 = (const __CFString *)*MEMORY[0x24BDBD390];
    v8 = 11;
  }
  else
  {
    v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v7 = (const __CFString *)*MEMORY[0x24BDBD390];
    v8 = 6;
  }
  *a4 = CFErrorCreate(v6, v7, v8, 0);
  return 0;
}

uint64_t _CSCopier_PermuteChunkSignature(uint64_t a1, uint64_t a2, const __CFData *a3, const __CFData *a4, CFErrorRef *a5)
{
  uint64_t v6;
  const __CFData *v7;
  CFIndex v10;
  char v11;
  uint64_t result;
  CFErrorRef v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 64);
  if (v6 && (v7 = *(const __CFData **)(v6 + 32)) != 0)
  {
    v14[0] = a2;
    v14[1] = 0;
    if (CFDataGetLength(v7) >= 1)
    {
      v10 = 0;
      do
      {
        v11 = *((_BYTE *)v14 + v10);
        *((_BYTE *)v14 + v10) = CFDataGetBytePtr(*(CFDataRef *)(v6 + 32))[v10] ^ v11;
        ++v10;
      }
      while (CFDataGetLength(*(CFDataRef *)(v6 + 32)) > v10);
    }
    if (_CSCopier_EncryptBlob((uint64_t)v14, a3, a4, a5))
    {
      return 1;
    }
    else
    {
      cc_clear();
      return 0;
    }
  }
  else
  {
    v13 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFErrorDomain)*MEMORY[0x24BDBD390], 6, 0);
    result = 0;
    *a5 = v13;
  }
  return result;
}

uint64_t CSCopier_CreateFORD(uint64_t a1, const __CFData *a2, CFErrorRef *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 64);
  if (v3)
    return _CSCopier_PermuteFORD(a1, *(const __CFData **)(v3 + 24), a2, a3);
  *a3 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFErrorDomain)*MEMORY[0x24BDBD390], 6, 0);
  return 0;
}

uint64_t _CSCopier_PermuteFORD(uint64_t a1, const __CFData *a2, const __CFData *a3, CFErrorRef *a4)
{
  uint64_t v5;
  const __CFData *v6;
  CFIndex v9;
  char v10;
  uint64_t result;
  CFErrorRef v12;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 64);
  if (v5 && (v6 = *(const __CFData **)(v5 + 16)) != 0)
  {
    v13[0] = 0;
    v13[1] = 0;
    CFDataGetLength(v6);
    __memset_chk();
    if (CFDataGetLength(*(CFDataRef *)(v5 + 16)) >= 1)
    {
      v9 = 0;
      do
      {
        v10 = *((_BYTE *)v13 + v9);
        *((_BYTE *)v13 + v9) = CFDataGetBytePtr(*(CFDataRef *)(v5 + 16))[v9] ^ v10;
        ++v9;
      }
      while (CFDataGetLength(*(CFDataRef *)(v5 + 16)) > v9);
    }
    if (_CSCopier_EncryptBlob((uint64_t)v13, a2, a3, a4))
    {
      return 1;
    }
    else
    {
      cc_clear();
      return 0;
    }
  }
  else
  {
    v12 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFErrorDomain)*MEMORY[0x24BDBD390], 6, 0);
    result = 0;
    *a4 = v12;
  }
  return result;
}

uint64_t _CSCopier_PermuteFileSignature(uint64_t a1, const __CFData *a2, CFErrorRef *a3)
{
  uint64_t v4;
  const __CFData *v5;
  CFIndex v7;
  char v8;
  uint64_t result;
  CFErrorRef v10;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 64);
  if (v4 && (v5 = *(const __CFData **)(v4 + 32)) != 0)
  {
    v11[0] = 0;
    v11[1] = 0;
    CFDataGetLength(v5);
    __memset_chk();
    if (CFDataGetLength(*(CFDataRef *)(v4 + 32)) >= 1)
    {
      v7 = 0;
      do
      {
        v8 = *((_BYTE *)v11 + v7);
        *((_BYTE *)v11 + v7) = CFDataGetBytePtr(*(CFDataRef *)(v4 + 32))[v7] ^ v8;
        ++v7;
      }
      while (CFDataGetLength(*(CFDataRef *)(v4 + 32)) > v7);
    }
    if (_CSCopier_EncryptBlob((uint64_t)v11, *(const __CFData **)(v4 + 40), a2, a3))
    {
      return 1;
    }
    else
    {
      cc_clear();
      return 0;
    }
  }
  else
  {
    v10 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFErrorDomain)*MEMORY[0x24BDBD390], 6, 0);
    result = 0;
    *a3 = v10;
  }
  return result;
}

uint64_t _CSCopier_EncryptBlob(uint64_t a1, const __CFData *a2, const __CFData *a3, CFErrorRef *a4)
{
  CFErrorRef v7;
  uint64_t result;

  ccaes_ctr_crypt_mode();
  CFDataGetLength(a2);
  CFDataGetBytePtr(a2);
  CFDataGetLength(a3);
  CFDataGetBytePtr(a3);
  CFDataGetBytePtr(a3);
  if (!ccctr_one_shot())
    return 1;
  v7 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFErrorDomain)*MEMORY[0x24BDBD390], 10, 0);
  result = 0;
  *a4 = v7;
  return result;
}

uint64_t CKStreamKeyDerivation(CFDataRef theData, const __CFData *a2, const __CFData *a3, CFDataRef *a4, CFDataRef *a5)
{
  const __CFString *v10;
  CFErrorRef v11;
  CFDataRef v12;
  uint64_t v13;
  uint64_t result;
  CFIndex Length;
  const UInt8 *BytePtr;
  uint64_t v17;
  const __CFAllocator *v18;
  CFDataRef v19;
  CFIndex v20;
  UInt8 bytes[16];
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)bytes = 0u;
  v22 = 0u;
  if (a4)
    *a4 = 0;
  if (a5)
    *a5 = 0;
  if (!theData || CFDataGetLength(theData) != 16)
  {
    v10 = CFSTR("Bad assetKey");
    goto LABEL_14;
  }
  if (!a3 || CFDataGetLength(a3) != 16)
  {
    v10 = CFSTR("Bad salt");
    goto LABEL_14;
  }
  if (!a2 || CFDataGetLength(a2) <= 15)
  {
    v10 = CFSTR("Bad concatenatedChunkKeys");
LABEL_14:
    v11 = CKErrorCreateWithFormat(6, v10);
    goto LABEL_15;
  }
  CFDataGetBytePtr(theData);
  CFDataGetLength(theData);
  CFDataGetBytePtr(a2);
  Length = CFDataGetLength(a2);
  BytePtr = CFDataGetBytePtr(a3);
  v20 = CFDataGetLength(a3);
  v17 = CCKeyDerivationHMac();
  if ((_DWORD)v17)
  {
    v11 = CKErrorCreateWithFormat(5, CFSTR("CCKeyDerivationHMac %d"), v17, 0, 0, BytePtr, v20, bytes, 32);
  }
  else
  {
    if (!a4)
      return 1;
    v18 = (const __CFAllocator *)SecCFAllocatorZeroize();
    v19 = CFDataCreate(v18, bytes, 32);
    if (v19)
    {
      v12 = v19;
      CFRetain(v19);
      *a4 = v12;
      v13 = 1;
      goto LABEL_19;
    }
    v11 = CKErrorCreateWithFormat(2, CFSTR("CKStreamKeyDerivation"), Length, 0, 0, BytePtr, v20, bytes, 32);
  }
LABEL_15:
  v12 = v11;
  if (a5 && v11)
  {
    CFRetain(v11);
    v13 = 0;
    *a5 = v12;
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v12)
      return result;
  }
LABEL_19:
  CFRelease(v12);
  return v13;
}

uint64_t CKChunkCryptorAllocate(uint64_t *a1, int a2, uint64_t a3)
{
  size_t v5;
  uint64_t v6;
  uint64_t result;

  *a1 = 0;
  v5 = a3 + 48;
  v6 = CKTypeRegister(&CKChunkCryptorGetTypeID_typeID);
  result = CKTypeCreateInstance_(0, v6, v5);
  if (result)
  {
    *(_DWORD *)(result + 16) = a2;
    *(_QWORD *)(result + 40) = result + 48;
    *a1 = result;
    return 1;
  }
  return result;
}

uint64_t CKChunkCryptorCreate(_QWORD *a1, uint64_t a2, const void *a3, uint64_t a4)
{
  int Class;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int *v12;
  uint64_t (*v13)(void);
  CFTypeRef v15;
  CFTypeRef cf;

  if (!a1)
    return 0;
  *a1 = 0;
  Class = CKChunkDigestResultsGetClass((uint64_t)a3);
  if (Class != 1)
  {
    if (Class == 2)
    {
      cf = 0;
      v9 = 8;
      goto LABEL_7;
    }
    return 0;
  }
  cf = 0;
  v9 = 16;
LABEL_7:
  v15 = 0;
  *a1 = 0;
  v11 = CKChunkCryptorAllocate((uint64_t *)&v15, Class, v9);
  v10 = 0;
  v12 = (int *)v15;
  if (v11 && v15)
  {
    cf = 0;
    CKBaseRetain(a3);
    *((_QWORD *)v12 + 3) = a3;
    v13 = _requestCallbacks_0[4 * v12[4]];
    if (v13
      && ((unsigned int (*)(int *, uint64_t, const void *, uint64_t, CFTypeRef *))v13)(v12, a2, a3, a4, &cf))
    {
      CFRetain(v12);
      *a1 = v12;
      v10 = 1;
    }
    else
    {
      v10 = 0;
    }
  }
  if (cf)
    CFRelease(cf);
  if (v12)
    CFRelease(v12);
  return v10;
}

uint64_t CKChunkCryptorUpdate(uint64_t a1)
{
  uint64_t v1;

  v1 = *(int *)(a1 + 16);
  if ((_DWORD)v1)
    return _requestCallbacks_0[4 * v1 + 1]();
  else
    return 0;
}

uint64_t CKChunkCryptorFinish(uint64_t a1)
{
  uint64_t v1;

  v1 = *(int *)(a1 + 16);
  if ((_DWORD)v1)
    return _requestCallbacks_0[4 * v1 + 2]();
  else
    return 0;
}

void _CKChunkCryptorCFFinalize(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = *(int *)(a1 + 16);
  if ((_DWORD)v2)
    ((void (*)(uint64_t))_requestCallbacks_0[4 * v2 + 3])(a1);
  v3 = *(const void **)(a1 + 24);
  if (v3)
    CKBaseRelease(v3);
  *(_QWORD *)(a1 + 24) = 0;
}

BOOL _CKChunkCryptorCFEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t _CKChunkCryptorCFCopyFormatDescription()
{
  return 0;
}

uint64_t _CKChunkCryptorCFCopyDebugDescription()
{
  return 0;
}

uint64_t CKChunkDigestResultsV1Alloc(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  *a1 = 0;
  v3 = 0;
  result = CKChunkDigestResultsAllocate(&v3, 1, 0);
  if ((_DWORD)result)
    *a1 = v3;
  return result;
}

uint64_t CKChunkDigestResultsV1Create(_QWORD *a1, _BYTE *a2, unsigned __int8 *a3, int a4)
{
  uint64_t v8;
  CFTypeRef v9;
  CFTypeRef cf;
  CFTypeRef v12;

  v12 = 0;
  if (!a1)
    return 0;
  *a1 = 0;
  cf = 0;
  v8 = 0;
  if (CKChunkDigestResultsAllocate((uint64_t *)&cf, 1, 0) && cf)
  {
    if (_CKChunkDigestResultsInit((uint64_t)cf, a2, a3, a4, &v12))
    {
      if (cf)
      {
        CFRetain(cf);
        v9 = cf;
      }
      else
      {
        v9 = 0;
      }
      *a1 = v9;
      v8 = 1;
    }
    else
    {
      v8 = 0;
    }
  }
  if (v12)
    CFRelease(v12);
  if (cf)
    CFRelease(cf);
  return v8;
}

BOOL CKChunkDigestResultsV1SignatureAndKeyEqual(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  result = 0;
  if (a1 && a2)
  {
    if (a1 == a2)
      return 1;
    if (*(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
    {
      result = CKChunkSignaturesEqual(*(_BYTE **)(a1 + 24), *(_BYTE **)(a2 + 24));
      if (!result)
        return result;
      v5 = *(unsigned __int8 **)(a1 + 32);
      v6 = *(unsigned __int8 **)(a2 + 32);
      if (!((unint64_t)v5 | (unint64_t)v6))
        return 1;
      return CKChunkKeysEqual(v5, v6);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CKChunkDigestArgumentsAllocate(uint64_t *a1, int a2, uint64_t a3)
{
  size_t v5;
  uint64_t v6;
  uint64_t result;

  *a1 = 0;
  v5 = a3 + 32;
  v6 = CKTypeRegister(&CKChunkDigestArgumentsGetTypeID_typeID);
  result = CKTypeCreateInstance_(0, v6, v5);
  if (result)
  {
    *(_DWORD *)(result + 16) = a2;
    *(_QWORD *)(result + 24) = result + 32;
    *a1 = result;
    return 1;
  }
  return result;
}

uint64_t _CKChunkDigestArgumentsInit(uint64_t a1, char a2, _QWORD *a3)
{
  if (a3)
    *a3 = 0;
  *(_BYTE *)(a1 + 20) = a2;
  return 1;
}

uint64_t CKChunkDigestArgumentsChunkScheme(uint64_t a1)
{
  uint64_t (*v1)(void);

  v1 = (uint64_t (*)(void))_requestCallbacks_1[6 * *(int *)(a1 + 16)];
  if (v1)
    return v1();
  else
    return 0;
}

uint64_t CKChunkDigestArgumentsChunkSchemeByte(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16);
  if (v1)
    return ((uint64_t (*)(void))_requestCallbacks_1[6 * v1 + 1])();
  else
    return 0;
}

uint64_t CKChunkDigestArgumentsChunkEncryptionKeyScheme(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16);
  if (v1)
    return ((uint64_t (*)(void))_requestCallbacks_1[6 * v1 + 2])();
  else
    return 0;
}

uint64_t CKChunkDigestArgumentsChunkEncryptionKeySchemeByte(uint64_t a1)
{
  int v1;
  uint64_t result;

  v1 = *(_DWORD *)(a1 + 16);
  if (v1)
    LOBYTE(result) = ((uint64_t (*)(void))_requestCallbacks_1[6 * v1 + 2])();
  else
    LOBYTE(result) = 0;
  return result;
}

uint64_t CKChunkDigestArgumentsChunkEncrypted(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 20);
}

uint64_t CKChunkDigestArgumentsBoundaryKey(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 16);
  if (v1 >= 2)
    return ((uint64_t (*)(void))_requestCallbacks_1[6 * (int)v1 + 3])();
  else
    return 0;
}

uint64_t CKChunkDigestArgumentsGetClass(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t _CKChunkDigestArgumentsCFFinalize(uint64_t result)
{
  int v1;

  v1 = *(_DWORD *)(result + 16);
  if (v1)
    return ((uint64_t (*)(void))_requestCallbacks_1[6 * v1 + 5])();
  return result;
}

BOOL _CKChunkDigestArgumentsCFEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t _CKChunkDigestArgumentsCFCopyFormatDescription(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16);
  if (v1)
    return ((uint64_t (*)(void))_requestCallbacks_1[6 * v1 + 4])();
  else
    return 0;
}

uint64_t _CKChunkDigestArgumentsCFCopyDebugDescription(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16);
  if (v1)
    return ((uint64_t (*)(void))_requestCallbacks_1[6 * v1 + 4])();
  else
    return 0;
}

uint64_t CKFileDigestArgumentsV2Alloc(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  *a1 = 0;
  v3 = 0;
  result = CKFileDigestArgumentsAllocate(&v3, 1, 24);
  if ((_DWORD)result)
    *a1 = v3;
  return result;
}

uint64_t CKFileDigestArgumentsV2FileScheme(uint64_t a1)
{
  return **(unsigned int **)(a1 + 24);
}

uint64_t CKFileDigestArgumentsV2FileSchemeByte(uint64_t a1)
{
  return **(unsigned __int8 **)(a1 + 24) | ((*(_BYTE *)(a1 + 20) == 0) << 7);
}

void CKFileDigestArgumentsV2Finalize(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  const void *v5;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(const void **)(v2 + 8);
  if (v3)
  {
    CFRelease(v3);
    v2 = *(_QWORD *)(a1 + 24);
  }
  *(_QWORD *)(v2 + 8) = 0;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(const void **)(v4 + 16);
  if (v5)
  {
    CFRelease(v5);
    v4 = *(_QWORD *)(a1 + 24);
  }
  *(_QWORD *)(v4 + 16) = 0;
}

uint64_t CKFileDigestArgumentsV2WithBoundaryKeyCreate(CFTypeRef *a1, const void *a2, CFTypeRef *a3)
{
  return _CKFileDigestArgumentsV2Create(a1, 4, a2, 0, a3);
}

uint64_t _CKFileDigestArgumentsV2Create(CFTypeRef *a1, int a2, const void *a3, const void *a4, CFTypeRef *a5)
{
  int v10;
  uint64_t v11;
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef v14;
  CFTypeRef cf;
  CFTypeRef v17;

  cf = 0;
  v17 = 0;
  *a1 = 0;
  if ((a3 != 0) == (a4 != 0))
    return 0;
  v10 = CKFileDigestArgumentsAllocate((uint64_t *)&cf, 2, 24);
  v11 = 0;
  v12 = cf;
  if (v10 && cf)
  {
    if (_CKChunkDigestArgumentsInit((uint64_t)cf, 1, &v17))
    {
      v13 = cf;
      **((_DWORD **)cf + 3) = a2;
      if (a3)
      {
        CFRetain(a3);
        v13 = cf;
        *(_QWORD *)(*((_QWORD *)cf + 3) + 8) = a3;
      }
      if (a4)
      {
        CFRetain(a4);
        v13 = cf;
        *(_QWORD *)(*((_QWORD *)cf + 3) + 16) = a4;
      }
      CFRetain(v13);
      v14 = v17;
      *a1 = cf;
      v11 = 1;
    }
    else
    {
      v11 = 0;
      v14 = v17;
      if (a5 && v17)
      {
        CFRetain(v17);
        v11 = 0;
        v14 = v17;
        *a5 = v17;
      }
    }
    if (v14)
      CFRelease(v14);
    v12 = cf;
  }
  if (v12)
    CFRelease(v12);
  return v11;
}

uint64_t CKFileDigestArgumentsV2WithFileKeyCreate(CFTypeRef *a1, const void *a2, CFTypeRef *a3)
{
  return _CKFileDigestArgumentsV2Create(a1, 4, 0, a2, a3);
}

uint64_t CKFileDigestArgumentsV2ForPackageWithBoundaryKeyCreate(CFTypeRef *a1, const void *a2, CFTypeRef *a3)
{
  return _CKFileDigestArgumentsV2Create(a1, 8, a2, 0, a3);
}

uint64_t CKFileDigestArgumentsV2ForPackageWithVerificationKeyCreate(CFTypeRef *a1, const void *a2, CFTypeRef *a3)
{
  return _CKFileDigestArgumentsV2Create(a1, 8, 0, a2, a3);
}

uint64_t CKFileDigestArgumentsV2BoundaryKey(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
}

uint64_t CKFileDigestArgumentsV2FileKey(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
}

CFStringRef CKFileDigestArgumentsV2CopyDescription(uint64_t a1)
{
  uint64_t v2;
  const __CFData *v3;
  const __CFString *v4;
  CFStringRef hex_with_data;
  CFStringRef v6;
  const char *v7;
  CFStringRef v8;
  const char *v10;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(const __CFData **)(v2 + 8);
  if (v3)
  {
    v4 = CFSTR("boundaryKey");
  }
  else
  {
    v3 = *(const __CFData **)(v2 + 16);
    if (!v3)
      goto LABEL_10;
    v4 = CFSTR("fileKey");
  }
  hex_with_data = ck_cfstring_create_hex_with_data(v3);
  if (hex_with_data)
  {
    v6 = hex_with_data;
    if (*(_BYTE *)(a1 + 20))
      v7 = (const char *)&unk_20A9A57CA;
    else
      v7 = "un";
    v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("v2 %sencrypted %@ %@"), v7, v4, hex_with_data);
    CFRelease(v6);
    return v8;
  }
LABEL_10:
  if (*(_BYTE *)(a1 + 20))
    v10 = (const char *)&unk_20A9A57CA;
  else
    v10 = "un";
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("v2 %sencrypted (null keys)"), v10);
}

BOOL _CKFileSignatureGeneratorCFEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t _CKFileSignatureGeneratorCFCopyFormatDescription()
{
  return 0;
}

uint64_t _CKFileSignatureGeneratorCFCopyDebugDescription()
{
  return 0;
}

uint64_t CSsql_doV(sqlite3 *a1, char *a2, va_list a3)
{
  char *v4;
  char *v5;
  uint64_t v6;
  CFStringRef v7;
  NSObject *v8;
  uint64_t v9;
  CFStringRef v10;
  NSObject *v11;
  char *errmsg;
  uint8_t buf[4];
  CFStringRef v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = sqlite3_vmprintf(a2, a3);
  if (!v4)
    return 1;
  v5 = v4;
  if (!a1)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("SQL DB not open: '%s'\n"), v5);
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_5);
      v8 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v15 = v7;
        _os_log_impl(&dword_20A95C000, v8, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v7)
        CFRelease(v7);
    }
    sqlite3_free(v5);
    return 1;
  }
  sqlite3_busy_timeout(a1, 5000);
  errmsg = 0;
  if (CSSQLiteCorruptionTestingEnabled())
    v6 = CS_corruption_causing_sqlite3_exec(a1, v5, 0, 0, &errmsg);
  else
    v6 = sqlite3_exec(a1, v5, 0, 0, &errmsg);
  v9 = v6;
  if ((_DWORD)v6)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_8);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("SQL error: '%s', (%d) %s\n"), v5, v9, errmsg);
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_13);
      v11 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v15 = v10;
        _os_log_impl(&dword_20A95C000, v11, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v10)
        CFRelease(v10);
    }
  }
  sqlite3_free(v5);
  sqlite3_free(errmsg);
  return v9;
}

uint64_t CSsql_do(sqlite3 *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return CSsql_doV(a1, a2, &a9);
}

const void *CSsql_get64(uint64_t a1, char a2, char *a3, ...)
{
  char *v6;
  const void *v7;
  sqlite3 *DB;
  sqlite3 *v9;
  uint64_t v10;
  uint64_t v11;
  const __CFAllocator *v12;
  const char *v13;
  NSObject *v14;
  uint64_t v16;
  uint64_t v17;
  const __CFAllocator *v18;
  const char *v19;
  NSObject *v20;
  sqlite3_stmt *ppStmt[2];
  uint8_t buf[4];
  const void *v23;
  uint64_t v24;
  va_list va;

  va_start(va, a3);
  v24 = *MEMORY[0x24BDAC8D0];
  ppStmt[0] = 0;
  va_copy((va_list)&ppStmt[1], va);
  v6 = sqlite3_vmprintf(a3, va);
  if ((a2 & 1) != 0 || !CKReadLockChunkStore(a1))
  {
    DB = (sqlite3 *)CSChunkStoreGetDB(a1);
    if (!DB)
    {
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_15);
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        goto LABEL_23;
      v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("%s SQL DB not open: '%s'"), "CSsql_get64", a3);
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_19);
      v14 = CK_DEFAULT_LOG_INTERNAL;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        goto LABEL_21;
      *(_DWORD *)buf = 138543362;
      v23 = v7;
      goto LABEL_20;
    }
    v9 = DB;
    v10 = sqlite3_prepare_v2(DB, v6, -1, ppStmt, 0);
    if ((_DWORD)v10)
    {
      v11 = v10;
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_22);
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        goto LABEL_23;
      v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v13 = sqlite3_errmsg(v9);
      v7 = CFStringCreateWithFormat(v12, 0, CFSTR("sqlite3_prepare_v2 failed: %d %s"), v11, v13);
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_27);
      v14 = CK_DEFAULT_LOG_INTERNAL;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
LABEL_21:
        if (!v7)
          goto LABEL_24;
        CFRelease(v7);
LABEL_23:
        v7 = 0;
LABEL_24:
        if ((a2 & 1) != 0)
          goto LABEL_26;
LABEL_25:
        CKUnlockChunkStore(a1);
        goto LABEL_26;
      }
      *(_DWORD *)buf = 138543362;
      v23 = v7;
LABEL_20:
      _os_log_impl(&dword_20A95C000, v14, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      goto LABEL_21;
    }
    v16 = sqlite3_step(ppStmt[0]);
    if ((_DWORD)v16 != 101)
    {
      v17 = v16;
      if ((_DWORD)v16 == 100)
      {
        v7 = (const void *)sqlite3_column_int64(ppStmt[0], 0);
        goto LABEL_40;
      }
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_30);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        v18 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v19 = sqlite3_errmsg(v9);
        v7 = CFStringCreateWithFormat(v18, 0, CFSTR("sqlite3_step failed: %d %s"), v17, v19);
        if (CK_DEFAULT_LOG_BLOCK != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_35);
        v20 = CK_DEFAULT_LOG_INTERNAL;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          v23 = v7;
          _os_log_impl(&dword_20A95C000, v20, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (!v7)
        {
LABEL_40:
          sqlite3_finalize(ppStmt[0]);
          if ((a2 & 1) != 0)
            goto LABEL_26;
          goto LABEL_25;
        }
        CFRelease(v7);
      }
    }
    v7 = 0;
    goto LABEL_40;
  }
  v7 = 0;
LABEL_26:
  sqlite3_free(v6);
  return v7;
}

CFStringRef CSsql_get64_safe(uint64_t a1, char a2, sqlite3_int64 *a3, char *a4, ...)
{
  char *v8;
  CFStringRef v9;
  sqlite3 *DB;
  sqlite3 *v11;
  uint64_t v12;
  uint64_t v13;
  const __CFAllocator *v14;
  const char *v15;
  NSObject *v16;
  CFStringRef v17;
  NSObject *v18;
  uint64_t v20;
  uint64_t v21;
  const __CFAllocator *v22;
  const char *v23;
  CFStringRef v24;
  NSObject *v25;
  sqlite3_stmt *ppStmt;
  va_list v27;
  uint8_t buf[4];
  CFStringRef v29;
  uint64_t v30;
  va_list va;

  va_start(va, a4);
  v30 = *MEMORY[0x24BDAC8D0];
  ppStmt = 0;
  v27 = 0;
  if (a3)
  {
    va_copy(v27, va);
    v8 = sqlite3_vmprintf(a4, va);
    if ((a2 & 1) == 0 && CKReadLockChunkStore(a1))
    {
      v9 = 0;
LABEL_37:
      sqlite3_free(v8);
      return v9;
    }
    DB = (sqlite3 *)CSChunkStoreGetDB(a1);
    if (DB)
    {
      v11 = DB;
      v12 = sqlite3_prepare_v2(DB, v8, -1, &ppStmt, 0);
      if (!(_DWORD)v12)
      {
        v20 = sqlite3_step(ppStmt);
        v9 = (CFStringRef)((_DWORD)v20 == 100);
        if ((_DWORD)v20 == 100)
        {
          *a3 = sqlite3_column_int64(ppStmt, 0);
        }
        else
        {
          v21 = v20;
          if ((_DWORD)v20 != 101)
          {
            if (CK_DEFAULT_LOG_BLOCK != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_56);
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
            {
              v22 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
              v23 = sqlite3_errmsg(v11);
              v24 = CFStringCreateWithFormat(v22, 0, CFSTR("sqlite3_step failed: %d %s"), v21, v23);
              if (CK_DEFAULT_LOG_BLOCK != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_59);
              v25 = CK_DEFAULT_LOG_INTERNAL;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138543362;
                v29 = v24;
                _os_log_impl(&dword_20A95C000, v25, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
              }
              if (v24)
                CFRelease(v24);
            }
          }
        }
        sqlite3_finalize(ppStmt);
        if ((a2 & 1) != 0)
          goto LABEL_37;
        goto LABEL_36;
      }
      v13 = v12;
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_50);
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        goto LABEL_34;
      v14 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v15 = sqlite3_errmsg(v11);
      v9 = CFStringCreateWithFormat(v14, 0, CFSTR("sqlite3_prepare_v2 failed: %d %s"), v13, v15);
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_53);
      v16 = CK_DEFAULT_LOG_INTERNAL;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        goto LABEL_32;
      *(_DWORD *)buf = 138543362;
      v29 = v9;
    }
    else
    {
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_44);
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        goto LABEL_34;
      v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("%s SQL DB not open: '%s'"), "CSsql_get64_safe", a4);
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_47);
      v16 = CK_DEFAULT_LOG_INTERNAL;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
LABEL_32:
        if (!v9)
          goto LABEL_35;
        CFRelease(v9);
LABEL_34:
        v9 = 0;
LABEL_35:
        if ((a2 & 1) != 0)
          goto LABEL_37;
LABEL_36:
        CKUnlockChunkStore(a1);
        goto LABEL_37;
      }
      *(_DWORD *)buf = 138543362;
      v29 = v9;
    }
    _os_log_impl(&dword_20A95C000, v16, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    goto LABEL_32;
  }
  if (CK_DEFAULT_LOG_BLOCK != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_37);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
  {
    v17 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("out64 parameter is NULL!"));
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_41);
    v18 = CK_DEFAULT_LOG_INTERNAL;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v29 = v17;
      _os_log_impl(&dword_20A95C000, v18, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v17)
      CFRelease(v17);
  }
  return 0;
}

uint64_t CSopenDB(const char *a1, sqlite3 **a2, int a3)
{
  int v6;
  int v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  sqlite3 *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  NSObject *v19;
  uint32_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  NSObject *v25;
  uint32_t v26;
  NSObject *v27;
  uint64_t v29;
  CFStringRef v30;
  NSObject *v31;
  sqlite3 *v32;
  sqlite3_stmt *v33;
  uint64_t v34;
  uint64_t v35;
  CFStringRef v36;
  NSObject *v37;
  unint64_t v38;
  NSObject *v39;
  uint64_t v40;
  const char *v41;
  NSObject *v42;
  uint64_t v43;
  const char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  const char *v51;
  sqlite3_stmt *pStmt;
  sqlite3 *pDb;
  void *v54;
  uint8_t buf[4];
  _BYTE v56[28];
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  pDb = 0;
  v54 = 0;
  pStmt = 0;
  v6 = CS_corruption_checking_sqlite3_open_v2(a1, a3, &pDb, 65570);
  if (!v6)
  {
LABEL_9:
    sqlite3_busy_timeout(pDb, 5000);
    if (CS_corruption_checking_sqlite3_exec(a1, a3, pDb, "PRAGMA locking_mode = EXCLUSIVE;",
                         (char **)&v54))
    {
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_68);
      v10 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v56 = v54;
        _os_log_impl(&dword_20A95C000, v10, OS_LOG_TYPE_ERROR, "failed to set locking_mode on db (%s)", buf, 0xCu);
      }
      sqlite3_free(v54);
      v54 = 0;
    }
    if (CS_corruption_checking_sqlite3_exec(a1, a3, pDb, "PRAGMA page_size = 4096;", (char **)&v54))
    {
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_72);
      v11 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v56 = v54;
        _os_log_impl(&dword_20A95C000, v11, OS_LOG_TYPE_ERROR, "failed to set page_size pragma on db (%s)", buf, 0xCu);
      }
      sqlite3_free(v54);
      v54 = 0;
    }
    if (CS_corruption_checking_sqlite3_exec(a1, a3, pDb, "PRAGMA journal_mode = WAL;", (char **)&v54))
    {
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_76);
      v12 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v56 = v54;
        _os_log_impl(&dword_20A95C000, v12, OS_LOG_TYPE_ERROR, "failed to set journal mode (%s)", buf, 0xCu);
      }
      sqlite3_free(v54);
      v54 = 0;
    }
    if (CS_corruption_checking_sqlite3_exec(a1, a3, pDb, "PRAGMA wal_autocheckpoint = 2000;",
                         (char **)&v54))
    {
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_80);
      v13 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v56 = v54;
        _os_log_impl(&dword_20A95C000, v13, OS_LOG_TYPE_ERROR, "failed to set wal_autocheckpoint (%s)", buf, 0xCu);
      }
      sqlite3_free(v54);
      v54 = 0;
    }
    CSsql_corruption_checking_do(a1, a3, pDb, "PRAGMA temp_store = MEMORY");
    v7 = CSsql_corruption_checking_do(a1, a3, pDb, "BEGIN EXCLUSIVE");
    if (v7)
      goto LABEL_42;
    v7 = CSsql_corruption_checking_do(a1, a3, pDb, "CREATE TABLE IF NOT EXISTS CSDatabaseVersion (version INTEGER)");
    if (v7)
      goto LABEL_42;
    v14 = pDb;
    if (CSSQLiteCorruptionTestingEnabled())
      v15 = CS_corruption_causing_sqlite3_prepare_v2(v14, "SELECT version FROM CSDatabaseVersion", -1, &pStmt, 0);
    else
      v15 = sqlite3_prepare_v2(v14, "SELECT version FROM CSDatabaseVersion", -1, &pStmt, 0);
    v29 = v15;
    _CSHandleDatabaseIOError(v15);
    if ((_DWORD)v29)
    {
      if ((_DWORD)v29 == 26 || (_DWORD)v29 == 11)
      {
        if (CK_DEFAULT_LOG_BLOCK != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_562);
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        {
          v30 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("chunk store database corruption: detected error %d in sqlite3_prepare_v2"), v29);
          if (CK_DEFAULT_LOG_BLOCK != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_566);
          v31 = CK_DEFAULT_LOG_INTERNAL;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)v56 = v30;
            _os_log_impl(&dword_20A95C000, v31, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
          }
          if (v30)
            CFRelease(v30);
        }
        _CSBruteForceDatabaseCorruptionRecovery(a1, v14, a3);
      }
      goto LABEL_48;
    }
    v33 = pStmt;
    v32 = pDb;
    if (CSSQLiteCorruptionTestingEnabled())
      v34 = CS_corruption_causing_sqlite3_step(v33);
    else
      v34 = sqlite3_step(v33);
    v35 = v34;
    _CSHandleDatabaseIOError(v34);
    switch((_DWORD)v35)
    {
      case 0xB:
        goto LABEL_76;
      case 0x64:
        v38 = sqlite3_column_int64(pStmt, 0);
LABEL_88:
        sqlite3_reset(pStmt);
        sqlite3_finalize(pStmt);
        pStmt = 0;
        if ((a3 & 1) != 0)
        {
          if (CK_DEFAULT_LOG_BLOCK != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_92);
          v39 = CK_DEFAULT_LOG_INTERNAL;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEFAULT))
          {
            if (v38)
              v40 = v38;
            else
              v40 = 10;
            *(_DWORD *)buf = 134218498;
            *(_QWORD *)v56 = v40;
            v41 = "Y";
            if (v38)
              v41 = "N";
            *(_WORD *)&v56[8] = 2048;
            *(_QWORD *)&v56[10] = 10;
            *(_WORD *)&v56[18] = 2082;
            *(_QWORD *)&v56[20] = v41;
            _os_log_impl(&dword_20A95C000, v39, OS_LOG_TYPE_DEFAULT, "ChunkRegistry ver=%llu/%llu isNew=%{public}s", buf, 0x20u);
          }
          v7 = CSsql_corruption_checking_do(a1, 1, pDb, "CREATE TABLE IF NOT EXISTS CSRegisteredFileTable (crt_rowid INTEGER PRIMARY KEY,crt_id\tBLOB,crt_iid BIGINT,crt_filekey BLOB,crt_filesize BIGINT,crt_profileType INTEGER,crt_profileTypeIsDefault INTEGER,crt_profileConfigurationVersion TEXT,crt_profileResolvedFileExtension TEXT)");
          if (v7)
            goto LABEL_42;
          v7 = CSsql_corruption_checking_do(a1, 1, pDb, "CREATE INDEX IF NOT EXISTS CSRegisteredFileTable_crt_id_inx ON CSRegisteredFileTable(crt_id)");
          if (v7)
            goto LABEL_42;
          v7 = CSsql_corruption_checking_do(a1, 1, pDb, "CREATE UNIQUE INDEX IF NOT EXISTS CSRegisteredFileTable_crt_iid_inx ON CSRegisteredFileTable(crt_iid)");
          if (v7)
            goto LABEL_42;
          if (v38)
          {
            if (v38 > 6)
            {
              if (v38 != 7)
                goto LABEL_117;
            }
            else
            {
              v7 = CSsql_corruption_checking_do(a1, 1, pDb, "ALTER TABLE CSRegisteredFileTable ADD COLUMN crt_filekey BLOB");
              if (v7)
                goto LABEL_42;
              v7 = CSsql_corruption_checking_do(a1, 1, pDb, "ALTER TABLE CSRegisteredFileTable ADD COLUMN crt_filesize BIGINT");
              if (v7)
                goto LABEL_42;
            }
            v7 = CSsql_corruption_checking_do(a1, 1, pDb, "ALTER TABLE CSRegisteredFileTable ADD COLUMN crt_profileType INTEGER");
            if (v7)
              goto LABEL_42;
            v7 = CSsql_corruption_checking_do(a1, 1, pDb, "ALTER TABLE CSRegisteredFileTable ADD COLUMN crt_profileTypeIsDefault INTEGER");
            if (v7)
              goto LABEL_42;
            v7 = CSsql_corruption_checking_do(a1, 1, pDb, "ALTER TABLE CSRegisteredFileTable ADD COLUMN crt_profileConfigurationVersion TEXT");
            if (v7)
              goto LABEL_42;
            v7 = CSsql_corruption_checking_do(a1, 1, pDb, "ALTER TABLE CSRegisteredFileTable ADD COLUMN crt_profileResolvedFileExtension TEXT");
            if (v7)
              goto LABEL_42;
          }
        }
        else
        {
          if (CK_DEFAULT_LOG_BLOCK != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_87);
          v42 = CK_DEFAULT_LOG_INTERNAL;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEFAULT))
          {
            if (v38)
              v43 = v38;
            else
              v43 = 8;
            *(_DWORD *)buf = 134218498;
            *(_QWORD *)v56 = v43;
            v44 = "Y";
            if (v38)
              v44 = "N";
            *(_WORD *)&v56[8] = 2048;
            *(_QWORD *)&v56[10] = 8;
            *(_WORD *)&v56[18] = 2082;
            *(_QWORD *)&v56[20] = v44;
            _os_log_impl(&dword_20A95C000, v42, OS_LOG_TYPE_DEFAULT, "ChunkStore ver=%llu/%llu isNew=%{public}s", buf, 0x20u);
          }
          if (v38)
          {
            v21 = _CSMigrateChunkStore(a1, pDb, v38);
            if ((_DWORD)v21)
              goto LABEL_49;
          }
        }
LABEL_117:
        v7 = CSsql_corruption_checking_do(a1, a3, pDb, "CREATE TABLE IF NOT EXISTS CSChunkTable (ct_rowid INTEGER PRIMARY KEY,cid BLOB,ct_iid BIGINT,ft_rowid BIGINT,offset BIGINT,dataLen INTEGER,refCount INTEGER,timeStamp BIGINT,location INTEGER,key BLOB,subchunksBlob BLOB)");
        if (v7)
          goto LABEL_42;
        v45 = v38 - 1;
        if (a3)
        {
          if (v45 <= 5)
          {
            v7 = CSsql_corruption_checking_do(a1, 1, pDb, "DROP TABLE IF EXISTS CSStorageFileTable");
            if (v7)
              goto LABEL_42;
            v7 = CSsql_corruption_checking_do(a1, 1, pDb, "DROP TABLE IF EXISTS CSStorageChunkListTable");
            if (v7)
              goto LABEL_42;
            v7 = CSsql_corruption_checking_do(a1, 1, pDb, "DROP TABLE IF EXISTS CSStoragePendingChunksTable");
            if (v7)
              goto LABEL_42;
            v7 = CSsql_corruption_checking_do(a1, 1, pDb, "DROP TABLE IF EXISTS CSStoragePendingFileChunklistTable");
            if (v7)
              goto LABEL_42;
          }
        }
        if (a3)
        {
          if (v45 <= 8)
          {
            v7 = CSsql_corruption_checking_do(a1, 1, pDb, "ALTER TABLE CSChunkTable ADD COLUMN subchunksBlob BLOB");
            if (v7)
              goto LABEL_42;
          }
        }
        v7 = CSsql_corruption_checking_do(a1, a3, pDb, "CREATE INDEX IF NOT EXISTS CSChunkTable_cid_inx ON CSChunkTable(cid)");
        if (v7)
          goto LABEL_42;
        v7 = CSsql_corruption_checking_do(a1, a3, pDb, "CREATE INDEX IF NOT EXISTS CSChunkTable_iid_inx ON CSChunkTable(ct_iid)");
        if (v7)
          goto LABEL_42;
        v7 = CSsql_corruption_checking_do(a1, a3, pDb, "CREATE INDEX IF NOT EXISTS CSChunkTable_ftrowid_inx ON CSChunkTable(ft_rowid)");
        if (v7)
          goto LABEL_42;
        v7 = CSsql_corruption_checking_do(a1, a3, pDb, "DROP INDEX IF EXISTS CSChunkTable_refCount_inx");
        if (v7)
          goto LABEL_42;
        v7 = CSsql_corruption_checking_do(a1, a3, pDb, "DROP INDEX IF EXISTS CSChunkTable_loc_inx");
        if (v7)
          goto LABEL_42;
        v7 = CSsql_corruption_checking_do(a1, a3, pDb, "DROP INDEX IF EXISTS CSChunkTable_iidloc_inx");
        if (v7)
          goto LABEL_42;
        v7 = CSsql_corruption_checking_do(a1, a3, pDb, "DROP INDEX IF EXISTS CSChunkTable_rowidloc_inx");
        if (v7)
          goto LABEL_42;
        v7 = CSsql_corruption_checking_do(a1, a3, pDb, "DROP INDEX IF EXISTS CSChunkTable_rowidrefcnt_inx");
        if (v7)
          goto LABEL_42;
        v7 = CSsql_corruption_checking_do(a1, a3, pDb, "DROP INDEX IF EXISTS CSChunkTable_cidloc_inx");
        if (v7)
          goto LABEL_42;
        if ((a3 & 1) != 0)
        {
          if (v38)
          {
            if (v38 >= 0xB)
            {
              if (CK_DEFAULT_LOG_BLOCK != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_135);
              v46 = CK_DEFAULT_LOG_INTERNAL;
              if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
                goto LABEL_48;
              *(_DWORD *)buf = 134217984;
              *(_QWORD *)v56 = v38;
              v24 = "odd database version %llu";
              v25 = v46;
              v26 = 12;
              goto LABEL_47;
            }
            if (v38 == 10)
              goto LABEL_177;
            v47 = 10;
            goto LABEL_172;
          }
          v48 = 10;
        }
        else
        {
          v7 = CSsql_corruption_checking_do(a1, 0, pDb, "CREATE TABLE IF NOT EXISTS CSStorageFileTable (ft_rowid INTEGER PRIMARY KEY,ft_inode BIGINT,ft_space INTEGER,ft_pspace INTEGER,vt_rowid BIGINT,ft_status INTEGER)");
          if (v7)
            goto LABEL_42;
          v7 = CSsql_corruption_checking_do(a1, 0, pDb, "CREATE INDEX IF NOT EXISTS CSStorageFileTable_ft_rowid_inx ON CSStorageFileTable(ft_rowid)");
          if (v7)
            goto LABEL_42;
          v7 = CSsql_corruption_checking_do(a1, 0, pDb, "CREATE INDEX IF NOT EXISTS CSStorageFileTable_ft_inode_inx ON CSStorageFileTable(ft_inode)");
          if (v7)
            goto LABEL_42;
          v7 = CSsql_corruption_checking_do(a1, 0, pDb, "CREATE INDEX IF NOT EXISTS CSStorageFileTable_ft_space_inx ON CSStorageFileTable(ft_space)");
          if (v7)
            goto LABEL_42;
          v7 = CSsql_corruption_checking_do(a1, 0, pDb, "CREATE INDEX IF NOT EXISTS CSStorageFileTable_ft_pspace_inx ON CSStorageFileTable(ft_pspace)");
          if (v7)
            goto LABEL_42;
          v7 = CSsql_corruption_checking_do(a1, 0, pDb, "CREATE INDEX IF NOT EXISTS CSStorageFileTable_vt_rowid_inx ON CSStorageFileTable(vt_rowid)");
          if (v7)
            goto LABEL_42;
          v7 = CSsql_corruption_checking_do(a1, 0, pDb, "CREATE INDEX IF NOT EXISTS CSStorageFileTable_ft_status_inx ON CSStorageFileTable(ft_status)");
          if (v7)
            goto LABEL_42;
          v7 = CSsql_corruption_checking_do(a1, 0, pDb, "CREATE TABLE IF NOT EXISTS CSStorageChunkListTable (clt_rowid INTEGER PRIMARY KEY AUTOINCREMENT,clt_inode BIGINT,clt_count BIGINT,clt_chunkRowIDs BLOB)");
          if (v7)
            goto LABEL_42;
          v7 = CSsql_corruption_checking_do(a1, 0, pDb, "CREATE INDEX IF NOT EXISTS CSStorageChunkListTable_clt_rowid_inx ON CSStorageChunkListTable(clt_rowid)");
          if (v7)
            goto LABEL_42;
          v7 = CSsql_corruption_checking_do(a1, 0, pDb, "CREATE INDEX IF NOT EXISTS CSStorageChunkListTable_clt_inode_inx ON CSStorageChunkListTable(clt_inode)");
          if (v7)
            goto LABEL_42;
          v7 = CSsql_corruption_checking_do(a1, 0, pDb, "CREATE TABLE IF NOT EXISTS CSStoragePendingChunksTable (pct_rowid INTEGER PRIMARY KEY,pct_inode BIGINT,pct_count BIGINT,pct_chunkRowIDs BLOB)");
          if (v7)
            goto LABEL_42;
          v7 = CSsql_corruption_checking_do(a1, 0, pDb, "CREATE INDEX IF NOT EXISTS CSStoragePendingChunksTable_pct_inode_inx ON CSStoragePendingChunksTable(pct_inode)");
          if (v7)
            goto LABEL_42;
          v7 = CSsql_corruption_checking_do(a1, 0, pDb, "CREATE TABLE IF NOT EXISTS CSStoragePendingFileChunklistTable (pft_rowid INTEGER PRIMARY KEY,pft_token BIGINT,pft_inode BIGINT)");
          if (v7)
            goto LABEL_42;
          v7 = CSsql_corruption_checking_do(a1, 0, pDb, "CREATE INDEX IF NOT EXISTS CSStoragePendingFileChunklistTable_pft_token_inx ON CSStoragePendingFileChunklistTable(pft_token)");
          if (v7)
            goto LABEL_42;
          v7 = CSsql_corruption_checking_do(a1, 0, pDb, "CREATE INDEX IF NOT EXISTS CSStoragePendingFileChunklistTable_pft_inode_inx ON CSStoragePendingFileChunklistTable(pft_inode)");
          if (v7)
            goto LABEL_42;
          if (v38)
          {
            if (v38 == 8)
              goto LABEL_177;
            v47 = 8;
LABEL_172:
            v49 = CSsql_corruption_checking_do(a1, a3, pDb, "UPDATE CSDatabaseVersion SET version = %lld", v47);
            if (v49)
            {
              v7 = v49;
              if (CK_DEFAULT_LOG_BLOCK != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_139);
              v50 = CK_DEFAULT_LOG_INTERNAL;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
              {
                v51 = sqlite3_errmsg(pDb);
                *(_DWORD *)buf = 136315138;
                *(_QWORD *)v56 = v51;
                v18 = "UPDATE CSDatabaseVersion SET version failed: %s";
                v19 = v50;
                v20 = 12;
                goto LABEL_41;
              }
              goto LABEL_42;
            }
LABEL_177:
            v7 = CSsql_corruption_checking_do(a1, a3, pDb, "COMMIT");
            if (!v7)
            {
              v21 = 0;
              *a2 = pDb;
              return v21;
            }
            goto LABEL_42;
          }
          v48 = 8;
        }
        v7 = CSsql_corruption_checking_do(a1, a3, pDb, "INSERT INTO CSDatabaseVersion (version) VALUES (%llu)", v48);
        if (v7)
          goto LABEL_42;
        goto LABEL_177;
      case 0x1A:
LABEL_76:
        if (CK_DEFAULT_LOG_BLOCK != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_550);
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        {
          v36 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("chunk store database corruption: detected error %d in sqlite3_step"), v35);
          if (CK_DEFAULT_LOG_BLOCK != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_554);
          v37 = CK_DEFAULT_LOG_INTERNAL;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)v56 = v36;
            _os_log_impl(&dword_20A95C000, v37, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
          }
          if (v36)
            CFRelease(v36);
        }
        _CSBruteForceDatabaseCorruptionRecovery(a1, v32, a3);
        break;
    }
    v38 = 0;
    goto LABEL_88;
  }
  v7 = v6;
  if (v6 == 14)
  {
    sqlite3_close(pDb);
    pDb = 0;
    if (CS_corruption_checking_sqlite3_open_v2(a1, a3, &pDb, 65574))
    {
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_64);
      v8 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        v9 = sqlite3_errmsg(pDb);
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)v56 = a1;
        *(_WORD *)&v56[8] = 2080;
        *(_QWORD *)&v56[10] = v9;
        _os_log_impl(&dword_20A95C000, v8, OS_LOG_TYPE_ERROR, "sqlite3_open_v2 failed, dbname:\"%s\": %s", buf, 0x16u);
      }
      sqlite3_close(pDb);
      pDb = 0;
      v7 = 14;
      goto LABEL_43;
    }
    goto LABEL_9;
  }
  if (CK_DEFAULT_LOG_BLOCK != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_61);
  v16 = CK_DEFAULT_LOG_INTERNAL;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
  {
    v17 = sqlite3_errmsg(pDb);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)v56 = a1;
    *(_WORD *)&v56[8] = 1024;
    *(_DWORD *)&v56[10] = v7;
    *(_WORD *)&v56[14] = 2080;
    *(_QWORD *)&v56[16] = v17;
    v18 = "sqlite3_open_v2 failed, dbname:\"%s\": %d %s";
    v19 = v16;
    v20 = 28;
LABEL_41:
    _os_log_impl(&dword_20A95C000, v19, OS_LOG_TYPE_ERROR, v18, buf, v20);
  }
LABEL_42:
  v21 = 0xFFFFFFFFLL;
  if (v7 != 101)
  {
LABEL_43:
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_143);
    v22 = CK_DEFAULT_LOG_INTERNAL;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      goto LABEL_48;
    v23 = sqlite3_errmsg(pDb);
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)v56 = v7;
    *(_WORD *)&v56[4] = 2080;
    *(_QWORD *)&v56[6] = v23;
    v24 = "sqlite3 error: %d %s";
    v25 = v22;
    v26 = 18;
LABEL_47:
    _os_log_impl(&dword_20A95C000, v25, OS_LOG_TYPE_ERROR, v24, buf, v26);
LABEL_48:
    v21 = 0xFFFFFFFFLL;
  }
LABEL_49:
  if (pStmt)
    sqlite3_finalize(pStmt);
  CScloseDB(pDb);
  if (CK_DEFAULT_LOG_BLOCK != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_148);
  v27 = CK_DEFAULT_LOG_INTERNAL;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v56 = v21;
    _os_log_impl(&dword_20A95C000, v27, OS_LOG_TYPE_ERROR, "rc:%d", buf, 8u);
  }
  return v21;
}

uint64_t CS_corruption_checking_sqlite3_open_v2(const char *a1, char a2, sqlite3 **a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  CFStringRef v10;
  NSObject *v11;
  uint8_t buf[4];
  CFStringRef v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (CSSQLiteCorruptionTestingEnabled())
    v8 = CS_corruption_causing_sqlite3_open_v2(a1, a3, a4, 0);
  else
    v8 = sqlite3_open_v2(a1, a3, a4, 0);
  v9 = v8;
  _CSHandleDatabaseIOError(v8);
  if ((_DWORD)v9 == 26 || (_DWORD)v9 == 11)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_538);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("chunk store database corruption: detected error %d in sqlite3_open_v2"), v9);
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_542);
      v11 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v14 = v10;
        _os_log_impl(&dword_20A95C000, v11, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v10)
        CFRelease(v10);
    }
    _CSBruteForceDatabaseCorruptionRecovery(a1, 0, a2);
  }
  return v9;
}

uint64_t CS_corruption_checking_sqlite3_exec(const char *a1, char a2, sqlite3 *a3, const char *a4, char **a5)
{
  uint64_t v10;
  uint64_t v11;
  CFStringRef v12;
  NSObject *v13;
  uint8_t buf[4];
  CFStringRef v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (CSSQLiteCorruptionTestingEnabled())
    v10 = CS_corruption_causing_sqlite3_exec(a3, a4, 0, 0, a5);
  else
    v10 = sqlite3_exec(a3, a4, 0, 0, a5);
  v11 = v10;
  _CSHandleDatabaseIOError(v10);
  if ((_DWORD)v11 == 26 || (_DWORD)v11 == 11)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_556);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      v12 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("chunk store database corruption: detected error %d in sqlite3_exec"), v11);
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_560);
      v13 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v16 = v12;
        _os_log_impl(&dword_20A95C000, v13, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v12)
        CFRelease(v12);
    }
    _CSBruteForceDatabaseCorruptionRecovery(a1, a3, a2);
  }
  return v11;
}

uint64_t CSsql_corruption_checking_do(const char *a1, char a2, sqlite3 *a3, char *a4, ...)
{
  uint64_t v7;
  CFStringRef v9;
  NSObject *v10;
  uint8_t buf[4];
  CFStringRef v13;
  uint64_t v14;
  va_list va;

  va_start(va, a4);
  v14 = *MEMORY[0x24BDAC8D0];
  v7 = CSsql_doV(a3, a4, va);
  _CSHandleDatabaseIOError(v7);
  if ((_DWORD)v7 == 26 || (_DWORD)v7 == 11)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_568);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("chunk store database corruption: detected error %d in CSsql_do"), v7, va);
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_572);
      v10 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v13 = v9;
        _os_log_impl(&dword_20A95C000, v10, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v9)
        CFRelease(v9);
    }
    _CSBruteForceDatabaseCorruptionRecovery(a1, a3, a2);
  }
  return v7;
}

uint64_t _CSMigrateChunkStore(const char *a1, sqlite3 *a2, uint64_t a3)
{
  uint64_t result;
  NSObject *v7;
  int v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  int v12;
  _BYTE v13[18];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (a3 == 8)
    return 0;
  if (CK_DEFAULT_LOG_BLOCK != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_408);
  v7 = CK_DEFAULT_LOG_INTERNAL;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEFAULT))
  {
    v12 = 134218240;
    *(_QWORD *)v13 = a3;
    *(_WORD *)&v13[8] = 2048;
    *(_QWORD *)&v13[10] = 8;
    _os_log_impl(&dword_20A95C000, v7, OS_LOG_TYPE_DEFAULT, "migrating chunk store from version %llu to version %llu", (uint8_t *)&v12, 0x16u);
  }
  if ((unint64_t)(a3 - 5) < 2)
  {
LABEL_13:
    v8 = CSsql_corruption_checking_do(a1, 0, a2, "ALTER TABLE CSStorageFileTable ADD COLUMN ft_status INTEGER");
    if (!v8)
    {
      v8 = CSsql_corruption_checking_do(a1, 0, a2, "DROP INDEX IF EXISTS CSRegisteredFileTable_crt_id_inx");
      if (!v8)
      {
        v8 = CSsql_corruption_checking_do(a1, 0, a2, "DROP INDEX IF EXISTS CSRegisteredFileTable_crt_iid_inx");
        if (!v8)
        {
          v8 = CSsql_corruption_checking_do(a1, 0, a2, "DROP TABLE IF EXISTS CSRegisteredFileTable");
          if (!v8)
          {
LABEL_17:
            result = CSsql_corruption_checking_do(a1, 0, a2, "ALTER TABLE CSChunkTable ADD COLUMN subchunksBlob BLOB");
            v8 = result;
            if (!(_DWORD)result)
              return result;
          }
        }
      }
    }
LABEL_18:
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_421);
    v9 = CK_DEFAULT_LOG_INTERNAL;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      v10 = sqlite3_errmsg(a2);
      v12 = 67109378;
      *(_DWORD *)v13 = v8;
      *(_WORD *)&v13[4] = 2080;
      *(_QWORD *)&v13[6] = v10;
      _os_log_impl(&dword_20A95C000, v9, OS_LOG_TYPE_ERROR, "sqlite3 error on migration: %d %s", (uint8_t *)&v12, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  if (a3 == 7)
    goto LABEL_17;
  if (a3 == 4)
  {
    v8 = CSsql_corruption_checking_do(a1, 0, a2, "DROP INDEX IF EXISTS CSStorageFileTable_ft_rowid_inx");
    if (v8)
      goto LABEL_18;
    v8 = CSsql_corruption_checking_do(a1, 0, a2, "DROP INDEX IF EXISTS CSStorageFileTable_ft_inode_inx");
    if (v8)
      goto LABEL_18;
    v8 = CSsql_corruption_checking_do(a1, 0, a2, "DROP TABLE IF EXISTS CSStorageVolumeTable");
    if (v8)
      goto LABEL_18;
    goto LABEL_13;
  }
  if (CK_DEFAULT_LOG_BLOCK != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_418);
  v11 = CK_DEFAULT_LOG_INTERNAL;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
  {
    v12 = 134218240;
    *(_QWORD *)v13 = a3;
    *(_WORD *)&v13[8] = 2048;
    *(_QWORD *)&v13[10] = 8;
    _os_log_impl(&dword_20A95C000, v11, OS_LOG_TYPE_ERROR, "attempting to migrate chunk store from version %llu to version %llu, which is not supported", (uint8_t *)&v12, 0x16u);
  }
  return 5;
}

void CScloseDB(sqlite3 *pDb)
{
  sqlite3_stmt *stmt;
  NSObject *v3;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (pDb)
  {
    while (1)
    {
      stmt = sqlite3_next_stmt(pDb, 0);
      if (!stmt)
        break;
      sqlite3_finalize(stmt);
    }
    if (sqlite3_close(pDb))
    {
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_150);
      v3 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        v4 = 136315138;
        v5 = sqlite3_errmsg(pDb);
        _os_log_impl(&dword_20A95C000, v3, OS_LOG_TYPE_ERROR, "sqlite3_close failed: %s", (uint8_t *)&v4, 0xCu);
      }
    }
  }
}

void _CSRetainChunk(uint64_t a1, unsigned __int8 *a2)
{
  sqlite3_int64 v4;
  CFStringRef v5;
  NSObject *v6;
  _OWORD v7[4];
  uint8_t buf[4];
  CFStringRef v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = _CSTokenForChunkSignature(a1, a2, 115);
  if ((_CSRetainChunkForRowID(a1, v4) & 1) == 0)
  {
    memset(v7, 0, 57);
    DWORD1(v7[3]) = 101;
    if (!_CSAddChunk(a1, a2, (uint64_t)v7))
    {
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_423);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("failed to create entry for chunk:\n"));
        if (CK_DEFAULT_LOG_BLOCK != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_427);
        v6 = CK_DEFAULT_LOG_INTERNAL;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          v9 = v5;
          _os_log_impl(&dword_20A95C000, v6, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v5)
          CFRelease(v5);
      }
      printStoredChunk((unsigned int *)v7);
    }
  }
}

uint64_t CSReadChunkData(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v4;
  NSObject *v5;
  const __CFAllocator *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  char *v10;
  CFStringRef v11;
  NSObject *v12;
  uint8_t buf[4];
  _BYTE v15[14];
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = *(_QWORD *)(a2 + 1);
  if (CK_DEFAULT_LOG_BLOCK != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_429);
  v5 = CK_DEFAULT_LOG_INTERNAL;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)v15 = v3;
    *(_WORD *)&v15[4] = 2048;
    *(_QWORD *)&v15[6] = v4;
    v16 = 2048;
    v17 = 0;
    _os_log_impl(&dword_20A95C000, v5, OS_LOG_TYPE_ERROR, "fsopen(%d,%llu,0x%0llx): unimplemented; returning -1\n",
      buf,
      0x1Cu);
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_152);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
  {
    v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v7 = *a2;
    v8 = *(_QWORD *)(a2 + 1);
    v9 = __error();
    v10 = strerror(*v9);
    v11 = CFStringCreateWithFormat(v6, 0, CFSTR("%s unable to open storage file %lld,%lld:%s\n"), "CSReadChunkData", v7, v8, v10);
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_156);
    v12 = CK_DEFAULT_LOG_INTERNAL;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)v15 = v11;
      _os_log_impl(&dword_20A95C000, v12, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v11)
      CFRelease(v11);
  }
  return 0;
}

uint64_t CKLockChunks(uint64_t a1, unsigned __int8 **a2, uint64_t a3)
{
  uint64_t result;
  unsigned __int8 *v7;

  result = CKLockChunkStore(a1);
  if (!(_DWORD)result)
  {
    for (; a3; --a3)
    {
      v7 = *a2++;
      _CSRetainChunk(a1, v7);
    }
    return CKUnlockChunkStore(a1);
  }
  return result;
}

uint64_t CKUnlockChunks(uint64_t a1, _BYTE **a2, uint64_t a3)
{
  uint64_t result;
  _BYTE *v7;

  result = CKLockChunkStore(a1);
  if (!(_DWORD)result)
  {
    for (; a3; --a3)
    {
      v7 = *a2++;
      _CSReleaseChunkForSignature(a1, v7);
    }
    return CKUnlockChunkStore(a1);
  }
  return result;
}

const char *CKCreateChunkIDsFromFile(const void *a1, const __CFURL *a2, uint64_t a3, uint64_t a4)
{
  const char *result;
  char *v9;
  uint64_t v10;

  if (CKChunkStoreIsRegistry((uint64_t)a1))
    CKCreateChunkIDsFromFile_cold_1();
  result = (const char *)createPathFromUrl(a2);
  if (result)
  {
    v9 = (char *)result;
    v10 = CSChunkFile(a1, result, a3, a4, 0);
    free(v9);
    return (const char *)v10;
  }
  return result;
}

uint64_t CSChunkFile(const void *a1, const char *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  int v11;
  int v12;
  const __CFAllocator *v13;
  int *v14;
  char *v15;
  CFStringRef v16;
  NSObject *v17;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t buf[4];
  CFStringRef v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v23 = 0;
  v20 = 0;
  v10 = 0;
  if ((CKChunkStoreIsReadOnly((uint64_t)a1) & 1) == 0)
  {
    v11 = open(a2, 0);
    if (v11 == -1)
    {
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_398);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        v13 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v14 = __error();
        v15 = strerror(*v14);
        v16 = CFStringCreateWithFormat(v13, 0, CFSTR("open failed for \"%s\": %s"), a2, v15);
        if (CK_DEFAULT_LOG_BLOCK != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_402);
        v17 = CK_DEFAULT_LOG_INTERNAL;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          v25 = v16;
          _os_log_impl(&dword_20A95C000, v17, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v16)
          CFRelease(v16);
      }
      return 0;
    }
    else
    {
      v12 = v11;
      v19 = (char *)a2;
      LODWORD(v20) = v11;
      v21 = a3;
      v22 = a4;
      if (chunkFdForStorage(a1, &v19, a5, &v23))
        v10 = 0;
      else
        v10 = v23;
      CKCommitDatabaseTransactions((uint64_t)a1);
      close(v12);
    }
  }
  return v10;
}

uint64_t CKCreateChunkIDsFromFD(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (CKChunkStoreIsRegistry((uint64_t)a1))
    CKCreateChunkIDsFromFD_cold_1();
  return CSChunkFD(a1, a2, a3, a4);
}

uint64_t CSChunkFD(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  CFStringRef v9;
  const __CFAllocator *v10;
  uint64_t v11;
  int *v12;
  char *v13;
  NSObject *v14;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t buf[4];
  CFStringRef v22;
  char v23[1024];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  v17 = 0;
  v8 = 0;
  if ((CKChunkStoreIsReadOnly((uint64_t)a1) & 1) != 0)
    return v8;
  v9 = (CFStringRef)v23;
  bzero(v23, 0x400uLL);
  if (get_path_for_fd(a2, v23))
  {
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_404);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v11 = *__error();
      v12 = __error();
      v13 = strerror(*v12);
      v9 = CFStringCreateWithFormat(v10, 0, CFSTR("get_path_for_fd failed for fd:%d: %d (%s)\n"), a2, v11, v13);
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_406);
      v14 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v22 = v9;
        _os_log_impl(&dword_20A95C000, v14, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (!v9)
        goto LABEL_13;
      CFRelease(v9);
    }
    v9 = 0;
  }
LABEL_13:
  v16 = (char *)v9;
  LODWORD(v17) = a2;
  v18 = a3;
  v19 = a4;
  if (chunkFdForStorage(a1, &v16, 0, &v20))
    v8 = 0;
  else
    v8 = v20;
  CKCommitDatabaseTransactions((uint64_t)a1);
  return v8;
}

__CFArray *CKChunkListForToken(uint64_t a1, sqlite3_int64 a2)
{
  __CFArray *Mutable;
  unsigned int *v5;
  unsigned int *v6;
  size_t v7;
  sqlite3_int64 *v8;
  sqlite3_int64 v9;
  const UInt8 *v10;
  uint64_t v11;
  CFDataRef v12;
  void *v14;
  size_t v15;

  if (CKChunkStoreIsRegistry(a1))
    CKChunkListForToken_cold_1();
  v15 = 0;
  Mutable = 0;
  if (!CKLockChunkStore(a1))
  {
    v5 = _CSChunkRefsForToken(a1, a2, &v15);
    if (v5)
    {
      v6 = v5;
      Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
      if (v15)
      {
        v7 = 0;
        v8 = (sqlite3_int64 *)v6;
        do
        {
          v14 = 0;
          v9 = *v8;
          v8 += 2;
          if (_CSChunkForToken(a1, &v14, v9))
          {
            v10 = (const UInt8 *)v14;
            v11 = CKSignatureSize((char *)v14 + 56);
            v12 = CFDataCreate(0, v10, v11 + 57);
            CFArrayAppendValue(Mutable, v12);
            CFRelease(v12);
            free(v14);
          }
          ++v7;
        }
        while (v7 < v15);
      }
      free(v6);
    }
    else
    {
      Mutable = 0;
    }
    CKUnlockChunkStore(a1);
  }
  return Mutable;
}

unsigned int *CKChunkRefsForToken(uint64_t a1, sqlite3_int64 a2, size_t *a3)
{
  unsigned int *v7;

  if (CKChunkStoreIsRegistry(a1))
    CKChunkRefsForToken_cold_1();
  if (CKLockChunkStore(a1))
    return 0;
  v7 = _CSChunkRefsForToken(a1, a2, a3);
  CKUnlockChunkStore(a1);
  return v7;
}

__CFData *CKCopyDataForChunkID(uint64_t a1, unsigned __int8 *a2)
{
  __CFData *Mutable;
  sqlite3_int64 v5;
  const __CFAllocator *v6;
  const UInt8 *BytePtr;
  int v8;
  CFStringRef v9;
  NSObject *v10;
  NSObject *v11;
  void *v13;
  uint8_t buf[4];
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (CKChunkStoreIsRegistry(a1))
    CKCopyDataForChunkID_cold_1();
  v13 = 0;
  Mutable = 0;
  if (!CKLockChunkStore(a1))
  {
    v5 = _CSTokenForChunkSignature(a1, a2, 115);
    if (v5 && _CSChunkForToken(a1, &v13, v5))
    {
      v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], *((unsigned int *)v13 + 10));
      CFDataSetLength(Mutable, *((unsigned int *)v13 + 10));
      BytePtr = CFDataGetBytePtr(Mutable);
      v8 = *((_DWORD *)v13 + 10);
      CSReadChunkData((uint64_t)BytePtr, (int *)v13);
      if (v8)
      {
        if (CK_DEFAULT_LOG_BLOCK != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_182);
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        {
          v9 = CFStringCreateWithFormat(v6, 0, CFSTR("%s failed short read of StoredChunk for token: %llu\n"), "CKCopyDataForChunkID", v5);
          if (CK_DEFAULT_LOG_BLOCK != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_186);
          v10 = CK_DEFAULT_LOG_INTERNAL;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            v15 = (void *)v9;
            _os_log_impl(&dword_20A95C000, v10, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
          }
          if (v9)
            CFRelease(v9);
        }
      }
      free(v13);
    }
    else
    {
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_189);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        Mutable = (__CFData *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("%s failed to get StoredChunk for token: %llu\n"), "CKCopyDataForChunkID", v5);
        if (CK_DEFAULT_LOG_BLOCK != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_194);
        v11 = CK_DEFAULT_LOG_INTERNAL;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          v15 = Mutable;
          _os_log_impl(&dword_20A95C000, v11, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (!Mutable)
          goto LABEL_26;
        CFRelease(Mutable);
      }
      Mutable = 0;
    }
LABEL_26:
    CKUnlockChunkStore(a1);
  }
  return Mutable;
}

uint64_t _StoreChunk(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  _DWORD *v6;
  uint64_t v7;
  int v8;
  const __CFAllocator *v9;
  uint64_t v10;
  int *v11;
  char *v12;
  CFStringRef v13;
  NSObject *v14;
  uint8_t *v15;
  const __CFAllocator *v16;
  int *v17;
  char *v18;
  uint64_t v19;
  CFStringRef v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  unint64_t v26;
  const __CFAllocator *v27;
  uint64_t v28;
  int *v29;
  char *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  ssize_t v35;
  unint64_t v36;
  uint64_t v37;
  BOOL v38;
  unint64_t v39;
  const __CFAllocator *v40;
  uint64_t v41;
  int *v42;
  char *v43;
  CFStringRef v44;
  NSObject *v45;
  const __CFAllocator *v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  char *v50;
  const __CFAllocator *v51;
  uint64_t v52;
  int *v53;
  char *v54;
  const __CFAllocator *v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  char *v59;
  ssize_t v60;
  int v61;
  const __CFAllocator *v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  char *v66;
  CFStringRef v67;
  NSObject *v68;
  off_t st_size;
  unsigned int __buf;
  timeval v71;
  uint8_t buf[4];
  CFStringRef v73;
  stat v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v71.tv_sec = 0;
  *(_QWORD *)&v71.tv_usec = 0;
  v6 = _CSGetStorageFile(a1, (uint64_t)a2);
  if (!v6 || (v7 = (uint64_t)v6, v8 = v6[2], v8 == -1))
  {
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_271);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      return 0;
    v16 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v17 = __error();
    v18 = strerror(*v17);
    v13 = CFStringCreateWithFormat(v16, 0, CFSTR("unable to open storage file: %s\n"), v18);
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_276);
    v14 = CK_DEFAULT_LOG_INTERNAL;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    v74.st_dev = 138543362;
    *(_QWORD *)&v74.st_mode = v13;
    v15 = (uint8_t *)&v74;
    goto LABEL_19;
  }
  memset(&v74, 0, sizeof(v74));
  if (fstat(v8, &v74))
  {
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_196);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      return 0;
    v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v10 = *__error();
    v11 = __error();
    v12 = strerror(*v11);
    v13 = CFStringCreateWithFormat(v9, 0, CFSTR("fstat failed: (%d) %s\n"), v10, v12);
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_200);
    v14 = CK_DEFAULT_LOG_INTERNAL;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
LABEL_20:
      if (v13)
        CFRelease(v13);
      return 0;
    }
    *(_DWORD *)buf = 138543362;
    v73 = v13;
    goto LABEL_11;
  }
  st_size = v74.st_size;
  if (lseek(*(_DWORD *)(v7 + 8), v74.st_size, 0) == -1)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_203);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      return 0;
    v27 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v28 = *__error();
    v29 = __error();
    v30 = strerror(*v29);
    v13 = CFStringCreateWithFormat(v27, 0, CFSTR("lseek failed: (%d) %s\n"), v28, v30);
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_208);
    v14 = CK_DEFAULT_LOG_INTERNAL;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    *(_DWORD *)buf = 138543362;
    v73 = v13;
    goto LABEL_11;
  }
  if (CK_DEFAULT_LOG_BLOCK != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_211);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEBUG))
  {
    v21 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Writing to SF rowID:%llu at o:0x%llx\n"), *(_QWORD *)(v7 + 16), v74.st_size);
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_216);
    v22 = CK_DEFAULT_LOG_INTERNAL;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      v73 = v21;
      _os_log_impl(&dword_20A95C000, v22, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v21)
      CFRelease(v21);
  }
  v23 = *((_QWORD *)a2 + 1);
  v24 = CKSchemeAndSignatureSize((_BYTE *)a2 + 84);
  v25 = v24;
  if (v23)
  {
    v26 = v24 + a2[20] + 4;
    __buf = bswap32(v26);
    if ((uint64_t)(st_size + v26) >= 20971621)
    {
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_241);
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        return 0;
      v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("orig_sz (%lld) + used_sz (%u) is too big: %u < %llu \n"), st_size, v26, 20971620, st_size + v26);
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_246);
      v14 = CK_DEFAULT_LOG_INTERNAL;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        goto LABEL_20;
      *(_DWORD *)buf = 138543362;
      v73 = v13;
LABEL_11:
      v15 = buf;
LABEL_19:
      _os_log_impl(&dword_20A95C000, v14, OS_LOG_TYPE_ERROR, "%{public}@", v15, 0xCu);
      goto LABEL_20;
    }
    if (write(*(_DWORD *)(v7 + 8), &__buf, 4uLL) == 4)
    {
      if (write(*(_DWORD *)(v7 + 8), a2 + 21, v25) == v25)
      {
        v35 = write(*(_DWORD *)(v7 + 8), *((const void **)a2 + 1), a2[20]);
        v34 = a2[20];
        if (v35 == v34)
          goto LABEL_57;
        v60 = v35;
        if (CK_DEFAULT_LOG_BLOCK != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_263);
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        {
LABEL_107:
          v61 = *(_DWORD *)(v7 + 8);
          if (v61 != -1 && ftruncate(v61, st_size))
          {
            if (CK_DEFAULT_LOG_BLOCK != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_279);
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
            {
              v62 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
              v63 = *(_QWORD *)(v7 + 16);
              v64 = *__error();
              v65 = __error();
              v66 = strerror(*v65);
              v67 = CFStringCreateWithFormat(v62, 0, CFSTR("ftruncate failed for rowId:%lld: %d (%s)\n"), v63, v64, v66);
              if (CK_DEFAULT_LOG_BLOCK != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_284);
              v68 = CK_DEFAULT_LOG_INTERNAL;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
              {
                v74.st_dev = 138543362;
                *(_QWORD *)&v74.st_mode = v67;
                _os_log_impl(&dword_20A95C000, v68, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v74, 0xCu);
              }
              if (v67)
                CFRelease(v67);
            }
          }
          _CSCloseStorageFile(a1, (_DWORD *)v7, 0);
          return 0;
        }
        v44 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("write failed: %d != %d\n"), v60, a2[20]);
        if (CK_DEFAULT_LOG_BLOCK != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_268);
        v45 = CK_DEFAULT_LOG_INTERNAL;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        {
LABEL_105:
          if (v44)
            CFRelease(v44);
          goto LABEL_107;
        }
        *(_DWORD *)buf = 138543362;
        v73 = v44;
      }
      else
      {
        if (CK_DEFAULT_LOG_BLOCK != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_257);
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
          goto LABEL_107;
        v55 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v56 = *(_QWORD *)(v7 + 16);
        v57 = *__error();
        v58 = __error();
        v59 = strerror(*v58);
        v44 = CFStringCreateWithFormat(v55, 0, CFSTR("write failed for rowID:%llu: %d (%s)\n"), v56, v57, v59);
        if (CK_DEFAULT_LOG_BLOCK != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_260);
        v45 = CK_DEFAULT_LOG_INTERNAL;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
          goto LABEL_105;
        *(_DWORD *)buf = 138543362;
        v73 = v44;
      }
    }
    else
    {
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_249);
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        goto LABEL_107;
      v46 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v47 = *(_QWORD *)(v7 + 16);
      v48 = *__error();
      v49 = __error();
      v50 = strerror(*v49);
      v44 = CFStringCreateWithFormat(v46, 0, CFSTR("write failed for rowID:%llu: %d (%s)\n"), v47, v48, v50);
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_254);
      v45 = CK_DEFAULT_LOG_INTERNAL;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        goto LABEL_105;
      *(_DWORD *)buf = 138543362;
      v73 = v44;
    }
LABEL_104:
    _os_log_impl(&dword_20A95C000, v45, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    goto LABEL_105;
  }
  __buf = bswap32(a2[1]);
  if (write(*(_DWORD *)(v7 + 8), &__buf, 4uLL) != 4)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_219);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      goto LABEL_107;
    v40 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v41 = *(unsigned int *)(v7 + 8);
    v42 = __error();
    v43 = strerror(*v42);
    v44 = CFStringCreateWithFormat(v40, 0, CFSTR("write of %ld bytes on fd %d failed : %s"), 4, v41, v43);
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_224);
    v45 = CK_DEFAULT_LOG_INTERNAL;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      goto LABEL_105;
    *(_DWORD *)buf = 138543362;
    v73 = v44;
    goto LABEL_104;
  }
  if (v25 != write(*(_DWORD *)(v7 + 8), a2 + 21, v25))
  {
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_227);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      goto LABEL_107;
    v51 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v52 = *(unsigned int *)(v7 + 8);
    v53 = __error();
    v54 = strerror(*v53);
    v44 = CFStringCreateWithFormat(v51, 0, CFSTR("write of %ld bytes on fd %d failed : %s"), v25, v52, v54);
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_230);
    v45 = CK_DEFAULT_LOG_INTERNAL;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      goto LABEL_105;
    *(_DWORD *)buf = 138543362;
    v73 = v44;
    goto LABEL_104;
  }
  v31 = a2[20];
  v32 = CSCopyData(*a2, *(unsigned int *)(v7 + 8), v31, 0x8000);
  v33 = v32;
  if (v31 != (_DWORD)v32)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_233);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      goto LABEL_107;
    v44 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("CSCopyData failed, copied %d bytes\n"), v33);
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_238);
    v45 = CK_DEFAULT_LOG_INTERNAL;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      goto LABEL_105;
    *(_DWORD *)buf = 138543362;
    v73 = v44;
    goto LABEL_104;
  }
  v26 = (v25 + v32 + 4);
  LODWORD(v34) = a2[20];
LABEL_57:
  v37 = *(_QWORD *)(v7 + 16);
  v36 = *(_QWORD *)(v7 + 24);
  v38 = v36 >= v26;
  v39 = v36 - v26;
  if (!v38)
    v39 = 0;
  *(_QWORD *)(v7 + 24) = v39;
  *(_DWORD *)(a3 + 12) = v37;
  *(_QWORD *)(a3 + 4) = v74.st_ino;
  *(_DWORD *)a3 = v74.st_dev;
  *(_QWORD *)(a3 + 24) = v74.st_size;
  *(_DWORD *)(a3 + 40) = v34;
  *(_DWORD *)(a3 + 52) = 115;
  gettimeofday(&v71, 0);
  *(_QWORD *)(a3 + 44) = v71.tv_sec;
  if (*(_QWORD *)(v7 + 24) >> 10 > 0xCuLL)
  {
    _CSUpdateStorageFileInfo(a1, v7);
    return 1;
  }
  else
  {
    v19 = 1;
    _CSCloseStorageFile(a1, (_DWORD *)v7, 1);
  }
  return v19;
}

uint64_t addSourceChunk(uint64_t a1, unsigned int a2, const void **a3)
{
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  void *v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  void *v14;
  unsigned int v15;

  if (!a2)
    return 0xFFFFFFFFLL;
  v7 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12);
  if (v7 == v6)
  {
    if (v7 <= 1)
      v8 = 1;
    else
      v8 = *(_DWORD *)(a1 + 8);
    v9 = 2 * v8;
    if (v7 >> 4 >= 0x271)
      v6 = v7 + 100;
    else
      v6 = v9;
    if (v6 >= v7 && ((a2 * (unint64_t)v6) & 0xFFFFFFFF00000000) == 0)
    {
      v10 = malloc_type_realloc(*(void **)a1, v6 * a2, 0x15E15CE8uLL);
      if (v10)
      {
        *(_QWORD *)a1 = v10;
        *(_DWORD *)(a1 + 12) = v6;
        v11 = *(_DWORD *)(a1 + 8);
        goto LABEL_14;
      }
    }
    return 0xFFFFFFFFLL;
  }
  v11 = *(_DWORD *)(a1 + 8);
LABEL_14:
  if (v11 >= v6)
    addSourceChunk_cold_3();
  if (!*(_QWORD *)a1)
    addSourceChunk_cold_1();
  v12 = *(_QWORD *)a1 + v7 * a2;
  memcpy((void *)v12, a3, a2);
  *(_QWORD *)(v12 + 8) = 0;
  v13 = malloc_type_malloc(*(unsigned int *)(v12 + 80), 0x324CAA0CuLL);
  if (!v13)
    return 0xFFFFFFFFLL;
  v14 = v13;
  memcpy(v13, a3[1], *(unsigned int *)(v12 + 80));
  *(_QWORD *)(v12 + 8) = v14;
  v15 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v15;
  if (v7 >= v15)
    addSourceChunk_cold_2();
  return 0;
}

uint64_t CSChunkStorageCallback(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  void (*v9)(uint64_t, _QWORD);
  int v10;
  uint64_t v11;
  sqlite3_int64 v12;
  void (*v13)(uint64_t, _QWORD);
  _OWORD v14[5];
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 136);
  if (!v2)
  {
    if (!CKLockChunkStore(*(_QWORD *)a1))
    {
      v8 = _CSFlushChunkBatch(a1);
      CKUnlockChunkStore(*(_QWORD *)a1);
      return v8;
    }
    return 0xFFFFFFFFLL;
  }
  if (addSourceChunk(a1 + 264, *(_DWORD *)(a1 + 308), (const void **)v2))
    return 0xFFFFFFFFLL;
  v3 = *(_QWORD *)(a1 + 312) + *(unsigned int *)(v2 + 80);
  *(_QWORD *)(a1 + 312) = v3;
  v4 = *(_QWORD *)(a1 + 424);
  v5 = *(_QWORD *)(a1 + 80);
  if (v4 != v5 && v3 > 0x500000)
  {
    if (!CKLockChunkStore(*(_QWORD *)a1))
    {
      v6 = _CSFlushChunkBatch(a1);
      CKUnlockChunkStore(*(_QWORD *)a1);
      if (!v6)
        goto LABEL_12;
    }
    return 0xFFFFFFFFLL;
  }
  if (v4 == v5)
  {
    if (!CKLockChunkStore(*(_QWORD *)a1))
    {
      v10 = _CSFlushChunkBatch(a1);
      v11 = *(_QWORD *)a1;
      if (v10)
      {
        CKUnlockChunkStore(v11);
      }
      else
      {
        v12 = _CSRegisterStorageChunkList(v11, *(const void **)(a1 + 296), *(_QWORD *)(a1 + 288), *(_QWORD *)(a1 + 56));
        CKUnlockChunkStore(*(_QWORD *)a1);
        if (v12)
        {
          *(_QWORD *)(a1 + 280) = v12;
          v13 = *(void (**)(uint64_t, _QWORD))(a1 + 344);
          if (v13)
          {
            v15 = 0;
            memset(v14, 0, sizeof(v14));
            v13(v2, *(_QWORD *)(a1 + 352));
            (*(void (**)(_OWORD *, _QWORD))(a1 + 344))(v14, *(_QWORD *)(a1 + 352));
          }
          return 0;
        }
      }
    }
    return 0xFFFFFFFFLL;
  }
LABEL_12:
  v9 = *(void (**)(uint64_t, _QWORD))(a1 + 344);
  if (v9)
    v9(v2, *(_QWORD *)(a1 + 352));
  return 0;
}

uint64_t _CSFlushChunkBatch(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  CFStringRef v13;
  NSObject *v14;
  uint8_t buf[4];
  CFStringRef v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v1 = *(_DWORD *)(a1 + 272);
  v2 = *(unsigned int *)(a1 + 304);
  v3 = v1 - v2;
  if (v1 < v2)
    _CSFlushChunkBatch_cold_1();
  if (v1 == (_DWORD)v2)
    return 0;
  v6 = *(_DWORD *)(a1 + 308);
  if (!v6)
    _CSFlushChunkBatch_cold_2();
  v7 = *(_QWORD *)(a1 + 264);
  v8 = malloc_type_realloc(*(void **)(a1 + 296), 8 * (*(_QWORD *)(a1 + 288) + v3), 0x85F2E68FuLL);
  if (!v8)
    return 0xFFFFFFFFLL;
  v9 = v7 + v6 * v2;
  *(_QWORD *)(a1 + 296) = v8;
  if ((_CSStoreChunks(*(_QWORD *)a1, v9, v3, v6, &v8[*(_QWORD *)(a1 + 288)], a1) & 1) == 0)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_433);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("_CSStoreChunks failed, batchIndex:%u, batchCount:%u\n"), v2, v3);
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_437);
      v14 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v16 = v13;
        _os_log_impl(&dword_20A95C000, v14, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v13)
        CFRelease(v13);
    }
    return 0xFFFFFFFFLL;
  }
  v10 = 0;
  *(_QWORD *)(a1 + 288) += v3;
  do
  {
    v11 = v9 + v10;
    v12 = *(void **)(v11 + 8);
    if (v12)
    {
      free(v12);
      *(_QWORD *)(v11 + 8) = 0;
    }
    if (*(_BYTE *)(v11 + 24))
    {
      if (*(_BYTE *)(a1 + 181))
      {
        *(_QWORD *)(a1 + 432) += *(unsigned int *)(v11 + 80);
        ++*(_QWORD *)(a1 + 456);
      }
    }
    v10 += v6;
    --v3;
  }
  while (v3);
  result = 0;
  *(_DWORD *)(a1 + 304) = *(_DWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 312) = 0;
  return result;
}

uint64_t CKRemoveStoredFile(uint64_t a1, sqlite3_int64 a2)
{
  uint64_t result;

  if (CKChunkStoreIsRegistry(a1))
    CKRemoveStoredFile_cold_1();
  result = CKChunkStoreIsReadOnly(a1);
  if ((result & 1) == 0)
  {
    result = CKLockChunkStore(a1);
    if (!(_DWORD)result)
    {
      _CSRemoveStoredFile(a1, a2);
      return CKUnlockChunkStore(a1);
    }
  }
  return result;
}

unint64_t CKCompactStorage(uint64_t a1, unint64_t a2)
{
  unint64_t v5;

  if (CKChunkStoreIsRegistry(a1))
    CKCompactStorage_cold_1();
  if ((CKChunkStoreIsReadOnly(a1) & 1) != 0 || CKLockChunkStoreNoFlag(a1))
    return 0;
  v5 = _CSCompactStorage(a1, a2);
  CKUnlockChunkStore(a1);
  return v5;
}

uint64_t CKCreateStoredFileWithFlags(const void *a1, const char *a2, char a3)
{
  if (CKChunkStoreIsRegistry((uint64_t)a1))
    CKCreateStoredFileWithFlags_cold_1();
  if ((CKChunkStoreIsReadOnly((uint64_t)a1) & 1) != 0)
    return 0;
  else
    return CSChunkFile(a1, a2, 0, 0, a3);
}

uint64_t CKCreateStoredFile(const void *a1, const char *a2)
{
  if (CKChunkStoreIsRegistry((uint64_t)a1))
    CKCreateStoredFile_cold_1();
  return CKCreateStoredFileWithFlags(a1, a2, 0);
}

uint64_t CKCommitChunkedFile(uint64_t *a1, sqlite3_int64 a2, int a3)
{
  uint64_t result;

  if (CKChunkStoreIsRegistry((uint64_t)a1))
    CKCommitChunkedFile_cold_1();
  result = CKChunkStoreIsReadOnly((uint64_t)a1);
  if ((result & 1) == 0)
  {
    if (a3)
    {
      return (uint64_t)_CSCommitChunkedFile(a1, a2);
    }
    else
    {
      result = CKLockChunkStore((uint64_t)a1);
      if (!(_DWORD)result)
      {
        _CSCommitChunkedFile(a1, a2);
        return CKUnlockChunkStore((uint64_t)a1);
      }
    }
  }
  return result;
}

unsigned int *CKCopyChunkListForStoredFileToken(uint64_t a1, sqlite3_int64 a2, size_t *a3, int a4)
{
  unsigned int *v9;

  if (CKChunkStoreIsRegistry(a1))
    CKCopyChunkListForStoredFileToken_cold_1();
  if (a4)
    return _CSChunkRefsForToken(a1, a2, a3);
  if (CKReadLockChunkStore(a1))
    return 0;
  v9 = _CSChunkRefsForToken(a1, a2, a3);
  CKUnlockChunkStore(a1);
  return v9;
}

uint64_t CKGetLocationOfChunkInStorage(uint64_t a1, sqlite3_int64 a2, _DWORD *a3, _QWORD *a4, _QWORD *a5, int a6)
{
  int v12;
  uint64_t v13;
  _QWORD *v14;
  void *v16;

  if (CKChunkStoreIsRegistry(a1))
    CKGetLocationOfChunkInStorage_cold_1();
  if (a6 || !CKReadLockChunkStore(a1))
  {
    v16 = 0;
    v12 = _CSChunkForToken(a1, &v16, a2);
    v13 = v12 & (_CSChunkIsInvalid(a1, a2) ^ 1);
    if (a6)
    {
      if ((v13 & 1) != 0)
      {
LABEL_5:
        v14 = v16;
        if (a3)
          *a3 = *(_DWORD *)v16;
        if (a4)
          *a4 = *(_QWORD *)((char *)v14 + 4);
        if (a5)
          *a5 = v14[3];
        goto LABEL_15;
      }
    }
    else
    {
      CKUnlockChunkStore(a1);
      if ((v13 & 1) != 0)
        goto LABEL_5;
    }
    v14 = v16;
LABEL_15:
    free(v14);
    return v13;
  }
  return 0;
}

sqlite3_int64 CKTokenForStoredChunk(uint64_t a1, unsigned __int8 *a2)
{
  sqlite3_int64 v5;

  if (CKChunkStoreIsRegistry(a1))
    CKTokenForStoredChunk_cold_1();
  if (CKReadLockChunkStore(a1))
    return 0;
  v5 = _CSTokenForChunkSignature(a1, a2, 115);
  CKUnlockChunkStore(a1);
  return v5;
}

BOOL CKRegisteredItemCount(uint64_t a1, sqlite3_int64 *a2)
{
  int v4;

  if (!CKChunkStoreIsRegistry(a1))
    CKRegisteredItemCount_cold_1();
  v4 = CKLockChunkStore(a1);
  if (!v4)
  {
    _CSRegisteredItemCount(a1, a2);
    CKUnlockChunkStore(a1);
  }
  return v4 == 0;
}

BOOL CKGetRegisteredItems(uint64_t a1, sqlite3_int64 a2, uint64_t a3, sqlite3_int64 *a4)
{
  int v8;

  if (!CKChunkStoreIsRegistry(a1))
    CKGetRegisteredItems_cold_1();
  v8 = CKLockChunkStore(a1);
  if (!v8)
  {
    _CSGetRegisteredItems(a1, a2, a3, a4);
    CKUnlockChunkStore(a1);
  }
  return v8 == 0;
}

char *CKCreateRegisteredChunk(_BYTE *a1, unsigned __int8 *a2)
{
  return CKCreateRegisteredChunkWithSubchunkBlob(a1, a2, 0, 0);
}

char *CKCreateRegisteredChunkWithSubchunkBlob(_BYTE *a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v8;
  size_t v9;
  size_t v10;
  char *v11;
  size_t v13;
  char *v14;
  char v15;

  if (!a1)
    return 0;
  v8 = CKChunkSchemeAndSignatureSize(a1);
  if (!v8)
    return 0;
  v9 = v8;
  if (a2)
  {
    v10 = CKChunkSchemeAndEncryptionKeySize(a2);
    if (!v10)
      return 0;
  }
  else
  {
    v10 = 0;
  }
  v13 = 0;
  if (a3 && a4)
    v13 = CKSubchunkBlobSize(a4, a3);
  v14 = (char *)malloc_type_calloc(1uLL, v9 + v10 + v13 + 35, 0xAD9CC552uLL);
  v11 = v14;
  if (v14)
  {
    memcpy(v14 + 35, a1, v9);
    if (a2)
    {
      memcpy(&v11[v9 + 35], a2, v10);
      v15 = 1;
    }
    else
    {
      v15 = 0;
    }
    v11[30] = v15;
    v11[29] = v13 != 0;
    if (v13)
      memcpy(&v11[v10 + 35 + v9], a4, v13);
  }
  return v11;
}

const char *CKChunkerProfileTypeDescription()
{
  return "deprecated";
}

const char *CKChunkTypeDescription(unsigned int a1)
{
  if (a1 > 9)
    return "unknown cs_chunk_type_t";
  else
    return off_24C346130[a1];
}

uint64_t CKRegisterChunksForFileWithHint(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;
  size_t v11;
  _DWORD *v12;
  int v13;
  uint64_t result;
  CFStringRef v15;
  NSObject *v16;
  uint64_t v17;
  CFStringRef v18;
  const __CFAllocator *v19;
  uint64_t v20;
  int *v21;
  char *v22;
  NSObject *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[2];
  char v34[1024];
  stat v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (!CKChunkStoreIsRegistry((uint64_t)a1))
    CKRegisterChunksForFileWithHint_cold_1();
  memset(v33, 0, sizeof(v33));
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v24 = 0u;
  memset(&v35, 0, sizeof(v35));
  if (fstat(a2, &v35) == -1)
    goto LABEL_19;
  if ((v35.st_flags & 0x20) == 0)
    goto LABEL_19;
  v10 = fgetxattr(a2, "com.apple.decmpfs", 0, 0, 0, 32);
  if (v10 < 0x10)
    goto LABEL_19;
  v11 = v10;
  v12 = malloc_type_malloc(v10, 0x8CB676F4uLL);
  if (fgetxattr(a2, "com.apple.decmpfs", v12, v11, 0, 32) != v11)
  {
    if (!v12)
      goto LABEL_19;
    goto LABEL_18;
  }
  if (*v12 != 1668116582)
  {
LABEL_18:
    free(v12);
    goto LABEL_19;
  }
  v13 = v12[1];
  free(v12);
  if (v13 == -2147483647)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_322);
    result = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    v15 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("NOT registering chunks for dataless file fd:%d, itemID:%lld\n"), a2, a3);
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_326);
    v16 = CK_DEFAULT_LOG_INTERNAL;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      v35.st_dev = 138543362;
      *(_QWORD *)&v35.st_mode = v15;
      _os_log_impl(&dword_20A95C000, v16, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v35, 0xCu);
    }
    v17 = 0;
    result = 0;
    if (!v15)
      return result;
LABEL_35:
    CFRelease(v15);
    return v17;
  }
LABEL_19:
  v18 = (CFStringRef)v34;
  bzero(v34, 0x400uLL);
  if (!get_path_for_fd(a2, v34))
    goto LABEL_30;
  if (CK_DEFAULT_LOG_BLOCK != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_329);
  if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEFAULT))
    goto LABEL_29;
  v19 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v20 = *__error();
  v21 = __error();
  v22 = strerror(*v21);
  v18 = CFStringCreateWithFormat(v19, 0, CFSTR("get_path_for_fd failed for fd:%d: %d (%s)\n"), a2, v20, v22);
  if (CK_DEFAULT_LOG_BLOCK != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_334);
  v23 = CK_DEFAULT_LOG_INTERNAL;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEFAULT))
  {
    v35.st_dev = 138543362;
    *(_QWORD *)&v35.st_mode = v18;
    _os_log_impl(&dword_20A95C000, v23, OS_LOG_TYPE_DEFAULT, "%{public}@", (uint8_t *)&v35, 0xCu);
  }
  if (v18)
  {
    CFRelease(v18);
LABEL_29:
    v18 = 0;
  }
LABEL_30:
  LODWORD(v30) = 1;
  *((_QWORD *)&v30 + 1) = a3;
  LODWORD(v31) = 0;
  *((_QWORD *)&v31 + 1) = a4;
  *((_QWORD *)&v32 + 1) = a5;
  *(_QWORD *)&v33[0] = v18;
  DWORD2(v33[0]) = a2;
  LODWORD(v24) = 2;
  *((_QWORD *)&v24 + 1) = v33;
  if (v18)
  {
    result = (uint64_t)CFStringCreateWithCString(0, (const char *)v18, 0x8000100u);
    v15 = (CFStringRef)result;
    if (!result)
      return result;
  }
  else
  {
    v15 = 0;
  }
  *((_QWORD *)&v25 + 1) = v15;
  *(_QWORD *)&v27 = openFd;
  *((_QWORD *)&v27 + 1) = closeFd;
  *(_QWORD *)&v28 = statFd;
  *((_QWORD *)&v28 + 1) = readFd;
  *(_QWORD *)&v29 = getCacheBlobFd;
  *((_QWORD *)&v29 + 1) = setCacheBlobFd;
  result = CKRegisterChunksForItem(a1, &v24, (uint64_t)&v30, 0, 0, 0, 0, 0);
  v17 = result;
  if (v15)
    goto LABEL_35;
  return result;
}

uint64_t CKRegisterChunksForItem(const void *a1, _QWORD *a2, uint64_t a3, _QWORD *a4, unint64_t *a5, CFTypeRef *a6, CFTypeRef *a7, _QWORD *a8)
{
  if (!CKChunkStoreIsRegistry((uint64_t)a1))
    CKRegisterChunksForItem_cold_1();
  return registerChunksForItem(a1, a2, a3, 0, a4, a5, a6, a7, a8);
}

uint64_t registerChunksForItem(const void *a1, _QWORD *a2, uint64_t a3, char a4, _QWORD *a5, unint64_t *a6, CFTypeRef *a7, CFTypeRef *a8, _QWORD *a9)
{
  uint64_t v17;
  uint64_t v18;
  int Only;
  void *v20;
  _BOOL4 v21;
  uint64_t v22;
  const __CFString *v23;
  const __CFString *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  CFStringRef v28;
  NSObject *v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  const __CFAllocator *v34;
  CFNumberRef v35;
  CFNumberRef i;
  char *v37;
  int v38;
  int v39;
  CFStringRef v40;
  NSObject *v41;
  void *v42;
  _BOOL4 v43;
  _QWORD *v44;
  CFStringRef v45;
  NSObject *v46;
  _BOOL4 v48;
  int v49;
  uint64_t (*v50)(uint64_t, char **, CFErrorRef *);
  BOOL v51;
  char *OpCtx;
  CFStringRef v53;
  NSObject *v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  const void *v59;
  CFStringRef v60;
  NSObject *v61;
  CFStringRef v62;
  NSObject *v63;
  _BYTE *v64;
  const void *v65;
  CFTypeRef v66;
  char *v67;
  int v68;
  uint64_t v69;
  uint64_t (*v70)(_QWORD, const __CFString *);
  const __CFString *v71;
  const __CFString *v72;
  const __CFString *v73;
  const __CFString *v74;
  int v75;
  CFTypeRef v76;
  const void *v77;
  uint64_t v78;
  _BOOL4 v79;
  const __CFAllocator *alloc;
  _BOOL4 v81;
  int v82;
  CFTypeRef *v83;
  _BOOL4 v84;
  unint64_t *v85;
  unint64_t v86;
  _OWORD v87[2];
  uint64_t v88;
  CFTypeRef v89;
  sqlite3_int64 valuePtr;
  unint64_t v91;
  char *v92;
  CFTypeRef cf;
  CFTypeRef v94;
  uint8_t buf[16];
  char __s[1008];
  char buffer[16];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  _BYTE v111[31];
  uint64_t v112;

  v112 = *MEMORY[0x24BDAC8D0];
  if (!CKChunkStoreIsRegistry((uint64_t)a1))
    registerChunksForItem_cold_8();
  v94 = 0;
  if (a6)
    *a6 = 0;
  if (a5)
    *a5 = 0;
  v86 = (unint64_t)a5;
  v17 = (uint64_t)a9;
  v84 = a7 != 0;
  if (a7)
  {
    *a7 = 0;
    v18 = 1;
    if (!a8)
      goto LABEL_9;
    goto LABEL_8;
  }
  v18 = 0;
  if (a8)
LABEL_8:
    *a8 = 0;
LABEL_9:
  v85 = a6;
  if (a9)
    *a9 = 0;
  v92 = 0;
  cf = 0;
  valuePtr = 0;
  v91 = 0;
  memset(v111, 0, sizeof(v111));
  v110 = 0u;
  v109 = 0u;
  v108 = 0u;
  v107 = 0u;
  v106 = 0u;
  v105 = 0u;
  v104 = 0u;
  v103 = 0u;
  v102 = 0u;
  v101 = 0u;
  v100 = 0u;
  v99 = 0u;
  v98 = 0u;
  *(_OWORD *)buffer = 0u;
  bzero(__s, 0x400uLL);
  v89 = 0;
  Only = CKChunkStoreIsReadOnly((uint64_t)a1);
  v20 = 0;
  v21 = 0;
  if (!a3 || !a2)
  {
    v22 = 0;
    if (a9)
      goto LABEL_98;
    goto LABEL_94;
  }
  v83 = a8;
  v22 = 0;
  if (Only)
  {
LABEL_97:
    if (!v17)
      goto LABEL_94;
    goto LABEL_98;
  }
  if (*(_DWORD *)a3 != 1)
  {
LABEL_96:
    v21 = 0;
    v20 = 0;
    v22 = 0;
    goto LABEL_97;
  }
  if (!a2[6])
    registerChunksForItem_cold_1();
  if (!a2[7])
    registerChunksForItem_cold_2();
  if (!a2[9])
    registerChunksForItem_cold_3();
  if (!a2[8])
    registerChunksForItem_cold_4();
  valuePtr = *(_QWORD *)(a3 + 8);
  buffer[0] = 0;
  __s[0] = 0;
  v23 = (const __CFString *)a2[2];
  if (v23 && !CFStringGetCString(v23, buffer, 255, 0x8000100u))
    buffer[0] = 0;
  v24 = (const __CFString *)a2[3];
  if (v24 && !CFStringGetCString(v24, __s, 1024, 0x8000100u))
    __s[0] = 0;
  v25 = CKFileDigestArgumentsFileScheme(*(_QWORD *)(a3 + 24));
  v82 = CKFileDigestArgumentsFileSchemeByte(*(_QWORD *)(a3 + 24));
  v26 = CKFileDigestArgumentsFileEncrypted(*(_QWORD *)(a3 + 24));
  if (gVerbose == 2)
  {
    v27 = v26;
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_444);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEBUG))
    {
      v28 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("\"%s\", hint:\"%s\", itemID:%lld, encrypt:%u, scheme:0x%x, fixedChunkSize:0x%x, %u"), __s, buffer, valuePtr, v27, v25, *(unsigned int *)(a3 + 16), v18);
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_450);
      v29 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v28;
        _os_log_impl(&dword_20A95C000, v29, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v28)
        CFRelease(v28);
    }
  }
  v30 = strcmp(buffer, "com.apple.ChunkingLibrary.CustomFixedChunk");
  v31 = v30;
  if (v30)
    v32 = a2[2] == 0;
  else
    v32 = 1;
  v33 = !v32;
  if (!v30 && !*(_DWORD *)(a3 + 16))
  {
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_453);
    v17 = (uint64_t)a9;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      v40 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Invalid custom fixed chunk size:0x%x for itemID:%lld\n"), *(unsigned int *)(a3 + 16), valuePtr);
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_458);
      v41 = CK_DEFAULT_LOG_INTERNAL;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        goto LABEL_90;
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v40;
      goto LABEL_89;
    }
    goto LABEL_96;
  }
  if (v25 <= 8 && ((1 << v25) & 0x116) != 0)
  {
    v34 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v35 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt64Type, &valuePtr);
    if (v35)
    {
      for (i = v35; !CSRegisterOperation((uint64_t)a1, i); CSWaitForOperation((uint64_t)a1, i))
        ;
      if (CKLockChunkStore((uint64_t)a1))
      {
        v22 = 0;
        v20 = 0;
        v37 = 0;
        v81 = 0;
LABEL_51:
        v38 = 0;
        v39 = 0;
LABEL_52:
        v17 = (uint64_t)a9;
        goto LABEL_53;
      }
      alloc = v34;
      if (v86 | (unint64_t)a7)
      {
        v42 = (void *)_CSCopyChunkListForItemID((uint64_t)a1, valuePtr, &v91);
        v20 = v42;
      }
      else
      {
        v42 = (void *)CSsql_get64((uint64_t)a1, 1, "SELECT ct_rowid FROM CSChunkTable WHERE ct_iid = %lld", valuePtr);
        v20 = 0;
      }
      v48 = v42 != 0;
      CKUnlockChunkStore((uint64_t)a1);
      v81 = v48;
      v49 = !v48;
      if (v48 && (a4 & 1) == 0)
      {
        if (!a7)
          goto LABEL_254;
        v17 = (uint64_t)a9;
        if (CKReadLockChunkStore((uint64_t)a1))
        {
LABEL_124:
          v22 = 0;
LABEL_161:
          v37 = 0;
          v38 = 0;
          v39 = 0;
          goto LABEL_53;
        }
        v55 = _CSGetSignatureForItemID((uint64_t)a1, valuePtr, v82, &v89, (uint64_t *)&v94);
        CKUnlockChunkStore((uint64_t)a1);
        if ((v55 & 1) != 0)
        {
LABEL_254:
          if (CKFileDigestResultsHasFileLength((uint64_t)v89))
          {
            v22 = 0;
            v37 = 0;
            v38 = 0;
            v39 = 1;
            goto LABEL_52;
          }
          if (v91)
          {
            v56 = 0;
            v57 = 0;
            while (1)
            {
              v58 = CKRegisteredChunkAtIndex((uint64_t)v20, v56);
              if (!v58)
                break;
              if (v57 <= *(_QWORD *)(v58 + 16) + (unint64_t)*(unsigned int *)(v58 + 24))
                v57 = *(_QWORD *)(v58 + 16) + *(unsigned int *)(v58 + 24);
              if (++v56 >= v91)
                goto LABEL_205;
            }
          }
          else
          {
            v57 = 0;
LABEL_205:
            *(_QWORD *)buf = 0;
            v64 = (_BYTE *)CKFileDigestResultsFileSignature((uint64_t)v89);
            v65 = (const void *)CKFileDigestResultsFileVerificationKey((uint64_t)v89);
            if (CKFileDigestResultsCreate(buf, v64, v57, v65))
            {
              v17 = (uint64_t)a9;
              if (v89)
                CFRelease(v89);
              v22 = 0;
              v37 = 0;
              v38 = 0;
              v89 = *(CFTypeRef *)buf;
              v39 = 1;
LABEL_53:
              CSUnregisterOperation((uint64_t)a1, i);
              CFRelease(i);
              if (v38)
              {
                freeOpCtx(v37);
                if ((v39 & 1) == 0)
                  goto LABEL_55;
              }
              else if (!v39)
              {
LABEL_55:
                v21 = v81;
                if (!v17)
                  goto LABEL_94;
LABEL_98:
                v43 = v21;
                v44 = (_QWORD *)v17;
                v17 = 0;
                *v44 = cf;
                cf = 0;
                goto LABEL_99;
              }
              if (v85)
                *v85 = v91;
              if (v86)
              {
                *(_QWORD *)v86 = v20;
                v20 = 0;
              }
              if (a7 && v89)
              {
                CKBaseRetain(v89);
                *a7 = v89;
              }
              if (v83)
              {
                CKBaseRetain(v94);
                *v83 = v94;
              }
              v17 = 1;
              v21 = v81;
              goto LABEL_94;
            }
          }
          v22 = 0;
          v37 = 0;
          v38 = 0;
          v17 = (uint64_t)a9;
LABEL_210:
          v39 = v84;
          goto LABEL_53;
        }
        if (CK_DEFAULT_LOG_BLOCK != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_470);
        v17 = (uint64_t)a9;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
          goto LABEL_124;
        v60 = CFStringCreateWithFormat(alloc, 0, CFSTR("failed to get file sig for itemID:%lld\n"), valuePtr);
        if (CK_DEFAULT_LOG_BLOCK != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_475);
        v61 = CK_DEFAULT_LOG_INTERNAL;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v60;
          _os_log_impl(&dword_20A95C000, v61, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v60)
          CFRelease(v60);
        v22 = 0;
LABEL_159:
        v37 = 0;
        goto LABEL_51;
      }
      if ((a4 & 1) != 0)
      {
        if (v20)
          free(v20);
      }
      else
      {
        if (v20)
          v49 = 0;
        if (v49 != 1)
          registerChunksForItem_cold_7();
      }
      v91 = 0;
      if ((CKUnregisterChunksForItem((uint64_t)a1, valuePtr) & 1) != 0)
      {
        if ((((uint64_t (*)(_QWORD, char **, CFTypeRef *))a2[6])(a2[1], &v92, &cf) & 1) != 0)
        {
          v50 = (uint64_t (*)(uint64_t, char **, CFErrorRef *))a2[6];
          v51 = v50 == openFd || v50 == openFdUncached;
          v38 = !v51;
          if (v51)
            OpCtx = v92;
          else
            OpCtx = createOpCtx();
          if (OpCtx)
          {
            *((_QWORD *)OpCtx + 1) = v92;
            *((_QWORD *)OpCtx + 2) = a2;
            v88 = 0;
            memset(v87, 0, sizeof(v87));
            if ((((uint64_t (*)(void))a2[8])() & 1) != 0)
            {
              setOpCtxStatInfo((uint64_t)OpCtx, (uint64_t *)v87);
              setOpCtxFileDigestArguments((uint64_t)OpCtx, *(CFTypeRef *)(a3 + 24));
              if (a7)
              {
                if (!CKFileSignatureGeneratorCreate((_QWORD *)OpCtx + 24, *(const void **)(a3 + 24)))
                  goto LABEL_181;
                v59 = *(const void **)(a3 + 32);
                if (v59)
                {
                  CKBaseRetain(v59);
                  *((_QWORD *)OpCtx + 25) = *(_QWORD *)(a3 + 32);
                }
              }
              if (!setOpCtxPath((uint64_t)OpCtx, __s))
              {
                if (!setOpCtxChunkScheme((uint64_t)OpCtx, 1, *(CFTypeRef *)(a3 + 40)))
                {
                  if (a1)
                    v66 = CFRetain(a1);
                  else
                    v66 = 0;
                  *(_QWORD *)OpCtx = v66;
                  *((_QWORD *)OpCtx + 16) = CSRegisterChunksForFileCallback;
                  *((_QWORD *)OpCtx + 7) = valuePtr;
                  v67 = buffer;
                  if (!v33)
                    v67 = 0;
                  *((_QWORD *)OpCtx + 12) = v67;
                  v22 = *(_QWORD *)&v87[0];
                  *((_QWORD *)OpCtx + 10) = *(_QWORD *)&v87[0];
                  if (v31)
                    v68 = 0;
                  else
                    v68 = *(_DWORD *)(a3 + 16);
                  OpCtx[160] = 5;
                  *((_DWORD *)OpCtx + 41) = 10000;
                  *((_DWORD *)OpCtx + 54) = v68;
                  *((_DWORD *)OpCtx + 55) = 0;
                  v69 = *((_QWORD *)OpCtx + 2);
                  if (*(int *)v69 >= 3)
                  {
                    v70 = *(uint64_t (**)(_QWORD, const __CFString *))(v69 + 96);
                    if (v70)
                    {
                      v71 = (const __CFString *)v70(*((_QWORD *)OpCtx + 1), CFSTR("kCKItemChunkLength"));
                      if (v71)
                      {
                        v72 = v71;
                        *((_DWORD *)OpCtx + 55) = ck_get_int32_from_cftype_using_description((uint64_t)CFSTR("kCKItemChunkLength"), v71, *((unsigned int *)OpCtx + 55));
                        CFRelease(v72);
                      }
                      v73 = (const __CFString *)(*(uint64_t (**)(_QWORD, const __CFString *))(*((_QWORD *)OpCtx + 2) + 96))(*((_QWORD *)OpCtx + 1), CFSTR("kCKItemSubchunkLength"));
                      if (v73)
                      {
                        v74 = v73;
                        *((_DWORD *)OpCtx + 57) = ck_get_int32_from_cftype_using_description((uint64_t)CFSTR("kCKItemSubchunkLength"), v73, *((unsigned int *)OpCtx + 57));
                        CFRelease(v74);
                        v75 = *((_DWORD *)OpCtx + 57);
                        if ((v75 & 0x3FF) != 0)
                          *((_DWORD *)OpCtx + 57) = (v75 & 0xFFFFFC00) + 1024;
                      }
                    }
                  }
                  v37 = OpCtx;
                  if (chunkItem(OpCtx, &cf))
                  {
                    v84 = 0;
                    v20 = 0;
                  }
                  else
                  {
                    v76 = (CFTypeRef)*((_QWORD *)OpCtx + 26);
                    if (!v76)
                      registerChunksForItem_cold_5();
                    if (v89)
                    {
                      CFRelease(v89);
                      v76 = (CFTypeRef)*((_QWORD *)OpCtx + 26);
                    }
                    v89 = v76;
                    *((_QWORD *)OpCtx + 26) = 0;
                    v77 = (const void *)*((_QWORD *)OpCtx + 30);
                    if (v77)
                    {
                      if (v94)
                      {
                        CFRelease(v94);
                        v77 = (const void *)*((_QWORD *)OpCtx + 30);
                        v76 = v89;
                      }
                      v94 = v77;
                      *((_QWORD *)OpCtx + 30) = 0;
                    }
                    if (v76)
                    {
                      v78 = *((_QWORD *)OpCtx + 25);
                      if (v78)
                      {
                        if (!CKFileDigestResultsEqual((uint64_t)v76, v78))
                          registerChunksForItem_cold_6();
                      }
                    }
                    if (CKLockChunkStore((uint64_t)a1)
                      || (v79 = _CSRegisterChunkList((uint64_t)a1, (uint64_t)OpCtx), CKUnlockChunkStore((uint64_t)a1), !v79))
                    {
                      v84 = 0;
                      v20 = 0;
                      goto LABEL_182;
                    }
                    v37 = OpCtx;
                    v91 = *((unsigned int *)OpCtx + 68);
                    v20 = (void *)*((_QWORD *)OpCtx + 33);
                    *((_QWORD *)OpCtx + 33) = 0;
                    clearChunksArray((uint64_t)(OpCtx + 264));
                    v84 = 1;
                  }
                  v17 = (uint64_t)a9;
                  goto LABEL_203;
                }
LABEL_181:
                v84 = 0;
                v20 = 0;
                v22 = 0;
LABEL_182:
                v37 = OpCtx;
                v17 = (uint64_t)a9;
LABEL_203:
                ((void (*)(_QWORD, char *, _QWORD))a2[7])(a2[1], v92, 0);
                goto LABEL_210;
              }
            }
            else
            {
              if (CK_DEFAULT_LOG_BLOCK != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_495);
              v17 = (uint64_t)a9;
              v37 = OpCtx;
              if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
              {
                v84 = 0;
                v20 = 0;
                v22 = 0;
                goto LABEL_203;
              }
              v62 = CFStringCreateWithFormat(alloc, 0, CFSTR("stat failed on itemID:%lld, path:\"%s\", ino:%llu, error:\"%@\""), valuePtr, __s, *((_QWORD *)OpCtx + 5), cf);
              if (CK_DEFAULT_LOG_BLOCK != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_500);
              v63 = CK_DEFAULT_LOG_INTERNAL;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138543362;
                *(_QWORD *)&buf[4] = v62;
                _os_log_impl(&dword_20A95C000, v63, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
              }
              if (v62)
                CFRelease(v62);
            }
          }
          v84 = 0;
          v20 = 0;
          v22 = 0;
          v17 = (uint64_t)a9;
          v37 = OpCtx;
          goto LABEL_203;
        }
        if (CK_DEFAULT_LOG_BLOCK != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_487);
        v17 = (uint64_t)a9;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        {
          v53 = CFStringCreateWithFormat(alloc, 0, CFSTR("open failed on itemID:%lld, path:\"%s\", error:\"%@\""), valuePtr, __s, cf);
          if (CK_DEFAULT_LOG_BLOCK != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_492);
          v54 = CK_DEFAULT_LOG_INTERNAL;
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
            goto LABEL_156;
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v53;
LABEL_155:
          _os_log_impl(&dword_20A95C000, v54, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
LABEL_156:
          if (v53)
            CFRelease(v53);
          v22 = 0;
          v20 = 0;
          goto LABEL_159;
        }
      }
      else
      {
        if (CK_DEFAULT_LOG_BLOCK != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_479);
        v17 = (uint64_t)a9;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
        {
          v53 = CFStringCreateWithFormat(alloc, 0, CFSTR("Failed to unregister chunks for itemID:%llu"), valuePtr);
          if (CK_DEFAULT_LOG_BLOCK != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_484);
          v54 = CK_DEFAULT_LOG_INTERNAL;
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
            goto LABEL_156;
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v53;
          goto LABEL_155;
        }
      }
      v22 = 0;
      v20 = 0;
      goto LABEL_161;
    }
    v21 = 0;
    v20 = 0;
    v22 = 0;
LABEL_93:
    v17 = (uint64_t)a9;
    if (!a9)
      goto LABEL_94;
    goto LABEL_98;
  }
  if (CK_DEFAULT_LOG_BLOCK != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_461);
  v17 = (uint64_t)a9;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
  {
    v40 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Invalid file signature scheme:0x%x for itemID:%lld\n"), v25, valuePtr);
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_466);
    v41 = CK_DEFAULT_LOG_INTERNAL;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      goto LABEL_90;
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v40;
LABEL_89:
    _os_log_impl(&dword_20A95C000, v41, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
LABEL_90:
    if (v40)
      CFRelease(v40);
    v21 = 0;
    v20 = 0;
    v22 = 0;
    goto LABEL_93;
  }
  v21 = 0;
  v20 = 0;
  v22 = 0;
  if (a9)
    goto LABEL_98;
LABEL_94:
  v43 = v21;
  if (cf)
    CFRelease(cf);
LABEL_99:
  if (v20)
    free(v20);
  if (v89)
    CKBaseRelease(v89);
  v89 = 0;
  if (v94)
    CKBaseRelease(v94);
  v94 = 0;
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_505);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEBUG))
    {
      v45 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("rc:%u, itemID:%lld, size:%llu, chunkCount:%llu, ac:%u"), v17, valuePtr, v22, v91, v43);
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_513);
      v46 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v45;
        _os_log_impl(&dword_20A95C000, v46, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v45)
        CFRelease(v45);
    }
  }
  return v17;
}

uint64_t CKRegisterItemAndChunks(const void *a1, _QWORD *a2, uint64_t a3, _QWORD *a4, unint64_t *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  CFNumberRef i;
  const __CFString *v17;
  CFTypeRef v18;
  uint64_t v19;
  CFTypeRef v20;
  sqlite3_int64 valuePtr;
  CFTypeRef v23;
  CFTypeRef cf;

  if (!CKChunkStoreIsRegistry((uint64_t)a1))
    CKRegisterItemAndChunks_cold_2();
  v23 = 0;
  cf = 0;
  if (a6)
    *a6 = 0;
  if ((CKChunkStoreIsReadOnly((uint64_t)a1) & 1) != 0
    || !registerChunksForItem(a1, a2, a3, 1, a4, a5, &cf, &v23, a8))
  {
    goto LABEL_18;
  }
  if (!cf)
    CKRegisterItemAndChunks_cold_1();
  valuePtr = *(_QWORD *)(a3 + 8);
  for (i = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt64Type, &valuePtr);
        !CSRegisterOperation((uint64_t)a1, i);
  if (!CKLockChunkStore((uint64_t)a1))
  {
    v17 = registerItem((uint64_t)a1, (uint64_t)cf, valuePtr, (uint64_t)v23, 0);
    CKUnlockChunkStore((uint64_t)a1);
    if (i)
    {
      CSUnregisterOperation((uint64_t)a1, i);
      CFRelease(i);
    }
    if (v17)
      goto LABEL_15;
LABEL_18:
    v19 = 0;
    goto LABEL_27;
  }
  if (i)
  {
    CSUnregisterOperation((uint64_t)a1, i);
    CFRelease(i);
  }
LABEL_15:
  if (a6)
  {
    if (cf)
    {
      CFRetain(cf);
      v18 = cf;
    }
    else
    {
      v18 = 0;
    }
    *a6 = v18;
  }
  if (a7)
  {
    if (v23)
    {
      CFRetain(v23);
      v20 = v23;
    }
    else
    {
      v20 = 0;
    }
    *a7 = v20;
  }
  v19 = 1;
LABEL_27:
  if (cf)
    CKBaseRelease(cf);
  cf = 0;
  if (v23)
    CKBaseRelease(v23);
  return v19;
}

uint64_t CKUnregisterFile(uint64_t a1, sqlite3_int64 a2)
{
  uint64_t result;

  if (!CKChunkStoreIsRegistry(a1))
    CKUnregisterFile_cold_1();
  result = CKChunkStoreIsReadOnly(a1);
  if ((result & 1) == 0)
  {
    result = CKLockChunkStore(a1);
    if (!(_DWORD)result)
    {
      unregisterItem(a1, a2);
      _CSUnregisterAllChunksForItem(a1, a2);
      return CKUnlockChunkStore(a1);
    }
  }
  return result;
}

BOOL CKGetRegisteredChunksForItemID(uint64_t a1, sqlite3_int64 a2, CFStringRef *a3, _QWORD *a4)
{
  _BOOL8 result;

  if (!CKChunkStoreIsRegistry(a1))
    CKGetRegisteredChunksForItemID_cold_1();
  result = 0;
  if (a3 && a4)
  {
    if (CKReadLockChunkStore(a1))
    {
      return 0;
    }
    else
    {
      *a3 = _CSCopyChunkListForItemID(a1, a2, a4);
      CKUnlockChunkStore(a1);
      return *a3 != 0;
    }
  }
  return result;
}

BOOL CKGetRegisteredChunksForFileSignature(uint64_t a1, unsigned __int8 *a2, CFStringRef *a3, _QWORD *a4)
{
  _BOOL8 result;

  if (!CKChunkStoreIsRegistry(a1))
    CKGetRegisteredChunksForFileSignature_cold_1();
  result = 0;
  if (a3 && a4)
  {
    if (CKReadLockChunkStore(a1))
    {
      return 0;
    }
    else
    {
      *a3 = _CSCopyChunkListForFileSignature(a1, a2, a4);
      CKUnlockChunkStore(a1);
      return *a3 != 0;
    }
  }
  return result;
}

BOOL CKRegisterChunk(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;

  if (!CKChunkStoreIsRegistry(a1))
    CKRegisterChunk_cold_1();
  if ((CKChunkStoreIsReadOnly(a1) & 1) != 0 || CKLockChunkStore(a1))
    return 0;
  v4 = _CSRegisterChunk(a1, a2, *(char *)(a2 + 28)) != 0;
  CKUnlockChunkStore(a1);
  return v4;
}

uint64_t CKGetRegisteredChunk(uint64_t a1, _BYTE *a2, char **a3)
{
  uint64_t v7;

  if (!CKChunkStoreIsRegistry(a1))
    CKGetRegisteredChunk_cold_1();
  if (CKReadLockChunkStore(a1))
    return 0;
  v7 = _CSGetRegisteredChunk(a1, a2, a3);
  CKUnlockChunkStore(a1);
  return v7;
}

uint64_t CKGetRegisteredChunks(uint64_t a1, _BYTE *a2, _QWORD *a3, int *a4)
{
  uint64_t v9;

  if (!CKChunkStoreIsRegistry(a1))
    CKGetRegisteredChunks_cold_1();
  if (CKReadLockChunkStore(a1))
    return 0;
  v9 = _CSGetRegisteredChunks(a1, a2, a3, a4);
  CKUnlockChunkStore(a1);
  return v9;
}

BOOL CKRegisterFile(uint64_t a1, uint64_t a2, sqlite3_int64 a3)
{
  CFStringRef v6;
  NSObject *v7;
  _BOOL8 v8;
  CFNumberRef i;
  sqlite3_int64 valuePtr;
  uint8_t buf[4];
  CFStringRef v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  valuePtr = a3;
  if (!CKChunkStoreIsRegistry(a1))
    CKRegisterFile_cold_1();
  if (CKChunkStoreIsReadOnly(a1))
  {
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_352);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("can't register file %lld because the chunkstore is readonly"), a3, valuePtr);
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_356);
      v7 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v13 = v6;
        _os_log_impl(&dword_20A95C000, v7, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v6)
        CFRelease(v6);
    }
    return 0;
  }
  else
  {
    for (i = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt64Type, &valuePtr);
          !CSRegisterOperation(a1, i);
    if (CKLockChunkStore(a1))
    {
      v8 = 0;
    }
    else
    {
      _CSUnregisterTemporaryChunks(a1, valuePtr);
      v8 = registerItem(a1, a2, valuePtr, 0, 1) != 0;
      CKUnlockChunkStore(a1);
    }
    CSUnregisterOperation(a1, i);
    CFRelease(i);
  }
  return v8;
}

uint64_t CKGetRegisteredFileSignature(uint64_t a1, CFTypeRef *a2, sqlite3_int64 a3)
{
  if (!CKChunkStoreIsRegistry(a1))
    CKGetRegisteredFileSignature_cold_1();
  return CKGetRegisteredFileMetadata(a1, a3, a2, 0);
}

uint64_t CKGetRegisteredFileMetadata(uint64_t a1, sqlite3_int64 a2, CFTypeRef *a3, _QWORD *a4)
{
  uint64_t v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef v12;
  CFTypeRef cf;

  if (!CKChunkStoreIsRegistry(a1))
    CKGetRegisteredFileMetadata_cold_1();
  if (CKReadLockChunkStore(a1))
    return 0;
  v12 = 0;
  cf = 0;
  v8 = _CSGetSignatureForItemID(a1, a2, 0, &cf, (uint64_t *)&v12);
  CKUnlockChunkStore(a1);
  v9 = cf;
  if ((_DWORD)v8)
  {
    if (a3 && cf)
    {
      CFRetain(cf);
      v9 = cf;
      *a3 = cf;
    }
    if (a4)
    {
      v10 = v12;
      if (v12)
      {
        CFRetain(v12);
        v10 = v12;
        v9 = cf;
      }
      *a4 = v10;
    }
  }
  if (v9)
    CKBaseRelease(v9);
  cf = 0;
  if (v12)
    CKBaseRelease(v12);
  return v8;
}

uint64_t CKGetRegisteredFileItemID(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v5;

  if (!CKChunkStoreIsRegistry(a1))
    CKGetRegisteredFileItemID_cold_1();
  if (CKReadLockChunkStore(a1))
    return 0;
  v5 = _CSGetItemIdForFileSignature(a1, a2);
  CKUnlockChunkStore(a1);
  return v5;
}

uint64_t CKUnregisterAllTemporaryChunks(uint64_t a1)
{
  uint64_t v3;

  if (!CKChunkStoreIsRegistry(a1))
    CKUnregisterAllTemporaryChunks_cold_1();
  if ((CKChunkStoreIsReadOnly(a1) & 1) != 0 || CKLockChunkStore(a1))
    return 0;
  v3 = _CSUnregisterAllTemporaryChunks(a1);
  CKUnlockChunkStore(a1);
  return v3;
}

uint64_t CKUnregisterTemporaryChunks(uint64_t a1, sqlite3_int64 a2)
{
  uint64_t v5;

  if (!CKChunkStoreIsRegistry(a1))
    CKUnregisterTemporaryChunks_cold_1();
  if ((CKChunkStoreIsReadOnly(a1) & 1) != 0 || CKLockChunkStore(a1))
    return 0;
  v5 = _CSUnregisterTemporaryChunks(a1, a2);
  CKUnlockChunkStore(a1);
  return v5;
}

unint64_t CKRegisterTemporaryChunk(uint64_t a1, _QWORD *a2)
{
  unint64_t v5;

  if (!CKChunkStoreIsRegistry(a1))
    CKRegisterTemporaryChunk_cold_1();
  if ((CKChunkStoreIsReadOnly(a1) & 1) != 0 || CKLockChunkStore(a1))
    return 0;
  *a2 = 0;
  v5 = _CSRelocateRegisteredChunk(a1, (uint64_t)a2, 110, 116);
  CKUnlockChunkStore(a1);
  return v5;
}

BOOL CKRegisterTemporaryChunks(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _BOOL8 v6;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BOOL4 v13;

  if (!CKChunkStoreIsRegistry(a1))
    CKRegisterTemporaryChunks_cold_1();
  if ((CKChunkStoreIsReadOnly(a1) & 1) != 0 || CKLockChunkStore(a1))
    return 0;
  v8 = CKRegisteredChunkSize(a2);
  if (a3)
  {
    v9 = v8;
    if (_CSRegisterTemporaryChunk(a1, a2))
    {
      v10 = a2 + v9;
      v11 = 1;
      do
      {
        v12 = v11;
        if (a3 == v11)
          break;
        v13 = _CSRegisterTemporaryChunk(a1, v10);
        v10 += v9;
        v11 = v12 + 1;
      }
      while (v13);
      v6 = v12 >= a3;
    }
    else
    {
      v6 = 0;
    }
  }
  else
  {
    v6 = 1;
  }
  CKUnlockChunkStore(a1);
  return v6;
}

uint64_t CKUnregisterTemporaryChunk(uint64_t a1, uint64_t a2)
{
  uint64_t v5;

  if (!CKChunkStoreIsRegistry(a1))
    CKUnregisterTemporaryChunk_cold_1();
  if ((CKChunkStoreIsReadOnly(a1) & 1) != 0 || CKLockChunkStore(a1))
    return 0;
  v5 = _CSUnregisterChunk(a1, a2, 110);
  CKUnlockChunkStore(a1);
  return v5;
}

uint64_t CKUnregisterTemporaryNChunk(uint64_t a1, uint64_t a2)
{
  uint64_t v5;

  if (!CKChunkStoreIsRegistry(a1))
    CKUnregisterTemporaryNChunk_cold_1();
  if ((CKChunkStoreIsReadOnly(a1) & 1) != 0 || CKLockChunkStore(a1))
    return 0;
  v5 = _CSUnregisterChunk(a1, a2, 110);
  CKUnlockChunkStore(a1);
  return v5;
}

uint64_t CKUnregisterTemporaryTChunk(uint64_t a1, uint64_t a2)
{
  uint64_t v5;

  if (!CKChunkStoreIsRegistry(a1))
    CKUnregisterTemporaryTChunk_cold_1();
  if ((CKChunkStoreIsReadOnly(a1) & 1) != 0 || CKLockChunkStore(a1))
    return 0;
  v5 = _CSUnregisterChunk(a1, a2, 116);
  CKUnlockChunkStore(a1);
  return v5;
}

unint64_t CKRelocateTemporaryChunk(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v9;
  CFStringRef v10;
  NSObject *v11;
  uint8_t buf[4];
  CFStringRef v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (!CKChunkStoreIsRegistry(a1))
    CKRelocateTemporaryChunk_cold_1();
  if ((CKChunkStoreIsReadOnly(a1) & 1) != 0)
    return 0;
  if (!*(_QWORD *)a2)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_374);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEBUG))
      return 0;
    v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Invalid chunk rowID, itemID:%lld, o:0x%llx, sz:0x%x\n"), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_378);
    v11 = CK_DEFAULT_LOG_INTERNAL;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEBUG))
      goto LABEL_26;
    *(_DWORD *)buf = 138543362;
    v13 = v10;
LABEL_25:
    _os_log_impl(&dword_20A95C000, v11, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
LABEL_26:
    if (v10)
      CFRelease(v10);
    return 0;
  }
  if ((_DWORD)a3 != 116 && (_DWORD)a3 != 110 || (_DWORD)a4 != 110 && (_DWORD)a4 != 116)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_381);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEBUG))
      return 0;
    v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Invalid chunk relocation ('%c'/'%c') for itemID:%lld, o:0x%llx, sz:0x%x, rowID:%llu\n"), a3, a4, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24), *(_QWORD *)a2);
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_386);
    v11 = CK_DEFAULT_LOG_INTERNAL;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_DEBUG))
      goto LABEL_26;
    *(_DWORD *)buf = 138543362;
    v13 = v10;
    goto LABEL_25;
  }
  if (CKLockChunkStore(a1))
    return 0;
  v9 = _CSRelocateRegisteredChunk(a1, a2, a3, a4);
  CKUnlockChunkStore(a1);
  return v9;
}

uint64_t CKConvertTemporaryChunks(uint64_t a1, sqlite3_int64 a2)
{
  uint64_t v5;

  if (!CKChunkStoreIsRegistry(a1))
    CKConvertTemporaryChunks_cold_1();
  if ((CKChunkStoreIsReadOnly(a1) & 1) != 0 || CKLockChunkStore(a1))
    return 0;
  v5 = _CSConvertTemporaryChunks(a1, a2);
  CKUnlockChunkStore(a1);
  return v5;
}

uint64_t CKKeyForRegisteredChunk(uint64_t a1, _BYTE *a2, _QWORD *a3)
{
  uint64_t v7;

  if (!CKChunkStoreIsRegistry(a1))
    CKKeyForRegisteredChunk_cold_1();
  if (CKReadLockChunkStore(a1))
    return 0;
  v7 = _CSKeyForRegisteredChunk(a1, a2, a3);
  CKUnlockChunkStore(a1);
  return v7;
}

BOOL CKRegisterNeededChunk(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;

  if (!CKChunkStoreIsRegistry(a1))
    CKRegisterNeededChunk_cold_1();
  if ((CKChunkStoreIsReadOnly(a1) & 1) != 0 || CKLockChunkStore(a1))
    return 0;
  v4 = _CSRegisterChunk(a1, a2, 110) != 0;
  CKUnlockChunkStore(a1);
  return v4;
}

uint64_t CKUnregisterChunksForItem(uint64_t a1, sqlite3_int64 a2)
{
  uint64_t v5;

  if (!CKChunkStoreIsRegistry(a1))
    CKUnregisterChunksForItem_cold_1();
  if ((CKChunkStoreIsReadOnly(a1) & 1) != 0 || CKLockChunkStore(a1))
    return 0;
  v5 = _CSUnregisterAllChunksForItem(a1, a2);
  CKUnlockChunkStore(a1);
  return v5;
}

sqlite3_int64 CKTokenForRegisteredChunk(uint64_t a1, unsigned __int8 *a2)
{
  sqlite3_int64 v5;

  if (!CKChunkStoreIsRegistry(a1))
    CKTokenForRegisteredChunk_cold_1();
  if (CKReadLockChunkStore(a1))
    return 0;
  v5 = _CSTokenForChunkSignature(a1, a2, 114);
  CKUnlockChunkStore(a1);
  return v5;
}

uint64_t chunkFdForStorage(const void *a1, char **a2, char a3, _QWORD *a4)
{
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;
  char *v14;
  const __CFString *v15;
  CFTypeRef v16;
  NSObject *v17;
  uint64_t v18;
  CFStringRef v20;
  NSObject *v21;
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  char **v26;
  __int128 v27;
  __int128 v28;
  uint64_t (*v29)(uint64_t, char **, CFErrorRef *);
  uint64_t (*v30)(int, void **, _QWORD *);
  uint64_t (*v31)(uint64_t, uint64_t, _QWORD *);
  uint64_t (*v32)(uint64_t, unint64_t, void *, size_t, unint64_t *, CFErrorRef *);
  uint64_t (*v33)(uint64_t, char *, __CFData **, CFErrorRef *);
  uint64_t (*v34)(uint64_t, char *, CFDataRef, CFErrorRef *);
  CFTypeRef v35;
  char *v36;
  CFErrorRef v37;
  uint64_t valuePtr;
  uint8_t buf[4];
  CFStringRef v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (CKChunkStoreIsRegistry((uint64_t)a1))
    chunkFdForStorage_cold_1();
  if (!a2)
    chunkFdForStorage_cold_2();
  v37 = 0;
  valuePtr = 0;
  v35 = 0;
  v36 = 0;
  *a4 = 0;
  v27 = 0u;
  v28 = 0u;
  v25 = 2;
  v26 = a2;
  v8 = *a2;
  if (*a2)
  {
    v9 = strrchr(*a2, 47);
    if (v9)
      v10 = v9 + 1;
    else
      v10 = v8;
    v11 = strrchr(v10, 46);
    if (v11)
      v12 = v11 + 1;
    else
      v12 = 0;
  }
  else
  {
    v12 = 0;
  }
  v29 = openFd;
  v30 = closeFd;
  v31 = statFd;
  v32 = readFd;
  v33 = getCacheBlobFd;
  v34 = setCacheBlobFd;
  v13 = openFd((uint64_t)a2, &v36, &v37);
  v26 = 0;
  if ((v13 & 1) == 0)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_524);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      v15 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("stat failed on path:\"%s\", error:\"%@\"\n"), v8, v37);
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_528);
      v17 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v40 = v15;
        _os_log_impl(&dword_20A95C000, v17, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (!v15)
        goto LABEL_31;
      CFRelease(v15);
    }
    goto LABEL_30;
  }
  v14 = v36;
  *((_QWORD *)v36 + 1) = v36;
  *((_QWORD *)v14 + 2) = &v25;
  if (!CKChunkDigestArgumentsV1Create(&v35, 0, 0)
    || setOpCtxPath((uint64_t)v14, v8)
    || setOpCtxChunkScheme((uint64_t)v14, 0, v35))
  {
LABEL_30:
    v15 = 0;
    goto LABEL_31;
  }
  valuePtr = *((_QWORD *)v14 + 5);
  v15 = (const __CFString *)CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
  if (!v15)
  {
LABEL_31:
    v18 = 0xFFFFFFFFLL;
    goto LABEL_32;
  }
  while (!CSRegisterOperation((uint64_t)a1, v15))
    CSWaitForOperation((uint64_t)a1, v15);
  v24 = 0;
  memset(v23, 0, sizeof(v23));
  if ((v31((uint64_t)v36, (uint64_t)v23, 0) & 1) == 0)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_531);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      v20 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("stat failed on itemID:%lld, path:\"%s\", ino:%llu, error:%@\n"), valuePtr, v8, *((_QWORD *)v14 + 5), v37);
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_536);
      v21 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v40 = v20;
        _os_log_impl(&dword_20A95C000, v21, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v20)
        CFRelease(v20);
    }
    goto LABEL_31;
  }
  setOpCtxStatInfo((uint64_t)v14, (uint64_t *)v23);
  if (a1)
    v16 = CFRetain(a1);
  else
    v16 = 0;
  *(_QWORD *)v14 = v16;
  *((_QWORD *)v14 + 2) = &v25;
  *((_QWORD *)v14 + 16) = CSChunkStorageCallback;
  *((_QWORD *)v14 + 7) = valuePtr;
  *((_QWORD *)v14 + 12) = v12;
  v14[176] = a3 & 1;
  v14[160] = 3;
  *((_DWORD *)v14 + 55) = 0;
  *((_DWORD *)v14 + 41) = 20000;
  v18 = chunkItem(v14, 0);
  v22 = 0;
  if (!(_DWORD)v18)
    v22 = *((_QWORD *)v14 + 35);
  *a4 = v22;
LABEL_32:
  if (v35)
    CKBaseRelease(v35);
  v35 = 0;
  if (v15)
  {
    CSUnregisterOperation((uint64_t)a1, v15);
    CFRelease(v15);
  }
  if (v13)
    v30((int)v26, (void **)v36, 0);
  if (v37)
    CFRelease(v37);
  return v18;
}

os_log_t __fsopen_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __registerChunksForItem_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __registerChunksForItem_block_invoke_3()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __registerChunksForItem_block_invoke_451()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __registerChunksForItem_block_invoke_2_456()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __registerChunksForItem_block_invoke_459()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __registerChunksForItem_block_invoke_2_464()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __registerChunksForItem_block_invoke_468()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __registerChunksForItem_block_invoke_2_473()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __registerChunksForItem_block_invoke_477()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __registerChunksForItem_block_invoke_2_482()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __registerChunksForItem_block_invoke_485()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __registerChunksForItem_block_invoke_2_490()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __registerChunksForItem_block_invoke_493()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __registerChunksForItem_block_invoke_2_498()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

uint64_t CSRegisterChunksForFileCallback(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 *v3;
  uint64_t result;
  uint64_t v5;
  CFStringRef v6;
  NSObject *v7;
  uint8_t buf[4];
  CFStringRef v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD **)(a1 + 136);
  if (!v1)
    return 0;
  if (*((char *)v1 + 84) < 0)
    v3 = (unsigned __int8 *)v1 + CKChunkSchemeAndSignatureSize((_BYTE *)v1 + 84) + 84;
  else
    v3 = 0;
  v5 = *(_QWORD *)(a1 + 256);
  if (v5)
    LODWORD(v5) = *(_DWORD *)(v5 + 56 * *(unsigned int *)(a1 + 252) + 32);
  result = addRegisteredChunk(a1 + 264, 0, *v1, v1[9], *((_DWORD *)v1 + 20), 114, (_BYTE *)v1[7], (_BYTE *)v1 + 84, v3, v5);
  if ((_DWORD)result)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_515);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("addRegisteredChunk failed, itemID:%lld, offset:0x%llx, size:0x%x\n"), *v1, v1[9], *((unsigned int *)v1 + 20));
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_519);
      v7 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v9 = v6;
        _os_log_impl(&dword_20A95C000, v7, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v6)
        CFRelease(v6);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

os_log_t __registerChunksForItem_block_invoke_503()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __registerChunksForItem_block_invoke_3_511()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __chunkFdForStorage_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __chunkFdForStorage_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __chunkFdForStorage_block_invoke_529()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

os_log_t __chunkFdForStorage_block_invoke_2_534()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL = (uint64_t)result;
  return result;
}

uint64_t _CSHandleDatabaseIOError(uint64_t result)
{
  CFStringRef v1;
  NSObject *v2;
  int v3;
  CFStringRef v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if ((_DWORD)result == 10)
  {
    if (CK_DEFAULT_LOG_BLOCK != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_544);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
    {
      v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Chunk store database I/O error. Forcing process exit."));
      if (CK_DEFAULT_LOG_BLOCK != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK, &__block_literal_global_548);
      v2 = CK_DEFAULT_LOG_INTERNAL;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL, OS_LOG_TYPE_ERROR))
      {
        v3 = 138543362;
        v4 = v1;
        _os_log_impl(&dword_20A95C000, v2, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v3, 0xCu);
      }
      if (v1)
        CFRelease(v1);
    }
    exit(1);
  }
  return result;
}

uint64_t _CKFileDigestResultsInit(uint64_t a1, _BYTE *a2, uint64_t a3, _QWORD *a4)
{
  if (a4)
    *a4 = 0;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = CKFileSignatureCopy(a2);
  return 1;
}

uint64_t CKFileDigestResultsFileLength(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

BOOL CKFileDigestResultsHasFileLength(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) != -1;
}

uint64_t CKFileDigestResultsFileSignature(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t CKFileDigestResultsEqual(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v4;

  if (a1 == a2)
    return 1;
  result = 0;
  if (a1)
  {
    if (a2)
    {
      result = 0;
      v4 = *(_DWORD *)(a1 + 16);
      if (v4)
      {
        if (v4 == *(_DWORD *)(a2 + 16))
          return _requestCallbacks_3[4 * v4 + 2](a1);
      }
    }
  }
  return result;
}

uint64_t CKFileDigestResultsFileVerificationKey(uint64_t a1)
{
  uint64_t (*v1)(void);

  v1 = (uint64_t (*)(void))_requestCallbacks_3[4 * *(int *)(a1 + 16)];
  if (v1)
    return v1();
  else
    return 0;
}

BOOL _CKFileDigestResultsCFEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t _CKFileDigestResultsCFCopyFormatDescription(uint64_t a1)
{
  uint64_t v1;

  v1 = *(int *)(a1 + 16);
  if ((_DWORD)v1)
    return ((uint64_t (*)(void))_requestCallbacks_3[4 * v1 + 1])();
  else
    return 0;
}

uint64_t _CKFileDigestResultsCFCopyDebugDescription(uint64_t a1)
{
  uint64_t v1;

  v1 = *(int *)(a1 + 16);
  if ((_DWORD)v1)
    return ((uint64_t (*)(void))_requestCallbacks_3[4 * v1 + 1])();
  else
    return 0;
}

uint64_t doEncrypt(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  uint64_t v4;
  CFTypeRef v6;
  CFTypeRef v7;

  v6 = 0;
  v7 = 0;
  if (!CKChunkCryptorCreate(&v6, 1, a3, a4))
    return 0;
  if (CKChunkCryptorUpdate((uint64_t)v6))
    v4 = CKChunkCryptorFinish((uint64_t)v6);
  else
    v4 = 0;
  if (v6)
    CKBaseRelease(v6);
  v6 = 0;
  if (v7)
    CKBaseRelease(v7);
  return v4;
}

uint64_t doDecrypt(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  uint64_t v4;
  CFTypeRef v6;
  CFTypeRef v7;

  v6 = 0;
  v7 = 0;
  if (!CKChunkCryptorCreate(&v6, 0, a3, a4))
    return 0;
  if (CKChunkCryptorUpdate((uint64_t)v6))
    v4 = CKChunkCryptorFinish((uint64_t)v6);
  else
    v4 = 0;
  if (v6)
    CKBaseRelease(v6);
  v6 = 0;
  if (v7)
    CKBaseRelease(v7);
  return v4;
}

uint64_t getChunkListCacheBlob(uint64_t a1, CFMutableDataRef *a2)
{
  uint64_t v4;
  uint64_t CacheBlob;
  UInt8 *MutableBytePtr;
  CFIndex Length;
  int v8;
  BOOL v9;
  CFStringRef v10;
  NSObject *v11;
  CFMutableDataRef theData;
  uint8_t buf[4];
  CFStringRef v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  theData = 0;
  v4 = *(_QWORD *)(a1 + 104);
  CacheBlob = getCacheBlob((_QWORD *)a1, (uint64_t)"com.apple.cscache", &theData);
  if (!(_DWORD)CacheBlob)
  {
    MutableBytePtr = CFDataGetMutableBytePtr(theData);
    Length = CFDataGetLength(theData);
    if ((Length & 0xFFFFFFFE) >= 0x3AuLL
      && ((v8 = MutableBytePtr[20], v8 != 3) ? (v9 = v8 == 5) : (v9 = 1), v9))
    {
      if (*(unsigned __int8 *)(a1 + 160) == v8)
      {
        CacheBlob = 0;
        *a2 = theData;
        return CacheBlob;
      }
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_9);
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
        goto LABEL_27;
      v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Different type chunk list cache found for \"%s\", size:%u, type:%u expected %u\n"), v4, Length, MutableBytePtr[20], *(unsigned __int8 *)(a1 + 160));
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_14);
      v11 = CK_DEFAULT_LOG_INTERNAL_0;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
        goto LABEL_25;
      *(_DWORD *)buf = 138543362;
      v15 = v10;
    }
    else
    {
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_0);
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
        goto LABEL_27;
      v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Invalid chunk list cache for \"%s\", size:%u, type:%u\n"), v4, Length, MutableBytePtr[20]);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_6);
      v11 = CK_DEFAULT_LOG_INTERNAL_0;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
LABEL_25:
        if (v10)
          CFRelease(v10);
LABEL_27:
        CacheBlob = 22;
        goto LABEL_28;
      }
      *(_DWORD *)buf = 138543362;
      v15 = v10;
    }
    _os_log_impl(&dword_20A95C000, v11, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    goto LABEL_25;
  }
LABEL_28:
  if (theData)
    CFRelease(theData);
  return CacheBlob;
}

os_log_t __getChunkListCacheBlob_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCacheBlob_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCacheBlob_block_invoke_7()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCacheBlob_block_invoke_2_12()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

uint64_t setChunkListCacheBlob(uint64_t a1, CFMutableDataRef theData)
{
  uint64_t v2;
  UInt8 *MutableBytePtr;
  int v5;
  const __CFData *v7;

  v2 = a1;
  if (theData)
  {
    MutableBytePtr = CFDataGetMutableBytePtr(theData);
    if ((CFDataGetLength(theData) & 0xFFFFFFFEuLL) <= 0x39)
      setChunkListCacheBlob_cold_1();
    v5 = *(unsigned __int8 *)(v2 + 160);
    if (v5 != 3 && v5 != 5)
      setChunkListCacheBlob_cold_2();
    MutableBytePtr[20] = v5;
    a1 = v2;
    v7 = theData;
  }
  else
  {
    v7 = 0;
  }
  return setCacheBlob(a1, (uint64_t)"com.apple.cscache", v7);
}

uint64_t chunkItem(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const void **v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  CFStringRef v11;
  NSObject *v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void **v19;
  CFStringRef v20;
  NSObject *v21;
  int ChunkProfile;
  char *v23;
  char *v24;
  int64_t v25;
  CFStringRef v26;
  NSObject *v27;
  char *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  CFIndex v35;
  uint64_t v36;
  CFStringRef v37;
  uint64_t v38;
  NSObject *v39;
  unsigned int v40;
  uint64_t v41;
  CFIndex v42;
  int64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  int64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  int64_t v52;
  char *v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  __int16 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int64_t v78;
  uint64_t v79;
  uint64_t v80;
  CFStringRef v81;
  NSObject *v82;
  uint64_t (*v83)(uint64_t);
  uint64_t v84;
  uint64_t v85;
  const __CFData *v86;
  UInt8 *MutableBytePtr;
  CFStringRef v88;
  const void **v89;
  NSObject *v90;
  int v91;
  unint64_t v92;
  unsigned int v93;
  unsigned __int8 *v94;
  CFStringRef v95;
  uint64_t v96;
  CFStringRef v97;
  NSObject *v98;
  int v99;
  uint64_t v100;
  NSObject *v101;
  os_log_type_t v102;
  CFStringRef v103;
  NSObject *v104;
  CFStringRef v105;
  NSObject *v106;
  CFStringRef v107;
  NSObject *v108;
  NSObject *v109;
  CFStringRef v110;
  NSObject *v111;
  uint64_t v112;
  uint64_t v113;
  const void *v114;
  NSObject *v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  const char *v125;
  const char *v126;
  const char *v127;
  CFStringRef v128;
  NSObject *v129;
  uint64_t v130;
  int v131;
  const void *v132;
  CFStringRef v133;
  NSObject *v134;
  uint64_t v135;
  uint64_t v136;
  unsigned __int8 v137;
  unsigned __int8 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(uint64_t);
  CFStringRef v146;
  uint64_t v147;
  NSObject *v148;
  os_log_type_t v149;
  uint64_t v150;
  uint64_t v151;
  CFStringRef v152;
  NSObject *v153;
  uint64_t v154;
  _BYTE *v155;
  const __CFAllocator *v156;
  int v157;
  const __CFAllocator *v158;
  uint64_t v159;
  CFStringRef v160;
  NSObject *v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  UInt8 *v165;
  unint64_t v166;
  char *v167;
  uint64_t v168;
  char *v169;
  int v170;
  BOOL v171;
  int v172;
  CFStringRef v174;
  NSObject *v175;
  uint64_t v176;
  const UInt8 *BytePtr;
  const UInt8 *v178;
  unsigned int v179;
  CFStringRef v180;
  NSObject *v181;
  CFStringRef v182;
  NSObject *v183;
  CFTypeRef v184;
  _BYTE *v185;
  unsigned int v186;
  unsigned int v187;
  _BOOL4 v188;
  _BOOL4 v189;
  NSObject *v190;
  uint64_t v191;
  CFStringRef v192;
  NSObject *v193;
  __CFData *Mutable;
  __CFData *v195;
  UInt8 *v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  const void *v202;
  CFStringRef v203;
  NSObject *v204;
  NSObject *v205;
  uint64_t v206;
  unsigned __int8 *v207;
  int v208;
  const void *v209;
  const __CFAllocator *v210;
  uint64_t v211;
  unsigned int v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  unint64_t v218;
  CFStringRef v219;
  NSObject *v220;
  size_t v221;
  void *v222;
  uint64_t v223;
  size_t v224;
  size_t v225;
  uint64_t v226;
  CFStringRef v227;
  NSObject *v228;
  CFStringRef v229;
  NSObject *v230;
  uint64_t v231;
  int v232;
  const void *v233;
  _BYTE *v234;
  uint64_t v235;
  CFStringRef v236;
  NSObject *v237;
  uint64_t (*v238)(uint64_t);
  uint64_t v239;
  CFStringRef v240;
  NSObject *v241;
  CFStringRef v242;
  CFStringRef v243;
  CFStringRef v244;
  CFStringRef v245;
  NSObject *v246;
  uint64_t v247;
  uint64_t v248;
  CFAllocatorRef v249;
  const __CFAllocator *v250;
  size_t v251;
  uint64_t v252;
  uint64_t v253;
  _BOOL4 v254;
  _BOOL4 v255;
  uint64_t v256;
  char *__dst;
  UInt8 *__dsta;
  const __CFAllocator *alloc;
  CFAllocatorRef alloca;
  CFAllocatorRef allocb;
  int allocc;
  uint64_t v263;
  int64_t v264;
  uint64_t v265;
  UInt8 *v266;
  uint64_t v267;
  void *ptr;
  char *ptra;
  __CFData *ptrb;
  void *ptrc;
  CFIndex length;
  CFIndex lengtha;
  CFIndex lengthb;
  CFIndex lengthc;
  CFIndex lengthd;
  uint64_t v277;
  uint64_t v278;
  size_t __n;
  unsigned int __na;
  CFTypeRef v281;
  char *v282;
  char *v283;
  unsigned int v284;
  CFStringRef v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  _BOOL4 v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  CFIndex v294;
  uint64_t v295;
  uint64_t v296;
  _QWORD *v297;
  uint64_t v298;
  const void **v299;
  uint64_t v300;
  CFTypeRef cf;
  uint64_t v302;
  unsigned __int8 v303;
  unsigned __int8 v304;
  CFTypeRef v305;
  uint8_t buf[16];
  __int128 v307;
  uint64_t v308;
  _BYTE v309[24];
  uint64_t v310;

  v2 = (uint64_t)a1;
  v310 = *MEMORY[0x24BDAC8D0];
  if (a2)
    *a2 = 0;
  v3 = a1[2];
  v4 = *(_QWORD *)(v3 + 8);
  cf = 0;
  if (*(int *)v3 < 2)
  {
    v5 = 0;
    v6 = 0xFFFFFFFFLL;
    if (!a2)
      goto LABEL_382;
LABEL_381:
    *a2 = cf;
    goto LABEL_384;
  }
  v297 = a2;
  v7 = a1[13];
  v8 = a1[7];
  v9 = CKChunkDigestArgumentsChunkScheme(a1[19]);
  if (gVerbose == 2)
  {
    v10 = v9;
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_19_0);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      v11 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("\"%s\", hint:\"%s\", scheme:0x%x, size:%llu, fileID:0x%016llx(%llu), itemID:%lld"), v7, *(_QWORD *)(v2 + 96), v10, *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 40), v8);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_25);
      v12 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v11;
        _os_log_impl(&dword_20A95C000, v12, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v11)
        CFRelease(v11);
    }
  }
  v277 = v8;
  __n = v7;
  v300 = v3;
  v13 = *(void (**)(uint64_t))(v3 + 32);
  if (v13)
    v13(v4);
  *(_QWORD *)v309 = 0;
  v14 = *(_QWORD *)(v2 + 104);
  v15 = *(unsigned int *)(v2 + 24);
  v16 = *(_QWORD *)(v2 + 40);
  v18 = *(_QWORD *)(v2 + 80);
  v17 = *(_QWORD *)(v2 + 88);
  v19 = 0;
  if (getenv("CS_DISABLE_CL_CACHE"))
    goto LABEL_20;
  v19 = (const void **)malloc_type_calloc(1uLL, 0x20uLL, 0x10700401F352568uLL);
  if (!v19 || getChunkListCacheBlob(v2, (CFMutableDataRef *)v309))
    goto LABEL_20;
  v288 = v4;
  v86 = *(const __CFData **)v309;
  MutableBytePtr = CFDataGetMutableBytePtr(*(CFMutableDataRef *)v309);
  v294 = CFDataGetLength(v86);
  if (CK_DEFAULT_LOG_BLOCK_0 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_176);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
  {
    v88 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("generation:%u, mtime:%llu, ino:%llu, sz:%llu, fileSignatureSize:%u, chunkInfoSize:%u, chunkInfoCount:%u\n"), *(unsigned int *)(MutableBytePtr + 21), *(_QWORD *)(MutableBytePtr + 25), *(_QWORD *)(MutableBytePtr + 33), *(_QWORD *)(MutableBytePtr + 41), *(unsigned __int16 *)(MutableBytePtr + 49), *(unsigned __int16 *)(MutableBytePtr + 51), *(unsigned int *)(MutableBytePtr + 53));
    v89 = v19;
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_180);
    v90 = CK_DEFAULT_LOG_INTERNAL_0;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v88;
      _os_log_impl(&dword_20A95C000, v90, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    v19 = v89;
    if (v88)
      CFRelease(v88);
  }
  if ((_DWORD)v15 != *(_DWORD *)(MutableBytePtr + 21)
    || v17 != *(_QWORD *)(MutableBytePtr + 25)
    || v16 != *(_QWORD *)(MutableBytePtr + 33)
    || v18 != *(_QWORD *)(MutableBytePtr + 41))
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_183);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      v4 = v288;
      goto LABEL_20;
    }
    v95 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Invalid chunk cache for \"%s\", type:%u, mtime:%llu/%llu, ino:%llu/%llu, generation:%u/%u, sz:%llu/%llu, chunkInfoCount:%u\n"), v14, MutableBytePtr[20], *(_QWORD *)(MutableBytePtr + 25), v17, *(_QWORD *)(MutableBytePtr + 33), v16, *(unsigned int *)(MutableBytePtr + 21), v15, *(_QWORD *)(MutableBytePtr + 41), v18, *(unsigned int *)(MutableBytePtr + 53));
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_188);
    v100 = CK_DEFAULT_LOG_INTERNAL_0;
    v4 = v288;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v95;
      v101 = v100;
      v102 = OS_LOG_TYPE_DEBUG;
LABEL_234:
      _os_log_impl(&dword_20A95C000, v101, v102, "%{public}@", buf, 0xCu);
      goto LABEL_235;
    }
    goto LABEL_235;
  }
  v299 = v19;
  v91 = CKFileDigestArgumentsFileScheme(*(_QWORD *)(v2 + 144));
  LOBYTE(v305) = 0;
  LOBYTE(v305) = CKFileDigestArgumentsFileSchemeByte(*(_QWORD *)(v2 + 144));
  v92 = *(unsigned __int16 *)(MutableBytePtr + 49);
  if (*(_WORD *)(MutableBytePtr + 49))
  {
    if (CKFileSignatureSize(&v305) > v92 || (v93 = v92 + 57, (int)v92 + 57 > v294))
    {
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_191);
      v4 = v288;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
        goto LABEL_547;
      v95 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Invalid file signature size for \"%s\", %u/%u\n"), v14, v92, v294);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_196_0);
      v96 = CK_DEFAULT_LOG_INTERNAL_0;
      v19 = v299;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v95;
        goto LABEL_317;
      }
LABEL_235:
      if (v95)
        CFRelease(v95);
      goto LABEL_20;
    }
    v94 = MutableBytePtr + 57;
    if (v91 != (MutableBytePtr[57] & 0x7F))
    {
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_199);
      v4 = v288;
      v19 = v299;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
        goto LABEL_20;
      v95 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Invalid file signature scheme for \"%s\": 0x%x\n"), v14, *v94);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_204);
      v96 = CK_DEFAULT_LOG_INTERNAL_0;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
        goto LABEL_235;
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v95;
      goto LABEL_317;
    }
  }
  else
  {
    v94 = 0;
    v93 = 57;
  }
  v112 = *(unsigned __int16 *)(MutableBytePtr + 51);
  v113 = *(unsigned int *)(MutableBytePtr + 53);
  if (v112 < 5
    || !(_DWORD)v113
    || ((v113 * (unint64_t)*(unsigned __int16 *)(MutableBytePtr + 51)) & 0xFFFFFFFF00000000) != 0
    || __CFADD__(v113 * v112, v93)
    || (_DWORD)v113 * (_DWORD)v112 + v93 > v294)
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_207);
    v4 = v288;
    v19 = v299;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    v95 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Invalid chunk info size/count for \"%s\", %u/%u/%u\n"), v14, v113, v112, v294);
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_212);
    v96 = CK_DEFAULT_LOG_INTERNAL_0;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v95;
LABEL_317:
      v101 = v96;
      v102 = OS_LOG_TYPE_ERROR;
      goto LABEL_234;
    }
    goto LABEL_235;
  }
  v291 = *(unsigned int *)(MutableBytePtr + 53);
  alloca = (CFAllocatorRef)v94;
  v163 = 0;
  v265 = 0;
  v164 = 0;
  __dsta = &MutableBytePtr[v93];
  v165 = &MutableBytePtr[v92];
  v166 = (v112 - 4);
  v167 = (char *)(v165 + 61);
  v283 = (char *)(v166 + 4);
  lengthb = v166;
  do
  {
    v168 = CKChunkSchemeAndSignatureSize(v167);
    if (v168 - 1 >= v166)
    {
LABEL_546:
      v4 = v288;
LABEL_547:
      v19 = v299;
      goto LABEL_20;
    }
    if (*v167 < 0)
    {
      if (v166 == v168)
        goto LABEL_546;
      v169 = &v167[v168];
      v170 = v167[v168];
      v171 = v170 == 4 || v170 == 1;
      if (!v171 || lengthb - v168 != CKChunkSchemeAndEncryptionKeySize((unsigned __int8 *)&v167[v168]))
        goto LABEL_546;
      if (v163)
      {
        if ((_DWORD)v164 != *v167)
          goto LABEL_546;
        v172 = *v169;
        v166 = lengthb;
        if ((_DWORD)v265 != v172)
          goto LABEL_546;
      }
      else
      {
        v265 = *v169;
        v164 = *v167;
        v166 = lengthb;
      }
    }
    else if (v163)
    {
      if ((_DWORD)v164 != *v167)
        goto LABEL_546;
    }
    else
    {
      v164 = *v167;
    }
    ++v163;
    v167 = &v283[(_QWORD)v167];
  }
  while ((_DWORD)v291 != v163);
  if ((v164 & 0x7F) == 1 || (v164 & 0x7F) == 4)
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_224_0);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      v174 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Found chunk list cache \"%s\" for \"%s\", blobSize:%u, chunkInfoCount:%u, sz:%llu, ino:%llu, mtime:%llu, generation:%u\n"), "com.apple.cscache", v14, v294, v291, v18, v16, *(_QWORD *)(MutableBytePtr + 25), *(unsigned int *)(MutableBytePtr + 21));
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_229);
      v175 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v174;
        _os_log_impl(&dword_20A95C000, v175, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v174)
        CFRelease(v174);
    }
    v299[1] = alloca;
    v299[2] = __dsta;
    *((_BYTE *)v299 + 24) = v164;
    *((_BYTE *)v299 + 25) = v265;
    *v299 = *(const void **)v309;
    freeChunkListCacheInfo(0);
    *(_QWORD *)v309 = 0;
    v305 = 0;
    if (!*v299)
      chunkItem_cold_5();
    v284 = *(_DWORD *)(v2 + 36);
    v292 = *(_QWORD *)(v2 + 104);
    v296 = *(unsigned __int8 *)(v2 + 179);
    v176 = *(_QWORD *)(v2 + 136);
    BytePtr = CFDataGetBytePtr((CFDataRef)*v299);
    if (*(_QWORD *)(v176 + 8))
      chunkItem_cold_9();
    if (*(_QWORD *)(v2 + 440))
      chunkItem_cold_8();
    if (*(_QWORD *)(v2 + 424))
      chunkItem_cold_7();
    v178 = BytePtr;
    v179 = CKChunkDigestArgumentsChunkSchemeByte(*(_QWORD *)(v2 + 152));
    v304 = v179;
    v303 = CKChunkDigestArgumentsChunkEncryptionKeyScheme(*(_QWORD *)(v2 + 152));
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_235);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      v180 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Using cache \"%s\" for \"%s\", ino:%llu, (0x%x/%u/%u)\n"), "com.apple.cscache", v292, *(_QWORD *)(v2 + 40), v179, v296, *(_QWORD *)(v2 + 192) != 0);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_239);
      v181 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v180;
        _os_log_impl(&dword_20A95C000, v181, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v180)
        CFRelease(v180);
    }
    if (((v304 ^ *((_BYTE *)v299 + 24)) & 0x7F) != 0 || ((_BYTE)v299[3] & 0x80) == 0 && (char)v304 < 0)
    {
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_242);
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
        goto LABEL_509;
      v182 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Signature scheme mismatch: 0x%x/0x%x\n"), *((unsigned __int8 *)v299 + 24), v304);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_247);
      v183 = CK_DEFAULT_LOG_INTERNAL_0;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
        goto LABEL_507;
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v182;
      goto LABEL_506;
    }
    if ((v304 & (_BYTE)v299[3] & 0x80) != 0 && *((unsigned __int8 *)v299 + 25) != v303)
    {
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_250);
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
        goto LABEL_509;
      v182 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Key scheme mismatch: 0x%x/0x%x\n"), *((unsigned __int8 *)v299 + 25), v303);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_255);
      v183 = CK_DEFAULT_LOG_INTERNAL_0;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
        goto LABEL_507;
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v182;
LABEL_506:
      _os_log_impl(&dword_20A95C000, v183, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
LABEL_507:
      if (v182)
        CFRelease(v182);
      goto LABEL_509;
    }
    v206 = *(_QWORD *)(v2 + 144);
    if (v206)
    {
      v207 = (unsigned __int8 *)v299[1];
      if (v207)
      {
        v208 = *v207;
        if (v208 != CKFileDigestArgumentsFileSchemeByte(v206))
        {
          if (CK_DEFAULT_LOG_BLOCK_0 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_258);
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
            goto LABEL_509;
          v210 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          v211 = *(unsigned __int8 *)v299[1];
          v212 = CKFileDigestArgumentsFileSchemeByte(*(_QWORD *)(v2 + 144));
          v182 = CFStringCreateWithFormat(v210, 0, CFSTR("File signature mismatch: 0x%x/0x%x\n"), v211, v212);
          if (CK_DEFAULT_LOG_BLOCK_0 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_263_0);
          v183 = CK_DEFAULT_LOG_INTERNAL_0;
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
            goto LABEL_507;
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v182;
          goto LABEL_506;
        }
      }
    }
    v209 = v299[1];
    if ((_DWORD)v296)
    {
      if (!v209 || *(_DWORD *)(v2 + 216))
      {
LABEL_509:
        v6 = 0xFFFFFFFFLL;
        goto LABEL_510;
      }
    }
    else if (!v209)
    {
      v254 = *(_QWORD *)(v2 + 192) != 0;
LABEL_608:
      v213 = *(unsigned __int16 *)(v178 + 51);
      if (v213 <= 4)
        chunkItem_cold_6();
      v267 = *(unsigned int *)(v178 + 53);
      if ((_DWORD)v267)
      {
        ptrc = 0;
        lengthd = 0;
        v251 = 0;
        v214 = 0;
        v215 = (v213 - 4);
        v216 = v254;
        if (!(_DWORD)v296)
          v216 = 1;
        allocc = v216;
        v250 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v217 = (uint64_t)v299[2] + 6;
        v256 = v215 + 4;
        while (1)
        {
          v218 = *(unsigned int *)(v217 - 6);
          if (!allocc)
            goto LABEL_637;
          if (CK_DEFAULT_LOG_BLOCK_0 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_267);
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
          {
            v219 = CFStringCreateWithFormat(v250, 0, CFSTR("Reading chunk, o:0x%llx, size:0x%x\n"), v214, v218);
            if (CK_DEFAULT_LOG_BLOCK_0 != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_272);
            v220 = CK_DEFAULT_LOG_INTERNAL_0;
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138543362;
              *(_QWORD *)&buf[4] = v219;
              _os_log_impl(&dword_20A95C000, v220, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
            }
            if (v219)
              CFRelease(v219);
          }
          if ((_DWORD)v218 && v251 < v218)
          {
            if (v218 <= 0x8000)
              v221 = 0x8000;
            else
              v221 = v218;
            v251 = v221;
            v222 = malloc_type_realloc(ptrc, v221, 0xBDAFF736uLL);
            if (!v222)
            {
              v6 = 0xFFFFFFFFLL;
LABEL_666:
              v222 = ptrc;
              goto LABEL_667;
            }
          }
          else
          {
            v222 = ptrc;
          }
          v302 = 0;
          if (!readOpCtx((_QWORD *)v2, v214, (uint64_t)v222, v218, (uint64_t)&v302))
            goto LABEL_645;
          if ((_DWORD)v218 != (_DWORD)v302)
          {
            if (CK_DEFAULT_LOG_BLOCK_0 != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_275);
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
            {
              v229 = CFStringCreateWithFormat(v250, 0, CFSTR("Failed to read chunk bytes: %u != %u\n"), v218, v302);
              if (CK_DEFAULT_LOG_BLOCK_0 != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_280);
              v230 = CK_DEFAULT_LOG_INTERNAL_0;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138543362;
                *(_QWORD *)&buf[4] = v229;
                _os_log_impl(&dword_20A95C000, v230, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
              }
              if (v229)
                CFRelease(v229);
            }
            goto LABEL_645;
          }
          if (v254)
            CKFileSignatureGeneratorUpdate(*(_QWORD *)(v2 + 192));
          if ((_DWORD)v296)
            break;
          *(_BYTE *)(v176 + 25) = 1;
          ptrc = v222;
          *(_QWORD *)v176 = v284;
LABEL_638:
          v223 = *(_QWORD *)(v2 + 440);
          *(_QWORD *)(v2 + 440) = v223 + 1;
          *(_QWORD *)(v176 + 8) = v222;
          *(_QWORD *)(v176 + 16) = v223;
          *(_DWORD *)(v176 + 80) = v218;
          *(_QWORD *)(v176 + 72) = v214;
          *(_BYTE *)(v176 + 84) = v304;
          v224 = CKChunkSignatureSize(&v304);
          memcpy((void *)(v176 + 85), (const void *)(v217 - 1), v224);
          if ((char)v304 < 0)
          {
            *(_BYTE *)(v176 + v224 + 85) = v303;
            v225 = CKChunkEncryptionKeySize(&v303);
            memcpy((void *)(v176 + v224 + 86), (const void *)(v217 + v224), v225);
          }
          *(_QWORD *)(v2 + 424) += v218;
          v226 = (*(uint64_t (**)(void))(v2 + 128))();
          if ((_DWORD)v226)
          {
            v6 = v226;
            if (CK_DEFAULT_LOG_BLOCK_0 != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_283);
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
            {
              v227 = CFStringCreateWithFormat(v250, 0, CFSTR("callback failed for chunk %u: %d\n"), lengthd, v6);
              if (CK_DEFAULT_LOG_BLOCK_0 != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_288);
              v228 = CK_DEFAULT_LOG_INTERNAL_0;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138543362;
                *(_QWORD *)&buf[4] = v227;
                _os_log_impl(&dword_20A95C000, v228, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
              }
              if (v227)
                CFRelease(v227);
            }
            goto LABEL_666;
          }
          v214 += v218;
          v217 += v256;
          lengthd = (lengthd + 1);
          if ((_DWORD)v267 == (_DWORD)lengthd)
          {
            v6 = 0xFFFFFFFFLL;
            goto LABEL_668;
          }
        }
        ptrc = v222;
LABEL_637:
        v222 = 0;
        *(_QWORD *)v176 = *(_QWORD *)(v2 + 56);
        goto LABEL_638;
      }
      v214 = 0;
      LODWORD(lengthd) = 0;
      v222 = 0;
LABEL_645:
      v6 = 0xFFFFFFFFLL;
LABEL_667:
      ptrc = v222;
      if ((_DWORD)lengthd == (_DWORD)v267)
      {
LABEL_668:
        v231 = *(_QWORD *)(v2 + 192);
        if (v254)
        {
          v232 = CKFileSignatureGeneratorFinish(v231);
          v233 = *(const void **)(v2 + 192);
          if (v233)
            CFRelease(v233);
          *(_QWORD *)(v2 + 192) = 0;
          if (!v232)
            goto LABEL_690;
          goto LABEL_676;
        }
        if (!v231)
          goto LABEL_676;
        v234 = v299[1];
        if ((*v234 & 0x7F) != 1)
        {
          if (CK_DEFAULT_LOG_BLOCK_0 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_291);
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
            goto LABEL_690;
          v240 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("cache file signature not supported\n"));
          if (CK_DEFAULT_LOG_BLOCK_0 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_296);
          v241 = CK_DEFAULT_LOG_INTERNAL_0;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)&buf[4] = v240;
            _os_log_impl(&dword_20A95C000, v241, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
          }
          if (!v240)
            goto LABEL_690;
          v242 = v240;
LABEL_717:
          CFRelease(v242);
          goto LABEL_690;
        }
        if (CKFileDigestResultsCreate(&v305, v234, v214, 0))
        {
LABEL_676:
          if (!(_DWORD)v296
            || !v305
            || (v235 = *(_QWORD *)(v2 + 200)) == 0
            || CKFileDigestResultsEqual((uint64_t)v305, v235))
          {
            if (CK_DEFAULT_LOG_BLOCK_0 != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_309);
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
            {
              v236 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Found %u chunks for \"%s\", ino:%llu\n"), v267, v292, *(_QWORD *)(v2 + 40));
              if (CK_DEFAULT_LOG_BLOCK_0 != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_314);
              v237 = CK_DEFAULT_LOG_INTERNAL_0;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 138543362;
                *(_QWORD *)&buf[4] = v236;
                _os_log_impl(&dword_20A95C000, v237, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
              }
              if (v236)
                CFRelease(v236);
            }
            v238 = *(uint64_t (**)(uint64_t))(v2 + 128);
            v239 = *(_QWORD *)(v2 + 136);
            *(_QWORD *)(v2 + 136) = 0;
            v6 = v238(v2);
            *(_QWORD *)(v2 + 136) = v239;
            goto LABEL_690;
          }
          v243 = CFCopyDescription(v305);
          v244 = CFCopyDescription(*(CFTypeRef *)(v2 + 200));
          if (CK_DEFAULT_LOG_BLOCK_0 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_299);
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
          {
            v245 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("file signature mismatch for %lld item has %@ != %@ for the chunk store"), *(_QWORD *)(v2 + 56), v243, v244);
            if (CK_DEFAULT_LOG_BLOCK_0 != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_304);
            v246 = CK_DEFAULT_LOG_INTERNAL_0;
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138543362;
              *(_QWORD *)&buf[4] = v245;
              _os_log_impl(&dword_20A95C000, v246, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
            }
            if (v245)
              CFRelease(v245);
          }
          *(_QWORD *)v309 = CKErrorCreateWithFormat(3, CFSTR("The file signature changed: from %@ on the item to %@ registered in the chunk store for item %lld. Perhaps the item should be unregistered."), v243, v244, *(_QWORD *)(v2 + 56));
          if (v243)
            CFRelease(v243);
          if (!v244)
            goto LABEL_690;
          v242 = v244;
          goto LABEL_717;
        }
      }
LABEL_690:
      if (ptrc)
        free(ptrc);
      v184 = v305;
      if ((_DWORD)v6 || !v305)
        goto LABEL_511;
      setOpCtxFileDigestResults(v2, v305);
      v6 = 0;
LABEL_510:
      v184 = v305;
LABEL_511:
      if (v184)
        CFRelease(v184);
      v305 = 0;
      *(_QWORD *)(v176 + 8) = 0;
      if (*(_QWORD *)v309)
        CFRelease(*(CFTypeRef *)v309);
      if (!(_DWORD)v6)
      {
        v4 = v288;
        v3 = v300;
        goto LABEL_378;
      }
      v4 = v288;
      v3 = v300;
      goto LABEL_23;
    }
    v254 = 0;
    goto LABEL_608;
  }
  if (CK_DEFAULT_LOG_BLOCK_0 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_216_0);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
  {
    v95 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Invalid chunk signature/key scheme for \"%s\": 0x%x/0x%x\n"), v14, v164, v265);
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_221);
    v205 = CK_DEFAULT_LOG_INTERNAL_0;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v95;
      _os_log_impl(&dword_20A95C000, v205, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    v4 = v288;
    v19 = v299;
    goto LABEL_235;
  }
  v4 = v288;
  v19 = v299;
LABEL_20:
  if (*(_QWORD *)v309)
    CFRelease(*(CFTypeRef *)v309);
  freeChunkListCacheInfo(v19);
  v299 = 0;
  v6 = 0xFFFFFFFFLL;
  v3 = v300;
LABEL_23:
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_28);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      v20 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Chunking \"%s\""), __n);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_36);
      v21 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v20;
        _os_log_impl(&dword_20A95C000, v21, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v20)
        CFRelease(v20);
    }
  }
  ChunkProfile = createChunkProfile(v2, (_QWORD *)(v2 + 256), (uint64_t *)(v2 + 240));
  *(_DWORD *)(v2 + 248) = ChunkProfile;
  if (!ChunkProfile)
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_39);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
    {
      v97 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Not chunking \"%s\" - no chunking profile!\n"), __n);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_44_0);
      v98 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v97;
        _os_log_impl(&dword_20A95C000, v98, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v97)
        CFRelease(v97);
    }
    goto LABEL_380;
  }
  cf = 0;
  clearChunksArray(v2 + 264);
  clearChunksArray(v2 + 264);
  *(_QWORD *)(v2 + 440) = 0;
  *(_QWORD *)(v2 + 472) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  clearOpCtxError(v2);
  v23 = getenv("CHUNK_BUFFER_LENGTH");
  if (!v23)
    goto LABEL_46;
  v24 = v23;
  v25 = strtoll(v23, 0, 0);
  if (v25 < 0x8000)
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_391);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEFAULT))
    {
      v26 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Unable to use env value %s for CHUNK_BUFFER_LENGTH. Parsed %lld and the minimum is %d. Using default value %lu\n"), v24, v25, 0x8000, 0x8000);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_395);
      v27 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v26;
        _os_log_impl(&dword_20A95C000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
      }
      if (v26)
        CFRelease(v26);
    }
LABEL_46:
    v25 = 0x8000;
  }
  v28 = (char *)malloc_type_malloc(v25, 0xFCE68BDDuLL);
  v287 = v4;
  if (!v28)
  {
    v99 = 0;
    v30 = 0;
LABEL_330:
    v6 = 0xFFFFFFFFLL;
    goto LABEL_331;
  }
  v29 = CSrabin_init();
  v30 = v29;
  if (!v29)
  {
LABEL_298:
    v99 = 0;
    goto LABEL_330;
  }
  *(_DWORD *)(v2 + 252) = 0;
  if (!*(_DWORD *)(v2 + 248))
  {
    LOBYTE(v31) = 0;
LABEL_226:
    v6 = 0;
    v99 = v31 & 1;
    goto LABEL_332;
  }
  v31 = 0;
  length = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  alloc = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v293 = (uint64_t)v29;
  v264 = v25;
  while (1)
  {
    if (v34 && v35 <= length)
    {
      v99 = v31 & 1;
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_375);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
      {
        v107 = CFStringCreateWithFormat(alloc, 0, CFSTR("not all sections chunked before eof reached\n"));
        if (CK_DEFAULT_LOG_BLOCK_0 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_380);
        v108 = CK_DEFAULT_LOG_INTERNAL_0;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v107;
          _os_log_impl(&dword_20A95C000, v108, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v107)
          CFRelease(v107);
      }
      v6 = 0;
      goto LABEL_332;
    }
    if (getOpCtxSectionLengthAtIndex(v2, v33))
      break;
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_318);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      v289 = v34;
      v252 = v31;
      v37 = CFStringCreateWithFormat(alloc, 0, CFSTR("Skipping zero length section %u.\n"), *(unsigned int *)(v2 + 252));
      v38 = v32;
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_322_0);
      v39 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v37;
        _os_log_impl(&dword_20A95C000, v39, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v37)
        CFRelease(v37);
      v32 = v38;
      v31 = v252;
LABEL_67:
      v34 = v289;
    }
    v40 = *(_DWORD *)(v2 + 248);
    v33 = (*(_DWORD *)(v2 + 252) + 1);
    *(_DWORD *)(v2 + 252) = v33;
    if (v33 >= v40)
      goto LABEL_226;
  }
  v36 = *(_QWORD *)(v2 + 256) + 56 * *(unsigned int *)(v2 + 252);
  v31 = *(unsigned __int8 *)(v36 + 52);
  v255 = *(_BYTE *)(v36 + 52) != 0;
  if (*(_BYTE *)(v36 + 52))
  {
    if (!_SetSourceChunk(v2, v32))
      goto LABEL_73;
    goto LABEL_255;
  }
  v41 = *(unsigned __int8 *)(v36 + 52);
  v42 = v35 - length;
  if (v35 > length)
  {
    memmove(v28, &v28[length], v35 - length);
    length = 0;
    v35 = v42;
  }
  v31 = v41;
LABEL_73:
  while (2)
  {
    v43 = v35;
    while (2)
    {
      v44 = v43;
      if (v25 < (unint64_t)v43)
      {
        if (CK_DEFAULT_LOG_BLOCK_0 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_400);
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
          goto LABEL_323;
        v103 = CFStringCreateWithFormat(alloc, 0, CFSTR("overflow; buffer length: %lu producer location %lu\n"),
                 v25,
                 v43);
        if (CK_DEFAULT_LOG_BLOCK_0 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_404_0);
        v104 = CK_DEFAULT_LOG_INTERNAL_0;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v103;
          _os_log_impl(&dword_20A95C000, v104, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v103)
          CFRelease(v103);
LABEL_321:
        if (CK_DEFAULT_LOG_BLOCK_0 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_325);
LABEL_323:
        v3 = v300;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
        {
          v6 = 0xFFFFFFFFLL;
          goto LABEL_388;
        }
        v105 = CFStringCreateWithFormat(alloc, 0, CFSTR("CSchunklist_streamRead failed\n"));
        if (CK_DEFAULT_LOG_BLOCK_0 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_330);
        v115 = CK_DEFAULT_LOG_INTERNAL_0;
        v99 = v255;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v105;
          _os_log_impl(&dword_20A95C000, v115, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
        }
LABEL_328:
        if (v105)
          CFRelease(v105);
        goto LABEL_330;
      }
      v289 = v25 != v43;
      if (v25 != v43)
      {
        *(_QWORD *)buf = 0;
        if ((readOpCtx((_QWORD *)v2, *(_QWORD *)(v2 + 64), (uint64_t)&v28[v43], v25 - v43, (uint64_t)buf) & 1) == 0)
          goto LABEL_321;
        v45 = *(_QWORD *)buf;
        v43 += *(_QWORD *)buf;
        *(_QWORD *)(v2 + 64) += *(_QWORD *)buf;
        if (!v45)
          goto LABEL_80;
        continue;
      }
      break;
    }
    v43 = v25;
LABEL_80:
    v46 = *(_QWORD *)(v2 + 192);
    if (v46)
      v47 = v43 <= v35;
    else
      v47 = 1;
    if (!v47 && !CKFileSignatureGeneratorUpdate(v46))
    {
      v114 = *(const void **)(v2 + 192);
      if (v114)
        CFRelease(v114);
      *(_QWORD *)(v2 + 192) = 0;
      goto LABEL_321;
    }
    v253 = v31;
    __dst = v28;
    if ((_DWORD)v31)
    {
      v48 = v43 - length;
      ptr = (void *)v32;
      v49 = v32;
      if (v43 - length < 1
        || (v50 = (uint64_t *)(*(_QWORD *)(v2 + 256) + 56 * *(unsigned int *)(v2 + 252)),
            v51 = *v50,
            v49 = v32,
            *v50 <= v32))
      {
LABEL_161:
        if (v49 - (uint64_t)ptr >= 0)
        {
          v59 = v49 - (_QWORD)ptr + length;
          v32 = v49;
          v28 = __dst;
          v30 = (_QWORD *)v293;
          v25 = v264;
          goto LABEL_163;
        }
      }
      else
      {
        v49 = v32;
        v249 = (CFAllocatorRef)&__dst[length];
        v281 = (CFTypeRef)v50[3];
        v52 = v43 - length;
        v247 = *(_QWORD *)(v2 + 136);
        v248 = v50[1];
        while (1)
        {
          v53 = (char *)v249 + v48 - v52;
          v54 = v248 - *(unsigned int *)(v247 + 80);
          if (v51 - v49 < v54)
            break;
          v55 = v52 - v54;
          if (v52 < v54)
          {
            if (v281 && CSfixed_subchunk_stream(v2, (uint64_t)v249 + v48 - v52, v52, (unint64_t)v281, 0))
              goto LABEL_247;
            goto LABEL_159;
          }
          if (v281 && CSfixed_subchunk_stream(v2, (uint64_t)v249 + v48 - v52, v54, (unint64_t)v281, 1))
            goto LABEL_247;
          if (CS_fixed_chunk_stream_accumulate(v2, v53, v54))
            goto LABEL_247;
          if (CSchunklist_add_stream(v2))
            goto LABEL_247;
          v49 += v54;
          _ClearSourceChunk(v2);
          if (_SetSourceChunk(v2, v49))
            goto LABEL_247;
          if (v49 < v51)
          {
            v52 -= v54;
            if (v55 > 0)
              continue;
          }
          goto LABEL_161;
        }
        if (v52 < v51 - v49)
        {
LABEL_159:
          if (CS_fixed_chunk_stream_accumulate(v2, v53, v52))
            goto LABEL_247;
          v49 += v52;
          goto LABEL_161;
        }
        if ((!v281 || !CSfixed_subchunk_stream(v2, (uint64_t)v249 + v48 - v52, v51 - v49, (unint64_t)v281, 1))
          && !CS_fixed_chunk_stream_accumulate(v2, v53, v51 - v49)
          && !CSchunklist_add_stream(v2))
        {
          _ClearSourceChunk(v2);
          v49 = v51;
          if (!_SetSourceChunk(v2, v51))
            goto LABEL_161;
        }
      }
LABEL_247:
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_333);
      v3 = v300;
      v28 = __dst;
      v30 = (_QWORD *)v293;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
      {
        v105 = CFStringCreateWithFormat(alloc, 0, CFSTR("CSfixed_chunk_stream failed\n"));
        if (CK_DEFAULT_LOG_BLOCK_0 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_338);
        v106 = CK_DEFAULT_LOG_INTERNAL_0;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v105;
          _os_log_impl(&dword_20A95C000, v106, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        v99 = 1;
        goto LABEL_328;
      }
LABEL_255:
      v6 = 0xFFFFFFFFLL;
      v99 = 1;
      goto LABEL_331;
    }
    v56 = *(_QWORD *)(v2 + 256);
    v57 = *(unsigned int *)(v2 + 252);
    v58 = *(unsigned int *)(v56 + 56 * v57 + 16);
    v59 = length;
    v263 = v2;
    while (2)
    {
      v60 = v43 - v59;
      if (v25 == v44 && v60 < v58)
      {
        if (CK_DEFAULT_LOG_BLOCK_0 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_341);
        v3 = v300;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
        {
          v105 = CFStringCreateWithFormat(alloc, 0, CFSTR("under-read for rabin chunking; only read %lld bytes and not at EOF\n"),
                   v60);
          if (CK_DEFAULT_LOG_BLOCK_0 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_346);
          v109 = CK_DEFAULT_LOG_INTERNAL_0;
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
            goto LABEL_297;
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v105;
          goto LABEL_296;
        }
        goto LABEL_298;
      }
      if (v43 == v59)
      {
        if (CK_DEFAULT_LOG_BLOCK_0 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_349);
        v3 = v300;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
        {
          v105 = CFStringCreateWithFormat(alloc, 0, CFSTR("At EOF and zero bytes left. We should be done by now. Chunk profile inconsistent?\n"));
          if (CK_DEFAULT_LOG_BLOCK_0 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_354);
          v109 = CK_DEFAULT_LOG_INTERNAL_0;
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
            goto LABEL_297;
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v105;
          goto LABEL_296;
        }
        goto LABEL_298;
      }
      v61 = v56 + 56 * v57;
      if (*(_QWORD *)v61 < v32)
      {
        if (CK_DEFAULT_LOG_BLOCK_0 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_465);
        v3 = v300;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
        {
LABEL_291:
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
          {
            v105 = CFStringCreateWithFormat(alloc, 0, CFSTR("CSrabin_chunk_stream failed\n"));
            if (CK_DEFAULT_LOG_BLOCK_0 != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_362);
            v109 = CK_DEFAULT_LOG_INTERNAL_0;
            if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
              goto LABEL_297;
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)&buf[4] = v105;
LABEL_296:
            _os_log_impl(&dword_20A95C000, v109, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
LABEL_297:
            v99 = 0;
            goto LABEL_328;
          }
          goto LABEL_298;
        }
        v110 = CFStringCreateWithFormat(alloc, 0, CFSTR("File offset is already great than sectionEnd. Shouldn't we be in a different section?\n"));
        if (CK_DEFAULT_LOG_BLOCK_0 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_469);
        v111 = CK_DEFAULT_LOG_INTERNAL_0;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v110;
          _os_log_impl(&dword_20A95C000, v111, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v110)
          CFRelease(v110);
LABEL_289:
        v3 = v300;
        if (CK_DEFAULT_LOG_BLOCK_0 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_357);
        goto LABEL_291;
      }
      ptra = (char *)v32;
      lengtha = v59;
      v62 = *(unsigned int *)(v61 + 12);
      v63 = (v62 - 48);
      if (*(_QWORD *)v61 - v32 >= v60)
        v64 = v43 - v59;
      else
        v64 = *(_QWORD *)v61 - v32;
      if (v64 <= v63)
      {
        CSchunklist_add(v2, *(_QWORD *)(v2 + 440), v32, (uint64_t)&v28[v59], v64);
        v30 = (_QWORD *)v293;
        if (!v73)
        {
          ++*(_QWORD *)(v2 + 440);
          v71 = v64;
          goto LABEL_144;
        }
        goto LABEL_289;
      }
      v282 = &v28[v59];
      v65 = *(unsigned int *)(v61 + 16);
      if (*(_BYTE *)(v2 + 183))
        *(_QWORD *)(v2 + 464) = mach_absolute_time();
      v66 = 0;
      v67 = (v62 - 47);
      v68 = 1;
      while (1)
      {
        v69 = CSrabin_slide8(v293, v282[v63]);
        v70 = v63 + 1;
        if (v63 + 1 >= v62)
          break;
LABEL_116:
        v68 = v70 < v64;
        v67 = (v67 + 1);
        ++v63;
        if (v64 == v70)
        {
          v71 = 0;
          v28 = __dst;
          v30 = (_QWORD *)v293;
          v72 = (uint64_t)v282;
          v2 = v263;
          goto LABEL_137;
        }
      }
      if ((~v69 & 0x7FF) == 0)
      {
        v2 = v263;
        if (*(_BYTE *)(v263 + 183))
          *(_QWORD *)(v263 + 472) += mach_absolute_time() - *(_QWORD *)(v263 + 464);
        CSchunklist_add(v263, *(_QWORD *)(v263 + 440), (uint64_t)ptra, (uint64_t)v282, v67);
        v28 = __dst;
        v30 = (_QWORD *)v293;
        if (v74)
          goto LABEL_289;
        goto LABEL_134;
      }
      if ((~v69 & 0x3FF) == 0)
        v66 = v63;
      if (v70 < v65)
        goto LABEL_116;
      v28 = __dst;
      v30 = (_QWORD *)v293;
      if (v66 < 1)
      {
        v2 = v263;
        if (*(_BYTE *)(v263 + 183))
          *(_QWORD *)(v263 + 472) += mach_absolute_time() - *(_QWORD *)(v263 + 464);
        if (*(_BYTE *)(v263 + 181))
          ++*(_QWORD *)(v263 + 448);
        CSchunklist_add(v263, *(_QWORD *)(v263 + 440), (uint64_t)ptra, (uint64_t)v282, v67);
        if (v76)
          goto LABEL_289;
LABEL_134:
        v71 = v63 + 1;
        ++*(_QWORD *)(v2 + 440);
        goto LABEL_135;
      }
      v2 = v263;
      if (*(_BYTE *)(v263 + 183))
        *(_QWORD *)(v263 + 472) += mach_absolute_time() - *(_QWORD *)(v263 + 464);
      CSchunklist_add(v263, *(_QWORD *)(v263 + 440), (uint64_t)ptra, (uint64_t)v282, (v66 + 1));
      if (v75)
        goto LABEL_289;
      ++*(_QWORD *)(v263 + 440);
      v71 = v66 + 1;
LABEL_135:
      if (!*(_BYTE *)(v2 + 183))
      {
        v72 = (uint64_t)v282;
        goto LABEL_140;
      }
      *(_QWORD *)(v2 + 464) = mach_absolute_time();
      v72 = (uint64_t)v282;
LABEL_137:
      if (*(_BYTE *)(v2 + 183))
        *(_QWORD *)(v2 + 472) += mach_absolute_time() - *(_QWORD *)(v2 + 464);
LABEL_140:
      if (!v68)
      {
        v2 = v263;
        if (&ptra[v64] == *(char **)(*(_QWORD *)(v263 + 256) + 56 * *(unsigned int *)(v263 + 252)))
        {
          CSchunklist_add(v263, *(_QWORD *)(v263 + 440), (uint64_t)ptra, v72, v64);
          if (v77)
            goto LABEL_289;
          ++*(_QWORD *)(v263 + 440);
          v71 += v64;
        }
      }
LABEL_144:
      v2 = v263;
      if (v71 < 0)
        goto LABEL_289;
      v59 = v71 + lengtha;
      v32 = (uint64_t)&ptra[v71];
      v56 = *(_QWORD *)(v263 + 256);
      v57 = *(unsigned int *)(v263 + 252);
      v25 = v264;
      if (*(char **)(v56 + 56 * v57) != &ptra[v71])
      {
        v58 = *(unsigned int *)(v56 + 56 * v57 + 16);
        if (v264 != v44 || v43 - v59 >= v58)
          continue;
      }
      break;
    }
    v78 = v43 - v59;
    if (v43 > v59)
    {
      memmove(v28, &v28[v59], v43 - v59);
      v59 = 0;
      v43 = v78;
    }
LABEL_163:
    if (v59 == v43)
      v35 = 0;
    else
      v35 = v43;
    if (v59 == v43)
      v59 = 0;
    length = v59;
    v31 = v253;
    if (*(_QWORD *)(*(_QWORD *)(v2 + 256) + 56 * *(unsigned int *)(v2 + 252)) != v32)
    {
      if (v25 != v44 && v59 >= v35)
      {
        v289 = 1;
        v3 = v300;
        goto LABEL_186;
      }
      continue;
    }
    break;
  }
  v3 = v300;
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_365);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      v79 = v32;
      v80 = *(_QWORD *)(v2 + 256) + 56 * *(unsigned int *)(v2 + 252);
      v81 = CFStringCreateWithFormat(alloc, 0, CFSTR("section %u done (%u, eo:0x%llx, %u)"), *(unsigned int *)(v2 + 252), v253, *(_QWORD *)v80, *(unsigned int *)(v80 + 48));
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_372);
      v82 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v81;
        _os_log_impl(&dword_20A95C000, v82, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      v3 = v300;
      v30 = (_QWORD *)v293;
      v32 = v79;
      if (v81)
        CFRelease(v81);
    }
  }
  if (*(_BYTE *)(v2 + 180))
  {
    v31 = v253;
    goto LABEL_186;
  }
  v83 = *(uint64_t (**)(uint64_t))(v2 + 128);
  v84 = *(_QWORD *)(v2 + 136);
  *(_QWORD *)(v2 + 136) = 0;
  v85 = v83(v2);
  *(_QWORD *)(v2 + 136) = v84;
  v31 = v253;
  if (!(_DWORD)v85)
  {
LABEL_186:
    if ((_DWORD)v31)
      _ClearSourceChunk(v2);
    v25 = v264;
    goto LABEL_67;
  }
  v6 = v85;
LABEL_388:
  v99 = v255;
LABEL_331:
  cf = *(CFTypeRef *)(v2 + 336);
  *(_QWORD *)(v2 + 336) = 0;
LABEL_332:
  if (v30)
    CSrabin_free(v30);
  if (v28)
    free(v28);
  if (v99)
    _ClearSourceChunk(v2);
  if (*(_BYTE *)(v2 + 181))
  {
    v116 = *(_QWORD *)(v2 + 256);
    v118 = *(_DWORD *)(v116 + 12);
    v117 = *(_DWORD *)(v116 + 16);
    v119 = *(_QWORD *)(v2 + 448);
    v120 = *(_QWORD *)(v2 + 456);
    v121 = *(_QWORD *)(v2 + 432);
    v122 = *(_QWORD *)(v2 + 440);
    pthread_mutex_lock((pthread_mutex_t *)(v2 + 360));
    v123 = getenv("CK_CHUNK_COUNT");
    if (v123)
      v124 = strtoll(v123, 0, 0);
    else
      v124 = 0;
    bzero(buf, 0x400uLL);
    __sprintf_chk((char *)buf, 0, 0x400uLL, "%llu", v124 + v122);
    setenv("CK_CHUNK_COUNT", (const char *)buf, 1);
    v125 = getenv("CK_STORED_CHUNK_COUNT");
    if (v125)
      v125 = (const char *)strtoll(v125, 0, 0);
    __sprintf_chk((char *)buf, 0, 0x400uLL, "%llu", &v125[v120]);
    setenv("CK_STORED_CHUNK_COUNT", (const char *)buf, 1);
    v126 = getenv("CK_STORED_SIZE");
    if (v126)
      v126 = (const char *)strtoll(v126, 0, 0);
    v3 = v300;
    __sprintf_chk((char *)buf, 0, 0x400uLL, "%llu", &v126[v121]);
    setenv("CK_STORED_SIZE", (const char *)buf, 1);
    v127 = getenv("CK_HARD_BREAK_COUNT");
    if (v127)
      v127 = (const char *)strtoll(v127, 0, 0);
    __sprintf_chk((char *)buf, 0, 0x400uLL, "%llu", &v127[v119]);
    setenv("CK_HARD_BREAK_COUNT", (const char *)buf, 1);
    __sprintf_chk((char *)buf, 0, 0x400uLL, "%d", v118);
    setenv("CK_CHUNK_TMIN", (const char *)buf, 1);
    __sprintf_chk((char *)buf, 0, 0x400uLL, "%d", v117);
    setenv("CK_CHUNK_TMAX", (const char *)buf, 1);
    pthread_mutex_unlock((pthread_mutex_t *)(v2 + 360));
  }
  v4 = v287;
  if (*(_QWORD *)(v2 + 544))
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_383);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      v128 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("\nBegin stats for \"%s\"\n\n%s\nEnd stats for \"%s\"\n"), *(_QWORD *)(v2 + 104), *(_QWORD *)(v2 + 544), *(_QWORD *)(v2 + 104));
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_388);
      v129 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v128;
        _os_log_impl(&dword_20A95C000, v129, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v128)
        CFRelease(v128);
    }
  }
  v130 = *(_QWORD *)(v2 + 192);
  if (v130)
  {
    v131 = CKFileSignatureGeneratorFinish(v130);
    v132 = *(const void **)(v2 + 192);
    if (v132)
      CFRelease(v132);
    *(_QWORD *)(v2 + 192) = 0;
    if (!v131)
    {
      v6 = 0xFFFFFFFFLL;
      goto LABEL_380;
    }
  }
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_47_0);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      v133 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Done chunking \"%s\", rc:%d, chunkCount:%llu, itemID:%lld"), __n, v6, *(_QWORD *)(v2 + 440), v277);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_55);
      v134 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v133;
        _os_log_impl(&dword_20A95C000, v134, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v133)
        CFRelease(v133);
    }
  }
  if ((_DWORD)v6)
  {
LABEL_380:
    a2 = v297;
    v5 = v299;
    if (!v297)
      goto LABEL_382;
    goto LABEL_381;
  }
  v135 = *(_QWORD *)(v2 + 8);
  v136 = *(_QWORD *)(v2 + 16);
  v137 = CKChunkDigestArgumentsChunkEncryptionKeyScheme(*(_QWORD *)(v2 + 152));
  if (*(_BYTE *)(v2 + 176))
    goto LABEL_377;
  v138 = v137;
  v139 = *(_QWORD *)(v2 + 104);
  v140 = *(unsigned int *)(v2 + 24);
  v141 = *(_QWORD *)(v2 + 40);
  v142 = *(_QWORD *)(v2 + 80);
  v143 = *(_QWORD *)(v2 + 88);
  if (getenv("CS_DISABLE_CL_CACHE"))
    goto LABEL_377;
  v308 = 0;
  *(_OWORD *)buf = 0u;
  v307 = 0u;
  if (((*(uint64_t (**)(uint64_t, uint8_t *, _QWORD))(v136 + 64))(v135, buf, 0) & 1) == 0)
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_520);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
      goto LABEL_377;
    v146 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("stat failed for \"%s\", ino:%llu\n"), v139, v141);
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_524_0);
    v150 = CK_DEFAULT_LOG_INTERNAL_0;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v309 = 138543362;
      *(_QWORD *)&v309[4] = v146;
LABEL_406:
      v148 = v150;
      v149 = OS_LOG_TYPE_ERROR;
      goto LABEL_407;
    }
LABEL_408:
    if (v146)
      CFRelease(v146);
    goto LABEL_377;
  }
  if (*(_QWORD *)buf <= 0x10000uLL)
    goto LABEL_391;
  if (!BYTE8(v307))
    goto LABEL_377;
  if (v142 != *(_QWORD *)buf || v143 != (_QWORD)v307 || (_DWORD)v140 != HIDWORD(v307))
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_527);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      v160 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("\"%s\" changed, mtime:%llu/%llu, sz:%llu/%llu, generation:%u/%u\n"), v139, v143, (_QWORD)v307, v142, *(_QWORD *)buf, v140, HIDWORD(v307));
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_532);
      v161 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v309 = 138543362;
        *(_QWORD *)&v309[4] = v160;
        _os_log_impl(&dword_20A95C000, v161, OS_LOG_TYPE_DEBUG, "%{public}@", v309, 0xCu);
      }
      if (v160)
        CFRelease(v160);
    }
LABEL_391:
    if (setCacheBlob(v2, (uint64_t)"com.apple.cscache", 0))
      goto LABEL_377;
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_584);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      goto LABEL_377;
    v146 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Removed chunk list cache for \"%s\", sz:%llu ino:%llu, mtime:%llu, generation:%u\n"), v139, v142, v141, v143, v140);
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_589);
    v147 = CK_DEFAULT_LOG_INTERNAL_0;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v309 = 138543362;
      *(_QWORD *)&v309[4] = v146;
      v148 = v147;
      v149 = OS_LOG_TYPE_DEBUG;
LABEL_407:
      _os_log_impl(&dword_20A95C000, v148, v149, "%{public}@", v309, 0xCu);
      goto LABEL_408;
    }
    goto LABEL_408;
  }
  v151 = *(unsigned int *)(v2 + 272);
  if (!*(_QWORD *)(v2 + 264) || !(_DWORD)v151)
  {
    v162 = *(_QWORD *)(v2 + 264);
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_535);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
      goto LABEL_377;
    v146 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Invalid chunk array, chunkArray:%p, chunkCount:%llu\n"), v162, v151);
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_540);
    v150 = CK_DEFAULT_LOG_INTERNAL_0;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v309 = 138543362;
      *(_QWORD *)&v309[4] = v146;
      goto LABEL_406;
    }
    goto LABEL_408;
  }
  v290 = *(unsigned int *)(v2 + 272);
  v295 = *(_QWORD *)(v2 + 264);
  v298 = *(unsigned __int8 *)(v2 + 179);
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_543);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      v152 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Storing cache \"%s\" for \"%s\", scheme:0x%x, ino:%llu, chunkCount:%llu, mtime:%llu, generation:%u, registering:%u\n"), "com.apple.cscache", v139, v138, v141, v290, v143, v140, v298);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_550_0);
      v153 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v309 = 138543362;
        *(_QWORD *)&v309[4] = v152;
        _os_log_impl(&dword_20A95C000, v153, OS_LOG_TYPE_DEBUG, "%{public}@", v309, 0xCu);
      }
      v3 = v300;
      if (v152)
        CFRelease(v152);
    }
  }
  v154 = *(_QWORD *)(v2 + 208);
  if (v154)
  {
    v155 = (_BYTE *)CKFileDigestResultsFileSignature(v154);
    v156 = (const __CFAllocator *)CKFileSignatureCopy(v155);
    v157 = v298;
    if (!v156)
      chunkItem_cold_3();
    v158 = v156;
    v159 = CKFileSchemeAndSignatureSize(v156);
    if (v159 >= 0x10000)
      chunkItem_cold_4();
  }
  else
  {
    v158 = 0;
    v159 = 0;
    v157 = v298;
  }
  if (v157)
    v185 = (_BYTE *)(v295 + 35);
  else
    v185 = (_BYTE *)(v295 + 84);
  v186 = CKChunkSchemeSignatureAndKeySize(v185);
  __na = v186;
  v187 = v186 + 4;
  if (v186 + 4 >= 0x10000)
    chunkItem_cold_1();
  v278 = v186 + 4;
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_556_0);
    v188 = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG);
    v187 = v278;
    if (v188)
    {
      v189 = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG);
      v187 = v278;
      if (v189)
      {
        v285 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("fileSignatureSize:%u, chunkInfoSize:%u, chunkInfoCount:%u"), v159, v278, v290);
        if (CK_DEFAULT_LOG_BLOCK_0 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_564);
        v190 = CK_DEFAULT_LOG_INTERNAL_0;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v309 = 138543362;
          *(_QWORD *)&v309[4] = v285;
          _os_log_impl(&dword_20A95C000, v190, OS_LOG_TYPE_DEBUG, "%{public}@", v309, 0xCu);
        }
        v3 = v300;
        v187 = v278;
        if (v285)
        {
          CFRelease(v285);
          v187 = v278;
        }
      }
    }
  }
  v191 = (v159 + 57);
  if (v187 < 5
    || ((v187 * (unint64_t)v290) & 0xFFFFFFFF00000000) != 0
    || __CFADD__(v187 * v290, (_DWORD)v191))
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_567);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
    {
      v192 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Invalid size/count: 0x%x/0x%x/0x%x\n"), v191, v278, v290);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_572_0);
      v193 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v309 = 138543362;
        *(_QWORD *)&v309[4] = v192;
        _os_log_impl(&dword_20A95C000, v193, OS_LOG_TYPE_ERROR, "%{public}@", v309, 0xCu);
      }
      if (v192)
LABEL_568:
        CFRelease(v192);
    }
  }
  else
  {
    lengthc = v187 * v290 + v191;
    Mutable = CFDataCreateMutable(0, lengthc);
    if (Mutable)
    {
      v195 = Mutable;
      allocb = v158;
      CFDataSetLength(Mutable, lengthc);
      ptrb = v195;
      v196 = CFDataGetMutableBytePtr(v195);
      *((_OWORD *)v196 + 1) = 0u;
      *((_OWORD *)v196 + 2) = 0u;
      *(_OWORD *)(v196 + 42) = 0u;
      *(_OWORD *)v196 = 0u;
      *(_DWORD *)(v196 + 21) = v140;
      *(_QWORD *)(v196 + 25) = v143;
      *(_QWORD *)(v196 + 33) = v141;
      *(_QWORD *)(v196 + 41) = v142;
      *(_WORD *)(v196 + 49) = v159;
      *(_WORD *)(v196 + 51) = v278;
      v266 = v196;
      *(_DWORD *)(v196 + 53) = v290;
      if ((_DWORD)v159)
        memcpy(v196 + 57, v158, v159);
      v197 = 0;
      v286 = *(_DWORD *)(v2 + 308);
      v198 = v290;
      v199 = v159;
      do
      {
        v200 = v295 + v197;
        v201 = 24;
        if ((_DWORD)v298)
        {
          v202 = (const void *)(v200 + 35);
        }
        else
        {
          v201 = 80;
          v202 = (const void *)(v200 + 84);
        }
        *(_DWORD *)&v266[v199 + 57] = *(_DWORD *)(v200 + v201);
        memcpy(&v266[v199 + 61], v202, __na);
        v197 += v286;
        v199 += v278;
        --v198;
      }
      while (v198);
      if (lengthc - 57 != v199)
        chunkItem_cold_2();
      if (!setChunkListCacheBlob(v2, ptrb))
      {
        if (CK_DEFAULT_LOG_BLOCK_0 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_576);
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
        {
          v203 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Stored chunk list cache for \"%s\", chunkCount:%llu, blobSize:%u, sz:%llu, ino:%llu, mtime:%llu, generation:%u\n"), v139, v290, lengthc, v142, v141, v143, v140);
          if (CK_DEFAULT_LOG_BLOCK_0 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_581);
          v204 = CK_DEFAULT_LOG_INTERNAL_0;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v309 = 138543362;
            *(_QWORD *)&v309[4] = v203;
            _os_log_impl(&dword_20A95C000, v204, OS_LOG_TYPE_DEBUG, "%{public}@", v309, 0xCu);
          }
          if (v203)
            CFRelease(v203);
        }
      }
      v3 = v300;
      v158 = allocb;
      v192 = (CFStringRef)ptrb;
      goto LABEL_568;
    }
  }
  if (v158)
    free(v158);
LABEL_377:
  v6 = 0;
  v4 = v287;
LABEL_378:
  v5 = v299;
LABEL_382:
  if (cf)
    CFRelease(cf);
LABEL_384:
  freeChunkListCacheInfo(v5);
  v144 = *(void (**)(uint64_t))(v3 + 40);
  if (v144)
    v144(v4);
  return v6;
}

os_log_t __chunkItem_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkItem_block_invoke_3()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkItem_block_invoke_26()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkItem_block_invoke_3_34()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkItem_block_invoke_37()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkItem_block_invoke_2_42()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkItem_block_invoke_45()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkItem_block_invoke_3_53()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

void freeChunkListCacheInfo(const void **a1)
{
  const void *v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      CFRelease(v2);
    free(a1);
  }
}

uint64_t CSchunklist_for_file(char *a1, CFStringRef *a2)
{
  int v4;
  CFMutableArrayRef Mutable;
  CFStringRef v6;
  char *v7;
  int v8;
  uint64_t v9;
  CFNumberRef v10;
  uint64_t v11;
  const __CFAllocator *v12;
  int *v13;
  char *v14;
  NSObject *v15;
  _OWORD v17[2];
  uint64_t v18;
  CFTypeRef cf;
  _OWORD v20[3];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  uint64_t valuePtr;
  uint8_t buf[4];
  CFStringRef v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v26 = 0;
  valuePtr = 0;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v21 = 0u;
  memset(v20, 0, sizeof(v20));
  cf = 0;
  v4 = open(a1, 0);
  if (v4 == -1)
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_57);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
    {
      v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v13 = __error();
      v14 = strerror(*v13);
      v6 = CFStringCreateWithFormat(v12, 0, CFSTR("open failed on \"%s\": %s\n"), a1, v14);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_61_0);
      v15 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v29 = v6;
        _os_log_impl(&dword_20A95C000, v15, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (!v6)
        goto LABEL_25;
      CFRelease(v6);
    }
    goto LABEL_24;
  }
  if (!gOperations)
  {
    gOperations = (uint64_t)CFSetCreateMutable(0, 0, MEMORY[0x24BDBD6B8]);
    if (!gOperations)
    {
LABEL_24:
      v6 = 0;
LABEL_25:
      v10 = 0;
      v8 = 0;
      goto LABEL_26;
    }
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v6 = (CFStringRef)Mutable;
  if (!Mutable)
    goto LABEL_25;
  *(_QWORD *)&v24 = a1;
  DWORD2(v24) = v4;
  *(_QWORD *)&v25 = 0;
  *((_QWORD *)&v25 + 1) = Mutable;
  LODWORD(v20[0]) = 2;
  *(_QWORD *)&v21 = openFd;
  *((_QWORD *)&v21 + 1) = closeFd;
  *(_QWORD *)&v22 = statFd;
  *((_QWORD *)&v22 + 1) = readFd;
  *(_QWORD *)&v23 = getCacheBlobFd;
  *((_QWORD *)&v23 + 1) = setCacheBlobFd;
  *((_QWORD *)&v20[0] + 1) = 0;
  if (!openFd((uint64_t)&v24, &v26, 0))
    goto LABEL_25;
  v7 = v26;
  *((_QWORD *)v26 + 1) = v26;
  *((_QWORD *)v7 + 2) = v20;
  v8 = 1;
  if (!CKChunkDigestArgumentsV1Create(&cf, 1, 0)
    || setOpCtxPath((uint64_t)v7, a1)
    || setOpCtxChunkScheme((uint64_t)v7, 1, cf)
    || (v18 = 0,
        memset(v17, 0, sizeof(v17)),
        !((unsigned int (*)(char *, _OWORD *, _QWORD))v22)(v7, v17, 0)))
  {
    v10 = 0;
    goto LABEL_26;
  }
  setOpCtxStatInfo((uint64_t)v7, (uint64_t *)v17);
  valuePtr = *((_QWORD *)v7 + 5);
  v9 = valuePtr;
  *((_QWORD *)v7 + 2) = v20;
  *((_QWORD *)v7 + 16) = CSchunklist_for_file_callback;
  *((_QWORD *)v7 + 7) = v9;
  v7[160] = 5;
  v10 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
  if (!v10)
  {
LABEL_26:
    v11 = 0;
    goto LABEL_27;
  }
  while (!registerOperation(&gOperationsLock, (const __CFSet *)gOperations, v10))
    waitForOperation(&gOperationsLock, &gOperationsCondition, (const __CFSet *)gOperations, v10);
  if (chunkItem(v7, 0))
  {
    v11 = 0;
    v8 = 1;
  }
  else
  {
    *a2 = v6;
    v8 = 1;
    v11 = 1;
    v6 = 0;
  }
LABEL_27:
  if (cf)
    CKBaseRelease(cf);
  cf = 0;
  if (v8)
    (*((void (**)(_QWORD, char *, _QWORD))&v21 + 1))(*((_QWORD *)&v20[0] + 1), v26, 0);
  if (v10)
  {
    unregisterOperation(&gOperationsLock, &gOperationsCondition, (__CFSet *)gOperations, v10);
    CFRelease(v10);
  }
  if (v6)
    CFRelease(v6);
  if (v4 != -1)
    close(v4);
  return v11;
}

uint64_t openFd(uint64_t a1, char **a2, CFErrorRef *a3)
{
  uint64_t v6;
  char *v7;
  CFErrorRef v8;
  int v9;
  uint64_t v10;
  int *v11;
  char *v12;
  char *v13;
  uint64_t result;
  char *OpCtx;
  __darwin_time_t tv_sec;
  mode_t st_mode;
  int v18;
  int v19;
  stat v20;

  *a2 = 0;
  if (a3)
    *a3 = 0;
  v6 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v6 == -1)
    goto LABEL_6;
  v7 = *(char **)a1;
  memset(&v20, 0, sizeof(v20));
  if (fstat(v6, &v20) == -1)
  {
    v9 = *__error();
    v10 = *__error();
    v11 = __error();
    v12 = strerror(*v11);
    v8 = CKPOSIXErrorCreateWithFormat(v9, CFSTR("fstat failed for fd:%d, path:\"%s\": (%d) %s"), v6, v7, v10, v12);
    goto LABEL_8;
  }
  if ((v20.st_mode & 0xF000) == 0x4000)
  {
LABEL_6:
    v8 = 0;
LABEL_8:
    v13 = 0;
    goto LABEL_9;
  }
  OpCtx = createOpCtx();
  v13 = OpCtx;
  if (!OpCtx || setOpCtxPath((uint64_t)OpCtx, v7))
  {
    v8 = 0;
LABEL_9:
    freeOpCtx(v13);
    if (a3)
    {
      result = 0;
      *a3 = v8;
    }
    else
    {
      if (v8)
        CFRelease(v8);
      return 0;
    }
    return result;
  }
  *((_DWORD *)v13 + 9) = v6;
  tv_sec = v20.st_mtimespec.tv_sec;
  *((_QWORD *)v13 + 5) = v20.st_ino;
  *((_DWORD *)v13 + 12) = v20.st_dev;
  st_mode = v20.st_mode;
  *((_WORD *)v13 + 16) = v20.st_mode;
  *((_DWORD *)v13 + 7) = v20.st_nlink;
  *((_QWORD *)v13 + 10) = v20.st_size;
  *((_QWORD *)v13 + 11) = tv_sec;
  *(_OWORD *)(v13 + 344) = *(_OWORD *)(a1 + 16);
  v18 = st_mode & 0xF000;
  v19 = 0;
  if (!getFileWriteGeneration((uint64_t)v7, v6, &v19))
  {
    v13[34] = 1;
    *((_DWORD *)v13 + 6) = v19;
    v13[178] = v18 == 40960;
    v13[177] = v18 == 40960;
  }
  if (v18 != 40960)
    *((_QWORD *)v13 + 15) = getMaxXattrSize((uint64_t)v7, v6);
  *a2 = v13;
  freeOpCtx(0);
  return 1;
}

uint64_t closeFd(int a1, void **a2, _QWORD *a3)
{
  if (a3)
    *a3 = 0;
  if (a2[1] != a2)
    closeFd_cold_1();
  freeOpCtx((char *)a2);
  return 1;
}

uint64_t statFd(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a3)
    *a3 = 0;
  if (*(_QWORD *)(a1 + 8) != a1)
    statFd_cold_1();
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(a1 + 34);
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 24);
  return 1;
}

uint64_t readFd(uint64_t a1, unint64_t a2, void *__buf, size_t __nbyte, unint64_t *a5, CFErrorRef *a6)
{
  unint64_t v8;
  uint64_t v12;
  const char *v13;
  char *v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  CFErrorRef v18;
  int v19;
  uint64_t v20;
  int *v21;
  CFErrorRef v22;
  uint64_t result;
  char *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  int *v28;
  int v29;
  uint64_t v30;
  int *v31;
  char *v32;
  char *v33;
  char *v34;
  char v35[1024];
  uint64_t v36;

  v8 = __nbyte;
  v36 = *MEMORY[0x24BDAC8D0];
  if (a6)
    *a6 = 0;
  if (*(_QWORD *)(a1 + 8) != a1)
    readFd_cold_1();
  v12 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v12 == -1)
  {
    if (a6)
    {
      v18 = 0;
LABEL_19:
      result = 0;
      *a6 = v18;
      return result;
    }
    return 0;
  }
  v13 = *(const char **)(a1 + 104);
  if ((*(_WORD *)(a1 + 32) & 0xF000) == 0xA000)
  {
    v14 = *(char **)(a1 + 320);
    if (v14)
    {
      v15 = *(_QWORD *)(a1 + 328);
LABEL_8:
      v16 = v15 > a2;
      v17 = v15 - a2;
      if (v16)
      {
        if (v17 < v8)
          v8 = v17;
        memcpy(__buf, &v14[a2], v8);
      }
      else
      {
        v8 = 0;
      }
      goto LABEL_26;
    }
    bzero(v35, 0x400uLL);
    if (v13 || (v13 = v35, !get_path_for_fd(v12, v35)))
    {
      v24 = (char *)malloc_type_malloc(0x400uLL, 0x1AC911BCuLL);
      if (v24)
      {
        v14 = v24;
        v25 = readlink(v13, v24, 0x400uLL);
        if ((v25 & 0x8000000000000000) == 0)
        {
          v15 = 1024;
          if (v25 < 0x400)
            v15 = v25;
          *(_QWORD *)(a1 + 320) = v14;
          *(_QWORD *)(a1 + 328) = v15;
          goto LABEL_8;
        }
        v29 = *__error();
        v30 = *__error();
        v31 = __error();
        v32 = strerror(*v31);
        v18 = CKPOSIXErrorCreateWithFormat(v29, CFSTR("readlink failed for fd:%d, path:\"%s\": (%d) %s"), v12, v13, v30, v32);
        free(v14);
      }
      else
      {
        v18 = 0;
      }
      goto LABEL_18;
    }
    v26 = *__error();
    v27 = *__error();
    v28 = __error();
    v33 = strerror(*v28);
    v22 = CKPOSIXErrorCreateWithFormat(v26, CFSTR("get path failed for fd:%d: %d (%s)"), v12, v27, v33);
LABEL_17:
    v18 = v22;
LABEL_18:
    if (a6)
      goto LABEL_19;
    if (v18)
      CFRelease(v18);
    return 0;
  }
  v8 = pread(*(_DWORD *)(a1 + 36), __buf, __nbyte, a2);
  if ((v8 & 0x8000000000000000) != 0)
  {
    v19 = *__error();
    v20 = *__error();
    v21 = __error();
    v34 = strerror(*v21);
    v22 = CKPOSIXErrorCreateWithFormat(v19, CFSTR("pread failed on fd:%d, path:\"%s\", offset:0x%llx: (%d) %s"), v12, v13, a2, v20, v34);
    goto LABEL_17;
  }
LABEL_26:
  if (a5)
    *a5 = v8;
  return 1;
}

uint64_t getCacheBlobFd(uint64_t a1, char *name, __CFData **a3, CFErrorRef *a4)
{
  if (*(_QWORD *)(a1 + 8) != a1)
    getCacheBlobFd_cold_1();
  return CKGetCacheBlobFd(*(_QWORD *)(a1 + 104), *(unsigned int *)(a1 + 36), name, a3, a4);
}

uint64_t setCacheBlobFd(uint64_t a1, char *name, CFDataRef theData, CFErrorRef *a4)
{
  if (*(_QWORD *)(a1 + 8) != a1)
    setCacheBlobFd_cold_1();
  return CKSetCacheBlobFd(*(_QWORD *)(a1 + 104), *(unsigned int *)(a1 + 36), name, theData, a4);
}

uint64_t CSchunklist_for_file_callback(uint64_t a1)
{
  uint64_t v1;
  __CFArray *v2;
  const UInt8 *v3;
  uint64_t v4;
  CFDataRef v5;
  CFDataRef v6;

  v1 = *(_QWORD *)(a1 + 136);
  if (!v1)
    return 0;
  v2 = *(__CFArray **)(a1 + 352);
  v3 = (const UInt8 *)(v1 + 72);
  v4 = CKSchemeSignatureAndKeySize(v1 + 84);
  v5 = CFDataCreate(0, v3, v4 + 16);
  if (v5)
  {
    v6 = v5;
    CFArrayAppendValue(v2, v5);
    CFRelease(v6);
    return 0;
  }
  return 0xFFFFFFFFLL;
}

BOOL CKCopyChunkCache(char *a1, char *a2)
{
  CFStringRef v4;
  NSObject *v5;
  BOOL v6;
  __CFData *v7;
  int v8;
  int v9;
  _BOOL4 v10;
  _BOOL8 v11;
  unsigned int v12;
  int v13;
  CFMutableDataRef v14;
  const __CFAllocator *v15;
  uint64_t v16;
  int *v17;
  char *v18;
  CFStringRef v19;
  NSObject *v20;
  unsigned int v21;
  int v22;
  UInt8 *v23;
  UInt8 *v24;
  const __CFAllocator *v25;
  uint64_t v26;
  int *v27;
  char *v28;
  CFStringRef v29;
  NSObject *v30;
  CFStringRef v31;
  NSObject *v32;
  uint64_t v33;
  CFStringRef v34;
  int v35;
  __CFData *v36;
  UInt8 *MutableBytePtr;
  UInt8 *v38;
  CFStringRef v39;
  NSObject *v40;
  NSObject *v41;
  CFStringRef v43;
  NSObject *v44;
  CFMutableDataRef theData;
  unint64_t v46;
  int8x16_t v47[2];
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _OWORD v52[6];
  _OWORD v53[6];
  char *v54;
  char *v55;
  uint8_t buf[4];
  CFStringRef v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v54 = 0;
  v55 = 0;
  theData = 0;
  v46 = 0;
  if (CK_DEFAULT_LOG_BLOCK_0 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_63);
  memset(v53, 0, sizeof(v53));
  memset(v52, 0, sizeof(v52));
  v49 = 0u;
  v50 = 0u;
  v51 = 0;
  memset(v47, 0, sizeof(v47));
  v48 = 0;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
  {
    v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("srcPath:\"%s\", dstPath:\"%s\"\n"), a1, a2);
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_67);
    v5 = CK_DEFAULT_LOG_INTERNAL_0;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      v57 = v4;
      _os_log_impl(&dword_20A95C000, v5, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v4)
      CFRelease(v4);
  }
  v6 = 0;
  v7 = 0;
  v8 = -1;
  v9 = -1;
  v10 = 0;
  if (!a1)
    goto LABEL_19;
  v11 = 0;
  if (!a2)
    goto LABEL_92;
  v12 = open(a1, 0);
  if (v12 == -1)
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_70);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
    {
      v15 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v16 = *__error();
      v17 = __error();
      v18 = strerror(*v17);
      v19 = CFStringCreateWithFormat(v15, 0, CFSTR("open failed on \"%s\": %d (%s)\n"), a1, v16, v18);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_75);
      v20 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v57 = v19;
        _os_log_impl(&dword_20A95C000, v20, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v19)
        CFRelease(v19);
      v7 = 0;
      v6 = 0;
      v10 = 0;
      v11 = 0;
      v8 = -1;
      v9 = -1;
      goto LABEL_92;
    }
    v7 = 0;
    v6 = 0;
    v10 = 0;
    v11 = 0;
LABEL_31:
    v8 = -1;
    goto LABEL_92;
  }
  v9 = v12;
  v13 = openFdWithReadContext(a1, v12, &v55, (uint64_t)v53, (uint64_t)&v49);
  v6 = 0;
  v7 = 0;
  v10 = v13 == 0;
  if (v13 || !BYTE8(v50))
  {
LABEL_19:
    v11 = 0;
    goto LABEL_92;
  }
  if (getChunkListCacheBlob((uint64_t)v55, (CFMutableDataRef *)&v46))
    v46 = 0;
  if (getFileSignatureCacheBlob(v55, &theData))
  {
    v14 = 0;
    theData = 0;
  }
  else
  {
    v14 = theData;
  }
  v7 = (__CFData *)v46;
  if (!(v46 | (unint64_t)v14))
  {
    v11 = 1;
    goto LABEL_100;
  }
  v21 = open(a2, 0);
  if (v21 == -1)
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_78);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
    {
      v6 = 0;
      v11 = 0;
LABEL_91:
      v10 = 1;
      goto LABEL_92;
    }
    v25 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v26 = *__error();
    v27 = __error();
    v28 = strerror(*v27);
    v29 = CFStringCreateWithFormat(v25, 0, CFSTR("open failed on \"%s\": %d (%s)\n"), a2, v26, v28);
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_81);
    v30 = CK_DEFAULT_LOG_INTERNAL_0;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v57 = v29;
      _os_log_impl(&dword_20A95C000, v30, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v29)
      CFRelease(v29);
    v6 = 0;
    v11 = 0;
    v10 = 1;
    goto LABEL_31;
  }
  v8 = v21;
  v22 = openFdWithReadContext(a2, v21, &v54, (uint64_t)v52, (uint64_t)v47);
  v11 = 0;
  v6 = v22 == 0;
  v10 = 1;
  if (!v22 && v47[1].i8[8])
  {
    if (!v7)
    {
      v36 = theData;
      if (theData)
      {
        v35 = 0;
LABEL_68:
        MutableBytePtr = CFDataGetMutableBytePtr(v36);
        v38 = MutableBytePtr;
        if (HIDWORD(v50) == *(_DWORD *)(MutableBytePtr + 21)
          && (_QWORD)v50 == *(_QWORD *)(MutableBytePtr + 25)
          && v49 == __PAIR128__(*(_QWORD *)(MutableBytePtr + 33), *(_QWORD *)(MutableBytePtr + 41)))
        {
          *(_DWORD *)(MutableBytePtr + 21) = v47[1].i32[3];
          *(int8x16_t *)(MutableBytePtr + 25) = vextq_s8(*(int8x16_t *)((char *)v47 + 8), *(int8x16_t *)((char *)v47 + 8), 8uLL);
          *(_QWORD *)(MutableBytePtr + 41) = v47[0].i64[0];
          if (!setFileSignatureCacheBlob((uint64_t)v54, theData))
          {
            if (CK_DEFAULT_LOG_BLOCK_0 != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_108);
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
            {
              v39 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Copied file signature cache from \"%s\" to \"%s\" (%llu/%llu)\n"), a1, a2, *((_QWORD *)&v49 + 1), v47[0].i64[1]);
              if (CK_DEFAULT_LOG_BLOCK_0 != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_113);
              v40 = CK_DEFAULT_LOG_INTERNAL_0;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 138543362;
                v57 = v39;
                _os_log_impl(&dword_20A95C000, v40, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
              }
              v35 = 1;
LABEL_87:
              if (v39)
                CFRelease(v39);
              goto LABEL_89;
            }
            v35 = 1;
          }
LABEL_89:
          v11 = v35 != 0;
          goto LABEL_90;
        }
        if (CK_DEFAULT_LOG_BLOCK_0 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_100);
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
          goto LABEL_89;
        v39 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Invalid file signature cache for \"%s\", type:%u, mtime:%llu/%llu, ino:%llu/%llu, generation:%u/%u, sz:%llu/%llu\n"), a1, v38[20], *(_QWORD *)(v38 + 25), (_QWORD)v50, *(_QWORD *)(v38 + 33), *((_QWORD *)&v49 + 1), *(unsigned int *)(v38 + 21), HIDWORD(v50), *(_QWORD *)(v38 + 41), (_QWORD)v49);
        if (CK_DEFAULT_LOG_BLOCK_0 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_105);
        v41 = CK_DEFAULT_LOG_INTERNAL_0;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543362;
          v57 = v39;
          _os_log_impl(&dword_20A95C000, v41, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
        }
        goto LABEL_87;
      }
      v11 = 0;
LABEL_108:
      closeFdWithReadContext((uint64_t)v54, (uint64_t)v52);
      goto LABEL_100;
    }
    v23 = CFDataGetMutableBytePtr(v7);
    v24 = v23;
    if (HIDWORD(v50) == *(_DWORD *)(v23 + 21)
      && (_QWORD)v50 == *(_QWORD *)(v23 + 25)
      && v49 == __PAIR128__(*(_QWORD *)(v23 + 33), *(_QWORD *)(v23 + 41)))
    {
      *(_DWORD *)(v23 + 21) = v47[1].i32[3];
      *(int8x16_t *)(v23 + 25) = vextq_s8(*(int8x16_t *)((char *)v47 + 8), *(int8x16_t *)((char *)v47 + 8), 8uLL);
      *(_QWORD *)(v23 + 41) = v47[0].i64[0];
      if (setChunkListCacheBlob((uint64_t)v54, v7))
      {
        v11 = 0;
LABEL_90:
        v6 = 1;
        goto LABEL_91;
      }
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_92_0);
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        v11 = 1;
        v35 = 1;
        goto LABEL_67;
      }
      v43 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Copied chunk list cache from \"%s\" to \"%s\" (%llu/%llu)\n"), a1, a2, *((_QWORD *)&v49 + 1), v47[0].i64[1]);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_97);
      v44 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        v57 = v43;
        _os_log_impl(&dword_20A95C000, v44, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      v33 = 1;
      v11 = 1;
      v34 = v43;
      v35 = 1;
      if (!v34)
        goto LABEL_67;
    }
    else
    {
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_84);
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        v11 = 0;
        v35 = 0;
        goto LABEL_67;
      }
      v31 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Invalid chunk list cache for \"%s\", type:%u, mtime:%llu/%llu, ino:%llu/%llu, generation:%u/%u, sz:%llu/%llu\n"), a1, v24[20], *(_QWORD *)(v24 + 25), (_QWORD)v50, *(_QWORD *)(v24 + 33), *((_QWORD *)&v49 + 1), *(unsigned int *)(v24 + 21), HIDWORD(v50), *(_QWORD *)(v24 + 41), (_QWORD)v49);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_89);
      v32 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        v57 = v31;
        _os_log_impl(&dword_20A95C000, v32, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      v33 = 0;
      v11 = 0;
      v34 = v31;
      v35 = 0;
      if (!v34)
        goto LABEL_67;
    }
    CFRelease(v34);
    v11 = v33;
    v35 = v33;
LABEL_67:
    v36 = theData;
    if (theData)
      goto LABEL_68;
    CFRelease(v7);
    goto LABEL_108;
  }
LABEL_92:
  if (theData)
    CFRelease(theData);
  if (v7)
    CFRelease(v7);
  if (!v6)
  {
    if (!v10)
      goto LABEL_101;
    goto LABEL_100;
  }
  closeFdWithReadContext((uint64_t)v54, (uint64_t)v52);
  if (v10)
LABEL_100:
    closeFdWithReadContext((uint64_t)v55, (uint64_t)v53);
LABEL_101:
  if (v9 != -1)
    close(v9);
  if (v8 != -1)
    close(v8);
  return v11;
}

BOOL CKFixupChunkCacheAfterExchangeData(char *a1, char *a2)
{
  CFStringRef v4;
  NSObject *v5;
  _BOOL4 v6;
  __CFData *v7;
  int v8;
  int v9;
  int v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL8 v13;
  unsigned int v14;
  int v15;
  int ChunkListCacheBlob;
  _BOOL4 v17;
  const __CFAllocator *v18;
  uint64_t v19;
  int *v20;
  char *v21;
  CFStringRef v22;
  NSObject *v23;
  int FileSignatureCacheBlob;
  CFMutableDataRef v25;
  _BOOL4 v26;
  unsigned int v27;
  int v28;
  _BOOL4 v29;
  UInt8 *MutableBytePtr;
  UInt8 *v31;
  uint64_t v32;
  uint64_t v33;
  const __CFAllocator *v34;
  uint64_t v35;
  int *v36;
  char *v37;
  CFStringRef v38;
  NSObject *v39;
  CFStringRef v40;
  NSObject *v41;
  uint64_t v42;
  int v43;
  int v44;
  UInt8 *v45;
  UInt8 *v46;
  uint64_t v47;
  uint64_t v48;
  CFStringRef v49;
  NSObject *v50;
  int v51;
  NSObject *v52;
  NSObject *v54;
  _BOOL4 v55;
  int v56;
  CFMutableDataRef theData;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  _OWORD v65[6];
  _OWORD v66[6];
  char *v67;
  char *v68;
  uint8_t buf[4];
  CFStringRef v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v67 = 0;
  v68 = 0;
  theData = 0;
  v58 = 0;
  if (CK_DEFAULT_LOG_BLOCK_0 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_115);
  memset(v66, 0, sizeof(v66));
  memset(v65, 0, sizeof(v65));
  v62 = 0u;
  v63 = 0u;
  v64 = 0;
  v59 = 0u;
  v60 = 0u;
  v61 = 0;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
  {
    v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("srcPath:\"%s\", dstPath:\"%s\"\n"), a1, a2);
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_117);
    v5 = CK_DEFAULT_LOG_INTERNAL_0;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      v70 = v4;
      _os_log_impl(&dword_20A95C000, v5, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v4)
      CFRelease(v4);
  }
  v6 = 0;
  v7 = 0;
  v8 = -1;
  v9 = -1;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  if (a1 && a2)
  {
    v14 = open(a2, 0);
    if (v14 == -1)
    {
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_120);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
      {
        v18 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v19 = *__error();
        v20 = __error();
        v21 = strerror(*v20);
        v22 = CFStringCreateWithFormat(v18, 0, CFSTR("open failed on \"%s\": %d (%s)\n"), a2, v19, v21);
        if (CK_DEFAULT_LOG_BLOCK_0 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_123);
        v23 = CK_DEFAULT_LOG_INTERNAL_0;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          v70 = v22;
          _os_log_impl(&dword_20A95C000, v23, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v22)
          CFRelease(v22);
        v7 = 0;
        v6 = 0;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v8 = -1;
      }
      else
      {
        v7 = 0;
        v6 = 0;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        v13 = 0;
      }
    }
    else
    {
      v8 = v14;
      v15 = openFdWithReadContext(a2, v14, &v67, (uint64_t)v65, (uint64_t)&v59);
      v10 = 0;
      v7 = 0;
      v6 = v15 == 0;
      if (v15 || !BYTE8(v60))
      {
        v11 = 0;
        v12 = 0;
        v13 = 0;
        goto LABEL_94;
      }
      ChunkListCacheBlob = getChunkListCacheBlob((uint64_t)v67, (CFMutableDataRef *)&v58);
      if (ChunkListCacheBlob)
      {
        v17 = ChunkListCacheBlob == 22;
        v58 = 0;
      }
      else
      {
        v17 = 0;
      }
      FileSignatureCacheBlob = getFileSignatureCacheBlob(v67, &theData);
      if (FileSignatureCacheBlob)
      {
        v25 = 0;
        v26 = FileSignatureCacheBlob == 22;
        theData = 0;
      }
      else
      {
        v26 = 0;
        v25 = theData;
      }
      v7 = (__CFData *)v58;
      if (!(v58 | (unint64_t)v25))
      {
        v7 = 0;
        v10 = 0;
        v11 = v26;
        v12 = v17;
        v6 = 1;
        v13 = 1;
        goto LABEL_94;
      }
      v27 = open(a1, 0);
      if (v27 != -1)
      {
        v9 = v27;
        v28 = openFdWithReadContext(a1, v27, &v68, (uint64_t)v66, (uint64_t)&v62);
        v11 = v26;
        v29 = v17;
        v12 = v17;
        if (!v28)
        {
          v56 = v29;
          if (!BYTE8(v63))
          {
LABEL_43:
            v13 = 0;
LABEL_93:
            v6 = 1;
            v10 = 1;
            goto LABEL_94;
          }
          --HIDWORD(v63);
          v55 = v26;
          if (v7)
          {
            MutableBytePtr = CFDataGetMutableBytePtr(v7);
            v31 = MutableBytePtr;
            if (HIDWORD(v63) != *(_DWORD *)(MutableBytePtr + 21)
              || (v32 = v60, __PAIR128__(*((unint64_t *)&v62 + 1), v60) != *(_OWORD *)(MutableBytePtr + 25))
              || (v33 = v59, (_QWORD)v59 != *(_QWORD *)(MutableBytePtr + 41)))
            {
              if (CK_DEFAULT_LOG_BLOCK_0 != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_132);
              if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
              {
                v13 = 0;
                v43 = 0;
                v44 = 1;
                goto LABEL_68;
              }
              v40 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Invalid chunk list cache for \"%s\", type:%u, mtime:%llu/%llu, ino:%llu/%llu, generation:%u/%u, sz:%llu/%llu\n"), a2, v31[20], *(_QWORD *)(v31 + 25), (_QWORD)v60, *(_QWORD *)(v31 + 33), *((_QWORD *)&v62 + 1), *(unsigned int *)(v31 + 21), HIDWORD(v63), *(_QWORD *)(v31 + 41), (_QWORD)v59);
              if (CK_DEFAULT_LOG_BLOCK_0 != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_135_0);
              v41 = CK_DEFAULT_LOG_INTERNAL_0;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 138543362;
                v70 = v40;
                _os_log_impl(&dword_20A95C000, v41, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
              }
              v42 = 0;
              v13 = 0;
              v43 = 0;
              v44 = 1;
              if (!v40)
              {
LABEL_68:
                v12 = v44 != 0;
                if (!theData)
                  goto LABEL_93;
                v45 = CFDataGetMutableBytePtr(theData);
                v46 = v45;
                if (HIDWORD(v63) == *(_DWORD *)(v45 + 21))
                {
                  v47 = v60;
                  if (__PAIR128__(*((unint64_t *)&v62 + 1), v60) == *(_OWORD *)(v45 + 25))
                  {
                    v48 = v59;
                    if ((_QWORD)v59 == *(_QWORD *)(v45 + 41))
                    {
                      *(_DWORD *)(v45 + 21) = HIDWORD(v60);
                      *(_QWORD *)(v45 + 25) = v47;
                      *(_QWORD *)(v45 + 33) = *((_QWORD *)&v59 + 1);
                      *(_QWORD *)(v45 + 41) = v48;
                      if (!setFileSignatureCacheBlob((uint64_t)v67, theData))
                      {
                        if (CK_DEFAULT_LOG_BLOCK_0 != -1)
                          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_152_0);
                        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
                        {
                          v49 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Fixed up file signature cache for \"%s\" (%llu)\n"), a2, *((_QWORD *)&v59 + 1));
                          if (CK_DEFAULT_LOG_BLOCK_0 != -1)
                            dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_157);
                          v50 = CK_DEFAULT_LOG_INTERNAL_0;
                          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
                          {
                            *(_DWORD *)buf = 138543362;
                            v70 = v49;
                            _os_log_impl(&dword_20A95C000, v50, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
                          }
                          v43 = 1;
                          v51 = v55;
                          if (!v49)
                            goto LABEL_92;
                          goto LABEL_90;
                        }
                        v43 = 1;
                      }
                      v51 = v55;
                      goto LABEL_92;
                    }
                  }
                }
                if (CK_DEFAULT_LOG_BLOCK_0 != -1)
                  dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_146);
                if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
                {
                  v51 = 1;
                  goto LABEL_92;
                }
                v49 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Invalid file signature cache for \"%s\", type:%u, mtime:%llu/%llu, ino:%llu/%llu, generation:%u/%u, sz:%llu/%llu\n"), a2, v46[20], *(_QWORD *)(v46 + 25), (_QWORD)v60, *(_QWORD *)(v46 + 33), *((_QWORD *)&v62 + 1), *(unsigned int *)(v46 + 21), HIDWORD(v63), *(_QWORD *)(v46 + 41), (_QWORD)v59);
                if (CK_DEFAULT_LOG_BLOCK_0 != -1)
                  dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_149);
                v52 = CK_DEFAULT_LOG_INTERNAL_0;
                if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 138543362;
                  v70 = v49;
                  _os_log_impl(&dword_20A95C000, v52, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
                }
                v51 = 1;
                if (!v49)
                  goto LABEL_92;
LABEL_90:
                CFRelease(v49);
LABEL_92:
                v11 = v51 != 0;
                v13 = v43 != 0;
                goto LABEL_93;
              }
LABEL_64:
              CFRelease(v40);
              v13 = v42;
              v43 = v42;
              goto LABEL_68;
            }
            *(_DWORD *)(MutableBytePtr + 21) = HIDWORD(v60);
            *(_QWORD *)(MutableBytePtr + 25) = v32;
            *(_QWORD *)(MutableBytePtr + 33) = *((_QWORD *)&v59 + 1);
            *(_QWORD *)(MutableBytePtr + 41) = v33;
            if (setChunkListCacheBlob((uint64_t)v67, v7))
              goto LABEL_43;
            if (CK_DEFAULT_LOG_BLOCK_0 != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_138);
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
            {
              v40 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Fixed up chunk list cache for \"%s\" (%llu)\n"), a2, *((_QWORD *)&v59 + 1));
              if (CK_DEFAULT_LOG_BLOCK_0 != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_143_0);
              v54 = CK_DEFAULT_LOG_INTERNAL_0;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 138543362;
                v70 = v40;
                _os_log_impl(&dword_20A95C000, v54, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
              }
              v42 = 1;
              v13 = 1;
              v43 = 1;
              v44 = v56;
              if (!v40)
                goto LABEL_68;
              goto LABEL_64;
            }
            v13 = 1;
            v43 = 1;
          }
          else
          {
            v13 = 0;
            v43 = 0;
          }
          v44 = v56;
          goto LABEL_68;
        }
LABEL_55:
        v10 = 0;
        v13 = 0;
        v6 = 1;
        goto LABEL_94;
      }
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_126);
      v11 = v26;
      v12 = v17;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
        goto LABEL_55;
      v34 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v35 = *__error();
      v36 = __error();
      v37 = strerror(*v36);
      v38 = CFStringCreateWithFormat(v34, 0, CFSTR("open failed on \"%s\": %d (%s)\n"), a1, v35, v37);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_129);
      v39 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v70 = v38;
        _os_log_impl(&dword_20A95C000, v39, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v38)
        CFRelease(v38);
      v10 = 0;
      v13 = 0;
      v6 = 1;
    }
    v9 = -1;
  }
LABEL_94:
  if (theData)
    CFRelease(theData);
  if (v7)
    CFRelease(v7);
  if (v6 && v12)
    setCacheBlob((uint64_t)v67, (uint64_t)"com.apple.cscache", 0);
  if (v6 && v11)
  {
    setFileSignatureCacheBlob((uint64_t)v67, 0);
    if (!v10)
      goto LABEL_102;
  }
  else if (!v10)
  {
LABEL_102:
    if (!v6)
      goto LABEL_104;
    goto LABEL_103;
  }
  closeFdWithReadContext((uint64_t)v68, (uint64_t)v66);
  if (v6)
LABEL_103:
    closeFdWithReadContext((uint64_t)v67, (uint64_t)v65);
LABEL_104:
  if (v9 != -1)
    close(v9);
  if (v8 != -1)
    close(v8);
  return v13;
}

uint64_t openFdUncached(uint64_t a1, char **a2, CFErrorRef *a3)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  const __CFAllocator *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  char *v12;
  CFStringRef v13;
  NSObject *v14;
  uint8_t buf[4];
  CFStringRef v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = openFd(a1, a2, a3);
  if ((_DWORD)v4)
  {
    v5 = *a2;
    if ((*((_WORD *)*a2 + 16) & 0xF000) != 0xA000)
    {
      v6 = *((_QWORD *)v5 + 13);
      v7 = *((unsigned int *)v5 + 9);
      if (make_fd_uncached(*((_DWORD *)v5 + 9)))
      {
        if (CK_DEFAULT_LOG_BLOCK_0 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_161);
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEFAULT))
        {
          v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          v9 = *((_QWORD *)v5 + 5);
          v10 = *__error();
          v11 = __error();
          v12 = strerror(*v11);
          v13 = CFStringCreateWithFormat(v8, 0, CFSTR("make_fd_uncached failed for fd:%d, path:\"%s\", ino:%llu: %d (%s)\n"), v7, v6, v9, v10, v12);
          if (CK_DEFAULT_LOG_BLOCK_0 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_165);
          v14 = CK_DEFAULT_LOG_INTERNAL_0;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138543362;
            v17 = v13;
            _os_log_impl(&dword_20A95C000, v14, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
          }
          if (v13)
            CFRelease(v13);
        }
      }
    }
  }
  return v4;
}

os_log_t __openFdUncached_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __openFdUncached_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCache_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCache_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCache_block_invoke_181()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCache_block_invoke_2_186()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCache_block_invoke_189()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCache_block_invoke_2_194()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCache_block_invoke_197()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCache_block_invoke_2_202()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCache_block_invoke_205()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCache_block_invoke_2_210()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCache_block_invoke_214()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCache_block_invoke_2_219()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCache_block_invoke_222()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __getChunkListCache_block_invoke_2_227()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_240()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_2_245()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_248()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_2_253()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_256()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_2_261()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_265()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_2_270()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_273()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_2_278()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_281()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_2_286()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_289()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_2_294()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_297()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_2_302()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_307()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkUsingChunkCache_block_invoke_2_312()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

uint64_t _SetSourceChunk(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 136);
  if (*(_QWORD *)(v2 + 8))
    _SetSourceChunk_cold_4();
  if (*(_QWORD *)(v2 + 64))
    _SetSourceChunk_cold_3();
  v5 = malloc_type_malloc(4uLL, 0x100004052888210uLL);
  *(_QWORD *)(v2 + 8) = v5;
  if (!v5)
    return 0xFFFFFFFFLL;
  *(_DWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 72) = a2;
  if (!CKChunkSignatureGeneratorCreate((_QWORD *)(v2 + 64), *(const void **)(a1 + 152))
    || !*(_QWORD *)(v2 + 64))
  {
    return 0xFFFFFFFFLL;
  }
  if (*(_QWORD *)(v2 + 32))
    _SetSourceChunk_cold_2();
  if (*(_QWORD *)(v2 + 56))
    _SetSourceChunk_cold_1();
  result = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  return result;
}

void _ClearSourceChunk(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  int v3;
  void *v4;
  const void *v5;
  const void *v6;

  v1 = *(_QWORD *)(a1 + 136);
  v2 = *(void **)(v1 + 8);
  if (v2)
  {
    free(v2);
    *(_QWORD *)(v1 + 8) = 0;
  }
  v3 = *(_DWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 40) = 0;
  v4 = *(void **)(v1 + 56);
  if (v3)
  {
    if (!v4)
      _ClearSourceChunk_cold_2();
    free(v4);
    *(_QWORD *)(v1 + 48) = 0;
    *(_QWORD *)(v1 + 56) = 0;
  }
  else if (v4)
  {
    _ClearSourceChunk_cold_1();
  }
  v5 = *(const void **)(v1 + 64);
  if (v5)
    CKBaseRelease(v5);
  *(_QWORD *)(v1 + 64) = 0;
  v6 = *(const void **)(v1 + 32);
  if (v6)
    CKBaseRelease(v6);
  *(_QWORD *)(v1 + 32) = 0;
}

os_log_t __chunkerFileReadBufferSize_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __chunkerFileReadBufferSize_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

uint64_t CSfixed_subchunk_stream(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, char a5)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t *v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  size_t v17;
  unsigned int v18;
  unsigned int v19;
  float v20;
  float v21;
  uint64_t v22;
  void *v23;
  size_t v24;
  void *v25;
  void *v26;
  _BYTE *v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  CFStringRef v31;
  NSObject *v32;
  CFTypeRef v34;
  uint8_t buf[4];
  CFStringRef v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 136);
  v34 = 0;
  if (!a3)
    CSfixed_subchunk_stream_cold_1();
  v8 = a3;
  v10 = (uint64_t *)(v5 + 32);
  v11 = (float)a4;
  while (1)
  {
    v12 = *v10;
    if (!*v10)
    {
      CKChunkDigestArgumentsV1Create(&v34, 0, 0);
      if (!CKChunkSignatureGeneratorCreate((_QWORD *)(v5 + 32), v34))
        break;
      v12 = *v10;
      if (!*v10)
        break;
    }
    v13 = *(_QWORD *)(v5 + 40) % a4;
    if (v13 + v8 < a4 && (a5 & 1) == 0)
    {
      CKChunkSignatureGeneratorUpdate(v12);
      v30 = 0;
      *(_QWORD *)(v5 + 40) += v8;
      goto LABEL_43;
    }
    v14 = a4 - v13;
    if (v14 >= v8)
      v15 = v8;
    else
      v15 = v14;
    CKChunkSignatureGeneratorUpdate(v12);
    if (!CKChunkSignatureGeneratorFinish(*v10))
    {
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_424);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
      {
        v31 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("CKChunkSignatureGeneratorFinish failed\n"));
        if (CK_DEFAULT_LOG_BLOCK_0 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_428);
        v32 = CK_DEFAULT_LOG_INTERNAL_0;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          v36 = v31;
          _os_log_impl(&dword_20A95C000, v32, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v31)
          CFRelease(v31);
      }
      *(_QWORD *)(v5 + 64) = 0;
      break;
    }
    v16 = (_BYTE *)CKChunkDigestResultsChunkSignature(0);
    v17 = CKSchemeAndSignatureSize(v16);
    v19 = *(_DWORD *)(v5 + 48);
    v18 = *(_DWORD *)(v5 + 52);
    if (v19 <= v18)
    {
      v20 = (float)(2 * v19);
      v21 = ceilf((float)v8 / v11);
      if (v21 >= v20)
        v20 = v21;
      v22 = v20;
      *(_DWORD *)(v5 + 48) = v22;
      v23 = *(void **)(v5 + 56);
      v24 = v17 * v22 + 1;
      if (v23)
        v25 = malloc_type_realloc(v23, v24, 0x674AC3AAuLL);
      else
        v25 = malloc_type_calloc(1uLL, v24, 0x22A8B203uLL);
      *(_QWORD *)(v5 + 56) = v25;
      v18 = *(_DWORD *)(v5 + 52);
    }
    if (v18)
    {
      v26 = (void *)(*(_QWORD *)(v5 + 56) + v17 * v18 + 1);
      if (!v16)
        goto LABEL_48;
    }
    else
    {
      if (a4 >= 0x40000)
        CSfixed_subchunk_stream_cold_2();
      v27 = *(_BYTE **)(v5 + 56);
      *v27 = a4 >> 10;
      v26 = v27 + 1;
      if (!v16)
LABEL_48:
        CSfixed_subchunk_stream_cold_3();
    }
    memcpy(v26, v16, v17);
    v28 = *(_DWORD *)(v5 + 52);
    if (v28 >= 0x50)
      CSfixed_subchunk_stream_cold_4();
    *(_DWORD *)(v5 + 52) = v28 + 1;
    if (v34)
      CFRelease(v34);
    v34 = 0;
    if (*v10)
      CFRelease((CFTypeRef)*v10);
    v29 = *(_QWORD *)(v5 + 40) + v15;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 40) = v29;
    a2 += v15;
    v8 -= v15;
    if (!v8)
    {
      v30 = 0;
      goto LABEL_43;
    }
  }
  v30 = -1;
LABEL_43:
  if (v34)
    CFRelease(v34);
  v34 = 0;
  if (*v10)
    CFRelease((CFTypeRef)*v10);
  *v10 = 0;
  return v30;
}

uint64_t CS_fixed_chunk_stream_accumulate(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t result;

  v6 = *(_QWORD *)(a1 + 136);
  CKChunkSignatureGeneratorUpdate(*(_QWORD *)(v6 + 64));
  if (*(_BYTE *)(a1 + 179))
    goto LABEL_7;
  v7 = *(void **)(v6 + 8);
  v8 = *(unsigned int *)(v6 + 80);
  if (!v7)
  {
    if ((_DWORD)v8)
      CS_fixed_chunk_stream_accumulate_cold_1();
    v8 = 0;
  }
  v9 = (char *)malloc_type_realloc(v7, v8 + a3, 0x31267478uLL);
  if (v9)
  {
    *(_QWORD *)(v6 + 8) = v9;
    memcpy(&v9[*(unsigned int *)(v6 + 80)], a2, a3);
LABEL_7:
    result = 0;
    *(_DWORD *)(v6 + 80) += a3;
    return result;
  }
  free(*(void **)(v6 + 8));
  *(_QWORD *)(v6 + 8) = 0;
  return 0xFFFFFFFFLL;
}

uint64_t CSchunklist_add_stream(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  CFStringRef v4;
  NSObject *v5;
  CFStringRef v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  CFStringRef v13;
  NSObject *v14;
  const char *v15;
  uint8_t buf[4];
  CFStringRef v17;
  _OWORD v18[3];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 136);
  if (CKChunkSignatureGeneratorFinish(*(_QWORD *)(v2 + 64)))
  {
    v3 = *(const void **)(v2 + 64);
    if (v3)
      CKBaseRelease(v3);
    *(_QWORD *)(v2 + 64) = 0;
    if (*(_DWORD *)(v2 + 80))
    {
      CopyChunkSignatureAndKeyFromChunkDigestResults(v2 + 72, 0);
      if (*(_BYTE *)(a1 + 179))
      {
        *(_QWORD *)v2 = *(_QWORD *)(a1 + 56);
      }
      else
      {
        *(_BYTE *)(v2 + 25) = 1;
        *(_QWORD *)v2 = *(unsigned int *)(a1 + 36);
      }
      *(_QWORD *)v2 = *(_QWORD *)(a1 + 56);
      v9 = *(_QWORD *)(a1 + 440);
      *(_QWORD *)(a1 + 440) = v9 + 1;
      *(_QWORD *)(v2 + 16) = v9;
      v10 = *(unsigned int *)(v2 + 80);
      v11 = *(_QWORD *)(a1 + 256) + 56 * *(unsigned int *)(a1 + 252);
      *(_QWORD *)(v11 + 40) += v10;
      ++*(_DWORD *)(v11 + 48);
      *(_QWORD *)(a1 + 424) += v10;
      if (!*(_BYTE *)(a1 + 184))
        goto LABEL_49;
      memset(v18, 0, 43);
      CShex_to_string((char *)(v2 + 84), 21, (uint64_t)v18);
      v12 = *(const char **)(a1 + 112);
      if (*(_QWORD *)(a1 + 544))
      {
        bzero(buf, 0x400uLL);
        snprintf((char *)buf, 0x400uLL, "\"%s\": %llu, %llu, o:0x%llx, sz:0x%x(%u), s:%s\n", v12, *(_QWORD *)(a1 + 56), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 72), *(_DWORD *)(v2 + 80), *(_DWORD *)(v2 + 80), (const char *)v18);
        strcat(*(char **)(a1 + 544), (const char *)buf);
        if (CK_DEFAULT_LOG_BLOCK_0 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_448);
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
          goto LABEL_49;
        v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("\"%s\": %llu, %lld, o:0x%llx, sz:0x%x(%u), s:%s\n"), v12, *(_QWORD *)(a1 + 56), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 72), *(unsigned int *)(v2 + 80), *(unsigned int *)(v2 + 80), v18, 0);
        if (CK_DEFAULT_LOG_BLOCK_0 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_453_0);
        v14 = CK_DEFAULT_LOG_INTERNAL_0;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
          goto LABEL_47;
        *(_DWORD *)buf = 138543362;
        v17 = v13;
      }
      else
      {
        if (CK_DEFAULT_LOG_BLOCK_0 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_456);
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
          goto LABEL_49;
        v15 = "E";
        if (*(char *)(v2 + 84) >= 0)
          v15 = "-";
        v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("\"%s\": %s, %lld, o:0x%llx, sz:0x%x(%u), s:%s\n"), v12, v15, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 72), *(unsigned int *)(v2 + 80), *(unsigned int *)(v2 + 80), v18, 0);
        if (CK_DEFAULT_LOG_BLOCK_0 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_463);
        v14 = CK_DEFAULT_LOG_INTERNAL_0;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
          goto LABEL_47;
        *(_DWORD *)buf = 138543362;
        v17 = v13;
      }
      _os_log_impl(&dword_20A95C000, v14, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
LABEL_47:
      if (v13)
        CFRelease(v13);
LABEL_49:
      if (*(_BYTE *)(a1 + 180))
        return 0;
      else
        return (*(uint64_t (**)(uint64_t))(a1 + 128))(a1);
    }
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_439);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Ignoring attempt to add 0 length chunk\n"));
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_444_0);
      v8 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        v17 = v7;
        _os_log_impl(&dword_20A95C000, v8, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v7)
        CFRelease(v7);
    }
    return 0;
  }
  else
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_434);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
    {
      v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("CKChunkSignatureGeneratorFinish failed\n"));
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_436);
      v5 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v17 = v4;
        _os_log_impl(&dword_20A95C000, v5, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v4)
        CFRelease(v4);
    }
    *(_QWORD *)(v2 + 64) = 0;
    return 0xFFFFFFFFLL;
  }
}

_BYTE *CopyChunkSignatureAndKeyFromChunkDigestResults(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  unsigned __int8 *v5;
  size_t v6;
  _BYTE *result;
  void *v8;
  size_t v9;

  v4 = (_BYTE *)CKChunkDigestResultsChunkSignature(a2);
  v5 = (unsigned __int8 *)CKChunkDigestResultsChunkKey(a2);
  if (v4)
  {
    v6 = CKChunkSchemeAndSignatureSize(v4);
    memcpy((void *)(a1 + 12), v4, v6);
  }
  result = (_BYTE *)(a1 + 12);
  if (*(char *)(a1 + 12) < 0)
  {
    if (v5)
    {
      v8 = (void *)(a1 + CKChunkSchemeAndSignatureSize(result) + 12);
      v9 = CKChunkSchemeAndEncryptionKeySize(v5);
      return memcpy(v8, v5, v9);
    }
  }
  return result;
}

double CSchunklist_add(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  char v11;
  char v12;
  char *v13;
  CFStringRef v14;
  NSObject *v15;
  uint64_t v16;
  int v17;
  CFStringRef v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  CFTypeRef v22;
  uint64_t v23;
  const char *v24;
  unsigned int v25;
  uint64_t v26;
  CFStringRef v27;
  NSObject *v28;
  const char *v29;
  CFStringRef v30;
  NSObject *v31;
  double result;
  CFTypeRef v33;
  _OWORD v34[3];
  _OWORD v35[10];
  char v36;
  uint8_t __s2[30];
  _BYTE v38[1026];

  *(_QWORD *)&v38[1002] = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a1 + 136);
  v11 = CKChunkDigestArgumentsChunkScheme(*(_QWORD *)(a1 + 152));
  if (!a4)
  {
    v13 = *(char **)(a1 + 544);
    if (v13)
    {
      bzero(v38, 0x3E2uLL);
      strcpy((char *)__s2, "  === segment end marker ===\n");
      strcat(v13, (const char *)__s2);
    }
    *(_QWORD *)(v10 + 8) = 0;
    goto LABEL_66;
  }
  if ((int)a5 <= 0)
  {
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_472);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      v14 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Ignoring attempt to add a chunk with invalid length %d.\n"), a5);
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_476);
      v15 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__s2 = 138543362;
        *(_QWORD *)&__s2[4] = v14;
        _os_log_impl(&dword_20A95C000, v15, OS_LOG_TYPE_DEBUG, "%{public}@", __s2, 0xCu);
      }
      if (v14)
        CFRelease(v14);
    }
  }
  else
  {
    v12 = v11;
    if (*(_BYTE *)(a1 + 179))
    {
      *(_QWORD *)v10 = *(_QWORD *)(a1 + 56);
    }
    else
    {
      *(_BYTE *)(v10 + 25) = 1;
      *(_QWORD *)v10 = *(unsigned int *)(a1 + 36);
    }
    *(_QWORD *)(v10 + 72) = a3;
    *(_DWORD *)(v10 + 80) = a5;
    *(_QWORD *)(v10 + 8) = a4;
    *(_QWORD *)(v10 + 16) = a2;
    v16 = *(_QWORD *)(a1 + 256) + 56 * *(unsigned int *)(a1 + 252);
    *(_QWORD *)(v16 + 40) += a5;
    ++*(_DWORD *)(v16 + 48);
    if (*(_BYTE *)(a1 + 183))
      *(_QWORD *)(a1 + 480) = mach_absolute_time();
    v33 = 0;
    v17 = CKCalculateChunkSignatureAndEncryptionKey(*(_QWORD *)(v10 + 8), *(unsigned int *)(v10 + 80), *(const void **)(a1 + 152), &v33);
    if ((v12 & 0x80) == 0)
    {
      if (!v17)
        goto LABEL_78;
      CopyChunkSignatureAndKeyFromChunkDigestResults(v10 + 72, (uint64_t)v33);
      if (v33)
        CKBaseRelease(v33);
      v33 = 0;
LABEL_39:
      if (*(_BYTE *)(a1 + 183))
        *(_QWORD *)(a1 + 488) += mach_absolute_time() - *(_QWORD *)(a1 + 480);
      if (!*(_BYTE *)(a1 + 184))
        goto LABEL_65;
      v24 = *(const char **)(a1 + 112);
      v36 = 0;
      memset(v35, 0, sizeof(v35));
      memset(v34, 0, 43);
      v25 = *(_DWORD *)(v10 + 80);
      if (v25 >= 0x50)
        v26 = 80;
      else
        v26 = v25;
      CShex_to_string((char *)(v10 + 84), 21, (uint64_t)v34);
      CShex_to_string((char *)(*(_QWORD *)(v10 + 8) + (*(_DWORD *)(v10 + 80) - v26)), v26, (uint64_t)v35);
      if (*(_QWORD *)(a1 + 544))
      {
        bzero(__s2, 0x400uLL);
        snprintf((char *)__s2, 0x400uLL, "\"%s\": %llu, %lld, o:0x%llx, sz:0x%x(%u), s:%s, (%u, %s)\n", v24, *(_QWORD *)(a1 + 56), a2, a3, a5, a5, (const char *)v34, v26, (const char *)v35);
        strcat(*(char **)(a1 + 544), (const char *)__s2);
        if (CK_DEFAULT_LOG_BLOCK_0 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_496);
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
          goto LABEL_65;
        v27 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("\"%s\": %llu, %lld, o:0x%llx, sz:0x%x(%u), s:%s, (%u, %s)\n"), v24, *(_QWORD *)(a1 + 56), a2, a3, a5, a5, v34, v26, v35);
        if (CK_DEFAULT_LOG_BLOCK_0 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_501);
        v28 = CK_DEFAULT_LOG_INTERNAL_0;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
        {
LABEL_63:
          if (v27)
            CFRelease(v27);
LABEL_65:
          *(_QWORD *)(a1 + 424) += *(unsigned int *)(v10 + 80);
LABEL_66:
          if (!*(_BYTE *)(a1 + 180))
            (*(void (**)(uint64_t))(a1 + 128))(a1);
          goto LABEL_78;
        }
        *(_DWORD *)__s2 = 138543362;
        *(_QWORD *)&__s2[4] = v27;
      }
      else
      {
        if (CK_DEFAULT_LOG_BLOCK_0 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_504);
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
          goto LABEL_65;
        v29 = "E";
        if ((v12 & 0x80) == 0)
          v29 = "-";
        v27 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("\"%s\": %s, %llu, o:0x%llx, sz:0x%x(%u), s:%s"), v24, v29, a2, a3, a5, a5, v34);
        if (CK_DEFAULT_LOG_BLOCK_0 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_509);
        v28 = CK_DEFAULT_LOG_INTERNAL_0;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
          goto LABEL_63;
        *(_DWORD *)__s2 = 138543362;
        *(_QWORD *)&__s2[4] = v27;
      }
      _os_log_impl(&dword_20A95C000, v28, OS_LOG_TYPE_DEBUG, "%{public}@", __s2, 0xCu);
      goto LABEL_63;
    }
    if (!v17)
      goto LABEL_78;
    CopyChunkSignatureAndKeyFromChunkDigestResults(v10 + 72, (uint64_t)v33);
    if (v33)
      CKBaseRelease(v33);
    v33 = 0;
    if (*(_BYTE *)(a1 + 179))
      goto LABEL_39;
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_479_0);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
    {
      v18 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("encrypting\n"));
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_484_0);
      v19 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__s2 = 138543362;
        *(_QWORD *)&__s2[4] = v18;
        _os_log_impl(&dword_20A95C000, v19, OS_LOG_TYPE_DEBUG, "%{public}@", __s2, 0xCu);
      }
      if (v18)
        CFRelease(v18);
    }
    v20 = *(_QWORD *)(v10 + 8);
    v21 = *(unsigned int *)(v10 + 80);
    v22 = v33;
    v23 = CKChunkDigestResultsChunkLength((uint64_t)v33);
    if (doEncrypt(v20, v21, v22, v23))
      goto LABEL_39;
    if (CK_DEFAULT_LOG_BLOCK_0 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_487_0);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
    {
      v30 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("doEncrypt failed\n"));
      if (CK_DEFAULT_LOG_BLOCK_0 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_0, &__block_literal_global_492_0);
      v31 = CK_DEFAULT_LOG_INTERNAL_0;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__s2 = 138543362;
        *(_QWORD *)&__s2[4] = v30;
        _os_log_impl(&dword_20A95C000, v31, OS_LOG_TYPE_ERROR, "%{public}@", __s2, 0xCu);
      }
      if (v30)
        CFRelease(v30);
    }
  }
LABEL_78:
  *(_QWORD *)(v10 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)v10 = 0u;
  return result;
}

os_log_t __setChunkListCache_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __setChunkListCache_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __setChunkListCache_block_invoke_525()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __setChunkListCache_block_invoke_2_530()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __setChunkListCache_block_invoke_533()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __setChunkListCache_block_invoke_2_538()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __setChunkListCache_block_invoke_541()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __setChunkListCache_block_invoke_3()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __setChunkListCache_block_invoke_554()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __setChunkListCache_block_invoke_3_562()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __setChunkListCache_block_invoke_565()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __setChunkListCache_block_invoke_2_570()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __setChunkListCache_block_invoke_574()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __setChunkListCache_block_invoke_2_579()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __setChunkListCache_block_invoke_582()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

os_log_t __setChunkListCache_block_invoke_2_587()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_0 = (uint64_t)result;
  return result;
}

void CSParametersFinalize(void *a1)
{
  if (a1)
    free(a1);
}

void *CSParameters_Create()
{
  return malloc_type_calloc(1uLL, 8uLL, 0x80040B8603338uLL);
}

uint64_t CSChunkCryptor_Destroy(uint64_t a1, CFErrorRef *a2)
{
  _QWORD *v4;
  void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  void *v9;
  uint64_t result;
  CFErrorRef v11;

  if (a1 && (v4 = *(_QWORD **)(a1 + 56)) != 0)
  {
    v5 = (void *)v4[1];
    if (v5)
    {
      free(v5);
      v4[1] = 0;
    }
    v6 = (const void *)v4[7];
    if (v6)
    {
      CFRelease(v6);
      v4[7] = 0;
    }
    v7 = (const void *)v4[8];
    if (v7)
    {
      CFRelease(v7);
      v4[8] = 0;
    }
    v8 = (const void *)v4[9];
    if (v8)
    {
      CFRelease(v8);
      v4[9] = 0;
    }
    v9 = (void *)v4[11];
    if (v9)
      free(v9);
    free(v4);
    *(_QWORD *)(a1 + 56) = 0;
    return 1;
  }
  else
  {
    v11 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFErrorDomain)*MEMORY[0x24BDBD390], 6, 0);
    result = 0;
    *a2 = v11;
  }
  return result;
}

uint64_t CSChunkCryptor_InitializeEncryptor(uint64_t a1, const __CFData *a2, const __CFData *a3, unint64_t a4, unint64_t a5, CFErrorRef *a6)
{
  uint64_t result;

  if (a5 >= a4)
  {
    if (_CSChunkCryptor_Initialize(a1, a2, a3, a4, a5, a6))
    {
      result = 1;
      *(_BYTE *)(*(_QWORD *)(a1 + 56) + 48) = 1;
      return result;
    }
  }
  else
  {
    *a6 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFErrorDomain)*MEMORY[0x24BDBD390], 0, 0);
  }
  result = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

uint64_t _CSChunkCryptor_Initialize(uint64_t a1, CFDataRef theData, const __CFData *a3, uint64_t a4, uint64_t a5, CFErrorRef *a6)
{
  char *v12;
  uint64_t *v13;
  const __CFAllocator *v14;
  const __CFString *v15;
  CFIndex v16;
  CFErrorRef v17;
  uint64_t result;
  const __CFAllocator *v19;
  uint64_t v20;
  size_t *v21;
  UInt8 bytes[16];
  __int128 v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (CFDataGetLength(theData) != 32)
  {
    v14 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v15 = (const __CFString *)*MEMORY[0x24BDBD390];
    v16 = 5;
    goto LABEL_7;
  }
  v12 = (char *)malloc_type_malloc(0x60uLL, 0x1060040A3E8CD77uLL);
  if (!v12)
  {
    v14 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v15 = (const __CFString *)*MEMORY[0x24BDBD390];
    v16 = 1;
    goto LABEL_7;
  }
  v13 = (uint64_t *)v12;
  *((_QWORD *)v12 + 2) = a4;
  *((_QWORD *)v12 + 3) = a5;
  *(_WORD *)(v12 + 49) = 256;
  *((_QWORD *)v12 + 4) = 0;
  *((_QWORD *)v12 + 5) = 0;
  ccsha256_di();
  memset(v25, 0, sizeof(v25));
  memset(v24, 0, sizeof(v24));
  *(_OWORD *)bytes = 0u;
  v23 = 0u;
  CFDataGetLength(theData);
  CFDataGetBytePtr(theData);
  if (cchkdf())
  {
    free(v13);
    cc_clear();
    v14 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v15 = (const __CFString *)*MEMORY[0x24BDBD390];
    v16 = 2;
LABEL_7:
    v17 = CFErrorCreate(v14, v15, v16, 0);
    result = 0;
    *a6 = v17;
    return result;
  }
  v19 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v13[7] = (uint64_t)CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], bytes, 32);
  v13[8] = (uint64_t)CFDataCreate(v19, (const UInt8 *)v24, 32);
  v13[9] = (uint64_t)CFDataCreate(v19, (const UInt8 *)v25, 32);
  cc_clear();
  v20 = ccsha256_di();
  *v13 = v20;
  v13[1] = (uint64_t)malloc_type_malloc(*(_QWORD *)(v20 + 8) + *(_QWORD *)(v20 + 16) + 12, 0x9A780352uLL);
  ccdigest_init();
  CFDataGetBytePtr(a3);
  if (CFDataGetLength(a3) <= 31)
    CFDataGetLength(a3);
  __memcpy_chk();
  ccsha256_di();
  CFDataGetLength((CFDataRef)v13[8]);
  CFDataGetBytePtr((CFDataRef)v13[8]);
  cchmac();
  v21 = (size_t *)ccaes_ctr_crypt_mode();
  v13[10] = (uint64_t)v21;
  v13[11] = (uint64_t)malloc_type_malloc(*v21, 0x723D0EC1uLL);
  CFDataGetLength((CFDataRef)v13[9]);
  CFDataGetBytePtr((CFDataRef)v13[9]);
  ccctr_init();
  *(_QWORD *)(a1 + 56) = v13;
  cc_clear();
  cc_clear();
  return 1;
}

uint64_t CSChunkCryptor_InitializeDecryptor(uint64_t a1, const __CFData *a2, const __CFData *a3, unint64_t a4, unint64_t a5, CFErrorRef *a6)
{
  uint64_t result;

  if (a5 >= a4)
  {
    if (_CSChunkCryptor_Initialize(a1, a2, a3, a4, a5, a6))
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 56) + 48) = 0;
      return 1;
    }
  }
  else
  {
    *a6 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFErrorDomain)*MEMORY[0x24BDBD390], 0, 0);
  }
  result = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

uint64_t CSChunkCryptor_Update(uint64_t a1, uint64_t a2, unsigned int a3, CFErrorRef *a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  CFErrorRef v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  char v17;
  unsigned __int8 *v18;
  int v19;

  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
  {
    v9 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFErrorDomain)*MEMORY[0x24BDBD390], 7, 0);
    result = 0;
    *a4 = v9;
    return result;
  }
  if (*(_BYTE *)(v4 + 49))
  {
    v6 = 0;
    v7 = a3;
  }
  else
  {
    v11 = *(_QWORD *)(v4 + 32);
    v7 = a3;
    v12 = v11 + a3;
    v13 = *(_QWORD *)(v4 + 16);
    v14 = v13 - v11;
    if (v12 <= v13)
      v6 = a3;
    else
      v6 = v14;
  }
  if (v7 > v6)
    *(_BYTE *)(v4 + 49) = 1;
  if (v6 && *(_BYTE *)(v4 + 48))
    ccdigest_update();
  ccctr_update();
  *(_QWORD *)(v4 + 32) += v7;
  v15 = *(unsigned __int8 *)(v4 + 48);
  if (v6 && !*(_BYTE *)(v4 + 48))
  {
    ccdigest_update();
    v15 = *(unsigned __int8 *)(v4 + 48);
  }
  if (v15)
    return 1;
  result = 1;
  if (*(_BYTE *)(v4 + 49))
  {
    v16 = v7 - v6;
    if (v7 > v6)
    {
      v17 = *(_BYTE *)(v4 + 50);
      v18 = (unsigned __int8 *)(a2 + v6);
      do
      {
        v19 = *v18++;
        v17 &= v19 == 0;
        *(_BYTE *)(v4 + 50) = v17;
        --v16;
      }
      while (v16);
      return 1;
    }
  }
  return result;
}

uint64_t CSChunkCryptor_Finalize(uint64_t a1, uint64_t a2, uint64_t a3, CFErrorRef *a4)
{
  uint64_t v5;
  const __CFAllocator *v7;
  const __CFString *v8;
  CFIndex v9;
  int v10;
  uint64_t result;
  CFErrorRef v12;

  v5 = *(_QWORD *)(a1 + 56);
  if (!v5)
  {
    v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v8 = (const __CFString *)*MEMORY[0x24BDBD390];
    v9 = 7;
    goto LABEL_17;
  }
  cc_clear();
  free(*(void **)(v5 + 88));
  *(_QWORD *)(v5 + 88) = 0;
  (*(void (**)(void))(*(_QWORD *)v5 + 56))();
  cc_clear();
  if (!*(_QWORD *)(a1 + 24))
    goto LABEL_10;
  ccsha256_di();
  CFDataGetLength(*(CFDataRef *)(a1 + 24));
  CFDataGetBytePtr(*(CFDataRef *)(a1 + 24));
  if (!cchkdf())
  {
    if (cchkdf())
    {
      v9 = 2;
LABEL_16:
      v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v8 = (const __CFString *)*MEMORY[0x24BDBD390];
      goto LABEL_17;
    }
    CFDataGetBytePtr(*(CFDataRef *)(v5 + 56));
    v10 = cc_cmp_safe();
    cc_clear();
    cc_clear();
    cc_clear();
    if (v10)
    {
      v9 = 4;
      goto LABEL_16;
    }
LABEL_10:
    if (*(_BYTE *)(v5 + 48)
      || (ccsha256_di(),
          CFDataGetLength(*(CFDataRef *)(v5 + 56)),
          CFDataGetBytePtr(*(CFDataRef *)(v5 + 56)),
          cchmac(),
          !cc_cmp_safe()))
    {
      if (*(_BYTE *)(v5 + 50))
        return 1;
      v9 = 8;
    }
    else
    {
      v9 = 0;
    }
    goto LABEL_16;
  }
  cc_clear();
  v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v8 = (const __CFString *)*MEMORY[0x24BDBD390];
  v9 = 2;
LABEL_17:
  v12 = CFErrorCreate(v7, v8, v9, 0);
  result = 0;
  *a4 = v12;
  return result;
}

uint64_t _CreateCFInstanceZeroed(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, size_t a5)
{
  const __CFDictionary *Mutable;
  char *v10;
  uint64_t Instance;
  uint64_t v12;

  os_unfair_lock_lock((os_unfair_lock_t)&registered_classes_lock);
  Mutable = (const __CFDictionary *)registered_classes;
  if (!registered_classes)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], 0);
    registered_classes = (uint64_t)Mutable;
  }
  if (!CFDictionaryGetValue(Mutable, a2))
  {
    v10 = (char *)malloc_type_calloc(1uLL, 0x68uLL, 0x10D0040D425F453uLL);
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = a3;
    *((_QWORD *)v10 + 2) = 0;
    *((_QWORD *)v10 + 3) = 0;
    *((_QWORD *)v10 + 4) = a4;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *((_QWORD *)v10 + 12) = _CFRuntimeRegisterClass();
    CFDictionarySetValue((CFMutableDictionaryRef)registered_classes, a2, v10);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&registered_classes_lock);
  Instance = _CFRuntimeCreateInstance();
  v12 = Instance;
  if (Instance)
    bzero((void *)(Instance + 16), a5);
  return v12;
}

uint64_t cs_rwlock_init(uint64_t a1)
{
  uint64_t result;

  result = pthread_rwlock_init((pthread_rwlock_t *)a1, 0);
  if (!(_DWORD)result)
    result = pthread_mutex_init((pthread_mutex_t *)(a1 + 200), 0);
  *(_QWORD *)(a1 + 264) = 0;
  return result;
}

uint64_t cs_rwlock_destroy(uint64_t a1)
{
  uint64_t result;

  result = pthread_rwlock_destroy((pthread_rwlock_t *)a1);
  if (!(_DWORD)result)
    result = pthread_mutex_destroy((pthread_mutex_t *)(a1 + 200));
  *(_QWORD *)(a1 + 264) = 0;
  return result;
}

uint64_t cs_unlock(uint64_t a1)
{
  _opaque_pthread_t *v2;
  _opaque_pthread_t *v3;
  uint64_t result;

  v2 = *(_opaque_pthread_t **)(a1 + 264);
  v3 = pthread_self();
  if (!pthread_equal(v2, v3))
    return pthread_rwlock_unlock((pthread_rwlock_t *)a1);
  *(_QWORD *)(a1 + 264) = 0;
  result = pthread_rwlock_unlock((pthread_rwlock_t *)a1);
  if (!(_DWORD)result)
    return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 200));
  return result;
}

uint64_t cs_longrdlock(uint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t v3;

  v2 = (pthread_mutex_t *)(a1 + 200);
  v3 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 200));
  if (!(_DWORD)v3)
  {
    v3 = pthread_rwlock_rdlock((pthread_rwlock_t *)a1);
    if ((_DWORD)v3)
      pthread_mutex_unlock(v2);
    *(_QWORD *)(a1 + 264) = 0;
  }
  return v3;
}

uint64_t cs_longrdunlock(uint64_t a1)
{
  uint64_t result;

  if (*(_QWORD *)(a1 + 264))
    cs_longrdunlock_cold_1();
  result = pthread_rwlock_unlock((pthread_rwlock_t *)a1);
  if (!(_DWORD)result)
    return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 200));
  return result;
}

uint64_t cs_wrlock(uint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t v3;

  v2 = (pthread_mutex_t *)(a1 + 200);
  v3 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 200));
  if (!(_DWORD)v3)
  {
    v3 = pthread_rwlock_wrlock((pthread_rwlock_t *)a1);
    if ((_DWORD)v3)
      pthread_mutex_unlock(v2);
    else
      *(_QWORD *)(a1 + 264) = pthread_self();
  }
  return v3;
}

CFStringRef CKChunkStoreCreate(uint64_t a1, const __CFURL *a2)
{
  CFStringRef v4;
  NSObject *v5;
  uint8_t *v6;
  const __CFAllocator *v7;
  int *v8;
  char *v9;
  uint8_t buf[4];
  CFStringRef v11;
  UInt8 buffer[4];
  CFStringRef v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      return 0;
    v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("ERROR: NULL location parameter"));
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_7);
    v5 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      goto LABEL_19;
    *(_DWORD *)buffer = 138543362;
    v13 = v4;
    v6 = buffer;
    goto LABEL_18;
  }
  bzero(buffer, 0x400uLL);
  if (CFURLGetFileSystemRepresentation(a2, 1u, buffer, 1024))
    return _CSChunkStoreCreate();
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_10);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v8 = __error();
    v9 = strerror(*v8);
    v4 = CFStringCreateWithFormat(v7, 0, CFSTR("CFURLGetFileSystemRepresentation(%s) error: %s\n"), buffer, v9);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_15_0);
    v5 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      goto LABEL_19;
    *(_DWORD *)buf = 138543362;
    v11 = v4;
    v6 = buf;
LABEL_18:
    _os_log_impl(&dword_20A95C000, v5, OS_LOG_TYPE_ERROR, "%{public}@", v6, 0xCu);
LABEL_19:
    if (v4)
      CFRelease(v4);
  }
  return 0;
}

CFStringRef _CSChunkStoreCreate()
{
  uint64_t v0;
  char v1;
  char v2;
  int v3;
  int v4;
  int v5;
  int v6;
  const char *v7;
  const char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  CFStringRef v13;
  NSObject *v14;
  int v15;
  char *v16;
  char *v17;
  char *v18;
  CFStringRef v19;
  NSObject *v20;
  CFStringRef v21;
  NSObject *v22;
  const __CFAllocator *v23;
  int *v24;
  char *v25;
  CFStringRef v26;
  NSObject *v27;
  uint64_t CFInstanceZeroed;
  uint64_t *p_length;
  char *v30;
  const __CFAllocator *v31;
  uint64_t v32;
  int *v33;
  char *v34;
  CFStringRef v36;
  NSObject *v37;
  char *v38;
  const __CFAllocator *v39;
  int *v40;
  char *v41;
  size_t v42;
  int v43;
  size_t v44;
  std::__fs::filesystem::path *i;
  int v46;
  int v47;
  std::error_code *v48;
  CFStringRef v49;
  NSObject *v50;
  int v51;
  CFStringRef v52;
  NSObject *v53;
  CFStringRef v54;
  NSObject *v55;
  int *v56;
  char *v57;
  CFStringRef v58;
  NSObject *v59;
  _QWORD *v60;
  CFStringRef v61;
  NSObject *v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  char *v66;
  NSObject *v67;
  int *v68;
  char *v69;
  NSObject *v70;
  char v71;
  int alloc;
  const __CFAllocator *alloca;
  char *v74;
  stat v75;
  char __s1[1024];
  char __str[1024];
  char v78[1024];
  uint8_t buf[4];
  CFStringRef v80;
  std::__fs::filesystem::path __to;
  char v82;
  std::__fs::filesystem::path v83[43];
  uint64_t v84;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = v0;
  v84 = *MEMORY[0x24BDAC8D0];
  bzero(__str, 0x400uLL);
  bzero(__s1, 0x400uLL);
  v12 = &new_ringing[224];
  memset(&v75, 0, sizeof(v75));
  if (!v8 && v4)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1074);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      return 0;
    v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("read only location and no tmp path makes ChunkStore unhappy!"));
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1078);
    v14 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v83[0].__pn_.__r_.__value_.__l.__data_) = 138543362;
      *(std::string::size_type *)((char *)v83[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
LABEL_43:
      _os_log_impl(&dword_20A95C000, v14, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)v83, 0xCu);
      goto LABEL_44;
    }
    goto LABEL_44;
  }
  alloc = v6;
  v74 = v10;
  if (!gVerbose)
  {
    if (getenv("CK_CHUNKSTORE_VERBOSE"))
      v15 = 2;
    else
      v15 = 1;
    gVerbose = v15;
  }
  v16 = getenv("CS_LOG_PATH");
  CKPointerHash(v16);
  v17 = getenv("CHUNK_STORE_UNIT_TESTS");
  v18 = getenv("CS_LOG_VERBOSE");
  if (getenv("CS_LOG_STDOUT"))
  {
    CKPointerHash(1);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1086);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      v19 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("logging to stdout\n"));
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1091);
      v20 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(v83[0].__pn_.__r_.__value_.__l.__data_) = 138543362;
        *(std::string::size_type *)((char *)v83[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
        _os_log_impl(&dword_20A95C000, v20, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)v83, 0xCu);
      }
      v12 = &new_ringing[224];
      if (v19)
        CFRelease(v19);
    }
  }
  if ((unint64_t)v17 | (unint64_t)v18)
  {
    CKPointerHash(7);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1094);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      v21 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("log debug enabled\n"));
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1099);
      v22 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(v83[0].__pn_.__r_.__value_.__l.__data_) = 138543362;
        *(std::string::size_type *)((char *)v83[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
        _os_log_impl(&dword_20A95C000, v22, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)v83, 0xCu);
      }
      if (v21)
        CFRelease(v21);
    }
  }
  if (!stat(v74, &v75))
  {
    if (snprintf(__str, 0x400uLL, "%s/%s", v74, ".cs") > 0x3FF)
      return 0;
    if ((v4 & 1) == 0 && mkdir(__str, 0x1C0u) && *__error() != 17)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1112);
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        return 0;
      v31 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v32 = *__error();
      v33 = __error();
      v34 = strerror(*v33);
      v13 = CFStringCreateWithFormat(v31, 0, CFSTR("unable to create directory: %s : %d:%s"), __str, v32, v34);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1117);
      v14 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v83[0].__pn_.__r_.__value_.__l.__data_) = 138543362;
        *(std::string::size_type *)((char *)v83[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
        goto LABEL_43;
      }
      goto LABEL_44;
    }
    if (gVerbose == 2)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1120);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG)
        && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        v26 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("path:%s"), __str);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1127);
        v27 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(v83[0].__pn_.__r_.__value_.__l.__data_) = 138543362;
          *(std::string::size_type *)((char *)v83[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
          _os_log_impl(&dword_20A95C000, v27, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)v83, 0xCu);
        }
        if (v26)
          CFRelease(v26);
      }
    }
    CFInstanceZeroed = _CreateCFInstanceZeroed(v11, CFSTR("struct __CSChunkStore"), (uint64_t)"struct __CSChunkStore", (uint64_t)_CSChunkStoreCSChunkStoreFinalize, 0x218uLL);
    if (!CFInstanceZeroed)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1133);
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        return 0;
      v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("unable to create chunk store object for %s"), v74);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1138);
      v14 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v83[0].__pn_.__r_.__value_.__l.__data_) = 138543362;
        *(std::string::size_type *)((char *)v83[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
        goto LABEL_43;
      }
      goto LABEL_44;
    }
    v13 = (CFStringRef)CFInstanceZeroed;
    *(_BYTE *)(CFInstanceZeroed + 17) = v4;
    *(_BYTE *)(CFInstanceZeroed + 16) = v2;
    *(_QWORD *)(CFInstanceZeroed + 112) = strdup(__str);
    LODWORD(v13[4].isa) = v75.st_dev;
    LODWORD(v13[3].info) = alloc;
    LODWORD(v13[17].isa) = 0;
    if (!v8 || !v4)
    {
LABEL_67:
      cs_rwlock_init((uint64_t)&v13[8].data);
      pthread_mutex_init((pthread_mutex_t *)&v13[4].data, 0);
      pthread_cond_init((pthread_cond_t *)&v13[6].data, 0);
      pthread_mutex_init((pthread_mutex_t *)&v13[1], 0);
      v13[4].info = (uint64_t)CFSetCreateMutable(0, 0, MEMORY[0x24BDBD6B8]);
      cs_wrlock((uint64_t)&v13[8].data);
      p_length = &v13->length;
      v30 = v74;
      if (v13->length)
        goto LABEL_68;
      bzero(v78, 0x400uLL);
      if (BYTE1(v13->data))
      {
        if ((CKChunkStoreRelocateDB((uint64_t)v13) & 1) == 0)
        {
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1171);
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
            goto LABEL_183;
          v52 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("CKChunkStoreRelocateDB failed to copy database to temp location!"));
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1175);
          v53 = CK_DEFAULT_LOG_INTERNAL_1;
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
            goto LABEL_162;
          LODWORD(v83[0].__pn_.__r_.__value_.__l.__data_) = 138543362;
          *(std::string::size_type *)((char *)v83[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v52;
          goto LABEL_161;
        }
        if (snprintf(v78, 0x400uLL, "%s/%s/%s", (const char *)v13[3].length, ".cs", "ChunkStoreDatabase") < 0x400)
        {
          v38 = 0;
          v71 = 0;
LABEL_112:
          alloca = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          while (2)
          {
            v43 = CSopenDB(v78, (sqlite3 **)&v13->length, LODWORD(v13[3].info) != 0);
            if (v43 != 5)
            {
              if (!v43)
              {
                v63 = *p_length;
                *p_length = *p_length;
                v12 = new_ringing + 1792;
                v30 = v74;
                if (v63)
                {
LABEL_68:
                  if (!LODWORD(v13[3].info))
                    v13[8].info = (uint64_t)malloc_type_calloc(5uLL, 8uLL, 0x2004093837F09uLL);
                  cs_unlock((uint64_t)&v13[8].data);
                  CKCheckChunkStoreDB((uint64_t)v13);
                  if (LODWORD(v13[3].info) && _CSBeginTransactionSqlRc((uint64_t)v13))
                    goto LABEL_45;
                  return v13;
                }
LABEL_184:
                if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                  dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1158);
                if (os_log_type_enabled((os_log_t)v12[305], OS_LOG_TYPE_ERROR))
                {
                  v60 = v12;
                  v61 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("unable open chunk store database for %s"), v30);
                  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1163);
                  v62 = v60[305];
                  if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(v83[0].__pn_.__r_.__value_.__l.__data_) = 138543362;
                    *(std::string::size_type *)((char *)v83[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v61;
                    _os_log_impl(&dword_20A95C000, v62, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)v83, 0xCu);
                  }
                  if (v61)
                    CFRelease(v61);
                }
                cs_unlock((uint64_t)&v13[8].data);
                goto LABEL_45;
              }
              break;
            }
            if (!BYTE1(v13->data))
            {
              *v38 = 0;
              bzero(v83, 0x400uLL);
              bzero(&__to, 0x400uLL);
              if ((unint64_t)__strlcpy_chk() <= 0x3FF)
              {
                v44 = strlen((const char *)v83);
                if (v44)
                {
                  for (i = (std::__fs::filesystem::path *)(&v82 + v44);
                        v83 <= i;
                        i = (std::__fs::filesystem::path *)((char *)i - 1))
                  {
                    v46 = i->__pn_.__r_.__value_.__s.__data_[0];
                    if (v46 != 47 && v46 != 92)
                      break;
                    i->__pn_.__r_.__value_.__s.__data_[0] = 0;
                  }
                  if (v83[0].__pn_.__r_.__value_.__s.__data_[0])
                  {
                    v47 = 1;
                    while (1)
                    {
                      if (snprintf((char *)&__to, 0x400uLL, "%s_old_%u", (const char *)v83, v47) > 0x3FF)
                        goto LABEL_173;
                      if (access((const char *)&__to, 0))
                        break;
                      if (++v47 == 0x40000)
                      {
                        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1208);
                        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                          goto LABEL_175;
                        v54 = CFStringCreateWithFormat(alloca, 0, CFSTR("can't rename \"%s\", too many old files (%u)\n"), v83, 0x40000);
                        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1212);
                        v55 = CK_DEFAULT_LOG_INTERNAL_1;
                        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 138543362;
                          v80 = v54;
                          _os_log_impl(&dword_20A95C000, v55, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
                        }
                        if (v54)
                        {
LABEL_172:
                          CFRelease(v54);
                          goto LABEL_173;
                        }
                        goto LABEL_173;
                      }
                    }
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1215);
                    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
                    {
                      v49 = CFStringCreateWithFormat(alloca, 0, CFSTR("renaming \"%s\" to \"%s\"\n"), v83, &__to);
                      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1220);
                      v50 = CK_DEFAULT_LOG_INTERNAL_1;
                      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 138543362;
                        v80 = v49;
                        _os_log_impl(&dword_20A95C000, v50, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
                      }
                      if (v49)
                        CFRelease(v49);
                    }
                    rename(v83, &__to, v48);
                    if (!v51)
                    {
                      if (!mkdir(v78, 0x1C0u))
                      {
                        *v38 = v71;
                        continue;
                      }
                      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1200);
                      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                      {
                        v68 = __error();
                        v69 = strerror(*v68);
                        v58 = CFStringCreateWithFormat(alloca, 0, CFSTR("unable to create directory %s : %s"), v78, v69);
                        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1205);
                        v70 = CK_DEFAULT_LOG_INTERNAL_1;
                        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                        {
                          LODWORD(v83[0].__pn_.__r_.__value_.__l.__data_) = 138543362;
                          *(std::string::size_type *)((char *)v83[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v58;
                          _os_log_impl(&dword_20A95C000, v70, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)v83, 0xCu);
                        }
                        if (v58)
                          goto LABEL_181;
                      }
                      break;
                    }
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1223);
                    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                      goto LABEL_175;
                    v64 = *__error();
                    v65 = __error();
                    v66 = strerror(*v65);
                    v54 = CFStringCreateWithFormat(alloca, 0, CFSTR("unable to rename \"%s\": %d (%s)\n"), v83, v64, v66);
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1228);
                    v67 = CK_DEFAULT_LOG_INTERNAL_1;
                    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 138543362;
                      v80 = v54;
                      _os_log_impl(&dword_20A95C000, v67, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
                    }
                    if (v54)
                      goto LABEL_172;
                  }
                }
              }
LABEL_173:
              if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1192);
LABEL_175:
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
              {
                v56 = __error();
                v57 = strerror(*v56);
                v58 = CFStringCreateWithFormat(alloca, 0, CFSTR("unable to rename old chunk store at %s: %s\n"), v78, v57);
                if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                  dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1197);
                v59 = CK_DEFAULT_LOG_INTERNAL_1;
                if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                {
                  LODWORD(v83[0].__pn_.__r_.__value_.__l.__data_) = 138543362;
                  *(std::string::size_type *)((char *)v83[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v58;
                  _os_log_impl(&dword_20A95C000, v59, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)v83, 0xCu);
                }
                if (v58)
LABEL_181:
                  CFRelease(v58);
              }
            }
            break;
          }
          v12 = &new_ringing[224];
          v30 = v74;
LABEL_183:
          *p_length = 0;
          goto LABEL_184;
        }
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1180);
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          goto LABEL_183;
        v52 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("safe_snprintf truncated %s"), v78);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1183);
        v53 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v83[0].__pn_.__r_.__value_.__l.__data_) = 138543362;
          *(std::string::size_type *)((char *)v83[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v52;
          goto LABEL_161;
        }
      }
      else
      {
        v42 = strlen(v13[3].data);
        if (snprintf(v78, 0x400uLL, "%s/%s", v13[3].data, "ChunkStoreDatabase") < 0x400)
        {
          v38 = &v78[v42 + 1];
          v71 = *v38;
          goto LABEL_112;
        }
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1186);
        v12 = &new_ringing[224];
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          goto LABEL_183;
        v52 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("safe_snprintf truncated %s"), v78);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1189);
        v53 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v83[0].__pn_.__r_.__value_.__l.__data_) = 138543362;
          *(std::string::size_type *)((char *)v83[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v52;
LABEL_161:
          _os_log_impl(&dword_20A95C000, v53, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)v83, 0xCu);
        }
      }
LABEL_162:
      if (v52)
        CFRelease(v52);
      goto LABEL_183;
    }
    if (snprintf(__s1, 0x400uLL, "%s/chunk_store_XXXXXX", v8) >= 0x400)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1142);
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        goto LABEL_45;
      v36 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("safe_snprintf truncated %s"), __s1);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1147);
      v37 = CK_DEFAULT_LOG_INTERNAL_1;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        goto LABEL_108;
      LODWORD(v83[0].__pn_.__r_.__value_.__l.__data_) = 138543362;
      *(std::string::size_type *)((char *)v83[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
    }
    else
    {
      if (mkdtemp(__s1))
      {
        v13[3].length = (uint64_t)strdup(__s1);
        goto LABEL_67;
      }
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1150);
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        goto LABEL_45;
      v39 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v40 = __error();
      v41 = strerror(*v40);
      v36 = CFStringCreateWithFormat(v39, 0, CFSTR("mkdtemp failed to create %s : %s"), __s1, v41);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1155);
      v37 = CK_DEFAULT_LOG_INTERNAL_1;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
LABEL_108:
        if (v36)
          CFRelease(v36);
        goto LABEL_45;
      }
      LODWORD(v83[0].__pn_.__r_.__value_.__l.__data_) = 138543362;
      *(std::string::size_type *)((char *)v83[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
    }
    _os_log_impl(&dword_20A95C000, v37, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)v83, 0xCu);
    goto LABEL_108;
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1102);
  if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    return 0;
  v23 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v24 = __error();
  v25 = strerror(*v24);
  v13 = CFStringCreateWithFormat(v23, 0, CFSTR("stat failed for %s: %s"), v74, v25);
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1107);
  v14 = CK_DEFAULT_LOG_INTERNAL_1;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    LODWORD(v83[0].__pn_.__r_.__value_.__l.__data_) = 138543362;
    *(std::string::size_type *)((char *)v83[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
    goto LABEL_43;
  }
LABEL_44:
  if (v13)
  {
LABEL_45:
    CFRelease(v13);
    return 0;
  }
  return v13;
}

void CKChunkStoreRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

CFStringRef CKChunkStoreCreateAtFilesystemPath()
{
  return _CSChunkStoreCreate();
}

CFStringRef CKChunkStoreCreateAtFilesystemPathWithTmpDir()
{
  return _CSChunkStoreCreate();
}

uint64_t CKChunkStoreIsReadOnly(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 17);
}

BOOL CKChunkStoreIsRegistry(uint64_t a1)
{
  return *(_DWORD *)(a1 + 104) != 0;
}

uint64_t CKChunkStoreInvalidate(uint64_t a1)
{
  uint64_t result;

  result = CKLockChunkStore(a1);
  if (!(_DWORD)result)
  {
    _CSChunkStoreClose(a1);
    return cs_unlock(a1 + 272);
  }
  return result;
}

uint64_t CKLockChunkStore(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t result;
  unsigned int v5;

  v2 = (unsigned int *)(a1 + 256);
  do
    v3 = __ldxr(v2);
  while (__stxr(v3 + 1, v2));
  result = cs_wrlock(a1 + 272);
  do
    v5 = __ldxr(v2);
  while (__stxr(v5 - 1, v2));
  if (!(_DWORD)result)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      return 0;
    }
    else
    {
      cs_unlock(a1 + 272);
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

void _CSChunkStoreClose(uint64_t a1)
{
  uint64_t i;
  const __CFDictionary *v3;

  if (*(_QWORD *)(a1 + 264))
  {
    for (i = 0; i != 40; i += 8)
      _CSCloseStorageFile(a1, *(_DWORD **)(*(_QWORD *)(a1 + 264) + i), 0);
  }
  if (*(_QWORD *)(a1 + 24))
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
    v3 = *(const __CFDictionary **)(a1 + 96);
    if (v3)
    {
      CFDictionaryApplyFunction(v3, (CFDictionaryApplierFunction)_CSFinalizeDBStmts, (void *)a1);
      CFRelease(*(CFTypeRef *)(a1 + 96));
      *(_QWORD *)(a1 + 96) = 0;
    }
    if (*(_DWORD *)(a1 + 104))
      _CSEndTransactionSqlRc(a1);
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 32));
    if (!*(_BYTE *)(a1 + 16))
      CScloseDB(*(sqlite3 **)(a1 + 24));
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t CKUnlockChunkStore(uint64_t a1)
{
  return cs_unlock(a1 + 272);
}

uint64_t CKCheckChunkStoreDB(uint64_t result)
{
  uint64_t *v1;

  if (!*(_DWORD *)(result + 104))
  {
    v1 = (uint64_t *)result;
    result = CKLockChunkStore(result);
    if (!(_DWORD)result)
    {
      _CSCheckChunkStoreDB(v1, 0);
      return cs_unlock((uint64_t)(v1 + 34));
    }
  }
  return result;
}

uint64_t *_CSCheckChunkStoreDB(uint64_t *result, sqlite3_int64 a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  const __CFAllocator *v7;
  const char *v8;
  CFStringRef v9;
  NSObject *v10;
  sqlite3_stmt **v11;
  uint64_t v12;
  sqlite3_int64 v13;
  sqlite3_int64 v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  uint32_t v18;
  uint64_t v19;
  dev_t st_dev;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  char *v25;
  uint64_t v26;
  sqlite3_int64 v27;
  sqlite3_int64 *v28;
  uint64_t v29;
  const char *v30;
  CFStringRef v31;
  NSObject *v32;
  uint64_t v33;
  const char *v34;
  NSObject *v35;
  const __CFAllocator *alloc;
  stat v37;
  uint8_t v38[4];
  _BYTE v39[28];
  uint8_t buf[4];
  CFStringRef v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)result + 17))
    return result;
  v3 = (uint64_t)result;
  result = _CSRemovePendingBatchesForInode((uint64_t)result, a2);
  if (*(_BYTE *)(v3 + 17))
    return result;
  if (a2)
  {
    result = (uint64_t *)_CSPrepareStatement(v3, CFSTR("SELECT pft_rowid, pft_token FROM CSStoragePendingFileChunklistTable where pft_inode = ?"), "SELECT pft_rowid, pft_token FROM CSStoragePendingFileChunklistTable where pft_inode = ?");
    if (!result)
      return result;
    v4 = result;
    v5 = sqlite3_bind_int64((sqlite3_stmt *)result[2], 1, a2);
    if ((_DWORD)v5)
    {
      v6 = v5;
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1252);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v8 = sqlite3_errmsg(*(sqlite3 **)(v3 + 24));
        v9 = CFStringCreateWithFormat(v7, 0, CFSTR("sqlite3_bind_int64 for inode: %lld returned: %d (%s)\n"), a2, v6, v8);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1256);
        v10 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          v41 = v9;
          _os_log_impl(&dword_20A95C000, v10, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        v11 = 0;
        goto LABEL_14;
      }
      v11 = 0;
      goto LABEL_64;
    }
  }
  else
  {
    result = (uint64_t *)_CSPrepareStatement(v3, CFSTR("SELECT pft_rowid, pft_token FROM CSStoragePendingFileChunklistTable"), "SELECT pft_rowid, pft_token FROM CSStoragePendingFileChunklistTable");
    v4 = result;
    if (!result)
      return result;
  }
  v11 = _CSPrepareStatement(v3, CFSTR("SELECT clt_count, clt_chunkRowIDs FROM CSStorageChunkListTable WHERE clt_rowid = ?"), "SELECT clt_count, clt_chunkRowIDs FROM CSStorageChunkListTable WHERE clt_rowid = ?");
  if (!v11)
    goto LABEL_64;
  alloc = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  while (1)
  {
    v12 = CS_sqlite3_step(v4);
    if ((_DWORD)v12 != 100)
      break;
    v13 = sqlite3_column_int64((sqlite3_stmt *)v4[2], 0);
    v14 = sqlite3_column_int64((sqlite3_stmt *)v4[2], 1);
    if (!a2)
      goto LABEL_39;
    memset(&v37, 0, sizeof(v37));
    bzero(buf, 0x400uLL);
    if (CKChunkStoreGetLocation(v3, buf, 0x400uLL))
    {
      if (stat((const char *)buf, &v37))
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1273);
        v15 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v38 = 136315138;
          *(_QWORD *)v39 = buf;
          v16 = v15;
          v17 = "stat failed for \"%s\"";
          v18 = 12;
LABEL_38:
          _os_log_impl(&dword_20A95C000, v16, OS_LOG_TYPE_ERROR, v17, v38, v18);
        }
      }
      else
      {
        st_dev = v37.st_dev;
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1287);
        v21 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v38 = 67109632;
          *(_DWORD *)v39 = st_dev;
          *(_WORD *)&v39[4] = 2048;
          *(_QWORD *)&v39[6] = a2;
          *(_WORD *)&v39[14] = 2048;
          *(_QWORD *)&v39[16] = 0x8000;
          _os_log_impl(&dword_20A95C000, v21, OS_LOG_TYPE_ERROR, "fsopen(%d,%llu,0x%0llx): unimplemented; returning -1\n",
            v38,
            0x1Cu);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1279);
        }
        v22 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          v23 = v37.st_dev;
          v24 = __error();
          v25 = strerror(*v24);
          *(_DWORD *)v38 = 134218498;
          *(_QWORD *)v39 = v23;
          *(_WORD *)&v39[8] = 2048;
          *(_QWORD *)&v39[10] = a2;
          *(_WORD *)&v39[18] = 2080;
          *(_QWORD *)&v39[20] = v25;
          v16 = v22;
          v17 = "open (%lld,%lld) failed: %s";
          v18 = 32;
          goto LABEL_38;
        }
      }
    }
    else
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1276);
      v19 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v38 = 0;
        v16 = v19;
        v17 = "CKChunkStoreGetLocation failed\n";
        v18 = 2;
        goto LABEL_38;
      }
    }
LABEL_39:
    sqlite3_bind_int64(v11[2], 1, v14);
    v26 = CS_sqlite3_step((uint64_t *)v11);
    if ((_DWORD)v26 == 100)
    {
      v27 = sqlite3_column_int64(v11[2], 0);
      v28 = (sqlite3_int64 *)sqlite3_column_blob(v11[2], 1);
      if (_CSBeginTransactionSqlRc(v3))
        goto LABEL_64;
      _CSReleaseOrphanedChunks(v3, v28, v27);
      if (_CSEndTransactionSqlRc(v3))
        _CSRollbackTransactionSqlRc(v3);
    }
    else
    {
      v29 = v26;
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1259);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        v30 = sqlite3_errmsg(*(sqlite3 **)(v3 + 24));
        v31 = CFStringCreateWithFormat(alloc, 0, CFSTR("sqlite3_step returned: %d (%s), listToken: %llu\n"), v29, v30, v14);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1264);
        v32 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          v41 = v31;
          _os_log_impl(&dword_20A95C000, v32, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v31)
          CFRelease(v31);
      }
    }
    if (sqlite3_reset(v11[2]) || sqlite3_clear_bindings(v11[2]))
      goto LABEL_64;
    CSsql_corruption_checking_do_0(v3, *(sqlite3 **)(v3 + 24), "DELETE FROM CSStoragePendingFileChunklistTable WHERE pft_rowid = %lld", v13);
  }
  v33 = v12;
  if ((_DWORD)v12 != 101)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1268);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v34 = sqlite3_errmsg(*(sqlite3 **)(v3 + 24));
      v9 = CFStringCreateWithFormat(alloc, 0, CFSTR("sqlite3_step returned: %d (%s)\n"), v33, v34);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1271);
      v35 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v41 = v9;
        _os_log_impl(&dword_20A95C000, v35, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
LABEL_14:
      if (v9)
        CFRelease(v9);
    }
  }
LABEL_64:
  _CSFinishPreparedStatement((uint64_t *)v11);
  return _CSFinishPreparedStatement(v4);
}

uint64_t CKCleanChunkStoreDBForInode(uint64_t *a1, sqlite3_int64 a2)
{
  uint64_t result;

  result = CKLockChunkStore((uint64_t)a1);
  if (!(_DWORD)result)
  {
    _CSCheckChunkStoreDB(a1, a2);
    return cs_unlock((uint64_t)(a1 + 34));
  }
  return result;
}

BOOL CKChunkStoreGetLocation(uint64_t a1, void *a2, size_t a3)
{
  const char *v5;
  size_t v6;
  CFStringRef v7;
  NSObject *v8;
  uint8_t buf[4];
  CFStringRef v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v5 = *(const char **)(a1 + 112);
  v6 = strlen(v5) + 1;
  if (v6 > a3)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_17);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("bufLen is too small: %lu"), a3);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_21);
      v8 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v11 = v7;
        _os_log_impl(&dword_20A95C000, v8, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v7)
        CFRelease(v7);
    }
  }
  else
  {
    memcpy(a2, v5, v6);
  }
  return v6 <= a3;
}

BOOL copyfile_callback(int a1, int a2, int a3, char *__s1)
{
  return strstr(__s1, "ChunkStorage") || strstr(__s1, "ChunkStoreNoCopy") != 0;
}

uint64_t CKChunkStoreRelocateDB(uint64_t a1)
{
  _copyfile_state *v2;
  _copyfile_state *v3;
  uint64_t v4;
  NSObject *v5;
  CFStringRef v6;
  NSObject *v7;
  const __CFAllocator *v8;
  int *v9;
  char *v10;
  uint8_t buf[4];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = copyfile_state_alloc();
  if (v2)
  {
    v3 = v2;
    if (copyfile_state_set(v2, 6u, copyfile_callback))
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_32);
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
        goto LABEL_31;
      v4 = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("copyfile_state_set failed"));
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_37_0);
      v5 = CK_DEFAULT_LOG_INTERNAL_1;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
LABEL_29:
        if (!v4)
        {
LABEL_32:
          copyfile_state_free(v3);
          return v4;
        }
        CFRelease((CFTypeRef)v4);
LABEL_31:
        v4 = 0;
        goto LABEL_32;
      }
      *(_DWORD *)buf = 138543362;
      v13 = v4;
    }
    else
    {
      if (!copyfile(*(const char **)(a1 + 112), *(const char **)(a1 + 120), v3, 0x800Fu))
      {
        v4 = 1;
        goto LABEL_32;
      }
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_40);
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
        goto LABEL_31;
      v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v9 = __error();
      v10 = strerror(*v9);
      v4 = (uint64_t)CFStringCreateWithFormat(v8, 0, CFSTR("copyfile failed: %s"), v10);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_45);
      v5 = CK_DEFAULT_LOG_INTERNAL_1;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
        goto LABEL_29;
      *(_DWORD *)buf = 138543362;
      v13 = v4;
    }
    _os_log_impl(&dword_20A95C000, v5, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    goto LABEL_29;
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_25_0);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
  {
    v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("copyfile_state_alloc failed"));
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_29);
    v7 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      v13 = (uint64_t)v6;
      _os_log_impl(&dword_20A95C000, v7, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v6)
      CFRelease(v6);
  }
  return 0;
}

BOOL CSRegisterOperation(uint64_t a1, const void *a2)
{
  return registerOperation((pthread_mutex_t *)(a1 + 144), *(const __CFSet **)(a1 + 136), a2);
}

uint64_t CSUnregisterOperation(uint64_t a1, const void *a2)
{
  return unregisterOperation((pthread_mutex_t *)(a1 + 144), (pthread_cond_t *)(a1 + 208), *(__CFSet **)(a1 + 136), a2);
}

uint64_t CSWaitForOperation(uint64_t a1, const void *a2)
{
  return waitForOperation((pthread_mutex_t *)(a1 + 144), (pthread_cond_t *)(a1 + 208), *(const __CFSet **)(a1 + 136), a2);
}

uint64_t CKLockChunkStoreNoFlag(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = a1 + 272;
  result = cs_wrlock(a1 + 272);
  if (!(_DWORD)result)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      return 0;
    }
    else
    {
      cs_unlock(v2);
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t CKLongReadLockChunkStore(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t result;
  unsigned int v5;

  v2 = (unsigned int *)(a1 + 256);
  do
    v3 = __ldxr(v2);
  while (__stxr(v3 + 1, v2));
  result = cs_longrdlock(a1 + 272);
  do
    v5 = __ldxr(v2);
  while (__stxr(v5 - 1, v2));
  if (!(_DWORD)result)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      return 0;
    }
    else
    {
      cs_unlock(a1 + 272);
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t CKLongReadUnlockChunkStore(uint64_t a1)
{
  return cs_longrdunlock(a1 + 272);
}

uint64_t CKReadLockChunkStore(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t result;
  unsigned int v5;

  v2 = (unsigned int *)(a1 + 256);
  do
    v3 = __ldxr(v2);
  while (__stxr(v3 + 1, v2));
  result = pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 272));
  do
    v5 = __ldxr(v2);
  while (__stxr(v5 - 1, v2));
  if (!(_DWORD)result)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      return 0;
    }
    else
    {
      cs_unlock(a1 + 272);
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t CSChunkStoreGetDB(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t CKChunkStoreDefaultProfilerType()
{
  return 0;
}

uint64_t CKChunkStoreSetTestFlags(uint64_t a1, unsigned int a2)
{
  *(_DWORD *)(a1 + 544) = a2;
  CSSetSQLiteCorruptionTestingEnabled(a2 & 1);
  CSSetContinueOnCorruptDB((a2 >> 1) & 1);
  return CSSetExitOnCorruptDB((a2 >> 3) & 1);
}

uint64_t CKChunkStoreResetTestFlags(uint64_t a1)
{
  *(_DWORD *)(a1 + 544) = 0;
  CSSetSQLiteCorruptionTestingEnabled(0);
  CSSetContinueOnCorruptDB(0);
  return CSSetExitOnCorruptDB(0);
}

uint64_t CKChunkStoreTestFlags(uint64_t a1)
{
  return *(unsigned int *)(a1 + 544);
}

uint64_t _CSBeginTransactionSqlRc(uint64_t a1)
{
  unsigned int *v2;
  CFStringRef v4;
  NSObject *v5;
  uint64_t v6;
  CFStringRef v7;
  NSObject *v8;
  void *v10;
  uint8_t buf[4];
  CFStringRef v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int *)(a1 + 260);
  while (!__ldxr(v2))
  {
    if (!__stxr(1u, v2))
      goto LABEL_14;
  }
  __clrex();
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_47_1);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("NESTED TRANSACTION!\n"));
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_51);
    v5 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v12 = v4;
      _os_log_impl(&dword_20A95C000, v5, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v4)
      CFRelease(v4);
  }
LABEL_14:
  v10 = 0;
  v6 = CS_corruption_checking_sqlite3_exec_0(a1, *(sqlite3 **)(a1 + 24), "BEGIN TRANSACTION", (char **)&v10);
  if ((_DWORD)v6)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_55_0);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Unable to begin transaction: %d (%s)\n"), v6, v10);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_60);
      v8 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v12 = v7;
        _os_log_impl(&dword_20A95C000, v8, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v7)
        CFRelease(v7);
    }
    sqlite3_free(v10);
  }
  return v6;
}

uint64_t CS_corruption_checking_sqlite3_exec_0(uint64_t a1, sqlite3 *a2, const char *a3, char **a4)
{
  uint64_t v8;
  uint64_t v9;
  CFStringRef v10;
  NSObject *v11;
  uint8_t buf[4];
  CFStringRef v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (CSSQLiteCorruptionTestingEnabled())
    v8 = CS_corruption_causing_sqlite3_exec(a2, a3, 0, 0, a4);
  else
    v8 = sqlite3_exec(a2, a3, 0, 0, a4);
  v9 = v8;
  _CSHandleDatabaseIOError_0(v8);
  if ((_DWORD)v9 == 26 || (_DWORD)v9 == 11)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1851);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("chunk store database corruption: detected error %d in sqlite3_exec"), v9);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1855);
      v11 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v14 = v10;
        _os_log_impl(&dword_20A95C000, v11, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v10)
        CFRelease(v10);
    }
    _CSHandleCorruptDatabase(a1);
  }
  return v9;
}

uint64_t _CSBeginTransaction(uint64_t a1)
{
  if (_CSBeginTransactionSqlRc(a1))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t _CSEndTransactionSqlRc(uint64_t a1)
{
  uint64_t v2;
  CFStringRef v3;
  NSObject *v4;
  unsigned int *v5;
  unsigned int v6;
  CFStringRef v7;
  NSObject *v8;
  void *v10;
  uint8_t buf[4];
  CFStringRef v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v2 = CS_corruption_checking_sqlite3_exec_0(a1, *(sqlite3 **)(a1 + 24), "END TRANSACTION", (char **)&v10);
  if ((_DWORD)v2)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_63_0);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Unable to commit transaction: %d (%s)\n"), v2, v10);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_67_0);
      v4 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v12 = v3;
        _os_log_impl(&dword_20A95C000, v4, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v3)
        CFRelease(v3);
    }
    sqlite3_free(v10);
  }
  v5 = (unsigned int *)(a1 + 260);
  while (1)
  {
    v6 = __ldxr(v5);
    if (v6 != 1)
      break;
    if (!__stxr(0, v5))
      return v2;
  }
  __clrex();
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_70_0);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("TRANSACTION COUNT ALREADY ZERO!\n"));
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_75_0);
    v8 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v12 = v7;
      _os_log_impl(&dword_20A95C000, v8, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v7)
      CFRelease(v7);
  }
  return v2;
}

uint64_t _CSEndTransaction(uint64_t a1)
{
  if (_CSEndTransactionSqlRc(a1))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t _CSRollbackTransactionSqlRc(uint64_t a1)
{
  uint64_t v1;
  CFStringRef v2;
  NSObject *v3;
  void *v5;
  uint8_t buf[4];
  CFStringRef v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  v1 = CS_corruption_checking_sqlite3_exec_0(a1, *(sqlite3 **)(a1 + 24), "ROLLBACK TRANSACTION", (char **)&v5);
  if ((_DWORD)v1)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_78_0);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Unable to rollback transaction: %d (%s)\n"), v1, v5);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_82);
      v3 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v7 = v2;
        _os_log_impl(&dword_20A95C000, v3, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v2)
        CFRelease(v2);
    }
    sqlite3_free(v5);
  }
  return v1;
}

uint64_t _CSRollbackTransaction(uint64_t a1)
{
  if (_CSRollbackTransactionSqlRc(a1))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t _CSCommitDatabaseTransactions(uint64_t result, char a2)
{
  uint64_t v2;

  if (*(_DWORD *)(result + 104))
  {
    v2 = result;
    if ((a2 & 1) != 0)
    {
      _CSEndTransactionSqlRc(result);
      return _CSBeginTransactionSqlRc(v2);
    }
    else
    {
      result = CKLockChunkStore(result);
      if (!(_DWORD)result)
      {
        _CSEndTransactionSqlRc(v2);
        _CSBeginTransactionSqlRc(v2);
        return cs_unlock(v2 + 272);
      }
    }
  }
  return result;
}

uint64_t CKCommitDatabaseTransactions(uint64_t a1)
{
  return _CSCommitDatabaseTransactions(a1, 0);
}

uint64_t __sqlite3_step(uint64_t a1, sqlite3_stmt *a2, const char *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  size_t v12;
  CFStringRef v13;
  NSObject *v14;
  uint64_t v15;
  const __CFAllocator *v16;
  uint64_t v17;
  int *v18;
  char *v19;
  CFStringRef v20;
  NSObject *v21;
  uint8_t buf[4];
  CFStringRef v24;
  char __str[16];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v7 = a1 + 272;
  v8 = pthread_rwlock_tryrdlock((pthread_rwlock_t *)(a1 + 272));
  if ((_DWORD)v8 == 16)
    return sqlite3_step(a2);
  v9 = v8;
  if ((_DWORD)v8)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_93);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v16 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v17 = *__error();
      v18 = __error();
      v19 = strerror(*v18);
      v20 = CFStringCreateWithFormat(v16, 0, CFSTR("pthread_mutex_trylock error: %d:%s res: %d in function %s : %d"), v17, v19, v9, a3, a4);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_98);
      v21 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__str = 138543362;
        *(_QWORD *)&__str[4] = v20;
        _os_log_impl(&dword_20A95C000, v21, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)__str, 0xCu);
      }
      if (v20)
        CFRelease(v20);
    }
    return sqlite3_step(a2);
  }
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  *(_OWORD *)__str = 0u;
  v26 = 0u;
  snprintf(__str, 0x200uLL, "*** WARNING: _sqlite3_step called without chunkstore_lock in function %s : %d", a3, a4);
  v10 = open("/tmp/cs_log.log", 522, 484);
  if (v10 != -1)
  {
    v11 = v10;
    v12 = strlen(__str);
    write(v11, __str, v12);
    close(v11);
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_86);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("*** WARNING: _sqlite3_step called without chunkstore_lock in function %s : %d"), a3, a4);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_90);
    v14 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v24 = v13;
      _os_log_impl(&dword_20A95C000, v14, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v13)
      CFRelease(v13);
  }
  v15 = sqlite3_step(a2);
  cs_unlock(v7);
  return v15;
}

os_log_t ____sqlite3_step_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t ____sqlite3_step_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t ____sqlite3_step_block_invoke_91()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t ____sqlite3_step_block_invoke_2_96()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

uint64_t __sqlite3_reset(uint64_t a1, sqlite3_stmt *a2, const char *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  size_t v12;
  CFStringRef v13;
  NSObject *v14;
  uint64_t v15;
  const __CFAllocator *v16;
  uint64_t v17;
  int *v18;
  char *v19;
  CFStringRef v20;
  NSObject *v21;
  uint8_t buf[4];
  CFStringRef v24;
  char __str[16];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v7 = a1 + 272;
  v8 = pthread_rwlock_tryrdlock((pthread_rwlock_t *)(a1 + 272));
  if ((_DWORD)v8 == 16)
    return sqlite3_reset(a2);
  v9 = v8;
  if ((_DWORD)v8)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_108_0);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v16 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v17 = *__error();
      v18 = __error();
      v19 = strerror(*v18);
      v20 = CFStringCreateWithFormat(v16, 0, CFSTR("pthread_mutex_trylock error: %d:%s res: %d in function %s : %d"), v17, v19, v9, a3, a4);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_111);
      v21 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__str = 138543362;
        *(_QWORD *)&__str[4] = v20;
        _os_log_impl(&dword_20A95C000, v21, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)__str, 0xCu);
      }
      if (v20)
        CFRelease(v20);
    }
    return sqlite3_reset(a2);
  }
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  *(_OWORD *)__str = 0u;
  v26 = 0u;
  snprintf(__str, 0x200uLL, "*** WARNING: _sqlite3_reset called without chunkstore_lock in function %s : %d", a3, a4);
  v10 = open("/tmp/cs_log.log", 522, 484);
  if (v10 != -1)
  {
    v11 = v10;
    v12 = strlen(__str);
    write(v11, __str, v12);
    close(v11);
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_101);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("*** WARNING: _sqlite3_reset called without chunkstore_lock in function %s : %d"), a3, a4);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_105_0);
    v14 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v24 = v13;
      _os_log_impl(&dword_20A95C000, v14, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v13)
      CFRelease(v13);
  }
  v15 = sqlite3_reset(a2);
  cs_unlock(v7);
  return v15;
}

os_log_t ____sqlite3_reset_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t ____sqlite3_reset_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t ____sqlite3_reset_block_invoke_106()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t ____sqlite3_reset_block_invoke_2_109()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

uint64_t __sqlite3_clear_bindings(uint64_t a1, sqlite3_stmt *a2, const char *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  size_t v12;
  CFStringRef v13;
  NSObject *v14;
  uint64_t v15;
  const __CFAllocator *v16;
  uint64_t v17;
  int *v18;
  char *v19;
  CFStringRef v20;
  NSObject *v21;
  uint8_t buf[4];
  CFStringRef v24;
  char __str[16];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v7 = a1 + 272;
  v8 = pthread_rwlock_tryrdlock((pthread_rwlock_t *)(a1 + 272));
  if ((_DWORD)v8 == 16)
    return sqlite3_clear_bindings(a2);
  v9 = v8;
  if ((_DWORD)v8)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_121);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v16 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v17 = *__error();
      v18 = __error();
      v19 = strerror(*v18);
      v20 = CFStringCreateWithFormat(v16, 0, CFSTR("pthread_mutex_trylock error: %d:%s res: %d in function %s : %d"), v17, v19, v9, a3, a4);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_124);
      v21 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__str = 138543362;
        *(_QWORD *)&__str[4] = v20;
        _os_log_impl(&dword_20A95C000, v21, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)__str, 0xCu);
      }
      if (v20)
        CFRelease(v20);
    }
    return sqlite3_clear_bindings(a2);
  }
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  *(_OWORD *)__str = 0u;
  v26 = 0u;
  snprintf(__str, 0x200uLL, "*** WARNING: _sqlite3_clear_bindings called without chunkstore_lock in function %s : %d", a3, a4);
  v10 = open("/tmp/cs_log.log", 522, 484);
  if (v10 != -1)
  {
    v11 = v10;
    v12 = strlen(__str);
    write(v11, __str, v12);
    close(v11);
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_114);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("*** WARNING: _sqlite3_clear_bindings called without chunkstore_lock in function %s : %d"), a3, a4);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_118);
    v14 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v24 = v13;
      _os_log_impl(&dword_20A95C000, v14, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v13)
      CFRelease(v13);
  }
  v15 = sqlite3_clear_bindings(a2);
  cs_unlock(v7);
  return v15;
}

os_log_t ____sqlite3_clear_bindings_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t ____sqlite3_clear_bindings_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t ____sqlite3_clear_bindings_block_invoke_119()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t ____sqlite3_clear_bindings_block_invoke_2_122()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

uint64_t __sqlite3_finalize(uint64_t a1, sqlite3_stmt *a2, const char *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  size_t v12;
  CFStringRef v13;
  NSObject *v14;
  uint64_t v15;
  const __CFAllocator *v16;
  uint64_t v17;
  int *v18;
  char *v19;
  CFStringRef v20;
  NSObject *v21;
  uint8_t buf[4];
  CFStringRef v24;
  char __str[16];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v7 = a1 + 272;
  v8 = pthread_rwlock_tryrdlock((pthread_rwlock_t *)(a1 + 272));
  if ((_DWORD)v8 == 16)
    return sqlite3_finalize(a2);
  v9 = v8;
  if ((_DWORD)v8)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_134);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v16 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v17 = *__error();
      v18 = __error();
      v19 = strerror(*v18);
      v20 = CFStringCreateWithFormat(v16, 0, CFSTR("pthread_mutex_trylock error: %d:%s res: %d in function %s : %d"), v17, v19, v9, a3, a4);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_137);
      v21 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__str = 138543362;
        *(_QWORD *)&__str[4] = v20;
        _os_log_impl(&dword_20A95C000, v21, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)__str, 0xCu);
      }
      if (v20)
        CFRelease(v20);
    }
    return sqlite3_finalize(a2);
  }
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  *(_OWORD *)__str = 0u;
  v26 = 0u;
  snprintf(__str, 0x200uLL, "*** WARNING: _sqlite3_finalize called without chunkstore_lock in function %s : %d", a3, a4);
  v10 = open("/tmp/cs_log.log", 522, 484);
  if (v10 != -1)
  {
    v11 = v10;
    v12 = strlen(__str);
    write(v11, __str, v12);
    close(v11);
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_127);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("*** WARNING: _sqlite3_finalize called without chunkstore_lock in function %s : %d"), a3, a4);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_131);
    v14 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v24 = v13;
      _os_log_impl(&dword_20A95C000, v14, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v13)
      CFRelease(v13);
  }
  v15 = sqlite3_finalize(a2);
  cs_unlock(v7);
  return v15;
}

os_log_t ____sqlite3_finalize_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t ____sqlite3_finalize_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t ____sqlite3_finalize_block_invoke_132()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t ____sqlite3_finalize_block_invoke_2_135()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

uint64_t CS_sqlite3_step(uint64_t *a1)
{
  uint64_t v1;
  sqlite3_stmt *v2;
  uint64_t v3;
  uint64_t v4;
  CFStringRef v6;
  NSObject *v7;
  uint8_t buf[4];
  CFStringRef v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v2 = (sqlite3_stmt *)a1[2];
  if (CSSQLiteCorruptionTestingEnabled())
    v3 = CS_corruption_causing_sqlite3_step(v2);
  else
    v3 = sqlite3_step(v2);
  v4 = v3;
  _CSHandleDatabaseIOError_0(v3);
  if ((_DWORD)v4 == 26 || (_DWORD)v4 == 11)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1835);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("chunk store database corruption: detected error %d in sqlite3_step"), v4);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1839);
      v7 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v10 = v6;
        _os_log_impl(&dword_20A95C000, v7, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v6)
        CFRelease(v6);
    }
    _CSHandleCorruptDatabase(v1);
  }
  return v4;
}

uint64_t CS_sqlite3_reset(uint64_t a1)
{
  return sqlite3_reset(*(sqlite3_stmt **)(a1 + 16));
}

uint64_t CS_sqlite3_clear_bindings(uint64_t a1)
{
  return sqlite3_clear_bindings(*(sqlite3_stmt **)(a1 + 16));
}

uint64_t CS_sqlite3_finalize(uint64_t a1)
{
  return sqlite3_finalize(*(sqlite3_stmt **)(a1 + 16));
}

const void *CS_sqlite3_column_blob(uint64_t a1, int a2)
{
  return sqlite3_column_blob(*(sqlite3_stmt **)(a1 + 16), a2);
}

uint64_t CS_sqlite3_column_bytes(uint64_t a1, int a2)
{
  return sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 16), a2);
}

uint64_t CS_sqlite3_column_bytes16(uint64_t a1, int a2)
{
  return sqlite3_column_bytes16(*(sqlite3_stmt **)(a1 + 16), a2);
}

double CS_sqlite3_column_double(uint64_t a1, int a2)
{
  return sqlite3_column_double(*(sqlite3_stmt **)(a1 + 16), a2);
}

uint64_t CS_sqlite3_column_int(uint64_t a1, int a2)
{
  return sqlite3_column_int(*(sqlite3_stmt **)(a1 + 16), a2);
}

sqlite3_int64 CS_sqlite3_column_int64(uint64_t a1, int a2)
{
  return sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 16), a2);
}

const unsigned __int8 *CS_sqlite3_column_text(uint64_t a1, int a2)
{
  return sqlite3_column_text(*(sqlite3_stmt **)(a1 + 16), a2);
}

const void *CS_sqlite3_column_text16(uint64_t a1, int a2)
{
  return sqlite3_column_text16(*(sqlite3_stmt **)(a1 + 16), a2);
}

uint64_t CS_sqlite3_column_type(uint64_t a1, int a2)
{
  return sqlite3_column_type(*(sqlite3_stmt **)(a1 + 16), a2);
}

sqlite3_value *CS_sqlite3_column_value(uint64_t a1, int a2)
{
  return sqlite3_column_value(*(sqlite3_stmt **)(a1 + 16), a2);
}

uint64_t CS_sqlite3_bind_blob(uint64_t a1, int a2, const void *a3, int a4, void (__cdecl *a5)(void *))
{
  return sqlite3_bind_blob(*(sqlite3_stmt **)(a1 + 16), a2, a3, a4, a5);
}

uint64_t CS_sqlite3_bind_double(uint64_t a1, int a2, double a3)
{
  return sqlite3_bind_double(*(sqlite3_stmt **)(a1 + 16), a2, a3);
}

uint64_t CS_sqlite3_bind_int(uint64_t a1, int a2, int a3)
{
  return sqlite3_bind_int(*(sqlite3_stmt **)(a1 + 16), a2, a3);
}

uint64_t CS_sqlite3_bind_int64(uint64_t a1, int a2, sqlite3_int64 a3)
{
  return sqlite3_bind_int64(*(sqlite3_stmt **)(a1 + 16), a2, a3);
}

uint64_t CS_sqlite3_bind_null(uint64_t a1, int a2)
{
  return sqlite3_bind_null(*(sqlite3_stmt **)(a1 + 16), a2);
}

uint64_t CS_sqlite3_bind_text(uint64_t a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return sqlite3_bind_text(*(sqlite3_stmt **)(a1 + 16), a2, a3, a4, a5);
}

uint64_t CS_sqlite3_bind_text16(uint64_t a1, int a2, const void *a3, int a4, void (__cdecl *a5)(void *))
{
  return sqlite3_bind_text16(*(sqlite3_stmt **)(a1 + 16), a2, a3, a4, a5);
}

uint64_t CS_sqlite3_bind_value(uint64_t a1, int a2, const sqlite3_value *a3)
{
  return sqlite3_bind_value(*(sqlite3_stmt **)(a1 + 16), a2, a3);
}

uint64_t CS_sqlite3_bind_zeroblob(uint64_t a1, int a2, int a3)
{
  return sqlite3_bind_zeroblob(*(sqlite3_stmt **)(a1 + 16), a2, a3);
}

sqlite3_stmt **_CSPrepareStatement(uint64_t a1, const void *a2, const char *a3)
{
  pthread_mutex_t *v6;
  const __CFDictionary *v7;
  sqlite3_stmt **Value;
  sqlite3_stmt **v9;
  sqlite3 *v10;
  sqlite3_stmt **v11;
  uint64_t v12;
  uint64_t v13;
  CFStringRef v14;
  NSObject *v15;
  const __CFAllocator *v16;
  const char *v17;
  CFStringRef v18;
  NSObject *v19;
  uint8_t buf[4];
  CFStringRef v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 24))
    _CSPrepareStatement_cold_1();
  v6 = (pthread_mutex_t *)(a1 + 32);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
  v7 = *(const __CFDictionary **)(a1 + 96);
  if (v7)
  {
    Value = (sqlite3_stmt **)CFDictionaryGetValue(v7, a2);
    if (Value)
    {
      v9 = Value;
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 96), a2);
      sqlite3_reset(v9[2]);
      sqlite3_clear_bindings(v9[2]);
      goto LABEL_32;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 96) = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], 0);
  }
  v9 = (sqlite3_stmt **)malloc_type_malloc(0x18uLL, 0x60040AA6EF139uLL);
  *v9 = (sqlite3_stmt *)a1;
  v9[1] = (sqlite3_stmt *)a2;
  v10 = *(sqlite3 **)(a1 + 24);
  v11 = v9 + 2;
  if (CSSQLiteCorruptionTestingEnabled())
    v12 = CS_corruption_causing_sqlite3_prepare_v2(v10, a3, -1, v11, 0);
  else
    v12 = sqlite3_prepare_v2(v10, a3, -1, v11, 0);
  v13 = v12;
  _CSHandleDatabaseIOError_0(v12);
  if ((_DWORD)v13)
  {
    if ((_DWORD)v13 == 26 || (_DWORD)v13 == 11)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1857);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        v14 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("chunk store database corruption: detected error %d in sqlite3_prepare_v2"), v13);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1861);
        v15 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          v22 = v14;
          _os_log_impl(&dword_20A95C000, v15, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v14)
          CFRelease(v14);
      }
      _CSHandleCorruptDatabase(a1);
    }
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_140);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v16 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v17 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
      v18 = CFStringCreateWithFormat(v16, 0, CFSTR("sqlite3_prepare_v2 returned: %d %s for query \"%s\"\n"), v13, v17, a3);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_144);
      v19 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v22 = v18;
        _os_log_impl(&dword_20A95C000, v19, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v18)
        CFRelease(v18);
    }
    free(v9);
    v9 = 0;
  }
LABEL_32:
  pthread_mutex_unlock(v6);
  return v9;
}

uint64_t *_CSFinishPreparedStatement(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = *result;
    sqlite3_reset((sqlite3_stmt *)result[2]);
    sqlite3_clear_bindings((sqlite3_stmt *)v1[2]);
    pthread_mutex_lock((pthread_mutex_t *)(v2 + 32));
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(v2 + 96), (const void *)v1[1]))
    {
      sqlite3_finalize((sqlite3_stmt *)v1[2]);
      free(v1);
    }
    else
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v2 + 96), (const void *)v1[1], v1);
    }
    return (uint64_t *)pthread_mutex_unlock((pthread_mutex_t *)(v2 + 32));
  }
  return result;
}

BOOL _CSCreateStoragePath(uint64_t a1, int a2, char *a3, size_t a4)
{
  return __CSCreateStoragePath(a1, a2, 0, a3, a4);
}

BOOL __CSCreateStoragePath(uint64_t a1, int a2, int a3, char *a4, size_t a5)
{
  _BOOL8 result;
  CFStringRef v11;
  NSObject *v12;
  uint8_t buf[4];
  CFStringRef v14;
  char v15[1024];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  bzero(v15, 0x400uLL);
  if (CKChunkStoreGetLocation(a1, v15, 0x400uLL))
  {
    if (a3)
    {
      if (snprintf(a4, a5, "%s/%s/%d/%d/%d", v15, "ChunkStorage", HIBYTE(a2), BYTE2(a2), BYTE1(a2)) >= a5)
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1303);
        result = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR);
        if (result)
        {
          v11 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("outPath too small\n"));
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1308);
          v12 = CK_DEFAULT_LOG_INTERNAL_1;
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
            goto LABEL_28;
          *(_DWORD *)buf = 138543362;
          v14 = v11;
LABEL_27:
          _os_log_impl(&dword_20A95C000, v12, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
LABEL_28:
          if (v11)
            CFRelease(v11);
          return 0;
        }
        return result;
      }
    }
    else if (snprintf(a4, a5, "%s/%s/%d/%d/%d/%d", v15, "ChunkStorage", HIBYTE(a2), BYTE2(a2), BYTE1(a2), a2) >= a5)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1312);
      result = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v11 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("outPath too small\n"));
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1315);
        v12 = CK_DEFAULT_LOG_INTERNAL_1;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          goto LABEL_28;
        *(_DWORD *)buf = 138543362;
        v14 = v11;
        goto LABEL_27;
      }
      return result;
    }
    return 1;
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1295);
  result = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v11 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("failed to get chunk store location!\n"));
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1299);
    v12 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      goto LABEL_28;
    *(_DWORD *)buf = 138543362;
    v14 = v11;
    goto LABEL_27;
  }
  return result;
}

BOOL _CSCreateStorageDirectoryPath(uint64_t a1, int a2, char *a3, size_t a4)
{
  return __CSCreateStoragePath(a1, a2, 1, a3, a4);
}

uint64_t _CSCreateStorageFile(uint64_t a1, _QWORD *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  int v6;
  CFStringRef v7;
  NSObject *v8;
  uint64_t v9;
  CFStringRef v10;
  NSObject *v11;
  uint64_t result;
  sqlite3_int64 v13;
  int v14;
  CFStringRef v15;
  NSObject *v16;
  int v17;
  CFStringRef v18;
  NSObject *v19;
  CFStringRef v20;
  NSObject *v21;
  int v22;
  int *v23;
  char *v24;
  CFStringRef v25;
  NSObject *v26;
  int *v27;
  char *v28;
  int *v29;
  char *v30;
  uint64_t v31;
  const char *v32;
  NSObject *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  CFStringRef v39;
  NSObject *v40;
  const __CFAllocator *alloc;
  stat v42;
  sqlite3_int64 v43;
  char v44[1024];
  uint8_t v45[4];
  CFStringRef v46;
  char __str[4];
  CFStringRef v48;
  stat buf[7];
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  v43 = 0;
  bzero(v44, 0x400uLL);
  if (!CKChunkStoreGetLocation(a1, v44, 0x400uLL))
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_146_0);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("CKChunkStoreGetLocation failed"));
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_150_0);
      v11 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        buf[0].st_dev = 138543362;
        *(_QWORD *)&buf[0].st_mode = v10;
        _os_log_impl(&dword_20A95C000, v11, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)buf, 0xCu);
      }
      if (v10)
        CFRelease(v10);
    }
    return 0xFFFFFFFFLL;
  }
  v4 = malloc_type_calloc(1uLL, 0x20uLL, 0x100004017768742uLL);
  if (!v4)
    return 0xFFFFFFFFLL;
  v5 = v4;
  v6 = _CSAddStorageFileToDb(a1, 0, &v43);
  if (v6)
  {
LABEL_4:
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_153);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("failed to add SF entry to database!\n"));
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_158);
      v8 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        buf[0].st_dev = 138543362;
        *(_QWORD *)&buf[0].st_mode = v7;
LABEL_11:
        _os_log_impl(&dword_20A95C000, v8, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)buf, 0xCu);
      }
      goto LABEL_12;
    }
    goto LABEL_14;
  }
  alloc = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  while (1)
  {
    v13 = v43;
    bzero(buf, 0x400uLL);
    bzero(__str, 0x400uLL);
    if (!CKChunkStoreGetLocation(a1, buf, 0x400uLL))
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1317);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        v18 = CFStringCreateWithFormat(alloc, 0, CFSTR("failed to get chunk store location!"));
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1321);
        v19 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v45 = 138543362;
          v46 = v18;
          goto LABEL_91;
        }
        goto LABEL_92;
      }
      goto LABEL_96;
    }
    if (snprintf(__str, 0x400uLL, "%s/%s/%d/%d/%d/", (const char *)buf, "ChunkStorage", BYTE3(v13), BYTE2(v13), BYTE1(v13)) >= 0x400)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1325);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        v18 = CFStringCreateWithFormat(alloc, 0, CFSTR("path exceeds %d characters!"), 1024);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1330);
        v19 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v45 = 138543362;
          v46 = v18;
          goto LABEL_91;
        }
LABEL_92:
        if (v18)
          CFRelease(v18);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_161_0);
      }
LABEL_96:
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        v20 = CFStringCreateWithFormat(alloc, 0, CFSTR("unable to create storage directory\n"));
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_166);
        v21 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          buf[0].st_dev = 138543362;
          *(_QWORD *)&buf[0].st_mode = v20;
LABEL_101:
          _os_log_impl(&dword_20A95C000, v21, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)buf, 0xCu);
        }
LABEL_102:
        if (v20)
          CFRelease(v20);
      }
LABEL_104:
      LODWORD(v9) = 0;
      goto LABEL_134;
    }
    if (mkdir_recursive((uint64_t)__str, 0x1C0u) && *__error() != 17)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1333);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        v29 = __error();
        v30 = strerror(*v29);
        v18 = CFStringCreateWithFormat(alloc, 0, CFSTR("failed to create directory: %s, %s\n"), __str, v30);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1338);
        v19 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v45 = 138543362;
          v46 = v18;
LABEL_91:
          _os_log_impl(&dword_20A95C000, v19, OS_LOG_TYPE_ERROR, "%{public}@", v45, 0xCu);
        }
        goto LABEL_92;
      }
      goto LABEL_96;
    }
    if (!__CSCreateStoragePath(a1, v13, 0, v44, 0x400uLL))
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_169);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        v20 = CFStringCreateWithFormat(alloc, 0, CFSTR("unable to create storage path\n"));
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_174);
        v21 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          buf[0].st_dev = 138543362;
          *(_QWORD *)&buf[0].st_mode = v20;
          goto LABEL_101;
        }
        goto LABEL_102;
      }
      goto LABEL_104;
    }
    v14 = open(v44, 2562, 384);
    if (v14 != -1)
    {
      v22 = v14;
      memset(&v42, 0, sizeof(v42));
      if (fstat(v14, &v42))
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_195);
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          v23 = __error();
          v24 = strerror(*v23);
          v25 = CFStringCreateWithFormat(alloc, 0, CFSTR("fstat failed: %s"), v24);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_200_0);
          v26 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            buf[0].st_dev = 138543362;
            *(_QWORD *)&buf[0].st_mode = v25;
            _os_log_impl(&dword_20A95C000, v26, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)buf, 0xCu);
          }
          LODWORD(v9) = 0;
          goto LABEL_131;
        }
        LODWORD(v9) = 0;
LABEL_133:
        close(v22);
        unlink(v44);
LABEL_134:
        v6 = -1;
        goto LABEL_135;
      }
      v31 = CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "UPDATE CSStorageFileTable SET ft_inode = %lld WHERE ft_rowid = %lld", v42.st_ino, v13);
      if ((_DWORD)v31)
      {
        v9 = v31;
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_204_0);
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          goto LABEL_133;
        v32 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        v25 = CFStringCreateWithFormat(alloc, 0, CFSTR("failed to set inode for file: %s: %d %s\n"), v44, v9, v32);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_209);
        v33 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          buf[0].st_dev = 138543362;
          *(_QWORD *)&buf[0].st_mode = v25;
LABEL_130:
          _os_log_impl(&dword_20A95C000, v33, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)buf, 0xCu);
        }
      }
      else
      {
        v34 = CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "UPDATE CSStorageFileTable SET ft_space = %d WHERE ft_rowid = %lld", 20971620, v13);
        if ((_DWORD)v34)
        {
          v9 = v34;
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_213);
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
            goto LABEL_133;
          v35 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
          v25 = CFStringCreateWithFormat(alloc, 0, CFSTR("failed to set space for file: %s: %d %s\n"), v44, v9, v35);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_218);
          v33 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            buf[0].st_dev = 138543362;
            *(_QWORD *)&buf[0].st_mode = v25;
            goto LABEL_130;
          }
        }
        else
        {
          v36 = CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "UPDATE CSStorageFileTable SET ft_pspace = %d WHERE ft_rowid = %lld", 0, v13);
          if (!(_DWORD)v36)
          {
            if (CK_DEFAULT_LOG_BLOCK_1 != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_230_0);
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
            {
              v39 = CFStringCreateWithFormat(alloc, 0, CFSTR("Created a new SF, ino:%llu, rowID:%llu\n"), v42.st_ino, v13);
              if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_235_0);
              v40 = CK_DEFAULT_LOG_INTERNAL_1;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
              {
                buf[0].st_dev = 138543362;
                *(_QWORD *)&buf[0].st_mode = v39;
                _os_log_impl(&dword_20A95C000, v40, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)buf, 0xCu);
              }
              if (v39)
                CFRelease(v39);
            }
            result = 0;
            v5[2] = v22;
            *(_QWORD *)v5 = v42.st_ino;
            *((_QWORD *)v5 + 2) = v13;
            *((_QWORD *)v5 + 3) = 20971620;
            *a2 = v5;
            return result;
          }
          v9 = v36;
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_222);
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
            goto LABEL_133;
          v37 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
          v25 = CFStringCreateWithFormat(alloc, 0, CFSTR("failed to set purgeable space for file: %s: %d %s\n"), v44, v9, v37);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_227_0);
          v33 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            buf[0].st_dev = 138543362;
            *(_QWORD *)&buf[0].st_mode = v25;
            goto LABEL_130;
          }
        }
      }
LABEL_131:
      if (v25)
        CFRelease(v25);
      goto LABEL_133;
    }
    if (*__error() != 17)
      break;
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_177);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      memset(buf, 0, 144);
      stat(v44, buf);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_180_0);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        v15 = CFStringCreateWithFormat(alloc, 0, CFSTR("file %s already exists (size: %lld), trying again."), v44, buf[0].st_size);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_184);
        v16 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__str = 138543362;
          v48 = v15;
          _os_log_impl(&dword_20A95C000, v16, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)__str, 0xCu);
        }
        if (v15)
          CFRelease(v15);
      }
    }
    v17 = _CSAddStorageFileToDb(a1, 0, &v43);
    if (v17)
    {
      v6 = v17;
      goto LABEL_4;
    }
  }
  v6 = *__error();
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_187);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    v27 = __error();
    v28 = strerror(*v27);
    v7 = CFStringCreateWithFormat(alloc, 0, CFSTR("open(%s) failed: %s"), v44, v28);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_192);
    v8 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      buf[0].st_dev = 138543362;
      *(_QWORD *)&buf[0].st_mode = v7;
      goto LABEL_11;
    }
LABEL_12:
    if (v7)
      CFRelease(v7);
  }
LABEL_14:
  LODWORD(v9) = 0;
LABEL_135:
  free(v5);
  _CSRemoveStorageFileFromDb((uint64_t *)a1, v43);
  if (v6 < 0 && (_DWORD)v9 == 13)
    return 28;
  else
    return v6;
}

uint64_t _CSAddStorageFileToDb(uint64_t a1, sqlite3_int64 a2, _QWORD *a3)
{
  sqlite3_stmt **v6;
  sqlite3_stmt **v7;
  char v8;
  int v9;
  uint64_t v10;
  const void *insert_rowid;
  unsigned int v12;
  uint64_t result;
  uint64_t v14;
  const __CFAllocator *v15;
  const char *v16;
  NSObject *v17;
  uint8_t buf[4];
  const void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  v6 = _CSPrepareStatement(a1, CFSTR("INSERT INTO CSStorageFileTable (ft_inode, vt_rowID) VALUES (?, ?)"), "INSERT INTO CSStorageFileTable (ft_inode, vt_rowID) VALUES (?, ?)");
  v7 = v6;
  if (!v6)
  {
    insert_rowid = 0;
    LODWORD(v10) = 0;
    goto LABEL_6;
  }
  v8 = 1;
  v9 = sqlite3_bind_int64(v6[2], 1, a2);
  if (v9 || (v9 = sqlite3_bind_int64(v7[2], 2, 0)) != 0)
  {
    LODWORD(v10) = v9;
    insert_rowid = 0;
    v12 = -1;
    goto LABEL_7;
  }
  v14 = CS_sqlite3_step((uint64_t *)v7);
  if ((_DWORD)v14 != 101)
  {
    v10 = v14;
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_762);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v15 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v16 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
      insert_rowid = CFStringCreateWithFormat(v15, 0, CFSTR("sqlite3_step returned: %d %s\n"), v10, v16);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_764);
      v17 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v19 = insert_rowid;
        _os_log_impl(&dword_20A95C000, v17, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (!insert_rowid)
        goto LABEL_6;
      CFRelease(insert_rowid);
    }
    insert_rowid = 0;
LABEL_6:
    v12 = -1;
    v8 = 1;
    goto LABEL_7;
  }
  insert_rowid = (const void *)sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 24));
  v8 = 0;
  v12 = 0;
  LODWORD(v10) = 101;
LABEL_7:
  _CSFinishPreparedStatement((uint64_t *)v7);
  if ((v8 & ((_DWORD)v10 == 13)) != 0)
    result = 28;
  else
    result = v12;
  if (!(_DWORD)result)
    *a3 = insert_rowid;
  return result;
}

uint64_t CSsql_corruption_checking_do_0(uint64_t a1, sqlite3 *a2, char *a3, ...)
{
  uint64_t v4;
  CFStringRef v6;
  NSObject *v7;
  uint8_t buf[4];
  CFStringRef v10;
  uint64_t v11;
  va_list va;

  va_start(va, a3);
  v11 = *MEMORY[0x24BDAC8D0];
  v4 = CSsql_doV(a2, a3, va);
  _CSHandleDatabaseIOError_0(v4);
  if ((_DWORD)v4 == 26 || (_DWORD)v4 == 11)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1863);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("chunk store database corruption: detected error %d in CSsql_do"), v4, va);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1867);
      v7 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v10 = v6;
        _os_log_impl(&dword_20A95C000, v7, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v6)
        CFRelease(v6);
    }
    _CSHandleCorruptDatabase(a1);
  }
  return v4;
}

uint64_t *_CSRemoveStorageFileFromDb(uint64_t *result, sqlite3_int64 a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  const __CFAllocator *v7;
  const char *v8;
  CFStringRef v9;
  NSObject *v10;
  uint8_t buf[4];
  CFStringRef v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = result;
    result = (uint64_t *)_CSPrepareStatement((uint64_t)result, CFSTR("DELETE FROM CSStorageFileTable WHERE ft_rowid = ?"), "DELETE FROM CSStorageFileTable WHERE ft_rowid = ?");
    if (result)
    {
      v4 = result;
      if (!sqlite3_bind_int64((sqlite3_stmt *)result[2], 1, a2))
      {
        v5 = CS_sqlite3_step(v4);
        if ((_DWORD)v5 != 101)
        {
          v6 = v5;
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_769);
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
            v8 = sqlite3_errmsg((sqlite3 *)v3[3]);
            v9 = CFStringCreateWithFormat(v7, 0, CFSTR("sqlite3_step returned: %d %s\n"), v6, v8);
            if (CK_DEFAULT_LOG_BLOCK_1 != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_771);
            v10 = CK_DEFAULT_LOG_INTERNAL_1;
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138543362;
              v12 = v9;
              _os_log_impl(&dword_20A95C000, v10, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
            }
            if (v9)
              CFRelease(v9);
          }
        }
      }
      return _CSFinishPreparedStatement(v4);
    }
  }
  return result;
}

uint64_t _CSUpdateStorageFileInfo(uint64_t a1, uint64_t a2)
{
  const void *v4;
  CFStringRef v5;
  NSObject *v6;
  uint64_t v7;
  sqlite3_stmt **v8;
  sqlite3_stmt **v9;
  uint64_t v10;
  uint64_t v11;
  const __CFAllocator *v12;
  const char *v13;
  CFStringRef v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  const __CFAllocator *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const __CFAllocator *v22;
  const char *v23;
  uint8_t buf[4];
  CFStringRef v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = CSsql_get64(a1, 1, "SELECT ft_space FROM CSStorageFileTable WHERE ft_rowid = %lld", *(_QWORD *)(a2 + 16));
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_238_0);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
  {
    v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Updating SF space for ftRowId:%llu curspace:%llu, space:%llu\n"), *(_QWORD *)(a2 + 16), v4, *(_QWORD *)(a2 + 24));
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_242_0);
    v6 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      v26 = v5;
      _os_log_impl(&dword_20A95C000, v6, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v5)
      CFRelease(v5);
  }
  if (v4 != *(const void **)(a2 + 24))
  {
    v9 = _CSPrepareStatement(a1, CFSTR("UPDATE CSStorageFileTable SET ft_space = ? WHERE ft_rowid = ?"), "UPDATE CSStorageFileTable SET ft_space = ? WHERE ft_rowid = ?");
    v8 = v9;
    if (v9)
    {
      v10 = sqlite3_bind_int64(v9[2], 1, *(_QWORD *)(a2 + 24));
      if ((_DWORD)v10)
      {
        v11 = v10;
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_248);
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          goto LABEL_41;
        v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v13 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        v14 = CFStringCreateWithFormat(v12, 0, CFSTR("sqlite3_bind_int returned: %d %s\n"), v11, v13);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_253);
        v15 = CK_DEFAULT_LOG_INTERNAL_1;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          goto LABEL_39;
        *(_DWORD *)buf = 138543362;
        v26 = v14;
        goto LABEL_38;
      }
      v16 = sqlite3_bind_int64(v8[2], 2, *(_QWORD *)(a2 + 16));
      if ((_DWORD)v16)
      {
        v17 = v16;
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_256);
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          goto LABEL_41;
        v18 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v19 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        v14 = CFStringCreateWithFormat(v18, 0, CFSTR("sqlite3_bind_int64 returned: %d %s\n"), v17, v19);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_261);
        v15 = CK_DEFAULT_LOG_INTERNAL_1;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          goto LABEL_39;
        *(_DWORD *)buf = 138543362;
        v26 = v14;
        goto LABEL_38;
      }
      v20 = CS_sqlite3_step((uint64_t *)v8);
      if ((_DWORD)v20 == 101)
      {
        v7 = 0;
        goto LABEL_42;
      }
      v21 = v20;
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_264);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        v22 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v23 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        v14 = CFStringCreateWithFormat(v22, 0, CFSTR("sqlite3_step returned: %d %s\n"), v21, v23);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_269);
        v15 = CK_DEFAULT_LOG_INTERNAL_1;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          goto LABEL_39;
        *(_DWORD *)buf = 138543362;
        v26 = v14;
LABEL_38:
        _os_log_impl(&dword_20A95C000, v15, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
LABEL_39:
        if (v14)
          CFRelease(v14);
      }
    }
LABEL_41:
    v7 = 0xFFFFFFFFLL;
    goto LABEL_42;
  }
  v7 = 0;
  v8 = 0;
LABEL_42:
  _CSFinishPreparedStatement((uint64_t *)v8);
  return v7;
}

void _CSCacheStorageFile(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = 0;
  v6 = 0x7FFFFFFFLL;
  v7 = *(_QWORD *)(a1 + 264);
  while (*(_QWORD *)v7)
  {
    if (*(_QWORD *)(*(_QWORD *)v7 + 24) < v6)
    {
      v6 = *(_QWORD *)(*(_QWORD *)v7 + 24);
      v5 = v4;
    }
    ++v4;
    v7 += 8;
    if (v4 == 5)
    {
      _CSCloseStorageFile(a1, *(_DWORD **)(*(_QWORD *)(a1 + 264) + 8 * v5), 0);
      v7 = *(_QWORD *)(a1 + 264) + 8 * v5;
      break;
    }
  }
  *(_QWORD *)v7 = a2;
}

void _CSCloseStorageFile(uint64_t a1, _DWORD *a2, int a3)
{
  int v6;
  CFStringRef v7;
  NSObject *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint8_t buf[4];
  CFStringRef v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v6 = a2[2];
    if (v6 != -1)
    {
      if (close(v6) == -1)
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_297);
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("close failed for SF rowID:%llu\n"), *((_QWORD *)a2 + 2));
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_301);
          v8 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            v16 = v7;
            _os_log_impl(&dword_20A95C000, v8, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
          }
          if (v7)
            CFRelease(v7);
        }
      }
      a2[2] = -1;
    }
    if (a3)
      _CSUpdateStorageFileInfo(a1, (uint64_t)a2);
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(a1 + 264);
      v12 = v9;
      while (1)
      {
        v13 = *(_DWORD **)(v11 + 8 * v12);
        if (v13 && v13 == a2)
          break;
        if (++v12 == 5)
        {
          if ((v10 & 1) == 0)
            free(a2);
          return;
        }
      }
      if ((v10 & 1) == 0)
      {
        free(a2);
        v11 = *(_QWORD *)(a1 + 264);
      }
      *(_QWORD *)(v11 + 8 * v12) = 0;
      v9 = v12 + 1;
      v10 = 1;
    }
    while (v12 != 4);
  }
}

uint64_t _CSSyncStorageFile(uint64_t a1, uint64_t a2, char a3)
{
  int v6;
  uint64_t v7;
  const char *v8;
  int *v9;
  char *v10;
  int v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  CFStringRef v18;
  int v20;
  int v21;
  int v22;
  NSObject *v23;
  const __CFString *v24;
  int *v25;
  char *v26;
  int v27;
  NSObject *v28;
  const __CFAllocator *v29;
  int *v30;
  char *v31;
  int *v32;
  uint8_t v33[4];
  CFStringRef v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  char *v38;
  __int16 v39;
  int v40;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  char *v46;
  __int16 v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_271_0);
    v15 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136315138;
    v42 = "_CSSyncStorageFile";
    v12 = "could not fsync null storage file in %s";
    v13 = v15;
    v14 = 12;
    goto LABEL_16;
  }
  v6 = *(_DWORD *)(a2 + 8);
  if (v6 < 0)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_274);
    v16 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      return 0;
    v17 = *(const char **)(a2 + 16);
    *(_DWORD *)buf = 134218242;
    v42 = v17;
    v43 = 2080;
    v44 = "_CSSyncStorageFile";
    v12 = "could not fsync closed storage file %llu in %s";
    v13 = v16;
    v14 = 22;
    goto LABEL_16;
  }
  if (fsync(v6))
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_277);
    v7 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      return 0;
    v8 = *(const char **)(a2 + 16);
    v9 = __error();
    v10 = strerror(*v9);
    v11 = *__error();
    *(_DWORD *)buf = 134218754;
    v42 = v8;
    v43 = 2080;
    v44 = "_CSSyncStorageFile";
    v45 = 2080;
    v46 = v10;
    v47 = 1024;
    v48 = v11;
    v12 = "fsync for storage file %llu in %s failed: %s (%d)";
    v13 = v7;
    v14 = 38;
LABEL_16:
    _os_log_impl(&dword_20A95C000, v13, OS_LOG_TYPE_ERROR, v12, buf, v14);
    return 0;
  }
  if ((a3 & 1) == 0)
    return 1;
  bzero(buf, 0x400uLL);
  if (!__CSCreateStoragePath(a1, *(_QWORD *)(a2 + 16), 1, (char *)buf, 0x400uLL))
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_280_0);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      return 0;
    v18 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("could not create storage file path for storage file %llu in %s"), *(_QWORD *)(a2 + 16), "_CSSyncStorageFile");
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_284_0);
    v28 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v33 = 138543362;
      v34 = v18;
LABEL_43:
      _os_log_impl(&dword_20A95C000, v28, OS_LOG_TYPE_ERROR, "%{public}@", v33, 0xCu);
    }
LABEL_44:
    if (!v18)
      return (uint64_t)v18;
    CFRelease(v18);
    return 0;
  }
  v20 = open((const char *)buf, 0);
  if (v20 < 0)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_287);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      return 0;
    v29 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v30 = __error();
    v31 = strerror(*v30);
    v32 = __error();
    v18 = CFStringCreateWithFormat(v29, 0, CFSTR("could not open storage file directory %s in %s: %s (%d)"), buf, "_CSSyncStorageFile", v31, *v32);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_292);
    v28 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v33 = 138543362;
      v34 = v18;
      goto LABEL_43;
    }
    goto LABEL_44;
  }
  v21 = v20;
  v22 = fsync(v20);
  v18 = (CFStringRef)(v22 == 0);
  if (v22)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_295);
    v23 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v24 = *(const __CFString **)(a2 + 16);
      v25 = __error();
      v26 = strerror(*v25);
      v27 = *__error();
      *(_DWORD *)v33 = 134218754;
      v34 = v24;
      v35 = 2080;
      v36 = "_CSSyncStorageFile";
      v37 = 2080;
      v38 = v26;
      v39 = 1024;
      v40 = v27;
      _os_log_impl(&dword_20A95C000, v23, OS_LOG_TYPE_ERROR, "fsync for storage file %llu parent directory in %s failed: %s (%d)", v33, 0x26u);
    }
  }
  close(v21);
  return (uint64_t)v18;
}

void _CSCloseCachedStorageFile(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v3 = 0;
    while (1)
    {
      v4 = *(_QWORD *)(a1 + 264);
      v5 = *(_QWORD *)(v4 + v3);
      if (v5)
      {
        if (*(_QWORD *)(v5 + 16) == a2)
          break;
      }
      v3 += 8;
      if (v3 == 40)
        return;
    }
    _CSCloseStorageFile(a1, *(_DWORD **)(v4 + v3), a3);
  }
}

void *_CSGetStorageFile(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t i;
  void *v6;
  sqlite3_stmt **v7;
  sqlite3_stmt **v8;
  sqlite3_int64 v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  sqlite3_int64 v14;
  unint64_t v15;
  CFStringRef v16;
  NSObject *v17;
  CFStringRef v18;
  NSObject *v19;
  CFStringRef v20;
  NSObject *v21;
  CFStringRef v22;
  NSObject *v23;
  int v24;
  unint64_t v25;
  CFStringRef v26;
  NSObject *v27;
  int *v28;
  char *v29;
  CFStringRef v30;
  NSObject *v31;
  CFStringRef v32;
  NSObject *v33;
  int *v34;
  char *v35;
  CFStringRef v36;
  NSObject *v37;
  int *v38;
  char *v39;
  CFStringRef v40;
  NSObject *v41;
  uint64_t v43;
  const __CFAllocator *alloc;
  void *v45;
  uint8_t v46[4];
  CFStringRef v47;
  stat v48;
  uint8_t buf[4];
  CFStringRef v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v45 = 0;
  v3 = *(unsigned int *)(a2 + 80);
  v4 = v3 + CKSchemeAndSignatureSize((_BYTE *)(a2 + 84)) + 4;
  if (v4 >> 31)
    _CSGetStorageFile_cold_1();
  for (i = 0; i != 5; ++i)
  {
    v6 = *(void **)(*(_QWORD *)(a1 + 264) + 8 * i);
    if (v6 && *((_QWORD *)v6 + 3) >= (int64_t)v4)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_304_0);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        v18 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Found cached SF %u at rowID:%llu, space:%llu, needSize:%llu\n"), i, *((_QWORD *)v6 + 2), *((_QWORD *)v6 + 3), v4);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_308);
        v19 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543362;
          v50 = v18;
          _os_log_impl(&dword_20A95C000, v19, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
        }
        if (v18)
          CFRelease(v18);
      }
      return v6;
    }
  }
  v7 = _CSPrepareStatement(a1, CFSTR("SELECT ft_rowid, ft_space FROM CSStorageFileTable WHERE (ft_space >= ? AND ft_status IS NULL)"), "SELECT ft_rowid, ft_space FROM CSStorageFileTable WHERE (ft_space >= ? AND ft_status IS NULL)");
  if (v7)
  {
    v8 = v7;
    sqlite3_bind_int(v7[2], 1, v4);
    if (CS_sqlite3_step((uint64_t *)v8) != 100)
    {
      _CSFinishPreparedStatement((uint64_t *)v8);
      goto LABEL_112;
    }
    v43 = a1;
    v9 = 0;
    v10 = 0;
    alloc = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    do
    {
      v11 = sqlite3_column_int(v8[2], 0);
      if (v11)
      {
        v12 = v11;
        v13 = sqlite3_column_int(v8[2], 1);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_322_1);
        v14 = v12;
        v15 = v13;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
        {
          v16 = CFStringCreateWithFormat(alloc, 0, CFSTR("Checking free space for SF at rowID:%llu, %llu/%llu\n"), v12, v13, v4);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_327);
          v17 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138543362;
            v50 = v16;
            _os_log_impl(&dword_20A95C000, v17, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
          }
          if (v16)
            CFRelease(v16);
        }
        if (v4 <= v15 && v10 < v15)
        {
          v10 = v15;
          v9 = v14;
        }
      }
    }
    while (CS_sqlite3_step((uint64_t *)v8) == 100);
    _CSFinishPreparedStatement((uint64_t *)v8);
    a1 = v43;
    if (!v9)
    {
LABEL_112:
      _CSCreateStorageFile(a1, &v45);
      v6 = v45;
      if (!v45)
        return v6;
      goto LABEL_113;
    }
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_330_0);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      v22 = CFStringCreateWithFormat(alloc, 0, CFSTR("Found a candidate SF at rowID:%llu\n"), v9);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_335);
      v23 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        v50 = v22;
        _os_log_impl(&dword_20A95C000, v23, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v22)
        CFRelease(v22);
    }
    v6 = malloc_type_calloc(1uLL, 0x20uLL, 0x100004017768742uLL);
    v45 = v6;
    if (v6)
    {
      bzero(buf, 0x400uLL);
      if (__CSCreateStoragePath(v43, v9, 0, (char *)buf, 0x400uLL))
      {
        memset(&v48, 0, sizeof(v48));
        v24 = open((const char *)buf, 2, 384);
        *((_DWORD *)v6 + 2) = v24;
        if (v24 == -1)
        {
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_338_0);
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            v34 = __error();
            v35 = strerror(*v34);
            v36 = CFStringCreateWithFormat(alloc, 0, CFSTR("Attempting first aid in %s after open failed for \"%s\": %s\n"), "_CSGetStorageFile", buf, v35);
            if (CK_DEFAULT_LOG_BLOCK_1 != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_343);
            v37 = CK_DEFAULT_LOG_INTERNAL_1;
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v46 = 138543362;
              v47 = v36;
              _os_log_impl(&dword_20A95C000, v37, OS_LOG_TYPE_ERROR, "%{public}@", v46, 0xCu);
            }
            if (v36)
              CFRelease(v36);
          }
          CSAttemptAutomaticFirstAidForStorageFile(v43, v9);
        }
        else
        {
          if (fstat(v24, &v48) != -1)
          {
            if (v10 <= 0x1400064)
              v25 = 20971620 - v10;
            else
              v25 = 0;
            if (v10 <= 0x1400063 && v25 < v48.st_size)
            {
              if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_354_0);
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
              {
                v26 = CFStringCreateWithFormat(alloc, 0, CFSTR("The size on disk is different from the size in db for \"%s\": usedSpace:%llu, size:%llu - truncating\n"), buf, v25, v48.st_size);
                if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                  dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_359);
                v27 = CK_DEFAULT_LOG_INTERNAL_1;
                if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)v46 = 138543362;
                  v47 = v26;
                  _os_log_impl(&dword_20A95C000, v27, OS_LOG_TYPE_ERROR, "%{public}@", v46, 0xCu);
                }
                if (v26)
                  CFRelease(v26);
              }
              if (ftruncate(*((_DWORD *)v6 + 2), v25))
              {
                if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                  dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_362_0);
                if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                {
                  v28 = __error();
                  v29 = strerror(*v28);
                  v30 = CFStringCreateWithFormat(alloc, 0, CFSTR("ftruncate failed for \"%s\": %s\n"), buf, v29);
                  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_367);
                  v31 = CK_DEFAULT_LOG_INTERNAL_1;
                  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)v46 = 138543362;
                    v47 = v30;
                    _os_log_impl(&dword_20A95C000, v31, OS_LOG_TYPE_ERROR, "%{public}@", v46, 0xCu);
                  }
                  if (v30)
                    CFRelease(v30);
                }
              }
            }
            *((_QWORD *)v6 + 2) = v9;
            *((_QWORD *)v6 + 3) = v10;
LABEL_113:
            _CSCacheStorageFile(a1, (uint64_t)v6);
            return v6;
          }
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_346_0);
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            v38 = __error();
            v39 = strerror(*v38);
            v40 = CFStringCreateWithFormat(alloc, 0, CFSTR("fstat failed for \"%s\": %s\n"), buf, v39);
            if (CK_DEFAULT_LOG_BLOCK_1 != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_351);
            v41 = CK_DEFAULT_LOG_INTERNAL_1;
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v46 = 138543362;
              v47 = v40;
              _os_log_impl(&dword_20A95C000, v41, OS_LOG_TYPE_ERROR, "%{public}@", v46, 0xCu);
            }
            if (v40)
              CFRelease(v40);
          }
          close(*((_DWORD *)v6 + 2));
        }
      }
      else
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_370);
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          v32 = CFStringCreateWithFormat(alloc, 0, CFSTR("_CSCreateStoragePath failed for rowID: %lld\n"), v9);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_375_0);
          v33 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            v48.st_dev = 138543362;
            *(_QWORD *)&v48.st_mode = v32;
            _os_log_impl(&dword_20A95C000, v33, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v48, 0xCu);
          }
          if (v32)
            CFRelease(v32);
        }
      }
      free(v6);
      v45 = 0;
      goto LABEL_112;
    }
  }
  else
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_314_0);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v20 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("NULL stmt"));
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_319);
      v21 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v50 = v20;
        _os_log_impl(&dword_20A95C000, v21, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v20)
        CFRelease(v20);
    }
    return 0;
  }
  return v6;
}

unint64_t _CSCompactStorage(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  CFStringRef v6;
  NSObject *v7;
  unint64_t v8;
  CFStringRef v9;
  NSObject *v10;
  int v11;
  int v12;
  NSObject *v13;
  const char *v14;
  CFMutableArrayRef Mutable;
  __CFArray *v17;
  sqlite3_stmt **v18;
  sqlite3_stmt **v19;
  uint64_t v20;
  CFNumberRef v21;
  CFNumberRef v22;
  uint64_t v23;
  uint64_t v24;
  const __CFAllocator *v25;
  const char *v26;
  CFStringRef v27;
  NSObject *v28;
  CFIndex v29;
  unint64_t v30;
  const __CFNumber *ValueAtIndex;
  sqlite3_int64 v32;
  _QWORD *v33;
  CFStringRef v34;
  sqlite3_int64 v35;
  NSObject *v36;
  CFStringRef v37;
  sqlite3_int64 v38;
  NSObject *v39;
  CFMutableArrayRef v40;
  const __CFArray *v41;
  sqlite3_stmt **v42;
  sqlite3_stmt **v43;
  unint64_t v44;
  uint64_t v45;
  CFStringRef v46;
  NSObject *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  int v53;
  sqlite3_int64 v54;
  uint64_t v55;
  CFStringRef v56;
  NSObject *v57;
  CFNumberRef v58;
  CFNumberRef v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  const char *v64;
  CFStringRef v65;
  NSObject *v66;
  BOOL v67;
  CFIndex v68;
  CFStringRef v69;
  NSObject *v70;
  BOOL v71;
  CFIndex v72;
  const __CFNumber *v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  CFStringRef v77;
  NSObject *v78;
  int v79;
  unint64_t v80;
  CFStringRef v81;
  NSObject *v82;
  CFMutableArrayRef v83;
  const __CFArray *v84;
  sqlite3_stmt **v85;
  sqlite3_stmt **v86;
  uint64_t v87;
  CFNumberRef v88;
  CFNumberRef v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const __CFAllocator *v93;
  const char *v94;
  CFStringRef v95;
  NSObject *v96;
  CFIndex v97;
  const __CFNumber *v98;
  sqlite3_int64 v99;
  uint64_t v100;
  uint64_t v101;
  off_t st_size;
  sqlite3_stmt **v103;
  sqlite3_stmt **v104;
  int v105;
  uint64_t v106;
  CFStringRef v107;
  NSObject *v108;
  uint64_t v109;
  sqlite3_int64 v110;
  unint64_t v112;
  CFStringRef v113;
  NSObject *v114;
  int *v115;
  uint64_t v116;
  int *v117;
  char *v118;
  CFStringRef v119;
  NSObject *v120;
  int *v121;
  char *v122;
  __CFArray *v123;
  unint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  sqlite3_int64 v127;
  int v128;
  unint64_t v129;
  off_t v130;
  uint64_t v131;
  int v132;
  off_t v133;
  void *v134;
  ssize_t v135;
  _DWORD *v136;
  uint64_t v137;
  ssize_t v138;
  ssize_t v139;
  CFDataRef v140;
  CFDataRef v141;
  const char *v142;
  CFStringRef v143;
  NSObject *v144;
  unint64_t v145;
  BOOL v146;
  uint64_t v147;
  const char *v148;
  CFStringRef v149;
  NSObject *v150;
  CFStringRef v151;
  NSObject *v152;
  const char *v153;
  xpc_object_t v154;
  xpc_object_t v155;
  void *v156;
  xpc_object_t v157;
  uint64_t v158;
  NSObject *v159;
  const char *v160;
  uint32_t v161;
  xpc_object_t v162;
  xpc_object_t v163;
  xpc_object_t v164;
  uint64_t v165;
  ssize_t v166;
  char *v167;
  int *v168;
  CFStringRef v169;
  NSObject *v170;
  uint64_t v171;
  int *v172;
  char *v173;
  CFStringRef v174;
  NSObject *v175;
  CFStringRef v176;
  NSObject *v177;
  CFStringRef v178;
  NSObject *v179;
  CFStringRef v180;
  NSObject *v181;
  int *v182;
  char *v183;
  CFStringRef v184;
  NSObject *v185;
  uint64_t v186;
  uint64_t v187;
  const char *v188;
  CFStringRef v189;
  NSObject *v190;
  CFIndex v191;
  const __CFData *v192;
  sqlite3_int64 *BytePtr;
  uint64_t v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  const char *v198;
  CFStringRef v199;
  NSObject *v200;
  unint64_t v201;
  const char *v202;
  NSObject *v203;
  CFStringRef v204;
  NSObject *v205;
  uint64_t v206;
  CFStringRef v207;
  NSObject *v208;
  uint64_t v209;
  sqlite3_int64 v210;
  sqlite3_stmt **v211;
  __CFArray *cf;
  unint64_t v213;
  void *v214;
  size_t __nbyte;
  CFStringRef __nbytea;
  off_t __offseta;
  off_t __offsetb;
  off_t __offsetc;
  off_t __offsetd;
  int __fd[2];
  unint64_t __fda;
  int __fdb;
  int __fdc[2];
  __CFArray *theArray;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  const __CFAllocator *v229;
  const __CFAllocator *alloc;
  CFIndex alloca;
  CFIndex Count;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  sqlite3_int64 v236;
  stat valuePtr;
  void *v238;
  _BYTE v239[24];
  size_t v240;
  __int16 v241;
  const char *v242;
  __int16 v243;
  off_t v244;
  xpc_object_t values;
  xpc_object_t v246;
  __int128 keys;
  _BYTE buf[12];
  __int16 v249;
  const char *v250;
  uint64_t v251;

  v251 = *MEMORY[0x24BDAC8D0];
  v4 = &new_ringing[224];
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_377);
  v5 = &new_ringing[224];
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
  {
    v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("spaceNeeded:%llu\n"), a2);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_381_0);
    v7 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v6;
      _os_log_impl(&dword_20A95C000, v7, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v6)
      CFRelease(v6);
  }
  if (!a2 || *(_DWORD *)(a1 + 256))
  {
    v8 = 0;
    goto LABEL_13;
  }
  if (*(_BYTE *)(a1 + 17))
    _CSCompactStorage_cold_6();
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  if (!Mutable)
  {
    v8 = 0;
    v23 = 0xFFFFFFFFLL;
    goto LABEL_191;
  }
  v17 = Mutable;
  v18 = _CSPrepareStatement(a1, CFSTR("SELECT ft_rowid FROM CSStorageFileTable WHERE ft_pspace > 0 ORDER BY ft_pspace DESC"), "SELECT ft_rowid FROM CSStorageFileTable WHERE ft_pspace > 0 ORDER BY ft_pspace DESC");
  if (!v18)
  {
    v8 = 0;
    v23 = 0xFFFFFFFFLL;
    goto LABEL_190;
  }
  v19 = v18;
  while (1)
  {
    v20 = CS_sqlite3_step((uint64_t *)v19);
    if ((_DWORD)v20 != 100)
      break;
    if (*(_DWORD *)(a1 + 256))
    {
      v234 = 0;
      goto LABEL_188;
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)buf = sqlite3_column_int64(v19[2], 0);
    v21 = CFNumberCreate(0, kCFNumberLongLongType, buf);
    if (!v21)
    {
      v234 = 0;
      v23 = 0xFFFFFFFFLL;
      goto LABEL_189;
    }
    v22 = v21;
    CFArrayAppendValue(v17, v21);
    CFRelease(v22);
  }
  v24 = v20;
  if ((_DWORD)v20 != 101)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1344);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v25 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v26 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
      v27 = CFStringCreateWithFormat(v25, 0, CFSTR("sqlite3_step returned: %d %s\n"), v24, v26);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1346);
      v28 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v27;
        _os_log_impl(&dword_20A95C000, v28, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v27)
        CFRelease(v27);
    }
  }
  _CSFinishPreparedStatement((uint64_t *)v19);
  Count = CFArrayGetCount(v17);
  if (Count < 1)
  {
    v234 = 0;
LABEL_187:
    v19 = 0;
LABEL_188:
    v23 = 0;
    goto LABEL_189;
  }
  v29 = 0;
  v234 = 0;
  alloc = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v30 = a2;
  do
  {
    if (*(_DWORD *)(a1 + 256))
      goto LABEL_187;
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v17, v29);
    *(_QWORD *)&valuePtr.st_dev = 0;
    if (!CFNumberGetValue(ValueAtIndex, kCFNumberLongLongType, &valuePtr))
      goto LABEL_96;
    if (*(_BYTE *)(a1 + 17))
      _CSCompactStorage_cold_5();
    v32 = *(_QWORD *)&valuePtr.st_dev;
    v33 = &new_ringing[224];
    if ((CSAttemptAutomaticFirstAidForStorageFile(a1, *(sqlite3_int64 *)&valuePtr.st_dev) & 1) != 0)
      goto LABEL_63;
    if (v4[294] != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1348);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v34 = CFStringCreateWithFormat(alloc, 0, CFSTR("Failed first aid check in %s"), "removeUnreferencedChunksAtEof");
      v35 = v32;
      if (v4[294] != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1350);
      v36 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v34;
        _os_log_impl(&dword_20A95C000, v36, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      v32 = v35;
      if (v34)
        CFRelease(v34);
LABEL_63:
      if (v4[294] != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1353);
    }
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      v37 = CFStringCreateWithFormat(alloc, 0, CFSTR("ftRowId:%llu, spaceNeeded:%llu\n"), v32, v30);
      v38 = v32;
      if (v4[294] != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1358);
      v39 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v37;
        _os_log_impl(&dword_20A95C000, v39, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      v32 = v38;
      if (v37)
        CFRelease(v37);
    }
    v40 = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
    if (!v40)
    {
      v44 = 0;
      v45 = 0xFFFFFFFFLL;
      goto LABEL_79;
    }
    v41 = v40;
    v42 = _CSPrepareStatement(a1, CFSTR("SELECT ct_rowid, dataLen, offset, refCount FROM CSChunkTable WHERE ft_rowid = ? AND location = ? ORDER BY offset DESC"), "SELECT ct_rowid, dataLen, offset, refCount FROM CSChunkTable WHERE ft_rowid = ? AND location = ? ORDER BY offset DESC");
    v43 = v42;
    if (!v42 || sqlite3_bind_int64(v42[2], 1, v32) || sqlite3_bind_int(v43[2], 2, 115))
      goto LABEL_76;
    v50 = CS_sqlite3_step((uint64_t *)v43);
    v51 = (_DWORD)v50 == 100;
    __offseta = v32;
    theArray = v41;
    if ((_DWORD)v50 != 100)
    {
      v61 = v50;
      v62 = 0;
      v63 = 0;
      goto LABEL_117;
    }
    v62 = 0;
    v52 = -1;
    do
    {
      if (*(_DWORD *)(a1 + 256))
        goto LABEL_140;
      v226 = v52;
      *(_QWORD *)v239 = 0;
      *(_QWORD *)v239 = sqlite3_column_int64(v43[2], 0);
      v53 = sqlite3_column_int(v43[2], 1);
      v227 = sqlite3_column_int64(v43[2], 2);
      v54 = sqlite3_column_int64(v43[2], 3);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1364);
      v55 = v53;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        v56 = CFStringCreateWithFormat(alloc, 0, CFSTR("ctRowId:%llu, refCount:%llu, offset:0x%llx, size:0x%llx\n"), *(_QWORD *)v239, v54, v227, v53);
        *(_QWORD *)__fd = v62;
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1369);
        v57 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v56;
          _os_log_impl(&dword_20A95C000, v57, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
        }
        v62 = *(_QWORD *)__fd;
        if (v56)
          CFRelease(v56);
      }
      if (v54)
      {
        v51 = 1;
        v41 = theArray;
        goto LABEL_126;
      }
      if (v226 <= v227)
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1372);
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          v65 = CFStringCreateWithFormat(alloc, 0, CFSTR("Invalid chunk, ftRowId:%llu, ctRowId:%llu, chunkOffset:0x%llx, truncateOffset:0x%llx\n"), __offseta, *(_QWORD *)v239, v227, v226);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1377);
          v66 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
LABEL_158:
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)&buf[4] = v65;
            _os_log_impl(&dword_20A95C000, v66, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
          }
LABEL_159:
          if (v65)
            CFRelease(v65);
        }
LABEL_161:
        v44 = 0;
        v45 = 0xFFFFFFFFLL;
LABEL_162:
        v32 = __offseta;
        goto LABEL_163;
      }
      v58 = CFNumberCreate(0, kCFNumberLongLongType, v239);
      if (!v58)
        goto LABEL_161;
      v59 = v58;
      CFArrayAppendValue(theArray, v58);
      CFRelease(v59);
      v62 += v55;
      v60 = CS_sqlite3_step((uint64_t *)v43);
      v63 = v227;
      v52 = v227;
    }
    while ((_DWORD)v60 == 100);
    v61 = v60;
    v32 = __offseta;
    v41 = theArray;
    v51 = 1;
LABEL_117:
    v226 = v63;
    if ((v61 - 102) <= 0xFFFFFFFD)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1380);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        v64 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        v65 = CFStringCreateWithFormat(alloc, 0, CFSTR("sqlite3_step returned: %d %s\n"), v61, v64);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1383);
        v66 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          goto LABEL_158;
        goto LABEL_159;
      }
LABEL_76:
      v44 = 0;
      v45 = 0xFFFFFFFFLL;
      goto LABEL_77;
    }
LABEL_126:
    v67 = v51;
    __fda = v62;
    _CSFinishPreparedStatement((uint64_t *)v43);
    v68 = CFArrayGetCount(v41);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1386);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      v69 = CFStringCreateWithFormat(alloc, 0, CFSTR("chunkCount:%u, truncateOffset:0x%llx, freeSpace:%llu\n"), v68, v226, v62);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1391);
      v70 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v69;
        _os_log_impl(&dword_20A95C000, v70, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v69)
        CFRelease(v69);
    }
    if (v68)
      v71 = 0;
    else
      v71 = v67;
    if (v71)
    {
      v43 = 0;
LABEL_140:
      v45 = 0;
      v44 = 0;
      goto LABEL_162;
    }
    v228 = v68;
    v43 = _CSPrepareStatement(a1, CFSTR("DELETE FROM CSChunkTable WHERE ct_rowid = ?"), "DELETE FROM CSChunkTable WHERE ct_rowid = ?");
    v32 = __offseta;
    v41 = theArray;
    if (!v43 || _CSBeginTransactionSqlRc(a1))
      goto LABEL_76;
    if (v228 < 1)
    {
      v72 = 0;
      goto LABEL_175;
    }
    v72 = 0;
    while (1)
    {
      v73 = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, v72);
      *(_QWORD *)v239 = 0;
      if (!CFNumberGetValue(v73, kCFNumberLongLongType, v239))
        goto LABEL_150;
      if (sqlite3_bind_int64(v43[2], 1, *(sqlite3_int64 *)v239))
        goto LABEL_174;
      v74 = CS_sqlite3_step((uint64_t *)v43);
      if ((_DWORD)v74 != 101)
        break;
      if (sqlite3_reset(v43[2]))
        goto LABEL_174;
      if (sqlite3_clear_bindings(v43[2]))
        goto LABEL_175;
LABEL_150:
      if (v228 == ++v72)
      {
        _CSFinishPreparedStatement((uint64_t *)v43);
        goto LABEL_176;
      }
    }
    v75 = v74;
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1397);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v76 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
      v77 = CFStringCreateWithFormat(alloc, 0, CFSTR("sqlite3_step error: %d, %s"), v75, v76);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1402);
      v78 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v77;
        _os_log_impl(&dword_20A95C000, v78, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v77)
        CFRelease(v77);
    }
LABEL_174:
    v32 = __offseta;
LABEL_175:
    _CSFinishPreparedStatement((uint64_t *)v43);
    if (v72 == v228)
    {
LABEL_176:
      if (_CSEndTransactionSqlRc(a1))
        goto LABEL_177;
      v79 = truncateStorageFile(a1, v32, v226, __fda, __fda);
      v43 = 0;
      if (v79)
        v44 = 0;
      else
        v44 = __fda;
      if (v79)
        v45 = 0xFFFFFFFFLL;
      else
        v45 = 0;
    }
    else
    {
LABEL_177:
      _CSRollbackTransactionSqlRc(a1);
      v43 = 0;
      v44 = 0;
      v45 = 0xFFFFFFFFLL;
    }
LABEL_163:
    v41 = theArray;
LABEL_77:
    _CSFinishPreparedStatement((uint64_t *)v43);
    CFRelease(v41);
    v33 = new_ringing + 1792;
LABEL_79:
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1405);
    if (os_log_type_enabled((os_log_t)v33[305], OS_LOG_TYPE_DEBUG))
    {
      v46 = CFStringCreateWithFormat(alloc, 0, CFSTR("ftRowId:%llu, totalFreeSpace:%llu, rc:%d\n"), v32, v44, v45);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1410);
      v47 = v33[305];
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v46;
        _os_log_impl(&dword_20A95C000, v47, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v46)
        CFRelease(v46);
    }
    v48 = v30 - v44;
    if (v30 < v44)
      v48 = 0;
    if ((_DWORD)v45)
      v49 = 0;
    else
      v49 = v44;
    v234 += v49;
    if (!(_DWORD)v45)
      v30 = v48;
    v4 = new_ringing + 1792;
LABEL_96:
    v23 = 0;
    v19 = 0;
    ++v29;
  }
  while (v29 < Count && v30);
LABEL_189:
  _CSFinishPreparedStatement((uint64_t *)v19);
  v5 = &new_ringing[224];
  v8 = v234;
LABEL_190:
  CFRelease(v17);
LABEL_191:
  if (a2 >= v8)
    v80 = a2 - v8;
  else
    v80 = 0;
  if (v4[294] != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_384);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
  {
    v81 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("removeUnreferencedChunks freed %llu bytes, totalFreeSpace:%llu, spaceNeeded:%llu, rc:%d\n"), v8, v8, v80, v23);
    if (v4[294] != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_389);
    v82 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v81;
      _os_log_impl(&dword_20A95C000, v82, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v81)
      CFRelease(v81);
  }
  if (v8 >= a2 || *(_DWORD *)(a1 + 256))
  {
LABEL_13:
    if (v4[294] != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_400_0);
    goto LABEL_15;
  }
  if (*(_BYTE *)(a1 + 17))
    _CSCompactStorage_cold_4();
  v83 = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  if (!v83)
  {
    v90 = 0;
    v91 = 0xFFFFFFFFLL;
    goto LABEL_522;
  }
  v84 = v83;
  v235 = v8;
  v85 = _CSPrepareStatement(a1, CFSTR("SELECT ft_rowid FROM CSStorageFileTable WHERE (ft_pspace > 0 AND ft_status IS NULL) ORDER BY ft_pspace DESC"), "SELECT ft_rowid FROM CSStorageFileTable WHERE (ft_pspace > 0 AND ft_status IS NULL) ORDER BY ft_pspace DESC");
  if (!v85)
  {
    v90 = 0;
    v91 = 0xFFFFFFFFLL;
    goto LABEL_521;
  }
  v86 = v85;
  while (2)
  {
    v87 = CS_sqlite3_step((uint64_t *)v86);
    if ((_DWORD)v87 != 100)
    {
      v92 = v87;
      if ((_DWORD)v87 != 101)
      {
        if (v4[294] != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1534);
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          v93 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          v94 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
          v95 = CFStringCreateWithFormat(v93, 0, CFSTR("sqlite3_step returned: %d %s\n"), v92, v94);
          if (v4[294] != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1536);
          v96 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)&buf[4] = v95;
            _os_log_impl(&dword_20A95C000, v96, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
          }
          if (v95)
            CFRelease(v95);
        }
      }
      _CSFinishPreparedStatement((uint64_t *)v86);
      alloca = CFArrayGetCount(v84);
      if (alloca < 1)
      {
        v90 = 0;
LABEL_518:
        v86 = 0;
        goto LABEL_519;
      }
      v97 = 0;
      v90 = 0;
      v229 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v233 = v80;
      while (1)
      {
        if (*(_DWORD *)(a1 + 256))
          goto LABEL_518;
        v98 = (const __CFNumber *)CFArrayGetValueAtIndex(v84, v97);
        v236 = 0;
        if (CFNumberGetValue(v98, kCFNumberLongLongType, &v236))
          break;
LABEL_483:
        v91 = 0;
        v86 = 0;
        if (++v97 >= alloca || !v233)
          goto LABEL_520;
      }
      v99 = v236;
      v238 = 0;
      if (*(_BYTE *)(a1 + 17))
        _CSCompactStorage_cold_3();
      if ((CSAttemptAutomaticFirstAidForStorageFile(a1, v236) & 1) != 0)
      {
        _CSCloseCachedStorageFile(a1, v99, 0);
        bzero(buf, 0x400uLL);
        if (!__CSCreateStoragePath(a1, v99, 0, buf, 0x400uLL))
        {
LABEL_247:
          LODWORD(v106) = 0;
LABEL_248:
          LODWORD(v109) = -1;
LABEL_249:
          if (v238)
          {
            v110 = *((_QWORD *)v238 + 2);
            _CSCloseStorageFile(a1, v238, 0);
            if (v110)
            {
              bzero(v239, 0x400uLL);
              if (__CSCreateStoragePath(a1, v110, 0, v239, 0x400uLL))
                unlink(v239);
              _CSRemoveStorageFileFromDb((uint64_t *)a1, v110);
            }
          }
          if ((_DWORD)v106 == 13 && (int)v109 < 0)
            v112 = 28;
          else
            v112 = v109;
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1705);
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            v113 = CFStringCreateWithFormat(v229, 0, CFSTR("There was a problem compacting SF ft_rowid:%lld, rc:%d\n"), v99, v112);
            if (CK_DEFAULT_LOG_BLOCK_1 != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1710);
            v114 = CK_DEFAULT_LOG_INTERNAL_1;
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v239 = 138543362;
              *(_QWORD *)&v239[4] = v113;
              _os_log_impl(&dword_20A95C000, v114, OS_LOG_TYPE_ERROR, "%{public}@", v239, 0xCu);
            }
            if (v113)
              CFRelease(v113);
          }
          if ((_DWORD)v112)
          {
            if ((_DWORD)v112 == 28)
            {
              v86 = 0;
              v91 = 28;
              v4 = new_ringing + 1792;
              v5 = new_ringing + 1792;
              goto LABEL_520;
            }
            goto LABEL_482;
          }
LABEL_479:
          v90 += v112;
          v201 = v233 - v112;
          if (v233 < v112)
            v201 = 0;
          v233 = v201;
LABEL_482:
          v4 = new_ringing + 1792;
          v5 = new_ringing + 1792;
          goto LABEL_483;
        }
        v100 = open(buf, 2, 384);
        if ((_DWORD)v100 != -1)
        {
          v101 = v100;
          memset(&valuePtr, 0, sizeof(valuePtr));
          if (fstat(v100, &valuePtr) == -1)
          {
            if (v4[294] != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1561);
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
            {
              __fdb = v101;
              v117 = __error();
              v118 = strerror(*v117);
              v119 = CFStringCreateWithFormat(v229, 0, CFSTR("fstat failed for \"%s\": %s"), buf, v118);
              if (v4[294] != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1564);
              v120 = CK_DEFAULT_LOG_INTERNAL_1;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v239 = 138543362;
                *(_QWORD *)&v239[4] = v119;
                _os_log_impl(&dword_20A95C000, v120, OS_LOG_TYPE_ERROR, "%{public}@", v239, 0xCu);
              }
              if (v119)
                CFRelease(v119);
              v104 = 0;
              LODWORD(v106) = 0;
              LODWORD(v101) = __fdb;
              goto LABEL_299;
            }
            v104 = 0;
          }
          else
          {
            st_size = valuePtr.st_size;
            v103 = _CSPrepareStatement(a1, CFSTR("SELECT CSChunkTable.ct_rowid, CSChunkTable.dataLen, CSChunkTable.offset FROM CSStorageFileTable INNER JOIN CSChunkTable on CSChunkTable.ft_rowid = CSStorageFileTable.ft_rowid WHERE CSChunkTable.ft_rowid = ? AND CSChunkTable.refCount > 0 AND CSChunkTable.location = ? AND CSStorageFileTable.ft_status IS NULL ORDER BY CSChunkTable.refCount DESC"), "SELECT CSChunkTable.ct_rowid, CSChunkTable.dataLen, CSChunkTable.offset FROM CSStorageFileTable INNER JOIN CSChunkTable on CSChunkTable.ft_rowid = CSStorageFileTable.ft_rowid WHERE CSChunkTable.ft_rowid = ? AND CSChunkTable.refCount > 0 AND CSChunkTable.location = ? AND CSStorageFileTable.ft_status IS NULL ORDER BY CSChunkTable.refCount DESC");
            v104 = v103;
            if (v103)
            {
              v213 = st_size;
              v105 = sqlite3_bind_int64(v103[2], 1, v99);
              if (v105 || (v105 = sqlite3_bind_int(v104[2], 2, 115)) != 0)
              {
                LODWORD(v106) = v105;
LABEL_299:
                _CSFinishPreparedStatement((uint64_t *)v104);
                close(v101);
                goto LABEL_248;
              }
              v211 = v104;
              __offsetb = 0;
              *(_QWORD *)__fdc = v101;
              v209 = 0;
              v123 = 0;
              v214 = 0;
              v124 = 0;
              while (1)
              {
                cf = v123;
                v125 = (uint64_t *)v211;
                v126 = CS_sqlite3_step((uint64_t *)v211);
                if ((_DWORD)v126 != 100)
                  break;
                v127 = sqlite3_column_int64(v211[2], 0);
                v128 = sqlite3_column_int(v211[2], 1);
                v129 = sqlite3_column_int64(v211[2], 2);
                v130 = v129;
                if (!v128)
                {
                  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1570);
                  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                  {
                    v151 = CFStringCreateWithFormat(v229, 0, CFSTR("Bad chunk in \"%s\", ctRowId:%llu, chunkOffset:0x%llx, chunkSize:0x%llx\n"), buf, v127, v130, 0);
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1575);
                    v152 = CK_DEFAULT_LOG_INTERNAL_1;
                    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)v239 = 138543362;
                      *(_QWORD *)&v239[4] = v151;
                      _os_log_impl(&dword_20A95C000, v152, OS_LOG_TYPE_ERROR, "%{public}@", v239, 0xCu);
                    }
                    if (v151)
                      CFRelease(v151);
                  }
                  goto LABEL_379;
                }
                v131 = v128;
                __nbyte = v128;
                v210 = v127;
                if (v129 > 0x1400064)
                {
                  v153 = "offset_bounded_by_storage_file_length";
                  goto LABEL_358;
                }
                v132 = __fdc[0];
                if (v131 > 0x500019)
                {
                  v153 = "length_bounded_by_slot_size";
LABEL_358:
                  v154 = xpc_string_create("compact_source_invalid");
                  __offsetc = (off_t)v153;
                  v155 = xpc_string_create(v153);
                  keys = xmmword_24C34CB48;
                  values = v154;
                  v156 = v154;
                  v246 = v155;
                  v157 = xpc_dictionary_create((const char *const *)&keys, &values, 2uLL);
                  analytics_send_event();
                  xpc_release(v156);
                  xpc_release(v155);
                  xpc_release(v157);
                  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1582);
                  v158 = CK_DEFAULT_LOG_INTERNAL_1;
                  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_FAULT))
                  {
                    *(_DWORD *)v239 = 136316162;
                    *(_QWORD *)&v239[4] = buf;
                    *(_WORD *)&v239[12] = 2048;
                    *(_QWORD *)&v239[14] = v210;
                    *(_WORD *)&v239[22] = 2048;
                    v240 = v130;
                    v241 = 2048;
                    v242 = (const char *)__nbyte;
                    v243 = 2080;
                    v244 = __offsetc;
                    v159 = v158;
                    v160 = "Bad chunk offset/size in \"%s\", ctRowId:%llu, chunkOffset:0x%llx, chunkSize:0x%llx (%s violated)";
                    v161 = 52;
LABEL_366:
                    _os_log_impl(&dword_20A95C000, v159, OS_LOG_TYPE_FAULT, v160, v239, v161);
                  }
LABEL_379:
                  LODWORD(v109) = -1;
                  goto LABEL_380;
                }
                if (v129 + v131 > 0x1400064)
                {
                  v153 = "chunk_contained_in_storage_file";
                  goto LABEL_358;
                }
                v133 = __offsetb + v131;
                if ((unint64_t)(__offsetb + v131) > 0x1400064)
                {
                  v162 = xpc_string_create("compact_destination_invalid");
                  v163 = xpc_string_create("chunk_contained_in_storage_file");
                  keys = xmmword_24C34CB48;
                  values = v162;
                  v246 = v163;
                  v164 = xpc_dictionary_create((const char *const *)&keys, &values, 2uLL);
                  analytics_send_event();
                  xpc_release(v162);
                  xpc_release(v163);
                  xpc_release(v164);
                  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1587);
                  v165 = CK_DEFAULT_LOG_INTERNAL_1;
                  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_FAULT))
                  {
                    *(_DWORD *)v239 = 134218754;
                    *(_QWORD *)&v239[4] = v210;
                    *(_WORD *)&v239[12] = 2048;
                    *(_QWORD *)&v239[14] = __offsetb;
                    *(_WORD *)&v239[22] = 2048;
                    v240 = __nbyte;
                    v241 = 2080;
                    v242 = "chunk_contained_in_storage_file";
                    v159 = v165;
                    v160 = "Bad chunk offset/size, ctRowId:%llu, dstOffset:0x%llx, chunkSize:0x%llx (%s violated)";
                    v161 = 42;
                    goto LABEL_366;
                  }
                  goto LABEL_379;
                }
                v134 = v214;
                if (!v214)
                {
                  v134 = malloc_type_malloc(0x500019uLL, 0xB2A00BD5uLL);
                  if (!v134)
                  {
                    v214 = 0;
                    LODWORD(v109) = -1;
                    LODWORD(v106) = 100;
                    goto LABEL_382;
                  }
                }
                v214 = v134;
                v135 = pread(__fdc[0], v134, __nbyte, v130);
                if (v135 != __nbyte)
                {
                  v166 = v135;
                  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1591);
                  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                  {
                    v167 = "Read size doesn't match request";
                    if (v166 < 0)
                    {
                      v168 = __error();
                      v167 = strerror(*v168);
                    }
                    v169 = CFStringCreateWithFormat(v229, 0, CFSTR("pread(%d, 0x%llx, 0x%llx) failed: %s, read %lld bytes, file is 0x%llx(%lld) bytes long\n"), *(_QWORD *)__fdc, __nbyte, v130, v167, v166, v213, v213);
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1597);
                    v170 = CK_DEFAULT_LOG_INTERNAL_1;
                    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)v239 = 138543362;
                      *(_QWORD *)&v239[4] = v169;
                      _os_log_impl(&dword_20A95C000, v170, OS_LOG_TYPE_ERROR, "%{public}@", v239, 0xCu);
                    }
                    if (v169)
                      CFRelease(v169);
                  }
                  CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "DELETE FROM CSChunkTable WHERE ct_rowid = %lld", v210);
                  goto LABEL_379;
                }
                v136 = v238;
                if (!v238)
                {
                  v137 = _CSCreateStorageFile(a1, &v238);
                  if ((_DWORD)v137)
                  {
                    v109 = v137;
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1601);
                    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                    {
                      v174 = CFStringCreateWithFormat(v229, 0, CFSTR("_CSCreateStorageFile failed, rc:%d\n"), v109);
                      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1606);
                      v175 = CK_DEFAULT_LOG_INTERNAL_1;
                      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                      {
LABEL_456:
                        *(_DWORD *)v239 = 138543362;
                        *(_QWORD *)&v239[4] = v174;
                        _os_log_impl(&dword_20A95C000, v175, OS_LOG_TYPE_ERROR, "%{public}@", v239, 0xCu);
                      }
LABEL_457:
                      if (v174)
                        CFRelease(v174);
                    }
LABEL_380:
                    LODWORD(v106) = 100;
LABEL_381:
                    v132 = __fdc[0];
LABEL_382:
                    _CSFinishPreparedStatement((uint64_t *)v211);
                    close(v132);
                    if (v214)
                      free(v214);
                    if (cf)
                      CFRelease(cf);
                    goto LABEL_249;
                  }
                  v136 = v238;
                  v209 = *((_QWORD *)v238 + 2);
                }
                v138 = pwrite(v136[2], v214, __nbyte, __offsetb);
                if (v138 < 0)
                {
                  LODWORD(v109) = *__error();
                  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1609);
                  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                  {
                    v171 = *__error();
                    v172 = __error();
                    v173 = strerror(*v172);
                    v174 = CFStringCreateWithFormat(v229, 0, CFSTR("pwrite(%d, sz:0x%llx, o:0x%llx) failed: %d, %s\n"), *(_QWORD *)__fdc, __nbyte, __offsetb, v171, v173);
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1614);
                    v175 = CK_DEFAULT_LOG_INTERNAL_1;
                    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                      goto LABEL_456;
                    goto LABEL_457;
                  }
                  goto LABEL_380;
                }
                v139 = v138;
                v123 = cf;
                if (v138 != __nbyte)
                {
                  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1617);
                  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                  {
                    v176 = CFStringCreateWithFormat(v229, 0, CFSTR("pwrite(%d, sz:0x%llx, o:0x%llx) failed: wrote %lld bytes\n"), *(_QWORD *)__fdc, __nbyte, __offsetb, v139);
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1622);
                    v177 = CK_DEFAULT_LOG_INTERNAL_1;
                    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)v239 = 138543362;
                      *(_QWORD *)&v239[4] = v176;
                      _os_log_impl(&dword_20A95C000, v177, OS_LOG_TYPE_ERROR, "%{public}@", v239, 0xCu);
                    }
                    if (v176)
                      CFRelease(v176);
                  }
                  LODWORD(v109) = 28;
                  goto LABEL_380;
                }
                if (!cf)
                {
                  v123 = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
                  if (!v123)
                  {
                    cf = 0;
LABEL_487:
                    LODWORD(v109) = -1;
                    LODWORD(v106) = 100;
                    goto LABEL_381;
                  }
                }
                if (!v209)
                  _CSCompactStorage_cold_2();
                *(_QWORD *)v239 = v209;
                *(_QWORD *)&v239[8] = v210;
                *(_QWORD *)&v239[16] = __offsetb;
                v140 = CFDataCreate(0, v239, 24);
                if (!v140)
                {
                  cf = v123;
                  goto LABEL_487;
                }
                v141 = v140;
                CFArrayAppendValue(v123, v140);
                CFRelease(v141);
                v124 += __nbyte;
                __offsetb = v133;
              }
              v106 = v126;
              if ((_DWORD)v126 != 101)
              {
                if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                  dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1626);
                v125 = (uint64_t *)v211;
                if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                {
                  v142 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
                  v143 = CFStringCreateWithFormat(v229, 0, CFSTR("sqlite3_step error: %d, %s"), v106, v142);
                  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1629);
                  v144 = CK_DEFAULT_LOG_INTERNAL_1;
                  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)v239 = 138543362;
                    *(_QWORD *)&v239[4] = v143;
                    _os_log_impl(&dword_20A95C000, v144, OS_LOG_TYPE_ERROR, "%{public}@", v239, 0xCu);
                  }
                  v125 = (uint64_t *)v211;
                  if (v143)
                    CFRelease(v143);
                }
              }
              _CSFinishPreparedStatement(v125);
              if (v214)
                free(v214);
              if (cf)
              {
                if (v124)
                {
                  v145 = *((_QWORD *)v238 + 3);
                  v146 = v145 >= v124;
                  v147 = v145 - v124;
                  if (!v146)
                    v147 = 0;
                  v106 = CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "UPDATE CSStorageFileTable SET ft_space = %lld, ft_pspace = 0 WHERE ft_rowid = %lld", v147, *((_QWORD *)v238 + 2));
                  if ((_DWORD)v106)
                  {
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1641);
                    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                    {
                      v148 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
                      v149 = CFStringCreateWithFormat(v229, 0, CFSTR("CSsql_do error: %d, %s"), v106, v148);
                      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1644);
                      v150 = CK_DEFAULT_LOG_INTERNAL_1;
                      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)v239 = 138543362;
                        *(_QWORD *)&v239[4] = v149;
                        _os_log_impl(&dword_20A95C000, v150, OS_LOG_TYPE_ERROR, "%{public}@", v239, 0xCu);
                      }
                      if (v149)
                        CFRelease(v149);
                    }
LABEL_513:
                    v211 = 0;
LABEL_514:
                    v214 = 0;
                    LODWORD(v109) = -1;
                    goto LABEL_381;
                  }
                }
                v211 = _CSPrepareStatement(a1, CFSTR("UPDATE CSChunkTable SET offset = ?, ft_rowid = ? WHERE ct_rowid = ?"), "UPDATE CSChunkTable SET offset = ?, ft_rowid = ? WHERE ct_rowid = ?");
                if (!v211)
                  goto LABEL_513;
                if (_CSBeginTransactionSqlRc(a1))
                  goto LABEL_514;
                __offsetd = CFArrayGetCount(cf);
                if (__offsetd < 1)
                {
                  v191 = 0;
                }
                else
                {
                  v191 = 0;
                  while (1)
                  {
                    v192 = (const __CFData *)CFArrayGetValueAtIndex(cf, v191);
                    BytePtr = (sqlite3_int64 *)CFDataGetBytePtr(v192);
                    sqlite3_bind_int64(v211[2], 1, BytePtr[2]);
                    sqlite3_bind_int64(v211[2], 2, *BytePtr);
                    sqlite3_bind_int64(v211[2], 3, BytePtr[1]);
                    v194 = CS_sqlite3_step((uint64_t *)v211);
                    if ((_DWORD)v194 != 101)
                      break;
                    v195 = sqlite3_reset(v211[2]);
                    if (v195 || (v195 = sqlite3_clear_bindings(v211[2])) != 0)
                    {
                      LODWORD(v106) = v195;
                      goto LABEL_499;
                    }
                    if (__offsetd == ++v191)
                    {
                      LODWORD(v106) = 0;
                      v191 = __offsetd;
                      goto LABEL_499;
                    }
                  }
                  v106 = v194;
                  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1650);
                  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                  {
                    v202 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
                    __nbytea = CFStringCreateWithFormat(v229, 0, CFSTR("sqlite3_step error: %d, %s"), v106, v202);
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1653);
                    v203 = CK_DEFAULT_LOG_INTERNAL_1;
                    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)v239 = 138543362;
                      *(_QWORD *)&v239[4] = __nbytea;
                      _os_log_impl(&dword_20A95C000, v203, OS_LOG_TYPE_ERROR, "%{public}@", v239, 0xCu);
                    }
                    if (__nbytea)
                      CFRelease(__nbytea);
                  }
                }
LABEL_499:
                _CSFinishPreparedStatement((uint64_t *)v211);
                if ((_CSSyncStorageFile(a1, (uint64_t)v238, 1) & 1) == 0)
                {
                  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1656);
                  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                  {
                    v204 = CFStringCreateWithFormat(v229, 0, CFSTR("failed to sync storage file while relocating chunks in %s"), "_CSRelocateStorageFileChunks");
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1661);
                    v205 = CK_DEFAULT_LOG_INTERNAL_1;
                    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)v239 = 138543362;
                      *(_QWORD *)&v239[4] = v204;
                      _os_log_impl(&dword_20A95C000, v205, OS_LOG_TYPE_ERROR, "%{public}@", v239, 0xCu);
                    }
                    if (v204)
                      CFRelease(v204);
                  }
LABEL_512:
                  _CSRollbackTransactionSqlRc(a1);
                  goto LABEL_513;
                }
                if (v191 != __offsetd)
                  goto LABEL_512;
                LODWORD(v106) = _CSEndTransactionSqlRc(a1);
                if ((_DWORD)v106)
                  goto LABEL_512;
                CFRelease(cf);
                _CSCloseStorageFile(a1, v238, 0);
                v238 = 0;
              }
              else
              {
                if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                  dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1632);
                if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
                {
LABEL_414:
                  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
                  {
                    v180 = CFStringCreateWithFormat(v229, 0, CFSTR("Removing SF \"%s\"\n"), buf);
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1669);
                    v181 = CK_DEFAULT_LOG_INTERNAL_1;
                    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)v239 = 138543362;
                      *(_QWORD *)&v239[4] = v180;
                      _os_log_impl(&dword_20A95C000, v181, OS_LOG_TYPE_DEBUG, "%{public}@", v239, 0xCu);
                    }
                    if (v180)
                      CFRelease(v180);
                  }
                  if (unlink(buf))
                  {
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1672);
                    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                    {
                      v182 = __error();
                      v183 = strerror(*v182);
                      v184 = CFStringCreateWithFormat(v229, 0, CFSTR("unlink failed for \"%s\": %s\n"), buf, v183);
                      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1677);
                      v185 = CK_DEFAULT_LOG_INTERNAL_1;
                      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)v239 = 138543362;
                        *(_QWORD *)&v239[4] = v184;
                        _os_log_impl(&dword_20A95C000, v185, OS_LOG_TYPE_ERROR, "%{public}@", v239, 0xCu);
                      }
                      if (v184)
                        CFRelease(v184);
                    }
                  }
                  close(__fdc[0]);
                  v186 = CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "DELETE FROM CSChunkTable WHERE ft_rowid = %lld", v99);
                  if ((_DWORD)v186)
                  {
                    v187 = v186;
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1680);
                    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                      goto LABEL_469;
                    v188 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
                    v189 = CFStringCreateWithFormat(v229, 0, CFSTR("sqlite3_step error: %d (%s)"), v187, v188);
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1685);
                    v190 = CK_DEFAULT_LOG_INTERNAL_1;
                    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                    {
LABEL_467:
                      if (v189)
                        CFRelease(v189);
LABEL_469:
                      v112 = v213 - v124;
                      if (v213 < v124)
                        _CSCompactStorage_cold_1();
                      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1697);
                      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
                      {
                        v199 = CFStringCreateWithFormat(v229, 0, CFSTR("fileSize:%llu, totalMoved:%llu\n"), v213, v124);
                        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1702);
                        v200 = CK_DEFAULT_LOG_INTERNAL_1;
                        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)v239 = 138543362;
                          *(_QWORD *)&v239[4] = v199;
                          _os_log_impl(&dword_20A95C000, v200, OS_LOG_TYPE_DEBUG, "%{public}@", v239, 0xCu);
                        }
                        if (v199)
                          CFRelease(v199);
                      }
                      goto LABEL_479;
                    }
                  }
                  else
                  {
                    v196 = CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "DELETE FROM CSStorageFileTable WHERE ft_rowid = %lld", v99);
                    if (!(_DWORD)v196)
                      goto LABEL_469;
                    v197 = v196;
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1688);
                    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                      goto LABEL_469;
                    v198 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
                    v189 = CFStringCreateWithFormat(v229, 0, CFSTR("CSsql_do error: %d (%s)"), v197, v198);
                    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1693);
                    v190 = CK_DEFAULT_LOG_INTERNAL_1;
                    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                      goto LABEL_467;
                  }
                  *(_DWORD *)v239 = 138543362;
                  *(_QWORD *)&v239[4] = v189;
                  _os_log_impl(&dword_20A95C000, v190, OS_LOG_TYPE_ERROR, "%{public}@", v239, 0xCu);
                  goto LABEL_467;
                }
                v178 = CFStringCreateWithFormat(v229, 0, CFSTR("Nothing was moved from SF ft_rowid:%lld\n"), v99);
                if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                  dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1637);
                v179 = CK_DEFAULT_LOG_INTERNAL_1;
                if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)v239 = 138543362;
                  *(_QWORD *)&v239[4] = v178;
                  _os_log_impl(&dword_20A95C000, v179, OS_LOG_TYPE_DEBUG, "%{public}@", v239, 0xCu);
                }
                if (v178)
                  CFRelease(v178);
              }
              if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1664);
              goto LABEL_414;
            }
          }
          LODWORD(v106) = 0;
          goto LABEL_299;
        }
        v115 = __error();
        v116 = v4[294];
        if (*v115 == 2)
        {
          if (v116 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1553);
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
            goto LABEL_247;
          v107 = CFStringCreateWithFormat(v229, 0, CFSTR("\"%s\" does not exist, ft_rowid:%llu\n"), buf, v99);
          if (v4[294] != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1558);
          v108 = CK_DEFAULT_LOG_INTERNAL_1;
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
            goto LABEL_245;
        }
        else
        {
          if (v116 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1545);
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
            goto LABEL_247;
          v121 = __error();
          v122 = strerror(*v121);
          v107 = CFStringCreateWithFormat(v229, 0, CFSTR("open failed for \"%s\", ft_rowid=%lld: %s"), buf, v99, v122);
          if (v4[294] != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1550);
          v108 = CK_DEFAULT_LOG_INTERNAL_1;
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
            goto LABEL_245;
        }
      }
      else
      {
        if (v4[294] != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1538);
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          goto LABEL_247;
        v107 = CFStringCreateWithFormat(v229, 0, CFSTR("Failed first aid check in %s, skipping chunk copying"), "_CSRelocateStorageFileChunks");
        if (v4[294] != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1542);
        v108 = CK_DEFAULT_LOG_INTERNAL_1;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          goto LABEL_245;
      }
      *(_DWORD *)v239 = 138543362;
      *(_QWORD *)&v239[4] = v107;
      _os_log_impl(&dword_20A95C000, v108, OS_LOG_TYPE_ERROR, "%{public}@", v239, 0xCu);
LABEL_245:
      if (v107)
        CFRelease(v107);
      goto LABEL_247;
    }
    if (!*(_DWORD *)(a1 + 256))
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)buf = sqlite3_column_int64(v86[2], 0);
      v88 = CFNumberCreate(0, kCFNumberLongLongType, buf);
      if (!v88)
      {
        v90 = 0;
        v91 = 0xFFFFFFFFLL;
        goto LABEL_520;
      }
      v89 = v88;
      CFArrayAppendValue(v84, v88);
      CFRelease(v89);
      continue;
    }
    break;
  }
  v90 = 0;
LABEL_519:
  v91 = 0;
LABEL_520:
  _CSFinishPreparedStatement((uint64_t *)v86);
LABEL_521:
  CFRelease(v84);
  v8 = v235;
LABEL_522:
  if (v4[294] != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_392);
  v8 += v90;
  if (os_log_type_enabled((os_log_t)v5[305], OS_LOG_TYPE_DEBUG))
  {
    v206 = v80 - v90;
    if (v80 < v90)
      v206 = 0;
    v207 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("copyReferencedChunks freed %llu bytes, totalFreeSpace:%llu, spaceNeeded:%llu, rc:%d\n"), v90, v8, v206, v91);
    if (v4[294] != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_397);
    v208 = v5[305];
    if (os_log_type_enabled(v208, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v207;
      _os_log_impl(&dword_20A95C000, v208, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v207)
      CFRelease(v207);
    goto LABEL_13;
  }
LABEL_15:
  if (os_log_type_enabled((os_log_t)v5[305], OS_LOG_TYPE_DEBUG))
  {
    v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("freeSpace:%llu\n"), v8);
    if (v4[294] != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_405);
    v10 = v5[305];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v9;
      _os_log_impl(&dword_20A95C000, v10, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v9)
      CFRelease(v9);
  }
  v11 = sqlite3_wal_checkpoint_v2(*(sqlite3 **)(a1 + 24), 0, 1, 0, 0);
  if (v11)
  {
    v12 = v11;
    if (v4[294] != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_408_0);
    v13 = v5[305];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
    {
      v14 = sqlite3_errstr(v12);
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "_CSCompactStorage";
      v249 = 2080;
      v250 = v14;
      _os_log_impl(&dword_20A95C000, v13, OS_LOG_TYPE_FAULT, "failed to checkpoint WAL in %s: %s", buf, 0x16u);
    }
  }
  return v8;
}

uint64_t _CSStoreChunks(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4, _QWORD *a5, uint64_t a6)
{
  CFMutableSetRef Mutable;
  __CFSet *v10;
  unsigned __int8 *v11;
  unint64_t v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFIndex Count;
  const void **v16;
  int v17;
  CFNumberRef *v18;
  CFStringRef v19;
  NSObject *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  CFStringRef v26;
  NSObject *v27;
  uint64_t v28;
  CFStringRef v29;
  NSObject *v30;
  sqlite3_stmt **v31;
  sqlite3_int64 insert_rowid;
  unsigned int v33;
  char v34;
  unsigned int v35;
  const __CFString *v36;
  const char *v37;
  CFStringRef v38;
  NSObject *v39;
  sqlite3_int64 v40;
  CFStringRef v41;
  sqlite3_int64 v42;
  CFStringRef v43;
  NSObject *v44;
  CFStringRef v45;
  NSObject *v46;
  NSObject *v47;
  int v48;
  const char *v49;
  xpc_object_t v50;
  xpc_object_t v51;
  xpc_object_t v52;
  NSObject *v53;
  uint64_t v54;
  unsigned int v55;
  const char *v56;
  CFStringRef v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  CFStringRef v62;
  NSObject *v63;
  CFStringRef v64;
  NSObject *v65;
  int v67;
  const __CFAllocator *alloc;
  uint64_t v71;
  uint8_t buf[4];
  CFStringRef v74;
  __int16 v75;
  int v76;
  __int16 v77;
  const char *v78;
  xpc_object_t values[2];
  char *keys[2];
  __int128 valuePtr;
  __int128 v82;
  _DWORD v83[8];
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  Mutable = CFSetCreateMutable(0, 0, MEMORY[0x24BDBD6B8]);
  if (Mutable)
  {
    v10 = Mutable;
    if (a3)
    {
      v11 = (unsigned __int8 *)(a2 + 84);
      v12 = a3;
      do
      {
        *(_QWORD *)&valuePtr = 0;
        if (_CSStorageFileForChunkSignature(a1, v11, 115, (sqlite3_int64 *)&valuePtr))
        {
          v13 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
          if (v13)
          {
            v14 = v13;
            CFSetAddValue(v10, v13);
            CFRelease(v14);
          }
        }
        v11 += a4;
        --v12;
      }
      while (v12);
    }
    Count = CFSetGetCount(v10);
    v16 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
    CFSetGetValues(v10, v16);
    v17 = 1;
    if (Count >= 1)
    {
      v18 = (CFNumberRef *)v16;
      do
      {
        *(_QWORD *)&valuePtr = 0;
        if (CFNumberGetValue(*v18, kCFNumberLongLongType, &valuePtr))
          v17 &= CSAttemptAutomaticFirstAidForStorageFile(a1, valuePtr);
        ++v18;
        --Count;
      }
      while (Count);
    }
    free(v16);
    CFRelease(v10);
    if ((v17 & 1) == 0)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_410);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        v19 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Failed first aid check in %s"), "_CSStoreChunks");
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_414);
        v20 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          LODWORD(valuePtr) = 138543362;
          *(_QWORD *)((char *)&valuePtr + 4) = v19;
          _os_log_impl(&dword_20A95C000, v20, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&valuePtr, 0xCu);
        }
        if (v19)
          CFRelease(v19);
      }
    }
  }
  if (_CSBeginTransactionSqlRc(a1))
  {
    v21 = 0;
    v22 = a5;
    goto LABEL_201;
  }
  _CSSetDirtyState(a1, 1);
  if (!a3)
  {
    v22 = a5;
    if (_CSEndTransactionSqlRc(a1))
    {
      v21 = 0;
      goto LABEL_200;
    }
    goto LABEL_205;
  }
  v21 = 0;
  v71 = a4;
  alloc = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v23 = &new_ringing[224];
  v22 = a5;
  v24 = a2;
  while (1)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1733);
    v25 = v24 + v21 * v71;
    if (os_log_type_enabled((os_log_t)v23[305], OS_LOG_TYPE_DEBUG))
    {
      v26 = CFStringCreateWithFormat(alloc, 0, CFSTR("o:0x%llx, sz:0x%x, (0x%x/%u/%llu)\n"), *(_QWORD *)(v25 + 72), *(unsigned int *)(v25 + 80), *(unsigned __int8 *)(v25 + 84), *(unsigned __int8 *)(v25 + 25), *(_QWORD *)(v25 + 16));
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1737);
      v27 = v23[305];
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(valuePtr) = 138543362;
        *(_QWORD *)((char *)&valuePtr + 4) = v26;
        _os_log_impl(&dword_20A95C000, v27, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)&valuePtr, 0xCu);
      }
      v23 = &new_ringing[224];
      if (v26)
        CFRelease(v26);
    }
    if (!*(_DWORD *)(v25 + 80))
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1740);
      if (os_log_type_enabled((os_log_t)v23[305], OS_LOG_TYPE_DEFAULT))
      {
        if (a6)
          v28 = *(_QWORD *)(a6 + 104);
        else
          v28 = 0;
        v29 = CFStringCreateWithFormat(alloc, 0, CFSTR("zero length chunk for file \"%s\"\n"), v28);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1745);
        v30 = v23[305];
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(valuePtr) = 138543362;
          *(_QWORD *)((char *)&valuePtr + 4) = v29;
          _os_log_impl(&dword_20A95C000, v30, OS_LOG_TYPE_DEFAULT, "%{public}@", (uint8_t *)&valuePtr, 0xCu);
        }
        v23 = &new_ringing[224];
        if (v29)
          CFRelease(v29);
      }
    }
    if (*(_BYTE *)(a1 + 17))
    {
      v31 = 0;
      insert_rowid = 0;
      goto LABEL_180;
    }
    if (a6 && *(_BYTE *)(a6 + 183))
      *(_QWORD *)(a6 + 528) = mach_absolute_time();
    insert_rowid = _CSTokenForChunkSignature(a1, (unsigned __int8 *)(v25 + 84), 115);
    if (insert_rowid)
    {
      v33 = _CSChunkIsInvalid(a1, insert_rowid);
      v34 = v33;
      v35 = v33;
      if (!a6)
        goto LABEL_60;
    }
    else
    {
      v35 = 0;
      v34 = 1;
      if (!a6)
        goto LABEL_60;
    }
    if (*(_BYTE *)(a6 + 183))
      *(_QWORD *)(a6 + 536) += mach_absolute_time() - *(_QWORD *)(a6 + 528);
    if (v35)
    {
      v36 = CFSTR("UPDATE CSChunkTable SET cid = ?, ft_rowid = ?, offset = ?, dataLen = ?, refCount = ?, timestamp = ?, location = ? WHERE ct_rowid = ?");
      v37 = "UPDATE CSChunkTable SET cid = ?, ft_rowid = ?, offset = ?, dataLen = ?, refCount = ?, timestamp = ?, locatio"
            "n = ? WHERE ct_rowid = ?";
    }
    else
    {
      v36 = CFSTR("INSERT INTO CSChunkTable (cid, ft_rowid, offset, dataLen, refCount, timestamp, location) VALUES (?, ?, ?, ?, ?, ?, ?)");
      v37 = "INSERT INTO CSChunkTable (cid, ft_rowid, offset, dataLen, refCount, timestamp, location) VALUES (?, ?, ?, ?, ?, ?, ?)";
    }
    v31 = _CSPrepareStatement(a1, v36, v37);
    if (!v31)
      goto LABEL_99;
LABEL_60:
    if (a6 && *(_BYTE *)(a6 + 183))
      *(_QWORD *)(a6 + 528) = mach_absolute_time();
    if ((v34 & 1) != 0)
    {
      if (v35)
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1759);
        if (os_log_type_enabled((os_log_t)v23[305], OS_LOG_TYPE_DEBUG))
        {
          v38 = CFStringCreateWithFormat(alloc, 0, CFSTR("Fixing corruption in chunk %llu by storing chunk: o:0x%llx, sz:0x%x\n"), insert_rowid, *(_QWORD *)(v25 + 72), *(unsigned int *)(v25 + 80));
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1764);
          v39 = v23[305];
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(valuePtr) = 138543362;
            *(_QWORD *)((char *)&valuePtr + 4) = v38;
            _os_log_impl(&dword_20A95C000, v39, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)&valuePtr, 0xCu);
          }
          v23 = &new_ringing[224];
          if (v38)
            CFRelease(v38);
        }
        v40 = _CSRefCountForChunkWithRowID(a1, insert_rowid);
        if ((v40 & 0x8000000000000000) == 0)
        {
          v41 = (CFStringRef)v40;
          if (v40)
          {
            v42 = v40;
            do
            {
              _CSReleaseChunkForSignature(a1, (_BYTE *)(v25 + 84));
              --v42;
            }
            while (v42);
          }
          goto LABEL_124;
        }
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1775);
        if (!os_log_type_enabled((os_log_t)v23[305], OS_LOG_TYPE_ERROR))
        {
LABEL_123:
          v41 = 0;
          goto LABEL_124;
        }
        v41 = CFStringCreateWithFormat(alloc, 0, CFSTR("Could not retrieve retain count for chunk with ct_rowid %llu"), insert_rowid);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1780);
        v47 = v23[305];
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        {
          LODWORD(valuePtr) = 138543362;
          *(_QWORD *)((char *)&valuePtr + 4) = v41;
          _os_log_impl(&dword_20A95C000, v47, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&valuePtr, 0xCu);
        }
        if (v41)
        {
          CFRelease(v41);
          goto LABEL_123;
        }
LABEL_124:
        if (a6)
        {
LABEL_125:
          if (*(_BYTE *)(a6 + 183))
          {
            *(_QWORD *)(a6 + 536) += mach_absolute_time() - *(_QWORD *)(a6 + 528);
            if (*(_BYTE *)(a6 + 183))
              *(_QWORD *)(a6 + 512) = mach_absolute_time();
          }
          v82 = 0u;
          memset(v83, 0, 25);
          valuePtr = 0u;
          v48 = _StoreChunk(a1, (unsigned int *)v25, (uint64_t)&valuePtr);
          if (*(_BYTE *)(a6 + 183))
          {
            *(_QWORD *)(a6 + 520) += mach_absolute_time() - *(_QWORD *)(a6 + 512);
            if (*(_BYTE *)(a6 + 183))
            {
              *(_QWORD *)(a6 + 528) = mach_absolute_time();
              goto LABEL_131;
            }
            if (v48)
            {
LABEL_137:
              v49 = "offset_bounded_by_storage_file_length";
              if (*((_QWORD *)&v82 + 1) > 0x1400064uLL
                || (v49 = "length_bounded_by_slot_size", v83[2] > 0x500019u)
                || (v49 = "chunk_contained_in_storage_file", *((_QWORD *)&v82 + 1) + (unint64_t)v83[2] > 0x1400064))
              {
                v50 = xpc_string_create("chunk_insert_invalid");
                v51 = xpc_string_create(v49);
                *(_OWORD *)keys = xmmword_24C34CB48;
                values[0] = v50;
                values[1] = v51;
                v52 = xpc_dictionary_create((const char *const *)keys, values, 2uLL);
                analytics_send_event();
                xpc_release(v50);
                xpc_release(v51);
                xpc_release(v52);
                if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                  dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1784);
                v24 = a2;
                v53 = CK_DEFAULT_LOG_INTERNAL_1;
                if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_FAULT))
                {
                  *(_DWORD *)buf = 134218498;
                  v74 = (CFStringRef)*((_QWORD *)&v82 + 1);
                  v75 = 1024;
                  v76 = v83[2];
                  v77 = 2080;
                  v78 = v49;
                  _os_log_impl(&dword_20A95C000, v53, OS_LOG_TYPE_FAULT, "Bad chunk value(s): o:0x%llx, sz:0x%x (%s violated)", buf, 0x1Cu);
                }
                goto LABEL_178;
              }
              v67 = CKSchemeAndSignatureSize((_BYTE *)(v25 + 84));
              v54 = sqlite3_bind_blob(v31[2], 1, (const void *)(v25 + 84), v67, 0);
              v24 = a2;
              if ((_DWORD)v54)
                goto LABEL_156;
              v54 = sqlite3_bind_int(v31[2], 2, SHIDWORD(valuePtr));
              if ((_DWORD)v54)
                goto LABEL_156;
              v54 = sqlite3_bind_int64(v31[2], 3, *((sqlite3_int64 *)&v82 + 1));
              if ((_DWORD)v54)
                goto LABEL_156;
              v54 = sqlite3_bind_int(v31[2], 4, v67 + v83[2] + 4);
              if ((_DWORD)v54)
                goto LABEL_156;
              v54 = sqlite3_bind_int64(v31[2], 5, (sqlite3_int64)v41 + *(unsigned __int8 *)(v25 + 25));
              if ((_DWORD)v54)
                goto LABEL_156;
              v54 = sqlite3_bind_int64(v31[2], 6, *(sqlite3_int64 *)&v83[3]);
              if ((_DWORD)v54)
                goto LABEL_156;
              v54 = sqlite3_bind_int(v31[2], 7, 115);
              if ((_DWORD)v54)
                v55 = 0;
              else
                v55 = v35;
              if (v55 == 1)
                v54 = sqlite3_bind_int64(v31[2], 8, insert_rowid);
              if ((_DWORD)v54)
              {
LABEL_156:
                if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                  dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1787);
                if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                {
                  v56 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
                  v57 = CFStringCreateWithFormat(alloc, 0, CFSTR("sqlite3_bind failed: %s (%d)\n"), v56, v54);
                  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1790);
                  v58 = CK_DEFAULT_LOG_INTERNAL_1;
                  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 138543362;
                    v74 = v57;
                    _os_log_impl(&dword_20A95C000, v58, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
                  }
                  if (v57)
                    CFRelease(v57);
                }
LABEL_178:
                v23 = &new_ringing[224];
LABEL_179:
                v22 = a5;
                goto LABEL_180;
              }
              v59 = CS_sqlite3_step((uint64_t *)v31);
              if ((_DWORD)v59 == 101)
              {
                *(_BYTE *)(v25 + 24) = 1;
                v24 = a2;
                v23 = new_ringing + 1792;
                if ((v35 & 1) == 0)
                  insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 24));
                goto LABEL_179;
              }
              v60 = v59;
              if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1793);
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
              {
                v61 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
                v62 = CFStringCreateWithFormat(alloc, 0, CFSTR("sqlite3_step failed: %s (%d)\n"), v61, v60);
                if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                  dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1796);
                v63 = CK_DEFAULT_LOG_INTERNAL_1;
                if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138543362;
                  v74 = v62;
                  _os_log_impl(&dword_20A95C000, v63, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
                }
                if (v62)
                  CFRelease(v62);
              }
            }
          }
          else
          {
LABEL_131:
            if ((v48 & 1) != 0)
              goto LABEL_137;
          }
LABEL_177:
          v24 = a2;
          goto LABEL_178;
        }
      }
      else
      {
        if (a6)
        {
          if (*(_BYTE *)(a6 + 184))
          {
            if (CK_DEFAULT_LOG_BLOCK_1 != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1767);
            if (os_log_type_enabled((os_log_t)v23[305], OS_LOG_TYPE_DEBUG))
            {
              v45 = CFStringCreateWithFormat(alloc, 0, CFSTR("Storing chunk: o:0x%llx, sz:0x%x\n"), *(_QWORD *)(v25 + 72), *(unsigned int *)(v25 + 80));
              if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1772);
              v46 = v23[305];
              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
              {
                LODWORD(valuePtr) = 138543362;
                *(_QWORD *)((char *)&valuePtr + 4) = v45;
                _os_log_impl(&dword_20A95C000, v46, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)&valuePtr, 0xCu);
              }
              if (v45)
                CFRelease(v45);
            }
            printSignature((unsigned __int8 *)(v25 + 84));
          }
          v41 = 0;
          goto LABEL_125;
        }
        v41 = 0;
      }
      v82 = 0u;
      memset(v83, 0, 25);
      valuePtr = 0u;
      if ((_StoreChunk(a1, (unsigned int *)v25, (uint64_t)&valuePtr) & 1) != 0)
        goto LABEL_137;
      goto LABEL_177;
    }
    if (*(_BYTE *)(v25 + 25))
    {
      v22 = a5;
      if (a6 && *(_BYTE *)(a6 + 184))
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1751);
        if (os_log_type_enabled((os_log_t)v23[305], OS_LOG_TYPE_DEBUG))
        {
          v43 = CFStringCreateWithFormat(alloc, 0, CFSTR("Retaining chunk: o:0x%llx, sz:0x%x\n"), *(_QWORD *)(v25 + 72), *(unsigned int *)(v25 + 80));
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1756);
          v44 = v23[305];
          if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(valuePtr) = 138543362;
            *(_QWORD *)((char *)&valuePtr + 4) = v43;
            _os_log_impl(&dword_20A95C000, v44, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)&valuePtr, 0xCu);
          }
          v23 = new_ringing + 1792;
          if (v43)
            CFRelease(v43);
        }
        printSignature((unsigned __int8 *)(v25 + 84));
      }
      if (!_CSRetainChunkForRowID(a1, insert_rowid))
        insert_rowid = 0;
    }
    else
    {
LABEL_99:
      v22 = a5;
    }
    v24 = a2;
LABEL_180:
    _CSFinishPreparedStatement((uint64_t *)v31);
    if (a6 && *(_BYTE *)(a6 + 183))
      *(_QWORD *)(a6 + 536) += mach_absolute_time() - *(_QWORD *)(a6 + 528);
    v22[v21] = insert_rowid;
    if (!insert_rowid)
      break;
    if (++v21 == a3)
    {
      v21 = a3;
      goto LABEL_197;
    }
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_417);
  if (os_log_type_enabled((os_log_t)v23[305], OS_LOG_TYPE_ERROR))
  {
    v64 = CFStringCreateWithFormat(alloc, 0, CFSTR("_CSInsertChunk failed, i:%llu, count:%llu\n"), v21, a3);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_422);
    v65 = v23[305];
    if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
    {
      LODWORD(valuePtr) = 138543362;
      *(_QWORD *)((char *)&valuePtr + 4) = v64;
      _os_log_impl(&dword_20A95C000, v65, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&valuePtr, 0xCu);
    }
    if (v64)
      CFRelease(v64);
  }
LABEL_197:
  if (v21 && !_CSRecordPendingChunks(a1, v22, v21, *(_QWORD *)(a6 + 40)) || _CSEndTransactionSqlRc(a1))
  {
LABEL_200:
    _CSRollbackTransactionSqlRc(a1);
    goto LABEL_201;
  }
  if (v21 == a3)
  {
LABEL_205:
    _CSSetDirtyState(a1, 0);
    return 1;
  }
  else
  {
LABEL_201:
    if (a3 > v21)
      bzero(&v22[v21], 8 * (a3 - v21));
    return 0;
  }
}

uint64_t _CSStorageFileForChunkSignature(uint64_t a1, unsigned __int8 *a2, int a3, sqlite3_int64 *a4)
{
  sqlite3_stmt **v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  const __CFAllocator *v12;
  const char *v13;
  CFStringRef v14;
  NSObject *v15;
  sqlite3_int64 v16;
  uint64_t v17;
  uint8_t buf[4];
  CFStringRef v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v8 = _CSPrepareStatement(a1, CFSTR("SELECT ft_rowid FROM CSChunkTable WHERE cid = ? AND location = ?"), "SELECT ft_rowid FROM CSChunkTable WHERE cid = ? AND location = ?");
  if (v8)
  {
    v9 = CKSchemeAndSignatureSize(a2);
    if (!sqlite3_bind_blob(v8[2], 1, a2, v9, 0) && !sqlite3_bind_int(v8[2], 2, a3))
    {
      v10 = CS_sqlite3_step((uint64_t *)v8);
      v11 = v10;
      if ((v10 - 102) > 0xFFFFFFFD)
      {
        if ((_DWORD)v10 == 100)
        {
          v16 = sqlite3_column_int64(v8[2], 0);
          v17 = 1;
          goto LABEL_18;
        }
      }
      else
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_527_0);
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          v13 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
          v14 = CFStringCreateWithFormat(v12, 0, CFSTR("sqlite3_step returned: %s (%d), for signature:"), v13, v11);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_531_0);
          v15 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            v20 = v14;
            _os_log_impl(&dword_20A95C000, v15, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
          }
          if (v14)
            CFRelease(v14);
        }
        printSignature(a2);
      }
    }
  }
  v16 = 0;
  v17 = 0;
LABEL_18:
  _CSFinishPreparedStatement((uint64_t *)v8);
  if (a4)
    *a4 = v16;
  return v17;
}

void _CSSetDirtyState(uint64_t a1, int a2)
{
  size_t v4;
  int v5;
  const __CFAllocator *v6;
  uint64_t v7;
  int *v8;
  char *v9;
  CFStringRef v10;
  NSObject *v11;
  const __CFAllocator *v12;
  uint64_t v13;
  int *v14;
  char *v15;
  uint8_t buf[4];
  CFStringRef v17;
  char __s[1024];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  bzero(__s, 0x400uLL);
  if (CKChunkStoreGetLocation(a1, __s, 0x400uLL))
  {
    v4 = strlen(__s);
    snprintf(&__s[v4], 1024 - v4, "/%s", "ChunkStoreDirty");
    if (a2)
    {
      v5 = open(__s, 512, 384);
      if (v5 != -1)
      {
        close(v5);
        return;
      }
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1719);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v13 = *__error();
        v14 = __error();
        v15 = strerror(*v14);
        v10 = CFStringCreateWithFormat(v12, 0, CFSTR("open failed on \"%s\": %d (%s)\n"), __s, v13, v15);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1723);
        v11 = CK_DEFAULT_LOG_INTERNAL_1;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          goto LABEL_21;
        *(_DWORD *)buf = 138543362;
        v17 = v10;
LABEL_20:
        _os_log_impl(&dword_20A95C000, v11, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
LABEL_21:
        if (v10)
          CFRelease(v10);
      }
    }
    else if (unlink(__s))
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1726);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v7 = *__error();
        v8 = __error();
        v9 = strerror(*v8);
        v10 = CFStringCreateWithFormat(v6, 0, CFSTR("unlink failed \"%s\": %d (%s)\n"), __s, v7, v9);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1731);
        v11 = CK_DEFAULT_LOG_INTERNAL_1;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          goto LABEL_21;
        *(_DWORD *)buf = 138543362;
        v17 = v10;
        goto LABEL_20;
      }
    }
  }
}

sqlite3_int64 _CSRecordPendingChunks(uint64_t a1, const void *a2, sqlite3_int64 a3, sqlite3_int64 a4)
{
  sqlite3_stmt **v4;
  sqlite3_int64 insert_rowid;
  sqlite3_stmt **v11;
  uint64_t v12;
  uint64_t v13;
  const __CFAllocator *v14;
  const char *v15;
  CFStringRef v16;
  NSObject *v17;
  uint8_t buf[4];
  CFStringRef v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 17))
  {
    v4 = 0;
  }
  else
  {
    v11 = _CSPrepareStatement(a1, CFSTR("INSERT INTO CSStoragePendingChunksTable (pct_inode, pct_count, pct_chunkRowIDs) VALUES (?, ?, ?)"), "INSERT INTO CSStoragePendingChunksTable (pct_inode, pct_count, pct_chunkRowIDs) VALUES (?, ?, ?)");
    v4 = v11;
    if (v11
      && !sqlite3_bind_int64(v11[2], 1, a4)
      && !sqlite3_bind_int64(v4[2], 2, a3)
      && !sqlite3_bind_blob(v4[2], 3, a2, 8 * a3, 0))
    {
      v12 = CS_sqlite3_step((uint64_t *)v4);
      if ((_DWORD)v12 == 101)
      {
        insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 24));
        goto LABEL_4;
      }
      v13 = v12;
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_427_0);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        v14 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v15 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        v16 = CFStringCreateWithFormat(v14, 0, CFSTR("sqlite3_step returned: %d (%s)\n"), v13, v15);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_431);
        v17 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          v19 = v16;
          _os_log_impl(&dword_20A95C000, v17, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v16)
          CFRelease(v16);
      }
    }
  }
  insert_rowid = 0;
LABEL_4:
  _CSFinishPreparedStatement((uint64_t *)v4);
  return insert_rowid;
}

uint64_t *_CSCommitChunkedFile(uint64_t *result, sqlite3_int64 a2)
{
  uint64_t v2;
  sqlite3_stmt **v4;
  sqlite3_stmt **v5;
  sqlite3_int64 v6;
  uint64_t v7;
  uint64_t v8;
  const __CFAllocator *v9;
  const char *v10;
  CFStringRef v11;
  NSObject *v12;
  uint8_t buf[4];
  CFStringRef v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v2 = (uint64_t)result;
    if (!*((_BYTE *)result + 17))
    {
      v4 = _CSPrepareStatement((uint64_t)result, CFSTR("SELECT pft_inode FROM CSStoragePendingFileChunklistTable WHERE pft_token = ?"), "SELECT pft_inode FROM CSStoragePendingFileChunklistTable WHERE pft_token = ?");
      v5 = v4;
      if (v4 && !sqlite3_bind_int64(v4[2], 1, a2))
      {
        while (1)
        {
          v7 = CS_sqlite3_step((uint64_t *)v5);
          if ((_DWORD)v7 != 100)
            break;
          v6 = sqlite3_column_int64(v5[2], 0);
          _CSRemovePendingBatchesForInode(v2, v6);
        }
        v8 = v7;
        if ((_DWORD)v7 != 101)
        {
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_436_0);
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
            v10 = sqlite3_errmsg(*(sqlite3 **)(v2 + 24));
            v11 = CFStringCreateWithFormat(v9, 0, CFSTR("sqlite3_step returned: %d %s\n"), v8, v10);
            if (CK_DEFAULT_LOG_BLOCK_1 != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_438);
            v12 = CK_DEFAULT_LOG_INTERNAL_1;
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138543362;
              v14 = v11;
              _os_log_impl(&dword_20A95C000, v12, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
            }
            if (v11)
              CFRelease(v11);
          }
        }
        CSsql_corruption_checking_do_0(v2, *(sqlite3 **)(v2 + 24), "DELETE FROM CSStoragePendingFileChunklistTable WHERE pft_token = %llu", a2);
      }
      return _CSFinishPreparedStatement((uint64_t *)v5);
    }
  }
  return result;
}

uint64_t *_CSRemovePendingBatchesForInode(uint64_t a1, sqlite3_int64 a2)
{
  sqlite3_stmt **v4;
  sqlite3_stmt **v5;
  uint64_t v6;
  uint64_t v7;
  const __CFAllocator *v8;
  const char *v9;
  CFStringRef v10;
  NSObject *v11;
  uint64_t v12;
  sqlite3_int64 v13;
  sqlite3_int64 v14;
  sqlite3_int64 *v15;
  CFStringRef v16;
  NSObject *v17;
  uint64_t v18;
  const char *v19;
  const __CFAllocator *alloc;
  uint8_t buf[4];
  CFStringRef v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 17))
    _CSRemovePendingBatchesForInode_cold_1();
  if (a2)
  {
    v4 = _CSPrepareStatement(a1, CFSTR("SELECT * FROM CSStoragePendingChunksTable WHERE pct_inode = ?"), "SELECT * FROM CSStoragePendingChunksTable WHERE pct_inode = ?");
    v5 = v4;
    if (!v4)
      return _CSFinishPreparedStatement((uint64_t *)v5);
    v6 = sqlite3_bind_int64(v4[2], 1, a2);
    if ((_DWORD)v6)
    {
      v7 = v6;
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1804);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v9 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        v10 = CFStringCreateWithFormat(v8, 0, CFSTR("sqlite3_bind_int64 for inode:%lld returned: %d (%s)\n"), a2, v7, v9);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1808);
        v11 = CK_DEFAULT_LOG_INTERNAL_1;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          goto LABEL_34;
        *(_DWORD *)buf = 138543362;
        v23 = v10;
LABEL_33:
        _os_log_impl(&dword_20A95C000, v11, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
LABEL_34:
        if (v10)
          CFRelease(v10);
        return _CSFinishPreparedStatement((uint64_t *)v5);
      }
      return _CSFinishPreparedStatement((uint64_t *)v5);
    }
  }
  else
  {
    v5 = _CSPrepareStatement(a1, CFSTR("SELECT * FROM CSStoragePendingChunksTable"), "SELECT * FROM CSStoragePendingChunksTable");
    if (!v5)
      return _CSFinishPreparedStatement((uint64_t *)v5);
  }
  alloc = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  while (1)
  {
    v12 = CS_sqlite3_step((uint64_t *)v5);
    if ((_DWORD)v12 != 100)
      break;
    v13 = sqlite3_column_int64(v5[2], 0);
    v14 = sqlite3_column_int64(v5[2], 2);
    v15 = (sqlite3_int64 *)sqlite3_column_blob(v5[2], 3);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1811);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      v16 = CFStringCreateWithFormat(alloc, 0, CFSTR("Removing pending batch for inode:%llu, rowId:%llu, count:0x%llu\n"), a2, v13, v14);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1816);
      v17 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        v23 = v16;
        _os_log_impl(&dword_20A95C000, v17, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v16)
        CFRelease(v16);
    }
    _CSReleaseOrphanedChunks(a1, v15, v14);
    CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "DELETE FROM CSStoragePendingChunksTable WHERE pct_rowid = %lld", v13);
  }
  v18 = v12;
  if ((_DWORD)v12 != 101)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1820);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v19 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
      v10 = CFStringCreateWithFormat(alloc, 0, CFSTR("sqlite3_step returned: %d %s\n"), v18, v19);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1823);
      v11 = CK_DEFAULT_LOG_INTERNAL_1;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        goto LABEL_34;
      *(_DWORD *)buf = 138543362;
      v23 = v10;
      goto LABEL_33;
    }
  }
  return _CSFinishPreparedStatement((uint64_t *)v5);
}

sqlite3_int64 _CSRegisterStorageChunkList(uint64_t a1, const void *a2, sqlite3_int64 a3, sqlite3_int64 a4)
{
  sqlite3_stmt **v8;
  sqlite3_int64 v9;
  sqlite3_stmt **v11;
  uint64_t v12;
  sqlite3_int64 insert_rowid;
  uint64_t v14;
  const __CFAllocator *v15;
  const char *v16;
  CFStringRef v17;
  NSObject *v18;
  uint8_t buf[4];
  CFStringRef v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (_CSBeginTransactionSqlRc(a1))
    return 0;
  if (*(_BYTE *)(a1 + 17))
  {
    v8 = 0;
  }
  else
  {
    v11 = _CSPrepareStatement(a1, CFSTR("INSERT INTO CSStorageChunkListTable (clt_count, clt_chunkRowIDs, clt_inode) VALUES (?, ?, ?)"), "INSERT INTO CSStorageChunkListTable (clt_count, clt_chunkRowIDs, clt_inode) VALUES (?, ?, ?)");
    v8 = v11;
    if (v11
      && !sqlite3_bind_int64(v11[2], 1, a3)
      && !sqlite3_bind_blob(v8[2], 2, a2, 8 * a3, 0)
      && !sqlite3_bind_int64(v8[2], 3, a4))
    {
      v12 = CS_sqlite3_step((uint64_t *)v8);
      if ((_DWORD)v12 == 101)
      {
        insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 24));
        if (insert_rowid)
        {
          v9 = insert_rowid;
          if (!CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "DELETE FROM CSStoragePendingChunksTable WHERE pct_inode = %llu", a4)&& !CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "INSERT INTO CSStoragePendingFileChunklistTable (pft_token, pft_inode) VALUES (%llu, %llu)", v9, a4))
          {
            _CSFinishPreparedStatement((uint64_t *)v8);
            if (!_CSEndTransactionSqlRc(a1))
              return v9;
            goto LABEL_5;
          }
        }
      }
      else
      {
        v14 = v12;
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1828);
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          v15 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          v16 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
          v17 = CFStringCreateWithFormat(v15, 0, CFSTR("sqlite3_step returned: %d (%s)\n"), v14, v16);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1830);
          v18 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            v20 = v17;
            _os_log_impl(&dword_20A95C000, v18, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
          }
          if (v17)
            CFRelease(v17);
        }
      }
    }
  }
  _CSFinishPreparedStatement((uint64_t *)v8);
LABEL_5:
  _CSRollbackTransactionSqlRc(a1);
  return 0;
}

uint64_t _CSRemoveStoredFile(uint64_t a1, sqlite3_int64 a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  CFStringRef v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  size_t v15;
  sqlite3_int64 *v16;
  CFStringRef v17;
  NSObject *v18;
  uint64_t v19;
  const __CFAllocator *v20;
  const char *v21;
  CFStringRef v22;
  NSObject *v23;
  CFStringRef v24;
  NSObject *v25;
  const __CFAllocator *alloc;
  size_t v28;
  uint8_t buf[4];
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 17))
    _CSRemoveStoredFile_cold_1();
  if (!a2)
  {
LABEL_17:
    v10 = 0;
    v13 = 0;
    goto LABEL_66;
  }
  v28 = 0;
  v4 = _CSChunkRefsForToken(a1, a2, &v28);
  if (!v4)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_442);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v13 = 0;
      v10 = 0;
      goto LABEL_68;
    }
    v11 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("_CSChunkRefsForToken failed\n"));
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_446);
    v12 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v30 = (uint64_t)v11;
      _os_log_impl(&dword_20A95C000, v12, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v11)
      CFRelease(v11);
    goto LABEL_17;
  }
  v5 = v4;
  v6 = _CSChunkSignatureForToken(a1, *(_QWORD *)v4, 0);
  if (v6)
  {
    v7 = malloc_type_malloc(v6, 0xFEC8C1E6uLL);
    if (v7)
    {
      v8 = v7;
      v9 = _CSBeginTransactionSqlRc(a1);
      if ((_DWORD)v9)
      {
        v10 = v9;
        goto LABEL_63;
      }
      v15 = v28;
      if (!v28)
      {
LABEL_50:
        v19 = CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "DELETE FROM CSStorageChunkListTable WHERE clt_rowid = %llu", a2);
        if ((_DWORD)v19)
        {
          v10 = v19;
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_474);
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            v20 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
            v21 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
            v22 = CFStringCreateWithFormat(v20, 0, CFSTR("CSsql_do returned: %d (%s)\n"), v10, v21);
            if (CK_DEFAULT_LOG_BLOCK_1 != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_479_1);
            v23 = CK_DEFAULT_LOG_INTERNAL_1;
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138543362;
              v30 = (uint64_t)v22;
              _os_log_impl(&dword_20A95C000, v23, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
            }
            if (v22)
              CFRelease(v22);
          }
        }
        else
        {
          v10 = _CSEndTransactionSqlRc(a1);
          if (!(_DWORD)v10)
          {
            v13 = 1;
            goto LABEL_64;
          }
        }
        _CSRollbackTransactionSqlRc(a1);
LABEL_63:
        v13 = 0;
LABEL_64:
        free(v8);
        goto LABEL_65;
      }
      alloc = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v16 = (sqlite3_int64 *)v5;
      while (_CSChunkSignatureForToken(a1, *v16, v8))
      {
        if ((_CSReleaseChunkForSignature(a1, v8) & 1) != 0)
          goto LABEL_49;
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_465_0);
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          goto LABEL_49;
        v17 = CFStringCreateWithFormat(alloc, 0, CFSTR("_CSReleaseChunkForSignature failed for chunk token %lld\n"), *v16);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_470_0);
        v18 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          goto LABEL_46;
LABEL_47:
        if (v17)
          CFRelease(v17);
LABEL_49:
        v16 += 2;
        if (!--v15)
          goto LABEL_50;
      }
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_457);
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      v17 = CFStringCreateWithFormat(alloc, 0, CFSTR("_CSChunkSignatureForToken failed for chunk token %lld\n"), *v16);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_462);
      v18 = CK_DEFAULT_LOG_INTERNAL_1;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        goto LABEL_47;
LABEL_46:
      *(_DWORD *)buf = 138543362;
      v30 = (uint64_t)v17;
      _os_log_impl(&dword_20A95C000, v18, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      goto LABEL_47;
    }
  }
  else
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_449);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v13 = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Invalid signature size, sigSize:%u\n"), 0);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_454);
      v14 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v30 = v13;
        _os_log_impl(&dword_20A95C000, v14, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (!v13)
      {
        v10 = 0;
        goto LABEL_65;
      }
      CFRelease((CFTypeRef)v13);
    }
  }
  v10 = 0;
  v13 = 0;
LABEL_65:
  free(v5);
LABEL_66:
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_482);
LABEL_68:
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
  {
    v24 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("token:%llu, result:%d, sqlRc:%d\n"), a2, v13, v10);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_487_1);
    v25 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      v30 = (uint64_t)v24;
      _os_log_impl(&dword_20A95C000, v25, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v24)
      CFRelease(v24);
  }
  return v13;
}

unsigned int *_CSChunkRefsForToken(uint64_t a1, sqlite3_int64 a2, size_t *a3)
{
  sqlite3_stmt **v6;
  sqlite3_stmt **v7;
  unsigned int *v8;
  uint64_t v10;
  sqlite3_int64 v11;
  size_t v12;
  void *v13;
  void *v14;
  const void *v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  const __CFAllocator *v21;
  const char *v22;
  CFStringRef v23;
  NSObject *v24;
  CFStringRef v25;
  NSObject *v26;
  uint8_t buf[4];
  CFStringRef v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  v6 = _CSPrepareStatement(a1, CFSTR("SELECT clt_count, clt_chunkRowIDs FROM CSStorageChunkListTable WHERE clt_rowid = ?"), "SELECT clt_count, clt_chunkRowIDs FROM CSStorageChunkListTable WHERE clt_rowid = ?");
  v7 = v6;
  if (!v6 || sqlite3_bind_int64(v6[2], 1, a2))
    goto LABEL_3;
  v10 = CS_sqlite3_step((uint64_t *)v7);
  if ((_DWORD)v10 != 100)
  {
    v20 = v10;
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_510);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v21 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v22 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
      v23 = CFStringCreateWithFormat(v21, 0, CFSTR("sqlite3_step returned: %d %s, for listToken:%llu\n"), v20, v22, a2);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_514);
      v24 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v28 = v23;
        _os_log_impl(&dword_20A95C000, v24, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v23)
        CFRelease(v23);
    }
    goto LABEL_3;
  }
  v11 = sqlite3_column_int64(v7[2], 0);
  if (!v11 || (v12 = v11, (v13 = malloc_type_calloc(v11, 8uLL, 0x100004000313F17uLL)) == 0))
  {
LABEL_3:
    _CSFinishPreparedStatement((uint64_t *)v7);
    return 0;
  }
  v14 = v13;
  v15 = sqlite3_column_blob(v7[2], 1);
  memcpy(v14, v15, 8 * v12);
  v16 = (unsigned int *)malloc_type_calloc(v12, 0x10uLL, 0x1000040D9A13B51uLL);
  v8 = v16;
  if (v16)
  {
    v17 = 0;
    v18 = v16 + 2;
    while (1)
    {
      v19 = _CSChunkSizeForToken(a1, *((_QWORD *)v14 + v17));
      if (!v19)
        break;
      *v18 = v19;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v14 + v17++);
      v18 += 4;
      if (v12 == v17)
      {
        *a3 = v12;
        goto LABEL_13;
      }
    }
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_517);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v25 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("_CSChunkSizeForToken failed for file token %llu, chunk token:%llu (count:%llu)\n"), a2, *((_QWORD *)v14 + v17), v12);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_522);
      v26 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v28 = v25;
        _os_log_impl(&dword_20A95C000, v26, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v25)
        CFRelease(v25);
    }
    _CSFinishPreparedStatement((uint64_t *)v7);
    free(v8);
    v8 = 0;
  }
  else
  {
LABEL_13:
    _CSFinishPreparedStatement((uint64_t *)v7);
  }
  free(v14);
  return v8;
}

CFStringRef _CSChunkSignatureForToken(uint64_t a1, sqlite3_int64 a2, void *a3)
{
  sqlite3_stmt **v5;
  sqlite3_stmt **v6;
  CFStringRef v7;
  _BYTE *v9;
  uint64_t v10;
  NSObject *v11;
  uint8_t buf[4];
  CFStringRef v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v5 = _CSPrepareStatement(a1, CFSTR("SELECT cid FROM CSChunkTable WHERE ct_rowid = ?"), "SELECT cid FROM CSChunkTable WHERE ct_rowid = ?");
  v6 = v5;
  if (!v5 || sqlite3_bind_int64(v5[2], 1, a2))
    goto LABEL_3;
  if (CS_sqlite3_step((uint64_t *)v6) == 100)
  {
    v9 = sqlite3_column_blob(v6[2], 0);
    v10 = CKSchemeAndSignatureSize(v9);
    v7 = (CFStringRef)v10;
    if (a3)
      memcpy(a3, v9, v10);
  }
  else
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_545);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      goto LABEL_3;
    v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("no signature for token %llu\n"), a2);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_549);
    v11 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v13 = v7;
      _os_log_impl(&dword_20A95C000, v11, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v7)
    {
      CFRelease(v7);
LABEL_3:
      v7 = 0;
    }
  }
  _CSFinishPreparedStatement((uint64_t *)v6);
  return v7;
}

unint64_t _CSReleaseChunkForSignature(uint64_t a1, _BYTE *a2)
{
  sqlite3_stmt **v4;
  int v5;
  uint64_t v6;
  const __CFAllocator *v7;
  const char *v8;
  CFStringRef v9;
  NSObject *v10;
  unint64_t v11;
  NSObject *v12;
  uint64_t v14;
  uint64_t v15;
  const __CFAllocator *v16;
  const char *v17;
  sqlite3_int64 v18;
  unsigned int v19;
  sqlite3_int64 v20;
  sqlite3_int64 v21;
  sqlite3_stmt **v22;
  sqlite3_stmt **v23;
  uint64_t v24;
  uint64_t v25;
  const __CFAllocator *v26;
  const char *v27;
  CFStringRef v28;
  NSObject *v29;
  CFStringRef v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  const __CFAllocator *v34;
  const char *v35;
  CFStringRef v36;
  NSObject *v37;
  sqlite3_int64 v38;
  CFStringRef v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  const __CFAllocator *v43;
  const char *v44;
  NSObject *v45;
  sqlite3_int64 v46;
  uint8_t buf[4];
  CFStringRef v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v4 = _CSPrepareStatement(a1, CFSTR("SELECT refCount, dataLen, ft_rowid, ct_rowid FROM CSChunkTable WHERE cid = ? AND location = ?"), "SELECT refCount, dataLen, ft_rowid, ct_rowid FROM CSChunkTable WHERE cid = ? AND location = ?");
  if (!v4)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_706);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    v11 = (unint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("null sqlite3_stmt (sel_stmt)\n"));
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_711);
    v12 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      goto LABEL_22;
    *(_DWORD *)buf = 138543362;
    v48 = (CFStringRef)v11;
    goto LABEL_21;
  }
  v5 = CKSchemeAndSignatureSize(a2);
  v6 = sqlite3_bind_blob(v4[2], 1, a2, v5, 0);
  if ((_DWORD)v6 || (v6 = sqlite3_bind_int(v4[2], 2, 115), (_DWORD)v6))
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_644);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v8 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
      v9 = CFStringCreateWithFormat(v7, 0, CFSTR("sqlite3_bind failed: %s (%d)\n"), v8, v6);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_648);
      v10 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v48 = v9;
        _os_log_impl(&dword_20A95C000, v10, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v9)
        CFRelease(v9);
    }
    goto LABEL_13;
  }
  v14 = CS_sqlite3_step((uint64_t *)v4);
  if ((_DWORD)v14 == 100)
  {
    v18 = sqlite3_column_int64(v4[2], 0);
    v19 = sqlite3_column_int(v4[2], 1);
    v20 = sqlite3_column_int64(v4[2], 2);
    v21 = sqlite3_column_int64(v4[2], 3);
    if (v18)
    {
      if (v18 != 1)
      {
        v22 = _CSPrepareStatement(a1, CFSTR("UPDATE CSChunkTable SET refCount = ? WHERE ct_rowid = ?"), "UPDATE CSChunkTable SET refCount = ? WHERE ct_rowid = ?");
        if (v22)
        {
          v23 = v22;
          sqlite3_bind_int64(v22[2], 1, v18 - 1);
          sqlite3_bind_int64(v23[2], 2, v21);
          v24 = CS_sqlite3_step((uint64_t *)v23);
          if ((_DWORD)v24 != 101)
          {
            v25 = v24;
            if (CK_DEFAULT_LOG_BLOCK_1 != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_667);
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
            {
              v26 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
              v27 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
              v28 = CFStringCreateWithFormat(v26, 0, CFSTR("sqlite3_step returned: %d %s\n"), v25, v27);
              if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_670);
              v29 = CK_DEFAULT_LOG_INTERNAL_1;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138543362;
                v48 = v28;
                _os_log_impl(&dword_20A95C000, v29, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
              }
              if (v28)
                CFRelease(v28);
            }
          }
          _CSFinishPreparedStatement((uint64_t *)v23);
          goto LABEL_13;
        }
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_673);
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
LABEL_24:
          v11 = 0;
          goto LABEL_25;
        }
        v11 = (unint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("null sqlite3_stmt (stmt)\n"));
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_678);
        v12 = CK_DEFAULT_LOG_INTERNAL_1;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
LABEL_22:
          if (!v11)
            goto LABEL_25;
          CFRelease((CFTypeRef)v11);
          goto LABEL_24;
        }
        *(_DWORD *)buf = 138543362;
        v48 = (CFStringRef)v11;
LABEL_21:
        _os_log_impl(&dword_20A95C000, v12, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        goto LABEL_22;
      }
    }
    else
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_659);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        v30 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("refCount already zero for:"));
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_664);
        v31 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          v48 = v30;
          _os_log_impl(&dword_20A95C000, v31, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v30)
          CFRelease(v30);
      }
      printSignature(a2);
    }
    v32 = CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "UPDATE CSChunkTable SET refCount = 0 WHERE ct_rowid = %lld", v21);
    if (!(_DWORD)v32)
    {
      LODWORD(v36) = 1;
      goto LABEL_71;
    }
    v33 = v32;
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_682);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v34 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v35 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
      v36 = CFStringCreateWithFormat(v34, 0, CFSTR("CSsql_do returned: %d %s\n"), v33, v35);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_687);
      v37 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v48 = v36;
        _os_log_impl(&dword_20A95C000, v37, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (!v36)
      {
LABEL_71:
        v46 = 0;
        if (CSsql_get64_safe(a1, 1, &v46, "SELECT ft_pspace FROM CSStorageFileTable WHERE ft_rowid = %lld", v20))
        {
          v38 = v46 + v19;
          if (!__CFADD__(v46, v19))
          {
            v46 += v19;
            v41 = CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "UPDATE CSStorageFileTable SET ft_pspace = %lld WHERE ft_rowid = %lld", v38, v20);
            if ((_DWORD)v41)
            {
              v42 = v41;
              if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_692);
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
              {
                v43 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
                v44 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
                v39 = CFStringCreateWithFormat(v43, 0, CFSTR("CSsql_do returned: %d %s\n"), v42, v44);
                if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                  dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_695);
                v45 = CK_DEFAULT_LOG_INTERNAL_1;
                if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138543362;
                  v48 = v39;
                  _os_log_impl(&dword_20A95C000, v45, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
                }
                LODWORD(v36) = 0;
LABEL_90:
                if (v39)
                  CFRelease(v39);
                goto LABEL_100;
              }
              LODWORD(v36) = 0;
            }
LABEL_100:
            v11 = (_DWORD)v36 != 0;
            goto LABEL_25;
          }
        }
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_698);
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          goto LABEL_100;
        v39 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("unable to update purgable space for SF rowID:%llu\n"), v20);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_703);
        v40 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          v48 = v39;
          _os_log_impl(&dword_20A95C000, v40, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        goto LABEL_90;
      }
      CFRelease(v36);
    }
    LODWORD(v36) = 0;
    goto LABEL_71;
  }
  v15 = v14;
  if ((_DWORD)v14 != 101)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_651);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    v16 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v17 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
    v11 = (unint64_t)CFStringCreateWithFormat(v16, 0, CFSTR("sqlite3_step failed: %s (%d)\n"), v17, v15);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_656);
    v12 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      goto LABEL_22;
    *(_DWORD *)buf = 138543362;
    v48 = (CFStringRef)v11;
    goto LABEL_21;
  }
LABEL_13:
  v11 = 1;
LABEL_25:
  _CSFinishPreparedStatement((uint64_t *)v4);
  return v11;
}

CFStringRef _CSChunkSizeForToken(uint64_t a1, sqlite3_int64 a2)
{
  sqlite3_stmt **v4;
  sqlite3_stmt **v5;
  CFStringRef v6;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  const __CFAllocator *v14;
  const char *v15;
  NSObject *v16;
  uint8_t buf[4];
  CFStringRef v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = _CSPrepareStatement(a1, CFSTR("SELECT cid, dataLen FROM CSChunkTable WHERE ct_rowid = ? AND location = ?"), "SELECT cid, dataLen FROM CSChunkTable WHERE ct_rowid = ? AND location = ?");
  v5 = v4;
  if (!v4)
    goto LABEL_4;
  if (sqlite3_bind_int64(v4[2], 1, a2))
    goto LABEL_4;
  if (sqlite3_bind_int(v5[2], 2, 115))
    goto LABEL_4;
  v8 = CS_sqlite3_step((uint64_t *)v5);
  if ((_DWORD)v8 == 101)
    goto LABEL_4;
  v9 = v8;
  if ((_DWORD)v8 == 100)
  {
    v10 = sqlite3_column_blob(v5[2], 0);
    v11 = CKSchemeAndSignatureSize(v10);
    v12 = sqlite3_column_int64(v5[2], 1);
    if (v12 - v11 >= 4)
      v13 = v12 - v11 - 4;
    else
      v13 = 0;
    if (v12 >= v11)
      v6 = (CFStringRef)v13;
    else
      v6 = 0;
    goto LABEL_5;
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_492_1);
  if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
LABEL_4:
    v6 = 0;
    goto LABEL_5;
  }
  v14 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v15 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
  v6 = CFStringCreateWithFormat(v14, 0, CFSTR("sqlite3_step returned: %d %s, for _CSChunkSizeForToken\n"), v9, v15);
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_496_0);
  v16 = CK_DEFAULT_LOG_INTERNAL_1;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    v18 = v6;
    _os_log_impl(&dword_20A95C000, v16, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
  }
  if (v6)
  {
    CFRelease(v6);
    goto LABEL_4;
  }
LABEL_5:
  _CSFinishPreparedStatement((uint64_t *)v5);
  return v6;
}

CFStringRef _CSChunkIsInvalid(uint64_t a1, sqlite3_int64 a2)
{
  sqlite3_stmt **v4;
  sqlite3_stmt **v5;
  CFStringRef v6;
  uint64_t v8;
  uint64_t v9;
  const __CFAllocator *v10;
  const char *v11;
  NSObject *v12;
  uint8_t buf[4];
  CFStringRef v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = _CSPrepareStatement(a1, CFSTR("SELECT CSChunkTable.ct_rowid, CSStorageFileTable.ft_rowid, CSStorageFileTable.ft_status FROM CSStorageFileTable INNER JOIN CSChunkTable on CSChunkTable.ft_rowid = CSStorageFileTable.ft_rowid WHERE CSChunkTable.ct_rowid = ? "), "SELECT CSChunkTable.ct_rowid, CSStorageFileTable.ft_rowid, CSStorageFileTable.ft_status FROM CSStorageFileTable INNER JOIN CSChunkTable on CSChunkTable.ft_rowid = CSStorageFileTable.ft_rowid WHERE CSChunkTable.ct_rowid = ? ");
  v5 = v4;
  if (!v4)
    goto LABEL_3;
  if (sqlite3_bind_int64(v4[2], 1, a2))
    goto LABEL_3;
  v8 = CS_sqlite3_step((uint64_t *)v5);
  if ((_DWORD)v8 == 101)
    goto LABEL_3;
  v9 = v8;
  if ((_DWORD)v8 == 100)
  {
    v6 = (CFStringRef)(sqlite3_column_int(v5[2], 2) == 109);
    goto LABEL_4;
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_501_0);
  if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    goto LABEL_3;
  v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v11 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
  v6 = CFStringCreateWithFormat(v10, 0, CFSTR("sqlite3_step returned in %s: %s (%d)"), "_CSChunkIsInvalid", v11, v9);
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_505_0);
  v12 = CK_DEFAULT_LOG_INTERNAL_1;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    v14 = v6;
    _os_log_impl(&dword_20A95C000, v12, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
  }
  if (v6)
  {
    CFRelease(v6);
LABEL_3:
    v6 = 0;
  }
LABEL_4:
  _CSFinishPreparedStatement((uint64_t *)v5);
  return v6;
}

sqlite3_int64 _CSTokenForChunkSignature(uint64_t a1, unsigned __int8 *a2, int a3)
{
  sqlite3_stmt **v6;
  int v7;
  sqlite3_int64 v8;
  uint64_t v9;
  uint64_t v10;
  const __CFAllocator *v11;
  const char *v12;
  CFStringRef v13;
  NSObject *v14;
  uint8_t buf[4];
  CFStringRef v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v6 = _CSPrepareStatement(a1, CFSTR("SELECT ct_rowid FROM CSChunkTable WHERE cid = ? AND location = ?"), "SELECT ct_rowid FROM CSChunkTable WHERE cid = ? AND location = ?");
  if (!v6)
    goto LABEL_17;
  v7 = CKSchemeAndSignatureSize(a2);
  v8 = 0;
  if (!sqlite3_bind_blob(v6[2], 1, a2, v7, 0))
  {
    if (!sqlite3_bind_int(v6[2], 2, a3))
    {
      v9 = CS_sqlite3_step((uint64_t *)v6);
      v10 = v9;
      if ((v9 - 102) <= 0xFFFFFFFD)
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_536_0);
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          v12 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
          v13 = CFStringCreateWithFormat(v11, 0, CFSTR("sqlite3_step returned: %d %s, for signature:"), v10, v12);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_540_0);
          v14 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            v17 = v13;
            _os_log_impl(&dword_20A95C000, v14, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
          }
          if (v13)
            CFRelease(v13);
        }
        printSignature(a2);
        goto LABEL_17;
      }
      if ((_DWORD)v9 == 100)
      {
        v8 = sqlite3_column_int64(v6[2], 0);
        goto LABEL_18;
      }
    }
LABEL_17:
    v8 = 0;
  }
LABEL_18:
  _CSFinishPreparedStatement((uint64_t *)v6);
  return v8;
}

sqlite3_int64 _CSAddChunk(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  sqlite3_int64 insert_rowid;
  sqlite3_stmt **v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  CFStringRef v12;
  NSObject *v13;
  uint64_t v14;
  const __CFAllocator *v15;
  const char *v16;
  uint8_t buf[4];
  CFStringRef v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 17))
  {
    insert_rowid = _CSTokenForChunkSignature(a1, a2, 115);
    if (insert_rowid)
      return insert_rowid;
    v7 = _CSPrepareStatement(a1, CFSTR("INSERT INTO CSChunkTable (cid, ft_rowid, offset, dataLen, refCount, timestamp, location) VALUES (?, ?, ?, ?, ?, ?, ?)"), "INSERT INTO CSChunkTable (cid, ft_rowid, offset, dataLen, refCount, timestamp, location) VALUES (?, ?, ?, ?, ?, ?, ?)");
    if (!v7)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_559);
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        goto LABEL_28;
      v12 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("null sqlite3_stmt\n"));
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_564_0);
      v13 = CK_DEFAULT_LOG_INTERNAL_1;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        goto LABEL_26;
      *(_DWORD *)buf = 138543362;
      v19 = v12;
      goto LABEL_25;
    }
    v8 = CKSchemeAndSignatureSize(a2);
    v9 = 1;
    sqlite3_bind_blob(v7[2], 1, a2, v8, 0);
    sqlite3_bind_int64(v7[2], 2, *(unsigned int *)(a3 + 12));
    sqlite3_bind_int64(v7[2], 3, *(_QWORD *)(a3 + 24));
    sqlite3_bind_int(v7[2], 5, *(_DWORD *)(a3 + 40));
    v10 = *(_DWORD *)(a3 + 52);
    if (v10 != 115)
    {
      if (v10 != 101)
      {
LABEL_9:
        sqlite3_bind_int64(v7[2], 7, *(_QWORD *)(a3 + 44));
        sqlite3_bind_int(v7[2], 8, *(_DWORD *)(a3 + 52));
        v11 = CS_sqlite3_step((uint64_t *)v7);
        if ((_DWORD)v11 == 101)
        {
          insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 24));
LABEL_29:
          _CSFinishPreparedStatement((uint64_t *)v7);
          return insert_rowid;
        }
        v14 = v11;
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_554_0);
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
LABEL_28:
          insert_rowid = 0;
          goto LABEL_29;
        }
        v15 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v16 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        v12 = CFStringCreateWithFormat(v15, 0, CFSTR("sqlite3_step returned: %d %s\n"), v14, v16);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_556_1);
        v13 = CK_DEFAULT_LOG_INTERNAL_1;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
LABEL_26:
          if (v12)
            CFRelease(v12);
          goto LABEL_28;
        }
        *(_DWORD *)buf = 138543362;
        v19 = v12;
LABEL_25:
        _os_log_impl(&dword_20A95C000, v13, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        goto LABEL_26;
      }
      v9 = 0;
    }
    sqlite3_bind_int(v7[2], 6, v9);
    goto LABEL_9;
  }
  return 0;
}

uint64_t _CSChunkForToken(uint64_t a1, _QWORD *a2, sqlite3_int64 a3)
{
  sqlite3_stmt **v6;
  sqlite3_stmt **v7;
  char *v8;
  _QWORD *v9;
  size_t v10;
  sqlite3_int64 v11;
  uint64_t v12;
  NSObject *v13;
  CFStringRef v14;
  NSObject *v15;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v6 = _CSPrepareStatement(a1, CFSTR("SELECT * FROM CSChunkTable WHERE ct_rowid = ?"), "SELECT * FROM CSChunkTable WHERE ct_rowid = ?");
  v7 = v6;
  if (!v6)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_576_0);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v12 = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("null sqlite3_stmt\n"));
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_579);
      v13 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        v17 = 138543362;
        v18 = v12;
        _os_log_impl(&dword_20A95C000, v13, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v17, 0xCu);
      }
      if (!v12)
      {
        v9 = 0;
        goto LABEL_28;
      }
      CFRelease((CFTypeRef)v12);
    }
    goto LABEL_15;
  }
  sqlite3_bind_int64(v6[2], 1, a3);
  if (CS_sqlite3_step((uint64_t *)v7) != 100)
  {
LABEL_15:
    v9 = 0;
    goto LABEL_16;
  }
  v8 = (char *)sqlite3_column_blob(v7[2], 1);
  v9 = CSCreateStoredChunk(*v8);
  if (!v9)
  {
LABEL_16:
    v12 = 0;
    goto LABEL_28;
  }
  v10 = CKSchemeAndSignatureSize(v8);
  v9[2] = a3;
  memcpy(v9 + 7, v8, v10);
  v11 = sqlite3_column_int64(v7[2], 3);
  v9[4] = sqlite3_column_int64(v7[2], 4);
  *((_DWORD *)v9 + 10) = sqlite3_column_int(v7[2], 5);
  *((_DWORD *)v9 + 13) = sqlite3_column_int(v7[2], 8);
  *(_QWORD *)((char *)v9 + 44) = sqlite3_column_int64(v7[2], 7);
  if (*((_DWORD *)v9 + 13) == 115)
  {
    v9[3] = v10 + v9[4] + 4;
  }
  else
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_569);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v14 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("not a stored chunk"));
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_573);
      v15 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        v17 = 138543362;
        v18 = (uint64_t)v14;
        _os_log_impl(&dword_20A95C000, v15, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v17, 0xCu);
      }
      if (v14)
        CFRelease(v14);
    }
  }
  *((_DWORD *)v9 + 3) = v11;
  *(_QWORD *)((char *)v9 + 4) = _CSStorageFileInode(a1, v11, 0);
  *(_DWORD *)v9 = *(_DWORD *)(a1 + 128);
  v12 = 1;
LABEL_28:
  _CSFinishPreparedStatement((uint64_t *)v7);
  *a2 = v9;
  return v12;
}

__darwin_ino64_t _CSStorageFileInode(uint64_t a1, sqlite3_int64 a2, char a3)
{
  const __CFAllocator *v6;
  int *v7;
  char *v8;
  CFStringRef v9;
  NSObject *v10;
  const __CFAllocator *v11;
  int *v12;
  char *v13;
  CFStringRef v14;
  NSObject *v15;
  sqlite3_stmt **v16;
  sqlite3_stmt **v17;
  uint64_t v18;
  uint64_t v19;
  const __CFString *v20;
  NSObject *v21;
  const __CFAllocator *v22;
  const char *v23;
  NSObject *v24;
  stat v26;
  uint8_t buf[4];
  CFStringRef v28;
  char v29[1024];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  memset(&v26, 0, sizeof(v26));
  bzero(v29, 0x400uLL);
  if (__CSCreateStoragePath(a1, a2, 0, v29, 0x400uLL))
  {
    if (!stat(v29, &v26))
      return v26.st_ino;
    if ((a3 & 1) == 0)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_737);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v7 = __error();
        v8 = strerror(*v7);
        v9 = CFStringCreateWithFormat(v6, 0, CFSTR("Attempting first aid in %s after stat failed for \"%s\": %s\n"), "_CSStorageFileInode", v29, v8);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_742);
        v10 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          v28 = v9;
          _os_log_impl(&dword_20A95C000, v10, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v9)
          CFRelease(v9);
      }
      CSAttemptAutomaticFirstAidForStorageFile(a1, a2);
    }
  }
  else
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_730);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v12 = __error();
      v13 = strerror(*v12);
      v14 = CFStringCreateWithFormat(v11, 0, CFSTR("stat failed for path: %s : %s"), v29, v13);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_734);
      v15 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v28 = v14;
        _os_log_impl(&dword_20A95C000, v15, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v14)
        CFRelease(v14);
    }
  }
  v16 = _CSPrepareStatement(a1, CFSTR("SELECT ft_inode FROM CSStorageFileTable WHERE ft_rowid = ?"), "SELECT ft_inode FROM CSStorageFileTable WHERE ft_rowid = ?");
  if (v16)
  {
    v17 = v16;
    sqlite3_bind_int64(v16[2], 1, a2);
    v18 = CS_sqlite3_step((uint64_t *)v17);
    if ((_DWORD)v18 != 101)
    {
      v19 = v18;
      if ((_DWORD)v18 == 100)
      {
        v20 = (const __CFString *)sqlite3_column_int64(v17[2], 0);
LABEL_48:
        _CSFinishPreparedStatement((uint64_t *)v17);
        return (__darwin_ino64_t)v20;
      }
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_748);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        v22 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v23 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        v20 = CFStringCreateWithFormat(v22, 0, CFSTR("sqlite3_step returned: %d %s\n"), v19, v23);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_751);
        v24 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          v28 = v20;
          _os_log_impl(&dword_20A95C000, v24, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (!v20)
          goto LABEL_48;
        CFRelease(v20);
      }
    }
    v20 = 0;
    goto LABEL_48;
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_754);
  if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    return 0;
  v20 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("null sqlite3_stmt\n"));
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_757);
  v21 = CK_DEFAULT_LOG_INTERNAL_1;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    v28 = v20;
    _os_log_impl(&dword_20A95C000, v21, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
  }
  if (v20)
  {
    CFRelease(v20);
    return 0;
  }
  return (__darwin_ino64_t)v20;
}

uint64_t _CSRetainChunkForRowID(uint64_t a1, sqlite3_int64 a2)
{
  sqlite3_stmt **v4;
  sqlite3_stmt **v5;
  uint64_t v6;
  uint64_t v7;
  const __CFAllocator *v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v13;
  uint64_t v14;
  sqlite3_int64 v15;
  sqlite3_int64 v16;
  int v17;
  char *v18;
  sqlite3_stmt **v19;
  sqlite3_int64 v20;
  uint64_t v21;
  uint64_t v22;
  const __CFAllocator *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const __CFAllocator *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const __CFAllocator *v31;
  const char *v32;
  uint8_t buf[4];
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = _CSPrepareStatement(a1, CFSTR("SELECT refCount, dataLen, ft_rowid FROM CSChunkTable WHERE ct_rowid = ?"), "SELECT refCount, dataLen, ft_rowid FROM CSChunkTable WHERE ct_rowid = ?");
  v5 = v4;
  if (!v4)
    goto LABEL_13;
  v6 = sqlite3_bind_int64(v4[2], 1, a2);
  if ((_DWORD)v6)
  {
    v7 = v6;
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_584_0);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
    v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v9 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
    v10 = (uint64_t)CFStringCreateWithFormat(v8, 0, CFSTR("sqlite3_bind_int64 failed for row id %lld: %d %s"), a2, v7, v9);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_588);
    v11 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v34 = v10;
LABEL_10:
      _os_log_impl(&dword_20A95C000, v11, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
  }
  else
  {
    v13 = CS_sqlite3_step((uint64_t *)v5);
    if ((_DWORD)v13 == 101)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_599);
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        goto LABEL_13;
      v10 = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Attempted to retain row ID %llu that did not exist\n"), a2);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_604);
      v11 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v34 = v10;
        goto LABEL_10;
      }
    }
    else
    {
      v14 = v13;
      if ((_DWORD)v13 == 100)
      {
        v15 = sqlite3_column_int64(v5[2], 0);
        if (v15
          || (v16 = sqlite3_column_int64(v5[2], 1),
              v17 = sqlite3_column_int(v5[2], 2),
              v18 = (char *)CSsql_get64(a1, 1, "SELECT ft_pspace FROM CSStorageFileTable WHERE ft_rowid = %lld", v16),
              (unint64_t)v18 < v17)
          || !CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "UPDATE CSStorageFileTable SET ft_pspace = %lld WHERE ft_rowid = %lld", &v18[-v17], v16))
        {
          _CSFinishPreparedStatement((uint64_t *)v5);
          v19 = _CSPrepareStatement(a1, CFSTR("UPDATE CSChunkTable SET refCount = ? WHERE ct_rowid = ?"), "UPDATE CSChunkTable SET refCount = ? WHERE ct_rowid = ?");
          v5 = v19;
          if (!v19)
            goto LABEL_13;
          v20 = v15 + 1;
          v21 = sqlite3_bind_int64(v19[2], 1, v15 + 1);
          if ((_DWORD)v21)
          {
            v22 = v21;
            if (CK_DEFAULT_LOG_BLOCK_1 != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_618);
            if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
              goto LABEL_13;
            v23 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
            v24 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
            v10 = (uint64_t)CFStringCreateWithFormat(v23, 0, CFSTR("sqlite3_bind_int64 failed for refCount %lld: %d %s"), v20, v22, v24);
            if (CK_DEFAULT_LOG_BLOCK_1 != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_623);
            v11 = CK_DEFAULT_LOG_INTERNAL_1;
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138543362;
              v34 = v10;
              goto LABEL_10;
            }
          }
          else
          {
            v25 = sqlite3_bind_int64(v5[2], 2, a2);
            if ((_DWORD)v25)
            {
              v26 = v25;
              if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_626);
              if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                goto LABEL_13;
              v27 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
              v28 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
              v10 = (uint64_t)CFStringCreateWithFormat(v27, 0, CFSTR("sqlite3_bind_int64 failed for rowId %lld: %d %s"), a2, v26, v28);
              if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_631);
              v11 = CK_DEFAULT_LOG_INTERNAL_1;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138543362;
                v34 = v10;
                goto LABEL_10;
              }
            }
            else
            {
              v29 = CS_sqlite3_step((uint64_t *)v5);
              if ((_DWORD)v29 == 101)
              {
                v10 = 1;
                goto LABEL_14;
              }
              v30 = v29;
              if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_634);
              if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                goto LABEL_13;
              v31 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
              v32 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
              v10 = (uint64_t)CFStringCreateWithFormat(v31, 0, CFSTR("sqlite3_step failed: %d %s"), v30, v32);
              if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_639);
              v11 = CK_DEFAULT_LOG_INTERNAL_1;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138543362;
                v34 = v10;
                goto LABEL_10;
              }
            }
          }
        }
        else
        {
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_591);
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
            goto LABEL_13;
          v10 = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("setFT_pSpace failed for ftRowId:%llu, rowId:%llu\n"), v16, a2);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_596);
          v11 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            v34 = v10;
            goto LABEL_10;
          }
        }
      }
      else
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_607);
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          goto LABEL_13;
        v10 = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Failed to get row ID %llu from database (%d)\n"), a2, v14);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_612);
        v11 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          v34 = v10;
          goto LABEL_10;
        }
      }
    }
  }
  if (v10)
  {
    CFRelease((CFTypeRef)v10);
LABEL_13:
    v10 = 0;
  }
LABEL_14:
  _CSFinishPreparedStatement((uint64_t *)v5);
  return v10;
}

sqlite3_int64 _CSRefCountForChunkWithRowID(uint64_t a1, sqlite3_int64 a2)
{
  sqlite3_stmt **v4;
  sqlite3_stmt **v5;
  uint64_t v6;
  const __CFAllocator *v7;
  const char *v8;
  CFStringRef v9;
  NSObject *v10;
  uint64_t v12;
  uint64_t v13;
  const __CFAllocator *v14;
  const char *v15;
  uint8_t buf[4];
  CFStringRef v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = _CSPrepareStatement(a1, CFSTR("SELECT refCount FROM CSChunkTable WHERE ct_rowid = ? AND location = ?"), "SELECT refCount FROM CSChunkTable WHERE ct_rowid = ? AND location = ?");
  if (!v4)
    return -1;
  v5 = v4;
  v6 = sqlite3_bind_int64(v4[2], 1, a2);
  if ((_DWORD)v6 || (v6 = sqlite3_bind_int(v5[2], 2, 115), (_DWORD)v6))
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_716);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      return -1;
    v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v8 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
    v9 = CFStringCreateWithFormat(v7, 0, CFSTR("sqlite3_bind returned: %s (%d)"), v8, v6);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_720);
    v10 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    *(_DWORD *)buf = 138543362;
    v17 = v9;
    goto LABEL_11;
  }
  v12 = CS_sqlite3_step((uint64_t *)v5);
  if ((_DWORD)v12 != 100)
  {
    v13 = v12;
    if ((_DWORD)v12 == 101)
      return -1;
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_723);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      return -1;
    v14 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v15 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
    v9 = CFStringCreateWithFormat(v14, 0, CFSTR("sqlite3_step returned: %s (%d)"), v15, v13);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_728);
    v10 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    *(_DWORD *)buf = 138543362;
    v17 = v9;
LABEL_11:
    _os_log_impl(&dword_20A95C000, v10, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
LABEL_12:
    if (v9)
      CFRelease(v9);
    return -1;
  }
  return sqlite3_column_int64(v5[2], 0);
}

uint64_t addRegisteredChunk(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, char a6, _BYTE *a7, _BYTE *a8, unsigned __int8 *a9, int a10)
{
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  size_t v22;
  uint64_t v23;
  size_t v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t result;
  unsigned int v31;
  size_t v32;
  unsigned int v33;
  void *v34;
  unsigned int v38;
  size_t __n;

  v15 = CKSignatureSize(a8);
  v16 = CKSchemeAndSignatureSize(a8);
  if (a9)
    v17 = CKSchemeAndEncryptionKeySize(a9);
  else
    v17 = 0;
  __n = v16;
  v38 = a5;
  if (a7)
  {
    v18 = CKSchemeAndSignatureSize(a7 + 1);
    v19 = CKSubchunkMaxLength(a7);
    if (v19)
      v20 = vcvtps_u32_f32((float)a5 / (float)v19);
    else
      v20 = 0;
    v22 = v20 * v18 + 1;
    v21 = a6;
    if (*(_QWORD *)a1)
      v23 = CKRegisteredChunkSubchunkBlobSize(*(_QWORD *)a1);
    else
      v23 = v22;
  }
  else
  {
    v21 = a6;
    v22 = 0;
    v23 = 0;
  }
  v24 = v15 + v17 + v23;
  v25 = v24 + 36;
  v26 = *(unsigned int *)(a1 + 8);
  LODWORD(v27) = *(_DWORD *)(a1 + 12);
  if ((_DWORD)v26 != (_DWORD)v27)
  {
    v31 = *(_DWORD *)(a1 + 8);
LABEL_23:
    if (v31 >= v27)
      addRegisteredChunk_cold_4();
    if (!*(_QWORD *)a1)
      addRegisteredChunk_cold_2();
    v32 = *(_QWORD *)a1 + v25 * v26;
    *(_OWORD *)v32 = 0u;
    *(_OWORD *)(v32 + 16) = 0u;
    *(_DWORD *)(v32 + 32) = 0;
    *(_QWORD *)v32 = a2;
    *(_QWORD *)(v32 + 8) = a3;
    *(_QWORD *)(v32 + 16) = a4;
    *(_DWORD *)(v32 + 24) = v38;
    *(_BYTE *)(v32 + 28) = v21;
    *(_DWORD *)(v32 + 31) = a10;
    memcpy((void *)(v32 + 35), a8, __n);
    if (a9)
    {
      memcpy((void *)(v32 + __n + 35), a9, v17);
      *(_BYTE *)(v32 + 30) = 1;
    }
    *(_BYTE *)(v32 + 29) = v22 != 0;
    memcpy((void *)(v32 + v17 + __n + 35), a7, v22);
    v33 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v33;
    if (v26 >= v33)
      addRegisteredChunk_cold_3();
    return 0;
  }
  if (v24 == -36)
    addRegisteredChunk_cold_1();
  if (v26 <= 1)
    v28 = 1;
  else
    v28 = *(_DWORD *)(a1 + 8);
  v29 = 2 * v28;
  if (v26 >= 0x10000)
    v27 = (v26 + 1000);
  else
    v27 = v29;
  if (v27 < v26)
    return 0xFFFFFFFFLL;
  result = 0xFFFFFFFFLL;
  if (0xFFFFFFFF / v25 >= v27)
  {
    v34 = malloc_type_realloc(*(void **)a1, v25 * v27, 0xE3524EE1uLL);
    if (!v34)
      return 0xFFFFFFFFLL;
    *(_QWORD *)a1 = v34;
    *(_DWORD *)(a1 + 12) = v27;
    v31 = *(_DWORD *)(a1 + 8);
    goto LABEL_23;
  }
  return result;
}

uint64_t addStoredChunk(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, char a9, _BYTE *a10)
{
  uint64_t v15;
  size_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t result;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  void *v26;

  v15 = CKSignatureSize(a10);
  v16 = CKSchemeAndSignatureSize(a10);
  v17 = v15 + 57;
  v18 = *(unsigned int *)(a1 + 8);
  LODWORD(v19) = *(_DWORD *)(a1 + 12);
  if ((_DWORD)v18 != (_DWORD)v19)
  {
    v23 = *(_DWORD *)(a1 + 8);
LABEL_12:
    if (v23 >= v19)
      addStoredChunk_cold_4();
    if (!*(_QWORD *)a1)
      addStoredChunk_cold_2();
    v24 = *(_QWORD *)a1 + v17 * v18;
    *(_OWORD *)v24 = 0u;
    *(_OWORD *)(v24 + 16) = 0u;
    *(_OWORD *)(v24 + 32) = 0u;
    *(_OWORD *)(v24 + 41) = 0u;
    *(_DWORD *)v24 = a2;
    *(_QWORD *)(v24 + 4) = a3;
    *(_DWORD *)(v24 + 12) = a5;
    *(_QWORD *)(v24 + 16) = a4;
    *(_QWORD *)(v24 + 24) = a6 + v16 + 4;
    *(_QWORD *)(v24 + 32) = a6;
    *(_DWORD *)(v24 + 40) = a7;
    *(_QWORD *)(v24 + 44) = a8;
    *(_DWORD *)(v24 + 52) = a9;
    memcpy((void *)(v24 + 56), a10, v16);
    v25 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v25;
    if (v18 >= v25)
      addStoredChunk_cold_3();
    return 0;
  }
  if (!v17)
    addStoredChunk_cold_1();
  if (v18 <= 1)
    v20 = 1;
  else
    v20 = *(_DWORD *)(a1 + 8);
  v21 = 2 * v20;
  if (v18 >= 0x10000)
    v19 = (v18 + 1000);
  else
    v19 = v21;
  if (v19 < v18)
    return 0xFFFFFFFFLL;
  result = 0xFFFFFFFFLL;
  if (0xFFFFFFFF / v17 >= v19)
  {
    v26 = malloc_type_realloc(*(void **)a1, v17 * v19, 0x5BE5CF1CuLL);
    if (!v26)
      return 0xFFFFFFFFLL;
    *(_QWORD *)a1 = v26;
    *(_DWORD *)(a1 + 12) = v19;
    v23 = *(_DWORD *)(a1 + 8);
    goto LABEL_12;
  }
  return result;
}

BOOL _CSRegisterChunkList(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  _BOOL8 v9;
  CFStringRef v10;
  NSObject *v11;
  int v13;
  CFStringRef v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 264);
  v5 = *(unsigned int *)(a2 + 308);
  v6 = *(_DWORD *)(a2 + 272);
  if (*(_BYTE *)(a2 + 183))
    *(_QWORD *)(a2 + 528) = mach_absolute_time();
  if (!v6)
  {
LABEL_9:
    v9 = 1;
    goto LABEL_20;
  }
  if (_CSRegisterChunk(a1, v4, *(char *)(v4 + 28)))
  {
    v7 = 0;
    while (1)
    {
      v8 = CKRegisteredChunkSubchunkBlobSize(v4);
      if (v6 - 1 == v7)
        goto LABEL_9;
      v4 += v8 + v5;
      ++v7;
      if (!_CSRegisterChunk(a1, v4, *(char *)(v4 + 28)))
      {
        v9 = v7 >= v6;
        goto LABEL_11;
      }
    }
  }
  v9 = 0;
LABEL_11:
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_778);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("_CSRegisterChunk failed\n"));
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_782);
    v11 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v13 = 138543362;
      v14 = v10;
      _os_log_impl(&dword_20A95C000, v11, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v13, 0xCu);
    }
    if (v10)
      CFRelease(v10);
  }
LABEL_20:
  if (*(_BYTE *)(a2 + 183))
    *(_QWORD *)(a2 + 536) += mach_absolute_time() - *(_QWORD *)(a2 + 528);
  return v9;
}

sqlite3_int64 _CSRegisterChunk(uint64_t a1, uint64_t a2, int a3)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  sqlite3_stmt **v11;
  int v12;
  sqlite3_int64 insert_rowid;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  const __CFAllocator *v18;
  const char *v19;
  CFStringRef v20;
  NSObject *v21;
  uint8_t buf[4];
  CFStringRef v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 17))
    _CSRegisterChunk_cold_3();
  v6 = (_BYTE *)(a2 + 35);
  v7 = CKChunkSchemeSignatureAndKeySize((_BYTE *)(a2 + 35));
  if (v7)
  {
    v8 = v7;
    if (*(_BYTE *)(a2 + 29)
      && *(_BYTE *)(a2 + v7 + 35)
      && (v9 = vcvtps_u32_f32((float)*(unsigned int *)(a2 + 24) / (float)((unint64_t)*(unsigned __int8 *)(a2 + v7 + 35) << 10))) != 0)
    {
      v10 = CKChunkSchemeAndSignatureSize(&v6[v7 + 1]) * v9 + 1;
    }
    else
    {
      v10 = 0;
    }
    v11 = _CSPrepareStatement(a1, CFSTR("INSERT INTO CSChunkTable (cid, ct_iid, offset, dataLen, location, subchunksBlob, key) VALUES (?, ?, ?, ?, ?, ?, ?)"), "INSERT INTO CSChunkTable (cid, ct_iid, offset, dataLen, location, subchunksBlob, key) VALUES (?, ?, ?, ?, ?, ?, ?)");
    if (v11)
    {
      v12 = CKChunkSchemeAndSignatureSize(v6);
      sqlite3_bind_blob(v11[2], 1, v6, v12, 0);
      sqlite3_bind_int64(v11[2], 2, *(_QWORD *)(a2 + 8));
      sqlite3_bind_int64(v11[2], 3, *(_QWORD *)(a2 + 16));
      sqlite3_bind_int(v11[2], 4, *(_DWORD *)(a2 + 24));
      sqlite3_bind_int(v11[2], 5, a3);
      sqlite3_bind_blob(v11[2], 6, (const void *)(a2 + 35 + v8), v10, 0);
      if (*(char *)(a2 + 35) < 0)
      {
        if (!*(_BYTE *)(a2 + 30))
          _CSRegisterChunk_cold_2();
        v14 = (unsigned __int8 *)(a2 + CKChunkSchemeAndSignatureSize(v6) + 35);
        v15 = CKChunkSchemeAndEncryptionKeySize(v14);
        sqlite3_bind_blob(v11[2], 7, v14, v15, 0);
      }
      else if (*(_BYTE *)(a2 + 30))
      {
        _CSRegisterChunk_cold_1();
      }
      v16 = CS_sqlite3_step((uint64_t *)v11);
      if ((_DWORD)v16 == 101)
      {
        insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 24));
        *(_QWORD *)a2 = insert_rowid;
        *(_BYTE *)(a2 + 28) = a3;
LABEL_28:
        _CSFinishPreparedStatement((uint64_t *)v11);
        return insert_rowid;
      }
      v17 = v16;
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_791);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        v18 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v19 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        v20 = CFStringCreateWithFormat(v18, 0, CFSTR("sqlite3_step returned: %d %s, for chunk:\n"), v17, v19);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_795);
        v21 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          v24 = v20;
          _os_log_impl(&dword_20A95C000, v21, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v20)
          CFRelease(v20);
      }
      printRegisteredChunk(a2);
    }
    insert_rowid = 0;
    goto LABEL_28;
  }
  return 0;
}

uint64_t _CSGetRegisteredChunk(uint64_t a1, _BYTE *a2, char **a3)
{
  int v6;
  sqlite3_stmt **v7;
  sqlite3_stmt **v8;
  uint64_t v9;
  int v10;
  char v11;
  _BYTE *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  const __CFAllocator *v15;
  const char *v16;
  CFStringRef v17;
  NSObject *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned __int8 *v21;
  char *v22;
  char *v23;
  uint8_t buf[4];
  CFStringRef v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  v6 = CKChunkSchemeAndSignatureSize(a2);
  v7 = _CSPrepareStatement(a1, CFSTR("SELECT * FROM CSChunkTable WHERE cid = ?"), "SELECT * FROM CSChunkTable WHERE cid = ?");
  v8 = v7;
  if (v7)
  {
    sqlite3_bind_blob(v7[2], 1, a2, v6, 0);
    do
    {
      v9 = CS_sqlite3_step((uint64_t *)v8);
      if ((_DWORD)v9 != 100)
      {
        v14 = v9;
        if ((v9 - 102) > 0xFFFFFFFD)
          goto LABEL_22;
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_800);
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          v15 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          v16 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
          v17 = CFStringCreateWithFormat(v15, 0, CFSTR("sqlite3_step returned: %d %s, for signature:\n"), v14, v16);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_804);
          v18 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            v26 = v17;
            _os_log_impl(&dword_20A95C000, v18, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
          }
          if (v17)
            CFRelease(v17);
        }
        printSignature(a2);
        _CSFinishPreparedStatement((uint64_t *)v8);
        return 0;
      }
      v10 = sqlite3_column_int(v8[2], 8);
      v11 = v10;
    }
    while (v10 != 116 && v10 != 114);
    v12 = sqlite3_column_blob(v8[2], 1);
    if ((char)*v12 < 0)
      v13 = (unsigned __int8 *)sqlite3_column_blob(v8[2], 9);
    else
      v13 = 0;
    v20 = sqlite3_column_int(v8[2], 5);
    v21 = (unsigned __int8 *)sqlite3_column_blob(v8[2], 10);
    v22 = CKCreateRegisteredChunkWithSubchunkBlob(v12, v13, v20, v21);
    if (v22)
    {
      v23 = v22;
      *((_QWORD *)v22 + 1) = sqlite3_column_int64(v8[2], 2);
      *(_QWORD *)v23 = sqlite3_column_int64(v8[2], 0);
      *((_QWORD *)v23 + 2) = sqlite3_column_int64(v8[2], 4);
      *((_DWORD *)v23 + 6) = v20;
      v23[28] = v11;
      *a3 = v23;
      v19 = 1;
      goto LABEL_23;
    }
  }
LABEL_22:
  v19 = 0;
LABEL_23:
  _CSFinishPreparedStatement((uint64_t *)v8);
  return v19;
}

uint64_t _CSGetRegisteredChunks(uint64_t a1, _BYTE *a2, _QWORD *a3, int *a4)
{
  int v8;
  sqlite3_stmt **v9;
  sqlite3_stmt **v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  unsigned __int8 *v16;
  sqlite3_int64 v17;
  sqlite3_int64 v18;
  sqlite3_int64 v19;
  unsigned int v20;
  _BYTE *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  const __CFAllocator *v25;
  const char *v26;
  CFStringRef v27;
  NSObject *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t buf[4];
  CFStringRef v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  v31 = 0;
  v32 = 0;
  v8 = CKChunkSchemeAndSignatureSize(a2);
  v9 = _CSPrepareStatement(a1, CFSTR("SELECT * FROM CSChunkTable WHERE cid = ?"), "SELECT * FROM CSChunkTable WHERE cid = ?");
  v10 = v9;
  if (!v9)
  {
LABEL_32:
    v24 = 0;
    goto LABEL_33;
  }
  v30 = a1;
  sqlite3_bind_blob(v9[2], 1, a2, v8, 0);
  v11 = *a4;
  if (*a4 < 1)
  {
    v12 = 0;
    v22 = 0;
  }
  else
  {
    v12 = 0;
    while (1)
    {
      v13 = CS_sqlite3_step((uint64_t *)v10);
      if ((_DWORD)v13 != 100)
        break;
      v14 = sqlite3_column_int(v10[2], 8);
      v15 = v14;
      if (v14 == 116 || v14 == 114)
      {
        if (*(char *)sqlite3_column_blob(v10[2], 1) < 0)
          v16 = (unsigned __int8 *)sqlite3_column_blob(v10[2], 9);
        else
          v16 = 0;
        v17 = sqlite3_column_int64(v10[2], 2);
        v18 = sqlite3_column_int64(v10[2], 0);
        v19 = sqlite3_column_int64(v10[2], 4);
        v20 = sqlite3_column_int(v10[2], 5);
        v21 = sqlite3_column_blob(v10[2], 10);
        if (addRegisteredChunk((uint64_t)&v31, v18, v17, v19, v20, v15, v21, a2, v16, 0))
          goto LABEL_32;
        v12 = v32;
      }
      if (v12 >= *a4)
        goto LABEL_21;
    }
    v22 = v13;
    v11 = *a4;
  }
  if (v11)
    v23 = (v22 - 102) > 0xFFFFFFFD;
  else
    v23 = 1;
  if (!v23)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_806);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v25 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v26 = sqlite3_errmsg(*(sqlite3 **)(v30 + 24));
      v27 = CFStringCreateWithFormat(v25, 0, CFSTR("sqlite3_step returned: %d %s, for signature:\n"), v22, v26);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_808);
      v28 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v34 = v27;
        _os_log_impl(&dword_20A95C000, v28, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v27)
        CFRelease(v27);
    }
    printSignature(a2);
    goto LABEL_32;
  }
LABEL_21:
  *a3 = v31;
  *a4 = v12;
  v31 = 0;
  v24 = 1;
LABEL_33:
  _CSFinishPreparedStatement((uint64_t *)v10);
  clearChunksArray((uint64_t)&v31);
  return v24;
}

const __CFString *registerItem(uint64_t a1, uint64_t a2, sqlite3_int64 a3, uint64_t a4, int a5)
{
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v13;
  BOOL v14;
  int v15;
  CFStringRef v17;
  NSObject *v18;
  sqlite3_stmt **v19;
  int v20;
  const __CFData *v21;
  const __CFData *v22;
  const UInt8 *BytePtr;
  int Length;
  sqlite3_int64 v25;
  int v26;
  const __CFBoolean *IsDefault;
  _BOOL4 v28;
  const __CFString *v29;
  const __CFString *v30;
  uint64_t v31;
  const __CFString *insert_rowid;
  uint64_t v33;
  const __CFAllocator *v34;
  const char *v35;
  NSObject *v36;
  NSObject *v37;
  char v39[1024];
  char buffer[1024];
  uint8_t buf[4];
  CFStringRef v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 17))
    registerItem_cold_1();
  v10 = (unsigned __int8 *)CKFileDigestResultsFileSignature(a2);
  if (((*v10 & 0x7F) - 3) <= 0xFDu)
  {
    v11 = *v10;
    if (v11 > 0xB || ((1 << v11) & 0x910) == 0)
    {
      v13 = v11 - 132;
      v14 = v13 > 7;
      v15 = (1 << v13) & 0x91;
      if (v14 || v15 == 0)
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_810);
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          insert_rowid = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Invalid file signature scheme:0x%x for itemID:%lld\n"), *v10, a3);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_814);
          v37 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            v42 = insert_rowid;
            _os_log_impl(&dword_20A95C000, v37, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
          }
          if (!insert_rowid)
          {
            v19 = 0;
            goto LABEL_65;
          }
          CFRelease(insert_rowid);
        }
        v19 = 0;
        goto LABEL_64;
      }
    }
  }
  unregisterItem(a1, a3);
  if (a5)
    _CSUnregisterChunksForItem(a1, a3);
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_817);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      v17 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Registering itemID:%lld"), a3);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_824);
      v18 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        v42 = v17;
        _os_log_impl(&dword_20A95C000, v18, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v17)
        CFRelease(v17);
    }
  }
  v19 = _CSPrepareStatement(a1, CFSTR("INSERT INTO CSRegisteredFileTable (crt_id, crt_iid, crt_filekey, crt_filesize, crt_profileType, crt_profileTypeIsDefault, crt_profileConfigurationVersion, crt_profileResolvedFileExtension) VALUES (?, ?, ?, ?, ?, ?, ?, ?)"), "INSERT INTO CSRegisteredFileTable (crt_id, crt_iid, crt_filekey, crt_filesize, crt_profileType, crt_profileTypeIsDefault, crt_profileConfigurationVersion, crt_profileResolvedFileExtension) VALUES (?, ?, ?, ?, ?, ?, ?, ?)");
  if (!v19)
    goto LABEL_64;
  v20 = CKFileSchemeAndSignatureSize(v10);
  sqlite3_bind_blob(v19[2], 1, v10, v20, 0);
  sqlite3_bind_int64(v19[2], 2, a3);
  v21 = (const __CFData *)CKFileDigestResultsFileVerificationKey(a2);
  if (v21)
  {
    v22 = v21;
    BytePtr = CFDataGetBytePtr(v21);
    Length = CFDataGetLength(v22);
    sqlite3_bind_blob(v19[2], 3, BytePtr, Length, 0);
  }
  else
  {
    sqlite3_bind_null(v19[2], 3);
  }
  if (CKFileDigestResultsHasFileLength(a2))
  {
    v25 = CKFileDigestResultsFileLength(a2);
    sqlite3_bind_int64(v19[2], 4, v25);
  }
  else
  {
    sqlite3_bind_null(v19[2], 4);
  }
  v26 = CKProfileResultsType(a4);
  sqlite3_bind_int(v19[2], 5, v26);
  IsDefault = (const __CFBoolean *)CKProfileResultsIsDefault(a4);
  if (IsDefault)
  {
    v28 = CFBooleanGetValue(IsDefault) != 0;
    sqlite3_bind_int(v19[2], 6, v28);
  }
  else
  {
    sqlite3_bind_null(v19[2], 6);
  }
  v29 = (const __CFString *)CKProfileResultsConfigurationVersion(a4);
  bzero(buffer, 0x400uLL);
  if (v29 && CFStringGetCString(v29, buffer, 1024, 0x8000100u))
    sqlite3_bind_text(v19[2], 7, buffer, 1024, 0);
  else
    sqlite3_bind_null(v19[2], 7);
  v30 = (const __CFString *)CKProfileResultsResolvedFileExtension(a4);
  bzero(v39, 0x400uLL);
  if (v30 && CFStringGetCString(v30, v39, 1024, 0x8000100u))
    sqlite3_bind_text(v19[2], 8, v39, 1024, 0);
  else
    sqlite3_bind_null(v19[2], 8);
  v31 = CS_sqlite3_step((uint64_t *)v19);
  if ((_DWORD)v31 == 101)
  {
    insert_rowid = (const __CFString *)sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 24));
    goto LABEL_65;
  }
  v33 = v31;
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_830);
  if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
LABEL_64:
    insert_rowid = 0;
    goto LABEL_65;
  }
  v34 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v35 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
  insert_rowid = CFStringCreateWithFormat(v34, 0, CFSTR("sqlite3_step returned: %d %s\n"), v33, v35);
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_833);
  v36 = CK_DEFAULT_LOG_INTERNAL_1;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    v42 = insert_rowid;
    _os_log_impl(&dword_20A95C000, v36, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
  }
  if (insert_rowid)
  {
    CFRelease(insert_rowid);
    goto LABEL_64;
  }
LABEL_65:
  _CSFinishPreparedStatement((uint64_t *)v19);
  return insert_rowid;
}

os_log_t __registerItem_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __registerItem_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

uint64_t unregisterItem(uint64_t a1, sqlite3_int64 a2)
{
  CFStringRef v4;
  NSObject *v5;
  sqlite3_stmt **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFAllocator *v11;
  const char *v12;
  CFStringRef v13;
  NSObject *v14;
  uint8_t buf[4];
  CFStringRef v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 17))
    unregisterItem_cold_1();
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_835);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Unregistering itemID:%lld"), a2);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_841);
      v5 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        v17 = v4;
        _os_log_impl(&dword_20A95C000, v5, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v4)
        CFRelease(v4);
    }
  }
  v6 = _CSPrepareStatement(a1, CFSTR("DELETE FROM CSRegisteredFileTable WHERE crt_iid = ?"), "DELETE FROM CSRegisteredFileTable WHERE crt_iid = ?");
  v7 = (uint64_t *)v6;
  if (!v6)
    goto LABEL_24;
  v8 = 1;
  sqlite3_bind_int64(v6[2], 1, a2);
  v9 = CS_sqlite3_step(v7);
  if ((_DWORD)v9 != 101)
  {
    v10 = v9;
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_847);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v12 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
      v13 = CFStringCreateWithFormat(v11, 0, CFSTR("sqlite3_step returned: %d %s, for itemID:%lld\n"), v10, v12, a2);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_852);
      v14 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v17 = v13;
        _os_log_impl(&dword_20A95C000, v14, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v13)
        CFRelease(v13);
    }
LABEL_24:
    v8 = 0;
  }
  _CSFinishPreparedStatement(v7);
  return v8;
}

uint64_t _CSUnregisterChunksForItem(uint64_t a1, sqlite3_int64 a2)
{
  CFStringRef v4;
  NSObject *v5;
  _BOOL8 v6;
  sqlite3_stmt **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  const __CFAllocator *v11;
  const char *v12;
  CFStringRef v13;
  NSObject *v14;
  CFStringRef v15;
  NSObject *v16;
  uint8_t buf[4];
  CFStringRef v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_903);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Unregistering chunks for itemID:%lld"), a2);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_909);
      v5 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        v19 = v4;
        _os_log_impl(&dword_20A95C000, v5, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v4)
        CFRelease(v4);
    }
  }
  if (*(_BYTE *)(a1 + 17))
    return 0;
  v7 = _CSPrepareStatement(a1, CFSTR("DELETE FROM CSChunkTable WHERE ct_iid = ? AND location = 114"), "DELETE FROM CSChunkTable WHERE ct_iid = ? AND location = 114");
  if (v7)
  {
    v8 = (uint64_t *)v7;
    sqlite3_bind_int64(v7[2], 1, a2);
    v9 = CS_sqlite3_step(v8);
    v6 = (_DWORD)v9 == 101;
    if ((_DWORD)v9 != 101)
    {
      v10 = v9;
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_915);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v12 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        v13 = CFStringCreateWithFormat(v11, 0, CFSTR("sqlite3_step returned: %d %s, for itemID:%lld\n"), v10, v12, a2);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_918);
        v14 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          v19 = v13;
          _os_log_impl(&dword_20A95C000, v14, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v13)
          CFRelease(v13);
      }
    }
    _CSFinishPreparedStatement(v8);
  }
  else
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_921);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v15 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("null sqlite3_stmt\n"));
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_924);
      v16 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v19 = v15;
        _os_log_impl(&dword_20A95C000, v16, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v15)
        CFRelease(v15);
    }
    return 1;
  }
  return v6;
}

os_log_t __registerItem_block_invoke_815()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __registerItem_block_invoke_3()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __registerItem_block_invoke_828()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __registerItem_block_invoke_2_831()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __unregisterItem_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __unregisterItem_block_invoke_3()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __unregisterItem_block_invoke_845()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __unregisterItem_block_invoke_2_850()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

CFStringRef _CSCopyChunkListForItemID(uint64_t a1, sqlite3_int64 a2, _QWORD *a3)
{
  sqlite3_stmt **v6;
  sqlite3_stmt **v7;
  uint64_t v8;
  sqlite3_int64 v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  sqlite3_int64 v12;
  unsigned int v13;
  char v14;
  _BYTE *v15;
  uint64_t v16;
  CFStringRef v17;
  const __CFAllocator *v18;
  const char *v19;
  NSObject *v20;
  const __CFString *v22;
  uint64_t v23;
  uint8_t buf[4];
  CFStringRef v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v22 = 0;
  v23 = 0;
  *a3 = 0;
  v6 = _CSPrepareStatement(a1, CFSTR("SELECT ct_rowid, cid, offset, dataLen, location, subchunksBlob, key FROM CSChunkTable WHERE ct_iid = ? ORDER BY offset"), "SELECT ct_rowid, cid, offset, dataLen, location, subchunksBlob, key FROM CSChunkTable WHERE ct_iid = ? ORDER BY offset");
  v7 = v6;
  if (!v6)
    goto LABEL_20;
  sqlite3_bind_int64(v6[2], 1, a2);
  while (1)
  {
    v8 = CS_sqlite3_step((uint64_t *)v7);
    if ((_DWORD)v8 != 100)
      break;
    v9 = sqlite3_column_int64(v7[2], 0);
    v10 = sqlite3_column_blob(v7[2], 1);
    if ((char)*v10 < 0)
      v11 = (unsigned __int8 *)sqlite3_column_blob(v7[2], 6);
    else
      v11 = 0;
    v12 = sqlite3_column_int64(v7[2], 2);
    v13 = sqlite3_column_int(v7[2], 3);
    v14 = sqlite3_column_int(v7[2], 4);
    v15 = sqlite3_column_blob(v7[2], 5);
    if (addRegisteredChunk((uint64_t)&v22, v9, a2, v12, v13, v14, v15, v10, v11, 0))
      goto LABEL_20;
  }
  v16 = v8;
  if ((_DWORD)v8 == 101)
  {
    v17 = v22;
    v22 = 0;
    *a3 = v23;
    goto LABEL_21;
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_857);
  if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
LABEL_20:
    v17 = 0;
    goto LABEL_21;
  }
  v18 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v19 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
  v17 = CFStringCreateWithFormat(v18, 0, CFSTR("sqlite3_step returned: %d %s, for itemID:%lld\n"), v16, v19, a2);
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_859);
  v20 = CK_DEFAULT_LOG_INTERNAL_1;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    v25 = v17;
    _os_log_impl(&dword_20A95C000, v20, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
  }
  if (v17)
  {
    CFRelease(v17);
    goto LABEL_20;
  }
LABEL_21:
  _CSFinishPreparedStatement((uint64_t *)v7);
  clearChunksArray((uint64_t)&v22);
  return v17;
}

void _CSGetItemIdsForFileSignature(uint64_t a1, _BYTE *a2, unsigned int (*a3)(sqlite3_int64, uint64_t), uint64_t a4)
{
  sqlite3_stmt **v8;
  sqlite3_stmt **v9;
  int v10;
  uint64_t v11;
  sqlite3_int64 v12;
  uint64_t v13;
  const __CFAllocator *v14;
  const char *v15;
  CFStringRef v16;
  NSObject *v17;
  CFStringRef v18;
  NSObject *v19;
  uint8_t buf[4];
  CFStringRef v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v8 = _CSPrepareStatement(a1, CFSTR("SELECT crt_iid FROM CSRegisteredFileTable WHERE crt_id = ?"), "SELECT crt_iid FROM CSRegisteredFileTable WHERE crt_id = ?");
  if (v8)
  {
    v9 = v8;
    v10 = CKFileSchemeAndSignatureSize(a2);
    sqlite3_bind_blob(v9[2], 1, a2, v10, 0);
    while (1)
    {
      v11 = CS_sqlite3_step((uint64_t *)v9);
      if ((_DWORD)v11 != 100)
        break;
      v12 = sqlite3_column_int64(v9[2], 0);
      if (a3(v12, a4))
        goto LABEL_16;
    }
    v13 = v11;
    if ((_DWORD)v11 != 101)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_864);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        v14 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v15 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        v16 = CFStringCreateWithFormat(v14, 0, CFSTR("sqlite3_step returned: %d %s\n"), v13, v15);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_866);
        v17 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          v21 = v16;
          _os_log_impl(&dword_20A95C000, v17, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v16)
          CFRelease(v16);
      }
    }
LABEL_16:
    _CSFinishPreparedStatement((uint64_t *)v9);
  }
  else
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_869);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v18 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("null sqlite3_stmt\n"));
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_872);
      v19 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v21 = v18;
        _os_log_impl(&dword_20A95C000, v19, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v18)
        CFRelease(v18);
    }
  }
}

uint64_t _CSGetItemIdForFileSignature(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v9;

  v9 = 0;
  if (((*a2 & 0x7F) - 3) <= 0xFDu)
  {
    v2 = *a2;
    if (v2 > 0xB || ((1 << v2) & 0x910) == 0)
    {
      v4 = v2 - 132;
      v5 = v4 > 7;
      v6 = (1 << v4) & 0x91;
      if (v5 || v6 == 0)
        return 0;
    }
  }
  _CSGetItemIdsForFileSignature(a1, a2, (unsigned int (*)(sqlite3_int64, uint64_t))_CSFetchOneItemCB, (uint64_t)&v9);
  return v9;
}

uint64_t _CSFetchOneItemCB(uint64_t a1, _QWORD *a2)
{
  *a2 = a1;
  return 1;
}

uint64_t _CSGetSignatureForItemID(uint64_t a1, sqlite3_int64 a2, int a3, CFTypeRef *a4, uint64_t *a5)
{
  sqlite3_stmt **v9;
  sqlite3_stmt **v10;
  uint64_t v11;
  CFStringRef v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  const __CFAllocator *v16;
  uint64_t v17;
  const UInt8 *v18;
  int v19;
  BOOL v20;
  CFDataRef v21;
  sqlite3_int64 v22;
  int v23;
  int v24;
  uint64_t v25;
  const unsigned __int8 *v26;
  int v27;
  size_t v28;
  const unsigned __int8 *v29;
  int v30;
  size_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  CFStringRef v35;
  NSObject *v36;
  uint64_t v37;
  const char *v38;
  CFStringRef v39;
  NSObject *v40;
  CFStringRef v41;
  CFStringRef v42;
  CFTypeRef *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  CFStringRef v49;
  CFStringRef v50;
  uint64_t v51;
  CFTypeRef cf;
  char v54;
  uint8_t buf[4];
  CFStringRef v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v54 = a3;
  cf = 0;
  if (a4)
    *a4 = 0;
  if (a5)
    *a5 = 0;
  v9 = _CSPrepareStatement(a1, CFSTR("SELECT crt_id, crt_filekey, crt_filesize, crt_profileType, crt_profileTypeIsDefault, crt_profileConfigurationVersion, crt_profileResolvedFileExtension FROM CSRegisteredFileTable WHERE crt_iid = ?"), "SELECT crt_id, crt_filekey, crt_filesize, crt_profileType, crt_profileTypeIsDefault, crt_profileConfigurationVersion, crt_profileResolvedFileExtension FROM CSRegisteredFileTable WHERE crt_iid = ?");
  if (!v9)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_877);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v12 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("null sqlite3_stmt\n"));
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_879);
      v13 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v56 = v12;
        _os_log_impl(&dword_20A95C000, v13, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v12)
        CFRelease(v12);
    }
    return 0;
  }
  v10 = v9;
  v45 = a5;
  sqlite3_bind_int64(v9[2], 1, a2);
  v44 = a4;
  if (a3)
    v11 = CKFileSchemeAndSignatureSize(&v54);
  else
    v11 = 0;
  v46 = a1;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v15 = 0;
  v16 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v47 = *MEMORY[0x24BDBD268];
  v48 = *MEMORY[0x24BDBD270];
  while (1)
  {
    v17 = CS_sqlite3_step((uint64_t *)v10);
    if ((_DWORD)v17 != 100)
      break;
    v18 = (const UInt8 *)sqlite3_column_blob(v10[2], 1);
    v19 = sqlite3_column_bytes(v10[2], 1);
    if (v18)
      v20 = v19 < 1;
    else
      v20 = 1;
    if (v20)
      v21 = 0;
    else
      v21 = CFDataCreate(v16, v18, v19);
    if (sqlite3_column_type(v10[2], 2) == 5)
      v22 = -1;
    else
      v22 = sqlite3_column_int64(v10[2], 2);
    if (sqlite3_column_type(v10[2], 3) != 5)
    {
      v23 = sqlite3_column_int(v10[2], 3);
      if ((v23 - 1) < 9)
        v15 = v23;
    }
    if (sqlite3_column_type(v10[2], 4) != 5)
    {
      v24 = sqlite3_column_int(v10[2], 4);
      if (v24 == 1)
      {
        v25 = v48;
        goto LABEL_38;
      }
      if (!v24)
      {
        v25 = v47;
LABEL_38:
        v51 = v25;
      }
    }
    if (sqlite3_column_type(v10[2], 5) != 5)
    {
      v26 = sqlite3_column_text(v10[2], 5);
      v27 = sqlite3_column_bytes(v10[2], 5);
      v28 = strnlen((const char *)v26, v27);
      if (v28 < v27)
      {
        if (v28)
          v49 = CFStringCreateWithCString(v16, (const char *)v26, 0x8000100u);
      }
    }
    if (sqlite3_column_type(v10[2], 6) != 5)
    {
      v29 = sqlite3_column_text(v10[2], 6);
      v30 = sqlite3_column_bytes(v10[2], 6);
      v31 = strnlen((const char *)v29, v30);
      if (v31 < v30)
      {
        if (v31)
          v50 = CFStringCreateWithCString(v16, (const char *)v29, 0x8000100u);
      }
    }
    v32 = sqlite3_column_blob(v10[2], 0);
    v33 = sqlite3_column_bytes(v10[2], 0);
    v34 = v33;
    if (v32 && (!v54 || (int)v33 >= (int)v11))
    {
      if (CKFileSchemeAndSignatureSize(v32))
      {
        if ((!v54 || v54 == *v32) && CKFileDigestResultsCreate(&cf, v32, v22, v21))
        {
          if (v21)
            CFRelease(v21);
          _CSFinishPreparedStatement((uint64_t *)v10);
          v42 = v49;
          v41 = v50;
          if (v44 && cf)
          {
            CFRetain(cf);
            *v44 = cf;
          }
          if (v45)
            CKProfileResultsCreate(v45, v15, v49, v50, v51, 0);
          v14 = 1;
          goto LABEL_84;
        }
      }
      else
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_890);
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          v35 = CFStringCreateWithFormat(v16, 0, CFSTR("signature size is 0, itemID:%lld\n"), a2);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_895);
          v36 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
LABEL_56:
            *(_DWORD *)buf = 138543362;
            v56 = v35;
            _os_log_impl(&dword_20A95C000, v36, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
          }
LABEL_57:
          if (v35)
            CFRelease(v35);
        }
      }
    }
    else
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_882);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        v35 = CFStringCreateWithFormat(v16, 0, CFSTR("sqlite3_column_blob returned bad data for itemID:%lld, blobSize:%d, expectedSize:%u\n"), a2, v34, v11);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_887);
        v36 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          goto LABEL_56;
        goto LABEL_57;
      }
    }
    if (v21)
      CFRelease(v21);
  }
  v37 = v17;
  if ((_DWORD)v17 != 101)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_898);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v38 = sqlite3_errmsg(*(sqlite3 **)(v46 + 24));
      v39 = CFStringCreateWithFormat(v16, 0, CFSTR("sqlite3_step returned: %d %s, for itemID:%lld\n"), v37, v38, a2);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_901);
      v40 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v56 = v39;
        _os_log_impl(&dword_20A95C000, v40, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v39)
        CFRelease(v39);
    }
  }
  _CSFinishPreparedStatement((uint64_t *)v10);
  v14 = 0;
  v42 = v49;
  v41 = v50;
LABEL_84:
  if (cf)
    CKBaseRelease(cf);
  cf = 0;
  if (v42)
    CKBaseRelease(v42);
  if (v41)
    CKBaseRelease(v41);
  return v14;
}

CFStringRef _CSCopyChunkListForFileSignature(uint64_t a1, unsigned __int8 *a2, _QWORD *a3)
{
  sqlite3_int64 v5;

  v5 = _CSGetItemIdForFileSignature(a1, a2);
  return _CSCopyChunkListForItemID(a1, v5, a3);
}

uint64_t _CSUnregisterAllTemporaryChunks(uint64_t a1)
{
  sqlite3_stmt **v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const __CFAllocator *v7;
  const char *v8;
  CFStringRef v9;
  NSObject *v10;
  uint8_t buf[4];
  CFStringRef v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 17))
    _CSUnregisterAllTemporaryChunks_cold_1();
  v2 = _CSPrepareStatement(a1, CFSTR("DELETE FROM CSChunkTable WHERE location = ?"), "DELETE FROM CSChunkTable WHERE location = ?");
  v3 = (uint64_t *)v2;
  if (!v2)
    goto LABEL_13;
  v4 = 1;
  sqlite3_bind_int(v2[2], 1, 116);
  v5 = CS_sqlite3_step(v3);
  if ((_DWORD)v5 != 101)
  {
    v6 = v5;
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_929);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v8 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
      v9 = CFStringCreateWithFormat(v7, 0, CFSTR("sqlite3_step returned: %d %s\n"), v6, v8);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_931);
      v10 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v13 = v9;
        _os_log_impl(&dword_20A95C000, v10, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v9)
        CFRelease(v9);
    }
LABEL_13:
    v4 = 0;
  }
  _CSFinishPreparedStatement(v3);
  return v4;
}

BOOL _CSRegisterTemporaryChunk(uint64_t a1, uint64_t a2)
{
  return _CSRegisterChunk(a1, a2, 116) != 0;
}

uint64_t _CSUnregisterTemporaryChunks(uint64_t a1, sqlite3_int64 a2)
{
  sqlite3_stmt **v4;
  sqlite3_stmt **v5;
  uint64_t v6;
  sqlite3_stmt **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFAllocator *v11;
  const char *v12;
  CFStringRef v13;
  NSObject *v14;
  uint64_t v15;
  const __CFAllocator *v16;
  const char *v17;
  uint8_t buf[4];
  CFStringRef v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 17))
    _CSUnregisterTemporaryChunks_cold_1();
  v4 = _CSPrepareStatement(a1, CFSTR("DELETE FROM CSChunkTable WHERE location = ? AND ct_iid = ?"), "DELETE FROM CSChunkTable WHERE location = ? AND ct_iid = ?");
  v5 = v4;
  if (!v4)
    goto LABEL_23;
  sqlite3_bind_int(v4[2], 1, 116);
  sqlite3_bind_int64(v5[2], 2, a2);
  v6 = CS_sqlite3_step((uint64_t *)v5);
  if ((_DWORD)v6 != 101)
  {
    v15 = v6;
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_936);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      goto LABEL_23;
    v16 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v17 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
    v13 = CFStringCreateWithFormat(v16, 0, CFSTR("sqlite3_step returned: %d %s for itemID:%lld\n"), v15, v17, a2);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_940);
    v14 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      goto LABEL_21;
    *(_DWORD *)buf = 138543362;
    v20 = v13;
LABEL_20:
    _os_log_impl(&dword_20A95C000, v14, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
LABEL_21:
    if (v13)
      CFRelease(v13);
    goto LABEL_23;
  }
  _CSFinishPreparedStatement((uint64_t *)v5);
  v7 = _CSPrepareStatement(a1, CFSTR("DELETE FROM CSChunkTable WHERE location = ? AND ct_iid = ?"), "DELETE FROM CSChunkTable WHERE location = ? AND ct_iid = ?");
  v5 = v7;
  if (!v7)
  {
LABEL_23:
    v8 = 0;
    goto LABEL_24;
  }
  v8 = 1;
  sqlite3_bind_int(v7[2], 1, 110);
  sqlite3_bind_int64(v5[2], 2, a2);
  v9 = CS_sqlite3_step((uint64_t *)v5);
  if ((_DWORD)v9 != 101)
  {
    v10 = v9;
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_943);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      goto LABEL_23;
    v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v12 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
    v13 = CFStringCreateWithFormat(v11, 0, CFSTR("sqlite3_step returned: %d %s for itemID:%lld\n"), v10, v12, a2);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_946);
    v14 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      goto LABEL_21;
    *(_DWORD *)buf = 138543362;
    v20 = v13;
    goto LABEL_20;
  }
LABEL_24:
  _CSFinishPreparedStatement((uint64_t *)v5);
  return v8;
}

unint64_t _CSRelocateRegisteredChunk(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void *v8;
  int v9;
  sqlite3_int64 v10;
  sqlite3_stmt **v11;
  __CFString *v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  sqlite3_stmt **v16;
  uint64_t v17;
  int v18;
  NSObject *v19;
  unint64_t v20;
  uint64_t v21;
  const __CFAllocator *v22;
  const char *v23;
  NSObject *v24;
  uint64_t v25;
  const __CFAllocator *v26;
  const char *v27;
  uint8_t buf[4];
  __CFString *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 17))
    _CSRelocateRegisteredChunk_cold_1();
  v8 = (const void *)(a2 + 35);
  v9 = CKChunkSchemeAndSignatureSize((_BYTE *)(a2 + 35));
  v10 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v11 = _CSPrepareStatement(a1, CFSTR("UPDATE CSChunkTable SET location = ? WHERE rowid = ? AND location = ? AND ct_iid = ? AND cid = ? AND offset = ? AND dataLen = ?"), "UPDATE CSChunkTable SET location = ? WHERE rowid = ? AND location = ? AND ct_iid = ? AND cid = ? AND offset = ? AND dataLen = ?");
    v12 = (__CFString *)v11;
    if (!v11)
      goto LABEL_49;
    sqlite3_bind_int(v11[2], 1, a4);
    sqlite3_bind_int64((sqlite3_stmt *)v12->data, 2, v10);
    sqlite3_bind_int((sqlite3_stmt *)v12->data, 3, a3);
    sqlite3_bind_int64((sqlite3_stmt *)v12->data, 4, *(_QWORD *)(a2 + 8));
    sqlite3_bind_blob((sqlite3_stmt *)v12->data, 5, v8, v9, 0);
    sqlite3_bind_int64((sqlite3_stmt *)v12->data, 6, *(_QWORD *)(a2 + 16));
    sqlite3_bind_int((sqlite3_stmt *)v12->data, 7, *(_DWORD *)(a2 + 24));
    v13 = CS_sqlite3_step((uint64_t *)v12);
    if ((_DWORD)v13 == 101)
    {
      v14 = sqlite3_changes(*(sqlite3 **)(a1 + 24));
      _CSFinishPreparedStatement((uint64_t *)v12);
      if (!v14)
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_957);
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          v12 = (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Couldn't update chunk ('%c'/'%c') for itemID:%lld, o:0x%llx, sz:0x%x, rowID:%llu\n"), a3, a4, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24), v10);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_962);
          v15 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            v30 = v12;
            _os_log_impl(&dword_20A95C000, v15, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
          }
          if (!v12)
            goto LABEL_49;
          CFRelease(v12);
        }
        v12 = 0;
LABEL_49:
        v20 = 0;
        goto LABEL_50;
      }
LABEL_19:
      *(_BYTE *)(a2 + 28) = a4;
      if (gVerbose == 2)
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_974);
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG)
          && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
        {
          v12 = (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Moved registered chunk ('%c'/'%c') for itemID:%lld, o:0x%llx, sz:0x%x, rowID:%llu\n"), a3, a4, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24), v10);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_981);
          v19 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138543362;
            v30 = v12;
            _os_log_impl(&dword_20A95C000, v19, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
          }
          if (!v12)
            goto LABEL_31;
          CFRelease(v12);
        }
      }
      v12 = 0;
LABEL_31:
      v20 = 1;
      goto LABEL_50;
    }
    v21 = v13;
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_952);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      goto LABEL_49;
    v22 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v23 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
    v20 = (unint64_t)CFStringCreateWithFormat(v22, 0, CFSTR("sqlite3_step returned: %d %s\n"), v21, v23);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_954);
    v24 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v30 = (__CFString *)v20;
LABEL_46:
      _os_log_impl(&dword_20A95C000, v24, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
  }
  else
  {
    v16 = _CSPrepareStatement(a1, CFSTR("UPDATE CSChunkTable INDEXED BY CSChunkTable_cid_inx SET location = ? WHERE location = ? AND ct_iid = ? AND cid = ? AND offset = ? AND dataLen = ?"), "UPDATE CSChunkTable INDEXED BY CSChunkTable_cid_inx SET location = ? WHERE location = ? AND ct_iid = ? AND cid = ? AND offset = ? AND dataLen = ?");
    v12 = (__CFString *)v16;
    if (!v16)
      goto LABEL_49;
    sqlite3_bind_int(v16[2], 1, a4);
    sqlite3_bind_int((sqlite3_stmt *)v12->data, 2, a3);
    sqlite3_bind_int64((sqlite3_stmt *)v12->data, 3, *(_QWORD *)(a2 + 8));
    sqlite3_bind_blob((sqlite3_stmt *)v12->data, 4, v8, v9, 0);
    sqlite3_bind_int64((sqlite3_stmt *)v12->data, 5, *(_QWORD *)(a2 + 16));
    sqlite3_bind_int((sqlite3_stmt *)v12->data, 6, *(_DWORD *)(a2 + 24));
    v17 = CS_sqlite3_step((uint64_t *)v12);
    if ((_DWORD)v17 == 101)
    {
      v18 = sqlite3_changes(*(sqlite3 **)(a1 + 24));
      _CSFinishPreparedStatement((uint64_t *)v12);
      if (!v18)
      {
        v12 = 0;
        v20 = _CSRegisterChunk(a1, a2, a4) != 0;
        goto LABEL_50;
      }
      goto LABEL_19;
    }
    v25 = v17;
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_968);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      goto LABEL_49;
    v26 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v27 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
    v20 = (unint64_t)CFStringCreateWithFormat(v26, 0, CFSTR("sqlite3_step returned: %d %s\n"), v25, v27);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_971);
    v24 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v30 = (__CFString *)v20;
      goto LABEL_46;
    }
  }
  if (v20)
  {
    CFRelease((CFTypeRef)v20);
    goto LABEL_49;
  }
LABEL_50:
  _CSFinishPreparedStatement((uint64_t *)v12);
  return v20;
}

uint64_t _CSUnregisterChunk(uint64_t a1, uint64_t a2, int a3)
{
  sqlite3_stmt **v6;
  sqlite3_stmt **v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  const __CFAllocator *v13;
  const char *v14;
  CFStringRef v15;
  NSObject *v16;
  uint8_t buf[4];
  CFStringRef v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 17))
    _CSUnregisterChunk_cold_1();
  v6 = _CSPrepareStatement(a1, CFSTR("DELETE FROM CSChunkTable INDEXED BY CSChunkTable_cid_inx WHERE location = ? AND ct_iid = ? AND cid = ? AND offset = ? AND dataLen = ?"), "DELETE FROM CSChunkTable INDEXED BY CSChunkTable_cid_inx WHERE location = ? AND ct_iid = ? AND cid = ? AND offset = ? AND dataLen = ?");
  v7 = v6;
  if (!v6)
    goto LABEL_14;
  v8 = (unsigned __int8 *)(a2 + 35);
  v9 = 1;
  sqlite3_bind_int(v6[2], 1, a3);
  sqlite3_bind_int64(v7[2], 2, *(_QWORD *)(a2 + 8));
  v10 = CKChunkSchemeAndSignatureSize((_BYTE *)(a2 + 35));
  sqlite3_bind_blob(v7[2], 3, (const void *)(a2 + 35), v10, 0);
  sqlite3_bind_int64(v7[2], 4, *(_QWORD *)(a2 + 16));
  sqlite3_bind_int(v7[2], 5, *(_DWORD *)(a2 + 24));
  v11 = CS_sqlite3_step((uint64_t *)v7);
  if ((_DWORD)v11 != 101)
  {
    v12 = v11;
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_986);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v13 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v14 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
      v15 = CFStringCreateWithFormat(v13, 0, CFSTR("sqlite3_step returned: %d %s, for signature\n"), v12, v14);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_990);
      v16 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v19 = v15;
        _os_log_impl(&dword_20A95C000, v16, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v15)
        CFRelease(v15);
    }
    printSignature(v8);
LABEL_14:
    v9 = 0;
  }
  _CSFinishPreparedStatement((uint64_t *)v7);
  return v9;
}

uint64_t _CSConvertTemporaryChunks(uint64_t a1, sqlite3_int64 a2)
{
  sqlite3_stmt **v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const __CFAllocator *v9;
  const char *v10;
  CFStringRef v11;
  NSObject *v12;
  uint8_t buf[4];
  CFStringRef v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 17))
    _CSConvertTemporaryChunks_cold_1();
  CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "DELETE FROM CSChunkTable WHERE location = 114 AND ct_iid = %llu;",
    a2);
  v4 = _CSPrepareStatement(a1, CFSTR("UPDATE CSChunkTable SET location = 114 WHERE ct_iid = ? AND location = 116"), "UPDATE CSChunkTable SET location = 114 WHERE ct_iid = ? AND location = 116");
  v5 = (uint64_t *)v4;
  if (!v4)
    goto LABEL_13;
  v6 = 1;
  sqlite3_bind_int64(v4[2], 1, a2);
  v7 = CS_sqlite3_step(v5);
  if ((_DWORD)v7 != 101)
  {
    v8 = v7;
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_996);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v10 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
      v11 = CFStringCreateWithFormat(v9, 0, CFSTR("sqlite3_step returned: %d %s, for itemID:%lld\n"), v8, v10, a2);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_998);
      v12 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v15 = v11;
        _os_log_impl(&dword_20A95C000, v12, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v11)
        CFRelease(v11);
    }
LABEL_13:
    v6 = 0;
  }
  _CSFinishPreparedStatement(v5);
  return v6;
}

uint64_t _CSKeyForRegisteredChunk(uint64_t a1, _BYTE *a2, _QWORD *a3)
{
  sqlite3_stmt **v6;
  sqlite3_stmt **v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  size_t v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  CFStringRef v17;
  NSObject *v18;
  const __CFAllocator *v19;
  const char *v20;
  CFStringRef v21;
  NSObject *v22;
  NSObject *v24;
  uint8_t buf[4];
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1000);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      return 0;
    v17 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("key param is NULL, failing."));
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1004);
    v18 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      goto LABEL_23;
    *(_DWORD *)buf = 138543362;
    v26 = (uint64_t)v17;
    goto LABEL_22;
  }
  v6 = _CSPrepareStatement(a1, CFSTR("SELECT key FROM CSChunkTable WHERE cid = ?"), "SELECT key FROM CSChunkTable WHERE cid = ?");
  if (v6)
  {
    v7 = v6;
    v8 = CKSchemeAndSignatureSize(a2);
    sqlite3_bind_blob(v7[2], 1, a2, v8, 0);
    v9 = CS_sqlite3_step((uint64_t *)v7);
    if ((_DWORD)v9 != 101)
    {
      v10 = v9;
      if ((_DWORD)v9 == 100)
      {
        v11 = (unsigned __int8 *)sqlite3_column_blob(v7[2], 0);
        if (v11)
        {
          v12 = v11;
          v13 = CKSchemeAndEncryptionKeySize(v11);
          if (v13)
          {
            v14 = v13;
            v15 = malloc_type_malloc(v13, 0x8BDA5470uLL);
            *a3 = v15;
            memcpy(v15, v12, v14);
            v16 = 1;
LABEL_37:
            _CSFinishPreparedStatement((uint64_t *)v7);
            return v16;
          }
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1010);
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            v16 = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Bad size for key..."));
            if (CK_DEFAULT_LOG_BLOCK_1 != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1015);
            v24 = CK_DEFAULT_LOG_INTERNAL_1;
            if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
              goto LABEL_54;
            *(_DWORD *)buf = 138543362;
            v26 = v16;
LABEL_53:
            _os_log_impl(&dword_20A95C000, v24, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
LABEL_54:
            if (!v16)
              goto LABEL_37;
            CFRelease((CFTypeRef)v16);
          }
        }
        else
        {
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1018);
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            v16 = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("sqlite3_column_blob returned NULL."));
            if (CK_DEFAULT_LOG_BLOCK_1 != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1023);
            v24 = CK_DEFAULT_LOG_INTERNAL_1;
            if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
              goto LABEL_54;
            *(_DWORD *)buf = 138543362;
            v26 = v16;
            goto LABEL_53;
          }
        }
      }
      else
      {
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1026);
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          v19 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          v20 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
          v21 = CFStringCreateWithFormat(v19, 0, CFSTR("sqlite3_step returned: %d %s, for signature: "), v10, v20);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1031);
          v22 = CK_DEFAULT_LOG_INTERNAL_1;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            v26 = (uint64_t)v21;
            _os_log_impl(&dword_20A95C000, v22, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
          }
          if (v21)
            CFRelease(v21);
        }
        printSignature(a2);
      }
    }
    v16 = 0;
    goto LABEL_37;
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1034);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    v17 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("null sqlite3_stmt\n"));
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1037);
    v18 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      goto LABEL_23;
    *(_DWORD *)buf = 138543362;
    v26 = (uint64_t)v17;
LABEL_22:
    _os_log_impl(&dword_20A95C000, v18, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
LABEL_23:
    if (v17)
      CFRelease(v17);
  }
  return 0;
}

uint64_t _CSUnregisterAllChunksForItem(uint64_t a1, sqlite3_int64 a2)
{
  CFStringRef v4;
  NSObject *v5;
  sqlite3_stmt **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFAllocator *v11;
  const char *v12;
  CFStringRef v13;
  NSObject *v14;
  uint8_t buf[4];
  CFStringRef v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 17))
    _CSUnregisterAllChunksForItem_cold_1();
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1039);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Unregistering all chunks for itemID:%lld"), a2);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1045);
      v5 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        v17 = v4;
        _os_log_impl(&dword_20A95C000, v5, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v4)
        CFRelease(v4);
    }
  }
  v6 = _CSPrepareStatement(a1, CFSTR("DELETE FROM CSChunkTable WHERE ct_iid = ?"), "DELETE FROM CSChunkTable WHERE ct_iid = ?");
  v7 = (uint64_t *)v6;
  if (!v6)
    goto LABEL_24;
  v8 = 1;
  sqlite3_bind_int64(v6[2], 1, a2);
  v9 = CS_sqlite3_step(v7);
  if ((_DWORD)v9 != 101)
  {
    v10 = v9;
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1051);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v12 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
      v13 = CFStringCreateWithFormat(v11, 0, CFSTR("sqlite3_step returned: %d %s\n"), v10, v12);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1054);
      v14 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v17 = v13;
        _os_log_impl(&dword_20A95C000, v14, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v13)
        CFRelease(v13);
    }
LABEL_24:
    v8 = 0;
  }
  _CSFinishPreparedStatement(v7);
  return v8;
}

uint64_t _CSRegisteredItemCount(uint64_t a1, sqlite3_int64 *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  sqlite3_int64 v7;
  uint64_t v8;
  uint64_t v9;
  const __CFAllocator *v10;
  const char *v11;
  NSObject *v12;
  uint8_t buf[4];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (a2)
    *a2 = 0;
  v4 = (uint64_t *)_CSPrepareStatement(a1, CFSTR("SELECT count(*) FROM CSRegisteredFileTable"), "SELECT count(*) FROM CSRegisteredFileTable");
  v5 = v4;
  if (!v4)
    goto LABEL_17;
  v6 = CS_sqlite3_step(v4);
  if ((_DWORD)v6 == 100)
  {
    v7 = sqlite3_column_int64((sqlite3_stmt *)v5[2], 0);
    if (a2)
      *a2 = v7;
    v8 = 1;
    goto LABEL_18;
  }
  v9 = v6;
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1059);
  if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
LABEL_17:
    v8 = 0;
    goto LABEL_18;
  }
  v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v11 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
  v8 = (uint64_t)CFStringCreateWithFormat(v10, 0, CFSTR("sqlite3_step returned: %d %s\n"), v9, v11);
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1061);
  v12 = CK_DEFAULT_LOG_INTERNAL_1;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    v15 = v8;
    _os_log_impl(&dword_20A95C000, v12, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
  }
  if (v8)
  {
    CFRelease((CFTypeRef)v8);
    goto LABEL_17;
  }
LABEL_18:
  _CSFinishPreparedStatement(v5);
  return v8;
}

uint64_t _CSGetRegisteredItems(uint64_t a1, sqlite3_int64 a2, uint64_t a3, sqlite3_int64 *a4)
{
  sqlite3_int64 v5;
  sqlite3_stmt **v9;
  sqlite3_stmt **v10;
  sqlite3_int64 i;
  uint64_t v12;
  sqlite3_int64 v13;
  uint64_t v14;
  uint64_t v15;
  const __CFAllocator *v16;
  const char *v17;
  NSObject *v18;
  uint8_t buf[4];
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (!a4)
    _CSGetRegisteredItems_cold_1();
  v5 = *a4;
  if (!*a4)
    _CSGetRegisteredItems_cold_2();
  *a4 = 0;
  v9 = _CSPrepareStatement(a1, CFSTR("SELECT crt_iid FROM CSRegisteredFileTable WHERE crt_iid > ? ORDER BY crt_iid ASC LIMIT ?"), "SELECT crt_iid FROM CSRegisteredFileTable WHERE crt_iid > ? ORDER BY crt_iid ASC LIMIT ?");
  v10 = v9;
  if (!v9)
  {
    i = 0;
    goto LABEL_21;
  }
  sqlite3_bind_int64(v9[2], 1, a2);
  sqlite3_bind_int64(v10[2], 2, v5);
  for (i = 0; ; ++i)
  {
    v12 = CS_sqlite3_step((uint64_t *)v10);
    if ((_DWORD)v12 != 100)
      break;
    v13 = sqlite3_column_int64(v10[2], 0);
    if (a3)
      *(_QWORD *)(a3 + 8 * i) = v13;
  }
  v14 = v12;
  if ((_DWORD)v12 == 101)
  {
    v15 = 1;
    goto LABEL_22;
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1070);
  if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
LABEL_21:
    v15 = 0;
    goto LABEL_22;
  }
  v16 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v17 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
  v15 = (uint64_t)CFStringCreateWithFormat(v16, 0, CFSTR("sqlite3_step returned: %d %s\n"), v14, v17);
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1072);
  v18 = CK_DEFAULT_LOG_INTERNAL_1;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    v21 = v15;
    _os_log_impl(&dword_20A95C000, v18, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
  }
  if (v15)
  {
    CFRelease((CFTypeRef)v15);
    goto LABEL_21;
  }
LABEL_22:
  _CSFinishPreparedStatement((uint64_t *)v10);
  *a4 = i;
  return v15;
}

void _CSChunkStoreCSChunkStoreFinalize(uint64_t a1)
{
  CFStringRef v2;
  NSObject *v3;
  const char *v4;
  void *v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint8_t buf[4];
  CFStringRef v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1165);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
  {
    v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("path:%s\n"), *(_QWORD *)(a1 + 112));
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1169);
    v3 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      v10 = v2;
      _os_log_impl(&dword_20A95C000, v3, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v2)
      CFRelease(v2);
  }
  cs_wrlock(a1 + 272);
  v4 = *(const char **)(a1 + 120);
  if (v4)
  {
    removefile(v4, 0, 1u);
    free(*(void **)(a1 + 120));
    *(_QWORD *)(a1 + 120) = 0;
  }
  _CSChunkStoreClose(a1);
  v5 = *(void **)(a1 + 264);
  if (v5)
  {
    free(v5);
    *(_QWORD *)(a1 + 264) = 0;
  }
  v6 = *(void **)(a1 + 112);
  if (v6)
  {
    free(v6);
    *(_QWORD *)(a1 + 112) = 0;
  }
  v7 = *(const void **)(a1 + 136);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 136) = 0;
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 32));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 144));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 208));
  cs_unlock(a1 + 272);
  v8 = cs_rwlock_destroy(a1 + 272);
  CKPointerHash(v8);
  *(_DWORD *)buf = -559038737;
  memset_pattern4((void *)(a1 + 16), buf, 0x218uLL);
}

void _CSFinalizeDBStmts(const __CFString *a1, sqlite3_stmt **a2, uint64_t a3)
{
  CFStringRef v6;
  NSObject *v7;
  uint64_t v8;
  const __CFAllocator *v9;
  const char *v10;
  CFStringRef v11;
  NSObject *v12;
  uint8_t buf[4];
  CFStringRef v14;
  char buffer[4];
  CFStringRef v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1230);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
  {
    bzero(buffer, 0x400uLL);
    if (CFStringGetCString(a1, buffer, 1024, 0x8000100u))
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1232);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("finalizing \"%s\"\n"), buffer);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1236);
        v7 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543362;
          v14 = v6;
          _os_log_impl(&dword_20A95C000, v7, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
        }
        if (v6)
          CFRelease(v6);
      }
    }
  }
  v8 = sqlite3_finalize(a2[2]);
  free(a2);
  if ((_DWORD)v8)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1239);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v10 = sqlite3_errmsg(*(sqlite3 **)(a3 + 24));
      v11 = CFStringCreateWithFormat(v9, 0, CFSTR("sqlite3_finalize returned %d: %s"), v8, v10);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1244);
      v12 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buffer = 138543362;
        v16 = v11;
        _os_log_impl(&dword_20A95C000, v12, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)buffer, 0xCu);
      }
      if (v11)
        CFRelease(v11);
    }
  }
}

void _CSReleaseOrphanedChunks(uint64_t a1, sqlite3_int64 *a2, uint64_t a3)
{
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  const __CFAllocator *v10;
  CFStringRef v11;
  NSObject *v12;
  uint8_t buf[4];
  CFStringRef v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (a3)
    {
      v6 = _CSChunkSignatureForToken(a1, *a2, 0);
      if (v6)
      {
        v7 = malloc_type_malloc(v6, 0x25491983uLL);
        if (v7)
        {
          v8 = v7;
          v9 = 0;
          v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          do
          {
            if (_CSChunkSignatureForToken(a1, a2[v9], v8)
              && (_CSReleaseChunkForSignature(a1, v8) & 1) == 0)
            {
              if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1289);
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
              {
                v11 = CFStringCreateWithFormat(v10, 0, CFSTR("Unable to release chunk at token %lld (%llu)\n"), a2[v9], v9);
                if (CK_DEFAULT_LOG_BLOCK_1 != -1)
                  dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1293);
                v12 = CK_DEFAULT_LOG_INTERNAL_1;
                if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138543362;
                  v14 = v11;
                  _os_log_impl(&dword_20A95C000, v12, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
                }
                if (v11)
                  CFRelease(v11);
              }
            }
            ++v9;
          }
          while (a3 != v9);
          free(v8);
        }
      }
    }
  }
}

os_log_t __fsopen_block_invoke_0()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunks_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunks_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke_1351()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke_2_1356()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke_1362()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke_2_1367()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke_1370()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke_2_1375()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke_1378()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke_2_1381()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke_1384()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke_2_1389()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke_1395()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke_2_1400()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

uint64_t truncateStorageFile(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  _BOOL4 v10;
  CFAllocatorRef *v11;
  CFStringRef v12;
  NSObject *v13;
  int v14;
  int v15;
  off_t st_size;
  off_t v17;
  CFStringRef v18;
  NSObject *v19;
  CFStringRef v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  const __CFAllocator *v24;
  const char *v25;
  CFStringRef v26;
  NSObject *v27;
  const __CFAllocator *v28;
  int *v29;
  char *v30;
  CFStringRef v31;
  NSObject *v32;
  uint64_t v33;
  const __CFAllocator *v34;
  int *v35;
  char *v36;
  CFStringRef v37;
  NSObject *v38;
  char *v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const __CFAllocator *v44;
  const char *v45;
  char *v46;
  CFStringRef v47;
  NSObject *v48;
  char *v49;
  const __CFAllocator *v50;
  int *v51;
  char *v52;
  const __CFAllocator *v53;
  int *v54;
  char *v55;
  CFStringRef v56;
  NSObject *v57;
  CFStringRef cf;
  uint8_t v60[4];
  CFStringRef v61;
  stat v62;
  uint8_t buf[4];
  CFStringRef v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1412);
  v10 = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG);
  v11 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
  if (v10)
  {
    v12 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("ftRowId:%llu, offset:0x%llx, spaceDelta:%llu\n"), a2, a3, a4);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1416);
    v13 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      v64 = v12;
      _os_log_impl(&dword_20A95C000, v13, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v12)
      CFRelease(v12);
  }
  _CSCloseCachedStorageFile(a1, a2, 0);
  bzero(buf, 0x400uLL);
  if (!__CSCreateStoragePath(a1, a2, 0, (char *)buf, 0x400uLL))
    goto LABEL_50;
  v14 = open((const char *)buf, 2, 384);
  v15 = v14;
  if (v14 == -1)
  {
    if (!a3 && *__error() == 2)
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1419);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        v20 = CFStringCreateWithFormat(*v11, 0, CFSTR("open failed for \"%s\" with ENOENT, but we can clear the storage file reference anyway"), buf);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1424);
        v21 = CK_DEFAULT_LOG_INTERNAL_1;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        {
          v62.st_dev = 138543362;
          *(_QWORD *)&v62.st_mode = v20;
          _os_log_impl(&dword_20A95C000, v21, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v62, 0xCu);
        }
        if (v20)
          CFRelease(v20);
      }
LABEL_33:
      v22 = CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "DELETE FROM CSChunkTable WHERE ft_rowid = %lld", a2);
      if ((_DWORD)v22)
      {
        v23 = v22;
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1436);
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          goto LABEL_142;
        v24 = *v11;
        v25 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        v26 = CFStringCreateWithFormat(v24, 0, CFSTR("sqlite3_step error: %d, %s"), v23, v25);
        if (CK_DEFAULT_LOG_BLOCK_1 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1439);
        v27 = CK_DEFAULT_LOG_INTERNAL_1;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          goto LABEL_140;
        v62.st_dev = 138543362;
        *(_QWORD *)&v62.st_mode = v26;
      }
      else
      {
        v42 = CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "DELETE FROM CSStorageFileTable WHERE ft_rowid = %lld", a2);
        if ((_DWORD)v42)
        {
          v43 = v42;
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1443);
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
            goto LABEL_142;
          v44 = *v11;
          v45 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
          v26 = CFStringCreateWithFormat(v44, 0, CFSTR("CSsql_do error: %d, %s"), v43, v45);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1448);
          v27 = CK_DEFAULT_LOG_INTERNAL_1;
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
            goto LABEL_140;
          v62.st_dev = 138543362;
          *(_QWORD *)&v62.st_mode = v26;
        }
        else
        {
          if (!unlink((const char *)buf))
          {
            v33 = 0;
LABEL_143:
            if (v15 == -1)
              goto LABEL_145;
            goto LABEL_144;
          }
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1451);
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
LABEL_142:
            v33 = 0xFFFFFFFFLL;
            goto LABEL_143;
          }
          v53 = *v11;
          v54 = __error();
          v55 = strerror(*v54);
          v26 = CFStringCreateWithFormat(v53, 0, CFSTR("unlink failed for ftRowId:%llu, path:\"%s\": %s\n"), a2, buf, v55);
          if (CK_DEFAULT_LOG_BLOCK_1 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1456);
          v27 = CK_DEFAULT_LOG_INTERNAL_1;
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
          {
LABEL_140:
            if (v26)
              CFRelease(v26);
            goto LABEL_142;
          }
          v62.st_dev = 138543362;
          *(_QWORD *)&v62.st_mode = v26;
        }
      }
      _os_log_impl(&dword_20A95C000, v27, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v62, 0xCu);
      goto LABEL_140;
    }
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1427);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v33 = 0xFFFFFFFFLL;
      goto LABEL_147;
    }
    v28 = *v11;
    v29 = __error();
    v30 = strerror(*v29);
    v31 = CFStringCreateWithFormat(v28, 0, CFSTR("open failed for \"%s\": %s"), buf, v30);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1432);
    v32 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v62.st_dev = 138543362;
      *(_QWORD *)&v62.st_mode = v31;
      _os_log_impl(&dword_20A95C000, v32, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v62, 0xCu);
    }
    if (v31)
      CFRelease(v31);
LABEL_50:
    v33 = 0xFFFFFFFFLL;
    goto LABEL_145;
  }
  if (!a3)
    goto LABEL_33;
  memset(&v62, 0, sizeof(v62));
  if (fstat(v14, &v62) == -1)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1459);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      goto LABEL_130;
    v34 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v35 = __error();
    v36 = strerror(*v35);
    v18 = CFStringCreateWithFormat(v34, 0, CFSTR("fstat failed for \"%s\": %s"), buf, v36);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1464);
    v19 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      goto LABEL_128;
    *(_DWORD *)v60 = 138543362;
    v61 = v18;
    goto LABEL_127;
  }
  st_size = v62.st_size;
  v17 = v62.st_size - a3;
  if (v62.st_size < a3)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1467);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      goto LABEL_130;
    v18 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Invalid file size/offset for \"%s\": fileSize:0x%llx, offset:0x%llx\n"), buf, st_size, a3);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1472);
    v19 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      goto LABEL_128;
    *(_DWORD *)v60 = 138543362;
    v61 = v18;
    goto LABEL_127;
  }
  v11 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
  if (v17 != a4)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1475);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEFAULT))
    {
      v37 = CFStringCreateWithFormat(*v11, 0, CFSTR("Invalid free space for \"%s\": diffSize:%llu, spaceDelta:%llu\n"), buf, v17, a4);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1480);
      v38 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v60 = 138543362;
        v61 = v37;
        _os_log_impl(&dword_20A95C000, v38, OS_LOG_TYPE_DEFAULT, "%{public}@", v60, 0xCu);
      }
      v11 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
      if (v37)
        CFRelease(v37);
    }
  }
  if (a4)
  {
    v39 = (char *)CSsql_get64(a1, 1, "SELECT ft_space FROM CSStorageFileTable WHERE ft_rowid = %lld", a2);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1483);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      cf = CFStringCreateWithFormat(*v11, 0, CFSTR("Updating free space for ftRowId:%llu, spaceDelta:%llu, space:%llu\n"), a2, a4, v39);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1488);
      v40 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v60 = 138543362;
        v61 = cf;
        _os_log_impl(&dword_20A95C000, v40, OS_LOG_TYPE_DEBUG, "%{public}@", v60, 0xCu);
      }
      v11 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
      if (cf)
        CFRelease(cf);
    }
    v41 = (unint64_t)&v39[a4] >= 0x1400064 ? 20971620 : (uint64_t)&v39[a4];
    if (CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "UPDATE CSStorageFileTable SET ft_space = %lld WHERE ft_rowid = %lld", v41, a2))
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1491);
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        goto LABEL_130;
      v18 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("failed to set the free space for ftRowId:%llu, path:\"%s\", space:0x%llx\n"), a2, buf, v41);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1496);
      v19 = CK_DEFAULT_LOG_INTERNAL_1;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        goto LABEL_128;
      *(_DWORD *)v60 = 138543362;
      v61 = v18;
      goto LABEL_127;
    }
  }
  if (a5)
  {
    v46 = (char *)CSsql_get64(a1, 1, "SELECT ft_pspace FROM CSStorageFileTable WHERE ft_rowid = %lld", a2);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1499);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      v47 = CFStringCreateWithFormat(*v11, 0, CFSTR("Updating free pspace for ftRowId:%llu, pspaceDelta:%llu, pspace:%llu\n"), a2, a5, v46);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1504);
      v48 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v60 = 138543362;
        v61 = v47;
        _os_log_impl(&dword_20A95C000, v48, OS_LOG_TYPE_DEBUG, "%{public}@", v60, 0xCu);
      }
      v11 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
      if (v47)
        CFRelease(v47);
    }
    v49 = (unint64_t)v46 >= a5 ? &v46[-a5] : 0;
    if (CSsql_corruption_checking_do_0(a1, *(sqlite3 **)(a1 + 24), "UPDATE CSStorageFileTable SET ft_pspace = %lld WHERE ft_rowid = %lld", v49, a2))
    {
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1507);
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        goto LABEL_130;
      v18 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("failed to set the free pspace for ftRowId:%llu, path:\"%s\", pspace:0x%llx\n"), a2, buf, v49);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1512);
      v19 = CK_DEFAULT_LOG_INTERNAL_1;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
        goto LABEL_128;
      *(_DWORD *)v60 = 138543362;
      v61 = v18;
      goto LABEL_127;
    }
  }
  if (!ftruncate(v15, a3))
  {
    v33 = 0;
    goto LABEL_144;
  }
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1515);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
  {
    v50 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v51 = __error();
    v52 = strerror(*v51);
    v18 = CFStringCreateWithFormat(v50, 0, CFSTR("ftruncate failed for ftRowId:%llu, path:\"%s\", offset:0x%llx: %s\n"), a2, buf, a3, v52);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1520);
    v19 = CK_DEFAULT_LOG_INTERNAL_1;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      goto LABEL_128;
    *(_DWORD *)v60 = 138543362;
    v61 = v18;
LABEL_127:
    _os_log_impl(&dword_20A95C000, v19, OS_LOG_TYPE_ERROR, "%{public}@", v60, 0xCu);
LABEL_128:
    if (v18)
      CFRelease(v18);
  }
LABEL_130:
  v33 = 0xFFFFFFFFLL;
  v11 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
LABEL_144:
  close(v15);
LABEL_145:
  if (CK_DEFAULT_LOG_BLOCK_1 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1523);
LABEL_147:
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
  {
    v56 = CFStringCreateWithFormat(*v11, 0, CFSTR("ftRowId:%llu, rc:%d\n"), a2, v33);
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1528);
    v57 = CK_DEFAULT_LOG_INTERNAL_1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_DEBUG))
    {
      v62.st_dev = 138543362;
      *(_QWORD *)&v62.st_mode = v56;
      _os_log_impl(&dword_20A95C000, v57, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)&v62, 0xCu);
    }
    if (v56)
      CFRelease(v56);
  }
  return v33;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke_1403()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __removeUnreferencedChunksAtEof_block_invoke_2_1408()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_1417()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2_1422()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_1425()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2_1430()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_1434()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2_1437()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_1441()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2_1446()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_1449()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2_1454()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_1457()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2_1462()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_1465()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2_1470()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_1473()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2_1478()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_1481()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2_1486()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_1489()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2_1494()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_1497()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2_1502()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_1505()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2_1510()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_1513()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2_1518()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_1521()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __truncateStorageFile_block_invoke_2_1526()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __copyReferencedChunks_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

os_log_t __copyReferencedChunks_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_1 = (uint64_t)result;
  return result;
}

uint64_t _CSHandleDatabaseIOError_0(uint64_t result)
{
  CFStringRef v1;
  NSObject *v2;
  int v3;
  CFStringRef v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if ((_DWORD)result == 10)
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1841);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Chunk store database I/O error. Forcing process exit."));
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1845);
      v2 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        v3 = 138543362;
        v4 = v1;
        _os_log_impl(&dword_20A95C000, v2, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v3, 0xCu);
      }
      if (v1)
        CFRelease(v1);
    }
    exit(1);
  }
  return result;
}

void _CSHandleCorruptDatabase(uint64_t a1)
{
  size_t v2;
  CFStringRef v3;
  NSObject *v4;
  uint8_t buf[4];
  CFStringRef v6;
  char __s[1024];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  bzero(__s, 0x400uLL);
  if (CKChunkStoreGetLocation(a1, __s, 0x400uLL)
    && (v2 = strlen(__s), 1024 - v2 <= snprintf(&__s[v2], 1024 - v2, "/%s", "ChunkStoreDatabase")))
  {
    if (CK_DEFAULT_LOG_BLOCK_1 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1847);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
    {
      v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("safe_snprintf truncated %s"), __s);
      if (CK_DEFAULT_LOG_BLOCK_1 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_1, &__block_literal_global_1849);
      v4 = CK_DEFAULT_LOG_INTERNAL_1;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_1, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v6 = v3;
        _os_log_impl(&dword_20A95C000, v4, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v3)
        CFRelease(v3);
    }
  }
  else
  {
    _CSBruteForceDatabaseCorruptionRecovery(__s, *(sqlite3 **)(a1 + 24), *(_DWORD *)(a1 + 104) != 0);
  }
}

uint64_t CSChunkCopier_Destroy(uint64_t a1, CFErrorRef *a2)
{
  _QWORD *v4;
  void *v5;
  uint64_t result;
  CFErrorRef v7;

  if (a1 && (v4 = *(_QWORD **)(a1 + 72)) != 0)
  {
    v5 = (void *)v4[1];
    if (v5)
      free(v5);
    free(v4);
    *(_QWORD *)(a1 + 72) = 0;
    return 1;
  }
  else
  {
    v7 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFErrorDomain)*MEMORY[0x24BDBD390], 6, 0);
    result = 0;
    *a2 = v7;
  }
  return result;
}

uint64_t CSChunkCopier_Initialize(uint64_t a1, int a2, CFErrorRef *a3)
{
  size_t **v6;
  size_t **v7;
  uint64_t v8;
  char v9;
  size_t *v10;
  uint64_t v11;
  CFDataRef v13;
  CFDataRef theData;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v13 = 0;
  theData = 0;
  if (CSCopier_ExportCopyCredentials(a1, &theData, &v13, a3))
  {
    v6 = (size_t **)malloc_type_malloc(0x10uLL, 0x600405C6656D0uLL);
    if (v6)
    {
      v7 = v6;
      v8 = 0;
      v17 = 0;
      v16 = 0;
      v15 = a2;
      do
      {
        v9 = *((_BYTE *)&v15 + v8);
        *((_BYTE *)&v15 + v8) = CFDataGetBytePtr(theData)[v8] ^ v9;
        ++v8;
      }
      while (v8 != 8);
      v10 = (size_t *)ccaes_ctr_crypt_mode();
      *v7 = v10;
      v7[1] = (size_t *)malloc_type_malloc(*v10, 0x601E3398uLL);
      CFDataGetLength(v13);
      CFDataGetBytePtr(v13);
      ccctr_init();
      cc_clear();
      *(_QWORD *)(a1 + 72) = v7;
      v11 = 1;
    }
    else
    {
      v11 = 0;
      *a3 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFErrorDomain)*MEMORY[0x24BDBD390], 1, 0);
    }
  }
  else
  {
    v11 = 0;
  }
  if (theData)
  {
    CFRelease(theData);
    theData = 0;
  }
  if (v13)
    CFRelease(v13);
  return v11;
}

uint64_t CSChunkCopier_Update(uint64_t a1, uint64_t a2, uint64_t a3, CFErrorRef *a4)
{
  uint64_t result;
  CFErrorRef v6;

  if (*(_QWORD *)(a1 + 72))
  {
    ccctr_update();
    return 1;
  }
  else
  {
    v6 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFErrorDomain)*MEMORY[0x24BDBD390], 7, 0);
    result = 0;
    *a4 = v6;
  }
  return result;
}

uint64_t CSContext_Initialize(_QWORD *a1, CFErrorRef *a2)
{
  _OWORD *v4;
  uint64_t result;
  CFErrorRef v6;

  v4 = malloc_type_calloc(1uLL, 0x50uLL, 0x600401D44175AuLL);
  if (v4)
  {
    v4[3] = 0u;
    v4[4] = 0u;
    v4[1] = 0u;
    v4[2] = 0u;
    *v4 = 0u;
    *a1 = v4;
    return 1;
  }
  else
  {
    *a1 = 0;
    v6 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFErrorDomain)*MEMORY[0x24BDBD390], 1, 0);
    result = 0;
    *a2 = v6;
  }
  return result;
}

uint64_t CSContext_InititializeFromBoundaryKey(const __CFData *a1, uint64_t a2, CFMutableDataRef **a3, CFErrorRef *a4)
{
  CFMutableDataRef *v8;
  CFMutableDataRef *v9;
  const __CFAllocator *v10;
  CFIndex Length;
  uint64_t result;
  const __CFAllocator *v13;
  const __CFString *v14;
  CFIndex v15;
  CFErrorRef v16;
  UInt8 bytes[16];
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v8 = (CFMutableDataRef *)malloc_type_calloc(1uLL, 0x50uLL, 0x600401D44175AuLL);
  if (v8)
  {
    v9 = v8;
    *((_OWORD *)v8 + 3) = 0u;
    *((_OWORD *)v8 + 4) = 0u;
    *((_OWORD *)v8 + 1) = 0u;
    *((_OWORD *)v8 + 2) = 0u;
    *(_OWORD *)v8 = 0u;
    v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Length = CFDataGetLength(a1);
    *v9 = CFDataCreateMutableCopy(v10, Length, a1);
    if (a2)
    {
LABEL_3:
      *a3 = v9;
      return 1;
    }
    ccsha256_di();
    CFDataGetBytePtr(a1);
    CFDataGetLength(a1);
    *(_OWORD *)bytes = 0u;
    v18 = 0u;
    if (!cchkdf())
    {
      v9[3] = CFDataCreate(v10, bytes, 32);
      *(_OWORD *)bytes = 0u;
      v18 = 0u;
      if (!cchkdf())
      {
        v9[2] = CFDataCreate(v10, bytes, 32);
        *(_OWORD *)bytes = 0u;
        v18 = 0u;
        if (!cchkdf())
        {
          v9[4] = CFDataCreate(v10, bytes, 32);
          goto LABEL_3;
        }
      }
    }
    free(v9);
    *a3 = 0;
    v14 = (const __CFString *)*MEMORY[0x24BDBD390];
    v13 = v10;
    v15 = 2;
  }
  else
  {
    *a3 = 0;
    v13 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v14 = (const __CFString *)*MEMORY[0x24BDBD390];
    v15 = 1;
  }
  v16 = CFErrorCreate(v13, v14, v15, 0);
  result = 0;
  *a4 = v16;
  return result;
}

uint64_t CSContext_InitializeFromChunkKey(const __CFData *a1, uint64_t a2, _QWORD *a3, CFErrorRef *a4)
{
  _OWORD *v7;
  _OWORD *v8;
  const __CFAllocator *v9;
  CFIndex Length;
  uint64_t result;
  const __CFAllocator *v12;
  const __CFString *v13;
  CFIndex v14;
  CFErrorRef v15;

  v7 = malloc_type_calloc(1uLL, 0x50uLL, 0x600401D44175AuLL);
  if (v7)
  {
    v8 = v7;
    v7[3] = 0u;
    v7[4] = 0u;
    v7[1] = 0u;
    v7[2] = 0u;
    *v7 = 0u;
    if (a1)
    {
      v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      Length = CFDataGetLength(a1);
      *((_QWORD *)v8 + 3) = CFDataCreateMutableCopy(v9, Length, a1);
      *a3 = v8;
      return 1;
    }
    free(v7);
    *a3 = 0;
    v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v13 = (const __CFString *)*MEMORY[0x24BDBD390];
    v14 = 2;
  }
  else
  {
    *a3 = 0;
    v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v13 = (const __CFString *)*MEMORY[0x24BDBD390];
    v14 = 1;
  }
  v15 = CFErrorCreate(v12, v13, v14, 0);
  result = 0;
  *a4 = v15;
  return result;
}

uint64_t CSContext_InitializeFromFileKey(const __CFData *a1, uint64_t a2, _QWORD *a3, CFErrorRef *a4)
{
  _OWORD *v7;
  _OWORD *v8;
  const __CFAllocator *v9;
  CFIndex Length;
  uint64_t result;
  const __CFAllocator *v12;
  const __CFString *v13;
  CFIndex v14;
  CFErrorRef v15;

  v7 = malloc_type_calloc(1uLL, 0x50uLL, 0x600401D44175AuLL);
  if (v7)
  {
    v8 = v7;
    v7[3] = 0u;
    v7[4] = 0u;
    v7[1] = 0u;
    v7[2] = 0u;
    *v7 = 0u;
    if (a1)
    {
      v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      Length = CFDataGetLength(a1);
      *((_QWORD *)v8 + 2) = CFDataCreateMutableCopy(v9, Length, a1);
      *a3 = v8;
      return 1;
    }
    free(v7);
    *a3 = 0;
    v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v13 = (const __CFString *)*MEMORY[0x24BDBD390];
    v14 = 2;
  }
  else
  {
    *a3 = 0;
    v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v13 = (const __CFString *)*MEMORY[0x24BDBD390];
    v14 = 1;
  }
  v15 = CFErrorCreate(v12, v13, v14, 0);
  result = 0;
  *a4 = v15;
  return result;
}

uint64_t CSContext_Destroy(const void **a1, CFErrorRef *a2)
{
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  uint64_t v9;

  if (a1)
  {
    v4 = *a1;
    if (v4)
    {
      CFRelease(v4);
      *a1 = 0;
    }
    v5 = a1[1];
    if (v5)
    {
      CFRelease(v5);
      a1[1] = 0;
    }
    v6 = a1[2];
    if (v6)
    {
      CFRelease(v6);
      a1[2] = 0;
    }
    v7 = a1[3];
    if (v7)
    {
      CFRelease(v7);
      a1[3] = 0;
    }
    v8 = a1[4];
    if (v8)
    {
      CFRelease(v8);
      a1[4] = 0;
    }
    if (a1[5])
    {
      v9 = CSFileDigester_Destroy((uint64_t)a1, a2) | 1;
      a1[5] = 0;
    }
    else
    {
      v9 = 1;
    }
    if (a1[6])
    {
      v9 = CSChunkDigester_Destroy((uint64_t)a1, a2) | v9;
      a1[6] = 0;
    }
    if (a1[7])
    {
      v9 = CSChunkCryptor_Destroy((uint64_t)a1, a2) | v9;
      a1[7] = 0;
    }
    if (a1[8])
    {
      v9 = CSCopier_Destroy((uint64_t)a1, a2) | v9;
      a1[8] = 0;
    }
    if (a1[9])
      v9 = CSChunkCopier_Destroy((uint64_t)a1, a2) | v9;
    free(a1);
  }
  else
  {
    v9 = 0;
    *a2 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFErrorDomain)*MEMORY[0x24BDBD390], 6, 0);
  }
  return v9;
}

void CKChunkCryptorV1Finalize(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  CFStringRef v5;
  NSObject *v6;
  uint8_t buf[4];
  CFStringRef v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(v2 + 8))
  {
    done_unimp();
    free(*(void **)(*(_QWORD *)(a1 + 40) + 8));
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) = 0;
    v2 = *(_QWORD *)(a1 + 40);
  }
  v3 = CCCryptorRelease(*(CCCryptorRef *)v2);
  if ((_DWORD)v3)
  {
    v4 = v3;
    if (CK_DEFAULT_LOG_BLOCK_2 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_2, &__block_literal_global_2);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_2, OS_LOG_TYPE_ERROR))
    {
      v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("CCCryptorRelease() => %d\n"), v4);
      if (CK_DEFAULT_LOG_BLOCK_2 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_2, &__block_literal_global_5_0);
      v6 = CK_DEFAULT_LOG_INTERNAL_2;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_2, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v8 = v5;
        _os_log_impl(&dword_20A95C000, v6, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v5)
        CFRelease(v5);
    }
  }
  **(_QWORD **)(a1 + 40) = 0;
}

BOOL CKChunkCryptorV1Init(uint64_t a1, char a2, uint64_t a3)
{
  unsigned __int8 *v5;
  const void *v6;
  size_t v7;
  CFStringRef v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _BOOL8 result;
  CFStringRef v14;
  NSObject *v15;
  uint8_t v16[4];
  CFStringRef v17;
  uint8_t buf[16];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v5 = (unsigned __int8 *)CKChunkDigestResultsChunkKey(a3);
  v6 = v5 + 1;
  v7 = CKChunkEncryptionKeySize(v5);
  if (v7 != 16)
  {
    if (CK_DEFAULT_LOG_BLOCK_2 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_2, &__block_literal_global_7_0);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_2, OS_LOG_TYPE_ERROR))
    {
      v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("expected key size 16; got %u\n"),
             v7);
      if (CK_DEFAULT_LOG_BLOCK_2 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_2, &__block_literal_global_11);
      v9 = CK_DEFAULT_LOG_INTERNAL_2;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_2, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v8;
        _os_log_impl(&dword_20A95C000, v9, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v8)
        CFRelease(v8);
    }
  }
  *(_BYTE *)(a1 + 32) = a2;
  v20 = 0u;
  v21 = 0u;
  *(_OWORD *)buf = 0u;
  v19 = 0u;
  v10 = CCCryptorCreate(0, 0, 2u, v6, v7, buf, *(CCCryptorRef **)(a1 + 40));
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) = malloc_type_malloc(0x110uLL, 0x283B7D5BuLL);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD **)(v11 + 8);
  if (!v12)
    return 0;
  cfb_start(*(_CCCryptor **)v11, 0, v12);
  if (!(_DWORD)v10)
    return 1;
  if (CK_DEFAULT_LOG_BLOCK_2 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_2, &__block_literal_global_14_0);
  result = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_2, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v14 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("CCCryptorCreate() => %d\n"), v10);
    if (CK_DEFAULT_LOG_BLOCK_2 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_2, &__block_literal_global_19_1);
    v15 = CK_DEFAULT_LOG_INTERNAL_2;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v16 = 138543362;
      v17 = v14;
      _os_log_impl(&dword_20A95C000, v15, OS_LOG_TYPE_ERROR, "%{public}@", v16, 0xCu);
    }
    if (v14)
      CFRelease(v14);
    return 0;
  }
  return result;
}

BOOL CKChunkCryptorV1Update(uint64_t a1, char *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  _CCCryptor *v5;
  _QWORD *v6;
  int v7;
  _BOOL8 result;
  CFStringRef v9;
  NSObject *v10;
  uint8_t buf[4];
  CFStringRef v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_CCCryptor **)v4;
  v6 = *(_QWORD **)(v4 + 8);
  if (v3)
    v7 = cfb_encrypt(v5, a2, a2, a3, v6);
  else
    v7 = cfb_decrypt(v5, a2, a2, a3, v6);
  if (!v7)
    return 1;
  if (CK_DEFAULT_LOG_BLOCK_2 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_2, &__block_literal_global_21_0);
  result = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_2, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("crypting:CCCryptorUpdate() => %d\n"), 4294962996);
    if (CK_DEFAULT_LOG_BLOCK_2 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_2, &__block_literal_global_25_1);
    v10 = CK_DEFAULT_LOG_INTERNAL_2;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v12 = v9;
      _os_log_impl(&dword_20A95C000, v10, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v9)
      CFRelease(v9);
    return 0;
  }
  return result;
}

uint64_t CKChunkCryptorV1Finish()
{
  return 1;
}

uint64_t CKChunkDigestArgumentsV2Alloc(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  *a1 = 0;
  v3 = 0;
  result = CKChunkDigestArgumentsAllocate(&v3, 2, 16);
  if ((_DWORD)result)
    *a1 = v3;
  return result;
}

uint64_t CKChunkDigestArgumentsV2ChunkScheme()
{
  return 4;
}

uint64_t CKChunkDigestArgumentsV2ChunkKeyScheme(uint64_t a1)
{
  return 4 * (*(_BYTE *)(a1 + 20) != 0);
}

uint64_t CKChunkDigestArgumentsV2BoundaryKey(uint64_t a1)
{
  return **(_QWORD **)(a1 + 24);
}

uint64_t CKChunkDigestArgumentsV2ChunkKey(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
}

uint64_t CKChunkDigestArgumentsV2ChunkSchemeByte(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 20))
    return 132;
  else
    return 4;
}

void CKChunkDigestArgumentsV2Finalize(uint64_t a1)
{
  CFTypeRef *v2;
  uint64_t v3;
  const void *v4;

  v2 = *(CFTypeRef **)(a1 + 24);
  if (*v2)
  {
    CKBaseRelease(*v2);
    v2 = *(CFTypeRef **)(a1 + 24);
  }
  *v2 = 0;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(const void **)(v3 + 8);
  if (v4)
  {
    CKBaseRelease(v4);
    v3 = *(_QWORD *)(a1 + 24);
  }
  *(_QWORD *)(v3 + 8) = 0;
}

const __CFString *CKChunkDigestArgumentsV2CopyDescription(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 24);
  if (*v1)
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("v2 boundaryKey"));
  if (v1[1])
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("v2 chunkKey"));
  return CFSTR("v2 invalid");
}

uint64_t CKChunkDigestArgumentsV2WithBoundaryKeyCreate(_QWORD *a1, const void *a2, CFTypeRef *a3)
{
  return _CKChunkDigestArgumentsV2Create(a1, a2, 0, a3);
}

uint64_t _CKChunkDigestArgumentsV2Create(_QWORD *a1, const void *a2, const void *a3, CFTypeRef *a4)
{
  int v8;
  uint64_t v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef v15;
  CFTypeRef cf;

  v15 = 0;
  cf = 0;
  *a1 = 0;
  v8 = CKChunkDigestArgumentsAllocate((uint64_t *)&v15, 2, 16);
  v9 = 0;
  v10 = v15;
  if (!v8 || !v15)
    goto LABEL_17;
  if (!_CKChunkDigestArgumentsInit((uint64_t)v15, 1, &cf))
  {
    v9 = 0;
    v12 = cf;
    if (a4 && cf)
    {
      CFRetain(cf);
      v9 = 0;
      v12 = cf;
      *a4 = cf;
    }
    goto LABEL_14;
  }
  if (a2)
  {
    CFRetain(a2);
    **((_QWORD **)v15 + 3) = a2;
  }
  if (a3)
  {
    CFRetain(a3);
    v11 = v15;
    *(_QWORD *)(*((_QWORD *)v15 + 3) + 8) = a3;
  }
  else
  {
    v11 = v15;
    if (!v15)
    {
      v13 = 0;
      goto LABEL_13;
    }
  }
  CFRetain(v11);
  v13 = v15;
LABEL_13:
  *a1 = v13;
  v9 = 1;
  v12 = cf;
LABEL_14:
  if (v12)
    CFRelease(v12);
  v10 = v15;
LABEL_17:
  if (v10)
    CFRelease(v10);
  return v9;
}

uint64_t CKChunkDigestArgumentsV2WithChunkKeyCreate(_QWORD *a1, const void *a2, CFTypeRef *a3)
{
  return _CKChunkDigestArgumentsV2Create(a1, 0, a2, a3);
}

void *CKFileSchemeAndSignatureCopyCString(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = CKFileSignatureSize(a1);
  if (v2)
    v3 = v2 + 1;
  else
    v3 = 0;
  v4 = malloc_type_malloc((2 * v3) | 1, 0xC4114965uLL);
  CShex_to_string(a1, v3, (uint64_t)v4);
  return v4;
}

BOOL CKFileSignatureIsValidN(_BYTE *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;

  result = 0;
  if (a1 && a2)
  {
    v5 = CKFileSignatureSize(a1);
    if (v5)
      v6 = v5 + 1;
    else
      v6 = 0;
    return v6 == a2 && v5 != 0;
  }
  return result;
}

void *CKFileSignatureCreateWithHexString(char *a1)
{
  void *result;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  void *v8;

  v7 = 0;
  v8 = 0;
  if (ck_buffer_create_with_hex_string(a1, &v8, &v7))
  {
    v2 = v7;
    result = v8;
    if (v8)
      v3 = v7 == 0;
    else
      v3 = 1;
    if (v3)
      goto LABEL_14;
    v4 = CKFileSignatureSize(v8);
    if (v4)
      v5 = v4 + 1;
    else
      v5 = 0;
    if (v4)
      v6 = v5 == v2;
    else
      v6 = 0;
    if (v6)
      return v8;
  }
  result = v8;
LABEL_14:
  if (result)
  {
    free(result);
    return 0;
  }
  return result;
}

BOOL CKFileSignaturesEqual(_BYTE *a1, _BYTE *a2)
{
  _BOOL8 result;
  uint64_t v5;
  _BOOL4 v6;
  size_t v7;
  uint64_t v8;
  _BOOL4 v9;

  if (a1 == a2)
    return 1;
  result = 0;
  if (a1 && a2)
  {
    v5 = CKFileSignatureSize(a1);
    v6 = v5 == 0;
    if (v5)
      v7 = v5 + 1;
    else
      v7 = 0;
    v8 = CKFileSignatureSize(a2);
    v9 = v8 + 1 == v7;
    if (!v8)
      v9 = v6;
    return v9 && memcmp(a1, a2, v7) == 0;
  }
  return result;
}

uint64_t CKFileDigestResultsV2Alloc(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  *a1 = 0;
  v3 = 0;
  result = CKFileDigestResultsAllocate(&v3, 2, 8);
  if ((_DWORD)result)
    *a1 = v3;
  return result;
}

uint64_t CKFileDigestResultsV2Create(_QWORD *a1, _BYTE *a2, uint64_t a3, const void *a4)
{
  int v8;
  uint64_t v9;
  CFTypeRef v10;
  CFTypeRef cf;
  uint64_t v13;

  cf = 0;
  v13 = 0;
  *a1 = 0;
  v8 = CKFileDigestResultsAllocate((uint64_t *)&cf, 2, 8);
  v9 = 0;
  v10 = cf;
  if (v8 && cf)
  {
    if (!_CKFileDigestResultsInit((uint64_t)cf, a2, a3, &v13))
    {
      v9 = 0;
      v10 = cf;
      if (!cf)
        return v9;
      goto LABEL_10;
    }
    if (a4)
    {
      CFRetain(a4);
      **((_QWORD **)cf + 5) = a4;
    }
    v10 = cf;
    if (cf)
    {
      CFRetain(cf);
      v10 = cf;
    }
    *a1 = v10;
    v9 = 1;
  }
  if (v10)
LABEL_10:
    CFRelease(v10);
  return v9;
}

void CKFileDigestResultsV2Finalize(uint64_t a1)
{
  const void *v2;

  v2 = **(const void ***)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
    **(_QWORD **)(a1 + 40) = 0;
  }
}

BOOL CKFileDigestResultsV2IsEqual(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  BOOL v4;

  if (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
    return 0;
  v2 = *(_BYTE **)(a1 + 32);
  v3 = *(_BYTE **)(a2 + 32);
  if (v2 != v3)
  {
    if (v2)
      v4 = v3 == 0;
    else
      v4 = 1;
    if (!v4)
      return CKFileSignaturesEqual(v2, v3);
    return 0;
  }
  return 1;
}

uint64_t CKFileDigestResultsV2FileVerificationKey(uint64_t a1)
{
  return **(_QWORD **)(a1 + 40);
}

CFStringRef CKFileDigestResultsV2CopyDescription(uint64_t a1)
{
  void *v2;
  const char *v3;
  CFStringRef v4;

  v2 = CKFileSchemeAndSignatureCopyCString(*(char **)(a1 + 32));
  if (**(_QWORD **)(a1 + 40))
    v3 = "present";
  else
    v3 = "not-present";
  v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("sig %s len %llu fileVerificationKey %s"), v2, *(_QWORD *)(a1 + 24), v3);
  free(v2);
  return v4;
}

void _CSBruteForceDatabaseCorruptionRecovery(const char *a1, sqlite3 *pDb, char a3)
{
  CFStringRef v4;
  NSObject *v5;
  CFStringRef v6;
  NSObject *v7;
  int v8;
  CFStringRef v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if ((a3 & 1) != 0)
  {
    CScloseDB(pDb);
    if (!a1)
    {
      if (_MergedGlobals != -1)
        dispatch_once(&_MergedGlobals, &__block_literal_global_8_0);
      if (os_log_type_enabled((os_log_t)qword_2546119F8, OS_LOG_TYPE_ERROR))
      {
        v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("chunk store database corruption: could not unlink files, dbname null"));
        if (_MergedGlobals != -1)
          dispatch_once(&_MergedGlobals, &__block_literal_global_13_0);
        v5 = qword_2546119F8;
        if (!os_log_type_enabled((os_log_t)qword_2546119F8, OS_LOG_TYPE_ERROR))
          goto LABEL_18;
        v8 = 138543362;
        v9 = v4;
LABEL_17:
        _os_log_impl(&dword_20A95C000, v5, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v8, 0xCu);
LABEL_18:
        if (v4)
          CFRelease(v4);
        return;
      }
      return;
    }
    _CSRemoveDatabaseFilesAtPath(a1);
    if (CSContinueOnCorruptDB())
    {
      if ((_CSBruteForceDatabaseCorruptionRecovery_cold_1() & 1) == 0)
LABEL_27:
        _CSBruteForceDatabaseCorruptionRecovery_cold_3();
LABEL_26:
      _CSBruteForceDatabaseCorruptionRecovery_cold_2();
      goto LABEL_27;
    }
    if ((os_variant_has_internal_content() & 1) != 0)
    {
      if (!CSExitOnCorruptDB())
        goto LABEL_26;
      if (_MergedGlobals != -1)
        dispatch_once(&_MergedGlobals, &__block_literal_global_33);
      if (os_log_type_enabled((os_log_t)qword_2546119F8, OS_LOG_TYPE_ERROR))
      {
        v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("chunk store database corruption: would normally abort here.  Exiting instead"));
        if (_MergedGlobals != -1)
          dispatch_once(&_MergedGlobals, &__block_literal_global_38);
        v7 = qword_2546119F8;
        if (!os_log_type_enabled((os_log_t)qword_2546119F8, OS_LOG_TYPE_ERROR))
          goto LABEL_43;
        v8 = 138543362;
        v9 = v6;
LABEL_42:
        _os_log_impl(&dword_20A95C000, v7, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v8, 0xCu);
LABEL_43:
        if (v6)
          CFRelease(v6);
      }
    }
    else
    {
      if (_MergedGlobals != -1)
        dispatch_once(&_MergedGlobals, &__block_literal_global_25_2);
      if (os_log_type_enabled((os_log_t)qword_2546119F8, OS_LOG_TYPE_ERROR))
      {
        v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("exiting due to chunk store database corruption"));
        if (_MergedGlobals != -1)
          dispatch_once(&_MergedGlobals, &__block_literal_global_30_0);
        v7 = qword_2546119F8;
        if (!os_log_type_enabled((os_log_t)qword_2546119F8, OS_LOG_TYPE_ERROR))
          goto LABEL_43;
        v8 = 138543362;
        v9 = v6;
        goto LABEL_42;
      }
    }
    exit(1);
  }
  if (_MergedGlobals != -1)
    dispatch_once(&_MergedGlobals, &__block_literal_global_4);
  if (os_log_type_enabled((os_log_t)qword_2546119F8, OS_LOG_TYPE_ERROR))
  {
    v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("chunk store database corruption: retaining contents, isRegistry false"));
    if (_MergedGlobals != -1)
      dispatch_once(&_MergedGlobals, &__block_literal_global_5_2);
    v5 = qword_2546119F8;
    if (!os_log_type_enabled((os_log_t)qword_2546119F8, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    v8 = 138543362;
    v9 = v4;
    goto LABEL_17;
  }
}

void _CSRemoveDatabaseFilesAtPath(const char *a1)
{
  CFStringRef v2;
  NSObject *v3;
  uint8_t buf[4];
  CFStringRef v5;
  char __str[1024];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  bzero(__str, 0x400uLL);
  _CSUnlinkAndLog(a1, (uint64_t)"database");
  if (snprintf(__str, 0x400uLL, "%s-journal", a1) <= 0x3FF)
    _CSUnlinkAndLog(__str, (uint64_t)"journal");
  if (snprintf(__str, 0x400uLL, "%s-wal", a1) <= 0x3FF)
    _CSUnlinkAndLog(__str, (uint64_t)"wal");
  if (snprintf(__str, 0x400uLL, "%s-shm", a1) <= 0x3FF)
    _CSUnlinkAndLog(__str, (uint64_t)"shm");
  if (_MergedGlobals != -1)
    dispatch_once(&_MergedGlobals, &__block_literal_global_55_1);
  if (os_log_type_enabled((os_log_t)qword_2546119F8, OS_LOG_TYPE_ERROR))
  {
    v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("chunk store database corruption: unlinked database files"));
    if (_MergedGlobals != -1)
      dispatch_once(&_MergedGlobals, &__block_literal_global_59_0);
    v3 = qword_2546119F8;
    if (os_log_type_enabled((os_log_t)qword_2546119F8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v5 = v2;
      _os_log_impl(&dword_20A95C000, v3, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v2)
      CFRelease(v2);
  }
}

void _CSUnlinkAndLog(const char *a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  char *v6;
  int v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (unlink(a1))
  {
    if (*__error() != 2)
    {
      if (_MergedGlobals != -1)
        dispatch_once(&_MergedGlobals, &__block_literal_global_61_1);
      v4 = qword_2546119F8;
      if (os_log_type_enabled((os_log_t)qword_2546119F8, OS_LOG_TYPE_ERROR))
      {
        v5 = __error();
        v6 = strerror(*v5);
        v7 = *__error();
        v12 = 136446978;
        v13 = a2;
        v14 = 2080;
        v15 = a1;
        v16 = 2082;
        v17 = v6;
        v18 = 1024;
        v19 = v7;
        v8 = "chunk store database corruption: unable to unlink %{public}s (%s): %{public}s (%d)";
        v9 = v4;
        v10 = 38;
LABEL_11:
        _os_log_impl(&dword_20A95C000, v9, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v12, v10);
      }
    }
  }
  else
  {
    if (_MergedGlobals != -1)
      dispatch_once(&_MergedGlobals, &__block_literal_global_64_0);
    v11 = qword_2546119F8;
    if (os_log_type_enabled((os_log_t)qword_2546119F8, OS_LOG_TYPE_ERROR))
    {
      v12 = 136446466;
      v13 = a2;
      v14 = 2080;
      v15 = a1;
      v8 = "chunk store database corruption: unlinked %{public}s (%s)";
      v9 = v11;
      v10 = 22;
      goto LABEL_11;
    }
  }
}

void OUTLINED_FUNCTION_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

BOOL OUTLINED_FUNCTION_1(NSObject *a1)
{
  return os_log_type_enabled(a1, OS_LOG_TYPE_ERROR);
}

uint64_t CKFileDigestArgumentsFileScheme(uint64_t a1)
{
  uint64_t (*v1)(void);

  v1 = _requestCallbacks_4[6 * *(int *)(a1 + 16)];
  if (v1)
    return v1();
  else
    return 0;
}

uint64_t CKFileDigestArgumentsFileEncrypted(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 20);
}

uint64_t CKFileDigestArgumentsBoundaryKey(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 16);
  if (v1 >= 2)
    return _requestCallbacks_4[6 * (int)v1 + 2]();
  else
    return 0;
}

uint64_t CKFileDigestArgumentsFileKey(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 16);
  if (v1 >= 2)
    return _requestCallbacks_4[6 * (int)v1 + 3]();
  else
    return 0;
}

uint64_t _CKFileDigestArgumentsCFFinalize(uint64_t result)
{
  int v1;

  v1 = *(_DWORD *)(result + 16);
  if (v1)
    return _requestCallbacks_4[6 * v1 + 5]();
  return result;
}

BOOL _CKFileDigestArgumentsCFEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t _CKFileDigestArgumentsCFCopyFormatDescription(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16);
  if (v1)
    return _requestCallbacks_4[6 * v1 + 4]();
  else
    return 0;
}

uint64_t _CKFileDigestArgumentsCFCopyDebugDescription(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16);
  if (v1)
    return _requestCallbacks_4[6 * v1 + 4]();
  else
    return 0;
}

uint64_t CKChunkSignatureSize(_BYTE *a1)
{
  uint64_t v1;
  CFStringRef v4;
  NSObject *v5;
  uint8_t buf[4];
  CFStringRef v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v1 = *a1 & 0x7F;
  if ((_DWORD)v1 == 1 || (_DWORD)v1 == 4)
    return 20;
  if (CK_DEFAULT_LOG_BLOCK_4 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_4, &__block_literal_global_5);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_4, OS_LOG_TYPE_ERROR))
  {
    v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Unknown chunk signature scheme: 0x%x\n"), v1);
    if (CK_DEFAULT_LOG_BLOCK_4 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_4, &__block_literal_global_5_3);
    v5 = CK_DEFAULT_LOG_INTERNAL_4;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v7 = v4;
      _os_log_impl(&dword_20A95C000, v5, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v4)
      CFRelease(v4);
  }
  return 0;
}

uint64_t CKChunkSchemeAndSignatureSize(_BYTE *a1)
{
  uint64_t v1;

  v1 = CKChunkSignatureSize(a1);
  if (v1)
    return v1 + 1;
  else
    return 0;
}

uint64_t CKSchemeAndSignatureSize(_BYTE *a1)
{
  uint64_t v1;

  v1 = CKChunkSignatureSize(a1);
  if (v1)
    return v1 + 1;
  else
    return 0;
}

uint64_t CKChunkSignatureAndKeySize(_BYTE *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (char)*a1;
  v3 = CKChunkSignatureSize(a1);
  if (v2 < 0)
  {
    v4 = CKChunkSignatureSize(a1);
    if (v4)
      v5 = v4 + 1;
    else
      v5 = 0;
    v6 = CKChunkEncryptionKeySize(&a1[v5]);
    if (v6)
      v7 = v6 + 1;
    else
      v7 = 0;
    v3 += v7;
  }
  return v3;
}

uint64_t CKChunkSchemeAndEncryptionKeySize(unsigned __int8 *a1)
{
  uint64_t v1;

  v1 = CKChunkEncryptionKeySize(a1);
  if (v1)
    return v1 + 1;
  else
    return 0;
}

uint64_t CKChunkSchemeSignatureAndKeySize(_BYTE *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (char)*a1;
  v3 = CKChunkSignatureSize(a1);
  if (v3)
    v4 = v3 + 1;
  else
    v4 = 0;
  if (v2 < 0)
  {
    v5 = CKChunkEncryptionKeySize(&a1[v4]);
    if (v5)
      v4 += v5 + 1;
    else
      return 0;
  }
  return v4;
}

uint64_t CKSchemeAndEncryptionKeySize(unsigned __int8 *a1)
{
  uint64_t v1;

  v1 = CKChunkEncryptionKeySize(a1);
  if (v1)
    return v1 + 1;
  else
    return 0;
}

uint64_t CKChunkEncryptionKeySize(unsigned __int8 *a1)
{
  uint64_t v1;
  CFStringRef v3;
  NSObject *v4;
  uint8_t buf[4];
  CFStringRef v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if ((char)*a1 < 0)
    CKChunkEncryptionKeySize_cold_1();
  v1 = *a1;
  if ((_DWORD)v1 == 1)
    return 16;
  if ((_DWORD)v1 == 4)
    return 32;
  if (CK_DEFAULT_LOG_BLOCK_4 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_4, &__block_literal_global_10_0);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_4, OS_LOG_TYPE_ERROR))
  {
    v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Unknown key scheme: 0x%x\n"), v1);
    if (CK_DEFAULT_LOG_BLOCK_4 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_4, &__block_literal_global_14_1);
    v4 = CK_DEFAULT_LOG_INTERNAL_4;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v6 = v3;
      _os_log_impl(&dword_20A95C000, v4, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v3)
      CFRelease(v3);
  }
  return 0;
}

uint64_t CKSubchunkBlobSize(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!*a1)
    return 0;
  v2 = (a2 + ((unint64_t)*a1 << 10) - 1) / ((unint64_t)*a1 << 10);
  v3 = CKChunkSignatureSize(a1 + 1);
  if (v3)
    v4 = v3 + 1;
  else
    v4 = 0;
  return v4 * v2 + 1;
}

uint64_t CKRegisteredChunkSubchunkBlobSize(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;

  if (!*(_BYTE *)(a1 + 29))
    return 0;
  v1 = *(unsigned int *)(a1 + 24);
  v2 = (unsigned __int8 *)(a1 + 35 + CKChunkSchemeSignatureAndKeySize((_BYTE *)(a1 + 35)));
  return CKSubchunkBlobSize(v2, v1);
}

unint64_t CKSubchunkMaxLength(_BYTE *a1)
{
  if (!a1 || !*a1)
    CKSubchunkMaxLength_cold_1();
  return (unint64_t)*a1 << 10;
}

void *CKChunkEncryptionKeyCopy(unsigned __int8 *a1)
{
  uint64_t v2;
  size_t v3;
  void *v4;
  void *v5;

  v2 = CKChunkEncryptionKeySize(a1);
  if (!v2)
    return 0;
  v3 = v2 + 1;
  v4 = malloc_type_malloc(v2 + 1, 0xB3691D78uLL);
  v5 = v4;
  if (v4)
    memcpy(v4, a1, v3);
  return v5;
}

void *CKChunkSignatureCopy(_BYTE *a1)
{
  uint64_t v2;
  size_t v3;
  void *v4;
  void *v5;

  v2 = CKChunkSignatureSize(a1);
  if (!v2)
    return 0;
  v3 = v2 + 1;
  v4 = malloc_type_malloc(v2 + 1, 0x67690609uLL);
  v5 = v4;
  if (v4)
    memcpy(v4, a1, v3);
  return v5;
}

BOOL CKChunkSignaturesEqual(_BYTE *a1, _BYTE *a2)
{
  _BOOL8 result;
  uint64_t v5;
  _BOOL4 v6;
  size_t v7;
  uint64_t v8;
  _BOOL4 v9;

  if (a1 == a2)
    return 1;
  result = 0;
  if (a1 && a2)
  {
    v5 = CKChunkSignatureSize(a1);
    v6 = v5 == 0;
    if (v5)
      v7 = v5 + 1;
    else
      v7 = 0;
    v8 = CKChunkSignatureSize(a2);
    v9 = v8 + 1 == v7;
    if (!v8)
      v9 = v6;
    return v9 && memcmp(a1, a2, v7) == 0;
  }
  return result;
}

BOOL CKChunkKeysEqual(unsigned __int8 *a1, unsigned __int8 *a2)
{
  _BOOL8 result;
  uint64_t v5;
  _BOOL4 v6;
  size_t v7;
  uint64_t v8;
  _BOOL4 v9;

  if (a1 == a2)
    return 1;
  result = 0;
  if (a1 && a2)
  {
    v5 = CKChunkEncryptionKeySize(a1);
    v6 = v5 == 0;
    if (v5)
      v7 = v5 + 1;
    else
      v7 = 0;
    v8 = CKChunkEncryptionKeySize(a2);
    v9 = v8 + 1 == v7;
    if (!v8)
      v9 = v6;
    return v9 && memcmp(a1, a2, v7) == 0;
  }
  return result;
}

void *CKChunkSchemeAndSignatureCopyCString(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = CKChunkSignatureSize(a1);
  if (v2)
    v3 = v2 + 1;
  else
    v3 = 0;
  v4 = malloc_type_malloc((2 * v3) | 1, 0x59E232CEuLL);
  CShex_to_string(a1, v3, (uint64_t)v4);
  return v4;
}

void *CKChunkKeySchemeAndSignatureCopyCString(unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = CKChunkEncryptionKeySize(a1);
  if (v2)
    v3 = v2 + 1;
  else
    v3 = 0;
  v4 = malloc_type_malloc((2 * v3) | 1, 0xB2CF8059uLL);
  CShex_to_string((char *)a1, v3, (uint64_t)v4);
  return v4;
}

BOOL CKChunkSignatureIsValidN(_BYTE *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;

  result = 0;
  if (a1 && a2)
  {
    v5 = CKChunkSignatureSize(a1);
    if (v5)
      v6 = v5 + 1;
    else
      v6 = 0;
    return v6 == a2 && v5 != 0;
  }
  return result;
}

BOOL CKChunkKeyIsValidN(unsigned __int8 *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;

  result = 0;
  if (a1 && a2)
  {
    v5 = CKChunkEncryptionKeySize(a1);
    if (v5)
      v6 = v5 + 1;
    else
      v6 = 0;
    return v6 == a2 && v5 != 0;
  }
  return result;
}

void *CKChunkSignatureCreateWithHexString(char *a1)
{
  void *result;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  void *v8;

  v7 = 0;
  v8 = 0;
  if (ck_buffer_create_with_hex_string(a1, &v8, &v7))
  {
    v2 = v7;
    result = v8;
    if (v8)
      v3 = v7 == 0;
    else
      v3 = 1;
    if (v3)
      goto LABEL_14;
    v4 = CKChunkSignatureSize(v8);
    if (v4)
      v5 = v4 + 1;
    else
      v5 = 0;
    if (v4)
      v6 = v5 == v2;
    else
      v6 = 0;
    if (v6)
      return v8;
  }
  result = v8;
LABEL_14:
  if (result)
  {
    free(result);
    return 0;
  }
  return result;
}

void *CKChunkKeyCreateWithHexString(char *a1)
{
  void *result;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  void *v8;

  v7 = 0;
  v8 = 0;
  if (ck_buffer_create_with_hex_string(a1, &v8, &v7))
  {
    v2 = v7;
    result = v8;
    if (v8)
      v3 = v7 == 0;
    else
      v3 = 1;
    if (v3)
      goto LABEL_14;
    v4 = CKChunkEncryptionKeySize((unsigned __int8 *)v8);
    if (v4)
      v5 = v4 + 1;
    else
      v5 = 0;
    if (v4)
      v6 = v5 == v2;
    else
      v6 = 0;
    if (v6)
      return v8;
  }
  result = v8;
LABEL_14:
  if (result)
  {
    free(result);
    return 0;
  }
  return result;
}

void *_CSCopyStoredChunkListForStorageFileID(uint64_t a1, sqlite3_int64 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v9;
  CFErrorRef v10;
  uint64_t *v11;
  int v14;
  __darwin_ino64_t v15;
  sqlite3_stmt **v16;
  uint64_t v17;
  const char *v18;
  const __CFString *v19;
  int v20;
  void *v21;
  uint64_t v23;
  sqlite3_int64 v24;
  _BYTE *v25;
  sqlite3_int64 v26;
  int v27;
  sqlite3_int64 v28;
  char v29;
  const char *v30;
  const char *v31;
  const char *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;

  v8 = (_QWORD *)a4;
  v9 = (_QWORD *)a3;
  v35 = 0;
  v36 = 0;
  if (*(_DWORD *)(a1 + 104))
  {
    v10 = CKCreateInternalWrongStoreError((char)"_CSCopyStoredChunkListForStorageFileID", 1, a3, a4, a5, a6, a7, a8);
    v11 = 0;
LABEL_9:
    v21 = 0;
    goto LABEL_10;
  }
  v14 = *(_DWORD *)(a1 + 128);
  v15 = _CSStorageFileInode(a1, a2, 1);
  v16 = _CSPrepareStatement(a1, CFSTR("SELECT ct_rowid, cid, offset, dataLen, timestamp, location FROM CSChunkTable WHERE ft_rowid = ? ORDER BY offset"), "SELECT ct_rowid, cid, offset, dataLen, timestamp, location FROM CSChunkTable WHERE ft_rowid = ? ORDER BY offset");
  v11 = (uint64_t *)v16;
  if (!v16)
  {
    v19 = CFSTR("Could not create prepared sqlite3 statement in %s");
    v20 = 1;
    goto LABEL_8;
  }
  v17 = CS_sqlite3_bind_int64((uint64_t)v16, 1, a2);
  if ((_DWORD)v17)
  {
    v18 = (const char *)v17;
    v30 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
    v31 = v18;
    v19 = CFSTR("sqlite3_bind failed in %s: %s (%d)");
LABEL_6:
    v20 = (int)v18;
LABEL_8:
    v10 = CKSQLiteErrorCreateWithFormat(v20, v19, "_CSCopyStoredChunkListForStorageFileID", v30, v31, v32);
    goto LABEL_9;
  }
  v33 = v9;
  v34 = v8;
  while (1)
  {
    v23 = CS_sqlite3_step(v11);
    if ((_DWORD)v23 != 100)
      break;
    v24 = CS_sqlite3_column_int64((uint64_t)v11, 0);
    v25 = CS_sqlite3_column_blob((uint64_t)v11, 1);
    v26 = CS_sqlite3_column_int64((uint64_t)v11, 2);
    v27 = CS_sqlite3_column_int((uint64_t)v11, 3);
    v28 = CS_sqlite3_column_int64((uint64_t)v11, 4);
    v29 = CS_sqlite3_column_int((uint64_t)v11, 5);
    if (addStoredChunk((uint64_t)&v35, v14, v15, v24, a2, v26, v27, v28, v29, v25))
    {
      v21 = 0;
      v10 = 0;
      v9 = v33;
      v8 = v34;
      goto LABEL_10;
    }
  }
  v18 = (const char *)v23;
  v9 = v33;
  v8 = v34;
  if ((_DWORD)v23 != 101)
  {
    v31 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
    v32 = v18;
    v30 = (const char *)a2;
    v19 = CFSTR("sqlite3_step in %s failed for ft_rowid %lld: %s (%d)");
    goto LABEL_6;
  }
  v10 = 0;
  v21 = v35;
  v35 = 0;
LABEL_10:
  _CSFinishPreparedStatement(v11);
  free(v35);
  if (v9)
    *v9 = v36;
  if (v8)
  {
    *v8 = v10;
  }
  else if (v10)
  {
    CFRelease(v10);
  }
  return v21;
}

uint64_t CSAttemptFirstAidForStorageFile(uint64_t a1, sqlite3_int64 a2, CFErrorRef *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFErrorRef v9;
  void *v10;
  uint64_t result;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __CFError *v25;
  CFErrorDomain Domain;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  int v33;
  int *v34;
  char *v35;
  int *v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  CFErrorRef v45;
  CFErrorRef v46;
  uint64_t *v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  sqlite3_stmt **v51;
  uint64_t v52;
  const __CFString *v53;
  int v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  sqlite3_int64 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  sqlite3_int64 v64;
  CFErrorRef v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  stat buf;
  _BYTE v79[12];
  __int16 v80;
  sqlite3_int64 v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 104))
  {
    v9 = CKCreateInternalWrongStoreError((char)"CSAttemptFirstAidForStorageFile", 1, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_3:
    v10 = 0;
LABEL_4:
    free(v10);
    if (a3)
    {
      result = 0;
LABEL_6:
      *a3 = v9;
      return result;
    }
    if (v9)
      CFRelease(v9);
    return 0;
  }
  if (CK_DEFAULT_LOG_BLOCK_5 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_5, &__block_literal_global_24);
  v14 = CK_DEFAULT_LOG_INTERNAL_5;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_5, OS_LOG_TYPE_DEBUG))
  {
    buf.st_dev = 134217984;
    *(_QWORD *)&buf.st_mode = a2;
    _os_log_impl(&dword_20A95C000, v14, OS_LOG_TYPE_DEBUG, "Validating storage file with ft_rowid %llu", (uint8_t *)&buf, 0xCu);
  }
  bzero(v79, 0x400uLL);
  if (!_CSCreateStoragePath(a1, a2, v79, 0x400uLL))
  {
    v25 = CKInternalErrorCreateWithFormat(4u, 0, CFSTR("Could not construct path for storage file with ft_rowid %llu"), v15, v16, v17, v18, v19, a2);
    goto LABEL_20;
  }
  memset(&buf, 0, sizeof(buf));
  if (stat(v79, &buf))
  {
    if (*__error() == 2)
    {
      v25 = CKInternalErrorCreateWithFormat(5u, 0, CFSTR("Storage file with ft_rowid %lld is missing"), v20, v21, v22, v23, v24, a2);
    }
    else
    {
      v33 = *__error();
      v34 = __error();
      v35 = strerror(*v34);
      v36 = __error();
      v25 = CKPOSIXErrorCreateWithFormat(v33, CFSTR("stat failed in %s for path \"%s\": %s (%d)"), "_CSValidateStorageFile", v79, v35, *v36);
    }
LABEL_20:
    v9 = v25;
    Domain = CFErrorGetDomain(v25);
    if (!CFEqual(Domain, CFSTR("com.apple.chunkinglibrary.internal")) || CFErrorGetCode(v9) != 5)
      goto LABEL_3;
    if (v9)
      CFRelease(v9);
    *(_QWORD *)v79 = 0;
    *(_QWORD *)&buf.st_dev = 0;
    v31 = _CSCopyStoredChunkListForStorageFileID(a1, a2, (uint64_t)v79, (uint64_t)&buf, v27, v28, v29, v30);
    v32 = v31;
    if (*(_QWORD *)&buf.st_dev)
    {
      free(v31);
      v10 = 0;
      v9 = *(CFErrorRef *)&buf.st_dev;
      goto LABEL_4;
    }
    v10 = malloc_type_malloc(8 * *(_QWORD *)v79, 0x100004000313F17uLL);
    v37 = v79[0];
    if (*(_QWORD *)v79)
    {
      v38 = 0;
      do
      {
        *((_QWORD *)v10 + v38) = *(_QWORD *)(CKStoredChunkAtIndex((uint64_t)v32, v38) + 16);
        ++v38;
      }
      while (v38 < *(_QWORD *)v79);
    }
    free(v32);
    if (*(_BYTE *)(a1 + 17))
    {
      v45 = CKInternalErrorCreateWithFormat(6u, 0, CFSTR("First aid found %llu inconsistent chunks in storage file with ft_rowid %llu, but chunk store is read-only"), v40, v41, v42, v43, v44, a2);
LABEL_34:
      v9 = v45;
      goto LABEL_4;
    }
    if (*(_DWORD *)(a1 + 104))
    {
      v46 = CKCreateInternalWrongStoreError((char)"_CSPurgeInvalidStorageFileID", 1, v39, v40, v41, v42, v43, v44);
      v47 = 0;
      goto LABEL_61;
    }
    if (CK_DEFAULT_LOG_BLOCK_5 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_5, &__block_literal_global_32_0);
    v48 = CK_DEFAULT_LOG_INTERNAL_5;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v79 = 134217984;
      *(_QWORD *)&v79[4] = a2;
      _os_log_impl(&dword_20A95C000, v48, OS_LOG_TYPE_ERROR, "Purging invalid storage file with ft_rowid %llu", v79, 0xCu);
    }
    v49 = 0;
    while (1)
    {
      v50 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + v49);
      if (v50)
      {
        if (*(_QWORD *)(v50 + 16) == a2)
          break;
      }
      v49 += 8;
      if (v49 == 40)
        goto LABEL_47;
    }
    _CSCloseStorageFile(a1, (_DWORD *)v50, 0);
LABEL_47:
    v51 = _CSPrepareStatement(a1, CFSTR("UPDATE CSStorageFileTable SET ft_status = ? WHERE ft_rowid = ?"), "UPDATE CSStorageFileTable SET ft_status = ? WHERE ft_rowid = ?");
    v47 = (uint64_t *)v51;
    if (v51)
    {
      v52 = CS_sqlite3_bind_int((uint64_t)v51, 1, 109);
      if ((_DWORD)v52 || (v52 = CS_sqlite3_bind_int64((uint64_t)v47, 2, a2), (_DWORD)v52))
      {
        v76 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        v77 = v52;
        v53 = CFSTR("sqlite3_bind failed in %s: %s (%d)");
LABEL_51:
        v54 = v52;
LABEL_59:
        v65 = CKSQLiteErrorCreateWithFormat(v54, v53, "_CSPurgeInvalidStorageFileID", v76, v77);
        goto LABEL_60;
      }
      v55 = CS_sqlite3_step(v47);
      if ((_DWORD)v55 != 101)
      {
        v52 = v55;
        v76 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        v77 = v52;
        v53 = CFSTR("sqlite3_step failed in %s: %s (%d)");
        goto LABEL_51;
      }
      _CSFinishPreparedStatement(v47);
      v56 = (uint64_t *)_CSPrepareStatement(a1, CFSTR("SELECT changes()"), "SELECT changes()");
      v47 = v56;
      if (v56)
      {
        v57 = CS_sqlite3_step(v56);
        if ((_DWORD)v57 == 100)
        {
          v58 = CS_sqlite3_column_int64((uint64_t)v47, 0);
          if (v58 != 1)
          {
            v64 = v58;
            if (!v58)
            {
              v65 = CKInternalErrorCreateWithFormat(3u, 0, CFSTR("Storage file with ft_rowid %llu does not exist in database"), v59, v60, v61, v62, v63, a2);
LABEL_60:
              v46 = v65;
LABEL_61:
              _CSFinishPreparedStatement(v47);
              v9 = CKInternalWrappingErrorCreateWithFormat(8u, v46, 0, CFSTR("First aid found %llu inconsistent chunks in storage file with ft_rowid %llu, but could not invalidate storage file"), v66, v67, v68, v69, v37);
              if (v46)
                CFRelease(v46);
              goto LABEL_4;
            }
            if (CK_DEFAULT_LOG_BLOCK_5 != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_5, &__block_literal_global_47_2);
            v70 = CK_DEFAULT_LOG_INTERNAL_5;
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_5, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)v79 = 134218240;
              *(_QWORD *)&v79[4] = v64;
              v80 = 2048;
              v81 = a2;
              _os_log_impl(&dword_20A95C000, v70, OS_LOG_TYPE_FAULT, "Update appeared to change %lld rows when marking storage file with ft_rowid %llu as missing", v79, 0x16u);
            }
          }
          _CSFinishPreparedStatement(v47);
          _CSFinishPreparedStatement(0);
          v45 = CKInternalErrorCreateWithFormat(7u, 0, CFSTR("First aid found %llu inconsistent chunks in storage file with ft_rowid %llu, and returned database to consistent state"), v71, v72, v73, v74, v75, v37);
          goto LABEL_34;
        }
        v52 = v57;
        v76 = sqlite3_errmsg(*(sqlite3 **)(a1 + 24));
        v77 = v52;
        v53 = CFSTR("sqlite3_step failed for changes() in %s: %s (%d)");
        goto LABEL_51;
      }
    }
    v53 = CFSTR("Could not create prepared sqlite3 statement in %s");
    v54 = 1;
    goto LABEL_59;
  }
  result = 1;
  if (a3)
  {
    v9 = 0;
    goto LABEL_6;
  }
  return result;
}

uint64_t CSAttemptAutomaticFirstAidForStorageFile(uint64_t a1, sqlite3_int64 a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFErrorDomain Domain;
  NSObject *v11;
  const char *v12;
  CFErrorRef err;
  uint8_t buf[4];
  CFErrorRef v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if ((CKChunkStoreTestFlags(a1) & 4) != 0)
    return 1;
  err = 0;
  v9 = CSAttemptFirstAidForStorageFile(a1, a2, &err, v4, v5, v6, v7, v8);
  if ((v9 & 1) != 0)
    goto LABEL_20;
  if (!err)
    return v9;
  Domain = CFErrorGetDomain(err);
  if (CFEqual(Domain, CFSTR("com.apple.chunkinglibrary.internal")))
  {
    if (CFErrorGetCode(err) == 7)
    {
      if (CK_DEFAULT_LOG_BLOCK_5 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_5, &__block_literal_global_6);
      v11 = CK_DEFAULT_LOG_INTERNAL_5;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_5, OS_LOG_TYPE_ERROR))
        goto LABEL_20;
      *(_DWORD *)buf = 138412290;
      v16 = err;
      v12 = "Automatic first aid found some missing chunks and made the database consistent again: %@";
    }
    else
    {
      if (CK_DEFAULT_LOG_BLOCK_5 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_5, &__block_literal_global_19_2);
      v11 = CK_DEFAULT_LOG_INTERNAL_5;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_5, OS_LOG_TYPE_ERROR))
        goto LABEL_20;
      *(_DWORD *)buf = 138412290;
      v16 = err;
      v12 = "Automatic first aid failed: %@";
    }
  }
  else
  {
    if (CK_DEFAULT_LOG_BLOCK_5 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_5, &__block_literal_global_22_0);
    v11 = CK_DEFAULT_LOG_INTERNAL_5;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_5, OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    *(_DWORD *)buf = 138412290;
    v16 = err;
    v12 = "Automatic first aid failed: %@";
  }
  _os_log_impl(&dword_20A95C000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0xCu);
LABEL_20:
  if (err)
    CFRelease(err);
  return v9;
}

uint64_t CKStreamCoderCreate(CCCryptorRef **a1, int a2, CFDataRef theData, const __CFData *a4, CFErrorRef *a5)
{
  uint64_t v10;
  uint64_t result;
  CCCryptorRef *v12;
  CCOperation v13;
  const UInt8 *BytePtr;
  size_t Length;
  uint64_t v16;
  CFErrorRef v17;
  CFErrorRef v18;
  CFErrorRef v19;
  uint64_t v20;
  uint64_t v21;

  if (a5)
    *a5 = 0;
  if (!theData || CFDataGetLength(theData) != 12)
  {
    v18 = CKErrorCreateWithFormat(6, CFSTR("Bad iv"));
    goto LABEL_13;
  }
  if (!a4 || CFDataGetLength(a4) != 32)
  {
    v18 = CKErrorCreateWithFormat(6, CFSTR("Bad key"));
    goto LABEL_13;
  }
  if ((a2 - 1) >= 2)
  {
    v18 = CKErrorCreateWithFormat(6, CFSTR("Bad mode"));
LABEL_13:
    v19 = v18;
    v12 = 0;
    if (!a5)
      goto LABEL_20;
LABEL_14:
    if (v19)
    {
      CFRetain(v19);
      *a5 = v19;
LABEL_21:
      CKBaseRelease(v19);
LABEL_22:
      v21 = 0;
      result = 0;
      if (!v12)
        return result;
      goto LABEL_23;
    }
LABEL_20:
    if (!v19)
      goto LABEL_22;
    goto LABEL_21;
  }
  v10 = CKTypeRegister(&CKStreamCoderGetTypeID_typeID);
  result = CKTypeCreateInstance_(0, v10, 0x28uLL);
  if (!result)
    return result;
  v12 = (CCCryptorRef *)result;
  v13 = a2 != 1;
  *(_DWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 32) = 0;
  BytePtr = CFDataGetBytePtr(a4);
  Length = CFDataGetLength(a4);
  v16 = CCCryptorCreateWithMode(v13, 0xBu, 0, 0, 0, BytePtr, Length, 0, 0, 0, 0, v12 + 3);
  if ((_DWORD)v16)
  {
    v17 = CKErrorCreateWithFormat(2, CFSTR("CCCryptorCreateWithMode %d"), v16);
    goto LABEL_19;
  }
  CFDataGetBytePtr(theData);
  CFDataGetLength(theData);
  v20 = CCCryptorGCMSetIV();
  if ((_DWORD)v20)
  {
    v17 = CKErrorCreateWithFormat(2, CFSTR("CCCryptorGCMSetIV %d"), v20);
LABEL_19:
    v19 = v17;
    if (!a5)
      goto LABEL_20;
    goto LABEL_14;
  }
  if (a1)
  {
    CFRetain(v12);
    *a1 = v12;
  }
  v21 = 1;
LABEL_23:
  CKBaseRelease(v12);
  return v21;
}

uint64_t CKStreamCoderUpdate(uint64_t a1, uint64_t a2, uint64_t a3, CFErrorRef *a4)
{
  int v7;
  uint64_t v8;
  CFErrorRef v9;
  CFErrorRef v10;

  if (a4)
    *a4 = 0;
  v7 = *(_DWORD *)(a1 + 16);
  if (v7 == 2)
  {
    v8 = MEMORY[0x20BD284F8](*(_QWORD *)(a1 + 24), a2, a3, a2);
    if ((_DWORD)v8)
      goto LABEL_6;
LABEL_10:
    *(_QWORD *)(a1 + 32) += a3;
    return 1;
  }
  if (v7 != 1)
    CKStreamCoderUpdate_cold_1();
  v8 = MEMORY[0x20BD28504](*(_QWORD *)(a1 + 24), a2, a3, a2);
  if (!(_DWORD)v8)
    goto LABEL_10;
LABEL_6:
  v9 = CKErrorCreateWithFormat(5, CFSTR("CCCryptorGCMDecrypt %d"), v8);
  v10 = v9;
  if (a4 && v9)
  {
    CFRetain(v9);
    *a4 = v10;
LABEL_12:
    CFRelease(v10);
    return 0;
  }
  if (v9)
    goto LABEL_12;
  return 0;
}

uint64_t CKStreamCoderFinish(uint64_t a1, const __CFData **a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  CFErrorRef v7;
  CFDataRef v8;
  uint64_t v9;
  const __CFData *v10;
  CFErrorRef v11;
  CFDataRef v12;
  uint64_t v14;
  UInt8 bytes[8];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    CKStreamCoderFinish_cold_1();
  if (!a3)
    CKStreamCoderFinish_cold_2();
  v5 = *(_DWORD *)(a1 + 16);
  if (v5 != 2)
  {
    if (v5 != 1)
      CKStreamCoderFinish_cold_3();
    *a3 = 0;
    *a2 = 0;
    *(_QWORD *)bytes = 0;
    v16 = 0;
    v6 = CCCryptorGCMFinalize();
    if ((_DWORD)v6)
    {
      v7 = CKErrorCreateWithFormat(5, CFSTR("CCCryptorGCMFinalize %d"), v6, *(_QWORD *)bytes, v16, v17);
    }
    else
    {
      v12 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], bytes, 16);
      if (v12)
      {
        v8 = v12;
        CFRetain(v12);
        *a2 = v8;
        v9 = 1;
        goto LABEL_16;
      }
      v7 = CKErrorCreateWithFormat(2, CFSTR("_CKStreamCoderFinishEncrypt"), v14, *(_QWORD *)bytes, v16, v17);
    }
    v8 = v7;
    if (v7)
    {
      CFRetain(v7);
      v9 = 0;
      *a3 = (uint64_t)v8;
LABEL_16:
      CFRelease(v8);
      return v9;
    }
    return 0;
  }
  v10 = *a2;
  if (!*a2)
    CKStreamCoderFinish_cold_4();
  *a3 = 0;
  CFDataGetBytePtr(v10);
  CFDataGetLength(v10);
  if (!CCCryptorGCMFinalize())
    return 1;
  v11 = CKErrorCreateWithFormat(5, CFSTR("Tag failure on decrypt"));
  v9 = (uint64_t)v11;
  if (v11)
  {
    CFRetain(v11);
    *a3 = v9;
    CFRelease((CFTypeRef)v9);
    return 0;
  }
  return v9;
}

_CCCryptor *_CKStreamCoderCFFinalize(uint64_t a1)
{
  _CCCryptor *result;

  result = *(_CCCryptor **)(a1 + 24);
  if (result)
  {
    result = (_CCCryptor *)CCCryptorRelease(result);
    *(_QWORD *)(a1 + 24) = 0;
  }
  return result;
}

BOOL _CKStreamCoderCFEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

CFStringRef _CKStreamCoderCFCopyFormatDescription(uint64_t a1)
{
  const char *v1;
  int v2;

  v1 = "unknown";
  v2 = *(_DWORD *)(a1 + 16);
  if (v2 == 2)
    v1 = "decrypt";
  if (v2 == 1)
    v1 = "encrypt";
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("stream %s coder"), v1);
}

CFStringRef _CKStreamCoderCFCopyDebugDescription(uint64_t a1)
{
  const char *v1;
  int v2;

  v1 = "unknown";
  v2 = *(_DWORD *)(a1 + 16);
  if (v2 == 2)
    v1 = "decrypt";
  if (v2 == 1)
    v1 = "encrypt";
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("stream %s coder"), v1);
}

_QWORD *CSrabin_init()
{
  _DWORD *v0;
  _QWORD *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  pthread_once(&CSrabin_init_once, compute_ringing);
  v0 = malloc_type_malloc(0x1028uLL, 0x1010040AF70EBD3uLL);
  v1 = v0;
  if (v0)
  {
    v0[1026] = 48;
    v2 = malloc_type_malloc(0x30uLL, 0x9ED84CB6uLL);
    v1[515] = v2;
    if (v2)
    {
      v3 = v2;
      v1[516] = 0xB15E234BD3792F63;
      memcpy(v1, old_ringing, 0x800uLL);
      memcpy(v1 + 256, new_ringing, 0x800uLL);
      v1[512] = 0;
      v1[514] = v3;
      if (*((int *)v1 + 1026) >= 1)
      {
        v4 = 0;
        do
          *(_BYTE *)(v1[515] + v4++) = 0;
        while (v4 < *((int *)v1 + 1026));
      }
    }
    else
    {
      free(v1);
      return 0;
    }
  }
  return v1;
}

uint64_t CSrabin_reset(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(result + 4096) = 0;
  *(_QWORD *)(result + 4112) = *(_QWORD *)(result + 4120);
  if (*(int *)(result + 4104) >= 1)
  {
    v1 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(result + 4120) + v1++) = 0;
    while (v1 < *(int *)(result + 4104));
  }
  return result;
}

uint64_t CSrabin_slide8(uint64_t a1, unsigned int a2)
{
  _BYTE *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = *(_BYTE **)(a1 + 4112);
  v3 = *v2;
  *v2 = a2;
  v4 = *(_QWORD *)(a1 + 4112) - 1;
  *(_QWORD *)(a1 + 4112) = v4;
  if (v4 < *(_QWORD *)(a1 + 4120))
    *(_QWORD *)(a1 + 4112) = v4 + *(int *)(a1 + 4104);
  v5 = (*(_QWORD *)(a1 + 8 * (*(_QWORD *)(a1 + 4096) >> 55) + 2048) ^ (a2 | (*(_QWORD *)(a1 + 4096) << 8)) ^ *(_QWORD *)(a1 + 8 * v3)) & 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 4096) = v5;
  return v5;
}

void CSrabin_free(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    v2 = (void *)a1[515];
    if (v2)
      free(v2);
    free(a1);
  }
}

void compute_ringing()
{
  unint64_t i;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t j;
  unint64_t v5;
  int v6;
  uint64_t v7;

  for (i = 0; i != 256; ++i)
  {
    v1 = 384;
    v2 = i;
    do
    {
      v3 = 2 * v2;
      v2 = (2 * v2) ^ 0xB15E234BD3792F63;
      if (v3 >= 0)
        v2 = v3;
      --v1;
    }
    while (v1);
    old_ringing[i] = v2;
  }
  for (j = 0; j != 256; ++j)
  {
    v5 = j << 55;
    v6 = 8;
    do
    {
      v7 = 2 * v5;
      v5 = (2 * v5) ^ 0xB15E234BD3792F63;
      if (v7 >= 0)
        v5 = v7;
      --v6;
    }
    while (v6);
    new_ringing[j] = v5;
  }
}

BOOL CKChunkCoderCreate(uint64_t *a1, int a2, const void *a3, _BYTE *a4, unsigned __int8 *a5, unsigned int a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t Instance;
  uint64_t v16;
  int v17;
  _BOOL8 v18;
  int v19;

  v14 = CKTypeRegister(&CKChunkCoderGetTypeID_typeID);
  Instance = CKTypeCreateInstance_(0, v14, 0x48uLL);
  if (Instance)
  {
    v16 = Instance;
    *(_DWORD *)(Instance + 16) = a2;
    *(_QWORD *)(Instance + 48) = 0;
    *(_QWORD *)(Instance + 56) = a6;
    *(_QWORD *)(Instance + 64) = a7;
    if (CKChunkDigestResultsCreate((_QWORD *)(Instance + 40), a4, a5, a6))
    {
      v17 = *(_DWORD *)(v16 + 16);
      if (v17 == 3)
      {
        if (a6 != (_DWORD)a7)
          goto LABEL_5;
      }
      else if (!CKChunkCryptorCreate((_QWORD *)(v16 + 24), v17 == 1, *(const void **)(v16 + 40), a7))
      {
        goto LABEL_5;
      }
      v19 = CKChunkSignatureGeneratorCreate((_QWORD *)(v16 + 32), a3);
      v18 = v19 != 0;
      if (a1 && v19)
      {
        CFRetain((CFTypeRef)v16);
        *a1 = v16;
        v18 = 1;
      }
      goto LABEL_11;
    }
LABEL_5:
    v18 = 0;
LABEL_11:
    CKBaseRelease((CFTypeRef)v16);
    return v18;
  }
  return 0;
}

uint64_t CKChunkCoderUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 16);
  if (v5 == 3)
  {
LABEL_10:
    result = CKChunkSignatureGeneratorUpdate(*(_QWORD *)(a1 + 32));
    if (!(_DWORD)result)
      return result;
    goto LABEL_11;
  }
  if (v5 == 2)
  {
    v8 = *(_QWORD *)(a1 + 24);
    if (v8)
    {
      result = CKChunkCryptorUpdate(v8);
      if (!(_DWORD)result)
        return result;
    }
    goto LABEL_10;
  }
  if (v5 != 1)
    CKChunkCoderUpdate_cold_1();
  result = CKChunkSignatureGeneratorUpdate(*(_QWORD *)(a1 + 32));
  if ((_DWORD)result)
  {
    v7 = *(_QWORD *)(a1 + 24);
    if (!v7 || (result = CKChunkCryptorUpdate(v7), (_DWORD)result))
    {
LABEL_11:
      *(_QWORD *)(a1 + 48) += a3;
      return 1;
    }
  }
  return result;
}

uint64_t CKChunkCoderFinish(_QWORD *a1)
{
  int v2;
  const void *v3;
  uint64_t v4;
  CFStringRef v5;
  NSObject *v6;
  uint8_t buf[4];
  CFStringRef v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = CKChunkSignatureGeneratorFinish(a1[4]);
  v3 = (const void *)a1[4];
  if (v3)
    CKBaseRelease(v3);
  a1[4] = 0;
  if (!v2)
    return 0;
  if (!CKChunkDigestResultsSignatureAndKeyEqual(a1[5], 0))
  {
    if (CK_DEFAULT_LOG_BLOCK_6 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_6, &__block_literal_global_7);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_6, OS_LOG_TYPE_DEBUG))
      return 0;
    v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Chunk digest results differ\n"));
    if (CK_DEFAULT_LOG_BLOCK_6 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_6, &__block_literal_global_7_1);
    v6 = CK_DEFAULT_LOG_INTERNAL_6;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_6, OS_LOG_TYPE_DEBUG))
      goto LABEL_24;
    *(_DWORD *)buf = 138543362;
    v9 = v5;
LABEL_23:
    _os_log_impl(&dword_20A95C000, v6, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
LABEL_24:
    if (!v5)
      return (uint64_t)v5;
    CFRelease(v5);
    return 0;
  }
  v4 = a1[3];
  if (v4 && !CKChunkCryptorFinish(v4))
    return 0;
  if (a1[6] != a1[8])
  {
    if (CK_DEFAULT_LOG_BLOCK_6 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_6, &__block_literal_global_10_1);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_6, OS_LOG_TYPE_DEBUG))
      return 0;
    v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Not enough bytes tranversed coder\n"));
    if (CK_DEFAULT_LOG_BLOCK_6 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_6, &__block_literal_global_15_1);
    v6 = CK_DEFAULT_LOG_INTERNAL_6;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_6, OS_LOG_TYPE_DEBUG))
      goto LABEL_24;
    *(_DWORD *)buf = 138543362;
    v9 = v5;
    goto LABEL_23;
  }
  return 1;
}

void _CKChunkCoderCFFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[3];
  if (v2)
    CKBaseRelease(v2);
  a1[3] = 0;
  v3 = (const void *)a1[4];
  if (v3)
    CKBaseRelease(v3);
  a1[4] = 0;
  v4 = (const void *)a1[5];
  if (v4)
    CKBaseRelease(v4);
  a1[5] = 0;
}

BOOL _CKChunkCoderCFEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

CFStringRef _CKChunkCoderCFCopyFormatDescription(uint64_t a1)
{
  unsigned int v1;
  const char *v2;
  CFStringRef v3;
  CFStringRef v4;

  v1 = *(_DWORD *)(a1 + 16) - 1;
  if (v1 > 2)
    v2 = "unknown";
  else
    v2 = off_24C34D718[v1];
  v3 = CFCopyDescription(*(CFTypeRef *)(a1 + 40));
  v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("chunk %s coder expected %@ "), v2, v3);
  if (v3)
    CFRelease(v3);
  return v4;
}

uint64_t CSCopyData(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4)
{
  int64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  ssize_t v11;
  ssize_t v12;
  ssize_t v13;
  ssize_t v14;
  const __CFAllocator *v15;
  uint64_t v16;
  int *v17;
  char *v18;
  CFStringRef v19;
  NSObject *v20;
  const __CFAllocator *v21;
  uint64_t v22;
  int *v23;
  char *v24;
  uint8_t buf[4];
  CFStringRef v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (a3 >= a4)
    v7 = a4;
  else
    v7 = a3;
  v8 = malloc_type_malloc(v7, 0x6D3E1D69uLL);
  if (!v8)
    return -1;
  v9 = v8;
  if (a3 < 1)
  {
    v10 = 0;
    goto LABEL_41;
  }
  v10 = 0;
  while (1)
  {
    v11 = read(a1, v9, v7);
    if (v7 != v11)
    {
      v14 = v11;
      if (CK_DEFAULT_LOG_BLOCK_7 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_8);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      {
        v15 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v16 = *__error();
        v17 = __error();
        v18 = strerror(*v17);
        v19 = CFStringCreateWithFormat(v15, 0, CFSTR("read failed (read %ld bytes of requested %lld bytes) for fd:%d : %d (%s)\n"), v14, v7, a1, v16, v18);
        if (CK_DEFAULT_LOG_BLOCK_7 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_5_4);
        v20 = CK_DEFAULT_LOG_INTERNAL_7;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          v27 = v19;
          goto LABEL_38;
        }
        goto LABEL_39;
      }
      goto LABEL_41;
    }
    if ((_DWORD)a2 == -1)
      goto LABEL_11;
    v12 = write(a2, v9, v7);
    if (v12 < 0)
      break;
    v13 = v12;
    if (v7 != v12)
    {
      if (CK_DEFAULT_LOG_BLOCK_7 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_16_0);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      {
        v19 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("write failed for fd:%d, %lld != %lld"), a2, v13, v7);
        if (CK_DEFAULT_LOG_BLOCK_7 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_21_2);
        v20 = CK_DEFAULT_LOG_INTERNAL_7;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          v27 = v19;
LABEL_38:
          _os_log_impl(&dword_20A95C000, v20, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        goto LABEL_39;
      }
      goto LABEL_41;
    }
LABEL_11:
    v10 += v7;
    if (a3 - v10 < v7)
      v7 = a3 - v10;
    if (a3 <= v10)
      goto LABEL_41;
  }
  if (CK_DEFAULT_LOG_BLOCK_7 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_8_1);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
  {
    v21 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v22 = *__error();
    v23 = __error();
    v24 = strerror(*v23);
    v19 = CFStringCreateWithFormat(v21, 0, CFSTR("write failed for fd:%d, %d (%s)"), a2, v22, v24);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_13_1);
    v20 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v27 = v19;
      goto LABEL_38;
    }
LABEL_39:
    if (v19)
      CFRelease(v19);
  }
LABEL_41:
  free(v9);
  return v10;
}

uint64_t idIsNull(_BYTE *a1)
{
  _BOOL8 v2;
  uint64_t v3;

  if ((int)CKSchemeAndSignatureSize(a1) < 2)
    return 1;
  v3 = 1;
  do
  {
    v2 = a1[v3] == 0;
    if (a1[v3])
      break;
    ++v3;
  }
  while (v3 < (int)CKSchemeAndSignatureSize(a1));
  return v2;
}

uint64_t CShex_to_string(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _BYTE *v4;
  char v5;

  if (!a1)
    return 0;
  for (i = 0; a2; --a2)
  {
    v4 = (_BYTE *)(a3 + i);
    *v4 = CShex_to_string_hex[(unint64_t)*a1 >> 4];
    v5 = *a1++;
    i += 2;
    v4[1] = CShex_to_string_hex[v5 & 0xF];
  }
  *(_BYTE *)(a3 + i) = 0;
  return a3;
}

uint64_t ck_buffer_create_with_hex_string(char *__s, _QWORD *a2, _QWORD *a3)
{
  size_t v6;
  uint64_t result;
  int v8;
  int v9;
  char *v10;
  _BYTE *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;

  if (a2)
    *a2 = 0;
  if (a3)
    *a3 = 0;
  if (!__s)
    return 0;
  v6 = strlen(__s);
  result = 0;
  if (v6)
  {
    if ((v6 & 1) == 0)
    {
      result = (uint64_t)malloc_type_malloc(v6 >> 1, 0x494CFE4AuLL);
      if (result)
      {
        v8 = *__s;
        if (*__s)
        {
          v9 = 0;
          v10 = __s + 2;
          v11 = (_BYTE *)result;
          do
          {
            v12 = v8 - 48;
            v13 = (v8 - 48);
            v14 = (v8 - 97);
            if ((v8 - 65) < 6u)
              v9 = v8 - 55;
            v15 = v8 - 87;
            if (v14 <= 5)
              v9 = v15;
            if (v13 < 0xA)
              v9 = v12;
            v16 = 16 * v9;
            v17 = *(v10 - 1);
            v18 = v17 - 48;
            v19 = v17 - 97;
            if ((v17 - 65) <= 5)
              v20 = (v17 - 55) | v16;
            else
              v20 = v16;
            v21 = (v17 - 87) | v16;
            if (v19 > 5)
              v21 = v20;
            v9 = v18 | v16;
            if (v18 > 9)
              v9 = v21;
            *v11++ = v9;
            v22 = *v10;
            v10 += 2;
            v8 = v22;
          }
          while (v22);
        }
        if (a2)
          *a2 = result;
        if (a3)
          *a3 = (v6 >> 1);
        return 1;
      }
    }
  }
  return result;
}

CFDataRef ck_cfdata_create_with_hexstring(char *a1)
{
  int v1;
  CFDataRef result;
  BOOL v3;
  CFIndex v4;
  const UInt8 *v5;

  v4 = 0;
  v5 = 0;
  v1 = ck_buffer_create_with_hex_string(a1, &v5, &v4);
  result = 0;
  if (v1)
  {
    if (v5)
      v3 = v4 == 0;
    else
      v3 = 1;
    if (!v3)
      return CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v5, v4, (CFAllocatorRef)*MEMORY[0x24BDBD248]);
  }
  return result;
}

CFStringRef ck_cfstring_create_hex_with_data(const __CFData *a1)
{
  CFIndex Length;
  CFStringRef result;
  const char *v4;
  char *BytePtr;
  size_t v6;

  Length = CFDataGetLength(a1);
  result = (CFStringRef)malloc_type_malloc((2 * Length) | 1, 0xBE1BFCEuLL);
  if (result)
  {
    v4 = (const char *)result;
    BytePtr = (char *)CFDataGetBytePtr(a1);
    CShex_to_string(BytePtr, Length, (uint64_t)v4);
    v6 = strlen(v4);
    return CFStringCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UInt8 *)v4, v6, 0x600u, 0, (CFAllocatorRef)*MEMORY[0x24BDBD248]);
  }
  return result;
}

void *createPathFromUrl(const __CFURL *a1)
{
  void *v2;

  if (!a1)
    return 0;
  v2 = malloc_type_malloc(0x400uLL, 0xFDBA7550uLL);
  if (v2 && !CFURLGetFileSystemRepresentation(a1, 1u, (UInt8 *)v2, 1024))
  {
    free(v2);
    return 0;
  }
  return v2;
}

void printUUID(uint64_t a1)
{
  uint64_t v1;

  v1 = a1;
  printNbytes((uint64_t)&v1, 16);
}

void printNbytes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  CFStringRef v6;
  NSObject *v7;
  uint8_t buf[4];
  CFStringRef v9;
  char v10[1025];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  bzero(v10, 0x401uLL);
  if (a2)
  {
    v4 = 0;
    v5 = v10;
    do
    {
      if (v4 == 512)
        break;
      sprintf(v5, "%02x", *(unsigned __int8 *)(a1 + v4++));
      v5 += 2;
    }
    while (a2 != v4);
  }
  if (CK_DEFAULT_LOG_BLOCK_7 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_24_0);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
  {
    v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("%s\n"), v10);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_28_0);
    v7 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      v9 = v6;
      _os_log_impl(&dword_20A95C000, v7, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v6)
      CFRelease(v6);
  }
}

os_log_t __printNbytes_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printNbytes_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

void printSignature(unsigned __int8 *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  void *v5;
  int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  CFStringRef v12;
  NSObject *v13;
  void *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  void *v17;
  _BYTE *v18;
  char v19;
  CFStringRef v20;
  NSObject *v21;
  uint8_t buf[4];
  CFStringRef v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v2 = CKSchemeAndSignatureSize(a1);
  v3 = (2 * v2) | 1;
  v4 = (char *)malloc_type_malloc(v3, 0xB73937BFuLL);
  if (v4)
  {
    v5 = v4;
    v6 = (char)*a1;
    v7 = 0;
    if (v2)
    {
      v8 = (char *)a1;
      v9 = v2;
      do
      {
        v10 = &v4[v7];
        *v10 = CShex_to_string_hex[(unint64_t)*v8 >> 4];
        v11 = *v8++;
        v7 += 2;
        v10[1] = CShex_to_string_hex[v11 & 0xF];
        --v9;
      }
      while (v9);
    }
    v4[v7] = 0;
    if (v6 < 0)
    {
      v15 = &a1[v2];
      v16 = CKSchemeAndEncryptionKeySize(v15);
      v17 = malloc_type_malloc(v3, 0x5DE3CB9AuLL);
      if (!v17)
        return;
      v14 = v17;
      v18 = v17;
      if (v16)
      {
        v18 = v17;
        do
        {
          *v18 = CShex_to_string_hex[(unint64_t)*v15 >> 4];
          v19 = *v15++;
          v18[1] = CShex_to_string_hex[v19 & 0xF];
          v18 += 2;
          --v16;
        }
        while (v16);
      }
      *v18 = 0;
      if (CK_DEFAULT_LOG_BLOCK_7 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_30_1);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
      {
        v20 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("signature:%s, key:%s\n"), v5, v14);
        if (CK_DEFAULT_LOG_BLOCK_7 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_34);
        v21 = CK_DEFAULT_LOG_INTERNAL_7;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543362;
          v23 = v20;
          _os_log_impl(&dword_20A95C000, v21, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
        }
        if (v20)
          CFRelease(v20);
      }
      free(v5);
    }
    else
    {
      if (CK_DEFAULT_LOG_BLOCK_7 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_37_1);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
      {
        v12 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("signature:%s\n"), v5);
        if (CK_DEFAULT_LOG_BLOCK_7 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_42);
        v13 = CK_DEFAULT_LOG_INTERNAL_7;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543362;
          v23 = v12;
          _os_log_impl(&dword_20A95C000, v13, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
        }
        if (v12)
          CFRelease(v12);
      }
      v14 = v5;
    }
    free(v14);
  }
}

os_log_t __printSignature_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printSignature_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printSignature_block_invoke_35()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printSignature_block_invoke_2_40()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

void printChunk(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  char *v16;
  CFStringRef v17;
  NSObject *v18;
  uint8_t buf[4];
  CFStringRef v20;
  char __str[2048];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  bzero(__str, 0x800uLL);
  v11 = CKSchemeAndSignatureSize((_BYTE *)(a1 + 12));
  if (v11 <= 1)
    v12 = 1;
  else
    v12 = v11;
  v13 = malloc_type_calloc((2 * v12) | 1, 1uLL, 0x79B5AE2BuLL);
  v14 = 0;
  v15 = v13;
  do
  {
    *v15 = CShex_to_string_hex[(unint64_t)*(unsigned __int8 *)(a1 + v14 + 12) >> 4];
    v15[1] = CShex_to_string_hex[*(_BYTE *)(a1 + v14++ + 12) & 0xF];
    v15 += 2;
  }
  while (v12 != v14);
  *v15 = 0;
  if (a2)
    vsnprintf(__str, 0x800uLL, a2, &a9);
  if (CK_DEFAULT_LOG_BLOCK_7 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_44_1);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
  {
    v16 = __str;
    if (!a2)
      v16 = (char *)&unk_20A9A57CA;
    v17 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("%soffset: %llu, length: %u, signature: %s\n"), v16, *(_QWORD *)a1, *(unsigned int *)(a1 + 8), v13);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_49);
    v18 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v20 = v17;
      _os_log_impl(&dword_20A95C000, v18, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v17)
      CFRelease(v17);
  }
  free(v13);
}

os_log_t __printChunk_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printChunk_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

void printChunkReference(uint64_t a1)
{
  _BOOL4 v2;
  CFAllocatorRef *v3;
  CFStringRef v4;
  NSObject *v5;
  CFStringRef v6;
  NSObject *v7;
  CFStringRef v8;
  NSObject *v9;
  uint8_t buf[4];
  CFStringRef v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (CK_DEFAULT_LOG_BLOCK_7 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_51_0);
  v2 = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR);
  v3 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
  if (v2)
  {
    v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("\tChunkReference at %p:\n"), a1);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_55_2);
    v5 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v11 = v4;
      _os_log_impl(&dword_20A95C000, v5, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v4)
      CFRelease(v4);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_58);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
  {
    v6 = CFStringCreateWithFormat(*v3, 0, CFSTR("\tChunkReference token %llu:\n"), *(_QWORD *)a1);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_63_1);
    v7 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v11 = v6;
      _os_log_impl(&dword_20A95C000, v7, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v6)
      CFRelease(v6);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_66);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
  {
    v8 = CFStringCreateWithFormat(*v3, 0, CFSTR("\tChunkReference length %u:\n"), *(unsigned int *)(a1 + 8));
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_71);
    v9 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v11 = v8;
      _os_log_impl(&dword_20A95C000, v9, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v8)
      CFRelease(v8);
  }
}

os_log_t __printChunkReference_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printChunkReference_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printChunkReference_block_invoke_56()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printChunkReference_block_invoke_2_61()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printChunkReference_block_invoke_64()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printChunkReference_block_invoke_2_69()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

void printStoredChunk(unsigned int *a1)
{
  _BOOL4 v2;
  CFAllocatorRef *v3;
  CFStringRef v4;
  NSObject *v5;
  CFStringRef v6;
  NSObject *v7;
  CFStringRef v8;
  NSObject *v9;
  CFStringRef v10;
  NSObject *v11;
  CFStringRef v12;
  NSObject *v13;
  CFStringRef v14;
  NSObject *v15;
  CFStringRef v16;
  NSObject *v17;
  CFStringRef v18;
  NSObject *v19;
  CFStringRef v20;
  NSObject *v21;
  CFStringRef v22;
  NSObject *v23;
  uint8_t buf[4];
  CFStringRef v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (CK_DEFAULT_LOG_BLOCK_7 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_73);
  v2 = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR);
  v3 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
  if (v2)
  {
    v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("\tStoredChunk at %p:\n\tStoredChunk "), a1);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_77);
    v5 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v25 = v4;
      _os_log_impl(&dword_20A95C000, v5, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v4)
      CFRelease(v4);
  }
  printSignature((unsigned __int8 *)a1 + 56);
  if (CK_DEFAULT_LOG_BLOCK_7 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_80_0);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
  {
    v6 = CFStringCreateWithFormat(*v3, 0, CFSTR("\tStoredChunk volume info: "));
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_85);
    v7 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v25 = v6;
      _os_log_impl(&dword_20A95C000, v7, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v6)
      CFRelease(v6);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_88);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
  {
    v8 = CFStringCreateWithFormat(*v3, 0, CFSTR("\tStoredChunk device: %d\n"), *a1);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_93_0);
    v9 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v25 = v8;
      _os_log_impl(&dword_20A95C000, v9, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v8)
      CFRelease(v8);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_96);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
  {
    v10 = CFStringCreateWithFormat(*v3, 0, CFSTR("\tStoredChunk inode: %lld\n"), *(_QWORD *)(a1 + 1));
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_101_0);
    v11 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v25 = v10;
      _os_log_impl(&dword_20A95C000, v11, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v10)
      CFRelease(v10);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_104);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
  {
    v12 = CFStringCreateWithFormat(*v3, 0, CFSTR("\tStoredChunk stgPath: 0x%08x\n"), a1[3]);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_109);
    v13 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v25 = v12;
      _os_log_impl(&dword_20A95C000, v13, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v12)
      CFRelease(v12);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_112);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
  {
    v14 = CFStringCreateWithFormat(*v3, 0, CFSTR("\tStoredChunk token: %lld\n"), *((_QWORD *)a1 + 2));
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_117_0);
    v15 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v25 = v14;
      _os_log_impl(&dword_20A95C000, v15, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v14)
      CFRelease(v14);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_120_0);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
  {
    v16 = CFStringCreateWithFormat(*v3, 0, CFSTR("\tStoredChunk offset: %lld\n"), *((_QWORD *)a1 + 3));
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_125);
    v17 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v25 = v16;
      _os_log_impl(&dword_20A95C000, v17, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v16)
      CFRelease(v16);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_128);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
  {
    v18 = CFStringCreateWithFormat(*v3, 0, CFSTR("\tStoredChunk length: %d\n"), a1[10]);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_133);
    v19 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v25 = v18;
      _os_log_impl(&dword_20A95C000, v19, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v18)
      CFRelease(v18);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_136);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
  {
    v20 = CFStringCreateWithFormat(*v3, 0, CFSTR("\tStoredChunk location: %c\n"), *((char *)a1 + 52));
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_141);
    v21 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v25 = v20;
      _os_log_impl(&dword_20A95C000, v21, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v20)
      CFRelease(v20);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_144_0);
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
  {
    v22 = CFStringCreateWithFormat(*v3, 0, CFSTR("\tStoredChunk data: "));
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_149_0);
    v23 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v25 = v22;
      _os_log_impl(&dword_20A95C000, v23, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v22)
      CFRelease(v22);
  }
}

os_log_t __printStoredChunk_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_78()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_2_83()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_86()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_2_91()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_94()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_2_99()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_102()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_2_107()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_110()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_2_115()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_118()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_2_123()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_126()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_2_131()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_134()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_2_139()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_142()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printStoredChunk_block_invoke_2_147()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

void printSourceChunk(unsigned int *a1)
{
  CFStringRef v2;
  NSObject *v3;
  CFStringRef v4;
  NSObject *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint8_t buf[4];
  CFStringRef v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  printSignature((unsigned __int8 *)a1 + 84);
  if (*((_QWORD *)a1 + 1))
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_158_0);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
    {
      v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("itemID:%lld\n"), *(_QWORD *)a1);
      if (CK_DEFAULT_LOG_BLOCK_7 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_163);
      v3 = CK_DEFAULT_LOG_INTERNAL_7;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
        goto LABEL_17;
      *(_DWORD *)buf = 138543362;
      v10 = v2;
LABEL_16:
      _os_log_impl(&dword_20A95C000, v3, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
LABEL_17:
      if (v2)
        CFRelease(v2);
      if (CK_DEFAULT_LOG_BLOCK_7 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_166_0);
    }
  }
  else
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_151);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
    {
      v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("fd:%d, slot_sz:%u\n"), *a1, a1[1]);
      if (CK_DEFAULT_LOG_BLOCK_7 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_155);
      v3 = CK_DEFAULT_LOG_INTERNAL_7;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
        goto LABEL_17;
      *(_DWORD *)buf = 138543362;
      v10 = v2;
      goto LABEL_16;
    }
  }
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
  {
    v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("offset:0x%llx, size:0x%x(%u), sequence:%llu, stored:%u, retain:%u\n"), *((_QWORD *)a1 + 9), a1[20], a1[20], *((_QWORD *)a1 + 2), *((unsigned __int8 *)a1 + 24), *((unsigned __int8 *)a1 + 25));
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_171);
    v5 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      v10 = v4;
      _os_log_impl(&dword_20A95C000, v5, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v4)
      CFRelease(v4);
  }
  v6 = *((_QWORD *)a1 + 1);
  if (v6)
  {
    v7 = a1[20];
    if (v7 >= 0x14)
      v8 = 20;
    else
      v8 = v7;
    printNbytes(v6, v8);
  }
}

os_log_t __printSourceChunk_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printSourceChunk_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printSourceChunk_block_invoke_156()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printSourceChunk_block_invoke_2_161()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printSourceChunk_block_invoke_164()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printSourceChunk_block_invoke_2_169()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

void printRegisteredChunk(uint64_t a1)
{
  CFStringRef v2;
  NSObject *v3;
  uint8_t buf[4];
  CFStringRef v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (CK_DEFAULT_LOG_BLOCK_7 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_173);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
  {
    v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("RegisteredChunk: itemID:%lld, offset:0x%llx, size:0x%x(%u), location:%c\n"), *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned int *)(a1 + 24), *(unsigned int *)(a1 + 24), *(char *)(a1 + 28));
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_177_0);
    v3 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      v5 = v2;
      _os_log_impl(&dword_20A95C000, v3, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v2)
      CFRelease(v2);
  }
  printSignature((unsigned __int8 *)(a1 + 35));
}

os_log_t __printRegisteredChunk_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __printRegisteredChunk_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

void printRegisteredChunkList(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v3 = a1;
  v4 = CKRegisteredChunkSize(a1);
  if (a2)
  {
    v5 = v4;
    do
    {
      printRegisteredChunk(v3);
      printNbytes(v3, v5);
      v3 += v5;
      --a2;
    }
    while (a2);
  }
}

uint64_t CKRegisteredChunkSize(uint64_t result)
{
  uint64_t v1;
  _BYTE *v2;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (result)
  {
    v1 = result;
    v2 = (_BYTE *)(result + 35);
    v3 = CKSignatureAndKeySize(result + 35);
    if (v3)
      v4 = v3 + 36;
    else
      v4 = 0;
    LODWORD(v5) = *(unsigned __int8 *)(v1 + 29);
    if (*(_BYTE *)(v1 + 29))
    {
      v5 = *(unsigned __int8 *)(v1 + (v3 + 1) + 35);
      if (*(_BYTE *)(v1 + (v3 + 1) + 35))
      {
        v6 = vcvtps_u32_f32((float)*(unsigned int *)(v1 + 24) / (float)(unint64_t)(v5 << 10));
        if (v6 && (v7 = CKChunkSchemeSignatureAndKeySize(v2)) != 0)
          LODWORD(v5) = CKChunkSchemeAndSignatureSize(&v2[v7 + 1]) * v6 + 1;
        else
          LODWORD(v5) = 0;
      }
    }
    return (v5 + v4);
  }
  return result;
}

CFNumberRef ck_copy_cfnumber_from_cftype_using_description(uint64_t a1, const __CFString *a2, CFTypeRef cf)
{
  CFTypeID TypeID;
  CFNumberRef NumberFromString;
  CFTypeID v8;
  CFTypeID v9;
  const __CFLocale *v10;
  const __CFLocale *v11;
  const __CFAllocator *v12;
  __CFNumberFormatter *v13;
  CFStringRef v14;
  NSObject *v15;
  CFStringRef v16;
  CFTypeID v17;
  CFStringRef v18;
  CFStringRef v19;
  NSObject *v20;
  uint8_t valuePtr[24];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    goto LABEL_31;
  TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a2))
  {
    CFRetain(a2);
    return (CFNumberRef)a2;
  }
  v8 = CFBooleanGetTypeID();
  if (v8 == CFGetTypeID(a2))
  {
    *(_QWORD *)valuePtr = CFBooleanGetValue((CFBooleanRef)a2);
    return CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberCFIndexType, valuePtr);
  }
  v9 = CFStringGetTypeID();
  if (v9 != CFGetTypeID(a2))
  {
    v17 = CFGetTypeID(a2);
    v18 = CFCopyTypeIDDescription(v17);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_188_0);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      v19 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Unable to recognized type id '%@' for BOOLean decoding for key '%@'."), v18, a1);
      if (CK_DEFAULT_LOG_BLOCK_7 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_193);
      v20 = CK_DEFAULT_LOG_INTERNAL_7;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)valuePtr = 138543362;
        *(_QWORD *)&valuePtr[4] = v19;
        _os_log_impl(&dword_20A95C000, v20, OS_LOG_TYPE_ERROR, "%{public}@", valuePtr, 0xCu);
      }
      if (v19)
        CFRelease(v19);
    }
    if (!v18)
      goto LABEL_31;
    v16 = v18;
LABEL_30:
    CFRelease(v16);
LABEL_31:
    if (!cf)
      return 0;
    CFRetain(cf);
    return (CFNumberRef)cf;
  }
  v10 = CFLocaleCreate(0, CFSTR("en_US"));
  if (!v10
    || (v11 = v10,
        v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240],
        v13 = CFNumberFormatterCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v10, kCFNumberFormatterNoStyle),
        CFRelease(v11),
        !v13)
    || (NumberFromString = CFNumberFormatterCreateNumberFromString(v12, v13, a2, 0, 1uLL),
        CFRelease(v13),
        !NumberFromString))
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_181);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      goto LABEL_31;
    v14 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Option %@ had CFStringRef \"%@\" but couldn't parse as a number."), a1, a2);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_185);
    v15 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)valuePtr = 138543362;
      *(_QWORD *)&valuePtr[4] = v14;
      _os_log_impl(&dword_20A95C000, v15, OS_LOG_TYPE_ERROR, "%{public}@", valuePtr, 0xCu);
    }
    if (!v14)
      goto LABEL_31;
    v16 = v14;
    goto LABEL_30;
  }
  return NumberFromString;
}

os_log_t __ck_copy_cfnumber_from_cftype_using_description_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __ck_copy_cfnumber_from_cftype_using_description_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __ck_copy_cfnumber_from_cftype_using_description_block_invoke_186()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __ck_copy_cfnumber_from_cftype_using_description_block_invoke_2_191()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

uint64_t ck_get_int32_from_cftype_using_description(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  const __CFNumber *v4;
  const __CFNumber *v5;
  unsigned int valuePtr;

  v4 = ck_copy_cfnumber_from_cftype_using_description(a1, a2, 0);
  if (v4)
  {
    v5 = v4;
    valuePtr = 0;
    if (!CFNumberGetValue(v4, kCFNumberSInt32Type, &valuePtr))
      valuePtr = a3;
    CFRelease(v5);
    return valuePtr;
  }
  return a3;
}

uint64_t CKEncryptData(const void *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  int v8;
  CFTypeRef v9;
  int v10;
  CFTypeRef cf;

  v4 = 0;
  cf = 0;
  if (!a4 || !a1 || !a2 || !(_DWORD)a3)
    return v4;
  v8 = CKCalculateChunkSignatureAndEncryptionKey(a2, a3, a1, &cf);
  v9 = cf;
  if (!v8 || (v10 = doEncrypt(a2, a3, cf, a3), v9 = cf, !v10))
  {
    v4 = 0;
    if (!v9)
      return v4;
LABEL_12:
    CFRelease(v9);
    return v4;
  }
  if (cf)
  {
    CFRetain(cf);
    v9 = cf;
  }
  *a4 = v9;
  v4 = 1;
  if (v9)
    goto LABEL_12;
  return v4;
}

uint64_t CKCalculateChunkSignatureAndEncryptionKey(uint64_t a1, uint64_t a2, const void *a3, _QWORD *a4)
{
  uint64_t v5;
  CFTypeRef v7;

  v7 = 0;
  if (a4)
    *a4 = 0;
  if (CKChunkSignatureGeneratorCreate(&v7, a3)
    && (CKChunkSignatureGeneratorUpdate((uint64_t)v7), CKChunkSignatureGeneratorFinish((uint64_t)v7)))
  {
    if (v7)
      CKBaseRelease(v7);
    v7 = 0;
    if (!a4)
      return 1;
    CKBaseRetain(0);
    *a4 = 0;
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  if (v7)
    CKBaseRelease(v7);
  return v5;
}

BOOL CKDecryptData(uint64_t a1, uint64_t a2, const void *a3)
{
  _BOOL8 result;

  result = 0;
  if (a1 && (_DWORD)a2)
  {
    if (a3)
      return doDecrypt(a1, a2, a3, a2) != 0;
  }
  return result;
}

uint64_t getFileSignatureCacheBlob(_QWORD *a1, const __CFData **a2)
{
  uint64_t v3;
  uint64_t CacheBlob;
  const __CFData *v5;
  UInt8 *MutableBytePtr;
  CFIndex Length;
  CFStringRef v8;
  NSObject *v9;
  CFMutableDataRef theData;
  uint8_t buf[4];
  CFStringRef v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  theData = 0;
  v3 = a1[13];
  CacheBlob = getCacheBlob(a1, (uint64_t)"com.apple.cscachefs", &theData);
  v5 = theData;
  if ((_DWORD)CacheBlob)
  {
    if (!theData)
      return CacheBlob;
    goto LABEL_17;
  }
  MutableBytePtr = CFDataGetMutableBytePtr(theData);
  Length = CFDataGetLength(v5);
  if ((Length & 0xFFFFFFFE) >= 0x32uLL && MutableBytePtr[20] == 4)
  {
    CacheBlob = 0;
    *a2 = v5;
  }
  else
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_196_1);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
    {
      v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Invalid file signature cache for \"%s\", size:%u, type:%u\n"), v3, Length, MutableBytePtr[20]);
      if (CK_DEFAULT_LOG_BLOCK_7 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_200_1);
      v9 = CK_DEFAULT_LOG_INTERNAL_7;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        v13 = v8;
        _os_log_impl(&dword_20A95C000, v9, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v8)
        CFRelease(v8);
    }
    CacheBlob = 22;
    if (v5)
LABEL_17:
      CFRelease(v5);
  }
  return CacheBlob;
}

uint64_t getCacheBlob(_QWORD *a1, uint64_t a2, CFDataRef *a3)
{
  unsigned int (*v3)(_QWORD, uint64_t, CFDataRef *, _QWORD);
  uint64_t v6;
  const UInt8 *BytePtr;
  CFIndex Length;
  CFStringRef v9;
  NSObject *v10;
  uint64_t v11;
  CC_SHA1_CTX c;
  CFDataRef theData;
  unsigned __int8 md[8];
  uint64_t v18;
  int v19;
  uint8_t buf[4];
  CFStringRef v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  theData = 0;
  v3 = *(unsigned int (**)(_QWORD, uint64_t, CFDataRef *, _QWORD))(a1[2] + 80);
  if (!v3 || (v6 = a1[13], !v3(a1[1], a2, &theData, 0)))
  {
    v11 = 0xFFFFFFFFLL;
    goto LABEL_30;
  }
  BytePtr = CFDataGetBytePtr(theData);
  Length = CFDataGetLength(theData);
  if ((unint64_t)(Length - 0x100000000) > 0xFFFFFFFF00000014)
  {
    *(_QWORD *)md = 0;
    v18 = 0;
    v19 = 0;
    memset(&c, 0, sizeof(c));
    CC_SHA1_Init(&c);
    CC_SHA1_Update(&c, BytePtr + 20, Length - 20);
    CC_SHA1_Final(md, &c);
    if (*(_QWORD *)md == *(_QWORD *)BytePtr
      && v18 == *((_QWORD *)BytePtr + 1)
      && v19 == (unint64_t)*((unsigned int *)BytePtr + 4))
    {
      v11 = 0;
      *a3 = theData;
      return v11;
    }
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_398_0);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      goto LABEL_29;
    v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Invalid cache hash for \"%s\", blobName:%s\n"), v6, a2);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_403);
    v10 = CK_DEFAULT_LOG_INTERNAL_7;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      goto LABEL_27;
    *(_DWORD *)buf = 138543362;
    v21 = v9;
    goto LABEL_26;
  }
  if (CK_DEFAULT_LOG_BLOCK_7 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_391_0);
  if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    goto LABEL_29;
  v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Invalid cache size for \"%s\", blobName:%s, size:%u\n"), v6, a2, Length);
  if (CK_DEFAULT_LOG_BLOCK_7 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_395_0);
  v10 = CK_DEFAULT_LOG_INTERNAL_7;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    v21 = v9;
LABEL_26:
    _os_log_impl(&dword_20A95C000, v10, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
  }
LABEL_27:
  if (v9)
    CFRelease(v9);
LABEL_29:
  v11 = 22;
LABEL_30:
  if (theData)
    CFRelease(theData);
  return v11;
}

os_log_t __getFileSignatureCacheBlob_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __getFileSignatureCacheBlob_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

uint64_t getFileSignatureCache()
{
  return 0;
}

uint64_t get2FileSignatureCache(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v12;
  int FileSignatureCacheBlob;
  const __CFData *v15;
  const UInt8 *BytePtr;
  CFIndex Length;
  CFStringRef v18;
  NSObject *v19;
  CFTypeRef v20;
  CFStringRef v21;
  NSObject *v22;
  CFIndex v23;
  int v24;
  CFTypeRef cf;
  CFDataRef theData;
  uint8_t buf[4];
  CFStringRef v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  cf = 0;
  theData = 0;
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(unsigned int *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 88);
  if ((CKFileDigestArgumentsFileScheme(a2) & 0xFFFFFF7F) == 4 || *(_BYTE *)(a1 + 177) || getenv("CS_DISABLE_FS_CACHE"))
  {
    v11 = 0xFFFFFFFFLL;
LABEL_5:
    v12 = cf;
    goto LABEL_6;
  }
  FileSignatureCacheBlob = getFileSignatureCacheBlob((_QWORD *)a1, &theData);
  v15 = theData;
  if (FileSignatureCacheBlob)
    goto LABEL_39;
  BytePtr = CFDataGetBytePtr(theData);
  Length = CFDataGetLength(v15);
  if ((_DWORD)v7 != *(_DWORD *)(BytePtr + 21)
    || v10 != *(_QWORD *)(BytePtr + 25)
    || v8 != *(_QWORD *)(BytePtr + 33)
    || v9 != *(_QWORD *)(BytePtr + 41)
    || (v24 = BytePtr[49], v23 = Length, v24 != CKFileDigestArgumentsFileSchemeByte(a2)))
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_203_0);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
      goto LABEL_39;
    v21 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Invalid file signature cache for \"%s\", ino:%llu, sz:%llu, type:%u, scheme:0x%x, generation:%u\n"), v6, v8, v9, BytePtr[20], BytePtr[49], v7);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_207_0);
    v22 = CK_DEFAULT_LOG_INTERNAL_7;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
      goto LABEL_37;
    *(_DWORD *)buf = 138543362;
    v28 = v21;
    goto LABEL_36;
  }
  if (CKFileSchemeAndSignatureSize((_BYTE *)BytePtr + 49) != 21 || v23 != 70)
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_210);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
      goto LABEL_39;
    v21 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Invalid file signature cache for \"%s\", ino:%llu, sz:%llu, type:%u, scheme:0x%x, generation:%u\n"), v6, v8, v9, BytePtr[20], BytePtr[49], v7);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_213_0);
    v22 = CK_DEFAULT_LOG_INTERNAL_7;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
    {
LABEL_37:
      if (!v21)
        goto LABEL_40;
      CFRelease(v21);
LABEL_39:
      LODWORD(v21) = 0;
LABEL_40:
      v11 = 0xFFFFFFFFLL;
      if (!v15)
        goto LABEL_54;
      goto LABEL_41;
    }
    *(_DWORD *)buf = 138543362;
    v28 = v21;
LABEL_36:
    _os_log_impl(&dword_20A95C000, v22, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    goto LABEL_37;
  }
  CKFileDigestResultsCreate(&cf, (_BYTE *)BytePtr + 49, v9, 0);
  if (CK_DEFAULT_LOG_BLOCK_7 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_216_1);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
  {
    v18 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Found cached file signature for \"%s\", blobSize:%u, sz:%llu, ino:%llu, time:%llu, generation:%u\n"), v6, v23, *(_QWORD *)(a1 + 80), v8, *(_QWORD *)(BytePtr + 25), *(unsigned int *)(BytePtr + 21));
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_221_0);
    v19 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      v28 = v18;
      _os_log_impl(&dword_20A95C000, v19, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v18)
      CFRelease(v18);
  }
  if (a3)
  {
    if (cf)
    {
      CFRetain(cf);
      v20 = cf;
    }
    else
    {
      v20 = 0;
    }
    v11 = 0;
    *a3 = v20;
  }
  else
  {
    v11 = 0;
  }
  LODWORD(v21) = 1;
  if (!v15)
  {
LABEL_54:
    v12 = cf;
    if ((_DWORD)v21)
      goto LABEL_55;
    goto LABEL_6;
  }
LABEL_41:
  CFRelease(v15);
  v12 = cf;
  if ((v21 & 1) != 0)
  {
LABEL_55:
    if (!CKFileDigestResultsFileSignature((uint64_t)v12))
      get2FileSignatureCache_cold_1();
    goto LABEL_5;
  }
LABEL_6:
  if (v12)
    CFRelease(v12);
  return v11;
}

os_log_t __get2FileSignatureCache_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __get2FileSignatureCache_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __get2FileSignatureCache_block_invoke_208()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __get2FileSignatureCache_block_invoke_2_211()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __get2FileSignatureCache_block_invoke_214()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __get2FileSignatureCache_block_invoke_2_219()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

uint64_t setFileSignatureCacheBlob(uint64_t a1, CFMutableDataRef theData)
{
  UInt8 *MutableBytePtr;
  unsigned int (*v6)(_QWORD, const char *, _QWORD, _QWORD);

  if (theData)
  {
    MutableBytePtr = CFDataGetMutableBytePtr(theData);
    if ((CFDataGetLength(theData) & 0xFFFFFFFEuLL) <= 0x31)
      setFileSignatureCacheBlob_cold_1();
    MutableBytePtr[20] = 4;
    return setCacheBlob(a1, (uint64_t)"com.apple.cscachefs", theData);
  }
  else
  {
    v6 = *(unsigned int (**)(_QWORD, const char *, _QWORD, _QWORD))(*(_QWORD *)(a1 + 16) + 88);
    if (v6 && !*(_BYTE *)(a1 + 176))
      return v6(*(_QWORD *)(a1 + 8), "com.apple.cscachefs", 0, 0) - 1;
    else
      return 0xFFFFFFFFLL;
  }
}

uint64_t setCacheBlob(uint64_t a1, uint64_t a2, CFDataRef theData)
{
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, CFDataRef, _QWORD);
  uint64_t v8;
  unint64_t v9;
  unsigned int Length;
  UInt8 *MutableBytePtr;
  unsigned __int8 *v12;
  const void *v13;
  CC_SHA1_CTX v14;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(unsigned int (**)(uint64_t, uint64_t, CFDataRef, _QWORD))(v3 + 88);
  if (!v4 || *(_BYTE *)(a1 + 176))
    return 0xFFFFFFFFLL;
  v8 = *(_QWORD *)(a1 + 8);
  if (!theData)
    return v4(v8, a2, theData, 0) - 1;
  v9 = *(_QWORD *)(a1 + 120);
  Length = CFDataGetLength(theData);
  if (!v9 || v9 >= Length)
  {
    MutableBytePtr = CFDataGetMutableBytePtr(theData);
    if (Length <= 0x14uLL)
      setCacheBlob_cold_1();
    v12 = MutableBytePtr;
    v13 = MutableBytePtr + 20;
    memset(&v14, 0, sizeof(v14));
    CC_SHA1_Init(&v14);
    CC_SHA1_Update(&v14, v13, Length - 20);
    CC_SHA1_Final(v12, &v14);
    v4 = *(unsigned int (**)(uint64_t, uint64_t, CFDataRef, _QWORD))(v3 + 88);
    return v4(v8, a2, theData, 0) - 1;
  }
  return 0xFFFFFFFFLL;
}

uint64_t setFileSignatureCache(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v14)(_QWORD, const char *, _QWORD, _QWORD);
  __CFData *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  __CFData *Mutable;
  UInt8 *MutableBytePtr;
  __int128 v22;
  CFStringRef v23;
  NSObject *v24;
  NSObject *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint8_t buf[4];
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (!a2 || a3 != 21)
    setFileSignatureCache_cold_1();
  if (*(_BYTE *)(a1 + 178))
    return 0xFFFFFFFFLL;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(unsigned int *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 88);
  if (getenv("CS_DISABLE_FS_CACHE") || (*(_BYTE *)a2 & 0x7F) == 4)
    return 0xFFFFFFFFLL;
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  if (((*(uint64_t (**)(uint64_t, __int128 *, _QWORD))(v6 + 64))(v5, &v26, 0) & 1) != 0)
  {
    if ((unint64_t)v26 > 0x8000)
    {
      if (!BYTE8(v27))
        return 0xFFFFFFFFLL;
      if (v11 == (_QWORD)v26 && v10 == (_QWORD)v27 && (_DWORD)v8 == HIDWORD(v27))
      {
        Mutable = CFDataCreateMutable(0, 70);
        if (Mutable)
        {
          v15 = Mutable;
          CFDataSetLength(Mutable, 70);
          MutableBytePtr = CFDataGetMutableBytePtr(v15);
          *((_OWORD *)MutableBytePtr + 1) = 0u;
          *((_OWORD *)MutableBytePtr + 2) = 0u;
          *((_WORD *)MutableBytePtr + 24) = 0;
          *(_OWORD *)MutableBytePtr = 0u;
          *(_DWORD *)(MutableBytePtr + 21) = v8;
          *(_QWORD *)(MutableBytePtr + 25) = v10;
          *(_QWORD *)(MutableBytePtr + 33) = v9;
          *(_QWORD *)(MutableBytePtr + 41) = v11;
          v22 = *a2;
          *(_QWORD *)(MutableBytePtr + 62) = *(_QWORD *)((char *)a2 + 13);
          *(_OWORD *)(MutableBytePtr + 49) = v22;
          if (setFileSignatureCacheBlob(a1, v15))
          {
            v12 = 0xFFFFFFFFLL;
          }
          else
          {
            if (CK_DEFAULT_LOG_BLOCK_7 != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_242_1);
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
            {
              v12 = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Stored file signature cache for \"%s\", blobSize:%u, sz:%llu, ino:%llu, mtim:%llu, generation:%u\n"), v7, 70, *(_QWORD *)(a1 + 80), v9, v10, v8);
              if (CK_DEFAULT_LOG_BLOCK_7 != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_247_0);
              v25 = CK_DEFAULT_LOG_INTERNAL_7;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 138543362;
                v30 = v12;
                _os_log_impl(&dword_20A95C000, v25, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
              }
              if (!v12)
                goto LABEL_29;
              CFRelease((CFTypeRef)v12);
            }
            v12 = 0;
          }
LABEL_29:
          CFRelease(v15);
          return v12;
        }
        return 0xFFFFFFFFLL;
      }
      if (CK_DEFAULT_LOG_BLOCK_7 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_234);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
      {
        v23 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("\"%s\"changed, ino:%llu, mtime:%llu/%llu, sz:%llu/%llu, generation:%u/%u\n"), v7, v9, v10, (_QWORD)v27, v11, (_QWORD)v26, v8, HIDWORD(v27));
        if (CK_DEFAULT_LOG_BLOCK_7 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_239_0);
        v24 = CK_DEFAULT_LOG_INTERNAL_7;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543362;
          v30 = (uint64_t)v23;
          _os_log_impl(&dword_20A95C000, v24, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
        }
        if (v23)
          CFRelease(v23);
      }
    }
    v14 = *(unsigned int (**)(_QWORD, const char *, _QWORD, _QWORD))(*(_QWORD *)(a1 + 16) + 88);
    if (v14 && !*(_BYTE *)(a1 + 176) && v14(*(_QWORD *)(a1 + 8), "com.apple.cscachefs", 0, 0))
    {
      if (CK_DEFAULT_LOG_BLOCK_7 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_250_0);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
      {
        v15 = (__CFData *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Removed file signature cache for \"%s\", blobSize:%u, sz:%llu, ino:%llu, mtime:%llu, generation:%u\n"), v7, 70, *(_QWORD *)(a1 + 80), v9, v10, v8);
        if (CK_DEFAULT_LOG_BLOCK_7 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_255_0);
        v16 = CK_DEFAULT_LOG_INTERNAL_7;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543362;
          v30 = (uint64_t)v15;
          v17 = v16;
          v18 = OS_LOG_TYPE_DEBUG;
LABEL_27:
          _os_log_impl(&dword_20A95C000, v17, v18, "%{public}@", buf, 0xCu);
          goto LABEL_28;
        }
        goto LABEL_28;
      }
    }
  }
  else
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_227_1);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      v15 = (__CFData *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("stat failed for \"%s\", ino:%llu\n"), v7, v9);
      if (CK_DEFAULT_LOG_BLOCK_7 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_231);
      v19 = CK_DEFAULT_LOG_INTERNAL_7;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v30 = (uint64_t)v15;
        v17 = v19;
        v18 = OS_LOG_TYPE_ERROR;
        goto LABEL_27;
      }
LABEL_28:
      v12 = 0xFFFFFFFFLL;
      if (!v15)
        return v12;
      goto LABEL_29;
    }
  }
  return 0xFFFFFFFFLL;
}

os_log_t __setFileSignatureCache_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __setFileSignatureCache_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __setFileSignatureCache_block_invoke_232()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __setFileSignatureCache_block_invoke_2_237()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __setFileSignatureCache_block_invoke_240()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __setFileSignatureCache_block_invoke_2_245()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __setFileSignatureCache_block_invoke_248()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __setFileSignatureCache_block_invoke_2_253()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

BOOL wgcChanged(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  CFStringRef v7;
  NSObject *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint8_t buf[4];
  CFStringRef v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 104);
  v5 = *(_QWORD *)(a1 + 40);
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  if (((*(uint64_t (**)(uint64_t, __int128 *, _QWORD))(v3 + 64))(v2, &v9, 0) & 1) != 0)
  {
    if (BYTE8(v10))
      return HIDWORD(v10) != *(_DWORD *)(a1 + 24);
    return 0;
  }
  if (CK_DEFAULT_LOG_BLOCK_7 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_257_0);
  result = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("stat failed for \"%s\", ino:%llu\n"), v4, v5);
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_259);
    v8 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v13 = v7;
      _os_log_impl(&dword_20A95C000, v8, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v7)
      CFRelease(v7);
    return 0;
  }
  return result;
}

os_log_t __wgcChanged_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __wgcChanged_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

uint64_t CK2CalculateItemSignatureWithFlags(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, _QWORD *a5, CFErrorRef *a6)
{
  _QWORD *v11;
  _QWORD *v12;
  uint64_t (*v13)(uint64_t, char **, CFErrorRef *);
  BOOL v14;
  int v15;
  uint64_t *OpCtx;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  int v23;
  char *v24;
  void *v25;
  CFStringRef v26;
  NSObject *v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  uint64_t v31;
  NSObject *v32;
  NSObject *v33;
  NSObject *v34;
  char v35;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  int v44;
  __int128 *v45;
  __int128 *v46;
  uint64_t v47;
  CFStringRef v48;
  NSObject *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  __int128 v58;
  _OWORD v59[2];
  CFTypeRef v60;
  CFErrorRef v61;
  CFTypeRef v62;
  uint64_t *v63;
  uint8_t buf[4];
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v62 = 0;
  v63 = 0;
  v60 = 0;
  v61 = 0;
  if (a6)
    *a6 = 0;
  v11 = &new_ringing[224];
  v12 = &new_ringing[224];
  if (!a1)
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_261_0);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      OpCtx = (uint64_t *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("NULL read context\n"));
      if (CK_DEFAULT_LOG_BLOCK_7 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_265);
      v30 = CK_DEFAULT_LOG_INTERNAL_7;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v65 = (uint64_t)OpCtx;
        _os_log_impl(&dword_20A95C000, v30, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (!OpCtx)
      {
        v23 = 0;
        v29 = 0;
        v55 = 0;
        v56 = 0;
        v22 = 0;
        v21 = 0;
        goto LABEL_50;
      }
      CFRelease(OpCtx);
    }
    v23 = 0;
    v29 = 0;
    v55 = 0;
    v56 = 0;
    v22 = 0;
    v21 = 0;
    OpCtx = 0;
LABEL_50:
    v31 = 0;
    goto LABEL_77;
  }
  v54 = *(_QWORD *)(a1 + 24);
  if (((*(uint64_t (**)(_QWORD, uint64_t **, CFErrorRef *))(a1 + 48))(*(_QWORD *)(a1 + 8), &v63, &v61) & 1) == 0)
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_268_0);
    v31 = v54;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      OpCtx = (uint64_t *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("open failed on path:\"%@\", error:\"%@\"\n"), v54, v61);
      if (CK_DEFAULT_LOG_BLOCK_7 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_273);
      v32 = CK_DEFAULT_LOG_INTERNAL_7;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v65 = (uint64_t)OpCtx;
        _os_log_impl(&dword_20A95C000, v32, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (!OpCtx)
      {
        v23 = 0;
        v29 = 0;
        v55 = 0;
        v56 = 0;
        v22 = 0;
        v21 = 0;
        goto LABEL_77;
      }
      CFRelease(OpCtx);
    }
    v23 = 0;
    v29 = 0;
    v55 = 0;
    v56 = 0;
    v22 = 0;
    v21 = 0;
    OpCtx = 0;
    goto LABEL_77;
  }
  v13 = *(uint64_t (**)(uint64_t, char **, CFErrorRef *))(a1 + 48);
  v14 = v13 == openFd || v13 == openFdUncached;
  v15 = !v14;
  v53 = v15;
  if (!v14)
  {
    OpCtx = (uint64_t *)createOpCtx();
    if (OpCtx)
      goto LABEL_13;
LABEL_62:
    v55 = 0;
    v56 = 0;
    v22 = 0;
    v21 = 0;
LABEL_63:
    v29 = 1;
    v23 = v53;
    v31 = v54;
    goto LABEL_77;
  }
  OpCtx = v63;
  if (!v63)
    goto LABEL_62;
LABEL_13:
  v17 = (uint64_t)v63;
  *((_BYTE *)OpCtx + 160) = 5;
  OpCtx[1] = v17;
  OpCtx[2] = a1;
  v18 = OpCtx[5];
  v58 = 0u;
  memset(v59, 0, 24);
  v55 = v18;
  if (((*(uint64_t (**)(void))(a1 + 64))() & 1) == 0)
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_276_0);
    v23 = v53;
    v31 = v54;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      v21 = (void *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("stat failed on path:\"%@\", ino:%llu, error:\"%@\"\n"), v54, v18, v61);
      if (CK_DEFAULT_LOG_BLOCK_7 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_281);
      v33 = CK_DEFAULT_LOG_INTERNAL_7;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v65 = (uint64_t)v21;
        _os_log_impl(&dword_20A95C000, v33, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (!v21)
      {
        v56 = 0;
        v22 = 0;
        goto LABEL_74;
      }
      CFRelease(v21);
    }
    v56 = 0;
    v22 = 0;
    v21 = 0;
LABEL_74:
    v29 = 1;
    goto LABEL_77;
  }
  v19 = v58;
  OpCtx[5] = *((_QWORD *)&v58 + 1);
  v20 = *(_QWORD *)&v59[0];
  v56 = v19;
  OpCtx[10] = v19;
  OpCtx[11] = v20;
  *((_BYTE *)OpCtx + 34) = BYTE8(v59[0]);
  OpCtx[3] = *(_QWORD *)((char *)v59 + 12);
  v52 = a4;
  if ((a4 & 2) != 0)
  {
    v21 = 0;
    if (*((_BYTE *)OpCtx + 178))
    {
LABEL_21:
      v22 = v56;
LABEL_22:
      if (!a5)
      {
LABEL_24:
        v23 = v53;
        if (v11[300] != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_314_1);
        if (os_log_type_enabled((os_log_t)v12[311], OS_LOG_TYPE_DEBUG))
        {
          v24 = (char *)CKFileDigestResultsFileSignature((uint64_t)v60);
          v25 = CKFileSchemeAndSignatureCopyCString(v24);
          if (gVerbose == 2)
          {
            if (v11[300] != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_317);
            if (os_log_type_enabled((os_log_t)v12[311], OS_LOG_TYPE_DEBUG)
              && os_log_type_enabled((os_log_t)v12[311], OS_LOG_TYPE_DEBUG))
            {
              v26 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("path:\"%@\", flags:0x%llx, ino:%llu, sz:%llu, o:%llu, ck:%s"), v54, v52, v55, v56, v22, v25);
              if (v11[300] != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_323);
              v27 = v12[311];
              if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 138543362;
                v65 = (uint64_t)v26;
                _os_log_impl(&dword_20A95C000, v27, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
              }
              if (v26)
                CFRelease(v26);
            }
          }
          free(v25);
        }
        v28 = 1;
        v29 = 1;
        goto LABEL_87;
      }
LABEL_23:
      CKBaseRetain(v60);
      *a5 = v60;
      goto LABEL_24;
    }
    v22 = v19;
    if (v19 <= 0x8000)
      goto LABEL_22;
  }
  if (!get2FileSignatureCache((uint64_t)OpCtx, (uint64_t)a2, &v60)
    && v60
    && CKFileDigestResultsFileSignature((uint64_t)v60))
  {
    v21 = 0;
    goto LABEL_21;
  }
  if (v56)
  {
    v37 = 0x8000;
    v21 = malloc_type_malloc(0x8000uLL, 0xD8EFBB03uLL);
    if (!v21)
    {
LABEL_112:
      v22 = 0;
      goto LABEL_63;
    }
  }
  else
  {
    v21 = 0;
    v37 = 0;
  }
  if (!CKFileSignatureGeneratorCreate(&v62, a2))
    goto LABEL_112;
  v38 = (v52 & 1) != 0 && *((_BYTE *)OpCtx + 178) == 0;
  if (v56)
  {
    v39 = v37;
    v22 = 0;
    v40 = 0;
    v51 = !v38;
    v50 = v39;
    v41 = v39;
    while (1)
    {
      v57 = 0;
      if (((*(uint64_t (**)(uint64_t *, unint64_t, void *, unint64_t, unint64_t *, CFErrorRef *))(a1 + 72))(v63, v22, v21, v41, &v57, &v61) & 1) == 0)break;
      if (v57)
      {
        if (!CKFileSignatureGeneratorUpdate((uint64_t)v62))
        {
          if (v11[300] != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_293);
          v12 = &new_ringing[224];
          v23 = v53;
          v31 = v54;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
          {
            v48 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("CKFileSignatureGeneratorUpdate failed\n"));
            if (v11[300] != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_298);
            v49 = CK_DEFAULT_LOG_INTERNAL_7;
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138543362;
              v65 = (uint64_t)v48;
LABEL_155:
              _os_log_impl(&dword_20A95C000, v49, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
            }
            goto LABEL_156;
          }
          goto LABEL_74;
        }
        v42 = v57;
        v22 += v57;
        v40 += v57;
        v43 = v51;
        if (!v57)
          v43 = 1;
        if ((v43 & 1) == 0)
        {
          if (v40 >= 0x18000)
          {
            if (wgcChanged((uint64_t)OpCtx))
            {
              v61 = CKPOSIXErrorCreateWithFormat(16, CFSTR("ino:%llu changed"), v55);
              v12 = new_ringing + 1792;
              v11 = new_ringing + 1792;
              v23 = v53;
              v31 = v54;
              goto LABEL_74;
            }
            v42 = v57;
            v40 -= 98304;
          }
          v11 = new_ringing + 1792;
        }
      }
      else
      {
        v42 = 0;
      }
      if (v42 < v41 || v22 >= v56)
        goto LABEL_132;
    }
    if (v11[300] != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_285);
    v12 = &new_ringing[224];
    v23 = v53;
    v31 = v54;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      v48 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("read failed on path:\"%@\", ino:%llu, offset:0x%llx, size:%u, error:\"%@\"\n"), v54, v55, v22, v50, v61);
      if (v11[300] != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_290);
      v49 = CK_DEFAULT_LOG_INTERNAL_7;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v65 = (uint64_t)v48;
        goto LABEL_155;
      }
LABEL_156:
      if (v48)
        CFRelease(v48);
      v12 = new_ringing + 1792;
      goto LABEL_74;
    }
    goto LABEL_74;
  }
  v22 = 0;
LABEL_132:
  v31 = v54;
  if (v60)
    CK2CalculateItemSignatureWithFlags_cold_3();
  v44 = CKFileSignatureGeneratorFinish((uint64_t)v62);
  v12 = new_ringing + 1792;
  if (v62)
    CFRelease(v62);
  v62 = 0;
  if (v44)
  {
    if (!v60)
      CK2CalculateItemSignatureWithFlags_cold_1();
    v45 = (__int128 *)CKFileDigestResultsFileSignature((uint64_t)v60);
    if (!v45)
      CK2CalculateItemSignatureWithFlags_cold_2();
    v46 = v45;
    v47 = CKFileSchemeAndSignatureSize(v45);
    setFileSignatureCache((uint64_t)OpCtx, v46, v47);
    if (!a5)
      goto LABEL_24;
    goto LABEL_23;
  }
  v29 = 1;
  v23 = v53;
LABEL_77:
  if (v11[300] != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_306);
  if (!os_log_type_enabled((os_log_t)v12[311], OS_LOG_TYPE_DEBUG))
    goto LABEL_86;
  v28 = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("error:\"%@\", path:\"%@\", ino:%llu, sz:%llu, o:%llu\n"), v61, v31, v55, v56, v22);
  if (v11[300] != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_311);
  v34 = v12[311];
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138543362;
    v65 = v28;
    _os_log_impl(&dword_20A95C000, v34, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
  }
  if (v28)
  {
    CFRelease((CFTypeRef)v28);
LABEL_86:
    v28 = 0;
  }
LABEL_87:
  if (v62)
  {
    CFRelease(v62);
    v62 = 0;
  }
  if (v21)
    free(v21);
  if (v23)
    freeOpCtx((char *)OpCtx);
  if (v29)
    (*(void (**)(_QWORD, uint64_t *, _QWORD))(a1 + 56))(*(_QWORD *)(a1 + 8), v63, 0);
  if (a6)
    v35 = v28;
  else
    v35 = 1;
  if ((v35 & 1) != 0)
  {
    if (v61)
      CFRelease(v61);
  }
  else
  {
    *a6 = v61;
    v61 = 0;
  }
  if (v60)
    CKBaseRelease(v60);
  return v28;
}

char *createOpCtx()
{
  char *v0;
  char *v1;
  char *v2;
  BOOL v3;

  v0 = (char *)malloc_type_calloc(1uLL, 0x228uLL, 0x10F0040A7EBA4E8uLL);
  v1 = v0;
  if (!v0
    || (*((_DWORD *)v0 + 9) = -1,
        *((_QWORD *)v0 + 30) = 0,
        v0[183] = getenv("CK_TIME_CHUNKING") != 0,
        v2 = getenv("CK_SIZE_STATS"),
        v1[181] = v2 != 0,
        v2)
    && pthread_mutex_init((pthread_mutex_t *)(v1 + 360), 0))
  {
    freeOpCtx(v1);
    return 0;
  }
  else
  {
    v1[182] = 1;
    v3 = gVerbose == 2;
    v1[184] = gVerbose == 2;
    if (v3 && getenv("CK_CHUNKSTORE_VERBOSE_FOR_TEST_TOOL"))
      *((_QWORD *)v1 + 68) = malloc_type_calloc(0x100000uLL, 0x14uLL, 0x788C06uLL);
    v1[180] = getenv("CK_NO_RESULTS") != 0;
  }
  return v1;
}

double setOpCtxStatInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = *a2;
  *(_QWORD *)(a1 + 40) = a2[1];
  v3 = a2[2];
  *(_QWORD *)(a1 + 80) = v2;
  *(_QWORD *)(a1 + 88) = v3;
  *(_BYTE *)(a1 + 34) = *((_BYTE *)a2 + 24);
  result = *(double *)((char *)a2 + 28);
  *(double *)(a1 + 24) = result;
  return result;
}

void freeOpCtx(char *a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  const char *v10;
  unint64_t v11;
  void *v12;
  CFTypeRef *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  void *v19;
  const void *v20;
  void *v21;
  void *v22;
  char *v23;
  const void *v24;
  int v25;
  uint64_t v26;
  int v27;
  char *v28;
  void *v29;
  char __str[1024];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return;
  if (a1[183])
  {
    bzero(__str, 0x400uLL);
    v2 = (double)*((unint64_t *)a1 + 59) / 1000000000.0;
    v3 = (double)*((unint64_t *)a1 + 61) / 1000000000.0;
    v4 = (double)*((unint64_t *)a1 + 63) / 1000000000.0;
    v5 = (double)*((unint64_t *)a1 + 65) / 1000000000.0;
    v6 = (double)*((unint64_t *)a1 + 67) / 1000000000.0;
    v7 = v2 + v3 + v4 + v5 + v6;
    v8 = (double)*((unint64_t *)a1 + 53);
    printf("\n Summary for item %lld (%s):", *((_QWORD *)a1 + 7), *((const char **)a1 + 13));
    printf("\n\tprofiler created %d sections", *((_DWORD *)a1 + 62));
    printf("\n\t%32s\tThroughput\n", "Elapsed Time");
    printf("\t%10s %13.7f %7s", "chunking", v2, "seconds");
    printf("\t%12.4f MB/sec\n", (double)*((unint64_t *)a1 + 53) / v2 * 0.000000953674316);
    printf("\t%10s %13.7f %-10s", "hashing", v3, "seconds");
    printf("\t%12.4f MB/sec\n", (double)*((unint64_t *)a1 + 53) / v3 * 0.000000953674316);
    printf("\t%10s %13.7f %-10s", "file read", v4, "seconds");
    printf("\t%12.4f MB/sec\n", (double)*((unint64_t *)a1 + 53) / v4 * 0.000000953674316);
    if (*((_QWORD *)a1 + 57))
    {
      printf("\t%10s %13.7f %-10s", "file write", v5, "seconds");
      printf("\t%12.4f MB/sec\n", (double)*((unint64_t *)a1 + 54) / v5 * 0.000000953674316);
    }
    v9 = v8 / v7;
    if (!a1[180])
    {
      printf("\t%10s %13.7f %-10s", "DB access", v6, "seconds");
      printf("\t%12.4f MB/sec\n", (double)*((unint64_t *)a1 + 53) / v6 * 0.000000953674316);
    }
    if ((CKFileDigestArgumentsFileSchemeByte(*((_QWORD *)a1 + 18)) & 0x80u) != 0)
      v10 = ", hashed, encrypted and hashed again";
    else
      v10 = " and hashed";
    snprintf(__str, 0x400uLL, "Chunked%s", v10);
    printf("\n\t%s %llu bytes into %lld chunks, stored %lld chunks (%lld bytes) in %6.4f seconds (%8.4f MB/sec)\n\n", __str, *((_QWORD *)a1 + 53), *((_QWORD *)a1 + 55), *((_QWORD *)a1 + 57), *((_QWORD *)a1 + 54), v7, v9 * 0.000000953674316);
    v11 = *((_QWORD *)a1 + 55);
    if (v11)
      printf("\tAverage chunk size: %llu.%llu\n", *((_QWORD *)a1 + 53) / v11, *((_QWORD *)a1 + 53) % v11);
    else
      puts("\tAverage chunk size: 0 (0 chunks)");
    putchar(10);
  }
  v12 = (void *)*((_QWORD *)a1 + 68);
  if (v12)
    free(v12);
  if (a1[182])
    pthread_mutex_destroy((pthread_mutex_t *)(a1 + 360));
  v13 = (CFTypeRef *)*((_QWORD *)a1 + 17);
  if (v13)
  {
    if (v13[8])
    {
      CKBaseRelease(v13[8]);
      v13 = (CFTypeRef *)*((_QWORD *)a1 + 17);
    }
    free(v13);
  }
  v14 = (const void *)*((_QWORD *)a1 + 24);
  if (v14)
  {
    CKBaseRelease(v14);
    *((_QWORD *)a1 + 24) = 0;
  }
  v15 = (const void *)*((_QWORD *)a1 + 25);
  if (v15)
    CKBaseRelease(v15);
  *((_QWORD *)a1 + 25) = 0;
  v16 = (const void *)*((_QWORD *)a1 + 26);
  if (v16)
    CKBaseRelease(v16);
  *((_QWORD *)a1 + 26) = 0;
  v17 = (const void *)*((_QWORD *)a1 + 18);
  if (v17)
    CKBaseRelease(v17);
  *((_QWORD *)a1 + 18) = 0;
  v18 = (const void *)*((_QWORD *)a1 + 30);
  if (v18)
    CKBaseRelease(v18);
  *((_QWORD *)a1 + 30) = 0;
  v19 = (void *)*((_QWORD *)a1 + 40);
  if (v19)
  {
    free(v19);
    *((_QWORD *)a1 + 40) = 0;
  }
  v20 = (const void *)*((_QWORD *)a1 + 42);
  if (v20)
    CFRelease(v20);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v21 = (void *)*((_QWORD *)a1 + 32);
  if (v21)
    free(v21);
  v22 = (void *)*((_QWORD *)a1 + 37);
  if (v22)
    free(v22);
  if (!a1[179])
  {
    v25 = *((_DWORD *)a1 + 77);
    v26 = *((unsigned int *)a1 + 68);
    if (!v25 && (_DWORD)v26)
      freeOpCtx_cold_1();
    v23 = (char *)*((_QWORD *)a1 + 33);
    if ((_DWORD)v26)
    {
      v27 = 0;
      v28 = v23 + 8;
      do
      {
        v29 = *(void **)&v28[v27];
        if (v29)
          free(v29);
        v27 += v25;
        --v26;
      }
      while (v26);
      v23 = (char *)*((_QWORD *)a1 + 33);
    }
    if (!v23)
      goto LABEL_45;
    goto LABEL_44;
  }
  v23 = (char *)*((_QWORD *)a1 + 33);
  if (v23)
  {
LABEL_44:
    free(v23);
    *((_QWORD *)a1 + 33) = 0;
  }
LABEL_45:
  *((_QWORD *)a1 + 34) = 0;
  v24 = (const void *)*((_QWORD *)a1 + 19);
  if (v24)
    CKBaseRelease(v24);
  free(a1);
}

uint64_t CK2CalculateFileSignatureWithFlags(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, _QWORD *a5, CFTypeRef *a6)
{
  const __CFAllocator *v12;
  uint64_t v13;
  int *v14;
  char *v15;
  CFStringRef v16;
  NSObject *v17;
  char *v18;
  uint64_t v19;
  CFTypeRef v20;
  _QWORD v22[4];
  CFTypeRef cf;
  uint8_t buf[16];
  uint64_t v25;
  CFStringRef v26;
  __int128 v27;
  uint64_t (*v28)(uint64_t, char **, CFErrorRef *);
  uint64_t (*v29)(int, void **, _QWORD *);
  uint64_t (*v30)(uint64_t, uint64_t, _QWORD *);
  uint64_t (*v31)(uint64_t, unint64_t, void *, size_t, unint64_t *, CFErrorRef *);
  uint64_t (*v32)(uint64_t, char *, __CFData **, CFErrorRef *);
  uint64_t (*v33)(uint64_t, char *, CFDataRef, CFErrorRef *);
  char cStr[1024];
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  cf = 0;
  if (a5)
    *a5 = 0;
  if (a6)
    *a6 = 0;
  bzero(cStr, 0x400uLL);
  if (get_path_for_fd(a1, cStr))
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_325_0);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEFAULT))
    {
      v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v13 = *__error();
      v14 = __error();
      v15 = strerror(*v14);
      v16 = CFStringCreateWithFormat(v12, 0, CFSTR("get_path_for_fd failed for fd:%d: %d (%s)\n"), a1, v13, v15);
      if (CK_DEFAULT_LOG_BLOCK_7 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_329_0);
      v17 = CK_DEFAULT_LOG_INTERNAL_7;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v16;
        _os_log_impl(&dword_20A95C000, v17, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
      }
      if (!v16)
      {
        v18 = 0;
        goto LABEL_18;
      }
      CFRelease(v16);
    }
    v18 = 0;
    v16 = 0;
  }
  else
  {
    v18 = cStr;
    v16 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  }
LABEL_18:
  v22[2] = 0;
  v22[3] = 0;
  v22[0] = v18;
  v22[1] = a1;
  *(_DWORD *)&buf[4] = 0;
  v25 = 0;
  v27 = 0u;
  *(_DWORD *)buf = 2;
  v28 = openFdUncached;
  v29 = closeFd;
  v30 = statFd;
  v31 = readFd;
  v32 = getCacheBlobFd;
  v33 = setCacheBlobFd;
  *(_QWORD *)&buf[8] = v22;
  v26 = v16;
  v19 = CK2CalculateItemSignatureWithFlags((uint64_t)buf, a2, a3, a4, a5, (CFErrorRef *)&cf);
  v20 = cf;
  if (a6 && !(_DWORD)v19 && cf)
  {
    CFRetain(cf);
    v20 = cf;
    *a6 = cf;
  }
  if (v20)
    CFRelease(v20);
  if (v16)
    CFRelease(v16);
  return v19;
}

BOOL CKCalculateFileSignature(uint64_t a1, int a2, void *a3, uint64_t *a4)
{
  int v7;
  _BYTE *v8;
  size_t v9;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef cf;

  if (a2 != 1)
    CKCalculateFileSignature_cold_2();
  cf = 0;
  CKFileDigestArgumentsV1WithFileCreate(&cf, 1, 0);
  v11 = 0;
  v12 = 0;
  v7 = CK2CalculateFileSignatureWithFlags(a1, cf, 0, 0, &v12, &v11);
  v8 = (_BYTE *)CKFileDigestResultsFileSignature((uint64_t)v12);
  v9 = CKFileSchemeAndSignatureSize(v8);
  if (v7)
  {
    if (v8 && v9 != 21)
      CKCalculateFileSignature_cold_1();
    if (a3 && v8)
      memcpy(a3, v8, v9);
    if (a4)
      *a4 = CKFileDigestResultsFileLength((uint64_t)v12);
  }
  if (cf)
    CFRelease(cf);
  cf = 0;
  if (v12)
    CFRelease(v12);
  v12 = 0;
  if (v11)
    CFRelease(v11);
  return v7 != 0;
}

unint64_t CKValidateSignature(_BYTE *a1, const void *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  size_t v9;
  void *v10;
  void *v11;
  const void *v12;
  unint64_t v13;
  NSObject *v14;
  const void *v15;
  CFTypeRef v17;
  _BYTE buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v8 = CKChunkSchemeAndSignatureSize(a1);
  if (v8)
  {
    v9 = v8;
    if ((char)*a1 < 0 && !a4)
    {
      v10 = malloc_type_malloc(a3, 0x3A166DA0uLL);
      if (v10)
      {
        v11 = v10;
        *(_QWORD *)buf = 0;
        if (CKChunkDigestArgumentsV1Create(buf, 1, 0))
        {
          v17 = 0;
          memcpy(v11, a2, a3);
          if (CKEncryptData(*(const void **)buf, (uint64_t)v11, a3, &v17))
          {
            v12 = (const void *)CKChunkDigestResultsChunkSignature((uint64_t)v17);
            v13 = memcmp(a1, v12, v9) == 0;
            if (*(_QWORD *)buf)
              CKBaseRelease(*(CFTypeRef *)buf);
            *(_QWORD *)buf = 0;
            if (v17)
              CKBaseRelease(v17);
            free(v11);
            return v13;
          }
          free(v11);
        }
      }
      return 0;
    }
    *(_QWORD *)buf = 0;
    if (!CKChunkDigestArgumentsV1Create(buf, 1, 0))
      return 0;
    v17 = 0;
    if (!CKCalculateChunkSignatureAndEncryptionKey((uint64_t)a2, a3, *(const void **)buf, &v17))
      return 0;
    v15 = (const void *)CKChunkDigestResultsChunkSignature((uint64_t)v17);
    v13 = memcmp(a1, v15, v9) == 0;
    if (*(_QWORD *)buf)
      CKBaseRelease(*(CFTypeRef *)buf);
    *(_QWORD *)buf = 0;
    if (v17)
      CKBaseRelease(v17);
  }
  else
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_334_0);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      return 0;
    v13 = (unint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("signature size is 0\n"));
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_338_1);
    v14 = CK_DEFAULT_LOG_INTERNAL_7;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v13;
      _os_log_impl(&dword_20A95C000, v14, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
    if (v13)
    {
      CFRelease((CFTypeRef)v13);
      return 0;
    }
  }
  return v13;
}

uint64_t CKRegisteredChunkKey(uint64_t a1)
{
  _BYTE *v2;
  int v3;

  v3 = *(char *)(a1 + 35);
  v2 = (_BYTE *)(a1 + 35);
  if (v3 < 0)
    return a1 + CKSchemeAndSignatureSize(v2) + 35;
  else
    return 0;
}

uint64_t CKRegisteredSubchunkDigest(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 29))
      result += 35 + CKChunkSchemeSignatureAndKeySize((_BYTE *)(result + 35));
    else
      return 0;
  }
  return result;
}

uint64_t CKRegisteredChunkAtIndex(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;

  if (result)
  {
    v3 = result;
    v4 = CKRegisteredChunkSize(result);
    if (v4)
      return v3 + v4 * (unint64_t)a2;
    else
      return 0;
  }
  return result;
}

uint64_t CKStoredChunkAtIndex(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  if (result)
  {
    v3 = result;
    v4 = CKSignatureSize(result + 56);
    v5 = v4 + 57;
    if (!v4)
      v5 = 0;
    if (v5)
      return v3 + v5 * (unint64_t)a2;
    else
      return 0;
  }
  return result;
}

uint64_t CKRegisteredChunkRowID(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_QWORD *CKRegisteredChunkSetRowID(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

uint64_t CKRegisteredChunkItemID(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t CKRegisteredChunkSetItemID(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = a2;
  return result;
}

uint64_t CKRegisteredChunkOffset(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t CKRegisteredChunkSuccessorOffset(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) + *(unsigned int *)(a1 + 24);
}

uint64_t CKRegisteredChunkSetOffset(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  return result;
}

uint64_t CKRegisteredChunkLength(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t CKRegisteredChunkSetLength(uint64_t result, int a2)
{
  *(_DWORD *)(result + 24) = a2;
  return result;
}

uint64_t CKRegisteredChunkLocation(uint64_t a1)
{
  return *(char *)(a1 + 28);
}

uint64_t CKRegisteredChunkSetLocation(uint64_t result, char a2)
{
  *(_BYTE *)(result + 28) = a2;
  return result;
}

uint64_t CKRegisteredChunkSignature(uint64_t a1)
{
  return a1 + 35;
}

uint64_t CKRegisteredChunkType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 31);
}

_BYTE *CKRegisteredChunkSignatureCopyCString(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  _BYTE *result;
  uint64_t i;
  _BYTE *v5;
  char v6;

  v1 = (char *)(a1 + 35);
  v2 = CKSchemeAndSignatureSize((_BYTE *)(a1 + 35));
  result = malloc_type_malloc((2 * v2) | 1, 0x4D85F13uLL);
  for (i = 0; v2; --v2)
  {
    v5 = &result[i];
    *v5 = CShex_to_string_hex[(unint64_t)*v1 >> 4];
    v6 = *v1++;
    i += 2;
    v5[1] = CShex_to_string_hex[v6 & 0xF];
  }
  result[i] = 0;
  return result;
}

uint64_t CKRegisteredChunkKeyCopyCString(uint64_t a1)
{
  _BYTE *v2;
  int v3;
  uint64_t result;
  unsigned __int8 *v5;
  uint64_t v6;
  _BYTE *v7;
  char v8;

  v3 = *(char *)(a1 + 35);
  v2 = (_BYTE *)(a1 + 35);
  if ((v3 & 0x80000000) == 0)
    return 0;
  v5 = (unsigned __int8 *)(a1 + CKSchemeAndSignatureSize(v2) + 35);
  result = CKSchemeAndEncryptionKeySize(v5);
  if (result)
  {
    v6 = result;
    result = (uint64_t)malloc_type_malloc((2 * result) | 1, 0x337E6EBDuLL);
    v7 = (_BYTE *)result;
    do
    {
      *v7 = CShex_to_string_hex[(unint64_t)*v5 >> 4];
      v8 = *v5++;
      v7[1] = CShex_to_string_hex[v8 & 0xF];
      v7 += 2;
      --v6;
    }
    while (v6);
    *v7 = 0;
  }
  return result;
}

uint64_t CKRegisteredChunkIsEncrypted(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 35) >> 7;
}

void *CSCreateSourceChunk(char a1, unsigned __int8 a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v6;
  char v7;

  v7 = a1;
  v6 = a2;
  v3 = CKChunkSignatureSize(&v7);
  if (a1 < 0)
    v4 = CKChunkSchemeAndEncryptionKeySize(&v6);
  else
    v4 = 0;
  if (v4 + v3)
    return malloc_type_calloc(1uLL, v4 + v3 + 88, 0xA4C4D9E0uLL);
  else
    return 0;
}

void *CSCreateStoredChunk(char a1)
{
  void *result;
  char v2;

  v2 = a1;
  result = (void *)CKChunkSignatureSize(&v2);
  if (result)
    return malloc_type_calloc((size_t)result + 57, 1uLL, 0x90A54C42uLL);
  return result;
}

void clearChunksArray(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    free(v2);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
}

CFTypeRef setOpCtxFileDigestArguments(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a1 + 144);
  if (result != cf)
  {
    if (result)
      CKBaseRelease(result);
    *(_QWORD *)(a1 + 144) = 0;
    result = CKBaseRetain(cf);
    *(_QWORD *)(a1 + 144) = cf;
  }
  return result;
}

uint64_t setOpCtxPath(uint64_t a1, char *__s)
{
  char *v3;
  char *v4;

  *(_QWORD *)(a1 + 104) = __s;
  if (__s)
    v3 = strrchr(__s, 47);
  else
    v3 = 0;
  if (v3)
    v4 = v3 + 1;
  else
    v4 = 0;
  *(_QWORD *)(a1 + 112) = v4;
  return 0;
}

uint64_t setOpCtxChunkScheme(uint64_t a1, int a2, CFTypeRef cf)
{
  unsigned __int8 v6;
  int v7;
  void *v8;
  unsigned __int8 v10;
  char v11;

  *(_BYTE *)(a1 + 179) = a2;
  if (cf)
    CFRetain(cf);
  *(_QWORD *)(a1 + 152) = cf;
  v11 = CKChunkDigestArgumentsChunkSchemeByte((uint64_t)cf);
  v6 = CKChunkDigestArgumentsChunkEncryptionKeyScheme((uint64_t)cf);
  v10 = v6;
  v7 = CKChunkSignatureSize(&v11);
  if (a2)
  {
    *(_DWORD *)(a1 + 308) = v7 + 36;
    if (v11 < 0)
    {
      *(_DWORD *)(a1 + 308) += CKChunkSchemeAndEncryptionKeySize(&v10);
      v6 = v10;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 308) = v7 + 88;
  }
  v8 = CSCreateSourceChunk(v11, v6);
  *(_QWORD *)(a1 + 136) = v8;
  if (v8)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

void clearOpCtxError(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 336);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 336) = 0;
  }
}

uint64_t readOpCtx(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  CFStringRef v14;
  NSObject *v15;
  CFTypeRef cf;
  uint8_t buf[4];
  CFStringRef v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v10 = a1[1];
  v11 = a1[2];
  cf = 0;
  v12 = (const void *)a1[42];
  if (v12)
  {
    CFRelease(v12);
    a1[42] = 0;
  }
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef *))(v11 + 72))(v10, a2, a3, a4, a5, &cf);
  if ((v13 & 1) != 0)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_345);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      v14 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("read failed on itemID:%lld, path:\"%s\", ino:%llu, offset:0x%llx, size:%u, error:\"%@\"\n"), a1[7], a1[13], a1[5], a2, a4, cf);
      if (CK_DEFAULT_LOG_BLOCK_7 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_349_0);
      v15 = CK_DEFAULT_LOG_INTERNAL_7;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v19 = v14;
        _os_log_impl(&dword_20A95C000, v15, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v14)
        CFRelease(v14);
    }
    a1[42] = cf;
  }
  return v13;
}

os_log_t __readOpCtx_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __readOpCtx_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

void setOpCtxFileDigestResults(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v3;

  v3 = *(CFTypeRef *)(a1 + 208);
  if (v3 != cf)
  {
    if (v3)
      CFRelease(v3);
    *(_QWORD *)(a1 + 208) = 0;
    if (cf)
      CFRetain(cf);
    *(_QWORD *)(a1 + 208) = cf;
  }
}

uint64_t getOpCtxSectionLengthAtIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t result;
  CFStringRef v9;
  NSObject *v10;
  uint8_t buf[4];
  CFStringRef v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 248) <= a2)
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_351_0);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      return 0;
    v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("sectionIndex %u out of range (numSections = %u)\n"), a2, *(unsigned int *)(a1 + 248));
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_355);
    v10 = CK_DEFAULT_LOG_INTERNAL_7;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
LABEL_19:
      if (v9)
        CFRelease(v9);
      return 0;
    }
    *(_DWORD *)buf = 138543362;
    v12 = v9;
LABEL_18:
    _os_log_impl(&dword_20A95C000, v10, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    goto LABEL_19;
  }
  v4 = *(_QWORD *)(a1 + 256);
  if ((_DWORD)a2)
  {
    v5 = *(_QWORD *)(v4 + 56 * a2);
    v6 = a2 - 1;
    v7 = *(_QWORD *)(v4 + 56 * (a2 - 1));
    result = v5 - v7;
    if (v5 >= v7)
      return result;
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_358);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      return 0;
    v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("section %u/0x%llx is before section %u/0x%llx\n"), a2, *(_QWORD *)(*(_QWORD *)(a1 + 256) + 56 * a2), (a2 - 1), *(_QWORD *)(*(_QWORD *)(a1 + 256) + 56 * v6));
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_363);
    v10 = CK_DEFAULT_LOG_INTERNAL_7;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      goto LABEL_19;
    *(_DWORD *)buf = 138543362;
    v12 = v9;
    goto LABEL_18;
  }
  return *(_QWORD *)v4;
}

os_log_t __getOpCtxSectionLengthAtIndex_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __getOpCtxSectionLengthAtIndex_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __getOpCtxSectionLengthAtIndex_block_invoke_356()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __getOpCtxSectionLengthAtIndex_block_invoke_2_361()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

BOOL registerOperation(pthread_mutex_t *a1, const __CFSet *a2, const void *a3)
{
  int v6;

  pthread_mutex_lock(a1);
  v6 = CFSetContainsValue(a2, a3);
  if (!v6)
    CFSetAddValue(a2, a3);
  pthread_mutex_unlock(a1);
  return v6 == 0;
}

uint64_t unregisterOperation(pthread_mutex_t *a1, pthread_cond_t *a2, __CFSet *a3, const void *a4)
{
  pthread_mutex_lock(a1);
  CFSetRemoveValue(a3, a4);
  pthread_cond_signal(a2);
  return pthread_mutex_unlock(a1);
}

uint64_t waitForOperation(pthread_mutex_t *a1, pthread_cond_t *a2, const __CFSet *a3, const void *a4)
{
  pthread_mutex_lock(a1);
  while (CFSetContainsValue(a3, a4))
    pthread_cond_wait(a2, a1);
  return pthread_mutex_unlock(a1);
}

uint64_t changeFileFlags(int a1, int a2, int a3)
{
  int v6;
  int v7;
  NSObject *v8;
  int *v9;
  char *v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  uint64_t result;
  __uint32_t st_flags;
  int v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  int v20;
  NSObject *v21;
  int *v22;
  char *v23;
  int v24;
  int *v25;
  char *v26;
  int v27;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  char *v33;
  __int16 v34;
  int v35;
  stat v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  memset(&v36, 0, sizeof(v36));
  *__error() = 0;
  v6 = fstat(a1, &v36);
  if (!v6)
  {
    st_flags = v36.st_flags;
    v16 = ~a3;
    v17 = -1;
    while (1)
    {
      *(_DWORD *)buf = st_flags;
      v29 = (const char *)((st_flags | a2) & v16);
      *__error() = 0;
      if (ffsctl(a1, 0xC00C4114uLL, buf, 0) == -1)
      {
        if (*__error() == 25 || *__error() == 45)
        {
          *__error() = 0;
          result = fchflags(a1, (st_flags | a2) & v16);
          if ((_DWORD)result)
          {
            v20 = result;
            if (CK_DEFAULT_LOG_BLOCK_7 != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_377_0);
            v21 = CK_DEFAULT_LOG_INTERNAL_7;
            result = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR);
            if ((_DWORD)result)
            {
              v22 = __error();
              v23 = strerror(*v22);
              v24 = *__error();
              v36.st_dev = 136315906;
              *(_QWORD *)&v36.st_mode = "changeFileFlags";
              WORD2(v36.st_ino) = 1024;
              *(_DWORD *)((char *)&v36.st_ino + 6) = v20;
              HIWORD(v36.st_uid) = 2080;
              *(_QWORD *)&v36.st_gid = v23;
              *((_WORD *)&v36.st_rdev + 2) = 1024;
              *(dev_t *)((char *)&v36.st_rdev + 6) = v24;
              _os_log_impl(&dword_20A95C000, v21, OS_LOG_TYPE_ERROR, "fchflags in %s failed with rc %d: %s (%d)", (uint8_t *)&v36, 0x22u);
              return 0;
            }
          }
          return result;
        }
        if (*__error() != 35)
        {
          if (CK_DEFAULT_LOG_BLOCK_7 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_371);
          v8 = CK_DEFAULT_LOG_INTERNAL_7;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
          {
            v25 = __error();
            v26 = strerror(*v25);
            v27 = *__error();
            v36.st_dev = 136315906;
            *(_QWORD *)&v36.st_mode = "changeFileFlags";
            WORD2(v36.st_ino) = 1024;
            *(_DWORD *)((char *)&v36.st_ino + 6) = -1;
            HIWORD(v36.st_uid) = 2080;
            *(_QWORD *)&v36.st_gid = v26;
            *((_WORD *)&v36.st_rdev + 2) = 1024;
            *(dev_t *)((char *)&v36.st_rdev + 6) = v27;
            v12 = "ffsctl in %s failed with rc %d: %s (%d)";
            v13 = (uint8_t *)&v36;
            goto LABEL_6;
          }
          return 0xFFFFFFFFLL;
        }
        if (CK_DEFAULT_LOG_BLOCK_7 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_368);
        v19 = CK_DEFAULT_LOG_INTERNAL_7;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
        {
          v36.st_dev = 136315394;
          *(_QWORD *)&v36.st_mode = "changeFileFlags";
          WORD2(v36.st_ino) = 1024;
          *(_DWORD *)((char *)&v36.st_ino + 6) = v17 + 1;
          _os_log_impl(&dword_20A95C000, v19, OS_LOG_TYPE_ERROR, "ffsctl in %s failed with EAGAIN (attempt %d)", (uint8_t *)&v36, 0x12u);
        }
      }
      else
      {
        if (*(_DWORD *)buf == HIDWORD(v29))
          return 0;
        if (CK_DEFAULT_LOG_BLOCK_7 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_374_0);
        v18 = CK_DEFAULT_LOG_INTERNAL_7;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
        {
          v36.st_dev = 136315394;
          *(_QWORD *)&v36.st_mode = "changeFileFlags";
          WORD2(v36.st_ino) = 1024;
          *(_DWORD *)((char *)&v36.st_ino + 6) = v17 + 1;
          _os_log_impl(&dword_20A95C000, v18, OS_LOG_TYPE_ERROR, "ffsctl in %s failed with lost race (attempt %d)", (uint8_t *)&v36, 0x12u);
        }
        st_flags = HIDWORD(v29);
      }
      if (++v17 >= 9)
        return 0xFFFFFFFFLL;
    }
  }
  v7 = v6;
  if (CK_DEFAULT_LOG_BLOCK_7 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_365_0);
  v8 = CK_DEFAULT_LOG_INTERNAL_7;
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
  {
    v9 = __error();
    v10 = strerror(*v9);
    v11 = *__error();
    *(_DWORD *)buf = 136315906;
    v29 = "changeFileFlags";
    v30 = 1024;
    v31 = v7;
    v32 = 2080;
    v33 = v10;
    v34 = 1024;
    v35 = v11;
    v12 = "fstat in %s failed with rc %d: %s (%d)";
    v13 = buf;
LABEL_6:
    _os_log_impl(&dword_20A95C000, v8, OS_LOG_TYPE_ERROR, v12, v13, 0x22u);
  }
  return 0xFFFFFFFFLL;
}

os_log_t __changeFileFlags_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __changeFileFlags_block_invoke_366()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __changeFileFlags_block_invoke_369()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __changeFileFlags_block_invoke_372()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __changeFileFlags_block_invoke_375()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

uint64_t getMaxXattrSize(uint64_t a1, int a2)
{
  uint64_t v3;
  const __CFAllocator *v5;
  int *v6;
  char *v7;
  CFStringRef v8;
  NSObject *v9;
  uint8_t buf[4];
  CFStringRef v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = fpathconf(a2, 26);
  if (v3 < 0)
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_379);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
    {
      v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v6 = __error();
      v7 = strerror(*v6);
      v8 = CFStringCreateWithFormat(v5, 0, CFSTR("fpathconf failed on \"%s\": %s\n"), a1, v7);
      if (CK_DEFAULT_LOG_BLOCK_7 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_383_0);
      v9 = CK_DEFAULT_LOG_INTERNAL_7;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v11 = v8;
        _os_log_impl(&dword_20A95C000, v9, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v8)
        CFRelease(v8);
    }
    return 0;
  }
  else if ((unint64_t)(v3 - 64) >= 0xFFFFFFFFFFFFFFC1)
  {
    return 1 << (v3 - 1);
  }
  else
  {
    return 0;
  }
}

os_log_t __getMaxXattrSize_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __getMaxXattrSize_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

uint64_t getFileWriteGeneration(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  const __CFAllocator *v7;
  uint64_t v8;
  int *v9;
  char *v10;
  CFStringRef v11;
  NSObject *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint8_t buf[4];
  CFStringRef v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v14 = xmmword_20A9A4590;
  v15 = 0;
  v13 = 0;
  if (fgetattrlist(a2, &v14, &v13, 8uLL, 0x20u) < 0)
  {
    if (CK_DEFAULT_LOG_BLOCK_7 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_385);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
    {
      v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v8 = *__error();
      v9 = __error();
      v10 = strerror(*v9);
      v11 = CFStringCreateWithFormat(v7, 0, CFSTR("fgetattrlist(ATTR_CMN_GEN_COUNT) failed on \"%s\", fd:%d: %d (%s)\n"), a1, a2, v8, v10);
      if (CK_DEFAULT_LOG_BLOCK_7 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_389_0);
      v12 = CK_DEFAULT_LOG_INTERNAL_7;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        v17 = v11;
        _os_log_impl(&dword_20A95C000, v12, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v11)
        CFRelease(v11);
    }
  }
  else
  {
    if (HIDWORD(v13))
    {
      result = 0;
      *a3 = HIDWORD(v13);
      return result;
    }
    *__error() = 16;
  }
  return 0xFFFFFFFFLL;
}

os_log_t __getFileWriteGeneration_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __getFileWriteGeneration_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __getCacheBlob_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __getCacheBlob_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __getCacheBlob_block_invoke_396()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

os_log_t __getCacheBlob_block_invoke_2_401()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_7 = (uint64_t)result;
  return result;
}

BOOL canSetXattrOnFile()
{
  getpid();
  return sandbox_check() == 0;
}

uint64_t CKGetCacheBlobFd(uint64_t a1, uint64_t fd, char *name, __CFData **a4, CFErrorRef *a5)
{
  ssize_t v10;
  size_t v11;
  uint64_t v12;
  const __CFAllocator *v13;
  char *v14;
  CFStringRef v15;
  NSObject *v16;
  CFErrorRef v17;
  uint64_t result;
  __CFData *Mutable;
  __CFData *v20;
  UInt8 *MutableBytePtr;
  uint64_t v22;
  const __CFAllocator *v23;
  char *v24;
  CFStringRef v25;
  NSObject *v26;
  uint8_t buf[4];
  CFStringRef v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (a4)
    *a4 = 0;
  if (a5)
    *a5 = 0;
  if ((_DWORD)fd == -1)
    goto LABEL_26;
  v10 = fgetxattr(fd, name, 0, 0, 0, 0);
  if (!v10)
    goto LABEL_26;
  v11 = v10;
  if (v10 == -1)
  {
    v12 = *__error();
    if ((_DWORD)v12 != 2 && (_DWORD)v12 != 93)
    {
      if (CK_DEFAULT_LOG_BLOCK_7 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_407);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      {
        v13 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v14 = strerror(v12);
        v15 = CFStringCreateWithFormat(v13, 0, CFSTR("fgetxattr failed on \"%s\", fd:%d, xattrName:%s: %d (%s)\n"), a1, fd, name, v12, v14);
        if (CK_DEFAULT_LOG_BLOCK_7 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_411);
        v16 = CK_DEFAULT_LOG_INTERNAL_7;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          v28 = v15;
          _os_log_impl(&dword_20A95C000, v16, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v15)
          CFRelease(v15);
      }
    }
    if (a5)
    {
      v17 = CKPOSIXErrorCreateWithFormat(v12, CFSTR("fgetxattr failed on \"%s\", fd:%d, xattrName:%s"), a1, fd, name);
      result = 0;
      *a5 = v17;
      return result;
    }
    return 0;
  }
  Mutable = CFDataCreateMutable(0, v10);
  if (!Mutable)
  {
LABEL_26:
    if (a5)
    {
      result = 0;
      *a5 = 0;
      return result;
    }
    return 0;
  }
  v20 = Mutable;
  CFDataSetLength(Mutable, v11);
  MutableBytePtr = CFDataGetMutableBytePtr(v20);
  if (fgetxattr(fd, name, MutableBytePtr, v11, 0, 0) < 0)
  {
    v22 = *__error();
    if ((_DWORD)v22 != 2 && (_DWORD)v22 != 93)
    {
      if (CK_DEFAULT_LOG_BLOCK_7 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_416);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
      {
        v23 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v24 = strerror(v22);
        v25 = CFStringCreateWithFormat(v23, 0, CFSTR("fgetxattr failed on \"%s\", fd:%d, xattrName:%s: %d (%s)\n"), a1, fd, name, v22, v24);
        if (CK_DEFAULT_LOG_BLOCK_7 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_419);
        v26 = CK_DEFAULT_LOG_INTERNAL_7;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          v28 = v25;
          _os_log_impl(&dword_20A95C000, v26, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
        }
        if (v25)
          CFRelease(v25);
      }
    }
    if (a5)
      *a5 = CKPOSIXErrorCreateWithFormat(v22, CFSTR("fgetxattr failled on \"%s\", fd:%d, xattrName:%s"), a1, fd, name);
    CFRelease(v20);
    return 0;
  }
  if (a4)
    *a4 = v20;
  return 1;
}

uint64_t CKSetCacheBlobFd(uint64_t a1, uint64_t fd, char *name, CFDataRef theData, CFErrorRef *a5)
{
  CFErrorRef v10;
  const UInt8 *BytePtr;
  size_t Length;
  uint64_t v13;
  const __CFAllocator *v14;
  char *v15;
  CFStringRef v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  const __CFAllocator *v20;
  char *v21;
  CFStringRef v22;
  NSObject *v23;
  uint64_t result;
  const __CFAllocator *v25;
  char *v26;
  uint64_t v27;
  uint8_t buf[4];
  CFStringRef v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a5)
    *a5 = 0;
  if ((_DWORD)fd != -1)
  {
    if (!a1 || (getpid(), !sandbox_check()))
    {
      if (theData)
      {
        BytePtr = CFDataGetBytePtr(theData);
        Length = CFDataGetLength(theData);
        if (fsetxattr(fd, name, BytePtr, Length, 0, 0))
        {
          v13 = *__error();
          if ((_DWORD)v13 == 13)
          {
            if (CK_DEFAULT_LOG_BLOCK_7 != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_430);
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
            {
              v14 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
              v15 = strerror(13);
              v16 = CFStringCreateWithFormat(v14, 0, CFSTR("fsetxattr failed for \"%s\", fd:%d, xattrName:%s: %d (%s)\n"), a1, fd, name, 13, v15);
              if (CK_DEFAULT_LOG_BLOCK_7 != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_435);
              v17 = CK_DEFAULT_LOG_INTERNAL_7;
              if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
                goto LABEL_41;
              *(_DWORD *)buf = 138543362;
              v29 = v16;
              v18 = v17;
              v19 = OS_LOG_TYPE_DEBUG;
LABEL_40:
              _os_log_impl(&dword_20A95C000, v18, v19, "%{public}@", buf, 0xCu);
LABEL_41:
              if (v16)
                CFRelease(v16);
            }
          }
          else
          {
            if (CK_DEFAULT_LOG_BLOCK_7 != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_438_0);
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
            {
              v25 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
              v26 = strerror(v13);
              v16 = CFStringCreateWithFormat(v25, 0, CFSTR("fsetxattr failed for \"%s\", fd:%d, xattrName:%s: %d (%s)\n"), a1, fd, name, v13, v26);
              if (CK_DEFAULT_LOG_BLOCK_7 != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_441);
              v27 = CK_DEFAULT_LOG_INTERNAL_7;
              if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_ERROR))
                goto LABEL_41;
              *(_DWORD *)buf = 138543362;
              v29 = v16;
              v18 = v27;
              v19 = OS_LOG_TYPE_ERROR;
              goto LABEL_40;
            }
          }
          if (!a5)
            return 0;
LABEL_44:
          v10 = CKPOSIXErrorCreateWithFormat(v13, CFSTR("fgetxattr failled on \"%s\", fd:%d, xattrName:%s"), a1, fd, name);
          goto LABEL_45;
        }
      }
      else if (fremovexattr(fd, name, 0))
      {
        v13 = *__error();
        if ((_DWORD)v13 != 2 && (_DWORD)v13 != 93)
        {
          if (CK_DEFAULT_LOG_BLOCK_7 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_423_0);
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
          {
            v20 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
            v21 = strerror(v13);
            v22 = CFStringCreateWithFormat(v20, 0, CFSTR("fremovexattr failed on \"%s\", xattrName:%s: %d (%s)\n"), a1, name, v13, v21);
            if (CK_DEFAULT_LOG_BLOCK_7 != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_7, &__block_literal_global_427_1);
            v23 = CK_DEFAULT_LOG_INTERNAL_7;
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_7, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138543362;
              v29 = v22;
              _os_log_impl(&dword_20A95C000, v23, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
            }
            if (v22)
              CFRelease(v22);
          }
        }
        if (!a5)
          return 0;
        goto LABEL_44;
      }
      return 1;
    }
  }
  if (!a5)
    return 0;
  v10 = 0;
LABEL_45:
  result = 0;
  *a5 = v10;
  return result;
}

uint64_t openFdWithReadContext(char *a1, unsigned int a2, char **a3, uint64_t a4, uint64_t a5)
{
  int v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t result;
  char *v14;
  _QWORD v15[4];

  *a3 = 0;
  v15[2] = 0;
  v15[3] = 0;
  v15[0] = a1;
  v15[1] = a2;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_DWORD *)a4 = 2;
  *(_QWORD *)(a4 + 8) = v15;
  *(_QWORD *)(a4 + 48) = openFd;
  *(_QWORD *)(a4 + 56) = closeFd;
  *(_QWORD *)(a4 + 64) = statFd;
  *(_QWORD *)(a4 + 72) = readFd;
  *(_QWORD *)(a4 + 80) = getCacheBlobFd;
  *(_QWORD *)(a4 + 88) = setCacheBlobFd;
  v14 = 0;
  v9 = openFd((uint64_t)v15, &v14, 0);
  *(_QWORD *)(a4 + 8) = 0;
  if (v9)
  {
    v10 = v14;
    *((_QWORD *)v14 + 1) = v14;
    *((_QWORD *)v10 + 2) = a4;
    v10[160] = 3;
    *((_QWORD *)v10 + 13) = a1;
    if (a1)
      v11 = strrchr(a1, 47);
    else
      v11 = 0;
    if (v11)
      v12 = v11 + 1;
    else
      v12 = 0;
    *((_QWORD *)v10 + 14) = v12;
    if (!a5)
      goto LABEL_11;
    if ((*(unsigned int (**)(char *, uint64_t, _QWORD))(a4 + 64))(v10, a5, 0))
    {
      *((_QWORD *)v10 + 10) = *(_QWORD *)a5;
      *((_QWORD *)v10 + 5) = *(_QWORD *)(a5 + 8);
      *((_QWORD *)v10 + 11) = *(_QWORD *)(a5 + 16);
      v10[34] = *(_BYTE *)(a5 + 24);
      *((_QWORD *)v10 + 3) = *(_QWORD *)(a5 + 28);
LABEL_11:
      result = 0;
      *a3 = v10;
      return result;
    }
    (*(void (**)(_QWORD, _QWORD, _QWORD))(a4 + 56))(*(_QWORD *)(a4 + 8), *((_QWORD *)v10 + 1), 0);
  }
  return 0xFFFFFFFFLL;
}

uint64_t closeFdWithReadContext(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a2 + 56))(*(_QWORD *)(a2 + 8), *(_QWORD *)(a1 + 8), 0);
}

uint64_t CSFileDigester_Destroy(uint64_t a1, CFErrorRef *a2)
{
  _QWORD *v4;
  void *v5;
  const void *v6;
  const void *v7;
  uint64_t result;
  CFErrorRef v9;

  if (a1 && (v4 = *(_QWORD **)(a1 + 40)) != 0)
  {
    v5 = (void *)v4[4];
    if (v5)
    {
      free(v5);
      v4[4] = 0;
    }
    v6 = (const void *)v4[1];
    if (v6)
    {
      CFRelease(v6);
      v4[1] = 0;
    }
    v7 = (const void *)v4[2];
    if (v7)
      CFRelease(v7);
    free(v4);
    *(_QWORD *)(a1 + 40) = 0;
    return 1;
  }
  else
  {
    v9 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFErrorDomain)*MEMORY[0x24BDBD390], 6, 0);
    result = 0;
    *a2 = v9;
  }
  return result;
}

uint64_t _CSFileDigester_InitializeEmpty(uint64_t a1, CFErrorRef *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  CFErrorRef v8;

  v4 = malloc_type_malloc(0x28uLL, 0x10600402FD52D6EuLL);
  if (v4)
  {
    v5 = v4;
    *(_BYTE *)v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
    v6 = ccsha256_di();
    v5[3] = v6;
    v5[4] = malloc_type_malloc(*(_QWORD *)(v6 + 8) + *(_QWORD *)(v6 + 16) + 12, 0xFB71DBC2uLL);
    ccdigest_init();
    *(_QWORD *)(a1 + 40) = v5;
    return 1;
  }
  else
  {
    v8 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFErrorDomain)*MEMORY[0x24BDBD390], 1, 0);
    result = 0;
    *a2 = v8;
  }
  return result;
}

uint64_t CSFileDigester_InitializeFromKey(uint64_t a1, const __CFData *a2, CFErrorRef *a3)
{
  uint64_t result;
  uint64_t v7;
  const __CFAllocator *v8;
  CFIndex Length;
  CFMutableDataRef MutableCopy;
  CFErrorRef v11;

  result = _CSFileDigester_InitializeEmpty(a1, a3);
  if ((_DWORD)result)
  {
    v7 = *(_QWORD *)(a1 + 40);
    v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Length = CFDataGetLength(a2);
    MutableCopy = CFDataCreateMutableCopy(v8, Length, a2);
    *(_QWORD *)(v7 + 8) = MutableCopy;
    if (MutableCopy)
    {
      return 1;
    }
    else
    {
      CSFileDigester_Destroy(a1, a3);
      v11 = CFErrorCreate(v8, (CFErrorDomain)*MEMORY[0x24BDBD390], 1, 0);
      result = 0;
      *a3 = v11;
    }
  }
  return result;
}

void CSFileDigester_SetKey(uint64_t a1, CFDataRef theData)
{
  uint64_t v2;
  CFDataRef v3;
  const __CFAllocator *v5;
  CFIndex Length;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(CFDataRef *)(v2 + 8);
  if (v3 != theData)
  {
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(v2 + 8) = 0;
    }
    if (theData)
    {
      v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      Length = CFDataGetLength(theData);
      *(_QWORD *)(v2 + 8) = CFDataCreateMutableCopy(v5, Length, theData);
    }
  }
}

uint64_t CSFileDigester_Update(uint64_t a1, uint64_t a2, uint64_t a3, CFErrorRef *a4)
{
  _BYTE *v5;
  const __CFAllocator *v6;
  const __CFString *v7;
  CFIndex v8;
  CFErrorRef v9;
  uint64_t result;

  v5 = *(_BYTE **)(a1 + 40);
  if (!v5)
  {
    v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v7 = (const __CFString *)*MEMORY[0x24BDBD390];
    v8 = 7;
    goto LABEL_5;
  }
  if (*v5)
  {
    v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v7 = (const __CFString *)*MEMORY[0x24BDBD390];
    v8 = 6;
LABEL_5:
    v9 = CFErrorCreate(v6, v7, v8, 0);
    result = 0;
    *a4 = v9;
    return result;
  }
  ccdigest_update();
  return 1;
}

uint64_t CSFileDigester_Finalize(uint64_t a1, void *a2, unsigned int a3, CFErrorRef *a4)
{
  uint64_t v5;
  uint64_t result;
  const UInt8 *BytePtr;
  size_t Length;
  CFErrorRef v11;

  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    if (*(_BYTE *)v5 || (result = _CSFileDigester_FinalizeDigest(a1, a4), (_DWORD)result))
    {
      BytePtr = CFDataGetBytePtr(*(CFDataRef *)(v5 + 16));
      if (CFDataGetLength(*(CFDataRef *)(v5 + 16)) <= a3)
        Length = CFDataGetLength(*(CFDataRef *)(v5 + 16));
      else
        Length = a3;
      memcpy(a2, BytePtr, Length);
      return 1;
    }
  }
  else
  {
    v11 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFErrorDomain)*MEMORY[0x24BDBD390], 7, 0);
    result = 0;
    *a4 = v11;
  }
  return result;
}

uint64_t _CSFileDigester_FinalizeDigest(uint64_t a1, CFErrorRef *a2)
{
  uint64_t v4;
  const __CFAllocator *v5;
  uint64_t result;
  int v7;
  const __CFString *v8;
  const __CFAllocator *v9;
  CFIndex v10;
  CFErrorRef v11;
  UInt8 bytes[16];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(v4 + 8) || *(_QWORD *)(a1 + 16))
  {
    v14 = 0u;
    v15 = 0u;
    (*(void (**)(void))(*(_QWORD *)(v4 + 24) + 56))();
    cc_clear();
    if (*(_QWORD *)(v4 + 8))
    {
      v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
LABEL_5:
      *(_OWORD *)bytes = 0u;
      v13 = 0u;
      ccsha256_di();
      CFDataGetLength(*(CFDataRef *)(v4 + 8));
      CFDataGetBytePtr(*(CFDataRef *)(v4 + 8));
      cchmac();
      *(_QWORD *)(v4 + 16) = CFDataCreate(v5, bytes, 32);
      result = 1;
      *(_BYTE *)v4 = 1;
      return result;
    }
    *(_OWORD *)bytes = 0u;
    v13 = 0u;
    ccsha256_di();
    CFDataGetLength(*(CFDataRef *)(a1 + 16));
    CFDataGetBytePtr(*(CFDataRef *)(a1 + 16));
    v7 = cchkdf();
    v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    if (!v7)
    {
      *(_QWORD *)(v4 + 8) = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], bytes, 32);
      cc_clear();
      goto LABEL_5;
    }
    v8 = (const __CFString *)*MEMORY[0x24BDBD390];
    v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v10 = 2;
  }
  else
  {
    v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v8 = (const __CFString *)*MEMORY[0x24BDBD390];
    v10 = 6;
  }
  v11 = CFErrorCreate(v9, v8, v10, 0);
  result = 0;
  *a2 = v11;
  return result;
}

uint64_t CSFileDigester_Verify(uint64_t a1, uint64_t a2, uint64_t a3, CFErrorRef *a4)
{
  uint64_t v5;
  uint64_t result;
  CFErrorRef v7;

  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    if (*(_BYTE *)v5 || (result = _CSFileDigester_FinalizeDigest(a1, a4), (_DWORD)result))
    {
      CFDataGetBytePtr(*(CFDataRef *)(v5 + 16));
      return cc_cmp_safe() == 0;
    }
  }
  else
  {
    v7 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFErrorDomain)*MEMORY[0x24BDBD390], 7, 0);
    result = 0;
    *a4 = v7;
  }
  return result;
}

uint64_t CSFileDigester_ExportCredential(uint64_t a1, CFMutableDataRef *a2, CFErrorRef *a3)
{
  uint64_t v5;
  const __CFAllocator *v6;
  CFIndex Length;
  uint64_t result;
  const __CFAllocator *v9;
  const __CFString *v10;
  CFIndex v11;
  CFErrorRef v12;

  if (!a2)
    return 0;
  *a2 = 0;
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    if (*(_BYTE *)v5)
    {
      Length = CFDataGetLength(*(CFDataRef *)(v5 + 8));
      *a2 = CFDataCreateMutableCopy(v6, Length, *(CFDataRef *)(v5 + 8));
      return 1;
    }
    v10 = (const __CFString *)*MEMORY[0x24BDBD390];
    v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v11 = 3;
  }
  else
  {
    v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v10 = (const __CFString *)*MEMORY[0x24BDBD390];
    v11 = 7;
  }
  v12 = CFErrorCreate(v9, v10, v11, 0);
  result = 0;
  *a3 = v12;
  return result;
}

uint64_t CSSetSQLiteCorruptionTestingEnabled(uint64_t result)
{
  if (enabled != (_DWORD)result)
  {
    callNumber = 0;
    corruptionHappened = 0;
  }
  enabled = result;
  return result;
}

uint64_t CSSQLiteCorruptionTestingEnabled()
{
  return enabled;
}

uint64_t CSSetContinueOnCorruptDB(uint64_t result)
{
  continueOnCorruptDB = result;
  return result;
}

uint64_t CSContinueOnCorruptDB()
{
  return continueOnCorruptDB;
}

uint64_t CSSetExitOnCorruptDB(uint64_t result)
{
  exitOnCorruptDB = result;
  return result;
}

uint64_t CSExitOnCorruptDB()
{
  return exitOnCorruptDB;
}

uint64_t CS_corruption_causing_sqlite3_open_v2(const char *a1, sqlite3 **a2, int a3, const char *a4)
{
  CFStringRef v8;
  NSObject *v9;
  int v11;
  CFStringRef v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!CSSQLiteCorruptionTestingShouldCorrupt())
    return sqlite3_open_v2(a1, a2, a3, a4);
  if (CK_DEFAULT_LOG_BLOCK_8 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_8, &__block_literal_global_9);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_8, OS_LOG_TYPE_ERROR))
  {
    v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("chunk store database corruption: simulating corruption in sqlite3_open_v2"));
    if (CK_DEFAULT_LOG_BLOCK_8 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_8, &__block_literal_global_5_5);
    v9 = CK_DEFAULT_LOG_INTERNAL_8;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_8, OS_LOG_TYPE_ERROR))
    {
      v11 = 138543362;
      v12 = v8;
      _os_log_impl(&dword_20A95C000, v9, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v11, 0xCu);
    }
    if (v8)
      CFRelease(v8);
  }
  return 11;
}

uint64_t CS_corruption_causing_sqlite3_step(sqlite3_stmt *a1)
{
  CFStringRef v2;
  NSObject *v3;
  int v5;
  CFStringRef v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (!CSSQLiteCorruptionTestingShouldCorrupt())
    return sqlite3_step(a1);
  if (CK_DEFAULT_LOG_BLOCK_8 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_8, &__block_literal_global_7_2);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_8, OS_LOG_TYPE_ERROR))
  {
    v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("chunk store database corruption: simulating corruption in sqlite3_step"));
    if (CK_DEFAULT_LOG_BLOCK_8 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_8, &__block_literal_global_11_0);
    v3 = CK_DEFAULT_LOG_INTERNAL_8;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_8, OS_LOG_TYPE_ERROR))
    {
      v5 = 138543362;
      v6 = v2;
      _os_log_impl(&dword_20A95C000, v3, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v5, 0xCu);
    }
    if (v2)
      CFRelease(v2);
  }
  return 11;
}

uint64_t CS_corruption_causing_sqlite3_prepare_v2(sqlite3 *a1, const char *a2, int a3, sqlite3_stmt **a4, const char **a5)
{
  CFStringRef v10;
  NSObject *v11;
  int v13;
  CFStringRef v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (!CSSQLiteCorruptionTestingShouldCorrupt())
    return sqlite3_prepare_v2(a1, a2, a3, a4, a5);
  if (CK_DEFAULT_LOG_BLOCK_8 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_8, &__block_literal_global_13_2);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_8, OS_LOG_TYPE_ERROR))
  {
    v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("chunk store database corruption: simulating corruption in sqlite3_prepare_v2"));
    if (CK_DEFAULT_LOG_BLOCK_8 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_8, &__block_literal_global_17_0);
    v11 = CK_DEFAULT_LOG_INTERNAL_8;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_8, OS_LOG_TYPE_ERROR))
    {
      v13 = 138543362;
      v14 = v10;
      _os_log_impl(&dword_20A95C000, v11, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v13, 0xCu);
    }
    if (v10)
      CFRelease(v10);
  }
  return 11;
}

uint64_t CS_corruption_causing_sqlite3_exec(sqlite3 *a1, const char *a2, int (__cdecl *a3)(void *, int, char **, char **), void *a4, char **a5)
{
  CFStringRef v10;
  NSObject *v11;
  int v13;
  CFStringRef v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (!CSSQLiteCorruptionTestingShouldCorrupt())
    return sqlite3_exec(a1, a2, a3, a4, a5);
  if (CK_DEFAULT_LOG_BLOCK_8 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_8, &__block_literal_global_19_3);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_8, OS_LOG_TYPE_ERROR))
  {
    v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("chunk store database corruption: simulating corruption in sqlite3_exec"));
    if (CK_DEFAULT_LOG_BLOCK_8 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_8, &__block_literal_global_23);
    v11 = CK_DEFAULT_LOG_INTERNAL_8;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_8, OS_LOG_TYPE_ERROR))
    {
      v13 = 138543362;
      v14 = v10;
      _os_log_impl(&dword_20A95C000, v11, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v13, 0xCu);
    }
    if (v10)
      CFRelease(v10);
  }
  return 11;
}

uint64_t CSSQLiteCorruptionTestingShouldCorrupt()
{
  CFStringRef v0;
  NSObject *v1;
  uint64_t result;
  unsigned int v3;
  int v4;
  unint64_t v5;
  uint8_t buf[4];
  CFStringRef v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (!enabled)
    return 0;
  if ((CSSQLiteCorruptionTestingShouldCorrupt_initLogged & 1) == 0)
  {
    if (CK_DEFAULT_LOG_BLOCK_8 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_8, &__block_literal_global_25_3);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_8, OS_LOG_TYPE_ERROR))
    {
      v0 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("chunk store database corruption: initializing with probability %d"), 60);
      if (CK_DEFAULT_LOG_BLOCK_8 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_8, &__block_literal_global_29_0);
      v1 = CK_DEFAULT_LOG_INTERNAL_8;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v7 = v0;
        _os_log_impl(&dword_20A95C000, v1, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v0)
        CFRelease(v0);
    }
    CSSQLiteCorruptionTestingShouldCorrupt_initLogged = 1;
  }
  if ((corruptionHappened & 1) != 0)
    return 1;
  if ((CSSQLiteCorruptionTestingShouldCorrupt_randSeeded & 1) == 0)
  {
    v3 = time(0);
    srand(v3);
    CSSQLiteCorruptionTestingShouldCorrupt_randSeeded = 1;
  }
  if (callNumber < 0)
  {
    result = 0;
    ++callNumber;
  }
  else
  {
    v4 = rand();
    ++callNumber;
    HIDWORD(v5) = -286331153 * v4 + 143165576;
    LODWORD(v5) = HIDWORD(v5);
    if ((v5 >> 2) > 0x4444444)
      return 0;
    result = 1;
    corruptionHappened = 1;
  }
  return result;
}

const void **CKChunkSignatureGeneratorV2Finalize(uint64_t a1)
{
  const void **result;

  result = **(const void ****)(a1 + 48);
  if (result)
  {
    result = (const void **)CSContext_Destroy(result, 0);
    **(_QWORD **)(a1 + 48) = 0;
  }
  return result;
}

uint64_t CKChunkSignatureGeneratorV2Init(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  const __CFData *v6;
  uint64_t v7;
  uint64_t v8;

  if (CKChunkDigestArgumentsGetClass(a2) != 2)
    return 0;
  if (CKChunkDigestArgumentsBoundaryKey(a2))
  {
    v6 = (const __CFData *)CKChunkDigestArgumentsBoundaryKey(a2);
    v7 = CSContext_InititializeFromBoundaryKey(v6, 0, *(CFMutableDataRef ***)(a1 + 48), a3);
  }
  else
  {
    v7 = CSContext_Initialize(*(_QWORD **)(a1 + 48), a3);
  }
  v8 = v7;
  if ((_DWORD)v7 && CSChunkDigester_Initialize(**(_QWORD **)(a1 + 48), a3))
  {
    *(_DWORD *)(a1 + 40) = 0;
    return 1;
  }
  return v8;
}

uint64_t CKChunkSignatureGeneratorV2Update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 40) += a3;
  CSChunkDigester_Update(**(_QWORD **)(a1 + 48), a2, a3, 0);
  return 1;
}

uint64_t CKChunkSignatureGeneratorV2Finish(uint64_t a1, uint64_t a2, _QWORD *a3, CFTypeRef *a4)
{
  _BYTE *v5;
  unsigned __int8 *v6;
  CFTypeRef *v7;
  CFTypeRef v8;
  uint64_t v12;
  const __CFData *v13;
  _BYTE *v14;
  uint64_t v15;
  UInt8 *BytePtr;
  const __CFAllocator *v17;
  CFIndex v18;
  const __CFData *v19;
  uint64_t v20;
  uint64_t v21;
  CFTypeRef v22;
  CFErrorRef v24;
  unsigned int v25;
  unsigned int v26;
  _BYTE *v27;
  size_t v28;
  size_t v29;
  unsigned __int8 *v30;
  const UInt8 *v31;
  unsigned __int8 v32;
  CFTypeRef v33;
  CFTypeRef v34;
  CFTypeRef cf;

  v5 = 0;
  v6 = 0;
  v34 = 0;
  cf = 0;
  v7 = (CFTypeRef *)(a1 + 32);
  if (*(_QWORD *)(a1 + 32))
    goto LABEL_2;
  v12 = CKChunkDigestArgumentsV2ChunkKey(*(_QWORD *)(a1 + 24));
  if (v12)
  {
    v13 = (const __CFData *)v12;
    v14 = (_BYTE *)CKChunkDigestResultsChunkSignature(a2);
    v15 = CKChunkSignatureSize(v14);
    v33 = 0;
    BytePtr = (UInt8 *)CFDataGetBytePtr(v13);
    v17 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v18 = CKChunkEncryptionKeySize(BytePtr);
    v19 = CFDataCreate(v17, BytePtr + 1, v18);
    CSChunkDigester_SetKey(**(_QWORD **)(a1 + 48), v19);
    CFRelease(v19);
    if (CSChunkDigester_Verify(**(_QWORD **)(a1 + 48), (uint64_t)(v14 + 1), v15, (CFErrorRef *)&v33)
      && (CKChunkDigestResultsV2Create(v7, v14, BytePtr, *(_DWORD *)(a1 + 40)), (v20 = *(_QWORD *)(a1 + 32)) != 0))
    {
      if (!a2 || CKChunkDigestResultsEqual(v20, a2))
      {
        v5 = 0;
        v6 = 0;
LABEL_2:
        if (a3)
        {
          if (*v7)
          {
            CFRetain(*v7);
            v8 = *v7;
          }
          else
          {
            v8 = 0;
          }
          *a3 = v8;
        }
        v21 = 1;
        v22 = cf;
        goto LABEL_14;
      }
      v24 = CKErrorCreateWithFormat(4, CFSTR("CSChunkDigester_Verify succeeded by chunk digest and expected chunk digest not equal"));
    }
    else
    {
      if (v33)
        CFRelease(v33);
      v33 = 0;
      v24 = CFErrorCreate(v17, CFSTR("com.apple.chunkinglibrary"), 4, 0);
    }
    cf = v24;
    v5 = 0;
    goto LABEL_32;
  }
  LOBYTE(v33) = CKChunkDigestArgumentsChunkSchemeByte(*(_QWORD *)(a1 + 24));
  v5 = (_BYTE *)CKChunkSchemeAndSignatureSize(&v33);
  v25 = CKChunkSignatureSize(&v33);
  if (!v5)
    goto LABEL_32;
  v26 = v25;
  v27 = malloc_type_calloc(1uLL, (size_t)v5, 0x315EF7FuLL);
  v5 = v27;
  if (!v27)
    goto LABEL_32;
  *v27 = (_BYTE)v33;
  if (!CSChunkDigester_Finalize(**(_QWORD **)(a1 + 48), v27 + 1, v26, (CFErrorRef *)&cf))
    goto LABEL_32;
  v32 = CKChunkDigestArgumentsChunkEncryptionKeySchemeByte(*(_QWORD *)(a1 + 24));
  v28 = CKChunkSchemeAndEncryptionKeySize(&v32);
  v29 = CKChunkEncryptionKeySize(&v32);
  v6 = 0;
  if (!CSChunkDigester_ExportCredential(**(_QWORD **)(a1 + 48), (CFMutableDataRef *)&v34, (CFErrorRef *)&cf)|| !v34)
  {
    goto LABEL_33;
  }
  if (v29 != CFDataGetLength((CFDataRef)v34))
  {
LABEL_32:
    v6 = 0;
    goto LABEL_33;
  }
  v30 = (unsigned __int8 *)malloc_type_calloc(1uLL, v28, 0x50F10F6uLL);
  v6 = v30;
  if (v30)
  {
    *v30 = v32;
    v31 = CFDataGetBytePtr((CFDataRef)v34);
    memcpy(v6 + 1, v31, v29);
    CKChunkDigestResultsV2Create(v7, v5, v6, *(_DWORD *)(a1 + 40));
    if (*(_QWORD *)(a1 + 32))
      goto LABEL_2;
  }
LABEL_33:
  v21 = 0;
  v22 = cf;
  if (a4 && cf)
  {
    CFRetain(cf);
    v21 = 0;
    v22 = cf;
    *a4 = cf;
  }
LABEL_14:
  if (v22)
    CFRelease(v22);
  cf = 0;
  if (v34)
    CFRelease(v34);
  v34 = 0;
  free(v5);
  free(v6);
  return v21;
}

uint64_t CSChunkDigester_Destroy(uint64_t a1, CFErrorRef *a2)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t result;
  CFErrorRef v8;

  if (a1 && (v4 = *(_QWORD *)(a1 + 48)) != 0)
  {
    v5 = *(void **)(v4 + 24);
    if (v5)
    {
      free(v5);
      *(_QWORD *)(v4 + 24) = 0;
    }
    v6 = *(const void **)(v4 + 32);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(v4 + 32) = 0;
    }
    if (*(_QWORD *)v4)
      CFRelease(*(CFTypeRef *)v4);
    free((void *)v4);
    *(_QWORD *)(a1 + 48) = 0;
    return 1;
  }
  else
  {
    v8 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFErrorDomain)*MEMORY[0x24BDBD390], 6, 0);
    result = 0;
    *a2 = v8;
  }
  return result;
}

uint64_t _CSChunkDigester_InitializeEmpty(uint64_t a1, CFErrorRef *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  CFErrorRef v8;

  v4 = malloc_type_malloc(0x28uLL, 0x10600406D85BF17uLL);
  if (v4)
  {
    v5 = v4;
    v6 = ccsha256_di();
    v5[2] = v6;
    v5[3] = malloc_type_malloc(*(_QWORD *)(v6 + 8) + *(_QWORD *)(v6 + 16) + 12, 0xCB1A37D6uLL);
    ccdigest_init();
    *((_BYTE *)v5 + 8) = 0;
    *v5 = 0;
    v5[4] = 0;
    result = 1;
    *(_QWORD *)(a1 + 48) = v5;
  }
  else
  {
    v8 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFErrorDomain)*MEMORY[0x24BDBD390], 1, 0);
    result = 0;
    *a2 = v8;
  }
  return result;
}

uint64_t CSChunkDigester_InitializeFromKey(uint64_t a1, const __CFData *a2, CFErrorRef *a3)
{
  uint64_t result;
  uint64_t v7;
  const __CFAllocator *v8;
  CFIndex Length;
  CFMutableDataRef MutableCopy;
  CFErrorRef v11;

  result = _CSChunkDigester_InitializeEmpty(a1, a3);
  if ((_DWORD)result)
  {
    v7 = *(_QWORD *)(a1 + 48);
    v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Length = CFDataGetLength(a2);
    MutableCopy = CFDataCreateMutableCopy(v8, Length, a2);
    *(_QWORD *)(v7 + 32) = MutableCopy;
    if (MutableCopy)
    {
      return 1;
    }
    else
    {
      CSChunkDigester_Destroy(a1, a3);
      v11 = CFErrorCreate(v8, (CFErrorDomain)*MEMORY[0x24BDBD390], 1, 0);
      result = 0;
      *a3 = v11;
    }
  }
  return result;
}

uint64_t CSChunkDigester_Update(uint64_t a1, uint64_t a2, uint64_t a3, CFErrorRef *a4)
{
  uint64_t result;
  CFErrorRef v6;

  if (*(_QWORD *)(a1 + 48))
  {
    ccdigest_update();
    return 1;
  }
  else
  {
    v6 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFErrorDomain)*MEMORY[0x24BDBD390], 7, 0);
    result = 0;
    *a4 = v6;
  }
  return result;
}

uint64_t CSChunkDigester_Finalize(uint64_t a1, void *a2, unsigned int a3, CFErrorRef *a4)
{
  uint64_t v5;
  uint64_t result;
  const UInt8 *BytePtr;
  size_t Length;
  CFErrorRef v11;

  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
  {
    if (*(_BYTE *)(v5 + 8) || (result = _CSChunkDigester_FinalizeDigest(a1, a4), (_DWORD)result))
    {
      BytePtr = CFDataGetBytePtr(*(CFDataRef *)v5);
      if (CFDataGetLength(*(CFDataRef *)v5) <= a3)
        Length = CFDataGetLength(*(CFDataRef *)v5);
      else
        Length = a3;
      memcpy(a2, BytePtr, Length);
      return 1;
    }
  }
  else
  {
    v11 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFErrorDomain)*MEMORY[0x24BDBD390], 7, 0);
    result = 0;
    *a4 = v11;
  }
  return result;
}

uint64_t _CSChunkDigester_FinalizeDigest(uint64_t a1, CFErrorRef *a2)
{
  uint64_t v4;
  const __CFData *v5;
  const __CFAllocator *v6;
  int v7;
  const __CFString *v8;
  CFIndex v9;
  CFErrorRef v10;
  uint64_t result;
  UInt8 bytes[16];
  __int128 v13;
  UInt8 v14[16];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 48);
  if (!*(_QWORD *)(v4 + 32) && !*(_QWORD *)(a1 + 24))
  {
    v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v8 = (const __CFString *)*MEMORY[0x24BDBD390];
    v9 = 6;
    goto LABEL_8;
  }
  ccsha256_di();
  v20 = 0u;
  v21 = 0u;
  (*(void (**)(void))(*(_QWORD *)(v4 + 16) + 56))();
  cc_clear();
  v5 = *(const __CFData **)(v4 + 32);
  if (!v5)
  {
    *(_OWORD *)v14 = 0u;
    v15 = 0u;
    CFDataGetLength(*(CFDataRef *)(a1 + 24));
    CFDataGetBytePtr(*(CFDataRef *)(a1 + 24));
    v7 = cchkdf();
    v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    if (v7)
      goto LABEL_7;
    *(_QWORD *)(v4 + 32) = CFDataCreate(v6, v14, 32);
    cc_clear();
    v5 = *(const __CFData **)(v4 + 32);
  }
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  *(_OWORD *)v14 = 0u;
  v15 = 0u;
  CFDataGetLength(v5);
  CFDataGetBytePtr(*(CFDataRef *)(v4 + 32));
  if (cchkdf())
  {
    v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
LABEL_7:
    v8 = (const __CFString *)*MEMORY[0x24BDBD390];
    v9 = 2;
LABEL_8:
    v10 = CFErrorCreate(v6, v8, v9, 0);
    result = 0;
    *a2 = v10;
    return result;
  }
  *(_OWORD *)bytes = 0u;
  v13 = 0u;
  ccsha256_di();
  cchmac();
  *(_QWORD *)v4 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], bytes, 32);
  result = 1;
  *(_BYTE *)(v4 + 8) = 1;
  return result;
}

void CSChunkDigester_SetKey(uint64_t a1, CFDataRef theData)
{
  uint64_t v2;
  CFDataRef v3;
  const __CFAllocator *v5;
  CFIndex Length;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(CFDataRef *)(v2 + 32);
  if (v3 != theData)
  {
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(v2 + 32) = 0;
    }
    if (theData)
    {
      v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      Length = CFDataGetLength(theData);
      *(_QWORD *)(v2 + 32) = CFDataCreateMutableCopy(v5, Length, theData);
    }
  }
}

uint64_t CSChunkDigester_Verify(uint64_t a1, uint64_t a2, uint64_t a3, CFErrorRef *a4)
{
  uint64_t v5;
  uint64_t result;
  CFErrorRef v7;

  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
  {
    if (*(_BYTE *)(v5 + 8) || (result = _CSChunkDigester_FinalizeDigest(a1, a4), (_DWORD)result))
    {
      CFDataGetBytePtr(*(CFDataRef *)v5);
      return cc_cmp_safe() == 0;
    }
  }
  else
  {
    v7 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFErrorDomain)*MEMORY[0x24BDBD390], 7, 0);
    result = 0;
    *a4 = v7;
  }
  return result;
}

uint64_t CSChunkDigester_ExportCredential(uint64_t a1, CFMutableDataRef *a2, CFErrorRef *a3)
{
  uint64_t v4;
  const __CFData *v5;
  const __CFAllocator *v6;
  CFIndex Length;
  uint64_t result;
  const __CFAllocator *v10;
  const __CFString *v11;
  CFIndex v12;
  CFErrorRef v13;

  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
  {
    v5 = *(const __CFData **)(v4 + 32);
    v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    if (v5)
    {
      Length = CFDataGetLength(v5);
      *a2 = CFDataCreateMutableCopy(v6, Length, *(CFDataRef *)(v4 + 32));
      return 1;
    }
    v11 = (const __CFString *)*MEMORY[0x24BDBD390];
    v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v12 = 3;
  }
  else
  {
    v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v11 = (const __CFString *)*MEMORY[0x24BDBD390];
    v12 = 7;
  }
  v13 = CFErrorCreate(v10, v11, v12, 0);
  result = 0;
  *a3 = v13;
  return result;
}

uint64_t CKFileSignatureGeneratorV2Finalize(uint64_t a1)
{
  return CSContext_Destroy(**(const void ****)(a1 + 48), 0);
}

uint64_t CKFileSignatureGeneratorV2Init(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  const __CFData *v6;
  uint64_t result;
  const __CFData *v8;
  uint64_t v9;
  const __CFData *v10;

  if (CKFileDigestArgumentsGetClass(a2) != 2)
    return 0;
  if (CKFileDigestArgumentsBoundaryKey(a2))
  {
    v6 = (const __CFData *)CKFileDigestArgumentsBoundaryKey(a2);
    result = CSContext_InititializeFromBoundaryKey(v6, 0, *(CFMutableDataRef ***)(a1 + 48), a3);
    if (!(_DWORD)result)
      return result;
  }
  else
  {
    result = CKFileDigestArgumentsFileKey(a2);
    if (!result)
      return result;
    v8 = (const __CFData *)CKFileDigestArgumentsFileKey(a2);
    result = CSContext_InitializeFromFileKey(v8, 0, *(_QWORD **)(a1 + 48), a3);
    if (!(_DWORD)result)
      return result;
  }
  if (CKFileDigestArgumentsBoundaryKey(a2))
  {
    result = CSFileDigester_Initialize(**(_QWORD **)(a1 + 48), a3);
    if (!(_DWORD)result)
      return result;
LABEL_13:
    *(_QWORD *)(a1 + 40) = 0;
    CSFileDigester_Update(**(_QWORD **)(a1 + 48), (uint64_t)"com.apple.DataObjectSaltV2", 26, 0);
    return 1;
  }
  result = CKFileDigestArgumentsFileKey(a2);
  if (result)
  {
    v9 = **(_QWORD **)(a1 + 48);
    v10 = (const __CFData *)CKFileDigestArgumentsFileKey(a2);
    result = CSFileDigester_InitializeFromKey(v9, v10, a3);
    if ((_DWORD)result)
      goto LABEL_13;
  }
  return result;
}

uint64_t CKFileSignatureGeneratorV2Update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  v3 = *(uint64_t **)(a1 + 48);
  *(_QWORD *)(a1 + 40) += a3;
  CSFileDigester_Update(*v3, a2, a3, 0);
  return 1;
}

uint64_t CKFileSignatureGeneratorV2Finish(uint64_t a1, uint64_t a2, _QWORD *a3, CFTypeRef *a4)
{
  CFTypeRef v6;
  _QWORD *v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  const __CFData *v16;
  uint64_t v17;
  const void *v18;
  unsigned int v19;
  unsigned int v20;
  _BYTE *v21;
  char v22;
  CFTypeRef v23;
  CFTypeRef cf;

  cf = 0;
  v7 = (_QWORD *)(a1 + 32);
  v6 = *(CFTypeRef *)(a1 + 32);
  if (v6)
    goto LABEL_2;
  if (a2)
  {
    v13 = (_BYTE *)CKFileDigestResultsFileSignature(a2);
    v14 = CKFileSignatureSize(v13);
    v23 = 0;
    if (!CKFileDigestResultsFileVerificationKey(a2))
      CKFileSignatureGeneratorV2Finish_cold_1();
    v15 = **(_QWORD **)(a1 + 48);
    v16 = (const __CFData *)CKFileDigestResultsFileVerificationKey(a2);
    CSFileDigester_SetKey(v15, v16);
    if (CSFileDigester_Verify(**(_QWORD **)(a1 + 48), (uint64_t)(v13 + 1), v14, (CFErrorRef *)&v23))
    {
      v17 = *(_QWORD *)(a1 + 40);
      v18 = (const void *)CKFileDigestResultsFileVerificationKey(a2);
      CKFileDigestResultsCreate(v7, v13, v17, v18);
      v6 = *(CFTypeRef *)(a1 + 32);
      if (v6)
      {
LABEL_2:
        v8 = 0;
LABEL_3:
        if (a3)
        {
          CFRetain(v6);
          *a3 = *v7;
        }
        v9 = 1;
        v6 = cf;
        goto LABEL_6;
      }
    }
    else
    {
      if (v23)
        CFRelease(v23);
      v23 = 0;
      v6 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], CFSTR("com.apple.chunkinglibrary"), 3, 0);
      cf = v6;
    }
    v8 = 0;
  }
  else
  {
    v22 = CKFileDigestArgumentsFileSchemeByte(*(_QWORD *)(a1 + 24));
    v8 = (_BYTE *)CKFileSchemeAndSignatureSize(&v22);
    v19 = CKFileSignatureSize(&v22);
    v23 = 0;
    if (v8)
    {
      v20 = v19;
      v21 = malloc_type_calloc(1uLL, (size_t)v8, 0x8E7FFDE2uLL);
      v8 = v21;
      if (v21)
      {
        *v21 = v22;
        if (CSFileDigester_Finalize(**(_QWORD **)(a1 + 48), v21 + 1, v20, (CFErrorRef *)&cf))
        {
          if (CSFileDigester_ExportCredential(**(_QWORD **)(a1 + 48), (CFMutableDataRef *)&v23, (CFErrorRef *)&cf)&& v23)
          {
            CKFileDigestResultsV2Create(v7, v8, *(_QWORD *)(a1 + 40), v23);
            if (v23)
              CFRelease(v23);
            v6 = (CFTypeRef)*v7;
            if (*v7)
              goto LABEL_3;
          }
        }
      }
    }
    v6 = cf;
  }
  v9 = 0;
  if (a4 && v6)
  {
    CFRetain(v6);
    v9 = 0;
    v6 = cf;
    *a4 = cf;
  }
LABEL_6:
  if (v6)
    CFRelease(v6);
  cf = 0;
  free(v8);
  return v9;
}

uint64_t cfb_start(_CCCryptor *a1, _OWORD *a2, _QWORD *a3)
{
  _OWORD *v4;
  uint64_t v5;

  if (a3)
  {
    *a3 = 16;
    v4 = a3 + 2;
    if (a2)
    {
      *v4 = *a2;
    }
    else
    {
      *(_QWORD *)v4 = 0;
      a3[3] = 0;
    }
    a3[1] = 0;
    v5 = ecb_encrypt(a1, v4, a3 + 2, 16);
    if ((_DWORD)v5)
      fwrite("Failed to encrypt the IV\n", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
  }
  else
  {
    fwrite("Parameter validation failed!\n", 0x1DuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
    return 4294962996;
  }
  return v5;
}

uint64_t ecb_encrypt(_CCCryptor *a1, void *dataOut, void *dataIn, int a4)
{
  uint64_t v5;
  size_t dataOutMoved;

  dataOutMoved = 0;
  v5 = CCCryptorUpdate(a1, dataIn, a4, dataOut, a4, &dataOutMoved);
  if ((_DWORD)v5 || dataOutMoved != a4)
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Error occurred while encrypting block during chaining mode. status = %d\n", v5);
  return v5;
}

uint64_t cfb_encrypt(_CCCryptor *a1, char *a2, _BYTE *a3, uint64_t a4, _QWORD *a5)
{
  _BYTE *v5;
  unint64_t v8;
  char *v9;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;

  if (!a2 || (v5 = a3) == 0 || !a5)
  {
    fwrite("Parameter validation failed!\n", 0x1DuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
    return 4294962996;
  }
  if (*a5 > 0x80uLL)
    return 4294962996;
  v8 = a5[1];
  if (v8 > 0x7F)
    return 4294962996;
  if (a4)
  {
    v9 = a2;
    do
    {
      if (v8 == *a5)
      {
        v11 = ecb_encrypt(a1, a5 + 2, a5 + 18, v8);
        if ((_DWORD)v11)
        {
          v14 = v11;
          fwrite("Encryption failed!\n", 0x13uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
          return v14;
        }
        v8 = 0;
        a5[1] = 0;
      }
      v12 = *v9++;
      v13 = *((_BYTE *)a5 + v8 + 16) ^ v12;
      *v5++ = v13;
      *((_BYTE *)a5 + a5[1] + 144) = v13;
      v8 = a5[1] + 1;
      a5[1] = v8;
      --a4;
    }
    while (a4);
  }
  return 0;
}

uint64_t cfb_decrypt(_CCCryptor *a1, char *a2, _BYTE *a3, uint64_t a4, _QWORD *a5)
{
  _BYTE *v5;
  unint64_t v8;
  char *v9;
  uint64_t v11;
  char v12;
  uint64_t v13;

  if (!a2 || (v5 = a3) == 0 || !a5)
  {
    fwrite("Parameter validation failed!\n", 0x1DuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
    return 4294962996;
  }
  if (*a5 > 0x80uLL)
    return 4294962996;
  v8 = a5[1];
  if (v8 > 0x7F)
    return 4294962996;
  if (a4)
  {
    v9 = a2;
    do
    {
      if (v8 == *a5)
      {
        v11 = ecb_encrypt(a1, a5 + 2, a5 + 18, v8);
        if ((_DWORD)v11)
        {
          v13 = v11;
          fwrite("Decryption failed!\n", 0x13uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
          return v13;
        }
        v8 = 0;
        a5[1] = 0;
      }
      *((_BYTE *)a5 + v8 + 144) = *v9;
      v12 = *v9++;
      *v5++ = *((_BYTE *)a5 + a5[1] + 16) ^ v12;
      v8 = a5[1] + 1;
      a5[1] = v8;
      --a4;
    }
    while (a4);
  }
  return 0;
}

uint64_t done_unimp()
{
  return 0;
}

uint64_t CKFileDigestArgumentsV1Alloc(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  *a1 = 0;
  v3 = 0;
  result = CKFileDigestArgumentsAllocate(&v3, 1, 4);
  if ((_DWORD)result)
    *a1 = v3;
  return result;
}

uint64_t CKFileDigestArgumentsV1FileScheme(uint64_t a1)
{
  return **(unsigned int **)(a1 + 24);
}

uint64_t CKFileDigestArgumentsV1WithPackageCreate(CFTypeRef *a1, char a2, CFTypeRef *a3)
{
  return _CKFileDigestArgumentsV1Create(a1, 2, a2, a3);
}

CFStringRef CKFileDigestArgumentsV1CopyDescription(uint64_t a1)
{
  const char *v1;

  if (*(_BYTE *)(a1 + 20))
    v1 = (const char *)&unk_20A9A57CA;
  else
    v1 = "un";
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("v1 %sencrypted"), v1);
}

uint64_t CKChunkDigestResultsGetClass(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t CKChunkDigestResultsAllocate(uint64_t *a1, int a2, uint64_t a3)
{
  size_t v5;
  uint64_t v6;
  uint64_t result;

  *a1 = 0;
  v5 = a3 + 56;
  v6 = CKTypeRegister(&CKChunkDigestResultsGetTypeID_typeID);
  result = CKTypeCreateInstance_(0, v6, v5);
  if (result)
  {
    *(_DWORD *)(result + 16) = a2;
    *(_QWORD *)(result + 48) = result + 56;
    *a1 = result;
    return 1;
  }
  return result;
}

uint64_t _CKChunkDigestResultsInit(uint64_t a1, _BYTE *a2, unsigned __int8 *a3, int a4, _QWORD *a5)
{
  if (a5)
    *a5 = 0;
  *(_QWORD *)(a1 + 24) = CKChunkSignatureCopy(a2);
  if (a3)
    *(_QWORD *)(a1 + 32) = CKChunkEncryptionKeyCopy(a3);
  *(_DWORD *)(a1 + 40) = a4;
  return 1;
}

uint64_t CKChunkDigestResultsSignatureAndKeyEqual(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  if (a1 == a2)
    return 1;
  v2 = 0;
  if (a1 && a2)
  {
    v3 = *(int *)(a1 + 16);
    if ((_DWORD)v3 == *(_DWORD *)(a2 + 16))
    {
      v4 = (uint64_t (*)(void))_requestCallbacks_5[2 * v3];
      if (v4)
        return v4();
    }
    return 0;
  }
  return v2;
}

uint64_t CKChunkDigestResultsChunkKey(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t CKChunkDigestResultsChunkSignature(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t CKChunkDigestResultsChunkLength(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t CKChunkDigestResultsCreate(_QWORD *a1, _BYTE *a2, unsigned __int8 *a3, int a4)
{
  int v4;

  if (!a1)
    return 0;
  *a1 = 0;
  v4 = *a2 & 0x7F;
  if (v4 != 4)
  {
    if (v4 == 1)
      return CKChunkDigestResultsV1Create(a1, a2, a3, a4);
    return 0;
  }
  return CKChunkDigestResultsV2Create(a1, a2, a3, a4);
}

uint64_t CKChunkDigestResultsEqual(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a1 == a2)
    return 1;
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
    return 0;
  result = CKChunkSignaturesEqual(*(_BYTE **)(a1 + 24), *(_BYTE **)(a2 + 24));
  if ((_DWORD)result)
  {
    result = CKChunkKeysEqual(*(unsigned __int8 **)(a1 + 32), *(unsigned __int8 **)(a2 + 32));
    if ((_DWORD)result)
      return *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  }
  return result;
}

void _CKChunkDigestResultsCFFinalize(uint64_t a1)
{
  uint64_t v2;

  v2 = *(int *)(a1 + 16);
  if ((_DWORD)v2)
    ((void (*)(uint64_t))_requestCallbacks_5[2 * v2 + 1])(a1);
  free(*(void **)(a1 + 24));
  free(*(void **)(a1 + 32));
}

BOOL _CKChunkDigestResultsCFEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

CFStringRef _CKChunkDigestResultsCFCopyFormatDescription(uint64_t a1)
{
  void *v2;
  const char *v3;
  CFStringRef v4;

  v2 = CKChunkSchemeAndSignatureCopyCString(*(char **)(a1 + 24));
  v3 = "present";
  if (!*(_QWORD *)(a1 + 32))
    v3 = "not-present";
  v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("sig %s key %s len %lu"), v2, v3, *(unsigned int *)(a1 + 40));
  free(v2);
  return v4;
}

CFTypeRef CKBaseRetain(CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  return cf;
}

void CKBaseRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

CFTypeRef CKBaseRetainCallBack(int a1, CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  return cf;
}

void CKBaseReleaseCallBack(int a1, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

BOOL CKPointerEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t CKChunkDigestResultsV2Alloc(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  *a1 = 0;
  v3 = 0;
  result = CKChunkDigestResultsAllocate(&v3, 2, 0);
  if ((_DWORD)result)
    *a1 = v3;
  return result;
}

uint64_t CKChunkDigestResultsV2Create(_QWORD *a1, _BYTE *a2, unsigned __int8 *a3, int a4)
{
  uint64_t v8;
  CFTypeRef v9;
  CFTypeRef cf;
  CFTypeRef v12;

  cf = 0;
  v12 = 0;
  *a1 = 0;
  v8 = 0;
  if (CKChunkDigestResultsAllocate((uint64_t *)&cf, 2, 0) && cf)
  {
    if (_CKChunkDigestResultsInit((uint64_t)cf, a2, a3, a4, &v12))
    {
      if (cf)
      {
        CFRetain(cf);
        v9 = cf;
      }
      else
      {
        v9 = 0;
      }
      *a1 = v9;
      v8 = 1;
    }
    else
    {
      v8 = 0;
    }
  }
  if (v12)
    CFRelease(v12);
  if (cf)
    CFRelease(cf);
  return v8;
}

BOOL CKChunkDigestResultsV2SignatureAndKeyEqual(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  result = 0;
  if (a1 && a2)
  {
    if (a1 == a2)
      return 1;
    if (*(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
    {
      result = CKChunkSignaturesEqual(*(_BYTE **)(a1 + 24), *(_BYTE **)(a2 + 24));
      if (!result)
        return result;
      v5 = *(unsigned __int8 **)(a1 + 32);
      v6 = *(unsigned __int8 **)(a2 + 32);
      if (!((unint64_t)v5 | (unint64_t)v6))
        return 1;
      return CKChunkKeysEqual(v5, v6);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFErrorRef _CKNoMemoryErrorInit(CFDictionaryRef userInfo)
{
  CFErrorRef result;

  result = CFErrorCreate(0, CFSTR("com.apple.chunkinglibrary"), 2, userInfo);
  sNoMemoryError = (uint64_t)result;
  return result;
}

uint64_t CKLibraryInit()
{
  return pthread_once(&sOnceForLibrary, _CKInitOnceForLibrary);
}

uint64_t CKNoMemoryErrorCreate()
{
  if (!sNoMemoryError)
    abort();
  CFRetain((CFTypeRef)sNoMemoryError);
  return sNoMemoryError;
}

void CKUserInfoAddDescription(__CFDictionary *a1, void *value)
{
  if (value)
  {
    CFDictionarySetValue(a1, (const void *)*MEMORY[0x24BDBD378], value);
    CFDictionarySetValue(a1, (const void *)*MEMORY[0x24BDBD3A0], value);
  }
}

CFErrorRef CKErrorCreateWithUserInfo(const __CFString *a1, CFIndex a2, const __CFDictionary *a3)
{
  const __CFDictionary *v6;
  CFErrorRef result;

  pthread_once(&sOnceForLibrary, _CKInitOnceForLibrary);
  if (a3)
  {
    if (CFDictionaryGetCount(a3))
      v6 = a3;
    else
      v6 = 0;
  }
  else
  {
    v6 = 0;
  }
  result = CFErrorCreate(0, a1, a2, v6);
  if (!result)
    return (CFErrorRef)CKNoMemoryErrorCreate();
  return result;
}

CFErrorRef CKErrorCreate(const __CFString *a1, CFIndex a2, const __CFDictionary *a3, void *a4)
{
  __CFDictionary *Mutable;
  CFIndex Count;
  const void **v10;
  const void **v11;
  const void **v12;
  const void **v13;
  const void *v14;
  const void *v15;
  const void *v16;
  CFErrorRef v17;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  CKUserInfoAddDescription(Mutable, a4);
  if (a3)
  {
    Count = CFDictionaryGetCount(a3);
    v10 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
    v11 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues(a3, v10, v11);
    if (Count >= 1)
    {
      v12 = v10;
      v13 = v11;
      do
      {
        v15 = *v12++;
        v14 = v15;
        v16 = *v13++;
        CFDictionarySetValue(Mutable, v14, v16);
        --Count;
      }
      while (Count);
    }
    free(v10);
    free(v11);
  }
  v17 = CKErrorCreateWithUserInfo(a1, a2, Mutable);
  if (Mutable)
    CFRelease(Mutable);
  return v17;
}

CFErrorRef CKInternalErrorCreateWithFormat(unsigned int a1, const __CFDictionary *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  __CFString *v11;
  CFErrorRef v12;

  v11 = (__CFString *)CFStringCreateWithFormatAndArguments(0, 0, a3, &a9);
  v12 = CKErrorCreate(CFSTR("com.apple.chunkinglibrary.internal"), a1, a2, v11);
  if (v11)
    CFRelease(v11);
  return v12;
}

CFErrorRef CKErrorCreateWithFormat(CFIndex a1, CFStringRef format, ...)
{
  __CFString *v3;
  CFErrorRef v4;
  va_list va;

  va_start(va, format);
  v3 = (__CFString *)CFStringCreateWithFormatAndArguments(0, 0, format, va);
  v4 = CKErrorCreate(CFSTR("com.apple.chunkinglibrary"), a1, 0, v3);
  if (v3)
    CFRelease(v3);
  return v4;
}

CFErrorRef CKInternalWrappingErrorCreateWithFormat(unsigned int a1, const void *a2, const __CFDictionary *a3, const __CFString *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  __CFDictionary *Mutable;
  __CFDictionary *v14;
  CFIndex Count;
  const void **v16;
  const void **v17;
  const void **v18;
  const void **v19;
  const void *v20;
  const void *v21;
  const void *v22;
  __CFString *v23;
  CFErrorRef v24;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v14 = Mutable;
  if (a2)
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BDBD3B0], a2);
  if (a3)
  {
    Count = CFDictionaryGetCount(a3);
    v16 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
    v17 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues(a3, v16, v17);
    if (Count >= 1)
    {
      v18 = v16;
      v19 = v17;
      do
      {
        v21 = *v18++;
        v20 = v21;
        v22 = *v19++;
        CFDictionarySetValue(v14, v20, v22);
        --Count;
      }
      while (Count);
    }
    free(v16);
    free(v17);
  }
  v23 = (__CFString *)CFStringCreateWithFormatAndArguments(0, 0, a4, &a9);
  v24 = CKErrorCreate(CFSTR("com.apple.chunkinglibrary.internal"), a1, v14, v23);
  if (v14)
    CFRelease(v14);
  if (v23)
    CFRelease(v23);
  return v24;
}

CFErrorRef CKSQLiteErrorCreateWithFormat(int a1, CFStringRef format, ...)
{
  __CFString *v3;
  CFErrorRef v4;
  va_list va;

  va_start(va, format);
  v3 = (__CFString *)CFStringCreateWithFormatAndArguments(0, 0, format, va);
  v4 = CKErrorCreate(CFSTR("com.apple.chunkinglibrary.sqlite"), a1, 0, v3);
  if (v3)
    CFRelease(v3);
  return v4;
}

CFErrorRef CKPOSIXErrorCreateWithFormat(int a1, CFStringRef format, ...)
{
  __CFString *v3;
  CFErrorRef v4;
  va_list va;

  va_start(va, format);
  v3 = (__CFString *)CFStringCreateWithFormatAndArguments(0, 0, format, va);
  v4 = CKErrorCreate((const __CFString *)*MEMORY[0x24BDBD390], a1, 0, v3);
  if (v3)
    CFRelease(v3);
  return v4;
}

CFErrorRef CKCreateInternalReadOnlyError(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return CKInternalErrorCreateWithFormat(1u, 0, CFSTR("Attempted to call %s, but chunk store is read-only"), a4, a5, a6, a7, a8, a1);
}

CFErrorRef CKCreateInternalWrongStoreError(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return CKInternalErrorCreateWithFormat(2u, 0, CFSTR("Attempted to call %s, but chunk store is %s"), a4, a5, a6, a7, a8, a1);
}

void _CKInitOnceForLibrary()
{
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD2A8], MEMORY[0x24BDBD6B0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BDBD378], CFSTR("Memory could not be allocated for the intended error"));
  sNoMemoryError = (uint64_t)CFErrorCreate(0, CFSTR("com.apple.chunkinglibrary"), 2, Mutable);
  if (Mutable)
    CFRelease(Mutable);
}

uint64_t CKChunkDigestArgumentsV1Alloc(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  *a1 = 0;
  v3 = 0;
  result = CKChunkDigestArgumentsAllocate(&v3, 1, 0);
  if ((_DWORD)result)
    *a1 = v3;
  return result;
}

uint64_t CKChunkDigestArgumentsV1ChunkScheme()
{
  return 1;
}

BOOL CKChunkDigestArgumentsV1ChunkKeyScheme(uint64_t a1)
{
  return *(_BYTE *)(a1 + 20) != 0;
}

uint64_t CKChunkDigestArgumentsV1ChunkSchemeByte(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 20))
    return 129;
  else
    return 1;
}

CFStringRef CKChunkDigestArgumentsV1CopyDescription(uint64_t a1)
{
  const char *v1;

  if (*(_BYTE *)(a1 + 20))
    v1 = "encrypted";
  else
    v1 = "unencrypted";
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("v1 %s"), v1);
}

uint64_t CKChunkDigestArgumentsV1Create(_QWORD *a1, char a2, CFTypeRef *a3)
{
  int v6;
  uint64_t v7;
  CFTypeRef v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef cf;
  CFTypeRef v13;

  cf = 0;
  v13 = 0;
  *a1 = 0;
  v6 = CKChunkDigestArgumentsAllocate((uint64_t *)&cf, 1, 0);
  v7 = 0;
  v8 = cf;
  if (v6 && cf)
  {
    if (_CKChunkDigestArgumentsInit((uint64_t)cf, a2, &v13))
    {
      if (cf)
      {
        CFRetain(cf);
        v9 = cf;
      }
      else
      {
        v9 = 0;
      }
      *a1 = v9;
      v7 = 1;
      v10 = v13;
    }
    else
    {
      v7 = 0;
      v10 = v13;
      if (a3 && v13)
      {
        CFRetain(v13);
        v7 = 0;
        v10 = v13;
        *a3 = v13;
      }
    }
    if (v10)
      CFRelease(v10);
    v8 = cf;
  }
  if (v8)
    CFRelease(v8);
  return v7;
}

void adaptive_chunk_size(unsigned int a1, unint64_t a2, unsigned int a3, unsigned int *a4, _DWORD *a5, unsigned int *a6, int *a7)
{
  double v13;
  double v14;
  double v15;
  unsigned int v16;
  unsigned int v17;
  double v18;
  unsigned int v19;
  int v20;

  v13 = (double)a2;
  v14 = (double)a3;
  v15 = log2(ceil((double)a2 / (double)a3 / (double)a1));
  v16 = vcvtpd_u64_f64(exp2(ceil(v15)));
  v17 = vcvtpd_u64_f64(v13 / (v14 * (double)v16));
  if (v16 < 2)
  {
    v19 = 0;
    v20 = 0;
  }
  else
  {
    v18 = v14 * (double)(v16 >> 1);
    v17 = 2 * v17 - a1 - (vcvtpd_u64_f64(v13 / v18) & 1);
    v19 = vcvtpd_u64_f64((v13 + -((double)v17 * (double)v16) * v14) / v18);
    v20 = (v16 >> 1) * a3;
  }
  *a4 = v17;
  *a5 = v16 * a3;
  *a6 = v19;
  *a7 = v20;
  if (!a3)
    adaptive_chunk_size_cold_1();
}

size_t create_sqlite3_db_s_profile(_QWORD *a1, uint64_t **a2, _DWORD *a3, _BYTE *a4)
{
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  size_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  CFStringRef v19;
  NSObject *v20;
  unsigned int v22;
  uint64_t v23;
  uint8_t buf[4];
  CFStringRef v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a3)
    *a3 = 9;
  if (a4)
    *a4 = 0;
  v6 = a1[29];
  v7 = a1[10] - v6;
  if (v7 > 0x1000)
  {
    *(_DWORD *)buf = 0;
    v23 = 0;
    v22 = 0;
    adaptive_chunk_size(0x270Fu, v7 - 4096, 0x1000u, (unsigned int *)buf, (_DWORD *)&v23 + 1, (unsigned int *)&v23, (int *)&v22);
    v8 = v23;
    if ((_DWORD)v23)
      v9 = 3;
    else
      v9 = 2;
    v10 = (uint64_t *)malloc_type_calloc(v9, 0x38uLL, 0x1000040C4DFEAEFuLL);
    if (v10)
    {
      v11 = v10;
      if ((unint64_t)(v6 + 4096) >= a1[10])
        v12 = a1[10];
      else
        v12 = v6 + 4096;
      *((_BYTE *)v10 + 52) = 1;
      *v10 = v12 - 1;
      v10[1] = 4096;
      *((_DWORD *)v10 + 8) = 4;
      v10[3] = 0;
      v13 = HIDWORD(v23);
      v14 = v12 + HIDWORD(v23) * (unint64_t)*(unsigned int *)buf;
      if (v14 >= a1[10])
        v14 = a1[10];
      *((_BYTE *)v10 + 108) = 1;
      v10[7] = v14 - 1;
      v10[8] = v13;
      *((_DWORD *)v10 + 22) = 4;
      v10[10] = 0;
      if (v8)
      {
        v15 = v22;
        v16 = v14 + v22 * (unint64_t)v8;
        if (v16 >= a1[10])
          v16 = a1[10];
        *((_BYTE *)v10 + 164) = 1;
        v10[14] = v16 - 1;
        v10[15] = v15;
        *((_DWORD *)v10 + 36) = 4;
        v10[17] = 0;
      }
      goto LABEL_21;
    }
    return 0;
  }
  v9 = 1;
  v17 = (uint64_t *)malloc_type_calloc(1uLL, 0x38uLL, 0x1000040C4DFEAEFuLL);
  if (!v17)
    return 0;
  v11 = v17;
  v18 = a1[10] - 1;
  *((_BYTE *)v17 + 52) = 1;
  *v17 = v18;
  v17[1] = 4096;
  *((_DWORD *)v17 + 8) = 4;
  v17[3] = 0;
LABEL_21:
  *a2 = v11;
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_10);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
    {
      v19 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("returning %u sections for \"%s\"\n"), v9, a1[13]);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_20);
      v20 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        v25 = v19;
        _os_log_impl(&dword_20A95C000, v20, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v19)
        CFRelease(v19);
    }
    print_sections(v11, v9);
  }
  return v9;
}

os_log_t __create_sqlite3_db_s_profile_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_sqlite3_db_s_profile_block_invoke_3()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

void print_sections(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFAllocator *v6;
  uint64_t v7;
  const char *v8;
  CFStringRef v9;
  NSObject *v10;
  uint64_t v11;
  uint8_t buf[4];
  CFStringRef v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = 0;
    v4 = 0;
    v5 = a2;
    v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    do
    {
      v7 = *a1;
      if (gVerbose == 2)
      {
        if (CK_DEFAULT_LOG_BLOCK_9 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_90_0);
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
          && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          v8 = "F";
          if (!*((_BYTE *)a1 + 52))
            v8 = "R";
          v9 = CFStringCreateWithFormat(v6, 0, CFSTR("section[%u/%u]: [%s] sz:%lld(0x%llx) [0x%llx-0x%llx), ap:0x%llx, cc:%u\n"), v3, v5, v8, v7 - v4, v7 - v4, v4, *a1, a1[5], *((unsigned int *)a1 + 12));
          if (CK_DEFAULT_LOG_BLOCK_9 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_97_0);
          v10 = CK_DEFAULT_LOG_INTERNAL_9;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138543362;
            v13 = v9;
            _os_log_impl(&dword_20A95C000, v10, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
          }
          if (v9)
            CFRelease(v9);
        }
      }
      v11 = *a1;
      a1 += 7;
      v4 = v11;
      ++v3;
    }
    while (v5 != v3);
  }
}

uint64_t createChunkProfile(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  char *v6;
  int v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  CFTypeID v11;
  const __CFNumber *v12;
  const __CFNumber *v13;
  CFTypeID v14;
  int Value;
  int v16;
  _BOOL4 v17;
  uint64_t v18;
  const __CFString *v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  char *v23;
  CFStringRef v24;
  NSObject *v25;
  NSObject *v26;
  CFTypeID v27;
  uint64_t (*v28)(uint64_t, uint64_t **, _DWORD *, _BYTE *);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  CFStringRef v32;
  NSObject *v33;
  _QWORD *v34;
  CFStringRef v35;
  char *v36;
  NSObject *v37;
  int v38;
  uint64_t (*v39)(uint64_t, _QWORD *, uint8_t *, unint64_t *);
  uint64_t v40;
  NSObject *v41;
  const char *v42;
  const char *v43;
  const char *v44;
  uint64_t *v45;
  int v47;
  const char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  size_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  const void *v60;
  const void *v61;
  CFTypeID v62;
  const __CFDictionary *v63;
  const void *v64;
  const void *v65;
  uint64_t *v66;
  char *v67;
  CFTypeID v68;
  int v69;
  unsigned int v70;
  CFTypeID v71;
  CFStringRef v72;
  NSObject *v73;
  CFStringRef v74;
  NSObject *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  CFStringRef v79;
  NSObject *v80;
  BOOL v81;
  _QWORD *v82;
  char *v83;
  _QWORD *v84;
  uint64_t v85;
  char *__s;
  unint64_t v87;
  _OWORD valuePtr[2];
  _OWORD v89[2];
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint8_t buf[4];
  CFStringRef v103;
  uint64_t v104;

  v4 = a2;
  v104 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  v85 = *(_QWORD *)(a1 + 104);
  __s = *(char **)(a1 + 96);
  v6 = copy_lowercase_suffix_for_type_hint(__s);
  v7 = *(_DWORD *)(a1 + 216);
  v8 = *(_QWORD *)(a1 + 16);
  if (*(int *)v8 < 3)
    goto LABEL_13;
  v9 = (const void *)(*(uint64_t (**)(_QWORD, const __CFString *))(v8 + 96))(*(_QWORD *)(a1 + 8), CFSTR("kCKItemChunkProfileConfigurationVersion"));
  v10 = v9;
  if (!v9)
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    goto LABEL_14;
  }
  v11 = CFGetTypeID(v9);
  if (v11 != CFStringGetTypeID())
  {
    CFRelease(v10);
LABEL_13:
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v10 = 0;
    goto LABEL_14;
  }
  CFRetain(v10);
  CFRelease(v10);
  v12 = (const __CFNumber *)(*(uint64_t (**)(_QWORD, const __CFString *))(*(_QWORD *)(a1 + 16) + 96))(*(_QWORD *)(a1 + 8), CFSTR("kCKItemChunkProfileConfigurationDefaultProfilePolicy"));
  if (v12)
  {
    v13 = v12;
    v14 = CFGetTypeID(v12);
    if (v14 == CFNumberGetTypeID())
    {
      LODWORD(valuePtr[0]) = 0;
      Value = CFNumberGetValue(v13, kCFNumberSInt32Type, valuePtr);
      v16 = valuePtr[0];
      if (LODWORD(valuePtr[0]) >= 2)
        v16 = 0;
      if (Value)
        v17 = v16;
      else
        v17 = 0;
    }
    else
    {
      v27 = CFGetTypeID(v13);
      v17 = v27 == CFStringGetTypeID() && CKDefaultProfilePolicyTypeFromString(v13);
    }
    CFRelease(v13);
  }
  else
  {
    v17 = 0;
  }
  v60 = (const void *)(*(uint64_t (**)(_QWORD, const __CFString *))(*(_QWORD *)(a1 + 16) + 96))(*(_QWORD *)(a1 + 8), CFSTR("kCKItemChunkProfileConfigurationFileExtensionToProfileMap"));
  if (v60)
  {
    v61 = v60;
    v62 = CFGetTypeID(v60);
    if (v62 == CFDictionaryGetTypeID())
    {
      CFRetain(v61);
      v63 = (const __CFDictionary *)v61;
    }
    else
    {
      v63 = 0;
    }
    CFRelease(v61);
    if (v6 && v63)
    {
      v64 = CFDictionaryGetValue(v63, v6);
      if (!v64)
      {
        v18 = 0;
        v19 = CFSTR("Unknown");
LABEL_219:
        CFRetain(v10);
        CFRetain(v19);
        CFRelease(v10);
        CFRelease(v19);
        goto LABEL_220;
      }
      v65 = v64;
      v84 = v4;
      v66 = a3;
      v67 = v6;
      CFRetain(v6);
      v68 = CFGetTypeID(v65);
      if (v68 == CFNumberGetTypeID())
      {
        LODWORD(valuePtr[0]) = 0;
        v69 = CFNumberGetValue((CFNumberRef)v65, kCFNumberSInt32Type, valuePtr);
        if (LODWORD(valuePtr[0]) >= 0xA)
          v70 = 0;
        else
          v70 = valuePtr[0];
        if (!v69)
          goto LABEL_159;
      }
      else
      {
        v71 = CFGetTypeID(v65);
        if (v71 != CFStringGetTypeID())
        {
LABEL_159:
          v18 = 0;
          v6 = v67;
          v19 = (const __CFString *)v67;
          a3 = v66;
LABEL_190:
          v4 = v84;
          goto LABEL_219;
        }
        v70 = CKProfileTypeFromString(v65);
      }
      v6 = v67;
      a3 = v66;
      if (v70 <= 5)
      {
        v4 = v84;
        if (((0x2Fu >> v70) & 1) != 0)
          v18 = dword_20A9A5698[v70];
        else
          v18 = 0;
        v19 = (const __CFString *)v6;
        goto LABEL_219;
      }
      v18 = 0;
      v19 = (const __CFString *)v6;
      goto LABEL_190;
    }
  }
  else
  {
    v63 = 0;
  }
  CFRetain(v10);
  CFRelease(v10);
  v19 = 0;
  v18 = 0;
  if (v63)
LABEL_220:
    CFRelease(v63);
LABEL_14:
  if (!v7)
  {
    if (getenv("CK_CHUNK_DEFAULT"))
    {
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_23_0);
      v21 = 2;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        v20 = 0;
        goto LABEL_43;
      }
      v82 = v4;
      v22 = a3;
      v23 = v6;
      v24 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Using Rabin chunking on \"%s\" (CK_CHUNK_DEFAULT)\n"), v85);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_27_0);
      v25 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(valuePtr[0]) = 138543362;
        *(_QWORD *)((char *)valuePtr + 4) = v24;
        _os_log_impl(&dword_20A95C000, v25, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)valuePtr, 0xCu);
      }
      v21 = 2;
      if (!v24)
        goto LABEL_26;
    }
    else
    {
      if (!getenv("CK_FIXED_CHUNK"))
      {
        v21 = 0;
        v20 = 1;
        goto LABEL_43;
      }
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_31);
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        v20 = 0;
        v21 = 1;
        goto LABEL_43;
      }
      v82 = v4;
      v22 = a3;
      v23 = v6;
      v24 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("Using fixed size chunking on \"%s\" (CK_FIXED_CHUNK)\n"), v85);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_36_0);
      v26 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(valuePtr[0]) = 138543362;
        *(_QWORD *)((char *)valuePtr + 4) = v24;
        _os_log_impl(&dword_20A95C000, v26, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)valuePtr, 0xCu);
      }
      v21 = 1;
      if (!v24)
        goto LABEL_26;
    }
    CFRelease(v24);
LABEL_26:
    v20 = 0;
    v6 = v23;
    a3 = v22;
    v4 = v82;
    goto LABEL_43;
  }
  v20 = 0;
  v21 = 6;
LABEL_43:
  if (v17)
    goto LABEL_44;
  v29 = *(_QWORD *)(a1 + 144);
  if (!v29)
    goto LABEL_51;
  if (CKFileDigestArgumentsFileScheme(v29) == 2)
    createChunkProfile_cold_4();
  v30 = *(_QWORD *)(a1 + 144);
  if (!v30)
    goto LABEL_51;
  if (CKFileDigestArgumentsFileScheme(v30) == 8)
    createChunkProfile_cold_5();
  v31 = *(_QWORD *)(a1 + 144);
  if (v31 && CKFileDigestArgumentsFileScheme(v31) == 4)
LABEL_44:
    v28 = create_default_fixed_profile;
  else
LABEL_51:
    v28 = create_safe_rabin_profile;
  *(_QWORD *)(a1 + 168) = v28;
  if (!v20)
    goto LABEL_67;
  if (*(_DWORD *)(a1 + 220))
  {
    if (gVerbose != 2)
      goto LABEL_66;
    if (CK_DEFAULT_LOG_BLOCK_9 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_41_1);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
    {
      v32 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("fixed size chunking requested with %llu bytes per chunk"), *(unsigned int *)(a1 + 220));
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_48);
      v33 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(valuePtr[0]) = 138543362;
        *(_QWORD *)((char *)valuePtr + 4) = v32;
        _os_log_impl(&dword_20A95C000, v33, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)valuePtr, 0xCu);
      }
      if (v32)
        CFRelease(v32);
      v21 = 1;
    }
    else
    {
LABEL_66:
      v21 = 1;
    }
LABEL_67:
    if (v19)
    {
      CFRelease(v19);
      v19 = 0;
    }
    goto LABEL_69;
  }
  if ((_DWORD)v18)
  {
    v21 = v18;
LABEL_69:
    v34 = &new_ringing[224];
    goto LABEL_70;
  }
  v47 = *(unsigned __int8 *)(a1 + 160);
  if (v47 == 3)
  {
    v48 = "dflt";
    v49 = 80;
  }
  else
  {
    if (v47 != 5)
      createChunkProfile_cold_1();
    v48 = "dflt";
    v49 = 99;
  }
  v83 = v6;
  v50 = copy_lowercase_suffix_for_type_hint(__s);
  if (v50)
  {
    v51 = v50;
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    memset(v89, 0, sizeof(v89));
    memset(valuePtr, 0, sizeof(valuePtr));
    if (CFStringGetCString((CFStringRef)v50, (char *)valuePtr, 256, 0x8000100u))
    {
      v52 = strlen((const char *)valuePtr);
      v53 = 0xFFFFFFFFLL;
      while (v52 != strlen(v48) || strncasecmp((const char *)valuePtr, v48, v52))
      {
        --v53;
        v48 += 24;
        if (!--v49)
          goto LABEL_122;
      }
      CFRelease(v51);
      if (v53)
      {
        v21 = *((unsigned int *)v48 + 5);
        if (gVerbose == 2)
        {
          if (CK_DEFAULT_LOG_BLOCK_9 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_52);
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
            && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
          {
            v74 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("suffix_index_for_type_hint(typeHint:\"%s\", \"%s\") returned type:%d\n"), __s, v85, v21);
            if (CK_DEFAULT_LOG_BLOCK_9 != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_60_0);
            v75 = CK_DEFAULT_LOG_INTERNAL_9;
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
            {
              LODWORD(valuePtr[0]) = 138543362;
              *(_QWORD *)((char *)valuePtr + 4) = v74;
              _os_log_impl(&dword_20A95C000, v75, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)valuePtr, 0xCu);
            }
            if (v74)
              CFRelease(v74);
          }
        }
        if ((_DWORD)v21)
          goto LABEL_134;
      }
    }
    else
    {
LABEL_122:
      CFRelease(v51);
    }
  }
  v54 = *(_QWORD *)(a1 + 16);
  if (!v54)
    createChunkProfile_cold_2();
  v55 = *(_QWORD *)(a1 + 8);
  v56 = *(_QWORD *)(a1 + 232);
  v57 = *(_QWORD *)(a1 + 80);
  bzero((char *)&valuePtr[1] + 8, 0x208uLL);
  *(_QWORD *)&valuePtr[0] = v54;
  *((_QWORD *)&valuePtr[0] + 1) = v57;
  *(_QWORD *)&valuePtr[1] = v56;
  if (v57 >= 0x200)
    v58 = 512;
  else
    v58 = v57;
  v87 = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, _OWORD *, uint64_t, unint64_t *, _QWORD))(v54 + 72))(v55, v56, v89, v58, &v87, 0))
  {
    v21 = 0;
LABEL_134:
    v6 = v83;
    v34 = new_ringing + 1792;
    goto LABEL_70;
  }
  v59 = v87;
  *((_QWORD *)&valuePtr[1] + 1) = v87;
  v34 = &new_ringing[224];
  if (v87 >= 4)
  {
    v21 = 3;
    if (LODWORD(v89[0]) == 67324752 || LODWORD(v89[0]) == 101010256)
      goto LABEL_162;
  }
  if (is_ID3v2_tag((uint64_t)v89, v87))
  {
    v21 = 4;
LABEL_162:
    v6 = v83;
    goto LABEL_163;
  }
  if (v59 < 0xC)
  {
    v21 = 0;
    goto LABEL_162;
  }
  v76 = DWORD1(v89[0]);
  v6 = v83;
  if (DWORD1(v89[0]) != 1887007846 && DWORD1(v89[0]) != 1987014509 && DWORD1(v89[0]) != 1952539757)
  {
    v21 = 0;
    goto LABEL_163;
  }
  v77 = 0;
  LODWORD(v78) = 0;
  do
    v78 = *((unsigned __int8 *)v89 + v77++) | ((_DWORD)v78 << 8);
  while (v77 != 4);
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_207_1);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
    {
      v79 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("qt sz:0x%x, has_type:%d, \"%c%c%c%c\"\n"), v78, v76 == 1887007846, BYTE8(v89[0]), BYTE9(v89[0]), BYTE10(v89[0]), BYTE11(v89[0]));
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_213_1);
      v80 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        v103 = v79;
        _os_log_impl(&dword_20A95C000, v80, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v79)
        CFRelease(v79);
    }
  }
  if (v76 != 1887007846)
  {
    if (v78 >= 8)
    {
      v21 = 5;
      v34 = new_ringing + 1792;
      goto LABEL_162;
    }
    goto LABEL_223;
  }
  if (v78 < 0xC)
  {
LABEL_223:
    v21 = 0;
    v34 = new_ringing + 1792;
    goto LABEL_163;
  }
  v81 = WORD4(v89[0]) == 28781 && BYTE10(v89[0]) == 52;
  v21 = 5;
  v34 = new_ringing + 1792;
  if (v81 || DWORD2(v89[0]) == 538997873 || DWORD2(v89[0]) == 542520397 || DWORD2(v89[0]) == 541144141)
    goto LABEL_162;
  v21 = 0;
  v6 = v83;
LABEL_163:
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_63_2);
    if (os_log_type_enabled((os_log_t)v34[313], OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)v34[313], OS_LOG_TYPE_DEBUG))
    {
      v72 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("profile_type_for_content(\"%s\") returned type:%d\n"), v85, v21);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_71_0);
      v73 = v34[313];
      if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(valuePtr[0]) = 138543362;
        *(_QWORD *)((char *)valuePtr + 4) = v72;
        _os_log_impl(&dword_20A95C000, v73, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)valuePtr, 0xCu);
      }
      if (v72)
        CFRelease(v72);
      v6 = v83;
    }
  }
LABEL_70:
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_74);
    if (os_log_type_enabled((os_log_t)v34[313], OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)v34[313], OS_LOG_TYPE_DEBUG))
    {
      v35 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("type:%d, typeHint:\"%s\""), v21, __s);
      v36 = v6;
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_82_0);
      v37 = v34[313];
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(valuePtr[0]) = 138543362;
        *(_QWORD *)((char *)valuePtr + 4) = v35;
        _os_log_impl(&dword_20A95C000, v37, OS_LOG_TYPE_DEBUG, "%{public}@", (uint8_t *)valuePtr, 0xCu);
      }
      v6 = v36;
      if (v35)
        CFRelease(v35);
    }
  }
  v38 = 0;
  v39 = (uint64_t (*)(uint64_t, _QWORD *, uint8_t *, unint64_t *))create_default_fixed_profile;
  switch((int)v21)
  {
    case 1:
    case 5:
      break;
    case 2:
      v38 = 0;
      v39 = (uint64_t (*)(uint64_t, _QWORD *, uint8_t *, unint64_t *))create_safe_rabin_profile;
      break;
    case 3:
      v38 = 0;
      v39 = (uint64_t (*)(uint64_t, _QWORD *, uint8_t *, unint64_t *))create_zip_profile;
      break;
    case 4:
      v38 = 0;
      v39 = (uint64_t (*)(uint64_t, _QWORD *, uint8_t *, unint64_t *))create_mp3_profile;
      break;
    case 6:
      v38 = 0;
      v39 = (uint64_t (*)(uint64_t, _QWORD *, uint8_t *, unint64_t *))create_custom_fixed_profile;
      break;
    case 7:
      v38 = 0;
      v39 = (uint64_t (*)(uint64_t, _QWORD *, uint8_t *, unint64_t *))create_sqlite3_db_wal_profile;
      break;
    case 8:
      v38 = 0;
      v39 = (uint64_t (*)(uint64_t, _QWORD *, uint8_t *, unint64_t *))create_sqlite3_db_profile;
      break;
    case 9:
      v38 = 0;
      v39 = (uint64_t (*)(uint64_t, _QWORD *, uint8_t *, unint64_t *))create_sqlite3_db_s_profile;
      break;
    default:
      v39 = *(uint64_t (**)(uint64_t, _QWORD *, uint8_t *, unint64_t *))(a1 + 168);
      if (!v39)
        createChunkProfile_cold_3();
      v38 = 1;
      break;
  }
  *(_DWORD *)buf = 0;
  LOBYTE(v87) = 0;
  v40 = v39(a1, v4, buf, &v87);
  if ((_BYTE)v87)
    v38 = 1;
  if (CK_DEFAULT_LOG_BLOCK_9 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_86_0);
  v41 = v34[313];
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    v42 = CKProfileTypeDescription(v21);
    v43 = CKProfileTypeDescription(*(unsigned int *)buf);
    LODWORD(valuePtr[0]) = 136447746;
    *(_QWORD *)((char *)valuePtr + 4) = __s;
    v44 = "F";
    WORD6(valuePtr[0]) = 2082;
    *(_QWORD *)((char *)valuePtr + 14) = v42;
    if (v38)
      v44 = "T";
    WORD3(valuePtr[1]) = 2082;
    *((_QWORD *)&valuePtr[1] + 1) = v43;
    LOWORD(v89[0]) = 2048;
    *(_QWORD *)((char *)v89 + 2) = v40;
    WORD5(v89[0]) = 2082;
    *(_QWORD *)((char *)v89 + 12) = v44;
    WORD2(v89[1]) = 2114;
    *(_QWORD *)((char *)&v89[1] + 6) = v19;
    HIWORD(v89[1]) = 2114;
    *(_QWORD *)&v90 = v10;
    _os_log_impl(&dword_20A95C000, v41, OS_LOG_TYPE_DEFAULT, "typeHint:%{public}s typeRequested:%{public}s typeUsed:%{public}s sectionCount:%llu default:%{public}s resolvedType:%{public}@ serverConfig:%{public}@", (uint8_t *)valuePtr, 0x48u);
  }
  if (a3)
  {
    v45 = (uint64_t *)MEMORY[0x24BDBD270];
    if (!v38)
      v45 = (uint64_t *)MEMORY[0x24BDBD268];
    CKProfileResultsCreate(a3, *(int *)buf, v10, v19, *v45, 0);
  }
  if (v10)
    CFRelease(v10);
  if (v19)
    CFRelease(v19);
  if (v6)
    CFRelease(v6);
  return v40;
}

char *copy_lowercase_suffix_for_type_hint(char *__s)
{
  const char *v1;
  char *v2;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;
  CFStringRef v6;
  NSObject *v7;
  char *v8;
  const __CFString *v9;
  const __CFString *PreferredIdentifierForTag;
  const __CFString *v11;
  const __CFString *v12;
  char v13;
  CFStringRef v14;
  NSObject *v15;
  size_t v16;
  char *v17;
  int v18;
  char buffer[16];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint8_t buf[4];
  CFStringRef v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if (!__s)
    return __s;
  v1 = __s;
  if (!*__s)
    return 0;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  *(_OWORD *)buffer = 0u;
  v20 = 0u;
  v2 = strchr(__s, 46);
  v3 = CFStringCreateWithCString(0, v1, 0x8000100u);
  v4 = v3;
  if (!v2)
  {
    if (v3)
    {
      v9 = (const __CFString *)*MEMORY[0x24BDC1658];
      PreferredIdentifierForTag = UTTypeCreatePreferredIdentifierForTag((CFStringRef)*MEMORY[0x24BDC1658], v3, 0);
      v11 = PreferredIdentifierForTag;
      if (PreferredIdentifierForTag)
      {
        v12 = UTTypeCopyPreferredTagWithClass(PreferredIdentifierForTag, v9);
        v13 = 0;
        goto LABEL_25;
      }
    }
    else
    {
      v11 = 0;
    }
    v12 = 0;
    v13 = 1;
LABEL_25:
    if (gVerbose == 2)
    {
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_105_1);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
        && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        v14 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("class:%@, tag:%@"), v11, v12, *(_QWORD *)buffer, *(_QWORD *)&buffer[8], v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31,
                v32,
                v33,
                v34);
        if (CK_DEFAULT_LOG_BLOCK_9 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_111_0);
        v15 = CK_DEFAULT_LOG_INTERNAL_9;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543362;
          v36 = v14;
          _os_log_impl(&dword_20A95C000, v15, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
        }
        if (v14)
          CFRelease(v14);
      }
    }
    if (v12)
    {
      if (CFStringGetCString(v12, buffer, 256, 0x8000100u))
        v8 = buffer;
      else
        v8 = 0;
      CFRelease(v12);
      if ((v13 & 1) == 0)
LABEL_41:
        CFRelease(v11);
    }
    else
    {
      if ((unint64_t)__strlcpy_chk() <= 0xFF)
        v8 = buffer;
      else
        v8 = 0;
      if ((v13 & 1) == 0)
        goto LABEL_41;
    }
    if (!v4)
      goto LABEL_44;
    goto LABEL_43;
  }
  if (!v3)
    return 0;
  v5 = UTTypeCopyPreferredTagWithClass(v3, (CFStringRef)*MEMORY[0x24BDC1658]);
  if (CK_DEFAULT_LOG_BLOCK_9 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_99);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
  {
    v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("uti:%@, tag:%@"), v4, v5, *(_QWORD *)buffer, *(_QWORD *)&buffer[8], v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31,
           v32,
           v33,
           v34);
    if (CK_DEFAULT_LOG_BLOCK_9 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_103);
    v7 = CK_DEFAULT_LOG_INTERNAL_9;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      v36 = v6;
      _os_log_impl(&dword_20A95C000, v7, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v6)
      CFRelease(v6);
  }
  if (v5)
  {
    if (CFStringGetCString(v5, buffer, 256, 0x8000100u))
      v8 = buffer;
    else
      v8 = 0;
    CFRelease(v5);
  }
  else
  {
    v8 = 0;
  }
LABEL_43:
  CFRelease(v4);
LABEL_44:
  if (!v8)
    return 0;
  v16 = strlen(v8);
  if (v16)
  {
    v17 = v8;
    do
    {
      v18 = *v17;
      if ((v18 - 65) <= 0x19)
        *v17 = v18 + 32;
      ++v17;
      --v16;
    }
    while (v16);
  }
  return (char *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], v8, 0x8000100u);
}

os_log_t __createChunkProfile_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __createChunkProfile_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __createChunkProfile_block_invoke_29()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __createChunkProfile_block_invoke_2_34()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

uint64_t create_default_fixed_profile(uint64_t a1, uint64_t **a2, _DWORD *a3, _BYTE *a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  CFStringRef v9;
  NSObject *v10;
  unint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  CFStringRef v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  CFStringRef v21;
  NSObject *v22;
  CFStringRef v24;
  NSObject *v25;
  uint8_t buf[4];
  CFStringRef v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (a3)
    *a3 = 1;
  if (a4)
    *a4 = 0;
  v6 = *(_QWORD *)(a1 + 232);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(unsigned int *)(a1 + 220);
  if ((_DWORD)v8)
  {
    if (v8 < 0x1400001)
    {
      if (v8 > 0xFFF)
      {
        v11 = *(unsigned int *)(a1 + 164) * (unint64_t)v8;
        if (v7 <= v11)
        {
          if (gVerbose == 2)
          {
            if (CK_DEFAULT_LOG_BLOCK_9 != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_138_0);
            if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
              && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
            {
              v24 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("fixedChunkSize set to %llu bytes"), v8);
              if (CK_DEFAULT_LOG_BLOCK_9 != -1)
                dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_145);
              v25 = CK_DEFAULT_LOG_INTERNAL_9;
              if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 138543362;
                v27 = v24;
                _os_log_impl(&dword_20A95C000, v25, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
              }
              if (v24)
                CFRelease(v24);
            }
          }
          goto LABEL_42;
        }
        if (CK_DEFAULT_LOG_BLOCK_9 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_130);
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEFAULT))
        {
          v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("requestedFixedChunkSize/%llu not large enough to accomodate file size %llu"), *(unsigned int *)(a1 + 220), v11);
          if (CK_DEFAULT_LOG_BLOCK_9 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_135_1);
          v10 = CK_DEFAULT_LOG_INTERNAL_9;
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEFAULT))
            goto LABEL_31;
          *(_DWORD *)buf = 138543362;
          v27 = v9;
          goto LABEL_30;
        }
      }
      else
      {
        if (CK_DEFAULT_LOG_BLOCK_9 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_122);
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEFAULT))
        {
          v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("requestedFixedChunkSize/%llu below MIN_FIXED_LENGTH_CHUNK_SIZE/%llu"), *(unsigned int *)(a1 + 220), 4096);
          if (CK_DEFAULT_LOG_BLOCK_9 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_127_0);
          v10 = CK_DEFAULT_LOG_INTERNAL_9;
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEFAULT))
            goto LABEL_31;
          *(_DWORD *)buf = 138543362;
          v27 = v9;
          goto LABEL_30;
        }
      }
    }
    else
    {
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_115_0);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEFAULT))
      {
        v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("requestedFixedChunkSize/%llu exceeds MAX_FIXED_LENGTH_CHUNK_SIZE/%llu"), *(unsigned int *)(a1 + 220), 20971520);
        if (CK_DEFAULT_LOG_BLOCK_9 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_119);
        v10 = CK_DEFAULT_LOG_INTERNAL_9;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEFAULT))
          goto LABEL_31;
        *(_DWORD *)buf = 138543362;
        v27 = v9;
LABEL_30:
        _os_log_impl(&dword_20A95C000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
LABEL_31:
        if (v9)
          CFRelease(v9);
      }
    }
  }
  if (*(_BYTE *)(a1 + 160) == 5)
  {
    v12 = 5242880;
    while (v7 > *(unsigned int *)(a1 + 164) * (unint64_t)v12)
    {
      LODWORD(v8) = 2 * v12;
      v13 = v12 > 0xA00000;
      v12 *= 2;
      if (v13)
        goto LABEL_41;
    }
    LODWORD(v8) = v12;
LABEL_41:
    if (v8 > 0x1400000)
      return 0;
  }
  else
  {
    LODWORD(v8) = 5242880;
  }
LABEL_42:
  v14 = *(unsigned int *)(a1 + 228);
  if (!(_DWORD)v14)
    goto LABEL_63;
  if (v14 <= v8)
  {
    if (gVerbose == 2)
    {
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_156_0);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
        && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        v15 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("fixedSubchunkSize set to %u bytes"), v14);
        if (CK_DEFAULT_LOG_BLOCK_9 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_164);
        v17 = CK_DEFAULT_LOG_INTERNAL_9;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543362;
          v27 = v15;
          _os_log_impl(&dword_20A95C000, v17, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
        }
        goto LABEL_52;
      }
    }
  }
  else
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_148_0);
    LODWORD(v14) = 0;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEFAULT))
    {
      v15 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("requestedFixedSubchunkSize/%llu exceeds fixedChunkSize/%llu"), *(unsigned int *)(a1 + 228), v8);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_153_0);
      v16 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543362;
        v27 = v15;
        _os_log_impl(&dword_20A95C000, v16, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
      }
      LODWORD(v14) = 0;
LABEL_52:
      if (v15)
        CFRelease(v15);
    }
  }
LABEL_63:
  v18 = 1;
  v19 = (uint64_t *)malloc_type_calloc(1uLL, 0x38uLL, 0x1000040C4DFEAEFuLL);
  if (!v19)
    return 0;
  v20 = v19;
  *((_BYTE *)v19 + 52) = 1;
  *v19 = v7 + v6;
  v19[1] = v8;
  *((_DWORD *)v19 + 8) = 2;
  v19[3] = v14;
  *a2 = v19;
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_167);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
    {
      v21 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("returning %u sections for \"%s\"\n"), 1, *(_QWORD *)(a1 + 104));
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_173_0);
      v22 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        v27 = v21;
        _os_log_impl(&dword_20A95C000, v22, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v21)
        CFRelease(v21);
    }
    v18 = 1;
    print_sections(v20, 1u);
  }
  return v18;
}

uint64_t create_safe_rabin_profile(uint64_t a1, uint64_t **a2, _DWORD *a3, _BYTE *a4)
{
  unint64_t v8;
  uint64_t v9;
  CFStringRef v10;
  NSObject *v11;
  uint64_t v12;
  CFStringRef v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  CFStringRef v19;
  NSObject *v20;
  uint8_t buf[4];
  CFStringRef v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 104);
  if (v8 <= 13312 * (unint64_t)*(unsigned int *)(a1 + 164))
  {
    if (gVerbose == 2)
    {
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_184_0);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
        && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("\"%s\" is just right to be Rabin chunked (%lld bytes)\n"), v9, v8);
        if (CK_DEFAULT_LOG_BLOCK_9 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_192_0);
        v14 = CK_DEFAULT_LOG_INTERNAL_9;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543362;
          v23 = v13;
          _os_log_impl(&dword_20A95C000, v14, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
        }
        if (v13)
          CFRelease(v13);
      }
    }
    if (a3)
      *a3 = 2;
    if (a4)
      *a4 = 0;
    v15 = *(_QWORD *)(a1 + 232);
    v16 = *(_QWORD *)(a1 + 80);
    v12 = 1;
    v17 = (uint64_t *)malloc_type_calloc(1uLL, 0x38uLL, 0x1000040C4DFEAEFuLL);
    if (v17)
    {
      v18 = v17;
      *v17 = v16 + v15;
      v17[1] = 0x340000000030;
      *((_DWORD *)v17 + 4) = 0x8000;
      *((_DWORD *)v17 + 8) = 1;
      v17[3] = 0;
      *a2 = v17;
      if (gVerbose == 2)
      {
        if (CK_DEFAULT_LOG_BLOCK_9 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_194_0);
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
          && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          v19 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("returning %u sections for \"%s\"\n"), 1, *(_QWORD *)(a1 + 104));
          if (CK_DEFAULT_LOG_BLOCK_9 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_198);
          v20 = CK_DEFAULT_LOG_INTERNAL_9;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138543362;
            v23 = v19;
            _os_log_impl(&dword_20A95C000, v20, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
          }
          if (v19)
            CFRelease(v19);
        }
        v12 = 1;
        print_sections(v18, 1u);
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (gVerbose == 2)
    {
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_175);
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
        && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("\"%s\" is a big file (%lld bytes!), using fixed chunker\n"), v9, v8);
        if (CK_DEFAULT_LOG_BLOCK_9 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_181_0);
        v11 = CK_DEFAULT_LOG_INTERNAL_9;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543362;
          v23 = v10;
          _os_log_impl(&dword_20A95C000, v11, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
        }
        if (v10)
          CFRelease(v10);
      }
    }
    return create_default_fixed_profile(a1, a2, a3, a4);
  }
  return v12;
}

os_log_t __createChunkProfile_block_invoke_39()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __createChunkProfile_block_invoke_3()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __createChunkProfile_block_invoke_50()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __createChunkProfile_block_invoke_3_58()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __createChunkProfile_block_invoke_61()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __createChunkProfile_block_invoke_3_69()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __createChunkProfile_block_invoke_72()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __createChunkProfile_block_invoke_3_80()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

uint64_t create_custom_fixed_profile(uint64_t a1, uint64_t **a2, _DWORD *a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  CFStringRef v13;
  NSObject *v14;
  uint8_t buf[4];
  CFStringRef v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (a3)
    *a3 = 6;
  if (a4)
    *a4 = 0;
  v6 = *(unsigned int *)(a1 + 216);
  if (!(_DWORD)v6)
    create_custom_fixed_profile_cold_1();
  v7 = *(_QWORD *)(a1 + 232);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(unsigned int *)(a1 + 224);
  v10 = 1;
  v11 = (uint64_t *)malloc_type_calloc(1uLL, 0x38uLL, 0x1000040C4DFEAEFuLL);
  if (!v11)
    return 0;
  v12 = v11;
  *((_BYTE *)v11 + 52) = 1;
  *v11 = v8 + v7;
  v11[1] = v6;
  *((_DWORD *)v11 + 8) = 2;
  v11[3] = v9;
  *a2 = v11;
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_220);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
    {
      v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("returning %u sections for \"%s\"\n"), 1, *(_QWORD *)(a1 + 104));
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_224_1);
      v14 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        v17 = v13;
        _os_log_impl(&dword_20A95C000, v14, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v13)
        CFRelease(v13);
    }
    v10 = 1;
    print_sections(v12, 1u);
  }
  return v10;
}

uint64_t create_zip_profile(uint64_t a1, _QWORD *a2, _DWORD *a3, _BYTE *a4)
{
  _DWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  _QWORD *v16;
  CFStringRef v17;
  NSObject *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  char *v32;
  char *v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  _QWORD *v46;
  _DWORD *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL4 v56;
  _BOOL4 v57;
  CFStringRef v58;
  NSObject *v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  CFStringRef v65;
  NSObject *v66;
  CFStringRef v67;
  NSObject *v68;
  CFStringRef v69;
  NSObject *v70;
  uint8_t *v71;
  unint64_t v72;
  CFStringRef v73;
  NSObject *v74;
  uint64_t v75;
  CFStringRef v76;
  NSObject *v77;
  char *v78;
  _BOOL4 v79;
  uint64_t *v80;
  _BOOL4 v81;
  CFStringRef v82;
  NSObject *v83;
  _QWORD *v84;
  uint64_t v85;
  __n128 v86;
  uint64_t v87;
  __int16 v88;
  unsigned int v89;
  __int16 v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  int v95;
  _QWORD *v96;
  _QWORD *v97;
  unint64_t v98;
  unint64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v105;
  uint64_t v106;
  uint8_t *v107;
  CFStringRef v108;
  NSObject *v109;
  int v110;
  unsigned int v111;
  CFStringRef v112;
  NSObject *v113;
  _QWORD *v114;
  CFStringRef v115;
  NSObject *v116;
  uint8_t *v117;
  _QWORD *v118;
  CFStringRef v119;
  NSObject *v120;
  uint64_t v121;
  unint64_t v122;
  char *ptr;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unsigned int v128;
  int v129;
  size_t __nel;
  uint64_t v131;
  uint64_t v132;
  void *__base;
  _QWORD *__basea;
  const __CFAllocator *alloc;
  uint64_t v140;
  uint64_t v141;
  uint8_t v142[24];
  int v143;
  uint8_t buf[16];
  uint8_t v145[16];
  _OWORD v146[2];
  unint64_t v147;
  __int128 v148;
  int v149;
  uint64_t v150;

  v4 = a3;
  v5 = a2;
  v6 = a1;
  v150 = *MEMORY[0x24BDAC8D0];
  if (a3)
    *a3 = 3;
  if (a4)
    *a4 = 0;
  v7 = *(_QWORD *)(a1 + 80);
  v8 = v7 - *(_QWORD *)(a1 + 232);
  if (v8 < 0x17)
    goto LABEL_6;
  v11 = 0;
  v12 = *(_QWORD *)(a1 + 8);
  v140 = *(_QWORD *)(a1 + 16);
  __base = *(void **)(a1 + 104);
  *(_QWORD *)v142 = 0;
  *(_QWORD *)&v142[8] = 0;
  *(_QWORD *)&v142[14] = 0;
  v148 = 0uLL;
  if (v8 >= 0x10029)
    v13 = 65577;
  else
    v13 = v8;
  v149 = 0;
  v14 = v7 - 22;
  v15 = 1;
  *(_OWORD *)v145 = 0uLL;
  memset(v146, 0, sizeof(v146));
  v16 = &new_ringing[224];
  v147 = 0;
  alloc = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  while (1)
  {
    if ((v15 & 1) == 0 && (v11 & 1) == 0)
      create_zip_profile_cold_1();
    if ((v15 & 1) == 0)
      break;
    v141 = 0;
    if (((*(uint64_t (**)(uint64_t, unint64_t, uint8_t *, uint64_t, uint64_t *, _QWORD))(v140 + 72))(v12, v14, v142, 22, &v141, 0) & 1) == 0)
    {
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_382);
      v6 = a1;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_ERROR))
        goto LABEL_125;
      v65 = CFStringCreateWithFormat(alloc, 0, CFSTR("failed to read zip-end-of-central-dir at 0x%llx\n"), v14);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_386_0);
      v66 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v65;
        goto LABEL_122;
      }
LABEL_123:
      if (v65)
        CFRelease(v65);
      goto LABEL_125;
    }
    if (v141 != 22)
    {
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_389_1);
      v6 = a1;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_ERROR))
        goto LABEL_125;
      v65 = CFStringCreateWithFormat(alloc, 0, CFSTR("failed to read zip-end-of-central-dir at 0x%llx\n"), v14);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_392_0);
      v66 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v65;
LABEL_122:
        _os_log_impl(&dword_20A95C000, v66, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      goto LABEL_123;
    }
    if (*(_DWORD *)v142 == 101010256)
    {
      if (gVerbose == 2)
      {
        if (CK_DEFAULT_LOG_BLOCK_9 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_395_1);
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
          && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          v17 = CFStringCreateWithFormat(alloc, 0, CFSTR("zip-end-of-central-dir, offset:0x%x, size:0x%x, recs:%u/%u\n"), *(unsigned int *)&v142[16], *(unsigned int *)&v142[12], *(unsigned __int16 *)&v142[8], *(unsigned __int16 *)&v142[10]);
          if (CK_DEFAULT_LOG_BLOCK_9 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_402_0);
          v18 = CK_DEFAULT_LOG_INTERNAL_9;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)&buf[4] = v17;
            _os_log_impl(&dword_20A95C000, v18, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
          }
          v16 = &new_ringing[224];
          if (v17)
            CFRelease(v17);
        }
      }
      v19 = *(unsigned int *)&v142[16];
      if (*(_DWORD *)&v142[16] != -1)
      {
        v4 = a3;
        v6 = a1;
        if ((v11 & 1) == 0)
        {
          v20 = *(unsigned __int16 *)&v142[8];
          goto LABEL_153;
        }
LABEL_273:
        v5 = a2;
        if (gVerbose != 2)
          goto LABEL_6;
        if (CK_DEFAULT_LOG_BLOCK_9 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_466_0);
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
          || !os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          goto LABEL_6;
        }
        v67 = CFStringCreateWithFormat(alloc, 0, CFSTR("didn't find the zip64-central-dir-end for \"%s\"\n"), __base);
        if (CK_DEFAULT_LOG_BLOCK_9 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_474_0);
        v68 = CK_DEFAULT_LOG_INTERNAL_9;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v67;
LABEL_282:
          v71 = buf;
LABEL_283:
          _os_log_impl(&dword_20A95C000, v68, OS_LOG_TYPE_DEBUG, "%{public}@", v71, 0xCu);
        }
        goto LABEL_284;
      }
      if (v14 <= 0x13)
      {
        v4 = a3;
        v6 = a1;
        goto LABEL_273;
      }
      v15 = 0;
      v14 -= 20;
      v11 = 1;
      goto LABEL_42;
    }
LABEL_40:
    if (!v14)
      goto LABEL_43;
    --v14;
LABEL_42:
    if (v7 - v14 > v13)
    {
LABEL_43:
      v6 = a1;
      if ((v15 & 1) == 0)
      {
        v4 = a3;
        if ((v11 & 1) != 0)
          goto LABEL_273;
        LODWORD(v20) = 0;
        v5 = a2;
        goto LABEL_46;
      }
LABEL_125:
      v5 = a2;
      v4 = a3;
      if (gVerbose != 2)
        goto LABEL_6;
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_455);
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
        || !os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        goto LABEL_6;
      }
      v67 = CFStringCreateWithFormat(alloc, 0, CFSTR("didn't find the zip-central-dir-end for \"%s\"\n"), __base);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_463_0);
      v68 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v67;
        goto LABEL_282;
      }
      goto LABEL_284;
    }
  }
  if ((v11 & 1) == 0)
  {
    v11 = 0;
    goto LABEL_40;
  }
  v141 = 0;
  if (((*(uint64_t (**)(uint64_t, unint64_t, __int128 *, uint64_t, uint64_t *, _QWORD))(v140 + 72))(v12, v14, &v148, 20, &v141, 0) & 1) == 0)
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_405_0);
    v6 = a1;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_ERROR))
    {
      v69 = CFStringCreateWithFormat(alloc, 0, CFSTR("failed to read zip64-end-of-central-dir-locator at 0x%llx\n"), v14);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_410_0);
      v70 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v69;
        goto LABEL_148;
      }
LABEL_149:
      if (v69)
        CFRelease(v69);
    }
LABEL_272:
    v4 = a3;
    goto LABEL_273;
  }
  if (v141 != 20)
  {
    v6 = a1;
    if (CK_DEFAULT_LOG_BLOCK_9 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_413);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_ERROR))
      goto LABEL_272;
    v69 = CFStringCreateWithFormat(alloc, 0, CFSTR("failed to read zip64-end-of-central-dir-locator at 0x%llx\n"), v14);
    if (CK_DEFAULT_LOG_BLOCK_9 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_416_0);
    v70 = CK_DEFAULT_LOG_INTERNAL_9;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_ERROR))
      goto LABEL_149;
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v69;
    goto LABEL_148;
  }
  if ((_DWORD)v148 != 117853008)
  {
    v11 = 1;
    goto LABEL_40;
  }
  v72 = *((_QWORD *)&v148 + 1);
  v6 = a1;
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_419_0);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
    {
      v73 = CFStringCreateWithFormat(alloc, 0, CFSTR("zip64-end-of-central-dir-locator, zip64-end-of-central-dir-offset:0x%llx\n"), v72);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_427_2);
      v74 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v73;
        _os_log_impl(&dword_20A95C000, v74, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v73)
        CFRelease(v73);
    }
  }
  if (v14 <= v72 || v14 - v72 < 0x38)
    goto LABEL_272;
  if (((*(uint64_t (**)(uint64_t, unint64_t, uint8_t *, uint64_t, uint64_t *, _QWORD))(v140 + 72))(v12, v72, v145, 56, &v141, 0) & 1) == 0)
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_430_0);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_ERROR))
      goto LABEL_272;
    v69 = CFStringCreateWithFormat(alloc, 0, CFSTR("failed to read zip64-end-of-central-dir at 0x%llx\n"), v72);
    if (CK_DEFAULT_LOG_BLOCK_9 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_435_0);
    v70 = CK_DEFAULT_LOG_INTERNAL_9;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_ERROR))
      goto LABEL_149;
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v69;
    goto LABEL_148;
  }
  if (v141 != 56)
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_438_1);
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_ERROR))
      goto LABEL_272;
    v69 = CFStringCreateWithFormat(alloc, 0, CFSTR("failed to read zip64-end-of-central-dir at 0x%llx\n"), v72);
    if (CK_DEFAULT_LOG_BLOCK_9 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_441_0);
    v70 = CK_DEFAULT_LOG_INTERNAL_9;
    if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_ERROR))
      goto LABEL_149;
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v69;
LABEL_148:
    _os_log_impl(&dword_20A95C000, v70, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    goto LABEL_149;
  }
  if (*(_DWORD *)v145 != 101075792)
    goto LABEL_272;
  v75 = *((_QWORD *)&v146[1] + 1);
  v19 = v147;
  v20 = *((_QWORD *)&v146[0] + 1);
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_444_1);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
    {
      v76 = CFStringCreateWithFormat(alloc, 0, CFSTR("zip64-end-of-central-dir, central-dir-offset:0x%llx, central-dir-size:0x%llx, num-central-dir-recs:%llu/%llu\n"), v19, v75, v20, *(_QWORD *)&v146[1]);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_452);
      v77 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v76;
        _os_log_impl(&dword_20A95C000, v77, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v76)
        CFRelease(v76);
    }
  }
  if (v75 + v19 < v19 || v72 < v75 + v19 || v72 <= v19 || v72 - v19 < 46 * v20)
    goto LABEL_272;
  v4 = a3;
  v16 = new_ringing + 1792;
LABEL_153:
  v5 = a2;
  if (v20 > 0x15555)
  {
    if (gVerbose != 2)
      goto LABEL_6;
    if (CK_DEFAULT_LOG_BLOCK_9 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_226);
    if (!os_log_type_enabled((os_log_t)v16[313], OS_LOG_TYPE_DEBUG)
      || !os_log_type_enabled((os_log_t)v16[313], OS_LOG_TYPE_DEBUG))
    {
      goto LABEL_6;
    }
    v67 = CFStringCreateWithFormat(alloc, 0, CFSTR("too many records, num_recs:0x%x, max_recs:0x%x\n"), v20, 87381);
    if (CK_DEFAULT_LOG_BLOCK_9 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_232);
    v68 = CK_DEFAULT_LOG_INTERNAL_9;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v145 = 138543362;
      *(_QWORD *)&v145[4] = v67;
      v71 = v145;
      goto LABEL_283;
    }
LABEL_284:
    if (v67)
      CFRelease(v67);
    goto LABEL_6;
  }
  if (!(_DWORD)v20)
  {
LABEL_46:
    qsort(0, v20, 0x18uLL, (int (__cdecl *)(const void *, const void *))cmp_dir_rec_data);
    v21 = 0;
    __basea = 0;
    goto LABEL_47;
  }
  v84 = malloc_type_calloc(v20, 0x18uLL, 0x100004020B92A0BuLL);
  if (!v84)
    goto LABEL_6;
  v85 = 0;
  v86 = 0uLL;
  __basea = v84;
  while (2)
  {
    v132 = v85;
    *(__n128 *)((char *)v146 + 14) = v86;
    *(__n128 *)v145 = v86;
    v146[0] = v86;
    *(_QWORD *)buf = 0;
    if (((*(uint64_t (**)(uint64_t, unint64_t, uint8_t *, uint64_t, uint8_t *, _QWORD))(v140 + 72))(v12, v19, v145, 46, buf, 0) & 1) == 0)
    {
      if (gVerbose != 2)
        goto LABEL_369;
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_235_1);
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
        || !os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        goto LABEL_369;
      }
      v115 = CFStringCreateWithFormat(alloc, 0, CFSTR("failed to read zip-dir-rec at %u/%u\n"), v132, v20);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_243);
      v116 = CK_DEFAULT_LOG_INTERNAL_9;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        goto LABEL_398;
      *(_DWORD *)v142 = 138543362;
      *(_QWORD *)&v142[4] = v115;
      goto LABEL_397;
    }
    v87 = v132;
    if (*(_QWORD *)buf != 46)
    {
      if (gVerbose != 2)
        goto LABEL_369;
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_246_0);
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
        || !os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        goto LABEL_369;
      }
      v115 = CFStringCreateWithFormat(alloc, 0, CFSTR("failed to read zip-dir-rec at %u/%u\n"), v132, v20);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_252);
      v116 = CK_DEFAULT_LOG_INTERNAL_9;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        goto LABEL_398;
      *(_DWORD *)v142 = 138543362;
      *(_QWORD *)&v142[4] = v115;
      goto LABEL_397;
    }
    if (*(_DWORD *)v145 != 33639248)
    {
      if (gVerbose != 2)
        goto LABEL_369;
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_255_1);
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
        || !os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        goto LABEL_369;
      }
      v115 = CFStringCreateWithFormat(alloc, 0, CFSTR("bogus looking zip-dir-rec at %u (0x%08x != 0x%08x)"), v132, *(unsigned int *)v145, 33639248);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_263_1);
      v116 = CK_DEFAULT_LOG_INTERNAL_9;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        goto LABEL_398;
      *(_DWORD *)v142 = 138543362;
      *(_QWORD *)&v142[4] = v115;
      goto LABEL_397;
    }
    v88 = WORD6(v146[0]);
    v89 = HIWORD(v146[0]);
    v90 = v146[1];
    v91 = v19 + WORD6(v146[0]) + 46;
    v92 = v91 + HIWORD(v146[0]) + (unint64_t)LOWORD(v146[1]);
    if (v92 < v19)
      goto LABEL_369;
    v93 = __basea;
    v94 = &__basea[3 * v132];
    v95 = DWORD1(v146[0]);
    v94[1] = DWORD1(v146[0]);
    v96 = v94 + 1;
    v97 = &__basea[3 * v132];
    *((_WORD *)v96 + 4) = v88;
    *((_WORD *)v96 + 5) = v89;
    *((_WORD *)v96 + 6) = v90;
    v98 = *(unsigned int *)((char *)&v146[1] + 10);
    *v97 = *(unsigned int *)((char *)&v146[1] + 10);
    if ((v15 & 1) != 0)
    {
      v16 = new_ringing + 1792;
      v86 = 0uLL;
      goto LABEL_228;
    }
    v16 = new_ringing + 1792;
    v86 = 0uLL;
    if (v95 != -1 && DWORD2(v146[0]) != -1 && *(_DWORD *)((char *)&v146[1] + 10) != -1)
      goto LABEL_228;
    if (v91 >= v7)
      goto LABEL_369;
    v125 = v92;
    if (v89 < 4)
      goto LABEL_368;
    v101 = *(_QWORD *)(a1 + 8);
    v102 = *(_QWORD *)(a1 + 16);
    LODWORD(v141) = 0;
    while (2)
    {
      *(_QWORD *)&v148 = 0;
      if (((*(uint64_t (**)(uint64_t, unint64_t, uint64_t *, uint64_t, __int128 *, _QWORD, __n128))(v102 + 72))(v101, v91, &v141, 4, &v148, 0, v86) & 1) == 0)
      {
        if (gVerbose != 2)
          goto LABEL_368;
        if (CK_DEFAULT_LOG_BLOCK_9 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_476_0);
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
          || !os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          goto LABEL_368;
        }
        v112 = CFStringCreateWithFormat(alloc, 0, CFSTR("failed to read extra-field-hdr at 0x%llx\n"), v91);
        if (CK_DEFAULT_LOG_BLOCK_9 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_482_0);
        v113 = CK_DEFAULT_LOG_INTERNAL_9;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
          goto LABEL_366;
        *(_DWORD *)v142 = 138543362;
        *(_QWORD *)&v142[4] = v112;
        goto LABEL_364;
      }
      if ((_QWORD)v148 != 4)
      {
        if (gVerbose != 2)
          goto LABEL_368;
        if (CK_DEFAULT_LOG_BLOCK_9 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_485);
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
          || !os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          goto LABEL_368;
        }
        v112 = CFStringCreateWithFormat(alloc, 0, CFSTR("failed to read extra-field-hdr at 0x%llx\n"), v91);
        if (CK_DEFAULT_LOG_BLOCK_9 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_491);
        v113 = CK_DEFAULT_LOG_INTERNAL_9;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
          goto LABEL_366;
        *(_DWORD *)v142 = 138543362;
        *(_QWORD *)&v142[4] = v112;
LABEL_364:
        v117 = v142;
LABEL_365:
        _os_log_impl(&dword_20A95C000, v113, OS_LOG_TYPE_DEBUG, "%{public}@", v117, 0xCu);
        goto LABEL_366;
      }
      v103 = WORD1(v141) + 4;
      v100 = v89 >= v103;
      v89 -= v103;
      if (!v100)
        goto LABEL_368;
      if ((unsigned __int16)v141 != 1)
      {
        v91 += v103;
        if (v89 <= 3)
          goto LABEL_368;
        continue;
      }
      break;
    }
    if (DWORD2(v146[0]) == -1 || DWORD1(v146[0]) == -1)
      v105 = 20;
    else
      v105 = 4;
    v106 = v105 | (8 * (*(_DWORD *)((char *)&v146[1] + 10) == -1));
    if (v103 < v106)
    {
      v4 = a3;
      if (gVerbose != 2)
        goto LABEL_369;
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_266);
      v4 = a3;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
        || !os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        goto LABEL_369;
      }
      v115 = CFStringCreateWithFormat(alloc, 0, CFSTR("bogus field_len 0x%x at 0x%llx, expected_len: 0x%x\n"), v103, v91, v106);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_274_0);
      v116 = CK_DEFAULT_LOG_INTERNAL_9;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        goto LABEL_398;
      *(_DWORD *)v142 = 138543362;
      *(_QWORD *)&v142[4] = v115;
LABEL_397:
      _os_log_impl(&dword_20A95C000, v116, OS_LOG_TYPE_DEBUG, "%{public}@", v142, 0xCu);
      goto LABEL_398;
    }
    memset(v142, 0, sizeof(v142));
    v143 = 0;
    v4 = a3;
    if (((*(uint64_t (**)(uint64_t, unint64_t, uint8_t *, uint64_t, uint8_t *, _QWORD))(v140 + 72))(v12, v91, v142, v106, buf, 0) & 1) == 0)
    {
      if (gVerbose != 2)
        goto LABEL_368;
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_278);
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
        || !os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        goto LABEL_368;
      }
      v112 = CFStringCreateWithFormat(alloc, 0, CFSTR("failed to read zip64-extra-field at 0x%llx\n"), v91);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_286);
      v113 = CK_DEFAULT_LOG_INTERNAL_9;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        goto LABEL_366;
      LODWORD(v148) = 138543362;
      *(_QWORD *)((char *)&v148 + 4) = v112;
LABEL_441:
      v117 = (uint8_t *)&v148;
      goto LABEL_365;
    }
    v87 = v132;
    v86 = 0uLL;
    v92 = v125;
    v97 = &__basea[3 * v132];
    if (*(_QWORD *)buf != v106)
    {
      if (gVerbose != 2)
        goto LABEL_368;
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_289);
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
        || !os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        goto LABEL_368;
      }
      v112 = CFStringCreateWithFormat(alloc, 0, CFSTR("failed to read zip64-extra-field at 0x%llx\n"), v91);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_295_0);
      v113 = CK_DEFAULT_LOG_INTERNAL_9;
      if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
LABEL_366:
        if (v112)
          CFRelease(v112);
LABEL_368:
        v4 = a3;
        goto LABEL_369;
      }
      LODWORD(v148) = 138543362;
      *(_QWORD *)((char *)&v148 + 4) = v112;
      goto LABEL_441;
    }
    v16 = new_ringing + 1792;
    v93 = __basea;
    if (DWORD1(v146[0]) == -1 || (v107 = &v142[4], DWORD2(v146[0]) == -1))
    {
      *v96 = *(_QWORD *)&v142[12];
      v107 = &v142[20];
    }
    v98 = *(_QWORD *)v107;
    __basea[3 * v132] = v98;
LABEL_228:
    v6 = a1;
    v5 = a2;
    if (v98 >= v7 || ((v99 = *v96 + v98, v99 >= v98) ? (v100 = v99 >= v7) : (v100 = 1), v100))
    {
      if (gVerbose == 2)
      {
        v114 = v97;
        if (CK_DEFAULT_LOG_BLOCK_9 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_298_0);
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
          && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          v115 = CFStringCreateWithFormat(alloc, 0, CFSTR("bogus looking zip_foffset/zip_size on zip-dir-rec at %u (foffset:0x%llx size:0x%llx dataSize:0x%llx)\n"), v132, *v114, *v96, v7);
          if (CK_DEFAULT_LOG_BLOCK_9 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_306_0);
          v116 = CK_DEFAULT_LOG_INTERNAL_9;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v142 = 138543362;
            *(_QWORD *)&v142[4] = v115;
            goto LABEL_397;
          }
LABEL_398:
          v4 = a3;
          if (v115)
            CFRelease(v115);
        }
      }
LABEL_369:
      v6 = a1;
      v5 = a2;
      goto LABEL_335;
    }
    v85 = v87 + 1;
    v19 = v92;
    if (v85 != v20)
      continue;
    break;
  }
  v118 = v93;
  qsort(v93, v20, 0x18uLL, (int (__cdecl *)(const void *, const void *))cmp_dir_rec_data);
  if (*v118)
  {
    if (gVerbose == 2)
    {
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_309_0);
      v6 = a1;
      v5 = a2;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
        && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        v119 = CFStringCreateWithFormat(alloc, 0, CFSTR("first entry must begin at location zero!\n"));
        if (CK_DEFAULT_LOG_BLOCK_9 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_317_0);
        v120 = CK_DEFAULT_LOG_INTERNAL_9;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v145 = 138543362;
          *(_QWORD *)&v145[4] = v119;
          _os_log_impl(&dword_20A95C000, v120, OS_LOG_TYPE_DEBUG, "%{public}@", v145, 0xCu);
        }
        v6 = a1;
        v5 = a2;
        if (v119)
          CFRelease(v119);
      }
    }
    *__basea = 0;
    v16 = new_ringing + 1792;
  }
  v21 = v20;
LABEL_47:
  v22 = add_sections(0, 0, (2 * v20) | 1);
  if (!v22)
  {
    v4 = a3;
    goto LABEL_335;
  }
  v23 = v22;
  __nel = (size_t)v22;
  if (v21 < 1)
  {
    LODWORD(v25) = 0;
    v110 = 0;
    v32 = 0;
    v111 = 0;
    v9 = 1;
    v27 = (char *)__basea;
LABEL_198:
    v78 = &v23[112 * v110];
    v78[52] = 1;
    *(_QWORD *)v78 = v7;
    *((_QWORD *)v78 + 1) = 5242880;
    *((_DWORD *)v78 + 8) = 2;
    *((_QWORD *)v78 + 3) = 0;
    if (v111 + ((int)v7 - (int)v25 + 5242879) / 5242880 > *(_DWORD *)(v6 + 164))
    {
      v4 = a3;
      goto LABEL_332;
    }
    if (v32)
    {
      free(v32);
      v23 = (char *)__nel;
      v27 = (char *)__basea;
    }
    if (v27)
    {
      free(v27);
      v23 = (char *)__nel;
    }
    *v5 = v23;
    if (gVerbose == 2)
    {
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_373);
      v79 = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG);
      v80 = (uint64_t *)__nel;
      if (v79)
      {
        v81 = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG);
        v80 = (uint64_t *)__nel;
        if (v81)
        {
          v82 = CFStringCreateWithFormat(alloc, 0, CFSTR("returning %u sections for \"%s\"\n"), v9, *(_QWORD *)(v6 + 104));
          if (CK_DEFAULT_LOG_BLOCK_9 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_379_0);
          v83 = CK_DEFAULT_LOG_INTERNAL_9;
          if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v145 = 138543362;
            *(_QWORD *)&v145[4] = v82;
            _os_log_impl(&dword_20A95C000, v83, OS_LOG_TYPE_DEBUG, "%{public}@", v145, 0xCu);
          }
          v80 = (uint64_t *)__nel;
          if (v82)
          {
            CFRelease(v82);
            v80 = (uint64_t *)__nel;
          }
        }
      }
      print_sections(v80, v9);
    }
    return v9;
  }
  v24 = 0;
  v128 = 0;
  v122 = 0;
  ptr = 0;
  v25 = 0;
  v124 = 0;
  v126 = 0xFFFFFFFFLL;
  v26 = v22;
  v27 = (char *)__basea;
  v121 = v12;
  while (2)
  {
    v131 = v24;
    v28 = &v27[24 * v24];
    v29 = *(_QWORD *)v28;
    memset(v145, 0, sizeof(v145));
    *(_QWORD *)((char *)v146 + 7) = 0;
    *(_QWORD *)&v146[0] = 0;
    *(_QWORD *)&v148 = 0;
    v127 = v29;
    if (((*(uint64_t (**)(uint64_t))(v140 + 72))(v12) & 1) == 0)
    {
      if (gVerbose == 2)
      {
        v4 = a3;
        v6 = a1;
        v5 = a2;
        v32 = ptr;
        if (CK_DEFAULT_LOG_BLOCK_9 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_320);
        if (!os_log_type_enabled((os_log_t)v16[313], OS_LOG_TYPE_DEBUG)
          || !os_log_type_enabled((os_log_t)v16[313], OS_LOG_TYPE_DEBUG))
        {
          goto LABEL_331;
        }
        v108 = CFStringCreateWithFormat(alloc, 0, CFSTR("failed to read the zip-local-header at %u/0x%llx\n"), v131, v127);
        if (CK_DEFAULT_LOG_BLOCK_9 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_328);
        v109 = CK_DEFAULT_LOG_INTERNAL_9;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
          goto LABEL_324;
        *(_DWORD *)v142 = 138543362;
        *(_QWORD *)&v142[4] = v108;
        goto LABEL_323;
      }
      v4 = a3;
      v6 = a1;
      v5 = a2;
      goto LABEL_328;
    }
    if ((_QWORD)v148 != 30)
    {
      v23 = (char *)__nel;
      if (gVerbose == 2)
      {
        v4 = a3;
        v6 = a1;
        v5 = a2;
        v32 = ptr;
        if (CK_DEFAULT_LOG_BLOCK_9 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_331);
        if (!os_log_type_enabled((os_log_t)v16[313], OS_LOG_TYPE_DEBUG)
          || !os_log_type_enabled((os_log_t)v16[313], OS_LOG_TYPE_DEBUG))
        {
          goto LABEL_331;
        }
        v108 = CFStringCreateWithFormat(alloc, 0, CFSTR("failed to read the zip-local-header at %u/0x%llx\n"), v131, v127);
        if (CK_DEFAULT_LOG_BLOCK_9 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_337);
        v109 = CK_DEFAULT_LOG_INTERNAL_9;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
          goto LABEL_324;
        *(_DWORD *)v142 = 138543362;
        *(_QWORD *)&v142[4] = v108;
        goto LABEL_323;
      }
      goto LABEL_326;
    }
    v30 = v131;
    v27 = (char *)__basea;
    v23 = (char *)__nel;
    if (*(_DWORD *)v145 != 67324752)
    {
      if (gVerbose == 2)
      {
        v4 = a3;
        v6 = a1;
        v5 = a2;
        v32 = ptr;
        if (CK_DEFAULT_LOG_BLOCK_9 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_340);
        if (!os_log_type_enabled((os_log_t)v16[313], OS_LOG_TYPE_DEBUG)
          || !os_log_type_enabled((os_log_t)v16[313], OS_LOG_TYPE_DEBUG))
        {
          goto LABEL_331;
        }
        v108 = CFStringCreateWithFormat(alloc, 0, CFSTR("zip-local-header %u @ 0x%llx looks corrupt (0x%08x != 0x%08x)"), v131, v127, *(unsigned int *)v145, 67324752);
        if (CK_DEFAULT_LOG_BLOCK_9 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_348);
        v109 = CK_DEFAULT_LOG_INTERNAL_9;
        if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
          goto LABEL_324;
        *(_DWORD *)v142 = 138543362;
        *(_QWORD *)&v142[4] = v108;
        goto LABEL_323;
      }
      goto LABEL_326;
    }
    if (WORD6(v146[0]))
      WORD1(__basea[3 * v131 + 2]) = WORD6(v146[0]);
    v31 = 0;
    if (*(_WORD *)&v145[8] || WORD5(v146[0]) != 21)
    {
LABEL_67:
      if (!v30)
      {
        v39 = 0;
        v38 = *(_QWORD *)v28;
LABEL_73:
        v40 = &v27[24 * v30];
        v41 = v39 + v38 + *((unsigned __int16 *)v40 + 8) + (unint64_t)*((unsigned __int16 *)v40 + 9) + 30;
        v42 = &v23[112 * v30];
        v42[52] = 1;
        *(_QWORD *)v42 = v41;
        *((_QWORD *)v42 + 1) = 5242880;
        *((_DWORD *)v42 + 8) = 8;
        *((_QWORD *)v42 + 3) = 0;
        v43 = *((_QWORD *)v40 + 1) + v41;
        v44 = (2 * v30) | 1;
        v45 = (unint64_t *)&v23[56 * v44];
        *v45 = v43;
        v46 = v45 + 3;
        v47 = v45 + 4;
        if (v31)
        {
          v48 = &v23[56 * v44];
          *((_QWORD *)v48 + 1) = 0x340000000030;
          *((_DWORD *)v48 + 4) = 0x8000;
          *v47 = 1;
          *v46 = 0;
          v124 = v41;
          v126 = (2 * v30) | 1;
        }
        else
        {
          v49 = &v23[56 * v44];
          v49[52] = 1;
          *((_QWORD *)v49 + 1) = 5242880;
          *v47 = 2;
          *v46 = 0;
        }
        v50 = 0;
        v51 = 0;
        do
        {
          v52 = *(_QWORD *)&v26[v50];
          if (v26[v50 + 52])
            v53 = 5242879;
          else
            v53 = 13311;
          if (v26[v50 + 52])
            v54 = 5242880;
          else
            v54 = 13312;
          v51 += (uint64_t)(v52 - v25 + v53) / v54;
          v50 += 56;
          v25 = v52;
        }
        while (v50 != 112);
        v55 = v51 + v128;
        if (v55 >= *(_DWORD *)(a1 + 164))
        {
          if ((_DWORD)v126 == -1)
            goto LABEL_326;
          if (gVerbose == 2)
          {
            if (CK_DEFAULT_LOG_BLOCK_9 != -1)
              dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_362_1);
            v56 = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG);
            v23 = (char *)__nel;
            v30 = v131;
            if (v56)
            {
              v57 = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG);
              v23 = (char *)__nel;
              v30 = v131;
              if (v57)
              {
                v58 = CFStringCreateWithFormat(alloc, 0, CFSTR("%u >= %u, last_rabin:%d, last_rabin_base:0x%llx\n"), v55, *(unsigned int *)(a1 + 164), v126, v124);
                v129 = v55;
                if (CK_DEFAULT_LOG_BLOCK_9 != -1)
                  dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_370_0);
                v59 = CK_DEFAULT_LOG_INTERNAL_9;
                if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)v142 = 138543362;
                  *(_QWORD *)&v142[4] = v58;
                  _os_log_impl(&dword_20A95C000, v59, OS_LOG_TYPE_DEBUG, "%{public}@", v142, 0xCu);
                }
                v23 = (char *)__nel;
                v30 = v131;
                LODWORD(v55) = v129;
                if (v58)
                {
                  CFRelease(v58);
                  v23 = (char *)__nel;
                  v30 = v131;
                }
              }
            }
          }
          v60 = &v23[56 * (int)v126];
          v61 = *(_QWORD *)v60 - v124;
          v62 = v60[52] ? 5242879 : 13311;
          v63 = v60[52] ? 5242880 : 13312;
          v60[52] = 1;
          *((_QWORD *)v60 + 1) = 5242880;
          *((_DWORD *)v60 + 8) = 2;
          *((_QWORD *)v60 + 3) = 0;
          v64 = v55 - (uint64_t)(v61 + v62) / v63 + ((int)v61 + 5242879) / 5242880;
          if (v64 >= *(_DWORD *)(a1 + 164))
            goto LABEL_326;
          v128 = v64;
          v124 = 0;
          v126 = 0xFFFFFFFFLL;
          v16 = new_ringing + 1792;
          v27 = (char *)__basea;
        }
        else
        {
          v128 += v51;
        }
        v25 = *v45;
        v24 = v30 + 1;
        v26 += 112;
        if (v24 == v21)
        {
          v9 = (2 * v21) | 1u;
          v6 = a1;
          v5 = a2;
          v110 = v21;
          v32 = ptr;
          v111 = v128;
          goto LABEL_198;
        }
        continue;
      }
      v36 = v30 - 1;
      v37 = *(_QWORD *)&v27[24 * v30 - 24]
          + *(_QWORD *)&v27[24 * v30 - 16]
          + *(unsigned __int16 *)&v27[24 * v30 - 8]
          + (unint64_t)*(unsigned __int16 *)&v27[24 * v30 - 6]
          + 30;
      if (v127 >= v37)
      {
        v38 = *(_QWORD *)v28;
        v39 = v127 - v37;
        if (v39)
        {
          v38 -= v39;
          *(_QWORD *)v28 = v38;
        }
        v16 = new_ringing + 1792;
        goto LABEL_73;
      }
      if (gVerbose == 2)
      {
        v4 = a3;
        v6 = a1;
        v5 = a2;
        if (CK_DEFAULT_LOG_BLOCK_9 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_351_1);
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
          && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          v108 = CFStringCreateWithFormat(alloc, 0, CFSTR("entries %u and %u overlap\n"), v131, v36);
          v32 = ptr;
          if (CK_DEFAULT_LOG_BLOCK_9 != -1)
            dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_359_0);
          v109 = CK_DEFAULT_LOG_INTERNAL_9;
          if (!os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
            goto LABEL_324;
          *(_DWORD *)v142 = 138543362;
          *(_QWORD *)&v142[4] = v108;
LABEL_323:
          _os_log_impl(&dword_20A95C000, v109, OS_LOG_TYPE_DEBUG, "%{public}@", v142, 0xCu);
LABEL_324:
          v23 = (char *)__nel;
          if (!v108)
            goto LABEL_332;
          CFRelease(v108);
          goto LABEL_331;
        }
LABEL_328:
        v23 = (char *)__nel;
        goto LABEL_329;
      }
LABEL_326:
      v4 = a3;
      v6 = a1;
      v5 = a2;
LABEL_329:
      v32 = ptr;
      goto LABEL_332;
    }
    break;
  }
  if (v122 > 0x15)
  {
    v33 = ptr;
    v34 = v127;
  }
  else
  {
    v32 = ptr;
    v33 = (char *)malloc_type_realloc(ptr, 0x16uLL, 0xA6E2D660uLL);
    v34 = v127;
    if (!v33)
      goto LABEL_330;
  }
  v12 = v121;
  if ((*(unsigned int (**)(uint64_t, unint64_t, char *, uint64_t, __int128 *, _QWORD))(v140 + 72))(v121, v34 + 30, v33, 21, &v148, 0))
  {
    v35 = (_QWORD)v148 == 21;
  }
  else
  {
    v35 = 0;
  }
  if (v35)
  {
    v33[21] = 0;
    v31 = strcmp(v33, "QuickLook/Preview.pdf") == 0;
    v122 = 22;
    ptr = v33;
    v16 = new_ringing + 1792;
    v30 = v131;
    v27 = (char *)__basea;
    v23 = (char *)__nel;
    goto LABEL_67;
  }
  v32 = v33;
LABEL_330:
  v4 = a3;
  v6 = a1;
  v5 = a2;
LABEL_331:
  v23 = (char *)__nel;
LABEL_332:
  if (v32)
  {
    free(v32);
    v23 = (char *)__nel;
  }
  free(v23);
LABEL_335:
  if (__basea)
    free(__basea);
LABEL_6:
  if (a4)
    *a4 = 1;
  return (*(uint64_t (**)(uint64_t, _QWORD *, _DWORD *, _QWORD))(v6 + 168))(v6, v5, v4, 0);
}

uint64_t create_mp3_profile(uint64_t a1, char **a2, _DWORD *a3, _BYTE *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  NSObject *v20;
  CFStringRef v21;
  NSObject *v22;
  char *v23;
  char *v24;
  char *v25;
  _BOOL4 v27;
  const char *v28;
  NSObject *v29;
  int v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  unsigned int v38;
  char *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  _BOOL4 v49;
  uint64_t *v50;
  _BOOL4 v51;
  CFStringRef v52;
  NSObject *v53;
  uint64_t *v54;
  CFStringRef v55;
  uint64_t v56;
  CFStringRef cf;
  unsigned int cfa;
  uint64_t v60;
  _QWORD v61[2];
  uint8_t v62[4];
  CFStringRef v63;
  uint8_t buf[16];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  if (a3)
    *a3 = 4;
  if (a4)
    *a4 = 0;
  v8 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 232);
  v10 = *(_QWORD *)(a1 + 80);
  v60 = 0;
  memset(v61, 0, 10);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t *, _QWORD))(v7 + 72))(v8, v9, v61, 10, &v60, 0))
  {
    v11 = v60 == 10;
  }
  else
  {
    v11 = 0;
  }
  if (!v11)
    goto LABEL_9;
  v12 = is_ID3v2_tag((uint64_t)v61, 0xAuLL);
  if (!(_DWORD)v12)
  {
    if (v10 >= 0x81)
    {
      v19 = 0;
      cfa = 0;
      v23 = 0;
      goto LABEL_46;
    }
LABEL_9:
    if (a4)
      *a4 = 1;
    return (*(uint64_t (**)(uint64_t, char **, _DWORD *, _QWORD))(a1 + 168))(a1, a2, a3, 0);
  }
  v14 = 0;
  v15 = bswap32(*(unsigned int *)((char *)v61 + 6));
  v16 = 2130706432;
  v17 = 4;
  do
  {
    v14 = v16 & v15 | (v14 >> 1);
    v16 >>= 8;
    --v17;
  }
  while (v17);
  if (v14 >> 28)
    create_mp3_profile_cold_1();
  if ((v61[0] & 0x100000000000) != 0)
    v18 = 20;
  else
    v18 = 10;
  v19 = v18 + v14;
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_493);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
    {
      cf = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("ID3v2 tag present at 0x%llx, v2_tag_size:0x%x\n"), v9, v19);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_499);
      v20 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = cf;
        _os_log_impl(&dword_20A95C000, v20, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (cf)
        CFRelease(cf);
    }
  }
  if (v10 < v19)
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_502);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_ERROR))
    {
      v21 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("ID3v2 tag larger than the file, v2_tag_size:0x%x, dataSize:0x%llx\n"), v19, v10);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_507);
      v22 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v21;
        _os_log_impl(&dword_20A95C000, v22, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (v21)
        CFRelease(v21);
    }
    goto LABEL_9;
  }
  v24 = add_sections(0, 0, 1);
  if (!v24)
    goto LABEL_9;
  v25 = v24;
  cfa = 1;
  v24[52] = 1;
  *(_QWORD *)v24 = v9 + v19;
  *((_QWORD *)v24 + 1) = 5242880;
  *((_DWORD *)v24 + 8) = 9;
  *((_QWORD *)v24 + 3) = 0;
  if (v10 - v19 <= 0x80)
  {
    LODWORD(v31) = 1;
    v12 = 1;
    if (v10 > v19)
      goto LABEL_79;
    goto LABEL_87;
  }
  v23 = v24;
LABEL_46:
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  *(_OWORD *)buf = 0u;
  v65 = 0u;
  v56 = v10 + v9 - 128;
  if (!(*(unsigned int (**)(uint64_t))(v7 + 72))(v8) || v60 != 128)
    goto LABEL_75;
  v27 = *(unsigned __int16 *)buf != 16724 || buf[2] != 71;
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_511);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
    {
      v28 = "missing";
      if (!v27)
        v28 = "present";
      v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("ID3v1 tag %s at 0x%llx\n"), v28, v56);
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_521);
      v29 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v62 = 138543362;
        v63 = v55;
        _os_log_impl(&dword_20A95C000, v29, OS_LOG_TYPE_DEBUG, "%{public}@", v62, 0xCu);
      }
      if (v55)
        CFRelease(v55);
    }
  }
  v30 = v27 ? v12 : 1;
  if (v30 != 1)
  {
LABEL_75:
    v25 = v23;
    goto LABEL_76;
  }
  if (v27)
  {
    LODWORD(v31) = cfa;
    v25 = v23;
    if (v10 > v19)
    {
      if ((v12 & 1) == 0)
        create_mp3_profile_cold_2();
LABEL_79:
      v32 = v25;
      v33 = add_sections(v25, v31, 1);
      v25 = v32;
      if (v33)
      {
        v33[108] = 1;
        *((_QWORD *)v33 + 7) = v10 + v9;
        *((_QWORD *)v33 + 8) = 5242880;
        *((_DWORD *)v33 + 22) = 9;
        v31 = (v31 + 1);
        v12 = v31;
        v25 = v33;
        *((_QWORD *)v33 + 10) = 0;
        goto LABEL_87;
      }
LABEL_76:
      if (!v25)
        goto LABEL_9;
      goto LABEL_96;
    }
    if (!(_DWORD)v12)
      goto LABEL_97;
    v12 = 1;
  }
  else
  {
    v34 = add_sections(v23, cfa, 2);
    v25 = v23;
    if (!v34)
      goto LABEL_76;
    v35 = 56;
    v36 = &v34[56 * v12];
    v36[52] = 1;
    *(_QWORD *)v36 = v56;
    *((_QWORD *)v36 + 1) = 5242880;
    *((_DWORD *)v36 + 8) = 9;
    *((_QWORD *)v36 + 3) = 0;
    if ((_DWORD)v12)
      v35 = 112;
    v37 = &v34[v35];
    v37[52] = 1;
    *(_QWORD *)v37 = v10 + v9;
    *((_QWORD *)v37 + 1) = 5242880;
    *((_DWORD *)v37 + 8) = 9;
    *((_QWORD *)v37 + 3) = 0;
    LODWORD(v31) = cfa | 2;
    v12 = cfa | 2;
    v25 = v34;
  }
LABEL_87:
  v38 = 0;
  v39 = v25;
  v40 = v31;
  do
  {
    v41 = v39[52];
    v43 = *(_QWORD *)v39;
    v39 += 56;
    v42 = v43;
    v44 = v43 - v9;
    v45 = v41 == 0;
    if (v41)
      v46 = 5242879;
    else
      v46 = 13311;
    if (v45)
      v47 = 13312;
    else
      v47 = 5242880;
    v38 += (v44 + v46) / v47;
    v9 = v42;
    --v40;
  }
  while (v40);
  if (*(_DWORD *)(a1 + 164) < v38)
  {
LABEL_96:
    free(v25);
    goto LABEL_9;
  }
LABEL_97:
  if (gVerbose == 2)
  {
    v48 = (uint64_t *)v25;
    if (CK_DEFAULT_LOG_BLOCK_9 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_525);
    v49 = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG);
    v50 = v48;
    if (v49)
    {
      v51 = os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG);
      v50 = v48;
      if (v51)
      {
        v52 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("returning %u sections for \"%s\"\n"), v12, *(_QWORD *)(a1 + 104));
        if (CK_DEFAULT_LOG_BLOCK_9 != -1)
          dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_531_1);
        v53 = CK_DEFAULT_LOG_INTERNAL_9;
        if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v52;
          _os_log_impl(&dword_20A95C000, v53, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
        }
        v50 = v48;
        if (v52)
        {
          CFRelease(v52);
          v50 = v48;
        }
      }
    }
    v54 = v50;
    print_sections(v50, v12);
    v25 = (char *)v54;
  }
  *a2 = v25;
  return v12;
}

uint64_t create_sqlite3_db_wal_profile(uint64_t a1, char **a2, _DWORD *a3, _BYTE *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unsigned int v26;
  char *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  char *v36;
  int v37;
  _QWORD *v38;
  char *v39;
  CFStringRef v40;
  NSObject *v41;
  char **v42;
  int8x16_t v43;
  int8x16_t v44;
  uint8_t buf[24];
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if (a3)
    *a3 = 7;
  if (a4)
    *a4 = 0;
  v8 = *(_QWORD *)(a1 + 232);
  v9 = *(_QWORD *)(a1 + 80);
  v43 = 0u;
  v44 = 0u;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)buf = 0;
  if ((*(unsigned int (**)(uint64_t, _QWORD, int8x16_t *, uint64_t, uint8_t *, _QWORD))(v11 + 72))(v10, 0, &v43, 32, buf, 0))
  {
    v12 = *(_QWORD *)buf > 0x1FuLL;
  }
  else
  {
    v12 = 0;
  }
  if (!v12 || (v43 = vrev32q_s8(v43), v44 = vrev32q_s8(v44), v13 = 1, (v14 = add_sections(0, 0, 1)) == 0))
  {
LABEL_33:
    if (a4)
      *a4 = 1;
    return (*(uint64_t (**)(uint64_t, char **, _DWORD *, _QWORD))(a1 + 168))(a1, a2, a3, 0);
  }
  v15 = v14;
  v42 = a2;
  v16 = v8 + 32;
  v14[52] = 1;
  *(_QWORD *)v14 = v8 + 32;
  *((_QWORD *)v14 + 1) = 5242880;
  *((_DWORD *)v14 + 8) = 5;
  *((_QWORD *)v14 + 3) = 0;
  if (v8 + 32 >= v9)
  {
    v17 = 1;
LABEL_23:
    v25 = 0;
    v26 = 0;
    v27 = v15;
    do
    {
      v28 = v27[52];
      v30 = *(_QWORD *)v27;
      v27 += 56;
      v29 = v30;
      v31 = v30 - v25;
      v32 = v28 == 0;
      if (v28)
        v33 = 5242879;
      else
        v33 = 13311;
      if (v32)
        v34 = 13312;
      else
        v34 = 5242880;
      v26 += (v31 + v33) / v34;
      v25 = v29;
      --v13;
    }
    while (v13);
    if (*(_DWORD *)(a1 + 164) >= v26)
      goto LABEL_43;
LABEL_32:
    free(v15);
    a2 = v42;
    goto LABEL_33;
  }
  LODWORD(v17) = 1;
  do
  {
    v16 += 24;
    v18 = v17;
    v19 = add_sections(v15, v17, 1);
    v20 = v19;
    if (v16 > v9)
    {
      if (!v19)
        goto LABEL_32;
      v36 = &v19[56 * v17];
      v37 = 1;
      v36[52] = 1;
      *(_QWORD *)v36 = v9;
      *((_QWORD *)v36 + 1) = 5242880;
      *((_DWORD *)v36 + 8) = 6;
      v38 = v36 + 24;
LABEL_41:
      *v38 = 0;
      v17 = (v18 + v37);
      if ((_DWORD)v17)
        goto LABEL_21;
      goto LABEL_42;
    }
    if (!v19)
      goto LABEL_32;
    v21 = &v19[56 * v17];
    v21[52] = 1;
    *(_QWORD *)v21 = v16;
    *((_QWORD *)v21 + 1) = 5242880;
    *((_DWORD *)v21 + 8) = 6;
    *((_QWORD *)v21 + 3) = 0;
    v17 = (v17 + 1);
    if (v16 >= v9)
      goto LABEL_19;
    v22 = v16 + v43.u32[2];
    v19 = add_sections(v19, (v18 + 1), 1);
    if (v22 > v9)
    {
      v15 = v20;
      if (!v19)
        goto LABEL_32;
      v39 = &v19[56 * v17];
      v39[52] = 1;
      *(_QWORD *)v39 = v9;
      *((_QWORD *)v39 + 1) = 5242880;
      *((_DWORD *)v39 + 8) = 7;
      v38 = v39 + 24;
      v37 = 2;
      goto LABEL_41;
    }
    v15 = v20;
    if (!v19)
      goto LABEL_32;
    v23 = v16 + v43.u32[2];
    v24 = &v19[56 * v17];
    v24[52] = 1;
    *(_QWORD *)v24 = v23;
    *((_QWORD *)v24 + 1) = 5242880;
    *((_DWORD *)v24 + 8) = 7;
    *((_QWORD *)v24 + 3) = 0;
    v16 += v43.u32[2];
    v17 = (v18 + 2);
LABEL_19:
    v15 = v19;
  }
  while (v16 < v9);
  if ((_DWORD)v17)
  {
LABEL_21:
    v13 = v17;
    v15 = v19;
    goto LABEL_23;
  }
LABEL_42:
  v15 = v19;
LABEL_43:
  *v42 = v15;
  if (gVerbose == 2)
  {
    if (CK_DEFAULT_LOG_BLOCK_9 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_534);
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
      && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
    {
      v40 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("returning %u sections for \"%s\"\n"), v17, *(_QWORD *)(a1 + 104));
      if (CK_DEFAULT_LOG_BLOCK_9 != -1)
        dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_538_0);
      v41 = CK_DEFAULT_LOG_INTERNAL_9;
      if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v40;
        _os_log_impl(&dword_20A95C000, v41, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
      }
      if (v40)
        CFRelease(v40);
    }
    print_sections((uint64_t *)v15, v17);
  }
  return v17;
}

uint64_t create_sqlite3_db_profile(uint64_t a1, char **a2, _DWORD *a3, _BYTE *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  CFStringRef v18;
  NSObject *v19;
  uint8_t buf[16];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (a3)
    *a3 = 8;
  if (a4)
    *a4 = 0;
  v8 = *(_QWORD *)(a1 + 80);
  v27 = 0;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)buf = 0;
  if (!(*(unsigned int (**)(uint64_t, _QWORD, __int128 *, uint64_t, uint8_t *, _QWORD))(v10 + 72))(v9, 0, &v21, 100, buf, 0))goto LABEL_12;
  if (*(_QWORD *)buf <= 0x63uLL)
    goto LABEL_12;
  v11 = (unsigned __int16)v22;
  v12 = __rev16((unsigned __int16)v22);
  LOWORD(v22) = v12;
  v13 = add_sections(0, 0, 1);
  if (!v13)
    goto LABEL_12;
  v14 = (uint64_t *)v13;
  v13[52] = 1;
  v15 = 0x10000;
  if (v11 != 256)
    v15 = v12;
  *(_QWORD *)v13 = v8;
  *((_QWORD *)v13 + 1) = v15;
  *((_DWORD *)v13 + 8) = 4;
  *((_QWORD *)v13 + 3) = 0;
  if (*(_DWORD *)(a1 + 164) < (((int)v8 + 5242879) / 5242880))
  {
    free(v13);
LABEL_12:
    if (a4)
      *a4 = 1;
    return (*(uint64_t (**)(uint64_t, char **, _DWORD *, _QWORD))(a1 + 168))(a1, a2, a3, 0);
  }
  *a2 = v13;
  if (gVerbose != 2)
    return 1;
  if (CK_DEFAULT_LOG_BLOCK_9 != -1)
    dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_540_1);
  if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG)
    && os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
  {
    v18 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("returning %u sections for \"%s\"\n"), 1, *(_QWORD *)(a1 + 104));
    if (CK_DEFAULT_LOG_BLOCK_9 != -1)
      dispatch_once(&CK_DEFAULT_LOG_BLOCK_9, &__block_literal_global_544_0);
    v19 = CK_DEFAULT_LOG_INTERNAL_9;
    if (os_log_type_enabled((os_log_t)CK_DEFAULT_LOG_INTERNAL_9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v18;
      _os_log_impl(&dword_20A95C000, v19, OS_LOG_TYPE_DEBUG, "%{public}@", buf, 0xCu);
    }
    if (v18)
      CFRelease(v18);
  }
  v16 = 1;
  print_sections(v14, 1u);
  return v16;
}

os_log_t __createChunkProfile_block_invoke_84()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __print_sections_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __print_sections_block_invoke_3()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __extension_from_uti_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __extension_from_uti_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __canonize_extension_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __canonize_extension_block_invoke_3()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_fixed_profile_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_fixed_profile_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_fixed_profile_block_invoke_120()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_fixed_profile_block_invoke_2_125()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_fixed_profile_block_invoke_128()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_fixed_profile_block_invoke_2_133()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_fixed_profile_block_invoke_136()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_fixed_profile_block_invoke_3()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_fixed_profile_block_invoke_146()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_fixed_profile_block_invoke_2_151()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_fixed_profile_block_invoke_154()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_fixed_profile_block_invoke_3_162()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_fixed_profile_block_invoke_165()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_fixed_profile_block_invoke_3_171()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_safe_rabin_profile_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_safe_rabin_profile_block_invoke_3()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_safe_rabin_profile_block_invoke_182()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_safe_rabin_profile_block_invoke_3_190()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_rabin_profile_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_default_rabin_profile_block_invoke_3()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

BOOL is_ID3v2_tag(uint64_t a1, unint64_t a2)
{
  BOOL v2;

  if (a2 < 0xA)
    return 0;
  v2 = *(_WORD *)a1 == 17481 && *(_BYTE *)(a1 + 2) == 51;
  return v2
      && *(unsigned __int8 *)(a1 + 3) != 255
      && *(unsigned __int8 *)(a1 + 4) != 255
      && *(unsigned __int8 *)(a1 + 6) <= 0x80u
      && *(unsigned __int8 *)(a1 + 7) <= 0x80u
      && *(unsigned __int8 *)(a1 + 8) <= 0x80u
      && *(unsigned __int8 *)(a1 + 9) < 0x81u;
}

os_log_t __is_qt_header_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __is_qt_header_block_invoke_3()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_custom_fixed_profile_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_custom_fixed_profile_block_invoke_3()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_3()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_233()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_3_241()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_244()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_3_250()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_253()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_3_261()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_264()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_3_272()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_276()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_3_284()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_287()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_3_293()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_296()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_3_304()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

uint64_t cmp_dir_rec_data(_QWORD *a1, _QWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *a1;
}

os_log_t __create_zip_profile_block_invoke_307()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_3_315()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

char *add_sections(void *a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char *v6;

  v5 = (char *)malloc_type_realloc(a1, 56 * (a3 + a2), 0x1000040C4DFEAEFuLL);
  v6 = v5;
  if (v5)
    bzero(&v5[56 * a2], 56 * a3);
  return v6;
}

os_log_t __create_zip_profile_block_invoke_318()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_3_326()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_329()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_3_335()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_338()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_3_346()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_349()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_3_357()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_360()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_3_368()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_371()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_zip_profile_block_invoke_3_377()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_387()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_2_390()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_393()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_3()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_403()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_2_408()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_411()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_2_414()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_417()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_3_425()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_428()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_2_433()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_436()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_2_439()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_442()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_3_450()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_453()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_3_461()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_464()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_central_dir_block_invoke_3_472()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_zip64_extra_field_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_zip64_extra_field_block_invoke_3()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_zip64_extra_field_block_invoke_483()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __locate_zip64_extra_field_block_invoke_3_489()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_mp3_profile_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_mp3_profile_block_invoke_3()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_mp3_profile_block_invoke_500()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_mp3_profile_block_invoke_2_505()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_mp3_profile_block_invoke_509()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_mp3_profile_block_invoke_3_519()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_mp3_profile_block_invoke_523()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_mp3_profile_block_invoke_3_529()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_sqlite3_db_wal_profile_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_sqlite3_db_wal_profile_block_invoke_3()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_sqlite3_db_profile_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

os_log_t __create_sqlite3_db_profile_block_invoke_3()
{
  os_log_t result;

  result = os_log_create("com.apple.chunkinglibrary", "default");
  CK_DEFAULT_LOG_INTERNAL_9 = (uint64_t)result;
  return result;
}

uint64_t CKProfileResultsCreate(uint64_t *a1, int a2, const void *a3, const void *a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  if (!a1)
    CKProfileResultsCreate_cold_1();
  if (a6)
    *a6 = 0;
  *a1 = 0;
  v11 = CKTypeRegister(&CKProfileResultsGetTypeID_typeID);
  result = CKTypeCreateInstance_(0, v11, 0x30uLL);
  if (result)
  {
    v13 = result;
    *(_DWORD *)(result + 16) = a2;
    *(_QWORD *)(result + 24) = a3;
    if (a3)
      CFRetain(a3);
    *(_QWORD *)(v13 + 32) = a4;
    if (a4)
      CFRetain(a4);
    *(_QWORD *)(v13 + 40) = a5;
    *a1 = v13;
    return 1;
  }
  return result;
}

uint64_t CKProfileResultsType(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 16);
  return result;
}

uint64_t CKProfileResultsConfigurationVersion(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 24);
  return result;
}

uint64_t CKProfileResultsResolvedFileExtension(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 32);
  return result;
}

uint64_t CKProfileResultsIsDefault(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 40);
  return result;
}

const char *CKProfileTypeDescription(unsigned int a1)
{
  if (a1 > 9)
    return "kCKProfileTypeUnknown";
  else
    return (&off_24C34FD78)[a1];
}

uint64_t CKProfileTypeFromString(const void *a1)
{
  if (CFEqual(a1, CFSTR("kCKProfileTypeNone")))
    return 0;
  if (CFEqual(a1, CFSTR("kCKProfileTypeFixed")))
    return 1;
  if (CFEqual(a1, CFSTR("kCKProfileTypeRabin")))
    return 2;
  if (CFEqual(a1, CFSTR("kCKProfileTypeZip")))
    return 3;
  if (CFEqual(a1, CFSTR("kCKProfileTypeMP3")))
    return 4;
  if (CFEqual(a1, CFSTR("kCKProfileTypeQuicktime")))
    return 5;
  if (CFEqual(a1, CFSTR("kCKProfileTypeCustomFixed")))
    return 6;
  if (CFEqual(a1, CFSTR("kCKProfileTypeSQLiteDatabaseWAL")))
    return 7;
  if (CFEqual(a1, CFSTR("kCKProfileTypeSQLiteDatabase")))
    return 8;
  if (CFEqual(a1, CFSTR("kCKProfileTypeSQLiteDatabaseS")))
    return 9;
  return 0;
}

const char *CKDefaultProfilePolicyTypeDescription(int a1)
{
  const char *v1;

  v1 = "kCKDefaultProfilePolicyTypeUnknown";
  if (a1 == 1)
    v1 = "kCKDefaultProfilePolicyTypeFixedLength";
  if (a1)
    return v1;
  else
    return "kCKDefaultProfilePolicyTypeInferred";
}

BOOL CKDefaultProfilePolicyTypeFromString(const void *a1)
{
  return !CFEqual(a1, CFSTR("kCKDefaultProfilePolicyTypeInferred"))
      && CFEqual(a1, CFSTR("kCKDefaultProfilePolicyTypeFixedLength")) != 0;
}

void _CKProfileResultsCFFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 24);
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(a1 + 24) = 0;
  v3 = *(const void **)(a1 + 32);
  if (v3)
    CFRelease(v3);
  *(_QWORD *)(a1 + 32) = 0;
}

BOOL _CKProfileResultsCFEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

CFStringRef _CKProfileResultsCFCopyFormatDescription(uint64_t a1)
{
  const __CFAllocator *v1;
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  int Value;

  v1 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v2 = *(int *)(a1 + 16);
  if (v2 > 9)
    v3 = "kCKProfileTypeUnknown";
  else
    v3 = (&off_24C34FD78)[v2];
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 40))
  {
    v6 = "(null)";
  }
  else
  {
    Value = CFBooleanGetValue(0);
    v6 = "T";
    if (!Value)
      v6 = "F";
  }
  return CFStringCreateWithFormat(v1, 0, CFSTR("type:%s configVersion:%@ ext:%@ isDefault:%s"), v3, v4, v5, v6);
}

uint64_t CKChunkSignatureGeneratorV1Init(uint64_t a1)
{
  CC_SHA256_Init(*(CC_SHA256_CTX **)(a1 + 48));
  *(_DWORD *)(a1 + 40) = 0;
  return 1;
}

uint64_t CKChunkSignatureGeneratorV1Update(uint64_t a1, const void *a2, CC_LONG a3)
{
  *(_DWORD *)(a1 + 40) += a3;
  CC_SHA256_Update(*(CC_SHA256_CTX **)(a1 + 48), a2, a3);
  return 1;
}

uint64_t CKChunkSignatureGeneratorV1Finish(uint64_t a1, uint64_t a2, uint64_t *a3, CFErrorRef *a4)
{
  const void *v8;
  uint64_t *v9;
  unsigned __int8 *v10;
  char *v11;
  uint64_t v12;
  int v13;
  size_t v14;
  unsigned __int8 *v15;
  size_t v16;
  uint64_t i;
  size_t v18;
  __int128 v19;
  CFErrorRef v20;
  CFErrorRef v21;
  unsigned __int8 v23;
  char v24;
  unsigned __int8 md[16];
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (a4)
    *a4 = 0;
  *(_OWORD *)md = 0u;
  v26 = 0u;
  v9 = (uint64_t *)(a1 + 32);
  v8 = *(const void **)(a1 + 32);
  if (!v8)
  {
    CC_SHA256_Final(md, *(CC_SHA256_CTX **)(a1 + 48));
    v24 = CKChunkDigestArgumentsChunkSchemeByte(*(_QWORD *)(a1 + 24));
    v13 = CKChunkDigestArgumentsChunkEncryptionKeySchemeByte(*(_QWORD *)(a1 + 24));
    v23 = v13;
    if (v13)
    {
      v14 = CKSchemeAndEncryptionKeySize(&v23);
      v15 = (unsigned __int8 *)malloc_type_malloc(v14, 0xB6CAFB40uLL);
      v10 = v15;
      if (!v15)
      {
        v11 = 0;
        goto LABEL_21;
      }
      *v15 = v23;
      v16 = CKChunkEncryptionKeySize(v15);
      bzero(v10 + 1, v16);
      for (i = 0; i != 16; ++i)
        v10[i + 1] = md[i + 16] ^ md[i];
    }
    else
    {
      v10 = 0;
    }
    v18 = CKChunkSchemeAndSignatureSize(&v24);
    v11 = (char *)malloc_type_malloc(v18, 0xFD3E9162uLL);
    if (!v11)
      goto LABEL_21;
    CC_SHA256(md, 0x20u, md);
    *v11 = v24;
    v19 = *(_OWORD *)md;
    *(_DWORD *)(v11 + 17) = v26;
    *(_OWORD *)(v11 + 1) = v19;
    if (!CKChunkDigestResultsCreate((_QWORD *)(a1 + 32), v11, v10, *(_DWORD *)(a1 + 40)))
      goto LABEL_21;
    if (a2)
    {
      v12 = CKChunkDigestResultsSignatureAndKeyEqual(a2, *v9);
      if (!(_DWORD)v12)
      {
        v20 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], CFSTR("com.apple.chunkinglibrary"), 4, 0);
        v21 = v20;
        if (a4 && v20)
        {
          CFRetain(v20);
          *a4 = v21;
LABEL_27:
          CFRelease(v21);
          goto LABEL_21;
        }
        if (v20)
          goto LABEL_27;
LABEL_21:
        v12 = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v12 = 1;
    }
    v8 = (const void *)*v9;
    if (!*v9)
      CKChunkSignatureGeneratorV1Finish_cold_1();
    goto LABEL_5;
  }
  v10 = 0;
  v11 = 0;
  v12 = 1;
LABEL_5:
  if (a3)
  {
    CFRetain(v8);
    *a3 = *v9;
  }
LABEL_22:
  free(v10);
  free(v11);
  return v12;
}

uint64_t CKFileDigestResultsV1Alloc(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  *a1 = 0;
  v3 = 0;
  result = CKFileDigestResultsAllocate(&v3, 1, 0);
  if ((_DWORD)result)
    *a1 = v3;
  return result;
}

BOOL CKFileDigestResultsV1IsEqual(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  BOOL v4;

  v2 = *(_BYTE **)(a1 + 32);
  v3 = *(_BYTE **)(a2 + 32);
  if (v2 == v3)
    return 1;
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  return !v4 && CKFileSignaturesEqual(v2, v3);
}

CFStringRef CKFileDigestResultsV1CopyDescription(uint64_t a1)
{
  void *v2;
  CFStringRef v3;

  v2 = CKFileSchemeAndSignatureCopyCString(*(char **)(a1 + 32));
  v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("sig %s len %llu"), v2, *(_QWORD *)(a1 + 24));
  free(v2);
  return v3;
}

void CKChunkCryptorV2Init_cold_1()
{
  __assert_rtn("CKChunkCryptorV2Init", "CKChunkCryptorV2.c", 42, "paddedLength >= dataLength");
}

void CKCreateChunkIDsFromFile_cold_1()
{
  __assert_rtn("CKCreateChunkIDsFromFile", "ChunkStore.c", 761, "!CKChunkStoreIsRegistry(chunkStore) && \"can't create chunk IDs because the chunkstore is a registry\"");
}

void CKCreateChunkIDsFromFD_cold_1()
{
  __assert_rtn("CKCreateChunkIDsFromFD", "ChunkStore.c", 776, "!CKChunkStoreIsRegistry(chunkStore) && \"can't create chunk IDs because the chunkstore is a registry\"");
}

void CKChunkListForToken_cold_1()
{
  __assert_rtn("CKChunkListForToken", "ChunkStore.c", 783, "!CKChunkStoreIsRegistry(chunkStore) && \"can't get chunklist because the chunkstore is a registry\"");
}

void CKChunkRefsForToken_cold_1()
{
  __assert_rtn("CKChunkRefsForToken", "ChunkStore.c", 817, "!CKChunkStoreIsRegistry(chunkStore) && \"can't get chunk refs because the chunkstore is a registry\"");
}

void CKCopyDataForChunkID_cold_1()
{
  __assert_rtn("CKCopyDataForChunkID", "ChunkStore.c", 833, "!CKChunkStoreIsRegistry(chunkStore) && \"can't copy data for chunk because the chunkstore is a registry\"");
}

void addSourceChunk_cold_1()
{
  __assert_rtn("addSourceChunk", "ChunkStore.c", 1048, "array->data");
}

void addSourceChunk_cold_2()
{
  __assert_rtn("addSourceChunk", "ChunkStore.c", 1065, "rc || count < array->count");
}

void addSourceChunk_cold_3()
{
  __assert_rtn("addSourceChunk", "ChunkStore.c", 1047, "array->count < array->capacity");
}

void _CSFlushChunkBatch_cold_1()
{
  __assert_rtn("_CSFlushChunkBatch", "ChunkStore.c", 977, "batchIndex <= chunkCount");
}

void _CSFlushChunkBatch_cold_2()
{
  __assert_rtn("_CSFlushChunkBatch", "ChunkStore.c", 985, "chunkSize");
}

void CKRemoveStoredFile_cold_1()
{
  __assert_rtn("CKRemoveStoredFile", "ChunkStore.c", 1144, "!CKChunkStoreIsRegistry(chunkStore) && \"can't remove stored file because the chunkstore is a registry\"");
}

void CKCompactStorage_cold_1()
{
  __assert_rtn("CKCompactStorage", "ChunkStore.c", 1161, "!CKChunkStoreIsRegistry(chunkStore) && \"can't compact storage because the chunkstore is a registry\"");
}

void CKCreateStoredFileWithFlags_cold_1()
{
  __assert_rtn("CKCreateStoredFileWithFlags", "ChunkStore.c", 1181, "!CKChunkStoreIsRegistry(chunkStore) && \"can't create stored file because the chunkstore is a registry\"");
}

void CKCreateStoredFile_cold_1()
{
  __assert_rtn("CKCreateStoredFile", "ChunkStore.c", 1192, "!CKChunkStoreIsRegistry(chunkStore) && \"can't create stored file because the chunkstore is a registry\"");
}

void CKCommitChunkedFile_cold_1()
{
  __assert_rtn("CKCommitChunkedFile", "ChunkStore.c", 1200, "!CKChunkStoreIsRegistry(chunkStore) && \"can't commit chunked file because the chunkstore is a registry\"");
}

void CKCopyChunkListForStoredFileToken_cold_1()
{
  __assert_rtn("CKCopyChunkListForStoredFileToken", "ChunkStore.c", 1219, "!CKChunkStoreIsRegistry(chunkStore) && \"can't copy chunklist for stored file because the chunkstore is a registry\"");
}

void CKGetLocationOfChunkInStorage_cold_1()
{
  __assert_rtn("CKGetLocationOfChunkInStorage", "ChunkStore.c", 1237, "!CKChunkStoreIsRegistry(chunkStore) && \"can't get location of chunk in storage because the chunkstore is a registry\"");
}

void CKTokenForStoredChunk_cold_1()
{
  __assert_rtn("CKTokenForStoredChunk", "ChunkStore.c", 1271, "!CKChunkStoreIsRegistry(chunkStore) && \"can't get token for stored chunk because the chunkstore is a registry\"");
}

void CKRegisteredItemCount_cold_1()
{
  __assert_rtn("CKRegisteredItemCount", "ChunkStore.c", 1291, "CKChunkStoreIsRegistry(chunkStore) && \"can't get registered item count because the chunkstore is not a registry\"");
}

void CKGetRegisteredItems_cold_1()
{
  __assert_rtn("CKGetRegisteredItems", "ChunkStore.c", 1306, "CKChunkStoreIsRegistry(chunkStore) && \"can't get registered items because the chunkstore is not a registry\"");
}

void CKRegisterChunksForFileWithHint_cold_1()
{
  __assert_rtn("CKRegisterChunksForFileWithHint", "ChunkStore.c", 1446, "CKChunkStoreIsRegistry(cs) && \"can't register chunks for file because the chunkstore is not a registry\"");
}

void CKRegisterChunksForItem_cold_1()
{
  __assert_rtn("CKRegisterChunksForItem", "ChunkStore.c", 1837, "CKChunkStoreIsRegistry(cs) && \"can't register chunks for item because the chunkstore is not a registry\"");
}

void registerChunksForItem_cold_1()
{
  __assert_rtn("registerChunksForItem", "ChunkStore.c", 1567, "readContext->open");
}

void registerChunksForItem_cold_2()
{
  __assert_rtn("registerChunksForItem", "ChunkStore.c", 1568, "readContext->close");
}

void registerChunksForItem_cold_3()
{
  __assert_rtn("registerChunksForItem", "ChunkStore.c", 1569, "readContext->read");
}

void registerChunksForItem_cold_4()
{
  __assert_rtn("registerChunksForItem", "ChunkStore.c", 1570, "readContext->stat");
}

void registerChunksForItem_cold_5()
{
  __assert_rtn("registerChunksForItem", "ChunkStore.c", 1745, "opCtx->fileDigestResults");
}

void registerChunksForItem_cold_6()
{
  __assert_rtn("registerChunksForItem", "ChunkStore.c", 1760, "CKFileDigestResultsEqual(fileDigestResults, opCtx->expectedFileDigestResults)");
}

void registerChunksForItem_cold_7()
{
  __assert_rtn("registerChunksForItem", "ChunkStore.c", 1660, "overwriteChunkRegistry || (!alreadyChunked && !chunks && !fileDigestResults)");
}

void registerChunksForItem_cold_8()
{
  __assert_rtn("registerChunksForItem", "ChunkStore.c", 1523, "CKChunkStoreIsRegistry(cs) && \"can't register chunks for item because the chunkstore is not a registry\"");
}

void CKRegisterItemAndChunks_cold_1()
{
  __assert_rtn("CKRegisterItemAndChunks", "ChunkStore.c", 1875, "fileDigestResults");
}

void CKRegisterItemAndChunks_cold_2()
{
  __assert_rtn("CKRegisterItemAndChunks", "ChunkStore.c", 1853, "CKChunkStoreIsRegistry(cs) && \"can't register item and chunks because the chunkstore is not a registry\"");
}

void CKUnregisterFile_cold_1()
{
  __assert_rtn("CKUnregisterFile", "ChunkStore.c", 1916, "CKChunkStoreIsRegistry(chunkStore) && \"can't unregister file because the chunkstore is not a registry\"");
}

void CKGetRegisteredChunksForItemID_cold_1()
{
  __assert_rtn("CKGetRegisteredChunksForItemID", "ChunkStore.c", 1933, "CKChunkStoreIsRegistry(chunkStore) && \"can't get registered chunks because the chunkstore is not a registry\"");
}

void CKGetRegisteredChunksForFileSignature_cold_1()
{
  __assert_rtn("CKGetRegisteredChunksForFileSignature", "ChunkStore.c", 1949, "CKChunkStoreIsRegistry(chunkStore) && \"can't get registered chunks because the chunkstore is not a registry\"");
}

void CKRegisterChunk_cold_1()
{
  __assert_rtn("CKRegisterChunk", "ChunkStore.c", 1965, "CKChunkStoreIsRegistry(chunkStore) && \"can't register chunk because the chunkstore is not a registry\"");
}

void CKGetRegisteredChunk_cold_1()
{
  __assert_rtn("CKGetRegisteredChunk", "ChunkStore.c", 1984, "CKChunkStoreIsRegistry(chunkStore) && \"can't get registered chunk because the chunkstore is not a registry\"");
}

void CKGetRegisteredChunks_cold_1()
{
  __assert_rtn("CKGetRegisteredChunks", "ChunkStore.c", 2000, "CKChunkStoreIsRegistry(chunkStore) && \"can't get registered chunks because the chunkstore is not a registry\"");
}

void CKRegisterFile_cold_1()
{
  __assert_rtn("CKRegisterFile", "ChunkStore.c", 2017, "CKChunkStoreIsRegistry(chunkStore) && \"can't register file because the chunkstore is not a registry\"");
}

void CKGetRegisteredFileSignature_cold_1()
{
  __assert_rtn("CKGetRegisteredFileSignature", "ChunkStore.c", 2051, "CKChunkStoreIsRegistry(chunkStore) && \"can't get signature for registered file because the chunkstore is not a registry\"");
}

void CKGetRegisteredFileMetadata_cold_1()
{
  __assert_rtn("CKGetRegisteredFileMetadata", "ChunkStore.c", 2059, "CKChunkStoreIsRegistry(chunkStore) && \"can't get signature for registered file because the chunkstore is not a registry\"");
}

void CKGetRegisteredFileItemID_cold_1()
{
  __assert_rtn("CKGetRegisteredFileItemID", "ChunkStore.c", 2087, "CKChunkStoreIsRegistry(chunkStore) && \"can't get item ID for registered file because the chunkstore is not a registry\"");
}

void CKUnregisterAllTemporaryChunks_cold_1()
{
  __assert_rtn("CKUnregisterAllTemporaryChunks", "ChunkStore.c", 2104, "CKChunkStoreIsRegistry(chunkStore) && \"can't unregister all temporary chunks because the chunkstore is not a registry\"");
}

void CKUnregisterTemporaryChunks_cold_1()
{
  __assert_rtn("CKUnregisterTemporaryChunks", "ChunkStore.c", 2123, "CKChunkStoreIsRegistry(chunkStore) && \"can't unregister temporary chunks because the chunkstore is not a registry\"");
}

void CKRegisterTemporaryChunk_cold_1()
{
  __assert_rtn("CKRegisterTemporaryChunk", "ChunkStore.c", 2142, "CKChunkStoreIsRegistry(chunkStore) && \"can't register temporary chunk because the chunkstore is not a registry\"");
}

void CKRegisterTemporaryChunks_cold_1()
{
  __assert_rtn("CKRegisterTemporaryChunks", "ChunkStore.c", 2162, "CKChunkStoreIsRegistry(chunkStore) && \"can't register temporary chunks because the chunkstore is not a registry\"");
}

void CKUnregisterTemporaryChunk_cold_1()
{
  __assert_rtn("CKUnregisterTemporaryChunk", "ChunkStore.c", 2191, "CKChunkStoreIsRegistry(chunkStore) && \"can't unregister temporary chunk because the chunkstore is not a registry\"");
}

void CKUnregisterTemporaryNChunk_cold_1()
{
  __assert_rtn("CKUnregisterTemporaryNChunk", "ChunkStore.c", 2210, "CKChunkStoreIsRegistry(chunkStore) && \"can't unregister temporary chunk because the chunkstore is not a registry\"");
}

void CKUnregisterTemporaryTChunk_cold_1()
{
  __assert_rtn("CKUnregisterTemporaryTChunk", "ChunkStore.c", 2229, "CKChunkStoreIsRegistry(chunkStore) && \"can't unregister temporary chunk because the chunkstore is not a registry\"");
}

void CKRelocateTemporaryChunk_cold_1()
{
  __assert_rtn("CKRelocateTemporaryChunk", "ChunkStore.c", 2248, "CKChunkStoreIsRegistry(chunkStore) && \"can't relocate temporary chunk because the chunkstore is not a registry\"");
}

void CKConvertTemporaryChunks_cold_1()
{
  __assert_rtn("CKConvertTemporaryChunks", "ChunkStore.c", 2278, "CKChunkStoreIsRegistry(chunkStore) && \"can't convert temporary chunks because the chunkstore is not a registry\"");
}

void CKKeyForRegisteredChunk_cold_1()
{
  __assert_rtn("CKKeyForRegisteredChunk", "ChunkStore.c", 2297, "CKChunkStoreIsRegistry(chunkStore) && \"can't get key for registered chunk because the chunkstore is not a registry\"");
}

void CKRegisterNeededChunk_cold_1()
{
  __assert_rtn("CKRegisterNeededChunk", "ChunkStore.c", 2313, "CKChunkStoreIsRegistry(chunkStore) && \"can't register needed chunk because the chunkstore is not a registry\"");
}

void CKUnregisterChunksForItem_cold_1()
{
  __assert_rtn("CKUnregisterChunksForItem", "ChunkStore.c", 2332, "CKChunkStoreIsRegistry(chunkStore) && \"can't unregister chunks because the chunkstore is not a registry\"");
}

void CKTokenForRegisteredChunk_cold_1()
{
  __assert_rtn("CKTokenForRegisteredChunk", "ChunkStore.c", 2351, "CKChunkStoreIsRegistry(chunkStore) && \"can't get token for registered chunk because the chunkstore is not a registry\"");
}

void chunkFdForStorage_cold_1()
{
  __assert_rtn("chunkFdForStorage", "ChunkStore.c", 2372, "!CKChunkStoreIsRegistry(cs) && \"can't chunk file for storage because the chunkstore is a registry\"");
}

void chunkFdForStorage_cold_2()
{
  __assert_rtn("chunkFdForStorage", "ChunkStore.c", 2373, "fdInfo");
}

void setChunkListCacheBlob_cold_1()
{
  __assert_rtn("setChunkListCacheBlob", "CSchunk.c", 1214, "sizeof(*blob) <= (uint32_t)CFDataGetLength(data)");
}

void setChunkListCacheBlob_cold_2()
{
  __assert_rtn("setChunkListCacheBlob", "CSchunk.c", 1216, "kCKChunkListCacheType == opCtx->chunkListCacheType || kCKChunkListCacheCloudType == opCtx->chunkListCacheType");
}

void chunkItem_cold_1()
{
  __assert_rtn("setChunkListCache", "CSchunk.c", 1297, "chunkInfoSize <= UINT16_MAX");
}

void chunkItem_cold_2()
{
  __assert_rtn("setChunkListCache", "CSchunk.c", 1348, "p == (u_char*)blob + blobSize");
}

void chunkItem_cold_3()
{
  __assert_rtn("setChunkListCache", "CSchunk.c", 1281, "fileSignature");
}

void chunkItem_cold_4()
{
  __assert_rtn("setChunkListCache", "CSchunk.c", 1284, "fileSignatureSize <= UINT16_MAX");
}

void chunkItem_cold_5()
{
  __assert_rtn("chunkUsingChunkCache", "CSchunk.c", 1388, "cache->blobData");
}

void chunkItem_cold_6()
{
  __assert_rtn("chunkUsingChunkCache", "CSchunk.c", 1422, "sizeof(uint32_t) < chunkInfoSize");
}

void chunkItem_cold_7()
{
  __assert_rtn("chunkUsingChunkCache", "CSchunk.c", 1392, "!opCtx->processedSize");
}

void chunkItem_cold_8()
{
  __assert_rtn("chunkUsingChunkCache", "CSchunk.c", 1391, "!opCtx->chunkCount");
}

void chunkItem_cold_9()
{
  __assert_rtn("chunkUsingChunkCache", "CSchunk.c", 1390, "!sourceChunk->data");
}

void closeFd_cold_1()
{
  __assert_rtn("closeFd", "CSchunk.c", 2275, "opCtx->openInfo == openInfo");
}

void statFd_cold_1()
{
  __assert_rtn("statFd", "CSchunk.c", 2287, "opCtx->openInfo == openInfo");
}

void readFd_cold_1()
{
  __assert_rtn("readFd", "CSchunk.c", 2307, "opCtx->openInfo == openInfo");
}

void getCacheBlobFd_cold_1()
{
  __assert_rtn("getCacheBlobFd", "CSchunk.c", 2378, "opCtx->openInfo == openInfo");
}

void setCacheBlobFd_cold_1()
{
  __assert_rtn("setCacheBlobFd", "CSchunk.c", 2388, "opCtx->openInfo == openInfo");
}

void _SetSourceChunk_cold_1()
{
  __assert_rtn("_SetSourceChunk", "CSchunk.c", 340, "!sourceChunk->subchunks.blob");
}

void _SetSourceChunk_cold_2()
{
  __assert_rtn("_SetSourceChunk", "CSchunk.c", 339, "!sourceChunk->subchunkSignatureGenerator");
}

void _SetSourceChunk_cold_3()
{
  __assert_rtn("_SetSourceChunk", "CSchunk.c", 325, "!sourceChunk->signatureGenerator");
}

void _SetSourceChunk_cold_4()
{
  __assert_rtn("_SetSourceChunk", "CSchunk.c", 324, "!sourceChunk->data");
}

void _ClearSourceChunk_cold_1()
{
  __assert_rtn("_ClearSourceChunk", "CSchunk.c", 365, "!sourceChunk->subchunks.blob");
}

void _ClearSourceChunk_cold_2()
{
  __assert_rtn("_ClearSourceChunk", "CSchunk.c", 360, "sourceChunk->subchunks.blob");
}

void CSfixed_subchunk_stream_cold_1()
{
  __assert_rtn("CSfixed_subchunk_stream", "CSchunk.c", 504, "bufferLength");
}

void CSfixed_subchunk_stream_cold_2()
{
  __assert_rtn("CSfixed_subchunk_stream", "CSchunk.c", 548, "maxSubchunkSize/1024 < 256");
}

void CSfixed_subchunk_stream_cold_3()
{
  __assert_rtn("CSfixed_subchunk_stream", "CSchunk.c", 556, "signature");
}

void CSfixed_subchunk_stream_cold_4()
{
  __assert_rtn("CSfixed_subchunk_stream", "CSchunk.c", 559, "sourceChunk->subchunks.count < FIXED_CHUNK_SIZE/(1024*64)");
}

void CS_fixed_chunk_stream_accumulate_cold_1()
{
  __assert_rtn("CS_fixed_chunk_stream_accumulate", "CSchunk.c", 475, "sourceChunk->data || !sourceChunk->chk.length");
}

void cs_longrdunlock_cold_1()
{
  __assert_rtn("cs_longrdunlock", "CSChunkStore.c", 186, "lock->mutexHolder == 0");
}

void _CSPrepareStatement_cold_1()
{
  __assert_rtn("_CSPrepareStatement", "CSChunkStore.c", 1426, "chunkstore->db");
}

void _CSGetStorageFile_cold_1()
{
  __assert_rtn("_CSGetStorageFile", "CSChunkStore.c", 1908, "neededSize <= INT_MAX");
}

void _CSCompactStorage_cold_1()
{
  __assert_rtn("_CSRelocateStorageFileChunks", "CSChunkStore.c", 2321, "totalMoved <= origFileSize");
}

void _CSCompactStorage_cold_2()
{
  __assert_rtn("_CSRelocateStorageFileChunks", "CSChunkStore.c", 2205, "newRowID != CK_INVALID_TOKEN");
}

void _CSCompactStorage_cold_3()
{
  __assert_rtn("_CSRelocateStorageFileChunks", "CSChunkStore.c", 2034, "!cs->readOnly");
}

void _CSCompactStorage_cold_4()
{
  __assert_rtn("copyReferencedChunks", "CSChunkStore.c", 2671, "!cs->readOnly");
}

void _CSCompactStorage_cold_5()
{
  __assert_rtn("removeUnreferencedChunksAtEof", "CSChunkStore.c", 2468, "!cs->readOnly");
}

void _CSCompactStorage_cold_6()
{
  __assert_rtn("removeUnreferencedChunks", "CSChunkStore.c", 2607, "!cs->readOnly");
}

void _CSRemovePendingBatchesForInode_cold_1()
{
  __assert_rtn("_CSRemovePendingBatchesForInode", "CSChunkStore.c", 655, "!cs->readOnly");
}

void _CSRemoveStoredFile_cold_1()
{
  __assert_rtn("_CSRemoveStoredFile", "CSChunkStore.c", 3162, "!cs->readOnly");
}

void addRegisteredChunk_cold_1()
{
  __assert_rtn("addRegisteredChunk", "CSChunkStore.c", 3887, "maxChunkSize");
}

void addRegisteredChunk_cold_2()
{
  __assert_rtn("addRegisteredChunk", "CSChunkStore.c", 3901, "array->data");
}

void addRegisteredChunk_cold_3()
{
  __assert_rtn("addRegisteredChunk", "CSChunkStore.c", 3925, "rc || count < array->count");
}

void addRegisteredChunk_cold_4()
{
  __assert_rtn("addRegisteredChunk", "CSChunkStore.c", 3900, "array->count < array->capacity");
}

void addStoredChunk_cold_1()
{
  __assert_rtn("addStoredChunk", "CSChunkStore.c", 3953, "chunkSize");
}

void addStoredChunk_cold_2()
{
  __assert_rtn("addStoredChunk", "CSChunkStore.c", 3967, "array->data");
}

void addStoredChunk_cold_3()
{
  __assert_rtn("addStoredChunk", "CSChunkStore.c", 3986, "rc || count < array->count");
}

void addStoredChunk_cold_4()
{
  __assert_rtn("addStoredChunk", "CSChunkStore.c", 3966, "array->count < array->capacity");
}

void _CSRegisterChunk_cold_1()
{
  __assert_rtn("_CSRegisterChunk", "CSChunkStore.c", 4044, "!chunk->hasEncryptedSignature && \"Unexpected encryption key for chunk during registration.\"");
}

void _CSRegisterChunk_cold_2()
{
  __assert_rtn("_CSRegisterChunk", "CSChunkStore.c", 4040, "chunk->hasEncryptedSignature && \"Must have encryption key to be registered.\"");
}

void _CSRegisterChunk_cold_3()
{
  __assert_rtn("_CSRegisterChunk", "CSChunkStore.c", 4020, "!cs->readOnly");
}

void registerItem_cold_1()
{
  __assert_rtn("registerItem", "CSChunkStore.c", 4178, "!cs->readOnly");
}

void unregisterItem_cold_1()
{
  __assert_rtn("unregisterItem", "CSChunkStore.c", 4257, "!cs->readOnly");
}

void _CSUnregisterAllTemporaryChunks_cold_1()
{
  __assert_rtn("_CSUnregisterAllTemporaryChunks", "CSChunkStore.c", 4550, "!cs->readOnly");
}

void _CSUnregisterTemporaryChunks_cold_1()
{
  __assert_rtn("_CSUnregisterTemporaryChunks", "CSChunkStore.c", 4583, "!cs->readOnly");
}

void _CSRelocateRegisteredChunk_cold_1()
{
  __assert_rtn("_CSRelocateRegisteredChunk", "CSChunkStore.c", 4626, "!cs->readOnly");
}

void _CSUnregisterChunk_cold_1()
{
  __assert_rtn("_CSUnregisterChunk", "CSChunkStore.c", 4709, "!cs->readOnly");
}

void _CSConvertTemporaryChunks_cold_1()
{
  __assert_rtn("_CSConvertTemporaryChunks", "CSChunkStore.c", 4741, "!cs->readOnly");
}

void _CSUnregisterAllChunksForItem_cold_1()
{
  __assert_rtn("_CSUnregisterAllChunksForItem", "CSChunkStore.c", 4819, "!cs->readOnly");
}

void _CSGetRegisteredItems_cold_1()
{
  __assert_rtn("_CSGetRegisteredItems", "CSChunkStore.c", 4871, "itemCount && \"item count\"");
}

void _CSGetRegisteredItems_cold_2()
{
  __assert_rtn("_CSGetRegisteredItems", "CSChunkStore.c", 4872, "*itemCount > 0 && \"item count = 0\"");
}

uint64_t _CSBruteForceDatabaseCorruptionRecovery_cold_1()
{
  CFStringRef v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (_MergedGlobals != -1)
    dispatch_once(&_MergedGlobals, &__block_literal_global_16);
  if (!OUTLINED_FUNCTION_1(qword_2546119F8))
    return 0;
  v0 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("chunk store database corruption: would normally abort here"));
  if (_MergedGlobals != -1)
    dispatch_once(&_MergedGlobals, &__block_literal_global_21_1);
  if (OUTLINED_FUNCTION_1(qword_2546119F8))
    OUTLINED_FUNCTION_0(&dword_20A95C000, v1, v2, "%{public}@", v3, v4, v5, v6, 2u);
  if (v0)
    CFRelease(v0);
  return 1;
}

uint64_t _CSBruteForceDatabaseCorruptionRecovery_cold_2()
{
  if (_MergedGlobals == -1)
    return 1;
  dispatch_once(&_MergedGlobals, &__block_literal_global_41_0);
  return 0;
}

void _CSBruteForceDatabaseCorruptionRecovery_cold_3()
{
  CFStringRef v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (OUTLINED_FUNCTION_1(qword_2546119F8))
  {
    v0 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("chunk store database corruption: aborting"));
    if (_MergedGlobals != -1)
      dispatch_once(&_MergedGlobals, &__block_literal_global_46);
    if (OUTLINED_FUNCTION_1(qword_2546119F8))
      OUTLINED_FUNCTION_0(&dword_20A95C000, v1, v2, "%{public}@", v3, v4, v5, v6, 2u);
    if (v0)
      CFRelease(v0);
  }
  abort();
}

void CKChunkEncryptionKeySize_cold_1()
{
  __assert_rtn("CKChunkEncryptionKeySize", "CKChunkScheme.c", 101, "\"invalid key scheme\" && !(key[0] & 0x80)");
}

void CKSubchunkMaxLength_cold_1()
{
  __assert_rtn("CKSubchunkMaxLength", "CKChunkScheme.c", 168, "subchunksBlob && subchunksBlob[0] > 0");
}

void CKStreamCoderUpdate_cold_1()
{
  __assert_rtn("CKStreamCoderUpdate", "CKStreamCoder.c", 143, "0 && \"invalid coder mode\"");
}

void CKStreamCoderFinish_cold_1()
{
  __assert_rtn("CKStreamCoderFinish", "CKStreamCoder.c", 232, "tagPtr && \"tagPtr\"");
}

void CKStreamCoderFinish_cold_2()
{
  __assert_rtn("CKStreamCoderFinish", "CKStreamCoder.c", 233, "errorPtr && \"error object ptr\"");
}

void CKStreamCoderFinish_cold_3()
{
  __assert_rtn("CKStreamCoderFinish", "CKStreamCoder.c", 239, "0 && \"invalid coder mode\"");
}

void CKStreamCoderFinish_cold_4()
{
  __assert_rtn("_CKStreamCoderFinishDecrypt", "CKStreamCoder.c", 208, "tag && \"tag object\"");
}

void CKChunkCoderUpdate_cold_1()
{
  __assert_rtn("CKChunkCoderUpdate", "CKChunkCoder.c", 111, "0 && \"invalid coder mode\"");
}

void get2FileSignatureCache_cold_1()
{
  __assert_rtn("get2FileSignatureCache", "CSutils.c", 631, "rc || CKFileDigestResultsFileSignature(fileDigestResults) != NULL");
}

void setFileSignatureCacheBlob_cold_1()
{
  __assert_rtn("setFileSignatureCacheBlob", "CSutils.c", 644, "sizeof(*blob) <= (uint32_t)CFDataGetLength(data)");
}

void setCacheBlob_cold_1()
{
  __assert_rtn("setCacheBlob", "CSutils.c", 1835, "sizeof(*header) <= bufferSize");
}

void setFileSignatureCache_cold_1()
{
  __assert_rtn("setFileSignatureCache", "CSutils.c", 660, "signature && signatureSize == CKSHA_SCHEME_AND_SIGNATURE_SIZE");
}

void CK2CalculateItemSignatureWithFlags_cold_1()
{
  __assert_rtn("CK2CalculateItemSignatureWithFlags", "CSutils.c", 891, "fileDigestResults");
}

void CK2CalculateItemSignatureWithFlags_cold_2()
{
  __assert_rtn("CK2CalculateItemSignatureWithFlags", "CSutils.c", 893, "sig");
}

void CK2CalculateItemSignatureWithFlags_cold_3()
{
  __assert_rtn("CK2CalculateItemSignatureWithFlags", "CSutils.c", 884, "!fileDigestResults");
}

void freeOpCtx_cold_1()
{
  __assert_rtn("freeOpCtx", "CSutils.c", 1398, "chunkSize || !count");
}

void CKCalculateFileSignature_cold_1()
{
  __assert_rtn("CKCalculateFileSignature", "CSutils.c", 1001, "!sig || sigSize == CKSHA_SCHEME_AND_SIGNATURE_SIZE");
}

void CKCalculateFileSignature_cold_2()
{
  __assert_rtn("CKCalculateFileSignature", "CSutils.c", 992, "scheme == kCKFileSignatureSha1 && \"bad scheme\"");
}

void CKFileSignatureGeneratorV2Finish_cold_1()
{
  __assert_rtn("CKFileSignatureGeneratorV2Finish", "CKFileSignatureGeneratorV2.c", 87, "NULL != CKFileDigestResultsFileVerificationKey(expectedFileDigestResults)");
}

void adaptive_chunk_size_cold_1()
{
  __assert_rtn("adaptive_chunk_size", "CSprofile.c", 1874, "\"Invalid chunk size\" && sqlitePageSize");
}

void createChunkProfile_cold_1()
{
  __assert_rtn("createChunkProfile", "CSprofile.c", 2003, "0 && \"unknown chunkListCacheType\"");
}

void createChunkProfile_cold_2()
{
  __assert_rtn("profile_type_for_content", "CSprofile.c", 677, "readCtx");
}

void createChunkProfile_cold_3()
{
  __assert_rtn("createChunkProfile", "CSprofile.c", 2059, "profiler");
}

void createChunkProfile_cold_4()
{
  __assert_rtn("createChunkProfile", "CSprofile.c", 1966, "!opCtx->fileDigestArguments || kCKPackageSignature != CKFileDigestArgumentsFileScheme(opCtx->fileDigestArguments)");
}

void createChunkProfile_cold_5()
{
  __assert_rtn("createChunkProfile", "CSprofile.c", 1967, "!opCtx->fileDigestArguments || kCKPackageSignatureSha2HMAC != CKFileDigestArgumentsFileScheme(opCtx->fileDigestArguments)");
}

void create_custom_fixed_profile_cold_1()
{
  __assert_rtn("create_custom_fixed_profile", "CSprofile.c", 812, "\"Invalid chunk size\" && fixedChunkSize");
}

void create_zip_profile_cold_1()
{
  __assert_rtn("locate_central_dir", "CSprofile.c", 1168, "search_eocd || search_loc64");
}

void create_mp3_profile_cold_1()
{
  __assert_rtn("decode_synchsize", "CSprofile.c", 880, "result <= 0xfffffff");
}

void create_mp3_profile_cold_2()
{
  __assert_rtn("create_mp3_profile", "CSprofile.c", 977, "has_v2_tag");
}

void CKProfileResultsCreate_cold_1()
{
  __assert_rtn("CKProfileResultsCreate", "CKProfileResults.c", 11, "objectPtr");
}

void CKChunkSignatureGeneratorV1Finish_cold_1()
{
  __assert_rtn("CKChunkSignatureGeneratorV1Finish", "CKChunkSignatureGeneratorV1.c", 117, "object->chunkDigestResults");
}

CCCryptorStatus CCCryptorCreate(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, CCCryptorRef *cryptorRef)
{
  return MEMORY[0x24BDAC110](*(_QWORD *)&op, *(_QWORD *)&alg, *(_QWORD *)&options, key, keyLength, iv, cryptorRef);
}

CCCryptorStatus CCCryptorCreateWithMode(CCOperation op, CCMode mode, CCAlgorithm alg, CCPadding padding, const void *iv, const void *key, size_t keyLength, const void *tweak, size_t tweakLength, int numRounds, CCModeOptions options, CCCryptorRef *cryptorRef)
{
  return MEMORY[0x24BDAC118](*(_QWORD *)&op, *(_QWORD *)&mode, *(_QWORD *)&alg, *(_QWORD *)&padding, iv, key, keyLength, tweak);
}

uint64_t CCCryptorGCMDecrypt()
{
  return MEMORY[0x24BDAC140]();
}

uint64_t CCCryptorGCMEncrypt()
{
  return MEMORY[0x24BDAC148]();
}

uint64_t CCCryptorGCMFinalize()
{
  return MEMORY[0x24BDAC150]();
}

uint64_t CCCryptorGCMSetIV()
{
  return MEMORY[0x24BDAC170]();
}

CCCryptorStatus CCCryptorRelease(CCCryptorRef cryptorRef)
{
  return MEMORY[0x24BDAC188](cryptorRef);
}

CCCryptorStatus CCCryptorUpdate(CCCryptorRef cryptorRef, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x24BDAC198](cryptorRef, dataIn, dataInLength, dataOut, dataOutAvailable, dataOutMoved);
}

uint64_t CCKeyDerivationHMac()
{
  return MEMORY[0x24BDAC278]();
}

int CC_SHA1_Final(unsigned __int8 *md, CC_SHA1_CTX *c)
{
  return MEMORY[0x24BDAC328](md, c);
}

int CC_SHA1_Init(CC_SHA1_CTX *c)
{
  return MEMORY[0x24BDAC330](c);
}

int CC_SHA1_Update(CC_SHA1_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x24BDAC338](c, data, *(_QWORD *)&len);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x24BDAC358](data, *(_QWORD *)&len, md);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x24BDAC360](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x24BDAC368](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x24BDAC370](c, data, *(_QWORD *)&len);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x24BDBB7C8](theArray, value);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x24BDBB808](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x24BDBB820](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x24BDBB860](theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x24BDBBA18]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x24BDBBA20](BOOLean);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x24BDBBC58](cf);
}

CFStringRef CFCopyTypeIDDescription(CFTypeID type_id)
{
  return (CFStringRef)MEMORY[0x24BDBBC80](type_id);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x24BDBBC98](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x24BDBBCB0](allocator, capacity);
}

CFMutableDataRef CFDataCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDataRef theData)
{
  return (CFMutableDataRef)MEMORY[0x24BDBBCB8](allocator, capacity, theData);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x24BDBBCC0](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x24BDBBCE0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x24BDBBCF8](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x24BDBBD00](theData);
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
  MEMORY[0x24BDBBD20](theData, length);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBDB0](theDict, key, value);
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
  MEMORY[0x24BDBBDB8](theDict, applier, context);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x24BDBBDC0](theDict, key);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDBBDF0](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x24BDBBE00](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
  MEMORY[0x24BDBBE10](theDict, keys, values);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x24BDBBE18]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x24BDBBE30](theDict, key);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x24BDBBE48](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBE60](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x24BDBBE68](cf1, cf2);
}

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x24BDBBE88](allocator, domain, code, userInfo);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x24BDBBE98](err);
}

CFErrorDomain CFErrorGetDomain(CFErrorRef err)
{
  return (CFErrorDomain)MEMORY[0x24BDBBEA0](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x24BDBBEF8](cf);
}

CFHashCode CFHash(CFTypeRef cf)
{
  return MEMORY[0x24BDBBF10](cf);
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x24BDBBF48](allocator, localeIdentifier);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x24BDBC0A0](allocator, theType, valuePtr);
}

CFNumberFormatterRef CFNumberFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFNumberFormatterStyle style)
{
  return (CFNumberFormatterRef)MEMORY[0x24BDBC0B8](allocator, locale, style);
}

CFNumberRef CFNumberFormatterCreateNumberFromString(CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFStringRef string, CFRange *rangep, CFOptionFlags options)
{
  return (CFNumberRef)MEMORY[0x24BDBC0C0](allocator, formatter, string, rangep, options);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x24BDBC118]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x24BDBC130](number, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x24BDBC2A8](cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x24BDBC3C0](theSet, value);
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x24BDBC3D0](theSet, value);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x24BDBC3E8](allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x24BDBC3F8](theSet);
}

void CFSetGetValues(CFSetRef theSet, const void **values)
{
  MEMORY[0x24BDBC418](theSet, values);
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x24BDBC428](theSet, value);
}

CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x24BDBC560](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation, contentsDeallocator);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x24BDBC568](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x24BDBC598](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithFormatAndArguments(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments)
{
  return (CFStringRef)MEMORY[0x24BDBC5A0](alloc, formatOptions, format, arguments);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x24BDBC600](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x24BDBC698]();
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x24BDBC898](url, resolveAgainstBase, buffer, maxBufLen);
}

uint64_t SecCFAllocatorZeroize()
{
  return MEMORY[0x24BDE8808]();
}

CFStringRef UTTypeCopyPreferredTagWithClass(CFStringRef inUTI, CFStringRef inTagClass)
{
  return (CFStringRef)MEMORY[0x24BDC15D0](inUTI, inTagClass);
}

CFStringRef UTTypeCreatePreferredIdentifierForTag(CFStringRef inTagClass, CFStringRef inTag, CFStringRef inConformingToUTI)
{
  return (CFStringRef)MEMORY[0x24BDC15E0](inTagClass, inTag, inConformingToUTI);
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x24BDBD0A8]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x24BDBD0B0]();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x24BDAC7A0](a1, a2, *(_QWORD *)&a3, a4);
}

int *__error(void)
{
  return (int *)MEMORY[0x24BDAC7D0]();
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x24BDAC848]();
}

uint64_t __memset_chk()
{
  return MEMORY[0x24BDAC858]();
}

int __sprintf_chk(char *a1, int a2, size_t a3, const char *a4, ...)
{
  return MEMORY[0x24BDAC8B8](a1, *(_QWORD *)&a2, a3, a4);
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x24BDAC910]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

void abort(void)
{
  MEMORY[0x24BDAD008]();
}

int access(const char *a1, int a2)
{
  return MEMORY[0x24BDAD038](a1, *(_QWORD *)&a2);
}

uint64_t analytics_send_event()
{
  return MEMORY[0x24BE1A1E8]();
}

int bcmp(const void *a1, const void *a2, size_t a3)
{
  return MEMORY[0x24BDAD2C0](a1, a2, a3);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

uint64_t cc_clear()
{
  return MEMORY[0x24BDAD348]();
}

uint64_t cc_cmp_safe()
{
  return MEMORY[0x24BDAD350]();
}

uint64_t ccaes_ctr_crypt_mode()
{
  return MEMORY[0x24BDAD368]();
}

uint64_t ccctr_init()
{
  return MEMORY[0x24BDAD3C8]();
}

uint64_t ccctr_one_shot()
{
  return MEMORY[0x24BDAD3D0]();
}

uint64_t ccctr_update()
{
  return MEMORY[0x24BDAD3D8]();
}

uint64_t ccdigest_init()
{
  return MEMORY[0x24BDAD540]();
}

uint64_t ccdigest_update()
{
  return MEMORY[0x24BDAD548]();
}

uint64_t cchkdf()
{
  return MEMORY[0x24BDAD690]();
}

uint64_t cchmac()
{
  return MEMORY[0x24BDAD6A8]();
}

uint64_t ccsha256_di()
{
  return MEMORY[0x24BDAD828]();
}

int close(int a1)
{
  return MEMORY[0x24BDAD9D8](*(_QWORD *)&a1);
}

int copyfile(const char *from, const char *to, copyfile_state_t state, copyfile_flags_t flags)
{
  return MEMORY[0x24BDADBB8](from, to, state, *(_QWORD *)&flags);
}

copyfile_state_t copyfile_state_alloc(void)
{
  return (copyfile_state_t)MEMORY[0x24BDADBC0]();
}

int copyfile_state_free(copyfile_state_t a1)
{
  return MEMORY[0x24BDADBC8](a1);
}

int copyfile_state_set(copyfile_state_t s, uint32_t flag, const void *src)
{
  return MEMORY[0x24BDADBD8](s, *(_QWORD *)&flag, src);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

void exit(int a1)
{
  MEMORY[0x24BDAE268](*(_QWORD *)&a1);
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x24BDAE278](__x);
  return result;
}

int fchflags(int a1, __uint32_t a2)
{
  return MEMORY[0x24BDAE2B0](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x24BDAE2E8](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

int ffsctl(int a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x24BDAE358](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

int fgetattrlist(int a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return MEMORY[0x24BDAE360](*(_QWORD *)&a1, a2, a3, a4, *(_QWORD *)&a5);
}

ssize_t fgetxattr(int fd, const char *name, void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x24BDAE388](*(_QWORD *)&fd, name, value, size, *(_QWORD *)&position, *(_QWORD *)&options);
}

uint64_t fpathconf(int a1, int a2)
{
  return MEMORY[0x24BDAE420](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAE428](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

int fremovexattr(int fd, const char *name, int options)
{
  return MEMORY[0x24BDAE478](*(_QWORD *)&fd, name, *(_QWORD *)&options);
}

int fsetxattr(int fd, const char *name, const void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x24BDAE4F8](*(_QWORD *)&fd, name, value, size, *(_QWORD *)&position, *(_QWORD *)&options);
}

ssize_t fsgetpath(char *a1, size_t a2, fsid_t *a3, uint64_t a4)
{
  return MEMORY[0x24BDAE500](a1, a2, a3, a4);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x24BDAE508](*(_QWORD *)&a1, a2);
}

int fsync(int a1)
{
  return MEMORY[0x24BDAE528](*(_QWORD *)&a1);
}

int ftruncate(int a1, off_t a2)
{
  return MEMORY[0x24BDAE548](*(_QWORD *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE590](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x24BDAE5F0](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x24BDAE6D0]();
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x24BDAE780](a1, a2);
}

long double log2(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAD8](__x);
  return result;
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x24BDAEB20](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x24BDAEB30]();
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED70](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED88](ptr, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void memset_pattern4(void *__b, const void *__pattern4, size_t __len)
{
  MEMORY[0x24BDAEEB8](__b, __pattern4, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x24BDAEF28](a1, a2);
}

char *__cdecl mkdtemp(char *a1)
{
  return (char *)MEMORY[0x24BDAEF38](a1);
}

int mkpath_np(const char *path, mode_t omode)
{
  return MEMORY[0x24BDAEF60](path, omode);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x24BDAF228](a1, *(_QWORD *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x24BDAF4D0]();
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x24BDAF698](*(_QWORD *)&__fd, __buf, __nbyte, a4);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x24BDAF6A8](a1);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x24BDAF7D0](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x24BDAF7D8](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x24BDAF7E0](a1);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x24BDAF800](a1, a2);
}

int pthread_equal(pthread_t a1, pthread_t a2)
{
  return MEMORY[0x24BDAF828](a1, a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8C0](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x24BDAF8C8](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8D0](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8E0](a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x24BDAF910](a1, a2);
}

int pthread_rwlock_destroy(pthread_rwlock_t *a1)
{
  return MEMORY[0x24BDAF930](a1);
}

int pthread_rwlock_init(pthread_rwlock_t *a1, const pthread_rwlockattr_t *a2)
{
  return MEMORY[0x24BDAF938](a1, a2);
}

int pthread_rwlock_rdlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x24BDAF940](a1);
}

int pthread_rwlock_tryrdlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x24BDAF948](a1);
}

int pthread_rwlock_unlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x24BDAF958](a1);
}

int pthread_rwlock_wrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x24BDAF960](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x24BDAF978]();
}

int putchar(int a1)
{
  return MEMORY[0x24BDAF9F0](*(_QWORD *)&a1);
}

int puts(const char *a1)
{
  return MEMORY[0x24BDAF9F8](a1);
}

ssize_t pwrite(int __fd, const void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x24BDAFA00](*(_QWORD *)&__fd, __buf, __nbyte, a4);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  MEMORY[0x24BDAFA18](__base, __nel, __width, __compar);
}

int rand(void)
{
  return MEMORY[0x24BDAFA38]();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x24BDAFA80](*(_QWORD *)&a1, a2, a3);
}

ssize_t readlink(const char *a1, char *a2, size_t a3)
{
  return MEMORY[0x24BDAFA98](a1, a2, a3);
}

int removefile(const char *path, removefile_state_t state, removefile_flags_t flags)
{
  return MEMORY[0x24BDAFB40](path, state, *(_QWORD *)&flags);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
  MEMORY[0x24BDAFB80](__from, __to, __ec);
}

uint64_t sandbox_check()
{
  return MEMORY[0x24BDAFBD8]();
}

int setenv(const char *__name, const char *__value, int __overwrite)
{
  return MEMORY[0x24BDAFD10](__name, __value, *(_QWORD *)&__overwrite);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAFE60](a1, a2);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return MEMORY[0x24BEDDF48](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&n, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x24BEDDF58](a1, *(_QWORD *)&a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return MEMORY[0x24BEDDF60](a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return MEMORY[0x24BEDDF68](a1, *(_QWORD *)&a2, a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return MEMORY[0x24BEDDF70](a1, *(_QWORD *)&a2);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x24BEDDF98](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&a4, a5);
}

int sqlite3_bind_text16(sqlite3_stmt *a1, int a2, const void *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x24BEDDFA0](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&a4, a5);
}

int sqlite3_bind_value(sqlite3_stmt *a1, int a2, const sqlite3_value *a3)
{
  return MEMORY[0x24BEDDFB0](a1, *(_QWORD *)&a2, a3);
}

int sqlite3_bind_zeroblob(sqlite3_stmt *a1, int a2, int n)
{
  return MEMORY[0x24BEDDFB8](a1, *(_QWORD *)&a2, *(_QWORD *)&n);
}

int sqlite3_busy_timeout(sqlite3 *a1, int ms)
{
  return MEMORY[0x24BEDDFF0](a1, *(_QWORD *)&ms);
}

int sqlite3_changes(sqlite3 *a1)
{
  return MEMORY[0x24BEDDFF8](a1);
}

int sqlite3_clear_bindings(sqlite3_stmt *a1)
{
  return MEMORY[0x24BEDE008](a1);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x24BEDE010](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x24BEDE020](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x24BEDE028](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_bytes16(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x24BEDE030](a1, *(_QWORD *)&iCol);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  double result;

  MEMORY[0x24BEDE048](a1, *(_QWORD *)&iCol);
  return result;
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x24BEDE050](a1, *(_QWORD *)&iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x24BEDE058](a1, *(_QWORD *)&iCol);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x24BEDE068](a1, *(_QWORD *)&iCol);
}

const void *__cdecl sqlite3_column_text16(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x24BEDE070](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x24BEDE078](a1, *(_QWORD *)&iCol);
}

sqlite3_value *__cdecl sqlite3_column_value(sqlite3_stmt *a1, int iCol)
{
  return (sqlite3_value *)MEMORY[0x24BEDE080](a1, *(_QWORD *)&iCol);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x24BEDE108](a1);
}

const char *__cdecl sqlite3_errstr(int a1)
{
  return (const char *)MEMORY[0x24BEDE110](*(_QWORD *)&a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return MEMORY[0x24BEDE118](a1, sql, callback, a4, errmsg);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x24BEDE140](pStmt);
}

void sqlite3_free(void *a1)
{
  MEMORY[0x24BEDE148](a1);
}

sqlite3_int64 sqlite3_last_insert_rowid(sqlite3 *a1)
{
  return MEMORY[0x24BEDE180](a1);
}

sqlite3_stmt *__cdecl sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt)
{
  return (sqlite3_stmt *)MEMORY[0x24BEDE1B0](pDb, pStmt);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x24BEDE1C0](filename, ppDb, *(_QWORD *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x24BEDE1D0](db, zSql, *(_QWORD *)&nByte, ppStmt, pzTail);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return MEMORY[0x24BEDE1E0](pStmt);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x24BEDE2A8](a1);
}

char *__cdecl sqlite3_vmprintf(const char *a1, va_list a2)
{
  return (char *)MEMORY[0x24BEDE380](a1, a2);
}

int sqlite3_wal_checkpoint_v2(sqlite3 *db, const char *zDb, int eMode, int *pnLog, int *pnCkpt)
{
  return MEMORY[0x24BEDE398](db, zDb, *(_QWORD *)&eMode, pnLog, pnCkpt);
}

void srand(unsigned int a1)
{
  MEMORY[0x24BDAFE80](*(_QWORD *)&a1);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x24BDAFEA8](a1, a2);
}

char *__cdecl strcat(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x24BDAFEE0](__s1, __s2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x24BDAFEE8](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x24BDAFF10](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x24BDAFF18](*(_QWORD *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x24BDAFF50](a1, a2, a3);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x24BDAFF80](__s1, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x24BDAFFA8](__s, *(_QWORD *)&__c);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x24BDAFFC8](__s1, __s2);
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x24BDB0010](__str, __endptr, *(_QWORD *)&__base);
}

time_t time(time_t *a1)
{
  return MEMORY[0x24BDB0240](a1);
}

int unlink(const char *a1)
{
  return MEMORY[0x24BDB02B0](a1);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x24BDB0448](__str, __size, __format, a4);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x24BDB0558](*(_QWORD *)&__fd, __buf, __nbyte);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x24BDB08C0](keys, values, count);
}

void xpc_release(xpc_object_t object)
{
  MEMORY[0x24BDB0AE0](object);
}

