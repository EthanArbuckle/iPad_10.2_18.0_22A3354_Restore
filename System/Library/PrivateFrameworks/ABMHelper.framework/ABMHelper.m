void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD *)(a1 + 8));
    if (*(char *)(a1 + 79) < 0)
    {
      operator delete(*(void **)(a1 + 56));
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_4;
    }
    else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_4:
      operator delete((void *)a1);
      return;
    }
    operator delete(*(void **)(a1 + 32));
    operator delete((void *)a1);
  }
}

std::regex_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(std::regex_iterator<std::__wrap_iter<const char *>, char> *this, std::__wrap_iter<const char *> __a, std::__wrap_iter<const char *> __b, const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *__re, std::regex_constants::match_flag_type __m)
{
  __int16 v5;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::value_type *p_match;
  __int128 v10;
  _BYTE __p[40];
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v5 = __m;
  this->__begin_ = __a;
  this->__end_ = __b;
  this->__pregex_ = __re;
  this->__flags_ = __m;
  *(_OWORD *)&this->__match_.__matches_.__begin_ = 0u;
  p_match = &this->__match_;
  this->__match_.__prefix_.first.__i_ = 0;
  this->__match_.__prefix_.second.__i_ = 0;
  this->__match_.__prefix_.matched = 0;
  this->__match_.__suffix_.first.__i_ = 0;
  this->__match_.__suffix_.second.__i_ = 0;
  this->__match_.__suffix_.matched = 0;
  this->__match_.__ready_ = 0;
  this->__match_.__position_start_.__i_ = 0;
  *(_OWORD *)&this->__match_.__matches_.__end_cap_.__value_ = 0u;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)((char *)&this->__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>
                                                                               + 1) = 0u;
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13 = 0xAAAAAAAAAAAAAAAALL;
  v15 = 0xAAAAAAAAAAAAAA00;
  v17 = v10;
  v14 = 0;
  v16 = 0uLL;
  LOBYTE(v17) = 0;
  BYTE8(v17) = 0;
  v18 = 0;
  memset(__p, 0, sizeof(__p));
  std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)__re, (std::sub_match<const char *> *)__a.__i_, (std::sub_match<const char *> *)__b.__i_, (std::vector<std::csub_match> *)__p, __m);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&p_match->__matches_, (uint64_t)__a.__i_, (std::sub_match<std::__wrap_iter<const char *>> *)__b.__i_, (uint64_t *)__p, (v5 & 0x800) != 0);
  if (*(_QWORD *)__p)
  {
    *(_QWORD *)&__p[8] = *(_QWORD *)__p;
    operator delete(*(void **)__p);
  }
  return this;
}

void sub_1A343E6FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  void **v11;
  void *v13;

  if (__p)
  {
    operator delete(__p);
    v13 = *v11;
    if (!*v11)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v13 = *v11;
    if (!*v11)
      goto LABEL_3;
  }
  *(_QWORD *)(v10 + 40) = v13;
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  int v9;
  int v10;
  const std::vector<std::csub_match>::value_type *v11;
  int v12;
  const char *i;
  std::vector<std::csub_match>::pointer begin;
  std::sub_match<const char *> *first;
  std::sub_match<const char *> *second;
  uint64_t result;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0)
    this[4].__end_ = a2;
  LOBYTE(this[4].__begin_) = 1;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0) & 1) != 0)goto LABEL_28;
    goto LABEL_13;
  }
  if (*(_DWORD *)(a1 + 28))
  {
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))goto LABEL_28;
LABEL_13:
    if (a2 != a3 && (v9 & 0x40) == 0)
    {
      v12 = v9 | 0x80;
      for (i = (char *)&a2->first + 1; i != (const char *)a3; ++i)
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
        {
          if (*(_DWORD *)(a1 + 28))
          {
            if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28;
          }
          else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)i, (uint64_t)a3, (uint64_t *)this, v12, 0) & 1) != 0)
          {
            goto LABEL_28;
          }
        }
        else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0) & 1) != 0)
        {
          goto LABEL_28;
        }
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      }
      std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
      {
        if (*(_DWORD *)(a1 + 28))
        {
          if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28;
        }
        else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a3, (uint64_t)a3, (uint64_t *)this, v12, 0) & 1) != 0)
        {
          goto LABEL_28;
        }
      }
      else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0) & 1) != 0)
      {
        goto LABEL_28;
      }
    }
    result = 0;
    this->__end_ = this->__begin_;
    return result;
  }
  if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0) & 1) == 0)goto LABEL_13;
LABEL_28:
  if (this->__end_ == this->__begin_)
    begin = (std::vector<std::csub_match>::pointer)v11;
  else
    begin = this->__begin_;
  first = (std::sub_match<const char *> *)begin->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)begin->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)begin->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  void *v25;
  void *v26;
  __int128 v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void *v33;
  void *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  _BYTE v45[96];
  std::vector<std::csub_match>::value_type __x;
  char *v47;
  char *v48;
  unint64_t v49;

  v47 = 0;
  v48 = 0;
  v49 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    __x.second = a3;
    *(_QWORD *)&__x.matched = 0xAAAAAAAAAAAAAA00;
    __x.first = a3;
    *(_DWORD *)v45 = 0;
    memset(&v45[8], 0, 85);
    v48 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v47, (uint64_t)v45);
    if (*(_QWORD *)&v45[56])
    {
      *(_QWORD *)&v45[64] = *(_QWORD *)&v45[56];
      operator delete(*(void **)&v45[56]);
    }
    if (*(_QWORD *)&v45[32])
    {
      *(_QWORD *)&v45[40] = *(_QWORD *)&v45[32];
      operator delete(*(void **)&v45[32]);
    }
    v13 = v48;
    *((_DWORD *)v48 - 24) = 0;
    *((_QWORD *)v13 - 11) = a2;
    *((_QWORD *)v13 - 10) = a2;
    *((_QWORD *)v13 - 9) = a3;
    v14 = *((_QWORD *)v13 - 8);
    v15 = *(unsigned int *)(a1 + 28);
    v16 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v13 - 7) - v14) >> 3);
    if (v15 <= v16)
    {
      if (v15 < v16)
        *((_QWORD *)v13 - 7) = v14 + 24 * v15;
    }
    else
    {
      std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v13 - 64), v15 - v16, &__x);
      v13 = v48;
    }
    v17 = *((_QWORD *)v13 - 5);
    v18 = *(unsigned int *)(a1 + 32);
    v19 = (*((_QWORD *)v13 - 4) - v17) >> 4;
    if (v18 <= v19)
    {
      if (v18 < v19)
        *((_QWORD *)v13 - 4) = v17 + 16 * v18;
    }
    else
    {
      std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v13 - 40), v18 - v19);
      v13 = v48;
    }
    *((_QWORD *)v13 - 2) = v6;
    *((_DWORD *)v13 - 2) = a5;
    *(v13 - 4) = a6;
    v20 = 1;
    while (2)
    {
      if ((v20 & 0xFFF) == 0 && (int)(v20 >> 12) >= (int)a3 - (int)a2)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v22 = *((_QWORD *)v13 - 2);
      if (v22)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v22 + 16))(v22, v13 - 96);
      switch(*((_DWORD *)v13 - 24))
      {
        case 0xFFFFFC18:
          v23 = (const char *)*((_QWORD *)v13 - 10);
          if ((a5 & 0x20) != 0 && v23 == a2 || (a5 & 0x1000) != 0 && v23 != a3)
            goto LABEL_26;
          v36 = *a4;
          *(_QWORD *)v36 = a2;
          *(_QWORD *)(v36 + 8) = v23;
          *(_BYTE *)(v36 + 16) = 1;
          v37 = *((_QWORD *)v13 - 8);
          v38 = *((_QWORD *)v13 - 7) - v37;
          if (v38)
          {
            v39 = 0xAAAAAAAAAAAAAAABLL * (v38 >> 3);
            v40 = (_BYTE *)(v37 + 16);
            v41 = 1;
            do
            {
              v42 = v36 + 24 * v41;
              *(_OWORD *)v42 = *((_OWORD *)v40 - 1);
              v43 = *v40;
              v40 += 24;
              *(_BYTE *)(v42 + 16) = v43;
            }
            while (v39 > v41++);
          }
          v6 = 1;
          v21 = v47;
          if (!v47)
            return v6;
          goto LABEL_37;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_16;
        case 0xFFFFFC1F:
LABEL_26:
          v24 = v48;
          v25 = (void *)*((_QWORD *)v48 - 5);
          if (v25)
          {
            *((_QWORD *)v48 - 4) = v25;
            operator delete(v25);
          }
          v26 = (void *)*((_QWORD *)v24 - 8);
          if (v26)
          {
            *((_QWORD *)v24 - 7) = v26;
            operator delete(v26);
          }
          v48 = v24 - 96;
          goto LABEL_16;
        case 0xFFFFFC20:
          *(_QWORD *)&v27 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v45[64] = v27;
          *(_OWORD *)&v45[80] = v27;
          *(_OWORD *)&v45[32] = v27;
          *(_OWORD *)&v45[48] = v27;
          *(_OWORD *)v45 = v27;
          *(_OWORD *)&v45[16] = v27;
          std::__state<char>::__state((uint64_t)v45, (__int128 *)v13 - 6);
          (*(void (**)(_QWORD, uint64_t, char *))(**((_QWORD **)v13 - 2) + 24))(*((_QWORD *)v13 - 2), 1, v13 - 96);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)&v45[80] + 24))(*(_QWORD *)&v45[80], 0, v45);
          v28 = v48;
          if ((unint64_t)v48 >= v49)
          {
            v48 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v47, (uint64_t)v45);
            if (*(_QWORD *)&v45[56])
            {
              *(_QWORD *)&v45[64] = *(_QWORD *)&v45[56];
              operator delete(*(void **)&v45[56]);
            }
          }
          else
          {
            v29 = *(_OWORD *)&v45[16];
            *(_OWORD *)v48 = *(_OWORD *)v45;
            *((_OWORD *)v28 + 1) = v29;
            *((_QWORD *)v28 + 4) = 0;
            *((_QWORD *)v28 + 5) = 0;
            *((_QWORD *)v28 + 6) = 0;
            *((_QWORD *)v28 + 7) = 0;
            *((_OWORD *)v28 + 2) = *(_OWORD *)&v45[32];
            *((_QWORD *)v28 + 6) = *(_QWORD *)&v45[48];
            memset(&v45[32], 0, 24);
            *((_QWORD *)v28 + 8) = 0;
            *((_QWORD *)v28 + 9) = 0;
            *(_OWORD *)(v28 + 56) = *(_OWORD *)&v45[56];
            *((_QWORD *)v28 + 9) = *(_QWORD *)&v45[72];
            memset(&v45[56], 0, 24);
            v30 = *(_QWORD *)&v45[80];
            *(_QWORD *)(v28 + 85) = *(_QWORD *)&v45[85];
            *((_QWORD *)v28 + 10) = v30;
            v48 = v28 + 96;
          }
          if (*(_QWORD *)&v45[32])
          {
            *(_QWORD *)&v45[40] = *(_QWORD *)&v45[32];
            operator delete(*(void **)&v45[32]);
          }
LABEL_16:
          v21 = v47;
          v13 = v48;
          ++v20;
          if (v47 != v48)
            continue;
          v6 = 0;
          if (v47)
          {
LABEL_37:
            v31 = v48;
            v32 = v21;
            if (v48 != v21)
            {
              do
              {
                v33 = (void *)*((_QWORD *)v31 - 5);
                if (v33)
                {
                  *((_QWORD *)v31 - 4) = v33;
                  operator delete(v33);
                }
                v34 = (void *)*((_QWORD *)v31 - 8);
                if (v34)
                {
                  *((_QWORD *)v31 - 7) = v34;
                  operator delete(v34);
                }
                v31 -= 96;
              }
              while (v31 != v21);
              v32 = v47;
            }
            v48 = v21;
            operator delete(v32);
          }
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  return v6;
}

void sub_1A343EE50(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_1A343EE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::__state<char>::~__state((uint64_t *)va);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v3 - 112));
  _Unwind_Resume(a1);
}

void sub_1A343EEAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_1A343EEC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v2;
  char *current;
  char *last;
  char v6;
  char v7;
  std::regex_traits<char> *p_traits;
  std::vector<std::pair<char, char>>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  char *p_second;
  std::vector<std::pair<std::string, std::string>>::pointer v14;
  char v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  void **v19;
  char v20;
  void *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  BOOL v24;
  uint64_t v25;
  _BOOL4 negate;
  void *v27;
  unsigned __int8 v28;
  std::vector<char>::pointer v29;
  unint64_t v30;
  int v31;
  std::regex_traits<char>::char_class_type v32;
  char v33;
  int v34;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v36;
  char *v37;
  std::vector<std::pair<std::string, std::string>>::pointer v38;
  std::vector<std::pair<std::string, std::string>>::pointer v39;
  unsigned int v40;
  int64_t v41;
  uint64_t v42;
  unint64_t v43;
  void **v44;
  void *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  BOOL v48;
  int v49;
  char *v50;
  size_t v51;
  size_t v52;
  int v53;
  int v54;
  char *v55;
  size_t v56;
  size_t v57;
  int v58;
  int v59;
  char *v60;
  size_t v61;
  size_t v62;
  int v63;
  int v64;
  char *v65;
  size_t v66;
  size_t v67;
  int v68;
  int v69;
  int v70;
  std::vector<std::string>::pointer v71;
  uint64_t v72;
  int64_t v73;
  unint64_t v74;
  unint64_t v75;
  const void *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  BOOL v80;
  std::string *v81;
  void *v82;
  int v83;
  std::string *v84;
  uint64_t v85;
  const void *v86;
  void *v87;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v88;
  std::vector<std::string>::pointer v89;
  int v90;
  int64_t v91;
  unint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  std::string *v98;
  void *v99;
  int v100;
  void **v101;
  uint64_t v102;
  uint64_t v103;
  const void *v104;
  uint64_t v105;
  std::string::size_type size;
  int v107;
  std::vector<std::string>::pointer v108;
  std::regex_traits<char>::char_class_type mask;
  const std::ctype_base::mask *tab;
  std::ctype_base::mask v111;
  std::regex_traits<char>::char_class_type neg_mask;
  int v113;
  std::string::size_type v114;
  std::regex_traits<char>::char_class_type v115;
  int v116;
  std::__node<char> *first;
  int v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  std::string::value_type *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char v126;
  BOOL v127;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v128;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v129;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v130;
  _BOOL4 v131;
  _BOOL4 v132;
  int v133;
  uint64_t v134;
  int v135;
  void *v136[3];
  __int16 __src;
  void *__p[3];

  v2 = a2;
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    v25 = 0;
    negate = this->__negate_;
    goto LABEL_245;
  }
  if (!this->__might_have_digraph_ || current + 1 == last)
    goto LABEL_34;
  v6 = *current;
  LOBYTE(__src) = *current;
  v7 = current[1];
  HIBYTE(__src) = v7;
  if (this->__icase_)
  {
    LOBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>(&__src, (uint64_t)&this->__traits_, __p, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    v27 = __p[1];
    operator delete(__p[0]);
    if (v27)
      goto LABEL_8;
LABEL_34:
    negate = 0;
    v25 = 1;
    v28 = *v2->__current_;
    LOBYTE(__src) = v28;
    if (!this->__icase_)
      goto LABEL_36;
    goto LABEL_35;
  }
  if (!HIBYTE(__p[2]))
    goto LABEL_34;
LABEL_8:
  begin = this->__digraphs_.__begin_;
  v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    p_second = &begin->second;
    while (__src != *(p_second - 1) || HIBYTE(__src) != *p_second)
    {
      p_second += 2;
      if (!--v11)
        goto LABEL_17;
    }
    goto LABEL_227;
  }
LABEL_17:
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    negate = 0;
    goto LABEL_167;
  }
  memset(v136, 170, sizeof(v136));
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[2] = (void *)0x2AAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAA00AAAALL;
  LOWORD(__p[0]) = __src;
  (*(void (**)(void **__return_ptr, const std::collate<char> *, void **, char *))(*(_QWORD *)this->__traits_.__col_
                                                                                           + 32))(v136, this->__traits_.__col_, __p, (char *)__p + 2);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v14 = this->__ranges_.__begin_;
  v15 = HIBYTE(v136[2]);
  v16 = (char *)this->__ranges_.__end_ - (char *)v14;
  if (!v16)
  {
    v24 = 0;
    v70 = 0;
    v69 = 0;
    goto LABEL_164;
  }
  v128 = v2;
  v17 = 0;
  v18 = v16 / 48;
  if (SHIBYTE(v136[2]) >= 0)
    v19 = v136;
  else
    v19 = (void **)v136[0];
  v20 = HIBYTE(v136[2]);
  if (SHIBYTE(v136[2]) >= 0)
    v21 = (void *)HIBYTE(v136[2]);
  else
    v21 = v136[1];
  if (v18 <= 1)
    v22 = 1;
  else
    v22 = v16 / 48;
  v23 = (unsigned __int8 *)&v14->second.__r_.__value_.__r.__words[2] + 7;
  v24 = 1;
  do
  {
    v59 = (char)*(v23 - 24);
    if (v59 >= 0)
      v60 = (char *)(v23 - 47);
    else
      v60 = *(char **)(v23 - 47);
    if (v59 >= 0)
      v61 = *(v23 - 24);
    else
      v61 = *(_QWORD *)(v23 - 39);
    if ((unint64_t)v21 >= v61)
      v62 = v61;
    else
      v62 = (size_t)v21;
    v63 = memcmp(v60, v19, v62);
    if (v63)
    {
      if ((v63 & 0x80000000) == 0)
        goto LABEL_98;
    }
    else if (v61 > (unint64_t)v21)
    {
      goto LABEL_98;
    }
    v64 = (char)*v23;
    if (v64 >= 0)
      v65 = (char *)(v23 - 23);
    else
      v65 = *(char **)(v23 - 23);
    if (v64 >= 0)
      v66 = *v23;
    else
      v66 = *(_QWORD *)(v23 - 15);
    if (v66 >= (unint64_t)v21)
      v67 = (size_t)v21;
    else
      v67 = v66;
    v68 = memcmp(v19, v65, v67);
    if (v68)
    {
      if (v68 < 0)
      {
LABEL_123:
        v69 = 1;
        v70 = 5;
        goto LABEL_162;
      }
    }
    else if ((unint64_t)v21 <= v66)
    {
      goto LABEL_123;
    }
LABEL_98:
    v24 = ++v17 < v18;
    v23 += 48;
  }
  while (v22 != v17);
  v70 = 0;
  v69 = 0;
LABEL_162:
  v2 = v128;
  p_traits = &this->__traits_;
  v15 = v20;
LABEL_164:
  if (v15 < 0)
    operator delete(v136[0]);
  negate = v69;
  if (v24)
    goto LABEL_207;
LABEL_167:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_209;
  v133 = negate;
  v88 = v2;
  memset(__p, 170, sizeof(__p));
  std::regex_traits<char>::__transform_primary<char *>(&__src, (uint64_t)p_traits, __p, __p);
  v89 = this->__equivalences_.__begin_;
  v90 = SHIBYTE(__p[2]);
  v91 = (char *)this->__equivalences_.__end_ - (char *)v89;
  if (!v91)
    goto LABEL_188;
  v92 = v91 / 24;
  v93 = __p[1];
  if (SHIBYTE(__p[2]) >= 0)
    v94 = (void *)HIBYTE(__p[2]);
  else
    v94 = __p[1];
  if (SHIBYTE(__p[2]) < 0)
  {
    v135 = SHIBYTE(__p[2]);
    v103 = 0;
    v104 = __p[0];
    if (v92 <= 1)
      v105 = 1;
    else
      v105 = v91 / 24;
    v97 = 1;
    do
    {
      size = HIBYTE(v89->__r_.__value_.__r.__words[2]);
      v107 = (char)size;
      if ((size & 0x80u) != 0)
        size = v89->__r_.__value_.__l.__size_;
      if (v94 == (void *)size)
      {
        v108 = v107 >= 0 ? v89 : (std::vector<std::string>::pointer)v89->__r_.__value_.__r.__words[0];
        if (!memcmp(v104, v108, (size_t)v93))
        {
          v133 = 1;
          v70 = 5;
          goto LABEL_203;
        }
      }
      v97 = ++v103 < v92;
      ++v89;
    }
    while (v105 != v103);
    v70 = 0;
LABEL_203:
    v2 = v88;
    v90 = v135;
    goto LABEL_204;
  }
  if (!HIBYTE(__p[2]))
  {
    v114 = HIBYTE(v89->__r_.__value_.__r.__words[2]);
    if ((v114 & 0x80u) != 0)
      v114 = v89->__r_.__value_.__l.__size_;
    if (v114 != HIBYTE(__p[2]))
    {
      v119 = 0;
      if (v92 <= 1)
        v120 = 1;
      else
        v120 = v92;
      v121 = v120 - 1;
      v122 = &v89[1].__r_.__value_.__s.__data_[8];
      v2 = v88;
      while (v121 != v119)
      {
        ++v119;
        v123 = v122[15];
        v125 = *(_QWORD *)v122;
        v122 += 24;
        v124 = v125;
        if ((v123 & 0x80u) != 0)
          v123 = v124;
        if (v94 == (void *)v123)
        {
          v97 = v119 < v92;
          v133 = 1;
          v70 = 5;
          goto LABEL_204;
        }
      }
      v97 = 0;
      v70 = 0;
      goto LABEL_204;
    }
    v2 = v88;
    negate = 1;
LABEL_208:
    v25 = 2;
    goto LABEL_245;
  }
  v95 = 0;
  v96 = v92 <= 1 ? 1 : v91 / 24;
  v97 = 1;
  do
  {
    v98 = &v89[v95];
    v99 = (void *)HIBYTE(v98->__r_.__value_.__r.__words[2]);
    v100 = (char)v99;
    if ((char)v99 < 0)
      v99 = (void *)v98->__r_.__value_.__l.__size_;
    if (v94 == v99)
    {
      if (v100 < 0)
        v98 = (std::string *)v98->__r_.__value_.__r.__words[0];
      v101 = __p;
      v102 = HIBYTE(__p[2]);
      while (*(unsigned __int8 *)v101 == v98->__r_.__value_.__s.__data_[0])
      {
        v101 = (void **)((char *)v101 + 1);
        v98 = (std::string *)((char *)v98 + 1);
        if (!--v102)
        {
          v133 = 1;
          v70 = 5;
          v2 = v88;
          goto LABEL_204;
        }
      }
    }
    v97 = ++v95 < v92;
  }
  while (v95 != v96);
LABEL_188:
  v97 = 0;
  v70 = 0;
  v2 = v88;
LABEL_204:
  if (v90 < 0)
    operator delete(__p[0]);
  negate = v133;
  if (!v97)
  {
LABEL_209:
    if ((char)__src < 0)
    {
      neg_mask = this->__neg_mask_;
    }
    else
    {
      mask = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      v111 = tab[__src];
      if (((v111 & mask) != 0 || __src == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(__src) & 0x80000000) == 0
        && ((tab[HIBYTE(__src)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(__src) == 95))
      {
        goto LABEL_227;
      }
      neg_mask = this->__neg_mask_;
      if ((neg_mask & v111) != 0 || __src == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_226:
        v113 = negate;
LABEL_228:
        negate = v113;
        v25 = 2;
        goto LABEL_245;
      }
    }
    if ((SHIBYTE(__src) & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[HIBYTE(__src)] & neg_mask) == 0)
      {
        v113 = 1;
        if (HIBYTE(__src) != 95 || (neg_mask & 0x80) == 0)
          goto LABEL_228;
      }
      goto LABEL_226;
    }
LABEL_227:
    v113 = 1;
    goto LABEL_228;
  }
LABEL_207:
  if (v70)
    goto LABEL_208;
  v25 = 2;
  v28 = *v2->__current_;
  LOBYTE(__src) = v28;
  if (this->__icase_)
  {
LABEL_35:
    v28 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v28);
    LOBYTE(__src) = v28;
  }
LABEL_36:
  v29 = this->__chars_.__begin_;
  v30 = this->__chars_.__end_ - v29;
  if (v30)
  {
    if (v30 <= 1)
      v30 = 1;
    while (1)
    {
      v31 = *v29++;
      if (v31 == v28)
        break;
      if (!--v30)
        goto LABEL_41;
    }
LABEL_244:
    negate = 1;
    goto LABEL_245;
  }
LABEL_41:
  v32 = this->__neg_mask_;
  if (v32 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v28 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v28] & v32) == 0)
    {
      v34 = (v32 >> 7) & 1;
      v33 = v28 == 95 ? v34 : 0;
    }
    else
    {
      v33 = 1;
    }
    end = this->__neg_chars_.__end_;
    v36 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v28, end - this->__neg_chars_.__begin_);
    v37 = v36 ? v36 : end;
    if ((v33 & 1) == 0 && v37 == end)
      goto LABEL_244;
  }
  v38 = this->__ranges_.__begin_;
  v39 = this->__ranges_.__end_;
  if (v38 == v39)
    goto LABEL_128;
  memset(v136, 170, sizeof(v136));
  if (!this->__collate_)
  {
    v40 = 1;
    HIBYTE(v136[2]) = 1;
    LOWORD(v136[0]) = v28;
    v41 = (char *)v39 - (char *)v38;
    if (v41)
      goto LABEL_59;
LABEL_155:
    v48 = 0;
    if ((v40 & 0x80) != 0)
      goto LABEL_126;
    goto LABEL_127;
  }
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[2] = (void *)0x1AAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  LOWORD(__p[0]) = v28;
  (*(void (**)(void **__return_ptr, const std::collate<char> *, void **, char *))(*(_QWORD *)this->__traits_.__col_
                                                                                           + 32))(v136, this->__traits_.__col_, __p, (char *)__p + 1);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v38 = this->__ranges_.__begin_;
  v40 = HIBYTE(v136[2]);
  v41 = (char *)this->__ranges_.__end_ - (char *)v38;
  if (!v41)
    goto LABEL_155;
LABEL_59:
  v134 = v25;
  v131 = negate;
  v129 = v2;
  v42 = 0;
  v43 = v41 / 48;
  v126 = v40;
  if ((v40 & 0x80u) == 0)
    v44 = v136;
  else
    v44 = (void **)v136[0];
  if ((v40 & 0x80u) == 0)
    v45 = (void *)v40;
  else
    v45 = v136[1];
  if (v43 <= 1)
    v46 = 1;
  else
    v46 = v41 / 48;
  v47 = (unsigned __int8 *)&v38->second.__r_.__value_.__r.__words[2] + 7;
  v48 = 1;
  while (2)
  {
    v49 = (char)*(v47 - 24);
    if (v49 >= 0)
      v50 = (char *)(v47 - 47);
    else
      v50 = *(char **)(v47 - 47);
    if (v49 >= 0)
      v51 = *(v47 - 24);
    else
      v51 = *(_QWORD *)(v47 - 39);
    if ((unint64_t)v45 >= v51)
      v52 = v51;
    else
      v52 = (size_t)v45;
    v53 = memcmp(v50, v44, v52);
    if (v53)
    {
      if (v53 < 0)
        goto LABEL_84;
    }
    else if (v51 <= (unint64_t)v45)
    {
LABEL_84:
      v54 = (char)*v47;
      if (v54 >= 0)
        v55 = (char *)(v47 - 23);
      else
        v55 = *(char **)(v47 - 23);
      if (v54 >= 0)
        v56 = *v47;
      else
        v56 = *(_QWORD *)(v47 - 15);
      if (v56 >= (unint64_t)v45)
        v57 = (size_t)v45;
      else
        v57 = v56;
      v58 = memcmp(v44, v55, v57);
      if (v58)
      {
        if (v58 < 0)
        {
LABEL_95:
          negate = 1;
          v2 = v129;
          v25 = v134;
          if ((v126 & 0x80) == 0)
            goto LABEL_127;
          goto LABEL_126;
        }
      }
      else if ((unint64_t)v45 <= v56)
      {
        goto LABEL_95;
      }
    }
    v48 = ++v42 < v43;
    v47 += 48;
    if (v46 != v42)
      continue;
    break;
  }
  v2 = v129;
  negate = v131;
  v25 = v134;
  if ((v126 & 0x80) == 0)
    goto LABEL_127;
LABEL_126:
  operator delete(v136[0]);
LABEL_127:
  if (v48)
    goto LABEL_245;
LABEL_128:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_239:
    if ((v28 & 0x80) != 0)
      goto LABEL_245;
    v115 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v28] & v115) == 0)
    {
      v116 = (v115 >> 7) & 1;
      if (v28 != 95)
        v116 = 0;
      if (v116 != 1)
        goto LABEL_245;
    }
    goto LABEL_244;
  }
  memset(__p, 170, sizeof(__p));
  std::regex_traits<char>::__transform_primary<char *>(&__src, (uint64_t)&this->__traits_, (_BYTE *)&__src + 1, __p);
  v71 = this->__equivalences_.__begin_;
  v72 = HIBYTE(__p[2]);
  v73 = (char *)this->__equivalences_.__end_ - (char *)v71;
  if (!v73)
  {
    if ((HIBYTE(__p[2]) & 0x80) != 0)
      operator delete(__p[0]);
LABEL_238:
    v28 = __src;
    goto LABEL_239;
  }
  v132 = negate;
  v130 = v2;
  v74 = 0;
  v75 = v73 / 24;
  v76 = __p[0];
  v77 = __p[1];
  if (SHIBYTE(__p[2]) >= 0)
    v78 = (void *)HIBYTE(__p[2]);
  else
    v78 = __p[1];
  if (v75 <= 1)
    v79 = 1;
  else
    v79 = v73 / 24;
  v80 = 1;
  while (2)
  {
    v81 = &v71[v74];
    v82 = (void *)HIBYTE(v81->__r_.__value_.__r.__words[2]);
    v83 = (char)v82;
    if ((char)v82 < 0)
      v82 = (void *)v81->__r_.__value_.__l.__size_;
    if (v78 != v82)
    {
LABEL_149:
      if (++v74 == v79)
      {
        if ((v72 & 0x80) != 0)
LABEL_236:
          operator delete(__p[0]);
        v2 = v130;
        negate = v132;
        goto LABEL_238;
      }
      goto LABEL_153;
    }
    if (v83 >= 0)
      v84 = &v71[v74];
    else
      v84 = (std::string *)v81->__r_.__value_.__r.__words[0];
    if ((v72 & 0x80) == 0)
    {
      if (!(_DWORD)v72)
      {
LABEL_157:
        v2 = v130;
        negate = 1;
        if (!v80)
          goto LABEL_238;
        goto LABEL_245;
      }
      v85 = 0;
      while (*((unsigned __int8 *)__p + v85) == v84->__r_.__value_.__s.__data_[v85])
      {
        if (v72 == ++v85)
          goto LABEL_157;
      }
      goto LABEL_149;
    }
    v127 = v80;
    v86 = v76;
    v87 = v77;
    if (memcmp(v76, v84, (size_t)v77))
    {
      ++v74;
      v77 = v87;
      v76 = v86;
      if (v74 == v79)
        goto LABEL_236;
LABEL_153:
      v80 = v74 < v75;
      continue;
    }
    break;
  }
  operator delete(__p[0]);
  v2 = v130;
  negate = 1;
  if (!v127)
    goto LABEL_238;
LABEL_245:
  if (negate == this->__negate_)
  {
    first = 0;
    v118 = -993;
  }
  else
  {
    v2->__current_ += v25;
    first = this->__first_;
    v118 = -995;
  }
  v2->__do_ = v118;
  v2->__node_ = first;
}

void sub_1A343F998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__loop<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;

  v2 = *(unsigned int *)(result + 40);
  v3 = *(_QWORD *)(a2 + 56);
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 != -991)
  {
    *v4 = 0;
    if (!*(_QWORD *)(result + 32))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_28;
    }
    if (*(_QWORD *)(result + 24))
    {
      *(_DWORD *)a2 = -994;
      *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
      *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
      v20 = *(_DWORD *)(result + 44);
      v21 = *(_DWORD *)(result + 48);
      if (v20 == v21)
        return result;
      v22 = (v21 - 1);
      v23 = (v20 - 1);
      v24 = *(_QWORD *)(a2 + 24);
      v25 = *(_QWORD *)(a2 + 32);
      v26 = v22 - v23;
      if ((unint64_t)(v22 - v23) >= 2)
      {
        v27 = (v26 & 0xFFFFFFFFFFFFFFFELL) + v23;
        v28 = v25 + 24 * v23 + 24;
        v29 = v26 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(_QWORD *)(v28 - 24) = v24;
          *(_QWORD *)(v28 - 16) = v24;
          *(_QWORD *)v28 = v24;
          *(_QWORD *)(v28 + 8) = v24;
          *(_BYTE *)(v28 - 8) = 0;
          *(_BYTE *)(v28 + 16) = 0;
          v28 += 48;
          v29 -= 2;
        }
        while (v29);
        if (v26 == (v26 & 0xFFFFFFFFFFFFFFFELL))
          return result;
      }
      else
      {
        v27 = v23;
      }
      v30 = v22 - v27;
      v31 = (_BYTE *)(v25 + 24 * v27 + 16);
      do
      {
        *((_QWORD *)v31 - 2) = v24;
        *((_QWORD *)v31 - 1) = v24;
        *v31 = 0;
        v31 += 24;
        --v30;
      }
      while (v30);
      return result;
    }
LABEL_26:
    *(_DWORD *)a2 = -992;
    return result;
  }
  v5 = *v4 + 1;
  *v4 = v5;
  v6 = *(_QWORD *)(result + 24);
  v7 = *(_QWORD *)(result + 32);
  v8 = v5 < v7;
  if (v5 < v7 && v5 >= v6)
    v8 = v5 < v7 && *(_QWORD *)(v3 + 16 * v2 + 8) != *(_QWORD *)(a2 + 16);
  if (v8 && v5 >= v6)
    goto LABEL_26;
  *(_DWORD *)a2 = -994;
  if (!v8)
  {
LABEL_28:
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
  v12 = *(_DWORD *)(result + 44);
  v13 = *(_DWORD *)(result + 48);
  if (v12 == v13)
    return result;
  v14 = (v13 - 1);
  v15 = (v12 - 1);
  v16 = *(_QWORD *)(a2 + 24);
  v17 = *(_QWORD *)(a2 + 32);
  v18 = v14 - v15;
  if ((unint64_t)(v14 - v15) < 2)
  {
    v19 = v15;
LABEL_39:
    v34 = v14 - v19;
    v35 = (_BYTE *)(v17 + 24 * v19 + 16);
    do
    {
      *((_QWORD *)v35 - 2) = v16;
      *((_QWORD *)v35 - 1) = v16;
      *v35 = 0;
      v35 += 24;
      --v34;
    }
    while (v34);
    return result;
  }
  v19 = (v18 & 0xFFFFFFFFFFFFFFFELL) + v15;
  v32 = v17 + 24 * v15 + 24;
  v33 = v18 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *(_QWORD *)(v32 - 24) = v16;
    *(_QWORD *)(v32 - 16) = v16;
    *(_QWORD *)v32 = v16;
    *(_QWORD *)(v32 + 8) = v16;
    *(_BYTE *)(v32 - 8) = 0;
    *(_BYTE *)(v32 + 16) = 0;
    v32 += 48;
    v33 -= 2;
  }
  while (v33);
  if (v18 != (v18 & 0xFFFFFFFFFFFFFFFELL))
    goto LABEL_39;
  return result;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *begin;
  unint64_t v8;
  std::vector<std::csub_match>::size_type v9;
  unint64_t v10;
  uint64_t v11;
  std::sub_match<const char *> *v12;
  std::vector<std::csub_match>::size_type v13;
  std::sub_match<const char *> *v14;
  std::vector<std::csub_match>::pointer end;
  unint64_t v16;
  std::vector<std::csub_match>::size_type v17;
  std::vector<std::csub_match>::value_type *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> v21;

  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) < __n)
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= __n)
      v9 = __n;
    v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    v11 = v10;
    v12 = (std::sub_match<const char *> *)operator new(24 * v10);
    this->__begin_ = v12;
    this->__end_ = v12;
    this->__end_cap_.__value_ = &v12[v11];
    v13 = 24 * __n;
    v14 = &v12[__n];
    do
    {
      v12->std::pair<const char *, const char *> = __u->std::pair<const char *, const char *>;
      *(_QWORD *)&v12->matched = *(_QWORD *)&__u->matched;
      ++v12;
      v13 -= 24;
    }
    while (v13);
    goto LABEL_25;
  }
  end = this->__end_;
  v16 = end - begin;
  if (v16 >= __n)
    v17 = __n;
  else
    v17 = end - begin;
  if (v17)
  {
    v18 = begin;
    do
    {
      *v18++ = *__u;
      --v17;
    }
    while (v17);
  }
  if (__n <= v16)
  {
    v14 = &begin[__n];
LABEL_25:
    this->__end_ = v14;
    return;
  }
  v19 = &end[__n - v16];
  v20 = 24 * __n - 24 * v16;
  do
  {
    v21 = __u->std::pair<const char *, const char *>;
    *(_QWORD *)&end->matched = *(_QWORD *)&__u->matched;
    end->std::pair<const char *, const char *> = v21;
    ++end;
    v20 -= 24;
  }
  while (v20);
  this->__end_ = v19;
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  std::pair<unsigned long, const char *> *value;
  std::pair<unsigned long, const char *> *end;
  std::vector<std::pair<unsigned long, const char *>>::pointer begin;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  std::vector<std::pair<unsigned long, const char *>>::size_type v12;
  std::pair<unsigned long, const char *> *v13;
  size_t v14;
  std::pair<unsigned long, const char *> *v15;
  std::pair<unsigned long, const char *> *v16;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      v12 = 16 * __n;
      bzero(this->__end_, 16 * __n);
      end = (std::pair<unsigned long, const char *> *)((char *)end + v12);
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v7 = end - this->__begin_;
    v8 = v7 + __n;
    if ((v7 + __n) >> 60)
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    v9 = (char *)value - (char *)begin;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = (std::pair<unsigned long, const char *> *)&v11[16 * v7];
    v14 = __n;
    v15 = (std::pair<unsigned long, const char *> *)&v11[16 * v10];
    bzero(v13, v14 * 16);
    v16 = &v13[v14];
    if (end != begin)
    {
      do
      {
        v13[-1] = end[-1];
        --v13;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
      operator delete(end);
  }
}

void std::__tree<std::string>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::string>::destroy(*(_QWORD *)a1);
    std::__tree<std::string>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale *v1;

  v1 = std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);
  operator delete(v1);
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

void std::__alternate<char>::~__alternate(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E4A06BD0;
  v2 = __p[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = __p[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  operator delete(__p);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  char *v7;
  std::basic_regex<char> *v8;
  std::__owns_one_state<char> *v9;
  unsigned int marked_count;
  std::basic_regex<char> *v11;
  std::__node<char> *v12;
  std::__owns_one_state<char> *v13;
  std::__node<char> *first;
  std::__node<char> *v15;
  std::__node<char> *v16;
  std::__node<char> *v17;
  std::__node<char> *v18;
  std::__node<char> *v19;
  std::__node<char> *v20;
  std::__owns_one_state<char> *v21;
  std::basic_regex<char> *v22;
  char *v23;
  std::__owns_one_state<char> *v24;
  unsigned int v25;
  std::basic_regex<char> *v26;
  std::__node<char> *v27;
  std::__owns_one_state<char> *v28;
  std::__node<char> *v29;

  end = a1->__end_;
  v7 = a2;
  while (1)
  {
    v8 = (std::basic_regex<char> *)v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>((uint64_t)a1, v7, a3);
    if (v7 == (char *)v8)
      break;
LABEL_2:
    if (v7 == (char *)v8)
      goto LABEL_6;
  }
  v9 = a1->__end_;
  marked_count = a1->__marked_count_;
  v11 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v8);
  if (v11 != v8)
  {
    v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v11, (std::basic_regex<char> *)a3, v9, marked_count + 1, a1->__marked_count_ + 1);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 == (std::basic_regex<char> *)a2)
  {
    v12 = (std::__node<char> *)operator new(0x10uLL);
    v13 = a1->__end_;
    first = v13->__first_;
    v12[1].__vftable = (std::__node<char>_vtbl *)first;
    v13->__first_ = v12;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  if (v8 == (std::basic_regex<char> *)a3)
    return a3;
  while (2)
  {
    if (LOBYTE(v8->__traits_.__loc_.__locale_) != 124)
      return (char *)v8;
    v21 = a1->__end_;
    v22 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    v23 = (char *)&v8->__traits_.__loc_.__locale_ + 1;
    while (2)
    {
      v8 = (std::basic_regex<char> *)v23;
      v23 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>((uint64_t)a1, v23, a3);
      if (v23 != (char *)v8)
      {
LABEL_14:
        if (v23 == (char *)v8)
          goto LABEL_17;
        continue;
      }
      break;
    }
    v24 = a1->__end_;
    v25 = a1->__marked_count_;
    v26 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v8);
    if (v26 != v8)
    {
      v23 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v26, (std::basic_regex<char> *)a3, v24, v25 + 1, a1->__marked_count_ + 1);
      goto LABEL_14;
    }
LABEL_17:
    if (v8 == v22)
    {
      v27 = (std::__node<char> *)operator new(0x10uLL);
      v28 = a1->__end_;
      v29 = v28->__first_;
      v27[1].__vftable = (std::__node<char>_vtbl *)v29;
      v28->__first_ = v27;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    v15 = (std::__node<char> *)operator new(0x18uLL);
    v16 = v21->__first_;
    v15[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
    v15[2].__vftable = (std::__node<char>_vtbl *)v16;
    v15->__vftable = (std::__node<char>_vtbl *)&unk_1E4A06C48;
    end->__first_ = v15;
    v21->__first_ = 0;
    v17 = (std::__node<char> *)operator new(0x10uLL);
    v18 = a1->__end_->__first_;
    v17[1].__vftable = (std::__node<char>_vtbl *)v18;
    v21->__first_ = v17;
    a1->__end_->__first_ = 0;
    v19 = (std::__node<char> *)operator new(0x10uLL);
    v20 = v21->__first_;
    v19->__vftable = (std::__node<char>_vtbl *)&unk_1E4A06C90;
    v19[1].__vftable = (std::__node<char>_vtbl *)v20;
    a1->__end_->__first_ = v19;
    a1->__end_ = (std::__owns_one_state<char> *)v21->__first_;
    if (v8 != (std::basic_regex<char> *)a3)
      continue;
    return a3;
  }
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  int v5;
  char v6;
  char *v7;
  void *v8;
  char *v9;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1];
    v6 = v5 == 94;
    v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    *(_QWORD *)(a1 + 56) = v8;
    if (v7 == a3)
      goto LABEL_20;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if (v7 == a3)
      goto LABEL_20;
    do
    {
      v9 = v7;
      v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(a1, v7, a3, (uint64_t)v8);
    }
    while (v7 != v9);
    if (v9 == a3)
      goto LABEL_20;
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93)
LABEL_20:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v9 + 1;
  }
  return a2;
}

void sub_1A344035C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v4;
  int v5;
  char *v6;
  int v9;
  int v10;
  char v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  char *v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  char *v22;
  uint64_t v23;
  int v24;
  int v25;
  std::basic_regex<char>::value_type *v26;
  char *v27;
  char *v28;
  int v29;
  void **v30;
  _BYTE *v31;
  char *v32;
  _BYTE *v34;
  void *v35[2];
  uint64_t v36;
  void *v37[2];
  uint64_t v38;
  void *__p[2];
  uint64_t v40;
  __int128 v41;
  int64_t v42;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  if (v5 == 93)
    return v4;
  v6 = (char *)a4;
  v9 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v40 = 0;
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_38:
    v24 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_33;
  }
  v10 = a2[1];
  if (v10 != 46)
  {
    if (v10 != 58)
    {
      if (v10 == 61)
      {
        v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(a1, a2 + 2, a3, a4);
        v11 = 0;
        if ((SHIBYTE(v40) & 0x80000000) == 0)
          goto LABEL_64;
        goto LABEL_63;
      }
      v9 = 0;
      goto LABEL_38;
    }
    v12 = a2 + 2;
    if (a3 - (v4 + 2) >= 2)
    {
      v13 = 0;
      v14 = (unsigned __int8 *)v4;
      if (v4[2] == 58)
        goto LABEL_14;
      do
      {
        do
        {
          if (a3 - v4 - 4 == v13)
            goto LABEL_89;
          v14 = (unsigned __int8 *)&v4[++v13];
        }
        while (v4[v13 + 2] != 58);
LABEL_14:
        ;
      }
      while (v14[3] != 93);
      v15 = &v4[v13 + 2];
      if (v15 != a3)
      {
        v16 = std::regex_traits<char>::__lookup_classname<char const*>(a1, v12, v15, *(_DWORD *)(a1 + 24) & 1);
        if (!v16)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
        v11 = 0;
        *((_DWORD *)v6 + 40) |= v16;
        v6 = &v4[v13 + 4];
        if (SHIBYTE(v40) < 0)
          goto LABEL_63;
        goto LABEL_64;
      }
    }
LABEL_89:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  v17 = a2 + 2;
  if (a3 - (v4 + 2) < 2)
    goto LABEL_89;
  v18 = a3 - v4 - 4;
  v19 = v4 + 2;
  v20 = v17 + 1;
  if (*v17 == 46)
    goto LABEL_23;
  do
  {
    do
    {
      if (!v18)
        goto LABEL_89;
      --v18;
      v19 = v20;
      v21 = *v20++;
    }
    while (v21 != 46);
LABEL_23:
    ;
  }
  while (*v20 != 93);
  if (v19 == a3)
    goto LABEL_89;
  std::regex_traits<char>::__lookup_collatename<char *>(v17, a1, v19, (uint64_t)&v41);
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  v40 = v42;
  *(_OWORD *)__p = v41;
  v22 = (char *)HIBYTE(v42);
  v9 = SHIBYTE(v42);
  v23 = *((_QWORD *)&v41 + 1);
  if (v42 < 0)
    v22 = (char *)__p[1];
  if ((unint64_t)(v22 - 1) >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  v4 = v19 + 2;
  v24 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v42 >= 0)
    v23 = HIBYTE(v42);
  if (v23)
  {
    v28 = v4;
    if (v4 == a3)
      goto LABEL_41;
    goto LABEL_40;
  }
LABEL_33:
  if ((v24 | 0x40) != 0x40)
  {
    LOBYTE(v25) = *v4;
LABEL_57:
    if (v9 < 0)
    {
      v34 = __p[0];
      __p[1] = (void *)1;
      *(_BYTE *)__p[0] = v25;
      v34[1] = 0;
      v28 = v4 + 1;
      if (v4 + 1 == a3)
        goto LABEL_41;
    }
    else
    {
      HIBYTE(v40) = 1;
      LOWORD(__p[0]) = v25;
      v28 = v4 + 1;
      if (v4 + 1 == a3)
        goto LABEL_41;
    }
    goto LABEL_40;
  }
  v25 = *v4;
  if (v25 != 92)
    goto LABEL_57;
  v26 = v4 + 1;
  if (v24)
    v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v26, a3, (uint64_t *)__p);
  else
    v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v26, (unsigned __int8 *)a3, (uint64_t)__p, (uint64_t)v6);
  v28 = v27;
  if (v27 == a3)
  {
LABEL_41:
    if (SHIBYTE(v40) < 0)
    {
      if (!__p[1])
        goto LABEL_62;
      if (__p[1] != (void *)1)
      {
        v30 = (void **)__p[0];
LABEL_61:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v6, *(char *)v30, *((char *)v30 + 1));
LABEL_62:
        v11 = 1;
        v4 = v28;
        if ((SHIBYTE(v40) & 0x80000000) == 0)
          goto LABEL_64;
        goto LABEL_63;
      }
      v30 = (void **)__p[0];
    }
    else
    {
      if (!HIBYTE(v40))
        goto LABEL_62;
      v30 = __p;
      if (HIBYTE(v40) != 1)
        goto LABEL_61;
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, *(char *)v30);
    goto LABEL_62;
  }
LABEL_40:
  v29 = *v28;
  if (v29 == 93)
    goto LABEL_41;
  v31 = v28 + 1;
  if (v28 + 1 == a3 || v29 != 45 || *v31 == 93)
    goto LABEL_41;
  v41 = 0uLL;
  v42 = 0;
  v4 = v28 + 2;
  if (v28 + 2 == a3 || *v31 != 91 || *v4 != 46)
  {
    if ((v24 | 0x40) == 0x40)
    {
      LODWORD(v31) = *v31;
      if ((_DWORD)v31 == 92)
      {
        if (v24)
          v32 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v28 + 2, a3, (uint64_t *)&v41);
        else
          v32 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v28 + 2, (unsigned __int8 *)a3, (uint64_t)&v41, (uint64_t)v6);
        goto LABEL_79;
      }
    }
    else
    {
      LOBYTE(v31) = *v31;
    }
    HIBYTE(v42) = 1;
    LOWORD(v41) = v31;
    goto LABEL_80;
  }
  v32 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v28 + 3, a3, (uint64_t)&v41);
LABEL_79:
  v4 = v32;
LABEL_80:
  *(_OWORD *)v37 = *(_OWORD *)__p;
  v38 = v40;
  __p[1] = 0;
  v40 = 0;
  __p[0] = 0;
  *(_OWORD *)v35 = v41;
  v36 = v42;
  v41 = 0uLL;
  v42 = 0;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v6, (char *)v37, (uint64_t)v35);
  if (SHIBYTE(v36) < 0)
  {
    operator delete(v35[0]);
    if ((SHIBYTE(v38) & 0x80000000) == 0)
    {
LABEL_82:
      if ((SHIBYTE(v42) & 0x80000000) == 0)
        goto LABEL_83;
LABEL_87:
      operator delete((void *)v41);
      v11 = 1;
      if (SHIBYTE(v40) < 0)
        goto LABEL_63;
      goto LABEL_64;
    }
  }
  else if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
    goto LABEL_82;
  }
  operator delete(v37[0]);
  if (SHIBYTE(v42) < 0)
    goto LABEL_87;
LABEL_83:
  v11 = 1;
  if (SHIBYTE(v40) < 0)
LABEL_63:
    operator delete(__p[0]);
LABEL_64:
  if ((v11 & 1) != 0)
    return v4;
  return v6;
}

void sub_1A3440874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  int v6;
  int locale_low;
  std::basic_regex<char> *v8;
  char *v9;
  size_t v10;
  char *v11;
  int v12;
  int v13;
  char *v14;
  int v15;
  int v16;
  std::basic_regex<char> *v17;
  unsigned __int8 *v18;
  BOOL v20;
  std::basic_regex<char> *v21;
  BOOL v22;
  char *v23;
  size_t v24;
  std::basic_regex<char> *v25;
  int v26;
  int v27;
  std::basic_regex<char> *v28;
  int v29;
  std::basic_regex<char> *v30;
  _BYTE *v31;

  if (this == a3)
    return this;
  v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6)
        v20 = 1;
      else
        v20 = v8 == a3;
      if (!v20 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v10 = 0;
        goto LABEL_35;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v24 = 0;
      goto LABEL_44;
    }
    if (locale_low == 43)
    {
      v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v10 = 1;
LABEL_35:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v10, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v9;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v24 = 1;
      goto LABEL_44;
    }
    return this;
  }
  if (locale_low == 63)
  {
    v21 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6)
      v22 = 1;
    else
      v22 = v21 == a3;
    if (v22 || LOBYTE(v21->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v21;
    }
    else
    {
      v23 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v23;
    }
  }
  else
  {
    if (locale_low != 123)
      return this;
    v11 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_71;
    v12 = *v11;
    if ((v12 & 0xF8) != 0x30 && (v12 & 0xFE) != 0x38)
      goto LABEL_71;
    v13 = v12 - 48;
    v14 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_19:
      v14 = (char *)a3;
    }
    else
    {
      while (1)
      {
        v15 = *v14;
        if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38)
          break;
        if (v13 >= 214748364)
          goto LABEL_71;
        v13 = v15 + 10 * v13 - 48;
        if (++v14 == (char *)a3)
          goto LABEL_19;
      }
    }
    if (v14 == v11)
      goto LABEL_71;
    if (v14 == (char *)a3)
      goto LABEL_72;
    v16 = *v14;
    if (v16 != 44)
    {
      if (v16 == 125)
      {
        v17 = (std::basic_regex<char> *)(v14 + 1);
        if (v6 || v17 == a3 || LOBYTE(v17->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 1);
          return v17;
        }
        else
        {
          v18 = (unsigned __int8 *)(v14 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v18;
        }
      }
LABEL_71:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    v25 = (std::basic_regex<char> *)(v14 + 1);
    if (v14 + 1 == (char *)a3)
      goto LABEL_71;
    v26 = LOBYTE(v25->__traits_.__loc_.__locale_);
    if (v26 == 125)
    {
      v8 = (std::basic_regex<char> *)(v14 + 2);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        v10 = v13;
        v9 = v14 + 3;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        goto LABEL_35;
      }
      v24 = v13;
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
LABEL_44:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v24, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v8;
    }
    if ((v26 & 0xF8) != 0x30 && (v26 & 0xFE) != 0x38)
      goto LABEL_72;
    v27 = v26 - 48;
    v28 = (std::basic_regex<char> *)(v14 + 2);
    if (v28 == a3)
    {
LABEL_60:
      v28 = a3;
    }
    else
    {
      while (1)
      {
        v29 = LOBYTE(v28->__traits_.__loc_.__locale_);
        if ((v29 & 0xF8) != 0x30 && (v29 & 0xFE) != 0x38)
          break;
        if (v27 >= 214748364)
          goto LABEL_71;
        v27 = v29 + 10 * v27 - 48;
        v28 = (std::basic_regex<char> *)((char *)v28 + 1);
        if (v28 == a3)
          goto LABEL_60;
      }
    }
    if (v28 == v25 || v28 == a3 || LOBYTE(v28->__traits_.__loc_.__locale_) != 125)
LABEL_72:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v27 < v13)
      goto LABEL_71;
    v30 = (std::basic_regex<char> *)((char *)&v28->__traits_.__loc_.__locale_ + 1);
    if (v6 || v30 == a3 || LOBYTE(v30->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 1);
      return v30;
    }
    else
    {
      v31 = (char *)&v28->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v31;
    }
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8;
  int v9;
  _QWORD *v14;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  void *v17;
  std::__node<char> *v18;
  std::__node<char> *v19;

  v8 = __mexp_end;
  v9 = __mexp_begin;
  v14 = operator new(0x10uLL);
  end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  v17 = operator new(0x38uLL);
  LODWORD(first) = this->__loop_count_;
  v18 = __s->__first_;
  *(_QWORD *)v17 = &unk_1E4A06B70;
  *((_QWORD *)v17 + 1) = v18;
  *((_QWORD *)v17 + 2) = v14;
  *((_QWORD *)v17 + 3) = __min;
  *((_QWORD *)v17 + 4) = __max;
  *((_DWORD *)v17 + 10) = (_DWORD)first;
  *((_DWORD *)v17 + 11) = v9;
  *((_DWORD *)v17 + 12) = v8;
  *((_BYTE *)v17 + 52) = __greedy;
  __s->__first_ = 0;
  v19 = (std::__node<char> *)operator new(0x10uLL);
  v19->__vftable = (std::__node<char>_vtbl *)&unk_1E4A06C00;
  v19[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v19;
  this->__end_ = (std::__owns_one_state<char> *)*((_QWORD *)v17 + 2);
  __s->__first_ = (std::__node<char> *)v17;
  this->__loop_count_ = (_DWORD)first + 1;
}

void sub_1A3440DE4(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);

  std::__loop<char>::~__loop(v1);
  _Unwind_Resume(a1);
}

void sub_1A3440DF8(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(uint64_t a1, char *a2, char *a3)
{
  int v6;
  char *v7;
  BOOL v8;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int v20;
  __int128 v21;
  char *v22;
  unsigned int v23;
  uint64_t v24;
  __int128 v25;
  unsigned int marked_count;
  std::basic_regex<char> v27;

  if (a2 == a3)
    return a2;
  v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        v15 = a2[1];
        if (v15 == 66)
        {
          v16 = (char *)operator new(0x30uLL);
          v24 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v16 = &unk_1E4A06810;
          *((_QWORD *)v16 + 1) = v24;
          std::locale::locale((std::locale *)v16 + 2, (const std::locale *)a1);
          *(_OWORD *)(v16 + 24) = *(_OWORD *)(a1 + 8);
          v16[40] = 1;
        }
        else
        {
          if (v15 != 98)
            return a2;
          v16 = (char *)operator new(0x30uLL);
          v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v16 = &unk_1E4A06810;
          *((_QWORD *)v16 + 1) = v17;
          std::locale::locale((std::locale *)v16 + 2, (const std::locale *)a1);
          *(_OWORD *)(v16 + 24) = *(_OWORD *)(a1 + 8);
          v16[40] = 0;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        return a2 + 2;
      }
      return a2;
    }
    if (v6 != 94)
      return a2;
    v10 = operator new(0x18uLL);
    v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(v12 + 8);
LABEL_14:
    *v10 = v14 + 16;
    v10[1] = v13;
    *((_BYTE *)v10 + 16) = v11;
    *(_QWORD *)(v12 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return a2 + 1;
  }
  if (v6 == 36)
  {
    v10 = operator new(0x18uLL);
    v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(v12 + 8);
    goto LABEL_14;
  }
  v8 = v6 == 40;
  v7 = a2 + 1;
  v8 = !v8 || v7 == a3;
  if (v8)
    return a2;
  v8 = *v7 == 63;
  v18 = a2 + 2;
  if (!v8 || v18 == a3)
    return a2;
  v20 = *v18;
  if (v20 == 33)
  {
    *(_QWORD *)&v25 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v27.__loop_count_ = v25;
    *(_OWORD *)&v27.__start_.__cntrl_ = v25;
    *(_OWORD *)&v27.__traits_.__loc_.__locale_ = v25;
    *(_OWORD *)&v27.__traits_.__col_ = v25;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v27);
    v27.__flags_ = *(_DWORD *)(a1 + 24);
    v22 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v27, a2 + 3, a3);
    marked_count = v27.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v27, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v22 == a3 || *v22 != 41)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    goto LABEL_32;
  }
  if (v20 != 61)
    return a2;
  *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v27.__loop_count_ = v21;
  *(_OWORD *)&v27.__start_.__cntrl_ = v21;
  *(_OWORD *)&v27.__traits_.__loc_.__locale_ = v21;
  *(_OWORD *)&v27.__traits_.__col_ = v21;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v27);
  v27.__flags_ = *(_DWORD *)(a1 + 24);
  v22 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v27, a2 + 3, a3);
  v23 = v27.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v27, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v23;
  if (v22 == a3 || *v22 != 41)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_32:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v27.__traits_.__loc_);
  return v22 + 1;
}

void sub_1A344112C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_1A3441140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_1A3441154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_1A3441168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  int *p_open_count;
  char *v7;
  std::__node<char> *v8;
  std::__owns_one_state<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v12;
  unsigned int marked_count;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  char *v16;
  std::__node<char> *v17;
  std::__owns_one_state<char> *v18;
  std::__node<char> *v19;

  v3 = a2;
  if (a2 != a3)
  {
    switch(LOBYTE(a2->__traits_.__loc_.__locale_))
    {
      case '(':
        if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3)
          goto LABEL_26;
        if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
          && BYTE1(a2->__traits_.__loc_.__locale_) == 63
          && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
        {
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, (char *)a3);
          if (v7 == (char *)a3)
            goto LABEL_26;
          v3 = (std::basic_regex<char> *)v7;
          if (*v7 != 41)
            goto LABEL_26;
        }
        else
        {
          if ((this->__flags_ & 2) != 0)
          {
            marked_count = this->__marked_count_;
          }
          else
          {
            v12 = (std::__node<char> *)operator new(0x18uLL);
            marked_count = this->__marked_count_ + 1;
            this->__marked_count_ = marked_count;
            end = this->__end_;
            first = end->__first_;
            v12->__vftable = (std::__node<char>_vtbl *)&unk_1E4A06AE0;
            v12[1].__vftable = (std::__node<char>_vtbl *)first;
            LODWORD(v12[2].__vftable) = marked_count;
            end->__first_ = v12;
            this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          }
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, (char *)&v3->__traits_.__loc_.__locale_ + 1, (char *)a3);
          if (v16 == (char *)a3 || (v3 = (std::basic_regex<char> *)v16, *v16 != 41))
LABEL_26:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          if ((this->__flags_ & 2) == 0)
          {
            v17 = (std::__node<char> *)operator new(0x18uLL);
            v18 = this->__end_;
            v19 = v18->__first_;
            v17->__vftable = (std::__node<char>_vtbl *)&unk_1E4A06B28;
            v17[1].__vftable = (std::__node<char>_vtbl *)v19;
            LODWORD(v17[2].__vftable) = marked_count;
            v18->__first_ = v17;
            this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          }
        }
        --*p_open_count;
LABEL_23:
        v3 = (std::basic_regex<char> *)((char *)v3 + 1);
        break;
      case ')':
      case ',':
      case '-':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
      case '<':
      case '=':
      case '>':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
      case '*':
      case '+':
      case '?':
        goto LABEL_25;
      case '.':
        v8 = (std::__node<char> *)operator new(0x10uLL);
        v9 = this->__end_;
        v10 = v9->__first_;
        v8->__vftable = (std::__node<char>_vtbl *)&unk_1E4A068A0;
        v8[1].__vftable = (std::__node<char>_vtbl *)v10;
        v9->__first_ = v8;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        goto LABEL_23;
      case '[':
        return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, (char *)a2, (char *)a3);
      case '\\':
        return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      default:
        if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123)
LABEL_25:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
    }
  }
  return v3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char *v15;
  std::basic_regex<char> *v16;
  std::__owns_one_state<char> *v17;
  int v18;
  std::basic_regex<char> *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  std::basic_regex<char> *v30;
  char *v31;
  std::__owns_one_state<char> *v32;
  int v33;
  std::basic_regex<char> *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;

  v6 = operator new(8uLL);
  *v6 = &unk_1E4A06630;
  v7 = operator new(0x10uLL);
  v7[1] = v6;
  v8 = operator new(0x20uLL);
  *v8 = &unk_1E4A06688;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      v12 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 56) = v12;
      v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
      if (v13 <= 0x3F)
        goto LABEL_6;
LABEL_11:
      if (v13 != 64)
      {
        if (v13 == 128)
          return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(a1, a2, a3);
        if (v13 == 256)
          return std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
LABEL_38:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
    }
  }
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v12;
  v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v13 > 0x3F)
    goto LABEL_11;
LABEL_6:
  if (v13)
  {
    if (v13 == 16)
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, a2, a3);
    if (v13 != 32)
      goto LABEL_38;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
  }
  v15 = a2;
  while (1)
  {
    v16 = (std::basic_regex<char> *)v15;
    v15 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v15, a3);
    if (v15 == (char *)v16)
      break;
LABEL_17:
    if (v15 == (char *)v16)
      goto LABEL_23;
  }
  v17 = *(std::__owns_one_state<char> **)(a1 + 56);
  v18 = *(_DWORD *)(a1 + 28);
  v19 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>((std::basic_regex<char> *)a1, v16, (std::basic_regex<char> *)a3);
  if (v19 != v16)
  {
    v15 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v19, (std::basic_regex<char> *)a3, v17, (v18 + 1), (*(_DWORD *)(a1 + 28) + 1));
    goto LABEL_17;
  }
LABEL_23:
  if (v16 == (std::basic_regex<char> *)a2)
  {
    v20 = operator new(0x10uLL);
    v21 = *(_QWORD *)(a1 + 56);
    v22 = *(_QWORD *)(v21 + 8);
    v20[1] = v22;
    *(_QWORD *)(v21 + 8) = v20;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  if (v16 == (std::basic_regex<char> *)a3)
    return (std::basic_regex<char> *)a3;
  while (2)
  {
    if (LOBYTE(v16->__traits_.__loc_.__locale_) != 124)
      return v16;
    v29 = *(_QWORD *)(a1 + 56);
    v30 = (std::basic_regex<char> *)((char *)&v16->__traits_.__loc_.__locale_ + 1);
    v31 = (char *)&v16->__traits_.__loc_.__locale_ + 1;
    while (2)
    {
      v16 = (std::basic_regex<char> *)v31;
      v31 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v31, a3);
      if (v31 != (char *)v16)
      {
LABEL_32:
        if (v31 == (char *)v16)
          goto LABEL_27;
        continue;
      }
      break;
    }
    v32 = *(std::__owns_one_state<char> **)(a1 + 56);
    v33 = *(_DWORD *)(a1 + 28);
    v34 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>((std::basic_regex<char> *)a1, v16, (std::basic_regex<char> *)a3);
    if (v34 != v16)
    {
      v31 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v34, (std::basic_regex<char> *)a3, v32, (v33 + 1), (*(_DWORD *)(a1 + 28) + 1));
      goto LABEL_32;
    }
LABEL_27:
    if (v16 == v30)
    {
      v35 = operator new(0x10uLL);
      v36 = *(_QWORD *)(a1 + 56);
      v37 = *(_QWORD *)(v36 + 8);
      v35[1] = v37;
      *(_QWORD *)(v36 + 8) = v35;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    v23 = operator new(0x18uLL);
    v24 = *(_QWORD *)(v29 + 8);
    v23[1] = *(_QWORD *)(v12 + 8);
    v23[2] = v24;
    *v23 = &unk_1E4A06C48;
    *(_QWORD *)(v12 + 8) = v23;
    *(_QWORD *)(v29 + 8) = 0;
    v25 = operator new(0x10uLL);
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v25[1] = v26;
    *(_QWORD *)(v29 + 8) = v25;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v27 = operator new(0x10uLL);
    v28 = *(_QWORD *)(v29 + 8);
    *v27 = &unk_1E4A06C90;
    v27[1] = v28;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v27;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v29 + 8);
    if (v16 != (std::basic_regex<char> *)a3)
      continue;
    return (std::basic_regex<char> *)a3;
  }
}

void sub_1A34417C8(_Unwind_Exception *a1)
{
  void *v1;
  void (__cdecl ***v2)(std::__owns_one_state<char> *__hidden);

  operator delete(v1);
  operator delete(v2);
  (*(void (**)(void *))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1A3441804(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(v2 + 8))(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *result;

  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  void *v7;
  unint64_t v8;
  std::string *v9;
  unint64_t v10;
  size_t v11;
  std::string::size_type v12;
  uint64_t v13;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__n > v8)
    {
      v11 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) >= __n - v8)
      {
        v9 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v8 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          v7 = operator new(v11);
          memcpy(v7, __s, __n);
          if (v8 != 22)
            operator delete(v9);
          this->__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
          this->__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
LABEL_23:
          this->__r_.__value_.__l.__size_ = __n;
          goto LABEL_24;
        }
LABEL_8:
        v12 = 2 * v8;
        if (__n > 2 * v8)
          v12 = __n;
        v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v13 = v12 | 7;
        if (v12 >= 0x17)
          v11 = v13 + 1;
        else
          v11 = 23;
        goto LABEL_15;
      }
LABEL_25:
      std::string::__throw_length_error[abi:ne180100]();
    }
    v6 = HIBYTE(v10);
    v7 = (void *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      if (__n - 0x7FFFFFFFFFFFFFF7 >= 0x800000000000001FLL)
      {
        v8 = 22;
        v9 = this;
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    goto LABEL_23;
  *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
LABEL_24:
  *((_BYTE *)v7 + __n) = 0;
  return this;
}

uint64_t diag::DIAGConfigurer::DIAGConfigurer(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  const void *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE v16[16];
  dispatch_object_t object;

  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v16, "com.apple.telephony.abm", "trace.diag.cfg");
  object = 0;
  ctu::SharedSynchronizable<diag::DIAGConfigurer>::SharedSynchronizable((_QWORD *)(a1 + 72), "trace.diag.cfg", QOS_CLASS_USER_INITIATED, &object);
  if (object)
    dispatch_release(object);
  ctu::Loggable<diag::DIAGConfigurer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>((_QWORD *)a1, (uint64_t)v16, a2);
  *(_QWORD *)a1 = off_1E4A062F0;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v16);
  *(_QWORD *)a1 = off_1E4A05F58;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)a3;
  v8 = *(const void **)(a3 + 8);
  *(_QWORD *)(a1 + 112) = v8;
  if (v8)
    CFRetain(v8);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 128) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a3 + 32);
  v12 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a1 + 144) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_QWORD *)(a1 + 168) = a4;
  return a1;
}

void sub_1A3441B10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  va_list va;

  va_start(va, a2);
  ctu::SharedSynchronizable<diag::DIAGConfigurer>::~SharedSynchronizable(v2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

void sub_1A3441B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a10);
  _Unwind_Resume(a1);
}

void diag::DIAGConfigurer::~DIAGConfigurer(diag::DIAGConfigurer *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  const void *v8;
  NSObject *v9;
  NSObject *v10;
  std::__shared_weak_count *v11;

  *(_QWORD *)this = off_1E4A05F58;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v5)
    goto LABEL_10;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
  {
LABEL_10:
    v8 = (const void *)*((_QWORD *)this + 14);
    if (!v8)
      goto LABEL_12;
    goto LABEL_11;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v8 = (const void *)*((_QWORD *)this + 14);
  if (v8)
LABEL_11:
    CFRelease(v8);
LABEL_12:
  *(_QWORD *)this = off_1E4A062B0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v9 = *((_QWORD *)this + 12);
  if (v9)
    dispatch_release(v9);
  v10 = *((_QWORD *)this + 11);
  if (v10)
    dispatch_release(v10);
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
}

void diag::DIAGConfigurer::drain(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  NSObject *v15;
  unint64_t v16;
  _QWORD v17[5];
  void *aBlock;
  dispatch_object_t object;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v6 = *(_QWORD *)(a1 + 72);
  v4 = *(std::__shared_weak_count **)(a1 + 80);
  v5 = (uint64_t *)(a1 + 72);
  if (!v4 || (v8 = std::__shared_weak_count::lock(v4)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 1174405120;
  v17[2] = ___ZN4diag14DIAGConfigurer5drainEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  v17[3] = &__block_descriptor_tmp_6;
  v17[4] = a1;
  v14 = *(void **)a2;
  if (*(_QWORD *)a2)
    v14 = _Block_copy(v14);
  v15 = *(NSObject **)(a2 + 8);
  aBlock = v14;
  object = v15;
  if (v15)
    dispatch_retain(v15);
  v20 = v6;
  v21 = v9;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  ctu::SharedSynchronizable<diag::DIAGConfigurer>::execute_wrapped(v5, (uint64_t)v17);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  std::__shared_weak_count::__release_weak(v9);
}

void ___ZN4diag14DIAGConfigurer5drainEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  const void *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  _QWORD v17[5];
  std::__shared_weak_count *v18;
  void *v19;
  dispatch_object_t v20;
  void *aBlock;
  dispatch_object_t object;
  _QWORD block[4];
  void *v24;
  char v25;

  v2 = (_QWORD *)a1[4];
  v3 = v2[17];
  if (v3)
  {
    v4 = v2[19];
    v5 = v2[20];
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 1174405120;
    v17[2] = ___ZN4diag14DIAGConfigurer5drainEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_2;
    v17[3] = &__block_descriptor_tmp;
    v6 = (std::__shared_weak_count *)a1[8];
    v17[4] = a1[7];
    v18 = v6;
    if (v6)
    {
      p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
      do
        v8 = __ldxr(p_shared_weak_owners);
      while (__stxr(v8 + 1, p_shared_weak_owners));
    }
    v9 = (void *)a1[5];
    if (v9)
      v9 = _Block_copy(v9);
    v10 = a1[6];
    v19 = v9;
    v20 = v10;
    if (v10)
      dispatch_retain(v10);
    v11 = _Block_copy(v17);
    v12 = v2[11];
    if (v12)
      dispatch_retain(v12);
    aBlock = v11;
    object = v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v3 + 48))(v3, 32, v4, v5, &aBlock);
    if (object)
      dispatch_release(object);
    if (aBlock)
      _Block_release(aBlock);
    if (v20)
      dispatch_release(v20);
    if (v19)
      _Block_release(v19);
    if (v18)
      std::__shared_weak_count::__release_weak(v18);
  }
  else
  {
    v13 = (const void *)a1[5];
    if (v13)
      v14 = _Block_copy(v13);
    else
      v14 = 0;
    v15 = a1[6];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
    block[3] = &__block_descriptor_tmp_21;
    if (v14)
      v16 = _Block_copy(v14);
    else
      v16 = 0;
    v24 = v16;
    v25 = 0;
    dispatch_async(v15, block);
    if (v24)
      _Block_release(v24);
    if (v14)
      _Block_release(v14);
  }
}

void sub_1A3441F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  dispatch::callback<void({block_pointer})(BOOL)>::~callback((uint64_t)&a17);
  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v17);
  if (a14)
    std::__shared_weak_count::__release_weak(a14);
  _Unwind_Resume(a1);
}

void ___ZN4diag14DIAGConfigurer5drainEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_2(_QWORD *a1, char a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  const void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD v13[4];
  void *aBlock;
  char v15;

  v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      if (a1[4])
      {
        v7 = (const void *)a1[6];
        if (v7)
          v8 = _Block_copy(v7);
        else
          v8 = 0;
        v9 = a1[7];
        v13[0] = MEMORY[0x1E0C809B0];
        v13[1] = 1174405120;
        v13[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
        v13[3] = &__block_descriptor_tmp_21;
        if (v8)
          v10 = _Block_copy(v8);
        else
          v10 = 0;
        aBlock = v10;
        v15 = a2;
        dispatch_async(v9, v13);
        if (aBlock)
          _Block_release(aBlock);
        if (v8)
          _Block_release(v8);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void __copy_helper_block_e8_32c46_ZTSNSt3__18weak_ptrIN4diag14DIAGConfigurerEEE48c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  NSObject *v8;

  v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[6];
  if (v7)
    v7 = _Block_copy(v7);
  v8 = a2[7];
  a1[6] = v7;
  a1[7] = v8;
  if (v8)
    dispatch_retain(v8);
}

void __destroy_helper_block_e8_32c46_ZTSNSt3__18weak_ptrIN4diag14DIAGConfigurerEEE48c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[7];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[6];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

uint64_t dispatch::callback<void({block_pointer})(BOOL)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void __copy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE56c46_ZTSNSt3__18weak_ptrIN4diag14DIAGConfigurerEEE(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  NSObject *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = (void *)a2[5];
  if (v4)
    v4 = _Block_copy(v4);
  v5 = a2[6];
  a1[5] = v4;
  a1[6] = v5;
  if (v5)
    dispatch_retain(v5);
  v6 = a2[8];
  a1[7] = a2[7];
  a1[8] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
}

void __destroy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE56c46_ZTSNSt3__18weak_ptrIN4diag14DIAGConfigurerEEE(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  const void *v4;

  v2 = (std::__shared_weak_count *)a1[8];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = a1[6];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[5];
  if (v4)
    _Block_release(v4);
}

void diag::DIAGConfigurer::isActive(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  NSObject *v15;
  unint64_t v16;
  _QWORD v17[5];
  void *aBlock;
  dispatch_object_t object;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v6 = *(_QWORD *)(a1 + 72);
  v4 = *(std::__shared_weak_count **)(a1 + 80);
  v5 = (uint64_t *)(a1 + 72);
  if (!v4 || (v8 = std::__shared_weak_count::lock(v4)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 1174405120;
  v17[2] = ___ZN4diag14DIAGConfigurer8isActiveEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  v17[3] = &__block_descriptor_tmp_8;
  v17[4] = a1;
  v14 = *(void **)a2;
  if (*(_QWORD *)a2)
    v14 = _Block_copy(v14);
  v15 = *(NSObject **)(a2 + 8);
  aBlock = v14;
  object = v15;
  if (v15)
    dispatch_retain(v15);
  v20 = v6;
  v21 = v9;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  ctu::SharedSynchronizable<diag::DIAGConfigurer>::execute_wrapped(v5, (uint64_t)v17);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  std::__shared_weak_count::__release_weak(v9);
}

void ___ZN4diag14DIAGConfigurer8isActiveEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  const void *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  _QWORD v17[5];
  std::__shared_weak_count *v18;
  void *v19;
  dispatch_object_t v20;
  void *aBlock;
  dispatch_object_t object;
  _QWORD block[4];
  void *v24;
  char v25;

  v2 = (_QWORD *)a1[4];
  v3 = v2[17];
  if (v3)
  {
    v4 = v2[19];
    v5 = v2[20];
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 1174405120;
    v17[2] = ___ZN4diag14DIAGConfigurer8isActiveEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_2;
    v17[3] = &__block_descriptor_tmp_7;
    v6 = (std::__shared_weak_count *)a1[8];
    v17[4] = a1[7];
    v18 = v6;
    if (v6)
    {
      p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
      do
        v8 = __ldxr(p_shared_weak_owners);
      while (__stxr(v8 + 1, p_shared_weak_owners));
    }
    v9 = (void *)a1[5];
    if (v9)
      v9 = _Block_copy(v9);
    v10 = a1[6];
    v19 = v9;
    v20 = v10;
    if (v10)
      dispatch_retain(v10);
    v11 = _Block_copy(v17);
    v12 = v2[11];
    if (v12)
      dispatch_retain(v12);
    aBlock = v11;
    object = v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v3 + 48))(v3, 256, v4, v5, &aBlock);
    if (object)
      dispatch_release(object);
    if (aBlock)
      _Block_release(aBlock);
    if (v20)
      dispatch_release(v20);
    if (v19)
      _Block_release(v19);
    if (v18)
      std::__shared_weak_count::__release_weak(v18);
  }
  else
  {
    v13 = (const void *)a1[5];
    if (v13)
      v14 = _Block_copy(v13);
    else
      v14 = 0;
    v15 = a1[6];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
    block[3] = &__block_descriptor_tmp_21;
    if (v14)
      v16 = _Block_copy(v14);
    else
      v16 = 0;
    v24 = v16;
    v25 = 0;
    dispatch_async(v15, block);
    if (v24)
      _Block_release(v24);
    if (v14)
      _Block_release(v14);
  }
}

void sub_1A344258C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  dispatch::callback<void({block_pointer})(BOOL)>::~callback((uint64_t)&a17);
  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v17);
  if (a14)
    std::__shared_weak_count::__release_weak(a14);
  _Unwind_Resume(a1);
}

void ___ZN4diag14DIAGConfigurer8isActiveEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_2(_QWORD *a1, char a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  const void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD v13[4];
  void *aBlock;
  char v15;

  v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      if (a1[4])
      {
        v7 = (const void *)a1[6];
        if (v7)
          v8 = _Block_copy(v7);
        else
          v8 = 0;
        v9 = a1[7];
        v13[0] = MEMORY[0x1E0C809B0];
        v13[1] = 1174405120;
        v13[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
        v13[3] = &__block_descriptor_tmp_21;
        if (v8)
          v10 = _Block_copy(v8);
        else
          v10 = 0;
        aBlock = v10;
        v15 = a2;
        dispatch_async(v9, v13);
        if (aBlock)
          _Block_release(aBlock);
        if (v8)
          _Block_release(v8);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void diag::DIAGConfigurer::bufferOff(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  NSObject *v15;
  unint64_t v16;
  _QWORD v17[5];
  void *aBlock;
  dispatch_object_t object;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v6 = *(_QWORD *)(a1 + 72);
  v4 = *(std::__shared_weak_count **)(a1 + 80);
  v5 = (uint64_t *)(a1 + 72);
  if (!v4 || (v8 = std::__shared_weak_count::lock(v4)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 1174405120;
  v17[2] = ___ZN4diag14DIAGConfigurer9bufferOffEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  v17[3] = &__block_descriptor_tmp_11;
  v17[4] = a1;
  v14 = *(void **)a2;
  if (*(_QWORD *)a2)
    v14 = _Block_copy(v14);
  v15 = *(NSObject **)(a2 + 8);
  aBlock = v14;
  object = v15;
  if (v15)
    dispatch_retain(v15);
  v20 = v6;
  v21 = v9;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  ctu::SharedSynchronizable<diag::DIAGConfigurer>::execute_wrapped(v5, (uint64_t)v17);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  std::__shared_weak_count::__release_weak(v9);
}

void ___ZN4diag14DIAGConfigurer9bufferOffEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  void *v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  const void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void **v18;
  _QWORD v19[5];
  std::__shared_weak_count *v20;
  void *v21;
  dispatch_object_t v22;
  void *aBlock;
  dispatch_object_t object;
  void *block[2];
  uint64_t (*v26)(uint64_t);
  void *v27;
  void *v28;
  char v29;
  uint8_t buf[4];
  void **v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = a1[4];
  v3 = *(_QWORD *)(v2 + 136);
  if (v3)
  {
    *(_DWORD *)(v2 + 156) = 1;
    v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      capabilities::diag::asString();
      if (SHIBYTE(v26) >= 0)
        v18 = block;
      else
        v18 = (void **)block[0];
      *(_DWORD *)buf = 136315138;
      v31 = v18;
      _os_log_debug_impl(&dword_1A343C000, v4, OS_LOG_TYPE_DEBUG, "#D Buffering Mode: %s", buf, 0xCu);
      if (SHIBYTE(v26) < 0)
        operator delete(block[0]);
      v3 = *(_QWORD *)(v2 + 136);
    }
    v5 = *(_QWORD *)(v2 + 152);
    v6 = *(_QWORD *)(v2 + 160);
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 1174405120;
    v19[2] = ___ZN4diag14DIAGConfigurer9bufferOffEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_9;
    v19[3] = &__block_descriptor_tmp_10;
    v7 = (std::__shared_weak_count *)a1[8];
    v19[4] = a1[7];
    v20 = v7;
    if (v7)
    {
      p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
    }
    v10 = (void *)a1[5];
    if (v10)
      v10 = _Block_copy(v10);
    v11 = a1[6];
    v21 = v10;
    v22 = v11;
    if (v11)
      dispatch_retain(v11);
    v12 = _Block_copy(v19);
    v13 = *(NSObject **)(v2 + 88);
    if (v13)
      dispatch_retain(v13);
    aBlock = v12;
    object = v13;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v3 + 48))(v3, 4, v5, v6, &aBlock);
    if (object)
      dispatch_release(object);
    if (aBlock)
      _Block_release(aBlock);
    if (v22)
      dispatch_release(v22);
    if (v21)
      _Block_release(v21);
    if (v20)
      std::__shared_weak_count::__release_weak(v20);
  }
  else
  {
    v14 = (const void *)a1[5];
    if (v14)
      v15 = _Block_copy(v14);
    else
      v15 = 0;
    v16 = a1[6];
    block[0] = (void *)MEMORY[0x1E0C809B0];
    block[1] = (void *)1174405120;
    v26 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
    v27 = &__block_descriptor_tmp_21;
    if (v15)
      v17 = _Block_copy(v15);
    else
      v17 = 0;
    v28 = v17;
    v29 = 0;
    dispatch_async(v16, block);
    if (v28)
      _Block_release(v28);
    if (v15)
      _Block_release(v15);
  }
}

void sub_1A3442A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, char a17)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4diag14DIAGConfigurer9bufferOffEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_9(_QWORD *a1, char a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  const void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD v13[4];
  void *aBlock;
  char v15;

  v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      if (a1[4])
      {
        v7 = (const void *)a1[6];
        if (v7)
          v8 = _Block_copy(v7);
        else
          v8 = 0;
        v9 = a1[7];
        v13[0] = MEMORY[0x1E0C809B0];
        v13[1] = 1174405120;
        v13[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
        v13[3] = &__block_descriptor_tmp_21;
        if (v8)
          v10 = _Block_copy(v8);
        else
          v10 = 0;
        aBlock = v10;
        v15 = a2;
        dispatch_async(v9, v13);
        if (aBlock)
          _Block_release(aBlock);
        if (v8)
          _Block_release(v8);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void diag::DIAGConfigurer::bufferOn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  NSObject *v17;
  unint64_t v18;
  _QWORD v19[5];
  void *aBlock;
  dispatch_object_t object;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;

  v7 = *(_QWORD *)(a1 + 72);
  v5 = *(std::__shared_weak_count **)(a1 + 80);
  v6 = (uint64_t *)(a1 + 72);
  if (!v5 || (v10 = std::__shared_weak_count::lock(v5)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 1174405120;
  v19[2] = ___ZN4diag14DIAGConfigurer8bufferOnEN12capabilities4diag15BufferingParamsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  v19[3] = &__block_descriptor_tmp_14;
  v19[4] = a1;
  v16 = *(void **)a3;
  if (*(_QWORD *)a3)
    v16 = _Block_copy(v16);
  v17 = *(NSObject **)(a3 + 8);
  aBlock = v16;
  object = v17;
  if (v17)
    dispatch_retain(v17);
  v23 = v11;
  v24 = a2;
  v22 = v7;
  do
    v18 = __ldxr(p_shared_weak_owners);
  while (__stxr(v18 + 1, p_shared_weak_owners));
  ctu::SharedSynchronizable<diag::DIAGConfigurer>::execute_wrapped(v6, (uint64_t)v19);
  if (v23)
    std::__shared_weak_count::__release_weak(v23);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  std::__shared_weak_count::__release_weak(v11);
}

void ___ZN4diag14DIAGConfigurer8bufferOnEN12capabilities4diag15BufferingParamsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  const void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  void *v14;
  NSObject *v15;
  void *v16;
  NSObject *v17;
  NSObject *v18;
  void *v19;
  void **v20;
  int v21;
  int v22;
  _QWORD v23[5];
  std::__shared_weak_count *v24;
  void *v25;
  dispatch_object_t v26;
  void *aBlock;
  dispatch_object_t object;
  uint8_t buf[4];
  void **v30;
  void **block;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  void *v34;
  void *v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = a1[4];
  if (*(_QWORD *)(v2 + 136))
  {
    *(_QWORD *)(v2 + 156) = a1[9];
    v3 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      capabilities::diag::asString();
      v20 = SHIBYTE(v33) >= 0 ? (void **)&block : block;
      *(_DWORD *)buf = 136315138;
      v30 = v20;
      _os_log_debug_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEBUG, "#D Buffering: %s", buf, 0xCu);
      if (SHIBYTE(v33) < 0)
        operator delete(block);
    }
    if (*((_DWORD *)a1 + 18) == 2)
    {
      v4 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        v21 = *(unsigned __int16 *)(v2 + 162);
        v22 = *(unsigned __int16 *)(v2 + 160);
        LODWORD(block) = 67109376;
        HIDWORD(block) = v21;
        LOWORD(v32) = 1024;
        *(_DWORD *)((char *)&v32 + 2) = v22;
        _os_log_debug_impl(&dword_1A343C000, v4, OS_LOG_TYPE_DEBUG, "#D Water Marks: %d , %d", (uint8_t *)&block, 0xEu);
      }
      v5 = 12;
    }
    else
    {
      v5 = 4;
    }
    v8 = *(_QWORD *)(v2 + 136);
    v9 = *(_QWORD *)(v2 + 152);
    v10 = *(_QWORD *)(v2 + 160);
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 1174405120;
    v23[2] = ___ZN4diag14DIAGConfigurer8bufferOnEN12capabilities4diag15BufferingParamsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_12;
    v23[3] = &__block_descriptor_tmp_13;
    v11 = (std::__shared_weak_count *)a1[8];
    v23[4] = a1[7];
    v24 = v11;
    if (v11)
    {
      p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v13 = __ldxr(p_shared_weak_owners);
      while (__stxr(v13 + 1, p_shared_weak_owners));
    }
    v14 = (void *)a1[5];
    if (v14)
      v14 = _Block_copy(v14);
    v15 = a1[6];
    v25 = v14;
    v26 = v15;
    if (v15)
      dispatch_retain(v15);
    v16 = _Block_copy(v23);
    v17 = *(NSObject **)(v2 + 88);
    if (v17)
      dispatch_retain(v17);
    aBlock = v16;
    object = v17;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v8 + 48))(v8, v5, v9, v10, &aBlock);
    if (object)
      dispatch_release(object);
    if (aBlock)
      _Block_release(aBlock);
    if (v26)
      dispatch_release(v26);
    if (v25)
      _Block_release(v25);
    if (v24)
      std::__shared_weak_count::__release_weak(v24);
  }
  else
  {
    v6 = (const void *)a1[5];
    if (v6)
      v7 = _Block_copy(v6);
    else
      v7 = 0;
    v18 = a1[6];
    block = (void **)MEMORY[0x1E0C809B0];
    v32 = 1174405120;
    v33 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
    v34 = &__block_descriptor_tmp_21;
    if (v7)
      v19 = _Block_copy(v7);
    else
      v19 = 0;
    v35 = v19;
    v36 = 0;
    dispatch_async(v18, &block);
    if (v35)
      _Block_release(v35);
    if (v7)
      _Block_release(v7);
  }
}

void sub_1A344305C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, char a17)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4diag14DIAGConfigurer8bufferOnEN12capabilities4diag15BufferingParamsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_12(_QWORD *a1, char a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  const void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD v13[4];
  void *aBlock;
  char v15;

  v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      if (a1[4])
      {
        v7 = (const void *)a1[6];
        if (v7)
          v8 = _Block_copy(v7);
        else
          v8 = 0;
        v9 = a1[7];
        v13[0] = MEMORY[0x1E0C809B0];
        v13[1] = 1174405120;
        v13[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
        v13[3] = &__block_descriptor_tmp_21;
        if (v8)
          v10 = _Block_copy(v8);
        else
          v10 = 0;
        aBlock = v10;
        v15 = a2;
        dispatch_async(v9, v13);
        if (aBlock)
          _Block_release(aBlock);
        if (v8)
          _Block_release(v8);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void diag::DIAGConfigurer::switchMask(uint64_t a1, int a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  NSObject *v18;
  _QWORD v19[6];
  std::__shared_weak_count *v20;
  void *aBlock;
  dispatch_object_t object;
  int v23;

  v7 = *(_QWORD *)(a1 + 72);
  v5 = *(std::__shared_weak_count **)(a1 + 80);
  v6 = (uint64_t *)(a1 + 72);
  if (!v5 || (v10 = std::__shared_weak_count::lock(v5)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 1174405120;
  v19[2] = ___ZN4diag14DIAGConfigurer10switchMaskE20ETLDIAGLoggingMaskIDN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  v19[3] = &__block_descriptor_tmp_17;
  v23 = a2;
  v19[4] = a1;
  v19[5] = v7;
  v20 = v11;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  v17 = *(void **)a3;
  if (*(_QWORD *)a3)
    v17 = _Block_copy(v17);
  v18 = *(NSObject **)(a3 + 8);
  aBlock = v17;
  object = v18;
  if (v18)
    dispatch_retain(v18);
  ctu::SharedSynchronizable<diag::DIAGConfigurer>::execute_wrapped(v6, (uint64_t)v19);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  std::__shared_weak_count::__release_weak(v11);
}

void ___ZN4diag14DIAGConfigurer10switchMaskE20ETLDIAGLoggingMaskIDN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  void *v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  const void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  _QWORD v19[5];
  std::__shared_weak_count *v20;
  void *v21;
  dispatch_object_t v22;
  void *aBlock;
  dispatch_object_t object;
  _QWORD block[4];
  void *v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 136);
  if (v3 && (v4 = *(_DWORD *)(a1 + 72), (v4 - 1) <= 1))
  {
    *(_BYTE *)(v2 + 164) = v4;
    v5 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(block[0]) = 67109120;
      HIDWORD(block[0]) = v4;
      _os_log_debug_impl(&dword_1A343C000, v5, OS_LOG_TYPE_DEBUG, "#D Logging Mask: %d", (uint8_t *)block, 8u);
      v3 = *(_QWORD *)(v2 + 136);
    }
    v6 = *(_QWORD *)(v2 + 152);
    v7 = *(_QWORD *)(v2 + 160);
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 1174405120;
    v19[2] = ___ZN4diag14DIAGConfigurer10switchMaskE20ETLDIAGLoggingMaskIDN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_15;
    v19[3] = &__block_descriptor_tmp_16;
    v8 = *(std::__shared_weak_count **)(a1 + 48);
    v19[4] = *(_QWORD *)(a1 + 40);
    v20 = v8;
    if (v8)
    {
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
    }
    v11 = *(void **)(a1 + 56);
    if (v11)
      v11 = _Block_copy(v11);
    v12 = *(NSObject **)(a1 + 64);
    v21 = v11;
    v22 = v12;
    if (v12)
      dispatch_retain(v12);
    v13 = _Block_copy(v19);
    v14 = *(NSObject **)(v2 + 88);
    if (v14)
      dispatch_retain(v14);
    aBlock = v13;
    object = v14;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v3 + 48))(v3, 64, v6, v7, &aBlock);
    if (object)
      dispatch_release(object);
    if (aBlock)
      _Block_release(aBlock);
    if (v22)
      dispatch_release(v22);
    if (v21)
      _Block_release(v21);
    if (v20)
      std::__shared_weak_count::__release_weak(v20);
  }
  else
  {
    v15 = *(const void **)(a1 + 56);
    if (v15)
      v16 = _Block_copy(v15);
    else
      v16 = 0;
    v17 = *(NSObject **)(a1 + 64);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
    block[3] = &__block_descriptor_tmp_21;
    if (v16)
      v18 = _Block_copy(v16);
    else
      v18 = 0;
    v26 = v18;
    v27 = 0;
    dispatch_async(v17, block);
    if (v26)
      _Block_release(v26);
    if (v16)
      _Block_release(v16);
  }
}

void sub_1A3443584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, char a17)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4diag14DIAGConfigurer10switchMaskE20ETLDIAGLoggingMaskIDN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_15(_QWORD *a1, char a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  const void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD v13[4];
  void *aBlock;
  char v15;

  v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      if (a1[4])
      {
        v7 = (const void *)a1[6];
        if (v7)
          v8 = _Block_copy(v7);
        else
          v8 = 0;
        v9 = a1[7];
        v13[0] = MEMORY[0x1E0C809B0];
        v13[1] = 1174405120;
        v13[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
        v13[3] = &__block_descriptor_tmp_21;
        if (v8)
          v10 = _Block_copy(v8);
        else
          v10 = 0;
        aBlock = v10;
        v15 = a2;
        dispatch_async(v9, v13);
        if (aBlock)
          _Block_release(aBlock);
        if (v8)
          _Block_release(v8);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void __copy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN4diag14DIAGConfigurerEEE56c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  NSObject *v8;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[7];
  if (v7)
    v7 = _Block_copy(v7);
  v8 = a2[8];
  a1[7] = v7;
  a1[8] = v8;
  if (v8)
    dispatch_retain(v8);
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN4diag14DIAGConfigurerEEE56c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void diag::DIAGConfigurer::getName(char *a1@<X8>)
{
  a1[23] = 14;
  strcpy(a1, "trace.diag.cfg");
}

void diag::DIAGConfigurer::abort(diag::DIAGConfigurer *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN4diag14DIAGConfigurer5abortEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_18;
  v1[4] = this;
  ctu::SharedSynchronizable<diag::DIAGConfigurer>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN4diag14DIAGConfigurer5abortEv_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint8_t v7[16];

  v1 = *(_QWORD **)(a1 + 32);
  v2 = v1[5];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1A343C000, v2, OS_LOG_TYPE_DEFAULT, "#I Stop and reset DIAG driver", v7, 2u);
  }
  v3 = v1[17];
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
    v4 = (std::__shared_weak_count *)v1[18];
    v1[17] = 0;
    v1[18] = 0;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

uint64_t diag::DIAGConfigurer::isAborted(diag::DIAGConfigurer *this)
{
  NSObject *v1;
  char *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  _QWORD block[6];

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN4diag14DIAGConfigurer9isAbortedEv_block_invoke;
  v5[3] = &unk_1E4A061F0;
  v5[4] = &v6;
  v5[5] = this;
  v10 = v5;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4diag14DIAGConfigurerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_23;
  block[4] = (char *)this + 72;
  block[5] = &v10;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
  v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t ___ZN4diag14DIAGConfigurer9isAbortedEv_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 40) + 136) == 0;
  return result;
}

uint64_t ctu::Loggable<diag::DIAGConfigurer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<diag::DIAGConfigurer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 14;
  strcpy(a1, "trace.diag.cfg");
}

uint64_t ctu::Loggable<diag::DIAGConfigurer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

_QWORD *ctu::SharedSynchronizable<diag::DIAGConfigurer>::~SharedSynchronizable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  v2 = a1[3];
  if (v2)
    dispatch_release(v2);
  v3 = a1[2];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

_QWORD *ctu::Loggable<diag::DIAGConfigurer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E4A062B0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<diag::DIAGConfigurer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E4A062B0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

_QWORD *ctu::SharedSynchronizable<diag::DIAGConfigurer>::SharedSynchronizable(_QWORD *a1, const char *a2, dispatch_qos_class_t a3, dispatch_object_t *a4)
{
  NSObject *v8;
  NSObject *initially_inactive;
  NSObject *v10;
  NSObject *v11;

  v8 = *a4;
  if (*a4)
    dispatch_retain(*a4);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v10 = dispatch_queue_create_with_target_V2(a2, initially_inactive, v8);
  dispatch_set_qos_class_floor(v10, a3, 0);
  dispatch_activate(v10);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = v10;
  if (v10)
    dispatch_retain(v10);
  v11 = *a4;
  a1[3] = *a4;
  if (v11)
    dispatch_retain(v11);
  if (v10)
    dispatch_release(v10);
  if (v8)
    dispatch_release(v8);
  return a1;
}

_QWORD *ctu::Loggable<diag::DIAGConfigurer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  _BYTE v10[16];

  *a1 = off_1E4A062B0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  a1[1] = &unk_1E4A06330;
  a1[7] = *a3;
  v5 = a3[1];
  a1[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v9);
  return a1;
}

void sub_1A3443C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<diag::DIAGConfigurer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E4A062B0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<diag::DIAGConfigurer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E4A062B0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE4F80] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E28], MEMORY[0x1E0DE43F0]);
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void *__copy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

void ctu::SharedSynchronizable<diag::DIAGConfigurer>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4diag14DIAGConfigurerEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E4A06398;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4diag14DIAGConfigurerEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIKN4diag14DIAGConfigurerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIKN4diag14DIAGConfigurerEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t _GLOBAL__sub_I_DIAGConfigurer_cpp()
{
  uint64_t result;

  result = ETLDIAGLoggingGetDefaultView();
  dword_1ED114924 = result;
  return result;
}

_QWORD *CircularFileLogWriter::create@<X0>(CircularFileLogWriter *this@<X0>, _QWORD *a2@<X8>)
{
  void *v5;

  v5 = operator new(0xB8uLL);
  CircularFileLogWriter::CircularFileLogWriter((uint64_t)v5, (__int128 *)this);
  return std::shared_ptr<CircularFileLogWriter>::shared_ptr[abi:ne180100]<CircularFileLogWriter,std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter*)#1},void>(a2, (uint64_t)v5);
}

void sub_1A3443FA8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t CircularFileLogWriter::CircularFileLogWriter(uint64_t a1, __int128 *a2)
{
  NSObject *v4;
  NSObject *v5;
  __int128 v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)a1 = MEMORY[0x1E0DE3B50] + 16;
  v4 = dispatch_queue_create("CircularFileLogWriter", 0);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
  {
    v5 = v4;
    dispatch_retain(v4);
    *(_QWORD *)(a1 + 32) = 0;
    dispatch_release(v5);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_QWORD *)a1 = off_1E4A063F8;
  *(_QWORD *)(a1 + 40) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v6;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 72), *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v7 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 72) = v7;
  }
  v8 = (std::string *)(a1 + 96);
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v9 = a2[3];
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 8);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  v10 = *(__int128 *)((char *)a2 + 72);
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 88);
  *(_OWORD *)(a1 + 120) = v10;
  *(_QWORD *)(a1 + 144) = 1;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  return a1;
}

void sub_1A34440FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;
  void **v4;
  uint64_t v6;

  if (*(char *)(v1 + 95) < 0)
  {
    operator delete(*v4);
    if ((*(char *)(v1 + 71) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(_QWORD *)(v1 + 40);
      *(_QWORD *)(v1 + 40) = 0;
      if (!v6)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  v6 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (!v6)
  {
LABEL_4:
    ctu::SharedSynchronizable<diag::DIAGConfigurer>::~SharedSynchronizable(v2);
    _Unwind_Resume(a1);
  }
LABEL_7:
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  ctu::SharedSynchronizable<diag::DIAGConfigurer>::~SharedSynchronizable(v2);
  _Unwind_Resume(a1);
}

void CircularFileLogWriter::open(CircularFileLogWriter *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN21CircularFileLogWriter4openEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_0;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_16_0;
  block[4] = (char *)this + 8;
  block[5] = &v4;
  v2 = (char *)this + 24;
  v1 = *((_QWORD *)this + 3);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void ___ZN21CircularFileLogWriter4openEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  int v4;
  size_t v5;
  unint64_t v6;
  void **v7;
  std::string *p_dst;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  char v22;
  uint64_t v23;
  int v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  timespec v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  DIR *v34;
  DIR *v35;
  dirent *v36;
  std::string __dst;
  stat v38;
  _QWORD v39[5];

  v39[2] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v1 + 152) = 0;
  *(_DWORD *)(v1 + 156) = 0;
  if (*(_QWORD *)(v1 + 40))
  {
    std::ostream::flush();
    v2 = *(_QWORD **)(v1 + 40);
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 32) | 4);
    v3 = *(_QWORD *)(v1 + 40);
    *(_QWORD *)(v1 + 40) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    *(_QWORD *)(v1 + 40) = 0;
  }
  *(_QWORD *)(v1 + 144) = *(_QWORD *)(v1 + 120) / *(_QWORD *)(v1 + 128);
  v4 = *(char *)(v1 + 95);
  if (v4 >= 0)
    v5 = *(unsigned __int8 *)(v1 + 95);
  else
    v5 = *(_QWORD *)(v1 + 80);
  v6 = v5 + 8;
  memset(&__dst, 170, sizeof(__dst));
  if (v5 + 8 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = (void **)(v1 + 72);
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v5 + 8;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5 + 8;
    if (!v5)
      goto LABEL_21;
  }
  if (v4 >= 0)
    v11 = (void *)(v1 + 72);
  else
    v11 = *v7;
  memmove(p_dst, v11, v5);
LABEL_21:
  strcpy((char *)p_dst + v5, "/latest-");
  v12 = *(char *)(v1 + 71);
  if (v12 >= 0)
    v13 = (const std::string::value_type *)(v1 + 48);
  else
    v13 = *(const std::string::value_type **)(v1 + 48);
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(v1 + 71);
  else
    v14 = *(_QWORD *)(v1 + 56);
  v15 = std::string::append(&__dst, v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  *(_QWORD *)&v38.st_uid = *((_QWORD *)&v15->__r_.__value_.__l + 2);
  *(_OWORD *)&v38.st_dev = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = *(char *)(v1 + 119);
  if (v17 >= 0)
    v18 = (const std::string::value_type *)(v1 + 96);
  else
    v18 = *(const std::string::value_type **)(v1 + 96);
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(v1 + 119);
  else
    v19 = *(_QWORD *)(v1 + 104);
  v20 = std::string::append((std::string *)&v38, v18, v19);
  v21 = v20->__r_.__value_.__r.__words[0];
  v39[0] = v20->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v39 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
  v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(v1 + 183) < 0)
    operator delete(*(void **)(v1 + 160));
  v23 = v39[0];
  *(_QWORD *)(v1 + 160) = v21;
  *(_QWORD *)(v1 + 168) = v23;
  *(_QWORD *)(v1 + 175) = *(_QWORD *)((char *)v39 + 7);
  *(_BYTE *)(v1 + 183) = v22;
  if (SHIBYTE(v38.st_gid) < 0)
  {
    operator delete(*(void **)&v38.st_dev);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_37;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_37;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_37:
  v24 = *(char *)(v1 + 95);
  if (v24 >= 0)
    v25 = *(unsigned __int8 *)(v1 + 95);
  else
    v25 = *(_QWORD *)(v1 + 80);
  v26 = v25 + 1;
  memset(&v38, 170, 24);
  if (v25 + 1 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v26 >= 0x17)
  {
    v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v30 = v26 | 7;
    v31 = v30 + 1;
    v27 = (char *)operator new(v30 + 1);
    v38.st_ino = v25 + 1;
    *(_QWORD *)&v38.st_uid = v31 | 0x8000000000000000;
    *(_QWORD *)&v38.st_dev = v27;
  }
  else
  {
    memset(&v38, 0, 24);
    v27 = (char *)&v38;
    HIBYTE(v38.st_gid) = v25 + 1;
    if (!v25)
    {
      LOWORD(v38.st_dev) = 47;
      if ((v24 & 0x80000000) == 0)
        goto LABEL_44;
      goto LABEL_57;
    }
  }
  if (v24 >= 0)
    v32 = (void *)(v1 + 72);
  else
    v32 = *v7;
  memmove(v27, v32, v25);
  *(_WORD *)&v27[v25] = 47;
  if (v24 < 0)
LABEL_57:
    operator delete(*v7);
LABEL_44:
  *(_OWORD *)v7 = *(_OWORD *)&v38.st_dev;
  *(_QWORD *)(v1 + 88) = *(_QWORD *)&v38.st_uid;
  v28.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v28.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v38.st_blksize = v28;
  *(timespec *)v38.st_qspare = v28;
  v38.st_birthtimespec = v28;
  *(timespec *)&v38.st_size = v28;
  v38.st_mtimespec = v28;
  v38.st_ctimespec = v28;
  *(timespec *)&v38.st_uid = v28;
  v38.st_atimespec = v28;
  *(timespec *)&v38.st_dev = v28;
  if (*(char *)(v1 + 95) >= 0)
    v29 = (const char *)(v1 + 72);
  else
    v29 = *(const char **)(v1 + 72);
  if (!stat(v29, &v38)
    && (*(char *)(v1 + 95) >= 0 ? (v33 = (const char *)(v1 + 72)) : (v33 = *(const char **)(v1 + 72)),
        (v34 = opendir(v33), (v35 = v34) != 0) && (v36 = readdir(v34), closedir(v35), v36)))
  {
    CircularFileLogWriter::getFileIndex_sync((CircularFileLogWriter *)v1, (unsigned int *)(v1 + 156), (unsigned int *)(v1 + 152));
  }
  else
  {
    support::fs::createDir((const char *)(v1 + 72), 0x1EDu, 1);
  }
  CircularFileLogWriter::openNewLog_sync((CircularFileLogWriter *)v1);
}

void sub_1A344460C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CircularFileLogWriter::close_sync(CircularFileLogWriter *this)
{
  uint64_t result;
  _QWORD *v3;

  *((_QWORD *)this + 19) = 0;
  result = *((_QWORD *)this + 5);
  if (!result)
  {
    *((_QWORD *)this + 5) = 0;
    return result;
  }
  std::ostream::flush();
  v3 = (_QWORD *)*((_QWORD *)this + 5);
  if (std::filebuf::close())
  {
    result = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  std::ios_base::clear((std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 32) | 4);
  result = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CircularFileLogWriter::getFileIndex_sync(CircularFileLogWriter *this, unsigned int *a2, unsigned int *a3)
{
  __int128 v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  __int128 v12;
  std::sub_match<const char *> *v13;
  std::sub_match<const char *> *v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  __int128 v18;
  const char *second;
  std::sub_match<const char *> *first;
  int v21;
  const char *v22;
  uint64_t v23;
  __int128 *v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  std::string::value_type **v28;
  std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  std::string *v32;
  std::string::value_type *v33;
  __int128 *v34;
  std::string::size_type *v35;
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  std::string::value_type v40;
  unsigned int v41;
  unsigned int v42;
  void *v43;
  std::sub_match<const char *> *v44;
  std::__shared_weak_count *v45;
  void **v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  unsigned int *v49;
  char v50;
  unsigned int v51;
  _BYTE v52[40];
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  void *__p;
  std::sub_match<const char *> *v60;
  uint64_t v61;
  std::locale v62[2];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  std::string __str[2];
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;

  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v64 = v6;
  v65 = v6;
  *(_OWORD *)&v62[0].__locale_ = v6;
  v63 = v6;
  v52[23] = 10;
  strcpy(v52, "([0-9]{8})");
  v7 = *((char *)this + 119);
  if (v7 >= 0)
    v8 = (char *)this + 96;
  else
    v8 = (const std::string::value_type *)*((_QWORD *)this + 12);
  if (v7 >= 0)
    v9 = *((unsigned __int8 *)this + 119);
  else
    v9 = *((_QWORD *)this + 13);
  v10 = std::string::append((std::string *)v52, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  __str[0].__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v62, (uint64_t)__str, 0);
  if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str[0].__r_.__value_.__l.__data_);
    if ((v52[23] & 0x80000000) == 0)
      goto LABEL_9;
LABEL_66:
    operator delete(*(void **)v52);
    goto LABEL_9;
  }
  if ((v52[23] & 0x80000000) != 0)
    goto LABEL_66;
LABEL_9:
  __p = 0;
  v60 = 0;
  v61 = 0;
  support::fs::readDir((const char *)this + 72, (uint64_t)&__p);
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v53 = 0xAAAAAAAAAAAAAAAALL;
  v55 = 0xAAAAAAAAAAAAAA00;
  v57 = v12;
  v54 = 0;
  v56 = 0uLL;
  LOBYTE(v57) = 0;
  BYTE8(v57) = 0;
  v58 = 0;
  memset(v52, 0, sizeof(v52));
  v13 = (std::sub_match<const char *> *)__p;
  v14 = v60;
  if (__p == v60)
  {
    *a2 = 0;
    *a3 = 0;
    v44 = (std::sub_match<const char *> *)__p;
    if (!__p)
      goto LABEL_63;
    goto LABEL_68;
  }
  v49 = a2;
  v15 = 0;
  v16 = 0;
  v17 = 1;
  do
  {
    *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v72 = v18;
    v69 = 0xAAAAAAAAAAAAAA00;
    __str[1].__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
    v67 = 0;
    v68 = 0;
    v70 = 0;
    v71 = 0;
    LOBYTE(v72) = 0;
    BYTE8(v72) = 0;
    v73 = 0;
    memset(__str, 0, 41);
    second = (const char *)*((unsigned __int8 *)&v13->matched + 7);
    if ((char)second >= 0)
      first = v13;
    else
      first = (std::sub_match<const char *> *)v13->first;
    if ((char)second < 0)
      second = v13->second;
    v21 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v62, first, (std::sub_match<const char *> *)&second[(_QWORD)first], (std::vector<std::csub_match> *)__str, 0);
    v22 = (const char *)*((unsigned __int8 *)&v13->matched + 7);
    if ((char)v22 >= 0)
      v23 = (uint64_t)v13;
    else
      v23 = (uint64_t)v13->first;
    if ((char)v22 < 0)
      v22 = v13->second;
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)v52, v23, (std::sub_match<std::__wrap_iter<const char *>> *)&v22[v23], (uint64_t *)__str, 0);
    if (__str[0].__r_.__value_.__r.__words[0])
    {
      __str[0].__r_.__value_.__l.__size_ = __str[0].__r_.__value_.__r.__words[0];
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    if (v21)
    {
      memset(__str, 170, 24);
      v24 = &v53;
      if (*(_QWORD *)&v52[8] != *(_QWORD *)v52)
        v24 = (__int128 *)(*(_QWORD *)v52 + 16);
      if (!*(_BYTE *)v24)
      {
        memset(__str, 0, 24);
LABEL_50:
        v41 = std::stoul(__str, 0, 10);
        if ((v17 & 1) != 0)
          v42 = v41;
        else
          v42 = v16;
        if (v42 >= v41)
          v16 = v41;
        else
          v16 = v42;
        if (v15 < v41)
          v15 = v41 + 1;
        if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str[0].__r_.__value_.__l.__data_);
        v17 = 0;
        goto LABEL_12;
      }
      v50 = v17;
      v51 = v15;
      v25 = v16;
      v26 = (uint64_t *)&v52[24];
      if (*(_QWORD *)&v52[8] != *(_QWORD *)v52)
        v26 = *(uint64_t **)v52;
      v27 = *v26;
      v28 = (std::string::value_type **)(*(_QWORD *)v52 + 8);
      if (*(_QWORD *)&v52[8] == *(_QWORD *)v52)
        v28 = (std::string::value_type **)&v52[32];
      v29 = *v28;
      v30 = (std::string::size_type)&(*v28)[-v27];
      if (v30 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v30 > 0x16)
      {
        v38 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v30 | 7) != 0x17)
          v38 = v30 | 7;
        v39 = v38 + 1;
        v31 = (std::string *)operator new(v38 + 1);
        __str[0].__r_.__value_.__l.__size_ = v30;
        __str[0].__r_.__value_.__r.__words[2] = v39 | 0x8000000000000000;
        __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
        if ((std::string::value_type *)v27 != v29)
          goto LABEL_36;
      }
      else
      {
        *((_BYTE *)&__str[0].__r_.__value_.__s + 23) = *(_BYTE *)v28 - v27;
        v31 = __str;
        if ((std::string::value_type *)v27 != v29)
        {
LABEL_36:
          if (v30 < 0x20 || (unint64_t)v31 - v27 < 0x20)
          {
            v32 = v31;
            v33 = (std::string::value_type *)v27;
          }
          else
          {
            v32 = (std::string *)((char *)v31 + (v30 & 0xFFFFFFFFFFFFFFE0));
            v33 = (std::string::value_type *)(v27 + (v30 & 0xFFFFFFFFFFFFFFE0));
            v34 = (__int128 *)(v27 + 16);
            v35 = &v31->__r_.__value_.__r.__words[2];
            v36 = v30 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v37 = *v34;
              *((_OWORD *)v35 - 1) = *(v34 - 1);
              *(_OWORD *)v35 = v37;
              v34 += 2;
              v35 += 4;
              v36 -= 32;
            }
            while (v36);
            if (v30 == (v30 & 0x7FFFFFFFFFFFFFE0))
              goto LABEL_49;
          }
          do
          {
            v40 = *v33++;
            v32->__r_.__value_.__s.__data_[0] = v40;
            v32 = (std::string *)((char *)v32 + 1);
          }
          while (v33 != v29);
LABEL_49:
          v32->__r_.__value_.__s.__data_[0] = 0;
          v16 = v25;
          v17 = v50;
          v15 = v51;
          goto LABEL_50;
        }
      }
      v32 = v31;
      goto LABEL_49;
    }
LABEL_12:
    ++v13;
  }
  while (v13 != v14);
  v43 = *(void **)v52;
  *v49 = v16;
  *a3 = v15;
  if (v43)
  {
    *(_QWORD *)&v52[8] = v43;
    operator delete(v43);
  }
  v44 = (std::sub_match<const char *> *)__p;
  if (!__p)
  {
LABEL_63:
    v45 = (std::__shared_weak_count *)v65;
    if (!(_QWORD)v65)
      goto LABEL_79;
LABEL_75:
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
    goto LABEL_79;
  }
LABEL_68:
  v46 = (void **)v60;
  if (v60 == v44)
  {
    v60 = v44;
    operator delete(v44);
    v45 = (std::__shared_weak_count *)v65;
    if (!(_QWORD)v65)
      goto LABEL_79;
    goto LABEL_75;
  }
  do
  {
    if (*((char *)v46 - 1) < 0)
      operator delete(*(v46 - 3));
    v46 -= 3;
  }
  while (v46 != (void **)v44);
  v60 = v44;
  operator delete(__p);
  v45 = (std::__shared_weak_count *)v65;
  if ((_QWORD)v65)
    goto LABEL_75;
LABEL_79:
  std::locale::~locale(v62);
}

void sub_1A3444B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,std::locale a36)
{
  std::vector<std::string>::~vector[abi:ne180100](&a33);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a36);
  _Unwind_Resume(a1);
}

void CircularFileLogWriter::openNewLog_sync(CircularFileLogWriter *this)
{
  _QWORD *v2;
  uint64_t v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::ios_base *v17;
  uint64_t v18;
  std::string *v19;
  std::string v20;
  void *__p[2];
  std::string::size_type v22;

  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 0;
    v4 = (char *)this + 160;
    v5 = (char *)this + 160;
    if ((*((char *)this + 183) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_31;
  }
  std::ostream::flush();
  v2 = (_QWORD *)*((_QWORD *)this + 5);
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 32) | 4);
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (char *)this + 160;
  v5 = (char *)this + 160;
  if (*((char *)this + 183) < 0)
LABEL_31:
    v5 = *(const char **)v4;
LABEL_7:
  unlink(v5);
  v6 = *((unsigned int *)this + 38);
  *((_DWORD *)this + 38) = v6 + 1;
  CircularFileLogWriter::generateFileName_sync(this, v6, &v20);
  v7 = *((char *)this + 95);
  if (v7 >= 0)
    v8 = (char *)this + 72;
  else
    v8 = (const std::string::value_type *)*((_QWORD *)this + 9);
  if (v7 >= 0)
    v9 = *((unsigned __int8 *)this + 95);
  else
    v9 = *((_QWORD *)this + 10);
  v10 = std::string::insert(&v20, 0, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v22 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  v12 = operator new(0x238uLL);
  v13 = MEMORY[0x1E0DE4FB0];
  v14 = MEMORY[0x1E0DE4FB0] + 64;
  v12[52] = MEMORY[0x1E0DE4FB0] + 64;
  v15 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v16 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  *v12 = v15;
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v15 - 24)) = v16;
  v17 = (std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24));
  std::ios_base::init(v17, v12 + 1);
  v17[1].__vftable = 0;
  v17[1].__fmtflags_ = -1;
  *v12 = v13 + 24;
  v12[52] = v14;
  MEMORY[0x1A858F6EC](v12 + 1);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)), *(_DWORD *)((char *)v12 + *(_QWORD *)(*v12 - 24) + 32) | 4);
  v18 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v12;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v12 = (_QWORD *)*((_QWORD *)this + 5);
  }
  if (v12[16])
  {
    support::fs::getFileName(&v20);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v20;
    else
      v19 = (std::string *)v20.__r_.__value_.__r.__words[0];
    if (*((char *)this + 183) < 0)
      v4 = *(const char **)v4;
    symlink((const char *)v19, v4);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
  }
  CircularFileLogWriter::clearOldLogs_sync(this);
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
}

void sub_1A3444E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void CircularFileLogWriter::close(CircularFileLogWriter *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN21CircularFileLogWriter5closeEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_4;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_16_0;
  block[4] = (char *)this + 8;
  block[5] = &v4;
  v2 = (char *)this + 24;
  v1 = *((_QWORD *)this + 3);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

uint64_t ___ZN21CircularFileLogWriter5closeEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v1 + 152) = 0;
  result = *(_QWORD *)(v1 + 40);
  if (!result)
  {
    *(_QWORD *)(v1 + 40) = 0;
    return result;
  }
  std::ostream::flush();
  v3 = *(_QWORD **)(v1 + 40);
  if (std::filebuf::close())
  {
    result = *(_QWORD *)(v1 + 40);
    *(_QWORD *)(v1 + 40) = 0;
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  std::ios_base::clear((std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 32) | 4);
  result = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CircularFileLogWriter::clear(CircularFileLogWriter *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN21CircularFileLogWriter5clearEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_5;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_16_0;
  block[4] = (char *)this + 8;
  block[5] = &v4;
  v2 = (char *)this + 24;
  v1 = *((_QWORD *)this + 3);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

uint64_t ___ZN21CircularFileLogWriter5clearEv_block_invoke(uint64_t a1)
{
  return CircularFileLogWriter::clear_sync(*(CircularFileLogWriter **)(a1 + 32));
}

uint64_t CircularFileLogWriter::clear_sync(CircularFileLogWriter *this)
{
  _QWORD *v2;
  uint64_t v3;
  const char **v4;

  *((_QWORD *)this + 19) = 0;
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 0;
    goto LABEL_8;
  }
  std::ostream::flush();
  v2 = (_QWORD *)*((_QWORD *)this + 5);
  if (!std::filebuf::close())
  {
    std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 32) | 4);
    v3 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (!v3)
      goto LABEL_8;
    goto LABEL_7;
  }
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
LABEL_7:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
LABEL_8:
  v4 = (const char **)((char *)this + 160);
  if (*((char *)this + 183) < 0)
    unlink(*v4);
  else
    unlink((const char *)v4);
  return support::fs::removeDir((const char *)this + 72);
}

void CircularFileLogWriter::write(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v11[6];
  std::__shared_weak_count *v12;

  v3 = (uint64_t *)(a1 + 8);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1174405120;
  v11[2] = ___ZN21CircularFileLogWriter5writeENSt3__110shared_ptrIN3ctu10LogMessageEEE_block_invoke;
  v11[3] = &__block_descriptor_tmp_6_0;
  v5 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  v11[4] = a1;
  v11[5] = v5;
  v12 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  ctu::SharedSynchronizable<CircularFileLogWriter>::execute_wrapped(v3, (uint64_t)v11);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void ___ZN21CircularFileLogWriter5writeENSt3__110shared_ptrIN3ctu10LogMessageEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8[2];

  v2 = a1[4];
  v3 = (std::__shared_weak_count *)a1[6];
  v8[0] = a1[5];
  v8[1] = (uint64_t)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  CircularFileLogWriter::write_sync(v2, v8);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1A34452B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t CircularFileLogWriter::write_sync(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  CircularFileLogWriter *v3;
  uint64_t v4;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  size_t v23;
  std::locale::__imp *p_dst;
  uint64_t v25;
  const void **v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  std::locale::__imp *locale;
  uint64_t v31;
  const std::locale::facet *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void *__p[2];
  __int128 v40;
  __int128 v41;
  _OWORD v42[9];
  unint64_t v43;
  std::locale __dst;
  size_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  if (!*a2)
    return result;
  v3 = (CircularFileLogWriter *)result;
  v4 = *(_QWORD *)(result + 40);
  if (!v4 || !*(_QWORD *)(v4 + 128))
    return result;
  if (*(char *)(v2 + 71) < 0)
  {
    v6 = *(_QWORD *)(v2 + 56) + 1;
    if (v6 < 2)
      return result;
  }
  else
  {
    v6 = *(unsigned __int8 *)(v2 + 71) + 1;
    if (v6 < 2)
      return result;
  }
  v43 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v42[7] = v7;
  v42[8] = v7;
  v42[5] = v7;
  v42[6] = v7;
  v42[3] = v7;
  v42[4] = v7;
  v42[1] = v7;
  v42[2] = v7;
  v41 = v7;
  v42[0] = v7;
  *(_OWORD *)__p = v7;
  v40 = v7;
  v37 = v7;
  v38 = v7;
  v35 = v7;
  v36 = v7;
  v34 = v7;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v34);
  v8 = v35;
  *(_DWORD *)((char *)&v35 + *(_QWORD *)(v35 - 24) + 8) |= 4u;
  *(_QWORD *)((char *)&v35 + *(_QWORD *)(v8 - 24) + 16) = 3;
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" [", 2);
  LOBYTE(__dst.__locale_) = ctu::asChar();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&__dst, 1);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"] ", 2);
  v13 = *(char *)(*a2 + 47);
  if (v13 >= 0)
    v14 = *a2 + 24;
  else
    v14 = *(_QWORD *)(*a2 + 24);
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(*a2 + 47);
  else
    v15 = *(_QWORD *)(*a2 + 32);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
  v17 = (char *)&v35 + *(_QWORD *)(v35 - 24);
  if ((v17[32] & 5) != 0)
  {
    v18 = v6 - 1;
    v19 = *((_QWORD *)v3 + 16);
    if (v6 - 1 > v19)
      goto LABEL_52;
LABEL_18:
    v20 = *((_QWORD *)v3 + 5) + *(_QWORD *)(**((_QWORD **)v3 + 5) - 24);
    if ((*(_BYTE *)(v20 + 32) & 5) != 0)
    {
      if (v18 - 1 <= v19)
      {
LABEL_23:
        if (*(char *)(*a2 + 71) < 0)
        {
          if (*(_QWORD *)(*a2 + 56))
            goto LABEL_27;
        }
        else if (*(_BYTE *)(*a2 + 71))
        {
LABEL_27:
          v21 = (_QWORD *)*((_QWORD *)v3 + 5);
          v22 = BYTE8(v41);
          if ((BYTE8(v41) & 0x10) == 0)
          {
LABEL_28:
            if ((v22 & 8) == 0)
            {
              v23 = 0;
              HIBYTE(v46) = 0;
              p_dst = (std::locale::__imp *)&__dst;
              goto LABEL_43;
            }
            v26 = (const void **)&v36 + 1;
            v25 = *((_QWORD *)&v37 + 1);
LABEL_35:
            v27 = *v26;
            v23 = v25 - (_QWORD)*v26;
            if (v23 >= 0x7FFFFFFFFFFFFFF8)
              std::string::__throw_length_error[abi:ne180100]();
            if (v23 >= 0x17)
            {
              v28 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v23 | 7) != 0x17)
                v28 = v23 | 7;
              v29 = v28 + 1;
              p_dst = (std::locale::__imp *)operator new(v28 + 1);
              v45 = v23;
              v46 = v29 | 0x8000000000000000;
              __dst.__locale_ = p_dst;
            }
            else
            {
              HIBYTE(v46) = v25 - *(_BYTE *)v26;
              p_dst = (std::locale::__imp *)&__dst;
              if (!v23)
                goto LABEL_43;
            }
            memmove(p_dst, v27, v23);
LABEL_43:
            *((_BYTE *)p_dst + v23) = 0;
            if (v46 >= 0)
              locale = (std::locale::__imp *)&__dst;
            else
              locale = __dst.__locale_;
            if (v46 >= 0)
              v31 = HIBYTE(v46);
            else
              v31 = v45;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)locale, v31);
            if (SHIBYTE(v46) < 0)
              operator delete(__dst.__locale_);
            std::ostream::write();
            std::ios_base::getloc((const std::ios_base *)(*((_QWORD *)v3 + 5) + *(_QWORD *)(**((_QWORD **)v3 + 5) - 24)));
            v32 = std::locale::use_facet(&__dst, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
            std::locale::~locale(&__dst);
            std::ostream::put();
            std::ostream::flush();
            goto LABEL_52;
          }
LABEL_31:
          v25 = v41;
          if ((unint64_t)v41 < *((_QWORD *)&v38 + 1))
          {
            *(_QWORD *)&v41 = *((_QWORD *)&v38 + 1);
            v25 = *((_QWORD *)&v38 + 1);
          }
          v26 = (const void **)&v38;
          goto LABEL_35;
        }
        v21 = (_QWORD *)*((_QWORD *)v3 + 5);
        v22 = BYTE8(v41);
        if ((BYTE8(v41) & 0x10) == 0)
          goto LABEL_28;
        goto LABEL_31;
      }
    }
    else
    {
      (*(void (**)(std::locale *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v20 + 40)
                                                                                          + 32))(&__dst, *(_QWORD *)(v20 + 40), 0, 1, 16);
      if (v47 + v18 <= *((_QWORD *)v3 + 16))
        goto LABEL_23;
    }
    CircularFileLogWriter::openNewLog_sync(v3);
    goto LABEL_23;
  }
  (*(void (**)(std::locale *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v17 + 5) + 32))(&__dst, *((_QWORD *)v17 + 5), 0, 1, 16);
  v18 = v47 + v6;
  v19 = *((_QWORD *)v3 + 16);
  if (v47 + v6 <= v19)
    goto LABEL_18;
LABEL_52:
  *(_QWORD *)&v34 = *MEMORY[0x1E0DE4F50];
  v33 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&v34 + *(_QWORD *)(v34 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v35 = v33;
  *((_QWORD *)&v35 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v40) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A858F92C](v42);
}

void sub_1A344578C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1A34457A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1A34457B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1A34457C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (*(char *)(v9 - 217) < 0)
  {
    operator delete(*(void **)(v9 - 240));
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t __copy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIN3ctu10LogMessageEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIN3ctu10LogMessageEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void CircularFileLogWriter::write(CircularFileLogWriter *this, const char *a2, uint64_t a3)
{
  NSObject *v3;
  char *v4;
  _QWORD v5[7];
  _QWORD *v6;
  _QWORD block[6];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN21CircularFileLogWriter5writeEPKcm_block_invoke;
  v5[3] = &__block_descriptor_tmp_7_0;
  v5[4] = this;
  v5[5] = a2;
  v5[6] = a3;
  v6 = v5;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_16_0;
  block[4] = (char *)this + 8;
  block[5] = &v6;
  v4 = (char *)this + 24;
  v3 = *((_QWORD *)this + 3);
  if (*((_QWORD *)v4 + 1))
    dispatch_async_and_wait(v3, block);
  else
    dispatch_sync(v3, block);
}

uint64_t ___ZN21CircularFileLogWriter5writeEPKcm_block_invoke(uint64_t a1)
{
  return CircularFileLogWriter::write_sync(*(_QWORD *)(a1 + 32), *(const char **)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t CircularFileLogWriter::write_sync(uint64_t this, const char *a2, uint64_t a3)
{
  uint64_t v3;
  CircularFileLogWriter *v4;
  _QWORD *v5;
  const char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD v13[16];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = a3;
    if (a3)
    {
      v4 = (CircularFileLogWriter *)this;
      v5 = *(_QWORD **)(this + 40);
      if (v5)
      {
        if (v5[16])
        {
          v6 = a2;
          if (*(_BYTE *)(this + 136))
          {
            while (1)
            {
              v9 = (char *)v5 + *(_QWORD *)(*v5 - 24);
              if ((v9[32] & 5) != 0)
              {
                v10 = *((_QWORD *)v4 + 16);
                if (v3 - 1 <= v10)
                  goto LABEL_20;
              }
              else
              {
                (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v9 + 5)
                                                                                               + 32))(v13, *((_QWORD *)v9 + 5), 0, 1, 16);
                v10 = *((_QWORD *)v4 + 16);
                if (v14 + v3 <= v10)
                  goto LABEL_20;
              }
              v11 = *((_QWORD *)v4 + 5) + *(_QWORD *)(**((_QWORD **)v4 + 5) - 24);
              if ((*(_BYTE *)(v11 + 32) & 5) != 0)
                break;
              (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v11 + 40)
                                                                                             + 32))(v13, *(_QWORD *)(v11 + 40), 0, 1, 16);
              v7 = v14;
              if (v10 != v14)
                goto LABEL_8;
LABEL_9:
              CircularFileLogWriter::openNewLog_sync(v4);
              v5 = (_QWORD *)*((_QWORD *)v4 + 5);
            }
            v7 = -1;
LABEL_8:
            v8 = v10 - v7;
            std::ostream::write();
            v6 += v8;
            v3 -= v8;
            goto LABEL_9;
          }
          v12 = (char *)v5 + *(_QWORD *)(*v5 - 24);
          if ((v12[32] & 5) != 0)
          {
            if ((unint64_t)(a3 - 1) <= *(_QWORD *)(this + 128))
              goto LABEL_20;
          }
          else
          {
            (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v12 + 5)
                                                                                           + 32))(v13, *((_QWORD *)v12 + 5), 0, 1, 16);
            if ((unint64_t)(v14 + v3) <= *((_QWORD *)v4 + 16))
            {
LABEL_20:
              this = *((_QWORD *)v4 + 5);
              if (this)
                return std::ostream::write();
              return this;
            }
          }
          CircularFileLogWriter::openNewLog_sync(v4);
          goto LABEL_20;
        }
      }
    }
  }
  return this;
}

void CircularFileLogWriter::setCapacity(CircularFileLogWriter *this, uint64_t a2)
{
  _QWORD v2[6];

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 0x40000000;
  v2[2] = ___ZN21CircularFileLogWriter11setCapacityEm_block_invoke;
  v2[3] = &__block_descriptor_tmp_8_0;
  v2[4] = this;
  v2[5] = a2;
  ctu::SharedSynchronizable<CircularFileLogWriter>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v2);
}

void ___ZN21CircularFileLogWriter11setCapacityEm_block_invoke(uint64_t a1)
{
  CircularFileLogWriter *v1;
  unint64_t v2;

  v1 = *(CircularFileLogWriter **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)v1 + 15) = v2;
  *((_QWORD *)v1 + 18) = v2 / *((_QWORD *)v1 + 16);
  CircularFileLogWriter::clearOldLogs_sync(v1);
}

void CircularFileLogWriter::clearOldLogs_sync(CircularFileLogWriter *this)
{
  unsigned int v1;
  const std::string::value_type *v3;
  int v4;
  const std::string::value_type *v5;
  std::string::size_type v6;
  std::string *v7;
  std::error_code *v8;
  int v9;
  void *v10;
  const std::__fs::filesystem::path *v11;
  std::string v12;
  std::string v13;

  v1 = *((_DWORD *)this + 39);
  if (*((_QWORD *)this + 18) < (unint64_t)(*((_DWORD *)this + 38) - v1))
  {
    v3 = (char *)this + 72;
    do
    {
      *((_DWORD *)this + 39) = v1 + 1;
      CircularFileLogWriter::generateFileName_sync(this, v1, &v12);
      v4 = *((char *)this + 95);
      if (v4 >= 0)
        v5 = v3;
      else
        v5 = (const std::string::value_type *)*((_QWORD *)this + 9);
      if (v4 >= 0)
        v6 = *((unsigned __int8 *)this + 95);
      else
        v6 = *((_QWORD *)this + 10);
      v7 = std::string::insert(&v12, 0, v5, v6);
      v13 = *v7;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v12.__r_.__value_.__l.__data_);
      v9 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
      v10 = (void *)v13.__r_.__value_.__r.__words[0];
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = (const std::__fs::filesystem::path *)&v13;
      else
        v11 = (const std::__fs::filesystem::path *)v13.__r_.__value_.__r.__words[0];
      if (remove(v11, v8))
        unlink((const char *)v11);
      if (v9 < 0)
        operator delete(v10);
      v1 = *((_DWORD *)this + 39);
    }
    while (*((_QWORD *)this + 18) < (unint64_t)(*((_DWORD *)this + 38) - v1));
  }
}

void sub_1A3445D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  std::locale::__imp *locale;
  unint64_t *v3;
  unint64_t v4;

  locale = this[6].__locale_;
  if (!locale)
    goto LABEL_5;
  v3 = (unint64_t *)((char *)locale + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 - 1, v3));
  if (!v4)
  {
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)locale);
    std::locale::~locale(this);
  }
  else
  {
LABEL_5:
    std::locale::~locale(this);
  }
}

uint64_t CircularFileLogWriter::closeRunningLog_sync(CircularFileLogWriter *this)
{
  uint64_t result;
  _QWORD *v3;

  result = *((_QWORD *)this + 5);
  if (!result)
  {
    *((_QWORD *)this + 5) = 0;
    return result;
  }
  std::ostream::flush();
  v3 = (_QWORD *)*((_QWORD *)this + 5);
  if (std::filebuf::close())
  {
    result = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  std::ios_base::clear((std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 32) | 4);
  result = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1A3445FBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1A858F92C](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A858F92C](a1 + 128);
  return a1;
}

void CircularFileLogWriter::generateFileName_sync(CircularFileLogWriter *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  __int128 v5;
  int v6;
  size_t v7;
  unint64_t v8;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  std::string *v14;
  __int128 v15;
  const std::string::value_type *v16;
  char *v17;
  const std::string::value_type *v18;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string __dst;
  std::string v24;
  char __s[16];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v27 = v5;
  v28 = v5;
  *(_OWORD *)__s = v5;
  v26 = v5;
  sprintf(__s, "%08zu", a2);
  v6 = *((char *)this + 71);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)this + 71);
  else
    v7 = *((_QWORD *)this + 7);
  v8 = v7 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v7 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v8 >= 0x17)
  {
    v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v10 = v8 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v7 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v7 + 1;
    if (!v7)
      goto LABEL_15;
  }
  if (v6 >= 0)
    v12 = (char *)this + 48;
  else
    v12 = (char *)*((_QWORD *)this + 6);
  memmove(p_dst, v12, v7);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v7) = 46;
  v13 = strlen(__s);
  v14 = std::string::append(&__dst, __s, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v18 = (const std::string::value_type *)*((_QWORD *)this + 12);
  v17 = (char *)this + 96;
  v16 = v18;
  v19 = v17[23];
  if (v19 >= 0)
    v20 = v17;
  else
    v20 = v16;
  if (v19 >= 0)
    v21 = v17[23];
  else
    v21 = *((_QWORD *)v17 + 1);
  v22 = std::string::append(&v24, v20, v21);
  *a3 = *v22;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_25:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_25;
}

void sub_1A3446260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void CircularFileLogWriter::~CircularFileLogWriter(void **this)
{
  void *v1;

  CircularFileLogWriter::~CircularFileLogWriter(this);
  operator delete(v1);
}

{
  void *v2;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;

  *this = off_1E4A063F8;
  if (*((char *)this + 183) < 0)
  {
    operator delete(this[20]);
    if ((*((char *)this + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 95) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((*((char *)this + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[12]);
  if ((*((char *)this + 95) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 71) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(this[9]);
  if ((*((char *)this + 71) & 0x80000000) == 0)
  {
LABEL_5:
    v2 = this[5];
    this[5] = 0;
    if (!v2)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_17:
  operator delete(this[6]);
  v2 = this[5];
  this[5] = 0;
  if (v2)
LABEL_6:
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
LABEL_7:
  v3 = this[4];
  if (v3)
    dispatch_release(v3);
  v4 = this[3];
  if (v4)
    dispatch_release(v4);
  v5 = (std::__shared_weak_count *)this[2];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E4A05710, MEMORY[0x1E0DE42D0]);
}

void sub_1A3446394(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E4A05718, MEMORY[0x1E0DE42E0]);
}

void sub_1A3446444(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

_QWORD *std::shared_ptr<CircularFileLogWriter>::shared_ptr[abi:ne180100]<CircularFileLogWriter,std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A06588;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 8) = a2;
    *(_QWORD *)(a2 + 16) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 8) = a2;
    *(_QWORD *)(a2 + 16) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1A3446654(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter*)#1}::operator() const(CircularFileLogWriter*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1A3446674(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<CircularFileLogWriter *,std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter *)#1},std::allocator<CircularFileLogWriter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<CircularFileLogWriter *,std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter *)#1},std::allocator<CircularFileLogWriter>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter*)#1}::operator() const(CircularFileLogWriter*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<CircularFileLogWriter *,std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter *)#1},std::allocator<CircularFileLogWriter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI21CircularFileLogWriterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI21CircularFileLogWriterE15make_shared_ptrIS1_EENSt3__110sha"
                                "red_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI21CircularFileLogWriterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI21CircularFileLogWriterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter*)#1}::operator() const(CircularFileLogWriter*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedSynchronizable<CircularFileLogWriter>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E4A065F0;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIK21CircularFileLogWriterEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIK21CircularFileLogWriterEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(uint64_t a1, uint64_t a2, int a3)
{
  const std::locale *v6;
  uint64_t v7;
  char *v8;

  v6 = (const std::locale *)MEMORY[0x1A858F8F0]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x1E0DE4A90]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E0DE4C08]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (char *)a2;
  else
    v8 = *(char **)a2;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 8);
  if (&v8[v7] != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(a1, v8, &v8[v7]))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_1A3446998(_Unwind_Exception *a1)
{
  std::locale *v1;
  uint64_t v2;

  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_1A34469B4(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unsigned int v12;

  v6 = operator new(8uLL);
  *v6 = &unk_1E4A06630;
  v7 = operator new(0x10uLL);
  v7[1] = v6;
  v8 = operator new(0x20uLL);
  *v8 = &unk_1E4A06688;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  if (!v9)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    v12 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v12 <= 0x3F)
    {
LABEL_6:
      if (!v12)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
      if (v12 != 16)
      {
        if (v12 != 32)
LABEL_19:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
        return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, a2, a3);
    }
  }
  else
  {
LABEL_5:
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    v12 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v12 <= 0x3F)
      goto LABEL_6;
  }
  if (v12 == 64)
    return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
  if (v12 == 128)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v12 != 256)
    goto LABEL_19;
  return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
}

void sub_1A3446B7C(_Unwind_Exception *a1)
{
  void *v1;
  void (__cdecl ***v2)(std::__owns_one_state<char> *__hidden);

  operator delete(v1);
  operator delete(v2);
  (*(void (**)(void *))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1A3446BB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(v2 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A858F680](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1A3446C08(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  char *v7;
  std::basic_regex<char> *v8;
  std::__owns_one_state<char> *v9;
  unsigned int marked_count;
  std::basic_regex<char> *v11;
  std::__node<char> *v12;
  std::__owns_one_state<char> *v13;
  std::__node<char> *first;
  std::__node<char> *v15;
  std::__node<char> *v16;
  std::__node<char> *v17;
  std::__node<char> *v18;
  std::__node<char> *v19;
  std::__node<char> *v20;
  std::__owns_one_state<char> *v21;
  std::basic_regex<char> *v22;
  char *v23;
  std::__owns_one_state<char> *v24;
  unsigned int v25;
  std::basic_regex<char> *v26;
  std::__node<char> *v27;
  std::__owns_one_state<char> *v28;
  std::__node<char> *v29;

  end = a1->__end_;
  v7 = a2;
  while (1)
  {
    v8 = (std::basic_regex<char> *)v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v7, a3);
    if (v8 == (std::basic_regex<char> *)v7)
      break;
LABEL_2:
    if (v7 == (char *)v8)
      goto LABEL_6;
  }
  v9 = a1->__end_;
  marked_count = a1->__marked_count_;
  v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
  if (v8 != v11)
  {
    v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v11, (std::basic_regex<char> *)a3, v9, marked_count + 1, a1->__marked_count_ + 1);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 != (std::basic_regex<char> *)a2)
  {
    if (v8 != (std::basic_regex<char> *)a3)
      goto LABEL_14;
    return a3;
  }
  v12 = (std::__node<char> *)operator new(0x10uLL);
  v13 = a1->__end_;
  first = v13->__first_;
  v12[1].__vftable = (std::__node<char>_vtbl *)first;
  v13->__first_ = v12;
  a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  if (v8 != (std::basic_regex<char> *)a3)
  {
LABEL_14:
    if (LOBYTE(v8->__traits_.__loc_.__locale_) != 124)
      return (char *)v8;
    v21 = a1->__end_;
    v22 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    v23 = (char *)&v8->__traits_.__loc_.__locale_ + 1;
    while (1)
    {
      v8 = (std::basic_regex<char> *)v23;
      v23 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v23, a3);
      if (v8 == (std::basic_regex<char> *)v23)
      {
        v24 = a1->__end_;
        v25 = a1->__marked_count_;
        v26 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
        if (v8 == v26)
        {
LABEL_11:
          if (v8 == v22)
          {
            v27 = (std::__node<char> *)operator new(0x10uLL);
            v28 = a1->__end_;
            v29 = v28->__first_;
            v27[1].__vftable = (std::__node<char>_vtbl *)v29;
            v28->__first_ = v27;
            a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
          }
          v15 = (std::__node<char> *)operator new(0x18uLL);
          v16 = v21->__first_;
          v15[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
          v15[2].__vftable = (std::__node<char>_vtbl *)v16;
          v15->__vftable = (std::__node<char>_vtbl *)&unk_1E4A06C48;
          end->__first_ = v15;
          v21->__first_ = 0;
          v17 = (std::__node<char> *)operator new(0x10uLL);
          v18 = a1->__end_->__first_;
          v17[1].__vftable = (std::__node<char>_vtbl *)v18;
          v21->__first_ = v17;
          a1->__end_->__first_ = 0;
          v19 = (std::__node<char> *)operator new(0x10uLL);
          v20 = v21->__first_;
          v19->__vftable = (std::__node<char>_vtbl *)&unk_1E4A06C90;
          v19[1].__vftable = (std::__node<char>_vtbl *)v20;
          a1->__end_->__first_ = v19;
          a1->__end_ = (std::__owns_one_state<char> *)v21->__first_;
          if (v8 == (std::basic_regex<char> *)a3)
            return a3;
          goto LABEL_14;
        }
        v23 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v26, (std::basic_regex<char> *)a3, v24, v25 + 1, a1->__marked_count_ + 1);
      }
      if (v23 == (char *)v8)
        goto LABEL_11;
    }
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  std::basic_regex<char> *v3;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  std::__owns_one_state<char> *v11;
  int v12;
  char *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3)
    return a2;
  if (*a2 == 94)
  {
    v6 = operator new(0x18uLL);
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *v6 = &unk_1E4A06780;
    v6[1] = v9;
    *((_BYTE *)v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      v10 = v3;
      v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      v12 = *(_DWORD *)(a1 + 28);
      v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, (uint64_t)v10, a3);
      if (v10 != v13)
      {
        v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v10 != (_BYTE *)v3)
          continue;
      }
      if (v10 + 1 != a3 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v14 = operator new(0x18uLL);
      v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_QWORD *)(v16 + 8);
      *v14 = &unk_1E4A067C8;
      v14[1] = v17;
      *((_BYTE *)v14 + 16) = v15;
      *(_QWORD *)(v16 + 8) = v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  uint64_t v9;
  std::basic_regex<char> *v10;
  std::basic_regex<char> *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == a2)
    goto LABEL_12;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2)
LABEL_12:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 == a3)
    return a3;
  while (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    v9 = *(_QWORD *)(a1 + 56);
    v10 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1), a3);
    if ((std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1) == v11)
      goto LABEL_12;
    do
    {
      v8 = v11;
      v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v11, a3);
    }
    while (v8 != v11);
    if (v8 == v10)
      goto LABEL_12;
    v12 = operator new(0x18uLL);
    v13 = *(_QWORD *)(v9 + 8);
    v12[1] = *(_QWORD *)(v6 + 8);
    v12[2] = v13;
    *v12 = &unk_1E4A06C48;
    *(_QWORD *)(v6 + 8) = v12;
    *(_QWORD *)(v9 + 8) = 0;
    v14 = operator new(0x10uLL);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v14[1] = v15;
    *(_QWORD *)(v9 + 8) = v14;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v16 = operator new(0x10uLL);
    v17 = *(_QWORD *)(v9 + 8);
    *v16 = &unk_1E4A06C90;
    v16[1] = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v9 + 8);
    if (v8 == a3)
      return a3;
  }
  return v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = operator new(0x10uLL);
    v10 = *(_QWORD *)(v6 + 8);
    v9[1] = v10;
    *(_QWORD *)(v6 + 8) = v9;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v11 = v8;
    else
      v11 = v8 + 1;
    if (v11 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3)
      v11 = v8;
    else
      v11 = v8 + 1;
    if (v11 == a3)
      return a3;
  }
  v12 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = (char *)memchr(v11, 10, a3 - v11);
    if (v21)
      v22 = v21;
    else
      v22 = a3;
    if (v22 == v11)
    {
      v13 = operator new(0x10uLL);
      v14 = *(_QWORD *)(v12 + 8);
      v13[1] = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v12 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_1E4A06C48;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v12 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v12 + 8);
    *v19 = &unk_1E4A06C90;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    v12 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(a1 + 56) = v12;
    if (v22 == a3)
      v11 = v22;
    else
      v11 = v22 + 1;
  }
  while (v11 != a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  _QWORD *v9;
  uint64_t v10;
  std::basic_regex<char> *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::basic_regex<char> *v21;
  std::basic_regex<char> *v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = operator new(0x10uLL);
    v10 = *(_QWORD *)(v6 + 8);
    v9[1] = v10;
    *(_QWORD *)(v6 + 8) = v9;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v11 = v8;
    else
      v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v11 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3)
      v11 = v8;
    else
      v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v11 == a3)
      return a3;
  }
  v12 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = (std::basic_regex<char> *)memchr(v11, 10, (char *)a3 - (char *)v11);
    if (v21)
      v22 = v21;
    else
      v22 = a3;
    if (v22 == v11)
    {
      v13 = operator new(0x10uLL);
      v14 = *(_QWORD *)(v12 + 8);
      v13[1] = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v12 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_1E4A06C48;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v12 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v12 + 8);
    *v19 = &unk_1E4A06C90;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    v12 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(a1 + 56) = v12;
    if (v22 == a3)
      v11 = v22;
    else
      v11 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
  }
  while (v11 != a3);
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A858F680](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1A3447510(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001A357EBA0)
    return a1 + 24;
  if (((v3 & 0x80000001A357EBA0 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001A357EBA0))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001A357EBA0 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  operator delete(this);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  int v6;
  int v7;
  __int128 v8;
  char *v9;
  unsigned int v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unsigned int marked_count;
  std::basic_regex<char> v23;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        v17 = a2[1];
        if (v17 == 66)
        {
          v18 = (char *)operator new(0x30uLL);
          v20 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v18 = &unk_1E4A06810;
          *((_QWORD *)v18 + 1) = v20;
          std::locale::locale((std::locale *)v18 + 2, (const std::locale *)a1);
          *(_OWORD *)(v18 + 24) = *(_OWORD *)(a1 + 8);
          v18[40] = 1;
        }
        else
        {
          if (v17 != 98)
            return v3;
          v18 = (char *)operator new(0x30uLL);
          v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v18 = &unk_1E4A06810;
          *((_QWORD *)v18 + 1) = v19;
          std::locale::locale((std::locale *)v18 + 2, (const std::locale *)a1);
          *(_OWORD *)(v18 + 24) = *(_OWORD *)(a1 + 8);
          v18[40] = 0;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v18;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        return v3 + 2;
      }
      return v3;
    }
    if (v6 != 94)
      return v3;
    v11 = operator new(0x18uLL);
    v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(v13 + 8);
LABEL_17:
    *v11 = v15 + 16;
    v11[1] = v14;
    *((_BYTE *)v11 + 16) = v12;
    *(_QWORD *)(v13 + 8) = v11;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return ++v3;
  }
  if (v6 == 36)
  {
    v11 = operator new(0x18uLL);
    v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(v13 + 8);
    goto LABEL_17;
  }
  if (v6 != 40 || a2 + 1 == a3 || a2[1] != 63 || a2 + 2 == a3)
    return v3;
  v7 = a2[2];
  if (v7 == 33)
  {
    *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v23.__loop_count_ = v21;
    *(_OWORD *)&v23.__start_.__cntrl_ = v21;
    *(_OWORD *)&v23.__traits_.__loc_.__locale_ = v21;
    *(_OWORD *)&v23.__traits_.__col_ = v21;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v23);
    v23.__flags_ = *(_DWORD *)(a1 + 24);
    v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v23, v3 + 3, a3);
    marked_count = v23.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v23, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v9 == a3 || *v9 != 41)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    goto LABEL_27;
  }
  if (v7 != 61)
    return v3;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v23.__loop_count_ = v8;
  *(_OWORD *)&v23.__start_.__cntrl_ = v8;
  *(_OWORD *)&v23.__traits_.__loc_.__locale_ = v8;
  *(_OWORD *)&v23.__traits_.__col_ = v8;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v23);
  v23.__flags_ = *(_DWORD *)(a1 + 24);
  v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v23, v3 + 3, a3);
  v10 = v23.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v23, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v10;
  if (v9 == a3 || *v9 != 41)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_27:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v23.__traits_.__loc_);
  return v9 + 1;
}

void sub_1A34479B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_1A34479CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_1A34479E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_1A34479F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  std::basic_regex<char> *v6;
  std::basic_regex<char> *result;
  std::__node<char> *v8;
  std::__owns_one_state<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v11;
  unsigned int marked_count;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  std::basic_regex<char> *v15;
  std::basic_regex<char> *v16;
  std::__node<char> *v17;
  std::__owns_one_state<char> *v18;
  std::__node<char> *v19;

  v3 = a2;
  if (a2 == a3)
    return v3;
  switch(LOBYTE(a2->__traits_.__loc_.__locale_))
  {
    case '(':
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3)
        goto LABEL_26;
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
        && BYTE1(a2->__traits_.__loc_.__locale_) == 63
        && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
      {
        ++this->__open_count_;
        v6 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, a3);
        if (v6 != a3 && LOBYTE(v6->__traits_.__loc_.__locale_) == 41)
        {
          --this->__open_count_;
          return (std::basic_regex<char> *)((char *)&v6->__traits_.__loc_.__locale_ + 1);
        }
LABEL_26:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      if ((this->__flags_ & 2) != 0)
      {
        marked_count = this->__marked_count_;
      }
      else
      {
        v11 = (std::__node<char> *)operator new(0x18uLL);
        marked_count = this->__marked_count_ + 1;
        this->__marked_count_ = marked_count;
        end = this->__end_;
        first = end->__first_;
        v11->__vftable = (std::__node<char>_vtbl *)&unk_1E4A06AE0;
        v11[1].__vftable = (std::__node<char>_vtbl *)first;
        LODWORD(v11[2].__vftable) = marked_count;
        end->__first_ = v11;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      ++this->__open_count_;
      v15 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&v3->__traits_.__loc_.__locale_ + 1, a3);
      if (v15 == a3)
        goto LABEL_26;
      v16 = v15;
      if (LOBYTE(v15->__traits_.__loc_.__locale_) != 41)
        goto LABEL_26;
      if ((this->__flags_ & 2) == 0)
      {
        v17 = (std::__node<char> *)operator new(0x18uLL);
        v18 = this->__end_;
        v19 = v18->__first_;
        v17->__vftable = (std::__node<char>_vtbl *)&unk_1E4A06B28;
        v17[1].__vftable = (std::__node<char>_vtbl *)v19;
        LODWORD(v17[2].__vftable) = marked_count;
        v18->__first_ = v17;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      --this->__open_count_;
      result = (std::basic_regex<char> *)((char *)&v16->__traits_.__loc_.__locale_ + 1);
      break;
    case ')':
    case ',':
    case '-':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '@':
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
    case '*':
    case '+':
    case '?':
      goto LABEL_25;
    case '.':
      v8 = (std::__node<char> *)operator new(0x10uLL);
      v9 = this->__end_;
      v10 = v9->__first_;
      v8->__vftable = (std::__node<char>_vtbl *)&unk_1E4A068A0;
      v8[1].__vftable = (std::__node<char>_vtbl *)v10;
      v9->__first_ = v8;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      return (std::basic_regex<char> *)((char *)v3 + 1);
    case '[':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, (char *)a2, (char *)a3);
    case '\\':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
    default:
      if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123)
LABEL_25:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  int v6;
  int locale_low;
  std::basic_regex<char> *v8;
  std::basic_regex<char> *v9;
  char *v10;
  size_t v11;
  char *v13;
  int v14;
  int v15;
  char *v16;
  int v17;
  int v18;
  std::basic_regex<char> *v19;
  unsigned __int8 *v20;
  BOOL v21;
  std::basic_regex<char> *v22;
  BOOL v23;
  char *v24;
  size_t v25;
  std::basic_regex<char> *v26;
  int v27;
  int v28;
  std::basic_regex<char> *v29;
  int v30;
  std::basic_regex<char> *v31;
  _BYTE *v32;

  if (this == a3)
    return this;
  v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6)
        v21 = 1;
      else
        v21 = v9 == a3;
      if (!v21 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v11 = 0;
        goto LABEL_36;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v25 = 0;
      goto LABEL_45;
    }
    v8 = this;
    if (locale_low == 43)
    {
      v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v11 = 1;
LABEL_36:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v10;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v25 = 1;
      goto LABEL_45;
    }
    return v8;
  }
  if (locale_low == 63)
  {
    v22 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6)
      v23 = 1;
    else
      v23 = v22 == a3;
    if (v23 || LOBYTE(v22->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v22;
    }
    else
    {
      v24 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v24;
    }
  }
  else
  {
    v8 = this;
    if (locale_low != 123)
      return v8;
    v13 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_72;
    v14 = *v13;
    if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
      goto LABEL_72;
    v15 = v14 - 48;
    v16 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_21:
      v16 = (char *)a3;
    }
    else
    {
      while (1)
      {
        v17 = *v16;
        if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38)
          break;
        if (v15 >= 214748364)
          goto LABEL_72;
        v15 = v17 + 10 * v15 - 48;
        if (++v16 == (char *)a3)
          goto LABEL_21;
      }
    }
    if (v16 == v13)
      goto LABEL_72;
    if (v16 == (char *)a3)
      goto LABEL_73;
    v18 = *v16;
    if (v18 != 44)
    {
      if (v18 == 125)
      {
        v19 = (std::basic_regex<char> *)(v16 + 1);
        if (v6 || v19 == a3 || LOBYTE(v19->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 1);
          return v19;
        }
        else
        {
          v20 = (unsigned __int8 *)(v16 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v20;
        }
      }
LABEL_72:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    v26 = (std::basic_regex<char> *)(v16 + 1);
    if (v16 + 1 == (char *)a3)
      goto LABEL_72;
    v27 = LOBYTE(v26->__traits_.__loc_.__locale_);
    if (v27 == 125)
    {
      v9 = (std::basic_regex<char> *)(v16 + 2);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        v11 = v15;
        v10 = v16 + 3;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        goto LABEL_36;
      }
      v25 = v15;
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
LABEL_45:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v25, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v9;
    }
    if ((v27 & 0xF8) != 0x30 && (v27 & 0xFE) != 0x38)
      goto LABEL_73;
    v28 = v27 - 48;
    v29 = (std::basic_regex<char> *)(v16 + 2);
    if (v29 == a3)
    {
LABEL_61:
      v29 = a3;
    }
    else
    {
      while (1)
      {
        v30 = LOBYTE(v29->__traits_.__loc_.__locale_);
        if ((v30 & 0xF8) != 0x30 && (v30 & 0xFE) != 0x38)
          break;
        if (v28 >= 214748364)
          goto LABEL_72;
        v28 = v30 + 10 * v28 - 48;
        v29 = (std::basic_regex<char> *)((char *)v29 + 1);
        if (v29 == a3)
          goto LABEL_61;
      }
    }
    if (v29 == v26 || v29 == a3 || LOBYTE(v29->__traits_.__loc_.__locale_) != 125)
LABEL_73:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v28 < v15)
      goto LABEL_72;
    v31 = (std::basic_regex<char> *)((char *)&v29->__traits_.__loc_.__locale_ + 1);
    if (v6 || v31 == a3 || LOBYTE(v31->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 1);
      return v31;
    }
    else
    {
      v32 = (char *)&v29->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v32;
    }
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x1A858F8F0]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v2, MEMORY[0x1E0DE4A90]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E0DE4C08]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_1A34480C4(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  char *v8;
  std::__node<char> *first;
  std::__shared_weak_count *cntrl;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v8 = (char *)operator new(0x58uLL);
  first = this->__end_->__first_;
  *(_QWORD *)v8 = &unk_1E4A06858;
  *((_QWORD *)v8 + 1) = first;
  std::locale::locale((std::locale *)v8 + 2, &a2->__traits_.__loc_);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&a2->__traits_.__ct_;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&a2->__flags_;
  cntrl = a2->__start_.__cntrl_;
  *((_QWORD *)v8 + 7) = a2->__start_.__ptr_;
  *((_QWORD *)v8 + 8) = cntrl;
  if (cntrl)
  {
    p_shared_owners = (unint64_t *)&cntrl->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  *((_QWORD *)v8 + 9) = a2->__end_;
  *((_DWORD *)v8 + 20) = a4;
  v8[84] = a3;
  this->__end_->__first_ = (std::__node<char> *)v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A858F680](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1A34481C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2;

  if (!*(_BYTE *)(a2 + 92))
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
    return result;
  }
  if (*(_QWORD *)(a2 + 16) == *(_QWORD *)(a2 + 8) && (*(_BYTE *)(a2 + 88) & 1) == 0)
    goto LABEL_11;
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(_QWORD *)(a2 + 80) = 0;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E4A06810;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E4A06810;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_19;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 != v3)
  {
    if (v4 == v2)
    {
      v5 = *(_DWORD *)(a2 + 88);
      if ((v5 & 0x80) == 0)
      {
        if ((v5 & 4) == 0)
        {
          v6 = *v2;
          if (v6 == 95)
            goto LABEL_17;
          goto LABEL_15;
        }
        goto LABEL_19;
      }
    }
    v7 = *(v4 - 1);
    v8 = *v4;
    if (v7 == 95
      || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0)
    {
      v9 = 1;
      if ((_DWORD)v8 == 95)
        goto LABEL_24;
    }
    else
    {
      v9 = 0;
      if ((_DWORD)v8 == 95)
        goto LABEL_24;
    }
    if ((v8 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) == 0)
    {
      if (*(_BYTE *)(result + 40) == (v9 != 0))
        goto LABEL_20;
      goto LABEL_27;
    }
LABEL_24:
    if (*(_BYTE *)(result + 40) != (v9 != 1))
      goto LABEL_27;
    goto LABEL_20;
  }
  if ((*(_BYTE *)(a2 + 88) & 8) == 0)
  {
    v6 = *(v3 - 1);
    if (v6 == 95)
      goto LABEL_17;
LABEL_15:
    if ((v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
    {
LABEL_17:
      if (*(_BYTE *)(result + 40) != 1)
        goto LABEL_27;
LABEL_20:
      *(_DWORD *)a2 = -993;
      *(_QWORD *)(a2 + 80) = 0;
      return result;
    }
  }
LABEL_19:
  if (!*(_BYTE *)(result + 40))
    goto LABEL_20;
LABEL_27:
  v10 = *(_QWORD *)(result + 8);
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  std::locale *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void (__cdecl **v6)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E4A06858;
  v2 = (std::locale *)(a1 + 2);
  v3 = (std::__shared_weak_count *)a1[8];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::locale::~locale(v2);
  v6 = a1[1];
  if (v6)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v6 + 1))(v6);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(std::locale *a1)
{
  std::locale *v2;
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::locale::__imp *v6;

  a1->__locale_ = (std::locale::__imp *)&unk_1E4A06858;
  v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale)
  {
    p_shared_owners = (unint64_t *)&locale->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  std::locale::~locale(v2);
  v6 = a1[1].__locale_;
  if (v6)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v6 + 8))(v6);
  operator delete(a1);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::vector<std::csub_match>::size_type v5;
  uint64_t v6;
  const char *v7;
  BOOL v8;
  char v9;
  std::sub_match<const char *> *begin;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  std::sub_match<const char *> *v16;
  uint64_t v17;
  std::vector<std::csub_match> __p;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v20 = 0xAAAAAAAAAAAAAAAALL;
  v22 = 0xAAAAAAAAAAAAAA00;
  v24 = v4;
  v21 = 0;
  v23 = 0uLL;
  LOBYTE(v24) = 0;
  BYTE8(v24) = 0;
  v25 = 0;
  memset(&__p, 0, sizeof(__p));
  v5 = (*(_DWORD *)(a1 + 44) + 1);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)&v19 = *(_QWORD *)(a2 + 24);
  *((_QWORD *)&v19 + 1) = v19;
  LOBYTE(v20) = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v5, (std::vector<std::csub_match>::const_reference)&v19);
  *((_QWORD *)&v20 + 1) = v6;
  v21 = v6;
  LOBYTE(v22) = 0;
  v23 = v19;
  LOBYTE(v24) = v20;
  v25 = v6;
  BYTE8(v24) = 1;
  v7 = *(const char **)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v8 = v7 == *(const char **)(a2 + 8);
  else
    v8 = 0;
  v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v7, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  begin = __p.__begin_;
  v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!begin)
      return;
    goto LABEL_14;
  }
  v12 = 0;
  v13 = *(_DWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = 1;
  do
  {
    v16 = &begin[v15];
    v17 = v14 + 24 * (v13 + v12);
    *(std::pair<const char *, const char *> *)v17 = v16->std::pair<const char *, const char *>;
    *(_BYTE *)(v17 + 16) = v16->matched;
    v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_1A344885C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

_QWORD *std::__state<char>::~__state(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A858F680](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1A3448908(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A858F680](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1A3448954(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void **std::vector<std::__state<char>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 5);
        if (v5)
        {
          *((_QWORD *)v3 - 4) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 8);
        if (v6)
        {
          *((_QWORD *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  void *v22;
  void *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[96 * v3];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 85) = *(_QWORD *)(a2 + 85);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = v9 + 96;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v9[v16];
      v18 = &v15[v16];
      v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((_QWORD *)v17 - 7) = 0;
      *((_QWORD *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((_QWORD *)v17 - 6) = *(_QWORD *)&v15[v16 - 48];
      *((_QWORD *)v18 - 8) = 0;
      *((_QWORD *)v18 - 7) = 0;
      *((_QWORD *)v18 - 6) = 0;
      *((_QWORD *)v17 - 4) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((_QWORD *)v17 - 3) = *(_QWORD *)&v15[v16 - 24];
      *((_QWORD *)v18 - 5) = 0;
      *((_QWORD *)v18 - 4) = 0;
      *((_QWORD *)v18 - 3) = 0;
      v20 = *(_QWORD *)&v15[v16 - 16];
      *(_QWORD *)(v17 - 11) = *(_QWORD *)&v15[v16 - 11];
      *((_QWORD *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v22 = (void *)*((_QWORD *)v21 - 5);
      if (v22)
      {
        *((_QWORD *)v21 - 4) = v22;
        operator delete(v22);
      }
      v23 = (void *)*((_QWORD *)v21 - 8);
      if (v23)
      {
        *((_QWORD *)v21 - 7) = v23;
        operator delete(v23);
      }
      v21 -= 96;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  std::sub_match<const char *> *value;
  std::vector<std::csub_match>::pointer end;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::sub_match<const char *> *v13;
  std::vector<std::csub_match>::size_type v14;
  std::pair<const char *, const char *> v15;
  std::sub_match<const char *> *v16;
  std::vector<std::csub_match>::size_type v17;
  std::sub_match<const char *> *v18;
  std::pair<const char *, const char *> *v19;
  std::pair<const char *, const char *> v20;
  std::vector<std::csub_match>::pointer begin;
  std::pair<const char *, const char *> v22;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      v13 = &end[__n];
      v14 = 24 * __n;
      do
      {
        v15 = __x->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__x->matched;
        end->std::pair<const char *, const char *> = v15;
        ++end;
        v14 -= 24;
      }
      while (v14);
      end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(24 * v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = (std::sub_match<const char *> *)&v12[24 * v8];
    v17 = 24 * __n;
    v18 = &v16[__n];
    v19 = v16;
    do
    {
      v20 = __x->std::pair<const char *, const char *>;
      v19[1].first = *(const char **)&__x->matched;
      *v19 = v20;
      v19 = (std::pair<const char *, const char *> *)((char *)v19 + 24);
      v17 -= 24;
    }
    while (v17);
    begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        v22 = end[-1].std::pair<const char *, const char *>;
        *(_QWORD *)&v16[-1].matched = *(_QWORD *)&end[-1].matched;
        v16[-1].std::pair<const char *, const char *> = v22;
        --v16;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v16;
    this->__end_ = v18;
    this->__end_cap_.__value_ = (std::sub_match<const char *> *)&v12[24 * v11];
    if (end)
      operator delete(end);
  }
}

uint64_t std::__state<char>::__state(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  size_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  v6 = (_BYTE *)*((_QWORD *)a2 + 5);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    v9 = (char *)operator new(v8);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = &v9[8 * (v8 >> 3)];
    v10 = 24 * ((v8 - 24) / 0x18uLL) + 24;
    memcpy(v9, v7, v10);
    *(_QWORD *)(a1 + 40) = &v9[v10];
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v12 = (_BYTE *)*((_QWORD *)a2 + 7);
  v11 = (_BYTE *)*((_QWORD *)a2 + 8);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v11 - v12);
    *(_QWORD *)(a1 + 56) = v14;
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = &v14[16 * (v13 >> 4)];
    memcpy(v14, v12, v13 & 0xFFFFFFFFFFFFFFF0);
    *(_QWORD *)(a1 + 64) = &v14[v13 & 0xFFFFFFFFFFFFFFF0];
  }
  v15 = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 85) = *(_QWORD *)((char *)a2 + 85);
  *(_QWORD *)(a1 + 80) = v15;
  return a1;
}

void sub_1A3448E9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  int v8;
  unsigned int v9;
  int v11;
  unsigned __int8 *v12;

  if (a2 == a3)
    return a2;
  v4 = a2;
  if (*a2 == 92)
  {
    v6 = a2 + 1;
    if (a2 + 1 == a3)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    v8 = *v6;
    v9 = v8 - 48;
    if (v8 == 48)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
      return a2 + 2;
    }
    if ((v8 - 49) <= 8)
    {
      v4 = a2 + 2;
      if (a2 + 2 == a3)
      {
        v4 = a3;
      }
      else
      {
        while (1)
        {
          v11 = *v4;
          if ((v11 - 48) > 9)
            break;
          if (v9 >= 0x19999999)
            goto LABEL_24;
          ++v4;
          v9 = v11 + 10 * v9 - 48;
          if (v4 == a3)
          {
            v4 = a3;
            break;
          }
        }
        if (!v9)
LABEL_24:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
      }
      if (v9 > this->__marked_count_)
        goto LABEL_24;
      std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v9);
      if (v4 != v6)
        return v4;
    }
    v4 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>((uint64_t)this, a2 + 1, a3);
    if (v6 == v4)
    {
      v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(this, a2 + 1, a3, 0);
      if (v6 == v12)
        return a2;
      else
        return v12;
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  int v5;
  char v6;
  char *v7;
  void *v8;
  char *v9;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1];
    v6 = v5 == 94;
    v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    *(_QWORD *)(a1 + 56) = v8;
    if (v7 == a3)
      goto LABEL_20;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if (v7 == a3)
      goto LABEL_20;
    do
    {
      v9 = v7;
      v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(a1, v7, a3, (uint64_t)v8);
    }
    while (v9 != v7);
    if (v9 == a3)
      goto LABEL_20;
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93)
LABEL_20:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v9 + 1;
  }
  return a2;
}

void sub_1A3449170(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A858F680](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1A34491BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *result;

  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A858F680](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1A3449300(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  _DWORD *v5;
  _DWORD *v6;
  int v7;

  v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = v5[40] | 0x400;
        goto LABEL_12;
      case 's':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = v5[40] | 0x4000;
LABEL_12:
        v5[40] = v7;
        goto LABEL_13;
      case 'w':
        v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v6;
        *(_QWORD *)(a1 + 56) = v6;
        v6[40] |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_1A34494E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A34494F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A344950C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A3449520(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A3449534(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A3449548(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  std::basic_regex<char>::value_type v6;
  unsigned __int8 *result;
  unsigned int v8;
  std::basic_regex<char>::value_type v10;
  int v11;
  int v12;
  unsigned __int8 v13;
  char v14;
  unsigned __int8 v15;
  char v16;
  std::basic_regex<char>::value_type v17;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  v6 = v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3 || (char)v4[1] < 65)
        goto LABEL_85;
      v8 = v4[1];
      if (v8 >= 0x5B && (v8 - 97) > 0x19u)
        goto LABEL_85;
      v10 = v8 & 0x1F;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v10;
        *((_BYTE *)a4 + 1) = 0;
        return v4 + 2;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v10);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        v11 = v4[1];
        if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            v12 = *v4;
            if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38 || (v12 | 0x20u) - 97 < 6)
              goto LABEL_42;
          }
        }
      }
      goto LABEL_85;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        v6 = 11;
LABEL_68:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_42:
      if (v4 + 1 == a3)
        goto LABEL_85;
      v13 = v4[1];
      v14 = -48;
      if ((v13 & 0xF8) == 0x30 || (v13 & 0xFE) == 0x38)
        goto LABEL_47;
      v13 |= 0x20u;
      if ((v13 - 97) >= 6u)
        goto LABEL_85;
      v14 = -87;
LABEL_47:
      if (v4 + 2 == a3)
        goto LABEL_85;
      v15 = v4[2];
      v16 = -48;
      if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38)
      {
        v15 |= 0x20u;
        if ((v15 - 97) >= 6u)
LABEL_85:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        v16 = -87;
      }
      v17 = v15 + 16 * (v13 + v14) + v16;
      if (!a4)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v17);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v17;
      *((_BYTE *)a4 + 1) = 0;
      result = v4 + 3;
      break;
    default:
      if ((char)v5 == 95 || ((char)v5 & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[v5] & 0x500) != 0)
        goto LABEL_85;
      if (!a4)
        goto LABEL_68;
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v5;
      *((_BYTE *)a4 + 1) = 0;
      return v4 + 1;
  }
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  std::__node<char> *v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  char *v8;
  std::__node<char> *first;
  std::__node<char> *v10;

  v2 = __c;
  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (char *)operator new(0x30uLL);
    first = this->__end_->__first_;
    *(_QWORD *)v8 = &unk_1E4A068E8;
    *((_QWORD *)v8 + 1) = first;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = ((uint64_t (*)(const std::ctype<char> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v2);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (char *)operator new(0x30uLL);
    v10 = this->__end_->__first_;
    *(_QWORD *)v8 = &unk_1E4A06930;
    *((_QWORD *)v8 + 1) = v10;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = v2;
    goto LABEL_6;
  }
  v5 = (std::__node<char> *)operator new(0x18uLL);
  end = this->__end_;
  v7 = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_1E4A06978;
  v5[1].__vftable = (std::__node<char>_vtbl *)v7;
  LOBYTE(v5[2].__vftable) = v2;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_1A3449B30(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  std::locale *v2;
  void (__cdecl **v4)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale(v2);
  v4 = v1[1];
  if (v4)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A858F680](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1A3449BA8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  std::__node<char> *v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  std::locale *v8;
  std::locale *v9;
  std::__node<char> *first;
  char *v11;

  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (std::locale *)operator new(0x30uLL);
    v9 = v8;
    first = this->__end_->__first_;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)(v11 + 16);
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (std::locale *)operator new(0x30uLL);
    v9 = v8;
    first = this->__end_->__first_;
    goto LABEL_6;
  }
  v5 = (std::__node<char> *)operator new(0x18uLL);
  end = this->__end_;
  v7 = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_1E4A06A50;
  v5[1].__vftable = (std::__node<char>_vtbl *)v7;
  LODWORD(v5[2].__vftable) = __i;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E4A068E8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E4A068E8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(v4 + 8);
  }
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E4A06930;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E4A06930;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E4A069C0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E4A069C0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (!*(_BYTE *)(v3 + 16)
    || (v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3, v5 = *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24) - v5 < v4))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  v6 = result;
  if (v4 >= 1)
  {
    v7 = 0;
    while (1)
    {
      v8 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), *(char *)(*(_QWORD *)v3 + v7));
      result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v7));
      if (v8 != (_DWORD)result)
        goto LABEL_3;
      if (v4 == ++v7)
      {
        v5 = *(_QWORD *)(a2 + 16);
        break;
      }
    }
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v5 + v4;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(v6 + 8);
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E4A06A08;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E4A06A08;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (!*(_BYTE *)(v3 + 24 * v2 + 16)
    || (v4 = (unsigned __int8 **)(v3 + 24 * v2),
        v5 = *v4,
        v6 = v4[1] - *v4,
        v7 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v7 < v6))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  if (v6 >= 1)
  {
    v8 = v6;
    v9 = *(unsigned __int8 **)(a2 + 16);
    do
    {
      v11 = *v5++;
      v10 = v11;
      v12 = *v9++;
      if (v10 != v12)
        goto LABEL_3;
    }
    while (--v8);
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v7 + v6;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    *(_QWORD *)(a2 + 80) = *((_QWORD *)v6 + 1);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  char *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  char *v58;
  char v59;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = (_QWORD *)(a1 + 40);
    v5 = *(_BYTE **)(a1 + 48);
    v16 = *(_QWORD *)(a1 + 56);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16)
        goto LABEL_24;
      v17 = (_BYTE *)*v6;
      v18 = (unint64_t)&v5[-*v6];
      v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        v20 = v16 - (_QWORD)v17;
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v12 = operator new(v21);
          v13 = &v12[v18];
          v14 = &v12[v21];
          v12[v18] = v2;
          v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17)
            goto LABEL_49;
        }
        else
        {
          v12 = 0;
          v13 = &v5[-*v6];
          v14 = 0;
          *(_BYTE *)v18 = a2;
          v15 = v18 + 1;
          if (v5 == v17)
            goto LABEL_49;
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            v38 = (__int128 *)(v5 - 16);
            v39 = &v12[v5 - 16 - v17];
            v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28)
              goto LABEL_86;
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          v42 = &v5[-v28 - 8];
          v43 = &v12[v42 - v17];
          v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v45 = *(_QWORD *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_86;
        }
LABEL_80:
        v56 = v13 - 1;
        do
        {
          v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16)
      goto LABEL_24;
    v23 = (_BYTE *)*v6;
    v24 = (unint64_t)&v5[-*v6];
    v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0)
      goto LABEL_89;
    v26 = v16 - (_QWORD)v23;
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v12 = operator new(v27);
      v13 = &v12[v24];
      v14 = &v12[v27];
      v12[v24] = v2;
      v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(_QWORD *)(a1 + 40) = v13;
        *(_QWORD *)(a1 + 48) = v15;
        *(_QWORD *)(a1 + 56) = v14;
        if (!v5)
          goto LABEL_88;
        goto LABEL_87;
      }
    }
    else
    {
      v12 = 0;
      v13 = &v5[-*v6];
      v14 = 0;
      *(_BYTE *)v24 = a2;
      v15 = v24 + 1;
      if (v5 == v23)
        goto LABEL_49;
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        v46 = (__int128 *)(v5 - 16);
        v47 = &v12[v5 - 16 - v23];
        v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29)
          goto LABEL_86;
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      v50 = &v5[-v29 - 8];
      v51 = &v12[v50 - v23];
      v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v53 = *(_QWORD *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_86;
    }
LABEL_84:
    v58 = v13 - 1;
    do
    {
      v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *v5 = v2;
    v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  v6 = (_QWORD *)(a1 + 40);
  v7 = *(_BYTE **)(a1 + 40);
  v8 = v5 - v7;
  v9 = v5 - v7 + 1;
  if (v9 < 0)
    goto LABEL_89;
  v10 = v4 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v2;
    v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7)
      goto LABEL_49;
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v5 - v7);
    v14 = 0;
    *(_BYTE *)v8 = v2;
    v15 = v8 + 1;
    if (v5 == v7)
      goto LABEL_49;
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
    goto LABEL_76;
  if (v8 < 0x20)
  {
    v22 = 0;
    goto LABEL_55;
  }
  v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  v30 = (__int128 *)(v5 - 16);
  v31 = &v12[v5 - 16 - v7];
  v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    v34 = &v5[-v22 - 8];
    v35 = &v12[v34 - v7];
    v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v37 = *(_QWORD *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_86;
LABEL_76:
    v54 = v13 - 1;
    do
    {
      v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  v5 = (_BYTE *)*v6;
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v15;
  *(_QWORD *)(a1 + 56) = v14;
  if (v5)
LABEL_87:
    operator delete(v5);
LABEL_88:
  *(_QWORD *)(a1 + 48) = v15;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  __int128 v12;
  std::string::size_type size;
  std::string *v14;
  BOOL v15;
  std::locale v17;
  std::string v18;

  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v17, v11);
  std::locale::name(&v18, &v17);
  size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v18.__r_.__value_.__l.__size_;
  if (size == 1)
  {
    v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v18;
    v15 = v14->__r_.__value_.__s.__data_[0] != 67;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_9;
  }
  else
  {
    v15 = 1;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
LABEL_9:
      operator delete(v18.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v17);
  *(_BYTE *)(a1 + 171) = v15;
  return a1;
}

void sub_1A344A94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  uint64_t v9;
  std::locale *v10;
  void **v11;
  void **v12;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  std::locale::~locale(&a9);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v9 + 136));
  v14 = *(void **)(v9 + 112);
  if (v14)
  {
    *(_QWORD *)(v9 + 120) = v14;
    operator delete(v14);
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v11);
    v15 = *(void **)(v9 + 64);
    if (!v15)
    {
LABEL_3:
      v16 = *v12;
      if (!*v12)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v11);
    v15 = *(void **)(v9 + 64);
    if (!v15)
      goto LABEL_3;
  }
  *(_QWORD *)(v9 + 72) = v15;
  operator delete(v15);
  v16 = *v12;
  if (!*v12)
  {
LABEL_5:
    std::locale::~locale(v10);
    v17 = *(_QWORD *)(v9 + 8);
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    _Unwind_Resume(a1);
  }
LABEL_4:
  *(_QWORD *)(v9 + 48) = v16;
  operator delete(v16);
  goto LABEL_5;
}

void **std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0)
LABEL_9:
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale::__imp *v6;
  std::locale::__imp *v7;
  std::locale::__imp *v8;
  std::locale::__imp *v9;
  std::locale::__imp *v10;
  std::locale::__imp *v11;

  locale = a1[17].__locale_;
  if (locale)
  {
    v3 = a1[18].__locale_;
    v4 = a1[17].__locale_;
    if (v3 != locale)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*((void **)v3 - 3));
        v3 = (std::locale::__imp *)((char *)v3 - 24);
      }
      while (v3 != locale);
      v4 = a1[17].__locale_;
    }
    a1[18].__locale_ = locale;
    operator delete(v4);
  }
  v5 = a1[14].__locale_;
  if (v5)
  {
    a1[15].__locale_ = v5;
    operator delete(v5);
  }
  v6 = a1[11].__locale_;
  if (v6)
  {
    v7 = a1[12].__locale_;
    v8 = a1[11].__locale_;
    if (v7 == v6)
    {
LABEL_21:
      a1[12].__locale_ = v6;
      operator delete(v8);
      goto LABEL_22;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*((void **)v7 - 3));
        if (*((char *)v7 - 25) < 0)
LABEL_19:
          operator delete(*((void **)v7 - 6));
      }
      else if (*((char *)v7 - 25) < 0)
      {
        goto LABEL_19;
      }
      v7 = (std::locale::__imp *)((char *)v7 - 48);
      if (v7 == v6)
      {
        v8 = a1[11].__locale_;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v9 = a1[8].__locale_;
  if (v9)
  {
    a1[9].__locale_ = v9;
    operator delete(v9);
  }
  v10 = a1[5].__locale_;
  if (v10)
  {
    a1[6].__locale_ = v10;
    operator delete(v10);
  }
  std::locale::~locale(a1 + 2);
  v11 = a1[1].__locale_;
  if (v11)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

void std::regex_traits<char>::__lookup_collatename<char *>(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BYTE *v18;
  size_t v19;
  std::string v20;
  _BYTE __dst[24];

  v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    __dst[23] = (_BYTE)a3 - (_BYTE)__src;
    v9 = __dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(v9, __src, v5);
    v9 += v5;
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  v9 = operator new(v10 + 1);
  *(_QWORD *)&__dst[8] = v5;
  *(_QWORD *)&__dst[16] = v11 | 0x8000000000000000;
  *(_QWORD *)__dst = v9;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *v9 = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if ((__dst[23] & 0x80000000) != 0)
  {
    v12 = *(char **)__dst;
    if (!*(_QWORD *)&__dst[8])
      goto LABEL_18;
  }
  else
  {
    if (!__dst[23])
      return;
    v12 = __dst;
  }
  std::__get_collation_name(&v20, v12);
  *(_OWORD *)a4 = *(_OWORD *)&v20.__r_.__value_.__l.__data_;
  v13 = v20.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v20.__r_.__value_.__l + 2);
  v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a4 + 8);
  if (v14)
    goto LABEL_16;
  if ((__dst[23] & 0x80000000) != 0)
  {
    v15 = *(_QWORD *)&__dst[8];
    v12 = *(char **)__dst;
    if (*(_QWORD *)&__dst[8] < 3uLL)
      goto LABEL_24;
LABEL_18:
    operator delete(v12);
    return;
  }
  v15 = __dst[23];
  if (__dst[23] < 3u)
  {
    v12 = __dst;
LABEL_24:
    (*(void (**)(std::string *__return_ptr, _QWORD, char *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v20, *(_QWORD *)(a2 + 16), v12, &v12[v15]);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(std::string *)a4 = v20;
    if (*(char *)(a4 + 23) < 0)
    {
      v17 = *(_QWORD *)(a4 + 8);
      if (v17 == 1 || v17 == 12)
      {
        if (__dst != (_BYTE *)a4)
        {
          if (__dst[23] >= 0)
            v18 = __dst;
          else
            v18 = *(_BYTE **)__dst;
          if (__dst[23] >= 0)
            v19 = __dst[23];
          else
            v19 = *(_QWORD *)&__dst[8];
          std::string::__assign_no_alias<false>((void **)a4, v18, v19);
        }
      }
      else
      {
        **(_BYTE **)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
      }
    }
    else
    {
      v16 = *(unsigned __int8 *)(a4 + 23);
      if (v16 == 1 || v16 == 12)
      {
        if (__dst != (_BYTE *)a4)
        {
          if ((__dst[23] & 0x80000000) != 0)
          {
            std::string::__assign_no_alias<true>((_QWORD *)a4, *(void **)__dst, *(size_t *)&__dst[8]);
          }
          else
          {
            *(_OWORD *)a4 = *(_OWORD *)__dst;
            *(_QWORD *)(a4 + 16) = *(_QWORD *)&__dst[16];
          }
        }
      }
      else
      {
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 23) = 0;
      }
    }
LABEL_16:
    if ((__dst[23] & 0x80000000) == 0)
      return;
    v12 = *(char **)__dst;
    goto LABEL_18;
  }
}

void sub_1A344AE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::__assign_no_alias<true>(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL)
      std::string::__throw_length_error[abi:ne180100]();
    v7 = 44;
    if (__len > 0x2C)
      v7 = __len;
    v8 = (v7 | 7) + 1;
    v6 = operator new(v8);
    memcpy(v6, __src, __len);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      v6 = __dst;
    }
  }
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void **std::string::__assign_no_alias<false>(void **a1, void *__src, size_t __len)
{
  unint64_t v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v13;
  uint64_t v14;

  v6 = (unint64_t)a1[2];
  v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) > __len)
  {
    v8 = *a1;
    a1[1] = (void *)__len;
    if (__len)
      memmove(v8, __src, __len);
    goto LABEL_12;
  }
  v9 = 0x7FFFFFFFFFFFFFF7;
  if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = v7 - 1;
  v11 = a1;
  if ((v6 & 0x8000000000000000) == 0)
  {
    if (v10 > 0x3FFFFFFFFFFFFFF2)
      goto LABEL_7;
LABEL_14:
    v13 = 2 * v10;
    if (__len > 2 * v10)
      v13 = __len;
    v14 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v14 = v13 | 7;
    if (v13 >= 0x17)
      v9 = v14 + 1;
    else
      v9 = 23;
    v8 = operator new(v9);
    if (!__len)
      goto LABEL_9;
    goto LABEL_8;
  }
  v11 = *a1;
  if (v10 <= 0x3FFFFFFFFFFFFFF2)
    goto LABEL_14;
LABEL_7:
  v8 = operator new(0x7FFFFFFFFFFFFFF7uLL);
  if (__len)
LABEL_8:
    memcpy(v8, __src, __len);
LABEL_9:
  if (v10 != 22)
    operator delete(v11);
  a1[1] = (void *)__len;
  a1[2] = (void *)(v9 | 0x8000000000000000);
  *a1 = v8;
LABEL_12:
  *((_BYTE *)v8 + __len) = 0;
  return a1;
}

void std::regex_traits<char>::__transform_primary<char *>(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, _QWORD *a4@<X8>)
{
  size_t v5;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void **v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  void *__dst[3];

  v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    HIBYTE(__dst[2]) = (_BYTE)a3 - (_BYTE)__src;
    v9 = __dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(v9, __src, v5);
    v9 = (void **)((char *)v9 + v5);
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  v9 = (void **)operator new(v10 + 1);
  __dst[1] = (void *)v5;
  __dst[2] = (void *)(v11 | 0x8000000000000000);
  __dst[0] = v9;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)v9 = 0;
  memset(a4, 170, 24);
  v12 = (char *)HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) >= 0)
    v13 = __dst;
  else
    v13 = (void **)__dst[0];
  if (SHIBYTE(__dst[2]) < 0)
    v12 = (char *)__dst[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v13, &v12[(_QWORD)v13]);
  v14 = *((unsigned __int8 *)a4 + 23);
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = a4[1];
  if (v14 == 1)
  {
LABEL_25:
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      return;
    goto LABEL_26;
  }
  if (v14 == 12)
  {
    if (v15 >= 0)
      v16 = a4;
    else
      v16 = (_BYTE *)*a4;
    v16[11] = v16[3];
    if (SHIBYTE(__dst[2]) < 0)
      goto LABEL_26;
    return;
  }
  if ((v15 & 0x80000000) == 0)
  {
    *(_BYTE *)a4 = 0;
    *((_BYTE *)a4 + 23) = 0;
    goto LABEL_25;
  }
  *(_BYTE *)*a4 = 0;
  a4[1] = 0;
  if (SHIBYTE(__dst[2]) < 0)
LABEL_26:
    operator delete(__dst[0]);
}

void sub_1A344B248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A858F680](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1A344B29C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v4;
  int64_t v5;
  int v6;
  char *v7;
  char *v8;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  char *v19;
  int v20;
  _BYTE *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  int v24;
  char *v25;
  uint64_t v26;
  int v27;
  int v28;
  std::basic_regex<char>::value_type *v29;
  char *v30;
  _BYTE *v31;
  int v32;
  void **v33;
  _BYTE *v34;
  char *v35;
  void *v37[2];
  uint64_t v38;
  void *v39[2];
  uint64_t v40;
  void *__p[2];
  uint64_t v42;
  __int128 v43;
  int64_t v44;

  v4 = a2;
  v5 = a2 - a3;
  if (a2 == a3)
    return a2;
  v6 = *a2;
  v7 = a2;
  if (v6 == 93)
    return v7;
  v8 = (char *)a4;
  v11 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v42 = 0;
  if (a2 + 1 == a3 || v6 != 91)
  {
LABEL_36:
    v27 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_39;
  }
  v12 = a2[1];
  if (v12 != 46)
  {
    if (v12 == 58)
    {
      v14 = (uint64_t)(a2 + 2);
      if (a3 - (v4 + 2) < 2)
        goto LABEL_91;
      v15 = 0;
      v16 = v5 + 4;
      v17 = (unsigned __int8 *)v4;
      v18 = v16;
      if (v4[2] == 58)
        goto LABEL_15;
      do
      {
        do
        {
          if (!v18)
            goto LABEL_91;
          v17 = (unsigned __int8 *)&v4[++v15];
          v18 = v16 + v15;
        }
        while (v4[v15 + 2] != 58);
LABEL_15:
        ;
      }
      while (v17[3] != 93);
      v19 = &v4[v15 + 2];
      if (v19 == a3)
LABEL_91:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      v20 = std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(a1, v14, v19, *(_DWORD *)(a1 + 24) & 1);
      if (!v20)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
      v13 = 0;
      *((_DWORD *)v8 + 40) |= v20;
      v8 = &v4[v15 + 4];
      v7 = v4;
      if (SHIBYTE(v42) < 0)
        goto LABEL_70;
      goto LABEL_71;
    }
    if (v12 == 61)
    {
      v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, a4);
      v13 = 0;
      v7 = v4;
      if ((SHIBYTE(v42) & 0x80000000) == 0)
        goto LABEL_71;
      goto LABEL_70;
    }
    v11 = 0;
    goto LABEL_36;
  }
  v21 = a2 + 2;
  if (a3 - (v4 + 2) < 2)
    goto LABEL_92;
  v22 = (unsigned __int8 *)(v4 + 2);
  v23 = (unsigned __int8 *)(v4 + 3);
  if (*v21 == 46)
    goto LABEL_24;
  do
  {
    do
    {
      if (a3 - 4 == v4)
        goto LABEL_92;
      ++v4;
      v22 = v23;
      v24 = *v23++;
    }
    while (v24 != 46);
LABEL_24:
    ;
  }
  while (*v23 != 93);
  if (v22 == (unsigned __int8 *)a3)
LABEL_92:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)v21, v4 + 2, (uint64_t)&v43);
  if (SHIBYTE(v42) < 0)
    operator delete(__p[0]);
  v42 = v44;
  *(_OWORD *)__p = v43;
  v25 = (char *)HIBYTE(v44);
  v11 = SHIBYTE(v44);
  v26 = *((_QWORD *)&v43 + 1);
  if (v44 < 0)
    v25 = (char *)__p[1];
  if ((unint64_t)(v25 - 1) >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  v4 = (char *)(v22 + 2);
  v27 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v44 >= 0)
    v26 = HIBYTE(v44);
  if (v26)
  {
    if (v4 == a3)
      goto LABEL_52;
    goto LABEL_51;
  }
LABEL_39:
  if ((v27 | 0x40) != 0x40)
  {
    LOBYTE(v28) = *v4;
LABEL_44:
    if (v11 < 0)
    {
      v31 = __p[0];
      __p[1] = (void *)1;
      *(_BYTE *)__p[0] = v28;
      v31[1] = 0;
      if (++v4 == a3)
        goto LABEL_52;
    }
    else
    {
      HIBYTE(v42) = 1;
      LOWORD(__p[0]) = v28;
      if (++v4 == a3)
        goto LABEL_52;
    }
    goto LABEL_51;
  }
  v28 = *v4;
  if (v28 != 92)
    goto LABEL_44;
  v29 = v4 + 1;
  if (v27)
    v30 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v29, a3, (uint64_t *)__p);
  else
    v30 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v29, (unsigned __int8 *)a3, (uint64_t)__p, (uint64_t)v8);
  v4 = v30;
  if (v30 == a3)
  {
LABEL_52:
    if (SHIBYTE(v42) < 0)
    {
      if (!__p[1])
        goto LABEL_69;
      if (__p[1] != (void *)1)
      {
        v33 = (void **)__p[0];
LABEL_68:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v8, *(char *)v33, *((char *)v33 + 1));
LABEL_69:
        v13 = 1;
        v7 = v4;
        if ((SHIBYTE(v42) & 0x80000000) == 0)
          goto LABEL_71;
        goto LABEL_70;
      }
      v33 = (void **)__p[0];
    }
    else
    {
      if (!HIBYTE(v42))
        goto LABEL_69;
      v33 = __p;
      if (HIBYTE(v42) != 1)
        goto LABEL_68;
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, *(char *)v33);
    goto LABEL_69;
  }
LABEL_51:
  v32 = *v4;
  if (v32 == 93)
    goto LABEL_52;
  v34 = v4 + 1;
  if (v4 + 1 == a3 || v32 != 45 || *v34 == 93)
    goto LABEL_52;
  v43 = 0uLL;
  v44 = 0;
  v7 = v4 + 2;
  if (v4 + 2 == a3 || *v34 != 91 || *v7 != 46)
  {
    if ((v27 | 0x40) == 0x40)
    {
      LODWORD(v34) = *v34;
      if ((_DWORD)v34 == 92)
      {
        if (v27)
          v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4 + 2, a3, (uint64_t *)&v43);
        else
          v35 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v4 + 2, (unsigned __int8 *)a3, (uint64_t)&v43, (uint64_t)v8);
        goto LABEL_81;
      }
    }
    else
    {
      LOBYTE(v34) = *v34;
    }
    HIBYTE(v44) = 1;
    LOWORD(v43) = v34;
    goto LABEL_82;
  }
  v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v4 + 3, a3, (uint64_t)&v43);
LABEL_81:
  v7 = v35;
LABEL_82:
  *(_OWORD *)v39 = *(_OWORD *)__p;
  v40 = v42;
  __p[1] = 0;
  v42 = 0;
  __p[0] = 0;
  *(_OWORD *)v37 = v43;
  v38 = v44;
  v43 = 0uLL;
  v44 = 0;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v8, (char *)v39, (uint64_t)v37);
  if (SHIBYTE(v38) < 0)
  {
    operator delete(v37[0]);
    if ((SHIBYTE(v40) & 0x80000000) == 0)
    {
LABEL_84:
      if ((SHIBYTE(v44) & 0x80000000) == 0)
        goto LABEL_85;
LABEL_89:
      operator delete((void *)v43);
      v13 = 1;
      if (SHIBYTE(v42) < 0)
        goto LABEL_70;
      goto LABEL_71;
    }
  }
  else if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    goto LABEL_84;
  }
  operator delete(v39[0]);
  if (SHIBYTE(v44) < 0)
    goto LABEL_89;
LABEL_85:
  v13 = 1;
  if (SHIBYTE(v42) < 0)
LABEL_70:
    operator delete(__p[0]);
LABEL_71:
  if ((v13 & 1) != 0)
    return v7;
  return v8;
}

void sub_1A344B7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  int v10;
  char *v11;
  void **v12;
  unint64_t v13;
  __int128 v14;
  void *v15;
  void **v16;
  void **v17;
  void *__p[3];
  void *v20[3];

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_39;
  v6 = a3 - 2;
  v7 = a2;
  v8 = a2;
  v9 = a2 + 1;
  if (*a2 != 61)
    goto LABEL_5;
LABEL_4:
  if (*v9 != 93)
  {
LABEL_5:
    while (a2 != v6)
    {
      ++v7;
      --v6;
      v8 = v9;
      v10 = *v9++;
      if (v10 == 61)
        goto LABEL_4;
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v8 == a3)
    goto LABEL_39;
  memset(v20, 170, sizeof(v20));
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v7, (uint64_t)v20);
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
  {
    v11 = (char *)HIBYTE(v20[2]);
    if (HIBYTE(v20[2]))
    {
      memset(__p, 170, sizeof(__p));
      v12 = v20;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v11 = (char *)v20[1];
  if (!v20[1])
    goto LABEL_40;
  memset(__p, 170, sizeof(__p));
  v12 = (void **)v20[0];
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v12, &v11[(_QWORD)v12], (_BYTE **)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1])
    {
LABEL_16:
      v13 = *(_QWORD *)(a4 + 144);
      if (v13 >= *(_QWORD *)(a4 + 152))
      {
        *(_QWORD *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_37;
      }
      else
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v14 = *(_OWORD *)__p;
          *(void **)(v13 + 16) = __p[2];
          *(_OWORD *)v13 = v14;
        }
        *(_QWORD *)(a4 + 144) = v13 + 24;
        *(_QWORD *)(a4 + 144) = v13 + 24;
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_37;
      }
      goto LABEL_33;
    }
  }
  else if (HIBYTE(__p[2]))
  {
    goto LABEL_16;
  }
  v15 = (void *)HIBYTE(v20[2]);
  if (SHIBYTE(v20[2]) < 0)
    v15 = v20[1];
  if (v15 == (void *)2)
  {
    v17 = v20;
    if (SHIBYTE(v20[2]) < 0)
      v17 = (void **)v20[0];
    std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *(char *)v17, *((char *)v17 + 1));
  }
  else
  {
    if (v15 != (void *)1)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
    v16 = v20;
    if (SHIBYTE(v20[2]) < 0)
      v16 = (void **)v20[0];
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *(char *)v16);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_37:
    operator delete(__p[0]);
    if (SHIBYTE(v20[2]) < 0)
      goto LABEL_38;
    return v7 + 2;
  }
LABEL_33:
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
    return v7 + 2;
LABEL_38:
  operator delete(v20[0]);
  return v7 + 2;
}

void sub_1A344BAD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v13;
  unint64_t v14;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  v5 = a3 - 2;
  v6 = a2;
  v7 = a2;
  v8 = a2 + 1;
  if (*a2 != 46)
    goto LABEL_5;
LABEL_4:
  if (*v8 != 93)
  {
LABEL_5:
    while (a2 != v5)
    {
      ++v6;
      --v5;
      v7 = v8;
      v9 = *v8++;
      if (v9 == 46)
        goto LABEL_4;
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v7 == a3)
    goto LABEL_15;
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v6, (uint64_t)&v13);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v13;
  v10 = v14;
  *(_QWORD *)(a4 + 16) = v14;
  v11 = HIBYTE(v10);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a4 + 8);
  if (v11 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return v6 + 2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *result;

  if (a2 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(_QWORD *)(a4 + 8) = 1;
        a4 = *(_QWORD *)a4;
      }
      else
      {
        *(_BYTE *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(_QWORD *)(a4 + 8) = 1;
          a4 = *(_QWORD *)a4;
        }
        else
        {
          *(_BYTE *)(a4 + 23) = 1;
        }
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 1) = 0;
        result = a2 + 1;
      }
      break;
  }
  return result;
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type v7;
  std::basic_regex<char>::value_type *v8;
  std::basic_regex<char>::value_type v9;
  int v10;
  std::basic_regex<char>::value_type v11;

  if (a2 == a3)
LABEL_70:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  switch(*a2)
  {
    case '"':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v5;
        *((_BYTE *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30)
        goto LABEL_70;
      v7 = *a2 - 48;
      v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        v8 = a3;
LABEL_42:
        if (a4)
          goto LABEL_43;
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30)
        goto LABEL_42;
      v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        v8 = a3;
        if (a4)
          goto LABEL_43;
        goto LABEL_69;
      }
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      if (!a4)
        goto LABEL_69;
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v7;
      *((_BYTE *)a4 + 1) = 0;
      return v8;
  }
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t j;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t k;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t m;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  int v33;
  char *v34;
  char v35;
  char *v36;
  char v37;
  _BYTE *v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  int v43;
  void *v44[2];
  uint64_t v45;
  void *v46[2];
  uint64_t v47;
  void *__p[2];
  uint64_t v49;
  void *v50[2];
  uint64_t v51;

  v3 = a3;
  v4 = (uint64_t)a2;
  if (!*(_BYTE *)(a1 + 170))
  {
    v16 = a2[23];
    if (a2[23] < 0)
    {
      if (*((_QWORD *)a2 + 1) != 1)
        goto LABEL_74;
    }
    else if (v16 != 1)
    {
LABEL_74:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(_QWORD *)(a3 + 8) != 1)
        goto LABEL_74;
    }
    else if (*(_BYTE *)(a3 + 23) != 1)
    {
      goto LABEL_74;
    }
    if (!*(_BYTE *)(a1 + 169))
    {
LABEL_67:
      *(_OWORD *)__p = *(_OWORD *)v4;
      v49 = *(_QWORD *)(v4 + 16);
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)v4 = 0;
      *(_OWORD *)v50 = *(_OWORD *)v3;
      v51 = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)v3 = 0;
      v39 = *(_QWORD *)(a1 + 96);
      if (v39 < *(_QWORD *)(a1 + 104))
      {
        v40 = *(_OWORD *)__p;
        *(_QWORD *)(v39 + 16) = v49;
        *(_OWORD *)v39 = v40;
        __p[1] = 0;
        v49 = 0;
        __p[0] = 0;
        v41 = v51;
        *(_OWORD *)(v39 + 24) = *(_OWORD *)v50;
        *(_QWORD *)(v39 + 40) = v41;
        v50[1] = 0;
        v51 = 0;
        v50[0] = 0;
        *(_QWORD *)(a1 + 96) = v39 + 48;
        if (SHIBYTE(v49) < 0)
          goto LABEL_69;
        return;
      }
      v42 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
      v43 = SHIBYTE(v51);
      *(_QWORD *)(a1 + 96) = v42;
      if ((v43 & 0x80000000) == 0)
      {
        if (SHIBYTE(v49) < 0)
          goto LABEL_69;
        return;
      }
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
        return;
LABEL_69:
      operator delete(__p[0]);
      return;
    }
    v34 = a2;
    if ((v16 & 0x80) != 0)
      v34 = *(char **)a2;
    v35 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v34);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = v35;
      v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
        goto LABEL_64;
    }
    else
    {
      *(_BYTE *)v4 = v35;
      v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
      {
LABEL_64:
        v37 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v36);
        v38 = (_BYTE *)v3;
        if (*(char *)(v3 + 23) < 0)
          v38 = *(_BYTE **)v3;
        *v38 = v37;
        goto LABEL_67;
      }
    }
    v36 = *(char **)v3;
    goto LABEL_64;
  }
  if (*(_BYTE *)(a1 + 169))
  {
    for (i = 0; ; ++i)
    {
      v7 = *(unsigned __int8 *)(v4 + 23);
      if (*(char *)(v4 + 23) < 0)
      {
        if (i >= *(_QWORD *)(v4 + 8))
        {
LABEL_13:
          for (j = 0; ; ++j)
          {
            v12 = *(unsigned __int8 *)(v3 + 23);
            if (*(char *)(v3 + 23) < 0)
            {
              if (j >= *(_QWORD *)(v3 + 8))
                goto LABEL_44;
            }
            else if (j >= v12)
            {
              goto LABEL_44;
            }
            v13 = v3;
            if ((v12 & 0x80) != 0)
              v13 = *(_QWORD *)v3;
            v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(char *)(v13 + j));
            v15 = v3;
            if (*(char *)(v3 + 23) < 0)
              v15 = *(_QWORD *)v3;
            *(_BYTE *)(v15 + j) = v14;
          }
        }
      }
      else if (i >= v7)
      {
        goto LABEL_13;
      }
      v8 = v4;
      if ((v7 & 0x80) != 0)
        v8 = *(_QWORD *)v4;
      v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(char *)(v8 + i));
      v10 = v4;
      if (*(char *)(v4 + 23) < 0)
        v10 = *(_QWORD *)v4;
      *(_BYTE *)(v10 + i) = v9;
    }
  }
  for (k = 0; ; ++k)
  {
    v19 = a2[23];
    if (a2[23] < 0)
      break;
    if (k >= v19)
      goto LABEL_35;
LABEL_33:
    v18 = a2;
    if ((v19 & 0x80) != 0)
    {
      v18 = *(char **)a2;
      v20 = *(char **)a2;
    }
    else
    {
      v20 = a2;
    }
    v20[k] = v18[k];
  }
  if (k < *((_QWORD *)a2 + 1))
    goto LABEL_33;
LABEL_35:
  for (m = 0; ; ++m)
  {
    v23 = *(unsigned __int8 *)(a3 + 23);
    if (*(char *)(a3 + 23) < 0)
      break;
    if (m >= v23)
      goto LABEL_44;
LABEL_42:
    v22 = a3;
    if ((v23 & 0x80) != 0)
    {
      v22 = *(_QWORD *)a3;
      v24 = *(_QWORD *)a3;
    }
    else
    {
      v24 = a3;
    }
    *(_BYTE *)(v24 + m) = *(_BYTE *)(v22 + m);
  }
  if (m < *(_QWORD *)(a3 + 8))
    goto LABEL_42;
LABEL_44:
  if (*(char *)(v4 + 23) < 0)
  {
    v26 = v4;
    v4 = *(_QWORD *)v4;
    v25 = *(_QWORD *)(v26 + 8);
  }
  else
  {
    v25 = *(unsigned __int8 *)(v4 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v4, (char *)(v4 + v25));
  if (*(char *)(v3 + 23) < 0)
  {
    v28 = v3;
    v3 = *(_QWORD *)v3;
    v27 = *(_QWORD *)(v28 + 8);
  }
  else
  {
    v27 = *(unsigned __int8 *)(v3 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v3, (char *)(v3 + v27));
  *(_OWORD *)__p = *(_OWORD *)v46;
  v49 = v47;
  *(_OWORD *)v50 = *(_OWORD *)v44;
  v51 = v45;
  v29 = *(_QWORD *)(a1 + 96);
  if (v29 >= *(_QWORD *)(a1 + 104))
  {
    v32 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
    v33 = SHIBYTE(v51);
    *(_QWORD *)(a1 + 96) = v32;
    if (v33 < 0)
    {
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
        return;
    }
    else if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      return;
    }
    goto LABEL_69;
  }
  v30 = *(_OWORD *)__p;
  *(_QWORD *)(v29 + 16) = v49;
  *(_OWORD *)v29 = v30;
  __p[1] = 0;
  v49 = 0;
  __p[0] = 0;
  v31 = v51;
  *(_OWORD *)(v29 + 24) = *(_OWORD *)v50;
  *(_QWORD *)(v29 + 40) = v31;
  v50[1] = 0;
  v51 = 0;
  v50[0] = 0;
  *(_QWORD *)(a1 + 96) = v29 + 48;
  if (SHIBYTE(v49) < 0)
    goto LABEL_69;
}

void sub_1A344C6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A344C6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a21);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  char *v8;
  char **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _WORD *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  unint64_t v36;
  __int128 v37;
  __int16 v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  _OWORD *v51;
  char *v52;
  unint64_t v53;
  __int128 v54;
  __int16 v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  _OWORD *v60;
  char *v61;
  unint64_t v62;
  __int128 v63;
  __int16 v64;

  if (*(_BYTE *)(a1 + 169))
  {
    v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3) << 8);
    v8 = *(char **)(a1 + 120);
    v7 = *(_QWORD *)(a1 + 128);
    if ((unint64_t)v8 >= v7)
    {
      v9 = (char **)(a1 + 112);
      v10 = *(char **)(a1 + 112);
      v11 = v8 - v10;
      if (v8 - v10 > -3)
      {
        v12 = v11 >> 1;
        v13 = v7 - (_QWORD)v10;
        if (v13 <= (v11 >> 1) + 1)
          v14 = v12 + 1;
        else
          v14 = v13;
        if (v13 >= 0x7FFFFFFFFFFFFFFELL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (!v15)
        {
          v16 = 0;
          v17 = (_WORD *)(2 * v12);
          v18 = 0;
          *(_WORD *)(2 * v12) = v6;
          v19 = 2 * v12 + 2;
          v20 = (char *)(v8 - v10);
          if (v8 == v10)
            goto LABEL_64;
LABEL_30:
          v30 = (unint64_t)(v20 - 2);
          if (v30 < 0x1E)
            goto LABEL_71;
          if ((unint64_t)(v8 - &v16[v11 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
            goto LABEL_71;
          v31 = (v30 >> 1) + 1;
          v32 = 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
          v33 = &v8[-v32];
          v17 = (_WORD *)((char *)v17 - v32);
          v34 = &v16[2 * v12 - 16];
          v35 = v8 - 16;
          v36 = v31 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v37 = *(_OWORD *)v35;
            *(v34 - 1) = *((_OWORD *)v35 - 1);
            *v34 = v37;
            v34 -= 2;
            v35 -= 32;
            v36 -= 16;
          }
          while (v36);
          v8 = v33;
          if (v31 != (v31 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_71:
            do
            {
              v38 = *((_WORD *)v8 - 1);
              v8 -= 2;
              *--v17 = v38;
            }
            while (v8 != v10);
          }
LABEL_63:
          v8 = *v9;
          goto LABEL_64;
        }
        if ((v15 & 0x8000000000000000) == 0)
        {
          v16 = operator new(2 * v15);
          v17 = &v16[2 * v12];
          v18 = &v16[2 * v15];
          *v17 = v6;
          v19 = (uint64_t)(v17 + 1);
          v20 = (char *)(v8 - v10);
          if (v8 == v10)
            goto LABEL_64;
          goto LABEL_30;
        }
LABEL_68:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
LABEL_67:
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
LABEL_28:
    *(_WORD *)v8 = v6;
    v19 = (uint64_t)(v8 + 2);
    goto LABEL_66;
  }
  v9 = (char **)(a1 + 112);
  v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
  v8 = *(char **)(a1 + 120);
  v21 = *(_QWORD *)(a1 + 128);
  if (*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v8 < v21)
      goto LABEL_28;
    v22 = *v9;
    v23 = v8 - *v9;
    if (v23 <= -3)
      goto LABEL_67;
    v24 = v23 >> 1;
    v25 = v21 - (_QWORD)v22;
    if (v25 <= (v23 >> 1) + 1)
      v26 = v24 + 1;
    else
      v26 = v25;
    if (v25 >= 0x7FFFFFFFFFFFFFFELL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v26;
    if (v27)
    {
      if (v27 < 0)
        goto LABEL_68;
      v28 = operator new(2 * v27);
      v17 = &v28[2 * v24];
      v18 = &v28[2 * v27];
      *v17 = v6;
      v19 = (uint64_t)(v17 + 1);
      v29 = (char *)(v8 - v22);
      if (v8 == v22)
        goto LABEL_64;
    }
    else
    {
      v28 = 0;
      v17 = (_WORD *)(2 * v24);
      v18 = 0;
      *(_WORD *)(2 * v24) = v6;
      v19 = 2 * v24 + 2;
      v29 = (char *)(v8 - v22);
      if (v8 == v22)
        goto LABEL_64;
    }
    v47 = (unint64_t)(v29 - 2);
    if (v47 < 0x1E)
      goto LABEL_72;
    if ((unint64_t)(v8 - &v28[v23 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_72;
    v48 = (v47 >> 1) + 1;
    v49 = 2 * (v48 & 0xFFFFFFFFFFFFFFF0);
    v50 = &v8[-v49];
    v17 = (_WORD *)((char *)v17 - v49);
    v51 = &v28[2 * v24 - 16];
    v52 = v8 - 16;
    v53 = v48 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      *v51 = v54;
      v51 -= 2;
      v52 -= 32;
      v53 -= 16;
    }
    while (v53);
    v8 = v50;
    if (v48 != (v48 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_72:
      do
      {
        v55 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v17 = v55;
      }
      while (v8 != v22);
    }
    goto LABEL_63;
  }
  if ((unint64_t)v8 < v21)
    goto LABEL_28;
  v39 = *v9;
  v40 = v8 - *v9;
  if (v40 <= -3)
    goto LABEL_67;
  v41 = v40 >> 1;
  v42 = v21 - (_QWORD)v39;
  if (v42 <= (v40 >> 1) + 1)
    v43 = v41 + 1;
  else
    v43 = v42;
  if (v42 >= 0x7FFFFFFFFFFFFFFELL)
    v44 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v44 = v43;
  if (!v44)
  {
    v45 = 0;
    v17 = (_WORD *)(2 * v41);
    v18 = 0;
    *(_WORD *)(2 * v41) = v6;
    v19 = 2 * v41 + 2;
    v46 = (char *)(v8 - v39);
    if (v8 == v39)
      goto LABEL_64;
    goto LABEL_57;
  }
  if (v44 < 0)
    goto LABEL_68;
  v45 = operator new(2 * v44);
  v17 = &v45[2 * v41];
  v18 = &v45[2 * v44];
  *v17 = v6;
  v19 = (uint64_t)(v17 + 1);
  v46 = (char *)(v8 - v39);
  if (v8 != v39)
  {
LABEL_57:
    v56 = (unint64_t)(v46 - 2);
    if (v56 < 0x1E)
      goto LABEL_73;
    if ((unint64_t)(v8 - &v45[v40 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_73;
    v57 = (v56 >> 1) + 1;
    v58 = 2 * (v57 & 0xFFFFFFFFFFFFFFF0);
    v59 = &v8[-v58];
    v17 = (_WORD *)((char *)v17 - v58);
    v60 = &v45[2 * v41 - 16];
    v61 = v8 - 16;
    v62 = v57 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v63 = *(_OWORD *)v61;
      *(v60 - 1) = *((_OWORD *)v61 - 1);
      *v60 = v63;
      v60 -= 2;
      v61 -= 32;
      v62 -= 16;
    }
    while (v62);
    v8 = v59;
    if (v57 != (v57 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_73:
      do
      {
        v64 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v17 = v64;
      }
      while (v8 != v39);
    }
    goto LABEL_63;
  }
LABEL_64:
  *(_QWORD *)(a1 + 112) = v17;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v18;
  if (v8)
    operator delete(v8);
LABEL_66:
  *(_QWORD *)(a1 + 120) = v19;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A858F680](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1A344CB1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5;
  char *v9;
  char *v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char *v25;
  size_t v26;
  std::string v27;
  char __s[24];

  v5 = (unint64_t)&a3[-a2];
  memset(__s, 170, sizeof(__s));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    __s[23] = (_BYTE)a3 - a2;
    v9 = __s;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v10 = v9;
    goto LABEL_16;
  }
  v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v16 = v5 | 7;
  v17 = v16 + 1;
  v9 = (char *)operator new(v16 + 1);
  *(_QWORD *)&__s[8] = v5;
  *(_QWORD *)&__s[16] = v17 | 0x8000000000000000;
  *(_QWORD *)__s = v9;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v5 < 0x20 || (unint64_t)&v9[-a2] < 0x20)
  {
    v10 = v9;
    v11 = (char *)a2;
    do
    {
LABEL_15:
      v18 = *v11++;
      *v10++ = v18;
    }
    while (v11 != a3);
    goto LABEL_16;
  }
  v10 = &v9[v5 & 0xFFFFFFFFFFFFFFE0];
  v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
  v12 = (__int128 *)(a2 + 16);
  v13 = v9 + 16;
  v14 = v5 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v15 = *v12;
    *(v13 - 1) = *(v12 - 1);
    *v13 = v15;
    v12 += 2;
    v13 += 2;
    v14 -= 32;
  }
  while (v14);
  if (v5 != (v5 & 0xFFFFFFFFFFFFFFE0))
    goto LABEL_15;
LABEL_16:
  *v10 = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (__s[23] < 0)
  {
    v19 = *(char **)__s;
    if (!*(_QWORD *)&__s[8])
      goto LABEL_29;
  }
  else
  {
    if (!__s[23])
      return;
    v19 = __s;
  }
  std::__get_collation_name(&v27, v19);
  *(_OWORD *)a4 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
  v20 = v27.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v27.__r_.__value_.__l + 2);
  v21 = HIBYTE(v20);
  if ((v21 & 0x80u) != 0)
    v21 = *(_QWORD *)(a4 + 8);
  if (v21)
  {
LABEL_23:
    if ((__s[23] & 0x80000000) == 0)
      return;
    v19 = *(char **)__s;
LABEL_29:
    operator delete(v19);
    return;
  }
  if (__s[23] < 0)
  {
    v19 = *(char **)__s;
    v22 = *(_QWORD *)&__s[8];
    if (*(_QWORD *)&__s[8] >= 3uLL)
      goto LABEL_29;
    goto LABEL_31;
  }
  v22 = __s[23];
  if (__s[23] < 3u)
  {
    v19 = __s;
LABEL_31:
    (*(void (**)(std::string *__return_ptr, _QWORD, char *, char *))(**(_QWORD **)(a1 + 16) + 32))(&v27, *(_QWORD *)(a1 + 16), v19, &v19[v22]);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(std::string *)a4 = v27;
    if (*(char *)(a4 + 23) < 0)
    {
      v24 = *(_QWORD *)(a4 + 8);
      if (v24 == 1 || v24 == 12)
      {
        if (__s != (char *)a4)
        {
          if (__s[23] >= 0)
            v25 = __s;
          else
            v25 = *(char **)__s;
          if (__s[23] >= 0)
            v26 = __s[23];
          else
            v26 = *(_QWORD *)&__s[8];
          std::string::__assign_no_alias<false>((void **)a4, v25, v26);
        }
      }
      else
      {
        **(_BYTE **)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
      }
    }
    else
    {
      v23 = *(unsigned __int8 *)(a4 + 23);
      if (v23 == 1 || v23 == 12)
      {
        if (__s != (char *)a4)
        {
          if (__s[23] < 0)
          {
            std::string::__assign_no_alias<true>((_QWORD *)a4, *(void **)__s, *(size_t *)&__s[8]);
          }
          else
          {
            *(_OWORD *)a4 = *(_OWORD *)__s;
            *(_QWORD *)(a4 + 16) = *(_QWORD *)&__s[16];
          }
        }
      }
      else
      {
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 23) = 0;
      }
    }
    goto LABEL_23;
  }
}

void sub_1A344CDEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, _BYTE **a4@<X8>)
{
  unint64_t v5;
  _OWORD *v9;
  _BYTE *v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  void **v20;
  _BYTE *v21;
  int v22;
  _BYTE *v23;
  void *__p[3];

  v5 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 > 0x16)
  {
    v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v16 = v5 | 7;
    v17 = v16 + 1;
    v9 = operator new(v16 + 1);
    __p[1] = (void *)v5;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  v9 = __p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v5 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    v10 = v9;
    v11 = (char *)a2;
  }
  else
  {
    v10 = (char *)v9 + (v5 & 0xFFFFFFFFFFFFFFE0);
    v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
    v12 = (__int128 *)(a2 + 16);
    v13 = v9 + 1;
    v14 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v5 == (v5 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  *v10 = 0;
  memset(a4, 170, 24);
  v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0)
    v20 = __p;
  else
    v20 = (void **)__p[0];
  if (SHIBYTE(__p[2]) < 0)
    v19 = (char *)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v20, &v19[(_QWORD)v20]);
  v21 = (_BYTE *)*((unsigned __int8 *)a4 + 23);
  v22 = (char)v21;
  if ((char)v21 < 0)
    v21 = a4[1];
  if (v21 == (_BYTE *)1)
    goto LABEL_32;
  if (v21 != (_BYTE *)12)
  {
    if (v22 < 0)
    {
      **a4 = 0;
      a4[1] = 0;
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        return;
LABEL_35:
      operator delete(__p[0]);
      return;
    }
    *(_BYTE *)a4 = 0;
    *((_BYTE *)a4 + 23) = 0;
LABEL_32:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return;
    goto LABEL_35;
  }
  if (v22 >= 0)
    v23 = a4;
  else
    v23 = *a4;
  v23[11] = v23[3];
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_35;
}

void sub_1A344D020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string const&>(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  std::string *v10;
  std::string *v11;
  __int128 v12;
  char *v13;
  void **v14;
  std::string *v16;
  std::string *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (std::string *)&v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 1;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    v11 = v10 + 1;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    v10[-1].__r_.__value_.__r.__words[2] = *((_QWORD *)v4 - 1);
    *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v12;
    --v10;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = (char *)v10;
  a1[1] = (char *)v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_1A344D1FC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer end;
  std::__split_buffer<std::string>::pointer begin;
  std::__split_buffer<std::string>::pointer v4;

  begin = this->__begin_;
  end = this->__end_;
  if (end != begin)
  {
    do
    {
      v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        v4 = this->__end_;
      }
      end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A858F680](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1A344D2AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, BOOL a4)
{
  unint64_t v4;
  _OWORD *v9;
  _BYTE *v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  void **v20;
  void **v21;
  uint64_t classname;
  void *__p[3];

  v4 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 > 0x16)
  {
    v16 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v16 = v4 | 7;
    v17 = v16 + 1;
    v9 = operator new(v16 + 1);
    __p[1] = (void *)v4;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  v9 = __p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v4 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    v10 = v9;
    v11 = (char *)a2;
  }
  else
  {
    v10 = (char *)v9 + (v4 & 0xFFFFFFFFFFFFFFE0);
    v11 = (char *)(a2 + (v4 & 0xFFFFFFFFFFFFFFE0));
    v12 = (__int128 *)(a2 + 16);
    v13 = v9 + 1;
    v14 = v4 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v4 == (v4 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  *v10 = 0;
  v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0)
    v20 = __p;
  else
    v20 = (void **)__p[0];
  if (SHIBYTE(__p[2]) < 0)
    v19 = (char *)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v20, &v19[(_QWORD)v20]);
  if (SHIBYTE(__p[2]) >= 0)
    v21 = __p;
  else
    v21 = (void **)__p[0];
  classname = std::__get_classname((const char *)v21, a4);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return classname;
}

void sub_1A344D444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  char *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  char *v58;
  char v59;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = (_QWORD *)(a1 + 64);
    v5 = *(_BYTE **)(a1 + 72);
    v16 = *(_QWORD *)(a1 + 80);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16)
        goto LABEL_24;
      v17 = (_BYTE *)*v6;
      v18 = (unint64_t)&v5[-*v6];
      v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        v20 = v16 - (_QWORD)v17;
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v12 = operator new(v21);
          v13 = &v12[v18];
          v14 = &v12[v21];
          v12[v18] = v2;
          v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17)
            goto LABEL_49;
        }
        else
        {
          v12 = 0;
          v13 = &v5[-*v6];
          v14 = 0;
          *(_BYTE *)v18 = a2;
          v15 = v18 + 1;
          if (v5 == v17)
            goto LABEL_49;
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            v38 = (__int128 *)(v5 - 16);
            v39 = &v12[v5 - 16 - v17];
            v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28)
              goto LABEL_86;
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          v42 = &v5[-v28 - 8];
          v43 = &v12[v42 - v17];
          v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v45 = *(_QWORD *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_86;
        }
LABEL_80:
        v56 = v13 - 1;
        do
        {
          v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16)
      goto LABEL_24;
    v23 = (_BYTE *)*v6;
    v24 = (unint64_t)&v5[-*v6];
    v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0)
      goto LABEL_89;
    v26 = v16 - (_QWORD)v23;
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v12 = operator new(v27);
      v13 = &v12[v24];
      v14 = &v12[v27];
      v12[v24] = v2;
      v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(_QWORD *)(a1 + 64) = v13;
        *(_QWORD *)(a1 + 72) = v15;
        *(_QWORD *)(a1 + 80) = v14;
        if (!v5)
          goto LABEL_88;
        goto LABEL_87;
      }
    }
    else
    {
      v12 = 0;
      v13 = &v5[-*v6];
      v14 = 0;
      *(_BYTE *)v24 = a2;
      v15 = v24 + 1;
      if (v5 == v23)
        goto LABEL_49;
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        v46 = (__int128 *)(v5 - 16);
        v47 = &v12[v5 - 16 - v23];
        v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29)
          goto LABEL_86;
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      v50 = &v5[-v29 - 8];
      v51 = &v12[v50 - v23];
      v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v53 = *(_QWORD *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_86;
    }
LABEL_84:
    v58 = v13 - 1;
    do
    {
      v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *v5 = v2;
    v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  v6 = (_QWORD *)(a1 + 64);
  v7 = *(_BYTE **)(a1 + 64);
  v8 = v5 - v7;
  v9 = v5 - v7 + 1;
  if (v9 < 0)
    goto LABEL_89;
  v10 = v4 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v2;
    v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7)
      goto LABEL_49;
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v5 - v7);
    v14 = 0;
    *(_BYTE *)v8 = v2;
    v15 = v8 + 1;
    if (v5 == v7)
      goto LABEL_49;
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
    goto LABEL_76;
  if (v8 < 0x20)
  {
    v22 = 0;
    goto LABEL_55;
  }
  v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  v30 = (__int128 *)(v5 - 16);
  v31 = &v12[v5 - 16 - v7];
  v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    v34 = &v5[-v22 - 8];
    v35 = &v12[v34 - v7];
    v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v37 = *(_QWORD *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_86;
LABEL_76:
    v54 = v13 - 1;
    do
    {
      v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  v5 = (_BYTE *)*v6;
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v15;
  *(_QWORD *)(a1 + 80) = v14;
  if (v5)
LABEL_87:
    operator delete(v5);
LABEL_88:
  *(_QWORD *)(a1 + 72) = v15;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v3;
  _OWORD *v7;
  _BYTE *v8;
  char *v9;
  __int128 *v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char *v17;
  void **v18;
  void *__p[3];

  v3 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3 > 0x16)
  {
    v14 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v14 = v3 | 7;
    v15 = v14 + 1;
    v7 = operator new(v14 + 1);
    __p[1] = (void *)v3;
    __p[2] = (void *)(v15 | 0x8000000000000000);
    __p[0] = v7;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v8 = v7;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  v7 = __p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v3 < 0x20 || (unint64_t)v7 - a2 < 0x20)
  {
    v8 = v7;
    v9 = (char *)a2;
  }
  else
  {
    v8 = (char *)v7 + (v3 & 0xFFFFFFFFFFFFFFE0);
    v9 = (char *)(a2 + (v3 & 0xFFFFFFFFFFFFFFE0));
    v10 = (__int128 *)(a2 + 16);
    v11 = v7 + 1;
    v12 = v3 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      *v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 32;
    }
    while (v12);
    if (v3 == (v3 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v16 = *v9++;
    *v8++ = v16;
  }
  while (v9 != a3);
LABEL_16:
  *v8 = 0;
  v17 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0)
    v18 = __p;
  else
    v18 = (void **)__p[0];
  if (SHIBYTE(__p[2]) < 0)
    v17 = (char *)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v18, &v17[(_QWORD)v18]);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

void sub_1A344DA58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A858F680](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1A344DAAC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  void **v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  void **v16;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * v3];
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = &v7[48 * v6];
  v10 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v11 = v8 + 48;
  v12 = (void **)*a1;
  v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      v14 = *((_OWORD *)v13 - 3);
      *((_QWORD *)v8 - 4) = *(v13 - 4);
      *((_OWORD *)v8 - 3) = v14;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      v15 = *(_OWORD *)(v13 - 3);
      *((_QWORD *)v8 - 1) = *(v13 - 1);
      *(_OWORD *)(v8 - 24) = v15;
      v8 -= 48;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 6;
    }
    while (v13 != v12);
    v13 = (void **)*a1;
    v16 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v16 == v13)
        goto LABEL_22;
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if ((*((char *)v16 - 25) & 0x80000000) == 0)
          goto LABEL_14;
      }
      else if ((*((char *)v16 - 25) & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(*(v16 - 6));
LABEL_14:
      v16 -= 6;
    }
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_22:
  if (v13)
    operator delete(v13);
  return v11;
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A858F680](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1A344DE0C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A858F680](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1A344DE58(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E4A06BD0;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E4A06BD0;
  v2 = __p[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = __p[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  operator delete(__p);
}

uint64_t std::__loop<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 8);
  v3 = *(_DWORD *)(result + 44);
  *(_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(_QWORD *)(a3 + 16);
  v4 = *(_DWORD *)(result + 48);
  if (v3 != v4)
  {
    v5 = (v4 - 1);
    v6 = (v3 - 1);
    v7 = *(_QWORD *)(a3 + 24);
    v8 = *(_QWORD *)(a3 + 32);
    v9 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 2)
    {
      v10 = v6;
LABEL_9:
      v13 = v5 - v10;
      v14 = (_BYTE *)(v8 + 24 * v10 + 16);
      do
      {
        *((_QWORD *)v14 - 2) = v7;
        *((_QWORD *)v14 - 1) = v7;
        *v14 = 0;
        v14 += 24;
        --v13;
      }
      while (v13);
      return result;
    }
    v10 = (v9 & 0xFFFFFFFFFFFFFFFELL) + v6;
    v11 = v8 + 24 * v6 + 24;
    v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)(v11 - 24) = v7;
      *(_QWORD *)(v11 - 16) = v7;
      *(_QWORD *)v11 = v7;
      *(_QWORD *)(v11 + 8) = v7;
      *(_BYTE *)(v11 - 8) = 0;
      *(_BYTE *)(v11 + 16) = 0;
      v11 += 48;
      v12 -= 2;
    }
    while (v12);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFFELL))
      goto LABEL_9;
  }
  return result;
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E4A06BD0;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E4A06BD0;
  v2 = __p[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = __p[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  operator delete(__p);
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E4A06BD0;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1A858F680](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1A344E190(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3)
{
  char *v6;
  int v8;
  std::basic_regex<char> *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  std::basic_regex<char> *v14;
  std::__owns_one_state<char> *v15;
  int v16;
  std::basic_regex<char> *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (char *)a2, a3);
  if ((char *)a2 != v6 || (char *)a2 == a3 || (char *)(a2 + 1) == a3 || *(_BYTE *)a2 != 92)
    return v6;
  v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    {
      v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      v10 = operator new(0x18uLL);
      v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(_QWORD *)(v12 + 8);
      *v10 = &unk_1E4A06AE0;
      v10[1] = v13;
      *((_DWORD *)v10 + 4) = v11;
      *(_QWORD *)(v12 + 8) = v10;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3)
        goto LABEL_23;
      v14 = v9;
      v15 = *(std::__owns_one_state<char> **)(a1 + 56);
      v16 = *(_DWORD *)(a1 + 28);
      v17 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, v14, a3);
      if (v14 == v17)
        break;
      v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v17, (std::basic_regex<char> *)a3, v15, (v16 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v14 != v9);
    if ((char *)&v14->__traits_.__loc_.__locale_ + 1 == a3
      || LOBYTE(v14->__traits_.__loc_.__locale_) != 92
      || BYTE1(v14->__traits_.__loc_.__locale_) != 41)
    {
LABEL_23:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    v6 = (char *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 41);
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
    {
      v18 = operator new(0x18uLL);
      v19 = *(_QWORD *)(a1 + 56);
      v20 = *(_QWORD *)(v19 + 8);
      *v18 = &unk_1E4A06B28;
      v18[1] = v20;
      *((_DWORD *)v18 + 4) = v11;
      *(_QWORD *)(v19 + 8) = v18;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return v6;
    }
    return v6;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8)
    return v6;
  if ((v8 - 48) > *(_DWORD *)(a1 + 28))
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (char *)(a2 + 2);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  int locale_low;
  unsigned __int8 *v9;
  std::basic_regex<char> *v10;
  int v11;
  int v12;
  std::basic_regex<char> *v13;
  int v14;
  std::basic_regex<char> *v15;
  int v16;
  int v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;

  if (this == a3)
    return this;
  locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  v9 = (unsigned __int8 *)a3;
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return this;
  }
  v10 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v10 == a3)
    goto LABEL_45;
  v11 = LOBYTE(v10->__traits_.__loc_.__locale_);
  if ((v11 & 0xF8) != 0x30 && (v11 & 0xFE) != 0x38)
    goto LABEL_45;
  v12 = v11 - 48;
  v13 = (std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_15:
    v13 = a3;
  }
  else
  {
    while (1)
    {
      v14 = LOBYTE(v13->__traits_.__loc_.__locale_);
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
        break;
      if (v12 >= 214748364)
        goto LABEL_45;
      v12 = v14 + 10 * v12 - 48;
      v13 = (std::basic_regex<char> *)((char *)v13 + 1);
      if (v13 == a3)
        goto LABEL_15;
    }
  }
  if (v13 == v10)
    goto LABEL_45;
  if (v13 == a3)
LABEL_46:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 1);
  v16 = LOBYTE(v13->__traits_.__loc_.__locale_);
  if (v16 != 44)
  {
    if (v15 != a3 && v16 == 92 && LOBYTE(v15->__traits_.__loc_.__locale_) == 125)
    {
      v19 = (unsigned __int8 *)&v13->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v12, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_46;
  }
  if (v15 == a3)
    goto LABEL_46;
  v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
  if ((v17 & 0xF8) == 0x30 || (v17 & 0xFE) == 0x38)
  {
    v18 = v17 - 48;
    v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_37:
      v15 = a3;
      goto LABEL_40;
    }
    while (1)
    {
      v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
      if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38)
        break;
      if (v18 >= 214748364)
        goto LABEL_45;
      v18 = v17 + 10 * v18 - 48;
      v15 = (std::basic_regex<char> *)((char *)v15 + 1);
      if (v15 == a3)
        goto LABEL_37;
    }
  }
  else
  {
    v18 = -1;
  }
  if (v15 == a3)
  {
    v20 = (unsigned __int8 *)v15;
    v15 = a3;
    v9 = v20;
  }
  else if ((std::basic_regex<char> *)((char *)&v15->__traits_.__loc_.__locale_ + 1) == a3 || v17 != 92)
  {
    v9 = (unsigned __int8 *)v15;
  }
  else
  {
    v9 = (unsigned __int8 *)v15 + 2 * (BYTE1(v15->__traits_.__loc_.__locale_) == 125);
  }
LABEL_40:
  if (v15 == (std::basic_regex<char> *)v9)
    goto LABEL_46;
  if (v18 != -1)
  {
    if (v18 >= v12)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v18, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v9;
    }
LABEL_45:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v9;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  int v5;
  char *v6;
  int v9;
  std::__node<char> *v10;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if (a2 == a3)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
  v6 = a2 + 1;
  v5 = *a2;
  if (a2 + 1 == a3 && v5 == 36)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
  if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
    return a2 + 1;
  }
  else if (v6 != a3
         && v5 == 92
         && (v9 = *v6, (v9 - 36) <= 0x3A)
         && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
    return a2 + 2;
  }
  else
  {
    if (*a2 != 46)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
    v10 = (std::__node<char> *)operator new(0x10uLL);
    end = this->__end_;
    first = end->__first_;
    v10->__vftable = (std::__node<char>_vtbl *)&unk_1E4A06CD8;
    v10[1].__vftable = (std::__node<char>_vtbl *)first;
    end->__first_ = v10;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return a2 + 1;
  }
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  _BYTE *v2;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > this->__marked_count_)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  std::basic_regex<char> *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int locale_low;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  std::basic_regex<char> *v22;
  std::basic_regex<char> *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 == a2)
  {
    v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char>::value_type *)a2, (std::basic_regex<char>::value_type *)a3);
    if (v8 == a2)
    {
      if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
      {
        v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(a1, (char *)a2, (char *)a3);
      }
      else
      {
        v9 = operator new(0x10uLL);
        v10 = *(_QWORD *)(a1 + 56);
        v11 = *(_QWORD *)(v10 + 8);
        *v9 = &unk_1E4A06CD8;
        v9[1] = v11;
        *(_QWORD *)(v10 + 8) = v9;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      }
    }
  }
  if (v8 != a2 || v8 == a3)
  {
LABEL_23:
    if (v8 != a2)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    return a2;
  }
  locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  switch(locale_low)
  {
    case '$':
      v13 = operator new(0x18uLL);
      v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v15 = *(_QWORD *)(a1 + 56);
      goto LABEL_14;
    case '(':
      if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      {
        v19 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v18 = operator new(0x18uLL);
        v19 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v19;
        v20 = *(_QWORD *)(a1 + 56);
        v21 = *(_QWORD *)(v20 + 8);
        *v18 = &unk_1E4A06AE0;
        v18[1] = v21;
        *((_DWORD *)v18 + 4) = v19;
        *(_QWORD *)(v20 + 8) = v18;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      v22 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v22 == a3 || (v23 = v22, LOBYTE(v22->__traits_.__loc_.__locale_) != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      {
        v24 = operator new(0x18uLL);
        v25 = *(_QWORD *)(a1 + 56);
        v26 = *(_QWORD *)(v25 + 8);
        *v24 = &unk_1E4A06B28;
        v24[1] = v26;
        *((_DWORD *)v24 + 4) = v19;
        *(_QWORD *)(v25 + 8) = v24;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      v8 = (std::basic_regex<char> *)((char *)&v23->__traits_.__loc_.__locale_ + 1);
      goto LABEL_23;
    case '^':
      v13 = operator new(0x18uLL);
      v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v15 = *(_QWORD *)(a1 + 56);
LABEL_14:
      v17 = *(_QWORD *)(v15 + 8);
      *v13 = v16 + 16;
      v13[1] = v17;
      *((_BYTE *)v13 + 16) = v14;
      *(_QWORD *)(v15 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  return a2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_)
        return this;
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3)
{
  std::basic_regex<char>::value_type *v3;
  std::basic_regex<char>::value_type *v4;
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type *result;
  _BOOL4 v7;
  uint64_t v8;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92)
    return v3;
  v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      v3 += 2;
      return v3;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4, a3, 0);
      }
      else
      {
        v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        v8 = 2;
        if (!v7)
          v8 = 0;
        result = &v3[v8];
      }
      break;
  }
  return result;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(std::vector<std::ssub_match> *this, uint64_t a2, std::sub_match<std::__wrap_iter<const char *>> *a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  unint64_t v11;
  std::vector<std::ssub_match>::pointer begin;
  std::sub_match<std::__wrap_iter<const char *>> *end;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  std::vector<std::ssub_match>::pointer v25;
  std::sub_match<std::__wrap_iter<const char *>> *v26;

  v10 = a4[6];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  begin = this->__begin_;
  end = this->__end_;
  v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      end = (std::vector<std::ssub_match>::pointer)((char *)begin + 8 * ((a4[1] - *a4) >> 3));
      this->__end_ = end;
    }
  }
  else
  {
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(this, v11 - v14);
    begin = this->__begin_;
    end = this->__end_;
  }
  if (end != begin)
  {
    v15 = 0;
    v16 = 0;
    v18 = *a4;
    v17 = a4[1];
    do
    {
      v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3);
      v20 = (_QWORD *)(v18 + v15 * 24);
      if (v19 <= v16)
        v21 = a4 + 3;
      else
        v21 = v20;
      begin[v15].first.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *v21 - v10);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v16)
        v22 = (uint64_t)(a4 + 3);
      else
        v22 = *a4 + v15 * 24;
      this->__begin_[v15].second.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *(_QWORD *)(v22 + 8) - v10);
      v18 = *a4;
      v17 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v17 - *a4) >> 3) <= v16)
        v23 = (uint64_t)(a4 + 3);
      else
        v23 = *a4 + v15 * 24;
      v24 = *(_BYTE *)(v23 + 16);
      begin = this->__begin_;
      v25 = this->__end_;
      this->__begin_[v15].matched = v24;
      ++v16;
      ++v15;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)begin) >> 3));
  }
  this[1].__begin_ = a3;
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  v26 = (std::sub_match<std::__wrap_iter<const char *>> *)(a2 + a4[6] - v10);
  this[2].__begin_ = v26;
  this[2].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[7] - v10);
  LOBYTE(this[2].__end_cap_.__value_) = *((_BYTE *)a4 + 64);
  this[3].__begin_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[9] - v10);
  this[3].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[10] - v10);
  LOBYTE(this[3].__end_cap_.__value_) = *((_BYTE *)a4 + 88);
  if ((a5 & 1) == 0)
    this[4].__end_ = v26;
  LOBYTE(this[4].__begin_) = *((_BYTE *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  std::vector<std::pair<unsigned long, const char *>> *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  __int128 v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void **v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  void *v72;
  void *v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  __int128 v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void **v85;
  void **v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t *v92;
  uint64_t v93;
  char v94;
  _BYTE v97[96];
  __int128 v98;
  __int128 v99;
  __int128 v100;

  v99 = 0u;
  v100 = 0u;
  v98 = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
LABEL_79:
    v85 = (void **)*((_QWORD *)&v98 + 1);
    v86 = (void **)v99;
    *((_QWORD *)&v100 + 1) = 0;
    v87 = v99 - *((_QWORD *)&v98 + 1);
    if ((_QWORD)v99 - *((_QWORD *)&v98 + 1) < 0x11uLL)
      goto LABEL_81;
    do
    {
LABEL_80:
      operator delete(*v85);
      v86 = (void **)v99;
      v85 = (void **)(*((_QWORD *)&v98 + 1) + 8);
      *((_QWORD *)&v98 + 1) = v85;
      v87 = v99 - (_QWORD)v85;
    }
    while ((_QWORD)v99 - (_QWORD)v85 > 0x10uLL);
    goto LABEL_81;
  }
  *(_DWORD *)v97 = 0;
  memset(&v97[8], 0, 85);
  std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v98);
  v11 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (((_QWORD)v100 + *((_QWORD *)&v100 + 1)) / 0x2AuLL))
      + 96 * (((_QWORD)v100 + *((_QWORD *)&v100 + 1)) % 0x2AuLL);
  v12 = *(_OWORD *)&v97[16];
  *(_OWORD *)v11 = *(_OWORD *)v97;
  *(_OWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  memset(&v97[32], 0, 24);
  *(_QWORD *)(v11 + 56) = 0;
  *(_QWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  memset(&v97[56], 0, 24);
  v13 = *(_QWORD *)&v97[80];
  *(_QWORD *)(v11 + 85) = *(_QWORD *)&v97[85];
  *(_QWORD *)(v11 + 80) = v13;
  v15 = *((_QWORD *)&v100 + 1);
  v14 = v100;
  v16 = ++*((_QWORD *)&v100 + 1);
  v17 = *((_QWORD *)&v98 + 1);
  v18 = *(unsigned int *)(a1 + 32);
  v19 = v100 + v15;
  v20 = 8 * (v19 / 0x2A);
  v21 = 96 * (v19 % 0x2A);
  v22 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + v20) + v21;
  *(_DWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = a2;
  *(_QWORD *)(*(_QWORD *)(v17 + v20) + v21 + 16) = a2;
  *(_QWORD *)(*(_QWORD *)(v17 + v20) + v21 + 24) = a3;
  v23 = *(_QWORD *)(v17 + v20) + v21;
  v26 = *(_QWORD *)(v23 + 56);
  v24 = (std::vector<std::pair<unsigned long, const char *>> *)(v23 + 56);
  v25 = v26;
  v27 = ((uint64_t)v24->__end_ - v26) >> 4;
  v92 = a4;
  if (v18 <= v27)
  {
    if (v18 < v27)
      v24->__end_ = (std::vector<std::pair<unsigned long, const char *>>::pointer)(v25 + 16 * v18);
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(v24, v18 - v27);
    v16 = *((_QWORD *)&v100 + 1);
    v14 = v100;
    v17 = *((_QWORD *)&v98 + 1);
  }
  v93 = 0;
  v94 = 0;
  v28 = 0;
  v29 = v14 + v16 - 1;
  v30 = 8 * (v29 / 0x2A);
  v31 = 96 * (v29 % 0x2A);
  *(_QWORD *)(*(_QWORD *)(v17 + v30) + v31 + 80) = v6;
  v32 = a3 - a2;
  v33 = *(_QWORD *)(v17 + v30) + v31;
  *(_DWORD *)(v33 + 88) = a5;
  *(_BYTE *)(v33 + 92) = a6;
  while (2)
  {
    if ((++v28 & 0xFFF) == 0 && (int)(v28 >> 12) >= (int)v32)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    v35 = v16 + v100 - 1;
    v36 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v35 / 0x2A));
    v37 = v35 % 0x2A;
    v38 = v36 + 96 * (v35 % 0x2A);
    v40 = (_QWORD *)(v38 + 80);
    v39 = *(_QWORD *)(v38 + 80);
    if (v39)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v39 + 16))(v39, v36 + 96 * v37);
    switch(*(_DWORD *)v38)
    {
      case 0xFFFFFC18:
        v41 = *(_QWORD *)(v36 + 96 * v37 + 16);
        if ((a5 & 0x20) != 0 && v41 == a2 || (a5 & 0x1000) != 0 && v41 != a3)
          goto LABEL_21;
        v65 = v41 - *(_QWORD *)(v36 + 96 * v37 + 8);
        v66 = v93;
        if ((v94 & (v93 >= v65)) == 0)
          v66 = v65;
        if (v66 == v32)
        {
          v67 = (void **)*((_QWORD *)&v98 + 1);
          v68 = v99;
          if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          {
            *((_QWORD *)&v100 + 1) = 0;
            v82 = 0;
          }
          else
          {
            v69 = (_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * ((unint64_t)v100 / 0x2A));
            v70 = (_QWORD *)(*v69 + 96 * ((unint64_t)v100 % 0x2A));
            v71 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * ((*((_QWORD *)&v100 + 1) + (_QWORD)v100) / 0x2AuLL))
                + 96 * ((*((_QWORD *)&v100 + 1) + (_QWORD)v100) % 0x2AuLL);
            if (v70 != (_QWORD *)v71)
            {
              do
              {
                v72 = (void *)v70[7];
                if (v72)
                {
                  v70[8] = v72;
                  operator delete(v72);
                }
                v73 = (void *)v70[4];
                if (v73)
                {
                  v70[5] = v73;
                  operator delete(v73);
                }
                v70 += 12;
                if ((_QWORD *)((char *)v70 - *v69) == (_QWORD *)4032)
                {
                  v74 = (_QWORD *)v69[1];
                  ++v69;
                  v70 = v74;
                }
              }
              while (v70 != (_QWORD *)v71);
              v67 = (void **)*((_QWORD *)&v98 + 1);
              v68 = v99;
            }
            *((_QWORD *)&v100 + 1) = 0;
            v82 = v68 - (_QWORD)v67;
            if (v82 >= 0x11)
            {
              do
              {
                operator delete(*v67);
                v67 = (void **)(*((_QWORD *)&v98 + 1) + 8);
                *((_QWORD *)&v98 + 1) = v67;
                v82 = v99 - (_QWORD)v67;
              }
              while ((_QWORD)v99 - (_QWORD)v67 > 0x10uLL);
            }
          }
          if (v82 >> 3 == 1)
          {
            v83 = 21;
          }
          else
          {
            if (v82 >> 3 != 2)
            {
LABEL_76:
              v94 = 1;
              v93 = a3 - a2;
              goto LABEL_8;
            }
            v83 = 42;
          }
          *(_QWORD *)&v100 = v83;
          goto LABEL_76;
        }
        v93 = v66;
        v75 = *((_QWORD *)&v100 + 1) + v100 - 1;
        v76 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v75 / 0x2A));
        v77 = v75 % 0x2A;
        v78 = *(void **)(v76 + 96 * (v75 % 0x2A) + 56);
        if (v78)
        {
          *(_QWORD *)(v76 + 96 * v77 + 64) = v78;
          operator delete(v78);
        }
        v79 = *(void **)(v76 + 96 * v77 + 32);
        if (v79)
        {
          *(_QWORD *)(v76 + 96 * v77 + 40) = v79;
          operator delete(v79);
        }
        v80 = 42 * ((uint64_t)(v99 - *((_QWORD *)&v98 + 1)) >> 3) - 1;
        v81 = v100;
        --*((_QWORD *)&v100 + 1);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v80 = 0;
        if ((unint64_t)(v80 - (*((_QWORD *)&v81 + 1) + v81) + 1) >= 0x54)
        {
          operator delete(*(void **)(v99 - 8));
          *(_QWORD *)&v99 = v99 - 8;
        }
        v94 = 1;
LABEL_8:
        v16 = *((_QWORD *)&v100 + 1);
        if (*((_QWORD *)&v100 + 1))
          continue;
        if ((v94 & 1) != 0)
        {
          v84 = *v92;
          *(_QWORD *)v84 = a2;
          *(_QWORD *)(v84 + 8) = a2 + v93;
          v6 = 1;
          *(_BYTE *)(v84 + 16) = 1;
          goto LABEL_79;
        }
        v6 = 0;
        v85 = (void **)*((_QWORD *)&v98 + 1);
        v86 = (void **)v99;
        *((_QWORD *)&v100 + 1) = 0;
        v87 = v99 - *((_QWORD *)&v98 + 1);
        if ((_QWORD)v99 - *((_QWORD *)&v98 + 1) >= 0x11uLL)
          goto LABEL_80;
LABEL_81:
        v88 = v87 >> 3;
        if (v88 == 1)
        {
          v89 = 21;
LABEL_85:
          *(_QWORD *)&v100 = v89;
        }
        else if (v88 == 2)
        {
          v89 = 42;
          goto LABEL_85;
        }
        if (v85 != v86)
        {
          do
          {
            v90 = *v85++;
            operator delete(v90);
          }
          while (v85 != v86);
          if ((_QWORD)v99 != *((_QWORD *)&v98 + 1))
            *(_QWORD *)&v99 = v99 + ((*((_QWORD *)&v98 + 1) - v99 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        if ((_QWORD)v98)
          operator delete((void *)v98);
        return v6;
      case 0xFFFFFC19:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_8;
      case 0xFFFFFC1D:
        v49 = v100;
        if (!(_QWORD)v100)
        {
          std::deque<std::__state<char>>::__add_front_capacity((uint64_t)&v98);
          v49 = v100;
        }
        v50 = (_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v49 / 0x2A));
        v51 = *v50 + 96 * (v49 % 0x2A);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v51 = 0;
        if (v51 == *v50)
          v51 = *(v50 - 1) + 4032;
        v52 = *(_OWORD *)(v38 + 16);
        *(_OWORD *)(v51 - 96) = *(_OWORD *)v38;
        *(_OWORD *)(v51 - 80) = v52;
        v53 = v36 + 96 * v37;
        *(_QWORD *)(v51 - 56) = 0;
        *(_QWORD *)(v51 - 48) = 0;
        *(_QWORD *)(v51 - 64) = 0;
        *(_OWORD *)(v51 - 64) = *(_OWORD *)(v53 + 32);
        *(_QWORD *)(v51 - 48) = *(_QWORD *)(v53 + 48);
        *(_QWORD *)(v53 + 32) = 0;
        *(_QWORD *)(v53 + 40) = 0;
        *(_QWORD *)(v53 + 48) = 0;
        *(_QWORD *)(v51 - 40) = 0;
        *(_QWORD *)(v51 - 32) = 0;
        *(_QWORD *)(v51 - 24) = 0;
        *(_OWORD *)(v51 - 40) = *(_OWORD *)(v53 + 56);
        *(_QWORD *)(v51 - 24) = *(_QWORD *)(v53 + 72);
        *(_QWORD *)(v53 + 56) = 0;
        *(_QWORD *)(v53 + 64) = 0;
        *(_QWORD *)(v53 + 72) = 0;
        v54 = *v40;
        *(_QWORD *)(v51 - 11) = *(_QWORD *)(v38 + 85);
        *(_QWORD *)(v51 - 16) = v54;
        v55 = *((_QWORD *)&v100 + 1);
        *(_QWORD *)&v100 = v100 - 1;
        ++*((_QWORD *)&v100 + 1);
        v56 = v55 + v100;
        v57 = (v55 + (uint64_t)v100) / 0x2AuLL;
        v43 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * v57);
        v44 = v56 - 42 * v57;
        v45 = *(void **)(v43 + 96 * v44 + 56);
        if (!v45)
          goto LABEL_23;
        goto LABEL_22;
      case 0xFFFFFC1F:
LABEL_21:
        v42 = *((_QWORD *)&v100 + 1) + v100 - 1;
        v43 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v42 / 0x2A));
        v44 = v42 % 0x2A;
        v45 = *(void **)(v43 + 96 * (v42 % 0x2A) + 56);
        if (v45)
        {
LABEL_22:
          *(_QWORD *)(v43 + 96 * v44 + 64) = v45;
          operator delete(v45);
        }
LABEL_23:
        v46 = *(void **)(v43 + 96 * v44 + 32);
        if (v46)
        {
          *(_QWORD *)(v43 + 96 * v44 + 40) = v46;
          operator delete(v46);
        }
        v47 = 42 * ((uint64_t)(v99 - *((_QWORD *)&v98 + 1)) >> 3) - 1;
        v48 = v100;
        --*((_QWORD *)&v100 + 1);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v47 = 0;
        if ((unint64_t)(v47 - (*((_QWORD *)&v48 + 1) + v48) + 1) >= 0x54)
        {
          operator delete(*(void **)(v99 - 8));
          *(_QWORD *)&v99 = v99 - 8;
        }
        goto LABEL_8;
      case 0xFFFFFC20:
        *(_QWORD *)&v58 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v58 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v97[64] = v58;
        *(_OWORD *)&v97[80] = v58;
        *(_OWORD *)&v97[32] = v58;
        *(_OWORD *)&v97[48] = v58;
        *(_OWORD *)v97 = v58;
        *(_OWORD *)&v97[16] = v58;
        std::__state<char>::__state((uint64_t)v97, (__int128 *)(v36 + 96 * v37));
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*v40 + 24))(*v40, 1, v36 + 96 * v37);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)&v97[80] + 24))(*(_QWORD *)&v97[80], 0, v97);
        v59 = *((_QWORD *)&v98 + 1);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v60 = 0;
        else
          v60 = 42 * ((uint64_t)(v99 - *((_QWORD *)&v98 + 1)) >> 3) - 1;
        v61 = *((_QWORD *)&v100 + 1) + v100;
        if (v60 == *((_QWORD *)&v100 + 1) + (_QWORD)v100)
        {
          std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v98);
          v59 = *((_QWORD *)&v98 + 1);
          v61 = *((_QWORD *)&v100 + 1) + v100;
        }
        v62 = *(_QWORD *)(v59 + 8 * (v61 / 0x2A)) + 96 * (v61 % 0x2A);
        v63 = *(_OWORD *)&v97[16];
        *(_OWORD *)v62 = *(_OWORD *)v97;
        *(_OWORD *)(v62 + 16) = v63;
        *(_QWORD *)(v62 + 40) = 0;
        *(_QWORD *)(v62 + 48) = 0;
        *(_QWORD *)(v62 + 32) = 0;
        *(_OWORD *)(v62 + 32) = *(_OWORD *)&v97[32];
        *(_QWORD *)(v62 + 48) = *(_QWORD *)&v97[48];
        memset(&v97[32], 0, 24);
        *(_QWORD *)(v62 + 56) = 0;
        *(_QWORD *)(v62 + 64) = 0;
        *(_QWORD *)(v62 + 72) = 0;
        *(_OWORD *)(v62 + 56) = *(_OWORD *)&v97[56];
        *(_QWORD *)(v62 + 72) = *(_QWORD *)&v97[72];
        memset(&v97[56], 0, 24);
        v64 = *(_QWORD *)&v97[80];
        *(_QWORD *)(v62 + 85) = *(_QWORD *)&v97[85];
        *(_QWORD *)(v62 + 80) = v64;
        ++*((_QWORD *)&v100 + 1);
        if (*(_QWORD *)&v97[56])
        {
          *(_QWORD *)&v97[64] = *(_QWORD *)&v97[56];
          operator delete(*(void **)&v97[56]);
        }
        if (*(_QWORD *)&v97[32])
        {
          *(_QWORD *)&v97[40] = *(_QWORD *)&v97[32];
          operator delete(*(void **)&v97[32]);
        }
        goto LABEL_8;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
  }
}

void sub_1A344F6D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_1A344F6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  std::__state<char>::~__state((uint64_t *)va);
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v11 - 144));
  _Unwind_Resume(a1);
}

void sub_1A344F734(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_1A344F748(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  const char *v20;
  BOOL v21;
  uint64_t v22;
  char *v23;
  char *v24;
  const char *v25;
  char *v26;
  void *v27;
  void *v28;
  __int128 v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  const char *v33;
  const char *v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  unsigned int v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  void *v50;
  char *v51;
  char *v52;
  char *v53;
  void *v54;
  void *v55;
  uint64_t *v57;
  const char *v58;
  const char *v59;
  char v60;
  _BYTE v62[96];
  std::vector<std::csub_match>::value_type __x;
  _BYTE v64[40];
  void *v65[2];
  _BYTE v66[40];
  char *v67;
  char *v68;
  unint64_t v69;

  v67 = 0;
  v68 = 0;
  v69 = 0;
  *(_DWORD *)&v66[36] = -1431655766;
  *(_QWORD *)v64 = 0xAAAAAAAA00000000;
  memset(&v64[8], 0, 32);
  *(_OWORD *)v65 = 0u;
  memset(v66, 0, 36);
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
    goto LABEL_63;
  __x.second = a3;
  *(_QWORD *)&__x.matched = 0xAAAAAAAAAAAAAA00;
  __x.first = a3;
  *(_DWORD *)v62 = 0;
  memset(&v62[8], 0, 85);
  v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
  if (*(_QWORD *)&v62[56])
  {
    *(_QWORD *)&v62[64] = *(_QWORD *)&v62[56];
    operator delete(*(void **)&v62[56]);
  }
  if (*(_QWORD *)&v62[32])
  {
    *(_QWORD *)&v62[40] = *(_QWORD *)&v62[32];
    operator delete(*(void **)&v62[32]);
  }
  v12 = v68;
  *((_DWORD *)v68 - 24) = 0;
  *((_QWORD *)v12 - 11) = a2;
  *((_QWORD *)v12 - 10) = a2;
  *((_QWORD *)v12 - 9) = a3;
  v13 = *((_QWORD *)v12 - 8);
  v14 = *(unsigned int *)(a1 + 28);
  v15 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v12 - 7) - v13) >> 3);
  if (v14 <= v15)
  {
    if (v14 < v15)
      *((_QWORD *)v12 - 7) = v13 + 24 * v14;
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v12 - 64), v14 - v15, &__x);
    v12 = v68;
  }
  v16 = *((_QWORD *)v12 - 5);
  v17 = *(unsigned int *)(a1 + 32);
  v18 = (*((_QWORD *)v12 - 4) - v16) >> 4;
  v57 = a4;
  if (v17 <= v18)
  {
    if (v17 < v18)
      *((_QWORD *)v12 - 4) = v16 + 16 * v17;
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v12 - 40), v17 - v18);
    v12 = v68;
  }
  v60 = 0;
  v19 = 0;
  v20 = (const char *)(a3 - a2);
  *((_QWORD *)v12 - 2) = v6;
  *((_DWORD *)v12 - 2) = a5;
  v59 = 0;
  *(v12 - 4) = a6;
  v58 = a3;
  do
  {
    v21 = (++v19 & 0xFFF) != 0 || (int)(v19 >> 12) < (int)v20;
    if (!v21)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    v23 = v12 - 16;
    v22 = *((_QWORD *)v12 - 2);
    v24 = v12 - 96;
    if (v22)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v22 + 16))(v22, v12 - 96);
    switch(*(_DWORD *)v24)
    {
      case 0xFFFFFC18:
        v25 = (const char *)*((_QWORD *)v12 - 10);
        if ((a5 & 0x20) != 0 && v25 == a2 || (a5 & 0x1000) != 0 && v25 != v58)
          goto LABEL_29;
        v33 = &v25[-*((_QWORD *)v12 - 11)];
        v34 = v59;
        if ((v60 & ((uint64_t)v59 >= (uint64_t)v33)) == 0)
        {
          v35 = *((_OWORD *)v12 - 5);
          *(_OWORD *)v64 = *(_OWORD *)v24;
          *(_OWORD *)&v64[16] = v35;
          if (v64 != v24)
          {
            std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>((char **)&v64[32], *((char **)v12 - 8), *((char **)v12 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v12 - 7) - *((_QWORD *)v12 - 8)) >> 3));
            std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((uint64_t)v66, *((const double **)v12 - 5), *((const double **)v12 - 4), (uint64_t)(*((_QWORD *)v12 - 4) - *((_QWORD *)v12 - 5)) >> 4);
          }
          v36 = *(_QWORD *)v23;
          *(_QWORD *)&v66[29] = *(_QWORD *)(v12 - 11);
          *(_QWORD *)&v66[24] = v36;
          v34 = v33;
        }
        v37 = v68;
        if (v34 == v20)
        {
          v38 = v67;
          while (v37 != v38)
          {
            v39 = (void *)*((_QWORD *)v37 - 5);
            if (v39)
            {
              *((_QWORD *)v37 - 4) = v39;
              operator delete(v39);
            }
            v40 = (void *)*((_QWORD *)v37 - 8);
            if (v40)
            {
              *((_QWORD *)v37 - 7) = v40;
              operator delete(v40);
            }
            v37 -= 96;
          }
          v68 = v38;
          v60 = 1;
          v59 = v20;
        }
        else
        {
          v59 = v34;
          v41 = (void *)*((_QWORD *)v68 - 5);
          if (v41)
          {
            *((_QWORD *)v68 - 4) = v41;
            operator delete(v41);
          }
          v42 = (void *)*((_QWORD *)v37 - 8);
          if (v42)
          {
            *((_QWORD *)v37 - 7) = v42;
            operator delete(v42);
          }
          v68 = v37 - 96;
          v60 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_29:
        v26 = v68;
        v27 = (void *)*((_QWORD *)v68 - 5);
        if (v27)
        {
          *((_QWORD *)v68 - 4) = v27;
          operator delete(v27);
        }
        v28 = (void *)*((_QWORD *)v26 - 8);
        if (v28)
        {
          *((_QWORD *)v26 - 7) = v28;
          operator delete(v28);
        }
        v68 = v26 - 96;
        break;
      case 0xFFFFFC20:
        *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v62[64] = v29;
        *(_OWORD *)&v62[80] = v29;
        *(_OWORD *)&v62[32] = v29;
        *(_OWORD *)&v62[48] = v29;
        *(_OWORD *)v62 = v29;
        *(_OWORD *)&v62[16] = v29;
        std::__state<char>::__state((uint64_t)v62, (__int128 *)v12 - 6);
        (*(void (**)(_QWORD, uint64_t, char *))(**(_QWORD **)v23 + 24))(*(_QWORD *)v23, 1, v12 - 96);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)&v62[80] + 24))(*(_QWORD *)&v62[80], 0, v62);
        v30 = v68;
        if ((unint64_t)v68 >= v69)
        {
          v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
          if (*(_QWORD *)&v62[56])
          {
            *(_QWORD *)&v62[64] = *(_QWORD *)&v62[56];
            operator delete(*(void **)&v62[56]);
          }
        }
        else
        {
          v31 = *(_OWORD *)&v62[16];
          *(_OWORD *)v68 = *(_OWORD *)v62;
          *((_OWORD *)v30 + 1) = v31;
          *((_QWORD *)v30 + 4) = 0;
          *((_QWORD *)v30 + 5) = 0;
          *((_QWORD *)v30 + 6) = 0;
          *((_QWORD *)v30 + 7) = 0;
          *((_OWORD *)v30 + 2) = *(_OWORD *)&v62[32];
          *((_QWORD *)v30 + 6) = *(_QWORD *)&v62[48];
          memset(&v62[32], 0, 24);
          *((_QWORD *)v30 + 8) = 0;
          *((_QWORD *)v30 + 9) = 0;
          *(_OWORD *)(v30 + 56) = *(_OWORD *)&v62[56];
          *((_QWORD *)v30 + 9) = *(_QWORD *)&v62[72];
          memset(&v62[56], 0, 24);
          v32 = *(_QWORD *)&v62[80];
          *(_QWORD *)(v30 + 85) = *(_QWORD *)&v62[85];
          *((_QWORD *)v30 + 10) = v32;
          v68 = v30 + 96;
        }
        if (*(_QWORD *)&v62[32])
        {
          *(_QWORD *)&v62[40] = *(_QWORD *)&v62[32];
          operator delete(*(void **)&v62[32]);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    v12 = v68;
  }
  while (v67 != v68);
  if ((v60 & 1) == 0)
  {
LABEL_63:
    v49 = 0;
    v50 = *(void **)v66;
    if (!*(_QWORD *)v66)
      goto LABEL_65;
    goto LABEL_64;
  }
  v43 = *v57;
  *(_QWORD *)v43 = a2;
  *(_QWORD *)(v43 + 8) = &v59[(_QWORD)a2];
  *(_BYTE *)(v43 + 16) = 1;
  if (v65[0] != *(void **)&v64[32])
  {
    v44 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v65[0] - *(_QWORD *)&v64[32]) >> 3);
    v45 = (_BYTE *)(*(_QWORD *)&v64[32] + 16);
    v46 = 1;
    do
    {
      v47 = v43 + 24 * v46;
      *(_OWORD *)v47 = *((_OWORD *)v45 - 1);
      v48 = *v45;
      v45 += 24;
      *(_BYTE *)(v47 + 16) = v48;
      v21 = v44 > v46++;
    }
    while (v21);
  }
  v49 = 1;
  v50 = *(void **)v66;
  if (*(_QWORD *)v66)
  {
LABEL_64:
    *(_QWORD *)&v66[8] = v50;
    operator delete(v50);
  }
LABEL_65:
  if (*(_QWORD *)&v64[32])
  {
    v65[0] = *(void **)&v64[32];
    operator delete(*(void **)&v64[32]);
  }
  v51 = v67;
  if (v67)
  {
    v52 = v68;
    v53 = v67;
    if (v68 != v67)
    {
      do
      {
        v54 = (void *)*((_QWORD *)v52 - 5);
        if (v54)
        {
          *((_QWORD *)v52 - 4) = v54;
          operator delete(v54);
        }
        v55 = (void *)*((_QWORD *)v52 - 8);
        if (v55)
        {
          *((_QWORD *)v52 - 7) = v55;
          operator delete(v55);
        }
        v52 -= 96;
      }
      while (v52 != v51);
      v53 = v67;
    }
    v68 = v51;
    operator delete(v53);
  }
  return v49;
}

void sub_1A344FD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  std::__state<char>::~__state(&a35);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v35 - 120));
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::clear(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  char *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    v11 = 0;
  }
  else
  {
    v4 = a1[4];
    v5 = &v2[v4 / 0x2A];
    v6 = (char *)*v5 + 96 * (v4 % 0x2A);
    v7 = (unint64_t)v2[(a1[5] + v4) / 0x2A] + 96 * ((a1[5] + v4) % 0x2A);
    if (v6 != (char *)v7)
    {
      do
      {
        v8 = (void *)*((_QWORD *)v6 + 7);
        if (v8)
        {
          *((_QWORD *)v6 + 8) = v8;
          operator delete(v8);
        }
        v9 = (void *)*((_QWORD *)v6 + 4);
        if (v9)
        {
          *((_QWORD *)v6 + 5) = v9;
          operator delete(v9);
        }
        v6 += 96;
        if (v6 - (_BYTE *)*v5 == 4032)
        {
          v10 = (char *)v5[1];
          ++v5;
          v6 = v10;
        }
      }
      while (v6 != (char *)v7);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
    a1[5] = 0;
    v11 = (char *)v3 - (char *)v2;
    if (v11 >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v12 = a1[2];
        v2 = (void **)(a1[1] + 8);
        a1[1] = v2;
        v11 = v12 - (_QWORD)v2;
      }
      while (v11 > 0x10);
    }
  }
  if (v11 >> 3 == 1)
  {
    v13 = 21;
  }
  else
  {
    if (v11 >> 3 != 2)
      return;
    v13 = 42;
  }
  a1[4] = v13;
}

void **std::deque<std::__state<char>>::~deque[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  _BYTE *v5;
  _BYTE *v6;

  std::deque<std::__state<char>>::clear(a1);
  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    v6 = a1[1];
    v5 = a1[2];
    if (v5 != v6)
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::deque<std::__state<char>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  BOOL v38;
  int64_t v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v32 = (v5 - v9) >> 2;
      if (v5 == v9)
        v32 = 1;
      if (!(v32 >> 61))
      {
        v33 = v32 >> 2;
        v34 = 8 * v32;
        v35 = (char *)operator new(8 * v32);
        v36 = &v35[8 * v33];
        v37 = &v35[v34];
        v39 = v5 - v7;
        v38 = v5 == v7;
        v5 = v36;
        if (!v38)
        {
          v5 = &v36[v39 & 0xFFFFFFFFFFFFFFF8];
          v40 = v39 - 8;
          if ((unint64_t)(v39 - 8) >= 0x38)
          {
            v73 = &v35[8 * v33];
            v41 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              v74 = (v40 >> 3) + 1;
              v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              v41 = &v36[v75];
              v7 += v75;
              v76 = (__int128 *)(v6 + 3);
              v77 = v73 + 16;
              v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v41 = &v35[8 * v33];
          }
          do
          {
            v80 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v41 = v80;
            v41 += 8;
          }
          while (v41 != v5);
        }
        goto LABEL_74;
      }
LABEL_85:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v89 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v89);
      return;
    }
    v89 = operator new(0xFC0uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v89);
    v42 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v42 + 1);
    v8 = *v42;
    *(_QWORD *)(a1 + 8) = v42 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v43 = (v5 - v9) >> 2;
      if (v5 == v9)
        v43 = 1;
      if (!(v43 >> 61))
      {
        v44 = v43 >> 2;
        v45 = 8 * v43;
        v35 = (char *)operator new(8 * v43);
        v36 = &v35[8 * v44];
        v37 = &v35[v45];
        v46 = v5 - v7;
        v38 = v5 == v7;
        v5 = v36;
        if (!v38)
        {
          v5 = &v36[v46 & 0xFFFFFFFFFFFFFFF8];
          v47 = v46 - 8;
          if ((unint64_t)(v46 - 8) >= 0x38)
          {
            v81 = &v35[8 * v44];
            v48 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              v82 = (v47 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v48 = &v36[v83];
              v7 += v83;
              v84 = (__int128 *)(v42 + 3);
              v85 = v81 + 16;
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v48 = &v35[8 * v44];
          }
          do
          {
            v88 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v48 = v88;
            v48 += 8;
          }
          while (v48 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v35;
        *(_QWORD *)(a1 + 8) = v36;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v37;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_85;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFC0uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v30 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v49 = 1;
      else
        v49 = v20 >> 2;
      if (v49 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v27 = (char *)operator new(8 * v49);
      v28 = &v27[8 * v49];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v27;
      *(_QWORD *)v27 = v30;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v31 = v21 + 2;
      if (v21 >= -1)
        v31 = v21 + 1;
      v27 -= 8 * (v31 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    goto LABEL_49;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
  {
    do
    {
LABEL_49:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v25)
            v57 = 1;
          else
            v57 = (v28 - v25) >> 2;
          if (v57 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v58 = (char *)operator new(8 * v57);
          v59 = v58;
          v60 = (v57 + 3) >> 2;
          v27 = &v58[8 * v60];
          v61 = v29 - v25;
          v38 = v29 == v25;
          v29 = v27;
          if (!v38)
          {
            v29 = &v27[v61 & 0xFFFFFFFFFFFFFFF8];
            v62 = v61 - 8;
            v63 = &v58[8 * v60];
            v64 = v25;
            if (v62 < 0x38)
              goto LABEL_89;
            v65 = 8 * v60;
            v63 = &v58[8 * v60];
            v64 = v25;
            if ((unint64_t)(v63 - v25) < 0x20)
              goto LABEL_89;
            v66 = (v62 >> 3) + 1;
            v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
            v63 = &v27[v67];
            v64 = &v25[v67];
            v68 = (__int128 *)(v25 + 16);
            v69 = &v58[v65 + 16];
            v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v71 = *v68;
              *((_OWORD *)v69 - 1) = *(v68 - 1);
              *(_OWORD *)v69 = v71;
              v68 += 2;
              v69 += 32;
              v70 -= 4;
            }
            while (v70);
            if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_89:
              do
              {
                v72 = *(_QWORD *)v64;
                v64 += 8;
                *(_QWORD *)v63 = v72;
                v63 += 8;
              }
              while (v63 != v29);
            }
          }
          v28 = &v58[8 * v57];
          operator delete(v25);
          v25 = v59;
        }
        else
        {
          v53 = (v28 - v29) >> 3;
          if (v53 >= -1)
            v54 = v53 + 1;
          else
            v54 = v53 + 2;
          v55 = v54 >> 1;
          v27 = &v25[8 * (v54 >> 1)];
          v56 = v25;
          if (v29 != v25)
          {
            memmove(v27, v25, v29 - v25);
            v56 = v29;
          }
          v29 = (char *)v56 + 8 * v55;
        }
      }
      v52 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v27 - 1) = v52;
      v27 -= 8;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
  }
LABEL_45:
  v51 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v27;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v51)
    operator delete(v51);
}

void sub_1A3450478(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_22;
  v5 = *a1;
  v6 = a1[1];
  if (v6 > *a1)
  {
    v7 = (v6 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v6[-8 * v9];
    v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  v14 = (v4 - v5) >> 2;
  if (v4 == v5)
    v14 = 1;
  if (v14 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v6;
  v19 = v4 == v6;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        v31 = *(_QWORD *)v6;
        v6 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20)
      goto LABEL_19;
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = &v6[v25];
    v27 = (__int128 *)(v6 + 16);
    v28 = v23 + 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_19;
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    v4 = a1[2];
  }
LABEL_22:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    v7 = a1[2];
    v6 = a1[3];
    if (v7 >= v6)
    {
      v13 = v6 - v4;
      v12 = v13 == 0;
      v14 = v13 >> 2;
      if (v12)
        v14 = 1;
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = (v14 + 3) >> 2;
      v16 = 8 * v14;
      v17 = (char *)operator new(8 * v14);
      v5 = &v17[8 * v15];
      v18 = v5;
      v19 = v7 - v4;
      if (v7 != v4)
      {
        v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        v20 = v19 - 8;
        v21 = &v17[8 * v15];
        v22 = v4;
        if (v20 < 0x38)
          goto LABEL_27;
        v23 = &v17[8 * v15];
        v21 = v23;
        v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20)
          goto LABEL_27;
        v24 = (v20 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v5[v25];
        v22 = &v4[v25];
        v26 = (__int128 *)(v4 + 16);
        v27 = v23 + 16;
        v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            v30 = *(_QWORD *)v22;
            v22 += 8;
            *(_QWORD *)v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        v5 = (char *)a1[1];
      }
    }
    else
    {
      v8 = (v6 - v7) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v11 = &v7[8 * (v9 >> 1)];
      v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    v5 = (char *)a1[1];
  }
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void std::deque<std::__state<char>>::__add_front_capacity(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  BOOL v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  void *v46;
  void *v47;

  v3 = *(uint64_t **)(a1 + 8);
  v2 = *(uint64_t **)(a1 + 16);
  v4 = v2 - v3;
  if (v2 == v3)
    v5 = 0;
  else
    v5 = 42 * v4 - 1;
  v6 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v5 - (*(_QWORD *)(a1 + 40) + v6)) >= 0x2A)
  {
    *(_QWORD *)(a1 + 32) = v6 + 42;
    v47 = (void *)*(v2 - 1);
    *(_QWORD *)(a1 + 16) = v2 - 1;
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
    return;
  }
  v7 = *(uint64_t **)(a1 + 24);
  v8 = *(uint64_t **)a1;
  v9 = (uint64_t)v7 - *(_QWORD *)a1;
  if (v4 < v9 >> 3)
  {
    if (v3 == v8)
    {
      v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v47);
      v43 = *(_QWORD *)(a1 + 16);
      v47 = *(void **)(v43 - 8);
      *(_QWORD *)(a1 + 16) = v43 - 8;
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
        goto LABEL_9;
    }
    else
    {
      v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
      {
LABEL_9:
        v10 = 21;
LABEL_45:
        *(_QWORD *)(a1 + 32) = v10;
        return;
      }
    }
    v10 = *(_QWORD *)(a1 + 32) + 42;
    goto LABEL_45;
  }
  if (v7 == v8)
    v11 = 1;
  else
    v11 = v9 >> 2;
  if (v11 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v12 = (char *)operator new(8 * v11);
  v13 = operator new(0xFC0uLL);
  v14 = v13;
  if (v11)
  {
    v15 = &v12[8 * v11];
    *(_QWORD *)v12 = v13;
    v16 = v12 + 8;
    if (v3 != v2)
    {
LABEL_16:
      v17 = v12;
      while (1)
      {
        if (v16 == v15)
        {
          if (v17 <= v12)
          {
            if (v16 == v12)
              v26 = 1;
            else
              v26 = (v16 - v12) >> 2;
            if (v26 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v27 = (char *)operator new(8 * v26);
            v28 = v27;
            v29 = v26 >> 2;
            v18 = &v27[8 * (v26 >> 2)];
            v31 = v16 - v17;
            v30 = v16 == v17;
            v16 = v18;
            if (!v30)
            {
              v16 = &v18[v31 & 0xFFFFFFFFFFFFFFF8];
              v32 = v31 - 8;
              if (v32 < 0x38 || (v33 = 8 * v29, (unint64_t)(&v27[8 * v29] - v17) < 0x20))
              {
                v34 = &v27[8 * (v26 >> 2)];
                v35 = v17;
                goto LABEL_35;
              }
              v37 = (v32 >> 3) + 1;
              v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
              v34 = &v18[v38];
              v35 = &v17[v38];
              v39 = (__int128 *)(v17 + 16);
              v40 = &v27[v33 + 16];
              v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v42 = *v39;
                *((_OWORD *)v40 - 1) = *(v39 - 1);
                *(_OWORD *)v40 = v42;
                v39 += 2;
                v40 += 32;
                v41 -= 4;
              }
              while (v41);
              if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_35:
                  v36 = *(_QWORD *)v35;
                  v35 += 8;
                  *(_QWORD *)v34 = v36;
                  v34 += 8;
                }
                while (v34 != v16);
              }
            }
            v15 = &v27[8 * v26];
            if (v12)
              operator delete(v12);
            v12 = v28;
            goto LABEL_18;
          }
          v20 = (v17 - v12) >> 3;
          if (v20 >= -1)
            v21 = v20 + 1;
          else
            v21 = v20 + 2;
          v22 = v21 >> 1;
          v23 = &v17[-8 * (v21 >> 1)];
          v24 = v16;
          if (v16 != v17)
          {
            memmove(v23, v17, v16 - v17);
            v24 = v17;
          }
          v25 = -v22;
          v15 = v16;
          v16 = &v23[v16 - v17];
          v18 = &v24[8 * v25];
        }
        else
        {
          v18 = v17;
        }
LABEL_18:
        v19 = *v3++;
        *(_QWORD *)v16 = v19;
        v16 += 8;
        v17 = v18;
        if (v3 == *(uint64_t **)(a1 + 16))
          goto LABEL_48;
      }
    }
  }
  else
  {
    v44 = (char *)operator new(8uLL);
    v15 = v44 + 8;
    operator delete(v12);
    v3 = *(uint64_t **)(a1 + 8);
    v45 = *(uint64_t **)(a1 + 16);
    v12 = v44;
    *(_QWORD *)v44 = v14;
    v16 = v44 + 8;
    if (v3 != v45)
      goto LABEL_16;
  }
  v18 = v12;
LABEL_48:
  v46 = *(void **)a1;
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v18;
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(a1 + 24) = v15;
  if (v16 - v18 == 8)
  {
    *(_QWORD *)(a1 + 32) = 21;
    if (v46)
LABEL_50:
      operator delete(v46);
  }
  else
  {
    *(_QWORD *)(a1 + 32) += 42;
    if (v46)
      goto LABEL_50;
  }
}

void sub_1A3450B2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char **a1, char *a2, char *a3, size_t __sz)
{
  char *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int64_t v16;
  _QWORD *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    v18 = a1[1];
    v17 = a1 + 1;
    v14 = v18;
    v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 3);
    if (v19 >= __sz)
    {
      v24 = result;
      if (a2 != a3)
      {
        v25 = result;
        do
        {
          *(_OWORD *)v25 = *(_OWORD *)v6;
          v25[16] = v6[16];
          v24 += 24;
          v6 += 24;
          v25 += 24;
        }
        while (v6 != a3);
      }
      v16 = v24 - result;
      v14 = result;
    }
    else
    {
      v20 = &a2[24 * v19];
      if (v14 != result)
      {
        do
        {
          *(_OWORD *)result = *(_OWORD *)v6;
          result[16] = v6[16];
          v6 += 24;
          result += 24;
        }
        while (v6 != v20);
      }
      v21 = v14;
      if (v20 != a3)
      {
        v22 = v14;
        do
        {
          v23 = *(_OWORD *)v20;
          *((_QWORD *)v22 + 2) = *((_QWORD *)v20 + 2);
          *(_OWORD *)v22 = v23;
          v22 += 24;
          v20 += 24;
          v21 += 24;
        }
        while (v20 != a3);
      }
      v16 = v21 - v14;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    v13 = 24 * v12;
    result = (char *)operator new(24 * v12);
    v14 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v15 = result;
    if (v6 != a3)
    {
      result = (char *)memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      v15 = &v14[24 * ((a3 - v6 - 24) / 0x18uLL) + 24];
    }
    v16 = v15 - v14;
    v17 = a1 + 1;
  }
  *v17 = &v14[v16];
  return result;
}

double *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(uint64_t a1, const double *a2, const double *a3, size_t __sz)
{
  uint64_t v8;
  double *result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double *v13;
  double *v14;
  int64_t v15;
  _QWORD *v16;
  double *v17;
  int64_t v18;
  unint64_t v19;
  const double *v20;
  unint64_t v21;
  double *v22;
  const double *v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double *v27;
  __int128 v28;
  unint64_t v29;
  char *v30;
  const double *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  BOOL v37;
  char v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  const double *v42;
  double *v43;
  uint64_t v44;
  const double *v45;
  double *v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  BOOL v51;
  char v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  const double *v56;
  double *v57;
  uint64_t v58;
  const double *v59;
  double *v60;
  float64x2x2_t v61;
  float64x2x2_t v62;
  float64x2x2_t v63;
  float64x2x2_t v64;

  v8 = *(_QWORD *)(a1 + 16);
  result = *(double **)a1;
  if (__sz > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz >> 60)
      goto LABEL_62;
    v10 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v10 = __sz;
    v37 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v11 = 0xFFFFFFFFFFFFFFFLL;
    if (!v37)
      v11 = v10;
    if (v11 >> 60)
LABEL_62:
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    v12 = 2 * v11;
    result = (double *)operator new(16 * v11);
    v13 = result;
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v12];
    v14 = result;
    if (a2 != a3)
    {
      result = (double *)memcpy(result, a2, ((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0);
      v14 = (double *)((char *)v13 + (((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0));
    }
    v15 = (char *)v14 - (char *)v13;
    v16 = (_QWORD *)(a1 + 8);
    goto LABEL_29;
  }
  v17 = *(double **)(a1 + 8);
  v16 = (_QWORD *)(a1 + 8);
  v13 = v17;
  v18 = (char *)v17 - (char *)result;
  v19 = ((char *)v17 - (char *)result) >> 4;
  if (v19 >= __sz)
  {
    if (a2 == a3)
    {
      v30 = (char *)result;
    }
    else
    {
      v29 = (char *)a3 - (char *)a2 - 16;
      if (v29 < 0xF0
        || ((v47 = v29 & 0xFFFFFFFFFFFFFFF0 | 8,
             v48 = (char *)result + v47,
             v49 = (unint64_t)a2 + v47,
             v50 = (v29 & 0xFFFFFFFFFFFFFFF0) + 16,
             result + 1 < (const double *)((char *)a2 + v50))
          ? (v51 = a2 + 1 >= (double *)((char *)result + v50))
          : (v51 = 1),
            v51 ? (v52 = 0) : (v52 = 1),
            v48 > (char *)a2 ? (v53 = (unint64_t)result >= v49) : (v53 = 1),
            !v53 || (v52 & 1) != 0))
      {
        v30 = (char *)result;
        v31 = a2;
      }
      else
      {
        v54 = (v29 >> 4) + 1;
        v55 = 2 * (v54 & 0x1FFFFFFFFFFFFFFCLL);
        v30 = (char *)&result[v55];
        v31 = &a2[v55];
        v56 = a2 + 4;
        v57 = result + 4;
        v58 = v54 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v59 = v56 - 4;
          v62 = vld2q_f64(v59);
          v64 = vld2q_f64(v56);
          v60 = v57 - 4;
          vst2q_f64(v60, v62);
          vst2q_f64(v57, v64);
          v56 += 8;
          v57 += 8;
          v58 -= 4;
        }
        while (v58);
        if (v54 == (v54 & 0x1FFFFFFFFFFFFFFCLL))
          goto LABEL_28;
      }
      do
      {
        v32 = *(_QWORD *)v31;
        v33 = *((_QWORD *)v31 + 1);
        v31 += 2;
        *(_QWORD *)v30 = v32;
        *((_QWORD *)v30 + 1) = v33;
        v30 += 16;
      }
      while (v31 != a3);
    }
LABEL_28:
    v15 = v30 - (char *)result;
    v13 = result;
    goto LABEL_29;
  }
  v20 = &a2[2 * v19];
  if (v13 != result)
  {
    v21 = v18 - 16;
    if ((unint64_t)(v18 - 16) < 0xF0
      || ((v34 = v18 & 0xFFFFFFFFFFFFFFF0,
           v35 = (char *)result + v34 - 8,
           v36 = (unint64_t)a2 + v34 - 8,
           result + 1 < (const double *)((char *)a2 + v34))
        ? (v37 = a2 + 1 >= (double *)((char *)result + v34))
        : (v37 = 1),
          v37 ? (v38 = 0) : (v38 = 1),
          v35 > (char *)a2 ? (v39 = (unint64_t)result >= v36) : (v39 = 1),
          !v39 || (v38 & 1) != 0))
    {
      v22 = result;
      v23 = a2;
    }
    else
    {
      v40 = (v21 >> 4) + 1;
      v41 = 2 * (v40 & 0x1FFFFFFFFFFFFFFCLL);
      v22 = &result[v41];
      v23 = &a2[v41];
      v42 = a2 + 4;
      v43 = result + 4;
      v44 = v40 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v45 = v42 - 4;
        v61 = vld2q_f64(v45);
        v63 = vld2q_f64(v42);
        v46 = v43 - 4;
        vst2q_f64(v46, v61);
        vst2q_f64(v43, v63);
        v42 += 8;
        v43 += 8;
        v44 -= 4;
      }
      while (v44);
      if (v40 == (v40 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_18;
    }
    do
    {
      v24 = *(_QWORD *)v23;
      v25 = *((_QWORD *)v23 + 1);
      v23 += 2;
      *(_QWORD *)v22 = v24;
      *((_QWORD *)v22 + 1) = v25;
      v22 += 2;
    }
    while (v23 != v20);
  }
LABEL_18:
  v26 = v13;
  if (v20 != a3)
  {
    v27 = v13;
    do
    {
      v28 = *(_OWORD *)v20;
      v20 += 2;
      *(_OWORD *)v27 = v28;
      v27 += 2;
      v26 += 2;
    }
    while (v20 != a3);
  }
  v15 = (char *)v26 - (char *)v13;
LABEL_29:
  *v16 = (char *)v13 + v15;
  return result;
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __n)
{
  std::sub_match<std::__wrap_iter<const char *>> *value;
  std::vector<std::ssub_match>::pointer end;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::sub_match<std::__wrap_iter<const char *>> *v11;
  std::vector<std::ssub_match>::size_type v12;
  std::sub_match<std::__wrap_iter<const char *>> *v13;
  std::vector<std::ssub_match>::size_type v14;
  std::sub_match<std::__wrap_iter<const char *>> *v15;
  std::sub_match<std::__wrap_iter<const char *>> *v16;
  std::vector<std::ssub_match>::pointer begin;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v18;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      v11 = &end[__n];
      v12 = 24 * __n;
      do
      {
        end->first.__i_ = 0;
        end->second.__i_ = 0;
        end->matched = 0;
        ++end;
        v12 -= 24;
      }
      while (v12);
      end = v11;
    }
    this->__end_ = end;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    v7 = v6 + __n;
    if (v6 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v13 = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v6];
    v14 = 24 * __n;
    v15 = &v13[__n];
    v16 = v13;
    do
    {
      v16->first.__i_ = 0;
      v16->second.__i_ = 0;
      v16->matched = 0;
      ++v16;
      v14 -= 24;
    }
    while (v14);
    begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        v18 = end[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
        *(_QWORD *)&v13[-1].matched = *(_QWORD *)&end[-1].matched;
        v13[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v18;
        --v13;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v15;
    this->__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v9];
    if (end)
      operator delete(end);
  }
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _QWORD v13[2];
  std::locale v14;

  v13[0] = 0xAAAAAAAAAAAAAAAALL;
  v13[1] = 0xAAAAAAAAAAAAAAAALL;
  MEMORY[0x1A858F770](v13, a1);
  if (LOBYTE(v13[0]))
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1A858F77C](v13);
  return a1;
}

void sub_1A34512D4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x1A858F77C](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1A34512B4);
}

void sub_1A345131C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__b[3];

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if ((uint64_t)v12 >= 1)
    {
      memset(__b, 170, sizeof(__b));
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        __b[2] = (void *)(v15 | 0x8000000000000000);
        __b[0] = v13;
      }
      else
      {
        HIBYTE(__b[2]) = v12;
        v13 = __b;
      }
      memset(v13, __c, v12);
      *((_BYTE *)v13 + v12) = 0;
      if (SHIBYTE(__b[2]) >= 0)
        v16 = __b;
      else
        v16 = (void **)__b[0];
      v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 96))(v6, v16, v12);
      v18 = v17;
      if (SHIBYTE(__b[2]) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12)
          return 0;
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(_QWORD *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_1A34514C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void abm::debug::registerLogServer(uint64_t a1)
{
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  block[4] = a1;
  if (abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce != -1)
    dispatch_once(&abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
}

void ___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  capabilities::abs *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  capabilities::radio *v25;
  capabilities::radio *v26;
  xpc_object_t v27;
  _QWORD v28[2];
  xpc_object_t object;
  xpc_object_t xdict;

  xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::LogServer::getConfig(**(ctu::LogServer ***)(a1 + 32));
  v28[0] = &xdict;
  v28[1] = "kDomainLogLevels";
  object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc::dict::object_proxy::operator xpc::dict((uint64_t)v28, &object);
  v2 = MEMORY[0x1A85902BC](object);
  v3 = MEMORY[0x1E0C812F8];
  if (v2 != MEMORY[0x1E0C812F8])
  {
    v4 = xpc_dictionary_create(0, 0, 0);
    if (v4 || (v4 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1A85902BC](v4) == v3)
      {
        xpc_retain(v4);
        v5 = v4;
      }
      else
      {
        v5 = xpc_null_create();
      }
    }
    else
    {
      v5 = xpc_null_create();
      v4 = 0;
    }
    xpc_release(v4);
    v6 = xpc_null_create();
    v7 = object;
    object = v5;
    xpc_release(v7);
    xpc_release(v6);
  }
  v8 = xpc_int64_create(1);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(object, "libetl", v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  v10 = xpc_int64_create(1);
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(object, "libtu", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  v12 = xpc_int64_create(1);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(object, "trace.diag.cfg", v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  v14 = xpc_int64_create(1);
  if (!v14)
    v14 = xpc_null_create();
  xpc_dictionary_set_value(object, "trace.diag.svc", v14);
  v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  v16 = xpc_int64_create(1);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(object, "libktl", v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  v18 = object;
  if (object)
    xpc_retain(object);
  else
    v18 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kDomainLogLevels", v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  v27 = xdict;
  if (xdict)
    xpc_retain(xdict);
  else
    v27 = xpc_null_create();
  ctu::LogServer::updateConfig();
  xpc_release(v27);
  v20 = (capabilities::abs *)operator new(0x10uLL);
  v21 = *(_QWORD **)(a1 + 32);
  *(_QWORD *)v20 = *v21;
  v22 = v21[1];
  *((_QWORD *)v20 + 1) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 16);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  _MergedGlobals_0 = (uint64_t)v20;
  if (!qword_1ED114930)
  {
    v20 = (capabilities::abs *)os_log_create("com.apple.telephony.abm", "libtu");
    qword_1ED114930 = (uint64_t)v20;
  }
  capabilities::abs::TUDebugFlags(v20);
  TelephonyUtilDebugSetFlags();
  v25 = (capabilities::radio *)TelephonyUtilDebugRegisterDelegate();
  v26 = (capabilities::radio *)capabilities::radio::ice(v25);
  if ((_DWORD)v26)
  {
    if (!qword_1ED114938)
      qword_1ED114938 = (uint64_t)os_log_create("com.apple.telephony.abm", "libktl");
    KTLDebugRegisterDelegate();
    KTLDebugSetFlags();
  }
  else if (capabilities::radio::maverick(v26))
  {
    if (!qword_1ED114940)
      qword_1ED114940 = (uint64_t)os_log_create("com.apple.telephony.abm", "libetl");
    ETLDebugRegisterDelegate();
  }
  if (!qword_1ED114948)
    qword_1ED114948 = (uint64_t)os_log_create("com.apple.telephony.abm", "bbu");
  BBUpdaterRegisterGlobalLogSink();
  xpc_release(object);
  xpc_release(xdict);
}

void sub_1A3451998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, xpc_object_t a13, xpc_object_t a14)
{
  xpc_release(object);
  xpc_release(a13);
  xpc_release(a14);
  _Unwind_Resume(a1);
}

void xpc::dict::object_proxy::operator xpc::dict(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t v4;
  xpc_object_t v5;

  value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  if (value)
  {
    v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }
  else
  {
    v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
      v5 = xpc_null_create();
      v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A85902BC](v4) != MEMORY[0x1E0C812F8])
  {
    v5 = xpc_null_create();
LABEL_8:
    *a2 = v5;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
}

void abm::debug::handleDebugPrintTelephonyUtil(abm::debug *this, const char *a2, const char *a3, char *a4)
{
  abm::debug::handleDebugPrint(20, 0, this, (uint64_t)a2, (uint64_t)a3);
}

void abm::debug::handleDebugPrintBinaryTelephonyUtil(uint64_t a1, int a2, uint64_t a3, int a4)
{
  const char *v6;
  const char *v7;

  v6 = "misc";
  if (!a2)
    v6 = "send";
  if (a2 == 1)
    v7 = "recv";
  else
    v7 = v6;
  abm::debug::handleDebugPrintBinary(a1, 0, (uint64_t)v7, a3, a4);
}

void abm::debug::handleDebugPrintKTL(abm::debug *this, const char *a2, const char *a3, char *a4)
{
  abm::debug::handleDebugPrint(20, 2, this, (uint64_t)a2, (uint64_t)a3);
}

void abm::debug::handleErrorPrintKTL(abm::debug *this, const char *a2, const char *a3, char *a4)
{
  abm::debug::handleDebugPrint(80, 2, this, (uint64_t)a2, (uint64_t)a3);
}

void abm::debug::handleDebugPrintBinaryKTL(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  char *v6;

  if (a2 > 3)
    v6 = (char *)&unk_1A3584B3E;
  else
    v6 = off_1E4A06DD8[a2];
  abm::debug::handleDebugPrintBinary(a1, 2, (uint64_t)v6, a3, a4);
}

void abm::debug::handleDebugPrintETL(abm::debug *this, const char *a2, const char *a3, char *a4)
{
  abm::debug::handleDebugPrint(20, 1, this, (uint64_t)a2, (uint64_t)a3);
}

void abm::debug::handleDebugPrintBinaryETL(uint64_t a1, int a2, uint64_t a3, int a4)
{
  const char *v6;
  const char *v7;

  v6 = "misc";
  if (!a2)
    v6 = "send";
  if (a2 == 1)
    v7 = "recv";
  else
    v7 = v6;
  abm::debug::handleDebugPrintBinary(a1, 1, (uint64_t)v7, a3, a4);
}

uint64_t abm::debug::handleDebugPrintBBU(abm::debug *this, void *a2, const char *a3, const char *a4)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  abm::debug *v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  size_t v19;
  void **v20;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  void *__dst[3];
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *__p[2];
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v35 = 0xAAAAAAAAAAAAAAAALL;
  v45 = v5;
  v44 = v5;
  v43 = v5;
  v42 = v5;
  v41 = v5;
  v40 = v5;
  v39 = v5;
  v38 = v5;
  v37 = v5;
  *(_OWORD *)__p = v5;
  v34 = v5;
  v31 = v5;
  v32 = v5;
  v29 = v5;
  v30 = v5;
  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v36 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v28 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v28 + *(_QWORD *)(v28 - 24)) = v9;
  v10 = (std::ios_base *)((char *)&v28 + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v10, &v29);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v28 = v6 + 24;
  v36 = v7;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v29 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v34 = 0u;
  LODWORD(v35) = 16;
  v12 = (_QWORD *)std::ostream::operator<<();
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)":", 1);
  v14 = strlen(a3);
  v15 = (abm::debug *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)a3, v14);
  memset(__dst, 170, sizeof(__dst));
  if ((v35 & 0x10) != 0)
  {
    v21 = *((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1) < (unint64_t)v32)
    {
      *((_QWORD *)&v34 + 1) = v32;
      v21 = v32;
    }
    v22 = (const void *)*((_QWORD *)&v31 + 1);
    v19 = v21 - *((_QWORD *)&v31 + 1);
    if ((unint64_t)(v21 - *((_QWORD *)&v31 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v35 & 8) == 0)
    {
      v19 = 0;
      HIBYTE(__dst[2]) = 0;
      v20 = __dst;
      goto LABEL_14;
    }
    v22 = (const void *)v30;
    v19 = v31 - v30;
    if ((_QWORD)v31 - (_QWORD)v30 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_22:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v19 >= 0x17)
  {
    v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v23 = v19 | 7;
    v24 = v23 + 1;
    v20 = (void **)operator new(v23 + 1);
    __dst[1] = (void *)v19;
    __dst[2] = (void *)(v24 | 0x8000000000000000);
    __dst[0] = v20;
    goto LABEL_13;
  }
  HIBYTE(__dst[2]) = v19;
  v20 = __dst;
  if (v19)
LABEL_13:
    v15 = (abm::debug *)memmove(v20, v22, v19);
LABEL_14:
  *((_BYTE *)v20 + v19) = 0;
  v25 = __dst;
  if (SHIBYTE(__dst[2]) < 0)
    v25 = (void **)__dst[0];
  abm::debug::handleDebugPrintBBUHelper(v15, v16, v17, v18, v25);
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
  v28 = *v8;
  *(uint64_t *)((char *)&v28 + *(_QWORD *)(v28 - 24)) = v8[3];
  *(_QWORD *)&v29 = v11 + 16;
  if (SBYTE7(v34) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A858F92C](&v36);
}

void sub_1A3451E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void abm::debug::handleDebugPrint(uint64_t a1, int a2, _BYTE *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v11;
  __int128 v12;
  uint64_t v13;
  ctu::Clock *v14;
  std::string *v15;
  const char *v16;
  size_t v17;
  void *v18;
  void **v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::string *v24;
  int v25;
  size_t size;
  std::string *data;
  _BYTE *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  char *v31;
  int v32;
  char *v33;
  std::string::size_type v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  NSObject *v40;
  std::string::__raw *v41;
  std::string::size_type v42;
  std::string::pointer v43;
  NSObject *v44;
  std::string::__raw *v45;
  std::string::__raw *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::string::pointer v52;
  std::string::__raw *v53;
  std::__shared_weak_count *v54;
  void *__dst[2];
  unint64_t v56;
  std::string *v57;
  std::__shared_weak_count *v58;
  _OWORD v59[3];
  unint64_t v60;
  std::__shared_weak_count *v62;
  uint8_t buf[4];
  std::string::__raw *v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)_MergedGlobals_0;
  if (_MergedGlobals_0)
  {
    v6 = *(std::__shared_weak_count **)(_MergedGlobals_0 + 8);
    if (v6)
    {
      v11 = std::__shared_weak_count::lock(v6);
      v62 = v11;
      if (v11)
      {
        if (*v5)
        {
          v60 = 0xAAAAAAAAAAAAAAAALL;
          *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v59[1] = v12;
          v59[2] = v12;
          v59[0] = v12;
          ctu::LogMessageBuffer::LogMessageBuffer((ctu::LogMessageBuffer *)v59);
          if (a3 && *a3)
          {
            v13 = MEMORY[0x1A858F458](v59, a3);
            MEMORY[0x1A858F458](v13, ": ");
          }
          MEMORY[0x1A858F200](&v57, a4, a5);
          ctu::operator<<();
          v14 = (ctu::Clock *)MEMORY[0x1A858F218](&v57);
          ctu::Clock::now_in_nanoseconds(v14);
          v15 = (std::string *)operator new(0x60uLL);
          v16 = abm::debug::kLogDomainMap[a2];
          v17 = strlen(v16);
          if (v17 >= 0x7FFFFFFFFFFFFFF8)
            std::string::__throw_length_error[abi:ne180100]();
          v18 = (void *)v17;
          if (v17 >= 0x17)
          {
            v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v17 | 7) != 0x17)
              v21 = v17 | 7;
            v22 = v21 + 1;
            v19 = (void **)operator new(v21 + 1);
            __dst[1] = v18;
            v56 = v22 | 0x8000000000000000;
            __dst[0] = v19;
          }
          else
          {
            HIBYTE(v56) = v17;
            v19 = __dst;
            if (!v17)
            {
LABEL_17:
              *((_BYTE *)v18 + (_QWORD)v19) = 0;
              MEMORY[0x1A858F1E8](v59);
              ctu::LogMessageBuffer::takeMetadata((ctu::LogMessageBuffer *)v59);
              ctu::LogMessage::LogMessage();
              v57 = v15;
              v23 = (std::__shared_weak_count *)operator new(0x20uLL);
              v23->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A06D98;
              v23->__shared_owners_ = 0;
              v23->__shared_weak_owners_ = 0;
              v23[1].__vftable = (std::__shared_weak_count_vtbl *)v15;
              v58 = v23;
              if (SHIBYTE(v56) < 0)
              {
                operator delete(__dst[0]);
                v24 = v15 + 2;
                v25 = SHIBYTE(v15[2].__r_.__value_.__r.__words[2]);
                if ((v25 & 0x80000000) == 0)
                  goto LABEL_19;
              }
              else
              {
                v24 = v15 + 2;
                v25 = SHIBYTE(v15[2].__r_.__value_.__r.__words[2]);
                if ((v25 & 0x80000000) == 0)
                {
LABEL_19:
                  size = v25;
                  data = v24;
                  goto LABEL_22;
                }
              }
              data = (std::string *)v15[2].__r_.__value_.__l.__data_;
              size = v15[2].__r_.__value_.__l.__size_;
LABEL_22:
              v28 = memchr(data, 10, size);
              if (v28)
                v29 = (unint64_t)v28;
              else
                v29 = (unint64_t)data + size;
              if (v29 - (_QWORD)data != size)
              {
                v30 = (unsigned __int8 *)(v29 + 1);
                if ((std::string *)(v29 + 1) != (std::string *)((char *)data + size))
                {
                  v31 = (char *)data + size + ~v29;
                  do
                  {
                    v32 = *v30;
                    if (v32 != 10)
                      *(_BYTE *)v29++ = v32;
                    ++v30;
                    --v31;
                  }
                  while (v31);
                  LOBYTE(v25) = *((_BYTE *)&v15[2].__r_.__value_.__s + 23);
                }
              }
              if ((v25 & 0x80) != 0)
              {
                v43 = v15[2].__r_.__value_.__l.__data_;
                v42 = v15[2].__r_.__value_.__l.__size_;
                v33 = &v43[v42];
                v34 = v29 - (_QWORD)v43;
                if (v42 >= v29 - (unint64_t)v43)
                {
LABEL_34:
                  if (&v33[-v29] == (char *)-1)
                  {
                    if ((v25 & 0x80) != 0)
                    {
                      v52 = v15[2].__r_.__value_.__l.__data_;
                      v15[2].__r_.__value_.__l.__size_ = v34;
                      v52[v34] = 0;
                      v35 = v58;
                      v54 = v58;
                      if (!v58)
                        goto LABEL_38;
                    }
                    else
                    {
                      *((_BYTE *)&v15[2].__r_.__value_.__s + 23) = v34 & 0x7F;
                      v24->__r_.__value_.__s.__data_[v34] = 0;
                      v35 = v58;
                      v54 = v58;
                      if (!v58)
                        goto LABEL_38;
                    }
                  }
                  else
                  {
                    std::string::__erase_external_with_move(v24, v34, (std::string::size_type)&v33[-v29]);
                    v35 = v58;
                    v54 = v58;
                    if (!v58)
                      goto LABEL_38;
                  }
                  p_shared_owners = (unint64_t *)&v35->__shared_owners_;
                  do
                    v37 = __ldxr(p_shared_owners);
                  while (__stxr(v37 + 1, p_shared_owners));
LABEL_38:
                  ctu::LogServer::log();
                  if (v54)
                  {
                    v38 = (unint64_t *)&v54->__shared_owners_;
                    do
                      v39 = __ldaxr(v38);
                    while (__stlxr(v39 - 1, v38));
                    if (!v39)
                    {
                      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                      std::__shared_weak_count::__release_weak(v54);
                    }
                  }
                  switch(a2)
                  {
                    case 0:
                      v40 = qword_1ED114930;
                      if (!qword_1ED114930 || !os_log_type_enabled((os_log_t)qword_1ED114930, OS_LOG_TYPE_DEFAULT))
                        goto LABEL_68;
                      v41 = (std::string::__raw *)&v57[2];
                      if (SHIBYTE(v57[2].__r_.__value_.__r.__words[2]) < 0)
                        v41 = (std::string::__raw *)v41->__words[0];
                      *(_DWORD *)buf = 136315138;
                      v64 = v41;
                      goto LABEL_64;
                    case 1:
                      v44 = qword_1ED114940;
                      if (!qword_1ED114940 || !os_log_type_enabled((os_log_t)qword_1ED114940, OS_LOG_TYPE_DEBUG))
                        goto LABEL_68;
                      v53 = (std::string::__raw *)&v57[2];
                      if (SHIBYTE(v57[2].__r_.__value_.__r.__words[2]) < 0)
                        v53 = (std::string::__raw *)v53->__words[0];
                      *(_DWORD *)buf = 136315138;
                      v64 = v53;
                      goto LABEL_84;
                    case 2:
                      v44 = qword_1ED114938;
                      if (!qword_1ED114938 || !os_log_type_enabled((os_log_t)qword_1ED114938, OS_LOG_TYPE_DEBUG))
                        goto LABEL_68;
                      v45 = (std::string::__raw *)&v57[2];
                      if (SHIBYTE(v57[2].__r_.__value_.__r.__words[2]) < 0)
                        v45 = (std::string::__raw *)v45->__words[0];
                      *(_DWORD *)buf = 136315138;
                      v64 = v45;
LABEL_84:
                      _os_log_debug_impl(&dword_1A343C000, v44, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
                      v47 = v58;
                      if (!v58)
                        goto LABEL_73;
                      goto LABEL_69;
                    case 3:
                      v40 = qword_1ED114948;
                      if (!qword_1ED114948 || !os_log_type_enabled((os_log_t)qword_1ED114948, OS_LOG_TYPE_DEFAULT))
                        goto LABEL_68;
                      v46 = (std::string::__raw *)&v57[2];
                      if (SHIBYTE(v57[2].__r_.__value_.__r.__words[2]) < 0)
                        v46 = (std::string::__raw *)v46->__words[0];
                      *(_DWORD *)buf = 136315138;
                      v64 = v46;
LABEL_64:
                      _os_log_impl(&dword_1A343C000, v40, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
                      v47 = v58;
                      if (!v58)
                        goto LABEL_73;
                      goto LABEL_69;
                    default:
LABEL_68:
                      v47 = v58;
                      if (v58)
                      {
LABEL_69:
                        v48 = (unint64_t *)&v47->__shared_owners_;
                        do
                          v49 = __ldaxr(v48);
                        while (__stlxr(v49 - 1, v48));
                        if (!v49)
                        {
                          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                          std::__shared_weak_count::__release_weak(v47);
                        }
                      }
LABEL_73:
                      MEMORY[0x1A858F218](v59);
                      v20 = v62;
                      if (v62)
                        goto LABEL_74;
                      return;
                  }
                }
              }
              else
              {
                v33 = (char *)v24 + v25;
                v34 = v29 - (_QWORD)v24;
                if (v25 >= v29 - (unint64_t)v24)
                  goto LABEL_34;
              }
              std::string::__throw_out_of_range[abi:ne180100]();
            }
          }
          memmove(v19, v16, (size_t)v18);
          goto LABEL_17;
        }
        v20 = v11;
LABEL_74:
        v50 = (unint64_t *)&v20->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
  }
}

void sub_1A34524E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  MEMORY[0x1A858F218](&a24);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v24 - 128);
  _Unwind_Resume(a1);
}

void sub_1A345257C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v1 - 128);
  _Unwind_Resume(a1);
}

void sub_1A3452590()
{
  void *v0;

  operator delete(v0);
  JUMPOUT(0x1A34525D8);
}

void sub_1A34525BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  if (a16 < 0)
    operator delete(__p);
  operator delete(v16);
  JUMPOUT(0x1A34525D8);
}

uint64_t std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001A357EFD5)
    return a1 + 24;
  if (((v3 & 0x80000001A357EFD5 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001A357EFD5))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001A357EFD5 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::string::__erase_external_with_move(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  int v4;
  std::string::size_type size;
  std::string *v6;
  std::string::size_type v7;
  std::string::size_type v8;
  std::string::size_type v9;

  if (!__n)
    return;
  v4 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v4 < 0)
  {
    v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    size = this->__r_.__value_.__l.__size_;
    v7 = size - __pos;
    if (size - __pos >= __n)
      v8 = __n;
    else
      v8 = size - __pos;
    if (size - __pos <= __n)
      goto LABEL_8;
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v6 = this;
    v7 = size - __pos;
    if (size - __pos >= __n)
      v8 = __n;
    else
      v8 = HIBYTE(this->__r_.__value_.__r.__words[2]) - __pos;
    if (v7 <= __n)
      goto LABEL_8;
  }
  memmove((char *)v6 + __pos, (char *)v6 + __pos + v8, v7 - v8);
  LOBYTE(v4) = *((_BYTE *)&this->__r_.__value_.__s + 23);
LABEL_8:
  v9 = size - v8;
  if ((v4 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = v9;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = v9 & 0x7F;
  v6->__r_.__value_.__s.__data_[v9] = 0;
}

void abm::debug::handleDebugPrintBinary(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v5;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  ctu::Clock *v17;
  std::__shared_weak_count_vtbl *v18;
  const char *v19;
  size_t v20;
  void *v21;
  void **v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  NSObject *v31;
  void **v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void *__dst[2];
  unint64_t v39;
  std::__shared_weak_count_vtbl *v40;
  std::__shared_weak_count *v41;
  void *__p[2];
  uint64_t v43;
  _OWORD v44[3];
  unint64_t v45;
  std::__shared_weak_count *v47;
  uint8_t buf[4];
  int v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  void **v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)_MergedGlobals_0;
  if (!_MergedGlobals_0)
    return;
  v7 = *(std::__shared_weak_count **)(_MergedGlobals_0 + 8);
  if (!v7)
    return;
  v11 = std::__shared_weak_count::lock(v7);
  v47 = v11;
  if (!v11)
    return;
  if (!*v5)
  {
    v23 = v11;
LABEL_45:
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    return;
  }
  v45 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v44[1] = v12;
  v44[2] = v12;
  v44[0] = v12;
  ctu::LogMessageBuffer::LogMessageBuffer((ctu::LogMessageBuffer *)v44);
  v13 = MEMORY[0x1A858F458](v44, a1);
  MEMORY[0x1A858F458](v13, " (");
  v14 = ctu::operator<<();
  v15 = MEMORY[0x1A858F458](v14, ") ");
  v16 = MEMORY[0x1A858F458](v15, a3);
  MEMORY[0x1A858F458](v16, "\n");
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v43 = 0xAAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAAAAAA00;
  ctu::assign();
  v17 = (ctu::Clock *)MEMORY[0x1A858F464](v44, __p);
  ctu::Clock::now_in_nanoseconds(v17);
  v18 = (std::__shared_weak_count_vtbl *)operator new(0x60uLL);
  v19 = abm::debug::kLogDomainMap[a2];
  v20 = strlen(v19);
  if (v20 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = (void *)v20;
  if (v20 >= 0x17)
  {
    v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v24 = v20 | 7;
    v25 = v24 + 1;
    v22 = (void **)operator new(v24 + 1);
    __dst[1] = v21;
    v39 = v25 | 0x8000000000000000;
    __dst[0] = v22;
    goto LABEL_13;
  }
  HIBYTE(v39) = v20;
  v22 = __dst;
  if (v20)
LABEL_13:
    memmove(v22, v19, (size_t)v21);
  *((_BYTE *)v21 + (_QWORD)v22) = 0;
  MEMORY[0x1A858F1E8](v44);
  ctu::LogMessageBuffer::takeMetadata((ctu::LogMessageBuffer *)v44);
  ctu::LogMessage::LogMessage();
  v40 = v18;
  v26 = (std::__shared_weak_count *)operator new(0x20uLL);
  v26->__shared_owners_ = 0;
  v27 = (unint64_t *)&v26->__shared_owners_;
  v26->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A06D98;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = v18;
  v41 = v26;
  if (SHIBYTE(v39) < 0)
    operator delete(__dst[0]);
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
  ctu::LogServer::log();
  if (v26)
  {
    v29 = (unint64_t *)&v26->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  switch(a2)
  {
    case 0:
      v31 = qword_1ED114930;
      if (!qword_1ED114930 || !os_log_type_enabled((os_log_t)qword_1ED114930, OS_LOG_TYPE_DEBUG))
        break;
      v32 = __p;
      if (v43 < 0)
        v32 = (void **)__p[0];
LABEL_52:
      *(_DWORD *)buf = 67109634;
      v49 = a5;
      v50 = 2080;
      v51 = a3;
      v52 = 2080;
      v53 = v32;
      _os_log_debug_impl(&dword_1A343C000, v31, OS_LOG_TYPE_DEBUG, "(%d) %s: %s", buf, 0x1Cu);
      v33 = v41;
      if (!v41)
        goto LABEL_42;
      goto LABEL_38;
    case 1:
      v31 = qword_1ED114940;
      if (!qword_1ED114940 || !os_log_type_enabled((os_log_t)qword_1ED114940, OS_LOG_TYPE_DEBUG))
        break;
      v32 = __p;
      if (v43 < 0)
        v32 = (void **)__p[0];
      goto LABEL_52;
    case 2:
      v31 = qword_1ED114938;
      if (qword_1ED114938)
      {
        if (os_log_type_enabled((os_log_t)qword_1ED114938, OS_LOG_TYPE_DEBUG))
        {
          v32 = __p;
          if (v43 < 0)
            v32 = (void **)__p[0];
          goto LABEL_52;
        }
      }
      break;
  }
  v33 = v41;
  if (!v41)
    goto LABEL_42;
LABEL_38:
  v34 = (unint64_t *)&v33->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
LABEL_42:
  if (SHIBYTE(v43) < 0)
    operator delete(__p[0]);
  MEMORY[0x1A858F218](v44);
  v23 = v47;
  if (v47)
    goto LABEL_45;
}

void sub_1A3452C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a24 < 0)
  {
    operator delete(__p);
    MEMORY[0x1A858F218](&a25);
    std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
    _Unwind_Resume(a1);
  }
  MEMORY[0x1A858F218](&a25);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void abm::debug::handleDebugPrintBBUHelper(abm::debug *this, void *a2, uint64_t a3, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  abm::debug::handleDebugPrint(20, 3, &unk_1A3584B3E, (uint64_t)"%s", (uint64_t)va);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A858F92C](a1 + 112);
  return a1;
}

_QWORD *abm::TapToRadarTask::getName(abm::TapToRadarTask *this)
{
  unsigned __int8 v1;
  unsigned int v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_1);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&_MergedGlobals_1))
    return qword_1ED114958;
  v4 = *((_DWORD *)this + 26) - 1;
  if (v4 > 9)
    v5 = "invalid";
  else
    v5 = off_1E4A06FD8[v4];
  std::string::basic_string[abi:ne180100]<0>(qword_1ED114958, v5);
  __cxa_atexit(MEMORY[0x1E0DE44D0], qword_1ED114958, &dword_1A343C000);
  __cxa_guard_release(&_MergedGlobals_1);
  return qword_1ED114958;
}

void sub_1A3452E74(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&_MergedGlobals_1);
  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t abm::TapToRadarTask::TapToRadarTask(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v5 = (std::__shared_weak_count *)a3[1];
  v17 = *a3;
  v18 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v8;
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }
  abm::HelperTask::HelperTask(a1, a2, &v17, &v15);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_QWORD *)a1 = off_1E4A06E08;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  return a1;
}

void sub_1A3453018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void abm::TapToRadarTask::~TapToRadarTask(abm::TapToRadarTask *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  std::__shared_weak_count *v14;

  *(_QWORD *)this = off_1E4A06E08;
  v2 = (void *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v2)
    operator delete(v2);
  v3 = (void *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v4)
    operator delete(v4);
  v5 = (void *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v5)
    operator delete(v5);
  v6 = (void *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v6)
    operator delete(v6);
  v7 = (void *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v7)
    operator delete(v7);
  v8 = (void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v8)
    operator delete(v8);
  v9 = (void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v9)
    operator delete(v9);
  *(_QWORD *)this = off_1E4A0F3B8;
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  v11 = *((_QWORD *)this + 14);
  if (v11)
    dispatch_release(v11);
  *(_QWORD *)this = &unk_1E4A06FA8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v12 = *((_QWORD *)this + 12);
  if (v12)
    dispatch_release(v12);
  v13 = *((_QWORD *)this + 11);
  if (v13)
    dispatch_release(v13);
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
}

{
  void *v1;

  abm::TapToRadarTask::~TapToRadarTask(this);
  operator delete(v1);
}

void abm::TapToRadarTask::init_sync(abm::TapToRadarTask *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  NSObject *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD aBlock[6];
  std::__shared_weak_count *v20;
  _QWORD v21[2];
  char v22[32];
  uint64_t v23;
  std::__shared_weak_count *v24;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v10)
      goto LABEL_27;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v10)
      goto LABEL_27;
  }
  v11 = std::__shared_weak_count::lock(v10);
  v24 = v11;
  if (v11)
  {
    v12 = v11;
    v13 = *((_QWORD *)this + 15);
    v23 = v13;
    if (v13)
    {
      abm::TapToRadarTask::populateComponents_sync((NSObject **)this);
      v22[23] = 19;
      strcpy(v22, "CommandPrepareRadar");
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3321888768;
      aBlock[2] = ___ZN3abm14TapToRadarTask9init_syncEv_block_invoke;
      aBlock[3] = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrIN3abm10HelperTaskEEE_e242_v48__0_ServerClientState__shared_ptr_TelephonyXPC::ServerClientState::State____State_____shared_weak_count___8_dict__object__v__24_callback_void_____int__xpc::dict____block_void_____int__xpc::dict_______queue__object___dispatch_object_s____32l;
      aBlock[4] = this;
      aBlock[5] = v3;
      v20 = v5;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      v15 = _Block_copy(aBlock);
      v16 = *((_QWORD *)this + 11);
      if (v16)
        dispatch_retain(v16);
      v21[0] = v15;
      v21[1] = v16;
      abm::HelperServerInternal::setCommandHandler(v13, (uint64_t)v22, (uint64_t)v21);
      if (v16)
        dispatch_release(v16);
      if (v15)
        _Block_release(v15);
      if (v20)
        std::__shared_weak_count::__release_weak(v20);
    }
    v17 = (unint64_t *)&v12->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_27:
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1A3453328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  std::__shared_weak_count *v17;
  uint64_t v18;

  dispatch::callback<void({block_pointer})(TelephonyXPC::ServerClientState,xpc::dict,dispatch::callback<void({block_pointer})(int,xpc::dict)>)>::~callback((uint64_t)&a17);
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v18 - 64);
    std::__shared_weak_count::__release_weak(v17);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v18 - 64);
  std::__shared_weak_count::__release_weak(v17);
  _Unwind_Resume(a1);
}

void abm::TapToRadarTask::populateComponents_sync(NSObject **this)
{
  capabilities::abs *v2;
  capabilities::abs *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  char *v16;
  size_t v17;
  size_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  void *v23;
  const char *v24;
  int v25;
  int v26;
  void *v27;
  char v28;
  void **v29;
  void **v30;
  void *v31;
  char v32;
  void **v33;
  void **v34;
  int v35;
  char *v36;
  NSObject *v37;
  char *v38;
  NSObject *v39;
  NSObject *v40;
  void **v41;
  void **v42;
  char *v43;
  NSObject *v44;
  NSObject *v45;
  const char *v46;
  char v47[24];
  _QWORD __dst[2];
  int64_t v49;
  void *__p[3];
  void *v51[3];
  char __s[24];

  memset(__s, 170, sizeof(__s));
  v2 = (capabilities::abs *)capabilities::abs::radarComponentName((capabilities::abs *)this);
  memset(v51, 170, sizeof(v51));
  v3 = (capabilities::abs *)capabilities::abs::radarComponentVersion(v2);
  memset(__p, 170, sizeof(__p));
  capabilities::abs::radarComponentID(v3);
  v4 = operator new(0x18uLL);
  v4->isa = (Class)"Telephony";
  v4[1].isa = (Class)"iOS";
  v4[2].isa = (Class)"230851";
  v5 = this[24];
  this[24] = v4;
  if (v5)
    operator delete(v5);
  v6 = operator new(0x18uLL);
  v6->isa = (Class)"Telephony";
  v6[1].isa = (Class)"iOS";
  v6[2].isa = (Class)"230851";
  v7 = this[17];
  this[17] = v6;
  if (v7)
    operator delete(v7);
  v8 = operator new(0x18uLL);
  v8->isa = (Class)"Telephony";
  v8[1].isa = (Class)"iOS";
  v8[2].isa = (Class)"230851";
  v9 = this[18];
  this[18] = v8;
  if (v9)
    operator delete(v9);
  v10 = operator new(0x18uLL);
  v10->isa = (Class)"Purple Baseband Updater";
  v10[1].isa = (Class)"1.0";
  v10[2].isa = (Class)"250082";
  v11 = this[21];
  this[21] = v10;
  if (v11)
    operator delete(v11);
  v12 = operator new(0x18uLL);
  v12->isa = (Class)"Telephony";
  v12[1].isa = (Class)"iOS";
  v12[2].isa = (Class)"230851";
  v13 = this[22];
  this[22] = v12;
  if (v13)
    operator delete(v13);
  v14 = operator new(0x18uLL);
  v14->isa = (Class)"Telephony";
  v14[1].isa = (Class)"iOS";
  v14[2].isa = (Class)"230851";
  v15 = this[23];
  this[23] = v14;
  if (v15)
    operator delete(v15);
  if (__s[23] < 0)
  {
    if (!*(_QWORD *)&__s[8])
      goto LABEL_60;
    v16 = *(char **)__s;
    v17 = strlen(*(const char **)__s);
    if (v17 < 0x7FFFFFFFFFFFFFF8)
      goto LABEL_16;
LABEL_21:
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (!__s[23])
    goto LABEL_60;
  v16 = __s;
  v17 = strlen(__s);
  if (v17 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_21;
LABEL_16:
  v18 = v17;
  if (v17 >= 0x17)
  {
    v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v20 = v17 | 7;
    v21 = v20 + 1;
    v19 = operator new(v20 + 1);
    __dst[1] = v18;
    v49 = v21 | 0x8000000000000000;
    __dst[0] = v19;
    goto LABEL_25;
  }
  HIBYTE(v49) = v17;
  v19 = __dst;
  if (v17)
LABEL_25:
    memmove(v19, v16, v18);
  *((_BYTE *)v19 + v18) = 0;
  v47[23] = 7;
  strcpy(v47, "Unknown");
  v22 = SHIBYTE(v49);
  v23 = (void *)__dst[0];
  if (v49 >= 0)
    v24 = (const char *)__dst;
  else
    v24 = (const char *)__dst[0];
  v25 = strcasecmp(v24, v47);
  v26 = v25;
  if ((v22 & 0x80000000) == 0)
  {
    if (v25)
      goto LABEL_31;
LABEL_60:
    v45 = this[5];
    if (!os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      goto LABEL_61;
    LOWORD(__dst[0]) = 0;
    v46 = "Unknown Radar component for this device";
    goto LABEL_71;
  }
  operator delete(v23);
  if (!v26)
    goto LABEL_60;
LABEL_31:
  v27 = (void *)HIBYTE(v51[2]);
  v28 = HIBYTE(v51[2]);
  if (SHIBYTE(v51[2]) < 0)
    v27 = v51[1];
  if (!v27
    || ((HIBYTE(v49) = 7, strcpy((char *)__dst, "Unknown"), v29 = (void **)v51[0], SHIBYTE(v51[2]) >= 0)
      ? (v30 = v51)
      : (v30 = (void **)v51[0]),
        !strcasecmp((const char *)v30, (const char *)__dst)))
  {
    v45 = this[5];
    if (!os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      goto LABEL_61;
    LOWORD(__dst[0]) = 0;
    v46 = "Unknown Radar component version for this device";
LABEL_71:
    _os_log_error_impl(&dword_1A343C000, v45, OS_LOG_TYPE_ERROR, v46, (uint8_t *)__dst, 2u);
    goto LABEL_61;
  }
  v31 = (void *)HIBYTE(__p[2]);
  v32 = HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) < 0)
    v31 = __p[1];
  if (!v31
    || ((HIBYTE(v49) = 7, strcpy((char *)__dst, "Unknown"), v33 = (void **)__p[0], SHIBYTE(__p[2]) >= 0)
      ? (v34 = __p)
      : (v34 = (void **)__p[0]),
        !strcasecmp((const char *)v34, (const char *)__dst)))
  {
    v45 = this[5];
    if (!os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      goto LABEL_61;
    LOWORD(__dst[0]) = 0;
    v46 = "Unknown Radar component ID for this device";
    goto LABEL_71;
  }
  v35 = __s[23];
  v36 = *(char **)__s;
  v37 = operator new(0x18uLL);
  v38 = __s;
  if (v35 < 0)
    v38 = v36;
  v37->isa = (Class)v38;
  v37[1].isa = (Class)v30;
  v37[2].isa = (Class)v34;
  v39 = this[20];
  this[20] = v37;
  if (v39)
  {
    operator delete(v39);
    LOBYTE(v35) = __s[23];
    v36 = *(char **)__s;
    v28 = HIBYTE(v51[2]);
    v29 = (void **)v51[0];
    v32 = HIBYTE(__p[2]);
    v33 = (void **)__p[0];
  }
  v40 = operator new(0x18uLL);
  v41 = __p;
  if (v32 < 0)
    v41 = v33;
  v42 = v51;
  if (v28 < 0)
    v42 = v29;
  v43 = __s;
  if ((v35 & 0x80u) != 0)
    v43 = v36;
  v40->isa = (Class)v43;
  v40[1].isa = (Class)v42;
  v40[2].isa = (Class)v41;
  v44 = this[19];
  this[19] = v40;
  if (v44)
    operator delete(v44);
LABEL_61:
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v51[2]) & 0x80000000) == 0)
    {
LABEL_63:
      if ((__s[23] & 0x80000000) == 0)
        return;
LABEL_67:
      operator delete(*(void **)__s);
      return;
    }
  }
  else if ((SHIBYTE(v51[2]) & 0x80000000) == 0)
  {
    goto LABEL_63;
  }
  operator delete(v51[0]);
  if (__s[23] < 0)
    goto LABEL_67;
}

void sub_1A345383C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a27 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a27 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a22);
  if ((a33 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a28);
  _Unwind_Resume(exception_object);
}

void sub_1A34538C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    JUMPOUT(0x1A34538B0);
  JUMPOUT(0x1A3453878);
}

void ___ZN3abm14TapToRadarTask9init_syncEv_block_invoke(_QWORD *a1, uint64_t a2, xpc_object_t *a3, uint64_t a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  NSObject *v9;
  xpc_object_t v10;
  uint64_t v11;
  uint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  xpc_object_t value;
  NSObject *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  uint64_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  int v31;
  NSObject *v32;
  xpc_object_t v33;
  size_t count;
  std::string *p_p;
  std::string::size_type size;
  xpc_object_t v37;
  xpc_object_t v38;
  NSObject *v39;
  xpc_object_t v40;
  const void *v41;
  void *v42;
  xpc_object_t v43;
  xpc_object_t v44;
  xpc_object_t v45;
  __int128 v46;
  NSObject *v47;
  os_signpost_id_t v48;
  NSObject *v49;
  const char *v50;
  NSObject *v51;
  xpc_object_t v52;
  xpc_object_t v53;
  size_t v54;
  std::string *v55;
  __int128 *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t v61;
  uint64_t v62;
  xpc_object_t v63;
  void *v64;
  NSObject *v65;
  void *v66;
  NSObject *v67;
  void *v68;
  unsigned int v69;
  xpc_object_t v70;
  std::string __p;
  std::string v72;
  std::string v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  _BYTE v76[32];
  __int128 v77;
  xpc_object_t object;
  int v79;
  std::string v80;
  uint64_t v81;
  std::string v82;
  xpc_object_t v83;
  std::string v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v5 = a1[4];
  v74 = 0;
  v75 = 0;
  v6 = (std::__shared_weak_count *)a1[6];
  if (v6)
  {
    v75 = std::__shared_weak_count::lock(v6);
    if (!v75)
      return;
    v74 = a1[5];
    if (v74)
    {
      v9 = *(NSObject **)(v5 + 112);
      if (v9)
      {
        dispatch_retain(*(dispatch_object_t *)(v5 + 112));
        dispatch_group_enter(v9);
      }
      v10 = xpc_null_create();
      v11 = MEMORY[0x1A85902BC](*a3);
      v12 = MEMORY[0x1E0C812F8];
      if (v11 == MEMORY[0x1E0C812F8]
        && ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild()))
      {
        value = xpc_dictionary_get_value(*a3, "RadarType");
        *(_QWORD *)&v76[8] = value;
        if (value)
          xpc_retain(value);
        else
          *(_QWORD *)&v76[8] = xpc_null_create();
        v69 = xpc::dyn_cast_or_default();
        xpc_release(*(xpc_object_t *)&v76[8]);
        memset(&v73, 170, sizeof(v73));
        v21 = xpc_dictionary_get_value(*a3, "RadarTitle");
        *(_QWORD *)&v76[8] = v21;
        if (v21)
          xpc_retain(v21);
        else
          *(_QWORD *)&v76[8] = xpc_null_create();
        xpc::dyn_cast_or_default();
        xpc_release(*(xpc_object_t *)&v76[8]);
        memset(&v72, 170, sizeof(v72));
        v22 = xpc_dictionary_get_value(*a3, "RadarMessage");
        *(_QWORD *)&v76[8] = v22;
        if (v22)
          xpc_retain(v22);
        else
          *(_QWORD *)&v76[8] = xpc_null_create();
        xpc::dyn_cast_or_default();
        xpc_release(*(xpc_object_t *)&v76[8]);
        memset(&__p, 170, sizeof(__p));
        v23 = xpc_dictionary_get_value(*a3, "SysdiagnosePath");
        *(_QWORD *)&v76[8] = v23;
        if (v23)
          xpc_retain(v23);
        else
          *(_QWORD *)&v76[8] = xpc_null_create();
        xpc::dyn_cast_or_default();
        xpc_release(*(xpc_object_t *)&v76[8]);
        v70 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        v24 = xpc_dictionary_get_value(*a3, "RadarAttachments");
        v25 = v24;
        if (v24)
          xpc_retain(v24);
        else
          v25 = xpc_null_create();
        v26 = xpc_null_create();
        v70 = v25;
        v27 = MEMORY[0x1E0C812C8];
        if (v25 && MEMORY[0x1A85902BC](v25) == v27)
          xpc_retain(v25);
        else
          v70 = xpc_null_create();
        if (MEMORY[0x1A85902BC]() != v27)
        {
          if (v26)
          {
            xpc_retain(v26);
            v28 = v26;
          }
          else
          {
            v28 = xpc_null_create();
          }
          v29 = v70;
          v70 = v28;
          xpc_release(v29);
        }
        xpc_release(v26);
        xpc_release(v25);
        v30 = xpc_dictionary_get_value(*a3, "RadarAction");
        *(_QWORD *)&v76[8] = v30;
        if (v30)
          xpc_retain(v30);
        else
          *(_QWORD *)&v76[8] = xpc_null_create();
        v31 = xpc::dyn_cast_or_default();
        xpc_release(*(xpc_object_t *)&v76[8]);
        v32 = *(NSObject **)(v5 + 40);
        v33 = v70;
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          if (MEMORY[0x1A85902BC](v70) == v27)
            count = xpc_array_get_count(v70);
          else
            count = 0;
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)&v76[8] = 67109890;
          *(_DWORD *)&v76[12] = v69;
          *(_WORD *)&v76[16] = 1024;
          *(_DWORD *)&v76[18] = v31;
          *(_WORD *)&v76[22] = 2048;
          *(_QWORD *)&v76[24] = count;
          LOWORD(v77) = 2080;
          *(_QWORD *)((char *)&v77 + 2) = p_p;
          _os_log_impl(&dword_1A343C000, v32, OS_LOG_TYPE_DEFAULT, "#I Type = %d, Action = %d, Num of attachements: %zu, Sysdiagnose: %s", &v76[8], 0x22u);
        }
        if (MEMORY[0x1A85902BC](v70) == v27 && xpc_array_get_count(v70))
          goto LABEL_72;
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = __p.__r_.__value_.__l.__size_;
        if (size)
        {
LABEL_72:
          if ((abm::TapToRadarTask::validateAttachments_sync((abm::TapToRadarTask *)v5, &v70) & 1) != 0)
          {
            v37 = xpc_dictionary_create(0, 0, 0);
            if (v37 || (v37 = xpc_null_create()) != 0)
            {
              if (MEMORY[0x1A85902BC](v37) == v12)
              {
                xpc_retain(v37);
                v38 = v37;
              }
              else
              {
                v38 = xpc_null_create();
              }
            }
            else
            {
              v38 = xpc_null_create();
              v37 = 0;
            }
            xpc_release(v37);
            v43 = xpc_null_create();
            xpc_release(v10);
            xpc_release(v43);
            if (!abm::TapToRadarTask::checkAttachmentForRadarType_sync((capabilities::diag *)v5, v69, &v70))
            {
              v51 = *(NSObject **)(v5 + 40);
              if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)&v76[8] = 67109120;
                *(_DWORD *)&v76[12] = v69;
                _os_log_error_impl(&dword_1A343C000, v51, OS_LOG_TYPE_ERROR, "required log missing for this type[%d]", &v76[8], 8u);
              }
              v52 = xpc_BOOL_create(0);
              if (!v52)
                v52 = xpc_null_create();
              xpc_dictionary_set_value(v38, "AllRequiredLogsFound", v52);
              v53 = xpc_null_create();
              xpc_release(v52);
              xpc_release(v53);
              goto LABEL_139;
            }
            v44 = xpc_BOOL_create(1);
            if (!v44)
              v44 = xpc_null_create();
            xpc_dictionary_set_value(v38, "AllRequiredLogsFound", v44);
            v45 = xpc_null_create();
            xpc_release(v44);
            xpc_release(v45);
            *(_QWORD *)&v46 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v46 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v86 = v46;
            v87 = v46;
            v85 = v46;
            v47 = *(NSObject **)(v5 + 40);
            v48 = os_signpost_id_generate(v47);
            if (v48 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v49 = *(NSObject **)(v5 + 40);
              if (os_signpost_enabled(v49))
              {
                if (v69 > 7)
                  v50 = "Invalid";
                else
                  v50 = off_1E4A07028[v69];
                v55 = &v73;
                if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v55 = (std::string *)v73.__r_.__value_.__r.__words[0];
                *(_DWORD *)&v76[8] = 136315394;
                *(_QWORD *)&v76[12] = v50;
                *(_WORD *)&v76[20] = 2080;
                *(_QWORD *)&v76[22] = v55;
                _os_signpost_emit_with_name_impl(&dword_1A343C000, v49, OS_SIGNPOST_INTERVAL_BEGIN, v48, "CellularTapToRadar", "Type=%{signpost.description:attribute}s, Title=%{signpost.description:attribute}s,", &v76[8], 0x16u);
              }
            }
            *(_QWORD *)&v76[8] = off_1E4A06F00;
            *(_QWORD *)&v77 = &v76[8];
            *(_QWORD *)&v85 = v48;
            *((_QWORD *)&v85 + 1) = os_retain(v47);
            v56 = &v86;
            if ((_QWORD)v77)
            {
              if ((_BYTE *)v77 == &v76[8])
              {
                *((_QWORD *)&v87 + 1) = &v86;
                (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)&v76[8] + 24))((uint64_t)&v76[8], &v86);
              }
              else
              {
                *((_QWORD *)&v87 + 1) = v77;
                *(_QWORD *)&v77 = 0;
              }
            }
            else
            {
              *((_QWORD *)&v87 + 1) = 0;
            }
            v57 = (_QWORD *)v77;
            if ((_BYTE *)v77 == &v76[8])
            {
              v58 = 4;
              v57 = &v76[8];
            }
            else
            {
              if (!(_QWORD)v77)
              {
LABEL_111:
                if (v31 == 1)
                {
                  memset(&v76[8], 170, 24);
                  abm::TapToRadarTask::prepareRadar_sync(v69, (uint64_t)&v72, &v70, (uint64_t)&__p, &v76[8]);
                  abm::TapToRadarTask::fileRadar_sync(v5, v59, (uint64_t)&v73, (uint64_t *)&v76[8], &v70, (uint64_t)&__p);
                  if ((v76[31] & 0x80000000) != 0)
                    operator delete(*(void **)&v76[8]);
                }
                else if (!v31)
                {
                  ctu::os::signpost_interval::signpost_interval(&v76[8], &v85);
                  v79 = v69;
                  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
                    std::string::__init_copy_ctor_external(&v80, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
                  else
                    v80 = v73;
                  v81 = v5;
                  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
                    std::string::__init_copy_ctor_external(&v82, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
                  else
                    v82 = v72;
                  xpc::array::array(&v83, v70);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    std::string::__init_copy_ctor_external(&v84, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                  else
                    v84 = __p;
                  _ZN8dispatch5asyncIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__3EEvRKNS_5queueEOT_(*(NSObject **)(v5 + 88), (uint64_t)&v76[8]);
                  _ZZZN3abm14TapToRadarTask9init_syncEvEUb_EN3__3D1Ev((uint64_t)&v76[8]);
                }
                if (*((_QWORD *)&v87 + 1) && (_QWORD)v85)
                {
                  *(_OWORD *)v76 = v85;
                  (*(void (**)(void))(**((_QWORD **)&v87 + 1) + 48))();
                }
                if (*((_QWORD *)&v85 + 1))
                  os_release(*((void **)&v85 + 1));
                v60 = (__int128 *)*((_QWORD *)&v87 + 1);
                *((_QWORD *)&v85 + 1) = 0;
                *((_QWORD *)&v87 + 1) = 0;
                if (v60 == &v86)
                {
                  v61 = 4;
                  v60 = &v86;
                }
                else
                {
                  if (!v60)
                    goto LABEL_139;
                  v61 = 5;
                }
                (*(void (**)(void))(*(_QWORD *)v60 + 8 * v61))();
                *(_QWORD *)&v85 = 0;
                if (*((__int128 **)&v87 + 1) == &v86)
                {
                  v62 = 4;
                }
                else
                {
                  if (!*((_QWORD *)&v87 + 1))
                    goto LABEL_139;
                  v62 = 5;
                  v56 = (__int128 *)*((_QWORD *)&v87 + 1);
                }
                (*(void (**)(__int128 *))(*(_QWORD *)v56 + 8 * v62))(v56);
LABEL_139:
                if (v38)
                {
                  xpc_retain(v38);
                  v63 = v38;
                }
                else
                {
                  v63 = xpc_null_create();
                }
                if (*(_QWORD *)a4)
                  v64 = _Block_copy(*(const void **)a4);
                else
                  v64 = 0;
                v65 = *(NSObject **)(a4 + 8);
                *(_QWORD *)&v76[8] = MEMORY[0x1E0C809B0];
                *(_QWORD *)&v76[16] = 3321888768;
                *(_QWORD *)&v76[24] = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke;
                *(_QWORD *)&v77 = &__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
                if (v64)
                  v66 = _Block_copy(v64);
                else
                  v66 = 0;
                v79 = 0;
                *((_QWORD *)&v77 + 1) = v66;
                object = v63;
                if (v63)
                  xpc_retain(v63);
                else
                  object = xpc_null_create();
                dispatch_async(v65, &v76[8]);
                xpc_release(object);
                object = 0;
                if (*((_QWORD *)&v77 + 1))
                  _Block_release(*((const void **)&v77 + 1));
                if (v64)
                  _Block_release(v64);
                xpc_release(v63);
                xpc_release(v70);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(__p.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_157:
                    if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_158:
                      v10 = v38;
                      goto LABEL_26;
                    }
LABEL_161:
                    operator delete(v73.__r_.__value_.__l.__data_);
                    goto LABEL_158;
                  }
                }
                else if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  goto LABEL_157;
                }
                operator delete(v72.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_158;
                goto LABEL_161;
              }
              v58 = 5;
            }
            (*(void (**)(void))(*v57 + 8 * v58))();
            goto LABEL_111;
          }
        }
        v39 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          if (MEMORY[0x1A85902BC](v33) == v27)
            v54 = xpc_array_get_count(v33);
          else
            v54 = 0;
          *(_DWORD *)&v76[8] = 134217984;
          *(_QWORD *)&v76[12] = v54;
          _os_log_error_impl(&dword_1A343C000, v39, OS_LOG_TYPE_ERROR, "Attachment error size: %zu", &v76[8], 0xCu);
          if (v10)
          {
LABEL_79:
            xpc_retain(v10);
            v40 = v10;
            v41 = *(const void **)a4;
            if (*(_QWORD *)a4)
            {
LABEL_80:
              v42 = _Block_copy(v41);
              goto LABEL_166;
            }
LABEL_165:
            v42 = 0;
LABEL_166:
            v67 = *(NSObject **)(a4 + 8);
            *(_QWORD *)&v76[8] = MEMORY[0x1E0C809B0];
            *(_QWORD *)&v76[16] = 3321888768;
            *(_QWORD *)&v76[24] = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke;
            *(_QWORD *)&v77 = &__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
            if (v42)
            {
              v68 = _Block_copy(v42);
              v79 = -534716414;
              *((_QWORD *)&v77 + 1) = v68;
              object = v40;
              if (v40)
              {
LABEL_168:
                xpc_retain(v40);
                goto LABEL_171;
              }
            }
            else
            {
              v79 = -534716414;
              *((_QWORD *)&v77 + 1) = 0;
              object = v40;
              if (v40)
                goto LABEL_168;
            }
            object = xpc_null_create();
LABEL_171:
            dispatch_async(v67, &v76[8]);
            xpc_release(object);
            object = 0;
            if (*((_QWORD *)&v77 + 1))
              _Block_release(*((const void **)&v77 + 1));
            if (v42)
              _Block_release(v42);
            xpc_release(v40);
            xpc_release(v33);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__p.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_177:
                if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_26;
LABEL_181:
                operator delete(v73.__r_.__value_.__l.__data_);
LABEL_26:
                xpc_release(v10);
                if (v9)
                {
                  dispatch_group_leave(v9);
                  dispatch_release(v9);
                }
                goto LABEL_28;
              }
            }
            else if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_177;
            }
            operator delete(v72.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_26;
            goto LABEL_181;
          }
        }
        else if (v10)
        {
          goto LABEL_79;
        }
        v40 = xpc_null_create();
        v41 = *(const void **)a4;
        if (*(_QWORD *)a4)
          goto LABEL_80;
        goto LABEL_165;
      }
      if (v10)
      {
        xpc_retain(v10);
        v13 = v10;
        v14 = *(const void **)a4;
        if (*(_QWORD *)a4)
        {
LABEL_9:
          v15 = _Block_copy(v14);
          goto LABEL_16;
        }
      }
      else
      {
        v13 = xpc_null_create();
        v14 = *(const void **)a4;
        if (*(_QWORD *)a4)
          goto LABEL_9;
      }
      v15 = 0;
LABEL_16:
      v17 = *(NSObject **)(a4 + 8);
      *(_QWORD *)&v76[8] = MEMORY[0x1E0C809B0];
      *(_QWORD *)&v76[16] = 3321888768;
      *(_QWORD *)&v76[24] = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke;
      *(_QWORD *)&v77 = &__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
      if (v15)
      {
        v79 = -534716414;
        *((_QWORD *)&v77 + 1) = _Block_copy(v15);
        object = v13;
        if (v13)
        {
LABEL_18:
          xpc_retain(v13);
LABEL_21:
          dispatch_async(v17, &v76[8]);
          xpc_release(object);
          object = 0;
          if (*((_QWORD *)&v77 + 1))
            _Block_release(*((const void **)&v77 + 1));
          if (v15)
            _Block_release(v15);
          xpc_release(v13);
          goto LABEL_26;
        }
      }
      else
      {
        v79 = -534716414;
        *((_QWORD *)&v77 + 1) = 0;
        object = v13;
        if (v13)
          goto LABEL_18;
      }
      object = xpc_null_create();
      goto LABEL_21;
    }
  }
LABEL_28:
  v18 = v75;
  if (v75)
  {
    p_shared_owners = (unint64_t *)&v75->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1A3454570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,xpc_object_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,xpc_object_t object)
{
  NSObject *v55;
  void *v56;
  uint64_t v57;

  xpc_release(object);
  object = 0;
  if (a54 < 0)
    operator delete(__p);
  if (a47 < 0)
    operator delete(a42);
  ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)&a32);
  ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)(v57 - 160));
  xpc_release(a10);
  if (a16 < 0)
    operator delete(a11);
  if (a22 < 0)
    operator delete(a17);
  if (a28 < 0)
    operator delete(a23);
  xpc_release(v56);
  if (v55)
  {
    dispatch_group_leave(v55);
    dispatch_release(v55);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t abm::TapToRadarTask::validateAttachments_sync(abm::TapToRadarTask *this, xpc_object_t *a2)
{
  xpc_object_t v4;
  void *v5;
  xpc_object_t v6;
  size_t count;
  xpc_object_t v8;
  uint64_t v9;
  size_t v10;
  xpc_object_t value;
  void *v12;
  timespec v13;
  const char *v14;
  size_t i;
  xpc_object_t v16;
  void *v17;
  timespec v18;
  const char *v19;
  NSObject *v20;
  void **v22;
  int *v23;
  char *v24;
  void *__p[3];
  stat object;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
LABEL_4:
    xpc_retain(v4);
    v5 = v4;
    goto LABEL_5;
  }
  v4 = xpc_null_create();
  if (v4)
    goto LABEL_4;
  v4 = xpc_null_create();
  v5 = 0;
LABEL_5:
  xpc_release(v5);
  v6 = *a2;
  if (*a2)
    xpc_retain(*a2);
  else
    v6 = xpc_null_create();
  if (MEMORY[0x1A85902BC](*a2) == MEMORY[0x1E0C812C8])
  {
    count = xpc_array_get_count(*a2);
    if (v6)
      goto LABEL_10;
LABEL_12:
    v8 = xpc_null_create();
    goto LABEL_13;
  }
  count = 0;
  if (!v6)
    goto LABEL_12;
LABEL_10:
  xpc_retain(v6);
  v8 = v6;
LABEL_13:
  xpc_release(v6);
  if (count || v4 != v8)
  {
    if (v4 == v8)
    {
      v10 = 0;
      while (1)
      {
        memset(__p, 170, sizeof(__p));
        value = xpc_array_get_value(v4, v10);
        *(_QWORD *)&object.st_dev = value;
        if (value)
          xpc_retain(value);
        else
          *(_QWORD *)&object.st_dev = xpc_null_create();
        xpc::dyn_cast_or_default();
        xpc_release(*(xpc_object_t *)&object.st_dev);
        v12 = (void *)HIBYTE(__p[2]);
        if (SHIBYTE(__p[2]) < 0)
          v12 = __p[1];
        if (!v12)
          break;
        v13.tv_sec = 0xAAAAAAAAAAAAAAAALL;
        v13.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
        *(timespec *)&object.st_blksize = v13;
        *(timespec *)object.st_qspare = v13;
        object.st_birthtimespec = v13;
        *(timespec *)&object.st_size = v13;
        object.st_mtimespec = v13;
        object.st_ctimespec = v13;
        *(timespec *)&object.st_uid = v13;
        object.st_atimespec = v13;
        *(timespec *)&object.st_dev = v13;
        v14 = SHIBYTE(__p[2]) >= 0 ? (const char *)__p : (const char *)__p[0];
        if (stat(v14, &object))
          break;
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        if (count == ++v10)
          goto LABEL_15;
      }
    }
    else
    {
      for (i = 0; ; ++i)
      {
        memset(__p, 170, sizeof(__p));
        v16 = xpc_array_get_value(v4, i);
        *(_QWORD *)&object.st_dev = v16;
        if (v16)
          xpc_retain(v16);
        else
          *(_QWORD *)&object.st_dev = xpc_null_create();
        xpc::dyn_cast_or_default();
        xpc_release(*(xpc_object_t *)&object.st_dev);
        v17 = (void *)HIBYTE(__p[2]);
        if (SHIBYTE(__p[2]) < 0)
          v17 = __p[1];
        if (!v17)
          break;
        v18.tv_sec = 0xAAAAAAAAAAAAAAAALL;
        v18.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
        *(timespec *)&object.st_blksize = v18;
        *(timespec *)object.st_qspare = v18;
        object.st_birthtimespec = v18;
        *(timespec *)&object.st_size = v18;
        object.st_mtimespec = v18;
        object.st_ctimespec = v18;
        *(timespec *)&object.st_uid = v18;
        object.st_atimespec = v18;
        *(timespec *)&object.st_dev = v18;
        v19 = SHIBYTE(__p[2]) >= 0 ? (const char *)__p : (const char *)__p[0];
        if (stat(v19, &object))
          break;
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
      }
    }
    v20 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      if (SHIBYTE(__p[2]) >= 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      v23 = __error();
      v24 = strerror(*v23);
      object.st_dev = 136315394;
      *(_QWORD *)&object.st_mode = v22;
      WORD2(object.st_ino) = 2080;
      *(__darwin_ino64_t *)((char *)&object.st_ino + 6) = (__darwin_ino64_t)v24;
      _os_log_error_impl(&dword_1A343C000, v20, OS_LOG_TYPE_ERROR, "file [%s] error: %s", (uint8_t *)&object, 0x16u);
      if ((HIBYTE(__p[2]) & 0x80) == 0)
        goto LABEL_48;
    }
    else if ((HIBYTE(__p[2]) & 0x80) == 0)
    {
LABEL_48:
      v9 = 0;
      goto LABEL_49;
    }
    operator delete(__p[0]);
    goto LABEL_48;
  }
LABEL_15:
  v9 = 1;
LABEL_49:
  xpc_release(v8);
  xpc_release(v4);
  return v9;
}

void sub_1A3454BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, xpc_object_t object)
{
  void *v16;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  xpc_release(v17);
  xpc_release(v16);
  _Unwind_Resume(a1);
}

BOOL abm::TapToRadarTask::checkAttachmentForRadarType_sync(capabilities::diag *a1, unsigned int a2, xpc_object_t *a3)
{
  capabilities::radio *v3;
  xpc_object_t v4;
  uint64_t v5;
  xpc_object_t v6;
  int v7;
  size_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  _BYTE *v14;
  std::string *v15;
  void *v16;
  char v17;
  void *v18;
  char *v19;
  char *v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _OWORD *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  xpc_object_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  xpc_object_t v43;
  __int128 v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t *p_shared_owners;
  unint64_t v48;
  xpc_object_t v49;
  xpc_object_t v50;
  xpc_object_t value;
  std::locale::__imp *v52;
  unint64_t *v53;
  unint64_t v54;
  _BOOL4 v55;
  int v56;
  char **v57;
  int v58;
  size_t v59;
  unint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  _WORD *v64;
  _BYTE *v65;
  std::string *v66;
  void *v67;
  char v68;
  char *v69;
  int64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _BYTE *v75;
  int64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  _OWORD *v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  xpc_object_t v86;
  void *v87;
  xpc_object_t v88;
  xpc_object_t v89;
  size_t count;
  xpc_object_t v91;
  char *v92;
  char *v93;
  xpc_object_t v94;
  char *v95;
  void **v96;
  int64_t v97;
  int64_t v98;
  char *v99;
  char *i;
  __int128 v101;
  char *v102;
  const std::locale *v103;
  _OWORD *v104;
  size_t v105;
  char *v106;
  std::sub_match<const char *> *v107;
  std::sub_match<const char *> *v108;
  __int128 v109;
  _QWORD *v110;
  __int128 *v111;
  _BYTE *v112;
  __int128 *v113;
  int v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  _QWORD *v126;
  _BYTE *v127;
  int v128;
  int v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  void *v133;
  char *v134;
  int v135;
  char *v136;
  char *v137;
  char *v138;
  int64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  xpc_object_t v143;
  const char **v144;
  const char **v145;
  const char **j;
  const char *v147;
  size_t v148;
  size_t v149;
  _BYTE *v150;
  uint64_t v151;
  uint64_t v152;
  capabilities::diag *v154;
  void *__s;
  xpc_object_t xarray;
  xpc_object_t *v157;
  size_t index;
  __int128 *v159;
  _BYTE *v160;
  __int128 *v161;
  _QWORD *v162;
  _OWORD *v163;
  _QWORD v164[2];
  void (*v165)(uint64_t, uint64_t *);
  void *v166;
  uint64_t v167;
  void *v168[3];
  xpc_object_t object;
  std::locale::__imp *locale;
  std::__shared_weak_count *v171;
  BOOL v172;
  void *v173;
  __int128 v174;
  void *v175;
  char *v176;
  unint64_t v177;
  _BYTE v178[56];
  __int128 v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  _BYTE __p[56];
  __int128 v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  std::locale v188[2];
  _OWORD v189[2];
  __int128 v190;
  uint64_t v191;

  v157 = a3;
  v154 = a1;
  v191 = *MEMORY[0x1E0C80C00];
  v175 = 0;
  v176 = 0;
  v177 = 0;
  v173 = 0;
  v174 = 0uLL;
  if (a2 <= 5)
  {
    if (((1 << a2) & 0x26) != 0)
    {
      v172 = 0;
      v3 = (capabilities::radio *)capabilities::diag::supportsQDSS(a1);
      if (!(_DWORD)v3)
        goto LABEL_83;
      v188[0].__locale_ = (std::locale::__imp *)0xAAAAAAAAAAAAAAAALL;
      v188[1].__locale_ = (std::locale::__imp *)0xAAAAAAAAAAAAAAAALL;
      strcpy(__p, "TapToRadar");
      abm::client::CreateManager();
      v4 = xpc_dictionary_create(0, 0, 0);
      v5 = MEMORY[0x1E0C812F8];
      if (v4 || (v4 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1A85902BC](v4) == v5)
        {
          xpc_retain(v4);
          v6 = v4;
        }
        else
        {
          v6 = xpc_null_create();
        }
      }
      else
      {
        v6 = xpc_null_create();
        v4 = 0;
      }
      xpc_release(v4);
      v40 = xpc_string_create("BasebandTrace");
      if (!v40)
        v40 = xpc_null_create();
      xpc_dictionary_set_value(v6, "kKeyTraceName", v40);
      v41 = xpc_null_create();
      xpc_release(v40);
      xpc_release(v41);
      v42 = xpc_string_create("High_Tput");
      if (!v42)
        v42 = xpc_null_create();
      xpc_dictionary_set_value(v6, "kKeyTracePropertyName", v42);
      v43 = xpc_null_create();
      xpc_release(v42);
      xpc_release(v43);
      v168[0] = xpc_null_create();
      *(_QWORD *)&v44 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v44 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)__p = v44;
      *(_OWORD *)&__p[16] = v44;
      locale = v188[0].__locale_;
      v171 = (std::__shared_weak_count *)v188[1].__locale_;
      v45 = (unint64_t *)((char *)v188[1].__locale_ + 8);
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
      *(_QWORD *)v178 = operator new(0x20uLL);
      *(_OWORD *)&v178[8] = xmmword_1A357F050;
      strcpy(*(char **)v178, "kCommandGetTraceProperty");
      abm::client::PerformCommand();
      operator delete(*(void **)v178);
      p_shared_owners = &v171->__shared_owners_;
      do
        v48 = __ldaxr((unint64_t *)p_shared_owners);
      while (__stlxr(v48 - 1, (unint64_t *)p_shared_owners));
      if (v48)
      {
        v49 = v168[0];
        if (v168[0])
          goto LABEL_66;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
        std::__shared_weak_count::__release_weak(v171);
        v49 = v168[0];
        if (v168[0])
          goto LABEL_66;
      }
      v49 = xpc_null_create();
      if (!v49)
      {
        v50 = xpc_null_create();
        v49 = 0;
        goto LABEL_69;
      }
LABEL_66:
      if (MEMORY[0x1A85902BC](v49) == v5)
      {
        xpc_retain(v49);
        v50 = v49;
      }
      else
      {
        v50 = xpc_null_create();
      }
LABEL_69:
      xpc_release(v49);
      if (!*(_DWORD *)__p && MEMORY[0x1A85902BC](v50) == v5)
      {
        memset(v178, 170, 24);
        value = xpc_dictionary_get_value(v50, "kKeyTracePropertyValue");
        object = value;
        if (value)
          xpc_retain(value);
        else
          object = xpc_null_create();
        xpc::dyn_cast_or_default();
        xpc_release(object);
        util::convert<BOOL>((const std::string *)v178, &v172, 0);
        if ((v178[23] & 0x80000000) != 0)
          operator delete(*(void **)v178);
      }
      xpc_release(v50);
      if ((__p[31] & 0x80000000) != 0)
        operator delete(*(void **)&__p[8]);
      xpc_release(v6);
      v52 = v188[1].__locale_;
      if (v188[1].__locale_)
      {
        v53 = (unint64_t *)((char *)v188[1].__locale_ + 8);
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          (*(void (**)(std::locale::__imp *))(*(_QWORD *)v52 + 16))(v52);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v52);
        }
      }
LABEL_83:
      v55 = v172;
      *(_QWORD *)&v178[8] = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v178[16] = 0xAAAAAAAAAAAAAALL;
      *(_QWORD *)v178 = 0xAAAAAAAAAAAAAA00;
      v56 = capabilities::radio::vendor(v3);
      if ((v56 - 2) >= 2)
      {
        if (v56 != 1)
          goto LABEL_89;
        v57 = abm::trace::kEURQDSSTraceSnapshotDirectorySuffix;
        if (!v55)
          v57 = abm::trace::kEURTraceSnapshotDirectorySuffix;
      }
      else
      {
        v57 = abm::trace::kICETraceSnapshotDirectorySuffix;
      }
      std::string::__assign_external((std::string *)v178, *v57);
LABEL_89:
      v58 = v178[23];
      if (v178[23] >= 0)
        v59 = v178[23];
      else
        v59 = *(_QWORD *)&v178[8];
      v60 = v59 + 2;
      memset(__p, 170, 24);
      if (v59 + 2 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v60 >= 0x17)
      {
        v62 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v60 | 7) != 0x17)
          v62 = v60 | 7;
        v63 = v62 + 1;
        v64 = operator new(v62 + 1);
        *(_QWORD *)&__p[8] = v59 + 2;
        *(_QWORD *)&__p[16] = v63 | 0x8000000000000000;
        *(_QWORD *)__p = v64;
        *v64 = 10798;
        v61 = v64 + 1;
      }
      else
      {
        *(_QWORD *)&__p[8] = 0;
        *(_QWORD *)&__p[16] = 0;
        __p[23] = v59 + 2;
        v61 = &__p[2];
        *(_QWORD *)__p = 10798;
        if (!v59)
          goto LABEL_103;
      }
      if (v58 >= 0)
        v65 = v178;
      else
        v65 = *(_BYTE **)v178;
      memmove(v61, v65, v59);
LABEL_103:
      v61[v59] = 0;
      v66 = std::string::append((std::string *)__p, "/.*", 3uLL);
      v67 = (void *)v66->__r_.__value_.__r.__words[0];
      v188[0] = (std::locale)v66->__r_.__value_.__r.__words[1];
      *(std::locale::__imp **)((char *)&v188[0].__locale_ + 7) = *(std::locale::__imp **)((char *)&v66->__r_.__value_.__r.__words[1]
                                                                                        + 7);
      v68 = HIBYTE(v66->__r_.__value_.__r.__words[2]);
      v66->__r_.__value_.__l.__size_ = 0;
      v66->__r_.__value_.__r.__words[2] = 0;
      v66->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v174) < 0)
        operator delete(v173);
      v173 = v67;
      *(std::locale *)&v174 = v188[0];
      *(std::locale *)((char *)&v174 + 7) = *(std::locale *)((char *)&v188[0].__locale_ + 7);
      HIBYTE(v174) = v68;
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        if ((v178[23] & 0x80000000) == 0)
          goto LABEL_107;
      }
      else if ((v178[23] & 0x80000000) == 0)
      {
LABEL_107:
        if (v174 >= 0)
          v18 = &v173;
        else
          v18 = v173;
        v19 = v176;
        if ((unint64_t)v176 < v177)
        {
LABEL_111:
          *(_QWORD *)v19 = v18;
          v29 = (uint64_t)(v19 + 8);
LABEL_134:
          v176 = (char *)v29;
          goto LABEL_135;
        }
        v69 = (char *)v175;
        v70 = v176 - (_BYTE *)v175;
        v71 = (v176 - (_BYTE *)v175) >> 3;
        v72 = v71 + 1;
        if ((unint64_t)(v71 + 1) >> 61)
          std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
        v73 = v177 - (_QWORD)v175;
        if ((uint64_t)(v177 - (_QWORD)v175) >> 2 > v72)
          v72 = v73 >> 2;
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
          v74 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v74 = v72;
        if (v74)
        {
          if (v74 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v75 = operator new(8 * v74);
          v27 = &v75[8 * v71];
          v28 = &v75[8 * v74];
          *v27 = v18;
          v29 = (uint64_t)(v27 + 1);
          v76 = v19 - v69;
          if (v19 == v69)
            goto LABEL_132;
        }
        else
        {
          v75 = 0;
          v27 = (_QWORD *)(8 * v71);
          v28 = 0;
          *(_QWORD *)(8 * v71) = v18;
          v29 = 8 * v71 + 8;
          v76 = v19 - v69;
          if (v19 == v69)
            goto LABEL_132;
        }
        v77 = v76 - 8;
        if (v77 < 0x58)
          goto LABEL_253;
        if ((unint64_t)(v19 - v75 - v70) < 0x20)
          goto LABEL_253;
        v78 = (v77 >> 3) + 1;
        v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
        v80 = &v19[-v79];
        v27 = (_QWORD *)((char *)v27 - v79);
        v81 = &v75[8 * v71 - 16];
        v82 = v19 - 16;
        v83 = v78 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v84 = *(_OWORD *)v82;
          *(v81 - 1) = *((_OWORD *)v82 - 1);
          *v81 = v84;
          v81 -= 2;
          v82 -= 32;
          v83 -= 4;
        }
        while (v83);
        v19 = v80;
        if (v78 != (v78 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_253:
          do
          {
            v85 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *--v27 = v85;
          }
          while (v19 != v69);
        }
LABEL_131:
        v19 = (char *)v175;
LABEL_132:
        v175 = v27;
        v177 = (unint64_t)v28;
        if (v19)
          operator delete(v19);
        goto LABEL_134;
      }
      operator delete(*(void **)v178);
      goto LABEL_107;
    }
    if (((1 << a2) & 0x18) == 0)
      goto LABEL_135;
    abm::trace::getCoreDumpDirSuffix((std::string *)v178);
    v7 = v178[23];
    if (v178[23] >= 0)
      v8 = v178[23];
    else
      v8 = *(_QWORD *)&v178[8];
    v9 = v8 + 2;
    memset(__p, 170, 24);
    if (v8 + 2 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v9 >= 0x17)
    {
      v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v11 = v9 | 7;
      v12 = v11 + 1;
      v13 = operator new(v11 + 1);
      *(_QWORD *)&__p[8] = v8 + 2;
      *(_QWORD *)&__p[16] = v12 | 0x8000000000000000;
      *(_QWORD *)__p = v13;
      *v13 = 10798;
      v10 = v13 + 1;
    }
    else
    {
      *(_QWORD *)&__p[8] = 0;
      *(_QWORD *)&__p[16] = 0;
      __p[23] = v8 + 2;
      v10 = &__p[2];
      *(_QWORD *)__p = 10798;
      if (!v8)
        goto LABEL_23;
    }
    if (v7 >= 0)
      v14 = v178;
    else
      v14 = *(_BYTE **)v178;
    memmove(v10, v14, v8);
LABEL_23:
    v10[v8] = 0;
    v15 = std::string::append((std::string *)__p, "/.*", 3uLL);
    v16 = (void *)v15->__r_.__value_.__r.__words[0];
    v188[0] = (std::locale)v15->__r_.__value_.__r.__words[1];
    *(std::locale::__imp **)((char *)&v188[0].__locale_ + 7) = *(std::locale::__imp **)((char *)&v15->__r_.__value_.__r.__words[1]
                                                                                      + 7);
    v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v174) < 0)
      operator delete(v173);
    v173 = v16;
    *(std::locale *)&v174 = v188[0];
    *(std::locale *)((char *)&v174 + 7) = *(std::locale *)((char *)&v188[0].__locale_ + 7);
    HIBYTE(v174) = v17;
    if ((__p[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
      if ((v178[23] & 0x80000000) == 0)
        goto LABEL_27;
    }
    else if ((v178[23] & 0x80000000) == 0)
    {
LABEL_27:
      if (v174 >= 0)
        v18 = &v173;
      else
        v18 = v173;
      v19 = v176;
      if ((unint64_t)v176 < v177)
        goto LABEL_111;
      v20 = (char *)v175;
      v21 = v176 - (_BYTE *)v175;
      v22 = (v176 - (_BYTE *)v175) >> 3;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61)
        std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
      v24 = v177 - (_QWORD)v175;
      if ((uint64_t)(v177 - (_QWORD)v175) >> 2 > v23)
        v23 = v24 >> 2;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
        v25 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25)
      {
        if (v25 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v26 = operator new(8 * v25);
        v27 = &v26[8 * v22];
        v28 = &v26[8 * v25];
        *v27 = v18;
        v29 = (uint64_t)(v27 + 1);
        v30 = v19 - v20;
        if (v19 == v20)
          goto LABEL_132;
      }
      else
      {
        v26 = 0;
        v27 = (_QWORD *)(8 * v22);
        v28 = 0;
        *(_QWORD *)(8 * v22) = v18;
        v29 = 8 * v22 + 8;
        v30 = v19 - v20;
        if (v19 == v20)
          goto LABEL_132;
      }
      v31 = v30 - 8;
      if (v31 < 0x58)
        goto LABEL_254;
      if ((unint64_t)(v19 - &v26[v21]) < 0x20)
        goto LABEL_254;
      v32 = (v31 >> 3) + 1;
      v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
      v34 = &v19[-v33];
      v27 = (_QWORD *)((char *)v27 - v33);
      v35 = &v26[8 * v22 - 16];
      v36 = v19 - 16;
      v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v38 = *(_OWORD *)v36;
        *(v35 - 1) = *((_OWORD *)v36 - 1);
        *v35 = v38;
        v35 -= 2;
        v36 -= 32;
        v37 -= 4;
      }
      while (v37);
      v19 = v34;
      if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_254:
        do
        {
          v39 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *--v27 = v39;
        }
        while (v19 != v20);
      }
      goto LABEL_131;
    }
    operator delete(*(void **)v178);
    goto LABEL_27;
  }
LABEL_135:
  v86 = *v157;
  if (*v157)
  {
    xpc_retain(*v157);
  }
  else
  {
    v86 = xpc_null_create();
    if (!v86)
    {
      v86 = xpc_null_create();
      v87 = 0;
      goto LABEL_139;
    }
  }
  xpc_retain(v86);
  v87 = v86;
LABEL_139:
  xarray = v86;
  xpc_release(v87);
  v162 = &v178[48];
  v163 = (_OWORD *)((char *)v189 + 8);
  v160 = &__p[48];
  v161 = &v180;
  index = 0;
  v159 = &v185;
  while (1)
  {
    v89 = *v157;
    if (*v157)
      xpc_retain(*v157);
    else
      v89 = xpc_null_create();
    if (MEMORY[0x1A85902BC](*v157) == MEMORY[0x1E0C812C8])
    {
      count = xpc_array_get_count(*v157);
      if (v89)
      {
LABEL_147:
        xpc_retain(v89);
        v91 = v89;
        goto LABEL_150;
      }
    }
    else
    {
      count = 0;
      if (v89)
        goto LABEL_147;
    }
    v91 = xpc_null_create();
LABEL_150:
    xpc_release(v89);
    if (index >= count)
      break;
    v93 = (char *)v175;
    v92 = v176;
    xpc_release(v91);
    if (v92 == v93)
      goto LABEL_224;
    memset(v168, 170, sizeof(v168));
    v94 = xpc_array_get_value(xarray, index);
    *(_QWORD *)__p = v94;
    if (v94)
      xpc_retain(v94);
    else
      *(_QWORD *)__p = xpc_null_create();
    xpc::dyn_cast_or_default();
    xpc_release(*(xpc_object_t *)__p);
    v95 = abm::trace::kLogTarExtension[0];
    v96 = v168;
    if (SHIBYTE(v168[2]) < 0)
      v96 = (void **)v168[0];
    __s = v96;
    v97 = strlen(abm::trace::kLogTarExtension[0]);
    if (v97)
    {
      v98 = v97;
      if (SHIBYTE(v168[2]) >= 0)
        v99 = (char *)HIBYTE(v168[2]);
      else
        v99 = (char *)v168[1];
      if ((uint64_t)v99 >= v97)
      {
        v133 = __s;
        v134 = &v99[(_QWORD)__s];
        v135 = *abm::trace::kLogTarExtension[0];
        do
        {
          v136 = &v99[-v98];
          if (v136 == (char *)-1)
            break;
          v137 = (char *)memchr(v133, v135, (size_t)(v136 + 1));
          if (!v137)
            break;
          v138 = v137;
          if (!memcmp(v137, v95, v98))
          {
            if (v138 == v134 || v138 - (_BYTE *)__s == -1)
              break;
            goto LABEL_217;
          }
          v133 = v138 + 1;
          v99 = (char *)(v134 - (v138 + 1));
        }
        while ((uint64_t)v99 >= v98);
      }
      for (i = (char *)v175; i < v176; i += 8)
      {
        *(_QWORD *)&v101 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v101 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v189[1] = v101;
        v190 = v101;
        *(_OWORD *)&v188[0].__locale_ = v101;
        v189[0] = v101;
        v102 = *(char **)i;
        v103 = (const std::locale *)MEMORY[0x1A858F8F0](v188);
        v188[1].__locale_ = (std::locale::__imp *)std::locale::use_facet(v103, MEMORY[0x1E0DE4A90]);
        *(_QWORD *)&v189[0] = std::locale::use_facet(v188, MEMORY[0x1E0DE4C08]);
        v104 = v163;
        *v163 = 0u;
        v104[1] = 0u;
        *((_QWORD *)v104 + 4) = 0;
        v105 = strlen(v102);
        if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>((uint64_t)v188, v102, &v102[v105]) != (std::basic_regex<char> *)&v102[v105])
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
        v106 = (char *)HIBYTE(v168[2]);
        if (SHIBYTE(v168[2]) >= 0)
          v107 = (std::sub_match<const char *> *)v168;
        else
          v107 = (std::sub_match<const char *> *)v168[0];
        if (SHIBYTE(v168[2]) < 0)
          v106 = (char *)v168[1];
        v108 = (std::sub_match<const char *> *)&v106[(_QWORD)v107];
        *(_QWORD *)&v109 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v109 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v180 = v109;
        v181 = v109;
        *(_OWORD *)&v178[40] = v109;
        v179 = v109;
        v110 = v162;
        *v162 = 0;
        v110[1] = 0;
        *((_BYTE *)v110 + 16) = 0;
        v112 = v160;
        v111 = v161;
        *(_QWORD *)v161 = 0;
        *((_QWORD *)v111 + 1) = 0;
        *((_BYTE *)v111 + 16) = 0;
        BYTE8(v181) = 0;
        v182 = 0;
        memset(v178, 0, 41);
        v185 = v109;
        v186 = v109;
        *(_OWORD *)&__p[40] = v109;
        v184 = v109;
        *(_QWORD *)v112 = 0;
        *((_QWORD *)v112 + 1) = 0;
        v112[16] = 0;
        v113 = v159;
        *(_QWORD *)v159 = 0;
        *((_QWORD *)v113 + 1) = 0;
        *((_BYTE *)v113 + 16) = 0;
        BYTE8(v186) = 0;
        v187 = 0;
        memset(__p, 0, 41);
        v114 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v188, v107, v108, (std::vector<std::csub_match> *)__p, 4160);
        v115 = *(_QWORD *)&__p[48];
        v116 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 3);
        v118 = *(_QWORD *)&v178[8];
        v117 = *(char **)v178;
        v119 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v178[8] - *(_QWORD *)v178) >> 3);
        if (v116 <= v119)
        {
          if (v116 < v119)
          {
            v118 = *(_QWORD *)v178 + 8 * ((uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 3);
            *(_QWORD *)&v178[8] = v118;
          }
        }
        else
        {
          std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append((std::vector<std::ssub_match> *)v178, v116 - v119);
          v118 = *(_QWORD *)&v178[8];
          v117 = *(char **)v178;
        }
        if ((char *)v118 == v117)
        {
          v122 = *(char **)__p;
        }
        else
        {
          v120 = 0;
          v121 = 0;
          v122 = *(char **)__p;
          v123 = *(_QWORD *)&__p[8];
          do
          {
            v124 = 0xAAAAAAAAAAAAAAABLL * ((v123 - (uint64_t)v122) >> 3);
            v125 = &v122[v120];
            if (v124 <= v121)
              v125 = &__p[24];
            *(_QWORD *)&v117[v120] = (char *)v107 + *(_QWORD *)v125 - v115;
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 3) <= v121)
              v126 = &__p[32];
            else
              v126 = (_QWORD *)(*(_QWORD *)__p + v120 + 8);
            *(_QWORD *)(*(_QWORD *)v178 + v120 + 8) = (char *)v107 + *v126 - v115;
            v122 = *(char **)__p;
            v123 = *(_QWORD *)&__p[8];
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 3) <= v121)
              v127 = &__p[40];
            else
              v127 = (_BYTE *)(*(_QWORD *)__p + v120 + 16);
            v117 = *(char **)v178;
            *(_BYTE *)(*(_QWORD *)v178 + v120 + 16) = *v127;
            ++v121;
            v120 += 24;
          }
          while (v121 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v178[8] - (_QWORD)v117) >> 3));
        }
        *(_QWORD *)&v178[24] = v108;
        *(_QWORD *)&v178[32] = v108;
        *(_QWORD *)&v178[48] = (char *)v107 + *(_QWORD *)&__p[48] - v115;
        *(_QWORD *)&v179 = (char *)v107 + v184 - v115;
        BYTE8(v179) = BYTE8(v184);
        v178[40] = 0;
        *(_QWORD *)&v180 = (char *)v107 + v185 - v115;
        *((_QWORD *)&v180 + 1) = (char *)v107 + *((_QWORD *)&v185 + 1) - v115;
        v128 = v186;
        LOBYTE(v181) = v186;
        v182 = *(_QWORD *)&v178[48];
        BYTE8(v181) = BYTE8(v186);
        if (v122)
        {
          *(_QWORD *)&__p[8] = v122;
          operator delete(v122);
          v128 = v181;
          v117 = *(char **)v178;
        }
        if (v128)
          v129 = v114 ^ 1;
        else
          v129 = 1;
        if (v117)
        {
          *(_QWORD *)&v178[8] = v117;
          operator delete(v117);
        }
        if ((v114 & v129) != 0)
        {
          v139 = v176 - (i + 8);
          if (v176 != i + 8)
            memmove(i, i + 8, v176 - (i + 8));
          v176 = &i[v139];
          v140 = (std::__shared_weak_count *)v190;
          if ((_QWORD)v190)
          {
            v141 = (unint64_t *)(v190 + 8);
            do
              v142 = __ldaxr(v141);
            while (__stlxr(v142 - 1, v141));
            if (!v142)
            {
              ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
              std::__shared_weak_count::__release_weak(v140);
            }
          }
          std::locale::~locale(v188);
          break;
        }
        v130 = (std::__shared_weak_count *)v190;
        if ((_QWORD)v190)
        {
          v131 = (unint64_t *)(v190 + 8);
          do
            v132 = __ldaxr(v131);
          while (__stlxr(v132 - 1, v131));
          if (!v132)
          {
            ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
            std::__shared_weak_count::__release_weak(v130);
          }
        }
        std::locale::~locale(v188);
      }
    }
    else
    {
LABEL_217:
      abm::TapToRadarTask::checkTraceLogsInArchive_sync((uint64_t)v154, (uint64_t *)v168, (char ***)&v175);
    }
    if (SHIBYTE(v168[2]) < 0)
    {
      operator delete(v168[0]);
      v143 = xarray;
      if (!xarray)
      {
LABEL_140:
        v88 = xpc_null_create();
        goto LABEL_141;
      }
    }
    else
    {
      v143 = xarray;
      if (!xarray)
        goto LABEL_140;
    }
    xpc_retain(v143);
    v88 = v143;
LABEL_141:
    ++index;
    xpc_release(v88);
  }
  xpc_release(v91);
LABEL_224:
  xpc_release(xarray);
  v145 = (const char **)v175;
  v144 = (const char **)v176;
  if (v176 != v175)
  {
    v164[0] = MEMORY[0x1E0C809B0];
    v164[1] = 3221225472;
    v165 = ___ZN3abm14TapToRadarTask32checkAttachmentForRadarType_syncENS_6helper9RadarTypeERN3xpc5arrayE_block_invoke;
    v166 = &__block_descriptor_40_e211_v32__0_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q______8l;
    v167 = (uint64_t)v154;
    for (j = (const char **)v175; j != v144; ++j)
    {
      v147 = *j;
      v148 = strlen(*j);
      if (v148 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v149 = v148;
      if (v148 >= 0x17)
      {
        v151 = (v148 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v148 | 7) != 0x17)
          v151 = v148 | 7;
        v152 = v151 + 1;
        v150 = operator new(v151 + 1);
        *(_QWORD *)&__p[8] = v149;
        *(_QWORD *)&__p[16] = v152 | 0x8000000000000000;
        *(_QWORD *)__p = v150;
      }
      else
      {
        __p[23] = v148;
        v150 = __p;
        if (!v148)
          goto LABEL_235;
      }
      memmove(v150, v147, v149);
LABEL_235:
      v150[v149] = 0;
      v165((uint64_t)v164, (uint64_t *)__p);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
  }
  if (SHIBYTE(v174) < 0)
    operator delete(v173);
  if (v175)
    operator delete(v175);
  return v144 == v145;
}

void sub_1A3455D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, xpc_object_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,xpc_object_t object,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,xpc_object_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *v63;
  void *v64;
  uint64_t v65;

  if (a45 < 0)
    operator delete(__p);
  xpc_release(v64);
  if (a63 < 0)
    operator delete(a58);
  xpc_release(v63);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v65 - 176);
  if (a36 < 0)
    operator delete(a31);
  if (a37)
  {
    operator delete(a37);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *_ZN8dispatch5asyncIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__3EEvRKNS_5queueEOT_(NSObject *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  xpc_object_t v16;
  uint64_t v18;
  uint64_t v19;

  v4 = operator new(0x90uLL);
  v5 = v4;
  v19 = 0xAAAAAAAAAAAAAAAALL;
  v6 = *(_QWORD *)(a2 + 8);
  *v4 = *(_QWORD *)a2;
  v4[1] = v6;
  v7 = a2 + 16;
  v8 = (_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 40);
  if (!v9)
  {
    v8 = v4 + 5;
    goto LABEL_5;
  }
  if (v9 != v7)
  {
    v4[5] = v9;
LABEL_5:
    *v8 = 0;
    goto LABEL_7;
  }
  v4[5] = v4 + 2;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(a2 + 16);
LABEL_7:
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v10 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  if (v10 == v7)
  {
    v11 = 4;
    goto LABEL_11;
  }
  if (v10)
  {
    v11 = 5;
    v7 = v10;
LABEL_11:
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8 * v11))(v7);
  }
  *((_DWORD *)v5 + 12) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(v5 + 7) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 72) = 0;
  v5[9] = v12;
  v5[10] = v13;
  *(_OWORD *)(v5 + 11) = *(_OWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v5[13] = v14;
  v5[14] = v15;
  v16 = xpc_null_create();
  *(_OWORD *)(v5 + 15) = *(_OWORD *)(a2 + 120);
  v5[17] = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 112) = v16;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v18 = 0;
  v19 = 0;
  dispatch_async_f(a1, v5, (dispatch_function_t)_ZZN8dispatch5asyncIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__3EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS6_14default_deleteIS8_EEEEENUlPvE_8__invokeESC_);
  _ZNSt3__110unique_ptrIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__3NS_14default_deleteIS3_EEED1B8ne180100Ev(&v18);
  return _ZNSt3__110unique_ptrIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__3NS_14default_deleteIS3_EEED1B8ne180100Ev(&v19);
}

_QWORD *ctu::os::signpost_interval::signpost_interval(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2 + 2;
  v6 = a2 + 5;
  v7 = (_QWORD *)a2[5];
  if (!v7)
  {
    v6 = a1 + 5;
    goto LABEL_5;
  }
  if (v7 != v5)
  {
    a1[5] = v7;
LABEL_5:
    *v6 = 0;
    goto LABEL_7;
  }
  a1[5] = a1 + 2;
  (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 24))(*v6);
LABEL_7:
  *a2 = 0;
  a2[1] = 0;
  v8 = (_QWORD *)a2[5];
  a2[5] = 0;
  if (v8 == v5)
  {
    v9 = 4;
    v8 = v5;
    goto LABEL_11;
  }
  if (v8)
  {
    v9 = 5;
LABEL_11:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return a1;
}

xpc_object_t *xpc::array::array(xpc_object_t *a1, xpc_object_t object)
{
  *a1 = object;
  if (object)
    xpc_retain(object);
  else
    *a1 = xpc_null_create();
  return a1;
}

void _ZZZN3abm14TapToRadarTask9init_syncEvEUb_EN3__3D1Ev(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  xpc_release(*(xpc_object_t *)(a1 + 112));
  *(_QWORD *)(a1 + 112) = 0;
  if (*(char *)(a1 + 111) < 0)
  {
    operator delete(*(void **)(a1 + 88));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_8:
    operator delete(*(void **)(a1 + 56));
    ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)a1);
    return;
  }
  if (*(char *)(a1 + 79) < 0)
    goto LABEL_8;
LABEL_5:
  ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)a1);
}

uint64_t abm::TapToRadarTask::prepareRadar_sync@<X0>(int a1@<W1>, uint64_t a2@<X2>, xpc_object_t *a3@<X3>, uint64_t a4@<X4>, _BYTE *a5@<X8>)
{
  __int128 v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  std::string *v16;
  __int128 v17;
  __int128 v18;
  xpc_object_t v19;
  void *v20;
  xpc_object_t v21;
  size_t count;
  size_t v23;
  xpc_object_t value;
  std::string::size_type size;
  std::sub_match<const char *> *v26;
  std::sub_match<std::__wrap_iter<const char *>> *v27;
  __int128 v28;
  int v29;
  int v30;
  size_t v31;
  BOOL v32;
  std::string *v33;
  size_t v34;
  xpc_object_t *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  const char *v47;
  xpc_object_t v48;
  xpc_object_t v49;
  xpc_object_t v50;
  xpc_object_t v51;
  void *v52;
  _QWORD *v53;
  _QWORD *v54;
  size_t v55;
  _QWORD *v56;
  std::string *v57;
  size_t v58;
  _QWORD *v59;
  xpc_object_t v60;
  void *v61;
  xpc_object_t v62;
  size_t v63;
  xpc_object_t v64;
  size_t v65;
  size_t v66;
  xpc_object_t v67;
  void **v68;
  void *v69;
  _QWORD *v70;
  size_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  __int128 *v75;
  const char *v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  size_t v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  size_t v88;
  _QWORD *v89;
  size_t v90;
  _QWORD *v91;
  const char *v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  size_t v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  size_t v102;
  _QWORD *v103;
  size_t v104;
  size_t v105;
  _BYTE *v106;
  uint64_t v107;
  const void *v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v117;
  _BYTE *__dst;
  xpc_object_t *v120;
  xpc_object_t object;
  size_t v122;
  std::string v123;
  std::string v124;
  std::string __s;
  std::locale v126[2];
  __int128 v127;
  __int128 v128;
  __int128 v129;
  void *v130[4];
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  void *v136[2];
  __int128 v137;
  __int128 v138;
  _OWORD v139[9];
  unint64_t v140;
  void *__p[2];
  _QWORD v142[9];
  __int128 v143;
  uint64_t v144;
  std::string v145[2];
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;

  v140 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v139[7] = v9;
  v139[8] = v9;
  v139[5] = v9;
  v139[6] = v9;
  v139[3] = v9;
  v139[4] = v9;
  v139[1] = v9;
  v139[2] = v9;
  v138 = v9;
  v139[0] = v9;
  *(_OWORD *)v136 = v9;
  v137 = v9;
  v134 = v9;
  v135 = v9;
  v132 = v9;
  v133 = v9;
  v131 = v9;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v131);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v132, (uint64_t)"--- Description:\n\n", 18);
  v11 = *(char *)(a2 + 23);
  if (v11 >= 0)
    v12 = a2;
  else
    v12 = *(_QWORD *)a2;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a2 + 23);
  else
    v13 = *(_QWORD *)(a2 + 8);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n\n", 2);
  memset(v130, 170, 24);
  *((_BYTE *)&v145[0].__r_.__value_.__s + 23) = 2;
  strcpy((char *)v145, ".*");
  v15 = strlen(abm::trace::kABMLogSummaryExtension[0]);
  v16 = std::string::append(v145, abm::trace::kABMLogSummaryExtension[0], v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v130[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)v130 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v145[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v145[0].__r_.__value_.__l.__data_);
  *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v128 = v18;
  v129 = v18;
  *(_OWORD *)&v126[0].__locale_ = v18;
  v127 = v18;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v126, (uint64_t)v130, 0);
  memset(&__s, 0, sizeof(__s));
  v19 = *a3;
  if (*a3)
  {
    xpc_retain(*a3);
LABEL_12:
    xpc_retain(v19);
    v20 = v19;
    goto LABEL_13;
  }
  v19 = xpc_null_create();
  if (v19)
    goto LABEL_12;
  v19 = xpc_null_create();
  v20 = 0;
LABEL_13:
  xpc_release(v20);
  v21 = *a3;
  if (*a3)
    xpc_retain(*a3);
  else
    v21 = xpc_null_create();
  if (MEMORY[0x1A85902BC](*a3) == MEMORY[0x1E0C812C8])
  {
    count = xpc_array_get_count(*a3);
    if (v21)
      goto LABEL_18;
LABEL_20:
    object = xpc_null_create();
    goto LABEL_21;
  }
  count = 0;
  if (!v21)
    goto LABEL_20;
LABEL_18:
  xpc_retain(v21);
  object = v21;
LABEL_21:
  v120 = a3;
  v117 = a4;
  __dst = a5;
  xpc_release(v21);
  if (count || v19 != object)
  {
    v23 = 0;
    v122 = count - 1;
    while (1)
    {
      memset(&v124, 170, sizeof(v124));
      value = xpc_array_get_value(v19, v23);
      v145[0].__r_.__value_.__r.__words[0] = (std::string::size_type)value;
      if (value)
        xpc_retain(value);
      else
        v145[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      xpc::dyn_cast_or_default();
      xpc_release(v145[0].__r_.__value_.__l.__data_);
      size = HIBYTE(v124.__r_.__value_.__r.__words[2]);
      if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = (std::sub_match<const char *> *)&v124;
      else
        v26 = (std::sub_match<const char *> *)v124.__r_.__value_.__r.__words[0];
      if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v124.__r_.__value_.__l.__size_;
      v27 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v26 + size);
      *(_QWORD *)&v28 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v143 = v28;
      v142[6] = 0xAAAAAAAAAAAAAA00;
      v142[3] = 0xAAAAAAAAAAAAAAAALL;
      v142[4] = 0;
      v142[5] = 0;
      v142[7] = 0;
      v142[8] = 0;
      LOBYTE(v143) = 0;
      BYTE8(v143) = 0;
      v144 = 0;
      *(_OWORD *)__p = 0u;
      memset(v142, 0, 25);
      v151 = v28;
      v148 = 0xAAAAAAAAAAAAAA00;
      v145[1].__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
      v146 = 0;
      v147 = 0;
      v149 = 0;
      v150 = 0;
      LOBYTE(v151) = 0;
      BYTE8(v151) = 0;
      v152 = 0;
      memset(v145, 0, 41);
      v29 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v126, v26, (std::sub_match<const char *> *)((char *)v26 + size), (std::vector<std::csub_match> *)v145, 4160);
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__p, (uint64_t)v26, v27, (uint64_t *)v145, 0);
      if (v145[0].__r_.__value_.__r.__words[0])
      {
        v145[0].__r_.__value_.__l.__size_ = v145[0].__r_.__value_.__r.__words[0];
        operator delete(v145[0].__r_.__value_.__l.__data_);
      }
      if ((_BYTE)v143)
        v30 = v29 ^ 1;
      else
        v30 = 1;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if ((v29 & v30) == 0)
        goto LABEL_52;
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        break;
      if ((*((_BYTE *)&v124.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(&__s, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
LABEL_52:
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v124.__r_.__value_.__l.__data_);
          v31 = v23 + 1;
          v32 = v122 == v23++;
          if (v32)
            goto LABEL_57;
        }
        else
        {
          v31 = v23 + 1;
          v32 = v122 == v23++;
          if (v32)
            goto LABEL_57;
        }
      }
      else
      {
        __s = v124;
        v31 = v23 + 1;
        v32 = v122 == v23++;
        if (v32)
        {
LABEL_57:
          v23 = v31;
          if (v19 == object)
            goto LABEL_58;
        }
      }
    }
    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = &v124;
    else
      v33 = (std::string *)v124.__r_.__value_.__r.__words[0];
    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
    else
      v34 = v124.__r_.__value_.__l.__size_;
    std::string::__assign_no_alias<false>((void **)&__s.__r_.__value_.__l.__data_, v33, v34);
    goto LABEL_52;
  }
LABEL_58:
  xpc_release(object);
  xpc_release(v19);
  v35 = a3;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_87;
    __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
    std::string::__init_copy_ctor_external(&v123, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      goto LABEL_87;
    __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
    v123 = __s;
  }
  util::readJSON((uint64_t *)&v123, __p);
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v123.__r_.__value_.__l.__data_);
  v36 = operator new(8uLL);
  v37 = *MEMORY[0x1E0CFB558];
  *v36 = *MEMORY[0x1E0CFB558];
  v38 = operator new(0x10uLL);
  v39 = *MEMORY[0x1E0CFB478];
  *v38 = v37;
  v38[1] = v39;
  operator delete(v36);
  v40 = operator new(0x20uLL);
  v40[2] = *MEMORY[0x1E0CFB480];
  *(_OWORD *)v40 = *(_OWORD *)v38;
  operator delete(v38);
  v40[3] = *MEMORY[0x1E0CFB7E0];
  v41 = operator new(0x40uLL);
  v41[4] = *MEMORY[0x1E0CFBC08];
  v42 = *((_OWORD *)v40 + 1);
  *(_OWORD *)v41 = *(_OWORD *)v40;
  *((_OWORD *)v41 + 1) = v42;
  operator delete(v40);
  v43 = MEMORY[0x1A85902BC](__p[0]);
  v44 = MEMORY[0x1E0C812F8];
  if (v43 == MEMORY[0x1E0C812F8])
  {
    v45 = 0;
    v46 = 0;
    do
    {
      v47 = (const char *)v41[v45];
      v124.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
      v48 = xpc_dictionary_get_value(__p[0], v47);
      v49 = v48;
      if (v48)
        xpc_retain(v48);
      else
        v49 = xpc_null_create();
      v50 = xpc_null_create();
      v124.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
      if (v49 && MEMORY[0x1A85902BC](v49) == v44)
        xpc_retain(v49);
      else
        v124.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      if (MEMORY[0x1A85902BC]() != v44)
      {
        if (v50)
        {
          xpc_retain(v50);
          v51 = v50;
        }
        else
        {
          v51 = xpc_null_create();
        }
        v52 = (void *)v124.__r_.__value_.__r.__words[0];
        v124.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
        xpc_release(v52);
      }
      xpc_release(v50);
      xpc_release(v49);
      if (MEMORY[0x1A85902BC](v124.__r_.__value_.__r.__words[0]) == v44)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v132, (uint64_t)"[", 1);
        ++v46;
        v53 = (_QWORD *)std::ostream::operator<<();
        v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"] ", 2);
        v55 = strlen(v47);
        v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v47, v55);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"\n", 1);
        xpc::object::to_string((xpc::object *)&v124);
        v57 = (v145[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? v145
            : (std::string *)v145[0].__r_.__value_.__r.__words[0];
        v58 = strlen((const char *)v57);
        v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v132, (uint64_t)v57, v58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"\n", 1);
        if (SHIBYTE(v145[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v145[0].__r_.__value_.__l.__data_);
      }
      xpc_release(v124.__r_.__value_.__l.__data_);
      ++v45;
    }
    while (v45 != 5);
  }
  operator delete(v41);
  xpc_release(__p[0]);
  v35 = v120;
LABEL_87:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v132, (uint64_t)"\n--- Required Attachments:\n\n", 28);
  v60 = *v35;
  if (*v35)
  {
    xpc_retain(*v35);
LABEL_90:
    xpc_retain(v60);
    v61 = v60;
    goto LABEL_91;
  }
  v60 = xpc_null_create();
  if (v60)
    goto LABEL_90;
  v60 = xpc_null_create();
  v61 = 0;
LABEL_91:
  xpc_release(v61);
  v62 = *v35;
  if (*v35)
    xpc_retain(*v35);
  else
    v62 = xpc_null_create();
  if (MEMORY[0x1A85902BC](*v35) == MEMORY[0x1E0C812C8])
  {
    v63 = xpc_array_get_count(*v35);
    if (v62)
      goto LABEL_96;
LABEL_98:
    v64 = xpc_null_create();
    goto LABEL_99;
  }
  v63 = 0;
  if (!v62)
    goto LABEL_98;
LABEL_96:
  xpc_retain(v62);
  v64 = v62;
LABEL_99:
  xpc_release(v62);
  if (v63 || v60 != v64)
  {
    v65 = 0;
    v66 = v63 - 1;
    while (1)
    {
      while (1)
      {
        memset(v145, 170, 24);
        v67 = xpc_array_get_value(v60, v65);
        __p[0] = v67;
        if (v67)
          xpc_retain(v67);
        else
          __p[0] = xpc_null_create();
        xpc::dyn_cast_or_default();
        xpc_release(__p[0]);
        support::fs::getFileName((std::string *)__p);
        v68 = v142[0] >= 0 ? __p : (void **)__p[0];
        v69 = v142[0] >= 0 ? (void *)HIBYTE(v142[0]) : __p[1];
        v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v132, (uint64_t)v68, (uint64_t)v69);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"\n", 1);
        if ((SHIBYTE(v142[0]) & 0x80000000) == 0)
          break;
        operator delete(__p[0]);
        if ((SHIBYTE(v145[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_113;
LABEL_116:
        operator delete(v145[0].__r_.__value_.__l.__data_);
        v71 = v65 + 1;
        v32 = v66 == v65++;
        if (v32)
          goto LABEL_118;
      }
      if (SHIBYTE(v145[0].__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_116;
LABEL_113:
      v71 = v65 + 1;
      v32 = v66 == v65++;
      if (v32)
      {
LABEL_118:
        v65 = v71;
        if (v60 == v64)
          break;
      }
    }
  }
  xpc_release(v64);
  xpc_release(v60);
  v72 = *(char *)(v117 + 23);
  if (v72 >= 0)
    v73 = *(unsigned __int8 *)(v117 + 23);
  else
    v73 = *(_QWORD *)(v117 + 8);
  if (v73)
  {
    if (v72 >= 0)
      v74 = v117;
    else
      v74 = *(_QWORD *)v117;
    v75 = (__int128 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v132, v74, v73);
    v76 = "\n";
    v77 = 1;
  }
  else
  {
    v76 = "sysdiagnose\n\n";
    v77 = 13;
    v75 = &v132;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)v76, v77);
  v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v132, (uint64_t)"*** PLEASE READ ME ***\n", 23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"\nAfter filing your radar, please confirm the attachments listed above were successfully uploaded.\nOtherwise, please find the logs at the locations below and attach them manually:\n\n", 180);
  v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v132, (uint64_t)">> Mac:\n\n", 9);
  if (a1 == 6)
  {
    v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"\t ~/Library/Logs/CrashReporter/MobileDevice/<DeviceName>/*CommCenter*.ips\n", 74);
    v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"\t ~/Library/Logs/CrashReporter/MobileDevice/<DeviceName>/DiagnosticLogs/sysdiagnose/", 84);
    v82 = strlen(abm::trace::kSysdiagnosePrefix[0]);
    v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)abm::trace::kSysdiagnosePrefix[0], v82);
    v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"<timestamp>*/crashes_and_spins/*CommCenter*.ips\n", 48);
    v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"\n>> Device:\n", 12);
    v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"\t /var/mobile/Library/Logs/CrashReporter/*CommCenter*.ips\n\n", 59);
    v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"\t ", 2);
    v88 = strlen(abm::trace::kSysdiagnoseFolder[0]);
    v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)abm::trace::kSysdiagnoseFolder[0], v88);
    v90 = strlen(abm::trace::kSysdiagnosePrefix[0]);
    v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)abm::trace::kSysdiagnosePrefix[0], v90);
    v92 = "<timestamp>*/crashes_and_spins/*CommCenter*.ips\n";
    v93 = 48;
  }
  else
  {
    v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"\t ~/Library/Logs/CrashReporter/MobileDevice/<DeviceName>/Baseband/log-*<timestamp>*\n\n", 85);
    v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"\t ~/Library/Logs/CrashReporter/MobileDevice/<DeviceName>/DiagnosticLogs/sysdiagnose/", 84);
    v96 = strlen(abm::trace::kSysdiagnosePrefix[0]);
    v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)abm::trace::kSysdiagnosePrefix[0], v96);
    v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"<timestamp>*\n", 13);
    v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"\n>> Device:\n\n", 13);
    v100 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"\t /var/wireless/Library/Logs/CrashReporter/Baseband/log-*<timestamp>*\n\n", 71);
    v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"\t ", 2);
    v102 = strlen(abm::trace::kSysdiagnoseFolder[0]);
    v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)abm::trace::kSysdiagnoseFolder[0], v102);
    v104 = strlen(abm::trace::kSysdiagnosePrefix[0]);
    v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)abm::trace::kSysdiagnosePrefix[0], v104);
    v92 = "<timestamp>*\n";
    v93 = 13;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)v92, v93);
  if ((BYTE8(v138) & 0x10) != 0)
  {
    v107 = v138;
    if ((unint64_t)v138 < *((_QWORD *)&v135 + 1))
    {
      *(_QWORD *)&v138 = *((_QWORD *)&v135 + 1);
      v107 = *((_QWORD *)&v135 + 1);
    }
    v106 = __dst;
    v108 = (const void *)v135;
    v105 = v107 - v135;
    if ((unint64_t)(v107 - v135) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_156;
  }
  else
  {
    if ((BYTE8(v138) & 8) == 0)
    {
      v105 = 0;
      v106 = __dst;
      __dst[23] = 0;
      goto LABEL_144;
    }
    v106 = __dst;
    v108 = (const void *)*((_QWORD *)&v133 + 1);
    v105 = *((_QWORD *)&v134 + 1) - *((_QWORD *)&v133 + 1);
    if (*((_QWORD *)&v134 + 1) - *((_QWORD *)&v133 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_156:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v105 >= 0x17)
  {
    v109 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v105 | 7) != 0x17)
      v109 = v105 | 7;
    v110 = v109 + 1;
    v111 = operator new(v109 + 1);
    *((_QWORD *)__dst + 1) = v105;
    *((_QWORD *)__dst + 2) = v110 | 0x8000000000000000;
    *(_QWORD *)__dst = v111;
    v106 = v111;
    goto LABEL_143;
  }
  v106[23] = v105;
  if (v105)
LABEL_143:
    memmove(v106, v108, v105);
LABEL_144:
  v106[v105] = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  v112 = (std::__shared_weak_count *)v129;
  if (!(_QWORD)v129)
    goto LABEL_150;
  v113 = (unint64_t *)(v129 + 8);
  do
    v114 = __ldaxr(v113);
  while (__stlxr(v114 - 1, v113));
  if (v114)
  {
LABEL_150:
    std::locale::~locale(v126);
    if ((SHIBYTE(v130[2]) & 0x80000000) == 0)
      goto LABEL_152;
    goto LABEL_151;
  }
  ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
  std::__shared_weak_count::__release_weak(v112);
  std::locale::~locale(v126);
  if (SHIBYTE(v130[2]) < 0)
LABEL_151:
    operator delete(v130[0]);
LABEL_152:
  *(_QWORD *)&v131 = *MEMORY[0x1E0DE4F50];
  v115 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&v131 + *(_QWORD *)(v131 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v132 = v115;
  *((_QWORD *)&v132 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v137) < 0)
    operator delete(v136[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A858F92C](v139);
}

void sub_1A3456FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t a14, uint64_t a15, xpc_object_t a16, void *a17, uint64_t a18, uint64_t a19, xpc_object_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,std::locale a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,char a45)
{
  if (a28 < 0)
    operator delete(__p);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a30);
  if (a43 < 0)
    operator delete(a38);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a45);
  _Unwind_Resume(a1);
}

uint64_t abm::TapToRadarTask::fileRadar_sync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, xpc_object_t *a5, uint64_t a6)
{
  id v10;
  id v11;
  __int128 v12;
  _QWORD *v13;
  ctu::Gestalt *v14;
  void *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *st_ino;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  void **v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  ctu::Gestalt *v29;
  void (***v30)(stat *__return_ptr, _QWORD);
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  stat *v41;
  __darwin_ino64_t st_gid_high;
  _QWORD *v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  size_t v52;
  void *v53;
  uint64_t v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void **v59;
  size_t v60;
  _OWORD *v61;
  unint64_t v62;
  _OWORD *v63;
  uint64_t *v64;
  __int128 v65;
  xpc_object_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  xpc_object_t v70;
  size_t count;
  size_t v72;
  size_t v73;
  xpc_object_t value;
  void **v75;
  uint64_t v76;
  _QWORD *v77;
  timespec v78;
  void **v79;
  const char *v80;
  DIR *v81;
  DIR *v82;
  size_t v83;
  BOOL v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  const __CFString *v89;
  void *v90;
  void *v91;
  __darwin_ino64_t v92;
  void *v93;
  uint64_t v94;
  const void *v95;
  uint64_t v96;
  uint64_t v97;
  stat *v98;
  void *v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  void *v105;
  void *v106;
  xpc_object_t object;
  void *v108[3];
  void *__p[2];
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  void *v114[2];
  __int128 v115;
  __int128 v116;
  _OWORD v117[9];
  unint64_t v118;
  _OWORD __dst[2];
  void (***v120)(stat *__return_ptr, _QWORD);
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  _OWORD v130[9];
  unint64_t v131;
  stat v132;

  v10 = objc_alloc_init(MEMORY[0x1E0CB3998]);
  v11 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  objc_msgSend(v10, "setScheme:", CFSTR("tap-to-radar"));
  objc_msgSend(v10, "setHost:", CFSTR("new"));
  objc_msgSend(v11, "addObject:", objc_msgSend(MEMORY[0x1E0CB39D8], "queryItemWithName:value:", CFSTR("Keywords"), CFSTR("677561")));
  objc_msgSend(v11, "addObject:", objc_msgSend(MEMORY[0x1E0CB39D8], "queryItemWithName:value:", CFSTR("ComponentID"), objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", *(_QWORD *)(*(_QWORD *)(a1 + 136) + 16))));
  objc_msgSend(v11, "addObject:", objc_msgSend(MEMORY[0x1E0CB39D8], "queryItemWithName:value:", CFSTR("ComponentName"), objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", **(_QWORD **)(a1 + 136))));
  objc_msgSend(v11, "addObject:", objc_msgSend(MEMORY[0x1E0CB39D8], "queryItemWithName:value:", CFSTR("ComponentVersion"), objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8))));
  objc_msgSend(v11, "addObject:", objc_msgSend(MEMORY[0x1E0CB39D8], "queryItemWithName:value:", CFSTR("Classification"), CFSTR("Crash/Hang/Data Loss")));
  objc_msgSend(v11, "addObject:", objc_msgSend(MEMORY[0x1E0CB39D8], "queryItemWithName:value:", CFSTR("Reproducibility"), CFSTR("I Didn't Try")));
  v131 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v130[7] = v12;
  v130[8] = v12;
  v130[5] = v12;
  v130[6] = v12;
  v130[3] = v12;
  v130[4] = v12;
  v130[1] = v12;
  v130[2] = v12;
  v129 = v12;
  v130[0] = v12;
  v127 = v12;
  v128 = v12;
  v125 = v12;
  v126 = v12;
  v123 = v12;
  v124 = v12;
  v122 = v12;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v122);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v123, (uint64_t)"[", 1);
  v105 = v10;
  v106 = v11;
  v14 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v15 = (void *)off_1ED114760;
  if (!off_1ED114760)
  {
    ctu::Gestalt::create_default_global(v14);
    v16 = *(_OWORD *)&v132.st_dev;
    *(_QWORD *)&v132.st_dev = 0;
    v132.st_ino = 0;
    v17 = (std::__shared_weak_count *)*(&off_1ED114760 + 1);
    off_1ED114760 = v16;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    st_ino = (std::__shared_weak_count *)v132.st_ino;
    if (v132.st_ino)
    {
      v21 = (unint64_t *)(v132.st_ino + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))st_ino->__on_zero_shared)(st_ino);
        std::__shared_weak_count::__release_weak(st_ino);
      }
    }
    v15 = (void *)off_1ED114760;
  }
  v108[0] = v15;
  v108[1] = *((void **)&off_1ED114760 + 1);
  if (*(&off_1ED114760 + 1))
  {
    v23 = (unint64_t *)(*(&off_1ED114760 + 1) + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)v15 + 40))(__p, v15);
  if ((SBYTE7(v110) & 0x80u) == 0)
    v25 = __p;
  else
    v25 = (void **)__p[0];
  if ((SBYTE7(v110) & 0x80u) == 0)
    v26 = BYTE7(v110);
  else
    v26 = (uint64_t)__p[1];
  v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v25, v26);
  v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" | ", 3);
  v29 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v30 = (void (***)(stat *__return_ptr, _QWORD))off_1ED114760;
  if (!off_1ED114760)
  {
    ctu::Gestalt::create_default_global(v29);
    v31 = __dst[0];
    __dst[0] = 0uLL;
    v32 = (std::__shared_weak_count *)*(&off_1ED114760 + 1);
    off_1ED114760 = v31;
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v35 = (std::__shared_weak_count *)*((_QWORD *)&__dst[0] + 1);
    if (*((_QWORD *)&__dst[0] + 1))
    {
      v36 = (unint64_t *)(*((_QWORD *)&__dst[0] + 1) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v30 = (void (***)(stat *__return_ptr, _QWORD))off_1ED114760;
  }
  v38 = (std::__shared_weak_count *)*(&off_1ED114760 + 1);
  v120 = v30;
  v121 = *(&off_1ED114760 + 1);
  if (*(&off_1ED114760 + 1))
  {
    v39 = (unint64_t *)(*(&off_1ED114760 + 1) + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (**v30)(&v132, v30);
  if ((v132.st_gid & 0x80000000) == 0)
    v41 = &v132;
  else
    v41 = *(stat **)&v132.st_dev;
  if ((v132.st_gid & 0x80000000) == 0)
    st_gid_high = HIBYTE(v132.st_gid);
  else
    st_gid_high = v132.st_ino;
  v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v41, st_gid_high);
  v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
  v45 = *(char *)(a3 + 23);
  if (v45 >= 0)
    v46 = a3;
  else
    v46 = *(_QWORD *)a3;
  if (v45 >= 0)
    v47 = *(unsigned __int8 *)(a3 + 23);
  else
    v47 = *(_QWORD *)(a3 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, v46, v47);
  if (SHIBYTE(v132.st_gid) < 0)
    operator delete(*(void **)&v132.st_dev);
  if (v38)
  {
    v48 = (unint64_t *)&v38->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
      if ((SBYTE7(v110) & 0x80000000) == 0)
        goto LABEL_57;
      goto LABEL_56;
    }
  }
  if (SBYTE7(v110) < 0)
LABEL_56:
    operator delete(__p[0]);
LABEL_57:
  if (v108[1])
  {
    v50 = (unint64_t *)((char *)v108[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      (*(void (**)(void *))(*(_QWORD *)v108[1] + 16))(v108[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v108[1]);
    }
  }
  memset(__dst, 170, 24);
  if ((BYTE8(v129) & 0x10) != 0)
  {
    v54 = v129;
    if ((unint64_t)v129 < *((_QWORD *)&v126 + 1))
    {
      *(_QWORD *)&v129 = *((_QWORD *)&v126 + 1);
      v54 = *((_QWORD *)&v126 + 1);
    }
    v55 = (const void *)v126;
    v52 = v54 - v126;
    if ((unint64_t)(v54 - v126) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_174;
  }
  else
  {
    if ((BYTE8(v129) & 8) == 0)
    {
      v52 = 0;
      BYTE7(v110) = 0;
      v53 = __p;
      goto LABEL_75;
    }
    v55 = (const void *)*((_QWORD *)&v124 + 1);
    v52 = *((_QWORD *)&v125 + 1) - *((_QWORD *)&v124 + 1);
    if (*((_QWORD *)&v125 + 1) - *((_QWORD *)&v124 + 1) > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_174:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v52 >= 0x17)
  {
    v56 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v52 | 7) != 0x17)
      v56 = v52 | 7;
    v57 = v56 + 1;
    v53 = operator new(v56 + 1);
    __p[1] = (void *)v52;
    *(_QWORD *)&v110 = v57 | 0x8000000000000000;
    __p[0] = v53;
    goto LABEL_74;
  }
  BYTE7(v110) = v52;
  v53 = __p;
  if (v52)
LABEL_74:
    memmove(v53, v55, v52);
LABEL_75:
  *((_BYTE *)v53 + v52) = 0;
  v58 = BYTE7(v110);
  if ((SBYTE7(v110) & 0x80u) == 0)
  {
    v59 = __p;
  }
  else
  {
    v58 = (unint64_t)__p[1];
    v59 = (void **)__p[0];
  }
  if (v58 >= 0xC8)
    v60 = 200;
  else
    v60 = v58;
  if (v60 >= 0x17)
  {
    v67 = (v60 & 0xF8) + 8;
    if ((v60 | 7) != 0x17)
      v67 = v60 | 7;
    v68 = v67 + 1;
    v61 = operator new(v67 + 1);
    *((_QWORD *)&__dst[0] + 1) = v60;
    *(_QWORD *)&__dst[1] = v68 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v61;
LABEL_95:
    memmove(v61, v59, v60);
    v62 = 0x1E0CB3000;
    *((_BYTE *)v61 + v60) = 0;
    if ((SBYTE7(v110) & 0x80000000) == 0)
      goto LABEL_84;
    goto LABEL_96;
  }
  BYTE7(__dst[1]) = v60;
  v61 = __dst;
  if (v60)
    goto LABEL_95;
  v62 = 0x1E0CB3000uLL;
  LOBYTE(__dst[0]) = 0;
  if ((SBYTE7(v110) & 0x80000000) == 0)
    goto LABEL_84;
LABEL_96:
  operator delete(__p[0]);
LABEL_84:
  if ((SBYTE7(__dst[1]) & 0x80u) == 0)
    v63 = __dst;
  else
    v63 = *(_OWORD **)&__dst[0];
  objc_msgSend(v11, "addObject:", objc_msgSend(MEMORY[0x1E0CB39D8], "queryItemWithName:value:", CFSTR("Title"), objc_msgSend(*(id *)(v62 + 2368), "stringWithUTF8String:", v63)));
  if (*((char *)a4 + 23) >= 0)
    v64 = a4;
  else
    v64 = (uint64_t *)*a4;
  objc_msgSend(v11, "addObject:", objc_msgSend(MEMORY[0x1E0CB39D8], "queryItemWithName:value:", CFSTR("Description"), objc_msgSend(*(id *)(v62 + 2368), "stringWithUTF8String:", v64)));
  objc_msgSend(v11, "addObject:", objc_msgSend(MEMORY[0x1E0CB39D8], "queryItemWithName:value:", CFSTR("DeleteOnAttach"), CFSTR("1")));
  v118 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v65 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v65 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v117[7] = v65;
  v117[8] = v65;
  v117[5] = v65;
  v117[6] = v65;
  v117[3] = v65;
  v117[4] = v65;
  v117[1] = v65;
  v117[2] = v65;
  v116 = v65;
  v117[0] = v65;
  *(_OWORD *)v114 = v65;
  v115 = v65;
  v112 = v65;
  v113 = v65;
  v110 = v65;
  v111 = v65;
  *(_OWORD *)__p = v65;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
  v66 = *a5;
  if (*a5)
  {
    xpc_retain(*a5);
LABEL_98:
    xpc_retain(v66);
    v69 = v66;
    goto LABEL_99;
  }
  v66 = xpc_null_create();
  if (v66)
    goto LABEL_98;
  v66 = xpc_null_create();
  v69 = 0;
LABEL_99:
  xpc_release(v69);
  v70 = *a5;
  if (*a5)
    xpc_retain(*a5);
  else
    v70 = xpc_null_create();
  if (MEMORY[0x1A85902BC](*a5) == MEMORY[0x1E0C812C8])
  {
    count = xpc_array_get_count(*a5);
    if (v70)
      goto LABEL_104;
LABEL_106:
    object = xpc_null_create();
    goto LABEL_107;
  }
  count = 0;
  if (!v70)
    goto LABEL_106;
LABEL_104:
  xpc_retain(v70);
  object = v70;
LABEL_107:
  xpc_release(v70);
  if (count || v66 != object)
  {
    v72 = 0;
    v73 = count - 1;
    while (1)
    {
      while (1)
      {
        memset(v108, 170, sizeof(v108));
        value = xpc_array_get_value(v66, v72);
        *(_QWORD *)&v132.st_dev = value;
        if (value)
          xpc_retain(value);
        else
          *(_QWORD *)&v132.st_dev = xpc_null_create();
        xpc::dyn_cast_or_default();
        xpc_release(*(xpc_object_t *)&v132.st_dev);
        if (SHIBYTE(v108[2]) >= 0)
          v75 = v108;
        else
          v75 = (void **)v108[0];
        if (SHIBYTE(v108[2]) >= 0)
          v76 = HIBYTE(v108[2]);
        else
          v76 = (uint64_t)v108[1];
        v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v110, (uint64_t)v75, v76);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)",", 1);
        v78.tv_sec = 0xAAAAAAAAAAAAAAAALL;
        v78.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
        *(timespec *)&v132.st_blksize = v78;
        *(timespec *)v132.st_qspare = v78;
        v132.st_birthtimespec = v78;
        *(timespec *)&v132.st_size = v78;
        v132.st_mtimespec = v78;
        v132.st_ctimespec = v78;
        *(timespec *)&v132.st_uid = v78;
        v132.st_atimespec = v78;
        *(timespec *)&v132.st_dev = v78;
        if (SHIBYTE(v108[2]) >= 0)
          v79 = v108;
        else
          v79 = (void **)v108[0];
        if (!stat((const char *)v79, &v132))
        {
          v80 = SHIBYTE(v108[2]) >= 0 ? (const char *)v108 : (const char *)v108[0];
          v81 = opendir(v80);
          v82 = v81;
          if (v81)
          {
            readdir(v81);
            closedir(v82);
          }
        }
        ctu::fs::chmod();
        if ((SHIBYTE(v108[2]) & 0x80000000) == 0)
          break;
        operator delete(v108[0]);
        v83 = v72 + 1;
        v84 = v73 == v72++;
        if (v84)
          goto LABEL_134;
      }
      v83 = v72 + 1;
      v84 = v73 == v72++;
      if (v84)
      {
LABEL_134:
        v72 = v83;
        if (v66 == object)
          break;
      }
    }
  }
  xpc_release(object);
  xpc_release(v66);
  strlen(abm::trace::kSnapshotFolder[0]);
  ctu::fs::chmod();
  v85 = *(char *)(a6 + 23);
  if (v85 >= 0)
    v86 = *(unsigned __int8 *)(a6 + 23);
  else
    v86 = *(_QWORD *)(a6 + 8);
  if (v86)
  {
    if (v85 >= 0)
      v87 = a6;
    else
      v87 = *(_QWORD *)a6;
    v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v110, v87, v86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)",", 1);
    v89 = CFSTR("-1");
  }
  else
  {
    v89 = CFSTR("sysdiagnose-only");
  }
  objc_msgSend(v106, "addObject:", objc_msgSend(MEMORY[0x1E0CB39D8], "queryItemWithName:value:", CFSTR("autodiagnostics"), v89));
  v90 = (void *)MEMORY[0x1E0CB39D8];
  v91 = (void *)MEMORY[0x1E0CB3940];
  if ((BYTE8(v116) & 0x10) != 0)
  {
    v94 = v116;
    if ((unint64_t)v116 < *((_QWORD *)&v113 + 1))
    {
      *(_QWORD *)&v116 = *((_QWORD *)&v113 + 1);
      v94 = *((_QWORD *)&v113 + 1);
    }
    v95 = (const void *)v113;
    v92 = v94 - v113;
    if ((unint64_t)(v94 - v113) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_176;
  }
  else
  {
    if ((BYTE8(v116) & 8) == 0)
    {
      v92 = 0;
      HIBYTE(v132.st_gid) = 0;
      v93 = &v132;
      goto LABEL_157;
    }
    v95 = (const void *)*((_QWORD *)&v111 + 1);
    v92 = *((_QWORD *)&v112 + 1) - *((_QWORD *)&v111 + 1);
    if (*((_QWORD *)&v112 + 1) - *((_QWORD *)&v111 + 1) > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_176:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v92 >= 0x17)
  {
    v96 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v92 | 7) != 0x17)
      v96 = v92 | 7;
    v97 = v96 + 1;
    v93 = operator new(v96 + 1);
    v132.st_ino = v92;
    *(_QWORD *)&v132.st_uid = v97 | 0x8000000000000000;
    *(_QWORD *)&v132.st_dev = v93;
    goto LABEL_156;
  }
  HIBYTE(v132.st_gid) = v92;
  v93 = &v132;
  if (v92)
LABEL_156:
    memmove(v93, v95, v92);
LABEL_157:
  *((_BYTE *)v93 + v92) = 0;
  if ((v132.st_gid & 0x80000000) == 0)
    v98 = &v132;
  else
    v98 = *(stat **)&v132.st_dev;
  objc_msgSend(v106, "addObject:", objc_msgSend(v90, "queryItemWithName:value:", CFSTR("Attachments"), objc_msgSend(v91, "stringWithUTF8String:", v98)));
  if (SHIBYTE(v132.st_gid) < 0)
    operator delete(*(void **)&v132.st_dev);
  objc_msgSend(v105, "setQueryItems:", v106);
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CA5878], "defaultWorkspace"), "openURL:configuration:completionHandler:", objc_msgSend(v105, "URL"), 0, 0);
  if (v105)

  if (v106)
  v99 = (void *)*MEMORY[0x1E0DE4F50];
  __p[0] = v99;
  v101 = *(void **)(MEMORY[0x1E0DE4F50] + 64);
  v100 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(void **)((char *)__p + *((_QWORD *)v99 - 3)) = v101;
  v102 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v110 = v100;
  *((_QWORD *)&v110 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v115) < 0)
    operator delete(v114[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A858F92C](v117);
  if (SBYTE7(__dst[1]) < 0)
    operator delete(*(void **)&__dst[0]);
  *(_QWORD *)&v122 = v99;
  *(_QWORD *)((char *)&v122 + *((_QWORD *)v99 - 3)) = v101;
  *(_QWORD *)&v123 = v100;
  *((_QWORD *)&v123 + 1) = v102 + 16;
  if (SHIBYTE(v128) < 0)
    operator delete(*((void **)&v127 + 1));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A858F92C](v130);
}

void sub_1A3457F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  if (a22 < 0)
    operator delete(__p);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a62);
  _Unwind_Resume(a1);
}

void sub_1A3458048()
{
  JUMPOUT(0x1A34580ACLL);
}

void sub_1A3458058(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  xpc_release(object);
  JUMPOUT(0x1A345809CLL);
}

uint64_t __copy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrIN3abm10HelperTaskEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrIN3abm10HelperTaskEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t dispatch::callback<void({block_pointer})(TelephonyXPC::ServerClientState,xpc::dict,dispatch::callback<void({block_pointer})(int,xpc::dict)>)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

BOOL abm::TapToRadarTask::checkTraceLogsInArchive_sync(uint64_t a1, uint64_t *a2, char ***a3)
{
  NSObject *v6;
  _BOOL8 result;
  int open_filename;
  int v9;
  NSObject *v10;
  int next_header;
  uint64_t v12;
  char **v13;
  char *v14;
  __int128 v15;
  size_t v16;
  __int128 v17;
  int v18;
  int v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char **v24;
  int64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  NSObject *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  std::locale v33[2];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  _BYTE __p[48];
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  archive_read_new();
  v37 = 0xAAAAAAAAAAAAAAAALL;
  if (archive_read_support_format_tar() || archive_read_support_filter_all())
  {
    v6 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__p = 0;
      _os_log_error_impl(&dword_1A343C000, v6, OS_LOG_TYPE_ERROR, "Failed to open archive", __p, 2u);
    }
LABEL_5:
    archive_read_free();
    return 0;
  }
  open_filename = archive_read_open_filename();
  if (open_filename)
  {
    v9 = open_filename;
    v10 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a2 + 23) >= 0)
        v31 = a2;
      else
        v31 = (uint64_t *)*a2;
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = v31;
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = v9;
      _os_log_error_impl(&dword_1A343C000, v10, OS_LOG_TYPE_ERROR, "Failed to open %s with Error %d", __p, 0x12u);
    }
    goto LABEL_5;
  }
  v32 = a2;
  next_header = archive_read_next_header();
  if (!next_header)
  {
    while (a3[1] != *a3)
    {
      v12 = archive_entry_pathname();
      v13 = *a3;
      if (*a3 < a3[1])
      {
        v14 = (char *)v12;
        while (1)
        {
          *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v35 = v15;
          v36 = v15;
          *(_OWORD *)&v33[0].__locale_ = v15;
          v34 = v15;
          std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)v33, *v13, 0);
          v16 = strlen(v14);
          *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v44 = v17;
          v41 = 0xAAAAAAAAAAAAAA00;
          *(_QWORD *)&__p[40] = 0xAAAAAAAAAAAAAAAALL;
          v39 = 0;
          v40 = 0;
          v42 = 0;
          v43 = 0;
          LOBYTE(v44) = 0;
          BYTE8(v44) = 0;
          v45 = 0;
          memset(__p, 0, 41);
          v18 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v33, (std::sub_match<const char *> *)v14, (std::sub_match<const char *> *)&v14[v16], (std::vector<std::csub_match> *)__p, 4160);
          v19 = v44;
          if (*(_QWORD *)__p)
          {
            *(_QWORD *)&__p[8] = *(_QWORD *)__p;
            operator delete(*(void **)__p);
          }
          v20 = v19 ? 0 : v18;
          if (v20 == 1)
            break;
          v21 = (std::__shared_weak_count *)v36;
          if ((_QWORD)v36)
          {
            v22 = (unint64_t *)(v36 + 8);
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          std::locale::~locale(v33);
          if (++v13 >= a3[1])
            goto LABEL_35;
        }
        v24 = a3[1];
        v25 = (char *)v24 - (char *)(v13 + 1);
        if (v24 != v13 + 1)
          memmove(v13, v13 + 1, (char *)v24 - (char *)(v13 + 1));
        a3[1] = (char **)((char *)v13 + v25);
        v26 = (std::__shared_weak_count *)v36;
        if ((_QWORD)v36)
        {
          v27 = (unint64_t *)(v36 + 8);
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        std::locale::~locale(v33);
      }
LABEL_35:
      next_header = archive_read_next_header();
      if (next_header)
        goto LABEL_36;
    }
    archive_read_free();
    return 1;
  }
LABEL_36:
  archive_read_free();
  if (next_header == 1)
    return 1;
  v29 = *(NSObject **)(a1 + 40);
  result = os_log_type_enabled(v29, OS_LOG_TYPE_ERROR);
  if (result)
  {
    if (*((char *)v32 + 23) >= 0)
      v30 = v32;
    else
      v30 = (uint64_t *)*v32;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v30;
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = next_header;
    _os_log_error_impl(&dword_1A343C000, v29, OS_LOG_TYPE_ERROR, "Failed while reading archive %s with Error %d", __p, 0x12u);
    return 0;
  }
  return result;
}

void sub_1A3458500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a11);
  _Unwind_Resume(a1);
}

uint64_t util::convert<BOOL>(const std::string *a1, BOOL *a2, int a3)
{
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  std::string::size_type size;
  size_t __idx;

  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    v6 = (const char *)a1->__r_.__value_.__r.__words[0];
    if (strcasecmp(a1->__r_.__value_.__l.__data_, "false") && strcasecmp(v6, "off") && strcasecmp(v6, "no"))
    {
      if (!strcasecmp(v6, "true")
        || !strcasecmp(v6, "on")
        || !strcasecmp(v6, "yes")
        || !strcasecmp(v6, "full")
        || !strcasecmp(v6, "streaming")
        || !strcasecmp(v6, "lite"))
      {
        goto LABEL_28;
      }
      goto LABEL_21;
    }
LABEL_27:
    v7 = 0;
LABEL_29:
    *a2 = v7 != 0;
    return 1;
  }
  if (!strcasecmp((const char *)a1, "false")
    || !strcasecmp((const char *)a1, "off")
    || !strcasecmp((const char *)a1, "no"))
  {
    goto LABEL_27;
  }
  if (!strcasecmp((const char *)a1, "true"))
    goto LABEL_28;
  if (!strcasecmp((const char *)a1, "on"))
    goto LABEL_28;
  if (!strcasecmp((const char *)a1, "yes"))
    goto LABEL_28;
  if (!strcasecmp((const char *)a1, "full"))
    goto LABEL_28;
  if (!strcasecmp((const char *)a1, "streaming"))
    goto LABEL_28;
  v6 = (const char *)a1;
  if (!strcasecmp((const char *)a1, "lite"))
    goto LABEL_28;
LABEL_21:
  if (!strcasecmp(v6, "background"))
  {
LABEL_28:
    v7 = 1;
    goto LABEL_29;
  }
  __idx = 0xAAAAAAAAAAAAAAAALL;
  v7 = std::stol(a1, &__idx, a3);
  v8 = 0;
  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  if (__idx == size && v7 < 2)
    goto LABEL_29;
  return v8;
}

uint64_t sub_1A3458754(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

void ___ZN3abm14TapToRadarTask32checkAttachmentForRadarType_syncENS_6helper9RadarTypeERN3xpc5arrayE_block_invoke(uint64_t a1, uint64_t *a2)
{
  NSObject *v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) < 0)
      a2 = (uint64_t *)*a2;
    v4 = 136315138;
    v5 = a2;
    _os_log_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEFAULT, "#I Failed to find logs with [%s]", (uint8_t *)&v4, 0xCu);
  }
}

uint64_t ctu::Loggable<abm::HelperTask,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<abm::HelperTask,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  __int128 v4;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  if (*(char *)(v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v3, *(_QWORD *)(v3 + 8));
  }
  else
  {
    v4 = *(_OWORD *)v3;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 16);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
}

uint64_t ctu::Loggable<abm::HelperTask,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<abm::HelperTask,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = &unk_1E4A06FA8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<abm::HelperTask,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = &unk_1E4A06FA8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::os::signpost_interval::~signpost_interval(ctu::os::signpost_interval *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  ctu::os::signpost_interval *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *((_QWORD *)this + 5);
  if (v2 && *(_QWORD *)this)
  {
    v3 = *((_QWORD *)this + 1);
    v10 = *(_QWORD *)this;
    v11 = v3;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v11, &v10);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
    os_release(v4);
  v5 = (_QWORD *)((char *)this + 16);
  *((_QWORD *)this + 1) = 0;
  v6 = (ctu::os::signpost_interval *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6 == (ctu::os::signpost_interval *)((char *)this + 16))
  {
    v7 = 4;
    v6 = (ctu::os::signpost_interval *)((char *)this + 16);
  }
  else
  {
    if (!v6)
    {
      *(_QWORD *)this = 0;
      return;
    }
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  v8 = (_QWORD *)*((_QWORD *)this + 5);
  *(_QWORD *)this = 0;
  if (v8 == v5)
  {
    v9 = 4;
  }
  else
  {
    if (!v8)
      return;
    v9 = 5;
    v5 = v8;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v9))(v5);
}

void ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  xpc_object_t object;

  v1 = *(unsigned int *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  object = v2;
  if (v2)
    xpc_retain(v2);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v3 + 16))(v3, v1, &object);
  xpc_release(object);
}

void sub_1A3458A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  const void *v4;
  void *v5;
  void *v6;
  xpc_object_t result;

  v4 = *(const void **)(a2 + 32);
  if (v4)
  {
    v5 = _Block_copy(v4);
    v6 = *(void **)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v6;
    if (v6)
      return xpc_retain(v6);
  }
  else
  {
    v6 = *(void **)(a2 + 40);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = v6;
    if (v6)
      return xpc_retain(v6);
  }
  result = xpc_null_create();
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE(uint64_t a1)
{
  const void *v2;

  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
  v2 = *(const void **)(a1 + 32);
  if (v2)
    _Block_release(v2);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__1NS_9allocatorIS4_EEFvP8os_log_syEE7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1E4A06F00;
  return result;
}

void _ZNKSt3__110__function6__funcIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__1NS_9allocatorIS4_EEFvP8os_log_syEE7__cloneEPNS0_6__baseIS9_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E4A06F00;
}

void _ZNSt3__110__function6__funcIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__1NS_9allocatorIS4_EEFvP8os_log_syEEclEOS8_Oy(uint64_t a1, os_log_t *a2, os_signpost_id_t *a3)
{
  os_signpost_id_t v3;
  NSObject *v4;
  uint8_t v5[16];

  v3 = *a3;
  if (*a3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v4 = *a2;
    if (os_signpost_enabled(*a2))
    {
      *(_WORD *)v5 = 0;
      _os_signpost_emit_with_name_impl(&dword_1A343C000, v4, OS_SIGNPOST_INTERVAL_END, v3, "CellularTapToRadar", "", v5, 2u);
    }
  }
}

uint64_t _ZNKSt3__110__function6__funcIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__1NS_9allocatorIS4_EEFvP8os_log_syEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN3abm14TapToRadarTask9init_syncEvEUb_E3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN3abm14TapToRadarTask9init_syncEvEUb_E3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN3abm14TapToRadarTask9init_syncEvEUb_E3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN3abm14TapToRadarTask9init_syncEvEUb_E3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__1NS_9allocatorIS4_EEFvP8os_log_syEE11target_typeEv()
{
  return &_ZTIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__1;
}

uint64_t *_ZNSt3__110unique_ptrIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__3NS_14default_deleteIS3_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 143) < 0)
      operator delete(*(void **)(v2 + 120));
    xpc_release(*(xpc_object_t *)(v2 + 112));
    *(_QWORD *)(v2 + 112) = 0;
    if (*(char *)(v2 + 111) < 0)
    {
      operator delete(*(void **)(v2 + 88));
      if ((*(char *)(v2 + 79) & 0x80000000) == 0)
        goto LABEL_6;
    }
    else if ((*(char *)(v2 + 79) & 0x80000000) == 0)
    {
LABEL_6:
      ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)v2);
      operator delete(v3);
      return a1;
    }
    operator delete(*(void **)(v2 + 56));
    goto LABEL_6;
  }
  return a1;
}

uint64_t *_ZZN8dispatch5asyncIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__3EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS6_14default_deleteIS8_EEEEENUlPvE_8__invokeESC_(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  const __CFString *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __CFUserNotification *v8;
  __CFUserNotification *v9;
  int IsInternalBuild;
  int v11;
  int v12;
  uint64_t v13;
  xpc_object_t *v14;
  uint64_t v15;
  uint64_t v16;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  uint8_t *v24;
  xpc_object_t v25;
  xpc_object_t v26;
  __int128 v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  NSObject *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36[2];
  std::__shared_weak_count *v37;
  _BYTE __p[32];
  uint8_t buf[32];
  uint64_t v40;
  std::__shared_weak_count *v41;
  CFOptionFlags responseFlags;
  SInt32 error;

  v36[0] = a1;
  v2 = *(_QWORD *)(a1 + 80);
  v3 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("Dismiss"), *MEMORY[0x1E0C9B838]);
  if (*(_DWORD *)(a1 + 48) == 5)
    v4 = CFSTR("Cellular Audio Problem Detected");
  else
    v4 = CFSTR("Cellular Problem Detected");
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v4, *MEMORY[0x1E0C9B800]);
  objc_msgSend(v3, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0C9B820]);
  objc_msgSend(v3, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0DABBB0]);
  objc_msgSend(v3, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], *MEMORY[0x1E0DABB98]);
  objc_msgSend(v3, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0DABC38]);
  if (TelephonyUtilIsInternalBuild())
    objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("File Radar"), *MEMORY[0x1E0C9B830]);
  v5 = (uint64_t *)(a1 + 56);
  v6 = a1 + 56;
  if (*(char *)(a1 + 79) < 0)
    v6 = *v5;
  v7 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v7, *MEMORY[0x1E0C9B810]);
  objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("Disable notifications"), *MEMORY[0x1E0C9B868]);
  error = 0;
  responseFlags = 3;
  v8 = CFUserNotificationCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 300.0, 3uLL, &error, (CFDictionaryRef)v3);
  v9 = v8;
  if (v8 && !error)
  {
    error = CFUserNotificationReceiveResponse(v8, 0.0, &responseFlags);
    IsInternalBuild = TelephonyUtilIsInternalBuild();
    if (responseFlags == 1)
      v11 = IsInternalBuild;
    else
      v11 = 0;
    if (v11 == 1 && !error)
    {
      memset(__p, 170, 24);
      v12 = *(_DWORD *)(a1 + 48);
      v13 = a1 + 88;
      v14 = (xpc_object_t *)(a1 + 112);
      v15 = a1 + 120;
      abm::TapToRadarTask::prepareRadar_sync(v12, v13, v14, v15, __p);
      abm::TapToRadarTask::fileRadar_sync(v2, v16, (uint64_t)v5, (uint64_t *)__p, v14, v15);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      goto LABEL_18;
    }
    if (responseFlags == 2 && !error)
    {
      v40 = 0xAAAAAAAAAAAAAAAALL;
      v41 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
      __p[23] = 10;
      strcpy(__p, "TapToRadar");
      abm::client::CreateManager();
      v18 = xpc_dictionary_create(0, 0, 0);
      if (v18 || (v18 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1A85902BC](v18) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v18);
          v19 = v18;
        }
        else
        {
          v19 = xpc_null_create();
        }
      }
      else
      {
        v19 = xpc_null_create();
        v18 = 0;
      }
      xpc_release(v18);
      v20 = xpc_string_create("TTR");
      if (!v20)
        v20 = xpc_null_create();
      xpc_dictionary_set_value(v19, "kKeyTraceName", v20);
      v21 = xpc_null_create();
      xpc_release(v20);
      xpc_release(v21);
      v22 = xpc_string_create("Mode");
      if (!v22)
        v22 = xpc_null_create();
      xpc_dictionary_set_value(v19, "kKeyTracePropertyName", v22);
      v23 = xpc_null_create();
      xpc_release(v22);
      xpc_release(v23);
      memset(buf, 0, 24);
      std::to_string((std::string *)__p, 0);
      *(_OWORD *)buf = *(_OWORD *)__p;
      *(_QWORD *)&buf[16] = *(_QWORD *)&__p[16];
      if (__p[23] >= 0)
        v24 = buf;
      else
        v24 = *(uint8_t **)buf;
      v25 = xpc_string_create((const char *)v24);
      if (!v25)
        v25 = xpc_null_create();
      xpc_dictionary_set_value(v19, "kKeyTracePropertyValue", v25);
      v26 = xpc_null_create();
      xpc_release(v25);
      xpc_release(v26);
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
      *(_QWORD *)&v27 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)__p = v27;
      *(_OWORD *)&__p[16] = v27;
      v36[1] = v40;
      v37 = v41;
      if (v41)
      {
        p_shared_owners = (unint64_t *)&v41->__shared_owners_;
        do
          v29 = __ldxr(p_shared_owners);
        while (__stxr(v29 + 1, p_shared_owners));
      }
      *(_QWORD *)buf = operator new(0x20uLL);
      *(_OWORD *)&buf[8] = xmmword_1A357F050;
      strcpy(*(char **)buf, "kCommandSetTraceProperty");
      abm::client::PerformCommand();
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
      if (v37)
      {
        v30 = &v37->__shared_owners_;
        do
          v31 = __ldaxr((unint64_t *)v30);
        while (__stlxr(v31 - 1, (unint64_t *)v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      if (*(_DWORD *)__p && (v32 = *(NSObject **)(v2 + 40), os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1A343C000, v32, OS_LOG_TYPE_ERROR, "Failed to disable Radar Notifications", buf, 2u);
        if ((__p[31] & 0x80000000) == 0)
          goto LABEL_53;
      }
      else if ((__p[31] & 0x80000000) == 0)
      {
LABEL_53:
        xpc_release(v19);
        v33 = v41;
        if (v41)
        {
          v34 = (unint64_t *)&v41->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        goto LABEL_18;
      }
      operator delete(*(void **)&__p[8]);
      goto LABEL_53;
    }
LABEL_18:
    CFRelease(v9);
    return _ZNSt3__110unique_ptrIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__3NS_14default_deleteIS3_EEED1B8ne180100Ev(v36);
  }
  if (v8)
    goto LABEL_18;
  return _ZNSt3__110unique_ptrIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__3NS_14default_deleteIS3_EEED1B8ne180100Ev(v36);
}

void sub_1A3459264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  uint64_t v26;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;

  if (a25 < 0)
    operator delete(__p);
  v28 = a12;
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  xpc_release(v25);
  v31 = *(std::__shared_weak_count **)(v26 - 72);
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      _ZNSt3__110unique_ptrIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__3NS_14default_deleteIS3_EEED1B8ne180100Ev(&a10);
      _Unwind_Resume(a1);
    }
  }
  _ZNSt3__110unique_ptrIZZN3abm14TapToRadarTask9init_syncEvEUb_E3__3NS_14default_deleteIS3_EEED1B8ne180100Ev(&a10);
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1, char *a2, int a3)
{
  const std::locale *v6;
  size_t v7;

  v6 = (const std::locale *)MEMORY[0x1A858F8F0]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x1E0DE4A90]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E0DE4C08]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  v7 = strlen(a2);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(a1, a2, &a2[v7]) != (std::basic_regex<char> *)&a2[v7])
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_1A3459450(_Unwind_Exception *a1)
{
  std::locale *v1;
  uint64_t v2;

  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_1A345946C(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, char *a2, char *a3)
{
  std::basic_regex<char> *v3;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  std::basic_regex<char> *v10;
  std::__owns_one_state<char> *v11;
  int v12;
  char *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3)
    return a2;
  if (*a2 == 94)
  {
    v6 = operator new(0x18uLL);
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *v6 = &unk_1E4A06780;
    v6[1] = v9;
    *((_BYTE *)v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      v10 = v3;
      v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      v12 = *(_DWORD *)(a1 + 28);
      v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, (uint64_t)v10, a3);
      if (v13 != (char *)v10)
      {
        v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v3 != v10)
          continue;
      }
      if ((char *)&v10->__traits_.__loc_.__locale_ + 1 != a3 || LOBYTE(v10->__traits_.__loc_.__locale_) != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v14 = operator new(0x18uLL);
      v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_QWORD *)(v16 + 8);
      *v14 = &unk_1E4A067C8;
      v14[1] = v17;
      *((_BYTE *)v14 + 16) = v15;
      *(_QWORD *)(v16 + 8) = v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  uint64_t v9;
  std::basic_regex<char> *v10;
  std::basic_regex<char> *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v3 = a3;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v7 == a2)
    goto LABEL_13;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v7, v3);
  }
  while (v7 != v8);
  if (v8 == a2)
LABEL_13:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 != v3)
  {
    while (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
    {
      v9 = *(_QWORD *)(a1 + 56);
      v10 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
      v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1), v3);
      if (v11 == (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1))
        goto LABEL_13;
      do
      {
        v8 = v11;
        v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v11, v3);
      }
      while (v11 != v8);
      if (v8 == v10)
        goto LABEL_13;
      v12 = operator new(0x18uLL);
      v13 = *(_QWORD *)(v9 + 8);
      v12[1] = *(_QWORD *)(v6 + 8);
      v12[2] = v13;
      *v12 = &unk_1E4A06C48;
      *(_QWORD *)(v6 + 8) = v12;
      *(_QWORD *)(v9 + 8) = 0;
      v14 = operator new(0x10uLL);
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v14[1] = v15;
      *(_QWORD *)(v9 + 8) = v14;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
      v16 = operator new(0x10uLL);
      v17 = *(_QWORD *)(v9 + 8);
      *v16 = &unk_1E4A06C90;
      v16[1] = v17;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(v9 + 8);
      if (v8 == v3)
        return v3;
    }
    return v8;
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v10 = operator new(0x10uLL);
    v11 = *(_QWORD *)(v6 + 8);
    v10[1] = v11;
    *(_QWORD *)(v6 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = v8 + 1;
    if (v9 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, __s, v8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = v8 + 1;
    if (v9 == a3)
      return a3;
  }
  v12 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = (char *)memchr(v9, 10, a3 - v9);
    if (v21)
      v22 = v21;
    else
      v22 = a3;
    if (v22 == v9)
    {
      v13 = operator new(0x10uLL);
      v14 = *(_QWORD *)(v12 + 8);
      v13[1] = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v9, v22);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v12 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_1E4A06C48;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v12 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v12 + 8);
    *v19 = &unk_1E4A06C90;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    v12 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(a1 + 56) = v12;
    if (v22 == a3)
      v9 = v22;
    else
      v9 = v22 + 1;
  }
  while (v9 != a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  std::basic_regex<char> *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::basic_regex<char> *v21;
  std::basic_regex<char> *v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v10 = operator new(0x10uLL);
    v11 = *(_QWORD *)(v6 + 8);
    v10[1] = v11;
    *(_QWORD *)(v6 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v9 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v9 == a3)
      return a3;
  }
  v12 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = (std::basic_regex<char> *)memchr(v9, 10, (char *)a3 - (char *)v9);
    if (v21)
      v22 = v21;
    else
      v22 = a3;
    if (v22 == v9)
    {
      v13 = operator new(0x10uLL);
      v14 = *(_QWORD *)(v12 + 8);
      v13[1] = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v9, v22);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v12 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_1E4A06C48;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v12 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v12 + 8);
    *v19 = &unk_1E4A06C90;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    v12 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(a1 + 56) = v12;
    if (v22 == a3)
      v9 = v22;
    else
      v9 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
  }
  while (v9 != a3);
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  int v7;
  unsigned int v8;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;

  if (a2 == a3 || *a2 != 92)
    return a2;
  v5 = a2 + 1;
  if (a2 + 1 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v7 = *v5;
  v8 = v7 - 48;
  if (v7 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v8);
    return a2 + 2;
  }
  if ((v7 - 49) > 8)
    goto LABEL_18;
  v10 = a2 + 2;
  if (a2 + 2 == a3)
  {
    v10 = a3;
  }
  else
  {
    while (1)
    {
      v11 = *v10;
      if ((v11 - 48) > 9)
        break;
      if (v8 >= 0x19999999)
        goto LABEL_23;
      ++v10;
      v8 = v11 + 10 * v8 - 48;
      if (v10 == a3)
      {
        v10 = a3;
        break;
      }
    }
    if (!v8)
LABEL_23:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  if (v8 > this->__marked_count_)
    goto LABEL_23;
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v8);
  if (v10 == v5)
  {
LABEL_18:
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>((uint64_t)this, a2 + 1, a3);
    if (v10 == v5)
    {
      v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(this, a2 + 1, a3, 0);
      if (v12 == v5)
        return a2;
      else
        return v12;
    }
  }
  return v10;
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  _DWORD *v5;
  _DWORD *v6;
  int v7;

  v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = v5[40] | 0x400;
        goto LABEL_12;
      case 's':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = v5[40] | 0x4000;
LABEL_12:
        v5[40] = v7;
        goto LABEL_13;
      case 'w':
        v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v6;
        *(_QWORD *)(a1 + 56) = v6;
        v6[40] |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_1A3459E1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A3459E30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A3459E44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A3459E58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A3459E6C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A3459E80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  std::basic_regex<char>::value_type v6;
  unsigned __int8 *result;
  unsigned __int8 v8;
  std::basic_regex<char>::value_type v9;
  int v10;
  int v11;
  unsigned __int8 v12;
  char v13;
  unsigned __int8 v14;
  char v15;
  std::basic_regex<char>::value_type v16;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  v6 = v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3)
        goto LABEL_81;
      v8 = v4[1];
      if (((v8 & 0xDF) - 65) > 0x19u)
        goto LABEL_81;
      v9 = v8 & 0x1F;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v9;
        *((_BYTE *)a4 + 1) = 0;
        return v4 + 2;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v9);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        v10 = v4[1];
        if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38 || (v10 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            v11 = *v4;
            if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6)
              goto LABEL_38;
          }
        }
      }
      goto LABEL_81;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        v6 = 11;
LABEL_65:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_38:
      if (v4 + 1 == a3)
        goto LABEL_81;
      v12 = v4[1];
      v13 = -48;
      if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
        goto LABEL_43;
      v12 |= 0x20u;
      if ((v12 - 97) >= 6u)
        goto LABEL_81;
      v13 = -87;
LABEL_43:
      if (v4 + 2 == a3)
        goto LABEL_81;
      v14 = v4[2];
      v15 = -48;
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
      {
        v14 |= 0x20u;
        if ((v14 - 97) >= 6u)
LABEL_81:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        v15 = -87;
      }
      v16 = v14 + 16 * (v12 + v13) + v15;
      if (!a4)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v16;
      *((_BYTE *)a4 + 1) = 0;
      result = v4 + 3;
      break;
    default:
      if ((char)v5 == 95 || ((char)v5 & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[v5] & 0x500) != 0)
        goto LABEL_81;
      if (!a4)
        goto LABEL_65;
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v5;
      *((_BYTE *)a4 + 1) = 0;
      return v4 + 1;
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  uint64_t v7;
  char *v8;
  char *v9;
  void **v10;
  unint64_t v11;
  __int128 v12;
  void *v13;
  void **v14;
  void **v15;
  void *__p[3];
  void *v18[3];

  if (a3 - __src < 2 || a3 - 1 == __src)
    goto LABEL_39;
  v7 = 0;
  v8 = __src;
  if (*__src != 61)
    goto LABEL_5;
LABEL_4:
  if (v8[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v7)
    {
      v8 = &__src[++v7];
      if (__src[v7] == 61)
        goto LABEL_4;
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v7] == a3)
    goto LABEL_39;
  memset(v18, 170, sizeof(v18));
  std::regex_traits<char>::__lookup_collatename<char *>(__src, a1, &__src[v7], (uint64_t)v18);
  if ((SHIBYTE(v18[2]) & 0x80000000) == 0)
  {
    v9 = (char *)HIBYTE(v18[2]);
    if (HIBYTE(v18[2]))
    {
      memset(__p, 170, sizeof(__p));
      v10 = v18;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v9 = (char *)v18[1];
  if (!v18[1])
    goto LABEL_40;
  memset(__p, 170, sizeof(__p));
  v10 = (void **)v18[0];
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v10, &v9[(_QWORD)v10], (_BYTE **)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1])
    {
LABEL_16:
      v11 = *(_QWORD *)(a4 + 144);
      if (v11 >= *(_QWORD *)(a4 + 152))
      {
        *(_QWORD *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_37;
      }
      else
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v12 = *(_OWORD *)__p;
          *(void **)(v11 + 16) = __p[2];
          *(_OWORD *)v11 = v12;
        }
        *(_QWORD *)(a4 + 144) = v11 + 24;
        *(_QWORD *)(a4 + 144) = v11 + 24;
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_37;
      }
      goto LABEL_33;
    }
  }
  else if (HIBYTE(__p[2]))
  {
    goto LABEL_16;
  }
  v13 = (void *)HIBYTE(v18[2]);
  if (SHIBYTE(v18[2]) < 0)
    v13 = v18[1];
  if (v13 == (void *)2)
  {
    v15 = v18;
    if (SHIBYTE(v18[2]) < 0)
      v15 = (void **)v18[0];
    std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *(char *)v15, *((char *)v15 + 1));
  }
  else
  {
    if (v13 != (void *)1)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
    v14 = v18;
    if (SHIBYTE(v18[2]) < 0)
      v14 = (void **)v18[0];
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *(char *)v14);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_37:
    operator delete(__p[0]);
    if (SHIBYTE(v18[2]) < 0)
      goto LABEL_38;
    return &__src[v7 + 2];
  }
LABEL_33:
  if (SHIBYTE(v18[2]) < 0)
LABEL_38:
    operator delete(v18[0]);
  return &__src[v7 + 2];
}

void sub_1A345A590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v11;
  unint64_t v12;

  if (a3 - __src < 2 || a3 - 1 == __src)
    goto LABEL_15;
  v6 = 0;
  v7 = __src;
  if (*__src != 46)
    goto LABEL_5;
LABEL_4:
  if (v7[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v6)
    {
      v7 = &__src[++v6];
      if (__src[v6] == 46)
        goto LABEL_4;
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v6] == a3)
    goto LABEL_15;
  std::regex_traits<char>::__lookup_collatename<char *>(__src, a1, &__src[v6], (uint64_t)&v11);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v11;
  v8 = v12;
  *(_QWORD *)(a4 + 16) = v12;
  v9 = HIBYTE(v8);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a4 + 8);
  if (v9 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return &__src[v6 + 2];
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *result;

  if (a2 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(_QWORD *)(a4 + 8) = 1;
        a4 = *(_QWORD *)a4;
      }
      else
      {
        *(_BYTE *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(_QWORD *)(a4 + 8) = 1;
          a4 = *(_QWORD *)a4;
        }
        else
        {
          *(_BYTE *)(a4 + 23) = 1;
        }
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 1) = 0;
        result = a2 + 1;
      }
      break;
  }
  return result;
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type v7;
  std::basic_regex<char>::value_type *v8;
  std::basic_regex<char>::value_type v9;
  int v10;
  std::basic_regex<char>::value_type v11;

  if (a2 == a3)
LABEL_70:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  switch(*a2)
  {
    case '"':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v5;
        *((_BYTE *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30)
        goto LABEL_70;
      v7 = *a2 - 48;
      v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        v8 = a3;
LABEL_42:
        if (a4)
          goto LABEL_43;
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30)
        goto LABEL_42;
      v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        v8 = a3;
        if (a4)
          goto LABEL_43;
        goto LABEL_69;
      }
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      if (!a4)
        goto LABEL_69;
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v7;
      *((_BYTE *)a4 + 1) = 0;
      return v8;
  }
}

uint64_t std::regex_traits<char>::__lookup_classname<char const*>(uint64_t a1, _BYTE *__src, _BYTE *a3, BOOL a4)
{
  size_t v4;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void **v13;
  const char *v14;
  uint64_t classname;
  void *__dst[3];

  v4 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 <= 0x16)
  {
    HIBYTE(__dst[2]) = (_BYTE)a3 - (_BYTE)__src;
    v9 = __dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(v9, __src, v4);
    v9 = (void **)((char *)v9 + v4);
    goto LABEL_9;
  }
  v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17)
    v10 = v4 | 7;
  v11 = v10 + 1;
  v9 = (void **)operator new(v10 + 1);
  __dst[1] = (void *)v4;
  __dst[2] = (void *)(v11 | 0x8000000000000000);
  __dst[0] = v9;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)v9 = 0;
  v12 = (char *)HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) >= 0)
    v13 = __dst;
  else
    v13 = (void **)__dst[0];
  if (SHIBYTE(__dst[2]) < 0)
    v12 = (char *)__dst[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v13, &v12[(_QWORD)v13]);
  if (SHIBYTE(__dst[2]) >= 0)
    v14 = (const char *)__dst;
  else
    v14 = (const char *)__dst[0];
  classname = std::__get_classname(v14, a4);
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
  return classname;
}

void sub_1A345ADE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(uint64_t a1, uint64_t a2, char *a3)
{
  char *v6;
  char *v7;
  int v8;
  std::basic_regex<char> *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  std::basic_regex<char> *v15;
  std::__owns_one_state<char> *v16;
  int v17;
  std::basic_regex<char> *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>((std::basic_regex<char> *)a1, (char *)a2, a3);
  v7 = v6;
  if (v6 != (char *)a2 || v6 == a3)
    return v7;
  if ((char *)(a2 + 1) == a3)
    return (char *)a2;
  if (*(_BYTE *)a2 != 92)
    return (char *)a2;
  v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    {
      v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      v10 = operator new(0x18uLL);
      v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(_QWORD *)(v12 + 8);
      *v10 = &unk_1E4A06AE0;
      v10[1] = v13;
      *((_DWORD *)v10 + 4) = v11;
      *(_QWORD *)(v12 + 8) = v10;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3)
        goto LABEL_25;
      v15 = v9;
      v16 = *(std::__owns_one_state<char> **)(a1 + 56);
      v17 = *(_DWORD *)(a1 + 28);
      v18 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, v15, a3);
      if (v18 == v15)
        break;
      v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, v18, (std::basic_regex<char> *)a3, v16, (v17 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v9 != v15);
    if ((char *)&v15->__traits_.__loc_.__locale_ + 1 == a3
      || LOBYTE(v15->__traits_.__loc_.__locale_) != 92
      || BYTE1(v15->__traits_.__loc_.__locale_) != 41)
    {
LABEL_25:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    v7 = (char *)v15 + 2 * (BYTE1(v15->__traits_.__loc_.__locale_) == 41);
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
    {
      v19 = operator new(0x18uLL);
      v20 = *(_QWORD *)(a1 + 56);
      v21 = *(_QWORD *)(v20 + 8);
      *v19 = &unk_1E4A06B28;
      v19[1] = v21;
      *((_DWORD *)v19 + 4) = v11;
      *(_QWORD *)(v20 + 8) = v19;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return v7;
    }
    return v7;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8)
    return (char *)a2;
  if ((v8 - 48) > *(_DWORD *)(a1 + 28))
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (char *)(a2 + 2);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  std::basic_regex<char> *v6;
  int locale_low;
  std::basic_regex<char> *v9;
  int v10;
  int v11;
  std::basic_regex<char> *v12;
  int v13;
  std::basic_regex<char> *v14;
  int v15;
  int v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;

  v6 = this;
  if (this == a3)
    return v6;
  locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)v6 + 1);
  }
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return v6;
  }
  v9 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v9 == a3)
    goto LABEL_43;
  v10 = LOBYTE(v9->__traits_.__loc_.__locale_);
  if ((v10 & 0xF8) != 0x30 && (v10 & 0xFE) != 0x38)
    goto LABEL_43;
  v11 = v10 - 48;
  v12 = (std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_16:
    v12 = a3;
  }
  else
  {
    while (1)
    {
      v13 = LOBYTE(v12->__traits_.__loc_.__locale_);
      if ((v13 & 0xF8) != 0x30 && (v13 & 0xFE) != 0x38)
        break;
      if (v11 >= 214748364)
        goto LABEL_43;
      v11 = v13 + 10 * v11 - 48;
      v12 = (std::basic_regex<char> *)((char *)v12 + 1);
      if (v12 == a3)
        goto LABEL_16;
    }
  }
  if (v12 == v9)
    goto LABEL_43;
  if (v12 == a3)
    goto LABEL_41;
  v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 1);
  v15 = LOBYTE(v12->__traits_.__loc_.__locale_);
  if (v15 != 44)
  {
    if (v14 != a3 && v15 == 92 && LOBYTE(v14->__traits_.__loc_.__locale_) == 125)
    {
      v19 = (unsigned __int8 *)&v12->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v11, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_41;
  }
  if (v14 == a3)
    goto LABEL_41;
  v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
  if ((v16 & 0xF8) == 0x30 || (v16 & 0xFE) == 0x38)
  {
    v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2) == a3)
      goto LABEL_41;
    v17 = v16 - 48;
    while (1)
    {
      v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
      if ((v16 & 0xF8) != 0x30 && (v16 & 0xFE) != 0x38)
        break;
      if (v17 >= 214748364)
        goto LABEL_43;
      v17 = v16 + 10 * v17 - 48;
      v14 = (std::basic_regex<char> *)((char *)v14 + 1);
      if (v14 == a3)
        goto LABEL_41;
    }
  }
  else
  {
    v17 = -1;
  }
  if (v14 == a3
    || (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1) == a3
    || v16 != 92
    || BYTE1(v14->__traits_.__loc_.__locale_) != 125)
  {
LABEL_41:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  }
  v18 = (unsigned __int8 *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 125);
  if (v17 != -1)
  {
    if (v17 >= v11)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v17, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v18;
    }
LABEL_43:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v18;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  int v5;
  char *v6;
  int v9;
  std::__node<char> *v10;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if (a2 == a3)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  v6 = a2 + 1;
  v5 = *a2;
  if (a2 + 1 == a3 && v5 == 36)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
    return a2 + 1;
  }
  else
  {
    if (v6 != a3 && v5 == 92)
    {
      v9 = *v6;
      if ((v9 - 36) <= 0x3A && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
        return a2 + 2;
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    }
    if (v5 != 46)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    v10 = (std::__node<char> *)operator new(0x10uLL);
    end = this->__end_;
    first = end->__first_;
    v10->__vftable = (std::__node<char>_vtbl *)&unk_1E4A06CD8;
    v10[1].__vftable = (std::__node<char>_vtbl *)first;
    end->__first_ = v10;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return a2 + 1;
  }
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  std::basic_regex<char> *v8;
  int locale_low;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  std::basic_regex<char> *v22;
  std::basic_regex<char> *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 == a2
    && (v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(a1, a2, a3), v8 == a2))
  {
    if (a2 != a3 && LOBYTE(a2->__traits_.__loc_.__locale_) == 46)
    {
      v14 = operator new(0x10uLL);
      v15 = *(_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(v15 + 8);
      *v14 = &unk_1E4A06CD8;
      v14[1] = v16;
      *(_QWORD *)(v15 + 8) = v14;
LABEL_14:
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v8, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(a1, (char *)a2, (char *)a3);
    if (v8 != a2)
      goto LABEL_25;
  }
  else if (v8 != a2)
  {
    goto LABEL_25;
  }
  if (v8 == a3)
  {
LABEL_25:
    if (v8 != a2)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v8, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    return a2;
  }
  locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  switch(locale_low)
  {
    case '$':
      v10 = operator new(0x18uLL);
      v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v12 = *(_QWORD *)(a1 + 56);
      goto LABEL_13;
    case '(':
      if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      {
        v19 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v18 = operator new(0x18uLL);
        v19 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v19;
        v20 = *(_QWORD *)(a1 + 56);
        v21 = *(_QWORD *)(v20 + 8);
        *v18 = &unk_1E4A06AE0;
        v18[1] = v21;
        *((_DWORD *)v18 + 4) = v19;
        *(_QWORD *)(v20 + 8) = v18;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      v22 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v22 == a3 || (v23 = v22, LOBYTE(v22->__traits_.__loc_.__locale_) != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      {
        v24 = operator new(0x18uLL);
        v25 = *(_QWORD *)(a1 + 56);
        v26 = *(_QWORD *)(v25 + 8);
        *v24 = &unk_1E4A06B28;
        v24[1] = v26;
        *((_DWORD *)v24 + 4) = v19;
        *(_QWORD *)(v25 + 8) = v24;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      v8 = (std::basic_regex<char> *)((char *)&v23->__traits_.__loc_.__locale_ + 1);
      goto LABEL_25;
    case '^':
      v10 = operator new(0x18uLL);
      v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v12 = *(_QWORD *)(a1 + 56);
LABEL_13:
      v17 = *(_QWORD *)(v12 + 8);
      *v10 = v13 + 16;
      v10[1] = v17;
      *((_BYTE *)v10 + 16) = v11;
      *(_QWORD *)(v12 + 8) = v10;
      goto LABEL_14;
  }
  return a2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_)
        return this;
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  std::basic_regex<char>::value_type *v4;
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type *result;
  _BOOL4 v7;
  uint64_t v8;

  v3 = this;
  if (this == a3)
    return (std::basic_regex<char>::value_type *)v3;
  v4 = (char *)&this->__traits_.__loc_.__locale_ + 1;
  if ((std::basic_regex<char> *)((char *)&v3->__traits_.__loc_.__locale_ + 1) == a3
    || LOBYTE(v3->__traits_.__loc_.__locale_) != 92)
  {
    return (std::basic_regex<char>::value_type *)v3;
  }
  v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      return (char *)v3 + 2;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, (std::basic_regex<char>::value_type *)a3, 0);
      }
      else
      {
        v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        v8 = 2;
        if (!v7)
          v8 = 0;
        result = (char *)v3 + v8;
      }
      break;
  }
  return result;
}

uint64_t ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t __cxx_global_var_init_77()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance, &dword_1A343C000);
  }
  return result;
}

SAHEURCoreDumpTraceProtocol *EURCoreDumpTraceProtocol::create(EURCoreDumpTraceProtocol *this)
{
  SAHEURCoreDumpTraceProtocol *v1;
  NSObject *v3;
  int v4;
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (capabilities::coredump::getPersonality(this) != 2)
  {
    v3 = GetOsLogContext()[1];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
    {
      v4 = 136315906;
      v5 = "ABM ASSERT";
      v6 = 2080;
      v7 = "false";
      v8 = 2080;
      v9 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/ABMHelper/Server/Tas"
           "ks/Wireless/Trace/CoreDump/EURCoreDumpTraceProtocol.cpp";
      v10 = 1024;
      v11 = 28;
      _os_log_fault_impl(&dword_1A343C000, v3, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", (uint8_t *)&v4, 0x26u);
    }
    __break(1u);
  }
  v1 = (SAHEURCoreDumpTraceProtocol *)operator new(0x78uLL);
  SAHEURCoreDumpTraceProtocol::SAHEURCoreDumpTraceProtocol(v1);
  return v1;
}

void sub_1A345B970(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void EURCoreDumpTraceProtocol::EURCoreDumpTraceProtocol(EURCoreDumpTraceProtocol *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  _QWORD block[5];

  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1A343C000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_6;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v3 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v9 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v3 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v9 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_6;
  }
  v4 = (unint64_t *)(v3 + 8);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
LABEL_6:
  ctu::Loggable<EURCoreDumpTraceProtocol,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<char const(&)[15],std::shared_ptr<ctu::LogServer>>(this, "trace.coredump", &v9);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_QWORD *)this = &unk_1E4A070C8;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = 0;
}

void sub_1A345BAE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *ctu::Loggable<EURCoreDumpTraceProtocol,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<char const(&)[15],std::shared_ptr<ctu::LogServer>>(_QWORD *a1, char *__s, _QWORD *a3)
{
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *__dst[2];
  unint64_t v16;

  *a1 = &unk_1E4A07118;
  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    v16 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v16) = v6;
  v8 = __dst;
  if (v6)
LABEL_8:
    memcpy(v8, __s, (size_t)v7);
  *((_BYTE *)v7 + (_QWORD)v8) = 0;
  ctu::LoggerCommonBase::LoggerCommonBase();
  a1[1] = &unk_1E4A06330;
  a1[7] = *a3;
  v11 = a3[1];
  a1[8] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (SHIBYTE(v16) < 0)
    operator delete(__dst[0]);
  return a1;
}

void sub_1A345BC20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL EURCoreDumpTraceProtocol::collectBasebandCrashList(uint64_t a1, _QWORD *a2)
{
  NSObject *v3;
  void *v4;
  size_t v5;
  void *v6;
  size_t v7;
  int folder;
  __int128 v9;
  char v10;
  void **v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _BYTE *v19;
  void *v20;
  _BYTE *v21;
  _QWORD *v22;
  int v23;
  void *v24;
  char *v25;
  size_t v26;
  char *v27;
  _BYTE *v28;
  size_t v29;
  _BOOL4 v30;
  _BOOL4 v31;
  int v32;
  size_t v33;
  size_t v34;
  _BYTE *v35;
  _BYTE *v36;
  size_t v37;
  int v38;
  size_t v39;
  size_t v40;
  BOOL v41;
  size_t v42;
  size_t v43;
  _BYTE *v44;
  size_t v45;
  BOOL v46;
  BOOL v47;
  uint64_t v48;
  std::string *v49;
  void **v50;
  void **v51;
  std::string *v52;
  int v53;
  size_t size;
  unint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  std::string *v59;
  uint64_t v60;
  int v61;
  const std::string::value_type *v62;
  std::string::size_type v63;
  std::string *v64;
  __int128 v65;
  NSObject *v66;
  const char *v67;
  int v68;
  void *v69;
  int v70;
  char v71;
  __int128 v72;
  char *v73;
  _QWORD *v74;
  void **v75;
  std::string *v76;
  std::string *v77;
  _QWORD *v78;
  uint64_t v79;
  NSObject *v80;
  void **v81;
  NSObject *v82;
  uint64_t v83;
  std::string *v84;
  std::string *v85;
  void *v86;
  _BOOL8 result;
  std::string *v88;
  std::string *v89;
  NSObject *v90;
  int v91;
  unint64_t v92;
  size_t v93;
  _QWORD *v94;
  std::string::value_type *__s;
  size_t __sz;
  void *v97[2];
  std::string *v98;
  uint64_t v99;
  void *__src;
  uint64_t v101;
  void *v102[4];
  std::string v103;
  void *v104;
  std::string *v105;
  unint64_t v106;
  void *v107;
  unint64_t v108;
  uint64_t v109;
  void *v110;
  unint64_t v111;
  uint64_t v112;
  _BYTE __p[32];
  __int128 v114;
  int32x2_t v115;
  _BYTE __dst[32];
  __int128 v117;
  __int128 v118;
  _OWORD v119[16];
  unint64_t v120;
  uint64_t v121;

  v94 = a2;
  v121 = *MEMORY[0x1E0C80C00];
  v111 = 0xAAAAAAAAAAAAAA00;
  v112 = 0x8AAAAAAAAAAAAAALL;
  v109 = 0x4AAAAAAAAAAAAAALL;
  v110 = (void *)0x65726F635F76616DLL;
  v108 = 0xAAAAAAAAAAAAAAAALL;
  v107 = (void *)0xAAAAAA006E69622ELL;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  memset(&v103, 170, sizeof(v103));
  if (*(char *)(a1 + 95) < 0)
    std::string::__init_copy_ctor_external(&v103, *(const std::string::value_type **)(a1 + 72), *(_QWORD *)(a1 + 80));
  else
    v103 = *(std::string *)(a1 + 72);
  v3 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v88 = &v103;
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v88 = (std::string *)v103.__r_.__value_.__r.__words[0];
    *(_DWORD *)__dst = 136315138;
    *(_QWORD *)&__dst[4] = v88;
    _os_log_debug_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEBUG, "#D \tScanning CoreDump folder. ScratchFolder=[%s]", __dst, 0xCu);
  }
  v4 = &v110;
  if (v112 < 0)
    v4 = v110;
  v99 = a1;
  __src = v4;
  if (v112 >= 0)
    v5 = HIBYTE(v112);
  else
    v5 = v111;
  v6 = &v107;
  if (v109 < 0)
    v6 = v107;
  v97[0] = v6;
  if (v109 >= 0)
    v7 = HIBYTE(v109);
  else
    v7 = v108;
  memset(__p, 0, 24);
  folder = ctu::fs::read_folder();
  v10 = folder;
  v11 = *(void ***)__p;
  if (folder)
  {
    v12 = -1431655765 * ((*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 3);
    if ((_DWORD)v12)
    {
      v91 = folder;
      v13 = 0;
      v14 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v14 = v5 | 7;
      __sz = v14 + 1;
      __s = (std::string::value_type *)((v14 + 1) | 0x8000000000000000);
      v15 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v15 = v7 | 7;
      v93 = v15 + 1;
      v92 = (v15 + 1) | 0x8000000000000000;
      v98 = (std::string *)(24 * v12);
      while (1)
      {
        v17 = *(_QWORD *)__p;
        v18 = __src;
        if (!__src)
        {
          v20 = 0;
          v21 = 0;
          memset(__dst, 0, 24);
          goto LABEL_34;
        }
        if (v5 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_206;
        if (v5 >= 0x17)
        {
          v19 = operator new(__sz);
          *(_QWORD *)&__dst[8] = v5;
          *(_QWORD *)&__dst[16] = __s;
          *(_QWORD *)__dst = v19;
        }
        else
        {
          __dst[23] = v5;
          v19 = __dst;
          if (!v5)
            goto LABEL_33;
        }
        memmove(v19, __src, v5);
LABEL_33:
        v19[v5] = 0;
        v18 = (void *)__dst[23];
        v21 = *(_BYTE **)__dst;
        v20 = *(void **)&__dst[8];
LABEL_34:
        v22 = (std::string::size_type *)((char *)v13->__r_.__value_.__r.__words + v17);
        v23 = (char)v18;
        if ((char)v18 >= 0)
          v24 = v18;
        else
          v24 = v20;
        v25 = (char *)v13 + v17;
        if (*((char *)&v13->__r_.__value_.__r.__words[2] + v17 + 7) < 0)
        {
          if (v24 == (void *)-1)
LABEL_204:
            std::string::__throw_out_of_range[abi:ne180100]();
          v27 = *(std::string::pointer *)((char *)&v13->__r_.__value_.__l.__data_ + v17);
          if (*(std::string::size_type *)((char *)&v13->__r_.__value_.__l.__size_ + v17) >= v5)
            v26 = v5;
          else
            v26 = *(std::string::size_type *)((char *)&v13->__r_.__value_.__l.__size_ + v17);
        }
        else
        {
          if (v24 == (void *)-1)
            goto LABEL_204;
          if (*((unsigned __int8 *)&v13->__r_.__value_.__r.__words[2] + v17 + 7) >= v5)
            v26 = v5;
          else
            v26 = *((unsigned __int8 *)&v13->__r_.__value_.__r.__words[2] + v17 + 7);
          v27 = (char *)v13 + v17;
        }
        if ((char)v18 >= 0)
          v28 = __dst;
        else
          v28 = v21;
        if (v26 >= (unint64_t)v24)
          v29 = (size_t)v24;
        else
          v29 = v26;
        v30 = memcmp(v27, v28, v29) == 0;
        v31 = (void *)v26 == v24 && v30;
        if (v23 < 0)
        {
          operator delete(v21);
          if (!v31)
            goto LABEL_24;
        }
        else if (!v31)
        {
          goto LABEL_24;
        }
        if (!v7)
          goto LABEL_100;
        v32 = v25[23];
        v33 = v25[23];
        if (v32 < 0)
        {
          v34 = *(std::string::size_type *)((char *)&v13->__r_.__value_.__l.__size_ + v17);
          if (v7 >= v34)
            goto LABEL_100;
        }
        else
        {
          v34 = v33;
          if (v7 >= v33)
            goto LABEL_100;
        }
        if (v97[0])
        {
          if (v7 > 0x7FFFFFFFFFFFFFF7)
LABEL_206:
            std::string::__throw_length_error[abi:ne180100]();
          if (v7 >= 0x17)
          {
            v35 = operator new(v93);
            *(_QWORD *)&__dst[8] = v7;
            *(_QWORD *)&__dst[16] = v92;
            *(_QWORD *)__dst = v35;
          }
          else
          {
            __dst[23] = v7;
            v35 = __dst;
          }
          memmove(v35, v97[0], v7);
          v35[v7] = 0;
          v36 = *(_BYTE **)__dst;
          v37 = v34 - v7;
          v38 = __dst[23];
          if (__dst[23] >= 0)
            v39 = __dst[23];
          else
            v39 = *(_QWORD *)&__dst[8];
          if ((v33 & 0x80) == 0)
          {
LABEL_82:
            if (v33 < v37 || v39 == -1)
              goto LABEL_209;
            if (v33 - v37 >= v7)
              v43 = v7;
            else
              v43 = v33 - v37;
            goto LABEL_87;
          }
        }
        else
        {
          v36 = 0;
          memset(__dst, 0, 24);
          v37 = v34 - v7;
          v38 = 0;
          v39 = 0;
          if ((v33 & 0x80) == 0)
            goto LABEL_82;
        }
        if (v39 == -1
          || (v40 = *(std::string::size_type *)((char *)&v13->__r_.__value_.__l.__size_ + v17),
              v41 = v40 >= v37,
              v42 = v40 - v37,
              !v41))
        {
LABEL_209:
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        if (v42 >= v7)
          v43 = v7;
        else
          v43 = v42;
        v22 = (_QWORD *)*v22;
LABEL_87:
        if (v38 >= 0)
          v44 = __dst;
        else
          v44 = v36;
        if (v43 >= v39)
          v45 = v39;
        else
          v45 = v43;
        v46 = memcmp((char *)v22 + v37, v44, v45) == 0;
        v47 = v43 == v39 && v46;
        if (v38 < 0)
        {
          operator delete(v36);
          if (v47)
          {
LABEL_100:
            v48 = (uint64_t)v13 + *(_QWORD *)__p;
            v49 = v105;
            if ((unint64_t)v105 >= v106)
            {
              v16 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v104, v48);
            }
            else
            {
              if (*(char *)(v48 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v105, *(const std::string::value_type **)((char *)&v13->__r_.__value_.__l.__data_ + *(_QWORD *)__p), *(std::string::size_type *)((char *)&v13->__r_.__value_.__l.__size_ + *(_QWORD *)__p));
              }
              else
              {
                v9 = *(_OWORD *)v48;
                v105->__r_.__value_.__r.__words[2] = *(_QWORD *)(v48 + 16);
                *(_OWORD *)&v49->__r_.__value_.__l.__data_ = v9;
              }
              v16 = v49 + 1;
            }
            v105 = v16;
          }
        }
        else if (v47)
        {
          goto LABEL_100;
        }
LABEL_24:
        if (v98 == ++v13)
        {
          v11 = *(void ***)__p;
          v10 = v91;
          break;
        }
      }
    }
  }
  if (v11)
  {
    v50 = *(void ***)&__p[8];
    v51 = v11;
    if (*(void ***)&__p[8] != v11)
    {
      do
      {
        if (*((char *)v50 - 1) < 0)
          operator delete(*(v50 - 3));
        v50 -= 3;
      }
      while (v50 != v11);
      v51 = *(void ***)__p;
    }
    *(_QWORD *)&__p[8] = v11;
    operator delete(v51);
  }
  if ((v10 & 1) == 0)
  {
    v82 = *(NSObject **)(v99 + 40);
    if (!os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
    {
      v83 = 0;
      if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_181;
      goto LABEL_180;
    }
    v89 = &v103;
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v89 = (std::string *)v103.__r_.__value_.__r.__words[0];
    *(_DWORD *)__dst = 136315138;
    *(_QWORD *)&__dst[4] = v89;
    _os_log_error_impl(&dword_1A343C000, v82, OS_LOG_TYPE_ERROR, "\tFailed: Scanning CoreDump folder. ScratchFolder=[%s]", __dst, 0xCu);
    v83 = 0;
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
LABEL_180:
      operator delete(v103.__r_.__value_.__l.__data_);
LABEL_181:
    v84 = (std::string *)v104;
    if (v104)
    {
      v85 = v105;
      v86 = v104;
      if (v105 != v104)
      {
        do
        {
          if (SHIBYTE(v85[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v85[-1].__r_.__value_.__l.__data_);
          --v85;
        }
        while (v85 != v84);
        v86 = v104;
      }
      v105 = v84;
      operator delete(v86);
    }
    if (SHIBYTE(v109) < 0)
    {
      operator delete(v107);
      if ((SHIBYTE(v112) & 0x80000000) == 0)
        return v83;
    }
    else if ((SHIBYTE(v112) & 0x80000000) == 0)
    {
      return v83;
    }
    operator delete(v110);
    return v83;
  }
  v52 = (std::string *)v104;
  if (v104 == v105)
  {
    LODWORD(__src) = 0;
LABEL_195:
    v83 = __src & 1;
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_180;
    goto LABEL_181;
  }
  LODWORD(__src) = 0;
  __s = &__dst[8];
  __sz = (size_t)v119 + 8;
  v98 = (std::string *)&__p[24];
  *(_QWORD *)&v9 = 136315138;
  *(_OWORD *)v97 = v9;
  while (1)
  {
    while (1)
    {
      memset(v102, 170, 24);
      v53 = SHIBYTE(v103.__r_.__value_.__r.__words[2]);
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v103.__r_.__value_.__r.__words[2]);
      else
        size = v103.__r_.__value_.__l.__size_;
      v55 = size + 1;
      memset(__dst, 170, 24);
      if (size + 1 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v55 >= 0x17)
      {
        v57 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v55 | 7) != 0x17)
          v57 = v55 | 7;
        v58 = v57 + 1;
        v56 = operator new(v57 + 1);
        *(_QWORD *)&__dst[8] = size + 1;
        *(_QWORD *)&__dst[16] = v58 | 0x8000000000000000;
        *(_QWORD *)__dst = v56;
      }
      else
      {
        memset(__dst, 0, 24);
        v56 = __dst;
        __dst[23] = size + 1;
        if (!size)
          goto LABEL_133;
      }
      v59 = v53 >= 0 ? &v103 : (std::string *)v103.__r_.__value_.__r.__words[0];
      memmove(v56, v59, size);
LABEL_133:
      v60 = v99;
      *(_WORD *)&v56[size] = 47;
      v61 = SHIBYTE(v52->__r_.__value_.__r.__words[2]);
      if (v61 >= 0)
        v62 = (const std::string::value_type *)v52;
      else
        v62 = (const std::string::value_type *)v52->__r_.__value_.__r.__words[0];
      if (v61 >= 0)
        v63 = HIBYTE(v52->__r_.__value_.__r.__words[2]);
      else
        v63 = v52->__r_.__value_.__l.__size_;
      v64 = std::string::append((std::string *)__dst, v62, v63);
      v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      v102[2] = (void *)v64->__r_.__value_.__r.__words[2];
      *(_OWORD *)v102 = v65;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      v64->__r_.__value_.__r.__words[0] = 0;
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
      v66 = *(NSObject **)(v60 + 40);
      if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
      {
        if (SHIBYTE(v102[2]) >= 0)
          v75 = v102;
        else
          v75 = (void **)v102[0];
        *(_DWORD *)__dst = v97[0];
        *(_QWORD *)&__dst[4] = v75;
        _os_log_debug_impl(&dword_1A343C000, v66, OS_LOG_TYPE_DEBUG, "#D \tLooking for CoreDump reason in file [%s]", __dst, 0xCu);
      }
      v67 = SHIBYTE(v102[2]) >= 0 ? (const char *)v102 : (const char *)v102[0];
      v68 = open(v67, 0, 420);
      if ((v68 & 0x80000000) == 0)
        break;
LABEL_167:
      v80 = *(NSObject **)(v60 + 40);
      if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
      {
        if (SHIBYTE(v102[2]) >= 0)
          v81 = v102;
        else
          v81 = (void **)v102[0];
        *(_DWORD *)__dst = v97[0];
        *(_QWORD *)&__dst[4] = v81;
        _os_log_error_impl(&dword_1A343C000, v80, OS_LOG_TYPE_ERROR, "\tFailed: Looking for CoreDump reason in file [%s]", __dst, 0xCu);
        if (SHIBYTE(v102[2]) < 0)
          goto LABEL_169;
      }
      else if (SHIBYTE(v102[2]) < 0)
      {
        goto LABEL_169;
      }
LABEL_118:
      if (++v52 == v105)
        goto LABEL_195;
    }
    v69 = operator new[](0x10000uLL);
    if (read(v68, v69, 0x10000uLL) < 1)
    {
      v71 = 0;
      goto LABEL_163;
    }
    v101 = 0;
    v70 = ETLEFSDumpInterpret();
    v71 = v70;
    if (v70)
      break;
LABEL_163:
    operator delete[](v69);
    while (close(v68) && *__error() == 4)
      ;
    if ((v71 & 1) == 0)
      goto LABEL_167;
    LODWORD(__src) = 1;
    if ((SHIBYTE(v102[2]) & 0x80000000) == 0)
      goto LABEL_118;
LABEL_169:
    operator delete(v102[0]);
    if (++v52 == v105)
      goto LABEL_195;
  }
  v120 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v72 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v72 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v119[14] = v72;
  v119[15] = v72;
  v119[12] = v72;
  v119[13] = v72;
  v119[10] = v72;
  v119[11] = v72;
  v119[8] = v72;
  v119[9] = v72;
  v119[6] = v72;
  v119[7] = v72;
  v119[4] = v72;
  v119[5] = v72;
  v119[2] = v72;
  v119[3] = v72;
  v119[0] = v72;
  v119[1] = v72;
  v117 = v72;
  v118 = v72;
  *(_OWORD *)__dst = v72;
  *(_OWORD *)&__dst[16] = v72;
  if (!ETLEFSDUmpCopyCrashLocationDetails())
    goto LABEL_162;
  v115 = (int32x2_t)0xAAAAAAAAAAAAAAAALL;
  memset(__p, 0, sizeof(__p));
  v114 = 0u;
  std::string::__assign_external((std::string *)__p, (const std::string::value_type *)__sz);
  std::string::__assign_external(v98, __s);
  v115 = vrev64_s32(*(int32x2_t *)__dst);
  v73 = (char *)operator new(0x48uLL);
  v74 = v73;
  *(_QWORD *)v73 = 0;
  *((_QWORD *)v73 + 1) = 0;
  if ((__p[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v73 + 16), *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
  }
  else
  {
    *((_OWORD *)v73 + 1) = *(_OWORD *)__p;
    *((_QWORD *)v73 + 4) = *(_QWORD *)&__p[16];
  }
  v76 = (std::string *)(v74 + 5);
  if (SHIBYTE(v114) < 0)
  {
    std::string::__init_copy_ctor_external(v76, *(const std::string::value_type **)&__p[24], v114);
  }
  else
  {
    v77 = v98;
    *(_OWORD *)&v76->__r_.__value_.__l.__data_ = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
    v74[7] = *((_QWORD *)&v77->__r_.__value_.__l + 2);
  }
  v74[8] = v115;
  v78 = v94;
  v79 = *v94;
  *v74 = *v94;
  v74[1] = v78;
  *(_QWORD *)(v79 + 8) = v74;
  *v78 = v74;
  ++v78[2];
  if (SHIBYTE(v114) < 0)
  {
    operator delete(*(void **)&__p[24]);
    if ((__p[23] & 0x80000000) != 0)
      goto LABEL_177;
  }
  else
  {
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_162;
LABEL_177:
    operator delete(*(void **)__p);
  }
LABEL_162:
  if ((ETLEFSDumpInfoFree() & 1) != 0)
    goto LABEL_163;
  v90 = GetOsLogContext()[1];
  result = os_log_type_enabled(v90, OS_LOG_TYPE_FAULT);
  if (result)
  {
    *(_DWORD *)__p = 136315906;
    *(_QWORD *)&__p[4] = "ABM ASSERT";
    *(_WORD *)&__p[12] = 2080;
    *(_QWORD *)&__p[14] = "loop_success";
    *(_WORD *)&__p[22] = 2080;
    *(_QWORD *)&__p[24] = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/ABMHe"
                          "lper/Server/Tasks/Wireless/Trace/CoreDump/EURCoreDumpTraceProtocol.cpp";
    LOWORD(v114) = 1024;
    *(_DWORD *)((char *)&v114 + 2) = 99;
    _os_log_fault_impl(&dword_1A343C000, v90, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", __p, 0x26u);
    __break(1u);
    goto LABEL_209;
  }
  __break(1u);
  return result;
}

void sub_1A345C7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51)
{
  void **v51;
  char *v52;

  if (v52[39] < 0)
    operator delete(*v51);
  operator delete(v52);
  std::pair<std::string,std::string>::~pair((uint64_t)&a51);
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
  {
    operator delete(a30);
    std::vector<std::string>::~vector[abi:ne180100](&a36);
    if ((a44 & 0x80000000) == 0)
      goto LABEL_7;
  }
  else
  {
    std::vector<std::string>::~vector[abi:ne180100](&a36);
    if ((a44 & 0x80000000) == 0)
    {
LABEL_7:
      if (a50 < 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  operator delete(a39);
  if (a50 < 0)
  {
LABEL_8:
    operator delete(a45);
    _Unwind_Resume(a1);
  }
LABEL_11:
  _Unwind_Resume(a1);
}

uint64_t EURCoreDumpTraceProtocol::collectBasebandCrashListM20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const std::string::value_type *v6;
  const std::string::value_type *v7;
  NSObject *v8;
  std::string::value_type *v9;
  __int16 v11[8];
  _QWORD v12[2];
  void (*v13)(uint64_t, const std::string::value_type *);
  void *v14;
  uint64_t v15;
  uint64_t i;
  std::string v17;
  const std::string::value_type *v18;
  const std::string::value_type *v19;
  uint64_t v20;

  v18 = 0;
  v19 = 0;
  v20 = 0;
  if (*(char *)(a1 + 95) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)(a1 + 72), *(_QWORD *)(a1 + 80));
  else
    v17 = *(std::string *)(a1 + 72);
  v4 = ETLEFSearchBasebandCrashReasonM20();
  v5 = v4;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v17.__r_.__value_.__l.__data_);
    if ((_DWORD)v5)
    {
LABEL_6:
      v6 = v18;
      v7 = v19;
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 0x40000000;
      v13 = ___ZN24EURCoreDumpTraceProtocol27collectBasebandCrashListM20ERNSt3__14listIN8coredump13CommandDriver29EURCoreDumpTraceProtocolCrashENS0_9allocatorIS4_EEEE_block_invoke;
      v14 = &__block_descriptor_tmp_2;
      v15 = a1;
      for (i = a2; v6 != v7; v6 += 388)
        v13((uint64_t)v12, v6);
      goto LABEL_11;
    }
  }
  else if ((_DWORD)v4)
  {
    goto LABEL_6;
  }
  v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    v11[0] = 0;
    _os_log_error_impl(&dword_1A343C000, v8, OS_LOG_TYPE_ERROR, "\tFailed: Looking for CoreDump reason", (uint8_t *)v11, 2u);
    v9 = (std::string::value_type *)v18;
    if (!v18)
      return v5;
    goto LABEL_12;
  }
LABEL_11:
  v9 = (std::string::value_type *)v18;
  if (v18)
  {
LABEL_12:
    v19 = v9;
    operator delete(v9);
  }
  return v5;
}

void sub_1A345CA30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  void *v24;

  v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(_QWORD *)(v22 - 64) = v24;
    operator delete(v24);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN24EURCoreDumpTraceProtocol27collectBasebandCrashListM20ERNSt3__14listIN8coredump13CommandDriver29EURCoreDumpTraceProtocolCrashENS0_9allocatorIS4_EEEE_block_invoke(uint64_t a1, const std::string::value_type *a2)
{
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  char *v7;
  std::string *v8;
  uint64_t v9;
  NSObject *v10;
  void **v11;
  void **v12;
  void *v13[2];
  void *__p[4];
  unint64_t v15;
  uint8_t buf[4];
  void **v17;
  __int16 v18;
  int v19;
  __int16 v20;
  void **v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32);
  v15 = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v13 = 0u;
  memset(__p, 0, sizeof(__p));
  std::string::__assign_external((std::string *)v13, a2 + 132);
  std::string::__assign_external((std::string *)&__p[1], a2 + 68);
  v15 = *(unsigned int *)a2;
  v5 = *(uint64_t **)(a1 + 40);
  v6 = (char *)operator new(0x48uLL);
  v7 = v6;
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  if (SHIBYTE(__p[0]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v6 + 16), (const std::string::value_type *)v13[0], (std::string::size_type)v13[1]);
  }
  else
  {
    *((_OWORD *)v6 + 1) = *(_OWORD *)v13;
    *((void **)v6 + 4) = __p[0];
  }
  v8 = (std::string *)(v7 + 40);
  if (SHIBYTE(__p[3]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)__p[1], (std::string::size_type)__p[2]);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&__p[1];
    *((void **)v7 + 7) = __p[3];
  }
  *((_QWORD *)v7 + 8) = v15;
  *((_QWORD *)v7 + 1) = v5;
  v9 = *v5;
  *(_QWORD *)v7 = *v5;
  *(_QWORD *)(v9 + 8) = v7;
  *v5 = (uint64_t)v7;
  ++v5[2];
  v10 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    if (SHIBYTE(__p[3]) >= 0)
      v11 = &__p[1];
    else
      v11 = (void **)__p[1];
    v12 = v13;
    if (SHIBYTE(__p[0]) < 0)
      v12 = (void **)v13[0];
    *(_DWORD *)buf = 136315650;
    v17 = v11;
    v18 = 1024;
    v19 = v15;
    v20 = 2080;
    v21 = v12;
    _os_log_debug_impl(&dword_1A343C000, v10, OS_LOG_TYPE_DEBUG, "#D \tAdding Crash reason: File:%s, Line:%d, String:%s.", buf, 0x1Cu);
    if ((SHIBYTE(__p[3]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
        return;
LABEL_18:
      operator delete(v13[0]);
      return;
    }
  }
  else if ((SHIBYTE(__p[3]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    goto LABEL_18;
}

void sub_1A345CC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char *v9;
  void **v10;

  if (v9[39] < 0)
    operator delete(*v10);
  operator delete(v9);
  std::pair<std::string,std::string>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1A345CCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL EURCoreDumpTraceProtocol::moveToSnapshotPath(uint64_t a1, const __CFDictionary **a2)
{
  const char *v4;
  const std::__fs::filesystem::path *v5;
  timespec v6;
  const char *v7;
  NSObject *v8;
  _BOOL8 v9;
  const char *v11;
  DIR *v12;
  DIR *v13;
  dirent *v14;
  const void *v15;
  size_t v16;
  void *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  size_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void **v29;
  void *v30;
  void *v31;
  uint64_t v32;
  BOOL v33;
  char *v35;
  size_t v36;
  std::string::size_type v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  size_t v42;
  size_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  const std::string::value_type *v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  stat *v51;
  __darwin_ino64_t st_gid_high;
  std::string *v53;
  __int128 v54;
  char *v55;
  size_t v56;
  size_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  const std::string::value_type *v61;
  std::string::size_type v62;
  std::string *v63;
  std::string::value_type *v64;
  std::string::size_type size;
  std::string::size_type v66;
  char v67;
  std::error_code *v68;
  const std::__fs::filesystem::path *v69;
  const std::__fs::filesystem::path *v70;
  int v71;
  NSObject *v72;
  std::string *v73;
  void **v74;
  char *v75;
  size_t v76;
  std::string::size_type v77;
  _BYTE *v78;
  std::string *v79;
  uint64_t v80;
  uint64_t v81;
  const std::string::value_type *v82;
  std::string::size_type v83;
  std::string *v84;
  __int128 v85;
  stat *v86;
  __darwin_ino64_t st_ino;
  std::string *v88;
  __int128 v89;
  char *v90;
  size_t v91;
  size_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  const std::string::value_type *v96;
  std::string::size_type v97;
  std::string *v98;
  std::string v99;
  void *v100;
  size_t v101;
  int64_t v102;
  void *v103;
  size_t v104;
  int64_t v105;
  std::string v106;
  std::string v107;
  void *__p[3];
  void *__dst[3];
  _QWORD v110[2];
  std::string v111;
  stat v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  v5 = (const std::__fs::filesystem::path *)(a1 + 72);
  v4 = *(const char **)(a1 + 72);
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v112.st_blksize = v6;
  *(timespec *)v112.st_qspare = v6;
  v112.st_birthtimespec = v6;
  *(timespec *)&v112.st_size = v6;
  v112.st_mtimespec = v6;
  v112.st_ctimespec = v6;
  *(timespec *)&v112.st_uid = v6;
  v112.st_atimespec = v6;
  *(timespec *)&v112.st_dev = v6;
  if (*(char *)(a1 + 95) >= 0)
    v7 = (const char *)(a1 + 72);
  else
    v7 = v4;
  if (!stat(v7, &v112))
  {
    v11 = *(char *)(a1 + 95) >= 0 ? (const char *)v5 : *(const char **)(a1 + 72);
    v12 = opendir(v11);
    v13 = v12;
    if (v12)
    {
      v14 = readdir(v12);
      closedir(v13);
      if (v14)
      {
        v110[0] = 0xAAAAAAAAAAAAAAAALL;
        v110[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v110, *a2);
        memset(&v112, 170, 24);
        v15 = (const void *)*MEMORY[0x1E0CFB250];
        v16 = strlen((const char *)*MEMORY[0x1E0CFB250]);
        if (v16 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v17 = (void *)v16;
        if (v16 >= 0x17)
        {
          v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v16 | 7) != 0x17)
            v19 = v16 | 7;
          v20 = v19 + 1;
          v18 = (void **)operator new(v19 + 1);
          __dst[1] = v17;
          __dst[2] = (void *)(v20 | 0x8000000000000000);
          __dst[0] = v18;
        }
        else
        {
          HIBYTE(__dst[2]) = v16;
          v18 = __dst;
          if (!v16)
          {
LABEL_21:
            v21 = (const char *)*MEMORY[0x1E0CFB370];
            *((_BYTE *)v17 + (_QWORD)v18) = 0;
            ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)__p, v21);
            ctu::cf::map_adapter::getString();
            MEMORY[0x1A858F29C](__p);
            if (SHIBYTE(__dst[2]) < 0)
              operator delete(__dst[0]);
            memset(__dst, 170, sizeof(__dst));
            v22 = abm::trace::kSnapshotFolder[0];
            v23 = strlen(abm::trace::kSnapshotFolder[0]);
            if (v23 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v24 = (void *)v23;
            if (v23 >= 0x17)
            {
              v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v23 | 7) != 0x17)
                v26 = v23 | 7;
              v27 = v26 + 1;
              v25 = operator new(v26 + 1);
              __p[1] = v24;
              __p[2] = (void *)(v27 | 0x8000000000000000);
              __p[0] = v25;
            }
            else
            {
              HIBYTE(__p[2]) = v23;
              v25 = __p;
              if (!v23)
              {
LABEL_31:
                *((_BYTE *)v24 + (_QWORD)v25) = 0;
                ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v107, "kKeyTraceDumpStatePath");
                ctu::cf::map_adapter::getString();
                MEMORY[0x1A858F29C](&v107);
                if (SHIBYTE(__p[2]) < 0)
                  operator delete(__p[0]);
                memset(__p, 170, sizeof(__p));
                strcpy((char *)&v107, "kTraceFilterActionNone");
                *((_BYTE *)&v107.__r_.__value_.__s + 23) = 22;
                ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v111, "kKeyTraceFilterAction");
                ctu::cf::map_adapter::getString();
                MEMORY[0x1A858F29C](&v111);
                if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v107.__r_.__value_.__l.__data_);
                v28 = (void *)HIBYTE(__p[2]);
                if (SHIBYTE(__p[2]) < 0)
                  v28 = __p[1];
                if (v28 != (void *)22)
                  goto LABEL_47;
                v29 = __p;
                if (SHIBYTE(__p[2]) < 0)
                  v29 = (void **)__p[0];
                v30 = *v29;
                v31 = v29[1];
                v32 = *(uint64_t *)((char *)v29 + 14);
                v33 = v30 == *(void **)"kTraceFilterActionNone" && v31 == *(void **)"lterActionNone";
                if (!v33 || v32 != *(_QWORD *)"tionNone")
                {
LABEL_47:
                  v35 = abm::trace::kTrashFolder[0];
                  v36 = strlen(abm::trace::kTrashFolder[0]);
                  if (v36 > 0x7FFFFFFFFFFFFFF7)
                    std::string::__throw_length_error[abi:ne180100]();
                  v37 = v36;
                  if (v36 >= 0x17)
                  {
                    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v36 | 7) != 0x17)
                      v39 = v36 | 7;
                    v40 = v39 + 1;
                    v38 = operator new(v39 + 1);
                    v106.__r_.__value_.__l.__size_ = v37;
                    v106.__r_.__value_.__r.__words[2] = v40 | 0x8000000000000000;
                    v106.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
                  }
                  else
                  {
                    *((_BYTE *)&v106.__r_.__value_.__s + 23) = v36;
                    v38 = &v106;
                    if (!v36)
                    {
LABEL_55:
                      v38[v37] = 0;
                      v41 = abm::trace::kLogDirPrefix[0];
                      v42 = strlen(abm::trace::kLogDirPrefix[0]);
                      if (v42 > 0x7FFFFFFFFFFFFFF7)
                        std::string::__throw_length_error[abi:ne180100]();
                      v43 = v42;
                      if (v42 >= 0x17)
                      {
                        v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v42 | 7) != 0x17)
                          v45 = v42 | 7;
                        v46 = v45 + 1;
                        v44 = operator new(v45 + 1);
                        v104 = v43;
                        v105 = v46 | 0x8000000000000000;
                        v103 = v44;
                      }
                      else
                      {
                        HIBYTE(v105) = v42;
                        v44 = &v103;
                        if (!v42)
                        {
LABEL_63:
                          *((_BYTE *)v44 + v43) = 0;
                          if (v105 >= 0)
                            v47 = (const std::string::value_type *)&v103;
                          else
                            v47 = (const std::string::value_type *)v103;
                          if (v105 >= 0)
                            v48 = HIBYTE(v105);
                          else
                            v48 = v104;
                          v49 = std::string::append(&v106, v47, v48);
                          v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
                          v111.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
                          *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v50;
                          v49->__r_.__value_.__l.__size_ = 0;
                          v49->__r_.__value_.__r.__words[2] = 0;
                          v49->__r_.__value_.__r.__words[0] = 0;
                          if ((v112.st_gid & 0x80000000) == 0)
                            v51 = &v112;
                          else
                            v51 = *(stat **)&v112.st_dev;
                          if ((v112.st_gid & 0x80000000) == 0)
                            st_gid_high = HIBYTE(v112.st_gid);
                          else
                            st_gid_high = v112.st_ino;
                          v53 = std::string::append(&v111, (const std::string::value_type *)v51, st_gid_high);
                          v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
                          v107.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
                          *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v54;
                          v53->__r_.__value_.__l.__size_ = 0;
                          v53->__r_.__value_.__r.__words[2] = 0;
                          v53->__r_.__value_.__r.__words[0] = 0;
                          v55 = abm::trace::kEURCoreDumpSnapshotDirectorySuffix[0];
                          v56 = strlen(abm::trace::kEURCoreDumpSnapshotDirectorySuffix[0]);
                          if (v56 > 0x7FFFFFFFFFFFFFF7)
                            std::string::__throw_length_error[abi:ne180100]();
                          v57 = v56;
                          if (v56 >= 0x17)
                          {
                            v59 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v56 | 7) != 0x17)
                              v59 = v56 | 7;
                            v60 = v59 + 1;
                            v58 = operator new(v59 + 1);
                            v101 = v57;
                            v102 = v60 | 0x8000000000000000;
                            v100 = v58;
                          }
                          else
                          {
                            HIBYTE(v102) = v56;
                            v58 = &v100;
                            if (!v56)
                            {
LABEL_83:
                              *((_BYTE *)v58 + v57) = 0;
                              if (v102 >= 0)
                                v61 = (const std::string::value_type *)&v100;
                              else
                                v61 = (const std::string::value_type *)v100;
                              if (v102 >= 0)
                                v62 = HIBYTE(v102);
                              else
                                v62 = v101;
                              v63 = std::string::append(&v107, v61, v62);
                              v64 = (std::string::value_type *)v63->__r_.__value_.__r.__words[0];
                              size = v63->__r_.__value_.__l.__size_;
                              v66 = v63->__r_.__value_.__r.__words[2];
                              v63->__r_.__value_.__l.__size_ = 0;
                              v63->__r_.__value_.__r.__words[2] = 0;
                              v63->__r_.__value_.__r.__words[0] = 0;
                              if (SHIBYTE(v102) < 0)
                              {
                                operator delete(v100);
                                if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                {
LABEL_91:
                                  if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                    goto LABEL_92;
                                  goto LABEL_101;
                                }
                              }
                              else if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                              {
                                goto LABEL_91;
                              }
                              operator delete(v107.__r_.__value_.__l.__data_);
                              if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                              {
LABEL_92:
                                if ((SHIBYTE(v105) & 0x80000000) == 0)
                                  goto LABEL_93;
                                goto LABEL_102;
                              }
LABEL_101:
                              operator delete(v111.__r_.__value_.__l.__data_);
                              if ((SHIBYTE(v105) & 0x80000000) == 0)
                              {
LABEL_93:
                                if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                  goto LABEL_94;
                                goto LABEL_103;
                              }
LABEL_102:
                              operator delete(v103);
                              if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                              {
LABEL_94:
                                v67 = 0;
                                memset(&v107, 170, sizeof(v107));
                                if ((v66 & 0x8000000000000000) == 0)
                                {
LABEL_95:
                                  v99.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
                                  v99.__r_.__value_.__l.__size_ = size;
                                  v99.__r_.__value_.__r.__words[2] = v66;
                                  goto LABEL_105;
                                }
LABEL_104:
                                std::string::__init_copy_ctor_external(&v99, v64, size);
LABEL_105:
                                support::fs::createUniquePath((const char *)&v99, &v107);
                                if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(v99.__r_.__value_.__l.__data_);
                                support::fs::createDir((const char *)__dst, 0x1EDu, 1);
                                if (*(char *)(a1 + 95) >= 0)
                                  v69 = v5;
                                else
                                  v69 = *(const std::__fs::filesystem::path **)(a1 + 72);
                                if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                  v70 = (const std::__fs::filesystem::path *)&v107;
                                else
                                  v70 = (const std::__fs::filesystem::path *)v107.__r_.__value_.__r.__words[0];
                                rename(v69, v70, v68);
                                v9 = v71 == 0;
                                v72 = *(NSObject **)(a1 + 40);
                                if ((v67 & 1) != 0)
                                {
                                  if (v71)
                                  {
                                    if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
                                    {
                                      v73 = &v107;
                                      if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                        v73 = (std::string *)v107.__r_.__value_.__r.__words[0];
                                      LODWORD(v111.__r_.__value_.__l.__data_) = 136315138;
                                      *(std::string::size_type *)((char *)v111.__r_.__value_.__r.__words + 4) = (std::string::size_type)v73;
                                      _os_log_error_impl(&dword_1A343C000, v72, OS_LOG_TYPE_ERROR, "Failed: Creating CoreDump snapshot path. snapshotUniquePath=[%s]", (uint8_t *)&v111, 0xCu);
                                    }
                                  }
                                  else if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
                                  {
                                    v79 = &v107;
                                    if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                      v79 = (std::string *)v107.__r_.__value_.__r.__words[0];
                                    LODWORD(v111.__r_.__value_.__l.__data_) = 136315138;
                                    *(std::string::size_type *)((char *)v111.__r_.__value_.__r.__words + 4) = (std::string::size_type)v79;
                                    _os_log_impl(&dword_1A343C000, v72, OS_LOG_TYPE_DEFAULT, "#I Success: CoreDump files are placed in path [%s]", (uint8_t *)&v111, 0xCu);
                                  }
                                }
                                else
                                {
                                  if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
                                  {
                                    v74 = __p;
                                    if (SHIBYTE(__p[2]) < 0)
                                      v74 = (void **)__p[0];
                                    LODWORD(v111.__r_.__value_.__l.__data_) = 136315138;
                                    *(std::string::size_type *)((char *)v111.__r_.__value_.__r.__words + 4) = (std::string::size_type)v74;
                                    _os_log_impl(&dword_1A343C000, v72, OS_LOG_TYPE_DEFAULT, "#I Success: Trashing coredump logs. Trace filter is %s", (uint8_t *)&v111, 0xCu);
                                  }
                                  support::fs::removeDir((const char *)&v107);
                                }
                                if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
                                {
                                  operator delete(v107.__r_.__value_.__l.__data_);
                                  if ((v66 & 0x8000000000000000) == 0)
                                  {
LABEL_126:
                                    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
                                      goto LABEL_127;
                                    goto LABEL_132;
                                  }
                                }
                                else if ((v66 & 0x8000000000000000) == 0)
                                {
                                  goto LABEL_126;
                                }
                                operator delete(v64);
                                if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
                                {
LABEL_127:
                                  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                                    goto LABEL_128;
                                  goto LABEL_133;
                                }
LABEL_132:
                                operator delete(__p[0]);
                                if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                                {
LABEL_128:
                                  if ((SHIBYTE(v112.st_gid) & 0x80000000) == 0)
                                  {
LABEL_129:
                                    MEMORY[0x1A858F2D8](v110);
                                    return v9;
                                  }
LABEL_134:
                                  operator delete(*(void **)&v112.st_dev);
                                  goto LABEL_129;
                                }
LABEL_133:
                                operator delete(__dst[0]);
                                if ((SHIBYTE(v112.st_gid) & 0x80000000) == 0)
                                  goto LABEL_129;
                                goto LABEL_134;
                              }
LABEL_103:
                              operator delete(v106.__r_.__value_.__l.__data_);
                              v67 = 0;
                              memset(&v107, 170, sizeof(v107));
                              if ((v66 & 0x8000000000000000) == 0)
                                goto LABEL_95;
                              goto LABEL_104;
                            }
                          }
                          memmove(v58, v55, v57);
                          goto LABEL_83;
                        }
                      }
                      memmove(v44, v41, v43);
                      goto LABEL_63;
                    }
                  }
                  memmove(v38, v35, v37);
                  goto LABEL_55;
                }
                v75 = abm::trace::kLogDirPrefix[0];
                v76 = strlen(abm::trace::kLogDirPrefix[0]);
                if (v76 > 0x7FFFFFFFFFFFFFF7)
                  std::string::__throw_length_error[abi:ne180100]();
                v77 = v76;
                if (v76 >= 0x17)
                {
                  v80 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v76 | 7) != 0x17)
                    v80 = v76 | 7;
                  v81 = v80 + 1;
                  v78 = operator new(v80 + 1);
                  v106.__r_.__value_.__l.__size_ = v77;
                  v106.__r_.__value_.__r.__words[2] = v81 | 0x8000000000000000;
                  v106.__r_.__value_.__r.__words[0] = (std::string::size_type)v78;
                }
                else
                {
                  *((_BYTE *)&v106.__r_.__value_.__s + 23) = v76;
                  v78 = &v106;
                  if (!v76)
                  {
LABEL_147:
                    v78[v77] = 0;
                    if (SHIBYTE(__dst[2]) >= 0)
                      v82 = (const std::string::value_type *)__dst;
                    else
                      v82 = (const std::string::value_type *)__dst[0];
                    if (SHIBYTE(__dst[2]) >= 0)
                      v83 = HIBYTE(__dst[2]);
                    else
                      v83 = (std::string::size_type)__dst[1];
                    v84 = std::string::insert(&v106, 0, v82, v83);
                    v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
                    v111.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v85;
                    v84->__r_.__value_.__l.__size_ = 0;
                    v84->__r_.__value_.__r.__words[2] = 0;
                    v84->__r_.__value_.__r.__words[0] = 0;
                    if ((v112.st_gid & 0x80000000) == 0)
                      v86 = &v112;
                    else
                      v86 = *(stat **)&v112.st_dev;
                    if ((v112.st_gid & 0x80000000) == 0)
                      st_ino = HIBYTE(v112.st_gid);
                    else
                      st_ino = v112.st_ino;
                    v88 = std::string::append(&v111, (const std::string::value_type *)v86, st_ino);
                    v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
                    v107.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v89;
                    v88->__r_.__value_.__l.__size_ = 0;
                    v88->__r_.__value_.__r.__words[2] = 0;
                    v88->__r_.__value_.__r.__words[0] = 0;
                    v90 = abm::trace::kEURCoreDumpSnapshotDirectorySuffix[0];
                    v91 = strlen(abm::trace::kEURCoreDumpSnapshotDirectorySuffix[0]);
                    if (v91 > 0x7FFFFFFFFFFFFFF7)
                      std::string::__throw_length_error[abi:ne180100]();
                    v92 = v91;
                    if (v91 >= 0x17)
                    {
                      v94 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v91 | 7) != 0x17)
                        v94 = v91 | 7;
                      v95 = v94 + 1;
                      v93 = operator new(v94 + 1);
                      v104 = v92;
                      v105 = v95 | 0x8000000000000000;
                      v103 = v93;
                    }
                    else
                    {
                      HIBYTE(v105) = v91;
                      v93 = &v103;
                      if (!v91)
                      {
LABEL_167:
                        *((_BYTE *)v93 + v92) = 0;
                        if (v105 >= 0)
                          v96 = (const std::string::value_type *)&v103;
                        else
                          v96 = (const std::string::value_type *)v103;
                        if (v105 >= 0)
                          v97 = HIBYTE(v105);
                        else
                          v97 = v104;
                        v98 = std::string::append(&v107, v96, v97);
                        v64 = (std::string::value_type *)v98->__r_.__value_.__r.__words[0];
                        size = v98->__r_.__value_.__l.__size_;
                        v66 = v98->__r_.__value_.__r.__words[2];
                        v98->__r_.__value_.__l.__size_ = 0;
                        v98->__r_.__value_.__r.__words[2] = 0;
                        v98->__r_.__value_.__r.__words[0] = 0;
                        if (SHIBYTE(v105) < 0)
                        {
                          operator delete(v103);
                          if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          {
LABEL_175:
                            if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                              goto LABEL_176;
                            goto LABEL_181;
                          }
                        }
                        else if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        {
                          goto LABEL_175;
                        }
                        operator delete(v107.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        {
LABEL_176:
                          if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                            goto LABEL_177;
                          goto LABEL_182;
                        }
LABEL_181:
                        operator delete(v111.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        {
LABEL_177:
                          v67 = 1;
                          memset(&v107, 170, sizeof(v107));
                          if ((v66 & 0x8000000000000000) == 0)
                            goto LABEL_95;
                          goto LABEL_104;
                        }
LABEL_182:
                        operator delete(v106.__r_.__value_.__l.__data_);
                        v67 = 1;
                        memset(&v107, 170, sizeof(v107));
                        if ((v66 & 0x8000000000000000) == 0)
                          goto LABEL_95;
                        goto LABEL_104;
                      }
                    }
                    memmove(v93, v90, v92);
                    goto LABEL_167;
                  }
                }
                memmove(v78, v75, v77);
                goto LABEL_147;
              }
            }
            memmove(v25, v22, (size_t)v24);
            goto LABEL_31;
          }
        }
        memmove(v18, v15, (size_t)v17);
        goto LABEL_21;
      }
    }
  }
  v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    if (*(char *)(a1 + 95) < 0)
      v5 = (const std::__fs::filesystem::path *)v5->__pn_.__r_.__value_.__r.__words[0];
    v112.st_dev = 136315138;
    *(_QWORD *)&v112.st_mode = v5;
    _os_log_error_impl(&dword_1A343C000, v8, OS_LOG_TYPE_ERROR, "Failed: Couldn't find Scratch path [%s] to move to Snapshot path", (uint8_t *)&v112, 0xCu);
  }
  return 0;
}

void sub_1A345D7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if (a32 < 0)
    {
LABEL_5:
      operator delete(a27);
      if ((a53 & 0x80000000) == 0)
        goto LABEL_9;
LABEL_8:
      operator delete(a48);
LABEL_9:
      if (a26 < 0)
        operator delete(a21);
      if (a39 < 0)
        operator delete(a34);
      if (a45 < 0)
        operator delete(a40);
      if (a60 < 0)
        operator delete(a55);
      MEMORY[0x1A858F2D8](&a46);
      _Unwind_Resume(a1);
    }
  }
  else if (a32 < 0)
  {
    goto LABEL_5;
  }
  if ((a53 & 0x80000000) == 0)
    goto LABEL_9;
  goto LABEL_8;
}

void sub_1A345D9DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if ((a42 & 0x80000000) == 0)
    JUMPOUT(0x1A345D9CCLL);
  JUMPOUT(0x1A345D9C4);
}

BOOL EURCoreDumpTraceProtocol::createScratchPath(EURCoreDumpTraceProtocol *this)
{
  char *v2;
  size_t v3;
  std::string::size_type v4;
  std::string *p_dst;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  size_t v9;
  size_t v10;
  void *p_p;
  uint64_t v12;
  uint64_t v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::string::value_type *v19;
  std::string::size_type size;
  std::string::size_type v21;
  void **v22;
  _BOOL8 Dir;
  NSObject *v24;
  std::string v26;
  std::string::value_type __s[23];
  char v28;
  void *__p;
  size_t v30;
  int64_t v31;
  std::string __dst;
  std::string v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*((char *)this + 95) < 0)
  {
    **((_BYTE **)this + 9) = 0;
    *((_QWORD *)this + 10) = 0;
  }
  else
  {
    *((_BYTE *)this + 72) = 0;
    *((_BYTE *)this + 95) = 0;
  }
  v2 = abm::trace::kScratchFolder[0];
  v3 = strlen(abm::trace::kScratchFolder[0]);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    p_dst = (std::string *)operator new(v6 + 1);
    __dst.__r_.__value_.__l.__size_ = v4;
    __dst.__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_11;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v3;
  p_dst = &__dst;
  if (v3)
LABEL_11:
    memmove(p_dst, v2, v4);
  p_dst->__r_.__value_.__s.__data_[v4] = 0;
  v8 = EURCoreDumpTrace::kCoreDumpScratchFolder[0];
  v9 = strlen(EURCoreDumpTrace::kCoreDumpScratchFolder[0]);
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    p_p = operator new(v12 + 1);
    v30 = v10;
    v31 = v13 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_19;
  }
  HIBYTE(v31) = v9;
  p_p = &__p;
  if (v9)
LABEL_19:
    memmove(p_p, v8, v10);
  *((_BYTE *)p_p + v10) = 0;
  if (v31 >= 0)
    v14 = (const std::string::value_type *)&__p;
  else
    v14 = (const std::string::value_type *)__p;
  if (v31 >= 0)
    v15 = HIBYTE(v31);
  else
    v15 = v30;
  v16 = std::string::append(&__dst, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v28 = 8;
  strcpy(__s, "coredump");
  v18 = std::string::append(&v33, __s, 8uLL);
  v19 = (std::string::value_type *)v18->__r_.__value_.__r.__words[0];
  size = v18->__r_.__value_.__l.__size_;
  v21 = v18->__r_.__value_.__r.__words[2];
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (v28 < 0)
  {
    operator delete(*(void **)__s);
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_28:
      if ((SHIBYTE(v31) & 0x80000000) == 0)
        goto LABEL_29;
      goto LABEL_34;
    }
  }
  else if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_28;
  }
  operator delete(v33.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v31) & 0x80000000) == 0)
  {
LABEL_29:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
LABEL_35:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((v21 & 0x8000000000000000) == 0)
      goto LABEL_31;
    goto LABEL_36;
  }
LABEL_34:
  operator delete(__p);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_35;
LABEL_30:
  if ((v21 & 0x8000000000000000) == 0)
  {
LABEL_31:
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
    v26.__r_.__value_.__l.__size_ = size;
    v26.__r_.__value_.__r.__words[2] = v21;
    goto LABEL_37;
  }
LABEL_36:
  std::string::__init_copy_ctor_external(&v26, v19, size);
LABEL_37:
  support::fs::createUniquePath((const char *)&v26, &v33);
  v22 = (void **)((char *)this + 72);
  if (*((char *)this + 95) < 0)
    operator delete(*v22);
  *(_OWORD *)v22 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
  *((_QWORD *)this + 11) = *((_QWORD *)&v33.__r_.__value_.__l + 2);
  *((_BYTE *)&v33.__r_.__value_.__s + 23) = 0;
  v33.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  Dir = support::fs::createDir((const char *)this + 72, 0x1EDu, 1);
  if (!Dir && (v24 = *((_QWORD *)this + 5), os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)))
  {
    if (*((char *)this + 95) < 0)
      v22 = (void **)*v22;
    LODWORD(v33.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v33.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
    _os_log_error_impl(&dword_1A343C000, v24, OS_LOG_TYPE_ERROR, "Failed: Creating CoreDump scratch path. fScratchFolder=[%s]", (uint8_t *)&v33, 0xCu);
    if ((v21 & 0x8000000000000000) != 0)
      goto LABEL_44;
  }
  else if ((v21 & 0x8000000000000000) != 0)
  {
LABEL_44:
    operator delete(v19);
  }
  return Dir;
}

void sub_1A345DD60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  uint64_t v33;

  if (v33 < 0)
  {
    operator delete(v32);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::Loggable<EURCoreDumpTraceProtocol,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<EURCoreDumpTraceProtocol,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  __int128 v4;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  if (*(char *)(v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v3, *(_QWORD *)(v3 + 8));
  }
  else
  {
    v4 = *(_OWORD *)v3;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 16);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
}

uint64_t ctu::Loggable<EURCoreDumpTraceProtocol,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

_QWORD *ctu::Loggable<EURCoreDumpTraceProtocol,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = &unk_1E4A07118;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<EURCoreDumpTraceProtocol,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = &unk_1E4A07118;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void KernelPCITrace::KernelPCITrace(KernelPCITrace *this)
{
  capabilities::ipc *v2;
  void *__p[2];
  char v4;

  v4 = 9;
  strcpy((char *)__p, "trace.pci");
  v2 = (capabilities::ipc *)Trace::Trace((uint64_t)this, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)this = off_1E4A07158;
  *((_DWORD *)this + 38) = capabilities::ipc::defaultPCIBinaryTraceHistorySizeMB(v2);
  *((_BYTE *)this + 156) = 0;
  *((_DWORD *)this + 40) = 4;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 21) = (char *)this + 176;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_BYTE *)this + 216) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_QWORD *)this + 32) = 0;
}

void sub_1A345DFD0(_Unwind_Exception *a1)
{
  Trace *v1;

  Trace::~Trace(v1);
  _Unwind_Resume(a1);
}

void sub_1A345DFE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Trace::~Trace(Trace *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;

  *(_QWORD *)this = &unk_1E4A07350;
  v2 = *((_QWORD *)this + 18);
  if (v2)
    dispatch_release(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  *(_QWORD *)this = &unk_1E4A07490;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v4 = *((_QWORD *)this + 12);
  if (v4)
    dispatch_release(v4);
  v5 = *((_QWORD *)this + 11);
  if (v5)
    dispatch_release(v5);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void KernelPCITrace::~KernelPCITrace(KernelPCITrace *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  NSObject *v8;
  NSObject *v9;

  *(_QWORD *)this = off_1E4A07158;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *((_QWORD *)this + 28);
  if (v8)
  {
    dispatch_group_leave(v8);
    v9 = *((_QWORD *)this + 28);
    if (v9)
      dispatch_release(v9);
  }
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  std::__tree<KernelPCITrace::BuffContext *>::destroy(*((_QWORD **)this + 22));
  Trace::~Trace(this);
}

{
  void *v1;

  KernelPCITrace::~KernelPCITrace(this);
  operator delete(v1);
}

double KernelPCITrace::createInternal@<D0>(_QWORD *a1@<X8>)
{
  KernelPCITrace *v3;
  double result;
  __int128 v5;

  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  v3 = (KernelPCITrace *)operator new(0x110uLL);
  KernelPCITrace::KernelPCITrace(v3);
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<KernelPCITrace>::shared_ptr[abi:ne180100]<KernelPCITrace,std::shared_ptr<KernelPCITrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<KernelPCITrace>(KernelPCITrace*)::{lambda(KernelPCITrace*)#1},void>(&v5, (uint64_t)v3);
  ctu::Loggable<Trace,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v5);
  result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  return result;
}

void sub_1A345E204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1A345E218(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t KernelPCITrace::init(uint64_t a1, uint64_t a2, uint64_t *a3, NSObject **a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v13;
  uint64_t v14;
  dispatch_object_t object;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::string v18;
  _QWORD block[6];

  *(_BYTE *)(a1 + 264) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v7 = (std::__shared_weak_count *)a3[1];
    v16 = *a3;
    v17 = v7;
    if (!v7)
      goto LABEL_7;
  }
  else
  {
    v18 = *(std::string *)a2;
    v7 = (std::__shared_weak_count *)a3[1];
    v16 = *a3;
    v17 = v7;
    if (!v7)
      goto LABEL_7;
  }
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
LABEL_7:
  v10 = *a4;
  object = v10;
  if (v10)
    dispatch_retain(v10);
  v11 = Trace::init(a1, (void **)&v18.__r_.__value_.__l.__data_, &v16, &object);
  if (object)
    dispatch_release(object);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v18.__r_.__value_.__l.__data_);
    if (!(_DWORD)v11)
      return v11;
  }
  else if (!(_DWORD)v11)
  {
    return v11;
  }
  v14 = a1;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIZN14KernelPCITrace4initENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS5_8weak_ptrIN3abm19BasebandTracingTaskEEEN8dispatch5groupEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSJ__block_invoke;
  block[3] = &__block_descriptor_tmp_21_0;
  block[4] = a1 + 72;
  block[5] = &v14;
  v13 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(a1 + 96))
    dispatch_async_and_wait(v13, block);
  else
    dispatch_sync(v13, block);
  return v11;
}

void sub_1A345E398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::__shared_weak_count *v19;

  if (object)
  {
    dispatch_release(object);
    v19 = a12;
    if (!a12)
    {
LABEL_3:
      if ((a18 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v19 = a12;
    if (!a12)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v19);
  if ((a18 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Trace::init(uint64_t a1, void **a2, uint64_t *a3, NSObject **a4)
{
  void **v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  NSObject *v16;
  NSObject *v17;

  v7 = (void **)(a1 + 104);
  if (v7 == a2)
    goto LABEL_10;
  if (*(char *)(a1 + 127) < 0)
  {
    v11 = (size_t)a2[1];
    if (*((char *)a2 + 23) >= 0)
    {
      v12 = *((unsigned __int8 *)a2 + 23);
    }
    else
    {
      a2 = (void **)*a2;
      v12 = v11;
    }
    std::string::__assign_no_alias<false>(v7, a2, v12);
LABEL_10:
    v10 = *a3;
    v9 = a3[1];
    if (!v9)
      goto LABEL_13;
    goto LABEL_11;
  }
  if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v7, *a2, (size_t)a2[1]);
    v10 = *a3;
    v9 = a3[1];
    if (!v9)
      goto LABEL_13;
  }
  else
  {
    v8 = *(_OWORD *)a2;
    v7[2] = a2[2];
    *(_OWORD *)v7 = v8;
    v10 = *a3;
    v9 = a3[1];
    if (!v9)
      goto LABEL_13;
  }
LABEL_11:
  v13 = (unint64_t *)(v9 + 16);
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
LABEL_13:
  v15 = *(std::__shared_weak_count **)(a1 + 136);
  *(_QWORD *)(a1 + 128) = v10;
  *(_QWORD *)(a1 + 136) = v9;
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  v16 = *a4;
  if (v16)
    dispatch_retain(v16);
  v17 = *(NSObject **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v16;
  if (v17)
    dispatch_release(v17);
  return 1;
}

void KernelPCITrace::initProperty_sync(KernelPCITrace *this)
{
  NSObject *v2;
  _BOOL4 v3;
  _BOOL4 v4;
  _BOOL4 v5;
  void *v6[2];
  char v7;
  std::string __p;
  void *v9[2];
  char v10;
  std::string v11;
  std::string buf;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"initProperty_sync";
    _os_log_debug_impl(&dword_1A343C000, v2, OS_LOG_TYPE_DEBUG, "#D %s", (uint8_t *)&buf, 0xCu);
  }
  v7 = 7;
  strcpy((char *)v6, "Enabled");
  memset(&__p, 0, sizeof(__p));
  v10 = 3;
  LOWORD(v9[0]) = *(_WORD *)"IPC";
  WORD1(v9[0]) = str_41[2];
  memset(&buf, 0, sizeof(buf));
  v3 = defaults::get((char *)v9, (char *)v6, &buf);
  if (v3)
  {
    prop::file::get<std::string>((const void **)v9, (uint64_t)v6, (uint64_t)&buf, &v11);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v11;
  }
  if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v10 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_12:
    operator delete(v9[0]);
    if (!v3)
      goto LABEL_14;
    goto LABEL_13;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
  if (v10 < 0)
    goto LABEL_12;
LABEL_9:
  if (v3)
LABEL_13:
    util::convert<BOOL>(&__p, (BOOL *)this + 156, 0);
LABEL_14:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v7 & 0x80000000) == 0)
      goto LABEL_16;
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(v6[0]);
LABEL_16:
  v7 = 7;
  strcpy((char *)v6, "History");
  memset(&__p, 0, sizeof(__p));
  v10 = 3;
  LOWORD(v9[0]) = *(_WORD *)"IPC";
  WORD1(v9[0]) = str_41[2];
  memset(&buf, 0, sizeof(buf));
  v4 = defaults::get((char *)v9, (char *)v6, &buf);
  if (v4)
  {
    prop::file::get<std::string>((const void **)v9, (uint64_t)v6, (uint64_t)&buf, &v11);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v11;
  }
  if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v10 & 0x80000000) == 0)
      goto LABEL_22;
LABEL_27:
    operator delete(v9[0]);
    if (!v4)
      goto LABEL_29;
    goto LABEL_28;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
  if (v10 < 0)
    goto LABEL_27;
LABEL_22:
  if (v4)
LABEL_28:
    util::convert<int>(&__p, (_DWORD *)this + 38, 0);
LABEL_29:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v7 & 0x80000000) == 0)
      goto LABEL_31;
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v6[0]);
LABEL_31:
  v7 = 11;
  strcpy((char *)v6, "BufferCount");
  memset(&__p, 0, sizeof(__p));
  v10 = 3;
  LOWORD(v9[0]) = *(_WORD *)"IPC";
  WORD1(v9[0]) = str_41[2];
  memset(&buf, 0, sizeof(buf));
  v5 = defaults::get((char *)v9, (char *)v6, &buf);
  if (v5)
  {
    prop::file::get<std::string>((const void **)v9, (uint64_t)v6, (uint64_t)&buf, &v11);
    __p = v11;
  }
  if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v10 & 0x80000000) == 0)
      goto LABEL_35;
LABEL_40:
    operator delete(v9[0]);
    if (!v5)
      goto LABEL_42;
    goto LABEL_41;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
  if (v10 < 0)
    goto LABEL_40;
LABEL_35:
  if (v5)
LABEL_41:
    util::convert<unsigned int>(&__p, (_DWORD *)this + 40, 0);
LABEL_42:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_46:
    operator delete(v6[0]);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v7 < 0)
    goto LABEL_46;
}

void sub_1A345E898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *KernelPCITrace::createBuffContext_sync(KernelPCITrace *this, uint64_t a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;

  v4 = operator new(0x20uLL);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v5 || (v6 = *((_QWORD *)this + 9), (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  *v4 = 0;
  v4[1] = a2;
  v4[2] = v6;
  v4[3] = v8;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v14 = v4[1];
  if (v14)
    *v4 = malloc_type_malloc(v14, 0xA158526EuLL);
  std::__shared_weak_count::__release_weak(v8);
  v16 = (uint64_t **)((char *)this + 176);
  v15 = (uint64_t *)*((_QWORD *)this + 22);
  if (v15)
  {
    while (1)
    {
      while (1)
      {
        v17 = (uint64_t **)v15;
        v18 = v15[4];
        if ((unint64_t)v4 >= v18)
          break;
        v15 = *v17;
        v16 = v17;
        if (!*v17)
          goto LABEL_20;
      }
      if (v18 >= (unint64_t)v4)
        break;
      v15 = v17[1];
      if (!v15)
      {
        v16 = v17 + 1;
        goto LABEL_20;
      }
    }
  }
  else
  {
    v17 = (uint64_t **)((char *)this + 176);
LABEL_20:
    v19 = (uint64_t *)operator new(0x28uLL);
    v19[4] = (uint64_t)v4;
    *v19 = 0;
    v19[1] = 0;
    v19[2] = (uint64_t)v17;
    *v16 = v19;
    v20 = **((_QWORD **)this + 21);
    if (v20)
    {
      *((_QWORD *)this + 21) = v20;
      v21 = *v16;
    }
    else
    {
      v21 = v19;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 22), v21);
    ++*((_QWORD *)this + 23);
  }
  return v4;
}

void sub_1A345EAAC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v4;

  v4 = (std::__shared_weak_count *)v1[3];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  std::__shared_weak_count::__release_weak(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A345EAD4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void KernelPCITrace::deleteBuffContext_sync(_QWORD *a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  std::__shared_weak_count *v13;

  if (a2)
  {
    v2 = (uint64_t *)a1[22];
    if (v2)
    {
      v4 = a1 + 22;
      v5 = (_QWORD *)a1[22];
      do
      {
        v6 = v5[4];
        v7 = v6 >= a2;
        if (v6 >= a2)
          v8 = v5;
        else
          v8 = v5 + 1;
        if (v7)
          v4 = v5;
        v5 = (_QWORD *)*v8;
      }
      while (*v8);
      if (v4 != a1 + 22 && v4[4] <= a2)
      {
        v9 = (uint64_t *)v4[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (uint64_t *)*v9;
          }
          while (v9);
        }
        else
        {
          v11 = v4;
          do
          {
            v10 = (uint64_t *)v11[2];
            v12 = *v10 == (_QWORD)v11;
            v11 = v10;
          }
          while (!v12);
        }
        if ((uint64_t *)a1[21] == v4)
          a1[21] = v10;
        --a1[23];
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v2, v4);
        operator delete(v4);
        if (*(_QWORD *)a2)
          free(*(void **)a2);
        v13 = *(std::__shared_weak_count **)(a2 + 24);
        if (v13)
          std::__shared_weak_count::__release_weak(v13);
        operator delete((void *)a2);
      }
    }
  }
}

void KernelPCITrace::deleteAllBuffContext_sync(KernelPCITrace *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  char *v6;
  char *v7;
  BOOL v8;

  v2 = (char *)*((_QWORD *)this + 21);
  v3 = (char *)this + 176;
  if (v2 != (char *)this + 176)
  {
    do
    {
      v4 = *((_QWORD *)v2 + 4);
      if (v4)
      {
        if (*(_QWORD *)v4)
          free(*(void **)v4);
        v5 = *(std::__shared_weak_count **)(v4 + 24);
        if (v5)
          std::__shared_weak_count::__release_weak(v5);
        operator delete((void *)v4);
      }
      v6 = (char *)*((_QWORD *)v2 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (char *)*((_QWORD *)v2 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v2;
          v2 = v7;
        }
        while (!v8);
      }
      v2 = v7;
    }
    while (v7 != v3);
  }
  std::__tree<KernelPCITrace::BuffContext *>::destroy(*((_QWORD **)this + 22));
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 21) = v3;
}

void KernelPCITrace::updateTraceState_sync(uint64_t a1, NSObject **a2)
{
  NSObject *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  _QWORD v27[5];
  dispatch_group_t group;
  const __CFDictionary *v29;
  NSObject *v30;
  _QWORD v31[5];
  _QWORD *v32;
  uint8_t buf[16];
  _QWORD *(*v34)(uint64_t);
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  _BYTE v38[24];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v38 = 136315138;
    *(_QWORD *)&v38[4] = "updateTraceState_sync";
    _os_log_debug_impl(&dword_1A343C000, v4, OS_LOG_TYPE_DEBUG, "#D %s", v38, 0xCu);
    if (*(_BYTE *)(a1 + 156))
    {
LABEL_3:
      if (*(_BYTE *)(a1 + 216))
        return;
      *(_BYTE *)(a1 + 216) = 1;
      v5 = *(std::__shared_weak_count **)(a1 + 240);
      *(_QWORD *)(a1 + 232) = 0;
      *(_QWORD *)(a1 + 240) = 0;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      v43 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v42 = v8;
      v41 = v8;
      v40 = v8;
      v39 = v8;
      *(_OWORD *)&v38[8] = v8;
      v9 = (char *)operator new(0x40uLL);
      strcpy(v9, "/var/wireless/Library/Logs/AppleBasebandManager/pci.scratch/");
      v10 = *(int *)(a1 + 152);
      *(_QWORD *)v38 = 6906736;
      v38[23] = 3;
      std::string::__init_copy_ctor_external((std::string *)&v39, v9, 0x3CuLL);
      *(_QWORD *)&v41 = 0;
      *((_QWORD *)&v41 + 1) = 0x400000000000000;
      *(_QWORD *)&v42 = v10 << 20;
      *((_QWORD *)&v42 + 1) = 0x100000;
      LOBYTE(v43) = 1;
      *((_QWORD *)&v40 + 1) = 1735355438;
      operator delete(v9);
      v11 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A343C000, v11, OS_LOG_TYPE_DEFAULT, "#I Create and open log writer", buf, 2u);
      }
      v12 = operator new(0xB8uLL);
      CircularFileLogWriter::CircularFileLogWriter((uint64_t)v12, (__int128 *)v38);
      std::shared_ptr<CircularFileLogWriter>::shared_ptr[abi:ne180100]<CircularFileLogWriter,std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter*)#1},void>(buf, (uint64_t)v12);
      v13 = *(_OWORD *)buf;
      memset(buf, 0, sizeof(buf));
      v14 = *(std::__shared_weak_count **)(a1 + 240);
      *(_OWORD *)(a1 + 232) = v13;
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v17 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v18 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v20 = *(_QWORD *)(a1 + 232);
      v31[0] = MEMORY[0x1E0C809B0];
      v31[1] = 0x40000000;
      v31[2] = ___ZN21CircularFileLogWriter4openEv_block_invoke;
      v31[3] = &__block_descriptor_tmp_0;
      v31[4] = v20;
      v32 = v31;
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 0x40000000;
      v34 = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
      v35 = &__block_descriptor_tmp_16_0;
      v36 = v20 + 8;
      v37 = &v32;
      v21 = *(NSObject **)(v20 + 24);
      if (*(_QWORD *)(v20 + 32))
        dispatch_async_and_wait(v21, buf);
      else
        dispatch_sync(v21, buf);
      if ((KernelPCITrace::registerWithKernel_sync((KernelPCITrace *)a1) & 1) == 0)
      {
        v22 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1A343C000, v22, OS_LOG_TYPE_DEFAULT, "#E Registering with Kernel driver failed. De-register to cleanup", buf, 2u);
        }
        KernelPCITrace::deregisterWithKernel_sync((KernelPCITrace *)a1);
      }
      if (SHIBYTE(v41) < 0)
      {
        operator delete(*((void **)&v40 + 1));
        if ((SBYTE7(v40) & 0x80000000) == 0)
        {
LABEL_30:
          if ((v38[23] & 0x80000000) == 0)
            return;
LABEL_34:
          operator delete(*(void **)v38);
          return;
        }
      }
      else if ((SBYTE7(v40) & 0x80000000) == 0)
      {
        goto LABEL_30;
      }
      operator delete((void *)v39);
      if ((v38[23] & 0x80000000) == 0)
        return;
      goto LABEL_34;
    }
  }
  else if (*(_BYTE *)(a1 + 156))
  {
    goto LABEL_3;
  }
  *(_BYTE *)(a1 + 216) = 0;
  v23 = dispatch_group_create();
  v24 = v23;
  v30 = v23;
  if (v23)
  {
    dispatch_retain(v23);
    dispatch_group_enter(v24);
  }
  v29 = 0;
  KernelPCITrace::snapshot_sync(a1, &v30, &v29);
  if (v24)
  {
    dispatch_group_leave(v24);
    dispatch_release(v24);
  }
  v25 = *(NSObject **)(a1 + 88);
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 1174405120;
  v27[2] = ___ZN14KernelPCITrace21updateTraceState_syncEN8dispatch13group_sessionE_block_invoke;
  v27[3] = &__block_descriptor_tmp_3;
  v26 = *a2;
  v27[4] = a1;
  group = v26;
  if (v26)
  {
    dispatch_retain(v26);
    dispatch_group_enter(v26);
  }
  dispatch_group_notify(v24, v25, v27);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (v24)
    dispatch_release(v24);
}

void sub_1A345F0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  void *v29;

  operator delete(v29);
  CircularFileLogWriter::Params::~Params(&a29);
  _Unwind_Resume(a1);
}

void sub_1A345F114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;

  if (a34 < 0)
    operator delete(__p);
  operator delete(v34);
  _Unwind_Resume(a1);
}

void sub_1A345F13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  CircularFileLogWriter::Params::~Params(&a29);
  _Unwind_Resume(a1);
}

void sub_1A345F150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  NSObject *v7;
  va_list va;

  va_start(va, a7);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  if (!v7)
    _Unwind_Resume(a1);
  dispatch_group_leave(v7);
  dispatch_release(v7);
  dispatch_release(v7);
  _Unwind_Resume(a1);
}

void sub_1A345F188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  CircularFileLogWriter::Params::~Params(&a29);
  _Unwind_Resume(a1);
}

uint64_t KernelPCITrace::registerWithKernel_sync(KernelPCITrace *this)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  const char *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  abm::BasebandTracingTask *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  NSObject *v30;
  _BOOL4 v31;
  const char *v32;
  NSObject *v33;
  int v34;
  int v35;
  _QWORD *BuffContext_sync;
  int v37;
  NSObject *v38;
  _BOOL4 v39;
  NSObject *v40;
  unint64_t *v41;
  unint64_t v42;
  unsigned int v43;
  _QWORD *v44;
  int v45;
  NSObject *v46;
  __CFRunLoop *RunLoop;
  _BYTE buf[18];
  __int16 v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 5);
  v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)v3)
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "registerWithKernel_sync";
    _os_log_debug_impl(&dword_1A343C000, v2, OS_LOG_TYPE_DEBUG, "#D %s", buf, 0xCu);
    if (*((_BYTE *)this + 264))
      goto LABEL_5;
  }
  else if (*((_BYTE *)this + 264))
  {
    goto LABEL_5;
  }
  v3 = *((_QWORD *)this + 18);
  if (v3)
  {
    dispatch_group_enter(v3);
    *((_BYTE *)this + 264) = 1;
  }
LABEL_5:
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  pci::transport::kernelControl::create((pci::transport::kernelControl *)v3);
  v7 = *(_QWORD *)buf;
  if (!*(_QWORD *)buf)
  {
    *(_QWORD *)buf = 0;
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
    *((_QWORD *)this + 31) = 0;
    *((_QWORD *)this + 32) = 0;
    if (v9)
      goto LABEL_12;
LABEL_22:
    if (!v7)
      goto LABEL_19;
    goto LABEL_23;
  }
  v8 = operator new(0x20uLL);
  *v8 = off_1E4A072C0;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  *(_QWORD *)buf = 0;
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 31) = v7;
  *((_QWORD *)this + 32) = v8;
  if (!v9)
    goto LABEL_22;
LABEL_12:
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  v12 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v7 = *((_QWORD *)this + 31);
  if (!v7)
  {
LABEL_19:
    v13 = *((_QWORD *)this + 5);
    v14 = 0;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v15 = "#E ABP Control object creation failed";
LABEL_33:
      _os_log_impl(&dword_1A343C000, v13, OS_LOG_TYPE_DEFAULT, v15, buf, 2u);
      return 0;
    }
    return v14;
  }
LABEL_23:
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7) & 1) != 0)
  {
    v16 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
    if (!v16)
      return 0;
    v17 = std::__shared_weak_count::lock(v16);
    if (!v17)
      return 0;
    v18 = v17;
    v19 = (abm::BasebandTracingTask *)*((_QWORD *)this + 16);
    if (!v19)
      goto LABEL_60;
    v20 = *((_QWORD *)this + 31);
    v21 = (std::__shared_weak_count *)*((_QWORD *)v19 + 16);
    if (v21 && (v22 = std::__shared_weak_count::lock(v21)) != 0)
    {
      v23 = v22;
      v24 = *((_QWORD *)v19 + 15);
      if (v24)
        v25 = *(_QWORD *)(v24 + 168);
      else
        v25 = 0;
      v27 = (unint64_t *)&v22->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    else
    {
      v25 = 0;
    }
    v29 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 40))(v20, v25);
    v30 = *((_QWORD *)this + 5);
    v31 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
    if (v29)
    {
      if (!v31)
      {
LABEL_60:
        v14 = 0;
        goto LABEL_61;
      }
      *(_WORD *)buf = 0;
      v32 = "#E ABP Control open failed";
      v33 = v30;
    }
    else
    {
      if (v31)
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A343C000, v30, OS_LOG_TYPE_DEFAULT, "#I Started and opened ABP control interface", buf, 2u);
      }
      v34 = (*(uint64_t (**)(_QWORD, int *))(**((_QWORD **)this + 31) + 96))(*((_QWORD *)this + 31), &KernelPCITrace::registerWithKernel_sync(void)::bufferSize);
      if (KernelPCITrace::registerWithKernel_sync(void)::bufferSize)
        v35 = v34;
      else
        v35 = 0;
      if (v35 == 1)
      {
        BuffContext_sync = KernelPCITrace::createBuffContext_sync(this, KernelPCITrace::registerWithKernel_sync(void)::bufferSize);
        v37 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, void (*)(_QWORD *, int, uint64_t), _QWORD *))(**((_QWORD **)this + 31) + 64))(*((_QWORD *)this + 31), *BuffContext_sync, *((unsigned int *)BuffContext_sync + 2), 1, flushLogsCompletionCB, BuffContext_sync);
        v38 = *((_QWORD *)this + 5);
        v39 = os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
        if (v37)
        {
          if (v39)
          {
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&buf[4] = KernelPCITrace::registerWithKernel_sync(void)::bufferSize >> 10;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v37;
            _os_log_impl(&dword_1A343C000, v38, OS_LOG_TYPE_DEFAULT, "#E Failed assigning buffer of size '%u KB' to fetch logs during init. Status [0x%x]", buf, 0xEu);
          }
          KernelPCITrace::deleteBuffContext_sync(this, (unint64_t)BuffContext_sync);
        }
        else
        {
          if (v39)
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = KernelPCITrace::registerWithKernel_sync(void)::bufferSize >> 10;
            _os_log_impl(&dword_1A343C000, v38, OS_LOG_TYPE_DEFAULT, "#I Assign buffer of size '%u KB' to fetch logs during init", buf, 8u);
          }
          if (!*((_DWORD *)this + 40))
          {
LABEL_73:
            RunLoop = (__CFRunLoop *)abm::BasebandTracingTask::getRunLoop(v19);
            CFRunLoopWakeUp(RunLoop);
            v14 = 1;
            goto LABEL_61;
          }
          v43 = 0;
          while (1)
          {
            v44 = KernelPCITrace::createBuffContext_sync(this, 0x10000);
            v45 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, void (*)(_QWORD *, int, uint64_t), _QWORD *))(**((_QWORD **)this + 31) + 64))(*((_QWORD *)this + 31), *v44, *((unsigned int *)v44 + 2), 0, readLogsCompletionCB, v44);
            v46 = *((_QWORD *)this + 5);
            if (v45)
              break;
            ++v43;
            if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)&buf[4] = v43;
              *(_WORD *)&buf[8] = 2048;
              *(_QWORD *)&buf[10] = 64;
              _os_log_impl(&dword_1A343C000, v46, OS_LOG_TYPE_DEFAULT, "#I Pre-assign buffer # %d of size '%ld KB' to fetch logs", buf, 0x12u);
            }
            if (v43 >= *((_DWORD *)this + 40))
              goto LABEL_73;
          }
          if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109632;
            *(_DWORD *)&buf[4] = v43 + 1;
            *(_WORD *)&buf[8] = 2048;
            *(_QWORD *)&buf[10] = 64;
            v49 = 1024;
            v50 = v45;
            _os_log_error_impl(&dword_1A343C000, v46, OS_LOG_TYPE_ERROR, "Failed pre-assigning buffer # %d of size '%ld KB' to fetch logs. Status [0x%x]", buf, 0x18u);
          }
          KernelPCITrace::deleteBuffContext_sync(this, (unint64_t)v44);
        }
        goto LABEL_60;
      }
      v40 = *((_QWORD *)this + 5);
      v14 = 0;
      if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
LABEL_61:
        v41 = (unint64_t *)&v18->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        return v14;
      }
      *(_WORD *)buf = 0;
      v32 = "#E Failed to get internal buffer size from kernel";
      v33 = v40;
    }
    _os_log_impl(&dword_1A343C000, v33, OS_LOG_TYPE_DEFAULT, v32, buf, 2u);
    goto LABEL_60;
  }
  v13 = *((_QWORD *)this + 5);
  v14 = 0;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    v15 = "#E ABP Control start failed";
    goto LABEL_33;
  }
  return v14;
}

void sub_1A345F7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A345F7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A345F800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A345F814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A345F828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A345F83C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void KernelPCITrace::deregisterWithKernel_sync(KernelPCITrace *this)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v10 = 136315138;
    v11 = "deregisterWithKernel_sync";
    _os_log_debug_impl(&dword_1A343C000, v2, OS_LOG_TYPE_DEBUG, "#D %s", (uint8_t *)&v10, 0xCu);
    v3 = *((_QWORD *)this + 31);
    if (!v3)
      return;
  }
  else
  {
    v3 = *((_QWORD *)this + 31);
    if (!v3)
      return;
  }
  v4 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10) = 0;
    _os_log_impl(&dword_1A343C000, v4, OS_LOG_TYPE_DEFAULT, "#I Close ABM Control port", (uint8_t *)&v10, 2u);
    v3 = *((_QWORD *)this + 31);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  v5 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10) = 0;
    _os_log_impl(&dword_1A343C000, v5, OS_LOG_TYPE_DEFAULT, "#I Stop ABP control interface", (uint8_t *)&v10, 2u);
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 31) + 32))(*((_QWORD *)this + 31));
  v6 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10) = 0;
    _os_log_impl(&dword_1A343C000, v6, OS_LOG_TYPE_DEFAULT, "#I Destroy ABP control object", (uint8_t *)&v10, 2u);
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (*((_BYTE *)this + 264))
  {
    dispatch_group_leave(*((dispatch_group_t *)this + 18));
    *((_BYTE *)this + 264) = 0;
  }
}

void CircularFileLogWriter::Params::~Params(void **this)
{
  if (*((char *)this + 71) < 0)
  {
    operator delete(this[6]);
    if ((*((char *)this + 47) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 23) & 0x80000000) == 0)
        return;
LABEL_7:
      operator delete(*this);
      return;
    }
  }
  else if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    goto LABEL_7;
}

void KernelPCITrace::snapshot_sync(uint64_t a1, NSObject **a2, const __CFDictionary **a3)
{
  NSObject *v6;
  const char *v7;
  void *v8;
  char **v9;
  const char *v10;
  size_t v11;
  std::string::size_type v12;
  std::string *p_dst;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  std::string::size_type v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  void **v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  std::string::size_type v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v43;
  NSObject *v44;
  NSObject *v45;
  _QWORD *BuffContext_sync;
  int v47;
  NSObject *v48;
  _BOOL4 v49;
  _QWORD *v50;
  int v51;
  NSObject *v52;
  _BOOL4 v53;
  NSObject *v54;
  void *v55;
  char v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string __dst;
  void *v61[3];
  void *__p[3];
  _QWORD v63[2];
  _QWORD v64[2];
  uint8_t buf[24];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v6 = *(NSObject **)(a1 + 40);
  if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    if (!*(_QWORD *)(a1 + 248))
      return;
LABEL_3:
    v63[0] = 0xAAAAAAAAAAAAAAAALL;
    v63[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v63, *a3);
    memset(buf, 170, sizeof(buf));
    __p[0] = operator new(0x28uLL);
    *(_OWORD *)&__p[1] = xmmword_1A357F480;
    strcpy((char *)__p[0], "kCollectTelephonyLogsWithCoredump");
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v61, "kKeyTraceAction");
    ctu::cf::map_adapter::getString();
    MEMORY[0x1A858F29C](v61);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    memset(__p, 170, sizeof(__p));
    v7 = (const char *)*MEMORY[0x1E0CFB370];
    memset(v61, 0, sizeof(v61));
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__dst, v7);
    ctu::cf::map_adapter::getString();
    MEMORY[0x1A858F29C](&__dst);
    if (SHIBYTE(v61[2]) < 0)
      operator delete(v61[0]);
    memset(v61, 170, sizeof(v61));
    v8 = (void *)HIBYTE(__p[2]);
    if (SHIBYTE(__p[2]) < 0)
      v8 = __p[1];
    if (v8)
      v9 = abm::trace::kSnapshotFolder;
    else
      v9 = abm::trace::kTrashFolder;
    v10 = *v9;
    v11 = strlen(*v9);
    if (v11 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v12 = v11;
    if (v11 >= 0x17)
    {
      v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v14 = v11 | 7;
      v15 = v14 + 1;
      p_dst = (std::string *)operator new(v14 + 1);
      __dst.__r_.__value_.__l.__size_ = v12;
      __dst.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11;
      p_dst = &__dst;
      if (!v11)
      {
LABEL_20:
        p_dst->__r_.__value_.__s.__data_[v12] = 0;
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v59, "kKeyTraceDumpStatePath");
        ctu::cf::map_adapter::getString();
        MEMORY[0x1A858F29C](&v59);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        v16 = abm::trace::kLogDirPrefix[0];
        v17 = strlen(abm::trace::kLogDirPrefix[0]);
        if (v17 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v18 = v17;
        if (v17 >= 0x17)
        {
          v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17)
            v20 = v17 | 7;
          v21 = v20 + 1;
          v19 = operator new(v20 + 1);
          v57.__r_.__value_.__l.__size_ = v18;
          v57.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
          v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
        }
        else
        {
          *((_BYTE *)&v57.__r_.__value_.__s + 23) = v17;
          v19 = &v57;
          if (!v17)
          {
LABEL_30:
            v19[v18] = 0;
            if (SHIBYTE(v61[2]) >= 0)
              v22 = v61;
            else
              v22 = (void **)v61[0];
            if (SHIBYTE(v61[2]) >= 0)
              v23 = HIBYTE(v61[2]);
            else
              v23 = (std::string::size_type)v61[1];
            v24 = std::string::insert(&v57, 0, (const std::string::value_type *)v22, v23);
            v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
            v58.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v25;
            v24->__r_.__value_.__l.__size_ = 0;
            v24->__r_.__value_.__r.__words[2] = 0;
            v24->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(__p[2]) >= 0)
              v26 = __p;
            else
              v26 = (void **)__p[0];
            if (SHIBYTE(__p[2]) >= 0)
              v27 = HIBYTE(__p[2]);
            else
              v27 = (std::string::size_type)__p[1];
            v28 = std::string::append(&v58, (const std::string::value_type *)v26, v27);
            v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
            v59.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v29;
            v28->__r_.__value_.__l.__size_ = 0;
            v28->__r_.__value_.__r.__words[2] = 0;
            v28->__r_.__value_.__r.__words[0] = 0;
            v30 = std::string::append(&v59, "-", 1uLL);
            v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
            __dst.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v31;
            v30->__r_.__value_.__l.__size_ = 0;
            v30->__r_.__value_.__r.__words[2] = 0;
            v30->__r_.__value_.__r.__words[0] = 0;
            v56 = 3;
            LODWORD(v55) = 6906736;
            v32 = std::string::append(&__dst, (const std::string::value_type *)&v55, 3uLL);
            v33 = v32->__r_.__value_.__r.__words[0];
            v64[0] = v32->__r_.__value_.__l.__size_;
            *(_QWORD *)((char *)v64 + 7) = *(std::string::size_type *)((char *)&v32->__r_.__value_.__r.__words[1] + 7);
            v34 = HIBYTE(v32->__r_.__value_.__r.__words[2]);
            v32->__r_.__value_.__l.__size_ = 0;
            v32->__r_.__value_.__r.__words[2] = 0;
            v32->__r_.__value_.__r.__words[0] = 0;
            if (*(char *)(a1 + 215) < 0)
              operator delete(*(void **)(a1 + 192));
            v35 = v64[0];
            *(_QWORD *)(a1 + 192) = v33;
            *(_QWORD *)(a1 + 200) = v35;
            *(_QWORD *)(a1 + 207) = *(_QWORD *)((char *)v64 + 7);
            *(_BYTE *)(a1 + 215) = v34;
            if (v56 < 0)
            {
              operator delete(v55);
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_46:
                if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_47;
                goto LABEL_75;
              }
            }
            else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_46;
            }
            operator delete(__dst.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_47:
              if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_48;
              goto LABEL_76;
            }
LABEL_75:
            operator delete(v59.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_48:
              if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_49;
LABEL_77:
              operator delete(v57.__r_.__value_.__l.__data_);
LABEL_49:
              v36 = buf[23];
              if ((buf[23] & 0x80u) != 0)
                v36 = *(_QWORD *)&buf[8];
              if (v36 == 17)
              {
                v37 = buf;
                if ((buf[23] & 0x80u) != 0)
                  v37 = *(uint8_t **)buf;
                v38 = *(_QWORD *)v37;
                v39 = *((_QWORD *)v37 + 1);
                v40 = v37[16];
                if (v38 == *(_QWORD *)"kShutdownAllTrace"
                  && v39 == *(_QWORD *)"nAllTrace"
                  && v40 == str_71[16])
                {
                  v43 = *(NSObject **)(a1 + 40);
                  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
                  {
                    LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
                    _os_log_impl(&dword_1A343C000, v43, OS_LOG_TYPE_DEFAULT, "#I Snapshot requested as part of shutdown", (uint8_t *)&__dst, 2u);
                  }
                  *(_BYTE *)(a1 + 216) = 0;
                }
              }
              v44 = *a2;
              if (v44)
              {
                dispatch_retain(v44);
                dispatch_group_enter(v44);
              }
              v45 = *(NSObject **)(a1 + 224);
              *(_QWORD *)(a1 + 224) = v44;
              if (v45)
              {
                dispatch_group_leave(v45);
                dispatch_release(v45);
              }
              BuffContext_sync = KernelPCITrace::createBuffContext_sync((KernelPCITrace *)a1, 0x10000);
              v47 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, void (*)(_QWORD *, int, uint64_t), _QWORD *))(**(_QWORD **)(a1 + 248) + 64))(*(_QWORD *)(a1 + 248), *BuffContext_sync, *((unsigned int *)BuffContext_sync + 2), 1, flushLogsCompletionCB, BuffContext_sync);
              v48 = *(NSObject **)(a1 + 40);
              v49 = os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT);
              if (v47)
              {
                if (v49)
                {
                  LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
                  _os_log_impl(&dword_1A343C000, v48, OS_LOG_TYPE_DEFAULT, "#E Failed assigning additional buffer for snapshot", (uint8_t *)&__dst, 2u);
                }
                KernelPCITrace::deleteBuffContext_sync((_QWORD *)a1, (unint64_t)BuffContext_sync);
              }
              else if (v49)
              {
                LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
                _os_log_impl(&dword_1A343C000, v48, OS_LOG_TYPE_DEFAULT, "#I Assign additional buffer for snapshot", (uint8_t *)&__dst, 2u);
              }
              v50 = KernelPCITrace::createBuffContext_sync((KernelPCITrace *)a1, 0);
              v51 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, void (*)(_QWORD *, int, uint64_t), _QWORD *))(**(_QWORD **)(a1 + 248) + 64))(*(_QWORD *)(a1 + 248), *v50, *((unsigned int *)v50 + 2), 1, flushLogsCompletionCB, v50);
              v52 = *(NSObject **)(a1 + 40);
              v53 = os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT);
              if (v51)
              {
                if (v53)
                {
                  LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
                  _os_log_impl(&dword_1A343C000, v52, OS_LOG_TYPE_DEFAULT, "#E Failed assigning null-buffer to trigger snapshot", (uint8_t *)&__dst, 2u);
                }
                KernelPCITrace::deleteBuffContext_sync((_QWORD *)a1, (unint64_t)v50);
                v54 = *(NSObject **)(a1 + 224);
                *(_QWORD *)(a1 + 224) = 0;
                if (v54)
                {
                  dispatch_group_leave(v54);
                  dispatch_release(v54);
                }
              }
              else if (v53)
              {
                LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
                _os_log_impl(&dword_1A343C000, v52, OS_LOG_TYPE_DEFAULT, "#I Assign null-buffer to trigger snapshot", (uint8_t *)&__dst, 2u);
              }
              if (SHIBYTE(v61[2]) < 0)
              {
                operator delete(v61[0]);
                if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
                {
LABEL_89:
                  if (((char)buf[23] & 0x80000000) == 0)
                  {
LABEL_90:
                    MEMORY[0x1A858F2D8](v63);
                    return;
                  }
LABEL_94:
                  operator delete(*(void **)buf);
                  goto LABEL_90;
                }
              }
              else if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
              {
                goto LABEL_89;
              }
              operator delete(__p[0]);
              if (((char)buf[23] & 0x80000000) == 0)
                goto LABEL_90;
              goto LABEL_94;
            }
LABEL_76:
            operator delete(v58.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_49;
            goto LABEL_77;
          }
        }
        memmove(v19, v16, v18);
        goto LABEL_30;
      }
    }
    memmove(p_dst, v10, v12);
    goto LABEL_20;
  }
  *(_DWORD *)buf = 136315138;
  *(_QWORD *)&buf[4] = "snapshot_sync";
  _os_log_debug_impl(&dword_1A343C000, v6, OS_LOG_TYPE_DEBUG, "#D %s", buf, 0xCu);
  if (*(_QWORD *)(a1 + 248))
    goto LABEL_3;
}

void sub_1A346021C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  uint64_t v53;

  if (a47 < 0)
    operator delete(__p);
  if (a53 < 0)
    operator delete(a48);
  if (*(char *)(v53 - 89) < 0)
    operator delete(*(void **)(v53 - 112));
  MEMORY[0x1A858F2D8](v53 - 144);
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void ___ZN14KernelPCITrace21updateTraceState_syncEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  KernelPCITrace *v1;
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];
  uint8_t v10[16];
  uint8_t buf[16];

  v1 = *(KernelPCITrace **)(a1 + 32);
  KernelPCITrace::deregisterWithKernel_sync(v1);
  v2 = *((_QWORD *)v1 + 29);
  if (v2)
  {
    v3 = *((_QWORD *)v1 + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEFAULT, "#I Closing log writer", buf, 2u);
      v2 = *((_QWORD *)v1 + 29);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    v4 = *((_QWORD *)v1 + 5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_1A343C000, v4, OS_LOG_TYPE_DEFAULT, "#I Clearing log writer files", v10, 2u);
    }
    (*(void (**)(_QWORD))(**((_QWORD **)v1 + 29) + 64))(*((_QWORD *)v1 + 29));
    v5 = *((_QWORD *)v1 + 5);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1A343C000, v5, OS_LOG_TYPE_DEFAULT, "#I Releasing log writer object", v9, 2u);
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)v1 + 30);
    *((_QWORD *)v1 + 29) = 0;
    *((_QWORD *)v1 + 30) = 0;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;

  v3 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    v4 = *(NSObject **)(a1 + 40);
    if (v4)
      dispatch_group_enter(v4);
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 40);
    if (v3)
      dispatch_release(v3);
  }
}

void KernelPCITrace::flushLogsCompletion(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  NSObject *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  _QWORD *v13;
  unint64_t *p_shared_owners;
  NSObject *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  int v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v8 = a1[5];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v19 = 136315138;
    v20 = "flushLogsCompletion";
    _os_log_debug_impl(&dword_1A343C000, v8, OS_LOG_TYPE_DEBUG, "#D %s", (uint8_t *)&v19, 0xCu);
    v9 = (std::__shared_weak_count *)a1[10];
    if (!v9)
LABEL_12:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v9 = (std::__shared_weak_count *)a1[10];
    if (!v9)
      goto LABEL_12;
  }
  v10 = a1[9];
  v11 = std::__shared_weak_count::lock(v9);
  if (!v11)
    goto LABEL_12;
  v12 = v11;
  v13 = operator new(0x20uLL);
  *v13 = a1;
  v13[1] = a2;
  *((_DWORD *)v13 + 4) = a4;
  v13[3] = a3;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v15 = a1[11];
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  v17 = operator new(0x18uLL);
  *v17 = v13;
  v17[1] = v10;
  v17[2] = v12;
  dispatch_async_f(v15, v17, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<Trace>::execute_wrapped<KernelPCITrace::flushLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0>(KernelPCITrace::flushLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<KernelPCITrace::flushLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0,dispatch_queue_s *::default_delete<KernelPCITrace::flushLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_1A3460734(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void KernelPCITrace::readLogsCompletion(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  NSObject *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  _QWORD *v13;
  unint64_t *p_shared_owners;
  NSObject *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  int v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v8 = a1[5];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v19 = 136315138;
    v20 = "readLogsCompletion";
    _os_log_debug_impl(&dword_1A343C000, v8, OS_LOG_TYPE_DEBUG, "#D %s", (uint8_t *)&v19, 0xCu);
    v9 = (std::__shared_weak_count *)a1[10];
    if (!v9)
LABEL_12:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v9 = (std::__shared_weak_count *)a1[10];
    if (!v9)
      goto LABEL_12;
  }
  v10 = a1[9];
  v11 = std::__shared_weak_count::lock(v9);
  if (!v11)
    goto LABEL_12;
  v12 = v11;
  v13 = operator new(0x20uLL);
  *v13 = a1;
  v13[1] = a2;
  *((_DWORD *)v13 + 4) = a4;
  v13[3] = a3;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v15 = a1[11];
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  v17 = operator new(0x18uLL);
  *v17 = v13;
  v17[1] = v10;
  v17[2] = v12;
  dispatch_async_f(v15, v17, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<Trace>::execute_wrapped<KernelPCITrace::readLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0>(KernelPCITrace::readLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<KernelPCITrace::readLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0,dispatch_queue_s *::default_delete<KernelPCITrace::readLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_1A34608B0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void flushLogsCompletionCB(_QWORD *a1, int a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  const void *v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a1)
  {
    v4 = (std::__shared_weak_count *)a1[3];
    if (v4)
    {
      v7 = std::__shared_weak_count::lock(v4);
      if (v7)
      {
        v8 = v7;
        v9 = (const void *)a1[2];
        if (v9)
        {
          KernelPCITrace::flushLogsCompletion(v10, (uint64_t)a1, a3, a2);
        }
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  const void *v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a1)
  {
    v4 = (std::__shared_weak_count *)a1[3];
    if (v4)
    {
      v7 = std::__shared_weak_count::lock(v4);
      if (v7)
      {
        v8 = v7;
        v9 = (const void *)a1[2];
        if (v9)
        {
          KernelPCIABPTrace::flushLogsCompletion(v10, (uint64_t)a1, a3, a2);
        }
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_1A3460988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void readLogsCompletionCB(_QWORD *a1, int a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  const void *v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a1)
  {
    v4 = (std::__shared_weak_count *)a1[3];
    if (v4)
    {
      v7 = std::__shared_weak_count::lock(v4);
      if (v7)
      {
        v8 = v7;
        v9 = (const void *)a1[2];
        if (v9)
        {
          KernelPCITrace::readLogsCompletion(v10, (uint64_t)a1, a3, a2);
        }
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  const void *v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a1)
  {
    v4 = (std::__shared_weak_count *)a1[3];
    if (v4)
    {
      v7 = std::__shared_weak_count::lock(v4);
      if (v7)
      {
        v8 = v7;
        v9 = (const void *)a1[2];
        if (v9)
        {
          KernelPCIABPTrace::readLogsCompletion(v10, (uint64_t)a1, a3, a2);
        }
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_1A3460A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t KernelPCITrace::setProperty_sync(uint64_t a1, NSObject **a2, char *a3, char *a4)
{
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  _BOOL4 v14;
  _BOOL4 v15;
  _BOOL4 v16;
  NSObject *v17;
  int v18;
  uint64_t v19;
  std::string::size_type v20;
  std::string::size_type v21;
  std::string::size_type v22;
  int v23;
  NSObject *v24;
  std::string v25;
  void *v26[2];
  char v27;
  std::string v28;
  std::string __p;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"setProperty_sync";
    _os_log_debug_impl(&dword_1A343C000, v8, OS_LOG_TYPE_DEBUG, "#D %s", (uint8_t *)&__p, 0xCu);
  }
  if ((prop::ipc::set(a3, a4) & 1) != 0)
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
    strcpy((char *)&__p, "Enabled");
    if (a3[23] >= 0)
      v9 = a3;
    else
      v9 = *(const char **)a3;
    if (strcasecmp(v9, (const char *)&__p))
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&__p, "History");
      if (strcasecmp(v9, (const char *)&__p))
      {
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 11;
        strcpy((char *)&__p, "BufferCount");
        if (strcasecmp(v9, (const char *)&__p))
        {
          v10 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            if (a4[23] >= 0)
              v22 = (std::string::size_type)a4;
            else
              v22 = *(_QWORD *)a4;
            LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
            WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v22;
            _os_log_error_impl(&dword_1A343C000, v10, OS_LOG_TYPE_ERROR, "Unrecognized Set property request. Key=%s, Value=%s", (uint8_t *)&__p, 0x16u);
          }
          return 1;
        }
        memset(&v25, 0, sizeof(v25));
        v27 = 3;
        LOWORD(v26[0]) = *(_WORD *)"IPC";
        WORD1(v26[0]) = str_41[2];
        memset(&__p, 0, sizeof(__p));
        v16 = defaults::get((char *)v26, a3, &__p);
        if (v16)
        {
          prop::file::get<std::string>((const void **)v26, (uint64_t)a3, (uint64_t)&__p, &v28);
          v25 = v28;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((v27 & 0x80000000) == 0)
          {
LABEL_33:
            if (v16)
              goto LABEL_34;
            goto LABEL_63;
          }
        }
        else if ((v27 & 0x80000000) == 0)
        {
          goto LABEL_33;
        }
        operator delete(v26[0]);
        if (v16)
        {
LABEL_34:
          v11 = util::convert<unsigned int>(&v25, (_DWORD *)(a1 + 160), 0);
          if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            return v11;
LABEL_64:
          operator delete(v25.__r_.__value_.__l.__data_);
          return v11;
        }
LABEL_63:
        v11 = 0;
        if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return v11;
        goto LABEL_64;
      }
      v23 = -1431655766;
      memset(&v25, 0, sizeof(v25));
      v27 = 3;
      LOWORD(v26[0]) = *(_WORD *)"IPC";
      WORD1(v26[0]) = str_41[2];
      memset(&__p, 0, sizeof(__p));
      v15 = defaults::get((char *)v26, a3, &__p);
      if (v15)
      {
        prop::file::get<std::string>((const void **)v26, (uint64_t)a3, (uint64_t)&__p, &v28);
        v25 = v28;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((v27 & 0x80000000) == 0)
        {
LABEL_26:
          if (v15)
            goto LABEL_27;
          goto LABEL_48;
        }
      }
      else if ((v27 & 0x80000000) == 0)
      {
        goto LABEL_26;
      }
      operator delete(v26[0]);
      if (v15)
      {
LABEL_27:
        v11 = util::convert<int>(&v25, &v23, 0);
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_49;
        goto LABEL_50;
      }
LABEL_48:
      v11 = 0;
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
LABEL_49:
        operator delete(v25.__r_.__value_.__l.__data_);
LABEL_50:
      if ((_DWORD)v11)
      {
        v18 = v23;
        if (*(_DWORD *)(a1 + 152) != v23)
        {
          *(_DWORD *)(a1 + 152) = v23;
          v19 = *(_QWORD *)(a1 + 232);
          if (v19)
          {
            __p.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
            __p.__r_.__value_.__l.__size_ = 0x40000000;
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN21CircularFileLogWriter11setCapacityEm_block_invoke;
            v30 = &__block_descriptor_tmp_8_0;
            v31 = v19;
            v32 = (uint64_t)v18 << 20;
            ctu::SharedSynchronizable<CircularFileLogWriter>::execute_wrapped((uint64_t *)(v19 + 8), (uint64_t)&__p);
          }
        }
      }
      return v11;
    }
    LOBYTE(v23) = -86;
    memset(&v25, 0, sizeof(v25));
    v27 = 3;
    LOWORD(v26[0]) = *(_WORD *)"IPC";
    WORD1(v26[0]) = str_41[2];
    memset(&__p, 0, sizeof(__p));
    v14 = defaults::get((char *)v26, a3, &__p);
    if (v14)
    {
      prop::file::get<std::string>((const void **)v26, (uint64_t)a3, (uint64_t)&__p, &v28);
      v25 = v28;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_19:
        if (v14)
          goto LABEL_20;
        goto LABEL_38;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    operator delete(v26[0]);
    if (v14)
    {
LABEL_20:
      v11 = util::convert<BOOL>(&v25, (BOOL *)&v23, 0);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_39;
      goto LABEL_40;
    }
LABEL_38:
    v11 = 0;
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
LABEL_39:
      operator delete(v25.__r_.__value_.__l.__data_);
LABEL_40:
    if ((_DWORD)v11 && v23 != *(unsigned __int8 *)(a1 + 156))
    {
      *(_BYTE *)(a1 + 156) = v23;
      v17 = *a2;
      v24 = v17;
      if (v17)
      {
        dispatch_retain(v17);
        dispatch_group_enter(v17);
      }
      KernelPCITrace::updateTraceState_sync(a1, &v24);
      if (v17)
      {
        dispatch_group_leave(v17);
        dispatch_release(v17);
      }
    }
    return v11;
  }
  v12 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    if (a3[23] >= 0)
      v20 = (std::string::size_type)a3;
    else
      v20 = *(_QWORD *)a3;
    if (a4[23] >= 0)
      v21 = (std::string::size_type)a4;
    else
      v21 = *(_QWORD *)a4;
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v20;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v21;
    _os_log_error_impl(&dword_1A343C000, v12, OS_LOG_TYPE_ERROR, "Set property to file failed; key=%s value=%s",
      (uint8_t *)&__p,
      0x16u);
  }
  return 0;
}

void sub_1A346103C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t KernelPCITrace::getProperty_sync(uint64_t a1, char *a2, uint64_t a3)
{
  NSObject *v6;
  const char *v7;
  _BOOL8 v8;
  void **v9;
  size_t v10;
  void *v12;
  char v13;
  void *__p[2];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = "getProperty_sync";
    _os_log_debug_impl(&dword_1A343C000, v6, OS_LOG_TYPE_DEBUG, "#D %s", (uint8_t *)__p, 0xCu);
  }
  HIBYTE(v15) = 5;
  LODWORD(__p[0]) = *(_DWORD *)"State";
  WORD2(__p[0]) = str_22_0[4];
  if (a2[23] >= 0)
    v7 = a2;
  else
    v7 = *(const char **)a2;
  if (!strcasecmp(v7, (const char *)__p))
  {
    v13 = 0;
    LOBYTE(v12) = 0;
    KernelPCITrace::dumpState_sync(a1, (uint64_t)&v12, 0, 10, __p);
    if (__p != (void **)a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        if (v15 >= 0)
          v9 = __p;
        else
          v9 = (void **)__p[0];
        if (v15 >= 0)
          v10 = HIBYTE(v15);
        else
          v10 = (size_t)__p[1];
        std::string::__assign_no_alias<false>((void **)a3, v9, v10);
      }
      else if (v15 < 0)
      {
        std::string::__assign_no_alias<true>((_QWORD *)a3, __p[0], (size_t)__p[1]);
      }
      else
      {
        *(_OWORD *)a3 = *(_OWORD *)__p;
        *(_QWORD *)(a3 + 16) = v15;
      }
    }
    if (SHIBYTE(v15) < 0)
    {
      operator delete(__p[0]);
      if ((v13 & 0x80000000) == 0)
        return 1;
    }
    else if ((v13 & 0x80000000) == 0)
    {
      return 1;
    }
    operator delete(v12);
    return 1;
  }
  HIBYTE(v15) = 3;
  LOWORD(__p[0]) = *(_WORD *)"IPC";
  WORD1(__p[0]) = str_41[2];
  v8 = prop::get_from_file((char *)__p, a2, a3);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
  return v8;
}

void sub_1A34612C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t KernelPCITrace::dumpState_sync@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, _BYTE *a5@<X8>)
{
  unsigned __int8 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  std::ios_base *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  void **v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  uint64_t v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  void *__p[2];
  unsigned __int8 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  void *v50[2];
  __int128 v51;
  unint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[9];

  v10 = atomic_load((unsigned __int8 *)&_MergedGlobals_2);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_2))
  {
    std::string::basic_string[abi:ne180100]<0>(&qword_1ED114978, "\n----- KernelPCI Trace Dump State -----\n");
    __cxa_atexit(MEMORY[0x1E0DE44D0], &qword_1ED114978, &dword_1A343C000);
    __cxa_guard_release(&_MergedGlobals_2);
  }
  *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v52 = 0xAAAAAAAAAAAAAAAALL;
  v62 = v11;
  v61 = v11;
  v60 = v11;
  v59 = v11;
  v58 = v11;
  v57 = v11;
  v56 = v11;
  v55 = v11;
  v54 = v11;
  *(_OWORD *)v50 = v11;
  v51 = v11;
  v48 = v11;
  v49 = v11;
  v46 = v11;
  v47 = v11;
  v12 = MEMORY[0x1E0DE4FE0];
  v13 = MEMORY[0x1E0DE4FE0] + 64;
  v53 = MEMORY[0x1E0DE4FE0] + 64;
  v14 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v15 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v45 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v45 + *(_QWORD *)(v45 - 24)) = v15;
  v16 = (std::ios_base *)((char *)&v45 + *(_QWORD *)(v45 - 24));
  std::ios_base::init(v16, &v46);
  v16[1].__vftable = 0;
  v16[1].__fmtflags_ = -1;
  v45 = v12 + 24;
  v53 = v13;
  std::streambuf::basic_streambuf();
  v17 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v46 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v50 = 0u;
  v51 = 0u;
  LODWORD(v52) = 16;
  if (a3)
  {
    if (byte_1ED11498F >= 0)
      v18 = &qword_1ED114978;
    else
      v18 = (uint64_t *)qword_1ED114978;
    if (byte_1ED11498F >= 0)
      v19 = byte_1ED11498F;
    else
      v19 = unk_1ED114980;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)v18, v19);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"Enabled: ", 9);
  v20 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = a4;
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)__p, 1);
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"History: ", 9);
  KernelPCITrace::historyAsString(a1, (char *)__p);
  if ((v44 & 0x80u) == 0)
    v23 = __p;
  else
    v23 = (void **)__p[0];
  if ((v44 & 0x80u) == 0)
    v24 = v44;
  else
    v24 = (uint64_t)__p[1];
  v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
  v63[0] = a4;
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v63, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Buffer size: ", 13);
  v27 = (_QWORD *)std::ostream::operator<<();
  v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" bytes", 6);
  v63[0] = a4;
  v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v63, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Buffer count: ", 14);
  std::ostream::operator<<();
  if ((char)v44 < 0)
  {
    operator delete(__p[0]);
    v30 = *(char *)(a2 + 23);
    if ((v30 & 0x80000000) == 0)
    {
LABEL_18:
      if (!(_BYTE)v30)
        goto LABEL_29;
      goto LABEL_22;
    }
  }
  else
  {
    v30 = *(char *)(a2 + 23);
    if ((v30 & 0x80000000) == 0)
      goto LABEL_18;
  }
  if (!*(_QWORD *)(a2 + 8))
    goto LABEL_29;
LABEL_22:
  LOBYTE(__p[0]) = a4;
  v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)__p, 1);
  v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Reason: ", 8);
  v33 = *(char *)(a2 + 23);
  if (v33 >= 0)
    v34 = a2;
  else
    v34 = *(_QWORD *)a2;
  if (v33 >= 0)
    v35 = *(unsigned __int8 *)(a2 + 23);
  else
    v35 = *(_QWORD *)(a2 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
LABEL_29:
  if (a3)
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"\n--------------------------------------\n", 40);
  if ((v52 & 0x10) != 0)
  {
    v37 = *((_QWORD *)&v51 + 1);
    if (*((_QWORD *)&v51 + 1) < (unint64_t)v49)
    {
      *((_QWORD *)&v51 + 1) = v49;
      v37 = v49;
    }
    v38 = (const void *)*((_QWORD *)&v48 + 1);
    v36 = v37 - *((_QWORD *)&v48 + 1);
    if ((unint64_t)(v37 - *((_QWORD *)&v48 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_48;
  }
  else
  {
    if ((v52 & 8) == 0)
    {
      v36 = 0;
      a5[23] = 0;
      goto LABEL_44;
    }
    v38 = (const void *)v47;
    v36 = v48 - v47;
    if ((_QWORD)v48 - (_QWORD)v47 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_48:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v36 >= 0x17)
  {
    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v39 = v36 | 7;
    v40 = v39 + 1;
    v41 = operator new(v39 + 1);
    *((_QWORD *)a5 + 1) = v36;
    *((_QWORD *)a5 + 2) = v40 | 0x8000000000000000;
    *(_QWORD *)a5 = v41;
    a5 = v41;
    goto LABEL_43;
  }
  a5[23] = v36;
  if (v36)
LABEL_43:
    memmove(a5, v38, v36);
LABEL_44:
  a5[v36] = 0;
  v45 = *v14;
  *(uint64_t *)((char *)&v45 + *(_QWORD *)(v45 - 24)) = v14[3];
  *(_QWORD *)&v46 = v17 + 16;
  if (SBYTE7(v51) < 0)
    operator delete(v50[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A858F92C](&v53);
}

void sub_1A3461720(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&_MergedGlobals_2);
  _Unwind_Resume(a1);
}

void sub_1A3461738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::ostringstream::~ostringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t KernelPCITrace::historyAsString@<X0>(uint64_t this@<X0>, char *a2@<X8>)
{
  char *v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  void *__p[2];
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v2 = a2;
  if (!*(_DWORD *)(this + 152))
  {
    a2[23] = 8;
    strcpy(a2, "Infinite");
    return this;
  }
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v24 = 0xAAAAAAAAAAAAAAAALL;
  v26 = v3;
  v34 = v3;
  v33 = v3;
  v32 = v3;
  v31 = v3;
  v30 = v3;
  v29 = v3;
  v28 = v3;
  v27 = v3;
  *(_OWORD *)__p = v3;
  v23 = v3;
  v20 = v3;
  v21 = v3;
  v18 = v3;
  v19 = v3;
  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v25 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v17 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v17 + *(_QWORD *)(v17 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v17 + *(_QWORD *)(v17 - 24));
  std::ios_base::init(v8, &v18);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v17 = v4 + 24;
  v25 = v5;
  std::streambuf::basic_streambuf();
  v9 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v18 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v23 = 0u;
  LODWORD(v24) = 16;
  v10 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" MB", 3);
  if ((v24 & 0x10) != 0)
  {
    v12 = *((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1) < (unint64_t)v21)
    {
      *((_QWORD *)&v23 + 1) = v21;
      v12 = v21;
    }
    v13 = (const void *)*((_QWORD *)&v20 + 1);
    v11 = v12 - *((_QWORD *)&v20 + 1);
    if ((unint64_t)(v12 - *((_QWORD *)&v20 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_20;
  }
  else
  {
    if ((v24 & 8) == 0)
    {
      v11 = 0;
      v2[23] = 0;
      goto LABEL_16;
    }
    v13 = (const void *)v19;
    v11 = v20 - v19;
    if ((_QWORD)v20 - (_QWORD)v19 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_20:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v16 = (char *)operator new(v14 + 1);
    *((_QWORD *)v2 + 1) = v11;
    *((_QWORD *)v2 + 2) = v15 | 0x8000000000000000;
    *(_QWORD *)v2 = v16;
    v2 = v16;
  }
  else
  {
    v2[23] = v11;
    if (!v11)
      goto LABEL_16;
  }
  memmove(v2, v13, v11);
LABEL_16:
  v2[v11] = 0;
  v17 = *v6;
  *(uint64_t *)((char *)&v17 + *(_QWORD *)(v17 - 24)) = v6[3];
  *(_QWORD *)&v18 = v9 + 16;
  if (SBYTE7(v23) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A858F92C](&v25);
}

void sub_1A3461A10(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A858F92C](v1);
  _Unwind_Resume(a1);
}

void KernelPCITrace::start(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (v5 = a1[9], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[11];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<Trace>::execute_wrapped<KernelPCITrace::start(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>(KernelPCITrace::start(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<KernelPCITrace::start(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,dispatch_queue_s *::default_delete<KernelPCITrace::start(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void KernelPCITrace::shutdown(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (v5 = a1[9], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[11];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<Trace>::execute_wrapped<KernelPCITrace::shutdown(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>(KernelPCITrace::shutdown(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<KernelPCITrace::shutdown(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,dispatch_queue_s *::default_delete<KernelPCITrace::shutdown(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void KernelPCITrace::snapshot(_QWORD *a1, dispatch_object_t *a2, const void **a3)
{
  NSObject *v5;
  NSObject *v7;
  const void *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  _QWORD *v13;
  unint64_t *p_shared_owners;
  NSObject *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;

  v5 = *a2;
  if (!*a2)
  {
    v7 = 0;
    v8 = *a3;
    if (!*a3)
      goto LABEL_8;
LABEL_7:
    CFRetain(v8);
    goto LABEL_8;
  }
  dispatch_retain(*a2);
  dispatch_group_enter(v5);
  v7 = *a2;
  if (v7)
    dispatch_retain(v7);
  v8 = *a3;
  if (*a3)
    goto LABEL_7;
LABEL_8:
  v9 = (std::__shared_weak_count *)a1[10];
  if (!v9 || (v10 = a1[9], (v11 = std::__shared_weak_count::lock(v9)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v12 = v11;
  v13 = operator new(0x20uLL);
  *v13 = a1;
  v13[1] = v5;
  v13[2] = v7;
  v13[3] = v8;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v15 = a1[11];
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  v17 = operator new(0x18uLL);
  *v17 = v13;
  v17[1] = v10;
  v17[2] = v12;
  dispatch_async_f(v15, v17, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<Trace>::execute_wrapped<KernelPCITrace::snapshot(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>(KernelPCITrace::snapshot(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<KernelPCITrace::snapshot(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,dispatch_queue_s *::default_delete<KernelPCITrace::snapshot(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void KernelPCITrace::dumpState(NSObject *a1, NSObject **a2, uint64_t a3)
{
  NSObject *v5;
  std::__shared_weak_count *isa;
  Class v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  char *v10;
  std::string *v11;
  NSObject *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  dispatch_group_t group[2];
  std::string __p;

  v5 = *a2;
  group[0] = a1;
  group[1] = *a2;
  if (*a2)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  isa = (std::__shared_weak_count *)a1[10].isa;
  if (!isa || (v7 = a1[9].isa, (v8 = std::__shared_weak_count::lock(isa)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  v10 = (char *)operator new(0x28uLL);
  *(_OWORD *)v10 = *(_OWORD *)group;
  v11 = (std::string *)(v10 + 16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v11, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v10 + 4) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v12 = a1[11].isa;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v15 = operator new(0x18uLL);
  *v15 = v10;
  v15[1] = v7;
  v15[2] = v9;
  dispatch_async_f(v12, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<Trace>::execute_wrapped<KernelPCITrace::dumpState(dispatch::group,std::string)::$_0>(KernelPCITrace::dumpState(dispatch::group,std::string)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<KernelPCITrace::dumpState(dispatch::group,std::string)::$_0,std::default_delete<KernelPCITrace::dumpState(dispatch::group,std::string)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (v16)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_19;
}

void sub_1A3461F30(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group)
{
  uint64_t v10;
  NSObject *v12;
  NSObject *v13;

  v12 = *(NSObject **)(v10 + 8);
  if (v12)
  {
    dispatch_group_leave(v12);
    v13 = *(NSObject **)(v10 + 8);
    if (v13)
    {
      dispatch_release(v13);
      __clang_call_terminate(a1);
    }
  }
  __clang_call_terminate(a1);
}

BOOL KernelPCITrace::setProperty(uint64_t a1, NSObject **a2, uint64_t a3, uint64_t a4)
{
  char isSupported;
  char v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v14;
  dispatch_group_t group;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *__p;
  char v20;
  char v21;
  _QWORD block[6];

  v21 = 0;
  v20 = 3;
  LOWORD(__p) = *(_WORD *)"IPC";
  WORD1(__p) = str_41[2];
  isSupported = abm::trace::isSupported((uint64_t)&__p);
  v9 = isSupported;
  if ((v20 & 0x80000000) == 0)
  {
    if ((isSupported & 1) != 0)
      goto LABEL_3;
    return 0;
  }
  operator delete(__p);
  if ((v9 & 1) == 0)
    return 0;
LABEL_3:
  v10 = *a2;
  v14 = a1;
  group = v10;
  if (v10)
  {
    dispatch_retain(v10);
    dispatch_group_enter(v10);
  }
  v16 = a3;
  v17 = a4;
  v18 = &v21;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIZN14KernelPCITrace11setPropertyEN8dispatch5groupERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEESF_E3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSH__block_invoke;
  block[3] = &__block_descriptor_tmp_32;
  block[4] = a1 + 72;
  block[5] = &v14;
  v11 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(a1 + 96))
  {
    dispatch_async_and_wait(v11, block);
    v12 = group;
    if (!group)
      return v21 != 0;
LABEL_11:
    dispatch_group_leave(v12);
    if (group)
      dispatch_release(group);
    return v21 != 0;
  }
  dispatch_sync(v11, block);
  v12 = group;
  if (group)
    goto LABEL_11;
  return v21 != 0;
}

void sub_1A34620D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t KernelPCITrace::getProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD v6[4];
  unsigned __int8 v7;
  _QWORD block[6];

  v7 = 0;
  v6[0] = a1;
  v6[1] = a2;
  v6[2] = a3;
  v6[3] = &v7;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIZN14KernelPCITrace11getPropertyERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERSB_E3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSG__block_invoke;
  block[3] = &__block_descriptor_tmp_35;
  block[4] = a1 + 72;
  block[5] = v6;
  v4 = a1 + 88;
  v3 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(v4 + 8))
    dispatch_async_and_wait(v3, block);
  else
    dispatch_sync(v3, block);
  return v7;
}

uint64_t ctu::Loggable<Trace,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<Trace,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 104), *(_QWORD *)(a1 + 112));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 104);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 120);
  }
}

uint64_t ctu::Loggable<Trace,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

void KernelPCITrace::getSettingPrefix(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 8) = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)(a1 + 16) = 0xAAAAAAAAAAAAAAAALL;
  *(_BYTE *)(a1 + 23) = 11;
  strcpy((char *)a1, "KernelPCI::");
}

_QWORD *ctu::Loggable<Trace,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = &unk_1E4A07490;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<Trace,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = &unk_1E4A07490;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__tree<KernelPCITrace::BuffContext *>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<KernelPCITrace::BuffContext *>::destroy(*a1);
    std::__tree<KernelPCITrace::BuffContext *>::destroy(a1[1]);
    operator delete(a1);
  }
}

void ctu::Loggable<Trace,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1A3462394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1A34623B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<KernelPCITrace>::shared_ptr[abi:ne180100]<KernelPCITrace,std::shared_ptr<KernelPCITrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<KernelPCITrace>(KernelPCITrace*)::{lambda(KernelPCITrace*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A07250;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1A34624CC(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<KernelPCITrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<KernelPCITrace>(KernelPCITrace*)::{lambda(KernelPCITrace*)#1}::operator() const(KernelPCITrace*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1A34624EC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<KernelPCITrace *,std::shared_ptr<KernelPCITrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<KernelPCITrace>(KernelPCITrace*)::{lambda(KernelPCITrace *)#1},std::allocator<KernelPCITrace>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<KernelPCITrace *,std::shared_ptr<KernelPCITrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<KernelPCITrace>(KernelPCITrace*)::{lambda(KernelPCITrace *)#1},std::allocator<KernelPCITrace>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<KernelPCITrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<KernelPCITrace>(KernelPCITrace*)::{lambda(KernelPCITrace*)#1}::operator() const(KernelPCITrace*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<KernelPCITrace *,std::shared_ptr<KernelPCITrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<KernelPCITrace>(KernelPCITrace*)::{lambda(KernelPCITrace *)#1},std::allocator<KernelPCITrace>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI14KernelPCITraceEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI14KernelPCITraceEENSt3__110shared_"
                                "ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI14KernelPCITraceEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI14KernelPCITraceEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<KernelPCITrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<KernelPCITrace>(KernelPCITrace*)::{lambda(KernelPCITrace*)#1}::operator() const(KernelPCITrace*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIZN14KernelPCITrace4initENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS5_8weak_ptrIN3abm19BasebandTracingTaskEEEN8dispatch5groupEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSJ__block_invoke(uint64_t a1)
{
  KernelPCITrace *v1;
  NSObject *v2;

  v1 = **(KernelPCITrace ***)(a1 + 40);
  KernelPCITrace::initProperty_sync(v1);
  v2 = 0;
  KernelPCITrace::updateTraceState_sync((uint64_t)v1, &v2);
}

uint64_t util::convert<int>(const std::string *a1, _DWORD *a2, int a3)
{
  uint64_t v6;
  const char *v7;
  std::string::size_type size;
  size_t __idx;

  if ((SHIBYTE(a1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    LODWORD(v6) = strcasecmp((const char *)a1, "false");
    if (!(_DWORD)v6)
      goto LABEL_29;
    LODWORD(v6) = strcasecmp((const char *)a1, "off");
    if (!(_DWORD)v6)
      goto LABEL_29;
    LODWORD(v6) = strcasecmp((const char *)a1, "no");
    if (!(_DWORD)v6)
      goto LABEL_29;
    if (strcasecmp((const char *)a1, "true")
      && strcasecmp((const char *)a1, "on")
      && strcasecmp((const char *)a1, "yes")
      && strcasecmp((const char *)a1, "full")
      && strcasecmp((const char *)a1, "streaming"))
    {
      v7 = (const char *)a1;
      if (!strcasecmp((const char *)a1, "lite"))
        goto LABEL_30;
      goto LABEL_21;
    }
LABEL_28:
    LODWORD(v6) = 1;
    goto LABEL_29;
  }
  v7 = (const char *)a1->__r_.__value_.__r.__words[0];
  LODWORD(v6) = strcasecmp(a1->__r_.__value_.__l.__data_, "false");
  if (!(_DWORD)v6)
    goto LABEL_29;
  LODWORD(v6) = strcasecmp(v7, "off");
  if (!(_DWORD)v6)
    goto LABEL_29;
  LODWORD(v6) = strcasecmp(v7, "no");
  if (!(_DWORD)v6)
    goto LABEL_29;
  if (!strcasecmp(v7, "true")
    || !strcasecmp(v7, "on")
    || !strcasecmp(v7, "yes")
    || !strcasecmp(v7, "full")
    || !strcasecmp(v7, "streaming"))
  {
    goto LABEL_28;
  }
  if (!strcasecmp(v7, "lite"))
  {
LABEL_30:
    LODWORD(v6) = 2;
    goto LABEL_29;
  }
LABEL_21:
  if (!strcasecmp(v7, "background"))
    goto LABEL_30;
  __idx = 0xAAAAAAAAAAAAAAAALL;
  v6 = std::stol(a1, &__idx, a3);
  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  if (__idx != size || v6 < (uint64_t)0xFFFFFFFF80000000 || v6 > 0x7FFFFFFF)
    return 0;
LABEL_29:
  *a2 = v6;
  return 1;
}

uint64_t sub_1A3462830(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

uint64_t util::convert<unsigned int>(const std::string *a1, _DWORD *a2, int a3)
{
  unint64_t v6;
  const char *v7;
  std::string::size_type size;
  size_t __idx;

  if ((SHIBYTE(a1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    LODWORD(v6) = strcasecmp((const char *)a1, "false");
    if (!(_DWORD)v6)
      goto LABEL_29;
    LODWORD(v6) = strcasecmp((const char *)a1, "off");
    if (!(_DWORD)v6)
      goto LABEL_29;
    LODWORD(v6) = strcasecmp((const char *)a1, "no");
    if (!(_DWORD)v6)
      goto LABEL_29;
    if (strcasecmp((const char *)a1, "true")
      && strcasecmp((const char *)a1, "on")
      && strcasecmp((const char *)a1, "yes")
      && strcasecmp((const char *)a1, "full")
      && strcasecmp((const char *)a1, "streaming"))
    {
      v7 = (const char *)a1;
      if (!strcasecmp((const char *)a1, "lite"))
        goto LABEL_30;
      goto LABEL_21;
    }
LABEL_28:
    LODWORD(v6) = 1;
    goto LABEL_29;
  }
  v7 = (const char *)a1->__r_.__value_.__r.__words[0];
  LODWORD(v6) = strcasecmp(a1->__r_.__value_.__l.__data_, "false");
  if (!(_DWORD)v6)
    goto LABEL_29;
  LODWORD(v6) = strcasecmp(v7, "off");
  if (!(_DWORD)v6)
    goto LABEL_29;
  LODWORD(v6) = strcasecmp(v7, "no");
  if (!(_DWORD)v6)
    goto LABEL_29;
  if (!strcasecmp(v7, "true")
    || !strcasecmp(v7, "on")
    || !strcasecmp(v7, "yes")
    || !strcasecmp(v7, "full")
    || !strcasecmp(v7, "streaming"))
  {
    goto LABEL_28;
  }
  if (!strcasecmp(v7, "lite"))
  {
LABEL_30:
    LODWORD(v6) = 2;
    goto LABEL_29;
  }
LABEL_21:
  if (!strcasecmp(v7, "background"))
    goto LABEL_30;
  __idx = 0xAAAAAAAAAAAAAAAALL;
  v6 = std::stol(a1, &__idx, a3);
  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  if (__idx != size || (v6 & 0x8000000000000000) != 0 || HIDWORD(v6))
    return 0;
LABEL_29:
  *a2 = v6;
  return 1;
}

uint64_t sub_1A3462A84(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 == result)
    return result;
  while (1)
  {
    v2 = a2[2];
    if (*(_BYTE *)(v2 + 24))
      return result;
    v3 = *(uint64_t **)(v2 + 16);
    v4 = *v3;
    if (*v3 != v2)
      break;
    v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(_BYTE *)(v2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
          goto LABEL_15;
      }
      else
      {
        v9 = *(uint64_t **)(v2 + 8);
        v10 = *v9;
        *(_QWORD *)(v2 + 8) = *v9;
        if (v10)
        {
          *(_QWORD *)(v10 + 16) = v2;
          v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
        *v9 = v2;
        *(_QWORD *)(v2 + 16) = v9;
        v3 = (uint64_t *)v9[2];
        v2 = *v3;
        *((_BYTE *)v9 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
LABEL_15:
          *(_QWORD *)(v11 + 16) = v3;
      }
      *(_QWORD *)(v2 + 16) = v3[2];
      *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
      *(_QWORD *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(_BYTE *)(v2 + 24) = 1;
    a2 = v3;
    *((_BYTE *)v3 + 24) = v3 == result;
    *v5 = 1;
    if (v3 == result)
      return result;
  }
  if (v4)
  {
    v6 = *(unsigned __int8 *)(v4 + 24);
    v5 = (_BYTE *)(v4 + 24);
    if (!v6)
      goto LABEL_3;
  }
  if (*(uint64_t **)v2 == a2)
  {
    v12 = a2[1];
    *(_QWORD *)v2 = v12;
    if (v12)
    {
      *(_QWORD *)(v12 + 16) = v2;
      v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(_QWORD *)(v2 + 16) = a2;
    v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((_BYTE *)a2 + 24) = 1;
  *((_BYTE *)v3 + 24) = 0;
  v13 = (uint64_t *)v3[1];
  v14 = *v13;
  v3[1] = *v13;
  if (v14)
    *(_QWORD *)(v14 + 16) = v3;
  v13[2] = v3[2];
  *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v13;
  *v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_10;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (!v2)
  {
    v5 = 1;
    v6 = (uint64_t **)v3[2];
    v7 = *v6;
    if (*v6 == v3)
      goto LABEL_6;
LABEL_11:
    v6[1] = (uint64_t *)v2;
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
    goto LABEL_12;
  }
LABEL_10:
  v5 = 0;
  *(_QWORD *)(v2 + 16) = v3[2];
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 != v3)
    goto LABEL_11;
LABEL_6:
  *v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    v7 = v6[1];
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
LABEL_12:
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
    goto LABEL_16;
  }
  v7 = 0;
  result = (uint64_t *)v2;
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
    goto LABEL_12;
LABEL_16:
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v14 = (uint64_t **)v7[2];
    if (*v14 != v7)
      break;
    if (*((_BYTE *)v7 + 24))
    {
      v16 = (_QWORD *)*v7;
      if (*v7)
        goto LABEL_48;
    }
    else
    {
      *((_BYTE *)v7 + 24) = 1;
      *((_BYTE *)v14 + 24) = 0;
      v20 = (uint64_t *)v7[1];
      *v14 = v20;
      if (v20)
        v20[2] = (uint64_t)v14;
      v7[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v7;
      v7[1] = (uint64_t)v14;
      v14[2] = v7;
      if (result == (uint64_t *)v14)
        result = v7;
      v7 = *v14;
      v16 = (_QWORD *)**v14;
      if (v16)
      {
LABEL_48:
        if (!*((_BYTE *)v16 + 24))
          goto LABEL_71;
      }
    }
    v21 = (uint64_t *)v7[1];
    if (v21 && !*((_BYTE *)v21 + 24))
    {
      if (v16 && !*((_BYTE *)v16 + 24))
      {
LABEL_71:
        v21 = v7;
      }
      else
      {
        *((_BYTE *)v21 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = *v21;
        v7[1] = *v21;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v21[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v21;
        *v21 = (uint64_t)v7;
        v7[2] = (uint64_t)v21;
        v16 = v7;
      }
      v27 = (uint64_t *)v21[2];
      *((_BYTE *)v21 + 24) = *((_BYTE *)v27 + 24);
      *((_BYTE *)v27 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v28 = *v27;
      v29 = *(_QWORD *)(*v27 + 8);
      *v27 = v29;
      if (v29)
        *(_QWORD *)(v29 + 16) = v27;
      *(_QWORD *)(v28 + 16) = v27[2];
      *(_QWORD *)(v27[2] + 8 * (*(_QWORD *)v27[2] != (_QWORD)v27)) = v28;
      *(_QWORD *)(v28 + 8) = v27;
      v27[2] = v28;
      return result;
    }
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (*((_BYTE *)v12 + 24))
      v13 = v12 == result;
    else
      v13 = 1;
    if (v13)
      goto LABEL_61;
LABEL_24:
    v7 = *(uint64_t **)(v12[2] + 8 * (*(_QWORD *)v12[2] == (_QWORD)v12));
  }
  if (*((_BYTE *)v7 + 24))
  {
    v15 = (_QWORD *)*v7;
    if (!*v7)
    {
LABEL_38:
      v19 = (uint64_t *)v7[1];
      if (v19 && !*((_BYTE *)v19 + 24))
        goto LABEL_67;
      *((_BYTE *)v7 + 24) = 0;
      v12 = (uint64_t *)v7[2];
      if (v12 == result)
      {
        v12 = result;
LABEL_61:
        *((_BYTE *)v12 + 24) = 1;
        return result;
      }
      if (!*((_BYTE *)v12 + 24))
        goto LABEL_61;
      goto LABEL_24;
    }
  }
  else
  {
    *((_BYTE *)v7 + 24) = 1;
    *((_BYTE *)v14 + 24) = 0;
    v17 = v14[1];
    v18 = (uint64_t *)*v17;
    v14[1] = (uint64_t *)*v17;
    if (v18)
      v18[2] = (uint64_t)v14;
    v17[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v17;
    *v17 = (uint64_t)v14;
    v14[2] = v17;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
    v15 = (_QWORD *)*v7;
    if (!*v7)
      goto LABEL_38;
  }
  if (*((_BYTE *)v15 + 24))
    goto LABEL_38;
  v19 = (uint64_t *)v7[1];
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_67:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v23 = v15[1];
    *v7 = v23;
    if (v23)
      *(_QWORD *)(v23 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v19 = v7;
  }
  v24 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v24 + 24);
  *(_BYTE *)(v24 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v25 = *(uint64_t **)(v24 + 8);
  v26 = *v25;
  *(_QWORD *)(v24 + 8) = *v25;
  if (v26)
    *(_QWORD *)(v26 + 16) = v24;
  v25[2] = *(_QWORD *)(v24 + 16);
  *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8 * (**(_QWORD **)(v24 + 16) != v24)) = v25;
  *v25 = v24;
  *(_QWORD *)(v24 + 16) = v25;
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<Trace>::execute_wrapped<KernelPCITrace::flushLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0>(KernelPCITrace::flushLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<KernelPCITrace::flushLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0,dispatch_queue_s *::default_delete<KernelPCITrace::flushLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  unint64_t *v5;
  int v6;
  NSObject *v7;
  _BOOL4 v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  char *v13;
  timespec v14;
  DIR *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  DIR *v19;
  dirent *v20;
  NSObject *v21;
  char *v22;
  std::error_code *v23;
  void *v24;
  const std::__fs::filesystem::path *p_buf;
  int v26;
  int v27;
  NSObject *v28;
  _BOOL4 v29;
  stat *v30;
  const char *v31;
  stat *v32;
  uint64_t v33;
  NSObject *v34;
  NSObject *v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  _OWORD v39[4];
  std::string v40;
  _BYTE *v41;
  stat buf;
  _BYTE v43[24];
  void *v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  v4 = *(NSObject **)(v3 + 144);
  if (v4)
  {
    dispatch_retain(*(dispatch_object_t *)(v3 + 144));
    dispatch_group_enter(v4);
  }
  if (*(_BYTE *)(v3 + 156))
  {
    v5 = (unint64_t *)(v2 + 1);
    if (*(_QWORD *)v2[1])
    {
      v6 = *((_DWORD *)v2 + 4);
      v7 = *(NSObject **)(v3 + 40);
      v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      if (v6)
      {
        if (v8)
        {
          buf.st_dev = 67109120;
          *(_DWORD *)&buf.st_mode = v6;
          _os_log_impl(&dword_1A343C000, v7, OS_LOG_TYPE_DEFAULT, "#E Flush logs completion returned error. Error [0x%x]", (uint8_t *)&buf, 8u);
        }
      }
      else
      {
        if (v8)
        {
          v16 = v2[3];
          buf.st_dev = 134217984;
          *(_QWORD *)&buf.st_mode = v16;
          _os_log_impl(&dword_1A343C000, v7, OS_LOG_TYPE_DEFAULT, "#I Flush logs completion of size '%ld' bytes", (uint8_t *)&buf, 0xCu);
        }
        v17 = *(_QWORD *)(v3 + 232);
        if (v17)
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v17 + 72))(v17, *(_QWORD *)v2[1], v2[3]);
      }
      goto LABEL_62;
    }
    v11 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.st_dev) = 0;
      _os_log_impl(&dword_1A343C000, v11, OS_LOG_TYPE_DEFAULT, "#I Snapshot received (flush completion with null-log)", (uint8_t *)&buf, 2u);
    }
    v12 = *(_QWORD *)(v3 + 232);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    if (!*(_BYTE *)(v3 + 216))
      goto LABEL_59;
    v13 = (char *)operator new(0x40uLL);
    *(_QWORD *)v43 = v13;
    *(_OWORD *)&v43[8] = xmmword_1A357F490;
    strcpy(v13, "/var/wireless/Library/Logs/AppleBasebandManager/pci.scratch/");
    qmemcpy(v39, "ger/pci.scratch/BasebandManager/brary/Logs/Apple/var/wireless/Li", sizeof(v39));
    v14.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v14.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&buf.st_blksize = v14;
    *(timespec *)buf.st_qspare = v14;
    buf.st_birthtimespec = v14;
    *(timespec *)&buf.st_size = v14;
    buf.st_mtimespec = v14;
    buf.st_ctimespec = v14;
    *(timespec *)&buf.st_uid = v14;
    buf.st_atimespec = v14;
    *(timespec *)&buf.st_dev = v14;
    if (stat(v13, &buf))
    {
      LODWORD(v15) = 0;
    }
    else
    {
      if (v43[23] >= 0)
        v18 = v43;
      else
        v18 = *(const char **)v43;
      v19 = opendir(v18);
      v15 = v19;
      if (v19)
      {
        v20 = readdir(v19);
        closedir(v15);
        LODWORD(v15) = v20 != 0;
      }
    }
    if ((v43[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v43);
      if ((_DWORD)v15)
      {
LABEL_31:
        support::fs::getBasePath((const std::string::value_type **)(v3 + 192), (uint64_t)&buf);
        support::fs::createDir((const char *)&buf, 0x1EDu, 1);
        if (SHIBYTE(buf.st_gid) < 0)
          operator delete(*(void **)&buf.st_dev);
        memset(&buf, 170, 24);
        if (*(char *)(v3 + 215) < 0)
          std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)(v3 + 192), *(_QWORD *)(v3 + 200));
        else
          v40 = *(std::string *)(v3 + 192);
        support::fs::createUniquePath((const char *)&v40, (std::string *)&buf);
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v40.__r_.__value_.__l.__data_);
        v22 = (char *)operator new(0x40uLL);
        v24 = v22;
        *(_OWORD *)v22 = v39[3];
        *((_OWORD *)v22 + 1) = v39[2];
        *((_OWORD *)v22 + 2) = v39[1];
        *(_OWORD *)(v22 + 44) = v39[0];
        v22[60] = 0;
        if ((buf.st_gid & 0x80000000) == 0)
          p_buf = (const std::__fs::filesystem::path *)&buf;
        else
          p_buf = *(const std::__fs::filesystem::path **)&buf.st_dev;
        rename((const std::__fs::filesystem::path *)v22, p_buf, v23);
        v27 = v26;
        operator delete(v24);
        v28 = *(NSObject **)(v3 + 40);
        v29 = os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
        if (v27)
        {
          if (!v29)
            goto LABEL_54;
          v30 = &buf;
          if ((buf.st_gid & 0x80000000) != 0)
            v30 = *(stat **)&buf.st_dev;
          *(_DWORD *)v43 = 136315138;
          *(_QWORD *)&v43[4] = v30;
          v31 = "#E Failed to move scratch logs to snapshot path [%s]";
        }
        else
        {
          if (!v29)
            goto LABEL_54;
          v32 = &buf;
          if ((buf.st_gid & 0x80000000) != 0)
            v32 = *(stat **)&buf.st_dev;
          *(_DWORD *)v43 = 136315138;
          *(_QWORD *)&v43[4] = v32;
          v31 = "#I Snapshot files are in path [%s]";
        }
        _os_log_impl(&dword_1A343C000, v28, OS_LOG_TYPE_DEFAULT, v31, v43, 0xCu);
LABEL_54:
        if (SHIBYTE(buf.st_gid) < 0)
          operator delete(*(void **)&buf.st_dev);
        goto LABEL_56;
      }
    }
    else if ((_DWORD)v15)
    {
      goto LABEL_31;
    }
    v21 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      buf.st_dev = 136315138;
      *(_QWORD *)&buf.st_mode = "/var/wireless/Library/Logs/AppleBasebandManager/pci.scratch/";
      _os_log_impl(&dword_1A343C000, v21, OS_LOG_TYPE_DEFAULT, "#E Couldn't find scratch path [%s]", (uint8_t *)&buf, 0xCu);
    }
LABEL_56:
    v33 = *(_QWORD *)(v3 + 232);
    if (v33)
    {
      *(_QWORD *)v43 = MEMORY[0x1E0C809B0];
      *(_QWORD *)&v43[8] = 0x40000000;
      *(_QWORD *)&v43[16] = ___ZN21CircularFileLogWriter4openEv_block_invoke;
      v44 = &__block_descriptor_tmp_0;
      v45 = v33;
      v41 = v43;
      *(_QWORD *)&buf.st_dev = MEMORY[0x1E0C809B0];
      buf.st_ino = 0x40000000;
      *(_QWORD *)&buf.st_uid = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
      *(_QWORD *)&buf.st_rdev = &__block_descriptor_tmp_16_0;
      buf.st_atimespec.tv_sec = v33 + 8;
      buf.st_atimespec.tv_nsec = (uint64_t)&v41;
      v34 = *(NSObject **)(v33 + 24);
      if (!*(_QWORD *)(v33 + 32))
      {
        dispatch_sync(v34, &buf);
        if ((*(char *)(v3 + 215) & 0x80000000) == 0)
        {
LABEL_60:
          *(_BYTE *)(v3 + 192) = 0;
          *(_BYTE *)(v3 + 215) = 0;
          v35 = *(NSObject **)(v3 + 224);
          *(_QWORD *)(v3 + 224) = 0;
          if (!v35)
            goto LABEL_62;
          goto LABEL_61;
        }
LABEL_71:
        **(_BYTE **)(v3 + 192) = 0;
        *(_QWORD *)(v3 + 200) = 0;
        v35 = *(NSObject **)(v3 + 224);
        *(_QWORD *)(v3 + 224) = 0;
        if (!v35)
          goto LABEL_62;
LABEL_61:
        dispatch_group_leave(v35);
        dispatch_release(v35);
        goto LABEL_62;
      }
      dispatch_async_and_wait(v34, &buf);
    }
LABEL_59:
    if ((*(char *)(v3 + 215) & 0x80000000) == 0)
      goto LABEL_60;
    goto LABEL_71;
  }
  v9 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.st_dev) = 0;
    _os_log_impl(&dword_1A343C000, v9, OS_LOG_TYPE_DEFAULT, "#I Flush logs completion for Disabled case", (uint8_t *)&buf, 2u);
  }
  v10 = *(NSObject **)(v3 + 224);
  *(_QWORD *)(v3 + 224) = 0;
  if (v10)
  {
    dispatch_group_leave(v10);
    dispatch_release(v10);
  }
  v5 = (unint64_t *)(v2 + 1);
LABEL_62:
  KernelPCITrace::deleteBuffContext_sync((_QWORD *)v3, *v5);
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
  operator delete(v2);
  v36 = (std::__shared_weak_count *)a1[2];
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  operator delete(a1);
}

void sub_1A34635F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  _QWORD *v29;
  void *v30;
  NSObject *v31;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;

  if (v31)
  {
    dispatch_group_leave(v31);
    dispatch_release(v31);
  }
  operator delete(v30);
  v33 = (std::__shared_weak_count *)v29[2];
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  operator delete(v29);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<Trace>::execute_wrapped<KernelPCITrace::readLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0>(KernelPCITrace::readLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<KernelPCITrace::readLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0,dispatch_queue_s *::default_delete<KernelPCITrace::readLogsCompletion(KernelPCITrace::BuffContext *,unsigned long,int)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  NSObject *v6;
  unint64_t v7;
  int v8;
  NSObject *v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  v4 = *(NSObject **)(v3 + 144);
  if (v4)
  {
    dispatch_retain(*(dispatch_object_t *)(v3 + 144));
    dispatch_group_enter(v4);
  }
  if (!*(_BYTE *)(v3 + 156))
  {
    v13 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v21) = 0;
      _os_log_impl(&dword_1A343C000, v13, OS_LOG_TYPE_DEFAULT, "#I Read log completion for Disabled case", (uint8_t *)&v21, 2u);
    }
    v12 = v2[1];
    v11 = (_QWORD *)v3;
    goto LABEL_15;
  }
  v5 = *((_DWORD *)v2 + 4);
  if (v5 || !*(_QWORD *)v2[1])
  {
    v6 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v21 = 67109120;
      LODWORD(v22) = v5;
      _os_log_error_impl(&dword_1A343C000, v6, OS_LOG_TYPE_ERROR, "Read logs completion has some failure. Error [0x%x]", (uint8_t *)&v21, 8u);
    }
  }
  else
  {
    v17 = *(NSObject **)(v3 + 40);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      v18 = *(_QWORD *)(v3 + 232);
      if (!v18)
        goto LABEL_7;
      goto LABEL_27;
    }
    v20 = v2[3];
    v21 = 134217984;
    v22 = v20;
    _os_log_debug_impl(&dword_1A343C000, v17, OS_LOG_TYPE_DEBUG, "#D Read logs completion of size '%ld' bytes", (uint8_t *)&v21, 0xCu);
    v18 = *(_QWORD *)(v3 + 232);
    if (v18)
LABEL_27:
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v18 + 72))(v18, *(_QWORD *)v2[1], v2[3]);
  }
LABEL_7:
  v7 = v2[1];
  if (!*(_BYTE *)(v3 + 216))
  {
LABEL_11:
    v11 = (_QWORD *)v3;
    v12 = v7;
LABEL_15:
    KernelPCITrace::deleteBuffContext_sync(v11, v12);
    goto LABEL_16;
  }
  v8 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t (*)(void *, int, void *), uint64_t))(**(_QWORD **)(v3 + 248) + 64))(*(_QWORD *)(v3 + 248), *(_QWORD *)v7, *(unsigned int *)(v7 + 8), 0, readLogsCompletionCB, v2[1]);
  v9 = *(NSObject **)(v3 + 40);
  if (v8)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(_QWORD *)(v7 + 8) >> 10;
      v21 = 134218240;
      v22 = v10;
      v23 = 1024;
      v24 = v8;
      _os_log_impl(&dword_1A343C000, v9, OS_LOG_TYPE_DEFAULT, "#E Failed re-assigning new buffer of size '%ld KB' to fetch logs. Error [0x%x]", (uint8_t *)&v21, 0x12u);
    }
    goto LABEL_11;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    v19 = *(_QWORD *)(v7 + 8) >> 10;
    v21 = 134217984;
    v22 = v19;
    _os_log_debug_impl(&dword_1A343C000, v9, OS_LOG_TYPE_DEBUG, "#D Assign new buffer of size '%ld KB' to fetch logs", (uint8_t *)&v21, 0xCu);
  }
LABEL_16:
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
  operator delete(v2);
  v14 = (std::__shared_weak_count *)a1[2];
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  operator delete(a1);
}

void sub_1A34639C0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  NSObject *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
  operator delete(v2);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<pci::transport::kernelControl  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<pci::transport::kernelControl  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<pci::transport::kernelControl  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001A357F62CLL)
    return a1 + 24;
  if (((v3 & 0x80000001A357F62CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001A357F62CLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001A357F62CLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void dispatch::async<void ctu::SharedSynchronizable<Trace>::execute_wrapped<KernelPCITrace::start(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>(KernelPCITrace::start(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<KernelPCITrace::start(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,dispatch_queue_s *::default_delete<KernelPCITrace::start(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t *v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v10;

  v2 = *(uint64_t **)a1;
  v4 = **(_QWORD **)a1;
  v3 = *(NSObject **)(*(_QWORD *)a1 + 8);
  v10 = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v3);
  }
  KernelPCITrace::updateTraceState_sync(v4, &v10);
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
  v5 = v2[1];
  if (v5)
  {
    dispatch_group_leave(v5);
    v6 = v2[1];
    if (v6)
      dispatch_release(v6);
  }
  operator delete(v2);
  v7 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (!v7)
    goto LABEL_12;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    operator delete(a1);
  }
  else
  {
LABEL_12:
    operator delete(a1);
  }
}

void sub_1A3463BBC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = v3;
  if (v4)
  {
    v6 = v4;
    dispatch_group_leave(v4);
    dispatch_release(v6);
  }
  v7 = v2[1];
  if (v7)
  {
    dispatch_group_leave(v7);
    v8 = v2[1];
    if (v8)
      dispatch_release(v8);
  }
  operator delete(v2);
  v9 = (std::__shared_weak_count *)v1[2];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<Trace>::execute_wrapped<KernelPCITrace::shutdown(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>(KernelPCITrace::shutdown(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<KernelPCITrace::shutdown(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,dispatch_queue_s *::default_delete<KernelPCITrace::shutdown(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *a1;
  v3 = **a1;
  v4 = *(NSObject **)(v3 + 144);
  if (v4)
  {
    dispatch_retain(*(dispatch_object_t *)(v3 + 144));
    dispatch_group_enter(v4);
  }
  if (*(_BYTE *)(v3 + 156))
    KernelPCITrace::deregisterWithKernel_sync((KernelPCITrace *)v3);
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
  v5 = v2[1];
  if (v5)
  {
    dispatch_group_leave(v5);
    v6 = v2[1];
    if (v6)
      dispatch_release(v6);
  }
  operator delete(v2);
  v7 = (std::__shared_weak_count *)a1[2];
  if (!v7)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    operator delete(a1);
  }
  else
  {
LABEL_14:
    operator delete(a1);
  }
}

void sub_1A3463D1C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = v3;
  if (v4)
  {
    v6 = v4;
    dispatch_group_leave(v4);
    dispatch_release(v6);
  }
  v7 = v2[1];
  if (v7)
  {
    dispatch_group_leave(v7);
    v8 = v2[1];
    if (v8)
      dispatch_release(v8);
  }
  operator delete(v2);
  v9 = (std::__shared_weak_count *)v1[2];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<Trace>::execute_wrapped<KernelPCITrace::snapshot(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>(KernelPCITrace::snapshot(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<KernelPCITrace::snapshot(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,dispatch_queue_s *::default_delete<KernelPCITrace::snapshot(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  void *v5;
  int v6;
  void **v7;
  void *v8;
  void *v9;
  uint64_t v10;
  BOOL v11;
  NSObject *v13;
  void **v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  NSObject *v18;
  int v19;
  NSObject *v20;
  const __CFDictionary *v21;
  _QWORD *v22;
  void *v23[3];
  _QWORD v24[2];
  const __CFDictionary *v25;
  char __p[23];
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v22 = (_QWORD *)v2;
  v3 = *(_QWORD *)v2;
  v4 = *(NSObject **)(*(_QWORD *)v2 + 144);
  if (v4)
  {
    dispatch_retain(*(dispatch_object_t *)(*(_QWORD *)v2 + 144));
    dispatch_group_enter(v4);
  }
  v24[0] = 0xAAAAAAAAAAAAAAAALL;
  v24[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v24, *(const __CFDictionary **)(v2 + 24));
  memset(v23, 170, sizeof(v23));
  strcpy(__p, "kTraceFilterActionNone");
  v27 = 22;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v25, "kKeyTraceFilterAction");
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A858F29C](&v25);
  if (v27 < 0)
    operator delete(*(void **)__p);
  v5 = (void *)HIBYTE(v23[2]);
  v6 = SHIBYTE(v23[2]);
  if (SHIBYTE(v23[2]) < 0)
    v5 = v23[1];
  if (v5 != (void *)22)
    goto LABEL_17;
  v7 = (void **)v23[0];
  if (SHIBYTE(v23[2]) >= 0)
    v7 = v23;
  v8 = *v7;
  v9 = v7[1];
  v10 = *(uint64_t *)((char *)v7 + 14);
  v11 = v8 == *(void **)"kTraceFilterActionNone" && v9 == *(void **)"lterActionNone";
  if (v11 && v10 == *(_QWORD *)"tionNone")
  {
    v18 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *(unsigned __int8 *)(v3 + 156);
      *(_DWORD *)__p = 67109120;
      *(_DWORD *)&__p[4] = v19;
      _os_log_impl(&dword_1A343C000, v18, OS_LOG_TYPE_DEFAULT, "#I Snapshot requested. Enabled = %d", (uint8_t *)__p, 8u);
    }
    if (*(_BYTE *)(v3 + 156))
    {
      v20 = *(NSObject **)(v2 + 8);
      *(_QWORD *)__p = v20;
      if (v20)
      {
        dispatch_retain(v20);
        dispatch_group_enter(v20);
      }
      v21 = *(const __CFDictionary **)(v2 + 24);
      v25 = v21;
      if (v21)
        CFRetain(v21);
      KernelPCITrace::snapshot_sync(v3, (NSObject **)__p, &v25);
      if (v21)
        CFRelease(v21);
      if (v20)
      {
        dispatch_group_leave(v20);
        dispatch_release(v20);
      }
    }
  }
  else
  {
LABEL_17:
    v13 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = (void **)v23[0];
      if (v6 >= 0)
        v14 = v23;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v14;
      _os_log_impl(&dword_1A343C000, v13, OS_LOG_TYPE_DEFAULT, "#I Skipping snapshot as trace filter is '%s'", (uint8_t *)__p, 0xCu);
    }
  }
  if (SHIBYTE(v23[2]) < 0)
    operator delete(v23[0]);
  MEMORY[0x1A858F2D8](v24);
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
  std::unique_ptr<KernelPCITrace::snapshot(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,std::default_delete<KernelPCITrace::snapshot(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>::~unique_ptr[abi:ne180100](&v22);
  v15 = (std::__shared_weak_count *)a1[2];
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(a1);
}

void sub_1A3464078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1A3464154()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x1A3464104);
  JUMPOUT(0x1A34640F4);
}

_QWORD **std::unique_ptr<KernelPCITrace::snapshot(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,std::default_delete<KernelPCITrace::snapshot(dispatch::group,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>::~unique_ptr[abi:ne180100](_QWORD **a1)
{
  _QWORD *v2;
  const void *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (const void *)v2[3];
    if (v3)
      CFRelease(v3);
    v4 = v2[2];
    if (v4)
      dispatch_release(v4);
    v5 = v2[1];
    if (v5)
    {
      dispatch_group_leave(v5);
      v6 = v2[1];
      if (v6)
        dispatch_release(v6);
    }
    operator delete(v2);
  }
  return a1;
}

void dispatch::async<void ctu::SharedSynchronizable<Trace>::execute_wrapped<KernelPCITrace::dumpState(dispatch::group,std::string)::$_0>(KernelPCITrace::dumpState(dispatch::group,std::string)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<KernelPCITrace::dumpState(dispatch::group,std::string)::$_0,std::default_delete<KernelPCITrace::dumpState(dispatch::group,std::string)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  void **v6;
  NSObject *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::string v12;
  void *__p[2];
  char v14;
  uint8_t buf[4];
  void **v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  v4 = *(NSObject **)(v3 + 144);
  if (v4)
  {
    dispatch_retain(*(dispatch_object_t *)(v3 + 144));
    dispatch_group_enter(v4);
  }
  v5 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    goto LABEL_12;
  if (*((char *)v2 + 39) < 0)
    std::string::__init_copy_ctor_external(&v12, (const std::string::value_type *)v2[2], v2[3]);
  else
    v12 = *(std::string *)(v2 + 2);
  KernelPCITrace::dumpState_sync(v3, (uint64_t)&v12, 1, 10, __p);
  if (v14 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  *(_DWORD *)buf = 136315138;
  v16 = v6;
  _os_log_impl(&dword_1A343C000, v5, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
  if (v14 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_26;
LABEL_12:
    if (!v4)
      goto LABEL_14;
    goto LABEL_13;
  }
  if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_12;
LABEL_26:
  operator delete(v12.__r_.__value_.__l.__data_);
  if (v4)
  {
LABEL_13:
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
LABEL_14:
  if (*((char *)v2 + 39) < 0)
    operator delete((void *)v2[2]);
  v7 = v2[1];
  if (v7)
  {
    dispatch_group_leave(v7);
    v8 = v2[1];
    if (v8)
      dispatch_release(v8);
  }
  operator delete(v2);
  v9 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(a1);
}

void sub_1A34643A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  void **v17;
  NSObject *v19;
  NSObject *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;

  if (v16)
  {
    dispatch_group_leave(v16);
    dispatch_release(v16);
    if ((*(char *)(v15 + 39) & 0x80000000) == 0)
    {
LABEL_3:
      v19 = *(NSObject **)(v15 + 8);
      if (!v19)
        goto LABEL_9;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v15 + 39) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v17);
  v19 = *(NSObject **)(v15 + 8);
  if (!v19)
    goto LABEL_9;
LABEL_7:
  dispatch_group_leave(v19);
  v20 = *(NSObject **)(v15 + 8);
  if (v20)
    dispatch_release(v20);
LABEL_9:
  operator delete((void *)v15);
  v21 = (std::__shared_weak_count *)v14[2];
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  operator delete(v14);
  _Unwind_Resume(a1);
}

void ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIZN14KernelPCITrace11setPropertyEN8dispatch5groupERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEESF_E3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSH__block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  int v4;
  const char *v5;
  size_t v6;
  NSObject *v7;
  void **v8;
  uint64_t *v9;
  uint64_t *v10;
  void *__p[2];
  int64_t v12;
  NSObject *v13;
  uint8_t buf[4];
  void **v15;
  __int16 v16;
  uint64_t *v17;
  __int16 v18;
  uint64_t *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)v1;
  v3 = *(NSObject **)(v1 + 8);
  v13 = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v3);
  }
  v4 = KernelPCITrace::setProperty_sync(v2, &v13, *(char **)(v1 + 16), *(char **)(v1 + 24));
  **(_BYTE **)(v1 + 32) = v4;
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
    v4 = **(unsigned __int8 **)(v1 + 32);
  }
  if (v4)
    v5 = "Success";
  else
    v5 = "Failed";
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v12 = 0xAAAAAAAAAAAAAAAALL;
  if (v4)
    v6 = 7;
  else
    v6 = 6;
  __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  HIBYTE(v12) = v6;
  memcpy(__p, v5, v6);
  *(_BYTE *)((unint64_t)__p | v6) = 0;
  v7 = *(NSObject **)(v2 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    if ((SHIBYTE(v12) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__p[0]);
    return;
  }
  v8 = (void **)__p[0];
  if (v12 >= 0)
    v8 = __p;
  v9 = *(uint64_t **)(v1 + 16);
  if (*((char *)v9 + 23) < 0)
  {
    v9 = (uint64_t *)*v9;
    v10 = *(uint64_t **)(v1 + 24);
    if ((*((char *)v10 + 23) & 0x80000000) == 0)
      goto LABEL_18;
  }
  else
  {
    v10 = *(uint64_t **)(v1 + 24);
    if ((*((char *)v10 + 23) & 0x80000000) == 0)
      goto LABEL_18;
  }
  v10 = (uint64_t *)*v10;
LABEL_18:
  *(_DWORD *)buf = 136315650;
  v15 = v8;
  v16 = 2080;
  v17 = v9;
  v18 = 2080;
  v19 = v10;
  _os_log_impl(&dword_1A343C000, v7, OS_LOG_TYPE_DEFAULT, "#I Set property [%s], Key=%s, Value=%s", buf, 0x20u);
  if (SHIBYTE(v12) < 0)
    goto LABEL_19;
}

void sub_1A3464624(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIZN14KernelPCITrace11getPropertyERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERSB_E3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSG__block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int Property_sync;
  const char *v4;
  size_t v5;
  NSObject *v6;
  void **v7;
  uint64_t *v8;
  uint64_t *v9;
  void *__dst[2];
  int64_t v11;
  uint8_t buf[4];
  void **v13;
  __int16 v14;
  uint64_t *v15;
  __int16 v16;
  uint64_t *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)v1;
  Property_sync = KernelPCITrace::getProperty_sync(*(_QWORD *)v1, *(char **)(v1 + 8), *(_QWORD *)(v1 + 16));
  **(_BYTE **)(v1 + 24) = Property_sync;
  if (Property_sync)
    v4 = "Success";
  else
    v4 = "Failed";
  __dst[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v11 = 0xAAAAAAAAAAAAAAAALL;
  if (Property_sync)
    v5 = 7;
  else
    v5 = 6;
  __dst[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  HIBYTE(v11) = v5;
  memcpy(__dst, v4, v5);
  *(_BYTE *)((unint64_t)__dst | v5) = 0;
  v6 = *(NSObject **)(v2 + 40);
  if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    if ((SHIBYTE(v11) & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(__dst[0]);
    return;
  }
  v7 = (void **)__dst[0];
  if (v11 >= 0)
    v7 = __dst;
  v8 = *(uint64_t **)(v1 + 8);
  if (*((char *)v8 + 23) < 0)
  {
    v8 = (uint64_t *)*v8;
    v9 = *(uint64_t **)(v1 + 16);
    if ((*((char *)v9 + 23) & 0x80000000) == 0)
      goto LABEL_14;
  }
  else
  {
    v9 = *(uint64_t **)(v1 + 16);
    if ((*((char *)v9 + 23) & 0x80000000) == 0)
      goto LABEL_14;
  }
  v9 = (uint64_t *)*v9;
LABEL_14:
  *(_DWORD *)buf = 136315650;
  v13 = v7;
  v14 = 2080;
  v15 = v8;
  v16 = 2080;
  v17 = v9;
  _os_log_impl(&dword_1A343C000, v6, OS_LOG_TYPE_DEFAULT, "#I Get property [%s], Key=%s, Value=%s", buf, 0x20u);
  if (SHIBYTE(v11) < 0)
    goto LABEL_15;
}

void ResetReasonEncoder::Mapping::~Mapping(ResetReasonEncoder::Mapping *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    goto LABEL_15;
  v3 = *((_QWORD *)this + 5);
  v4 = (void *)*((_QWORD *)this + 4);
  if (v3 != v2)
  {
    while (1)
    {
      if (*(_BYTE *)(v3 - 8))
      {
        v5 = *(_QWORD **)(v3 - 16);
        if ((_QWORD *)(v3 - 40) == v5)
        {
          v5 = (_QWORD *)(v3 - 40);
          v6 = 4;
          goto LABEL_10;
        }
        if (v5)
        {
          v6 = 5;
LABEL_10:
          (*(void (**)(void))(*v5 + 8 * v6))();
        }
      }
      if (*(char *)(v3 - 49) < 0)
        operator delete(*(void **)(v3 - 72));
      v3 -= 72;
      if (v3 == v2)
      {
        v4 = (void *)*((_QWORD *)this + 4);
        break;
      }
    }
  }
  *((_QWORD *)this + 5) = v2;
  operator delete(v4);
LABEL_15:
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

BOOL ResetReasonEncoder::findMatchingMapping(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  std::string::size_type size;
  std::sub_match<const char *> *v7;
  std::sub_match<std::__wrap_iter<const char *>> *v8;
  __int128 v9;
  char v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v23;
  __int128 v24;
  std::string::value_type *v25;
  size_t v26;
  void **v27;
  char *v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  void *v34;
  char *v35;
  uint64_t v36;
  _BYTE *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  size_t v42;
  char *v43;
  char *v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  char *v48;
  size_t v49;
  char *v50;
  char *v51;
  char v52;
  __int128 v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  std::string v66;
  std::string v67;
  char v68;
  void *v69;
  char *v70;
  uint64_t v71;
  std::locale v72[2];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  void *__p[2];
  _QWORD v77[9];
  __int128 v78;
  uint64_t v79;
  std::vector<std::csub_match> v80[2];
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;

  v3 = qword_1ED114998;
  v65 = qword_1ED1149A0;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v66 = *(std::string *)a1;
    if (qword_1ED114998 != qword_1ED1149A0)
      goto LABEL_3;
LABEL_45:
    if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_46;
LABEL_53:
    operator delete(v66.__r_.__value_.__l.__data_);
    v20 = qword_1ED1149A0;
    if (v3 == a2 || qword_1ED1149A0 == v3)
      return v20 != v3;
    goto LABEL_57;
  }
  std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  if (v3 == v65)
    goto LABEL_45;
  while (1)
  {
LABEL_3:
    if (*(char *)(v3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)v3, *(_QWORD *)(v3 + 8));
    }
    else
    {
      v4 = *(_OWORD *)v3;
      v67.__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 16);
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v4;
    }
    v68 = *(_BYTE *)(v3 + 24);
    v70 = 0;
    v71 = 0;
    v69 = 0;
    std::vector<ResetReasonEncoder::SubmatchInfo>::__init_with_size[abi:ne180100]<ResetReasonEncoder::SubmatchInfo*,ResetReasonEncoder::SubmatchInfo*>(&v69, *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v3 + 40) - *(_QWORD *)(v3 + 32)) >> 3));
    *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v74 = v5;
    v75 = v5;
    *(_OWORD *)&v72[0].__locale_ = v5;
    v73 = v5;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v72, (uint64_t)&v67, 0);
    size = HIBYTE(v66.__r_.__value_.__r.__words[2]);
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = (std::sub_match<const char *> *)&v66;
    else
      v7 = (std::sub_match<const char *> *)v66.__r_.__value_.__r.__words[0];
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v66.__r_.__value_.__l.__size_;
    v8 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v7 + size);
    *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v78 = v9;
    v77[6] = 0xAAAAAAAAAAAAAA00;
    v77[3] = 0xAAAAAAAAAAAAAAAALL;
    v77[4] = 0;
    v77[5] = 0;
    v77[7] = 0;
    v77[8] = 0;
    LOBYTE(v78) = 0;
    BYTE8(v78) = 0;
    v79 = 0;
    *(_OWORD *)__p = 0u;
    memset(v77, 0, 25);
    v86 = v9;
    v83 = 0xAAAAAAAAAAAAAA00;
    v80[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
    v81 = 0;
    v82 = 0;
    v84 = 0;
    v85 = 0;
    LOBYTE(v86) = 0;
    BYTE8(v86) = 0;
    v87 = 0;
    memset(v80, 0, 41);
    v10 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v72, v7, (std::sub_match<const char *> *)((char *)v7 + size), v80, 4160);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__p, (uint64_t)v7, v8, (uint64_t *)v80, 0);
    if (v80[0].__begin_)
    {
      v80[0].__end_ = v80[0].__begin_;
      operator delete(v80[0].__begin_);
    }
    v11 = v78;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v12 = (std::__shared_weak_count *)v75;
    if (!(_QWORD)v75)
      goto LABEL_147;
    v13 = (unint64_t *)(v75 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (v11)
        v10 = 0;
      std::locale::~locale(v72);
      v15 = (char *)v69;
      if (v69)
      {
LABEL_22:
        v16 = v70;
        v17 = v15;
        if (v70 == v15)
        {
LABEL_34:
          v70 = v15;
          operator delete(v17);
          goto LABEL_35;
        }
        while (2)
        {
          if (*(v16 - 8))
          {
            v18 = (char *)*((_QWORD *)v16 - 2);
            if (v16 - 40 == v18)
            {
              v18 = v16 - 40;
              v19 = 4;
LABEL_30:
              (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
            }
            else if (v18)
            {
              v19 = 5;
              goto LABEL_30;
            }
          }
          if (*(v16 - 49) < 0)
            operator delete(*((void **)v16 - 9));
          v16 -= 72;
          if (v16 == v15)
          {
            v17 = v69;
            goto LABEL_34;
          }
          continue;
        }
      }
    }
    else
    {
LABEL_147:
      if (v11)
        v10 = 0;
      std::locale::~locale(v72);
      v15 = (char *)v69;
      if (v69)
        goto LABEL_22;
    }
LABEL_35:
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    if ((v10 & 1) != 0)
      break;
    v3 += 56;
    if (v3 == v65)
    {
      v3 = v65;
      break;
    }
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_53;
LABEL_46:
  v20 = qword_1ED1149A0;
  if (v3 == a2 || qword_1ED1149A0 == v3)
    return v20 != v3;
LABEL_57:
  v23 = *(_BYTE *)(v3 + 23);
  if (*(char *)(a2 + 23) < 0)
  {
    if (v23 >= 0)
      v25 = (std::string::value_type *)v3;
    else
      v25 = *(std::string::value_type **)v3;
    if (v23 >= 0)
      v26 = *(unsigned __int8 *)(v3 + 23);
    else
      v26 = *(_QWORD *)(v3 + 8);
    std::string::__assign_no_alias<false>((void **)a2, v25, v26);
  }
  else if ((*(_BYTE *)(v3 + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>((_QWORD *)a2, *(void **)v3, *(_QWORD *)(v3 + 8));
  }
  else
  {
    v24 = *(_OWORD *)v3;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v3 + 16);
    *(_OWORD *)a2 = v24;
  }
  v27 = (void **)(a2 + 32);
  v28 = *(char **)(a2 + 32);
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(v3 + 24);
  v30 = *(char **)(v3 + 32);
  v29 = *(char **)(v3 + 40);
  v31 = 0x8E38E38E38E38E39 * ((v29 - v30) >> 3);
  v32 = *(_QWORD *)(a2 + 48);
  if (0x8E38E38E38E38E39 * ((v32 - (uint64_t)v28) >> 3) >= v31)
  {
    v37 = *(_BYTE **)(a2 + 40);
    if (0x8E38E38E38E38E39 * ((v37 - v28) >> 3) < v31)
    {
      v38 = &v30[8 * ((v37 - v28) >> 3)];
      if (v37 != v28)
      {
        v64 = a2;
        v39 = 0;
        v40 = 8 * ((v37 - v28) >> 3);
        do
        {
          v43 = &v28[v39];
          v44 = &v30[v39];
          if (v30 != v28)
          {
            v45 = v44[23];
            if (v43[23] < 0)
            {
              if (v45 >= 0)
                v41 = &v30[v39];
              else
                v41 = *(char **)&v30[v39];
              if (v45 >= 0)
                v42 = v44[23];
              else
                v42 = *(_QWORD *)&v30[v39 + 8];
              std::string::__assign_no_alias<false>((void **)&v28[v39], v41, v42);
            }
            else if (v44[23] < 0)
            {
              std::string::__assign_no_alias<true>(&v28[v39], *(void **)&v30[v39], *(_QWORD *)&v30[v39 + 8]);
            }
            else
            {
              v46 = *(_OWORD *)v44;
              *((_QWORD *)v43 + 2) = *((_QWORD *)v44 + 2);
              *(_OWORD *)v43 = v46;
            }
          }
          *((_DWORD *)v43 + 6) = *((_DWORD *)v44 + 6);
          std::__optional_storage_base<std::function<std::string ()(std::string,std::string)>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::function<std::string ()(std::string,std::string)>,false> const&>((_QWORD *)v43 + 4, (_QWORD *)v44 + 4);
          v39 += 72;
        }
        while (v40 != v39);
        a2 = v64;
        v28 = *(char **)(v64 + 40);
      }
      v59 = v28;
      if (v38 != v29)
      {
        v60 = 0;
        do
        {
          std::construct_at[abi:ne180100]<ResetReasonEncoder::SubmatchInfo,ResetReasonEncoder::SubmatchInfo&,ResetReasonEncoder::SubmatchInfo*>((std::string *)&v28[v60], (__int128 *)&v38[v60]);
          v60 += 72;
        }
        while (&v38[v60] != v29);
        v59 = &v28[v60];
      }
      *(_QWORD *)(a2 + 40) = v59;
      return v20 != v3;
    }
    if (v30 != v29)
    {
      v47 = 0;
      do
      {
        v50 = &v28[v47];
        v51 = &v30[v47];
        if (v30 != v28)
        {
          v52 = v51[23];
          if (v50[23] < 0)
          {
            if (v52 >= 0)
              v48 = &v30[v47];
            else
              v48 = *(char **)&v30[v47];
            if (v52 >= 0)
              v49 = v51[23];
            else
              v49 = *(_QWORD *)&v30[v47 + 8];
            std::string::__assign_no_alias<false>((void **)&v28[v47], v48, v49);
          }
          else if (v51[23] < 0)
          {
            std::string::__assign_no_alias<true>(&v28[v47], *(void **)&v30[v47], *(_QWORD *)&v30[v47 + 8]);
          }
          else
          {
            v53 = *(_OWORD *)v51;
            *((_QWORD *)v50 + 2) = *((_QWORD *)v51 + 2);
            *(_OWORD *)v50 = v53;
          }
        }
        *((_DWORD *)v50 + 6) = *((_DWORD *)v51 + 6);
        std::__optional_storage_base<std::function<std::string ()(std::string,std::string)>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::function<std::string ()(std::string,std::string)>,false> const&>((_QWORD *)v50 + 4, (_QWORD *)v51 + 4);
        v47 += 72;
      }
      while (&v30[v47] != v29);
      v37 = *(_BYTE **)(a2 + 40);
      v28 += v47;
    }
    while (1)
    {
      if (v37 == v28)
        goto LABEL_125;
      if (*(v37 - 8))
      {
        v62 = (_QWORD *)*((_QWORD *)v37 - 2);
        if (v37 - 40 == (_BYTE *)v62)
        {
          v62 = v37 - 40;
          v63 = 4;
        }
        else
        {
          if (!v62)
            goto LABEL_142;
          v63 = 5;
        }
        (*(void (**)(void))(*v62 + 8 * v63))();
      }
LABEL_142:
      if ((char)*(v37 - 49) < 0)
        operator delete(*((void **)v37 - 9));
      v37 -= 72;
    }
  }
  if (v28)
  {
    v33 = *(char **)(a2 + 40);
    v34 = v28;
    if (v33 == v28)
    {
LABEL_113:
      *(_QWORD *)(a2 + 40) = v28;
      operator delete(v34);
      v32 = 0;
      *v27 = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      goto LABEL_114;
    }
    while (1)
    {
      if (*(v33 - 8))
      {
        v35 = (char *)*((_QWORD *)v33 - 2);
        if (v33 - 40 == v35)
        {
          v35 = v33 - 40;
          v36 = 4;
          goto LABEL_78;
        }
        if (v35)
        {
          v36 = 5;
LABEL_78:
          (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
        }
      }
      if (*(v33 - 49) < 0)
        operator delete(*((void **)v33 - 9));
      v33 -= 72;
      if (v33 == v28)
      {
        v34 = *v27;
        goto LABEL_113;
      }
    }
  }
LABEL_114:
  if (v31 > 0x38E38E38E38E38ELL)
    goto LABEL_144;
  v54 = 0x8E38E38E38E38E39 * (v32 >> 3);
  v55 = 2 * v54;
  if (2 * v54 <= v31)
    v55 = 0x8E38E38E38E38E39 * ((v29 - v30) >> 3);
  v56 = v54 >= 0x1C71C71C71C71C7 ? 0x38E38E38E38E38ELL : v55;
  if (v56 > 0x38E38E38E38E38ELL)
LABEL_144:
    std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
  v57 = 72 * v56;
  v28 = (char *)operator new(72 * v56);
  *(_QWORD *)(a2 + 32) = v28;
  *(_QWORD *)(a2 + 40) = v28;
  *(_QWORD *)(a2 + 48) = &v28[v57];
  if (v30 != v29)
  {
    v58 = 0;
    do
    {
      std::construct_at[abi:ne180100]<ResetReasonEncoder::SubmatchInfo,ResetReasonEncoder::SubmatchInfo&,ResetReasonEncoder::SubmatchInfo*>((std::string *)&v28[v58], (__int128 *)&v30[v58]);
      v58 += 72;
    }
    while (&v30[v58] != v29);
    v28 += v58;
  }
LABEL_125:
  *(_QWORD *)(a2 + 40) = v28;
  return v20 != v3;
}

void sub_1A34650C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, __int16 a9, char a10, char a11, uint64_t a12, ...)
{
  void *v13;
  va_list va;

  va_start(va, a12);
  ResetReasonEncoder::Mapping::~Mapping((ResetReasonEncoder::Mapping *)va);
  if ((a11 & 0x80000000) == 0)
    JUMPOUT(0x1A3465140);
  operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_1A34650CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v26;

  if (a25 < 0)
  {
    operator delete(__p);
    if (a18 < 0)
    {
LABEL_5:
      operator delete(v26);
      _Unwind_Resume(a1);
    }
  }
  else if (a18 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

void sub_1A3465104(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::locale a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  uint64_t v34;
  void *v35;

  v35 = *(void **)(v34 - 208);
  if (v35)
  {
    *(_QWORD *)(v34 - 200) = v35;
    operator delete(v35);
  }
  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a25);
  JUMPOUT(0x1A3465130);
}

void ResetReasonEncoder::parse(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  std::string *v5;
  _BOOL4 MatchingMapping;
  _BOOL4 v7;
  unint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v12;
  uint64_t v13;
  const char *v14;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  std::__wrap_iter<const char *> v18;
  std::__wrap_iter<const char *> v19;
  int *v20;
  std::match_results<std::__wrap_iter<const char *>>::value_type *p_prefix;
  _BOOL4 v22;
  BOOL v23;
  NSObject *v24;
  int v25;
  int *begin;
  std::__wrap_iter<const char *>::iterator_type i;
  std::__wrap_iter<const char *>::iterator_type v28;
  std::string::size_type v29;
  std::string *p_buf;
  std::string *v31;
  _BYTE *v32;
  __int128 *v33;
  std::string::size_type *v34;
  unint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  std::string::value_type v39;
  std::__shared_weak_count *cntrl;
  uint64_t *p_shared_owners;
  unint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  NSObject *v46;
  uint64_t v47;
  int v48;
  NSObject *v49;
  NSObject *v50;
  NSObject *v51;
  const char *v52;
  uint32_t v53;
  const std::string::value_type *v54;
  unint64_t v55;
  char *v56;
  _DWORD *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  _DWORD *v65;
  uint64_t v66;
  int64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _OWORD *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  int v77;
  std::string *p_p;
  unint64_t v79;
  char *v80;
  _DWORD *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _BYTE *v88;
  _DWORD *v89;
  uint64_t v90;
  int64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  _OWORD *v97;
  char *v98;
  uint64_t v99;
  __int128 v100;
  int v101;
  std::string *v102;
  NSObject *v103;
  const char *v104;
  NSObject *v105;
  const char *v106;
  char v107;
  void *v108;
  size_t v109;
  char *v110;
  void *v111;
  char *v112;
  uint64_t v113;
  std::string *v114;
  void **v115;
  char *v117;
  char v118;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> v119;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type __re;
  std::string v121;
  std::string v122;
  std::string __p;
  std::string v124;
  void *v125[2];
  uint64_t v126;
  unint64_t v127;
  void *v128;
  char *v129;
  uint64_t v130;
  std::string buf;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> v132;
  uint64_t v133;

  v3 = a2;
  v133 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a2 + 32) = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v4;
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  v5 = (std::string *)(a2 + 8);
  *(_BYTE *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v115 = (void **)(a2 + 40);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v127 = 0xAAAAAAAAAAAAAAAALL;
  v126 = 0;
  v125[0] = 0;
  v125[1] = 0;
  v130 = 0;
  v128 = 0;
  v129 = 0;
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v124 = *(std::string *)a1;
  MatchingMapping = ResetReasonEncoder::findMatchingMapping((uint64_t)&v124, (uint64_t)v125);
  v7 = MatchingMapping;
  if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v8 = 0x1ED114000uLL;
    if (MatchingMapping)
      goto LABEL_6;
LABEL_157:
    v103 = _MergedGlobals_3;
    if (os_log_type_enabled((os_log_t)_MergedGlobals_3, OS_LOG_TYPE_DEBUG))
    {
      v104 = (const char *)a1;
      if (*(char *)(a1 + 23) < 0)
        v104 = *(const char **)a1;
      LODWORD(v132.__position_.__begin_.__i_) = 136315138;
      *(std::__wrap_iter<const char *>::iterator_type *)((char *)&v132.__position_.__begin_.__i_ + 4) = v104;
      _os_log_debug_impl(&dword_1A343C000, v103, OS_LOG_TYPE_DEBUG, "Reason string \"%s\" did not match any existing regex pattern", (uint8_t *)&v132, 0xCu);
    }
LABEL_162:
    v105 = *(NSObject **)(v8 + 2448);
    if (os_log_type_enabled(v105, OS_LOG_TYPE_INFO))
    {
      v106 = (const char *)a1;
      if (*(char *)(a1 + 23) < 0)
        v106 = *(const char **)a1;
      LODWORD(v132.__position_.__begin_.__i_) = 136315138;
      *(std::__wrap_iter<const char *>::iterator_type *)((char *)&v132.__position_.__begin_.__i_ + 4) = v106;
      _os_log_impl(&dword_1A343C000, v105, OS_LOG_TYPE_INFO, "A problem occurred trying to parse reason string \"%s\", so attempting to send as much of the raw reason string as will fit", (uint8_t *)&v132, 0xCu);
    }
    *(_BYTE *)v3 = 12;
    if (*(_BYTE *)(v3 + 32))
    {
      if (v5 != (std::string *)a1)
      {
        v107 = *(_BYTE *)(a1 + 23);
        if (*(char *)(v3 + 31) < 0)
        {
          if (v107 >= 0)
            v108 = (void *)a1;
          else
            v108 = *(void **)a1;
          if (v107 >= 0)
            v109 = *(unsigned __int8 *)(a1 + 23);
          else
            v109 = *(_QWORD *)(a1 + 8);
          std::string::__assign_no_alias<false>((void **)&v5->__r_.__value_.__l.__data_, v108, v109);
        }
        else if ((*(_BYTE *)(a1 + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v5, *(void **)a1, *(_QWORD *)(a1 + 8));
        }
        else
        {
          *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
          v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
        }
      }
    }
    else
    {
      if (*(char *)(a1 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
      }
      else
      {
        *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
        v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
      }
      *(_BYTE *)(v3 + 32) = 1;
    }
LABEL_182:
    v9 = (char *)v128;
    goto LABEL_183;
  }
  operator delete(v124.__r_.__value_.__l.__data_);
  v8 = 0x1ED114000uLL;
  if (!v7)
    goto LABEL_157;
LABEL_6:
  *(_BYTE *)v3 = v127;
  v9 = (char *)v128;
  v10 = v129;
  if (v128 != v129)
  {
    v118 = 1;
    v114 = v5;
    v117 = v129;
    while (1)
    {
      __p.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
      __p.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAALL;
      __p.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAA00;
      if (!v9[64])
        break;
      if (*(char *)(a1 + 23) < 0)
        std::string::__init_copy_ctor_external(&v122, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
      else
        v122 = *(std::string *)a1;
      if (v9[23] < 0)
      {
        std::string::__init_copy_ctor_external(&v121, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v15 = *(_OWORD *)v9;
        v121.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
        *(_OWORD *)&v121.__r_.__value_.__l.__data_ = v15;
      }
      v16 = *((_QWORD *)v9 + 7);
      if (!v16)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(std::regex_token_iterator<std::__wrap_iter<const char *>, char> *__return_ptr, uint64_t, std::string *, std::string *))(*(_QWORD *)v16 + 48))(&v132, v16, &v122, &v121);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v132.__position_.__begin_.__i_;
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v132.__position_.__pregex_;
      HIBYTE(v132.__position_.__pregex_) = 0;
      LOBYTE(v132.__position_.__begin_.__i_) = 0;
      if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v121.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v122.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_65;
      }
      else if ((SHIBYTE(v122.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_65;
      }
      operator delete(v122.__r_.__value_.__l.__data_);
LABEL_65:
      v43 = *((_DWORD *)v9 + 6);
      if (v43 == 2)
      {
        v47 = std::stol(&__p, 0, 16);
        v48 = v47;
        if (v47 > 0xFFFFFFFFLL)
        {
          v118 = 0;
          v49 = *(NSObject **)(v8 + 2448);
          if (!os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
            goto LABEL_147;
          goto LABEL_112;
        }
        v56 = *(char **)(v3 + 48);
        v55 = *(_QWORD *)(v3 + 56);
        if ((unint64_t)v56 < v55)
        {
          *(_DWORD *)v56 = v47;
          v57 = v56 + 4;
          v8 = 0x1ED114000;
          *(_QWORD *)(v3 + 48) = v57;
          if ((v118 & 1) != 0)
          {
LABEL_116:
            v25 = 0;
            v10 = v117;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_150;
            goto LABEL_149;
          }
          goto LABEL_111;
        }
        v58 = (char *)*v115;
        v59 = v56 - (_BYTE *)*v115;
        v60 = v59 >> 2;
        v61 = (v59 >> 2) + 1;
        if (v61 >> 62)
          std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
        v62 = v55 - (_QWORD)v58;
        if (v62 >> 1 > v61)
          v61 = v62 >> 1;
        if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
          v63 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v63 = v61;
        if (v63)
        {
          if (v63 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v64 = operator new(4 * v63);
          v65 = &v64[4 * v60];
          *v65 = v48;
          v66 = (uint64_t)(v65 + 1);
          v67 = v56 - v58;
          if (v56 != v58)
          {
LABEL_100:
            v68 = v67 - 4;
            if (v68 < 0x2C)
            {
              v3 = a2;
              goto LABEL_108;
            }
            v69 = v56 - v64 - v59;
            v3 = a2;
            if (v69 < 0x20)
              goto LABEL_209;
            v70 = (v68 >> 2) + 1;
            v71 = 4 * (v70 & 0x7FFFFFFFFFFFFFF8);
            v72 = &v56[-v71];
            v65 = (_DWORD *)((char *)v65 - v71);
            v73 = &v64[4 * v60 - 16];
            v74 = v56 - 16;
            v75 = v70 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v76 = *(_OWORD *)v74;
              *(v73 - 1) = *((_OWORD *)v74 - 1);
              *v73 = v76;
              v73 -= 2;
              v74 -= 32;
              v75 -= 8;
            }
            while (v75);
            v56 = v72;
            if (v70 != (v70 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_209:
              do
              {
LABEL_108:
                v77 = *((_DWORD *)v56 - 1);
                v56 -= 4;
                *--v65 = v77;
              }
              while (v56 != v58);
            }
LABEL_109:
            *(_QWORD *)(v3 + 40) = v65;
            *(_QWORD *)(v3 + 48) = v66;
            *(_QWORD *)(v3 + 56) = &v64[4 * v63];
            if (v58)
            {
              operator delete(v58);
              v5 = v114;
              v8 = 0x1ED114000uLL;
              *(_QWORD *)(v3 + 48) = v66;
              if ((v118 & 1) != 0)
                goto LABEL_116;
            }
            else
            {
              v5 = v114;
              v8 = 0x1ED114000;
              *(_QWORD *)(v3 + 48) = v66;
              if ((v118 & 1) != 0)
                goto LABEL_116;
            }
LABEL_111:
            v10 = v117;
            v49 = *(NSObject **)(v8 + 2448);
            if (!os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
              goto LABEL_147;
LABEL_112:
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            LODWORD(v132.__position_.__begin_.__i_) = 136315138;
            *(std::__wrap_iter<const char *>::iterator_type *)((char *)&v132.__position_.__begin_.__i_ + 4) = (std::__wrap_iter<const char *>::iterator_type)p_p;
            v51 = v49;
            v52 = "An error occurred converting hex string argument %s to unsigned integer";
            goto LABEL_145;
          }
        }
        else
        {
          v64 = 0;
          v65 = (_DWORD *)(4 * v60);
          *(_DWORD *)(4 * v60) = v48;
          v66 = 4 * v60 + 4;
          v67 = v56 - v58;
          if (v56 != v58)
            goto LABEL_100;
        }
        v3 = a2;
        goto LABEL_109;
      }
      if (v43 != 1)
      {
        if (!v43)
        {
          if (*(_BYTE *)(v3 + 32))
          {
            v118 = 0;
          }
          else
          {
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(v5, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            else
              *v5 = __p;
            *(_BYTE *)(v3 + 32) = 1;
            if ((v118 & 1) != 0)
              goto LABEL_147;
          }
          v50 = *(NSObject **)(v8 + 2448);
          if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(v132.__position_.__begin_.__i_) = 0;
            v51 = v50;
            v52 = "Expected to find a text argument, but none was found";
            v53 = 2;
            goto LABEL_146;
          }
        }
LABEL_147:
        v25 = 0;
LABEL_148:
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_150;
LABEL_149:
        operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_150;
      }
      v44 = std::stol(&__p, 0, 10);
      v45 = v44;
      if (v44 > 0xFFFFFFFFLL)
      {
        v118 = 0;
        v46 = *(NSObject **)(v8 + 2448);
        if (!os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
          goto LABEL_147;
LABEL_142:
        v102 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v102 = (std::string *)__p.__r_.__value_.__r.__words[0];
        LODWORD(v132.__position_.__begin_.__i_) = 136315138;
        *(std::__wrap_iter<const char *>::iterator_type *)((char *)&v132.__position_.__begin_.__i_ + 4) = (std::__wrap_iter<const char *>::iterator_type)v102;
        v51 = v46;
        v52 = "An error occurred converting decimal string argument %s to unsigned integer";
LABEL_145:
        v53 = 12;
LABEL_146:
        _os_log_debug_impl(&dword_1A343C000, v51, OS_LOG_TYPE_DEBUG, v52, (uint8_t *)&v132, v53);
        goto LABEL_147;
      }
      v80 = *(char **)(v3 + 48);
      v79 = *(_QWORD *)(v3 + 56);
      if ((unint64_t)v80 < v79)
      {
        *(_DWORD *)v80 = v44;
        v81 = v80 + 4;
        v10 = v117;
        *(_QWORD *)(v3 + 48) = v81;
        if ((v118 & 1) == 0)
          goto LABEL_141;
        goto LABEL_154;
      }
      v82 = (char *)*v115;
      v83 = v80 - (_BYTE *)*v115;
      v84 = v83 >> 2;
      v85 = (v83 >> 2) + 1;
      if (v85 >> 62)
        std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
      v86 = v79 - (_QWORD)v82;
      if (v86 >> 1 > v85)
        v85 = v86 >> 1;
      if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL)
        v87 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v87 = v85;
      if (v87)
      {
        if (v87 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v88 = operator new(4 * v87);
        v89 = &v88[4 * v84];
        *v89 = v45;
        v90 = (uint64_t)(v89 + 1);
        v91 = v80 - v82;
        if (v80 == v82)
        {
LABEL_133:
          v3 = a2;
          goto LABEL_139;
        }
      }
      else
      {
        v88 = 0;
        v89 = (_DWORD *)(4 * v84);
        *(_DWORD *)(4 * v84) = v45;
        v90 = 4 * v84 + 4;
        v91 = v80 - v82;
        if (v80 == v82)
          goto LABEL_133;
      }
      v92 = v91 - 4;
      if (v92 < 0x2C)
      {
        v3 = a2;
        do
        {
LABEL_138:
          v101 = *((_DWORD *)v80 - 1);
          v80 -= 4;
          *--v89 = v101;
        }
        while (v80 != v82);
        goto LABEL_139;
      }
      v93 = v80 - &v88[v83];
      v3 = a2;
      if (v93 < 0x20)
        goto LABEL_138;
      v94 = (v92 >> 2) + 1;
      v95 = 4 * (v94 & 0x7FFFFFFFFFFFFFF8);
      v96 = &v80[-v95];
      v89 = (_DWORD *)((char *)v89 - v95);
      v97 = &v88[4 * v84 - 16];
      v98 = v80 - 16;
      v99 = v94 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v100 = *(_OWORD *)v98;
        *(v97 - 1) = *((_OWORD *)v98 - 1);
        *v97 = v100;
        v97 -= 2;
        v98 -= 32;
        v99 -= 8;
      }
      while (v99);
      v80 = v96;
      if (v94 != (v94 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_138;
LABEL_139:
      *(_QWORD *)(v3 + 40) = v89;
      *(_QWORD *)(v3 + 48) = v90;
      *(_QWORD *)(v3 + 56) = &v88[4 * v87];
      if (v82)
      {
        operator delete(v82);
        v5 = v114;
        v10 = v117;
        *(_QWORD *)(v3 + 48) = v90;
        if ((v118 & 1) == 0)
          goto LABEL_141;
      }
      else
      {
        v5 = v114;
        v10 = v117;
        *(_QWORD *)(v3 + 48) = v90;
        if ((v118 & 1) == 0)
        {
LABEL_141:
          v8 = 0x1ED114000uLL;
          v46 = _MergedGlobals_3;
          if (os_log_type_enabled((os_log_t)_MergedGlobals_3, OS_LOG_TYPE_DEBUG))
            goto LABEL_142;
          goto LABEL_147;
        }
      }
LABEL_154:
      v25 = 0;
      v8 = 0x1ED114000;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_149;
LABEL_150:
      if (!v25)
      {
        v9 += 72;
        if (v9 != v10)
          continue;
      }
      if ((v118 & 1) == 0)
        goto LABEL_162;
      goto LABEL_182;
    }
    *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&__re.__loop_count_ = v11;
    *(_OWORD *)&__re.__start_.__cntrl_ = v11;
    *(_OWORD *)&__re.__traits_.__loc_.__locale_ = v11;
    *(_OWORD *)&__re.__traits_.__col_ = v11;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)&__re, (uint64_t)v9, 0);
    *(_QWORD *)&v132.__suffix_.matched = 0xAAAAAAAAAAAAAA00;
    v12.first.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
    v12.second.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
    *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v132.__position_.__match_.__suffix_.matched = v12;
    *(_QWORD *)&v132.__position_.__match_.__prefix_.matched = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v132.__position_.__match_.__unmatched_.matched = 0xAAAAAAAAAAAAAAAALL;
    *((_DWORD *)&v132.__position_.__flags_ + 1) = -1431655766;
    memset(&v132.__position_.__match_.__prefix_, 0, 17);
    memset(&v132.__position_.__match_.__suffix_, 0, 17);
    v132.__position_.__match_.__ready_ = 0;
    memset(&v132.__position_.__match_, 0, 41);
    memset(&v132, 0, 28);
    memset(&v132.__position_.__match_.__position_start_, 0, 32);
    memset(&v132.__n_, 0, 32);
    *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v119.__n_ = v12;
    *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v119.__subs_.__end_ = v12;
    *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v119.__result_ = v12;
    *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v119.__suffix_.second.__i_ = v12;
    *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v119.__position_.__match_.__suffix_.second.__i_ = v12;
    *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v119.__position_.__match_.__ready_ = v12;
    v119.__position_.__match_.__prefix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v12;
    *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v119.__position_.__match_.__prefix_.matched = v12;
    *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v119.__position_.__match_.__matches_.__end_cap_.__value_ = v12;
    *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v119.__position_.__match_.__unmatched_.second.__i_ = v12;
    *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v119.__position_.__pregex_ = v12;
    *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v119.__position_.__match_.__matches_.__begin_ = v12;
    *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v119.__position_.__begin_.__i_ = v12;
    if (*(char *)(a1 + 23) < 0)
    {
      v14 = *(const char **)a1;
      v13 = *(_QWORD *)(a1 + 8);
    }
    else
    {
      v13 = *(unsigned __int8 *)(a1 + 23);
      v14 = (const char *)a1;
    }
    v17 = &v14[v13];
    v18.__i_ = v14;
    v19.__i_ = &v14[v13];
    std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(&v119.__position_, v18, v19, &__re, match_default);
    memset(&v119.__suffix_, 0, 17);
    memset(&v119.__n_, 0, 32);
    v20 = (int *)operator new(4uLL);
    v119.__subs_.__begin_ = v20;
    *v20 = -1;
    v119.__subs_.__end_ = v20 + 1;
    v119.__subs_.__end_cap_.__value_ = v20 + 1;
    p_prefix = &v119.__position_.__match_.__prefix_;
    if (v119.__position_.__match_.__matches_.__end_ == v119.__position_.__match_.__matches_.__begin_)
    {
      v119.__suffix_.matched = 1;
      p_prefix = &v119.__suffix_;
      v119.__suffix_.first.__i_ = v14;
      v119.__suffix_.second.__i_ = v17;
    }
    v119.__result_ = p_prefix;
    std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(&v119);
    v22 = std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v132, &v119);
    v23 = v22;
    if (v22)
    {
      v24 = *(NSObject **)(v8 + 2448);
      v25 = 2;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        v54 = v9;
        if (v9[23] < 0)
          v54 = *(const std::string::value_type **)v9;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v54;
        _os_log_debug_impl(&dword_1A343C000, v24, OS_LOG_TYPE_DEBUG, "Failed to parse out submatch with pattern %s", (uint8_t *)&buf, 0xCu);
        v118 = 0;
        begin = v119.__subs_.__begin_;
        if (!v119.__subs_.__begin_)
        {
LABEL_54:
          if (v119.__position_.__match_.__matches_.__begin_)
          {
            v119.__position_.__match_.__matches_.__end_ = v119.__position_.__match_.__matches_.__begin_;
            operator delete(v119.__position_.__match_.__matches_.__begin_);
          }
          if (v132.__subs_.__begin_)
          {
            v132.__subs_.__end_ = v132.__subs_.__begin_;
            operator delete(v132.__subs_.__begin_);
          }
          if (v132.__position_.__match_.__matches_.__begin_)
          {
            v132.__position_.__match_.__matches_.__end_ = v132.__position_.__match_.__matches_.__begin_;
            operator delete(v132.__position_.__match_.__matches_.__begin_);
          }
          cntrl = __re.__start_.__cntrl_;
          if (!__re.__start_.__cntrl_)
            goto LABEL_64;
          p_shared_owners = &__re.__start_.__cntrl_->__shared_owners_;
          do
            v42 = __ldaxr((unint64_t *)p_shared_owners);
          while (__stlxr(v42 - 1, (unint64_t *)p_shared_owners));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
            std::__shared_weak_count::__release_weak(cntrl);
            std::locale::~locale(&__re.__traits_.__loc_);
            if (v23)
              goto LABEL_148;
          }
          else
          {
LABEL_64:
            std::locale::~locale(&__re.__traits_.__loc_);
            if (v23)
              goto LABEL_148;
          }
          goto LABEL_65;
        }
      }
      else
      {
        v118 = 0;
        begin = v119.__subs_.__begin_;
        if (!v119.__subs_.__begin_)
          goto LABEL_54;
      }
LABEL_53:
      v119.__subs_.__end_ = begin;
      operator delete(begin);
      goto LABEL_54;
    }
    if (!v119.__result_->matched)
    {
      memset(&buf, 0, sizeof(buf));
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_52;
LABEL_51:
      operator delete(__p.__r_.__value_.__l.__data_);
LABEL_52:
      v25 = 0;
      __p = buf;
      begin = v119.__subs_.__begin_;
      if (!v119.__subs_.__begin_)
        goto LABEL_54;
      goto LABEL_53;
    }
    i = v119.__result_->first.__i_;
    v28 = v119.__result_->second.__i_;
    v29 = v28 - v119.__result_->first.__i_;
    if (v29 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v29 > 0x16)
    {
      v37 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17)
        v37 = v29 | 7;
      v38 = v37 + 1;
      p_buf = (std::string *)operator new(v37 + 1);
      buf.__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
      buf.__r_.__value_.__l.__size_ = v29;
      if (i != v28)
      {
LABEL_36:
        if (v29 < 0x20 || (unint64_t)((char *)p_buf - i) < 0x20)
        {
          v31 = p_buf;
          v32 = i;
          v8 = 0x1ED114000uLL;
        }
        else
        {
          v31 = (std::string *)((char *)p_buf + (v29 & 0xFFFFFFFFFFFFFFE0));
          v32 = &i[v29 & 0xFFFFFFFFFFFFFFE0];
          v33 = (__int128 *)(i + 16);
          v34 = &p_buf->__r_.__value_.__r.__words[2];
          v35 = v29 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v36 = *v33;
            *((_OWORD *)v34 - 1) = *(v33 - 1);
            *(_OWORD *)v34 = v36;
            v33 += 2;
            v34 += 4;
            v35 -= 32;
          }
          while (v35);
          v8 = 0x1ED114000;
          if (v29 == (v29 & 0x7FFFFFFFFFFFFFE0))
          {
LABEL_50:
            v31->__r_.__value_.__s.__data_[0] = 0;
            v10 = v117;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_52;
            goto LABEL_51;
          }
        }
        do
        {
          v39 = *v32++;
          v31->__r_.__value_.__s.__data_[0] = v39;
          v31 = (std::string *)((char *)v31 + 1);
        }
        while (v32 != v28);
        goto LABEL_50;
      }
    }
    else
    {
      *((_BYTE *)&buf.__r_.__value_.__s + 23) = (_BYTE)v28 - (unint64_t)v119.__result_->first.__i_;
      p_buf = &buf;
      if (i != v28)
        goto LABEL_36;
    }
    v31 = p_buf;
    v8 = 0x1ED114000;
    goto LABEL_50;
  }
LABEL_183:
  if (!v9)
    goto LABEL_197;
  v110 = v129;
  v111 = v9;
  if (v129 != v9)
  {
    while (1)
    {
      if (*(v110 - 8))
      {
        v112 = (char *)*((_QWORD *)v110 - 2);
        if (v110 - 40 == v112)
        {
          v112 = v110 - 40;
          v113 = 4;
          goto LABEL_192;
        }
        if (v112)
        {
          v113 = 5;
LABEL_192:
          (*(void (**)(void))(*(_QWORD *)v112 + 8 * v113))();
        }
      }
      if (*(v110 - 49) < 0)
        operator delete(*((void **)v110 - 9));
      v110 -= 72;
      if (v110 == v9)
      {
        v111 = v128;
        break;
      }
    }
  }
  v129 = v9;
  operator delete(v111);
LABEL_197:
  if (SHIBYTE(v126) < 0)
    operator delete(v125[0]);
}

void sub_1A3465EEC(_Unwind_Exception *a1)
{
  ResetReasonEncoder::ParsedReason *v2;
  void *v3;
  char v4;
  uint64_t v5;

  if (v4 < 0)
    operator delete(v3);
  ResetReasonEncoder::Mapping::~Mapping((ResetReasonEncoder::Mapping *)&v5);
  ResetReasonEncoder::ParsedReason::~ParsedReason(v2);
  _Unwind_Resume(a1);
}

void sub_1A3465F74(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p)
    operator delete(__p);
  JUMPOUT(0x1A3465FCCLL);
}

void sub_1A3465F8C()
{
  JUMPOUT(0x1A3465FCCLL);
}

void sub_1A3465F94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a66;
  char a71;

  if (a64 < 0)
    operator delete(__p);
  if (a71 < 0)
    operator delete(a66);
  JUMPOUT(0x1A3465FDCLL);
}

std::regex_token_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(std::regex_token_iterator<std::__wrap_iter<const char *>, char> *this)
{
  std::vector<std::ssub_match>::pointer end;
  std::vector<std::ssub_match>::pointer begin;
  size_t v4;
  unint64_t v5;
  void *v6;
  std::vector<int>::pointer v7;
  unint64_t v8;
  unint64_t v9;
  std::match_results<std::__wrap_iter<const char *>>::value_type *p_unmatched;
  std::match_results<std::__wrap_iter<const char *>>::value_type *p_prefix;
  std::vector<std::ssub_match>::pointer v12;
  std::vector<std::ssub_match>::pointer v13;
  uint64_t v14;
  unint64_t v15;
  std::match_results<std::__wrap_iter<const char *>>::value_type *v16;
  std::vector<int>::pointer v17;
  __int32 *v18;
  std::match_results<std::__wrap_iter<const char *>>::value_type *v19;
  int *v20;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v22;
  __int128 v23;

  begin = this->__position_.__match_.__matches_.__begin_;
  end = this->__position_.__match_.__matches_.__end_;
  v4 = (char *)end - (char *)begin;
  v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3);
  if (end == begin)
  {
    v6 = 0;
  }
  else
  {
    if (v5 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    v6 = operator new(v4);
    memcpy(v6, begin, 24 * ((v4 - 24) / 0x18) + 24);
  }
  v22 = this->__position_.__match_.__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  v23 = *(_OWORD *)&this->__position_.__match_.__suffix_.matched;
  if (this->__result_ == &this->__suffix_)
    goto LABEL_28;
  v7 = this->__subs_.__begin_;
  v8 = this->__n_ + 1;
  if (v8 < this->__subs_.__end_ - v7)
  {
    this->__n_ = v8;
    v9 = v7[v8];
    p_unmatched = &begin[(int)v9];
    if (v5 <= v9)
      p_unmatched = &this->__position_.__match_.__unmatched_;
    if ((_DWORD)v9 == -1)
      p_prefix = &this->__position_.__match_.__prefix_;
    else
      p_prefix = p_unmatched;
    this->__result_ = p_prefix;
    if (!v6)
      return this;
LABEL_32:
    operator delete(v6);
    return this;
  }
  this->__n_ = 0;
  std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(&this->__position_);
  v12 = this->__position_.__match_.__matches_.__begin_;
  v13 = this->__position_.__match_.__matches_.__end_;
  v14 = (char *)v13 - (char *)v12;
  if (v13 == v12)
  {
    v17 = this->__subs_.__end_;
    v18 = wmemchr(this->__subs_.__begin_, -1, v17 - this->__subs_.__begin_);
    v19 = 0;
    if (v18)
      v20 = v18;
    else
      v20 = v17;
    if (v20 == this->__subs_.__end_ || !(_BYTE)v23)
    {
LABEL_31:
      this->__result_ = v19;
      if (!v6)
        return this;
      goto LABEL_32;
    }
    if (v22.second.__i_ != v22.first.__i_)
    {
      this->__suffix_.matched = 1;
      this->__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v22;
      this->__result_ = &this->__suffix_;
      if (!v6)
        return this;
      goto LABEL_32;
    }
LABEL_28:
    this->__result_ = 0;
    if (!v6)
      return this;
    goto LABEL_32;
  }
  v15 = this->__subs_.__begin_[this->__n_];
  if ((_DWORD)v15 == -1)
  {
    v19 = &this->__position_.__match_.__prefix_;
    goto LABEL_31;
  }
  v16 = &v12[(int)v15];
  if (0xAAAAAAAAAAAAAAABLL * (v14 >> 3) <= v15)
    v16 = &this->__position_.__match_.__unmatched_;
  this->__result_ = v16;
  if (v6)
    goto LABEL_32;
  return this;
}

void sub_1A3466254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v14;

  if (v14)
    operator delete(v14);
  _Unwind_Resume(exception_object);
}

BOOL std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(const std::regex_token_iterator<std::__wrap_iter<const char *>, char> *this, const std::regex_token_iterator<std::__wrap_iter<const char *>, char> *__x)
{
  std::regex_token_iterator<std::__wrap_iter<const char *>, char>::value_type *v3;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char>::value_type *v4;
  BOOL result;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char>::value_type *p_suffix;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char>::value_type *v8;
  const std::regex_token_iterator<std::__wrap_iter<const char *>, char>::value_type *v10;
  std::vector<std::ssub_match>::pointer begin;
  std::vector<std::ssub_match>::pointer end;
  uint64_t *v13;
  std::vector<std::ssub_match>::pointer v14;
  std::vector<int>::pointer v15;
  int *v16;
  std::vector<int>::pointer v17;

  v3 = (std::regex_token_iterator<std::__wrap_iter<const char *>, char>::value_type *)this->__result_;
  v4 = (std::regex_token_iterator<std::__wrap_iter<const char *>, char>::value_type *)__x->__result_;
  if (!((unint64_t)v3 | (unint64_t)v4))
    return 1;
  p_suffix = &this->__suffix_;
  v8 = &__x->__suffix_;
  if (v3 == &this->__suffix_ && v4 == v8)
  {
    if (!std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100]((uint64_t *)this->__result_, (uint64_t *)v4))return 1;
    v3 = (std::regex_token_iterator<std::__wrap_iter<const char *>, char>::value_type *)this->__result_;
  }
  if (!v3)
    return 0;
  v10 = __x->__result_;
  if (!v10)
    return 0;
  result = 0;
  if (v3 != p_suffix && v10 != v8)
  {
    begin = this->__position_.__match_.__matches_.__begin_;
    end = this->__position_.__match_.__matches_.__end_;
    v13 = (uint64_t *)__x->__position_.__match_.__matches_.__begin_;
    v14 = __x->__position_.__match_.__matches_.__end_;
    if (end != begin && v14 != (std::vector<std::ssub_match>::pointer)v13)
    {
      if (this->__position_.__begin_.__i_ == __x->__position_.__begin_.__i_
        && this->__position_.__end_.__i_ == __x->__position_.__end_.__i_
        && this->__position_.__pregex_ == __x->__position_.__pregex_
        && this->__position_.__flags_ == __x->__position_.__flags_
        && !std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100]((uint64_t *)this->__position_.__match_.__matches_.__begin_, v13))
      {
        goto LABEL_26;
      }
      return 0;
    }
    result = 0;
    if (end == begin && v14 == (std::vector<std::ssub_match>::pointer)v13)
    {
LABEL_26:
      if (this->__n_ == __x->__n_)
      {
        v15 = this->__subs_.__begin_;
        v16 = (int *)((char *)this->__subs_.__end_ - (char *)v15);
        v17 = __x->__subs_.__begin_;
        if (v16 == (int *)((char *)__x->__subs_.__end_ - (char *)v17))
          return memcmp(v15, v17, (size_t)v16) == 0;
      }
      return 0;
    }
  }
  return result;
}

_QWORD *std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::~regex_token_iterator(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[23];
  if (v2)
  {
    a1[24] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void ResetReasonEncoder::ParsedReason::~ParsedReason(ResetReasonEncoder::ParsedReason *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  if (*((_BYTE *)this + 32))
  {
    if (*((char *)this + 31) < 0)
      operator delete(*((void **)this + 1));
  }
}

double ResetReasonEncoder::encode@<D0>(ResetReasonEncoder *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  NSObject *v9;
  double result;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  const char *v19;
  const char *v20;
  const char *v21;
  const char *v22;
  __int128 v23;
  __int128 v24;
  __int128 *v25;
  _OWORD *v26;
  unint64_t v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  _OWORD v33[4];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 33) = v4;
  *(_OWORD *)(a2 + 17) = v4;
  *(_OWORD *)(a2 + 1) = v4;
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 64) = 0;
  memset((char *)v33 + 2, 0, 62);
  v5 = *((_QWORD *)this + 5);
  v6 = *((_QWORD *)this + 6);
  v7 = v6 - v5;
  v8 = (v6 - v5) >> 2;
  LOBYTE(v33[0]) = *(_BYTE *)this;
  BYTE1(v33[0]) = v8;
  if ((unint64_t)(v6 - v5) >= 0x3F)
  {
    v9 = _MergedGlobals_3;
    if (os_log_type_enabled((os_log_t)_MergedGlobals_3, OS_LOG_TYPE_ERROR))
    {
      v29 = 134218240;
      v30 = v7;
      v31 = 1024;
      v32 = 62;
      _os_log_error_impl(&dword_1A343C000, v9, OS_LOG_TYPE_ERROR, "Failed to encode parsed reason because the size of the numeric arguments (%zu bytes) exceeds the maximum size (%d bytes) of the reset reason", (uint8_t *)&v29, 0x12u);
    }
    return result;
  }
  if (v6 != v5)
  {
    if (v8 <= 1)
      v11 = 1;
    else
      v11 = (v6 - v5) >> 2;
    if (v11 >= 0x14
      && (v8 <= 1 ? (v12 = 1) : (v12 = (v6 - v5) >> 2),
          (v13 = v12 - 1, v15 = (_DWORD)v13 == -1, v14 = HIDWORD(v13), !v15) ? (v15 = v14 == 0) : (v15 = 0),
          v15 && (unint64_t)v33 - v5 + 2 >= 0x20))
    {
      v16 = v11 & 0xFFFFFFFFFFFFFFF8;
      v17 = v11 & 0xFFFFFFF8;
      v25 = (__int128 *)(v5 + 16);
      v26 = (_OWORD *)((char *)&v33[1] + 2);
      v27 = v11 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v28 = *v25;
        *(v26 - 1) = *(v25 - 1);
        *v26 = v28;
        v25 += 2;
        v26 += 2;
        v27 -= 8;
      }
      while (v27);
      if (v11 == v16)
        goto LABEL_21;
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v18 = v17 + 1;
    do
    {
      *(_DWORD *)((char *)v33 + 4 * v16 + 2) = *(_DWORD *)(v5 + 4 * v16);
      v16 = v18++;
    }
    while (v8 > v16);
  }
LABEL_21:
  if (*((_BYTE *)this + 32))
  {
    v21 = (const char *)*((_QWORD *)this + 1);
    v19 = (char *)this + 8;
    v20 = v21;
    if (v19[23] >= 0)
      v22 = v19;
    else
      v22 = v20;
    strlcpy((char *)v33 + v7 + 2, v22, 62 - v7);
  }
  v23 = v33[1];
  *(_OWORD *)a2 = v33[0];
  *(_OWORD *)(a2 + 16) = v23;
  result = *(double *)&v33[2];
  v24 = v33[3];
  *(_OWORD *)(a2 + 32) = v33[2];
  *(_OWORD *)(a2 + 48) = v24;
  *(_BYTE *)(a2 + 64) = 1;
  return result;
}

void ResetReasonEncoder::encode(const std::string::value_type *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  NSObject *v5;
  __int128 v6;
  NSObject *v7;
  __int128 v8;
  char v9;
  __int128 v10;
  NSObject *v11;
  const std::string::value_type *v12;
  void *v13;
  const std::string::value_type *v14;
  __int128 v15;
  _QWORD *v16;
  _QWORD *v17;
  void **v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  char *v22;
  int v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  size_t v29;
  void **v30;
  uint64_t v31;
  const void **v32;
  const std::string::value_type *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  void **v39;
  uint64_t *v40;
  int v41;
  const std::string::value_type *v42;
  uint64_t v43;
  void *__dst[2];
  int64_t v45;
  std::string v46;
  void *v47[2];
  __int128 v48;
  void *__p[2];
  __int128 v50;
  uint8_t v51[4];
  uint64_t *v52;
  __int16 v53;
  void **v54;
  uint8_t buf[16];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _OWORD v63[9];
  unint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v4 = 0x1ED114000uLL;
  v5 = _MergedGlobals_3;
  if (os_log_type_enabled((os_log_t)_MergedGlobals_3, OS_LOG_TYPE_DEBUG))
  {
    if (a1[23] >= 0)
      v14 = a1;
    else
      v14 = *(const std::string::value_type **)a1;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v14;
    _os_log_debug_impl(&dword_1A343C000, v5, OS_LOG_TYPE_DEBUG, "Attempting to parse and encode reason string: \"%s\"", buf, 0xCu);
  }
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)(a2 + 48) = v6;
  *(_OWORD *)(a2 + 33) = v6;
  *(_OWORD *)(a2 + 17) = v6;
  *(_OWORD *)(a2 + 1) = v6;
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 64) = 0;
  *(_OWORD *)__p = v6;
  v50 = v6;
  *(_OWORD *)v47 = v6;
  v48 = v6;
  if (a1[23] < 0)
    std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)a1, *((_QWORD *)a1 + 1));
  else
    v46 = *(std::string *)a1;
  ResetReasonEncoder::parse((uint64_t)&v46, (uint64_t)v47);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  v7 = _MergedGlobals_3;
  if (os_log_type_enabled((os_log_t)_MergedGlobals_3, OS_LOG_TYPE_DEBUG))
  {
    v42 = a1;
    v43 = a2;
    v41 = a1[23];
    v40 = *(uint64_t **)a1;
    v64 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v63[7] = v15;
    v63[8] = v15;
    v63[5] = v15;
    v63[6] = v15;
    v63[3] = v15;
    v63[4] = v15;
    v63[1] = v15;
    v63[2] = v15;
    v62 = v15;
    v63[0] = v15;
    v60 = v15;
    v61 = v15;
    v58 = v15;
    v59 = v15;
    v56 = v15;
    v57 = v15;
    *(_OWORD *)buf = v15;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"\tParsed Reason:\n", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"\t\tError Code:\t", 14);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\n", 1);
    if (LOBYTE(__p[0]))
    {
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"\t\tFree Text:\t", 13);
      if (!LOBYTE(__p[0]))
        std::__throw_bad_optional_access[abi:ne180100]();
      if (v48 >= 0)
        v18 = &v47[1];
      else
        v18 = (void **)v47[1];
      if (v48 >= 0)
        v19 = HIBYTE(v48);
      else
        v19 = v48;
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n", 1);
    }
    if ((void *)v50 != __p[1])
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"\t\tNumeric Arguments:\n", 21);
      v22 = (char *)__p[1];
      v21 = (char *)v50;
      if (__p[1] != (void *)v50)
      {
        v23 = 0;
        do
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"\t\t\t[", 4);
          v24 = (_QWORD *)std::ostream::operator<<();
          v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
          *(_DWORD *)((char *)v25 + *(_QWORD *)(*v25 - 24) + 8) = *(_DWORD *)((_BYTE *)v25
                                                                              + *(_QWORD *)(*v25 - 24)
                                                                              + 8) & 0xFFFFFFB5 | 2;
          v26 = (_QWORD *)std::ostream::operator<<();
          v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" (0x", 4);
          *(_DWORD *)((char *)v27 + *(_QWORD *)(*v27 - 24) + 8) = *(_DWORD *)((_BYTE *)v27
                                                                              + *(_QWORD *)(*v27 - 24)
                                                                              + 8) & 0xFFFFFFB5 | 8;
          v28 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)")\n", 2);
          v22 += 4;
          ++v23;
        }
        while (v22 != v21);
      }
    }
    if ((BYTE8(v62) & 0x10) != 0)
    {
      v31 = v62;
      if ((unint64_t)v62 < *((_QWORD *)&v59 + 1))
      {
        *(_QWORD *)&v62 = *((_QWORD *)&v59 + 1);
        v31 = *((_QWORD *)&v59 + 1);
      }
      v32 = (const void **)&v59;
    }
    else
    {
      if ((BYTE8(v62) & 8) == 0)
      {
        v29 = 0;
        HIBYTE(v45) = 0;
        v30 = __dst;
        goto LABEL_59;
      }
      v32 = (const void **)&v57 + 1;
      v31 = *((_QWORD *)&v58 + 1);
    }
    v34 = *v32;
    v29 = v31 - (_QWORD)*v32;
    if (v29 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v29 >= 0x17)
    {
      v35 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17)
        v35 = v29 | 7;
      v36 = v35 + 1;
      v30 = (void **)operator new(v35 + 1);
      __dst[1] = (void *)v29;
      v45 = v36 | 0x8000000000000000;
      __dst[0] = v30;
    }
    else
    {
      HIBYTE(v45) = v31 - *(_BYTE *)v32;
      v30 = __dst;
      if (!v29)
        goto LABEL_59;
    }
    memmove(v30, v34, v29);
LABEL_59:
    a2 = v43;
    v4 = 0x1ED114000;
    *((_BYTE *)v30 + v29) = 0;
    *(_QWORD *)buf = *MEMORY[0x1E0DE4F50];
    v37 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    *(_QWORD *)&v56 = v37;
    *((_QWORD *)&v56 + 1) = MEMORY[0x1E0DE4FB8] + 16;
    if (SHIBYTE(v61) < 0)
      operator delete(*((void **)&v60 + 1));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1A858F92C](v63);
    a1 = v42;
    v38 = v40;
    if (v41 >= 0)
      v38 = (uint64_t *)v42;
    v39 = __dst;
    if (v45 < 0)
      v39 = (void **)__dst[0];
    *(_DWORD *)v51 = 136315394;
    v52 = v38;
    v53 = 2080;
    v54 = v39;
    _os_log_debug_impl(&dword_1A343C000, v7, OS_LOG_TYPE_DEBUG, "Reason string \"%s\" parsed to:\n%s", v51, 0x16u);
    if (SHIBYTE(v45) < 0)
      operator delete(__dst[0]);
  }
  ResetReasonEncoder::encode((ResetReasonEncoder *)v47, (uint64_t)buf);
  v8 = v58;
  *(_OWORD *)(a2 + 32) = v57;
  *(_OWORD *)(a2 + 48) = v8;
  v9 = v59;
  *(_BYTE *)(a2 + 64) = v59;
  v10 = v56;
  *(_OWORD *)a2 = *(_OWORD *)buf;
  *(_OWORD *)(a2 + 16) = v10;
  v11 = *(NSObject **)(v4 + 2448);
  if (v9)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      if (a1[23] >= 0)
        v12 = a1;
      else
        v12 = *(const std::string::value_type **)a1;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v12;
      _os_log_debug_impl(&dword_1A343C000, v11, OS_LOG_TYPE_DEBUG, "Successfully encoded reason string: \"%s\"", buf, 0xCu);
      v13 = __p[1];
      if (!__p[1])
        goto LABEL_18;
      goto LABEL_17;
    }
LABEL_16:
    v13 = __p[1];
    if (!__p[1])
      goto LABEL_18;
    goto LABEL_17;
  }
  if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    goto LABEL_16;
  if (a1[23] >= 0)
    v33 = a1;
  else
    v33 = *(const std::string::value_type **)a1;
  *(_DWORD *)buf = 136315138;
  *(_QWORD *)&buf[4] = v33;
  _os_log_error_impl(&dword_1A343C000, v11, OS_LOG_TYPE_ERROR, "Failed to encode reason string: \"%s\"", buf, 0xCu);
  v13 = __p[1];
  if (!__p[1])
    goto LABEL_18;
LABEL_17:
  *(_QWORD *)&v50 = v13;
  operator delete(v13);
LABEL_18:
  if (LOBYTE(__p[0]))
  {
    if (SHIBYTE(v48) < 0)
      operator delete(v47[1]);
  }
}

void sub_1A3466C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  ResetReasonEncoder::ParsedReason::~ParsedReason((ResetReasonEncoder::ParsedReason *)va);
  _Unwind_Resume(a1);
}

void sub_1A3466C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  ResetReasonEncoder::ParsedReason::~ParsedReason((ResetReasonEncoder::ParsedReason *)va);
  _Unwind_Resume(a1);
}

void sub_1A3466CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1A3466CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a33);
  ResetReasonEncoder::ParsedReason::~ParsedReason((ResetReasonEncoder::ParsedReason *)&a21);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0x38E38E38E38E38FLL)
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    v5 = 72 * a3;
    v6 = operator new(72 * a3);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    while (1)
    {
      v9 = (std::string *)&v6[v7];
      v10 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v11 = *v10;
        v9->__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
      }
      v12 = &v6[v7];
      v13 = a2 + v7;
      *((_DWORD *)v12 + 6) = *(_DWORD *)(a2 + v7 + 24);
      v6[v7 + 32] = 0;
      v14 = (uint64_t)&v6[v7 + 32];
      v12[64] = 0;
      if (!*(_BYTE *)(a2 + v7 + 64))
        goto LABEL_7;
      v15 = *(_QWORD *)(v13 + 56);
      if (v15)
      {
        if (v13 + 32 == v15)
        {
          *(_QWORD *)&v6[v7 + 56] = v14;
          (*(void (**)(uint64_t))(*(_QWORD *)(v13 + 32) + 24))(v13 + 32);
          goto LABEL_6;
        }
        v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v14);
      }
      else
      {
        v8 = 0;
      }
      *(_QWORD *)&v6[v7 + 56] = v8;
LABEL_6:
      v12[64] = 1;
LABEL_7:
      v7 += 72;
      if (v5 == v7)
      {
        a1[1] = &v6[v7];
        return a1;
      }
    }
  }
  return a1;
}

void sub_1A3466E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<ResetReasonEncoder::SubmatchInfo>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_1A3466E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  if (!v11)
  {
LABEL_2:
    *(_QWORD *)(v9 + 8) = v10;
    std::__exception_guard_exceptions<std::vector<ResetReasonEncoder::SubmatchInfo>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
    _Unwind_Resume(a1);
  }
  while (1)
  {
    v13 = v10 + v11;
    if (*(_BYTE *)(v10 + v11 - 8))
    {
      v14 = *(_QWORD **)(v13 - 16);
      if ((_QWORD *)(v13 - 40) == v14)
      {
        v14 = (_QWORD *)(v13 - 40);
        v15 = 4;
        goto LABEL_9;
      }
      if (v14)
      {
        v15 = 5;
LABEL_9:
        (*(void (**)(void))(*v14 + 8 * v15))();
      }
    }
    if (*(char *)(v13 - 49) < 0)
      operator delete(*(void **)(v13 - 72));
    v11 -= 72;
    if (!v11)
      goto LABEL_2;
  }
}

void ***std::__exception_guard_exceptions<std::vector<ResetReasonEncoder::SubmatchInfo>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  uint64_t v7;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 == v3)
      {
LABEL_16:
        v2[1] = v3;
        operator delete(v5);
        return v1;
      }
      while (1)
      {
        if (*(v4 - 8))
        {
          v6 = (char *)*((_QWORD *)v4 - 2);
          if (v4 - 40 == v6)
          {
            v6 = v4 - 40;
            v7 = 4;
            goto LABEL_12;
          }
          if (v6)
          {
            v7 = 5;
LABEL_12:
            (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
          }
        }
        if (*(v4 - 49) < 0)
          operator delete(*((void **)v4 - 9));
        v4 -= 72;
        if (v4 == v3)
        {
          v5 = **v1;
          goto LABEL_16;
        }
      }
    }
  }
  return result;
}

_QWORD *std::__function::__func<$_0,std::allocator<$_0>,std::string ()(std::string,std::string)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1E4A074D0;
  return result;
}

void std::__function::__func<$_0,std::allocator<$_0>,std::string ()(std::string,std::string)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E4A074D0;
}

void std::__function::__func<$_0,std::allocator<$_0>,std::string ()(std::string,std::string)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  char *v7;
  std::sub_match<const char *> *v8;
  int v9;
  char *v10;
  void **v11;
  _BYTE *p_end_cap;
  std::vector<std::ssub_match>::pointer begin;
  std::__wrap_iter<const char *>::iterator_type i;
  const char **p_i;
  const char *v16;
  unint64_t v17;
  const char *p_p;
  char *v19;
  const char *v20;
  __int128 *v21;
  _OWORD *v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  std::__wrap_iter<const char *> v33;
  std::__wrap_iter<const char *> v34;
  int *v35;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char>::value_type *p_suffix;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v37;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v38;
  std::__wrap_iter<const char *>::iterator_type v39;
  std::__wrap_iter<const char *>::iterator_type v40;
  unint64_t v41;
  __int128 *v42;
  __int128 *v43;
  _BYTE *v44;
  __int128 *v45;
  _OWORD *v46;
  unint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  std::__shared_weak_count *cntrl;
  uint64_t *p_shared_owners;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58[2];
  uint64_t v59;
  void *v60[2];
  uint64_t v61;
  __int128 v62;
  unint64_t v63;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> v64;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> v65;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> v66;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> __p;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type __re;
  std::vector<std::ssub_match> v69[2];
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  std::locale v77[2];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *pregex;

  *(_OWORD *)v60 = *(_OWORD *)a1;
  v61 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_OWORD *)v58 = *(_OWORD *)a2;
  v59 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v81 = 0uLL;
  pregex = 0;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v79 = v4;
  v80 = v4;
  *(_OWORD *)&v77[0].__locale_ = v4;
  v78 = v4;
  v5 = std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v77, (uint64_t)v58, 0);
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v72 = 0xAAAAAAAAAAAAAA00;
  v69[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
  v75 = v6;
  v70 = 0;
  v71 = 0;
  v74 = 0;
  v73 = 0;
  LOBYTE(v75) = 0;
  BYTE8(v75) = 0;
  v76 = 0;
  memset(v69, 0, 41);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  __p.__position_.__match_.__unmatched_.second.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
  __p.__position_.__match_.__matches_.__end_ = (std::vector<std::ssub_match>::pointer)0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&__p.__position_.__match_.__prefix_.second.__i_ = v6;
  memset(&__p.__position_.__match_.__matches_.__end_cap_, 0, 17);
  memset(&__p.__position_.__match_.__unmatched_.matched, 0, 17);
  __p.__position_.__match_.__prefix_.matched = 0;
  __p.__position_.__match_.__suffix_.first.__i_ = 0;
  memset(&__p, 0, 32);
  v7 = (char *)HIBYTE(v61);
  if (v61 >= 0)
    v8 = (std::sub_match<const char *> *)v60;
  else
    v8 = (std::sub_match<const char *> *)v60[0];
  if (v61 < 0)
    v7 = (char *)v60[1];
  *(_OWORD *)((char *)&__p.__position_.__flags_ + 1) = 0uLL;
  v9 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v5, v8, (std::sub_match<const char *> *)&v7[(_QWORD)v8], (std::vector<std::csub_match> *)&__p, 0);
  v10 = (char *)HIBYTE(v61);
  if (v61 >= 0)
    v11 = v60;
  else
    v11 = (void **)v60[0];
  if (v61 < 0)
    v10 = (char *)v60[1];
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v69, (uint64_t)v11, (std::sub_match<std::__wrap_iter<const char *>> *)&v10[(_QWORD)v11], (uint64_t *)&__p, 0);
  if (__p.__position_.__begin_.__i_)
  {
    __p.__position_.__end_.__i_ = __p.__position_.__begin_.__i_;
    operator delete((void *)__p.__position_.__begin_.__i_);
  }
  if (v9)
  {
    p_end_cap = &v69[1].__end_cap_;
    if (v69[0].__end_ != v69[0].__begin_)
      p_end_cap = &v69[0].__begin_->matched;
    if (!*p_end_cap)
    {
      memset(&__p, 0, 24);
      if (SHIBYTE(pregex) < 0)
        goto LABEL_41;
      goto LABEL_42;
    }
    if (v69[0].__end_ == v69[0].__begin_)
      begin = (std::vector<std::ssub_match>::pointer)&v69[1];
    else
      begin = v69[0].__begin_;
    i = begin->first.__i_;
    p_i = &v69[0].__begin_->second.__i_;
    if (v69[0].__end_ == v69[0].__begin_)
      p_i = (const char **)&v69[1].__end_;
    v16 = *p_i;
    v17 = *p_i - i;
    if (v17 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v17 > 0x16)
    {
      v25 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17)
        v25 = v17 | 7;
      v26 = v25 + 1;
      p_p = (const char *)operator new(v25 + 1);
      __p.__position_.__pregex_ = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)(v26 | 0x8000000000000000);
      __p.__position_.__begin_.__i_ = p_p;
      __p.__position_.__end_.__i_ = (std::__wrap_iter<const char *>::iterator_type)v17;
      if (i != v16)
      {
LABEL_25:
        if (v17 < 0x20 || (unint64_t)(p_p - i) < 0x20)
        {
          v19 = (char *)p_p;
          v20 = i;
        }
        else
        {
          v19 = (char *)&p_p[v17 & 0xFFFFFFFFFFFFFFE0];
          v20 = &i[v17 & 0xFFFFFFFFFFFFFFE0];
          v21 = (__int128 *)(i + 16);
          v22 = p_p + 16;
          v23 = v17 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v24 = *v21;
            *(v22 - 1) = *(v21 - 1);
            *v22 = v24;
            v21 += 2;
            v22 += 2;
            v23 -= 32;
          }
          while (v23);
          if (v17 == (v17 & 0x7FFFFFFFFFFFFFE0))
          {
LABEL_40:
            *v19 = 0;
            if (SHIBYTE(pregex) < 0)
LABEL_41:
              operator delete((void *)v81);
LABEL_42:
            v81 = *(_OWORD *)&__p.__position_.__begin_.__i_;
            pregex = __p.__position_.__pregex_;
            goto LABEL_43;
          }
        }
        do
        {
          v27 = *v20++;
          *v19++ = v27;
        }
        while (v20 != v16);
        goto LABEL_40;
      }
    }
    else
    {
      HIBYTE(__p.__position_.__pregex_) = *(_BYTE *)p_i - (_BYTE)i;
      p_p = (const char *)&__p;
      if (i != v16)
        goto LABEL_25;
    }
    *p_p = 0;
    if (SHIBYTE(pregex) < 0)
      goto LABEL_41;
    goto LABEL_42;
  }
LABEL_43:
  *(_QWORD *)&v28 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&__re.__loop_count_ = v28;
  *(_OWORD *)&__re.__start_.__cntrl_ = v28;
  *(_OWORD *)&__re.__traits_.__loc_.__locale_ = v28;
  *(_OWORD *)&__re.__traits_.__col_ = v28;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&__re, "\\s+", 0);
  v29.first.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
  v29.second.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&__p.__position_.__match_.__prefix_.matched = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&__p.__position_.__match_.__unmatched_.matched = 0xAAAAAAAAAAAAAAAALL;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&__p.__position_.__match_.__suffix_.matched = v29;
  *((_DWORD *)&__p.__position_.__flags_ + 1) = -1431655766;
  *(_QWORD *)&__p.__suffix_.matched = 0xAAAAAAAAAAAAAA00;
  memset(&__p.__position_.__match_.__prefix_, 0, 17);
  memset(&__p.__position_.__match_.__suffix_, 0, 17);
  __p.__position_.__match_.__ready_ = 0;
  memset(&__p.__position_.__match_, 0, 41);
  memset(&__p, 0, 28);
  memset(&__p.__position_.__match_.__position_start_, 0, 32);
  memset(&__p.__n_, 0, 32);
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v66.__n_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v66.__subs_.__end_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v66.__result_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v66.__suffix_.second.__i_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v66.__position_.__match_.__suffix_.second.__i_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v66.__position_.__match_.__ready_ = v29;
  v66.__position_.__match_.__prefix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v66.__position_.__match_.__prefix_.matched = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v66.__position_.__match_.__matches_.__end_cap_.__value_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v66.__position_.__match_.__unmatched_.second.__i_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v66.__position_.__pregex_ = v29;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v66.__position_.__match_.__matches_.__begin_ = v29;
  v30 = HIBYTE(pregex);
  if (SHIBYTE(pregex) >= 0)
    v31 = (const char *)&v81;
  else
    v31 = (const char *)v81;
  if (SHIBYTE(pregex) < 0)
    v30 = *((_QWORD *)&v81 + 1);
  v32 = &v31[v30];
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v66.__position_.__begin_.__i_ = v29;
  v33.__i_ = v31;
  v34.__i_ = &v31[v30];
  std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(&v66.__position_, v33, v34, &__re, match_default);
  memset(&v66.__suffix_, 0, 17);
  memset(&v66.__n_, 0, 32);
  v35 = (int *)operator new(4uLL);
  v66.__subs_.__begin_ = v35;
  *v35 = -1;
  v66.__subs_.__end_cap_.__value_ = v35 + 1;
  v66.__subs_.__end_ = v35 + 1;
  if (v66.__position_.__match_.__matches_.__end_ == v66.__position_.__match_.__matches_.__begin_)
  {
    v66.__suffix_.matched = 1;
    p_suffix = &v66.__suffix_;
    v66.__suffix_.first.__i_ = v31;
    v66.__suffix_.second.__i_ = v32;
  }
  else
  {
    p_suffix = &v66.__position_.__match_.__prefix_;
  }
  v66.__result_ = p_suffix;
  v37.first.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
  v37.second.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v65.__position_.__begin_.__i_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v65.__position_.__pregex_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v65.__position_.__match_.__matches_.__begin_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v65.__position_.__match_.__matches_.__end_cap_.__value_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v65.__position_.__match_.__unmatched_.second.__i_ = v37;
  v65.__position_.__match_.__prefix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v65.__position_.__match_.__prefix_.matched = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v65.__position_.__match_.__suffix_.second.__i_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v65.__position_.__match_.__ready_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v65.__result_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v65.__suffix_.second.__i_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v65.__n_ = v37;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v65.__subs_.__end_ = v37;
  std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(&v65, &v66);
  std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(&v66);
  if (v65.__subs_.__begin_)
  {
    v65.__subs_.__end_ = v65.__subs_.__begin_;
    operator delete(v65.__subs_.__begin_);
  }
  if (v65.__position_.__match_.__matches_.__begin_)
  {
    v65.__position_.__match_.__matches_.__end_ = v65.__position_.__match_.__matches_.__begin_;
    operator delete(v65.__position_.__match_.__matches_.__begin_);
  }
  v38.first.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
  v38.second.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v64.__n_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v64.__subs_.__end_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v64.__result_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v64.__suffix_.second.__i_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v64.__position_.__match_.__suffix_.second.__i_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v64.__position_.__match_.__ready_ = v38;
  v64.__position_.__match_.__prefix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v64.__position_.__match_.__prefix_.matched = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v64.__position_.__match_.__matches_.__end_cap_.__value_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v64.__position_.__match_.__unmatched_.second.__i_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v64.__position_.__pregex_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v64.__position_.__match_.__matches_.__begin_ = v38;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)&v64.__position_.__begin_.__i_ = v38;
  std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(&v64, &v66);
  std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(&v66);
  if (v64.__subs_.__begin_)
  {
    v64.__subs_.__end_ = v64.__subs_.__begin_;
    operator delete(v64.__subs_.__begin_);
  }
  if (v64.__position_.__match_.__matches_.__begin_)
  {
    v64.__position_.__match_.__matches_.__end_ = v64.__position_.__match_.__matches_.__begin_;
    operator delete(v64.__position_.__match_.__matches_.__begin_);
  }
  if (!std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&__p, &v66))
  {
    if (v66.__result_->matched)
    {
      v40 = v66.__result_->first.__i_;
      v39 = v66.__result_->second.__i_;
      v41 = v39 - v66.__result_->first.__i_;
      if (v41 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v41 > 0x16)
      {
        v49 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v41 | 7) != 0x17)
          v49 = v41 | 7;
        v50 = v49 + 1;
        v42 = (__int128 *)operator new(v49 + 1);
        *((_QWORD *)&v62 + 1) = v41;
        v63 = v50 | 0x8000000000000000;
        *(_QWORD *)&v62 = v42;
        if (v40 != v39)
        {
LABEL_64:
          if (v41 < 0x20 || (unint64_t)((char *)v42 - v40) < 0x20)
          {
            v43 = v42;
            v44 = v40;
          }
          else
          {
            v43 = (__int128 *)((char *)v42 + (v41 & 0xFFFFFFFFFFFFFFE0));
            v44 = &v40[v41 & 0xFFFFFFFFFFFFFFE0];
            v45 = (__int128 *)(v40 + 16);
            v46 = v42 + 1;
            v47 = v41 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v48 = *v45;
              *(v46 - 1) = *(v45 - 1);
              *v46 = v48;
              v45 += 2;
              v46 += 2;
              v47 -= 32;
            }
            while (v47);
            if (v41 == (v41 & 0x7FFFFFFFFFFFFFE0))
              goto LABEL_77;
          }
          do
          {
            v51 = *v44++;
            *(_BYTE *)v43 = v51;
            v43 = (__int128 *)((char *)v43 + 1);
          }
          while (v44 != v39);
LABEL_77:
          *(_BYTE *)v43 = 0;
          goto LABEL_78;
        }
      }
      else
      {
        HIBYTE(v63) = (_BYTE)v39 - (unint64_t)v66.__result_->first.__i_;
        v42 = &v62;
        if (v40 != v39)
          goto LABEL_64;
      }
      *(_BYTE *)v42 = 0;
    }
    else
    {
      v62 = 0uLL;
      v63 = 0;
    }
LABEL_78:
    *(_OWORD *)a3 = v62;
    a3[2] = v63;
  }
  if (v66.__subs_.__begin_)
  {
    v66.__subs_.__end_ = v66.__subs_.__begin_;
    operator delete(v66.__subs_.__begin_);
  }
  if (v66.__position_.__match_.__matches_.__begin_)
  {
    v66.__position_.__match_.__matches_.__end_ = v66.__position_.__match_.__matches_.__begin_;
    operator delete(v66.__position_.__match_.__matches_.__begin_);
  }
  if (__p.__subs_.__begin_)
  {
    __p.__subs_.__end_ = __p.__subs_.__begin_;
    operator delete(__p.__subs_.__begin_);
  }
  if (__p.__position_.__match_.__matches_.__begin_)
  {
    __p.__position_.__match_.__matches_.__end_ = __p.__position_.__match_.__matches_.__begin_;
    operator delete(__p.__position_.__match_.__matches_.__begin_);
  }
  cntrl = __re.__start_.__cntrl_;
  if (__re.__start_.__cntrl_)
  {
    p_shared_owners = &__re.__start_.__cntrl_->__shared_owners_;
    do
      v54 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v54 - 1, (unint64_t *)p_shared_owners));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  std::locale::~locale(&__re.__traits_.__loc_);
  if (v69[0].__begin_)
  {
    v69[0].__end_ = v69[0].__begin_;
    operator delete(v69[0].__begin_);
  }
  v55 = (std::__shared_weak_count *)v80;
  if (!(_QWORD)v80)
    goto LABEL_98;
  v56 = (unint64_t *)(v80 + 8);
  do
    v57 = __ldaxr(v56);
  while (__stlxr(v57 - 1, v56));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
    std::locale::~locale(v77);
    if ((SHIBYTE(pregex) & 0x80000000) == 0)
    {
LABEL_99:
      if ((SHIBYTE(v59) & 0x80000000) == 0)
        goto LABEL_100;
      goto LABEL_104;
    }
  }
  else
  {
LABEL_98:
    std::locale::~locale(v77);
    if ((SHIBYTE(pregex) & 0x80000000) == 0)
      goto LABEL_99;
  }
  operator delete((void *)v81);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_100:
    if ((SHIBYTE(v61) & 0x80000000) == 0)
      return;
LABEL_105:
    operator delete(v60[0]);
    return;
  }
LABEL_104:
  operator delete(v58[0]);
  if (SHIBYTE(v61) < 0)
    goto LABEL_105;
}

void sub_1A3467764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  std::__shared_weak_count *v22;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;

  v24 = (void *)STACK[0x2A8];
  if (STACK[0x2A8])
  {
    STACK[0x2B0] = (unint64_t)v24;
    operator delete(v24);
    v25 = (void *)STACK[0x210];
    if (!STACK[0x210])
    {
LABEL_6:
      v26 = (void *)STACK[0x378];
      if (!STACK[0x378])
        goto LABEL_7;
      goto LABEL_12;
    }
  }
  else
  {
    v25 = (void *)STACK[0x210];
    if (!STACK[0x210])
      goto LABEL_6;
  }
  STACK[0x218] = (unint64_t)v25;
  operator delete(v25);
  v26 = (void *)STACK[0x378];
  if (!STACK[0x378])
  {
LABEL_7:
    v27 = (void *)STACK[0x2E0];
    if (!STACK[0x2E0])
      goto LABEL_8;
    goto LABEL_13;
  }
LABEL_12:
  STACK[0x380] = (unint64_t)v26;
  operator delete(v26);
  v27 = (void *)STACK[0x2E0];
  if (!STACK[0x2E0])
  {
LABEL_8:
    v28 = (std::__shared_weak_count *)STACK[0x3C0];
    if (!STACK[0x3C0])
      goto LABEL_18;
    goto LABEL_14;
  }
LABEL_13:
  STACK[0x2E8] = (unint64_t)v27;
  operator delete(v27);
  v28 = (std::__shared_weak_count *)STACK[0x3C0];
  if (!STACK[0x3C0])
    goto LABEL_18;
LABEL_14:
  p_shared_owners = (unint64_t *)&v28->__shared_owners_;
  do
    v30 = __ldaxr(p_shared_owners);
  while (__stlxr(v30 - 1, p_shared_owners));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
LABEL_18:
  std::locale::~locale((std::locale *)&STACK[0x390]);
  v31 = (void *)STACK[0x3D0];
  if (STACK[0x3D0])
  {
    STACK[0x3D8] = (unint64_t)v31;
    operator delete(v31);
    v22 = *(std::__shared_weak_count **)(v21 - 112);
    if (!v22)
      goto LABEL_24;
  }
  else
  {
    v22 = *(std::__shared_weak_count **)(v21 - 112);
    if (!v22)
      goto LABEL_24;
  }
  v32 = (unint64_t *)&v22->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_24:
  std::locale::~locale((std::locale *)(v21 - 160));
  if (*(char *)(v21 - 73) < 0)
  {
    operator delete(*(void **)(v21 - 96));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_26:
      if ((a21 & 0x80000000) == 0)
        goto LABEL_27;
      goto LABEL_30;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(a9);
  if ((a21 & 0x80000000) == 0)
LABEL_27:
    _Unwind_Resume(a1);
LABEL_30:
  operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<$_0,std::allocator<$_0>,std::string ()(std::string,std::string)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<$_0,std::allocator<$_0>,std::string ()(std::string,std::string)>::target_type()
{
}

std::regex_token_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(std::regex_token_iterator<std::__wrap_iter<const char *>, char> *this, const std::regex_token_iterator<std::__wrap_iter<const char *>, char> *a2)
{
  __int128 v4;
  std::vector<std::ssub_match>::pointer end;
  std::vector<std::ssub_match>::pointer begin;
  int64_t v7;
  std::sub_match<std::__wrap_iter<const char *>> *v8;
  size_t v9;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v10;
  __int128 v11;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v12;
  __int128 v13;
  const std::regex_token_iterator<std::__wrap_iter<const char *>, char>::value_type *v14;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v15;
  ptrdiff_t n;
  std::vector<int>::pointer v17;
  std::vector<int>::pointer v18;
  int64_t v19;
  int *v20;
  int *v21;
  unint64_t v22;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char>::value_type *p_suffix;
  char *v25;

  v4 = *(_OWORD *)&a2->__position_.__begin_.__i_;
  *(_OWORD *)((char *)&this->__position_.__end_.__i_ + 4) = *(_OWORD *)((char *)&a2->__position_.__end_.__i_ + 4);
  this->__position_.__match_.__matches_.__begin_ = 0;
  *(_OWORD *)&this->__position_.__begin_.__i_ = v4;
  this->__position_.__match_.__matches_.__end_ = 0;
  this->__position_.__match_.__matches_.__end_cap_.__value_ = 0;
  begin = a2->__position_.__match_.__matches_.__begin_;
  end = a2->__position_.__match_.__matches_.__end_;
  v7 = (char *)end - (char *)begin;
  if (end == begin)
  {
    v8 = 0;
    v25 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    v8 = (std::sub_match<std::__wrap_iter<const char *>> *)operator new(v7);
    this->__position_.__match_.__matches_.__begin_ = v8;
    this->__position_.__match_.__matches_.__end_ = v8;
    this->__position_.__match_.__matches_.__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v8 + 8 * (v7 >> 3));
    v9 = 24 * ((v7 - 24) / 0x18uLL) + 24;
    memcpy(v8, begin, v9);
    v25 = (char *)v8 + v9;
    this->__position_.__match_.__matches_.__end_ = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v8 + v9);
  }
  v10 = a2->__position_.__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  *(_OWORD *)&this->__position_.__match_.__unmatched_.matched = *(_OWORD *)&a2->__position_.__match_.__unmatched_.matched;
  this->__position_.__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v10;
  v11 = *(_OWORD *)&a2->__position_.__match_.__prefix_.second.__i_;
  v12 = a2->__position_.__match_.__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  v13 = *(_OWORD *)&a2->__position_.__match_.__suffix_.matched;
  this->__position_.__match_.__position_start_.__i_ = a2->__position_.__match_.__position_start_.__i_;
  *(_OWORD *)&this->__position_.__match_.__suffix_.matched = v13;
  this->__position_.__match_.__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v12;
  *(_OWORD *)&this->__position_.__match_.__prefix_.second.__i_ = v11;
  v14 = a2->__result_;
  this->__result_ = v14;
  v15 = a2->__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  *(_QWORD *)&this->__suffix_.matched = *(_QWORD *)&a2->__suffix_.matched;
  this->__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v15;
  n = a2->__n_;
  this->__subs_.__begin_ = 0;
  this->__n_ = n;
  this->__subs_.__end_ = 0;
  this->__subs_.__end_cap_.__value_ = 0;
  v18 = a2->__subs_.__begin_;
  v17 = a2->__subs_.__end_;
  v19 = (char *)v17 - (char *)v18;
  if (v17 == v18)
  {
    v20 = 0;
    if (a2->__result_ != &a2->__suffix_)
      goto LABEL_8;
LABEL_14:
    p_suffix = &this->__suffix_;
LABEL_16:
    this->__result_ = p_suffix;
    return this;
  }
  if (v19 < 0)
    std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
  v20 = (int *)operator new((char *)v17 - (char *)v18);
  this->__subs_.__begin_ = v20;
  this->__subs_.__end_ = v20;
  v21 = &v20[v19 >> 2];
  this->__subs_.__end_cap_.__value_ = v21;
  memcpy(v20, v18, v19);
  this->__subs_.__end_ = v21;
  if (a2->__result_ == &a2->__suffix_)
    goto LABEL_14;
LABEL_8:
  if (v14)
  {
    v22 = v20[n];
    if ((_DWORD)v22 == -1)
    {
      p_suffix = &this->__position_.__match_.__prefix_;
    }
    else if (0xAAAAAAAAAAAAAAABLL * ((v25 - (char *)v8) >> 3) <= v22)
    {
      p_suffix = &this->__position_.__match_.__unmatched_;
    }
    else
    {
      p_suffix = &v8[(int)v22];
    }
    goto LABEL_16;
  }
  return this;
}

void sub_1A3467C10(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v1;
  if (*v1)
  {
    *(_QWORD *)(v2 + 192) = v5;
    operator delete(v5);
  }
  v6 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ResetReasonEncoder::Mapping>,ResetReasonEncoder::Mapping*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  void ***v2;
  void ***v3;
  void **v4;
  void **v5;
  char *v7;
  char *v8;
  void *v9;
  char *v10;
  uint64_t v11;
  void **v12;

  if (*(_BYTE *)(a1 + 24))
    return a1;
  v2 = *(void ****)(a1 + 8);
  v3 = *(void ****)(a1 + 16);
  v4 = *v2;
  v5 = *v3;
  if (*v3 == *v2)
    return a1;
  do
  {
    v7 = (char *)*(v5 - 3);
    if (!v7)
      goto LABEL_19;
    v8 = (char *)*(v5 - 2);
    v9 = *(v5 - 3);
    if (v8 != v7)
    {
      while (1)
      {
        if (*(v8 - 8))
        {
          v10 = (char *)*((_QWORD *)v8 - 2);
          if (v8 - 40 == v10)
          {
            v10 = v8 - 40;
            v11 = 4;
            goto LABEL_14;
          }
          if (v10)
          {
            v11 = 5;
LABEL_14:
            (*(void (**)(void))(*(_QWORD *)v10 + 8 * v11))();
          }
        }
        if (*(v8 - 49) < 0)
          operator delete(*((void **)v8 - 9));
        v8 -= 72;
        if (v8 == v7)
        {
          v9 = *(v5 - 3);
          break;
        }
      }
    }
    *(v5 - 2) = v7;
    operator delete(v9);
LABEL_19:
    v12 = v5 - 7;
    if (*((char *)v5 - 33) < 0)
      operator delete(*v12);
    v5 -= 7;
  }
  while (v12 != v4);
  return a1;
}

_QWORD *std::vector<ResetReasonEncoder::SubmatchInfo>::__init_with_size[abi:ne180100]<ResetReasonEncoder::SubmatchInfo*,ResetReasonEncoder::SubmatchInfo*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;

  if (a4)
  {
    if (a4 >= 0x38E38E38E38E38FLL)
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    v7 = result;
    result = operator new(72 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[9 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = std::construct_at[abi:ne180100]<ResetReasonEncoder::SubmatchInfo,ResetReasonEncoder::SubmatchInfo&,ResetReasonEncoder::SubmatchInfo*>((std::string *)&v8[v9 / 8], (__int128 *)(a2 + v9));
        v9 += 72;
      }
      while (a2 + v9 != a3);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v7[1] = v8;
  }
  return result;
}

void sub_1A3467DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<ResetReasonEncoder::SubmatchInfo>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_1A3467E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  if (!v11)
  {
LABEL_2:
    *(_QWORD *)(v9 + 8) = v10;
    std::__exception_guard_exceptions<std::vector<ResetReasonEncoder::SubmatchInfo>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
    _Unwind_Resume(a1);
  }
  while (1)
  {
    v13 = v10 + v11;
    if (*(_BYTE *)(v10 + v11 - 8))
    {
      v14 = *(_QWORD **)(v13 - 16);
      if ((_QWORD *)(v13 - 40) == v14)
      {
        v14 = (_QWORD *)(v13 - 40);
        v15 = 4;
        goto LABEL_9;
      }
      if (v14)
      {
        v15 = 5;
LABEL_9:
        (*(void (**)(void))(*v14 + 8 * v15))();
      }
    }
    if (*(char *)(v13 - 49) < 0)
      operator delete(*(void **)(v13 - 72));
    v11 -= 72;
    if (!v11)
      goto LABEL_2;
  }
}

std::string *std::construct_at[abi:ne180100]<ResetReasonEncoder::SubmatchInfo,ResetReasonEncoder::SubmatchInfo&,ResetReasonEncoder::SubmatchInfo*>(std::string *this, __int128 *a2)
{
  __int128 v4;
  int v5;
  std::string::size_type v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_DWORD *)a2 + 6);
  this[1].__r_.__value_.__s.__data_[8] = 0;
  LODWORD(this[1].__r_.__value_.__l.__data_) = v5;
  this[2].__r_.__value_.__s.__data_[16] = 0;
  if (*((_BYTE *)a2 + 64))
  {
    v6 = *((_QWORD *)a2 + 7);
    if (v6)
    {
      if ((__int128 *)v6 == a2 + 2)
      {
        this[2].__r_.__value_.__l.__size_ = (std::string::size_type)&this[1].__r_.__value_.__l.__size_;
        (*(void (**)(_QWORD, std::string::size_type *))(**((_QWORD **)a2 + 7) + 24))(*((_QWORD *)a2 + 7), &this[1].__r_.__value_.__l.__size_);
        goto LABEL_10;
      }
      v6 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v6 + 16))(v6);
    }
    this[2].__r_.__value_.__l.__size_ = v6;
LABEL_10:
    this[2].__r_.__value_.__s.__data_[16] = 1;
  }
  return this;
}

void sub_1A3467F34(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  if (!*(_BYTE *)(v1 + 64))
    goto LABEL_7;
  v4 = *(_QWORD **)(v1 + 56);
  if (v4 == v2)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_7;
    v5 = 5;
    v2 = *(_QWORD **)(v1 + 56);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
LABEL_7:
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::vector<ResetReasonEncoder::Mapping>::__clear[abi:ne180100]()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  void **v7;

  v0 = qword_1ED114998;
  v1 = qword_1ED1149A0;
  if (qword_1ED1149A0 == qword_1ED114998)
    goto LABEL_2;
  do
  {
    v2 = *(_QWORD *)(v1 - 24);
    if (!v2)
      goto LABEL_18;
    v3 = *(_QWORD *)(v1 - 16);
    v4 = *(void **)(v1 - 24);
    if (v3 != v2)
    {
      while (1)
      {
        if (*(_BYTE *)(v3 - 8))
        {
          v5 = *(_QWORD **)(v3 - 16);
          if ((_QWORD *)(v3 - 40) == v5)
          {
            v5 = (_QWORD *)(v3 - 40);
            v6 = 4;
            goto LABEL_13;
          }
          if (v5)
          {
            v6 = 5;
LABEL_13:
            (*(void (**)(void))(*v5 + 8 * v6))();
          }
        }
        if (*(char *)(v3 - 49) < 0)
          operator delete(*(void **)(v3 - 72));
        v3 -= 72;
        if (v3 == v2)
        {
          v4 = *(void **)(v1 - 24);
          break;
        }
      }
    }
    *(_QWORD *)(v1 - 16) = v2;
    operator delete(v4);
LABEL_18:
    v7 = (void **)(v1 - 56);
    if (*(char *)(v1 - 33) < 0)
      operator delete(*v7);
    v1 -= 56;
  }
  while (v7 != (void **)v0);
LABEL_2:
  qword_1ED1149A0 = v0;
}

_QWORD *std::__optional_storage_base<std::function<std::string ()(std::string,std::string)>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::function<std::string ()(std::string,std::string)>,false> const&>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[4];

  v2 = result;
  v11[3] = *MEMORY[0x1E0C80C00];
  if (*((unsigned __int8 *)result + 32) == *((unsigned __int8 *)a2 + 32))
  {
    if (!*((_BYTE *)result + 32))
      return result;
    v3 = (_QWORD *)a2[3];
    if (v3)
    {
      if (v3 == a2)
      {
        v10 = v9;
        (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v9);
      }
      else
      {
        v10 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
      }
    }
    else
    {
      v10 = 0;
    }
    if (v9 != v2)
    {
      v5 = v10;
      v6 = (_QWORD *)v2[3];
      if (v10 == v9)
      {
        if (v6 != v2)
        {
          (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v2);
          (*(void (**)(_QWORD *))(*v10 + 32))(v10);
          v10 = (_QWORD *)v2[3];
          v7 = v10;
          v2[3] = v2;
          result = v7;
          if (v7 == v9)
            goto LABEL_34;
          goto LABEL_29;
        }
        memset(v11, 170, 24);
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v11);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)v2[3] + 24))(v2[3], v9);
        (*(void (**)(_QWORD))(*(_QWORD *)v2[3] + 32))(v2[3]);
        v2[3] = 0;
        v10 = v9;
        (*(void (**)(_QWORD *, _QWORD *))(v11[0] + 24))(v11, v2);
        (*(void (**)(_QWORD *))(v11[0] + 32))(v11);
        v2[3] = v2;
        result = v10;
        if (v10 != v9)
          goto LABEL_29;
LABEL_34:
        v8 = 4;
        result = v9;
        return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
      }
      if (v6 != v2)
      {
        v10 = (_QWORD *)v2[3];
        v2[3] = v5;
        result = v6;
        if (v6 == v9)
          goto LABEL_34;
LABEL_29:
        if (!result)
          return result;
        v8 = 5;
        return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
      }
      (*(void (**)(_QWORD *, _QWORD *))(*v2 + 24))(v2, v9);
      (*(void (**)(_QWORD))(*(_QWORD *)v2[3] + 32))(v2[3]);
      v2[3] = v10;
      v10 = v9;
    }
    result = v10;
    if (v10 != v9)
      goto LABEL_29;
    goto LABEL_34;
  }
  if (*((_BYTE *)result + 32))
  {
    result = (_QWORD *)result[3];
    if (result == v2)
    {
      v4 = 4;
      result = v2;
    }
    else
    {
      if (!result)
      {
LABEL_16:
        *((_BYTE *)v2 + 32) = 0;
        return result;
      }
      v4 = 5;
    }
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
    goto LABEL_16;
  }
  result = (_QWORD *)a2[3];
  if (result)
  {
    if (result == a2)
    {
      v2[3] = v2;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v2);
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
      v2[3] = result;
    }
  }
  else
  {
    v2[3] = 0;
  }
  *((_BYTE *)v2 + 32) = 1;
  return result;
}

void sub_1A3468328(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5048] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E90], MEMORY[0x1E0DE4380]);
}

uint64_t std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  char *v8;
  __int128 *v9;
  _OWORD *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  _QWORD *v16;
  unsigned int v17;
  char v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _BYTE *v23;
  char *v24;
  __int128 *v25;
  _OWORD *v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  int v32;
  void *v33;
  size_t v34;
  _QWORD *v35;
  size_t v36;
  _QWORD *v37;
  size_t v38;
  unsigned int v39;
  unsigned int v40;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  unint64_t v46;
  int64_t v47;

  if (!*((_BYTE *)a1 + 16))
  {
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (*((_BYTE *)a2 + 16))
      goto LABEL_21;
    goto LABEL_17;
  }
  v4 = *a1;
  v3 = (char *)a1[1];
  v5 = (unint64_t)&v3[-*a1];
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    HIBYTE(v47) = (_BYTE)v3 - *(_BYTE *)a1;
    v6 = &v45;
    if ((char *)v4 != v3)
      goto LABEL_5;
    goto LABEL_16;
  }
  v13 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v13 = v5 | 7;
  v14 = v13 + 1;
  v6 = operator new(v13 + 1);
  v46 = v5;
  v47 = v14 | 0x8000000000000000;
  v45 = v6;
  if ((char *)v4 == v3)
  {
LABEL_16:
    *v6 = 0;
    if (*((_BYTE *)a2 + 16))
      goto LABEL_21;
LABEL_17:
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    goto LABEL_37;
  }
LABEL_5:
  if (v5 < 0x20 || (unint64_t)&v6[-v4] < 0x20)
  {
    v7 = v6;
    v8 = (char *)v4;
    do
    {
LABEL_19:
      v18 = *v8++;
      *v7++ = v18;
    }
    while (v8 != v3);
    goto LABEL_20;
  }
  v7 = &v6[v5 & 0xFFFFFFFFFFFFFFE0];
  v8 = (char *)(v4 + (v5 & 0xFFFFFFFFFFFFFFE0));
  v9 = (__int128 *)(v4 + 16);
  v10 = v6 + 16;
  v11 = v5 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v12 = *v9;
    *(v10 - 1) = *(v9 - 1);
    *v10 = v12;
    v9 += 2;
    v10 += 2;
    v11 -= 32;
  }
  while (v11);
  if (v5 != (v5 & 0x7FFFFFFFFFFFFFE0))
    goto LABEL_19;
LABEL_20:
  *v7 = 0;
  if (!*((_BYTE *)a2 + 16))
    goto LABEL_17;
LABEL_21:
  v20 = *a2;
  v19 = (char *)a2[1];
  v21 = (unint64_t)&v19[-*a2];
  if (v21 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v21 > 0x16)
  {
    v29 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v29 = v21 | 7;
    v30 = v29 + 1;
    v22 = operator new(v29 + 1);
    v43 = v21;
    v44 = v30 | 0x8000000000000000;
    v42 = v22;
    if ((char *)v20 != v19)
      goto LABEL_24;
LABEL_33:
    v23 = v22;
    goto LABEL_36;
  }
  HIBYTE(v44) = (_BYTE)v19 - *(_BYTE *)a2;
  v22 = &v42;
  if ((char *)v20 == v19)
    goto LABEL_33;
LABEL_24:
  if (v21 < 0x20 || (unint64_t)v22 - v20 < 0x20)
  {
    v23 = v22;
    v24 = (char *)v20;
  }
  else
  {
    v23 = (char *)v22 + (v21 & 0xFFFFFFFFFFFFFFE0);
    v24 = (char *)(v20 + (v21 & 0xFFFFFFFFFFFFFFE0));
    v25 = (__int128 *)(v20 + 16);
    v26 = v22 + 2;
    v27 = v21 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v28 = *v25;
      *(v26 - 1) = *(v25 - 1);
      *v26 = v28;
      v25 += 2;
      v26 += 2;
      v27 -= 32;
    }
    while (v27);
    if (v21 == (v21 & 0x7FFFFFFFFFFFFFE0))
      goto LABEL_36;
  }
  do
  {
    v31 = *v24++;
    *v23++ = v31;
  }
  while (v24 != v19);
LABEL_36:
  *v23 = 0;
  v17 = HIBYTE(v44);
  v16 = v42;
  v15 = v43;
LABEL_37:
  v32 = SHIBYTE(v47);
  v33 = v45;
  if (v47 >= 0)
    v34 = HIBYTE(v47);
  else
    v34 = v46;
  if (v47 >= 0)
    v35 = &v45;
  else
    v35 = v45;
  if ((v17 & 0x80u) == 0)
    v36 = v17;
  else
    v36 = v15;
  if ((v17 & 0x80u) == 0)
    v37 = &v42;
  else
    v37 = v16;
  if (v36 >= v34)
    v38 = v34;
  else
    v38 = v36;
  v39 = memcmp(v35, v37, v38);
  if ((v17 & 0x80) != 0)
  {
    operator delete(v16);
    if ((v32 & 0x80000000) == 0)
      goto LABEL_54;
  }
  else if ((v32 & 0x80000000) == 0)
  {
    goto LABEL_54;
  }
  operator delete(v33);
LABEL_54:
  v40 = v36 < v34;
  if (v34 < v36)
    v40 = -1;
  if (v39)
    return v39;
  else
    return v40;
}

void sub_1A3468628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  void *v1;

  std::exception::~exception(this);
  operator delete(v1);
}

std::regex_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(std::regex_iterator<std::__wrap_iter<const char *>, char> *this)
{
  std::sub_match<std::__wrap_iter<const char *>> *begin;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::value_type *p_match;
  int i;
  unsigned __int32 flags;
  std::match_results<std::__wrap_iter<const char *>>::value_type *p_unmatched;
  std::sub_match<const char *> *v7;
  const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *pregex;
  std::sub_match<const char *> *v9;
  __int128 v10;
  char v11;
  std::sub_match<const char *> *v13;
  const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *v14;
  __int128 v15;
  char v16;
  _BYTE __p[40];
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  p_match = &this->__match_;
  begin = this->__match_.__matches_.__begin_;
  i = (int)p_match[-1].__position_start_.__i_;
  flags = i | 0x800;
  LODWORD(p_match[-1].__position_start_.__i_) = i | 0x800;
  if (p_match->__matches_.__end_ == begin)
    p_unmatched = &p_match->__unmatched_;
  else
    p_unmatched = begin;
  v7 = (std::sub_match<const char *> *)p_unmatched->second.__i_;
  if ((std::sub_match<const char *> *)p_unmatched->first.__i_ != v7)
  {
LABEL_5:
    this->__flags_ = flags | 0x80;
    v9 = (std::sub_match<const char *> *)this->__end_.__i_;
    pregex = this->__pregex_;
    *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v18 = 0xAAAAAAAAAAAAAAAALL;
    v20 = 0xAAAAAAAAAAAAAA00;
    v22 = v10;
    v19 = 0;
    v21 = 0uLL;
    LOBYTE(v22) = 0;
    BYTE8(v22) = 0;
    v23 = 0;
    memset(__p, 0, sizeof(__p));
    v11 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)pregex, v7, v9, (std::vector<std::csub_match> *)__p, flags | 0x80);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&p_match->__matches_, (uint64_t)v7, (std::sub_match<std::__wrap_iter<const char *>> *)v9, (uint64_t *)__p, (flags & 0x800) != 0);
    if (*(_QWORD *)__p)
    {
      *(_QWORD *)&__p[8] = *(_QWORD *)__p;
      operator delete(*(void **)__p);
    }
    if ((v11 & 1) == 0)
    {
      begin = p_match->__matches_.__begin_;
      if (!p_match->__matches_.__begin_)
      {
LABEL_10:
        this->__match_.__ready_ = 0;
        *(_OWORD *)&p_match->__matches_.__begin_ = 0u;
        *(_OWORD *)&p_match->__matches_.__end_cap_.__value_ = 0u;
        *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)((char *)&p_match->__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>
                                                                                     + 1) = 0u;
        this->__match_.__prefix_.first.__i_ = 0;
        this->__match_.__prefix_.second.__i_ = 0;
        this->__match_.__prefix_.matched = 0;
        this->__match_.__suffix_.first.__i_ = 0;
        this->__match_.__suffix_.second.__i_ = 0;
        this->__match_.__suffix_.matched = 0;
        this->__match_.__position_start_.__i_ = 0;
        return this;
      }
LABEL_9:
      this->__match_.__matches_.__end_ = begin;
      operator delete(begin);
      p_match->__matches_.__begin_ = 0;
      p_match->__matches_.__end_ = 0;
      p_match->__matches_.__end_cap_.__value_ = 0;
      goto LABEL_10;
    }
    return this;
  }
  v13 = (std::sub_match<const char *> *)this->__end_.__i_;
  if (v13 == v7)
  {
    if (!begin)
      goto LABEL_10;
    goto LABEL_9;
  }
  v14 = this->__pregex_;
  *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v18 = 0xAAAAAAAAAAAAAAAALL;
  v20 = 0xAAAAAAAAAAAAAA00;
  v22 = v15;
  v19 = 0;
  v21 = 0uLL;
  LOBYTE(v22) = 0;
  BYTE8(v22) = 0;
  v23 = 0;
  memset(__p, 0, sizeof(__p));
  v16 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v14, v7, v13, (std::vector<std::csub_match> *)__p, i | 0x860u);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&p_match->__matches_, (uint64_t)v7, (std::sub_match<std::__wrap_iter<const char *>> *)v13, (uint64_t *)__p, 1);
  if (*(_QWORD *)__p)
  {
    *(_QWORD *)&__p[8] = *(_QWORD *)__p;
    operator delete(*(void **)__p);
  }
  if ((v16 & 1) == 0)
  {
    v7 = (std::sub_match<const char *> *)((char *)v7 + 1);
    flags = this->__flags_;
    goto LABEL_5;
  }
  return this;
}

void sub_1A346885C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _GLOBAL__sub_I_ResetReasonEncoder_cpp()
{
  char *v0;
  char *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  std::string *v6;
  char **v7;
  __int128 v8;
  std::string::value_type v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  void **v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *__p[2];
  char v44;
  int v45;
  _BYTE v46[24];
  _BYTE *v47;
  char v48;
  void *v49[2];
  char v50;
  int v51;
  _BYTE v52[24];
  _BYTE *v53;
  char v54;
  void *v55;
  __int128 v56;
  int v57;
  _QWORD v58[2];
  _QWORD *v59;
  char v60;
  void *v61[3];
  int v62;
  _BYTE v63[17];
  _BYTE *v64;
  char v65;
  void *v66;
  __int128 v67;
  int v68;
  _BYTE v69[9];
  _BYTE *v70;
  char v71;
  void *v72;
  __int128 v73;
  int v74;
  _BYTE v75[24];
  _BYTE *v76;
  char v77;
  void *v78;
  __int128 v79;
  int v80;
  _BYTE v81[9];
  _BYTE *v82;
  char v83;
  void *v84;
  __int128 v85;
  int v86;
  _BYTE v87[24];
  _BYTE *v88;
  char v89;
  void *v90;
  __int128 v91;
  int v92;
  _BYTE v93[24];
  _BYTE *v94;
  char v95;
  void *v96;
  uint64_t v97;
  unint64_t v98;
  int v99;
  _BYTE v100[24];
  _BYTE *v101;
  char v102;
  void *v103;
  __int128 v104;
  int v105;
  _BYTE v106[24];
  _BYTE *v107;
  char v108;
  void *v109;
  __int128 v110;
  int v111;
  char v112;
  char *v113;
  char v114;
  void *v115[3];
  int v116;
  _BYTE v117[24];
  _BYTE *v118;
  char v119;
  void *v120[2];
  char v121;
  int v122;
  _BYTE v123[24];
  _BYTE *v124;
  char v125;
  char *v126;
  __int128 v127;
  _BYTE v128[8];
  uint64_t v129;
  _QWORD v130[2];
  char *v131;
  __int128 v132;
  char v133;
  _QWORD v134[3];
  char *v135;
  __int128 v136;
  char v137;
  uint64_t v138;
  char *v139;
  __int128 v140;
  char v141;
  _QWORD v142[3];
  char *v143;
  __int128 v144;
  char v145;
  uint64_t v146;
  char *v147;
  __int128 v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  __int128 v161;
  char v162;
  _QWORD v163[6];
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  __int128 v169;
  char v170;
  _QWORD v171[3];
  char v172[23];
  __int16 v173;
  _QWORD v174[3];
  char v175[23];
  __int16 v176;
  _QWORD v177[3];
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&_MergedGlobals_3, "com.apple.telephony.abm", "ResetReasonEncoder");
  v126 = (char *)operator new(0x48uLL);
  v127 = xmmword_1A357F760;
  strcpy(v126, "AP forced coredump via SPMI - Please analyze reason from AP perspective");
  v128[0] = 0;
  v130[1] = 0;
  v129 = 0;
  v130[0] = 0;
  v131 = (char *)operator new(0x60uLL);
  v132 = xmmword_1A357F770;
  strcpy(v131, "ARI_CLI_ERR - All transaction IDs exhausted for msg\\(.*\\), for client\\(0[xX][0-9a-fA-F]+\\)");
  v133 = 1;
  strcpy((char *)v115, "(msg\\(|\\), for client)");
  HIBYTE(v115[2]) = 22;
  v116 = 0;
  v117[0] = 0;
  v119 = 0;
  v121 = 12;
  strcpy((char *)v120, "for client\\(");
  v122 = 2;
  v123[0] = 0;
  v125 = 0;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](v134, (uint64_t)v115, 2uLL);
  v135 = (char *)operator new(0x50uLL);
  v136 = xmmword_1A357F780;
  strcpy(v135, "ARI_CLI_ERR - Tracking receipt of unrecognized transaction 0[xX][0-9a-fA-F]+");
  v137 = 2;
  v109 = operator new(0x40uLL);
  v110 = xmmword_1A357F790;
  strcpy((char *)v109, "ARI_CLI_ERR - Tracking receipt of unrecognized transaction ");
  v111 = 2;
  v112 = 0;
  v114 = 0;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](&v138, (uint64_t)&v109, 1uLL);
  v139 = (char *)operator new(0xA8uLL);
  v140 = xmmword_1A357F7A0;
  strcpy(v139, "ARI_TIMEOUT - [0-9a-zA-Z]+, client [<>=]{1,2} (AP|BB)\\([a-zA-Z\\.]+\\) [0-9a-zA-Z]+\\([0-9]+-[0-9a-fA-F]+\\) SZ\\([0-9]+\\) TRX\\(0x[0-9a-f]+\\) AP\\.SEQ\\(0x[0-9a-f]+\\).*");
  v141 = 3;
  v72 = operator new(0xB0uLL);
  v73 = xmmword_1A357F7B0;
  strcpy((char *)v72, "(ARI_TIMEOUT - [0-9a-zA-Z]+, client [<>=]{1,2} (AP|BB)\\(([a-zA-Z]+\\.){0,}|\\) [0-9a-zA-Z]+\\([0-9]+-[0-9a-fA-F]+\\) SZ\\([0-9]+\\) TRX\\(0x[0-9a-f]+\\) AP\\.SEQ\\(0x[0-9a-f]+\\).*)");
  v74 = 0;
  v75[0] = 0;
  v77 = 0;
  v78 = operator new(0x68uLL);
  v79 = xmmword_1A357F7C0;
  strcpy((char *)v78, "ARI_TIMEOUT - [0-9a-zA-Z]+, client [<>=]{1,2} (AP|BB)\\([a-zA-Z\\.]+\\) [0-9a-zA-Z]+\\(|-[0-9a-fA-F]+\\).*");
  v80 = 1;
  v81[0] = 0;
  v83 = 0;
  v84 = operator new(0x60uLL);
  v85 = xmmword_1A357F7D0;
  strcpy((char *)v84, "ARI_TIMEOUT - [0-9a-zA-Z]+, client [<>=]{1,2} (AP|BB)\\([a-zA-Z\\.]+\\) [0-9a-zA-Z]+\\([0-9]+-|\\).*");
  v86 = 2;
  v87[0] = 0;
  v89 = 0;
  v90 = operator new(0xA0uLL);
  v91 = xmmword_1A357F7E0;
  strcpy((char *)v90, "ARI_TIMEOUT - [0-9a-zA-Z]+, client [<>=]{1,2} (AP|BB)\\([a-zA-Z\\.]+\\) [0-9a-zA-Z]+\\([0-9]+-[0-9a-fA-F]+\\) SZ\\(|\\) TRX\\(0x[0-9a-f]+\\) AP\\.SEQ\\(0x[0-9a-f]+\\).*");
  v92 = 1;
  v93[0] = 0;
  v95 = 0;
  v98 = 0x8000000000000098;
  v96 = operator new(0x98uLL);
  v97 = 151;
  strcpy((char *)v96, "ARI_TIMEOUT - [0-9a-zA-Z]+, client [<>=]{1,2} (AP|BB)\\([a-zA-Z\\.]+\\) [0-9a-zA-Z]+\\([0-9]+-[0-9a-fA-F]+\\) SZ\\([0-9]+\\) TRX\\(|\\) AP\\.SEQ\\(0x[0-9a-f]+\\).*");
  v99 = 2;
  v100[0] = 0;
  v102 = 0;
  v103 = operator new(0x98uLL);
  v104 = xmmword_1A357F7F0;
  strcpy((char *)v103, "ARI_TIMEOUT - [0-9a-zA-Z]+, client [<>=]{1,2} (AP|BB)\\([a-zA-Z\\.]+\\) [0-9a-zA-Z]+\\([0-9]+-[0-9a-fA-F]+\\) SZ\\([0-9]+\\) TRX\\(0x[0-9a-f]+\\) AP\\.SEQ\\(|\\).*");
  v105 = 2;
  v106[0] = 0;
  v108 = 0;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](v142, (uint64_t)&v72, 6uLL);
  v143 = (char *)operator new(0x40uLL);
  v144 = xmmword_1A357F800;
  strcpy(v143, "Baseband got stuck in data context .* state: resetting baseband");
  v145 = 4;
  v66 = operator new(0x48uLL);
  v67 = xmmword_1A357F810;
  strcpy((char *)v66, "(Baseband got stuck in data context | state: resetting baseband)");
  v68 = 0;
  v69[0] = 0;
  v71 = 0;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](&v146, (uint64_t)&v66, 1uLL);
  v147 = (char *)operator new(0x20uLL);
  v148 = xmmword_1A357F820;
  strcpy(v147, "Baseband ARI engage timeout");
  v149 = 5;
  v152 = 0;
  v150 = 0;
  v151 = 0;
  v0 = (char *)operator new(0x38uLL);
  v155 = 0x8000000000000038;
  v153 = v0;
  v154 = 55;
  strcpy(v0, "Failed to open transport to communicate with baseband.*");
  v156 = 6;
  v159 = 0;
  v157 = 0;
  v158 = 0;
  v160 = (char *)operator new(0x20uLL);
  v161 = xmmword_1A357F050;
  strcpy(v160, "PCI-EVENT: pci error: .*");
  v162 = 7;
  strcpy((char *)v61, "PCI-EVENT: pci error: ");
  HIBYTE(v61[2]) = 22;
  v62 = 0;
  v63[0] = 0;
  v65 = 0;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](v163, (uint64_t)v61, 1uLL);
  v1 = (char *)operator new(0x40uLL);
  v163[5] = 0x8000000000000040;
  v163[3] = v1;
  v163[4] = 62;
  strcpy(v1, "filesystem flush operation failed -- check ARI and BB state --");
  v164 = 8;
  v167 = 0;
  v165 = 0;
  v166 = 0;
  v168 = (char *)operator new(0x20uLL);
  v169 = xmmword_1A357F830;
  strcpy(v168, "modem boot up failure \\[.+\\]");
  v170 = 9;
  v55 = operator new(0x19uLL);
  v56 = xmmword_1A357F840;
  strcpy((char *)v55, "BBUpdater error  [0-9]+");
  v57 = 1;
  v2 = v58;
  v58[0] = off_1E4A074D0;
  v59 = v58;
  v60 = 1;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](v171, (uint64_t)&v55, 1uLL);
  v173 = 2574;
  strcpy(v172, "^\\[abmtool\\].*");
  v50 = 13;
  strcpy((char *)v49, "^\\[abmtool\\] ");
  v51 = 0;
  v52[0] = 0;
  v54 = 0;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](v174, (uint64_t)v49, 1uLL);
  v176 = 2829;
  strcpy(v175, "^\\[bbutil\\].*");
  v44 = 12;
  strcpy((char *)__p, "^\\[bbutil\\] ");
  v45 = 0;
  v3 = v46;
  v46[0] = 0;
  v48 = 0;
  std::vector<ResetReasonEncoder::SubmatchInfo>::vector[abi:ne180100](v177, (uint64_t)__p, 1uLL);
  qword_1ED114998 = 0;
  qword_1ED1149A0 = 0;
  qword_1ED1149A8 = 0;
  v4 = 0;
  qword_1ED114998 = (uint64_t)operator new(0x2A0uLL);
  qword_1ED1149A0 = qword_1ED114998;
  qword_1ED1149A8 = qword_1ED114998 + 672;
  v5 = &v178;
  v42 = qword_1ED114998;
  v6 = (std::string *)qword_1ED114998;
  do
  {
    v7 = &(&v126)[v4];
    if ((char)v128[v4 * 8 - 1] < 0)
    {
      std::string::__init_copy_ctor_external(v6, *v7, (std::string::size_type)v7[1]);
    }
    else
    {
      v8 = *(_OWORD *)v7;
      v6->__r_.__value_.__r.__words[2] = (std::string::size_type)v7[2];
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v8;
    }
    v9 = v128[v4 * 8];
    v6[1].__r_.__value_.__l.__size_ = 0;
    v6[1].__r_.__value_.__s.__data_[0] = v9;
    v6[1].__r_.__value_.__r.__words[2] = 0;
    v6[2].__r_.__value_.__r.__words[0] = 0;
    std::vector<ResetReasonEncoder::SubmatchInfo>::__init_with_size[abi:ne180100]<ResetReasonEncoder::SubmatchInfo*,ResetReasonEncoder::SubmatchInfo*>(&v6[1].__r_.__value_.__l.__size_, v130[v4 - 1], v130[v4], 0x8E38E38E38E38E39 * ((v130[v4] - v130[v4 - 1]) >> 3));
    v6 = (std::string *)(v42 + 56);
    v42 += 56;
    v4 += 7;
  }
  while (v4 != 84);
  qword_1ED1149A0 = (uint64_t)v6;
  v10 = v117;
  v11 = v93;
  v13 = v69;
  v12 = v106;
  do
  {
    v14 = *(v5 - 3);
    if (!v14)
      goto LABEL_22;
    v15 = *(v5 - 2);
    v16 = (void *)*(v5 - 3);
    if (v15 != v14)
    {
      while (1)
      {
        if (*(_BYTE *)(v15 - 8))
        {
          v17 = *(_QWORD **)(v15 - 16);
          if ((_QWORD *)(v15 - 40) == v17)
          {
            v17 = (_QWORD *)(v15 - 40);
            v18 = 4;
            goto LABEL_17;
          }
          if (v17)
          {
            v18 = 5;
LABEL_17:
            (*(void (**)(void))(*v17 + 8 * v18))();
          }
        }
        if (*(char *)(v15 - 49) < 0)
          operator delete(*(void **)(v15 - 72));
        v15 -= 72;
        if (v15 == v14)
        {
          v16 = (void *)*(v5 - 3);
          break;
        }
      }
    }
    *(v5 - 2) = v14;
    operator delete(v16);
LABEL_22:
    v19 = (void **)(v5 - 7);
    if (*((char *)v5 - 33) < 0)
      operator delete(*v19);
    v5 -= 7;
  }
  while (v19 != (void **)&v126);
  v20 = v123;
  v21 = v87;
  v22 = v100;
  if (!v48)
    goto LABEL_30;
  if (v47 == v46)
  {
    v23 = 4;
  }
  else
  {
    if (!v47)
      goto LABEL_30;
    v23 = 5;
    v3 = v47;
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v23))(v3);
LABEL_30:
  if (v44 < 0)
    operator delete(__p[0]);
  v25 = v81;
  v24 = v75;
  if (v54)
  {
    v26 = v52;
    if (v53 == v52)
    {
      v27 = 4;
    }
    else
    {
      if (!v53)
        goto LABEL_38;
      v27 = 5;
      v26 = v53;
    }
    (*(void (**)(void))(*v26 + 8 * v27))();
  }
LABEL_38:
  if (v50 < 0)
    operator delete(v49[0]);
  if (v60)
  {
    if (v59 == v58)
    {
      v28 = 4;
    }
    else
    {
      if (!v59)
        goto LABEL_46;
      v28 = 5;
      v2 = v59;
    }
    (*(void (**)(_QWORD *))(*v2 + 8 * v28))(v2);
  }
LABEL_46:
  if (SHIBYTE(v56) < 0)
    operator delete(v55);
  v29 = &v112;
  if (v65)
  {
    v30 = v63;
    if (v64 == v63)
    {
      v31 = 4;
    }
    else
    {
      if (!v64)
        goto LABEL_54;
      v31 = 5;
      v30 = v64;
    }
    (*(void (**)(void))(*v30 + 8 * v31))();
  }
LABEL_54:
  if (SHIBYTE(v61[2]) < 0)
    operator delete(v61[0]);
  if (v71)
  {
    if (v70 == v69)
    {
      v32 = 4;
    }
    else
    {
      if (!v70)
        goto LABEL_62;
      v32 = 5;
      v13 = v70;
    }
    (*(void (**)(_QWORD *))(*v13 + 8 * v32))(v13);
  }
LABEL_62:
  if (SHIBYTE(v67) < 0)
    operator delete(v66);
  if (v108)
  {
    if (v107 == v106)
    {
      v33 = 4;
    }
    else
    {
      if (!v107)
        goto LABEL_70;
      v33 = 5;
      v12 = v107;
    }
    (*(void (**)(_QWORD *))(*v12 + 8 * v33))(v12);
  }
LABEL_70:
  if (SHIBYTE(v104) < 0)
    operator delete(v103);
  if (v102)
  {
    if (v101 == v100)
    {
      v34 = 4;
    }
    else
    {
      if (!v101)
        goto LABEL_78;
      v34 = 5;
      v22 = v101;
    }
    (*(void (**)(_QWORD *))(*v22 + 8 * v34))(v22);
  }
LABEL_78:
  if (SHIBYTE(v98) < 0)
    operator delete(v96);
  if (v95)
  {
    if (v94 == v93)
    {
      v35 = 4;
    }
    else
    {
      if (!v94)
        goto LABEL_86;
      v35 = 5;
      v11 = v94;
    }
    (*(void (**)(_QWORD *))(*v11 + 8 * v35))(v11);
  }
LABEL_86:
  if (SHIBYTE(v91) < 0)
    operator delete(v90);
  if (v89)
  {
    if (v88 == v87)
    {
      v36 = 4;
    }
    else
    {
      if (!v88)
        goto LABEL_94;
      v36 = 5;
      v21 = v88;
    }
    (*(void (**)(_QWORD *))(*v21 + 8 * v36))(v21);
  }
LABEL_94:
  if (SHIBYTE(v85) < 0)
    operator delete(v84);
  if (v83)
  {
    if (v82 == v81)
    {
      v37 = 4;
    }
    else
    {
      if (!v82)
        goto LABEL_102;
      v37 = 5;
      v25 = v82;
    }
    (*(void (**)(_QWORD *))(*v25 + 8 * v37))(v25);
  }
LABEL_102:
  if (SHIBYTE(v79) < 0)
    operator delete(v78);
  if (v77)
  {
    if (v76 == v75)
    {
      v38 = 4;
    }
    else
    {
      if (!v76)
        goto LABEL_110;
      v38 = 5;
      v24 = v76;
    }
    (*(void (**)(_QWORD *))(*v24 + 8 * v38))(v24);
  }
LABEL_110:
  if (SHIBYTE(v73) < 0)
    operator delete(v72);
  if (v114)
  {
    if (v113 == &v112)
    {
      v39 = 4;
    }
    else
    {
      if (!v113)
        goto LABEL_118;
      v39 = 5;
      v29 = v113;
    }
    (*(void (**)(char *))(*(_QWORD *)v29 + 8 * v39))(v29);
  }
LABEL_118:
  if (SHIBYTE(v110) < 0)
    operator delete(v109);
  if (v125)
  {
    if (v124 == v123)
    {
      v40 = 4;
    }
    else
    {
      if (!v124)
        goto LABEL_126;
      v40 = 5;
      v20 = v124;
    }
    (*(void (**)(_QWORD *))(*v20 + 8 * v40))(v20);
  }
LABEL_126:
  if (v121 < 0)
    operator delete(v120[0]);
  if (v119)
  {
    if (v118 == v117)
    {
      v41 = 4;
    }
    else
    {
      if (!v118)
        goto LABEL_134;
      v41 = 5;
      v10 = v118;
    }
    (*(void (**)(_QWORD *))(*v10 + 8 * v41))(v10);
  }
LABEL_134:
  if (SHIBYTE(v115[2]) < 0)
    operator delete(v115[0]);
}

void sub_1A34697A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,_QWORD *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,_QWORD *a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,_QWORD *a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,_QWORD *a62,char a63)
{
  void *a64;
  char a69;
  _QWORD *a72;
  char a73;
  void *a74;
  char a75;
  _QWORD *a76;
  _QWORD *v76;
  _QWORD *v77;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  void *v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  _QWORD *v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  _QWORD *v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  void *v116;
  _QWORD *v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  _QWORD *v121;
  uint64_t v122;
  unint64_t v123;
  void *v124;
  _QWORD *v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  _QWORD *v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;

  v79 = STACK[0x720];
  if (!STACK[0x720])
  {
    if ((SLOBYTE(STACK[0x717]) & 0x80000000) == 0)
      goto LABEL_3;
    goto LABEL_40;
  }
  v91 = STACK[0x728];
  v92 = (void *)STACK[0x720];
  if (STACK[0x728] == v79)
  {
LABEL_39:
    STACK[0x728] = v79;
    operator delete(v92);
    if ((SLOBYTE(STACK[0x717]) & 0x80000000) == 0)
    {
LABEL_3:
      v80 = STACK[0x6E8];
      if (!STACK[0x6E8])
        goto LABEL_4;
LABEL_41:
      v95 = STACK[0x6F0];
      v96 = (void *)v80;
      if (STACK[0x6F0] == v80)
      {
LABEL_53:
        STACK[0x6F0] = v80;
        operator delete(v96);
        if ((SLOBYTE(STACK[0x6DF]) & 0x80000000) == 0)
        {
LABEL_5:
          v81 = STACK[0x6B0];
          if (!STACK[0x6B0])
            goto LABEL_6;
LABEL_55:
          v99 = STACK[0x6B8];
          v100 = (void *)v81;
          if (STACK[0x6B8] == v81)
          {
LABEL_67:
            STACK[0x6B8] = v81;
            operator delete(v100);
            if ((SLOBYTE(STACK[0x6A7]) & 0x80000000) == 0)
            {
LABEL_7:
              v82 = STACK[0x678];
              if (!STACK[0x678])
                goto LABEL_8;
LABEL_69:
              v103 = STACK[0x680];
              v104 = (void *)v82;
              if (STACK[0x680] == v82)
              {
LABEL_81:
                STACK[0x680] = v82;
                operator delete(v104);
                if ((SLOBYTE(STACK[0x66F]) & 0x80000000) == 0)
                {
LABEL_9:
                  v83 = STACK[0x640];
                  if (!STACK[0x640])
                    goto LABEL_10;
LABEL_83:
                  v107 = STACK[0x648];
                  v108 = (void *)v83;
                  if (STACK[0x648] == v83)
                  {
LABEL_95:
                    STACK[0x648] = v83;
                    operator delete(v108);
                    if ((SLOBYTE(STACK[0x637]) & 0x80000000) == 0)
                    {
LABEL_11:
                      v84 = STACK[0x608];
                      if (!STACK[0x608])
                        goto LABEL_12;
LABEL_97:
                      v111 = STACK[0x610];
                      v112 = (void *)v84;
                      if (STACK[0x610] == v84)
                      {
LABEL_109:
                        STACK[0x610] = v84;
                        operator delete(v112);
                        if ((SLOBYTE(STACK[0x5FF]) & 0x80000000) == 0)
                        {
LABEL_13:
                          v85 = STACK[0x5D0];
                          if (!STACK[0x5D0])
                            goto LABEL_14;
LABEL_111:
                          v115 = STACK[0x5D8];
                          v116 = (void *)v85;
                          if (STACK[0x5D8] == v85)
                          {
LABEL_123:
                            STACK[0x5D8] = v85;
                            operator delete(v116);
                            if ((SLOBYTE(STACK[0x5C7]) & 0x80000000) == 0)
                            {
LABEL_15:
                              v86 = STACK[0x598];
                              if (!STACK[0x598])
                                goto LABEL_16;
LABEL_125:
                              v119 = STACK[0x5A0];
                              v120 = (void *)v86;
                              if (STACK[0x5A0] == v86)
                              {
LABEL_137:
                                STACK[0x5A0] = v86;
                                operator delete(v120);
                                if ((SLOBYTE(STACK[0x58F]) & 0x80000000) == 0)
                                {
LABEL_17:
                                  v87 = STACK[0x560];
                                  if (!STACK[0x560])
                                    goto LABEL_18;
LABEL_139:
                                  v123 = STACK[0x568];
                                  v124 = (void *)v87;
                                  if (STACK[0x568] == v87)
                                  {
LABEL_151:
                                    STACK[0x568] = v87;
                                    operator delete(v124);
                                    if ((SLOBYTE(STACK[0x557]) & 0x80000000) == 0)
                                    {
LABEL_19:
                                      v88 = STACK[0x528];
                                      if (!STACK[0x528])
                                        goto LABEL_20;
LABEL_153:
                                      v127 = STACK[0x530];
                                      v128 = (void *)v88;
                                      if (STACK[0x530] == v88)
                                      {
LABEL_165:
                                        STACK[0x530] = v88;
                                        operator delete(v128);
                                        if ((SLOBYTE(STACK[0x51F]) & 0x80000000) == 0)
                                        {
LABEL_21:
                                          v89 = STACK[0x4F0];
                                          if (!STACK[0x4F0])
                                            goto LABEL_22;
LABEL_167:
                                          v131 = STACK[0x4F8];
                                          v132 = (void *)v89;
                                          if (STACK[0x4F8] == v89)
                                          {
LABEL_179:
                                            STACK[0x4F8] = v89;
                                            operator delete(v132);
                                            if ((SLOBYTE(STACK[0x4E7]) & 0x80000000) == 0)
                                            {
LABEL_23:
                                              v90 = STACK[0x4B8];
                                              if (!STACK[0x4B8])
                                                goto LABEL_24;
LABEL_181:
                                              v135 = STACK[0x4C0];
                                              v136 = (void *)v90;
                                              if (STACK[0x4C0] == v90)
                                              {
LABEL_193:
                                                STACK[0x4C0] = v90;
                                                operator delete(v136);
                                                if ((SLOBYTE(STACK[0x4AF]) & 0x80000000) == 0)
                                                {
LABEL_25:
                                                  if (!a39)
                                                    goto LABEL_200;
                                                  goto LABEL_195;
                                                }
LABEL_194:
                                                operator delete((void *)STACK[0x498]);
                                                if (!a39)
                                                  goto LABEL_200;
LABEL_195:
                                                if (a38 == v77)
                                                {
                                                  v139 = 4;
                                                }
                                                else
                                                {
                                                  if (!a38)
                                                    goto LABEL_200;
                                                  v139 = 5;
                                                  v77 = a38;
                                                }
                                                (*(void (**)(_QWORD *))(*v77 + 8 * v139))(v77);
LABEL_200:
                                                if (a33 < 0)
                                                  operator delete(a28);
                                                if (a51)
                                                {
                                                  if (a50 == a10)
                                                  {
                                                    v140 = 4;
                                                  }
                                                  else
                                                  {
                                                    if (!a50)
                                                      goto LABEL_208;
                                                    v140 = 5;
                                                    a10 = a50;
                                                  }
                                                  (*(void (**)(void))(*a10 + 8 * v140))();
                                                }
LABEL_208:
                                                if (a45 < 0)
                                                  operator delete(a40);
                                                if (a63)
                                                {
                                                  if (a62 == v76)
                                                  {
                                                    v141 = 4;
                                                  }
                                                  else
                                                  {
                                                    if (!a62)
                                                      goto LABEL_216;
                                                    v141 = 5;
                                                    v76 = a62;
                                                  }
                                                  (*(void (**)(_QWORD *))(*v76 + 8 * v141))(v76);
                                                }
LABEL_216:
                                                if (a57 < 0)
                                                  operator delete(a52);
                                                if (a73)
                                                {
                                                  if (a72 == a11)
                                                  {
                                                    v142 = 4;
                                                  }
                                                  else
                                                  {
                                                    if (!a72)
                                                      goto LABEL_224;
                                                    v142 = 5;
                                                    a11 = a72;
                                                  }
                                                  (*(void (**)(void))(*a11 + 8 * v142))();
                                                }
LABEL_224:
                                                if (a69 < 0)
                                                  operator delete(a64);
                                                if (LOBYTE(STACK[0x200]))
                                                {
                                                  if (a76 == a12)
                                                  {
                                                    v143 = 4;
                                                  }
                                                  else
                                                  {
                                                    if (!a76)
                                                      goto LABEL_232;
                                                    v143 = 5;
                                                    a12 = a76;
                                                  }
                                                  (*(void (**)(void))(*a12 + 8 * v143))();
                                                }
LABEL_232:
                                                if (a75 < 0)
                                                  operator delete(a74);
                                                if (LOBYTE(STACK[0x3B0]))
                                                {
                                                  if ((_QWORD *)STACK[0x3A8] == a13)
                                                  {
                                                    v144 = 4;
                                                  }
                                                  else
                                                  {
                                                    if (!STACK[0x3A8])
                                                      goto LABEL_240;
                                                    v144 = 5;
                                                    a13 = (_QWORD *)STACK[0x3A8];
                                                  }
                                                  (*(void (**)(void))(*a13 + 8 * v144))();
                                                }
LABEL_240:
                                                if (SLOBYTE(STACK[0x387]) < 0)
                                                  operator delete((void *)STACK[0x370]);
                                                if (LOBYTE(STACK[0x368]))
                                                {
                                                  if ((_QWORD *)STACK[0x360] == a14)
                                                  {
                                                    v145 = 4;
                                                  }
                                                  else
                                                  {
                                                    if (!STACK[0x360])
                                                      goto LABEL_248;
                                                    v145 = 5;
                                                    a14 = (_QWORD *)STACK[0x360];
                                                  }
                                                  (*(void (**)(void))(*a14 + 8 * v145))();
                                                }
LABEL_248:
                                                if (SLOBYTE(STACK[0x33F]) < 0)
                                                  operator delete((void *)STACK[0x328]);
                                                if (LOBYTE(STACK[0x320]))
                                                {
                                                  if ((_QWORD *)STACK[0x318] == a15)
                                                  {
                                                    v146 = 4;
                                                  }
                                                  else
                                                  {
                                                    if (!STACK[0x318])
                                                      goto LABEL_256;
                                                    v146 = 5;
                                                    a15 = (_QWORD *)STACK[0x318];
                                                  }
                                                  (*(void (**)(void))(*a15 + 8 * v146))();
                                                }
LABEL_256:
                                                if (SLOBYTE(STACK[0x2F7]) < 0)
                                                  operator delete((void *)STACK[0x2E0]);
                                                if (LOBYTE(STACK[0x2D8]))
                                                {
                                                  if ((_QWORD *)STACK[0x2D0] == a16)
                                                  {
                                                    v147 = 4;
                                                  }
                                                  else
                                                  {
                                                    if (!STACK[0x2D0])
                                                      goto LABEL_264;
                                                    v147 = 5;
                                                    a16 = (_QWORD *)STACK[0x2D0];
                                                  }
                                                  (*(void (**)(void))(*a16 + 8 * v147))();
                                                }
LABEL_264:
                                                if (SLOBYTE(STACK[0x2AF]) < 0)
                                                  operator delete((void *)STACK[0x298]);
                                                if (LOBYTE(STACK[0x290]))
                                                {
                                                  if ((_QWORD *)STACK[0x288] == a17)
                                                  {
                                                    v148 = 4;
                                                  }
                                                  else
                                                  {
                                                    if (!STACK[0x288])
                                                      goto LABEL_272;
                                                    v148 = 5;
                                                    a17 = (_QWORD *)STACK[0x288];
                                                  }
                                                  (*(void (**)(void))(*a17 + 8 * v148))();
                                                }
LABEL_272:
                                                if (SLOBYTE(STACK[0x267]) < 0)
                                                  operator delete((void *)STACK[0x250]);
                                                if (LOBYTE(STACK[0x248]))
                                                {
                                                  if ((_QWORD *)STACK[0x240] == a18)
                                                  {
                                                    v149 = 4;
                                                  }
                                                  else
                                                  {
                                                    if (!STACK[0x240])
                                                      goto LABEL_280;
                                                    v149 = 5;
                                                    a18 = (_QWORD *)STACK[0x240];
                                                  }
                                                  (*(void (**)(void))(*a18 + 8 * v149))();
                                                }
LABEL_280:
                                                if (SLOBYTE(STACK[0x21F]) < 0)
                                                  operator delete((void *)STACK[0x208]);
                                                if (LOBYTE(STACK[0x3F8]))
                                                {
                                                  if ((_QWORD *)STACK[0x3F0] == a19)
                                                  {
                                                    v150 = 4;
                                                  }
                                                  else
                                                  {
                                                    if (!STACK[0x3F0])
                                                      goto LABEL_288;
                                                    v150 = 5;
                                                    a19 = (_QWORD *)STACK[0x3F0];
                                                  }
                                                  (*(void (**)(void))(*a19 + 8 * v150))();
                                                }
LABEL_288:
                                                if (SLOBYTE(STACK[0x3CF]) < 0)
                                                  operator delete((void *)STACK[0x3B8]);
                                                if (LOBYTE(STACK[0x488]))
                                                {
                                                  if ((_QWORD *)STACK[0x480] == a20)
                                                  {
                                                    v151 = 4;
                                                  }
                                                  else
                                                  {
                                                    if (!STACK[0x480])
                                                      goto LABEL_296;
                                                    v151 = 5;
                                                    a20 = (_QWORD *)STACK[0x480];
                                                  }
                                                  (*(void (**)(void))(*a20 + 8 * v151))();
                                                }
LABEL_296:
                                                if (SLOBYTE(STACK[0x45F]) < 0)
                                                  operator delete((void *)STACK[0x448]);
                                                if (LOBYTE(STACK[0x440]))
                                                {
                                                  if ((_QWORD *)STACK[0x438] == a21)
                                                  {
                                                    v152 = 4;
                                                  }
                                                  else
                                                  {
                                                    if (!STACK[0x438])
                                                      goto LABEL_304;
                                                    v152 = 5;
                                                    a21 = (_QWORD *)STACK[0x438];
                                                  }
                                                  (*(void (**)(void))(*a21 + 8 * v152))();
                                                }
LABEL_304:
                                                if (SLOBYTE(STACK[0x417]) < 0)
                                                  operator delete((void *)STACK[0x400]);
                                                _Unwind_Resume(a1);
                                              }
                                              while (1)
                                              {
                                                if (*(_BYTE *)(v135 - 8))
                                                {
                                                  v137 = *(_QWORD **)(v135 - 16);
                                                  if ((_QWORD *)(v135 - 40) == v137)
                                                  {
                                                    v137 = (_QWORD *)(v135 - 40);
                                                    v138 = 4;
                                                    goto LABEL_189;
                                                  }
                                                  if (v137)
                                                  {
                                                    v138 = 5;
LABEL_189:
                                                    (*(void (**)(void))(*v137 + 8 * v138))();
                                                  }
                                                }
                                                if (*(char *)(v135 - 49) < 0)
                                                  operator delete(*(void **)(v135 - 72));
                                                v135 -= 72;
                                                if (v135 == v90)
                                                {
                                                  v136 = (void *)STACK[0x4B8];
                                                  goto LABEL_193;
                                                }
                                              }
                                            }
LABEL_180:
                                            operator delete((void *)STACK[0x4D0]);
                                            v90 = STACK[0x4B8];
                                            if (!STACK[0x4B8])
                                            {
LABEL_24:
                                              if ((SLOBYTE(STACK[0x4AF]) & 0x80000000) == 0)
                                                goto LABEL_25;
                                              goto LABEL_194;
                                            }
                                            goto LABEL_181;
                                          }
                                          while (1)
                                          {
                                            if (*(_BYTE *)(v131 - 8))
                                            {
                                              v133 = *(_QWORD **)(v131 - 16);
                                              if ((_QWORD *)(v131 - 40) == v133)
                                              {
                                                v133 = (_QWORD *)(v131 - 40);
                                                v134 = 4;
                                                goto LABEL_175;
                                              }
                                              if (v133)
                                              {
                                                v134 = 5;
LABEL_175:
                                                (*(void (**)(void))(*v133 + 8 * v134))();
                                              }
                                            }
                                            if (*(char *)(v131 - 49) < 0)
                                              operator delete(*(void **)(v131 - 72));
                                            v131 -= 72;
                                            if (v131 == v89)
                                            {
                                              v132 = (void *)STACK[0x4F0];
                                              goto LABEL_179;
                                            }
                                          }
                                        }
LABEL_166:
                                        operator delete((void *)STACK[0x508]);
                                        v89 = STACK[0x4F0];
                                        if (!STACK[0x4F0])
                                        {
LABEL_22:
                                          if ((SLOBYTE(STACK[0x4E7]) & 0x80000000) == 0)
                                            goto LABEL_23;
                                          goto LABEL_180;
                                        }
                                        goto LABEL_167;
                                      }
                                      while (1)
                                      {
                                        if (*(_BYTE *)(v127 - 8))
                                        {
                                          v129 = *(_QWORD **)(v127 - 16);
                                          if ((_QWORD *)(v127 - 40) == v129)
                                          {
                                            v129 = (_QWORD *)(v127 - 40);
                                            v130 = 4;
                                            goto LABEL_161;
                                          }
                                          if (v129)
                                          {
                                            v130 = 5;
LABEL_161:
                                            (*(void (**)(void))(*v129 + 8 * v130))();
                                          }
                                        }
                                        if (*(char *)(v127 - 49) < 0)
                                          operator delete(*(void **)(v127 - 72));
                                        v127 -= 72;
                                        if (v127 == v88)
                                        {
                                          v128 = (void *)STACK[0x528];
                                          goto LABEL_165;
                                        }
                                      }
                                    }
LABEL_152:
                                    operator delete((void *)STACK[0x540]);
                                    v88 = STACK[0x528];
                                    if (!STACK[0x528])
                                    {
LABEL_20:
                                      if ((SLOBYTE(STACK[0x51F]) & 0x80000000) == 0)
                                        goto LABEL_21;
                                      goto LABEL_166;
                                    }
                                    goto LABEL_153;
                                  }
                                  while (1)
                                  {
                                    if (*(_BYTE *)(v123 - 8))
                                    {
                                      v125 = *(_QWORD **)(v123 - 16);
                                      if ((_QWORD *)(v123 - 40) == v125)
                                      {
                                        v125 = (_QWORD *)(v123 - 40);
                                        v126 = 4;
                                        goto LABEL_147;
                                      }
                                      if (v125)
                                      {
                                        v126 = 5;
LABEL_147:
                                        (*(void (**)(void))(*v125 + 8 * v126))();
                                      }
                                    }
                                    if (*(char *)(v123 - 49) < 0)
                                      operator delete(*(void **)(v123 - 72));
                                    v123 -= 72;
                                    if (v123 == v87)
                                    {
                                      v124 = (void *)STACK[0x560];
                                      goto LABEL_151;
                                    }
                                  }
                                }
LABEL_138:
                                operator delete((void *)STACK[0x578]);
                                v87 = STACK[0x560];
                                if (!STACK[0x560])
                                {
LABEL_18:
                                  if ((SLOBYTE(STACK[0x557]) & 0x80000000) == 0)
                                    goto LABEL_19;
                                  goto LABEL_152;
                                }
                                goto LABEL_139;
                              }
                              while (1)
                              {
                                if (*(_BYTE *)(v119 - 8))
                                {
                                  v121 = *(_QWORD **)(v119 - 16);
                                  if ((_QWORD *)(v119 - 40) == v121)
                                  {
                                    v121 = (_QWORD *)(v119 - 40);
                                    v122 = 4;
                                    goto LABEL_133;
                                  }
                                  if (v121)
                                  {
                                    v122 = 5;
LABEL_133:
                                    (*(void (**)(void))(*v121 + 8 * v122))();
                                  }
                                }
                                if (*(char *)(v119 - 49) < 0)
                                  operator delete(*(void **)(v119 - 72));
                                v119 -= 72;
                                if (v119 == v86)
                                {
                                  v120 = (void *)STACK[0x598];
                                  goto LABEL_137;
                                }
                              }
                            }
LABEL_124:
                            operator delete((void *)STACK[0x5B0]);
                            v86 = STACK[0x598];
                            if (!STACK[0x598])
                            {
LABEL_16:
                              if ((SLOBYTE(STACK[0x58F]) & 0x80000000) == 0)
                                goto LABEL_17;
                              goto LABEL_138;
                            }
                            goto LABEL_125;
                          }
                          while (1)
                          {
                            if (*(_BYTE *)(v115 - 8))
                            {
                              v117 = *(_QWORD **)(v115 - 16);
                              if ((_QWORD *)(v115 - 40) == v117)
                              {
                                v117 = (_QWORD *)(v115 - 40);
                                v118 = 4;
                                goto LABEL_119;
                              }
                              if (v117)
                              {
                                v118 = 5;
LABEL_119:
                                (*(void (**)(void))(*v117 + 8 * v118))();
                              }
                            }
                            if (*(char *)(v115 - 49) < 0)
                              operator delete(*(void **)(v115 - 72));
                            v115 -= 72;
                            if (v115 == v85)
                            {
                              v116 = (void *)STACK[0x5D0];
                              goto LABEL_123;
                            }
                          }
                        }
LABEL_110:
                        operator delete((void *)STACK[0x5E8]);
                        v85 = STACK[0x5D0];
                        if (!STACK[0x5D0])
                        {
LABEL_14:
                          if ((SLOBYTE(STACK[0x5C7]) & 0x80000000) == 0)
                            goto LABEL_15;
                          goto LABEL_124;
                        }
                        goto LABEL_111;
                      }
                      while (1)
                      {
                        if (*(_BYTE *)(v111 - 8))
                        {
                          v113 = *(_QWORD **)(v111 - 16);
                          if ((_QWORD *)(v111 - 40) == v113)
                          {
                            v113 = (_QWORD *)(v111 - 40);
                            v114 = 4;
                            goto LABEL_105;
                          }
                          if (v113)
                          {
                            v114 = 5;
LABEL_105:
                            (*(void (**)(void))(*v113 + 8 * v114))();
                          }
                        }
                        if (*(char *)(v111 - 49) < 0)
                          operator delete(*(void **)(v111 - 72));
                        v111 -= 72;
                        if (v111 == v84)
                        {
                          v112 = (void *)STACK[0x608];
                          goto LABEL_109;
                        }
                      }
                    }
LABEL_96:
                    operator delete((void *)STACK[0x620]);
                    v84 = STACK[0x608];
                    if (!STACK[0x608])
                    {
LABEL_12:
                      if ((SLOBYTE(STACK[0x5FF]) & 0x80000000) == 0)
                        goto LABEL_13;
                      goto LABEL_110;
                    }
                    goto LABEL_97;
                  }
                  while (1)
                  {
                    if (*(_BYTE *)(v107 - 8))
                    {
                      v109 = *(_QWORD **)(v107 - 16);
                      if ((_QWORD *)(v107 - 40) == v109)
                      {
                        v109 = (_QWORD *)(v107 - 40);
                        v110 = 4;
                        goto LABEL_91;
                      }
                      if (v109)
                      {
                        v110 = 5;
LABEL_91:
                        (*(void (**)(void))(*v109 + 8 * v110))();
                      }
                    }
                    if (*(char *)(v107 - 49) < 0)
                      operator delete(*(void **)(v107 - 72));
                    v107 -= 72;
                    if (v107 == v83)
                    {
                      v108 = (void *)STACK[0x640];
                      goto LABEL_95;
                    }
                  }
                }
LABEL_82:
                operator delete((void *)STACK[0x658]);
                v83 = STACK[0x640];
                if (!STACK[0x640])
                {
LABEL_10:
                  if ((SLOBYTE(STACK[0x637]) & 0x80000000) == 0)
                    goto LABEL_11;
                  goto LABEL_96;
                }
                goto LABEL_83;
              }
              while (1)
              {
                if (*(_BYTE *)(v103 - 8))
                {
                  v105 = *(_QWORD **)(v103 - 16);
                  if ((_QWORD *)(v103 - 40) == v105)
                  {
                    v105 = (_QWORD *)(v103 - 40);
                    v106 = 4;
                    goto LABEL_77;
                  }
                  if (v105)
                  {
                    v106 = 5;
LABEL_77:
                    (*(void (**)(void))(*v105 + 8 * v106))();
                  }
                }
                if (*(char *)(v103 - 49) < 0)
                  operator delete(*(void **)(v103 - 72));
                v103 -= 72;
                if (v103 == v82)
                {
                  v104 = (void *)STACK[0x678];
                  goto LABEL_81;
                }
              }
            }
LABEL_68:
            operator delete((void *)STACK[0x690]);
            v82 = STACK[0x678];
            if (!STACK[0x678])
            {
LABEL_8:
              if ((SLOBYTE(STACK[0x66F]) & 0x80000000) == 0)
                goto LABEL_9;
              goto LABEL_82;
            }
            goto LABEL_69;
          }
          while (1)
          {
            if (*(_BYTE *)(v99 - 8))
            {
              v101 = *(_QWORD **)(v99 - 16);
              if ((_QWORD *)(v99 - 40) == v101)
              {
                v101 = (_QWORD *)(v99 - 40);
                v102 = 4;
                goto LABEL_63;
              }
              if (v101)
              {
                v102 = 5;
LABEL_63:
                (*(void (**)(void))(*v101 + 8 * v102))();
              }
            }
            if (*(char *)(v99 - 49) < 0)
              operator delete(*(void **)(v99 - 72));
            v99 -= 72;
            if (v99 == v81)
            {
              v100 = (void *)STACK[0x6B0];
              goto LABEL_67;
            }
          }
        }
LABEL_54:
        operator delete((void *)STACK[0x6C8]);
        v81 = STACK[0x6B0];
        if (!STACK[0x6B0])
        {
LABEL_6:
          if ((SLOBYTE(STACK[0x6A7]) & 0x80000000) == 0)
            goto LABEL_7;
          goto LABEL_68;
        }
        goto LABEL_55;
      }
      while (1)
      {
        if (*(_BYTE *)(v95 - 8))
        {
          v97 = *(_QWORD **)(v95 - 16);
          if ((_QWORD *)(v95 - 40) == v97)
          {
            v97 = (_QWORD *)(v95 - 40);
            v98 = 4;
            goto LABEL_49;
          }
          if (v97)
          {
            v98 = 5;
LABEL_49:
            (*(void (**)(void))(*v97 + 8 * v98))();
          }
        }
        if (*(char *)(v95 - 49) < 0)
          operator delete(*(void **)(v95 - 72));
        v95 -= 72;
        if (v95 == v80)
        {
          v96 = (void *)STACK[0x6E8];
          goto LABEL_53;
        }
      }
    }
LABEL_40:
    operator delete((void *)STACK[0x700]);
    v80 = STACK[0x6E8];
    if (!STACK[0x6E8])
    {
LABEL_4:
      if ((SLOBYTE(STACK[0x6DF]) & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_54;
    }
    goto LABEL_41;
  }
  while (1)
  {
    if (*(_BYTE *)(v91 - 8))
    {
      v93 = *(_QWORD **)(v91 - 16);
      if ((_QWORD *)(v91 - 40) == v93)
      {
        v93 = (_QWORD *)(v91 - 40);
        v94 = 4;
        goto LABEL_35;
      }
      if (v93)
      {
        v94 = 5;
LABEL_35:
        (*(void (**)(void))(*v93 + 8 * v94))();
      }
    }
    if (*(char *)(v91 - 49) < 0)
      operator delete(*(void **)(v91 - 72));
    v91 -= 72;
    if (v91 == v79)
    {
      v92 = (void *)STACK[0x720];
      goto LABEL_39;
    }
  }
}

uint64_t config::hw::watch(config::hw *this)
{
  ctu::Gestalt *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;

  v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v2 = off_1ED114760;
  if (!off_1ED114760)
  {
    ctu::Gestalt::create_default_global(v1);
    v3 = (std::__shared_weak_count *)*(&off_1ED114760 + 1);
    off_1ED114760 = v13;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v2 = off_1ED114760;
  }
  v6 = (std::__shared_weak_count *)*(&off_1ED114760 + 1);
  if (*(&off_1ED114760 + 1))
  {
    v7 = (unint64_t *)(*(&off_1ED114760 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 144))(v2);
  v10 = result;
  if (v6)
  {
    v11 = (unint64_t *)&v6->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      return v10;
    }
  }
  return result;
}

void sub_1A346A9D8(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1A346A9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t config::hw::iPad(config::hw *this)
{
  ctu::Gestalt *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;

  v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v2 = off_1ED114760;
  if (!off_1ED114760)
  {
    ctu::Gestalt::create_default_global(v1);
    v3 = (std::__shared_weak_count *)*(&off_1ED114760 + 1);
    off_1ED114760 = v13;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v2 = off_1ED114760;
  }
  v6 = (std::__shared_weak_count *)*(&off_1ED114760 + 1);
  if (*(&off_1ED114760 + 1))
  {
    v7 = (unint64_t *)(*(&off_1ED114760 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136))(v2);
  v10 = result;
  if (v6)
  {
    v11 = (unint64_t *)&v6->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      return v10;
    }
  }
  return result;
}

void sub_1A346AB58(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1A346AB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void config::hw::product(config::hw *this)
{
  ctu::Gestalt *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v2 = off_1ED114760;
  if (!off_1ED114760)
  {
    ctu::Gestalt::create_default_global(v1);
    v3 = (std::__shared_weak_count *)*(&off_1ED114760 + 1);
    off_1ED114760 = v11;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v2 = off_1ED114760;
  }
  v6 = (std::__shared_weak_count *)*(&off_1ED114760 + 1);
  if (*(&off_1ED114760 + 1))
  {
    v7 = (unint64_t *)(*(&off_1ED114760 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1A346ACE0(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1A346ACFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void config::hw::deviceMaterial(config::hw *this)
{
  ctu::Gestalt *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v2 = off_1ED114760;
  if (!off_1ED114760)
  {
    ctu::Gestalt::create_default_global(v1);
    v3 = (std::__shared_weak_count *)*(&off_1ED114760 + 1);
    off_1ED114760 = v11;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v2 = off_1ED114760;
  }
  v6 = (std::__shared_weak_count *)*(&off_1ED114760 + 1);
  if (*(&off_1ED114760 + 1))
  {
    v7 = (unint64_t *)(*(&off_1ED114760 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 104))(v2);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1A346AE68(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1A346AE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void config::hw::getBootArgs(std::string *a1@<X8>)
{
  ctu::Gestalt *v3;
  uint64_t v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  _QWORD *v17;
  const void *v18;
  const void *v19;
  int v20;
  const void *v21;
  unint64_t v22;
  size_t v23;
  int v24;
  int v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  __int128 v29;
  void *__p[2];
  uint64_t v31;
  _QWORD v32[5];

  memset(v32, 170, 24);
  v3 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v4 = off_1ED114760;
  if (!off_1ED114760)
  {
    ctu::Gestalt::create_default_global(v3);
    v5 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v6 = (std::__shared_weak_count *)*(&off_1ED114760 + 1);
    off_1ED114760 = v5;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = off_1ED114760;
  }
  v9 = (std::__shared_weak_count *)*(&off_1ED114760 + 1);
  v32[3] = v4;
  v32[4] = *(&off_1ED114760 + 1);
  if (*(&off_1ED114760 + 1))
  {
    v10 = (unint64_t *)(*(&off_1ED114760 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v4 + 112))(v32, v4);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  HIBYTE(v31) = 9;
  strcpy((char *)__p, "boot-args");
  v14 = (uint64_t *)v32[1];
  if (v32[1])
  {
    while (1)
    {
      v16 = (uint64_t **)v14;
      v19 = (const void *)v14[4];
      v17 = v14 + 4;
      v18 = v19;
      v20 = *((char *)v17 + 23);
      if (v20 >= 0)
        v21 = v17;
      else
        v21 = v18;
      if (v20 >= 0)
        v22 = *((unsigned __int8 *)v17 + 23);
      else
        v22 = v17[1];
      if (v22 >= 9)
        v23 = 9;
      else
        v23 = v22;
      v24 = memcmp(__p, v21, v23);
      if (v24)
      {
        if (v24 < 0)
          goto LABEL_18;
LABEL_32:
        v25 = memcmp(v21, __p, v23);
        if (v25)
        {
          if ((v25 & 0x80000000) == 0)
            goto LABEL_43;
        }
        else if (v22 >= 9)
        {
LABEL_43:
          v26 = (char *)v16;
          if (*((char *)v16 + 79) < 0)
            goto LABEL_44;
LABEL_42:
          v29 = *(_OWORD *)(v26 + 56);
          a1->__r_.__value_.__r.__words[2] = *((_QWORD *)v26 + 9);
          *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v29;
          goto LABEL_45;
        }
        v14 = v16[1];
        if (!v14)
        {
          v15 = v16 + 1;
          goto LABEL_39;
        }
      }
      else
      {
        if (v22 <= 9)
          goto LABEL_32;
LABEL_18:
        v14 = *v16;
        v15 = v16;
        if (!*v16)
          goto LABEL_39;
      }
    }
  }
  v15 = (uint64_t **)&v32[1];
  v16 = (uint64_t **)&v32[1];
LABEL_39:
  v26 = (char *)operator new(0x50uLL);
  *((_OWORD *)v26 + 2) = *(_OWORD *)__p;
  v27 = v31;
  __p[1] = 0;
  v31 = 0;
  __p[0] = 0;
  *((_QWORD *)v26 + 6) = v27;
  *((_QWORD *)v26 + 7) = 0;
  *((_QWORD *)v26 + 8) = 0;
  *((_QWORD *)v26 + 9) = 0;
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = 0;
  *((_QWORD *)v26 + 2) = v16;
  *v15 = (uint64_t *)v26;
  v28 = (uint64_t *)v26;
  if (*(_QWORD *)v32[0])
  {
    v32[0] = *(_QWORD *)v32[0];
    v28 = *v15;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v32[1], v28);
  ++v32[2];
  if ((v26[79] & 0x80000000) == 0)
    goto LABEL_42;
LABEL_44:
  std::string::__init_copy_ctor_external(a1, *((const std::string::value_type **)v26 + 7), *((_QWORD *)v26 + 8));
LABEL_45:
  if (SHIBYTE(v31) < 0)
    operator delete(__p[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v32[1]);
}

void sub_1A346B168(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1A346B184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A346B19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  if (a14 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a16);
  _Unwind_Resume(a1);
}

void config::hw::regionCode(config::hw *this)
{
  ctu::Gestalt *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v2 = off_1ED114760;
  if (!off_1ED114760)
  {
    ctu::Gestalt::create_default_global(v1);
    v3 = (std::__shared_weak_count *)*(&off_1ED114760 + 1);
    off_1ED114760 = v11;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v2 = off_1ED114760;
  }
  v6 = (std::__shared_weak_count *)*(&off_1ED114760 + 1);
  if (*(&off_1ED114760 + 1))
  {
    v7 = (unint64_t *)(*(&off_1ED114760 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1A346B314(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1A346B330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void config::hw::regionInfo(config::hw *this)
{
  ctu::Gestalt *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v2 = off_1ED114760;
  if (!off_1ED114760)
  {
    ctu::Gestalt::create_default_global(v1);
    v3 = (std::__shared_weak_count *)*(&off_1ED114760 + 1);
    off_1ED114760 = v11;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v2 = off_1ED114760;
  }
  v6 = (std::__shared_weak_count *)*(&off_1ED114760 + 1);
  if (*(&off_1ED114760 + 1))
  {
    v7 = (unint64_t *)(*(&off_1ED114760 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1A346B49C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1A346B4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t config::build::carrier(config::build *this)
{
  uint64_t result;

  result = TelephonyUtilIsCarrierBuild();
  if ((_DWORD)result)
    return TelephonyUtilIsInternalBuild() ^ 1;
  return result;
}

uint64_t config::build::internal_or_carrier(config::build *this)
{
  if ((TelephonyUtilIsInternalBuild() & 1) != 0)
    return 1;
  else
    return TelephonyUtilIsCarrierBuild();
}

void config::build::version(config::build *this)
{
  ctu::Gestalt *v1;
  void (***v2)(_QWORD);
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v2 = (void (***)(_QWORD))off_1ED114760;
  if (!off_1ED114760)
  {
    ctu::Gestalt::create_default_global(v1);
    v3 = (std::__shared_weak_count *)*(&off_1ED114760 + 1);
    off_1ED114760 = v11;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v2 = (void (***)(_QWORD))off_1ED114760;
  }
  v6 = (std::__shared_weak_count *)*(&off_1ED114760 + 1);
  if (*(&off_1ED114760 + 1))
  {
    v7 = (unint64_t *)(*(&off_1ED114760 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (**v2)(v2);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1A346B66C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1A346B688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance, &dword_1A343C000);
  }
  return result;
}

void DIAGTrace::DIAGTrace(DIAGTrace *this)
{
  void *__p[2];
  char v3;

  v3 = 10;
  strcpy((char *)__p, "trace.diag");
  Trace::Trace((uint64_t)this, (uint64_t)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  *(_QWORD *)this = off_1E4A075A0;
  *((_QWORD *)this + 19) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_QWORD *)this + 37) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 52) = TelephonyBasebandCreateController();
  *((_BYTE *)this + 424) = 0;
}

void sub_1A346B7B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void **v2;
  void **v3;
  void **v4;

  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1 + 400);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v2);
  if (*(char *)(v1 + 383) < 0)
  {
    operator delete(*(void **)(v1 + 360));
    if ((*(char *)(v1 + 359) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((*(char *)(v1 + 359) & 0x80000000) == 0)
  {
LABEL_3:
    if (*(char *)(v1 + 303) < 0)
      goto LABEL_4;
    goto LABEL_12;
  }
  operator delete(*v4);
  if (*(char *)(v1 + 303) < 0)
  {
LABEL_4:
    operator delete(*(void **)(v1 + 280));
    if ((*(char *)(v1 + 279) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  if ((*(char *)(v1 + 279) & 0x80000000) == 0)
  {
LABEL_5:
    if (*(char *)(v1 + 255) < 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(*(void **)(v1 + 256));
  if (*(char *)(v1 + 255) < 0)
  {
LABEL_6:
    operator delete(*(void **)(v1 + 232));
    if ((*(char *)(v1 + 231) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  if ((*(char *)(v1 + 231) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(v1 + 207) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_15:
  operator delete(*(void **)(v1 + 208));
  if ((*(char *)(v1 + 207) & 0x80000000) == 0)
  {
LABEL_9:
    Trace::~Trace((Trace *)v1);
    _Unwind_Resume(a1);
  }
LABEL_8:
  operator delete(*v3);
  goto LABEL_9;
}

void sub_1A346B878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const void **ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void DIAGTrace::~DIAGTrace(DIAGTrace *this)
{
  const void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  const void *v6;

  *(_QWORD *)this = off_1E4A075A0;
  v2 = (const void *)*((_QWORD *)this + 52);
  if (v2)
    CFRelease(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 51);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
LABEL_7:
    v6 = (const void *)*((_QWORD *)this + 49);
    if (!v6)
      goto LABEL_9;
    goto LABEL_8;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  v6 = (const void *)*((_QWORD *)this + 49);
  if (v6)
LABEL_8:
    CFRelease(v6);
LABEL_9:
  if (*((char *)this + 383) < 0)
  {
    operator delete(*((void **)this + 45));
    if ((*((char *)this + 359) & 0x80000000) == 0)
    {
LABEL_11:
      if ((*((char *)this + 303) & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_19;
    }
  }
  else if ((*((char *)this + 359) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(*((void **)this + 42));
  if ((*((char *)this + 303) & 0x80000000) == 0)
  {
LABEL_12:
    if ((*((char *)this + 279) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(*((void **)this + 35));
  if ((*((char *)this + 279) & 0x80000000) == 0)
  {
LABEL_13:
    if ((*((char *)this + 255) & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(*((void **)this + 32));
  if ((*((char *)this + 255) & 0x80000000) == 0)
  {
LABEL_14:
    if ((*((char *)this + 231) & 0x80000000) == 0)
      goto LABEL_15;
LABEL_22:
    operator delete(*((void **)this + 26));
    if ((*((char *)this + 207) & 0x80000000) == 0)
      goto LABEL_16;
    goto LABEL_23;
  }
LABEL_21:
  operator delete(*((void **)this + 29));
  if (*((char *)this + 231) < 0)
    goto LABEL_22;
LABEL_15:
  if ((*((char *)this + 207) & 0x80000000) == 0)
  {
LABEL_16:
    Trace::~Trace(this);
    return;
  }
LABEL_23:
  operator delete(*((void **)this + 23));
  Trace::~Trace(this);
}

{
  void *v1;

  DIAGTrace::~DIAGTrace(this);
  operator delete(v1);
}

double DIAGTrace::createInternal@<D0>(_OWORD *a1@<X8>)
{
  DIAGTrace *v3;
  double result;
  __int128 v5;

  v3 = (DIAGTrace *)operator new(0x1B0uLL);
  DIAGTrace::DIAGTrace(v3);
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<DIAGTrace>::shared_ptr[abi:ne180100]<DIAGTrace,std::shared_ptr<DIAGTrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<DIAGTrace>(DIAGTrace*)::{lambda(DIAGTrace*)#1},void>(&v5, (uint64_t)v3);
  ctu::Loggable<Trace,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v5);
  result = *(double *)&v5;
  *a1 = v5;
  return result;
}

void sub_1A346BA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1A346BA8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t DIAGTrace::init(uint64_t a1, uint64_t a2, uint64_t *a3, NSObject **a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v13;
  _QWORD v14[5];
  dispatch_object_t object;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::string v18;
  _QWORD *v19;
  _QWORD block[6];

  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v7 = (std::__shared_weak_count *)a3[1];
    v16 = *a3;
    v17 = v7;
    if (!v7)
      goto LABEL_7;
  }
  else
  {
    v18 = *(std::string *)a2;
    v7 = (std::__shared_weak_count *)a3[1];
    v16 = *a3;
    v17 = v7;
    if (!v7)
      goto LABEL_7;
  }
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
LABEL_7:
  v10 = *a4;
  object = v10;
  if (v10)
    dispatch_retain(v10);
  v11 = Trace::init(a1, (void **)&v18.__r_.__value_.__l.__data_, &v16, &object);
  if (object)
    dispatch_release(object);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v18.__r_.__value_.__l.__data_);
    if (!(_DWORD)v11)
      return v11;
  }
  else if (!(_DWORD)v11)
  {
    return v11;
  }
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 0x40000000;
  v14[2] = ___ZN9DIAGTrace4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_8weak_ptrIN3abm19BasebandTracingTaskEEEN8dispatch5groupE_block_invoke;
  v14[3] = &__block_descriptor_tmp_4;
  v14[4] = a1;
  v19 = v14;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_78;
  block[4] = a1 + 72;
  block[5] = &v19;
  v13 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(a1 + 96))
    dispatch_async_and_wait(v13, block);
  else
    dispatch_sync(v13, block);
  return v11;
}

void sub_1A346BC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::__shared_weak_count *v23;

  if (object)
  {
    dispatch_release(object);
    v23 = a16;
    if (!a16)
    {
LABEL_3:
      if ((a22 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v23 = a16;
    if (!a16)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v23);
  if ((a22 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN9DIAGTrace4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_8weak_ptrIN3abm19BasebandTracingTaskEEEN8dispatch5groupE_block_invoke(uint64_t a1)
{
  return DIAGTrace::initProperty_sync(*(DIAGTrace **)(a1 + 32));
}

uint64_t DIAGTrace::initProperty_sync(DIAGTrace *this)
{
  const __CFAllocator *v2;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v4;
  const void *v5;
  const __CFAllocator *v6;
  _BOOL4 v7;
  const __CFAllocator *v8;
  _BOOL4 v9;
  const __CFAllocator *v10;
  _BOOL4 v11;
  const __CFAllocator *v12;
  _BOOL4 v13;
  int v14;
  BOOL v15;
  int v16;
  const __CFAllocator *v17;
  __CFDictionary *v18;
  const __CFAllocator *v19;
  __CFDictionary *v20;
  char *v21;
  size_t v22;
  std::string::size_type v23;
  std::string *v24;
  uint64_t v25;
  uint64_t v26;
  const __CFAllocator *v27;
  __CFDictionary *v28;
  const __CFString **v29;
  const __CFAllocator *v30;
  __CFDictionary *v31;
  char *v32;
  size_t v33;
  void *v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  const __CFAllocator *v38;
  _BOOL4 v39;
  char *v40;
  size_t v41;
  void *v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  const __CFAllocator *v46;
  _BOOL4 v47;
  char *v48;
  size_t v49;
  void *v50;
  void **v51;
  uint64_t v52;
  uint64_t v53;
  _BOOL4 v54;
  char *v55;
  size_t v56;
  void *v57;
  void **v58;
  uint64_t v59;
  uint64_t v60;
  _BOOL4 v61;
  char *v62;
  size_t v63;
  void *v64;
  void **v65;
  uint64_t v66;
  uint64_t v67;
  _BOOL4 v68;
  char *v69;
  size_t v70;
  void *v71;
  void **v72;
  uint64_t v73;
  uint64_t v74;
  _BOOL4 v75;
  const __CFAllocator *v76;
  _BOOL4 v77;
  const __CFAllocator *v78;
  _BOOL4 v79;
  uint64_t result;
  void *v81[4];
  std::string __p;
  void *v83[2];
  char v84;
  std::string __dst[2];

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v4 = Mutable;
    v5 = (const void *)*((_QWORD *)this + 49);
    *((_QWORD *)this + 49) = v4;
    if (v5)
      CFRelease(v5);
  }
  *((_BYTE *)this + 325) = 0;
  HIBYTE(v81[2]) = 7;
  strcpy((char *)v81, "Enabled");
  memset(&__p, 0, sizeof(__p));
  v84 = 7;
  strcpy((char *)v83, "BBTrace");
  memset(&__dst[1], 0, sizeof(std::string));
  v7 = defaults::get((char *)v83, (char *)v81, &__dst[1]);
  if (v7)
  {
    prop::file::get<std::string>((const void **)v83, (uint64_t)v81, (uint64_t)&__dst[1], __dst);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = __dst[0];
  }
  if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v84 & 0x80000000) == 0)
      goto LABEL_10;
LABEL_13:
    operator delete(v83[0]);
    if (!v7)
      goto LABEL_15;
    goto LABEL_14;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (v84 < 0)
    goto LABEL_13;
LABEL_10:
  if (v7)
LABEL_14:
    util::convert<BOOL>(&__p, (BOOL *)this + 324, 0);
LABEL_15:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
      goto LABEL_17;
  }
  else if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(v81[0]);
LABEL_17:
  ctu::cf::update<char const*,BOOL>(*((__CFDictionary **)this + 49), (const __CFString **)"Enabled", *((unsigned __int8 *)this + 324), (uint64_t)v2, v6);
  HIBYTE(v81[2]) = 9;
  v81[0] = *(void **)"High_Tput";
  LOWORD(v81[1]) = str_14[8];
  memset(&__p, 0, sizeof(__p));
  v84 = 7;
  strcpy((char *)v83, "BBTrace");
  memset(&__dst[1], 0, sizeof(std::string));
  v9 = defaults::get((char *)v83, (char *)v81, &__dst[1]);
  if (v9)
  {
    prop::file::get<std::string>((const void **)v83, (uint64_t)v81, (uint64_t)&__dst[1], __dst);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = __dst[0];
  }
  if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v84 & 0x80000000) == 0)
      goto LABEL_23;
LABEL_28:
    operator delete(v83[0]);
    if (!v9)
      goto LABEL_30;
    goto LABEL_29;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (v84 < 0)
    goto LABEL_28;
LABEL_23:
  if (v9)
LABEL_29:
    util::convert<BOOL>(&__p, (BOOL *)this + 176, 0);
LABEL_30:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
      goto LABEL_32;
  }
  else if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
  {
    goto LABEL_32;
  }
  operator delete(v81[0]);
LABEL_32:
  ctu::cf::update<char const*,BOOL>(*((__CFDictionary **)this + 49), (const __CFString **)"High_Tput", *((unsigned __int8 *)this + 176), (uint64_t)v2, v8);
  HIBYTE(v81[2]) = 12;
  strcpy((char *)v81, "Data_Logging");
  memset(&__p, 0, sizeof(__p));
  v84 = 7;
  strcpy((char *)v83, "BBTrace");
  memset(&__dst[1], 0, sizeof(std::string));
  v11 = defaults::get((char *)v83, (char *)v81, &__dst[1]);
  if (v11)
  {
    prop::file::get<std::string>((const void **)v83, (uint64_t)v81, (uint64_t)&__dst[1], __dst);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = __dst[0];
  }
  if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v84 & 0x80000000) == 0)
      goto LABEL_38;
LABEL_43:
    operator delete(v83[0]);
    if (!v11)
      goto LABEL_45;
    goto LABEL_44;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (v84 < 0)
    goto LABEL_43;
LABEL_38:
  if (v11)
LABEL_44:
    util::convert<BOOL>(&__p, (BOOL *)this + 177, 0);
LABEL_45:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
      goto LABEL_47;
  }
  else if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
  {
    goto LABEL_47;
  }
  operator delete(v81[0]);
LABEL_47:
  ctu::cf::update<char const*,BOOL>(*((__CFDictionary **)this + 49), (const __CFString **)"Data_Logging", *((unsigned __int8 *)this + 177), (uint64_t)v2, v10);
  DIAGTrace::initTraceMode_sync(this);
  HIBYTE(v81[2]) = 7;
  strcpy((char *)v81, "History");
  memset(&__p, 0, sizeof(__p));
  v84 = 7;
  strcpy((char *)v83, "BBTrace");
  memset(&__dst[1], 0, sizeof(std::string));
  v13 = defaults::get((char *)v83, (char *)v81, &__dst[1]);
  if (v13)
  {
    prop::file::get<std::string>((const void **)v83, (uint64_t)v81, (uint64_t)&__dst[1], __dst);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = __dst[0];
  }
  if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v84 & 0x80000000) == 0)
      goto LABEL_53;
LABEL_58:
    operator delete(v83[0]);
    if (!v13)
      goto LABEL_60;
    goto LABEL_59;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (v84 < 0)
    goto LABEL_58;
LABEL_53:
  if (v13)
LABEL_59:
    util::convert<int>(&__p, (_DWORD *)this + 76, 0);
LABEL_60:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
      goto LABEL_62;
  }
  else if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
  {
    goto LABEL_62;
  }
  operator delete(v81[0]);
LABEL_62:
  v14 = *((_DWORD *)this + 76);
  v15 = v14 < 0;
  if (!v14)
    v14 = 2048;
  if (v15)
    v16 = 256;
  else
    v16 = v14;
  *((_DWORD *)this + 76) = v16;
  ctu::cf::update<char const*,int>(*((__CFDictionary **)this + 49), (const __CFString **)"History", v16, v2, v12);
  *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = 4;
  strcpy((char *)__dst, "File");
  *((_BYTE *)&__dst[1].__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst[1], "BBTrace");
  prop::get_from_file((char *)&__dst[1], (char *)__dst, (uint64_t)this + 184);
  if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_69;
LABEL_74:
    operator delete(__dst[0].__r_.__value_.__l.__data_);
    v18 = (__CFDictionary *)*((_QWORD *)this + 49);
    if ((*((char *)this + 207) & 0x80000000) == 0)
      goto LABEL_70;
    goto LABEL_75;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_74;
LABEL_69:
  v18 = (__CFDictionary *)*((_QWORD *)this + 49);
  if ((*((char *)this + 207) & 0x80000000) == 0)
  {
LABEL_70:
    __dst[1] = *(std::string *)((char *)this + 184);
    goto LABEL_76;
  }
LABEL_75:
  std::string::__init_copy_ctor_external(&__dst[1], *((const std::string::value_type **)this + 23), *((_QWORD *)this + 24));
LABEL_76:
  ctu::cf::update<char const*,std::string>(v18, (const __CFString **)"File", (uint64_t)&__dst[1], (uint64_t)v2, v17);
  if (SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst[1].__r_.__value_.__l.__data_);
  *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = 14;
  strcpy((char *)__dst, "File_Secondary");
  *((_BYTE *)&__dst[1].__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst[1], "BBTrace");
  prop::get_from_file((char *)&__dst[1], (char *)__dst, (uint64_t)this + 208);
  if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_80;
LABEL_83:
    operator delete(__dst[0].__r_.__value_.__l.__data_);
    v20 = (__CFDictionary *)*((_QWORD *)this + 49);
    if ((*((char *)this + 231) & 0x80000000) == 0)
      goto LABEL_81;
    goto LABEL_84;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_83;
LABEL_80:
  v20 = (__CFDictionary *)*((_QWORD *)this + 49);
  if ((*((char *)this + 231) & 0x80000000) == 0)
  {
LABEL_81:
    __dst[1] = *(std::string *)((char *)this + 208);
    goto LABEL_85;
  }
LABEL_84:
  std::string::__init_copy_ctor_external(&__dst[1], *((const std::string::value_type **)this + 26), *((_QWORD *)this + 27));
LABEL_85:
  ctu::cf::update<char const*,std::string>(v20, (const __CFString **)"File_Secondary", (uint64_t)&__dst[1], (uint64_t)v2, v19);
  if (SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst[1].__r_.__value_.__l.__data_);
  v21 = diag::config::kExtraDMCFileKey[0];
  v22 = strlen(diag::config::kExtraDMCFileKey[0]);
  if (v22 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v23 = v22;
  if (v22 >= 0x17)
  {
    v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v25 = v22 | 7;
    v26 = v25 + 1;
    v24 = (std::string *)operator new(v25 + 1);
    __dst[0].__r_.__value_.__l.__size_ = v23;
    __dst[0].__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
    goto LABEL_94;
  }
  *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v22;
  v24 = __dst;
  if (v22)
LABEL_94:
    memmove(v24, v21, v23);
  v24->__r_.__value_.__s.__data_[v23] = 0;
  *((_BYTE *)&__dst[1].__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst[1], "BBTrace");
  prop::get_from_file((char *)&__dst[1], (char *)__dst, (uint64_t)this + 232);
  if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_97;
LABEL_100:
    operator delete(__dst[0].__r_.__value_.__l.__data_);
    v28 = (__CFDictionary *)*((_QWORD *)this + 49);
    v29 = (const __CFString **)diag::config::kExtraDMCFileKey[0];
    if ((*((char *)this + 255) & 0x80000000) == 0)
      goto LABEL_98;
    goto LABEL_101;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_100;
LABEL_97:
  v28 = (__CFDictionary *)*((_QWORD *)this + 49);
  v29 = (const __CFString **)diag::config::kExtraDMCFileKey[0];
  if ((*((char *)this + 255) & 0x80000000) == 0)
  {
LABEL_98:
    __dst[1] = *(std::string *)((char *)this + 232);
    goto LABEL_102;
  }
LABEL_101:
  std::string::__init_copy_ctor_external(&__dst[1], *((const std::string::value_type **)this + 29), *((_QWORD *)this + 30));
LABEL_102:
  ctu::cf::update<char const*,std::string>(v28, v29, (uint64_t)&__dst[1], (uint64_t)v2, v27);
  if (SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst[1].__r_.__value_.__l.__data_);
  strcpy((char *)&__dst[0].__r_.__value_.__r.__words[2] + 7, "\nBBTrace");
  strcpy((char *)__dst, "File_Sleep");
  *((_BYTE *)&__dst[1].__r_.__value_.__s + 23) = 7;
  prop::get_from_file((char *)&__dst[1], (char *)__dst, (uint64_t)this + 256);
  if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_106;
LABEL_109:
    operator delete(__dst[0].__r_.__value_.__l.__data_);
    v31 = (__CFDictionary *)*((_QWORD *)this + 49);
    if ((*((char *)this + 279) & 0x80000000) == 0)
      goto LABEL_107;
    goto LABEL_110;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_109;
LABEL_106:
  v31 = (__CFDictionary *)*((_QWORD *)this + 49);
  if ((*((char *)this + 279) & 0x80000000) == 0)
  {
LABEL_107:
    __dst[1] = *(std::string *)((char *)this + 256);
    goto LABEL_111;
  }
LABEL_110:
  std::string::__init_copy_ctor_external(&__dst[1], *((const std::string::value_type **)this + 32), *((_QWORD *)this + 33));
LABEL_111:
  ctu::cf::update<char const*,std::string>(v31, (const __CFString **)"File_Sleep", (uint64_t)&__dst[1], (uint64_t)v2, v30);
  if (SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst[1].__r_.__value_.__l.__data_);
  v32 = diag::config::kEnabledDuringSleepKey[0];
  v33 = strlen(diag::config::kEnabledDuringSleepKey[0]);
  if (v33 > 0x7FFFFFFFFFFFFFF7)
LABEL_282:
    std::string::__throw_length_error[abi:ne180100]();
  v34 = (void *)v33;
  if (v33 >= 0x17)
  {
    v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v36 = v33 | 7;
    v37 = v36 + 1;
    v35 = (void **)operator new(v36 + 1);
    v81[1] = v34;
    v81[2] = (void *)(v37 | 0x8000000000000000);
    v81[0] = v35;
    goto LABEL_120;
  }
  HIBYTE(v81[2]) = v33;
  v35 = v81;
  if (v33)
LABEL_120:
    memmove(v35, v32, (size_t)v34);
  *((_BYTE *)v34 + (_QWORD)v35) = 0;
  memset(&__p, 0, sizeof(__p));
  v84 = 7;
  strcpy((char *)v83, "BBTrace");
  memset(&__dst[1], 0, sizeof(std::string));
  v39 = defaults::get((char *)v83, (char *)v81, &__dst[1]);
  if (v39)
  {
    prop::file::get<std::string>((const void **)v83, (uint64_t)v81, (uint64_t)&__dst[1], __dst);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = __dst[0];
  }
  if (SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst[1].__r_.__value_.__l.__data_);
    if ((v84 & 0x80000000) == 0)
    {
LABEL_127:
      if (!v39)
        goto LABEL_133;
      goto LABEL_131;
    }
  }
  else if ((v84 & 0x80000000) == 0)
  {
    goto LABEL_127;
  }
  operator delete(v83[0]);
  if (!v39)
    goto LABEL_133;
LABEL_131:
  LODWORD(__dst[1].__r_.__value_.__l.__data_) = -1431655766;
  if (util::convert<int>(&__p, &__dst[1], 0))
    *((_DWORD *)this + 43) = __dst[1].__r_.__value_.__l.__data_;
LABEL_133:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
      goto LABEL_135;
  }
  else if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
  {
    goto LABEL_135;
  }
  operator delete(v81[0]);
LABEL_135:
  ctu::cf::update<char const*,int>(*((__CFDictionary **)this + 49), (const __CFString **)diag::config::kEnabledDuringSleepKey[0], *((_DWORD *)this + 43), v2, v38);
  v40 = diag::config::kBufferingOnAPAwake[0];
  v41 = strlen(diag::config::kBufferingOnAPAwake[0]);
  if (v41 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_282;
  v42 = (void *)v41;
  if (v41 >= 0x17)
  {
    v44 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v41 | 7) != 0x17)
      v44 = v41 | 7;
    v45 = v44 + 1;
    v43 = (void **)operator new(v44 + 1);
    v81[1] = v42;
    v81[2] = (void *)(v45 | 0x8000000000000000);
    v81[0] = v43;
    goto LABEL_142;
  }
  HIBYTE(v81[2]) = v41;
  v43 = v81;
  if (v41)
LABEL_142:
    memmove(v43, v40, (size_t)v42);
  *((_BYTE *)v42 + (_QWORD)v43) = 0;
  memset(&__p, 0, sizeof(__p));
  v84 = 7;
  strcpy((char *)v83, "BBTrace");
  memset(&__dst[1], 0, sizeof(std::string));
  v47 = defaults::get((char *)v83, (char *)v81, &__dst[1]);
  if (v47)
  {
    prop::file::get<std::string>((const void **)v83, (uint64_t)v81, (uint64_t)&__dst[1], __dst);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = __dst[0];
  }
  if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v84 & 0x80000000) == 0)
      goto LABEL_149;
LABEL_154:
    operator delete(v83[0]);
    if (!v47)
      goto LABEL_156;
    goto LABEL_155;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (v84 < 0)
    goto LABEL_154;
LABEL_149:
  if (v47)
LABEL_155:
    util::convert<BOOL>(&__p, (BOOL *)this + 326, 0);
LABEL_156:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
      goto LABEL_158;
  }
  else if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
  {
    goto LABEL_158;
  }
  operator delete(v81[0]);
LABEL_158:
  ctu::cf::update<char const*,BOOL>(*((__CFDictionary **)this + 49), (const __CFString **)diag::config::kBufferingOnAPAwake[0], *((unsigned __int8 *)this + 326), (uint64_t)v2, v46);
  v48 = diag::config::kStallDetectionKey[0];
  v49 = strlen(diag::config::kStallDetectionKey[0]);
  if (v49 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_282;
  v50 = (void *)v49;
  if (v49 >= 0x17)
  {
    v52 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17)
      v52 = v49 | 7;
    v53 = v52 + 1;
    v51 = (void **)operator new(v52 + 1);
    v81[1] = v50;
    v81[2] = (void *)(v53 | 0x8000000000000000);
    v81[0] = v51;
    goto LABEL_165;
  }
  HIBYTE(v81[2]) = v49;
  v51 = v81;
  if (v49)
LABEL_165:
    memmove(v51, v48, (size_t)v50);
  *((_BYTE *)v50 + (_QWORD)v51) = 0;
  memset(&__p, 0, sizeof(__p));
  v84 = 7;
  strcpy((char *)v83, "BBTrace");
  memset(&__dst[1], 0, sizeof(std::string));
  v54 = defaults::get((char *)v83, (char *)v81, &__dst[1]);
  if (v54)
  {
    prop::file::get<std::string>((const void **)v83, (uint64_t)v81, (uint64_t)&__dst[1], __dst);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = __dst[0];
  }
  if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v84 & 0x80000000) == 0)
      goto LABEL_172;
LABEL_177:
    operator delete(v83[0]);
    if (!v54)
      goto LABEL_179;
    goto LABEL_178;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (v84 < 0)
    goto LABEL_177;
LABEL_172:
  if (v54)
LABEL_178:
    util::convert<BOOL>(&__p, (BOOL *)this + 312, 0);
LABEL_179:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
      goto LABEL_181;
  }
  else if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
  {
    goto LABEL_181;
  }
  operator delete(v81[0]);
LABEL_181:
  v55 = diag::config::kStallDetectionRetriesKey[0];
  v56 = strlen(diag::config::kStallDetectionRetriesKey[0]);
  if (v56 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_282;
  v57 = (void *)v56;
  if (v56 >= 0x17)
  {
    v59 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v56 | 7) != 0x17)
      v59 = v56 | 7;
    v60 = v59 + 1;
    v58 = (void **)operator new(v59 + 1);
    v81[1] = v57;
    v81[2] = (void *)(v60 | 0x8000000000000000);
    v81[0] = v58;
    goto LABEL_188;
  }
  HIBYTE(v81[2]) = v56;
  v58 = v81;
  if (v56)
LABEL_188:
    memmove(v58, v55, (size_t)v57);
  *((_BYTE *)v57 + (_QWORD)v58) = 0;
  memset(&__p, 0, sizeof(__p));
  v84 = 7;
  strcpy((char *)v83, "BBTrace");
  memset(&__dst[1], 0, sizeof(std::string));
  v61 = defaults::get((char *)v83, (char *)v81, &__dst[1]);
  if (v61)
  {
    prop::file::get<std::string>((const void **)v83, (uint64_t)v81, (uint64_t)&__dst[1], __dst);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = __dst[0];
  }
  if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v84 & 0x80000000) == 0)
      goto LABEL_195;
LABEL_200:
    operator delete(v83[0]);
    if (!v61)
      goto LABEL_202;
    goto LABEL_201;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (v84 < 0)
    goto LABEL_200;
LABEL_195:
  if (v61)
LABEL_201:
    util::convert<unsigned int>(&__p, (_DWORD *)this + 79, 0);
LABEL_202:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
      goto LABEL_204;
  }
  else if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
  {
    goto LABEL_204;
  }
  operator delete(v81[0]);
LABEL_204:
  v62 = diag::config::kStallDetectionRecoveryKey[0];
  v63 = strlen(diag::config::kStallDetectionRecoveryKey[0]);
  if (v63 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_282;
  v64 = (void *)v63;
  if (v63 >= 0x17)
  {
    v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v63 | 7) != 0x17)
      v66 = v63 | 7;
    v67 = v66 + 1;
    v65 = (void **)operator new(v66 + 1);
    v81[1] = v64;
    v81[2] = (void *)(v67 | 0x8000000000000000);
    v81[0] = v65;
    goto LABEL_211;
  }
  HIBYTE(v81[2]) = v63;
  v65 = v81;
  if (v63)
LABEL_211:
    memmove(v65, v62, (size_t)v64);
  *((_BYTE *)v64 + (_QWORD)v65) = 0;
  memset(&__p, 0, sizeof(__p));
  v84 = 7;
  strcpy((char *)v83, "BBTrace");
  memset(&__dst[1], 0, sizeof(std::string));
  v68 = defaults::get((char *)v83, (char *)v81, &__dst[1]);
  if (v68)
  {
    prop::file::get<std::string>((const void **)v83, (uint64_t)v81, (uint64_t)&__dst[1], __dst);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = __dst[0];
  }
  if (SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst[1].__r_.__value_.__l.__data_);
    if ((v84 & 0x80000000) == 0)
    {
LABEL_218:
      if (!v68)
        goto LABEL_226;
      goto LABEL_224;
    }
  }
  else if ((v84 & 0x80000000) == 0)
  {
    goto LABEL_218;
  }
  operator delete(v83[0]);
  if (!v68)
    goto LABEL_226;
LABEL_224:
  LODWORD(__dst[1].__r_.__value_.__l.__data_) = -1431655766;
  if (util::convert<int>(&__p, &__dst[1], 0))
    *((_DWORD *)this + 42) = __dst[1].__r_.__value_.__l.__data_;
LABEL_226:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
      goto LABEL_228;
  }
  else if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
  {
    goto LABEL_228;
  }
  operator delete(v81[0]);
LABEL_228:
  v69 = diag::config::kKeepScratchLogsKey[0];
  v70 = strlen(diag::config::kKeepScratchLogsKey[0]);
  if (v70 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_282;
  v71 = (void *)v70;
  if (v70 >= 0x17)
  {
    v73 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v70 | 7) != 0x17)
      v73 = v70 | 7;
    v74 = v73 + 1;
    v72 = (void **)operator new(v73 + 1);
    v81[1] = v71;
    v81[2] = (void *)(v74 | 0x8000000000000000);
    v81[0] = v72;
    goto LABEL_235;
  }
  HIBYTE(v81[2]) = v70;
  v72 = v81;
  if (v70)
LABEL_235:
    memmove(v72, v69, (size_t)v71);
  *((_BYTE *)v71 + (_QWORD)v72) = 0;
  memset(&__p, 0, sizeof(__p));
  v84 = 7;
  strcpy((char *)v83, "BBTrace");
  memset(&__dst[1], 0, sizeof(std::string));
  v75 = defaults::get((char *)v83, (char *)v81, &__dst[1]);
  if (v75)
  {
    prop::file::get<std::string>((const void **)v83, (uint64_t)v81, (uint64_t)&__dst[1], __dst);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = __dst[0];
  }
  if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v84 & 0x80000000) == 0)
      goto LABEL_242;
LABEL_247:
    operator delete(v83[0]);
    if (!v75)
      goto LABEL_249;
    goto LABEL_248;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (v84 < 0)
    goto LABEL_247;
LABEL_242:
  if (v75)
LABEL_248:
    util::convert<BOOL>(&__p, (BOOL *)this + 327, 0);
LABEL_249:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
      goto LABEL_251;
  }
  else if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
  {
    goto LABEL_251;
  }
  operator delete(v81[0]);
LABEL_251:
  HIBYTE(v81[2]) = 18;
  strcpy((char *)v81, "MaxMemoryFileCount");
  memset(&__p, 0, sizeof(__p));
  v84 = 7;
  strcpy((char *)v83, "BBTrace");
  memset(&__dst[1], 0, sizeof(std::string));
  v77 = defaults::get((char *)v83, (char *)v81, &__dst[1]);
  if (v77)
  {
    prop::file::get<std::string>((const void **)v83, (uint64_t)v81, (uint64_t)&__dst[1], __dst);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = __dst[0];
  }
  if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v84 & 0x80000000) == 0)
      goto LABEL_257;
LABEL_262:
    operator delete(v83[0]);
    if (!v77)
      goto LABEL_264;
    goto LABEL_263;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (v84 < 0)
    goto LABEL_262;
LABEL_257:
  if (v77)
LABEL_263:
    util::convert<unsigned int>(&__p, (_DWORD *)this + 77, 0);
LABEL_264:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
      goto LABEL_266;
  }
  else if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
  {
    goto LABEL_266;
  }
  operator delete(v81[0]);
LABEL_266:
  ctu::cf::update<char const*,unsigned int>(*((__CFDictionary **)this + 49), (const __CFString **)"MaxMemoryFileCount", *((_DWORD *)this + 77), v2, v76);
  HIBYTE(v81[2]) = 8;
  strcpy((char *)v81, "FileSize");
  memset(&__p, 0, sizeof(__p));
  v84 = 7;
  strcpy((char *)v83, "BBTrace");
  memset(&__dst[1], 0, sizeof(std::string));
  v79 = defaults::get((char *)v83, (char *)v81, &__dst[1]);
  if (v79)
  {
    prop::file::get<std::string>((const void **)v83, (uint64_t)v81, (uint64_t)&__dst[1], __dst);
    __p = __dst[0];
  }
  if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v84 & 0x80000000) == 0)
      goto LABEL_270;
LABEL_275:
    operator delete(v83[0]);
    if (!v79)
      goto LABEL_277;
    goto LABEL_276;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (v84 < 0)
    goto LABEL_275;
LABEL_270:
  if (v79)
LABEL_276:
    util::convert<unsigned int>(&__p, (_DWORD *)this + 96, 0);
LABEL_277:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81[2]) & 0x80000000) == 0)
      goto LABEL_279;
LABEL_281:
    operator delete(v81[0]);
    goto LABEL_279;
  }
  if (SHIBYTE(v81[2]) < 0)
    goto LABEL_281;
LABEL_279:
  result = ctu::cf::update<char const*,unsigned int>(*((__CFDictionary **)this + 49), (const __CFString **)"FileSize", *((_DWORD *)this + 96), v2, v78);
  *((_QWORD *)this + 19) |= 1uLL;
  return result;
}

void sub_1A346D004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void DIAGTrace::reinitService_sync(DIAGTrace *this, int a2)
{
  NSObject *v4;
  diag::Service::Internal **v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  void *v23;
  NSObject *v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD aBlock[6];
  std::__shared_weak_count *v33;
  void *v34;
  dispatch_object_t object;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint8_t buf[8];
  uint64_t v39;
  void (*v40)(uint64_t);
  void *v41;
  uint64_t *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl(&dword_1A343C000, v4, OS_LOG_TYPE_DEFAULT, "#I Service reinit requested with preserve = %d", buf, 8u);
  }
  if ((a2 & 1) != 0)
  {
    v5 = (diag::Service::Internal **)*((_QWORD *)this + 50);
    v6 = *((_QWORD *)this + 5);
    if (v5)
    {
      if (os_log_type_enabled(*((os_log_t *)this + 5), OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A343C000, v6, OS_LOG_TYPE_DEFAULT, "#I Service will be reinitialized", buf, 2u);
        v5 = (diag::Service::Internal **)*((_QWORD *)this + 50);
      }
      diag::Service::Internal::init(*v5);
      return;
    }
  }
  else
  {
    v6 = *((_QWORD *)this + 5);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v6, OS_LOG_TYPE_DEFAULT, "#I Service will be created", buf, 2u);
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v7 || (v8 = *((_QWORD *)this + 9), (v9 = std::__shared_weak_count::lock(v7)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v10 = v9;
  p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v10);
  }
  v15 = operator new(0x10uLL);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1A343C000);
  }
  v17 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  v39 = 0x40000000;
  v40 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v41 = &__block_descriptor_tmp_13_6;
  v42 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v18 = unk_1ED114C90;
    v36 = GetABMLogServer(void)::sLogServer;
    v37 = (std::__shared_weak_count *)unk_1ED114C90;
    if (unk_1ED114C90)
      goto LABEL_22;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
    v18 = unk_1ED114C90;
    v36 = GetABMLogServer(void)::sLogServer;
    v37 = (std::__shared_weak_count *)unk_1ED114C90;
    if (unk_1ED114C90)
    {
LABEL_22:
      v19 = (unint64_t *)(v18 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  v21 = *((_DWORD *)this + 40);
  aBlock[0] = v17;
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN9DIAGTrace18reinitService_syncEb_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_7_1;
  aBlock[4] = this;
  aBlock[5] = v8;
  v33 = v10;
  do
    v22 = __ldxr(p_shared_weak_owners);
  while (__stxr(v22 + 1, p_shared_weak_owners));
  v23 = _Block_copy(aBlock);
  v24 = *((_QWORD *)this + 11);
  if (v24)
    dispatch_retain(*((dispatch_object_t *)this + 11));
  v34 = v23;
  object = v24;
  diag::Service::Service(v15, &v36, v21, (uint64_t)&v34);
  v25 = operator new(0x20uLL);
  *v25 = off_1E4A07B48;
  v25[1] = 0;
  v25[2] = 0;
  v25[3] = v15;
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 51);
  *((_QWORD *)this + 50) = v15;
  *((_QWORD *)this + 51) = v25;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (object)
    dispatch_release(object);
  if (v34)
    _Block_release(v34);
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v33)
    std::__shared_weak_count::__release_weak(v33);
  std::__shared_weak_count::__release_weak(v10);
}

void sub_1A346D524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, char a19)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN9DIAGTrace18reinitService_syncEb_block_invoke(_QWORD *a1, int a2, size_t *a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  NSObject *v11;
  __int128 v12;
  const void *v13;
  size_t v14;
  size_t v15;
  __int128 *p_dst;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  size_t v20;
  size_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  size_t v26;
  int v27;
  size_t v28;
  unint64_t v29;
  char *v30;
  void **v31;
  char *v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  size_t v38;
  std::string v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  __int128 v46;
  char v47;
  char v48[8];
  _QWORD *v49;
  void *__p[2];
  char v51;
  void *v52[3];
  __int128 v53;
  unint64_t v54;
  __int128 __dst;
  unint64_t v56;
  void *v57[2];
  uint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint8_t buf[16];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    v60 = v8;
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      v59 = v10;
      if (a2 != 4 || !v10)
      {
LABEL_72:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v37 = __ldaxr(p_shared_owners);
        while (__stlxr(v37 - 1, p_shared_owners));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v11 = v7[5];
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v38 = (size_t)a3;
        if (*((char *)a3 + 23) < 0)
          v38 = *a3;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v38;
        _os_log_error_impl(&dword_1A343C000, v11, OS_LOG_TYPE_ERROR, "Service error. %s", buf, 0xCu);
      }
      v58 = 0x13AAAAAA00AAAAAALL;
      qmemcpy(v57, "Diag trace faile", sizeof(v57));
      *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v66 = v12;
      v67 = v12;
      v64 = v12;
      v65 = v12;
      v62 = v12;
      v63 = v12;
      *(_OWORD *)buf = v12;
      v13 = (const void *)*MEMORY[0x1E0CFB590];
      v14 = strlen((const char *)*MEMORY[0x1E0CFB590]);
      if (v14 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v15 = v14;
      if (v14 >= 0x17)
      {
        v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v14 | 7) != 0x17)
          v17 = v14 | 7;
        v18 = v17 + 1;
        p_dst = (__int128 *)operator new(v17 + 1);
        *((_QWORD *)&__dst + 1) = v15;
        v56 = v18 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v56) = v14;
        p_dst = &__dst;
        if (!v14)
        {
LABEL_14:
          *((_BYTE *)p_dst + v15) = 0;
          v19 = (const void *)*MEMORY[0x1E0CFBDA0];
          v20 = strlen((const char *)*MEMORY[0x1E0CFBDA0]);
          if (v20 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v21 = v20;
          if (v20 >= 0x17)
          {
            v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v20 | 7) != 0x17)
              v23 = v20 | 7;
            v24 = v23 + 1;
            v22 = operator new(v23 + 1);
            *((_QWORD *)&v53 + 1) = v21;
            v54 = v24 | 0x8000000000000000;
            *(_QWORD *)&v53 = v22;
          }
          else
          {
            HIBYTE(v54) = v20;
            v22 = &v53;
            if (!v20)
            {
LABEL_22:
              v22[v21] = 0;
              v25 = SHIBYTE(v58);
              if (v58 >= 0)
                v26 = HIBYTE(v58);
              else
                v26 = (size_t)v57[1];
              v27 = *((char *)a3 + 23);
              if (v27 >= 0)
                v28 = *((unsigned __int8 *)a3 + 23);
              else
                v28 = a3[1];
              v29 = v28 + v26;
              memset(v52, 170, sizeof(v52));
              if (v28 + v26 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              if (v29 > 0x16)
              {
                v34 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v29 | 7) != 0x17)
                  v34 = v29 | 7;
                v35 = v34 + 1;
                v30 = (char *)operator new(v34 + 1);
                v52[1] = (void *)(v28 + v26);
                v52[2] = (void *)(v35 | 0x8000000000000000);
                v52[0] = v30;
                if (!v26)
                {
LABEL_35:
                  v32 = &v30[v26];
                  if (v28)
                  {
                    if (v27 >= 0)
                      v33 = a3;
                    else
                      v33 = (const void *)*a3;
                    memmove(v32, v33, v28);
                  }
                  v32[v28] = 0;
                  Timestamp::Timestamp((Timestamp *)v48);
                  Timestamp::asString((uint64_t)v48, 0, 9, __p);
                  v47 = 0;
                  LOBYTE(v46) = 0;
                  ResetInfo::ResetInfo((std::string *)buf, &__dst, &v53, (__int128 *)v52, (uint64_t)__p, 7, &v46);
                  if (v51 < 0)
                  {
                    operator delete(__p[0]);
                    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v48, v49);
                    if ((SHIBYTE(v52[2]) & 0x80000000) == 0)
                    {
LABEL_42:
                      if ((SHIBYTE(v54) & 0x80000000) == 0)
                        goto LABEL_43;
                      goto LABEL_61;
                    }
                  }
                  else
                  {
                    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v48, v49);
                    if ((SHIBYTE(v52[2]) & 0x80000000) == 0)
                      goto LABEL_42;
                  }
                  operator delete(v52[0]);
                  if ((SHIBYTE(v54) & 0x80000000) == 0)
                  {
LABEL_43:
                    if ((SHIBYTE(v56) & 0x80000000) == 0)
                      goto LABEL_44;
LABEL_62:
                    operator delete((void *)__dst);
LABEL_44:
                    ResetInfo::ResetInfo(&v39, (__int128 *)buf);
                    DIAGTrace::commandResetModem_sync(v7, (__int128 *)&v39);
                    if (v45 < 0)
                    {
                      operator delete(v44);
                      if ((v43 & 0x80000000) == 0)
                      {
LABEL_46:
                        if ((v41 & 0x80000000) == 0)
                          goto LABEL_47;
                        goto LABEL_65;
                      }
                    }
                    else if ((v43 & 0x80000000) == 0)
                    {
                      goto LABEL_46;
                    }
                    operator delete(v42);
                    if ((v41 & 0x80000000) == 0)
                    {
LABEL_47:
                      if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_48;
                      goto LABEL_66;
                    }
LABEL_65:
                    operator delete(v40);
                    if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_48:
                      if ((SHIBYTE(v67) & 0x80000000) == 0)
                        goto LABEL_49;
                      goto LABEL_67;
                    }
LABEL_66:
                    operator delete(v39.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v67) & 0x80000000) == 0)
                    {
LABEL_49:
                      if ((SBYTE7(v65) & 0x80000000) == 0)
                        goto LABEL_50;
                      goto LABEL_68;
                    }
LABEL_67:
                    operator delete(*((void **)&v66 + 1));
                    if ((SBYTE7(v65) & 0x80000000) == 0)
                    {
LABEL_50:
                      if ((SHIBYTE(v63) & 0x80000000) == 0)
                        goto LABEL_51;
                      goto LABEL_69;
                    }
LABEL_68:
                    operator delete((void *)v64);
                    if ((SHIBYTE(v63) & 0x80000000) == 0)
                    {
LABEL_51:
                      if ((SBYTE7(v62) & 0x80000000) == 0)
                        goto LABEL_52;
                      goto LABEL_70;
                    }
LABEL_69:
                    operator delete(*((void **)&v62 + 1));
                    if ((SBYTE7(v62) & 0x80000000) == 0)
                    {
LABEL_52:
                      if ((v25 & 0x80000000) == 0)
                        goto LABEL_53;
                      goto LABEL_71;
                    }
LABEL_70:
                    operator delete(*(void **)buf);
                    if ((v25 & 0x80000000) == 0)
                    {
LABEL_53:
                      v9 = v60;
                      if (!v60)
                        return;
                      goto LABEL_72;
                    }
LABEL_71:
                    operator delete(v57[0]);
                    v9 = v60;
                    if (!v60)
                      return;
                    goto LABEL_72;
                  }
LABEL_61:
                  operator delete((void *)v53);
                  if ((SHIBYTE(v56) & 0x80000000) == 0)
                    goto LABEL_44;
                  goto LABEL_62;
                }
              }
              else
              {
                memset(v52, 0, sizeof(v52));
                v30 = (char *)v52;
                HIBYTE(v52[2]) = v28 + v26;
                if (!v26)
                  goto LABEL_35;
              }
              if (v25 >= 0)
                v31 = v57;
              else
                v31 = (void **)v57[0];
              memmove(v30, v31, v26);
              goto LABEL_35;
            }
          }
          memmove(v22, v19, v21);
          goto LABEL_22;
        }
      }
      memmove(p_dst, v13, v15);
      goto LABEL_14;
    }
  }
}

void sub_1A346DAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  char v58;
  uint64_t v59;

  ResetInfo::~ResetInfo((void **)&a9);
  ResetInfo::~ResetInfo((void **)(v59 - 224));
  if (v58 < 0)
    operator delete(__p);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v59 - 240);
  _Unwind_Resume(a1);
}

void DIAGTrace::commandResetModem_sync(_QWORD *a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::string v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *__p;
  char v17;
  uint8_t buf[16];
  uint64_t v19;
  std::__shared_weak_count *v20;

  v3 = (std::__shared_weak_count *)a1[17];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v20 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = a1[16];
      v19 = v7;
      if (!v7)
        goto LABEL_10;
      v8 = a1[5];
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A343C000, v8, OS_LOG_TYPE_DEFAULT, "#I Request to reset baseband", buf, 2u);
      }
      ResetInfo::ResetInfo(&v11, a2);
      abm::BasebandTracingTask::commandResetModem(v7, (ResetInfo *)&v11);
      if (v17 < 0)
      {
        operator delete(__p);
        if ((v15 & 0x80000000) == 0)
        {
LABEL_8:
          if ((v13 & 0x80000000) == 0)
            goto LABEL_9;
          goto LABEL_17;
        }
      }
      else if ((v15 & 0x80000000) == 0)
      {
        goto LABEL_8;
      }
      operator delete(v14);
      if ((v13 & 0x80000000) == 0)
      {
LABEL_9:
        if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_10;
LABEL_18:
        operator delete(v11.__r_.__value_.__l.__data_);
LABEL_10:
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        return;
      }
LABEL_17:
      operator delete(v12);
      if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_18;
    }
  }
}

void sub_1A346DD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;

  ResetInfo::~ResetInfo(&a9);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v9 - 48);
  _Unwind_Resume(a1);
}

void sub_1A346DD28(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c29_ZTSNSt3__18weak_ptrI5TraceEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c29_ZTSNSt3__18weak_ptrI5TraceEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t DIAGTrace::getDefaultEnabled(DIAGTrace *this)
{
  unsigned int IsCarrierBuild;
  config::hw *IsInternalBuild;
  int v3;
  uint64_t result;

  IsCarrierBuild = TelephonyUtilIsCarrierBuild();
  IsInternalBuild = (config::hw *)TelephonyUtilIsInternalBuild();
  v3 = (int)IsInternalBuild;
  LODWORD(result) = config::hw::watch(IsInternalBuild);
  if (v3)
    return result;
  else
    return IsCarrierBuild;
}

uint64_t prop::bbtrace::get<BOOL>(char *a1, BOOL *a2)
{
  _BOOL4 v4;
  uint64_t v5;
  std::string v7;
  void *__p[2];
  char v9;
  std::string v10;
  std::string v11;

  memset(&v7, 0, sizeof(v7));
  v9 = 7;
  strcpy((char *)__p, "BBTrace");
  memset(&v11, 0, sizeof(v11));
  v4 = defaults::get((char *)__p, a1, &v11);
  if (v4)
  {
    prop::file::get<std::string>((const void **)__p, (uint64_t)a1, (uint64_t)&v11, &v10);
    v7 = v10;
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_5:
      if (v4)
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else if ((v9 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p[0]);
  if (v4)
  {
LABEL_6:
    v5 = util::convert<BOOL>(&v7, a2, 0);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_12;
    return v5;
  }
LABEL_10:
  v5 = 0;
  if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v5;
LABEL_12:
  operator delete(v7.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1A346DF00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t DIAGTrace::initTraceMode_sync(DIAGTrace *this)
{
  _BOOL4 v2;
  BOOL v3;
  NSObject *v4;
  std::string *p_p;
  void **v6;
  char v7;
  size_t v8;
  std::string::size_type v9;
  int v10;
  size_t size;
  void *v12;
  std::string *v13;
  void **v14;
  std::string *v15;
  uint64_t v16;
  const char *v17;
  NSObject *v18;
  DIAGTrace *v19;
  NSObject *v20;
  int v21;
  void **v22;
  char v23;
  char v24;
  NSObject *v25;
  void **v26;
  void **v27;
  void **v28;
  size_t v29;
  _BOOL4 v30;
  int v31;
  const __CFAllocator *v32;
  _BOOL4 v33;
  NSObject *v34;
  DIAGTrace *v35;
  int v36;
  char v37;
  char v38;
  _BOOL4 v39;
  int v40;
  _BOOL4 v41;
  int v42;
  const __CFAllocator *v43;
  const __CFAllocator *v44;
  uint64_t v45;
  std::string *v47;
  void **v48;
  DIAGTrace *v49;
  void *v50[2];
  char v51;
  std::string __p;
  void *__s1[3];
  std::string v54;
  std::string v55;
  std::string v56;
  std::string buf;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  memset(__s1, 170, sizeof(__s1));
  Trace::getCurrentBootSessionUUID(__s1);
  memset(&__p, 0, sizeof(__p));
  *((_BYTE *)&v54.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v54, "BootSessionUUID");
  *((_BYTE *)&v55.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v55, "BBTrace");
  memset(&buf, 0, sizeof(buf));
  v2 = defaults::get((char *)&v55, (char *)&v54, &buf);
  v3 = v2;
  if (v2)
  {
    prop::file::get<std::string>((const void **)&v55.__r_.__value_.__l.__data_, (uint64_t)&v54, (uint64_t)&buf, &v56);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v56;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_7:
      if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_32;
    }
  }
  else if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(v55.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_8:
    v4 = *((_QWORD *)this + 5);
    if (v3)
      goto LABEL_9;
LABEL_33:
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      goto LABEL_159;
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    v17 = "Failed to get boot session uuid from preferences";
    v18 = v4;
    goto LABEL_158;
  }
LABEL_32:
  operator delete(v54.__r_.__value_.__l.__data_);
  v4 = *((_QWORD *)this + 5);
  if (!v3)
    goto LABEL_33;
LABEL_9:
  v49 = this;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v6 = __s1;
    if (SHIBYTE(__s1[2]) < 0)
      v6 = (void **)__s1[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v6;
    _os_log_impl(&dword_1A343C000, v4, OS_LOG_TYPE_DEFAULT, "#N prefs boot session uuid: %s, current boot session uuid: %s", (uint8_t *)&buf, 0x16u);
  }
  v7 = HIBYTE(__s1[2]);
  if (SHIBYTE(__s1[2]) >= 0)
    v8 = HIBYTE(__s1[2]);
  else
    v8 = (size_t)__s1[1];
  v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  size = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v9 = __p.__r_.__value_.__l.__size_;
  if (v8 != v9)
  {
LABEL_35:
    v19 = v49;
    v20 = *((_QWORD *)v49 + 5);
    v21 = *(_DWORD *)"race";
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      goto LABEL_40;
    if (v7 >= 0)
      v22 = __s1;
    else
      v22 = (void **)__s1[0];
    goto LABEL_39;
  }
  v12 = (void *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &__p;
  else
    v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((HIBYTE(__s1[2]) & 0x80) == 0)
  {
    if (HIBYTE(__s1[2]))
    {
      v14 = __s1;
      v15 = v13;
      v16 = HIBYTE(__s1[2]);
      while (*(unsigned __int8 *)v14 == v15->__r_.__value_.__s.__data_[0])
      {
        v14 = (void **)((char *)v14 + 1);
        v15 = (std::string *)((char *)v15 + 1);
        if (!--v16)
          goto LABEL_52;
      }
      goto LABEL_35;
    }
LABEL_52:
    v27 = (void **)((char *)v49 + 280);
    if ((std::string *)((char *)v49 + 280) != &__p)
    {
      if (*((char *)v49 + 303) < 0)
      {
        std::string::__assign_no_alias<false>(v27, v13, v8);
      }
      else if (v10 < 0)
      {
        std::string::__assign_no_alias<true>(v27, v12, size);
      }
      else
      {
        *(_OWORD *)v27 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *((_QWORD *)v49 + 37) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      }
    }
    v51 = 4;
    strcpy((char *)v50, "Mode");
    memset(&v54, 0, sizeof(v54));
    *((_BYTE *)&v55.__r_.__value_.__s + 23) = 7;
    strcpy((char *)&v55, "BBTrace");
    memset(&buf, 0, sizeof(buf));
    v39 = defaults::get((char *)&v55, (char *)v50, &buf);
    if (v39)
    {
      prop::file::get<std::string>((const void **)&v55.__r_.__value_.__l.__data_, (uint64_t)v50, (uint64_t)&buf, &v56);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      v54 = v56;
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_120:
        if (!v39)
          goto LABEL_126;
        goto LABEL_124;
      }
    }
    else if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_120;
    }
    operator delete(v55.__r_.__value_.__l.__data_);
    if (!v39)
      goto LABEL_126;
LABEL_124:
    LODWORD(buf.__r_.__value_.__l.__data_) = -1431655766;
    v40 = util::convert<int>(&v54, &buf, 0);
    LOBYTE(v39) = v40;
    if (v40)
      *((_DWORD *)v49 + 40) = buf.__r_.__value_.__l.__data_;
LABEL_126:
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v54.__r_.__value_.__l.__data_);
      if ((v51 & 0x80000000) == 0)
      {
LABEL_128:
        if (v39)
          goto LABEL_129;
        goto LABEL_137;
      }
    }
    else if ((v51 & 0x80000000) == 0)
    {
      goto LABEL_128;
    }
    operator delete(v50[0]);
    if (v39)
    {
LABEL_129:
      v51 = 14;
      strcpy((char *)v50, "TraceOwnership");
      memset(&v54, 0, sizeof(v54));
      *((_BYTE *)&v55.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v55, "BBTrace");
      memset(&buf, 0, sizeof(buf));
      v41 = defaults::get((char *)&v55, (char *)v50, &buf);
      if (v41)
      {
        prop::file::get<std::string>((const void **)&v55.__r_.__value_.__l.__data_, (uint64_t)v50, (uint64_t)&buf, &v56);
        v54 = v56;
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(buf.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_133:
          if (!v41)
            goto LABEL_143;
          goto LABEL_141;
        }
      }
      else if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_133;
      }
      operator delete(v55.__r_.__value_.__l.__data_);
      if (!v41)
        goto LABEL_143;
LABEL_141:
      LODWORD(buf.__r_.__value_.__l.__data_) = -1431655766;
      v42 = util::convert<int>(&v54, &buf, 0);
      LOBYTE(v41) = v42;
      if (v42)
        *((_DWORD *)v49 + 41) = buf.__r_.__value_.__l.__data_;
LABEL_143:
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v54.__r_.__value_.__l.__data_);
        if ((v51 & 0x80000000) == 0)
        {
LABEL_145:
          v35 = v49;
          if (v41)
            goto LABEL_146;
LABEL_151:
          v34 = *((_QWORD *)v35 + 5);
          if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
            goto LABEL_159;
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          v17 = "Failed to get transport owner id from preferences for same boot instance";
          goto LABEL_157;
        }
      }
      else if ((v51 & 0x80000000) == 0)
      {
        goto LABEL_145;
      }
      operator delete(v50[0]);
      v35 = v49;
      if (v41)
        goto LABEL_146;
      goto LABEL_151;
    }
LABEL_137:
    v34 = *((_QWORD *)v49 + 5);
    if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      goto LABEL_159;
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    v17 = "Failed to get trace mode from preferences for same boot instance";
    goto LABEL_157;
  }
  v22 = (void **)__s1[0];
  if (!memcmp(__s1[0], v13, (size_t)__s1[1]))
    goto LABEL_52;
  v19 = v49;
  v20 = *((_QWORD *)v49 + 5);
  v21 = *(_DWORD *)"race";
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
LABEL_39:
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
    _os_log_impl(&dword_1A343C000, v20, OS_LOG_TYPE_DEFAULT, "#N New boot instance (%s) for DIAG Trace", (uint8_t *)&buf, 0xCu);
  }
LABEL_40:
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&buf, "BootSessionUUID");
  v23 = prop::bbtrace::set((char *)&buf, (const char *)__s1);
  v24 = v23;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v24 & 1) != 0)
      goto LABEL_45;
  }
  else if ((v23 & 1) != 0)
  {
LABEL_45:
    v26 = (void **)((char *)v19 + 280);
    if ((void **)((char *)v19 + 280) == __s1)
      goto LABEL_64;
    goto LABEL_46;
  }
  v25 = *((_QWORD *)v19 + 5);
  if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    goto LABEL_45;
  v47 = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v48 = __s1;
  if (SHIBYTE(__s1[2]) < 0)
    v48 = (void **)__s1[0];
  LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v47;
  WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v48;
  _os_log_error_impl(&dword_1A343C000, v25, OS_LOG_TYPE_ERROR, "Failed to set boot session uuid in pref from %s -> %s", (uint8_t *)&buf, 0x16u);
  v26 = (void **)((char *)v19 + 280);
  if ((void **)((char *)v19 + 280) != __s1)
  {
LABEL_46:
    if (*((char *)v19 + 303) < 0)
    {
      if (SHIBYTE(__s1[2]) >= 0)
        v28 = __s1;
      else
        v28 = (void **)__s1[0];
      if (SHIBYTE(__s1[2]) >= 0)
        v29 = HIBYTE(__s1[2]);
      else
        v29 = (size_t)__s1[1];
      std::string::__assign_no_alias<false>(v26, v28, v29);
    }
    else if ((HIBYTE(__s1[2]) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v26, __s1[0], (size_t)__s1[1]);
    }
    else
    {
      *(_OWORD *)v26 = *(_OWORD *)__s1;
      v26[2] = __s1[2];
    }
  }
LABEL_64:
  v51 = 4;
  strcpy((char *)v50, "Mode");
  memset(&v54, 0, sizeof(v54));
  *((_BYTE *)&v55.__r_.__value_.__s + 23) = 7;
  LODWORD(v55.__r_.__value_.__l.__data_) = *(_DWORD *)"BBTrace";
  *(_DWORD *)((char *)v55.__r_.__value_.__r.__words + 3) = v21;
  v55.__r_.__value_.__s.__data_[7] = 0;
  memset(&buf, 0, sizeof(buf));
  v30 = defaults::get((char *)&v55, (char *)v50, &buf);
  if (v30)
  {
    prop::file::get<std::string>((const void **)&v55.__r_.__value_.__l.__data_, (uint64_t)v50, (uint64_t)&buf, &v56);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    v54 = v56;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_70:
      if (!v30)
        goto LABEL_76;
      goto LABEL_74;
    }
  }
  else if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_70;
  }
  operator delete(v55.__r_.__value_.__l.__data_);
  if (!v30)
    goto LABEL_76;
LABEL_74:
  LODWORD(buf.__r_.__value_.__l.__data_) = -1431655766;
  v31 = util::convert<int>(&v54, &buf, 0);
  LOBYTE(v30) = v31;
  if (v31)
    *((_DWORD *)v19 + 40) = buf.__r_.__value_.__l.__data_;
LABEL_76:
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v54.__r_.__value_.__l.__data_);
    if ((v51 & 0x80000000) == 0)
    {
LABEL_78:
      if (v30)
        goto LABEL_79;
      goto LABEL_89;
    }
  }
  else if ((v51 & 0x80000000) == 0)
  {
    goto LABEL_78;
  }
  operator delete(v50[0]);
  if (v30)
  {
LABEL_79:
    v51 = 14;
    strcpy((char *)v50, "TraceOwnership");
    memset(&v54, 0, sizeof(v54));
    *((_BYTE *)&v55.__r_.__value_.__s + 23) = 7;
    LODWORD(v55.__r_.__value_.__l.__data_) = *(_DWORD *)"BBTrace";
    *(_DWORD *)((char *)v55.__r_.__value_.__r.__words + 3) = v21;
    v55.__r_.__value_.__s.__data_[7] = 0;
    memset(&buf, 0, sizeof(buf));
    v33 = defaults::get((char *)&v55, (char *)v50, &buf);
    if (v33)
    {
      prop::file::get<std::string>((const void **)&v55.__r_.__value_.__l.__data_, (uint64_t)v50, (uint64_t)&buf, &v56);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      v54 = v56;
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_85:
        if (!v33)
          goto LABEL_95;
        goto LABEL_93;
      }
    }
    else if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_85;
    }
    operator delete(v55.__r_.__value_.__l.__data_);
    if (!v33)
      goto LABEL_95;
LABEL_93:
    LODWORD(buf.__r_.__value_.__l.__data_) = -1431655766;
    if (util::convert<int>(&v54, &buf, 0))
      *((_DWORD *)v49 + 41) = buf.__r_.__value_.__l.__data_;
LABEL_95:
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v54.__r_.__value_.__l.__data_);
      if ((v51 & 0x80000000) == 0)
      {
LABEL_97:
        v35 = v49;
        v36 = *((_DWORD *)v49 + 40);
        if (v36 != 4)
        {
LABEL_146:
          v43 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          ctu::cf::update<char const*,int>(*((__CFDictionary **)v35 + 49), (const __CFString **)"Mode", *((_DWORD *)v35 + 40), (const __CFAllocator *)*MEMORY[0x1E0C9AE00], v32);
          ctu::cf::update<char const*,int>(*((__CFDictionary **)v35 + 49), (const __CFString **)"Mode", *((_DWORD *)v35 + 41), v43, v44);
          v45 = 1;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_147;
LABEL_160:
          if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
            return v45;
          goto LABEL_148;
        }
LABEL_101:
        *((_BYTE *)&v56.__r_.__value_.__s + 23) = v36;
        strcpy((char *)&v56, "Mode");
        memset(&v55, 0, sizeof(v55));
        std::to_string(&buf, 0);
        v55 = buf;
        v37 = prop::bbtrace::set((char *)&v56, (const char *)&v55);
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v55.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_103:
            if ((v37 & 1) != 0)
              goto LABEL_104;
LABEL_110:
            v34 = *((_QWORD *)v49 + 5);
            if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
              goto LABEL_159;
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            v17 = "Failed to reset diag trace mode for new boot instance";
            goto LABEL_157;
          }
        }
        else if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_103;
        }
        operator delete(v56.__r_.__value_.__l.__data_);
        if ((v37 & 1) != 0)
        {
LABEL_104:
          *((_DWORD *)v49 + 40) = 0;
          *((_BYTE *)&v56.__r_.__value_.__s + 23) = 14;
          strcpy((char *)&v56, "TraceOwnership");
          memset(&v55, 0, sizeof(v55));
          std::to_string(&buf, 0);
          v55 = buf;
          v35 = v49;
          v38 = prop::bbtrace::set((char *)&v56, (const char *)&v55);
          if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v55.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_106:
              if ((v38 & 1) != 0)
              {
LABEL_107:
                *((_DWORD *)v49 + 41) = 0;
                goto LABEL_146;
              }
              goto LABEL_155;
            }
          }
          else if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_106;
          }
          operator delete(v56.__r_.__value_.__l.__data_);
          if ((v38 & 1) != 0)
            goto LABEL_107;
LABEL_155:
          v34 = *((_QWORD *)v49 + 5);
          if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
            goto LABEL_159;
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          v17 = "Failed to reset trace transport owner id for new boot instance";
          goto LABEL_157;
        }
        goto LABEL_110;
      }
    }
    else if ((v51 & 0x80000000) == 0)
    {
      goto LABEL_97;
    }
    operator delete(v50[0]);
    v35 = v49;
    v36 = *((_DWORD *)v49 + 40);
    if (v36 != 4)
      goto LABEL_146;
    goto LABEL_101;
  }
LABEL_89:
  v34 = *((_QWORD *)v19 + 5);
  if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    goto LABEL_159;
  LOWORD(buf.__r_.__value_.__l.__data_) = 0;
  v17 = "Failed to get trace mode from preferences";
LABEL_157:
  v18 = v34;
LABEL_158:
  _os_log_error_impl(&dword_1A343C000, v18, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&buf, 2u);
LABEL_159:
  v45 = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_160;
LABEL_147:
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s1[2]) < 0)
LABEL_148:
    operator delete(__s1[0]);
  return v45;
}

void sub_1A346EB0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a33 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
  {
    operator delete(a22);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::bbtrace::get<int>(char *a1, _DWORD *a2)
{
  _BOOL4 v4;
  uint64_t v5;
  std::string v7;
  void *__p[2];
  char v9;
  std::string v10;
  std::string v11;

  memset(&v7, 0, sizeof(v7));
  v9 = 7;
  strcpy((char *)__p, "BBTrace");
  memset(&v11, 0, sizeof(v11));
  v4 = defaults::get((char *)__p, a1, &v11);
  if (v4)
  {
    prop::file::get<std::string>((const void **)__p, (uint64_t)a1, (uint64_t)&v11, &v10);
    v7 = v10;
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_5:
      if (v4)
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else if ((v9 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p[0]);
  if (v4)
  {
LABEL_6:
    v5 = util::convert<int>(&v7, a2, 0);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_12;
    return v5;
  }
LABEL_10:
  v5 = 0;
  if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v5;
LABEL_12:
  operator delete(v7.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1A346EE08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t DIAGTrace::filterHistory(DIAGTrace *this)
{
  unsigned int v1;

  if ((_DWORD)this)
    v1 = this;
  else
    v1 = 2048;
  if ((int)this >= 0)
    return v1;
  else
    return 256;
}

uint64_t prop::bbtrace::get<diag::config::DuringAPSleep>(char *a1, _DWORD *a2)
{
  uint64_t v4;
  std::string v6;
  void *__p[2];
  char v8;
  std::string v9;
  std::string v10;

  memset(&v6, 0, sizeof(v6));
  v8 = 7;
  strcpy((char *)__p, "BBTrace");
  memset(&v10, 0, sizeof(v10));
  v4 = defaults::get((char *)__p, a1, &v10);
  if ((_DWORD)v4)
  {
    prop::file::get<std::string>((const void **)__p, (uint64_t)a1, (uint64_t)&v10, &v9);
    v6 = v9;
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v10.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
    {
LABEL_5:
      if (!(_DWORD)v4)
        goto LABEL_11;
      goto LABEL_9;
    }
  }
  else if ((v8 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p[0]);
  if (!(_DWORD)v4)
    goto LABEL_11;
LABEL_9:
  LODWORD(v10.__r_.__value_.__l.__data_) = -1431655766;
  v4 = util::convert<int>(&v6, &v10, 0);
  if ((_DWORD)v4)
    *a2 = v10.__r_.__value_.__l.__data_;
LABEL_11:
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1A346EF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t prop::bbtrace::get<unsigned int>(char *a1, _DWORD *a2)
{
  _BOOL4 v4;
  uint64_t v5;
  std::string v7;
  void *__p[2];
  char v9;
  std::string v10;
  std::string v11;

  memset(&v7, 0, sizeof(v7));
  v9 = 7;
  strcpy((char *)__p, "BBTrace");
  memset(&v11, 0, sizeof(v11));
  v4 = defaults::get((char *)__p, a1, &v11);
  if (v4)
  {
    prop::file::get<std::string>((const void **)__p, (uint64_t)a1, (uint64_t)&v11, &v10);
    v7 = v10;
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_5:
      if (v4)
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else if ((v9 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p[0]);
  if (v4)
  {
LABEL_6:
    v5 = util::convert<unsigned int>(&v7, a2, 0);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_12;
    return v5;
  }
LABEL_10:
  v5 = 0;
  if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v5;
LABEL_12:
  operator delete(v7.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1A346F0F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t prop::bbtrace::get<diag::config::Recovery>(char *a1, _DWORD *a2)
{
  uint64_t v4;
  std::string v6;
  void *__p[2];
  char v8;
  std::string v9;
  std::string v10;

  memset(&v6, 0, sizeof(v6));
  v8 = 7;
  strcpy((char *)__p, "BBTrace");
  memset(&v10, 0, sizeof(v10));
  v4 = defaults::get((char *)__p, a1, &v10);
  if ((_DWORD)v4)
  {
    prop::file::get<std::string>((const void **)__p, (uint64_t)a1, (uint64_t)&v10, &v9);
    v6 = v9;
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v10.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
    {
LABEL_5:
      if (!(_DWORD)v4)
        goto LABEL_11;
      goto LABEL_9;
    }
  }
  else if ((v8 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p[0]);
  if (!(_DWORD)v4)
    goto LABEL_11;
LABEL_9:
  LODWORD(v10.__r_.__value_.__l.__data_) = -1431655766;
  v4 = util::convert<int>(&v6, &v10, 0);
  if ((_DWORD)v4)
    *a2 = v10.__r_.__value_.__l.__data_;
LABEL_11:
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1A346F25C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t prop::bbtrace::get<diag::config::Mode>(char *a1, _DWORD *a2)
{
  uint64_t v4;
  std::string v6;
  void *__p[2];
  char v8;
  std::string v9;
  std::string v10;

  memset(&v6, 0, sizeof(v6));
  v8 = 7;
  strcpy((char *)__p, "BBTrace");
  memset(&v10, 0, sizeof(v10));
  v4 = defaults::get((char *)__p, a1, &v10);
  if ((_DWORD)v4)
  {
    prop::file::get<std::string>((const void **)__p, (uint64_t)a1, (uint64_t)&v10, &v9);
    v6 = v9;
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v10.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
    {
LABEL_5:
      if (!(_DWORD)v4)
        goto LABEL_11;
      goto LABEL_9;
    }
  }
  else if ((v8 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p[0]);
  if (!(_DWORD)v4)
    goto LABEL_11;
LABEL_9:
  LODWORD(v10.__r_.__value_.__l.__data_) = -1431655766;
  v4 = util::convert<int>(&v6, &v10, 0);
  if ((_DWORD)v4)
    *a2 = v10.__r_.__value_.__l.__data_;
LABEL_11:
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1A346F3C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void DIAGTrace::pushServiceConfig_sync(DIAGTrace *this)
{
  uint64_t *v1;
  NSObject *v3;
  const void *v4;
  CFTypeID v5;
  uint64_t v6;
  char v7;
  CFTypeRef v8;
  uint64_t v9;
  uint8_t v10[8];
  CFTypeRef cf;

  v1 = (uint64_t *)*((_QWORD *)this + 50);
  if (v1)
  {
    v3 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEFAULT, "#I Pushing config dictionary to Diag service", v10, 2u);
      v1 = (uint64_t *)*((_QWORD *)this + 50);
    }
    v4 = (const void *)*((_QWORD *)this + 49);
    if (v4 && (v5 = CFGetTypeID(v4), v5 == CFDictionaryGetTypeID()))
    {
      CFRetain(v4);
      v6 = *v1;
      cf = v4;
      CFRetain(v4);
      v7 = 0;
      diag::Service::Internal::updateConfig(v6, &cf);
      v8 = cf;
      if (!cf)
      {
LABEL_10:
        if ((v7 & 1) == 0)
          CFRelease(v4);
        return;
      }
    }
    else
    {
      v4 = 0;
      v9 = *v1;
      cf = 0;
      v7 = 1;
      diag::Service::Internal::updateConfig(v9, &cf);
      v8 = cf;
      if (!cf)
        goto LABEL_10;
    }
    CFRelease(v8);
    goto LABEL_10;
  }
}

void DIAGTrace::start_sync(DIAGTrace *this, NSObject **a2, uint64_t a3, char a4)
{
  NSObject *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  void *v18;
  void *v19;
  NSObject *v20;
  NSObject *v21;
  _QWORD aBlock[5];
  dispatch_group_t group;
  uint64_t v24;
  std::__shared_weak_count *v25;
  char v26;
  void *v27;
  NSObject *v28;
  uint8_t buf[16];

  if (*((_QWORD *)this + 50))
  {
    DIAGTrace::pushServiceConfig_sync(this);
    v7 = *a2;
    if (v7)
    {
      dispatch_retain(v7);
      dispatch_group_enter(v7);
    }
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v8 || (v9 = *((_QWORD *)this + 9), (v10 = std::__shared_weak_count::lock(v8)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v11 = v10;
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    v16 = (uint64_t *)*((_QWORD *)this + 50);
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN9DIAGTrace10start_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEb_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_9;
    aBlock[4] = this;
    group = v7;
    if (v7)
    {
      dispatch_retain(v7);
      dispatch_group_enter(v7);
    }
    v24 = v9;
    v25 = v11;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    v26 = a4;
    v18 = _Block_copy(aBlock);
    v19 = v18;
    v20 = *((_QWORD *)this + 11);
    if (v20)
    {
      dispatch_retain(v20);
      v27 = v19;
      v28 = v20;
      diag::Service::start(v16, (uint64_t)&v27, a4);
      dispatch_release(v20);
      if (!v19)
        goto LABEL_23;
    }
    else
    {
      v27 = v18;
      v28 = 0;
      diag::Service::start(v16, (uint64_t)&v27, a4);
      if (!v19)
      {
LABEL_23:
        if (v25)
          std::__shared_weak_count::__release_weak(v25);
        if (group)
        {
          dispatch_group_leave(group);
          if (group)
            dispatch_release(group);
        }
        std::__shared_weak_count::__release_weak(v11);
        if (v7)
        {
          dispatch_group_leave(v7);
          dispatch_release(v7);
        }
        return;
      }
    }
    _Block_release(v19);
    goto LABEL_23;
  }
  v21 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v21, OS_LOG_TYPE_DEFAULT, "#I Can not start without a service object", buf, 2u);
  }
}

void sub_1A346F730(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN9DIAGTrace10start_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEb_block_invoke(uint64_t a1, int a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  __int128 v13;
  const void *v14;
  size_t v15;
  size_t v16;
  __int128 *p_dst;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  size_t v22;
  size_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  size_t v28;
  int v29;
  size_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  char *v36;
  const void *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  _QWORD *v40;
  std::string v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *v46;
  char v47;
  __int128 v48;
  char v49;
  char v50[8];
  _QWORD *v51;
  void *__p[2];
  char v53;
  void *v54[3];
  __int128 v55;
  unint64_t v56;
  __int128 __dst;
  unint64_t v58;
  void *v59[2];
  uint64_t v60;
  std::__shared_weak_count *v62;
  uint8_t buf[16];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4)
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = std::__shared_weak_count::lock(v4);
    v62 = v8;
    if (v8)
    {
      v9 = v8;
      if (!*(_QWORD *)(a1 + 48))
      {
LABEL_83:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v39 = __ldaxr(p_shared_owners);
        while (__stlxr(v39 - 1, p_shared_owners));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      if (a2 != 4)
      {
        if (a2 == 1)
        {
          v10 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1A343C000, v10, OS_LOG_TYPE_DEFAULT, "#I Start complete", buf, 2u);
          }
          DIAGTrace::stallDetection_sync((const __CFDictionary **)v7, *(unsigned __int8 *)(v7 + 312));
          if (!*(_BYTE *)(v7 + 424))
          {
            v11 = *(NSObject **)(v7 + 144);
            if (v11)
            {
              if (!*(_BYTE *)(a1 + 64))
              {
                dispatch_group_enter(v11);
                *(_BYTE *)(v7 + 424) = 1;
              }
            }
          }
        }
        else
        {
          v18 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            if (*((char *)a3 + 23) < 0)
              a3 = (_QWORD *)*a3;
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = a3;
            _os_log_impl(&dword_1A343C000, v18, OS_LOG_TYPE_DEFAULT, "#I Start skipped. %s", buf, 0xCu);
          }
        }
        goto LABEL_83;
      }
      v12 = *(NSObject **)(v7 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        v40 = a3;
        if (*((char *)a3 + 23) < 0)
          v40 = (_QWORD *)*a3;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v40;
        _os_log_error_impl(&dword_1A343C000, v12, OS_LOG_TYPE_ERROR, "Start error. %s", buf, 0xCu);
      }
      v60 = 0x13AAAAAA00AAAAAALL;
      qmemcpy(v59, "Diag start faile", sizeof(v59));
      *(_QWORD *)&v13 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v68 = v13;
      v69 = v13;
      v66 = v13;
      v67 = v13;
      v64 = v13;
      v65 = v13;
      *(_OWORD *)buf = v13;
      v14 = (const void *)*MEMORY[0x1E0CFB590];
      v15 = strlen((const char *)*MEMORY[0x1E0CFB590]);
      if (v15 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v16 = v15;
      if (v15 >= 0x17)
      {
        v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17)
          v19 = v15 | 7;
        v20 = v19 + 1;
        p_dst = (__int128 *)operator new(v19 + 1);
        *((_QWORD *)&__dst + 1) = v16;
        v58 = v20 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v58) = v15;
        p_dst = &__dst;
        if (!v15)
        {
LABEL_25:
          *((_BYTE *)p_dst + v16) = 0;
          v21 = (const void *)*MEMORY[0x1E0CFBDA0];
          v22 = strlen((const char *)*MEMORY[0x1E0CFBDA0]);
          if (v22 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v23 = v22;
          if (v22 >= 0x17)
          {
            v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v22 | 7) != 0x17)
              v25 = v22 | 7;
            v26 = v25 + 1;
            v24 = operator new(v25 + 1);
            *((_QWORD *)&v55 + 1) = v23;
            v56 = v26 | 0x8000000000000000;
            *(_QWORD *)&v55 = v24;
          }
          else
          {
            HIBYTE(v56) = v22;
            v24 = &v55;
            if (!v22)
            {
LABEL_33:
              v24[v23] = 0;
              v27 = SHIBYTE(v60);
              if (v60 >= 0)
                v28 = HIBYTE(v60);
              else
                v28 = (size_t)v59[1];
              v29 = *((char *)a3 + 23);
              if (v29 >= 0)
                v30 = *((unsigned __int8 *)a3 + 23);
              else
                v30 = a3[1];
              v31 = v30 + v28;
              memset(v54, 170, sizeof(v54));
              if (v30 + v28 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              if (v31 > 0x16)
              {
                v33 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v31 | 7) != 0x17)
                  v33 = v31 | 7;
                v34 = v33 + 1;
                v32 = (char *)operator new(v33 + 1);
                v54[1] = (void *)(v30 + v28);
                v54[2] = (void *)(v34 | 0x8000000000000000);
                v54[0] = v32;
              }
              else
              {
                memset(v54, 0, sizeof(v54));
                v32 = (char *)v54;
                HIBYTE(v54[2]) = v30 + v28;
              }
              if (v28)
              {
                if (v27 >= 0)
                  v35 = v59;
                else
                  v35 = (void **)v59[0];
                memmove(v32, v35, v28);
              }
              v36 = &v32[v28];
              if (v30)
              {
                if (v29 >= 0)
                  v37 = a3;
                else
                  v37 = (const void *)*a3;
                memmove(v36, v37, v30);
              }
              v36[v30] = 0;
              Timestamp::Timestamp((Timestamp *)v50);
              Timestamp::asString((uint64_t)v50, 0, 9, __p);
              v49 = 0;
              LOBYTE(v48) = 0;
              ResetInfo::ResetInfo((std::string *)buf, &__dst, &v55, (__int128 *)v54, (uint64_t)__p, 7, &v48);
              if (v53 < 0)
              {
                operator delete(__p[0]);
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v50, v51);
                if ((SHIBYTE(v54[2]) & 0x80000000) == 0)
                {
LABEL_57:
                  if ((SHIBYTE(v56) & 0x80000000) == 0)
                    goto LABEL_58;
                  goto LABEL_72;
                }
              }
              else
              {
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v50, v51);
                if ((SHIBYTE(v54[2]) & 0x80000000) == 0)
                  goto LABEL_57;
              }
              operator delete(v54[0]);
              if ((SHIBYTE(v56) & 0x80000000) == 0)
              {
LABEL_58:
                if ((SHIBYTE(v58) & 0x80000000) == 0)
                  goto LABEL_59;
LABEL_73:
                operator delete((void *)__dst);
LABEL_59:
                ResetInfo::ResetInfo(&v41, (__int128 *)buf);
                DIAGTrace::commandResetModem_sync((_QWORD *)v7, (__int128 *)&v41);
                if (v47 < 0)
                {
                  operator delete(v46);
                  if ((v45 & 0x80000000) == 0)
                  {
LABEL_61:
                    if ((v43 & 0x80000000) == 0)
                      goto LABEL_62;
                    goto LABEL_76;
                  }
                }
                else if ((v45 & 0x80000000) == 0)
                {
                  goto LABEL_61;
                }
                operator delete(v44);
                if ((v43 & 0x80000000) == 0)
                {
LABEL_62:
                  if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_63;
                  goto LABEL_77;
                }
LABEL_76:
                operator delete(v42);
                if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_63:
                  if ((SHIBYTE(v69) & 0x80000000) == 0)
                    goto LABEL_64;
                  goto LABEL_78;
                }
LABEL_77:
                operator delete(v41.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v69) & 0x80000000) == 0)
                {
LABEL_64:
                  if ((SBYTE7(v67) & 0x80000000) == 0)
                    goto LABEL_65;
                  goto LABEL_79;
                }
LABEL_78:
                operator delete(*((void **)&v68 + 1));
                if ((SBYTE7(v67) & 0x80000000) == 0)
                {
LABEL_65:
                  if ((SHIBYTE(v65) & 0x80000000) == 0)
                    goto LABEL_66;
                  goto LABEL_80;
                }
LABEL_79:
                operator delete((void *)v66);
                if ((SHIBYTE(v65) & 0x80000000) == 0)
                {
LABEL_66:
                  if ((SBYTE7(v64) & 0x80000000) == 0)
                    goto LABEL_67;
                  goto LABEL_81;
                }
LABEL_80:
                operator delete(*((void **)&v64 + 1));
                if ((SBYTE7(v64) & 0x80000000) == 0)
                {
LABEL_67:
                  if ((v27 & 0x80000000) == 0)
                    goto LABEL_68;
                  goto LABEL_82;
                }
LABEL_81:
                operator delete(*(void **)buf);
                if ((v27 & 0x80000000) == 0)
                {
LABEL_68:
                  v9 = v62;
                  if (!v62)
                    return;
                  goto LABEL_83;
                }
LABEL_82:
                operator delete(v59[0]);
                v9 = v62;
                if (!v62)
                  return;
                goto LABEL_83;
              }
LABEL_72:
              operator delete((void *)v55);
              if ((SHIBYTE(v58) & 0x80000000) == 0)
                goto LABEL_59;
              goto LABEL_73;
            }
          }
          memmove(v24, v21, v23);
          goto LABEL_33;
        }
      }
      memmove(p_dst, v14, v16);
      goto LABEL_25;
    }
  }
}

void sub_1A346FD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  char v58;
  uint64_t v59;

  ResetInfo::~ResetInfo((void **)&a9);
  ResetInfo::~ResetInfo((void **)(v59 - 224));
  if (v58 < 0)
    operator delete(__p);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v59 - 240);
  _Unwind_Resume(a1);
}

void DIAGTrace::stallDetection_sync(const __CFDictionary **this, int a2)
{
  int Bool;
  _BOOL4 v5;
  NSObject *v6;
  const char *v7;
  std::__shared_weak_count *v8;
  const __CFDictionary *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  void *v18;
  void *v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t *v22;
  _QWORD v23[2];
  _QWORD aBlock[6];
  std::__shared_weak_count *v25;
  void *v26;
  NSObject *v27;
  uint8_t v28[16];
  _BYTE buf[24];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (this[50])
  {
    memset(v28, 170, sizeof(v28));
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v28, this[49]);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)buf, diag::config::kBufferingOnAPAwake[0]);
    Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v28, *(const __CFString **)buf);
    MEMORY[0x1A858F29C](buf);
    if (((a2 ^ 1 | Bool) & 1) != 0 || *((_DWORD *)this + 40))
    {
      v5 = 0;
      v6 = this[5];
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        goto LABEL_8;
    }
    else
    {
      v5 = *((_DWORD *)this + 79) != 0;
      v6 = this[5];
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        goto LABEL_8;
    }
    v7 = "disabled";
    if (v5)
      v7 = "enabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v7;
    _os_log_impl(&dword_1A343C000, v6, OS_LOG_TYPE_DEFAULT, "#I DIAG: stall detection is %s", buf, 0xCu);
LABEL_8:
    if (!v5)
    {
      v22 = (uint64_t *)this[50];
      v23[0] = 0;
      v23[1] = 0;
      diag::Service::setStallHandler(v22, 15, (uint64_t)v23);
LABEL_32:
      MEMORY[0x1A858F2D8](v28);
      return;
    }
    *((_DWORD *)this + 80) = *((_DWORD *)this + 79);
    v8 = (std::__shared_weak_count *)this[10];
    if (!v8 || (v9 = this[9], (v10 = std::__shared_weak_count::lock(v8)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v11 = v10;
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    v16 = (uint64_t *)this[50];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN9DIAGTrace19stallDetection_syncEb_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_74;
    aBlock[4] = this;
    aBlock[5] = v9;
    v25 = v11;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    v18 = _Block_copy(aBlock);
    v19 = v18;
    v20 = this[11];
    if (v20)
    {
      dispatch_retain(v20);
      v26 = v19;
      v27 = v20;
      diag::Service::setStallHandler(v16, 15, (uint64_t)&v26);
      dispatch_release(v20);
      if (!v19)
        goto LABEL_29;
    }
    else
    {
      v26 = v18;
      v27 = 0;
      diag::Service::setStallHandler(v16, 15, (uint64_t)&v26);
      if (!v19)
      {
LABEL_29:
        if (v25)
          std::__shared_weak_count::__release_weak(v25);
        std::__shared_weak_count::__release_weak(v11);
        goto LABEL_32;
      }
    }
    _Block_release(v19);
    goto LABEL_29;
  }
  v21 = this[5];
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v28 = 0;
    _os_log_impl(&dword_1A343C000, v21, OS_LOG_TYPE_DEFAULT, "#I No DIAG service", v28, 2u);
  }
}

void sub_1A3470104(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c29_ZTSNSt3__18weak_ptrI5TraceEE(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = a1[5];
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c29_ZTSNSt3__18weak_ptrI5TraceEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  NSObject *v4;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(NSObject **)(a1 + 40);
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = *(NSObject **)(a1 + 40);
    if (v4)
      dispatch_release(v4);
  }
}

void DIAGTrace::destroyService_sync(uint64_t a1, NSObject **a2, const void **a3)
{
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  const void *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  _QWORD v21[5];
  dispatch_group_t group;
  uint64_t v23;
  std::__shared_weak_count *v24;
  const void *v25;
  NSObject *v26;
  uint8_t buf[16];

  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v6, OS_LOG_TYPE_DEFAULT, "#I Request to destroy service", buf, 2u);
  }
  v7 = *a2;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(v7);
  }
  v8 = dispatch_group_create();
  v10 = v8;
  if ((*(_BYTE *)(a1 + 152) & 2) == 0)
  {
    v26 = v8;
    if (v8)
      dispatch_retain(v8);
    v11 = *a3;
    v25 = v11;
    if (v11)
      CFRetain(v11);
    DIAGTrace::stop_sync((DIAGTrace *)a1, &v26, v9, 0);
    if (v11)
      CFRelease(v11);
    if (v10)
      dispatch_release(v10);
  }
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12 || (v13 = *(_QWORD *)(a1 + 72), (v14 = std::__shared_weak_count::lock(v12)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v15 = v14;
  p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v15);
  }
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 1174405120;
  v21[2] = ___ZN9DIAGTrace19destroyService_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v21[3] = &__block_descriptor_tmp_12;
  v21[4] = a1;
  group = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(v7);
  }
  v23 = v13;
  v24 = v15;
  do
    v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  dispatch_group_notify(v10, *(dispatch_queue_t *)(a1 + 88), v21);
  if (v24)
    std::__shared_weak_count::__release_weak(v24);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  std::__shared_weak_count::__release_weak(v15);
  if (v10)
    dispatch_release(v10);
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
}

void sub_1A3470418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  NSObject *v9;
  NSObject *v10;
  va_list va;

  va_start(va, a9);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  if (v10)
  {
    dispatch_release(v10);
    dispatch_release(v10);
  }
  if (v9)
  {
    dispatch_group_leave(v9);
    dispatch_release(v9);
  }
  _Unwind_Resume(a1);
}

void DIAGTrace::stop_sync(DIAGTrace *this, NSObject **a2, uint64_t a3, char a4)
{
  NSObject *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  void *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  unint64_t v22;
  void *v23;
  void *v24;
  NSObject *v25;
  _QWORD v26[5];
  dispatch_group_t object;
  uint64_t v28;
  std::__shared_weak_count *v29;
  void *v30;
  NSObject *v31;
  _QWORD aBlock[5];
  dispatch_group_t group;
  uint64_t v34;
  std::__shared_weak_count *v35;
  char v36;
  _QWORD v37[2];
  uint8_t buf[16];

  if (*((_QWORD *)this + 50))
  {
    DIAGTrace::stallDetection_sync(this, 0);
    v7 = *a2;
    if (v7)
    {
      dispatch_retain(v7);
      dispatch_group_enter(v7);
    }
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v8 || (v9 = *((_QWORD *)this + 9), (v10 = std::__shared_weak_count::lock(v8)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v11 = v10;
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (v15)
    {
      v16 = (uint64_t *)*((_QWORD *)this + 50);
      if ((*((_BYTE *)this + 152) & 2) == 0)
        goto LABEL_12;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
      v16 = (uint64_t *)*((_QWORD *)this + 50);
      if ((*((_BYTE *)this + 152) & 2) == 0)
      {
LABEL_12:
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN9DIAGTrace9stop_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEb_block_invoke;
        aBlock[3] = &__block_descriptor_tmp_14_0;
        aBlock[4] = this;
        group = v7;
        if (v7)
        {
          dispatch_retain(v7);
          dispatch_group_enter(v7);
        }
        v34 = v9;
        v35 = v11;
        do
          v17 = __ldxr(p_shared_weak_owners);
        while (__stxr(v17 + 1, p_shared_weak_owners));
        v36 = a4;
        v18 = _Block_copy(aBlock);
        v19 = *((_QWORD *)this + 11);
        if (v19)
          dispatch_retain(v19);
        v37[0] = v18;
        v37[1] = v19;
        diag::Service::stop(v16, (uint64_t)v37, a4);
        if (v19)
          dispatch_release(v19);
        if (v18)
          _Block_release(v18);
        if (v35)
          std::__shared_weak_count::__release_weak(v35);
        if (!group)
          goto LABEL_44;
        dispatch_group_leave(group);
        v20 = group;
        if (!group)
          goto LABEL_44;
        goto LABEL_43;
      }
    }
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 1174405120;
    v26[2] = ___ZN9DIAGTrace9stop_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEb_block_invoke_15;
    v26[3] = &__block_descriptor_tmp_16_1;
    v26[4] = this;
    object = v7;
    if (v7)
    {
      dispatch_retain(v7);
      dispatch_group_enter(v7);
    }
    v28 = v9;
    v29 = v11;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    v23 = _Block_copy(v26);
    v24 = v23;
    v25 = *((_QWORD *)this + 11);
    if (v25)
    {
      dispatch_retain(v25);
      v30 = v24;
      v31 = v25;
      diag::Service::reset(v16, (uint64_t)&v30);
      dispatch_release(v25);
      if (!v24)
      {
LABEL_39:
        if (v29)
          std::__shared_weak_count::__release_weak(v29);
        if (!object)
          goto LABEL_44;
        dispatch_group_leave(object);
        v20 = object;
        if (!object)
          goto LABEL_44;
LABEL_43:
        dispatch_release(v20);
LABEL_44:
        std::__shared_weak_count::__release_weak(v11);
        if (v7)
        {
          dispatch_group_leave(v7);
          dispatch_release(v7);
        }
        return;
      }
    }
    else
    {
      v30 = v23;
      v31 = 0;
      diag::Service::reset(v16, (uint64_t)&v30);
      if (!v24)
        goto LABEL_39;
    }
    _Block_release(v24);
    goto LABEL_39;
  }
  v21 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v21, OS_LOG_TYPE_DEFAULT, "#I Service not initialized. Ignoring stop request", buf, 2u);
  }
}

void sub_1A347074C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,dispatch_group_t group,uint64_t a26,std::__shared_weak_count *a27)
{
  NSObject *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;

  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v29 - 96);
  if (a27)
    std::__shared_weak_count::__release_weak(a27);
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  std::__shared_weak_count::__release_weak(v28);
  if (v27)
  {
    dispatch_group_leave(v27);
    dispatch_release(v27);
  }
  _Unwind_Resume(a1);
}

void ___ZN9DIAGTrace19destroyService_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t *v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  dispatch_group_t group;
  void *v16;
  NSObject *v17;
  uint8_t buf[16];

  v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (!a1[6] || (v6 = *(uint64_t **)(v3 + 400)) == 0)
      {
LABEL_17:
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return;
      }
      v7 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A343C000, v7, OS_LOG_TYPE_DEFAULT, "#I Reset service before destroying it", buf, 2u);
        v6 = *(uint64_t **)(v3 + 400);
      }
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 1174405120;
      v14[2] = ___ZN9DIAGTrace19destroyService_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke_10;
      v14[3] = &__block_descriptor_tmp_11_0;
      v8 = a1[5];
      v14[4] = v3;
      group = v8;
      if (v8)
      {
        dispatch_retain(v8);
        dispatch_group_enter(v8);
      }
      v9 = _Block_copy(v14);
      v10 = v9;
      v11 = *(NSObject **)(v3 + 88);
      if (v11)
      {
        dispatch_retain(*(dispatch_object_t *)(v3 + 88));
        v16 = v10;
        v17 = v11;
        diag::Service::reset(v6, (uint64_t)&v16);
        dispatch_release(v11);
        if (!v10)
          goto LABEL_14;
      }
      else
      {
        v16 = v9;
        v17 = 0;
        diag::Service::reset(v6, (uint64_t)&v16);
        if (!v10)
        {
LABEL_14:
          if (group)
          {
            dispatch_group_leave(group);
            if (group)
              dispatch_release(group);
          }
          goto LABEL_17;
        }
      }
      _Block_release(v10);
      goto LABEL_14;
    }
  }
}

void ___ZN9DIAGTrace19destroyService_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke_10(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a3 + 23) < 0)
      a3 = (uint64_t *)*a3;
    v11 = 136315138;
    v12 = a3;
    _os_log_impl(&dword_1A343C000, v5, OS_LOG_TYPE_DEFAULT, "#I Reset complete. %s", (uint8_t *)&v11, 0xCu);
  }
  v6 = *(std::__shared_weak_count **)(v4 + 408);
  *(_QWORD *)(v4 + 400) = 0;
  *(_QWORD *)(v4 + 408) = 0;
  if (!v6)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
LABEL_9:
    v9 = *(NSObject **)(v4 + 40);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      goto LABEL_11;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  v9 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
LABEL_10:
    LOWORD(v11) = 0;
    _os_log_impl(&dword_1A343C000, v9, OS_LOG_TYPE_DEFAULT, "#I Destroyed service", (uint8_t *)&v11, 2u);
  }
LABEL_11:
  if (*(_BYTE *)(v4 + 424))
  {
    v10 = *(NSObject **)(v4 + 144);
    if (v10)
    {
      dispatch_group_leave(v10);
      *(_BYTE *)(v4 + 424) = 0;
    }
  }
}

void DIAGTrace::abort_sync(const __CFDictionary **this, uint64_t a2, const __CFDictionary **a3)
{
  const char *v5;
  size_t v6;
  uint8_t *v7;
  void *v8;
  void **v9;
  void *v10;
  uint64_t v11;
  char v13;
  std::__shared_weak_count *v14;
  NSObject *v15;
  void **v16;
  void *v17;
  void *v18;
  uint64_t v19;
  const __CFDictionary *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_weak_owners;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  void *v31;
  NSObject *v32;
  _QWORD aBlock[6];
  std::__shared_weak_count *v34;
  _QWORD v35[2];
  void *v36;
  __int128 v37;
  void *__p[3];
  uint8_t buf[24];
  _QWORD v40[2];
  uint64_t v41;

  if (this[50])
  {
    DIAGTrace::stallDetection_sync(this, 0);
    v40[0] = 0xAAAAAAAAAAAAAAAALL;
    v40[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v40, *a3);
    memset(buf, 170, sizeof(buf));
    v5 = (const char *)*MEMORY[0x1E0CFB538];
    memset(__p, 0, sizeof(__p));
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v36, v5);
    ctu::cf::map_adapter::getString();
    MEMORY[0x1A858F29C](&v36);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    memset(__p, 170, sizeof(__p));
    v36 = operator new(0x28uLL);
    v37 = xmmword_1A357F480;
    strcpy((char *)v36, "kCollectTelephonyLogsWithCoredump");
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v41, "kKeyTraceAction");
    ctu::cf::map_adapter::getString();
    MEMORY[0x1A858F29C](&v41);
    if (SHIBYTE(v37) < 0)
      operator delete(v36);
    if ((buf[23] & 0x80u) == 0)
      v6 = buf[23];
    else
      v6 = *(_QWORD *)&buf[8];
    if (v6 != strlen((const char *)*MEMORY[0x1E0CFB590])
      || ((buf[23] & 0x80u) == 0 ? (v7 = buf) : (v7 = *(uint8_t **)buf),
          memcmp(v7, (const void *)*MEMORY[0x1E0CFB590], v6)))
    {
      v8 = (void *)HIBYTE(__p[2]);
      if (SHIBYTE(__p[2]) < 0)
        v8 = __p[1];
      if (v8 == (void *)17)
      {
        v16 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v16 = (void **)__p[0];
        v17 = *v16;
        v18 = v16[1];
        v19 = *((unsigned __int8 *)v16 + 16);
        if (v17 != *(void **)"kShutdownAllTrace" || v18 != *(void **)"nAllTrace" || v19 != str_71[16])
        {
LABEL_24:
          v13 = 1;
          v14 = (std::__shared_weak_count *)this[10];
          if (!v14)
LABEL_62:
            std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_40:
          v22 = this[9];
          v23 = std::__shared_weak_count::lock(v14);
          if (!v23)
            goto LABEL_62;
          v24 = v23;
          p_shared_weak_owners = (unint64_t *)&v23->__shared_weak_owners_;
          do
            v26 = __ldxr(p_shared_weak_owners);
          while (__stxr(v26 + 1, p_shared_weak_owners));
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v24);
          }
          v29 = (uint64_t *)this[50];
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 1174405120;
          aBlock[2] = ___ZN9DIAGTrace10abort_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
          aBlock[3] = &__block_descriptor_tmp_13_0;
          aBlock[4] = this;
          aBlock[5] = v22;
          v34 = v24;
          do
            v30 = __ldxr(p_shared_weak_owners);
          while (__stxr(v30 + 1, p_shared_weak_owners));
          v31 = _Block_copy(aBlock);
          v32 = this[11];
          if (v32)
            dispatch_retain(v32);
          v35[0] = v31;
          v35[1] = v32;
          diag::Service::abort(v29, v13, (uint64_t)v35);
          if (v32)
            dispatch_release(v32);
          if (v31)
            _Block_release(v31);
          if (v34)
            std::__shared_weak_count::__release_weak(v34);
          std::__shared_weak_count::__release_weak(v24);
          if (SHIBYTE(__p[2]) < 0)
          {
            operator delete(__p[0]);
            if (((char)buf[23] & 0x80000000) == 0)
              goto LABEL_59;
          }
          else if (((char)buf[23] & 0x80000000) == 0)
          {
LABEL_59:
            MEMORY[0x1A858F2D8](v40);
            return;
          }
          operator delete(*(void **)buf);
          goto LABEL_59;
        }
      }
      else
      {
        if (v8 != (void *)15)
          goto LABEL_24;
        v9 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v9 = (void **)__p[0];
        v10 = *v9;
        v11 = *(uint64_t *)((char *)v9 + 7);
        if (v10 != *(void **)"kReinitAllTrace" || v11 != *(_QWORD *)"AllTrace")
          goto LABEL_24;
      }
    }
    v13 = 0;
    v14 = (std::__shared_weak_count *)this[10];
    if (!v14)
      goto LABEL_62;
    goto LABEL_40;
  }
  v15 = this[5];
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v15, OS_LOG_TYPE_DEFAULT, "#I Service not initialized. Ignoring abort request", buf, 2u);
  }
}

void sub_1A3470E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::__shared_weak_count *v30;
  uint64_t v31;

  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a17);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  std::__shared_weak_count::__release_weak(v30);
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v31 - 73) < 0)
    operator delete(*(void **)(v31 - 96));
  MEMORY[0x1A858F2D8](v31 - 72);
  _Unwind_Resume(a1);
}

void ___ZN9DIAGTrace10abort_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  NSObject *v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      if (a1[5])
      {
        v9 = *(NSObject **)(v6 + 40);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          if (*((char *)a3 + 23) < 0)
            a3 = (uint64_t *)*a3;
          v13 = 136315138;
          v14 = a3;
          _os_log_impl(&dword_1A343C000, v9, OS_LOG_TYPE_DEFAULT, "#I Abort complete. %s", (uint8_t *)&v13, 0xCu);
        }
        if (*(_BYTE *)(v6 + 424))
        {
          v10 = *(NSObject **)(v6 + 144);
          if (v10)
          {
            dispatch_group_leave(v10);
            *(_BYTE *)(v6 + 424) = 0;
          }
        }
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN9DIAGTrace9stop_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEb_block_invoke(uint64_t a1, int a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  NSObject *v14;
  NSObject *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4)
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!*(_QWORD *)(a1 + 48))
      {
LABEL_22:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      if (a2 == 4)
      {
        v14 = *(NSObject **)(v7 + 40);
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          goto LABEL_18;
        if (*((char *)a3 + 23) < 0)
          a3 = (uint64_t *)*a3;
        v18 = 136315138;
        v19 = a3;
        v11 = "#I Stop error. %s";
      }
      else
      {
        if (!a2)
        {
          v10 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v18) = 0;
            v11 = "#I Stop complete";
            v12 = v10;
            v13 = 2;
LABEL_17:
            _os_log_impl(&dword_1A343C000, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v18, v13);
          }
LABEL_18:
          if (*(_BYTE *)(v7 + 424))
          {
            v15 = *(NSObject **)(v7 + 144);
            if (v15)
            {
              if (!*(_BYTE *)(a1 + 64))
              {
                dispatch_group_leave(v15);
                *(_BYTE *)(v7 + 424) = 0;
              }
            }
          }
          goto LABEL_22;
        }
        v14 = *(NSObject **)(v7 + 40);
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          goto LABEL_18;
        if (*((char *)a3 + 23) < 0)
          a3 = (uint64_t *)*a3;
        v18 = 136315138;
        v19 = a3;
        v11 = "#I Stop skipped. %s";
      }
      v12 = v14;
      v13 = 12;
      goto LABEL_17;
    }
  }
}

void ___ZN9DIAGTrace9stop_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEb_block_invoke_15(_QWORD *a1, int a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  NSObject *v14;
  NSObject *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[7];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[6])
      {
LABEL_21:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      if (a2 == 4)
      {
        v14 = *(NSObject **)(v7 + 40);
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          goto LABEL_18;
        if (*((char *)a3 + 23) < 0)
          a3 = (uint64_t *)*a3;
        v18 = 136315138;
        v19 = a3;
        v11 = "#I Reset error. %s";
      }
      else
      {
        if (!a2)
        {
          v10 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v18) = 0;
            v11 = "#I Reset complete";
            v12 = v10;
            v13 = 2;
LABEL_17:
            _os_log_impl(&dword_1A343C000, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v18, v13);
          }
LABEL_18:
          if (*(_BYTE *)(v7 + 424))
          {
            v15 = *(NSObject **)(v7 + 144);
            if (v15)
            {
              dispatch_group_leave(v15);
              *(_BYTE *)(v7 + 424) = 0;
            }
          }
          goto LABEL_21;
        }
        v14 = *(NSObject **)(v7 + 40);
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          goto LABEL_18;
        if (*((char *)a3 + 23) < 0)
          a3 = (uint64_t *)*a3;
        v18 = 136315138;
        v19 = a3;
        v11 = "#I Reset skipped. %s";
      }
      v12 = v14;
      v13 = 12;
      goto LABEL_17;
    }
  }
}

void DIAGTrace::restartService_sync(DIAGTrace *this, group *a2)
{
  char *gr_name;
  NSObject *v5;
  CFMutableDictionaryRef Mutable;
  CFTypeRef v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  CFTypeRef v11;
  CFTypeID v12;
  char *v13;
  NSObject *v14;
  _QWORD v15[5];
  dispatch_group_t group;
  dispatch_object_t object;
  CFTypeRef cf;
  CFTypeRef v19;
  NSObject *v20;
  uint8_t buf[8];

  if (*((_BYTE *)this + 324))
  {
    gr_name = a2->gr_name;
    if (a2->gr_name)
    {
      dispatch_retain((dispatch_object_t)a2->gr_name);
      dispatch_group_enter((dispatch_group_t)gr_name);
    }
    v5 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A343C000, v5, OS_LOG_TYPE_DEFAULT, "#I Restarting service", buf, 2u);
    }
    *(_QWORD *)buf = 0;
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v7 = *(CFTypeRef *)buf;
      *(_QWORD *)buf = Mutable;
      if (v7)
        CFRelease(v7);
    }
    v8 = dispatch_group_create();
    v10 = v8;
    v20 = v8;
    if (v8)
      dispatch_retain(v8);
    v11 = *(CFTypeRef *)buf;
    if (*(_QWORD *)buf && (v12 = CFGetTypeID(*(CFTypeRef *)buf), v12 == CFDictionaryGetTypeID()))
    {
      v19 = v11;
      CFRetain(v11);
    }
    else
    {
      v11 = 0;
      v19 = 0;
    }
    DIAGTrace::stop_sync(this, &v20, v9, 0);
    if (v11)
      CFRelease(v11);
    if (v10)
      dispatch_release(v10);
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 1174405120;
    v15[2] = ___ZN9DIAGTrace19restartService_syncEN8dispatch5groupE_block_invoke;
    v15[3] = &__block_descriptor_tmp_17_1;
    v15[4] = this;
    group = (dispatch_group_t)gr_name;
    if (gr_name)
    {
      dispatch_retain((dispatch_object_t)gr_name);
      dispatch_group_enter((dispatch_group_t)gr_name);
    }
    v13 = a2->gr_name;
    object = (dispatch_object_t)v13;
    if (v13)
      dispatch_retain((dispatch_object_t)v13);
    cf = *(CFTypeRef *)buf;
    if (*(_QWORD *)buf)
      CFRetain(*(CFTypeRef *)buf);
    dispatch_group_notify(v10, *((dispatch_queue_t *)this + 11), v15);
    if (cf)
      CFRelease(cf);
    if (object)
      dispatch_release(object);
    if (group)
    {
      dispatch_group_leave(group);
      if (group)
        dispatch_release(group);
    }
    if (v10)
      dispatch_release(v10);
    if (*(_QWORD *)buf)
      CFRelease(*(CFTypeRef *)buf);
    if (gr_name)
    {
      dispatch_group_leave((dispatch_group_t)gr_name);
      dispatch_release((dispatch_object_t)gr_name);
    }
  }
  else
  {
    v14 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A343C000, v14, OS_LOG_TYPE_DEFAULT, "#I Restart skipped. Diag trace is disabled", buf, 2u);
    }
  }
}

void sub_1A347161C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  va_list va;

  va_start(va, a9);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  if (v10)
  {
    dispatch_release(v10);
    dispatch_release(v10);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v11 - 64));
    if (!v9)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v11 - 64));
    if (!v9)
      goto LABEL_3;
  }
  dispatch_group_leave(v9);
  dispatch_release(v9);
  _Unwind_Resume(a1);
}

void ___ZN9DIAGTrace19restartService_syncEN8dispatch5groupE_block_invoke(_QWORD *a1)
{
  DIAGTrace *v2;
  NSObject *v3;
  const void *v4;
  CFTypeID v5;

  v2 = (DIAGTrace *)a1[4];
  v3 = a1[6];
  if (v3)
    dispatch_retain(v3);
  v4 = (const void *)a1[7];
  if (v4 && (v5 = CFGetTypeID(v4), v5 == CFDictionaryGetTypeID()))
    CFRetain(v4);
  else
    v4 = 0;
  DIAGTrace::start_sync(v2);
  if (v4)
    CFRelease(v4);
  if (v3)
    dispatch_release(v3);
}

void sub_1A347174C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  NSObject *v9;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  if (v9)
    dispatch_release(v9);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c21_ZTSN8dispatch5groupE56c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  CFTypeRef result;

  v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = a1[5];
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = a2[6];
  a1[6] = v6;
  if (v6)
    dispatch_retain(v6);
  result = (CFTypeRef)a2[7];
  a1[7] = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c21_ZTSN8dispatch5groupE56c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(_QWORD *a1)
{
  const void *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;

  v2 = (const void *)a1[7];
  if (v2)
    CFRelease(v2);
  v3 = a1[6];
  if (v3)
    dispatch_release(v3);
  v4 = a1[5];
  if (v4)
  {
    dispatch_group_leave(v4);
    v5 = a1[5];
    if (v5)
      dispatch_release(v5);
  }
}

void DIAGTrace::enterLowPower_sync(DIAGTrace *this, group *a2)
{
  char *gr_name;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  void *v14;
  void *v15;
  NSObject *v16;
  NSObject *v17;
  _QWORD v18[5];
  dispatch_group_t group;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *v22;
  NSObject *v23;
  uint8_t buf[16];

  if (*((_QWORD *)this + 50))
  {
    gr_name = a2->gr_name;
    if (a2->gr_name)
    {
      dispatch_retain((dispatch_object_t)a2->gr_name);
      dispatch_group_enter((dispatch_group_t)gr_name);
    }
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v4 || (v5 = *((_QWORD *)this + 9), (v6 = std::__shared_weak_count::lock(v4)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v7 = v6;
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
    }
    v12 = (uint64_t *)*((_QWORD *)this + 50);
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 1174405120;
    v18[2] = ___ZN9DIAGTrace18enterLowPower_syncEN8dispatch5groupE_block_invoke;
    v18[3] = &__block_descriptor_tmp_19_0;
    v18[4] = this;
    group = (dispatch_group_t)gr_name;
    if (gr_name)
    {
      dispatch_retain((dispatch_object_t)gr_name);
      dispatch_group_enter((dispatch_group_t)gr_name);
    }
    v20 = v5;
    v21 = v7;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = _Block_copy(v18);
    v15 = v14;
    v16 = *((_QWORD *)this + 11);
    if (v16)
    {
      dispatch_retain(v16);
      v22 = v15;
      v23 = v16;
      diag::Service::sleep(v12, (uint64_t)&v22);
      dispatch_release(v16);
      if (!v15)
        goto LABEL_24;
    }
    else
    {
      v22 = v14;
      v23 = 0;
      diag::Service::sleep(v12, (uint64_t)&v22);
      if (!v15)
      {
LABEL_24:
        if (v21)
          std::__shared_weak_count::__release_weak(v21);
        if (group)
        {
          dispatch_group_leave(group);
          if (group)
            dispatch_release(group);
        }
        std::__shared_weak_count::__release_weak(v7);
        if (gr_name)
        {
          dispatch_group_leave((dispatch_group_t)gr_name);
          dispatch_release((dispatch_object_t)gr_name);
        }
        return;
      }
    }
    _Block_release(v15);
    goto LABEL_24;
  }
  v17 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v17, OS_LOG_TYPE_DEFAULT, "#I Service not initialized. Ignoring enter low-power request", buf, 2u);
  }
}

void sub_1A3471A34(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN9DIAGTrace18enterLowPower_syncEN8dispatch5groupE_block_invoke(_QWORD *a1, int a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  NSObject *v11;
  _QWORD *v12;
  __int128 v13;
  const void *v14;
  size_t v15;
  size_t v16;
  __int128 *p_dst;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  size_t v22;
  size_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  size_t v28;
  int v29;
  size_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  char *v36;
  const void *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::string v40;
  void *v41;
  char v42;
  void *v43;
  char v44;
  void *v45;
  char v46;
  __int128 v47;
  char v48;
  char v49[8];
  _QWORD *v50;
  void *__p[2];
  char v52;
  void *v53[3];
  __int128 v54;
  unint64_t v55;
  __int128 __dst;
  unint64_t v57;
  void *v58;
  __int128 v59;
  std::__shared_weak_count *v61;
  __int128 buf;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[7];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    v61 = v8;
    if (v8)
    {
      v9 = v8;
      if (!a1[6])
      {
LABEL_83:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v39 = __ldaxr(p_shared_owners);
        while (__stlxr(v39 - 1, p_shared_owners));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      if (a2 != 4)
      {
        if (a2 == 2)
        {
          v10 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf) = 0;
            _os_log_impl(&dword_1A343C000, v10, OS_LOG_TYPE_DEFAULT, "#I Enter low-power complete", (uint8_t *)&buf, 2u);
          }
          DIAGTrace::stallDetection_sync((const __CFDictionary **)v7, 0);
        }
        else
        {
          v18 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            if (*((char *)a3 + 23) < 0)
              a3 = (_QWORD *)*a3;
            LODWORD(buf) = 136315138;
            *(_QWORD *)((char *)&buf + 4) = a3;
            _os_log_impl(&dword_1A343C000, v18, OS_LOG_TYPE_DEFAULT, "#I Enter low-power skipped. %s", (uint8_t *)&buf, 0xCu);
          }
        }
        goto LABEL_83;
      }
      v11 = *(NSObject **)(v7 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = a3;
        if (*((char *)a3 + 23) < 0)
          v12 = (_QWORD *)*a3;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v12;
        _os_log_impl(&dword_1A343C000, v11, OS_LOG_TYPE_DEFAULT, "#I Enter low-power error. %s", (uint8_t *)&buf, 0xCu);
      }
      v58 = operator new(0x20uLL);
      v59 = xmmword_1A357F050;
      strcpy((char *)v58, "Enter low-power failed. ");
      *(_QWORD *)&v13 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v68 = v13;
      v67 = v13;
      v66 = v13;
      v65 = v13;
      v64 = v13;
      v63 = v13;
      buf = v13;
      v14 = (const void *)*MEMORY[0x1E0CFB590];
      v15 = strlen((const char *)*MEMORY[0x1E0CFB590]);
      if (v15 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v16 = v15;
      if (v15 >= 0x17)
      {
        v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17)
          v19 = v15 | 7;
        v20 = v19 + 1;
        p_dst = (__int128 *)operator new(v19 + 1);
        *((_QWORD *)&__dst + 1) = v16;
        v57 = v20 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v57) = v15;
        p_dst = &__dst;
        if (!v15)
        {
LABEL_25:
          *((_BYTE *)p_dst + v16) = 0;
          v21 = (const void *)*MEMORY[0x1E0CFBDA0];
          v22 = strlen((const char *)*MEMORY[0x1E0CFBDA0]);
          if (v22 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v23 = v22;
          if (v22 >= 0x17)
          {
            v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v22 | 7) != 0x17)
              v25 = v22 | 7;
            v26 = v25 + 1;
            v24 = operator new(v25 + 1);
            *((_QWORD *)&v54 + 1) = v23;
            v55 = v26 | 0x8000000000000000;
            *(_QWORD *)&v54 = v24;
          }
          else
          {
            HIBYTE(v55) = v22;
            v24 = &v54;
            if (!v22)
            {
LABEL_33:
              v24[v23] = 0;
              v27 = SHIBYTE(v59);
              if (v59 >= 0)
                v28 = HIBYTE(v59);
              else
                v28 = v59;
              v29 = *((char *)a3 + 23);
              if (v29 >= 0)
                v30 = *((unsigned __int8 *)a3 + 23);
              else
                v30 = a3[1];
              v31 = v30 + v28;
              memset(v53, 170, sizeof(v53));
              if (v30 + v28 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              if (v31 > 0x16)
              {
                v33 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v31 | 7) != 0x17)
                  v33 = v31 | 7;
                v34 = v33 + 1;
                v32 = (char *)operator new(v33 + 1);
                v53[1] = (void *)(v30 + v28);
                v53[2] = (void *)(v34 | 0x8000000000000000);
                v53[0] = v32;
              }
              else
              {
                memset(v53, 0, sizeof(v53));
                v32 = (char *)v53;
                HIBYTE(v53[2]) = v30 + v28;
              }
              if (v28)
              {
                if (v27 >= 0)
                  v35 = &v58;
                else
                  v35 = v58;
                memmove(v32, v35, v28);
              }
              v36 = &v32[v28];
              if (v30)
              {
                if (v29 >= 0)
                  v37 = a3;
                else
                  v37 = (const void *)*a3;
                memmove(v36, v37, v30);
              }
              v36[v30] = 0;
              Timestamp::Timestamp((Timestamp *)v49);
              Timestamp::asString((uint64_t)v49, 0, 9, __p);
              v48 = 0;
              LOBYTE(v47) = 0;
              ResetInfo::ResetInfo((std::string *)&buf, &__dst, &v54, (__int128 *)v53, (uint64_t)__p, 7, &v47);
              if (v52 < 0)
              {
                operator delete(__p[0]);
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v49, v50);
                if ((SHIBYTE(v53[2]) & 0x80000000) == 0)
                {
LABEL_57:
                  if ((SHIBYTE(v55) & 0x80000000) == 0)
                    goto LABEL_58;
                  goto LABEL_72;
                }
              }
              else
              {
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v49, v50);
                if ((SHIBYTE(v53[2]) & 0x80000000) == 0)
                  goto LABEL_57;
              }
              operator delete(v53[0]);
              if ((SHIBYTE(v55) & 0x80000000) == 0)
              {
LABEL_58:
                if ((SHIBYTE(v57) & 0x80000000) == 0)
                  goto LABEL_59;
LABEL_73:
                operator delete((void *)__dst);
LABEL_59:
                ResetInfo::ResetInfo(&v40, &buf);
                DIAGTrace::commandResetModem_sync((_QWORD *)v7, (__int128 *)&v40);
                if (v46 < 0)
                {
                  operator delete(v45);
                  if ((v44 & 0x80000000) == 0)
                  {
LABEL_61:
                    if ((v42 & 0x80000000) == 0)
                      goto LABEL_62;
                    goto LABEL_76;
                  }
                }
                else if ((v44 & 0x80000000) == 0)
                {
                  goto LABEL_61;
                }
                operator delete(v43);
                if ((v42 & 0x80000000) == 0)
                {
LABEL_62:
                  if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_63;
                  goto LABEL_77;
                }
LABEL_76:
                operator delete(v41);
                if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_63:
                  if ((SHIBYTE(v68) & 0x80000000) == 0)
                    goto LABEL_64;
                  goto LABEL_78;
                }
LABEL_77:
                operator delete(v40.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v68) & 0x80000000) == 0)
                {
LABEL_64:
                  if ((SBYTE7(v66) & 0x80000000) == 0)
                    goto LABEL_65;
                  goto LABEL_79;
                }
LABEL_78:
                operator delete(*((void **)&v67 + 1));
                if ((SBYTE7(v66) & 0x80000000) == 0)
                {
LABEL_65:
                  if ((SHIBYTE(v64) & 0x80000000) == 0)
                    goto LABEL_66;
                  goto LABEL_80;
                }
LABEL_79:
                operator delete((void *)v65);
                if ((SHIBYTE(v64) & 0x80000000) == 0)
                {
LABEL_66:
                  if ((SBYTE7(v63) & 0x80000000) == 0)
                    goto LABEL_67;
                  goto LABEL_81;
                }
LABEL_80:
                operator delete(*((void **)&v63 + 1));
                if ((SBYTE7(v63) & 0x80000000) == 0)
                {
LABEL_67:
                  if ((v27 & 0x80000000) == 0)
                    goto LABEL_68;
                  goto LABEL_82;
                }
LABEL_81:
                operator delete((void *)buf);
                if ((v27 & 0x80000000) == 0)
                {
LABEL_68:
                  v9 = v61;
                  if (!v61)
                    return;
                  goto LABEL_83;
                }
LABEL_82:
                operator delete(v58);
                v9 = v61;
                if (!v61)
                  return;
                goto LABEL_83;
              }
LABEL_72:
              operator delete((void *)v54);
              if ((SHIBYTE(v57) & 0x80000000) == 0)
                goto LABEL_59;
              goto LABEL_73;
            }
          }
          memmove(v24, v21, v23);
          goto LABEL_33;
        }
      }
      memmove(p_dst, v14, v16);
      goto LABEL_25;
    }
  }
}

void sub_1A3472028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  char v59;
  uint64_t v60;

  ResetInfo::~ResetInfo(&a10);
  ResetInfo::~ResetInfo((void **)(v60 - 224));
  if (v59 < 0)
    operator delete(__p);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v60 - 240);
  _Unwind_Resume(a1);
}

void DIAGTrace::exitLowPower_sync(DIAGTrace *this, group *a2)
{
  char *gr_name;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  void *v14;
  void *v15;
  NSObject *v16;
  NSObject *v17;
  _QWORD v18[5];
  dispatch_group_t group;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *v22;
  NSObject *v23;
  uint8_t buf[16];

  if (*((_QWORD *)this + 50))
  {
    gr_name = a2->gr_name;
    if (a2->gr_name)
    {
      dispatch_retain((dispatch_object_t)a2->gr_name);
      dispatch_group_enter((dispatch_group_t)gr_name);
    }
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v4 || (v5 = *((_QWORD *)this + 9), (v6 = std::__shared_weak_count::lock(v4)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v7 = v6;
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
    }
    v12 = (uint64_t *)*((_QWORD *)this + 50);
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 1174405120;
    v18[2] = ___ZN9DIAGTrace17exitLowPower_syncEN8dispatch5groupE_block_invoke;
    v18[3] = &__block_descriptor_tmp_21_1;
    v18[4] = this;
    group = (dispatch_group_t)gr_name;
    if (gr_name)
    {
      dispatch_retain((dispatch_object_t)gr_name);
      dispatch_group_enter((dispatch_group_t)gr_name);
    }
    v20 = v5;
    v21 = v7;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = _Block_copy(v18);
    v15 = v14;
    v16 = *((_QWORD *)this + 11);
    if (v16)
    {
      dispatch_retain(v16);
      v22 = v15;
      v23 = v16;
      diag::Service::wake(v12, (uint64_t)&v22);
      dispatch_release(v16);
      if (!v15)
        goto LABEL_24;
    }
    else
    {
      v22 = v14;
      v23 = 0;
      diag::Service::wake(v12, (uint64_t)&v22);
      if (!v15)
      {
LABEL_24:
        if (v21)
          std::__shared_weak_count::__release_weak(v21);
        if (group)
        {
          dispatch_group_leave(group);
          if (group)
            dispatch_release(group);
        }
        std::__shared_weak_count::__release_weak(v7);
        if (gr_name)
        {
          dispatch_group_leave((dispatch_group_t)gr_name);
          dispatch_release((dispatch_object_t)gr_name);
        }
        return;
      }
    }
    _Block_release(v15);
    goto LABEL_24;
  }
  v17 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v17, OS_LOG_TYPE_DEFAULT, "#I Service not initialized. Ignoring exit low-power request", buf, 2u);
  }
}

void sub_1A3472334(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN9DIAGTrace17exitLowPower_syncEN8dispatch5groupE_block_invoke(_QWORD *a1, int a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  NSObject *v11;
  _QWORD *v12;
  __int128 v13;
  const void *v14;
  size_t v15;
  size_t v16;
  __int128 *p_dst;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  size_t v22;
  size_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  size_t v28;
  int v29;
  size_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  char *v36;
  const void *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::string v40;
  void *v41;
  char v42;
  void *v43;
  char v44;
  void *v45;
  char v46;
  __int128 v47;
  char v48;
  char v49[8];
  _QWORD *v50;
  void *__p[2];
  char v52;
  void *v53[3];
  __int128 v54;
  unint64_t v55;
  __int128 __dst;
  unint64_t v57;
  void *v58;
  __int128 v59;
  std::__shared_weak_count *v61;
  __int128 buf;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[7];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    v61 = v8;
    if (v8)
    {
      v9 = v8;
      if (!a1[6])
      {
LABEL_83:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v39 = __ldaxr(p_shared_owners);
        while (__stlxr(v39 - 1, p_shared_owners));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      if (a2 != 4)
      {
        if (a2 == 1)
        {
          v10 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf) = 0;
            _os_log_impl(&dword_1A343C000, v10, OS_LOG_TYPE_DEFAULT, "#I Exit low-power complete", (uint8_t *)&buf, 2u);
          }
          DIAGTrace::stallDetection_sync((const __CFDictionary **)v7, *(unsigned __int8 *)(v7 + 312));
        }
        else
        {
          v18 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            if (*((char *)a3 + 23) < 0)
              a3 = (_QWORD *)*a3;
            LODWORD(buf) = 136315138;
            *(_QWORD *)((char *)&buf + 4) = a3;
            _os_log_impl(&dword_1A343C000, v18, OS_LOG_TYPE_DEFAULT, "#I Exit low-power skipped. %s", (uint8_t *)&buf, 0xCu);
          }
        }
        goto LABEL_83;
      }
      v11 = *(NSObject **)(v7 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = a3;
        if (*((char *)a3 + 23) < 0)
          v12 = (_QWORD *)*a3;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v12;
        _os_log_impl(&dword_1A343C000, v11, OS_LOG_TYPE_DEFAULT, "#I Exit low-power error. %s", (uint8_t *)&buf, 0xCu);
      }
      v58 = operator new(0x20uLL);
      v59 = xmmword_1A357F830;
      strcpy((char *)v58, "Diag exit low-power failed. ");
      *(_QWORD *)&v13 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v68 = v13;
      v67 = v13;
      v66 = v13;
      v65 = v13;
      v64 = v13;
      v63 = v13;
      buf = v13;
      v14 = (const void *)*MEMORY[0x1E0CFB590];
      v15 = strlen((const char *)*MEMORY[0x1E0CFB590]);
      if (v15 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v16 = v15;
      if (v15 >= 0x17)
      {
        v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17)
          v19 = v15 | 7;
        v20 = v19 + 1;
        p_dst = (__int128 *)operator new(v19 + 1);
        *((_QWORD *)&__dst + 1) = v16;
        v57 = v20 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v57) = v15;
        p_dst = &__dst;
        if (!v15)
        {
LABEL_25:
          *((_BYTE *)p_dst + v16) = 0;
          v21 = (const void *)*MEMORY[0x1E0CFBDA0];
          v22 = strlen((const char *)*MEMORY[0x1E0CFBDA0]);
          if (v22 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v23 = v22;
          if (v22 >= 0x17)
          {
            v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v22 | 7) != 0x17)
              v25 = v22 | 7;
            v26 = v25 + 1;
            v24 = operator new(v25 + 1);
            *((_QWORD *)&v54 + 1) = v23;
            v55 = v26 | 0x8000000000000000;
            *(_QWORD *)&v54 = v24;
          }
          else
          {
            HIBYTE(v55) = v22;
            v24 = &v54;
            if (!v22)
            {
LABEL_33:
              v24[v23] = 0;
              v27 = SHIBYTE(v59);
              if (v59 >= 0)
                v28 = HIBYTE(v59);
              else
                v28 = v59;
              v29 = *((char *)a3 + 23);
              if (v29 >= 0)
                v30 = *((unsigned __int8 *)a3 + 23);
              else
                v30 = a3[1];
              v31 = v30 + v28;
              memset(v53, 170, sizeof(v53));
              if (v30 + v28 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              if (v31 > 0x16)
              {
                v33 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v31 | 7) != 0x17)
                  v33 = v31 | 7;
                v34 = v33 + 1;
                v32 = (char *)operator new(v33 + 1);
                v53[1] = (void *)(v30 + v28);
                v53[2] = (void *)(v34 | 0x8000000000000000);
                v53[0] = v32;
              }
              else
              {
                memset(v53, 0, sizeof(v53));
                v32 = (char *)v53;
                HIBYTE(v53[2]) = v30 + v28;
              }
              if (v28)
              {
                if (v27 >= 0)
                  v35 = &v58;
                else
                  v35 = v58;
                memmove(v32, v35, v28);
              }
              v36 = &v32[v28];
              if (v30)
              {
                if (v29 >= 0)
                  v37 = a3;
                else
                  v37 = (const void *)*a3;
                memmove(v36, v37, v30);
              }
              v36[v30] = 0;
              Timestamp::Timestamp((Timestamp *)v49);
              Timestamp::asString((uint64_t)v49, 0, 9, __p);
              v48 = 0;
              LOBYTE(v47) = 0;
              ResetInfo::ResetInfo((std::string *)&buf, &__dst, &v54, (__int128 *)v53, (uint64_t)__p, 7, &v47);
              if (v52 < 0)
              {
                operator delete(__p[0]);
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v49, v50);
                if ((SHIBYTE(v53[2]) & 0x80000000) == 0)
                {
LABEL_57:
                  if ((SHIBYTE(v55) & 0x80000000) == 0)
                    goto LABEL_58;
                  goto LABEL_72;
                }
              }
              else
              {
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v49, v50);
                if ((SHIBYTE(v53[2]) & 0x80000000) == 0)
                  goto LABEL_57;
              }
              operator delete(v53[0]);
              if ((SHIBYTE(v55) & 0x80000000) == 0)
              {
LABEL_58:
                if ((SHIBYTE(v57) & 0x80000000) == 0)
                  goto LABEL_59;
LABEL_73:
                operator delete((void *)__dst);
LABEL_59:
                ResetInfo::ResetInfo(&v40, &buf);
                DIAGTrace::commandResetModem_sync((_QWORD *)v7, (__int128 *)&v40);
                if (v46 < 0)
                {
                  operator delete(v45);
                  if ((v44 & 0x80000000) == 0)
                  {
LABEL_61:
                    if ((v42 & 0x80000000) == 0)
                      goto LABEL_62;
                    goto LABEL_76;
                  }
                }
                else if ((v44 & 0x80000000) == 0)
                {
                  goto LABEL_61;
                }
                operator delete(v43);
                if ((v42 & 0x80000000) == 0)
                {
LABEL_62:
                  if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_63;
                  goto LABEL_77;
                }
LABEL_76:
                operator delete(v41);
                if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_63:
                  if ((SHIBYTE(v68) & 0x80000000) == 0)
                    goto LABEL_64;
                  goto LABEL_78;
                }
LABEL_77:
                operator delete(v40.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v68) & 0x80000000) == 0)
                {
LABEL_64:
                  if ((SBYTE7(v66) & 0x80000000) == 0)
                    goto LABEL_65;
                  goto LABEL_79;
                }
LABEL_78:
                operator delete(*((void **)&v67 + 1));
                if ((SBYTE7(v66) & 0x80000000) == 0)
                {
LABEL_65:
                  if ((SHIBYTE(v64) & 0x80000000) == 0)
                    goto LABEL_66;
                  goto LABEL_80;
                }
LABEL_79:
                operator delete((void *)v65);
                if ((SHIBYTE(v64) & 0x80000000) == 0)
                {
LABEL_66:
                  if ((SBYTE7(v63) & 0x80000000) == 0)
                    goto LABEL_67;
                  goto LABEL_81;
                }
LABEL_80:
                operator delete(*((void **)&v63 + 1));
                if ((SBYTE7(v63) & 0x80000000) == 0)
                {
LABEL_67:
                  if ((v27 & 0x80000000) == 0)
                    goto LABEL_68;
                  goto LABEL_82;
                }
LABEL_81:
                operator delete((void *)buf);
                if ((v27 & 0x80000000) == 0)
                {
LABEL_68:
                  v9 = v61;
                  if (!v61)
                    return;
                  goto LABEL_83;
                }
LABEL_82:
                operator delete(v58);
                v9 = v61;
                if (!v61)
                  return;
                goto LABEL_83;
              }
LABEL_72:
              operator delete((void *)v54);
              if ((SHIBYTE(v57) & 0x80000000) == 0)
                goto LABEL_59;
              goto LABEL_73;
            }
          }
          memmove(v24, v21, v23);
          goto LABEL_33;
        }
      }
      memmove(p_dst, v14, v16);
      goto LABEL_25;
    }
  }
}

void sub_1A3472928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  char v59;
  uint64_t v60;

  ResetInfo::~ResetInfo(&a10);
  ResetInfo::~ResetInfo((void **)(v60 - 224));
  if (v59 < 0)
    operator delete(__p);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v60 - 240);
  _Unwind_Resume(a1);
}

void DIAGTrace::snapshot_sync(uint64_t a1, dispatch_object_t *a2, const __CFDictionary **a3)
{
  NSObject *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  const void *v14;
  size_t v15;
  void *v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  char *v21;
  size_t v22;
  std::string::size_type v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  size_t v28;
  size_t v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  std::string *v35;
  __int128 v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  std::string *v39;
  std::string::size_type size;
  void *v41;
  int v42;
  void **v43;
  void *v44;
  void *v45;
  uint64_t v46;
  BOOL v47;
  NSObject *v49;
  NSObject *v50;
  std::string::size_type v51;
  void **v52;
  void *v53;
  void **v54;
  void *v55;
  void *v56;
  uint64_t v57;
  BOOL v58;
  char v60;
  const char *v61;
  int v62;
  std::string::size_type v63;
  int v64;
  size_t v65;
  unint64_t v66;
  void *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  std::string *v71;
  std::string *v72;
  std::string *v73;
  std::string::size_type v74;
  char v75;
  char *v76;
  uint64_t *v77;
  unint64_t v78;
  void *v79;
  NSObject *v80;
  char v81;
  std::string::size_type v82;
  uint64_t v83;
  std::string::value_type *__s;
  std::string::size_type v85;
  NSObject *v86;
  _QWORD aBlock[5];
  dispatch_group_t group;
  uint64_t v89;
  std::__shared_weak_count *v90;
  _QWORD v91[2];
  std::string v92;
  xpc_object_t object;
  char *v94;
  __int128 v95;
  std::string v96;
  std::string v97;
  void *__p[3];
  void *__dst[3];
  void *v100[3];
  _QWORD v101[2];
  __int128 v102;
  int64_t v103;
  std::string v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v5);
  }
  v6 = *(std::__shared_weak_count **)(a1 + 80);
  v86 = v5;
  if (!v6 || (v7 = *(_QWORD *)(a1 + 72), (v8 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v101[0] = 0xAAAAAAAAAAAAAAAALL;
  v101[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v101, *a3);
  memset(v100, 170, sizeof(v100));
  v14 = (const void *)*MEMORY[0x1E0CFB250];
  v15 = strlen((const char *)*MEMORY[0x1E0CFB250]);
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v16 = (void *)v15;
  v83 = v7;
  if (v15 >= 0x17)
  {
    v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v18 = v15 | 7;
    v19 = v18 + 1;
    v17 = (void **)operator new(v18 + 1);
    __dst[1] = v16;
    __dst[2] = (void *)(v19 | 0x8000000000000000);
    __dst[0] = v17;
    goto LABEL_18;
  }
  HIBYTE(__dst[2]) = v15;
  v17 = __dst;
  if (v15)
LABEL_18:
    memmove(v17, v14, (size_t)v16);
  v20 = (const char *)*MEMORY[0x1E0CFB370];
  *((_BYTE *)v16 + (_QWORD)v17) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)__p, v20);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A858F29C](__p);
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
  memset(__dst, 170, sizeof(__dst));
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_1A357F480;
  strcpy((char *)__p[0], "kCollectTelephonyLogsWithCoredump");
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v104, "kKeyTraceAction");
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A858F29C](&v104);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  memset(__p, 170, sizeof(__p));
  strcpy((char *)&v104, "kTraceFilterActionNone");
  *((_BYTE *)&v104.__r_.__value_.__s + 23) = 22;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v97, "kKeyTraceFilterAction");
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A858F29C](&v97);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  v21 = abm::trace::kSnapshotFolder[0];
  v22 = strlen(abm::trace::kSnapshotFolder[0]);
  if (v22 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v23 = v22;
  if (v22 >= 0x17)
  {
    v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v25 = v22 | 7;
    v26 = v25 + 1;
    v24 = operator new(v25 + 1);
    v96.__r_.__value_.__l.__size_ = v23;
    v96.__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
    v96.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
    goto LABEL_32;
  }
  *((_BYTE *)&v96.__r_.__value_.__s + 23) = v22;
  v24 = &v96;
  if (v22)
LABEL_32:
    memmove(v24, v21, v23);
  *((_BYTE *)v24 + v23) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v102, "kKeyTraceDumpStatePath");
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A858F29C](&v102);
  v27 = abm::trace::kLogDirPrefix[0];
  v28 = strlen(abm::trace::kLogDirPrefix[0]);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v29 = v28;
  if (v28 >= 0x17)
  {
    v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v31 = v28 | 7;
    v32 = v31 + 1;
    v30 = (__int128 *)operator new(v31 + 1);
    *((_QWORD *)&v102 + 1) = v29;
    v103 = v32 | 0x8000000000000000;
    *(_QWORD *)&v102 = v30;
    goto LABEL_40;
  }
  HIBYTE(v103) = v28;
  v30 = &v102;
  if (v28)
LABEL_40:
    memmove(v30, v27, v29);
  *((_BYTE *)v30 + v29) = 0;
  if (v103 >= 0)
    v33 = (const std::string::value_type *)&v102;
  else
    v33 = (const std::string::value_type *)v102;
  if (v103 >= 0)
    v34 = HIBYTE(v103);
  else
    v34 = *((_QWORD *)&v102 + 1);
  v35 = std::string::append(&v97, v33, v34);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v104.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v100[2]) >= 0)
    v37 = (const std::string::value_type *)v100;
  else
    v37 = (const std::string::value_type *)v100[0];
  if (SHIBYTE(v100[2]) >= 0)
    v38 = HIBYTE(v100[2]);
  else
    v38 = (std::string::size_type)v100[1];
  v39 = std::string::append(&v104, v37, v38);
  size = v39->__r_.__value_.__l.__size_;
  __s = (std::string::value_type *)v39->__r_.__value_.__r.__words[0];
  v85 = v39->__r_.__value_.__r.__words[2];
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v104.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v103) & 0x80000000) == 0)
    {
LABEL_55:
      if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_56;
LABEL_80:
      operator delete(v97.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_57;
      goto LABEL_81;
    }
  }
  else if ((SHIBYTE(v103) & 0x80000000) == 0)
  {
    goto LABEL_55;
  }
  operator delete((void *)v102);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_80;
LABEL_56:
  if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_57;
LABEL_81:
  operator delete(v96.__r_.__value_.__l.__data_);
LABEL_57:
  v41 = (void *)HIBYTE(__p[2]);
  v42 = SHIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) < 0)
    v41 = __p[1];
  if (v41 == (void *)22)
  {
    v43 = (void **)__p[0];
    if (SHIBYTE(__p[2]) >= 0)
      v43 = __p;
    v44 = *v43;
    v45 = v43[1];
    v46 = *(uint64_t *)((char *)v43 + 14);
    v47 = v44 == *(void **)"kTraceFilterActionNone" && v45 == *(void **)"lterActionNone";
    if (v47 && v46 == *(_QWORD *)"tionNone")
    {
      v53 = (void *)HIBYTE(__dst[2]);
      if (SHIBYTE(__dst[2]) < 0)
        v53 = __dst[1];
      if (v53 != (void *)17)
        goto LABEL_94;
      v54 = __dst;
      if (SHIBYTE(__dst[2]) < 0)
        v54 = (void **)__dst[0];
      v55 = *v54;
      v56 = v54[1];
      v57 = *((unsigned __int8 *)v54 + 16);
      v58 = v55 == *(void **)"kShutdownAllTrace" && v56 == *(void **)"nAllTrace";
      if (v58 && v57 == str_71[16])
        v60 = *(_BYTE *)(a1 + 327) != 0;
      else
LABEL_94:
        v60 = 1;
      memset(&v104, 170, sizeof(v104));
      memset(&v97, 0, sizeof(v97));
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v96, "kKeyTraceDumpStateReason");
      ctu::cf::map_adapter::getString();
      MEMORY[0x1A858F29C](&v96);
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v97.__r_.__value_.__l.__data_);
      memset(&v97, 170, sizeof(v97));
      v61 = (const char *)*MEMORY[0x1E0CFB770];
      memset(&v96, 0, sizeof(v96));
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v102, v61);
      ctu::cf::map_adapter::getString();
      MEMORY[0x1A858F29C](&v102);
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v96.__r_.__value_.__l.__data_);
        v62 = SHIBYTE(v97.__r_.__value_.__r.__words[2]);
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v63 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
        else
          v63 = v97.__r_.__value_.__l.__size_;
        if (v63)
        {
LABEL_102:
          v82 = size;
          v64 = SHIBYTE(v104.__r_.__value_.__r.__words[2]);
          if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v65 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
          else
            v65 = v104.__r_.__value_.__l.__size_;
          v66 = v65 + 4;
          memset(&v96, 170, sizeof(v96));
          if (v65 + 4 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v66 >= 0x17)
          {
            v81 = v60;
            v69 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v66 | 7) != 0x17)
              v69 = v66 | 7;
            v70 = v69 + 1;
            v67 = operator new(v69 + 1);
            v96.__r_.__value_.__l.__size_ = v65 + 4;
            v96.__r_.__value_.__r.__words[2] = v70 | 0x8000000000000000;
            v96.__r_.__value_.__r.__words[0] = (std::string::size_type)v67;
            v60 = v81;
          }
          else
          {
            memset(&v96, 0, sizeof(v96));
            v67 = &v96;
            *((_BYTE *)&v96.__r_.__value_.__s + 23) = v65 + 4;
            if (!v65)
              goto LABEL_122;
          }
          if (v64 >= 0)
            v71 = &v104;
          else
            v71 = (std::string *)v104.__r_.__value_.__r.__words[0];
          memmove(v67, v71, v65);
LABEL_122:
          strcpy((char *)v67 + v65, " w/ ");
          if (v62 >= 0)
            v72 = &v97;
          else
            v72 = (std::string *)v97.__r_.__value_.__r.__words[0];
          v73 = std::string::append(&v96, (const std::string::value_type *)v72, v63);
          v74 = v73->__r_.__value_.__r.__words[0];
          *(_QWORD *)&v102 = v73->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)&v102 + 7) = *(std::string::size_type *)((char *)&v73->__r_.__value_.__r.__words[1] + 7);
          v75 = HIBYTE(v73->__r_.__value_.__r.__words[2]);
          v73->__r_.__value_.__l.__size_ = 0;
          v73->__r_.__value_.__r.__words[2] = 0;
          v73->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v104.__r_.__value_.__l.__data_);
          v104.__r_.__value_.__r.__words[0] = v74;
          v104.__r_.__value_.__l.__size_ = v102;
          *(std::string::size_type *)((char *)&v104.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v102 + 7);
          *((_BYTE *)&v104.__r_.__value_.__s + 23) = v75;
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          size = v82;
          v68 = *(uint64_t **)(a1 + 400);
          v51 = v85;
          v50 = v86;
          if (!v68)
          {
LABEL_150:
            if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v97.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_152:
                if ((v51 & 0x8000000000000000) != 0)
                  goto LABEL_73;
                goto LABEL_153;
              }
            }
            else if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_152;
            }
            operator delete(v104.__r_.__value_.__l.__data_);
            if ((v51 & 0x8000000000000000) != 0)
              goto LABEL_73;
            goto LABEL_153;
          }
LABEL_130:
          v76 = (char *)operator new(0x20uLL);
          v94 = v76;
          v95 = xmmword_1A357F950;
          strcpy(v76, "Trace State Configuration");
          DIAGTrace::getStateAsDict_sync(a1, (uint64_t)&v104, &object);
          diag::Service::pushInfo(v68, (uint64_t)&v94, &object);
          xpc_release(object);
          object = 0;
          operator delete(v76);
          v77 = *(uint64_t **)(a1 + 400);
          if ((v51 & 0x8000000000000000) != 0)
          {
            std::string::__init_copy_ctor_external(&v92, __s, size);
          }
          else
          {
            v92.__r_.__value_.__r.__words[0] = (std::string::size_type)__s;
            v92.__r_.__value_.__l.__size_ = size;
            v92.__r_.__value_.__r.__words[2] = v51;
          }
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 1174405120;
          aBlock[2] = ___ZN9DIAGTrace13snapshot_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
          aBlock[3] = &__block_descriptor_tmp_24;
          aBlock[4] = a1;
          group = v50;
          if (v50)
          {
            dispatch_retain(v50);
            dispatch_group_enter(group);
          }
          v89 = v83;
          v90 = v9;
          do
            v78 = __ldxr(p_shared_weak_owners);
          while (__stxr(v78 + 1, p_shared_weak_owners));
          v79 = _Block_copy(aBlock);
          v80 = *(NSObject **)(a1 + 88);
          if (v80)
            dispatch_retain(v80);
          v91[0] = v79;
          v91[1] = v80;
          diag::Service::snapshot(v77, (uint64_t)&v92, (uint64_t)&v104, v60, (uint64_t)v91);
          if (v80)
            dispatch_release(v80);
          if (v79)
            _Block_release(v79);
          if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v92.__r_.__value_.__l.__data_);
          if (v90)
            std::__shared_weak_count::__release_weak(v90);
          if (group)
          {
            dispatch_group_leave(group);
            if (group)
              dispatch_release(group);
          }
          goto LABEL_150;
        }
      }
      else
      {
        v62 = SHIBYTE(v97.__r_.__value_.__r.__words[2]);
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v63 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
        else
          v63 = v97.__r_.__value_.__l.__size_;
        if (v63)
          goto LABEL_102;
      }
      v68 = *(uint64_t **)(a1 + 400);
      v51 = v85;
      v50 = v86;
      if (!v68)
        goto LABEL_150;
      goto LABEL_130;
    }
  }
  v49 = *(NSObject **)(a1 + 40);
  v51 = v85;
  v50 = v86;
  if (!os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
    goto LABEL_152;
  v52 = (void **)__p[0];
  if (v42 >= 0)
    v52 = __p;
  LODWORD(v104.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)v104.__r_.__value_.__r.__words + 4) = (std::string::size_type)v52;
  _os_log_impl(&dword_1A343C000, v49, OS_LOG_TYPE_DEFAULT, "#I Skipping snapshot as trace filter is '%s'", (uint8_t *)&v104, 0xCu);
  if ((v85 & 0x8000000000000000) != 0)
  {
LABEL_73:
    operator delete(__s);
    if (SHIBYTE(__p[2]) < 0)
      goto LABEL_74;
    goto LABEL_154;
  }
LABEL_153:
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_74:
    operator delete(__p[0]);
    if (SHIBYTE(__dst[2]) < 0)
      goto LABEL_75;
    goto LABEL_155;
  }
LABEL_154:
  if (SHIBYTE(__dst[2]) < 0)
  {
LABEL_75:
    operator delete(__dst[0]);
    if (SHIBYTE(v100[2]) < 0)
      goto LABEL_76;
LABEL_156:
    MEMORY[0x1A858F2D8](v101);
    std::__shared_weak_count::__release_weak(v9);
    if (!v50)
      return;
    goto LABEL_157;
  }
LABEL_155:
  if ((SHIBYTE(v100[2]) & 0x80000000) == 0)
    goto LABEL_156;
LABEL_76:
  operator delete(v100[0]);
  MEMORY[0x1A858F2D8](v101);
  std::__shared_weak_count::__release_weak(v9);
  if (!v50)
    return;
LABEL_157:
  dispatch_group_leave(v50);
  dispatch_release(v50);
}

void sub_1A3473490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, dispatch_group_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,dispatch_group_t group,uint64_t a22,std::__shared_weak_count *a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,xpc_object_t object,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void DIAGTrace::getStateAsDict_sync(uint64_t a1@<X0>, uint64_t a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_object_t v6;
  xpc_object_t v7;
  uint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  NSObject *v11;
  const char *v12;
  xpc_object_t v13;
  xpc_object_t v14;
  const char *v15;
  xpc_object_t v16;
  xpc_object_t v17;
  const char *v18;
  xpc_object_t v19;
  xpc_object_t v20;
  std::string *p_buf;
  xpc_object_t v22;
  xpc_object_t v23;
  uint64_t v24;
  const char *v25;
  xpc_object_t v26;
  xpc_object_t v27;
  std::string *p_p;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  const char *v32;
  xpc_object_t v33;
  xpc_object_t v34;
  const char *v35;
  xpc_object_t v36;
  xpc_object_t v37;
  const char *v38;
  xpc_object_t v39;
  xpc_object_t v40;
  uint64_t v41;
  const char *v42;
  xpc_object_t v43;
  xpc_object_t v44;
  const char *v45;
  xpc_object_t v46;
  xpc_object_t v47;
  unsigned int v48;
  std::string *v49;
  xpc_object_t v50;
  xpc_object_t v51;
  xpc_object_t v52;
  uint64_t v53;
  const char *v54;
  xpc_object_t v55;
  xpc_object_t v56;
  unsigned int v57;
  std::string *v58;
  xpc_object_t v59;
  xpc_object_t v60;
  xpc_object_t v61;
  const char *v62;
  xpc_object_t v63;
  xpc_object_t v64;
  std::string __p;
  std::string buf;

  *a3 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v6 = xpc_dictionary_create(0, 0, 0);
  v7 = v6;
  v8 = MEMORY[0x1E0C812F8];
  if (v6)
  {
    *a3 = v6;
  }
  else
  {
    v7 = xpc_null_create();
    *a3 = v7;
    if (!v7)
    {
      v9 = xpc_null_create();
      v7 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A85902BC](v7) == v8)
  {
    xpc_retain(v7);
    goto LABEL_9;
  }
  v9 = xpc_null_create();
LABEL_8:
  *a3 = v9;
LABEL_9:
  xpc_release(v7);
  v10 = *a3;
  if (MEMORY[0x1A85902BC](*a3) != v8)
  {
    v11 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1A343C000, v11, OS_LOG_TYPE_ERROR, "Failed to create state dump dictionary", (uint8_t *)&buf, 2u);
    }
    return;
  }
  if (*(_BYTE *)(a1 + 324))
    v12 = "true";
  else
    v12 = "false";
  v13 = xpc_string_create(v12);
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v10, "Enabled", v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  if (*(_BYTE *)(a1 + 176))
    v15 = "true";
  else
    v15 = "false";
  v16 = xpc_string_create(v15);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(v10, "High_Tput", v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  if (*(_BYTE *)(a1 + 177))
    v18 = "true";
  else
    v18 = "false";
  v19 = xpc_string_create(v18);
  if (!v19)
    v19 = xpc_null_create();
  xpc_dictionary_set_value(v10, "Data_Logging", v19);
  v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  DIAGTrace::historyAsString(a1, (char *)&buf);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_buf = &buf;
  else
    p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  v22 = xpc_string_create((const char *)p_buf);
  if (!v22)
    v22 = xpc_null_create();
  xpc_dictionary_set_value(v10, "History", v22);
  v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    v24 = *(int *)(a1 + 160);
    if (v24 <= 4)
      goto LABEL_34;
  }
  else
  {
    v24 = *(int *)(a1 + 160);
    if (v24 <= 4)
    {
LABEL_34:
      v25 = off_1E4A07BE0[v24];
      goto LABEL_37;
    }
  }
  v25 = "Unknown";
LABEL_37:
  v26 = xpc_string_create(v25);
  if (!v26)
    v26 = xpc_null_create();
  xpc_dictionary_set_value(v10, "Mode", v26);
  v27 = xpc_null_create();
  xpc_release(v26);
  xpc_release(v27);
  std::to_string(&buf, *(_DWORD *)(a1 + 164));
  __p = buf;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v29 = xpc_string_create((const char *)p_p);
  if (!v29)
    v29 = xpc_null_create();
  v30 = *a3;
  xpc_dictionary_set_value(*a3, "TraceOwnership", v29);
  v31 = xpc_null_create();
  xpc_release(v29);
  xpc_release(v31);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v32 = (const char *)(a1 + 184);
    if ((*(char *)(a1 + 207) & 0x80000000) == 0)
      goto LABEL_46;
  }
  else
  {
    v32 = (const char *)(a1 + 184);
    if ((*(char *)(a1 + 207) & 0x80000000) == 0)
      goto LABEL_46;
  }
  v32 = *(const char **)v32;
LABEL_46:
  v33 = xpc_string_create(v32);
  if (!v33)
    v33 = xpc_null_create();
  xpc_dictionary_set_value(v30, "File", v33);
  v34 = xpc_null_create();
  xpc_release(v33);
  xpc_release(v34);
  v35 = (const char *)(a1 + 208);
  if (*(char *)(a1 + 231) < 0)
    v35 = *(const char **)v35;
  v36 = xpc_string_create(v35);
  if (!v36)
    v36 = xpc_null_create();
  xpc_dictionary_set_value(v30, "File_Secondary", v36);
  v37 = xpc_null_create();
  xpc_release(v36);
  xpc_release(v37);
  v38 = (const char *)(a1 + 232);
  if (*(char *)(a1 + 255) < 0)
    v38 = *(const char **)v38;
  v39 = xpc_string_create(v38);
  if (!v39)
    v39 = xpc_null_create();
  xpc_dictionary_set_value(v30, diag::config::kExtraDMCFileKey[0], v39);
  v40 = xpc_null_create();
  xpc_release(v39);
  xpc_release(v40);
  v41 = *(int *)(a1 + 172);
  if (v41 > 2)
    v42 = "Unknown";
  else
    v42 = off_1E4A07C08[v41];
  v43 = xpc_string_create(v42);
  if (!v43)
    v43 = xpc_null_create();
  xpc_dictionary_set_value(v30, diag::config::kEnabledDuringSleepKey[0], v43);
  v44 = xpc_null_create();
  xpc_release(v43);
  xpc_release(v44);
  if (*(_BYTE *)(a1 + 312))
    v45 = "true";
  else
    v45 = "false";
  v46 = xpc_string_create(v45);
  if (!v46)
    v46 = xpc_null_create();
  xpc_dictionary_set_value(v30, diag::config::kStallDetectionKey[0], v46);
  v47 = xpc_null_create();
  xpc_release(v46);
  xpc_release(v47);
  v48 = *(_DWORD *)(a1 + 316);
  memset(&__p, 0, sizeof(__p));
  std::to_string(&buf, v48);
  __p = buf;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v49 = &__p;
  else
    v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v50 = xpc_string_create((const char *)v49);
  if (!v50)
    v50 = xpc_null_create();
  v51 = *a3;
  xpc_dictionary_set_value(*a3, diag::config::kStallDetectionRetriesKey[0], v50);
  v52 = xpc_null_create();
  xpc_release(v50);
  xpc_release(v52);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v53 = *(int *)(a1 + 168);
    if (v53 <= 2)
      goto LABEL_73;
LABEL_77:
    v54 = "Unknown";
    goto LABEL_78;
  }
  v53 = *(int *)(a1 + 168);
  if (v53 > 2)
    goto LABEL_77;
LABEL_73:
  v54 = off_1E4A07C20[v53];
LABEL_78:
  v55 = xpc_string_create(v54);
  if (!v55)
    v55 = xpc_null_create();
  xpc_dictionary_set_value(v51, diag::config::kStallDetectionRecoveryKey[0], v55);
  v56 = xpc_null_create();
  xpc_release(v55);
  xpc_release(v56);
  v57 = *(_DWORD *)(a1 + 384);
  memset(&__p, 0, sizeof(__p));
  std::to_string(&buf, v57);
  __p = buf;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v58 = &__p;
  else
    v58 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v59 = xpc_string_create((const char *)v58);
  if (!v59)
    v59 = xpc_null_create();
  v60 = *a3;
  xpc_dictionary_set_value(v60, "FileSize", v59);
  v61 = xpc_null_create();
  xpc_release(v59);
  xpc_release(v61);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*(char *)(a2 + 23) >= 0)
    v62 = (const char *)a2;
  else
    v62 = *(const char **)a2;
  v63 = xpc_string_create(v62);
  if (!v63)
    v63 = xpc_null_create();
  xpc_dictionary_set_value(v60, (const char *)*MEMORY[0x1E0CFB928], v63);
  v64 = xpc_null_create();
  xpc_release(v63);
  xpc_release(v64);
}

void sub_1A3473EF0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1A3473DB4);
}

void sub_1A3473EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  xpc_object_t *v14;

  if (a14 < 0)
  {
    operator delete(__p);
    xpc::dict::~dict(v14);
    _Unwind_Resume(a1);
  }
  xpc::dict::~dict(v14);
  _Unwind_Resume(a1);
}

void xpc::dict::~dict(xpc_object_t *this)
{
  xpc_release(*this);
  *this = 0;
}

void ___ZN9DIAGTrace13snapshot_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[7];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      if (a1[6])
      {
        v9 = *(NSObject **)(v6 + 40);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          if (*((char *)a3 + 23) < 0)
            a3 = (uint64_t *)*a3;
          v12 = 136315138;
          v13 = a3;
          _os_log_impl(&dword_1A343C000, v9, OS_LOG_TYPE_DEFAULT, "#I Snapshot complete. %s", (uint8_t *)&v12, 0xCu);
        }
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

uint64_t DIAGTrace::updateEnableProperty_sync(uint64_t a1, int a2, int *a3, uint64_t a4, const __CFAllocator *a5)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 325))
    return 0;
  result = ctu::cf::update<char const*,BOOL>(*(__CFDictionary **)(a1 + 392), (const __CFString **)"Enabled", a2, *MEMORY[0x1E0C9AE00], a5);
  if ((_DWORD)result)
  {
    if (*(unsigned __int8 *)(a1 + 324) != a2)
    {
      *a3 = a2 ^ 1;
      *(_BYTE *)(a1 + 324) = a2;
    }
    return 1;
  }
  return result;
}

BOOL DIAGTrace::checkAllDMCName_sync(uint64_t a1, uint64_t a2)
{
  const char *v3;
  const char *v4;
  const char *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  const char *v10;

  if (*(char *)(a1 + 207) >= 0)
    v3 = (const char *)(a1 + 184);
  else
    v3 = *(const char **)(a1 + 184);
  if (*(char *)(a2 + 23) >= 0)
    v4 = (const char *)a2;
  else
    v4 = *(const char **)a2;
  if (strcasecmp(v3, v4))
    return 0;
  if (*(char *)(a1 + 231) >= 0)
    v6 = (const char *)(a1 + 208);
  else
    v6 = *(const char **)(a1 + 208);
  if (strcasecmp(v6, v4))
    return 0;
  v9 = *(const char **)(a1 + 232);
  v8 = a1 + 232;
  v7 = v9;
  if (*(char *)(v8 + 23) >= 0)
    v10 = (const char *)v8;
  else
    v10 = v7;
  return strcasecmp(v10, v4) == 0;
}

BOOL DIAGTrace::checkOneOfDMCName_sync(uint64_t a1, uint64_t a2)
{
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  const char *v9;

  if (*(char *)(a1 + 207) >= 0)
    v3 = (const char *)(a1 + 184);
  else
    v3 = *(const char **)(a1 + 184);
  if (*(char *)(a2 + 23) >= 0)
    v4 = (const char *)a2;
  else
    v4 = *(const char **)a2;
  if (!strcasecmp(v3, v4))
    return 1;
  v5 = *(char *)(a1 + 231) >= 0 ? (const char *)(a1 + 208) : *(const char **)(a1 + 208);
  if (!strcasecmp(v5, v4))
    return 1;
  v8 = *(const char **)(a1 + 232);
  v7 = a1 + 232;
  v6 = v8;
  if (*(char *)(v7 + 23) >= 0)
    v9 = (const char *)v7;
  else
    v9 = v6;
  return strcasecmp(v9, v4) == 0;
}

uint64_t DIAGTrace::updateDMCSetting_sync(uint64_t a1, char *a2, __int128 *a3)
{
  char *v4;
  int v6;
  const char *v7;
  NSObject *v8;
  uint64_t v9;
  void **v10;
  char v11;
  __int128 v12;
  void **v13;
  char v14;
  __int128 v15;
  void **v16;
  char v17;
  __int128 v18;
  __int128 *v19;
  size_t v20;
  __CFDictionary *v21;
  void *v22;
  void *v23;
  BOOL v24;
  __int128 *v25;
  size_t v26;
  __int128 *v28;
  size_t v29;
  char *v30;
  size_t v31;
  std::string::size_type v32;
  std::string *p_buf;
  uint64_t v34;
  uint64_t v35;
  std::string __p;
  void *v37;
  void *v38;
  void *value;
  std::string buf;
  uint64_t v41;

  v4 = a2;
  v41 = *MEMORY[0x1E0C80C00];
  v6 = a2[23];
  if ((v6 & 0x80000000) == 0)
  {
    if (strcasecmp(a2, "File"))
    {
      v7 = v4;
      if (strcasecmp(v4, "File_Secondary"))
        goto LABEL_4;
LABEL_11:
      v10 = (void **)(a1 + 208);
      if ((__int128 *)(a1 + 208) != a3)
      {
        v11 = *((_BYTE *)a3 + 23);
        if ((*(char *)(a1 + 231) & 0x80000000) == 0)
        {
          if ((*((_BYTE *)a3 + 23) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>(v10, *(void **)a3, *((_QWORD *)a3 + 1));
            if ((v4[23] & 0x80000000) == 0)
            {
LABEL_67:
              strcpy(v4, "File_Secondary");
              v4[23] = 14;
              if (prop::bbtrace::set(v4, (const char *)a3))
                goto LABEL_35;
              return 0;
            }
          }
          else
          {
            v12 = *a3;
            *(_QWORD *)(a1 + 224) = *((_QWORD *)a3 + 2);
            *(_OWORD *)v10 = v12;
            if ((v4[23] & 0x80000000) == 0)
              goto LABEL_67;
          }
LABEL_66:
          operator delete(*(void **)v4);
          goto LABEL_67;
        }
        if (v11 >= 0)
          v25 = a3;
        else
          v25 = *(__int128 **)a3;
        if (v11 >= 0)
          v26 = *((unsigned __int8 *)a3 + 23);
        else
          v26 = *((_QWORD *)a3 + 1);
        std::string::__assign_no_alias<false>(v10, v25, v26);
      }
      if ((v4[23] & 0x80000000) == 0)
        goto LABEL_67;
      goto LABEL_66;
    }
LABEL_16:
    v13 = (void **)(a1 + 184);
    if ((__int128 *)(a1 + 184) != a3)
    {
      v14 = *((_BYTE *)a3 + 23);
      if ((*(char *)(a1 + 207) & 0x80000000) == 0)
      {
        if ((*((_BYTE *)a3 + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v13, *(void **)a3, *((_QWORD *)a3 + 1));
          if ((v4[23] & 0x80000000) == 0)
          {
LABEL_34:
            strcpy(v4, "File");
            v4[23] = 4;
            if (prop::bbtrace::set(v4, (const char *)a3))
              goto LABEL_35;
            return 0;
          }
        }
        else
        {
          v15 = *a3;
          *(_QWORD *)(a1 + 200) = *((_QWORD *)a3 + 2);
          *(_OWORD *)v13 = v15;
          if ((v4[23] & 0x80000000) == 0)
            goto LABEL_34;
        }
LABEL_33:
        operator delete(*(void **)v4);
        goto LABEL_34;
      }
      if (v14 >= 0)
        v19 = a3;
      else
        v19 = *(__int128 **)a3;
      if (v14 >= 0)
        v20 = *((unsigned __int8 *)a3 + 23);
      else
        v20 = *((_QWORD *)a3 + 1);
      std::string::__assign_no_alias<false>(v13, v19, v20);
    }
    if ((v4[23] & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_33;
  }
  v7 = *(const char **)a2;
  if (!strcasecmp(*(const char **)a2, "File"))
    goto LABEL_16;
  if (!strcasecmp(v7, "File_Secondary"))
    goto LABEL_11;
LABEL_4:
  if (!strcasecmp(v7, diag::config::kExtraDMCFileKey[0]))
  {
    v16 = (void **)(a1 + 232);
    if ((__int128 *)(a1 + 232) != a3)
    {
      v17 = *((_BYTE *)a3 + 23);
      if (*(char *)(a1 + 255) < 0)
      {
        if (v17 >= 0)
          v28 = a3;
        else
          v28 = *(__int128 **)a3;
        if (v17 >= 0)
          v29 = *((unsigned __int8 *)a3 + 23);
        else
          v29 = *((_QWORD *)a3 + 1);
        std::string::__assign_no_alias<false>(v16, v28, v29);
      }
      else if ((*((_BYTE *)a3 + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v16, *(void **)a3, *((_QWORD *)a3 + 1));
      }
      else
      {
        v18 = *a3;
        *(_QWORD *)(a1 + 248) = *((_QWORD *)a3 + 2);
        *(_OWORD *)v16 = v18;
      }
    }
    v30 = diag::config::kExtraDMCFileKey[0];
    v31 = strlen(diag::config::kExtraDMCFileKey[0]);
    if (v31 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v32 = v31;
    if (v31 >= 0x17)
    {
      v34 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v31 | 7) != 0x17)
        v34 = v31 | 7;
      v35 = v34 + 1;
      p_buf = (std::string *)operator new(v34 + 1);
      buf.__r_.__value_.__l.__size_ = v32;
      buf.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    }
    else
    {
      *((_BYTE *)&buf.__r_.__value_.__s + 23) = v31;
      p_buf = &buf;
      if (!v31)
      {
LABEL_90:
        p_buf->__r_.__value_.__s.__data_[v32] = 0;
        if (v4[23] < 0)
          operator delete(*(void **)v4);
        *(std::string *)v4 = buf;
        if (!prop::bbtrace::set(v4, (const char *)a3))
          return 0;
LABEL_35:
        v21 = *(__CFDictionary **)(a1 + 392);
        if (v4[23] < 0)
          std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
        else
          buf = *(std::string *)v4;
        if (*((char *)a3 + 23) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
        else
          __p = *(std::string *)a3;
        value = 0;
        ctu::cf::convert_copy();
        v22 = value;
        v38 = value;
        value = 0;
        ctu::cf::convert_copy();
        v23 = value;
        v37 = value;
        if (v22)
          v24 = value == 0;
        else
          v24 = 1;
        v9 = !v24;
        if (v24)
        {
          if (!value)
            goto LABEL_51;
        }
        else
        {
          CFDictionarySetValue(v21, v22, value);
        }
        CFRelease(v23);
LABEL_51:
        if (v22)
          CFRelease(v22);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            return v9;
        }
        else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          return v9;
        }
        operator delete(buf.__r_.__value_.__l.__data_);
        return v9;
      }
    }
    memmove(p_buf, v30, v32);
    goto LABEL_90;
  }
  v8 = *(NSObject **)(a1 + 40);
  v9 = 0;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    if (v6 < 0)
      v4 = *(char **)v4;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
    _os_log_impl(&dword_1A343C000, v8, OS_LOG_TYPE_DEFAULT, "#I Failed to get matched DMC file key: %s", (uint8_t *)&buf, 0xCu);
    return 0;
  }
  return v9;
}

void sub_1A3474818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t DIAGTrace::ratifyDMCFile_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  char *v8;
  size_t v9;
  size_t v10;
  __int128 *p_dst;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  int v16;
  void *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  _BOOL4 v21;
  uint64_t updated;
  char *v23;
  size_t v24;
  size_t v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  int v30;
  void *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  _BOOL4 v35;
  char *v36;
  size_t v37;
  size_t v38;
  __int128 *v39;
  char *v40;
  size_t v41;
  size_t v42;
  __int128 *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  int v47;
  void *v48;
  const char *v49;
  int v50;
  char *v51;
  size_t v52;
  size_t v53;
  __int128 *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  int v58;
  void *v59;
  const char *v60;
  config::hw *v61;
  int v62;
  int v63;
  const char *v64;
  size_t v65;
  char *v66;
  char *v67;
  size_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  size_t v72;
  __int128 *v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  int v77;
  void *v78;
  const char *v79;
  int v80;
  char *v81;
  size_t v82;
  size_t v83;
  __int128 *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  size_t v88;
  size_t v89;
  __int128 *v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  int v94;
  void *v95;
  const char *v96;
  int v97;
  char *v98;
  size_t v99;
  size_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  size_t v105;
  size_t v106;
  __int128 *v107;
  uint64_t v108;
  uint64_t v109;
  const char *v111;
  char v112[23];
  char v113;
  char v114[8];
  size_t v115;
  unint64_t v116;
  void *__p[2];
  char v118;
  void *v119[2];
  char v120;
  std::string v121;
  __int128 __dst;
  int64_t v123;

  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (!v3)
    return 0;
  v5 = *(unsigned __int8 *)(a3 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a3 + 8);
  if (!v5)
    return 0;
  v8 = diag::config::kThroughputDMCFile[0];
  v9 = strlen(diag::config::kThroughputDMCFile[0]);
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_201;
  v10 = v9;
  if (v9 >= 0x17)
  {
    v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v13 = v9 | 7;
    v14 = v13 + 1;
    p_dst = (__int128 *)operator new(v13 + 1);
    *((_QWORD *)&__dst + 1) = v10;
    v123 = v14 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_15;
  }
  HIBYTE(v123) = v9;
  p_dst = &__dst;
  if (v9)
LABEL_15:
    memmove(p_dst, v8, v10);
  *((_BYTE *)p_dst + v10) = 0;
  if (*(char *)(a1 + 207) >= 0)
    v15 = (const char *)(a1 + 184);
  else
    v15 = *(const char **)(a1 + 184);
  v16 = SHIBYTE(v123);
  v17 = (void *)__dst;
  if (v123 >= 0)
    v18 = (const char *)&__dst;
  else
    v18 = (const char *)__dst;
  if (!strcasecmp(v15, v18)
    || (*(char *)(a1 + 231) >= 0 ? (v19 = (const char *)(a1 + 208)) : (v19 = *(const char **)(a1 + 208)),
        !strcasecmp(v19, v18)))
  {
    v21 = 1;
    if (v16 < 0)
      goto LABEL_35;
  }
  else
  {
    if (*(char *)(a1 + 255) >= 0)
      v20 = (const char *)(a1 + 232);
    else
      v20 = *(const char **)(a1 + 232);
    v21 = strcasecmp(v20, v18) == 0;
    if (v16 < 0)
    {
LABEL_35:
      operator delete(v17);
      if (*(char *)(a2 + 23) < 0)
        goto LABEL_36;
LABEL_34:
      v121 = *(std::string *)a2;
      goto LABEL_37;
    }
  }
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    goto LABEL_34;
LABEL_36:
  std::string::__init_copy_ctor_external(&v121, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
LABEL_37:
  updated = DIAGTrace::updateDMCSetting_sync(a1, (char *)&v121, (__int128 *)a3);
  v12 = updated;
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v121.__r_.__value_.__l.__data_);
    if (!(_DWORD)v12)
      return v12;
  }
  else if (!(_DWORD)updated)
  {
    return v12;
  }
  v23 = diag::config::kThroughputDMCFile[0];
  v24 = strlen(diag::config::kThroughputDMCFile[0]);
  if (v24 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_201;
  v25 = v24;
  if (v24 >= 0x17)
  {
    v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v27 = v24 | 7;
    v28 = v27 + 1;
    v26 = (__int128 *)operator new(v27 + 1);
    *((_QWORD *)&__dst + 1) = v25;
    v123 = v28 | 0x8000000000000000;
    *(_QWORD *)&__dst = v26;
    goto LABEL_48;
  }
  HIBYTE(v123) = v24;
  v26 = &__dst;
  if (v24)
LABEL_48:
    memmove(v26, v23, v25);
  *((_BYTE *)v26 + v25) = 0;
  if (*(char *)(a1 + 207) >= 0)
    v29 = (const char *)(a1 + 184);
  else
    v29 = *(const char **)(a1 + 184);
  v30 = SHIBYTE(v123);
  v31 = (void *)__dst;
  if (v123 >= 0)
    v32 = (const char *)&__dst;
  else
    v32 = (const char *)__dst;
  if (!strcasecmp(v29, v32)
    || (*(char *)(a1 + 231) >= 0 ? (v33 = (const char *)(a1 + 208)) : (v33 = *(const char **)(a1 + 208)),
        !strcasecmp(v33, v32)))
  {
    v35 = 1;
    if (v30 < 0)
      goto LABEL_71;
LABEL_66:
    if (!v35)
      goto LABEL_72;
    goto LABEL_67;
  }
  if (*(char *)(a1 + 255) >= 0)
    v34 = (const char *)(a1 + 232);
  else
    v34 = *(const char **)(a1 + 232);
  v35 = strcasecmp(v34, v32) == 0;
  if ((v30 & 0x80000000) == 0)
    goto LABEL_66;
LABEL_71:
  operator delete(v31);
  if (!v35)
  {
LABEL_72:
    v40 = diag::config::kNoneDMCFile;
    v41 = strlen(diag::config::kNoneDMCFile);
    if (v41 <= 0x7FFFFFFFFFFFFFF7)
    {
      v42 = v41;
      if (v41 >= 0x17)
      {
        v55 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v41 | 7) != 0x17)
          v55 = v41 | 7;
        v56 = v55 + 1;
        v43 = (__int128 *)operator new(v55 + 1);
        *((_QWORD *)&__dst + 1) = v42;
        v123 = v56 | 0x8000000000000000;
        *(_QWORD *)&__dst = v43;
      }
      else
      {
        HIBYTE(v123) = v41;
        v43 = &__dst;
        if (!v41)
        {
LABEL_97:
          *((_BYTE *)v43 + v42) = 0;
          if (*(char *)(a1 + 207) >= 0)
            v57 = (const char *)(a1 + 184);
          else
            v57 = *(const char **)(a1 + 184);
          v58 = SHIBYTE(v123);
          v59 = (void *)__dst;
          if (v123 >= 0)
            v60 = (const char *)&__dst;
          else
            v60 = (const char *)__dst;
          v61 = (config::hw *)strcasecmp(v57, v60);
          if ((_DWORD)v61)
          {
            v62 = v21;
            if ((v58 & 0x80000000) == 0)
              goto LABEL_105;
LABEL_123:
            operator delete(v59);
            if (v62)
            {
LABEL_106:
              v113 = 4;
              strcpy(v112, "File");
              v63 = config::hw::watch(v61);
              if (v63)
                v64 = "Lite";
              else
                v64 = "Default";
              if (v63)
                v65 = 4;
              else
                v65 = 7;
              HIBYTE(v123) = v65;
              memcpy(&__dst, v64, v65);
              *(_BYTE *)((unint64_t)&__dst | v65) = 0;
              v12 = DIAGTrace::updateDMCSetting_sync(a1, v112, &__dst);
              if (SHIBYTE(v123) < 0)
                operator delete((void *)__dst);
              if (v113 < 0)
              {
                v66 = v112;
LABEL_197:
                operator delete(*(void **)v66);
                return v12;
              }
              return v12;
            }
            return 1;
          }
          if (*(char *)(a1 + 231) >= 0)
            v69 = (const char *)(a1 + 208);
          else
            v69 = *(const char **)(a1 + 208);
          v61 = (config::hw *)strcasecmp(v69, v60);
          if ((_DWORD)v61)
          {
            v62 = v21;
            if (v58 < 0)
              goto LABEL_123;
          }
          else
          {
            if (*(char *)(a1 + 255) >= 0)
              v111 = (const char *)(a1 + 232);
            else
              v111 = *(const char **)(a1 + 232);
            v61 = (config::hw *)strcasecmp(v111, v60);
            v62 = v21 || (_DWORD)v61 == 0;
            if (v58 < 0)
              goto LABEL_123;
          }
LABEL_105:
          if (v62)
            goto LABEL_106;
          return 1;
        }
      }
      memmove(v43, v40, v42);
      goto LABEL_97;
    }
LABEL_201:
    std::string::__throw_length_error[abi:ne180100]();
  }
LABEL_67:
  v36 = diag::config::kThroughputDMCFile[0];
  v37 = strlen(diag::config::kThroughputDMCFile[0]);
  if (v37 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_201;
  v38 = v37;
  if (v37 >= 0x17)
  {
    v44 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17)
      v44 = v37 | 7;
    v45 = v44 + 1;
    v39 = (__int128 *)operator new(v44 + 1);
    *((_QWORD *)&__dst + 1) = v38;
    v123 = v45 | 0x8000000000000000;
    *(_QWORD *)&__dst = v39;
    goto LABEL_79;
  }
  HIBYTE(v123) = v37;
  v39 = &__dst;
  if (v37)
LABEL_79:
    memmove(v39, v36, v38);
  *((_BYTE *)v39 + v38) = 0;
  if (*(char *)(a1 + 207) >= 0)
    v46 = (const char *)(a1 + 184);
  else
    v46 = *(const char **)(a1 + 184);
  v47 = SHIBYTE(v123);
  v48 = (void *)__dst;
  if (v123 >= 0)
    v49 = (const char *)&__dst;
  else
    v49 = (const char *)__dst;
  v50 = strcasecmp(v46, v49);
  if (v47 < 0)
    operator delete(v48);
  if (!v50)
  {
    v12 = 1;
    v67 = diag::config::kThroughputDMCFile[0];
    v68 = strlen(diag::config::kThroughputDMCFile[0]);
    if (v68 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_201;
    goto LABEL_132;
  }
  v120 = 4;
  strcpy((char *)v119, "File");
  v51 = diag::config::kNoneDMCFile;
  v52 = strlen(diag::config::kNoneDMCFile);
  if (v52 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v53 = v52;
  if (v52 >= 0x17)
  {
    v70 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v52 | 7) != 0x17)
      v70 = v52 | 7;
    v71 = v70 + 1;
    v54 = (__int128 *)operator new(v70 + 1);
    *((_QWORD *)&__dst + 1) = v53;
    v123 = v71 | 0x8000000000000000;
    *(_QWORD *)&__dst = v54;
  }
  else
  {
    HIBYTE(v123) = v52;
    v54 = &__dst;
    if (!v52)
      goto LABEL_129;
  }
  memmove(v54, v51, v53);
LABEL_129:
  *((_BYTE *)v54 + v53) = 0;
  v12 = DIAGTrace::updateDMCSetting_sync(a1, (char *)v119, &__dst);
  if (SHIBYTE(v123) < 0)
  {
    operator delete((void *)__dst);
    if ((v120 & 0x80000000) == 0)
    {
LABEL_131:
      v67 = diag::config::kThroughputDMCFile[0];
      v68 = strlen(diag::config::kThroughputDMCFile[0]);
      if (v68 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_201;
      goto LABEL_132;
    }
  }
  else if ((v120 & 0x80000000) == 0)
  {
    goto LABEL_131;
  }
  operator delete(v119[0]);
  v67 = diag::config::kThroughputDMCFile[0];
  v68 = strlen(diag::config::kThroughputDMCFile[0]);
  if (v68 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_201;
LABEL_132:
  v72 = v68;
  if (v68 >= 0x17)
  {
    v74 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v68 | 7) != 0x17)
      v74 = v68 | 7;
    v75 = v74 + 1;
    v73 = (__int128 *)operator new(v74 + 1);
    *((_QWORD *)&__dst + 1) = v72;
    v123 = v75 | 0x8000000000000000;
    *(_QWORD *)&__dst = v73;
    goto LABEL_138;
  }
  HIBYTE(v123) = v68;
  v73 = &__dst;
  if (v68)
LABEL_138:
    memmove(v73, v67, v72);
  *((_BYTE *)v73 + v72) = 0;
  if (*(char *)(a1 + 231) >= 0)
    v76 = (const char *)(a1 + 208);
  else
    v76 = *(const char **)(a1 + 208);
  v77 = SHIBYTE(v123);
  v78 = (void *)__dst;
  if (v123 >= 0)
    v79 = (const char *)&__dst;
  else
    v79 = (const char *)__dst;
  v80 = strcasecmp(v76, v79);
  if (v77 < 0)
    operator delete(v78);
  if (v80)
  {
    v118 = 14;
    strcpy((char *)__p, "File_Secondary");
    v81 = diag::config::kNoneDMCFile;
    v82 = strlen(diag::config::kNoneDMCFile);
    if (v82 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v83 = v82;
    if (v82 >= 0x17)
    {
      v85 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v82 | 7) != 0x17)
        v85 = v82 | 7;
      v86 = v85 + 1;
      v84 = (__int128 *)operator new(v85 + 1);
      *((_QWORD *)&__dst + 1) = v83;
      v123 = v86 | 0x8000000000000000;
      *(_QWORD *)&__dst = v84;
    }
    else
    {
      HIBYTE(v123) = v82;
      v84 = &__dst;
      if (!v82)
        goto LABEL_156;
    }
    memmove(v84, v81, v83);
LABEL_156:
    *((_BYTE *)v84 + v83) = 0;
    v12 = DIAGTrace::updateDMCSetting_sync(a1, (char *)__p, &__dst);
    if (SHIBYTE(v123) < 0)
      operator delete((void *)__dst);
    if (v118 < 0)
      operator delete(__p[0]);
  }
  v87 = diag::config::kThroughputDMCFile[0];
  v88 = strlen(diag::config::kThroughputDMCFile[0]);
  if (v88 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_201;
  v89 = v88;
  if (v88 >= 0x17)
  {
    v91 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17)
      v91 = v88 | 7;
    v92 = v91 + 1;
    v90 = (__int128 *)operator new(v91 + 1);
    *((_QWORD *)&__dst + 1) = v89;
    v123 = v92 | 0x8000000000000000;
    *(_QWORD *)&__dst = v90;
    goto LABEL_167;
  }
  HIBYTE(v123) = v88;
  v90 = &__dst;
  if (v88)
LABEL_167:
    memmove(v90, v87, v89);
  *((_BYTE *)v90 + v89) = 0;
  if (*(char *)(a1 + 255) >= 0)
    v93 = (const char *)(a1 + 232);
  else
    v93 = *(const char **)(a1 + 232);
  v94 = SHIBYTE(v123);
  v95 = (void *)__dst;
  if (v123 >= 0)
    v96 = (const char *)&__dst;
  else
    v96 = (const char *)__dst;
  v97 = strcasecmp(v93, v96);
  if (v94 < 0)
    operator delete(v95);
  if (!v97)
    return v12;
  v98 = diag::config::kExtraDMCFileKey[0];
  v99 = strlen(diag::config::kExtraDMCFileKey[0]);
  if (v99 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v100 = v99;
  if (v99 >= 0x17)
  {
    v102 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v99 | 7) != 0x17)
      v102 = v99 | 7;
    v103 = v102 + 1;
    v101 = operator new(v102 + 1);
    v115 = v100;
    v116 = v103 | 0x8000000000000000;
    *(_QWORD *)v114 = v101;
    goto LABEL_184;
  }
  HIBYTE(v116) = v99;
  v101 = v114;
  if (v99)
LABEL_184:
    memmove(v101, v98, v100);
  *((_BYTE *)v101 + v100) = 0;
  v104 = diag::config::kNoneDMCFile;
  v105 = strlen(diag::config::kNoneDMCFile);
  if (v105 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v106 = v105;
  if (v105 >= 0x17)
  {
    v108 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v105 | 7) != 0x17)
      v108 = v105 | 7;
    v109 = v108 + 1;
    v107 = (__int128 *)operator new(v108 + 1);
    *((_QWORD *)&__dst + 1) = v106;
    v123 = v109 | 0x8000000000000000;
    *(_QWORD *)&__dst = v107;
    goto LABEL_192;
  }
  HIBYTE(v123) = v105;
  v107 = &__dst;
  if (v105)
LABEL_192:
    memmove(v107, v104, v106);
  *((_BYTE *)v107 + v106) = 0;
  v12 = DIAGTrace::updateDMCSetting_sync(a1, v114, &__dst);
  if (SHIBYTE(v123) < 0)
    operator delete((void *)__dst);
  if (SHIBYTE(v116) < 0)
  {
    v66 = v114;
    goto LABEL_197;
  }
  return v12;
}

void sub_1A3475294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (*(char *)(v38 - 81) < 0)
    operator delete(*(void **)(v38 - 104));
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t DIAGTrace::handleTputDMCforADPL_sync(config::hw *a1, int *a2)
{
  int v4;
  const char *v5;
  size_t v6;
  int updated;
  char *v8;
  size_t v9;
  std::string::size_type v10;
  std::string *p_dst;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  size_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  size_t v22;
  std::string::size_type v23;
  std::string *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  std::string v30;
  void *v31[2];
  char v32;
  int v33;
  void *v34[2];
  unint64_t v35;
  void *v36[2];
  char v37;
  void *__p[2];
  char v39;
  std::string __dst;

  v39 = 4;
  strcpy((char *)__p, "File");
  v4 = config::hw::watch(a1);
  if (v4)
    v5 = "Lite";
  else
    v5 = "Default";
  if (v4)
    v6 = 4;
  else
    v6 = 7;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v6;
  memcpy(&__dst, v5, v6);
  *(_BYTE *)((unint64_t)&__dst | v6) = 0;
  updated = DIAGTrace::updateDMCSetting_sync((uint64_t)a1, (char *)__p, (__int128 *)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((v39 & 0x80000000) == 0)
    {
LABEL_9:
      if (!updated)
        return 0;
      goto LABEL_13;
    }
  }
  else if ((v39 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p[0]);
  if (!updated)
    return 0;
LABEL_13:
  v37 = 14;
  strcpy((char *)v36, "File_Secondary");
  v8 = diag::config::kNoneDMCFile;
  v9 = strlen(diag::config::kNoneDMCFile);
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = v10;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_20;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v9;
  p_dst = &__dst;
  if (v9)
LABEL_20:
    memmove(p_dst, v8, v10);
  p_dst->__r_.__value_.__s.__data_[v10] = 0;
  v14 = DIAGTrace::updateDMCSetting_sync((uint64_t)a1, (char *)v36, (__int128 *)&__dst);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v37 & 0x80000000) == 0)
      goto LABEL_23;
LABEL_26:
    operator delete(v36[0]);
    if ((v14 & 1) == 0)
      return 0;
    goto LABEL_27;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (v37 < 0)
    goto LABEL_26;
LABEL_23:
  if (!v14)
    return 0;
LABEL_27:
  v15 = diag::config::kExtraDMCFileKey[0];
  v16 = strlen(diag::config::kExtraDMCFileKey[0]);
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v17 = (void *)v16;
  if (v16 >= 0x17)
  {
    v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v19 = v16 | 7;
    v20 = v19 + 1;
    v18 = operator new(v19 + 1);
    v34[1] = v17;
    v35 = v20 | 0x8000000000000000;
    v34[0] = v18;
    goto LABEL_34;
  }
  HIBYTE(v35) = v16;
  v18 = v34;
  if (v16)
LABEL_34:
    memmove(v18, v15, (size_t)v17);
  *((_BYTE *)v17 + (_QWORD)v18) = 0;
  v21 = diag::config::kNoneDMCFile;
  v22 = strlen(diag::config::kNoneDMCFile);
  if (v22 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v23 = v22;
  if (v22 >= 0x17)
  {
    v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v25 = v22 | 7;
    v26 = v25 + 1;
    v24 = (std::string *)operator new(v25 + 1);
    __dst.__r_.__value_.__l.__size_ = v23;
    __dst.__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
    goto LABEL_42;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v22;
  v24 = &__dst;
  if (v22)
LABEL_42:
    memmove(v24, v21, v23);
  v24->__r_.__value_.__s.__data_[v23] = 0;
  v27 = DIAGTrace::updateDMCSetting_sync((uint64_t)a1, (char *)v34, (__int128 *)&__dst);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v35) & 0x80000000) == 0)
      goto LABEL_45;
LABEL_48:
    operator delete(v34[0]);
    v33 = 5;
    if ((v27 & 1) == 0)
      return 0;
    goto LABEL_49;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35) < 0)
    goto LABEL_48;
LABEL_45:
  v33 = 5;
  if (!v27)
    return 0;
LABEL_49:
  v32 = 12;
  strcpy((char *)v31, "Data_Logging");
  std::to_string(&__dst, 0);
  v30 = __dst;
  v28 = DIAGTrace::setProperty_sync(a1, v31, &v30, &v33);
  if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v32 & 0x80000000) == 0)
      goto LABEL_51;
LABEL_54:
    operator delete(v31[0]);
    if (v28)
      goto LABEL_52;
    return 0;
  }
  operator delete(v30.__r_.__value_.__l.__data_);
  if (v32 < 0)
    goto LABEL_54;
LABEL_51:
  if (v28)
  {
LABEL_52:
    *a2 = v33;
    return 1;
  }
  return 0;
}

void sub_1A3475744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t DIAGTrace::setProperty_sync(uint64_t a1, char *a2, uint64_t a3, int *a4)
{
  const char *v8;
  char *v9;
  size_t v10;
  std::string::size_type v11;
  std::string *p_dst;
  int v13;
  uint64_t v14;
  const __CFAllocator *v15;
  _BOOL4 v16;
  int v17;
  int v18;
  const __CFAllocator *v19;
  _BOOL4 v20;
  int v21;
  int v22;
  const __CFAllocator *v23;
  _BOOL4 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  int v29;
  void *v30;
  std::string *v31;
  int v32;
  int v33;
  const char *v34;
  _BOOL4 v35;
  NSObject *v36;
  const __CFAllocator *v37;
  int v38;
  unsigned int data;
  NSObject *v40;
  uint64_t v41;
  const char *v42;
  _BOOL4 v43;
  _BOOL4 v44;
  const __CFAllocator *v45;
  int v46;
  NSObject *v47;
  const char *v48;
  _BOOL4 v49;
  _BOOL4 v50;
  const __CFAllocator *v51;
  unsigned int v52;
  int v53;
  NSObject *v54;
  const char *v55;
  _BOOL4 v56;
  _BOOL4 v57;
  std::string *v58;
  _BOOL4 v59;
  int v60;
  int v61;
  NSObject *v62;
  uint64_t v63;
  const char *v64;
  int v65;
  BOOL v66;
  _BOOL4 v67;
  const __CFAllocator *v68;
  int v69;
  uint64_t v70;
  _BOOL4 v71;
  const __CFAllocator *v72;
  int v73;
  _BOOL4 v74;
  capabilities::diag *v75;
  _BOOL4 v76;
  _BOOL4 v78;
  const __CFAllocator *v79;
  int v80;
  const char *v81;
  NSObject *v82;
  const __CFAllocator *v83;
  __CFDictionary *v84;
  uint32_t v85;
  _BOOL4 v86;
  const __CFAllocator *v87;
  unsigned int v88;
  _BOOL4 v89;
  const __CFAllocator *v90;
  unsigned int v91;
  int v92;
  _BOOL4 v94;
  _BOOL4 v95;
  _BOOL4 v96;
  _BOOL4 v97;
  _BOOL4 v98;
  const __CFAllocator *v99;
  unsigned int v100;
  std::string::size_type v101;
  std::string::size_type v102;
  BOOL v103;
  std::string __p;
  void *v105[2];
  char v106;
  std::string v107;
  std::string __dst;
  int v109;
  char v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  *a4 = 5;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, "Enabled");
  if (a2[23] >= 0)
    v8 = a2;
  else
    v8 = *(const char **)a2;
  if (!strcasecmp(v8, (const char *)&__dst))
  {
    v103 = 0;
    v13 = prop::bbtrace::set(a2, (const char *)a3);
    v14 = 0;
    if (!v13)
      return v14;
    memset(&__p, 0, sizeof(__p));
    v106 = 7;
    strcpy((char *)v105, "BBTrace");
    memset(&__dst, 0, sizeof(__dst));
    v16 = defaults::get((char *)v105, a2, &__dst);
    if (v16)
    {
      prop::file::get<std::string>((const void **)v105, (uint64_t)a2, (uint64_t)&__dst, &v107);
      __p = v107;
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((v106 & 0x80000000) == 0)
      {
LABEL_16:
        if (v16)
          goto LABEL_17;
        goto LABEL_69;
      }
    }
    else if ((v106 & 0x80000000) == 0)
    {
      goto LABEL_16;
    }
    operator delete(v105[0]);
    if (v16)
    {
LABEL_17:
      v17 = util::convert<BOOL>(&__p, &v103, 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_18;
      goto LABEL_70;
    }
LABEL_69:
    v17 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_18:
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v17)
        return 0;
      goto LABEL_71;
    }
LABEL_70:
    if (!v17)
      return 0;
LABEL_71:
    if (*(_BYTE *)(a1 + 325))
      return 1;
    v38 = v103;
    if (!ctu::cf::update<char const*,BOOL>(*(__CFDictionary **)(a1 + 392), (const __CFString **)"Enabled", v103, *MEMORY[0x1E0C9AE00], v15))return 1;
LABEL_73:
    if (*(unsigned __int8 *)(a1 + 324) != v38)
    {
      *a4 = v38 == 0;
      *(_BYTE *)(a1 + 324) = v38;
    }
    return 1;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&__dst, "High_Tput");
  if (!strcasecmp(v8, (const char *)&__dst))
  {
    v103 = 0;
    v18 = prop::bbtrace::set(a2, (const char *)a3);
    v14 = 0;
    if (!v18)
      return v14;
    memset(&__p, 0, sizeof(__p));
    v106 = 7;
    strcpy((char *)v105, "BBTrace");
    memset(&__dst, 0, sizeof(__dst));
    v20 = defaults::get((char *)v105, a2, &__dst);
    if (v20)
    {
      prop::file::get<std::string>((const void **)v105, (uint64_t)a2, (uint64_t)&__dst, &v107);
      __p = v107;
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((v106 & 0x80000000) == 0)
      {
LABEL_25:
        if (v20)
          goto LABEL_26;
        goto LABEL_83;
      }
    }
    else if ((v106 & 0x80000000) == 0)
    {
      goto LABEL_25;
    }
    operator delete(v105[0]);
    if (v20)
    {
LABEL_26:
      v21 = util::convert<BOOL>(&__p, &v103, 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_84;
      goto LABEL_85;
    }
LABEL_83:
    v21 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_84:
      operator delete(__p.__r_.__value_.__l.__data_);
LABEL_85:
    if (!v21)
      return 0;
    v43 = v103;
    if (*(_BYTE *)(a1 + 176) == v103)
      return 1;
    *(_BYTE *)(a1 + 176) = v103;
    ctu::cf::update<char const*,BOOL>(*(__CFDictionary **)(a1 + 392), (const __CFString **)"High_Tput", v43, *MEMORY[0x1E0C9AE00], v19);
LABEL_109:
    if (*(_BYTE *)(a1 + 324))
      *a4 = 4;
    return 1;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&__dst, "Data_Logging");
  if (!strcasecmp(v8, (const char *)&__dst))
  {
    v103 = 0;
    v22 = prop::bbtrace::set(a2, (const char *)a3);
    v14 = 0;
    if (!v22)
      return v14;
    memset(&__p, 0, sizeof(__p));
    v106 = 7;
    strcpy((char *)v105, "BBTrace");
    memset(&__dst, 0, sizeof(__dst));
    v24 = defaults::get((char *)v105, a2, &__dst);
    if (v24)
    {
      prop::file::get<std::string>((const void **)v105, (uint64_t)a2, (uint64_t)&__dst, &v107);
      __p = v107;
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((v106 & 0x80000000) == 0)
      {
LABEL_33:
        if (v24)
          goto LABEL_34;
        goto LABEL_104;
      }
    }
    else if ((v106 & 0x80000000) == 0)
    {
      goto LABEL_33;
    }
    operator delete(v105[0]);
    if (v24)
    {
LABEL_34:
      v25 = util::convert<BOOL>(&__p, &v103, 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_105;
      goto LABEL_106;
    }
LABEL_104:
    v25 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_105:
      operator delete(__p.__r_.__value_.__l.__data_);
LABEL_106:
    if (!v25)
      return 0;
    v49 = v103;
    if (*(_BYTE *)(a1 + 177) == v103)
      return 1;
    *(_BYTE *)(a1 + 177) = v103;
    ctu::cf::update<char const*,BOOL>(*(__CFDictionary **)(a1 + 392), (const __CFString **)"Data_Logging", v49, *MEMORY[0x1E0C9AE00], v23);
    goto LABEL_109;
  }
  v9 = diag::config::kTempEnabledKey[0];
  v10 = strlen(diag::config::kTempEnabledKey[0]);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v26 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v26 = v10 | 7;
    v27 = v26 + 1;
    p_dst = (std::string *)operator new(v26 + 1);
    __dst.__r_.__value_.__l.__size_ = v11;
    __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_39;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v10;
  p_dst = &__dst;
  if (v10)
LABEL_39:
    memmove(p_dst, v9, v11);
  p_dst->__r_.__value_.__s.__data_[v11] = 0;
  if (a2[23] >= 0)
    v28 = a2;
  else
    v28 = *(const char **)a2;
  v29 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  v30 = (void *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = &__dst;
  else
    v31 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  v32 = strcasecmp(v28, (const char *)v31);
  v33 = v32;
  if ((v29 & 0x80000000) == 0)
  {
    if (v32)
      goto LABEL_48;
    goto LABEL_63;
  }
  operator delete(v30);
  if (!v33)
  {
LABEL_63:
    __dst.__r_.__value_.__s.__data_[0] = -86;
    if (!util::convert<BOOL>((const std::string *)a3, (BOOL *)&__dst, 0))
      return 0;
    if (*(_BYTE *)(a1 + 325))
      return 0;
    v38 = __dst.__r_.__value_.__s.__data_[0];
    if (!ctu::cf::update<char const*,BOOL>(*(__CFDictionary **)(a1 + 392), (const __CFString **)"Enabled", __dst.__r_.__value_.__s.__data_[0] != 0, *MEMORY[0x1E0C9AE00], v37))return 0;
    goto LABEL_73;
  }
LABEL_48:
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&__dst, "Mode");
  if (a2[23] >= 0)
    v34 = a2;
  else
    v34 = *(const char **)a2;
  if (!strcasecmp(v34, (const char *)&__dst))
  {
    LODWORD(__dst.__r_.__value_.__l.__data_) = -1431655766;
    if ((util::convert<int>((const std::string *)a3, &__dst, 0) & 1) != 0)
    {
      data = __dst.__r_.__value_.__l.__data_;
      if (LODWORD(__dst.__r_.__value_.__l.__data_) == 4)
      {
        if (*(_BYTE *)(a1 + 324))
        {
          v40 = *(NSObject **)(a1 + 40);
          if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
            return 0;
          v41 = *(int *)(a1 + 160);
          if (v41 > 4)
            v42 = "Unknown";
          else
            v42 = off_1E4A07BE0[v41];
          LODWORD(__dst.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v42;
          WORD2(__dst.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"Passive With Logging Configuration";
          v81 = "Mode transitioning %s -> %s, enabled must be set to false";
          v82 = v40;
          goto LABEL_229;
        }
        v60 = *(_DWORD *)(a1 + 164);
        if ((v60 - 1) < 2)
          goto LABEL_135;
        v62 = *(NSObject **)(a1 + 40);
        if (!os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
          return 0;
        v63 = *(int *)(a1 + 160);
        if (v63 > 4)
          v64 = "Unknown";
        else
          v64 = off_1E4A07BE0[v63];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v64;
        WORD2(__dst.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"Passive With Logging Configuration";
        HIWORD(__dst.__r_.__value_.__r.__words[2]) = 1024;
        v109 = v60;
        v81 = "Mode transitioning %s -> %s, trace channel owner (%d) not set properly";
        v82 = v62;
        goto LABEL_257;
      }
    }
    else
    {
      data = -1431655766;
    }
    if (*(_DWORD *)(a1 + 160) != 4)
      goto LABEL_135;
    if (*(_BYTE *)(a1 + 324))
    {
      v47 = *(NSObject **)(a1 + 40);
      if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        return 0;
      if (data > 3)
        v48 = "Unknown";
      else
        v48 = off_1E4A07BC0[data];
      LODWORD(__dst.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Passive With Logging Configuration";
      WORD2(__dst.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v48;
      v81 = "Mode transitioning %s -> %s, enabled must be set to false";
LABEL_220:
      v82 = v47;
LABEL_229:
      v85 = 22;
LABEL_258:
      _os_log_error_impl(&dword_1A343C000, v82, OS_LOG_TYPE_ERROR, v81, (uint8_t *)&__dst, v85);
      return 0;
    }
    v53 = *(_DWORD *)(a1 + 164);
    if ((v53 - 1) > 1)
    {
LABEL_135:
      if (!prop::bbtrace::set(a2, (const char *)a3))
        return 0;
      LODWORD(v105[0]) = -1431655766;
      LODWORD(__p.__r_.__value_.__l.__data_) = 5;
      if (!prop::bbtrace::get<diag::config::Mode>(a2, v105))
        return 0;
      std::string::basic_string[abi:ne180100]<0>(&__dst, diag::config::kTempEnabledKey[0]);
      std::string::basic_string[abi:ne180100]<0>(&v107, "false");
      v61 = DIAGTrace::setProperty_sync(a1, &__dst, &v107, &__p);
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v107.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_139:
          if (!v61)
            return 0;
          goto LABEL_150;
        }
      }
      else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_139;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (!v61)
        return 0;
LABEL_150:
      v65 = (int)v105[0];
      if (*(_DWORD *)(a1 + 160) != LODWORD(v105[0]))
      {
        *(_DWORD *)(a1 + 160) = v105[0];
        *a4 = (int)__p.__r_.__value_.__l.__data_;
        v14 = 1;
        if ((v65 | 4) != 4)
          *(_BYTE *)(a1 + 325) = 1;
        return v14;
      }
      return 1;
    }
    v54 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      return 0;
    if (data > 3)
      v55 = "Unknown";
    else
      v55 = off_1E4A07BC0[data];
    LODWORD(__dst.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Passive With Logging Configuration";
    WORD2(__dst.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v55;
    HIWORD(__dst.__r_.__value_.__r.__words[2]) = 1024;
    v109 = v53;
    v81 = "Mode transitioning %s -> %s and trace transport owner can't be %d";
    v82 = v54;
LABEL_257:
    v85 = 28;
    goto LABEL_258;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 14;
  strcpy((char *)&__dst, "TraceOwnership");
  if (!strcasecmp(v34, (const char *)&__dst))
  {
    std::string::basic_string[abi:ne180100]<0>(&__dst, "TraceOwnership");
    v14 = DIAGTrace::setPropTraceOwnership_sync(a1, (char *)&__dst, (const char *)a3);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    return v14;
  }
  std::string::basic_string[abi:ne180100]<0>(&__dst, diag::config::kTempModeKey[0]);
  v35 = util::equal_nocase(a2, (const char *)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (!v35)
  {
    std::string::basic_string[abi:ne180100]<0>(&__dst, "History");
    v44 = util::equal_nocase(a2, (const char *)&__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (v44)
    {
      if (!prop::bbtrace::set(a2, (const char *)a3))
        return 0;
      LODWORD(__dst.__r_.__value_.__l.__data_) = -1431655766;
      v14 = prop::bbtrace::get<int>(a2, &__dst);
      v46 = (int)__dst.__r_.__value_.__l.__data_;
      if (*(_DWORD *)(a1 + 304) == LODWORD(__dst.__r_.__value_.__l.__data_))
        return v14;
      *(_DWORD *)(a1 + 304) = __dst.__r_.__value_.__l.__data_;
      ctu::cf::update<char const*,int>(*(__CFDictionary **)(a1 + 392), (const __CFString **)"History", v46, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], v45);
LABEL_118:
      *a4 = 3;
      return v14;
    }
    std::string::basic_string[abi:ne180100]<0>(&__dst, "MaxMemoryFileCount");
    v50 = util::equal_nocase(a2, (const char *)&__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (v50)
    {
      if (!prop::bbtrace::set(a2, (const char *)a3))
        return 0;
      LODWORD(__dst.__r_.__value_.__l.__data_) = -1431655766;
      v14 = prop::bbtrace::get<unsigned int>(a2, &__dst);
      v52 = __dst.__r_.__value_.__l.__data_;
      if (*(_DWORD *)(a1 + 308) == LODWORD(__dst.__r_.__value_.__l.__data_))
        return v14;
      *(_DWORD *)(a1 + 308) = __dst.__r_.__value_.__l.__data_;
      ctu::cf::update<char const*,unsigned int>(*(__CFDictionary **)(a1 + 392), (const __CFString **)"MaxMemoryFileCount", v52, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], v51);
      goto LABEL_118;
    }
    std::string::basic_string[abi:ne180100]<0>(&__dst, "File");
    if (util::equal_nocase(a2, (const char *)&__dst))
    {
      v56 = 1;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_125;
LABEL_156:
      if (!v56)
        goto LABEL_126;
      goto LABEL_157;
    }
    std::string::basic_string[abi:ne180100]<0>(&v107, "File_Secondary");
    if (util::equal_nocase(a2, (const char *)&v107))
    {
      v56 = 1;
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_143;
LABEL_155:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_156;
LABEL_125:
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (!v56)
      {
LABEL_126:
        std::string::basic_string[abi:ne180100]<0>(&__dst, "File_Sleep");
        v57 = util::equal_nocase(a2, (const char *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (v57)
        {
          v58 = (std::string *)(a1 + 256);
          if (!util::equal_nocase((const char *)(a1 + 256), (const char *)a3))
          {
            diag::getFileInfo(a3, (uint64_t)&__dst);
            if (v110)
            {
              v59 = 1;
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_132;
LABEL_223:
              if (!v59)
                goto LABEL_195;
              goto LABEL_224;
            }
            std::string::basic_string[abi:ne180100]<0>(&v107, diag::config::kNoneDMCFile);
            v59 = util::equal_nocase((const char *)a3, (const char *)&v107);
            if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v107.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_223;
            }
            else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_223;
            }
LABEL_132:
            operator delete(__dst.__r_.__value_.__l.__data_);
            if (!v59)
              goto LABEL_195;
LABEL_224:
            if (!prop::bbtrace::set(a2, (const char *)a3))
              return 0;
            v84 = *(__CFDictionary **)(a1 + 392);
            if (*(char *)(a3 + 23) < 0)
              std::string::__init_copy_ctor_external(&__dst, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
            else
              __dst = *(std::string *)a3;
            v92 = ctu::cf::update<char const*,std::string>(v84, (const __CFString **)"File_Sleep", (uint64_t)&__dst, *MEMORY[0x1E0C9AE00], v83);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            if (!v92)
              return 0;
            std::string::operator=(v58, (const std::string *)a3);
            *a4 = 2;
            return 1;
          }
          return 1;
        }
        std::string::basic_string[abi:ne180100]<0>(&__dst, diag::config::kEnabledDuringSleepKey[0]);
        v67 = util::equal_nocase(a2, (const char *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (v67)
        {
          if (!prop::bbtrace::set(a2, (const char *)a3))
            return 0;
          LODWORD(__dst.__r_.__value_.__l.__data_) = -1431655766;
          if (!prop::bbtrace::get<diag::config::DuringAPSleep>(a2, &__dst))
            return 0;
          v69 = (int)__dst.__r_.__value_.__l.__data_;
          if (*(_DWORD *)(a1 + 172) == LODWORD(__dst.__r_.__value_.__l.__data_))
            return 1;
          *(_DWORD *)(a1 + 172) = __dst.__r_.__value_.__l.__data_;
          v70 = ctu::cf::update<char const*,int>(*(__CFDictionary **)(a1 + 392), (const __CFString **)diag::config::kEnabledDuringSleepKey[0], v69, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], v68);
          goto LABEL_188;
        }
        std::string::basic_string[abi:ne180100]<0>(&__dst, diag::config::kBufferingOnAPAwake[0]);
        v71 = util::equal_nocase(a2, (const char *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (v71)
        {
          if (!prop::bbtrace::set(a2, (const char *)a3))
            return 0;
          __dst.__r_.__value_.__s.__data_[0] = -86;
          if (!prop::bbtrace::get<BOOL>(a2, (BOOL *)&__dst))
            return 0;
          v73 = __dst.__r_.__value_.__s.__data_[0];
          if (*(unsigned __int8 *)(a1 + 326) == __dst.__r_.__value_.__s.__data_[0])
            return 1;
          *(_BYTE *)(a1 + 326) = __dst.__r_.__value_.__s.__data_[0];
          v70 = ctu::cf::update<char const*,int>(*(__CFDictionary **)(a1 + 392), (const __CFString **)diag::config::kBufferingOnAPAwake[0], v73, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], v72);
LABEL_188:
          v14 = v70;
          *a4 = 2;
          return v14;
        }
        std::string::basic_string[abi:ne180100]<0>(&__dst, diag::config::kStallDetectionKey[0]);
        v78 = util::equal_nocase(a2, (const char *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (v78)
        {
          if (!prop::bbtrace::set(a2, (const char *)a3))
            return 0;
          __dst.__r_.__value_.__s.__data_[0] = -86;
          if (!prop::bbtrace::get<BOOL>(a2, (BOOL *)&__dst))
            return 0;
          v80 = __dst.__r_.__value_.__s.__data_[0];
          if (*(unsigned __int8 *)(a1 + 312) != __dst.__r_.__value_.__s.__data_[0])
          {
            *(_BYTE *)(a1 + 312) = __dst.__r_.__value_.__s.__data_[0];
            v14 = ctu::cf::update<char const*,int>(*(__CFDictionary **)(a1 + 392), (const __CFString **)diag::config::kStallDetectionKey[0], v80, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], v79);
            DIAGTrace::stallDetection_sync((const __CFDictionary **)a1, *(unsigned __int8 *)(a1 + 312));
            return v14;
          }
          return 1;
        }
        std::string::basic_string[abi:ne180100]<0>(&__dst, diag::config::kStallDetectionRetriesKey[0]);
        v86 = util::equal_nocase(a2, (const char *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (v86)
        {
          if (!prop::bbtrace::set(a2, (const char *)a3))
            return 0;
          LODWORD(__dst.__r_.__value_.__l.__data_) = -1431655766;
          if (!prop::bbtrace::get<unsigned int>(a2, &__dst))
            return 0;
          v88 = __dst.__r_.__value_.__l.__data_;
          if (*(_DWORD *)(a1 + 316) != LODWORD(__dst.__r_.__value_.__l.__data_))
          {
            *(_DWORD *)(a1 + 316) = __dst.__r_.__value_.__l.__data_;
            v14 = ctu::cf::update<char const*,unsigned int>(*(__CFDictionary **)(a1 + 392), (const __CFString **)diag::config::kStallDetectionRetriesKey[0], v88, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], v87);
            DIAGTrace::stallDetection_sync((const __CFDictionary **)a1, *(unsigned __int8 *)(a1 + 312));
            return v14;
          }
          return 1;
        }
        std::string::basic_string[abi:ne180100]<0>(&__dst, diag::config::kStallDetectionRecoveryKey[0]);
        v89 = util::equal_nocase(a2, (const char *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (v89)
        {
          if (!prop::bbtrace::set(a2, (const char *)a3))
            return 0;
          LODWORD(__dst.__r_.__value_.__l.__data_) = -1431655766;
          if (!prop::bbtrace::get<diag::config::Recovery>(a2, &__dst))
            return 0;
          v91 = __dst.__r_.__value_.__l.__data_;
          if (*(_DWORD *)(a1 + 168) != LODWORD(__dst.__r_.__value_.__l.__data_))
          {
            *(_DWORD *)(a1 + 168) = __dst.__r_.__value_.__l.__data_;
            v14 = ctu::cf::update<char const*,unsigned int>(*(__CFDictionary **)(a1 + 392), (const __CFString **)diag::config::kStallDetectionRecoveryKey[0], v91, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], v90);
            DIAGTrace::stallDetection_sync((const __CFDictionary **)a1, *(unsigned __int8 *)(a1 + 312));
            return v14;
          }
          return 1;
        }
        std::string::basic_string[abi:ne180100]<0>(&__dst, diag::config::kKeepScratchLogsKey[0]);
        v94 = util::equal_nocase(a2, (const char *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (v94)
        {
          if (!prop::bbtrace::set(a2, (const char *)a3))
            return 0;
          return prop::bbtrace::get<BOOL>(a2, (BOOL *)(a1 + 327));
        }
        std::string::basic_string[abi:ne180100]<0>(&__dst, "CellularLoggingAllowed");
        v95 = util::equal_nocase(a2, (const char *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (v95)
        {
          if (!prop::bbtrace::set(a2, (const char *)a3))
            return 0;
          return prop::bbtrace::get<BOOL>(a2, (BOOL *)(a1 + 328));
        }
        std::string::basic_string[abi:ne180100]<0>(&__dst, "CarrierName1");
        v96 = util::equal_nocase(a2, (const char *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (v96)
        {
          if (!prop::bbtrace::set(a2, (const char *)a3))
            return 0;
          return prop::bbtrace::get(a2, a1 + 336);
        }
        std::string::basic_string[abi:ne180100]<0>(&__dst, "CarrierName2");
        v97 = util::equal_nocase(a2, (const char *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (v97)
        {
          if (!prop::bbtrace::set(a2, (const char *)a3))
            return 0;
          return prop::bbtrace::get(a2, a1 + 360);
        }
        std::string::basic_string[abi:ne180100]<0>(&__dst, "FileSize");
        v98 = util::equal_nocase(a2, (const char *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (v98)
        {
          if (!prop::bbtrace::set(a2, (const char *)a3))
            return 0;
          LODWORD(__dst.__r_.__value_.__l.__data_) = -1431655766;
          v14 = prop::bbtrace::get<unsigned int>(a2, &__dst);
          v100 = __dst.__r_.__value_.__l.__data_;
          if (*(_DWORD *)(a1 + 384) == LODWORD(__dst.__r_.__value_.__l.__data_))
            return v14;
          *(_DWORD *)(a1 + 384) = __dst.__r_.__value_.__l.__data_;
          ctu::cf::update<char const*,unsigned int>(*(__CFDictionary **)(a1 + 392), (const __CFString **)"FileSize", v100, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], v99);
          goto LABEL_118;
        }
        v47 = *(NSObject **)(a1 + 40);
        if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
          return 0;
        if (a2[23] >= 0)
          v101 = (std::string::size_type)a2;
        else
          v101 = *(_QWORD *)a2;
        if (*(char *)(a3 + 23) >= 0)
          v102 = a3;
        else
          v102 = *(_QWORD *)a3;
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = v101;
        WORD2(__dst.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6) = v102;
        v81 = "Unrecognized Set property request. Key=%s, Value=%s";
        goto LABEL_220;
      }
LABEL_157:
      std::string::basic_string[abi:ne180100]<0>(&__dst, "File");
      if (util::equal_nocase(a2, (const char *)&__dst)
        && util::equal_nocase((const char *)(a1 + 184), (const char *)a3))
      {
        v66 = 1;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_191:
          operator delete(__dst.__r_.__value_.__l.__data_);
          if (v66)
            return 1;
          goto LABEL_192;
        }
LABEL_179:
        if (v66)
          return 1;
LABEL_192:
        diag::getFileInfo(a3, (uint64_t)&__dst);
        if (v110)
        {
          v74 = 1;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_194;
LABEL_203:
          if (!v74)
            goto LABEL_195;
          goto LABEL_204;
        }
        std::string::basic_string[abi:ne180100]<0>(&v107, diag::config::kNoneDMCFile);
        v74 = util::equal_nocase((const char *)a3, (const char *)&v107);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v107.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_203;
        }
        else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_203;
        }
LABEL_194:
        operator delete(__dst.__r_.__value_.__l.__data_);
        if (!v74)
        {
LABEL_195:
          std::string::basic_string[abi:ne180100]<0>(&__dst, "Setting DMC File Failed");
          std::string::basic_string[abi:ne180100]<0>(&v107, "File does not exist");
          if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v107.__r_.__value_.__l.__data_);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          return 0;
        }
LABEL_204:
        v75 = (capabilities::diag *)DIAGTrace::ratifyDMCFile_sync(a1, (uint64_t)a2, a3);
        if (!(_DWORD)v75)
          return 0;
        *a4 = 2;
        if (!capabilities::diag::supportsADPL(v75))
          return 1;
        std::string::basic_string[abi:ne180100]<0>(&__dst, diag::config::kThroughputDMCFile[0]);
        v76 = DIAGTrace::checkOneOfDMCName_sync(a1, (uint64_t)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (!v76)
          return 1;
        return DIAGTrace::handleTputDMCforADPL_sync((config::hw *)a1, a4);
      }
      std::string::basic_string[abi:ne180100]<0>(&v107, "File_Secondary");
      if (util::equal_nocase(a2, (const char *)&v107) && util::equal_nocase((const char *)(a1 + 208), (const char *)a3))
      {
        v66 = 1;
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_190:
          operator delete(v107.__r_.__value_.__l.__data_);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_191;
          goto LABEL_179;
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v105, diag::config::kExtraDMCFileKey[0]);
        v66 = util::equal_nocase(a2, (const char *)v105)
           && util::equal_nocase((const char *)(a1 + 232), (const char *)a3);
        if (v106 < 0)
        {
          operator delete(v105[0]);
          if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_190;
        }
        else if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        {
          goto LABEL_190;
        }
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_191;
      goto LABEL_179;
    }
    std::string::basic_string[abi:ne180100]<0>(v105, diag::config::kExtraDMCFileKey[0]);
    v56 = util::equal_nocase(a2, (const char *)v105);
    if (v106 < 0)
    {
      operator delete(v105[0]);
      if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_155;
    }
    else if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_155;
    }
LABEL_143:
    operator delete(v107.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_156;
    goto LABEL_125;
  }
  LODWORD(__dst.__r_.__value_.__l.__data_) = -1431655766;
  if ((util::convert<int>((const std::string *)a3, &__dst, 0) & 1) == 0 || LODWORD(__dst.__r_.__value_.__l.__data_) > 4)
    return 0;
  if (*(_DWORD *)(a1 + 160) == LODWORD(__dst.__r_.__value_.__l.__data_))
    return 1;
  if (*(_BYTE *)(a1 + 324))
  {
    v36 = *(NSObject **)(a1 + 40);
    v14 = 0;
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1A343C000, v36, OS_LOG_TYPE_DEFAULT, "#I Cannot change mode while trace is enabled", (uint8_t *)&__dst, 2u);
      return 0;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 160) = __dst.__r_.__value_.__l.__data_;
    return 1;
  }
  return v14;
}

void sub_1A3476DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double util::to_str<BOOL>@<D0>(int a1@<W0>, std::string *a2@<X8>)
{
  double result;
  std::string v4;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v4, a1);
  result = *(double *)&v4.__r_.__value_.__l.__data_;
  *a2 = v4;
  return result;
}

void sub_1A3476EB8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1A3476EA8);
}

void sub_1A3476EC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL DIAGTrace::setPropTraceOwnership_sync(uint64_t a1, char *a2, const char *a3)
{
  NSObject *v4;
  _BOOL8 result;
  const char *v6;
  _BOOL4 v8;
  int data;
  int v10;
  char v11;
  int v12;
  NSObject *v13;
  _BOOL4 v14;
  std::string v15;
  void *__p[2];
  char v17;
  std::string v18;
  std::string buf;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 324))
  {
    v4 = *(NSObject **)(a1 + 40);
    result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    v6 = "Setting trace ownership, enabled must be set to false";
LABEL_27:
    _os_log_error_impl(&dword_1A343C000, v4, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&buf, 2u);
    return 0;
  }
  if ((prop::bbtrace::set(a2, a3) & 1) == 0)
  {
    v4 = *(NSObject **)(a1 + 40);
    result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    v6 = "Failed to set trace ownership property!";
    goto LABEL_27;
  }
  memset(&v15, 0, sizeof(v15));
  v17 = 7;
  strcpy((char *)__p, "BBTrace");
  memset(&buf, 0, sizeof(buf));
  v8 = defaults::get((char *)__p, a2, &buf);
  if (v8)
  {
    prop::file::get<std::string>((const void **)__p, (uint64_t)a2, (uint64_t)&buf, &v18);
    v15 = v18;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v17 & 0x80000000) == 0)
    {
LABEL_9:
      data = -1431655766;
      if (v8)
        goto LABEL_10;
LABEL_19:
      v11 = 0;
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_24;
      goto LABEL_20;
    }
  }
  else if ((v17 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p[0]);
  data = -1431655766;
  if (!v8)
    goto LABEL_19;
LABEL_10:
  LODWORD(buf.__r_.__value_.__l.__data_) = -1431655766;
  v10 = util::convert<int>(&v15, &buf, 0);
  v11 = v10;
  if (v10)
    data = (int)buf.__r_.__value_.__l.__data_;
  else
    data = -1431655766;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_24:
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((v11 & 1) == 0)
      goto LABEL_25;
    goto LABEL_21;
  }
LABEL_20:
  if ((v11 & 1) == 0)
  {
LABEL_25:
    v4 = *(NSObject **)(a1 + 40);
    result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    v6 = "Failed to get trace ownership";
    goto LABEL_27;
  }
LABEL_21:
  v12 = *(_DWORD *)(a1 + 164);
  v13 = *(NSObject **)(a1 + 40);
  v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
  if (data == v12)
  {
    if (v14)
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = data;
      _os_log_impl(&dword_1A343C000, v13, OS_LOG_TYPE_DEFAULT, "#I Trace ownership is already set to %d", (uint8_t *)&buf, 8u);
    }
  }
  else
  {
    if (v14)
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v12;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = data;
      _os_log_impl(&dword_1A343C000, v13, OS_LOG_TYPE_DEFAULT, "#I Setting trace ownership from %d to %d", (uint8_t *)&buf, 0xEu);
    }
    *(_DWORD *)(a1 + 164) = data;
  }
  return 1;
}

void sub_1A3477188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL DIAGTrace::getProperty_sync(uint64_t a1, char *a2, uint64_t a3)
{
  int v6;
  const char *v7;
  NSObject *v8;
  _BOOL8 result;
  char *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  unsigned int v17;
  std::string::size_type v18;
  char v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  const std::string *v23;
  void *v24;
  size_t v25;
  uint64_t v26;
  char **v27;
  const std::string::value_type *v28;
  void *__p[2];
  char v30;
  _QWORD v31[2];
  std::string buf;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v6 = a2[23];
  if ((v6 & 0x80000000) == 0)
  {
    if (strcasecmp(a2, "Enabled") && strcasecmp(a2, diag::config::kTempEnabledKey[0]))
    {
      if (strcasecmp(a2, "Mode"))
      {
        if (strcasecmp(a2, "TraceOwnership"))
        {
          if (strcasecmp(a2, "History"))
          {
            if (strcasecmp(a2, "MaxMemoryFileCount"))
            {
              if (strcasecmp(a2, "File"))
              {
                if (strcasecmp(a2, "File_Secondary"))
                {
                  if (strcasecmp(a2, diag::config::kExtraDMCFileKey[0]))
                  {
                    if (strcasecmp(a2, "File_Sleep"))
                    {
                      if (strcasecmp(a2, diag::config::kEnabledDuringSleepKey[0]))
                      {
                        if (strcasecmp(a2, diag::config::kBufferingOnAPAwake[0]))
                        {
                          if (strcasecmp(a2, diag::config::kStallDetectionKey[0]))
                          {
                            if (strcasecmp(a2, diag::config::kStallDetectionRetriesKey[0]))
                            {
                              if (strcasecmp(a2, diag::config::kStallDetectionRecoveryKey[0]))
                              {
                                if (strcasecmp(a2, "State"))
                                {
                                  if (strcasecmp(a2, diag::config::kKeepScratchLogsKey[0]))
                                  {
                                    if (strcasecmp(a2, "CellularLoggingAllowed"))
                                    {
                                      if (strcasecmp(a2, "CarrierName1"))
                                      {
                                        if (strcasecmp(a2, "CarrierName2"))
                                        {
                                          if (strcasecmp(a2, "High_Tput"))
                                          {
                                            v7 = a2;
                                            if (strcasecmp(a2, "Data_Logging"))
                                              goto LABEL_24;
                                            goto LABEL_51;
                                          }
LABEL_105:
                                          util::to_str<BOOL>(*(unsigned __int8 *)(a1 + 176), &buf);
                                          goto LABEL_90;
                                        }
                                        goto LABEL_104;
                                      }
                                      goto LABEL_103;
                                    }
LABEL_102:
                                    util::to_str<BOOL>(*(unsigned __int8 *)(a1 + 328), &buf);
                                    goto LABEL_90;
                                  }
LABEL_101:
                                  util::to_str<BOOL>(*(unsigned __int8 *)(a1 + 327), &buf);
                                  goto LABEL_90;
                                }
LABEL_97:
                                std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_1A3584B3E);
                                DIAGTrace::dumpState_sync(a1, (uint64_t)__p, 0, 10, &buf);
                                std::string::operator=((std::string *)a3, &buf);
                                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(buf.__r_.__value_.__l.__data_);
                                if (v30 < 0)
                                  operator delete(__p[0]);
                                return 1;
                              }
LABEL_93:
                              v26 = *(int *)(a1 + 168);
                              if (v26 <= 2)
                              {
                                v27 = off_1E4A07C20;
                                goto LABEL_85;
                              }
                              goto LABEL_95;
                            }
LABEL_89:
                            util::to_str<unsigned int>(*(_DWORD *)(a1 + 316), &buf);
                            goto LABEL_90;
                          }
LABEL_88:
                          util::to_str<BOOL>(*(unsigned __int8 *)(a1 + 312), &buf);
                          goto LABEL_90;
                        }
LABEL_87:
                        util::to_str<BOOL>(*(unsigned __int8 *)(a1 + 326), &buf);
                        goto LABEL_90;
                      }
LABEL_83:
                      v26 = *(int *)(a1 + 172);
                      if (v26 <= 2)
                      {
                        v27 = off_1E4A07C08;
LABEL_85:
                        v28 = v27[v26];
LABEL_96:
                        std::string::__assign_external((std::string *)a3, v28);
                        return 1;
                      }
LABEL_95:
                      v28 = "Unknown";
                      goto LABEL_96;
                    }
                    goto LABEL_74;
                  }
                  goto LABEL_73;
                }
LABEL_72:
                v23 = (const std::string *)(a1 + 208);
LABEL_75:
                std::string::operator=((std::string *)a3, v23);
                return 1;
              }
LABEL_68:
              if (a1 + 184 != a3)
              {
                v21 = *(_BYTE *)(a1 + 207);
                if (*(char *)(a3 + 23) < 0)
                {
                  if (v21 >= 0)
                    v24 = (void *)(a1 + 184);
                  else
                    v24 = *(void **)(a1 + 184);
                  if (v21 >= 0)
                    v25 = *(unsigned __int8 *)(a1 + 207);
                  else
                    v25 = *(_QWORD *)(a1 + 192);
                  std::string::__assign_no_alias<false>((void **)a3, v24, v25);
                }
                else if ((*(_BYTE *)(a1 + 207) & 0x80) != 0)
                {
                  std::string::__assign_no_alias<true>((_QWORD *)a3, *(void **)(a1 + 184), *(_QWORD *)(a1 + 192));
                }
                else
                {
                  v22 = *(_OWORD *)(a1 + 184);
                  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 200);
                  *(_OWORD *)a3 = v22;
                }
              }
              return 1;
            }
            goto LABEL_62;
          }
LABEL_56:
          v14 = *(_DWORD *)(a1 + 304);
          v15 = v14 < 0;
          if (!v14)
            v14 = 2048;
          if (v15)
            v16 = 256;
          else
            v16 = v14;
          v31[0] = 0;
          *(_QWORD *)((char *)v31 + 7) = 0;
          std::to_string(&buf, v16);
          goto LABEL_63;
        }
        goto LABEL_55;
      }
      goto LABEL_54;
    }
LABEL_52:
    v11 = *(unsigned __int8 *)(a1 + 324);
    v31[0] = 0;
    *(_QWORD *)((char *)v31 + 7) = 0;
    std::to_string(&buf, v11);
LABEL_63:
    v31[0] = buf.__r_.__value_.__l.__size_;
    v18 = buf.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v31 + 7) = *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 7);
    v19 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    v20 = v31[0];
    *(_QWORD *)a3 = v18;
    *(_QWORD *)(a3 + 8) = v20;
    *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v31 + 7);
    *(_BYTE *)(a3 + 23) = v19;
    return 1;
  }
  v7 = *(const char **)a2;
  if (!strcasecmp(*(const char **)a2, "Enabled") || !strcasecmp(v7, diag::config::kTempEnabledKey[0]))
    goto LABEL_52;
  if (!strcasecmp(v7, "Mode"))
  {
LABEL_54:
    v12 = *(_DWORD *)(a1 + 160);
    v31[0] = 0;
    *(_QWORD *)((char *)v31 + 7) = 0;
    std::to_string(&buf, v12);
    goto LABEL_63;
  }
  if (!strcasecmp(v7, "TraceOwnership"))
  {
LABEL_55:
    v13 = *(_DWORD *)(a1 + 164);
    v31[0] = 0;
    *(_QWORD *)((char *)v31 + 7) = 0;
    std::to_string(&buf, v13);
    goto LABEL_63;
  }
  if (!strcasecmp(v7, "History"))
    goto LABEL_56;
  if (!strcasecmp(v7, "MaxMemoryFileCount"))
  {
LABEL_62:
    v17 = *(_DWORD *)(a1 + 308);
    v31[0] = 0;
    *(_QWORD *)((char *)v31 + 7) = 0;
    std::to_string(&buf, v17);
    goto LABEL_63;
  }
  if (!strcasecmp(v7, "File"))
    goto LABEL_68;
  if (!strcasecmp(v7, "File_Secondary"))
    goto LABEL_72;
  if (!strcasecmp(v7, diag::config::kExtraDMCFileKey[0]))
  {
LABEL_73:
    v23 = (const std::string *)(a1 + 232);
    goto LABEL_75;
  }
  if (!strcasecmp(v7, "File_Sleep"))
  {
LABEL_74:
    v23 = (const std::string *)(a1 + 256);
    goto LABEL_75;
  }
  if (!strcasecmp(v7, diag::config::kEnabledDuringSleepKey[0]))
    goto LABEL_83;
  if (!strcasecmp(v7, diag::config::kBufferingOnAPAwake[0]))
    goto LABEL_87;
  if (!strcasecmp(v7, diag::config::kStallDetectionKey[0]))
    goto LABEL_88;
  if (!strcasecmp(v7, diag::config::kStallDetectionRetriesKey[0]))
    goto LABEL_89;
  if (!strcasecmp(v7, diag::config::kStallDetectionRecoveryKey[0]))
    goto LABEL_93;
  if (!strcasecmp(v7, "State"))
    goto LABEL_97;
  if (!strcasecmp(v7, diag::config::kKeepScratchLogsKey[0]))
    goto LABEL_101;
  if (!strcasecmp(v7, "CellularLoggingAllowed"))
    goto LABEL_102;
  if (!strcasecmp(v7, "CarrierName1"))
  {
LABEL_103:
    v23 = (const std::string *)(a1 + 336);
    goto LABEL_75;
  }
  if (!strcasecmp(v7, "CarrierName2"))
  {
LABEL_104:
    v23 = (const std::string *)(a1 + 360);
    goto LABEL_75;
  }
  if (!strcasecmp(v7, "High_Tput"))
    goto LABEL_105;
  if (!strcasecmp(v7, "Data_Logging"))
  {
LABEL_51:
    util::to_str<BOOL>(*(unsigned __int8 *)(a1 + 177), &buf);
LABEL_90:
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(std::string *)a3 = buf;
    return 1;
  }
LABEL_24:
  if (!strcasecmp(v7, "FileSize"))
  {
    util::to_str<unsigned int>(*(_DWORD *)(a1 + 384), &buf);
    goto LABEL_90;
  }
  v8 = *(NSObject **)(a1 + 40);
  result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v10 = *(char **)a2;
    if (v6 >= 0)
      v10 = a2;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
    _os_log_error_impl(&dword_1A343C000, v8, OS_LOG_TYPE_ERROR, "Unrecognized Get property request. Key=%s", (uint8_t *)&buf, 0xCu);
    return 0;
  }
  return result;
}

void sub_1A3477910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double util::to_str<unsigned int>@<D0>(unsigned int a1@<W0>, std::string *a2@<X8>)
{
  double result;
  std::string v4;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v4, a1);
  result = *(double *)&v4.__r_.__value_.__l.__data_;
  *a2 = v4;
  return result;
}

void sub_1A3477A34(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1A3477A24);
}

void sub_1A3477A40(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t DIAGTrace::dumpState_sync@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, std::string::value_type a4@<W3>, _BYTE *a5@<X8>)
{
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::ios_base *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  void **v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  const char *v32;
  size_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  std::string *v37;
  std::string::size_type size;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  const char *v61;
  size_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  const char *v71;
  size_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  unsigned int v76;
  std::string *p_p;
  std::string::size_type v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  int v82;
  _QWORD *v83;
  _QWORD *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  size_t v88;
  uint64_t v89;
  const void *v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  std::string __p;
  std::string v96;
  void *v97[2];
  unsigned __int8 v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  unint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  std::string v117;

  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v106 = 0xAAAAAAAAAAAAAAAALL;
  v116 = v10;
  v115 = v10;
  v114 = v10;
  v113 = v10;
  v112 = v10;
  v111 = v10;
  v110 = v10;
  v109 = v10;
  v108 = v10;
  v105 = v10;
  v104 = v10;
  v103 = v10;
  v102 = v10;
  v101 = v10;
  v100 = v10;
  v11 = MEMORY[0x1E0DE4FE0];
  v12 = MEMORY[0x1E0DE4FE0] + 64;
  v107 = MEMORY[0x1E0DE4FE0] + 64;
  v13 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v99 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v99 + *(_QWORD *)(v99 - 24)) = v13;
  v14 = (std::ios_base *)((char *)&v99 + *(_QWORD *)(v99 - 24));
  std::ios_base::init(v14, &v100);
  v14[1].__vftable = 0;
  v14[1].__fmtflags_ = -1;
  v99 = v11 + 24;
  v107 = v12;
  std::streambuf::basic_streambuf();
  v15 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v100 = MEMORY[0x1E0DE4FB8] + 16;
  v104 = 0u;
  v105 = 0u;
  LODWORD(v106) = 16;
  if (a3)
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v99, (uint64_t)"\n----- DIAG Trace Dump State -----\n", 35);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v99, (uint64_t)"Enabled: ", 9);
  *(_DWORD *)((char *)v16 + *(_QWORD *)(*v16 - 24) + 8) |= 1u;
  v17 = (_QWORD *)std::ostream::operator<<();
  v117.__r_.__value_.__s.__data_[0] = a4;
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v117, 1);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"QDSS: ", 6);
  *(_DWORD *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 8) |= 1u;
  v20 = (_QWORD *)std::ostream::operator<<();
  v117.__r_.__value_.__s.__data_[0] = a4;
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v117, 1);
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"ADPL: ", 6);
  *(_DWORD *)((char *)v22 + *(_QWORD *)(*v22 - 24) + 8) |= 1u;
  v23 = (_QWORD *)std::ostream::operator<<();
  v117.__r_.__value_.__s.__data_[0] = a4;
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)&v117, 1);
  v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"History: ", 9);
  DIAGTrace::historyAsString(a1, (char *)v97);
  if ((v98 & 0x80u) == 0)
    v26 = v97;
  else
    v26 = (void **)v97[0];
  if ((v98 & 0x80u) == 0)
    v27 = v98;
  else
    v27 = (uint64_t)v97[1];
  v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
  v117.__r_.__value_.__s.__data_[0] = a4;
  v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)&v117, 1);
  v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Mode: ", 6);
  v31 = *(int *)(a1 + 160);
  if (v31 > 4)
    v32 = "Unknown";
  else
    v32 = off_1E4A07BE0[v31];
  v33 = strlen(v32);
  v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v32, v33);
  v117.__r_.__value_.__s.__data_[0] = a4;
  v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)&v117, 1);
  v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Trace Ownership: ", 17);
  std::to_string(&v117, *(_DWORD *)(a1 + 164));
  v96 = v117;
  if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = &v96;
  else
    v37 = (std::string *)v96.__r_.__value_.__r.__words[0];
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  else
    size = v96.__r_.__value_.__l.__size_;
  v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, size);
  v117.__r_.__value_.__s.__data_[0] = a4;
  v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)&v117, 1);
  v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"DMC 1: ", 7);
  v42 = *(char *)(a1 + 207);
  if (v42 >= 0)
    v43 = a1 + 184;
  else
    v43 = *(_QWORD *)(a1 + 184);
  if (v42 >= 0)
    v44 = *(unsigned __int8 *)(a1 + 207);
  else
    v44 = *(_QWORD *)(a1 + 192);
  v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, v43, v44);
  v117.__r_.__value_.__s.__data_[0] = a4;
  v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)&v117, 1);
  v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"DMC 2: ", 7);
  v48 = *(char *)(a1 + 231);
  if (v48 >= 0)
    v49 = a1 + 208;
  else
    v49 = *(_QWORD *)(a1 + 208);
  if (v48 >= 0)
    v50 = *(unsigned __int8 *)(a1 + 231);
  else
    v50 = *(_QWORD *)(a1 + 216);
  v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, v49, v50);
  v117.__r_.__value_.__s.__data_[0] = a4;
  v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)&v117, 1);
  v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"DMC 3: ", 7);
  v54 = *(char *)(a1 + 255);
  if (v54 >= 0)
    v55 = a1 + 232;
  else
    v55 = *(_QWORD *)(a1 + 232);
  if (v54 >= 0)
    v56 = *(unsigned __int8 *)(a1 + 255);
  else
    v56 = *(_QWORD *)(a1 + 240);
  v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, v55, v56);
  v117.__r_.__value_.__s.__data_[0] = a4;
  v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)&v117, 1);
  v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Enabled During Sleep: ", 22);
  v60 = *(int *)(a1 + 172);
  if (v60 > 2)
    v61 = "Unknown";
  else
    v61 = off_1E4A07C08[v60];
  v62 = strlen(v61);
  v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v61, v62);
  v117.__r_.__value_.__s.__data_[0] = a4;
  v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)&v117, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"Stall Detection: ", 17);
  v65 = (_QWORD *)std::ostream::operator<<();
  v117.__r_.__value_.__s.__data_[0] = a4;
  v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)&v117, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Stall Retries: ", 15);
  v67 = (_QWORD *)std::ostream::operator<<();
  v117.__r_.__value_.__s.__data_[0] = a4;
  v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)&v117, 1);
  v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Stall Recovery: ", 16);
  v70 = *(int *)(a1 + 168);
  if (v70 > 2)
    v71 = "Unknown";
  else
    v71 = off_1E4A07C20[v70];
  v72 = strlen(v71);
  v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v71, v72);
  v117.__r_.__value_.__s.__data_[0] = a4;
  v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)&v117, 1);
  v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"Max memory file count: ", 23);
  v76 = *(_DWORD *)(a1 + 308);
  if (v76)
  {
    std::to_string(&v117, v76);
    __p = v117;
  }
  else
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 8;
    strcpy((char *)&__p, "No limit");
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v78 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v78 = __p.__r_.__value_.__l.__size_;
  v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)p_p, v78);
  v117.__r_.__value_.__s.__data_[0] = a4;
  v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)&v117, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"File Size : ", 12);
  v81 = (_QWORD *)std::ostream::operator<<();
  v117.__r_.__value_.__s.__data_[0] = a4;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)&v117, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_53:
      if (((char)v98 & 0x80000000) == 0)
        goto LABEL_54;
      goto LABEL_59;
    }
  }
  else if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_53;
  }
  operator delete(v96.__r_.__value_.__l.__data_);
  if (((char)v98 & 0x80000000) == 0)
  {
LABEL_54:
    v82 = *(char *)(a2 + 23);
    if ((v82 & 0x80000000) == 0)
      goto LABEL_55;
    goto LABEL_60;
  }
LABEL_59:
  operator delete(v97[0]);
  v82 = *(char *)(a2 + 23);
  if ((v82 & 0x80000000) == 0)
  {
LABEL_55:
    if (!(_BYTE)v82)
      goto LABEL_68;
    goto LABEL_61;
  }
LABEL_60:
  if (!*(_QWORD *)(a2 + 8))
    goto LABEL_68;
LABEL_61:
  v117.__r_.__value_.__s.__data_[0] = a4;
  v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v99, (uint64_t)&v117, 1);
  v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"Reason: ", 8);
  v85 = *(char *)(a2 + 23);
  if (v85 >= 0)
    v86 = a2;
  else
    v86 = *(_QWORD *)a2;
  if (v85 >= 0)
    v87 = *(unsigned __int8 *)(a2 + 23);
  else
    v87 = *(_QWORD *)(a2 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, v86, v87);
LABEL_68:
  if (a3)
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v99, (uint64_t)"\n---------------------------------\n", 35);
  if ((v106 & 0x10) != 0)
  {
    v89 = *((_QWORD *)&v105 + 1);
    if (*((_QWORD *)&v105 + 1) < (unint64_t)v103)
    {
      *((_QWORD *)&v105 + 1) = v103;
      v89 = v103;
    }
    v90 = (const void *)*((_QWORD *)&v102 + 1);
    v88 = v89 - *((_QWORD *)&v102 + 1);
    if ((unint64_t)(v89 - *((_QWORD *)&v102 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_87;
  }
  else
  {
    if ((v106 & 8) == 0)
    {
      v88 = 0;
      a5[23] = 0;
      goto LABEL_83;
    }
    v90 = (const void *)v101;
    v88 = v102 - v101;
    if ((_QWORD)v102 - (_QWORD)v101 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_87:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v88 >= 0x17)
  {
    v91 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17)
      v91 = v88 | 7;
    v92 = v91 + 1;
    v93 = operator new(v91 + 1);
    *((_QWORD *)a5 + 1) = v88;
    *((_QWORD *)a5 + 2) = v92 | 0x8000000000000000;
    *(_QWORD *)a5 = v93;
    a5 = v93;
    goto LABEL_82;
  }
  a5[23] = v88;
  if (v88)
LABEL_82:
    memmove(a5, v90, v88);
LABEL_83:
  a5[v88] = 0;
  v99 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&v99 + *(_QWORD *)(v99 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *(_QWORD *)&v100 = v15 + 16;
  if (SBYTE7(v105) < 0)
    operator delete((void *)v104);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A858F92C](&v107);
}

void sub_1A34781FC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1A3477FA4);
}

void sub_1A3478208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a29 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_4:
    std::ostringstream::~ostringstream((uint64_t)&a30);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a24);
  std::ostringstream::~ostringstream((uint64_t)&a30);
  _Unwind_Resume(a1);
}

uint64_t DIAGTrace::historyAsString@<X0>(uint64_t this@<X0>, char *a2@<X8>)
{
  char *v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  void *__p[2];
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v2 = a2;
  if (!*(_DWORD *)(this + 304))
  {
    a2[23] = 8;
    strcpy(a2, "Infinite");
    return this;
  }
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v24 = 0xAAAAAAAAAAAAAAAALL;
  v26 = v3;
  v34 = v3;
  v33 = v3;
  v32 = v3;
  v31 = v3;
  v30 = v3;
  v29 = v3;
  v28 = v3;
  v27 = v3;
  *(_OWORD *)__p = v3;
  v23 = v3;
  v20 = v3;
  v21 = v3;
  v18 = v3;
  v19 = v3;
  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v25 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v17 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v17 + *(_QWORD *)(v17 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v17 + *(_QWORD *)(v17 - 24));
  std::ios_base::init(v8, &v18);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v17 = v4 + 24;
  v25 = v5;
  std::streambuf::basic_streambuf();
  v9 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v18 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v23 = 0u;
  LODWORD(v24) = 16;
  v10 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" MB", 3);
  if ((v24 & 0x10) != 0)
  {
    v12 = *((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1) < (unint64_t)v21)
    {
      *((_QWORD *)&v23 + 1) = v21;
      v12 = v21;
    }
    v13 = (const void *)*((_QWORD *)&v20 + 1);
    v11 = v12 - *((_QWORD *)&v20 + 1);
    if ((unint64_t)(v12 - *((_QWORD *)&v20 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_20;
  }
  else
  {
    if ((v24 & 8) == 0)
    {
      v11 = 0;
      v2[23] = 0;
      goto LABEL_16;
    }
    v13 = (const void *)v19;
    v11 = v20 - v19;
    if ((_QWORD)v20 - (_QWORD)v19 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_20:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v16 = (char *)operator new(v14 + 1);
    *((_QWORD *)v2 + 1) = v11;
    *((_QWORD *)v2 + 2) = v15 | 0x8000000000000000;
    *(_QWORD *)v2 = v16;
    v2 = v16;
  }
  else
  {
    v2[23] = v11;
    if (!v11)
      goto LABEL_16;
  }
  memmove(v2, v13, v11);
LABEL_16:
  v2[v11] = 0;
  v17 = *v6;
  *(uint64_t *)((char *)&v17 + *(_QWORD *)(v17 - 24)) = v6[3];
  *(_QWORD *)&v18 = v9 + 16;
  if (SBYTE7(v23) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A858F92C](&v25);
}

void sub_1A3478578(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A858F92C](v1);
  _Unwind_Resume(a1);
}

uint64_t DIAGTrace::stateFlagsAsString@<X0>(DIAGTrace *this@<X0>, _BYTE *a2@<X8>)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void *__p[2];
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v26 = 0xAAAAAAAAAAAAAAAALL;
  v28 = v4;
  v36 = v4;
  v35 = v4;
  v34 = v4;
  v33 = v4;
  v32 = v4;
  v31 = v4;
  v30 = v4;
  v29 = v4;
  *(_OWORD *)__p = v4;
  v25 = v4;
  v22 = v4;
  v23 = v4;
  v20 = v4;
  v21 = v4;
  v5 = MEMORY[0x1E0DE4FE0];
  v6 = MEMORY[0x1E0DE4FE0] + 64;
  v27 = MEMORY[0x1E0DE4FE0] + 64;
  v7 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v19 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v19 + *(_QWORD *)(v19 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v19 + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v9, &v20);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v19 = v5 + 24;
  v27 = v6;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v20 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v25 = 0u;
  LODWORD(v26) = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Trace Flags(", 12);
  v11 = *((_QWORD *)this + 19);
  if ((v11 & 1) != 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)" Start", 6);
    v11 = *((_QWORD *)this + 19);
  }
  if ((v11 & 2) != 0)
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)" Abort", 6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)")", 2);
  if ((v26 & 0x10) != 0)
  {
    v13 = *((_QWORD *)&v25 + 1);
    if (*((_QWORD *)&v25 + 1) < (unint64_t)v23)
    {
      *((_QWORD *)&v25 + 1) = v23;
      v13 = v23;
    }
    v14 = (const void *)*((_QWORD *)&v22 + 1);
    v12 = v13 - *((_QWORD *)&v22 + 1);
    if ((unint64_t)(v13 - *((_QWORD *)&v22 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v26 & 8) == 0)
    {
      v12 = 0;
      a2[23] = 0;
      goto LABEL_18;
    }
    v14 = (const void *)v21;
    v12 = v22 - v21;
    if ((_QWORD)v22 - (_QWORD)v21 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_22:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    v17 = operator new(v15 + 1);
    *((_QWORD *)a2 + 1) = v12;
    *((_QWORD *)a2 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)a2 = v17;
    a2 = v17;
    goto LABEL_17;
  }
  a2[23] = v12;
  if (v12)
LABEL_17:
    memmove(a2, v14, v12);
LABEL_18:
  a2[v12] = 0;
  v19 = *v7;
  *(uint64_t *)((char *)&v19 + *(_QWORD *)(v19 - 24)) = v7[3];
  *(_QWORD *)&v20 = v10 + 16;
  if (SBYTE7(v25) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A858F92C](&v27);
}

void sub_1A3478840(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A858F92C](v1);
  _Unwind_Resume(a1);
}

void DIAGTrace::prepare(uint64_t a1)
{
  NSObject *v2;

  if (*(_BYTE *)(a1 + 324) && !*(_BYTE *)(a1 + 424))
  {
    v2 = *(NSObject **)(a1 + 144);
    if (v2)
    {
      dispatch_group_enter(v2);
      *(_BYTE *)(a1 + 424) = 1;
    }
  }
}

void DIAGTrace::start(uint64_t a1, NSObject **a2, const void **a3)
{
  NSObject *v4;
  const void *v5;
  NSObject *v6;
  uint64_t *v8;
  _QWORD v9[5];
  CFTypeRef cf;
  dispatch_object_t object;

  v4 = *a2;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1174405120;
  v9[2] = ___ZN9DIAGTrace5startEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v9[3] = &__block_descriptor_tmp_53;
  v5 = *a3;
  v9[4] = a1;
  cf = v5;
  v6 = v4;
  if (v5)
  {
    CFRetain(v5);
    v6 = *a2;
  }
  v8 = (uint64_t *)(a1 + 72);
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<Trace>::execute_wrapped(v8, v4, (uint64_t)v9);
  if (object)
    dispatch_release(object);
  if (cf)
    CFRelease(cf);
}

void ___ZN9DIAGTrace5startEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  void **v5;
  const char *v6;
  size_t v7;
  uint64_t v8;
  void **v9;
  NSObject *v10;
  NSObject *v11;
  const void *v12;
  NSObject *v13;
  _QWORD v14[2];
  void *__p[3];
  uint64_t v16;
  uint8_t buf[8];
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 152) = *(_QWORD *)(v2 + 152) & 0xFFFFFFFFFFFFFFFCLL | 1;
  v3 = *(NSObject **)(v2 + 40);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    goto LABEL_6;
  v4 = *(unsigned __int8 *)(v2 + 324);
  DIAGTrace::stateFlagsAsString((DIAGTrace *)v2, __p);
  v5 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
  *(_DWORD *)buf = 67109378;
  *(_DWORD *)&buf[4] = v4;
  LOWORD(v18) = 2080;
  *(_QWORD *)((char *)&v18 + 2) = v5;
  _os_log_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEFAULT, "#I Start requested. Enabled = %d; %s", buf, 0x12u);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if (!*(_BYTE *)(v2 + 324))
      return;
  }
  else
  {
LABEL_6:
    if (!*(_BYTE *)(v2 + 324))
      return;
  }
  v14[0] = 0xAAAAAAAAAAAAAAAALL;
  v14[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v14, *(const __CFDictionary **)(a1 + 40));
  memset(__p, 170, sizeof(__p));
  v6 = (const char *)*MEMORY[0x1E0CFB530];
  *(_QWORD *)buf = 0;
  v18 = 0uLL;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v16, v6);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A858F29C](&v16);
  if (SHIBYTE(v18) < 0)
    operator delete(*(void **)buf);
  if (SHIBYTE(__p[2]) >= 0)
    v7 = HIBYTE(__p[2]);
  else
    v7 = (size_t)__p[1];
  if (v7 == strlen((const char *)*MEMORY[0x1E0CFB980]))
  {
    v9 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
    if (!memcmp(v9, (const void *)*MEMORY[0x1E0CFB980], v7))
    {
      v10 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A343C000, v10, OS_LOG_TYPE_DEFAULT, "#I Start requested after baseband booted", buf, 2u);
      }
      DIAGTrace::reinitService_sync((DIAGTrace *)v2, 1);
    }
  }
  v11 = *(NSObject **)(a1 + 48);
  v13 = v11;
  if (v11)
    dispatch_retain(v11);
  v12 = *(const void **)(a1 + 40);
  if (v12)
    CFRetain(v12);
  DIAGTrace::start_sync((DIAGTrace *)v2, &v13, v8, 0);
  if (v12)
    CFRelease(v12);
  if (v11)
    dispatch_release(v11);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  MEMORY[0x1A858F2D8](v14);
}

void sub_1A3478C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0)
    operator delete(__p);
  MEMORY[0x1A858F2D8](&a11);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE48c21_ZTSN8dispatch5groupE(uint64_t a1, uint64_t a2)
{
  const void *v4;
  NSObject *v5;

  v4 = *(const void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
    CFRetain(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE48c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
}

void DIAGTrace::stop(uint64_t a1, NSObject **a2, const void **a3)
{
  NSObject *v5;
  const void *v6;
  _QWORD v7[5];
  dispatch_object_t object;
  CFTypeRef cf;

  v5 = *a2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN9DIAGTrace4stopEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_54;
  v7[4] = a1;
  object = v5;
  if (v5)
    dispatch_retain(v5);
  v6 = *a3;
  cf = v6;
  if (v6)
    CFRetain(v6);
  ctu::SharedSynchronizable<Trace>::execute_wrapped((uint64_t *)(a1 + 72), v5, (uint64_t)v7);
  if (cf)
    CFRelease(cf);
  if (object)
    dispatch_release(object);
}

void ___ZN9DIAGTrace4stopEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  void **v6;
  NSObject *v7;
  const void *v8;
  NSObject *v9;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  void **v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = a1[4];
  v3 = *(NSObject **)(v2 + 40);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    goto LABEL_6;
  v5 = *(unsigned __int8 *)(v2 + 324);
  DIAGTrace::stateFlagsAsString((DIAGTrace *)v2, __p);
  v6 = v11 >= 0 ? __p : (void **)__p[0];
  *(_DWORD *)buf = 67109378;
  v13 = v5;
  v14 = 2080;
  v15 = v6;
  _os_log_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEFAULT, "#I Stop requested. Enabled = %d; %s", buf, 0x12u);
  if (v11 < 0)
  {
    operator delete(__p[0]);
    *(_QWORD *)(v2 + 152) &= ~1uLL;
    if (!*(_BYTE *)(v2 + 324))
      return;
  }
  else
  {
LABEL_6:
    *(_QWORD *)(v2 + 152) &= ~1uLL;
    if (!*(_BYTE *)(v2 + 324))
      return;
  }
  if (*(_QWORD *)(v2 + 400))
  {
    v7 = a1[5];
    v9 = v7;
    if (v7)
      dispatch_retain(v7);
    v8 = (const void *)a1[6];
    if (v8)
      CFRetain(v8);
    DIAGTrace::stop_sync((DIAGTrace *)v2, &v9, v4, 0);
    if (v8)
      CFRelease(v8);
    if (v7)
      dispatch_release(v7);
  }
}

void sub_1A3478F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_40c21_ZTSN8dispatch5groupE48c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  CFTypeRef result;

  v4 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
    dispatch_retain(v4);
  result = *(CFTypeRef *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_40c21_ZTSN8dispatch5groupE48c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1)
{
  const void *v2;
  NSObject *v3;

  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
  v3 = *(NSObject **)(a1 + 40);
  if (v3)
    dispatch_release(v3);
}

void DIAGTrace::abort(uint64_t a1, NSObject **a2, const void **a3)
{
  NSObject *v5;
  const void *v6;
  _QWORD v7[5];
  dispatch_object_t object;
  CFTypeRef cf;

  v5 = *a2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN9DIAGTrace5abortEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_55;
  v7[4] = a1;
  object = v5;
  if (v5)
    dispatch_retain(v5);
  v6 = *a3;
  cf = v6;
  if (v6)
    CFRetain(v6);
  ctu::SharedSynchronizable<Trace>::execute_wrapped((uint64_t *)(a1 + 72), v5, (uint64_t)v7);
  if (cf)
    CFRelease(cf);
  if (object)
    dispatch_release(object);
}

void ___ZN9DIAGTrace5abortEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  void **v6;
  NSObject *v7;
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  void **v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 40);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    goto LABEL_6;
  v5 = *(unsigned __int8 *)(v2 + 324);
  DIAGTrace::stateFlagsAsString((DIAGTrace *)v2, __p);
  v6 = v11 >= 0 ? __p : (void **)__p[0];
  *(_DWORD *)buf = 67109378;
  v13 = v5;
  v14 = 2080;
  v15 = v6;
  _os_log_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEFAULT, "#I Abort requested. Enabled = %d; %s", buf, 0x12u);
  if (v11 < 0)
  {
    operator delete(__p[0]);
    *(_QWORD *)(v2 + 152) |= 2uLL;
    if (!*(_BYTE *)(v2 + 324))
      return;
  }
  else
  {
LABEL_6:
    *(_QWORD *)(v2 + 152) |= 2uLL;
    if (!*(_BYTE *)(v2 + 324))
      return;
  }
  if (*(_QWORD *)(v2 + 400))
  {
    v7 = *(NSObject **)(a1 + 40);
    if (v7)
      dispatch_retain(*(dispatch_object_t *)(a1 + 40));
    v8 = *(const __CFDictionary **)(a1 + 48);
    v9 = v8;
    if (v8)
      CFRetain(v8);
    DIAGTrace::abort_sync((const __CFDictionary **)v2, v4, &v9);
    if (v8)
      CFRelease(v8);
    if (v7)
      dispatch_release(v7);
  }
}

void sub_1A3479210(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void DIAGTrace::shutdown(uint64_t a1, NSObject **a2, const void **a3)
{
  NSObject *v5;
  const void *v6;
  _QWORD v7[5];
  dispatch_object_t object;
  CFTypeRef cf;

  v5 = *a2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN9DIAGTrace8shutdownEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_56;
  v7[4] = a1;
  object = v5;
  if (v5)
    dispatch_retain(v5);
  v6 = *a3;
  cf = v6;
  if (v6)
    CFRetain(v6);
  ctu::SharedSynchronizable<Trace>::execute_wrapped((uint64_t *)(a1 + 72), v5, (uint64_t)v7);
  if (cf)
    CFRelease(cf);
  if (object)
    dispatch_release(object);
}

void ___ZN9DIAGTrace8shutdownEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  void **v5;
  NSObject *v6;
  const void *v7;
  const void *v8;
  NSObject *v9;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  void **v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = a1[4];
  v3 = *(NSObject **)(v2 + 40);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    goto LABEL_6;
  v4 = *(unsigned __int8 *)(v2 + 324);
  DIAGTrace::stateFlagsAsString((DIAGTrace *)v2, __p);
  v5 = v11 >= 0 ? __p : (void **)__p[0];
  *(_DWORD *)buf = 67109378;
  v13 = v4;
  v14 = 2080;
  v15 = v5;
  _os_log_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEFAULT, "#I Shutting down. Enabled = %d; %s", buf, 0x12u);
  if (v11 < 0)
  {
    operator delete(__p[0]);
    if (!*(_BYTE *)(v2 + 324))
      return;
  }
  else
  {
LABEL_6:
    if (!*(_BYTE *)(v2 + 324))
      return;
  }
  if (*(_QWORD *)(v2 + 400))
  {
    v6 = a1[5];
    v9 = v6;
    if (v6)
      dispatch_retain(v6);
    v7 = (const void *)a1[6];
    v8 = v7;
    if (v7)
      CFRetain(v7);
    DIAGTrace::destroyService_sync(v2, &v9, &v8);
    if (v7)
      CFRelease(v7);
    if (v6)
      dispatch_release(v6);
  }
}

void sub_1A3479458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void DIAGTrace::enterLowPower(DIAGTrace *this, group *a2)
{
  uint64_t *v2;
  char *gr_name;
  _QWORD v4[5];
  dispatch_object_t object;

  v2 = (uint64_t *)((char *)this + 72);
  gr_name = a2->gr_name;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 1174405120;
  v4[2] = ___ZN9DIAGTrace13enterLowPowerEN8dispatch5groupE_block_invoke;
  v4[3] = &__block_descriptor_tmp_57;
  v4[4] = this;
  object = (dispatch_object_t)gr_name;
  if (gr_name)
    dispatch_retain((dispatch_object_t)gr_name);
  ctu::SharedSynchronizable<Trace>::execute_wrapped(v2, gr_name, (uint64_t)v4);
  if (object)
    dispatch_release(object);
}

void ___ZN9DIAGTrace13enterLowPowerEN8dispatch5groupE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  char **v5;
  char *v6;
  char *Mutable;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  CFTypeID v11;
  char *v12;
  NSObject *v13;
  group v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  char **v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 40);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    goto LABEL_6;
  v4 = *(unsigned __int8 *)(v2 + 324);
  DIAGTrace::stateFlagsAsString((DIAGTrace *)v2, &v14.gr_passwd);
  v5 = SHIBYTE(v14.gr_mem) >= 0 ? &v14.gr_passwd : (char **)v14.gr_passwd;
  *(_DWORD *)buf = 67109378;
  v16 = v4;
  v17 = 2080;
  v18 = v5;
  _os_log_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEFAULT, "#I Enter low-power requested. Enabled = %d; %s", buf, 0x12u);
  if (SHIBYTE(v14.gr_mem) < 0)
  {
    operator delete(v14.gr_passwd);
    if (!*(_BYTE *)(v2 + 324))
      return;
  }
  else
  {
LABEL_6:
    if (!*(_BYTE *)(v2 + 324))
      return;
  }
  if (*(_QWORD *)(v2 + 400))
  {
    if (*(_DWORD *)(v2 + 172))
    {
      v6 = *(char **)(a1 + 40);
      v14.gr_name = v6;
      if (v6)
        dispatch_retain((dispatch_object_t)v6);
      DIAGTrace::enterLowPower_sync((DIAGTrace *)v2, &v14);
      if (v6)
        dispatch_release((dispatch_object_t)v6);
    }
    else
    {
      v14.gr_passwd = 0;
      Mutable = (char *)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v9 = Mutable;
      if (Mutable)
        v14.gr_passwd = Mutable;
      v10 = *(NSObject **)(a1 + 40);
      v13 = v10;
      if (v10)
        dispatch_retain(v10);
      if (v9 && (v11 = CFGetTypeID(v9), v11 == CFDictionaryGetTypeID()))
      {
        CFRetain(v9);
        v12 = v9;
      }
      else
      {
        v12 = 0;
      }
      DIAGTrace::stop_sync((DIAGTrace *)v2, &v13, v8, 1);
      if (v12)
        CFRelease(v12);
      if (v10)
        dispatch_release(v10);
      if (v9)
        CFRelease(v9);
    }
  }
}

void sub_1A347970C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c21_ZTSN8dispatch5groupE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;

  v3 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (v3)
    dispatch_retain(v3);
}

void __destroy_helper_block_e8_40c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  NSObject *v1;

  v1 = *(NSObject **)(a1 + 40);
  if (v1)
    dispatch_release(v1);
}

void DIAGTrace::exitLowPower(DIAGTrace *this, group *a2)
{
  uint64_t *v2;
  char *gr_name;
  _QWORD v4[5];
  dispatch_object_t object;

  v2 = (uint64_t *)((char *)this + 72);
  gr_name = a2->gr_name;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 1174405120;
  v4[2] = ___ZN9DIAGTrace12exitLowPowerEN8dispatch5groupE_block_invoke;
  v4[3] = &__block_descriptor_tmp_58;
  v4[4] = this;
  object = (dispatch_object_t)gr_name;
  if (gr_name)
    dispatch_retain((dispatch_object_t)gr_name);
  ctu::SharedSynchronizable<Trace>::execute_wrapped(v2, gr_name, (uint64_t)v4);
  if (object)
    dispatch_release(object);
}

void ___ZN9DIAGTrace12exitLowPowerEN8dispatch5groupE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  char **v5;
  char *v6;
  char *Mutable;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  CFTypeID v11;
  char *v12;
  NSObject *v13;
  group v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  char **v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 40);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    goto LABEL_6;
  v4 = *(unsigned __int8 *)(v2 + 324);
  DIAGTrace::stateFlagsAsString((DIAGTrace *)v2, &v14.gr_passwd);
  v5 = SHIBYTE(v14.gr_mem) >= 0 ? &v14.gr_passwd : (char **)v14.gr_passwd;
  *(_DWORD *)buf = 67109378;
  v16 = v4;
  v17 = 2080;
  v18 = v5;
  _os_log_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEFAULT, "#I Exit low-power requested. Enabled = %d; %s", buf, 0x12u);
  if (SHIBYTE(v14.gr_mem) < 0)
  {
    operator delete(v14.gr_passwd);
    if (!*(_BYTE *)(v2 + 324))
      return;
  }
  else
  {
LABEL_6:
    if (!*(_BYTE *)(v2 + 324))
      return;
  }
  if (*(_QWORD *)(v2 + 400))
  {
    if (*(_DWORD *)(v2 + 172))
    {
      v6 = *(char **)(a1 + 40);
      v14.gr_name = v6;
      if (v6)
        dispatch_retain((dispatch_object_t)v6);
      DIAGTrace::exitLowPower_sync((DIAGTrace *)v2, &v14);
      if (v6)
        dispatch_release((dispatch_object_t)v6);
    }
    else
    {
      v14.gr_passwd = 0;
      Mutable = (char *)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v9 = Mutable;
      if (Mutable)
        v14.gr_passwd = Mutable;
      v10 = *(NSObject **)(a1 + 40);
      v13 = v10;
      if (v10)
        dispatch_retain(v10);
      if (v9 && (v11 = CFGetTypeID(v9), v11 == CFDictionaryGetTypeID()))
      {
        CFRetain(v9);
        v12 = v9;
      }
      else
      {
        v12 = 0;
      }
      DIAGTrace::start_sync((DIAGTrace *)v2, &v13, v8, 1);
      if (v12)
        CFRelease(v12);
      if (v10)
        dispatch_release(v10);
      if (v9)
        CFRelease(v9);
    }
  }
}

void sub_1A3479A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void DIAGTrace::snapshot(uint64_t a1, NSObject **a2, const void **a3)
{
  NSObject *v5;
  const void *v6;
  _QWORD v7[5];
  dispatch_object_t object;
  CFTypeRef cf;

  v5 = *a2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN9DIAGTrace8snapshotEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_59;
  v7[4] = a1;
  object = v5;
  if (v5)
    dispatch_retain(v5);
  v6 = *a3;
  cf = v6;
  if (v6)
    CFRetain(v6);
  ctu::SharedSynchronizable<Trace>::execute_wrapped((uint64_t *)(a1 + 72), v5, (uint64_t)v7);
  if (cf)
    CFRelease(cf);
  if (object)
    dispatch_release(object);
}

void ___ZN9DIAGTrace8snapshotEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  void **v5;
  NSObject *v6;
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  dispatch_object_t v9;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  void **v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = a1[4];
  v3 = *(NSObject **)(v2 + 40);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    goto LABEL_6;
  v4 = *(unsigned __int8 *)(v2 + 324);
  DIAGTrace::stateFlagsAsString((DIAGTrace *)v2, __p);
  v5 = v11 >= 0 ? __p : (void **)__p[0];
  *(_DWORD *)buf = 67109378;
  v13 = v4;
  v14 = 2080;
  v15 = v5;
  _os_log_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEFAULT, "#I Snapshot requested. Enabled = %d; %s", buf, 0x12u);
  if (v11 < 0)
  {
    operator delete(__p[0]);
    if (!*(_BYTE *)(v2 + 324))
      return;
  }
  else
  {
LABEL_6:
    if (!*(_BYTE *)(v2 + 324))
      return;
  }
  if (*(_QWORD *)(v2 + 400))
  {
    v6 = a1[5];
    v9 = v6;
    if (v6)
      dispatch_retain(v6);
    v7 = (const __CFDictionary *)a1[6];
    v8 = v7;
    if (v7)
      CFRetain(v7);
    DIAGTrace::snapshot_sync(v2, &v9, &v8);
    if (v7)
      CFRelease(v7);
    if (v6)
      dispatch_release(v6);
  }
}

void sub_1A3479CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void DIAGTrace::dumpState(uint64_t a1, NSObject **a2, uint64_t a3)
{
  uint64_t *v3;
  NSObject *v4;
  _QWORD v5[5];
  std::string __p;

  v3 = (uint64_t *)(a1 + 72);
  v4 = *a2;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 1174405120;
  v5[2] = ___ZN9DIAGTrace9dumpStateEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke;
  v5[3] = &__block_descriptor_tmp_60;
  v5[4] = a1;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    __p = *(std::string *)a3;
    ctu::SharedSynchronizable<Trace>::execute_wrapped(v3, v4, (uint64_t)v5);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  ctu::SharedSynchronizable<Trace>::execute_wrapped(v3, v4, (uint64_t)v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_5;
}

void ___ZN9DIAGTrace9dumpStateEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  void **v4;
  std::string v5;
  void *__p[2];
  char v7;
  uint8_t buf[4];
  void **v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 324))
  {
    v3 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a1 + 63) < 0)
        std::string::__init_copy_ctor_external(&v5, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
      else
        v5 = *(std::string *)(a1 + 40);
      DIAGTrace::dumpState_sync(v1, (uint64_t)&v5, 1, 10, __p);
      if (v7 >= 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v9 = v4;
      _os_log_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
      if ((v7 & 0x80000000) == 0)
      {
        if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
LABEL_13:
        operator delete(v5.__r_.__value_.__l.__data_);
        return;
      }
      operator delete(__p[0]);
      if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_13;
    }
  }
}

void sub_1A3479F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

BOOL DIAGTrace::setProperty(uint64_t a1, NSObject **a2, uint64_t a3, uint64_t a4)
{
  char isSupported;
  char v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  _BOOL8 v13;
  NSObject *v14;
  _QWORD v16[8];
  dispatch_object_t object;
  void *__p[2];
  char v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  _QWORD block[6];

  v20 = 0;
  v21 = &v20;
  v22 = 0x2000000000;
  v23 = 0;
  v19 = 13;
  strcpy((char *)__p, "BasebandTrace");
  isSupported = abm::trace::isSupported((uint64_t)__p);
  v9 = isSupported;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if ((v9 & 1) != 0)
      goto LABEL_3;
LABEL_9:
    v13 = 0;
    goto LABEL_12;
  }
  if ((isSupported & 1) == 0)
    goto LABEL_9;
LABEL_3:
  v10 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 1174405120;
  v16[2] = ___ZN9DIAGTrace11setPropertyEN8dispatch5groupERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA__block_invoke;
  v16[3] = &unk_1E4A07A28;
  v16[4] = &v20;
  v16[5] = a1;
  v16[6] = a3;
  v16[7] = a4;
  v11 = *a2;
  object = v11;
  if (v11)
    dispatch_retain(v11);
  v24 = v16;
  block[0] = v10;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_78;
  block[4] = a1 + 72;
  block[5] = &v24;
  v12 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(a1 + 96))
  {
    dispatch_async_and_wait(v12, block);
    v13 = *((_BYTE *)v21 + 24) != 0;
    v14 = object;
    if (!object)
      goto LABEL_12;
    goto LABEL_11;
  }
  dispatch_sync(v12, block);
  v13 = *((_BYTE *)v21 + 24) != 0;
  v14 = object;
  if (object)
LABEL_11:
    dispatch_release(v14);
LABEL_12:
  _Block_object_dispose(&v20, 8);
  return v13;
}

void sub_1A347A0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a24 < 0)
    operator delete(__p);
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void ___ZN9DIAGTrace11setPropertyEN8dispatch5groupERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA__block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  std::string::size_type v5;
  uint64_t *v6;
  int v7;
  void **v8;
  uint64_t *v9;
  const void **v10;
  int v11;
  size_t v12;
  unint64_t v13;
  std::string *p_buf;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  CFMutableDictionaryRef Mutable;
  char **v24;
  int v25;
  NSObject *v26;
  CFTypeID v27;
  char **v28;
  uint64_t v29;
  CFTypeID v30;
  char **v31;
  NSObject *v32;
  NSObject *v33;
  CFTypeID v34;
  char **v35;
  NSObject *v36;
  _QWORD v37[5];
  dispatch_object_t object;
  CFTypeRef cf;
  char **v40;
  NSObject *v41;
  group v42;
  NSObject *v43;
  std::string v44;
  int v45;
  void *__p[2];
  char v47;
  std::string buf;
  uint64_t *v49;
  __int16 v50;
  int v51;
  __int16 v52;
  void **v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v45 = 5;
  v2 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = DIAGTrace::setProperty_sync(v2, *(char **)(a1 + 48), *(_QWORD *)(a1 + 56), &v45);
  v3 = *(NSObject **)(v2 + 40);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    goto LABEL_11;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    v4 = "True";
  else
    v4 = "False";
  v5 = *(_QWORD *)(a1 + 48);
  if (*(char *)(v5 + 23) < 0)
  {
    v5 = *(_QWORD *)v5;
    v6 = *(uint64_t **)(a1 + 56);
    if ((*((char *)v6 + 23) & 0x80000000) == 0)
      goto LABEL_7;
  }
  else
  {
    v6 = *(uint64_t **)(a1 + 56);
    if ((*((char *)v6 + 23) & 0x80000000) == 0)
      goto LABEL_7;
  }
  v6 = (uint64_t *)*v6;
LABEL_7:
  v7 = v45;
  DIAGTrace::stateFlagsAsString((DIAGTrace *)v2, __p);
  if (v47 >= 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
  WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v5;
  HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
  v49 = v6;
  v50 = 1024;
  v51 = v7;
  v52 = 2080;
  v53 = v8;
  _os_log_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEFAULT, "#I Set property. Success=%s, Key=%s, Value=%s, Action=%d, %s", (uint8_t *)&buf, 0x30u);
  if (v47 < 0)
  {
    operator delete(__p[0]);
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      return;
    goto LABEL_12;
  }
LABEL_11:
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    return;
LABEL_12:
  v9 = *(uint64_t **)(v2 + 400);
  if (v9)
  {
    v10 = *(const void ***)(a1 + 48);
    v11 = *((char *)v10 + 23);
    if (v11 >= 0)
      v12 = *((unsigned __int8 *)v10 + 23);
    else
      v12 = (size_t)v10[1];
    v13 = v12 + 3;
    memset(&buf, 170, sizeof(buf));
    if (v12 + 3 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v13 >= 0x17)
    {
      v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v15 = v13 | 7;
      v16 = v15 + 1;
      p_buf = (std::string *)operator new(v15 + 1);
      buf.__r_.__value_.__l.__size_ = v12 + 3;
      buf.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    }
    else
    {
      memset(&buf, 0, sizeof(buf));
      p_buf = &buf;
      *((_BYTE *)&buf.__r_.__value_.__s + 23) = v12 + 3;
      if (!v12)
        goto LABEL_27;
    }
    if (v11 >= 0)
      v17 = v10;
    else
      v17 = *v10;
    memmove(p_buf, v17, v12);
LABEL_27:
    *(_DWORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v12) = 2112800;
    v18 = *(_QWORD *)(a1 + 56);
    v19 = *(char *)(v18 + 23);
    if (v19 >= 0)
      v20 = *(const std::string::value_type **)(a1 + 56);
    else
      v20 = *(const std::string::value_type **)v18;
    if (v19 >= 0)
      v21 = *(unsigned __int8 *)(v18 + 23);
    else
      v21 = *(_QWORD *)(v18 + 8);
    v22 = std::string::append(&buf, v20, v21);
    v44 = *v22;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    diag::Service::pushInfo(v9, 3, (uint64_t)&v44);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v44.__r_.__value_.__l.__data_);
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_35;
    }
    else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_35;
    }
    operator delete(buf.__r_.__value_.__l.__data_);
  }
LABEL_35:
  buf.__r_.__value_.__r.__words[0] = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v24 = (char **)Mutable;
  if (Mutable)
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)Mutable;
  v25 = v45;
  if (v45 == 1)
  {
    v26 = *(NSObject **)(a1 + 64);
    v43 = v26;
    if (v26)
      dispatch_retain(v26);
    if (v24 && (v27 = CFGetTypeID(v24), v27 == CFDictionaryGetTypeID()))
    {
      v42.gr_mem = v24;
      CFRetain(v24);
      v28 = v24;
    }
    else
    {
      v28 = 0;
      v42.gr_mem = 0;
    }
    DIAGTrace::destroyService_sync(v2, &v43, (const void **)&v42.gr_mem);
    if (v28)
      CFRelease(v28);
LABEL_53:
    if (v26)
      dispatch_release(v26);
  }
  else if ((*(_QWORD *)(v2 + 152) & 3) == 1)
  {
    switch(v45)
    {
      case 0:
        DIAGTrace::reinitService_sync((DIAGTrace *)v2, 0);
        v26 = *(NSObject **)(a1 + 64);
        *(_QWORD *)&v42.gr_gid = v26;
        if (v26)
          dispatch_retain(v26);
        if (v24 && (v30 = CFGetTypeID(v24), v30 == CFDictionaryGetTypeID()))
        {
          v42.gr_passwd = (char *)v24;
          CFRetain(v24);
          v31 = v24;
        }
        else
        {
          v31 = 0;
          v42.gr_passwd = 0;
        }
        DIAGTrace::start_sync((DIAGTrace *)v2, (NSObject **)&v42.gr_gid, v29, 0);
        if (v31)
          CFRelease(v31);
        goto LABEL_53;
      case 2:
        v26 = *(NSObject **)(a1 + 64);
        v42.gr_name = (char *)v26;
        if (v26)
          dispatch_retain(v26);
        DIAGTrace::restartService_sync((DIAGTrace *)v2, &v42);
        goto LABEL_53;
      case 3:
        DIAGTrace::pushServiceConfig_sync((DIAGTrace *)v2);
        break;
      case 4:
        v33 = *(NSObject **)(a1 + 64);
        v41 = v33;
        if (v33)
          dispatch_retain(v33);
        if (v24 && (v34 = CFGetTypeID(v24), v34 == CFDictionaryGetTypeID()))
        {
          v40 = v24;
          CFRetain(v24);
          v35 = v24;
        }
        else
        {
          v35 = 0;
          v40 = 0;
        }
        DIAGTrace::destroyService_sync(v2, &v41, (const void **)&v40);
        if (v35)
          CFRelease(v35);
        if (v33)
          dispatch_release(v33);
        v37[0] = MEMORY[0x1E0C809B0];
        v37[1] = 1174405120;
        v37[2] = ___ZN9DIAGTrace11setPropertyEN8dispatch5groupERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA__block_invoke_64;
        v37[3] = &__block_descriptor_tmp_65;
        v36 = *(NSObject **)(a1 + 64);
        v37[4] = v2;
        object = v36;
        if (v36)
          dispatch_retain(v36);
        cf = v24;
        if (v24)
          CFRetain(v24);
        dispatch_group_notify(*(dispatch_group_t *)(a1 + 64), *(dispatch_queue_t *)(v2 + 88), v37);
        if (cf)
          CFRelease(cf);
        if (object)
          dispatch_release(object);
        break;
      default:
        break;
    }
  }
  else
  {
    v32 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v25;
      _os_log_impl(&dword_1A343C000, v32, OS_LOG_TYPE_DEFAULT, "#I State is aborted or stopped. Skip service action [%d]", (uint8_t *)__p, 8u);
    }
    v45 = 5;
  }
  if (v24)
    CFRelease(v24);
}

void sub_1A347A6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN9DIAGTrace11setPropertyEN8dispatch5groupERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA__block_invoke_64(_QWORD *a1)
{
  DIAGTrace *v2;
  uint64_t v3;
  NSObject *v4;
  const void *v5;
  CFTypeID v6;
  NSObject *v7;

  v2 = (DIAGTrace *)a1[4];
  DIAGTrace::reinitService_sync(v2, 0);
  v4 = a1[5];
  v7 = v4;
  if (v4)
    dispatch_retain(v4);
  v5 = (const void *)a1[6];
  if (v5 && (v6 = CFGetTypeID(v5), v6 == CFDictionaryGetTypeID()))
    CFRetain(v5);
  else
    v5 = 0;
  DIAGTrace::start_sync(v2, &v7, v3, 0);
  if (v5)
    CFRelease(v5);
  if (v4)
    dispatch_release(v4);
}

void sub_1A347A8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  NSObject *v9;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  if (v9)
    dispatch_release(v9);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_40c21_ZTSN8dispatch5groupE48c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  CFTypeRef result;

  v4 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
    dispatch_retain(v4);
  result = *(CFTypeRef *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_40c21_ZTSN8dispatch5groupE48c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1)
{
  const void *v2;
  NSObject *v3;

  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
  v3 = *(NSObject **)(a1 + 40);
  if (v3)
    dispatch_release(v3);
}

void __copy_helper_block_e8_64c21_ZTSN8dispatch5groupE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;

  v3 = *(NSObject **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v3;
  if (v3)
    dispatch_retain(v3);
}

void __destroy_helper_block_e8_64c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  NSObject *v1;

  v1 = *(NSObject **)(a1 + 64);
  if (v1)
    dispatch_release(v1);
}

uint64_t DIAGTrace::getProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[8];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  _QWORD block[6];

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZN9DIAGTrace11getPropertyERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERS6__block_invoke;
  v7[3] = &unk_1E4A07A60;
  v7[4] = &v8;
  v7[5] = a1;
  v7[6] = a2;
  v7[7] = a3;
  v12 = v7;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_78;
  block[4] = a1 + 72;
  block[5] = &v12;
  v4 = a1 + 88;
  v3 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(v4 + 8))
    dispatch_async_and_wait(v3, block);
  else
    dispatch_sync(v3, block);
  v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

BOOL ___ZN9DIAGTrace11getPropertyERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERS6__block_invoke(uint64_t a1)
{
  _BOOL8 result;

  result = DIAGTrace::getProperty_sync(*(_QWORD *)(a1 + 40), *(char **)(a1 + 48), *(_QWORD *)(a1 + 56));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t DIAGTrace::getBasebandOperatingMode(DIAGTrace *this)
{
  xpc_object_t v1;
  uint64_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  unint64_t *v6;
  unint64_t v7;
  const void *v8;
  size_t v9;
  void *v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  int data;
  void *size;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  unsigned __int8 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  xpc_object_t value;
  void *__dst[2];
  unint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  std::string v32;
  char v33;
  xpc_object_t v34;
  unint64_t v35;
  unint64_t v36;

  v35 = 0xAAAAAAAAAAAAAAAALL;
  v36 = 0xAAAAAAAAAAAAAAAALL;
  if (*((char *)this + 127) < 0)
    std::string::__init_copy_ctor_external(&v32, *((const std::string::value_type **)this + 13), *((_QWORD *)this + 14));
  else
    v32 = *(std::string *)((char *)this + 104);
  abm::client::CreateManager();
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  v1 = xpc_dictionary_create(0, 0, 0);
  v2 = MEMORY[0x1E0C812F8];
  if (v1 || (v1 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A85902BC](v1) == v2)
    {
      xpc_retain(v1);
      v3 = v1;
    }
    else
    {
      v3 = xpc_null_create();
    }
  }
  else
  {
    v3 = xpc_null_create();
    v1 = 0;
  }
  xpc_release(v1);
  v34 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v34 = xpc_null_create();
  v4 = xpc_int64_create(1500);
  if (!v4)
    v4 = xpc_null_create();
  xpc_dictionary_set_value(v3, (const char *)*MEMORY[0x1E0CFAF80], v4);
  v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  v30 = v35;
  v31 = (std::__shared_weak_count *)v36;
  if (v36)
  {
    v6 = (unint64_t *)(v36 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (const void *)*MEMORY[0x1E0CFBEC8];
  v9 = strlen((const char *)*MEMORY[0x1E0CFBEC8]);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    v11 = (void **)operator new(v12 + 1);
    __dst[1] = v10;
    v29 = v13 | 0x8000000000000000;
    __dst[0] = v11;
    goto LABEL_24;
  }
  HIBYTE(v29) = v9;
  v11 = __dst;
  if (v9)
LABEL_24:
    memmove(v11, v8, (size_t)v10);
  *((_BYTE *)v10 + (_QWORD)v11) = 0;
  abm::client::PerformCommand();
  data = (int)v32.__r_.__value_.__l.__data_;
  size = (void *)v32.__r_.__value_.__l.__size_;
  v16 = v33;
  v33 = 0;
  v32.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(v29) < 0)
    operator delete(__dst[0]);
  v17 = v31;
  if (!v31)
    goto LABEL_31;
  p_shared_owners = (unint64_t *)&v31->__shared_owners_;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    v20 = v34;
    if (v34)
      goto LABEL_35;
  }
  else
  {
LABEL_31:
    v20 = v34;
    if (v34)
      goto LABEL_35;
  }
  v20 = xpc_null_create();
  if (!v20)
  {
    v21 = xpc_null_create();
    v20 = 0;
    goto LABEL_38;
  }
LABEL_35:
  if (MEMORY[0x1A85902BC](v20) == v2)
  {
    xpc_retain(v20);
    v21 = v20;
  }
  else
  {
    v21 = xpc_null_create();
  }
LABEL_38:
  xpc_release(v20);
  if (!data && MEMORY[0x1A85902BC](v21) == v2)
  {
    value = xpc_dictionary_get_value(v21, (const char *)*MEMORY[0x1E0CFB9E8]);
    v32.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
    if (value)
      xpc_retain(value);
    else
      v32.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v22 = xpc::dyn_cast_or_default();
    xpc_release(v32.__r_.__value_.__l.__data_);
  }
  else
  {
    v22 = 8;
  }
  xpc_release(v21);
  xpc_release(v3);
  if (v16 < 0)
    operator delete(size);
  v23 = (std::__shared_weak_count *)v36;
  if (v36)
  {
    v24 = (unint64_t *)(v36 + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return v22;
}

void sub_1A347AE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, xpc_object_t object, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;
  void *v25;
  int v26;
  uint64_t v27;

  xpc_release(object);
  xpc_release(v25);
  xpc_release(v23);
  if (v26 < 0)
    operator delete(v24);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v27 - 80);
  _Unwind_Resume(a1);
}

void ___ZN9DIAGTrace19stallDetection_syncEb_block_invoke(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  int BasebandOperatingMode;
  const char **v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  const char *v17;
  NSObject *v18;
  uint32_t v19;
  int v20;
  NSObject *v21;
  uint64_t v22;
  const char *v23;
  size_t v24;
  std::string::size_type v25;
  std::string *p_dst;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  int v30;
  NSObject *v31;
  std::string *v32;
  const char *v33;
  NSObject *v34;
  uint32_t v35;
  uint64_t *v36;
  int v37;
  char *v38;
  NSObject *v39;
  __int128 v40;
  NSObject *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  group v44;
  void *__p[2];
  char v46;
  _BYTE v47[8];
  _QWORD *v48;
  void *v49[2];
  char v50;
  void *v51[2];
  char v52;
  void *v53[2];
  char v54;
  void *v55[2];
  char v56;
  std::string v57;
  std::string __dst;
  std::__shared_weak_count *v60;
  _BYTE __idx[32];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v60 = v6;
  if (!v6)
    return;
  v7 = v6;
  if (!a1[5])
    goto LABEL_83;
  BasebandOperatingMode = DIAGTrace::getBasebandOperatingMode((DIAGTrace *)v5);
  v9 = (const char **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    v10 = *v9;
    if (strcasecmp(*v9, "false") && strcasecmp(v10, "off") && strcasecmp(v10, "no"))
    {
      if (strcasecmp(v10, "true")
        && strcasecmp(v10, "on")
        && strcasecmp(v10, "yes")
        && strcasecmp(v10, "full")
        && strcasecmp(v10, "streaming"))
      {
        if (!strcasecmp(v10, "lite"))
          goto LABEL_38;
LABEL_24:
        if (!strcasecmp(v10, "background"))
          goto LABEL_38;
        *(_QWORD *)__idx = 0xAAAAAAAAAAAAAAAALL;
        v11 = std::stol((const std::string *)(a2 + 32), (size_t *)__idx, 0);
        v12 = *(unsigned __int8 *)(a2 + 55);
        if ((v12 & 0x80u) != 0)
          v12 = *(_QWORD *)(a2 + 40);
        if (*(_QWORD *)__idx != v12 || (v13 = v11, v11 < 0))
        {
          v14 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)__idx = 0;
            _os_log_error_impl(&dword_1A343C000, v14, OS_LOG_TYPE_ERROR, "DIAG: Failed to convert the count string to integer", __idx, 2u);
          }
          goto LABEL_83;
        }
LABEL_34:
        v15 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
          goto LABEL_39;
        goto LABEL_35;
      }
LABEL_33:
      v13 = 1;
      goto LABEL_34;
    }
  }
  else if (strcasecmp((const char *)(a2 + 32), "false")
         && strcasecmp((const char *)(a2 + 32), "off")
         && strcasecmp((const char *)(a2 + 32), "no"))
  {
    if (strcasecmp((const char *)(a2 + 32), "true")
      && strcasecmp((const char *)(a2 + 32), "on")
      && strcasecmp((const char *)(a2 + 32), "yes")
      && strcasecmp((const char *)(a2 + 32), "full")
      && strcasecmp((const char *)(a2 + 32), "streaming"))
    {
      v10 = (const char *)(a2 + 32);
      if (!strcasecmp((const char *)(a2 + 32), "lite"))
      {
LABEL_38:
        v13 = 2;
        v15 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
          goto LABEL_39;
        goto LABEL_35;
      }
      goto LABEL_24;
    }
    goto LABEL_33;
  }
  v13 = 0;
  v15 = *(NSObject **)(v5 + 40);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
LABEL_39:
    *(_DWORD *)__idx = 134217984;
    *(_QWORD *)&__idx[4] = v13;
    _os_log_debug_impl(&dword_1A343C000, v15, OS_LOG_TYPE_DEBUG, "#D DIAG: Entry count is %llu", __idx, 0xCu);
    if (!v13)
      goto LABEL_40;
LABEL_36:
    *(_DWORD *)(v5 + 320) = *(_DWORD *)(v5 + 316);
    v16 = *(NSObject **)(v5 + 40);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      goto LABEL_41;
    *(_WORD *)__idx = 0;
    v17 = "#D DIAG: Resetting retry counter";
    v18 = v16;
    v19 = 2;
    goto LABEL_94;
  }
LABEL_35:
  if (v13)
    goto LABEL_36;
LABEL_40:
  v20 = *(_DWORD *)(v5 + 320) - 1;
  *(_DWORD *)(v5 + 320) = v20;
  v21 = *(NSObject **)(v5 + 40);
  if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
LABEL_41:
    if (!*(_DWORD *)(v5 + 320))
      goto LABEL_42;
LABEL_83:
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  *(_DWORD *)__idx = 67109120;
  *(_DWORD *)&__idx[4] = v20;
  v17 = "#D DIAG: Stall retries left: %u";
  v18 = v21;
  v19 = 8;
LABEL_94:
  _os_log_debug_impl(&dword_1A343C000, v18, OS_LOG_TYPE_DEBUG, v17, __idx, v19);
  if (*(_DWORD *)(v5 + 320))
    goto LABEL_83;
LABEL_42:
  memset(&__dst, 170, sizeof(__dst));
  v22 = *(int *)(v5 + 168);
  if (v22 > 2)
    v23 = "Unknown";
  else
    v23 = off_1E4A07C20[v22];
  v24 = strlen(v23);
  if (v24 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v25 = v24;
  if (v24 >= 0x17)
  {
    v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v27 = v24 | 7;
    v28 = v27 + 1;
    p_dst = (std::string *)operator new(v27 + 1);
    __dst.__r_.__value_.__l.__size_ = v25;
    __dst.__r_.__value_.__r.__words[2] = v28 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_52;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v24;
  p_dst = &__dst;
  if (v24)
LABEL_52:
    memcpy(p_dst, v23, v25);
  p_dst->__r_.__value_.__s.__data_[v25] = 0;
  v29 = *(NSObject **)(v5 + 40);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    v30 = *(_DWORD *)(v5 + 316);
    *(_DWORD *)__idx = 136315394;
    *(_QWORD *)&__idx[4] = "DIAG: stall detected";
    *(_WORD *)&__idx[12] = 1024;
    *(_DWORD *)&__idx[14] = v30;
    _os_log_impl(&dword_1A343C000, v29, OS_LOG_TYPE_DEFAULT, "#I %s after %u minute(s)", __idx, 0x12u);
  }
  *(_DWORD *)(v5 + 320) = *(_DWORD *)(v5 + 316);
  if (BasebandOperatingMode == 1)
  {
    v31 = *(NSObject **)(v5 + 40);
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      goto LABEL_80;
    v32 = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v32 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    *(_DWORD *)__idx = 136315138;
    *(_QWORD *)&__idx[4] = v32;
    v33 = "#I DIAG: Forgoing stall recovery action (%s) because modem is in low power mode";
    v34 = v31;
    v35 = 12;
LABEL_79:
    _os_log_impl(&dword_1A343C000, v34, OS_LOG_TYPE_DEFAULT, v33, __idx, v35);
    goto LABEL_80;
  }
  v36 = *(uint64_t **)(v5 + 400);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v57, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v57 = __dst;
  diag::Service::pushInfo(v36, 11, (uint64_t)&v57);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  v37 = *(_DWORD *)(v5 + 168);
  if (v37 == 1)
  {
    *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v65 = v40;
    v66 = v40;
    v63 = v40;
    v64 = v40;
    *(_OWORD *)&__idx[16] = v40;
    v62 = v40;
    *(_OWORD *)__idx = v40;
    std::string::basic_string[abi:ne180100]<0>(v55, (char *)*MEMORY[0x1E0CFB590]);
    std::string::basic_string[abi:ne180100]<0>(v53, (char *)*MEMORY[0x1E0CFBDA0]);
    std::string::basic_string[abi:ne180100]<0>(v51, "DIAG: stall detected");
    Timestamp::Timestamp((Timestamp *)v47);
    Timestamp::asString((uint64_t)v47, 0, 9, v49);
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_1A3584B3E);
    ResetInfo::ResetInfo((std::string *)__idx, (__int128 *)v55, (__int128 *)v53, (__int128 *)v51, (uint64_t)v49, 7, (__int128 *)__p);
    if (v46 < 0)
    {
      operator delete(__p[0]);
      if ((v50 & 0x80000000) == 0)
      {
LABEL_73:
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v47, v48);
        if ((v52 & 0x80000000) == 0)
          goto LABEL_74;
        goto LABEL_90;
      }
    }
    else if ((v50 & 0x80000000) == 0)
    {
      goto LABEL_73;
    }
    operator delete(v49[0]);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v47, v48);
    if ((v52 & 0x80000000) == 0)
    {
LABEL_74:
      if ((v54 & 0x80000000) == 0)
        goto LABEL_75;
      goto LABEL_91;
    }
LABEL_90:
    operator delete(v51[0]);
    if ((v54 & 0x80000000) == 0)
    {
LABEL_75:
      if ((v56 & 0x80000000) == 0)
      {
LABEL_76:
        ResetInfo::ResetInfo((std::string *)&v44.gr_passwd, (__int128 *)__idx);
        DIAGTrace::commandResetModem_sync((_QWORD *)v5, (__int128 *)&v44.gr_passwd);
        ResetInfo::~ResetInfo((void **)&v44.gr_passwd);
        ResetInfo::~ResetInfo((void **)__idx);
        goto LABEL_80;
      }
LABEL_92:
      operator delete(v55[0]);
      goto LABEL_76;
    }
LABEL_91:
    operator delete(v53[0]);
    if ((v56 & 0x80000000) == 0)
      goto LABEL_76;
    goto LABEL_92;
  }
  if (v37 != 2)
  {
    v41 = *(NSObject **)(v5 + 40);
    if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      goto LABEL_80;
    *(_WORD *)__idx = 0;
    v33 = "#I No action for DIAG stall detected";
    v34 = v41;
    v35 = 2;
    goto LABEL_79;
  }
  v38 = (char *)dispatch_group_create();
  v39 = v38;
  v44.gr_name = v38;
  if (v38)
    dispatch_retain((dispatch_object_t)v38);
  DIAGTrace::restartService_sync((DIAGTrace *)v5, &v44);
  if (v39)
  {
    dispatch_release(v39);
    dispatch_release(v39);
  }
LABEL_80:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v7 = v60;
  if (v60)
    goto LABEL_83;
}

void sub_1A347B6CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1A347B128);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void DIAGTrace::getSettingPrefix(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 16) = 0xFAAAAAAAAAAAAAALL;
  strcpy((char *)a1, "BasebandTrace::");
}

void std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void ResetInfo::ResetInfo(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  __int128 v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(__int128 *)((char *)a2 + 24);
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
LABEL_6:
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  }
  v8 = *((_QWORD *)a2 + 9);
  LODWORD(this[3].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 20);
  this[3].__r_.__value_.__r.__words[0] = v8;
  v9 = (std::string *)((char *)this + 88);
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    v10 = *(__int128 *)((char *)a2 + 88);
    this[4].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 13);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
}

void sub_1A347B9CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 23) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<DIAGTrace>::shared_ptr[abi:ne180100]<DIAGTrace,std::shared_ptr<DIAGTrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<DIAGTrace>(DIAGTrace*)::{lambda(DIAGTrace*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A07AD8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1A347BB48(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<DIAGTrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<DIAGTrace>(DIAGTrace*)::{lambda(DIAGTrace*)#1}::operator() const(DIAGTrace*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1A347BB68(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<DIAGTrace *,std::shared_ptr<DIAGTrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<DIAGTrace>(DIAGTrace*)::{lambda(DIAGTrace *)#1},std::allocator<DIAGTrace>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<DIAGTrace *,std::shared_ptr<DIAGTrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<DIAGTrace>(DIAGTrace*)::{lambda(DIAGTrace *)#1},std::allocator<DIAGTrace>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<DIAGTrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<DIAGTrace>(DIAGTrace*)::{lambda(DIAGTrace*)#1}::operator() const(DIAGTrace*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<DIAGTrace *,std::shared_ptr<DIAGTrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<DIAGTrace>(DIAGTrace*)::{lambda(DIAGTrace *)#1},std::allocator<DIAGTrace>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI9DIAGTraceEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI9DIAGTraceEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI9DIAGTraceEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI9DIAGTraceEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<DIAGTrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<DIAGTrace>(DIAGTrace*)::{lambda(DIAGTrace*)#1}::operator() const(DIAGTrace*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<diag::Service *,std::shared_ptr<diag::Service>::__shared_ptr_default_delete<diag::Service,diag::Service>,std::allocator<diag::Service>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<diag::Service *,std::shared_ptr<diag::Service>::__shared_ptr_default_delete<diag::Service,diag::Service>,std::allocator<diag::Service>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (std::__shared_weak_count *)v1[1];
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      operator delete(v1);
    }
    else
    {
LABEL_6:
      operator delete(v1);
    }
  }
}

uint64_t std::__shared_ptr_pointer<diag::Service *,std::shared_ptr<diag::Service>::__shared_ptr_default_delete<diag::Service,diag::Service>,std::allocator<diag::Service>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001A357FAF0)
    return a1 + 24;
  if (((v3 & 0x80000001A357FAF0 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001A357FAF0))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001A357FAF0 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t ctu::cf::update<char const*,BOOL>(__CFDictionary *a1, const __CFString **a2, int a3, uint64_t a4, const __CFAllocator *a5)
{
  void *v7;
  void **v8;
  void *v9;
  BOOL v10;
  uint64_t v11;
  void *key;

  key = 0;
  ctu::cf::convert_copy((ctu::cf *)&key, a2, (const char *)0x8000100, a4, a5);
  v7 = key;
  v8 = (void **)MEMORY[0x1E0C9AE50];
  if (!a3)
    v8 = (void **)MEMORY[0x1E0C9AE40];
  v9 = *v8;
  key = *v8;
  if (v7)
    v10 = v9 == 0;
  else
    v10 = 1;
  v11 = !v10;
  if (v10)
  {
    if (!v9)
      goto LABEL_13;
  }
  else
  {
    CFDictionarySetValue(a1, v7, v9);
  }
  CFRelease(v9);
LABEL_13:
  if (v7)
    CFRelease(v7);
  return v11;
}

void sub_1A347BDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a9);
  _Unwind_Resume(a1);
}

void ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t ctu::cf::update<char const*,int>(__CFDictionary *a1, const __CFString **a2, int a3, const __CFAllocator *a4, const __CFAllocator *a5)
{
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  BOOL v11;
  uint64_t v12;
  CFNumberRef v14;
  int valuePtr;

  v14 = 0;
  ctu::cf::convert_copy((ctu::cf *)&v14, a2, (const char *)0x8000100, (uint64_t)a4, a5);
  v8 = v14;
  valuePtr = a3;
  v9 = CFNumberCreate(a4, kCFNumberIntType, &valuePtr);
  v10 = v9;
  v14 = v9;
  if (v8)
    v11 = v9 == 0;
  else
    v11 = 1;
  v12 = !v11;
  if (v11)
  {
    if (!v9)
      goto LABEL_11;
  }
  else
  {
    CFDictionarySetValue(a1, v8, v9);
  }
  CFRelease(v10);
LABEL_11:
  if (v8)
    CFRelease(v8);
  return v12;
}

void sub_1A347BEF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1A347BF1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ctu::cf::update<char const*,std::string>(__CFDictionary *a1, const __CFString **a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  void *v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  void *value;

  value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, a2, (const char *)0x8000100, a4, a5);
  v6 = value;
  value = 0;
  ctu::cf::convert_copy();
  v7 = value;
  if (v6)
    v8 = value == 0;
  else
    v8 = 1;
  v9 = !v8;
  if (v8)
  {
    if (!value)
      goto LABEL_11;
  }
  else
  {
    CFDictionarySetValue(a1, v6, value);
  }
  CFRelease(v7);
LABEL_11:
  if (v6)
    CFRelease(v6);
  return v9;
}

void sub_1A347BFE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1A347C004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ctu::cf::update<char const*,unsigned int>(__CFDictionary *a1, const __CFString **a2, unsigned int a3, const __CFAllocator *a4, const __CFAllocator *a5)
{
  const void *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  BOOL v11;
  uint64_t v12;
  unint64_t valuePtr;

  valuePtr = 0;
  ctu::cf::convert_copy((ctu::cf *)&valuePtr, a2, (const char *)0x8000100, (uint64_t)a4, a5);
  v8 = (const void *)valuePtr;
  valuePtr = a3;
  v9 = CFNumberCreate(a4, kCFNumberLongLongType, &valuePtr);
  v10 = v9;
  if (v8)
    v11 = v9 == 0;
  else
    v11 = 1;
  v12 = !v11;
  if (v11)
  {
    if (!v9)
      goto LABEL_11;
  }
  else
  {
    CFDictionarySetValue(a1, v8, v9);
  }
  CFRelease(v10);
LABEL_11:
  if (v8)
    CFRelease(v8);
  return v12;
}

void sub_1A347C0C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1A347C0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<Trace>::execute_wrapped(uint64_t *a1, NSObject *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD block[6];
  std::__shared_weak_count *v18;

  v4 = (std::__shared_weak_count *)a1[1];
  if (!v4 || (v7 = *a1, (v8 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  v10 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE15execute_wrappedEP16dispatch_group_sU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E4A07B90;
  block[5] = v7;
  v18 = v8;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  block[4] = a3;
  dispatch_group_async(a2, v10, block);
  v13 = v18;
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI5TraceE15execute_wrappedEP16dispatch_group_sU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c33_ZTSNSt3__110shared_ptrIK5TraceEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__110shared_ptrIK5TraceEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t _GLOBAL__sub_I_DIAGTrace_cpp()
{
  uint64_t result;

  result = ETLDIAGLoggingGetDefaultView();
  dword_1ED1149B4 = result;
  return result;
}

uint64_t abm::tailspin::dumpOutputWithOptions_sync(uint64_t a1, uint64_t *a2, int a3)
{
  void *v6;
  void *v7;
  unsigned __int8 v8;
  NSObject *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  mode_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  NSObject *v19;
  unsigned __int8 v20;
  NSObject *v21;
  uint64_t v22;
  const char *v23;
  size_t v24;
  void *v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  char updated;
  unsigned __int8 v30;
  NSObject *v31;
  unsigned __int8 v32;
  mach_timebase_info info[2];
  char v35;
  void *__dst[2];
  unint64_t v37;
  gid_t v38;
  uid_t v39;
  uint8_t buf[4];
  mach_timebase_info *v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (qword_1ED1149D8 == -1)
  {
    if (off_1ED1149D0)
      goto LABEL_3;
  }
  else
  {
    dispatch_once(&qword_1ED1149D8, &__block_literal_global);
    if (off_1ED1149D0)
    {
LABEL_3:
      if (*((char *)a2 + 23) < 0)
      {
        if (!a2[1])
          goto LABEL_9;
        a2 = (uint64_t *)*a2;
      }
      else if (!*((_BYTE *)a2 + 23))
      {
LABEL_9:
        if (a3 < 1)
          goto LABEL_16;
        info[0] = 0;
        if (mach_timebase_info(info))
        {
          {
            GetOsLogContext(void)::sOsLogContext = 0;
            qword_1ED114D18 = 0;
            __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
          }
          if (GetOsLogContext(void)::onceToken == -1)
          {
            v9 = qword_1ED114D18;
            if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_DEFAULT))
              goto LABEL_16;
            goto LABEL_14;
          }
          dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
          v9 = qword_1ED114D18;
          if (os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_DEFAULT))
          {
LABEL_14:
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1A343C000, v9, OS_LOG_TYPE_DEFAULT, "TailspinHelper: unable to initialize timebase", buf, 2u);
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", mach_absolute_time() - 1000000000 * info[0].denom * (unint64_t)a3 / info[0].numer);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "setObject:forKeyedSubscript:", v10, qword_1ED1149C0);

          objc_msgSend(v6, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], qword_1ED1149C8);
        }
LABEL_16:
        if (*(char *)(a1 + 23) < 0)
        {
          if (*(_QWORD *)(a1 + 8))
          {
            a1 = *(_QWORD *)a1;
            goto LABEL_22;
          }
        }
        else if (*(_BYTE *)(a1 + 23))
        {
          goto LABEL_22;
        }
        v11 = objc_alloc_init(MEMORY[0x1E0CB3578]);
        objc_msgSend(v11, "setDateStyle:", 1);
        objc_msgSend(v11, "setDateFormat:", CFSTR("yyyy-MM-dd-HH-mm-ss-SSS"));
        v12 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(MEMORY[0x1E0C99D68], "date");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "stringFromDate:", v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "stringWithFormat:", CFSTR("log-bb-%@.tailspin"), v14);
        v15 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        a1 = objc_msgSend(v15, "UTF8String");

LABEL_22:
        v16 = umask(0);
        v17 = open((const char *)a1, 1538, 432);
        umask(v16);
        if ((_DWORD)v17 != -1)
        {
          if (fchown(v17, 0, 0x50u))
          {
            {
              GetOsLogContext(void)::sOsLogContext = 0;
              qword_1ED114D18 = 0;
              __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
            }
            if (GetOsLogContext(void)::onceToken == -1)
            {
              v19 = qword_1ED114D18;
              if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_DEFAULT))
              {
LABEL_28:
                close(v17);
LABEL_60:
                v22 = 0;
                goto LABEL_61;
              }
            }
            else
            {
              dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
              v19 = qword_1ED114D18;
              if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_DEFAULT))
                goto LABEL_28;
            }
            LOWORD(info[0].numer) = 0;
            _os_log_impl(&dword_1A343C000, v19, OS_LOG_TYPE_DEFAULT, "TailspinHelper: unable to change file ownership of tailspin file", (uint8_t *)info, 2u);
            goto LABEL_28;
          }
          if (!off_1ED1149D0(v17, v6))
            goto LABEL_60;
          v38 = -1431655766;
          v39 = -1431655766;
          if (!support::fs::getUidGid(1, &v39, &v38))
            goto LABEL_47;
          v24 = strlen((const char *)a1);
          if (v24 >= 0x7FFFFFFFFFFFFFF8)
            std::string::__throw_length_error[abi:ne180100]();
          v25 = (void *)v24;
          if (v24 >= 0x17)
          {
            v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v24 | 7) != 0x17)
              v27 = v24 | 7;
            v28 = v27 + 1;
            v26 = (void **)operator new(v27 + 1);
            __dst[1] = v25;
            v37 = v28 | 0x8000000000000000;
            __dst[0] = v26;
          }
          else
          {
            HIBYTE(v37) = v24;
            v26 = __dst;
            if (!v24)
            {
LABEL_44:
              *((_BYTE *)v25 + (_QWORD)v26) = 0;
              updated = support::fs::updateOwner((const char *)__dst, v39, v38);
              if (SHIBYTE(v37) < 0)
                operator delete(__dst[0]);
              if ((updated & 1) != 0)
                goto LABEL_52;
LABEL_47:
              {
                GetOsLogContext(void)::sOsLogContext = 0;
                qword_1ED114D18 = 0;
                __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
              }
              if (GetOsLogContext(void)::onceToken == -1)
              {
                v31 = qword_1ED114D18;
                if (os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_DEFAULT))
                  goto LABEL_50;
              }
              else
              {
                dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
                v31 = qword_1ED114D18;
                if (os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_DEFAULT))
                {
LABEL_50:
                  v35 = 9;
                  strcpy((char *)info, "_wireless");
                  *(_DWORD *)buf = 136315394;
                  v41 = info;
                  v42 = 2080;
                  v43 = a1;
                  _os_log_impl(&dword_1A343C000, v31, OS_LOG_TYPE_DEFAULT, "Failed to update to %s - %s", buf, 0x16u);
                  if (v35 < 0)
                    operator delete(*(void **)info);
                }
              }
LABEL_52:
              v22 = 1;
              goto LABEL_61;
            }
          }
          memmove(v26, (const void *)a1, (size_t)v25);
          goto LABEL_44;
        }
        {
          GetOsLogContext(void)::sOsLogContext = 0;
          qword_1ED114D18 = 0;
          __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
        }
        if (GetOsLogContext(void)::onceToken != -1)
          dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
        v21 = qword_1ED114D18;
        v22 = 0;
        if (os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(info[0].numer) = 0;
          v23 = "TailspinHelper: unable to create tailspin file";
LABEL_59:
          _os_log_impl(&dword_1A343C000, v21, OS_LOG_TYPE_DEFAULT, v23, (uint8_t *)info, 2u);
          goto LABEL_60;
        }
        goto LABEL_61;
      }
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setObject:forKeyedSubscript:", v7, _MergedGlobals_5);

      goto LABEL_9;
    }
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED114D18 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
  }
  if (GetOsLogContext(void)::onceToken != -1)
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
  v21 = qword_1ED114D18;
  v22 = 0;
  if (os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(info[0].numer) = 0;
    v23 = "TailspinHelper: unable to link tailspin";
    goto LABEL_59;
  }
LABEL_61:

  return v22;
}

void sub_1A347CA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ___ZL21sLinkTailspinIfNeededv_block_invoke()
{
  void *v0;
  id *v1;
  id *v2;
  id *v3;

  v0 = dlopen("/usr/lib/libtailspin.dylib", 1);
  qword_1ED1149E0 = (uint64_t)v0;
  if (v0)
  {
    off_1ED1149D0 = dlsym(v0, "tailspin_dump_output_with_options_sync");
    v1 = (id *)dlsym((void *)qword_1ED1149E0, "TSPDumpOptions_ReasonString");
    objc_storeStrong((id *)&_MergedGlobals_5, *v1);
    v2 = (id *)dlsym((void *)qword_1ED1149E0, "TSPDumpOptions_MinTimestamp");
    objc_storeStrong((id *)&qword_1ED1149C0, *v2);
    v3 = (id *)dlsym((void *)qword_1ED1149E0, "TSPDumpOptions_NoSymbolicate");
    objc_storeStrong((id *)&qword_1ED1149C8, *v3);
  }
}

void abm::HelperServerInternal::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0xB0uLL);
  v5 = (uint64_t)v4;
  v6 = (std::__shared_weak_count *)a1[1];
  v12 = *a1;
  v13 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  abm::HelperServerInternal::HelperServerInternal((uint64_t)v4, &v12);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<abm::HelperServerInternal>::shared_ptr[abi:ne180100]<abm::HelperServerInternal,std::shared_ptr<abm::HelperServerInternal> ctu::SharedSynchronizable<abm::HelperServerInternal>::make_shared_ptr<abm::HelperServerInternal>(abm::HelperServerInternal*)::{lambda(abm::HelperServerInternal*)#1},void>(a2, v5);
  ctu::Loggable<abm::HelperServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2);
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  abm::HelperServerInternal::init((abm::HelperServerInternal *)*a2);
}

void sub_1A347CC88(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1A347CC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1A347CCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1A347CCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v10);
  _Unwind_Resume(a1);
}

void abm::HelperServerInternal::init(abm::HelperServerInternal *this)
{
  std::__shared_weak_count *v3;
  char *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  _QWORD *v18;
  _QWORD block[6];

  v5 = *((_QWORD *)this + 9);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  v4 = (char *)this + 72;
  if (!v3 || (v6 = std::__shared_weak_count::lock(v3)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 1174405120;
  v16[2] = ___ZN3abm20HelperServerInternal4initEv_block_invoke;
  v16[3] = &__block_descriptor_tmp_8_1;
  v16[4] = this;
  v16[5] = v5;
  v17 = v7;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v18 = v16;
  block[0] = v12;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3abm20HelperServerInternalEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_20;
  block[4] = v4;
  block[5] = &v18;
  v14 = *((_QWORD *)this + 11);
  if (!*((_QWORD *)this + 12))
  {
    dispatch_sync(v14, block);
    v15 = v17;
    if (!v17)
      goto LABEL_14;
    goto LABEL_13;
  }
  dispatch_async_and_wait(v14, block);
  v15 = v17;
  if (v17)
LABEL_13:
    std::__shared_weak_count::__release_weak(v15);
LABEL_14:
  std::__shared_weak_count::__release_weak(v7);
}

uint64_t abm::HelperServerInternal::HelperServerInternal(uint64_t a1, _QWORD *a2)
{
  __int128 *Name;
  const char *v5;
  const char *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uid_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v23;
  std::__shared_weak_count *v24;
  _BYTE v25[16];
  char v26[16];
  _QWORD block[5];

  *(_QWORD *)a1 = off_1E4A07C88;
  Name = abm::HelperServerInternal::getName((abm::HelperServerInternal *)a1);
  if (byte_1ED114A07 >= 0)
    v5 = (const char *)&xmmword_1ED1149F0;
  else
    v5 = (const char *)xmmword_1ED1149F0;
  abm::HelperServerInternal::getName((abm::HelperServerInternal *)Name);
  if (byte_1ED114A07 >= 0)
    v6 = (const char *)&xmmword_1ED1149F0;
  else
    v6 = (const char *)xmmword_1ED1149F0;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v25, v6, "server");
  v7 = dispatch_queue_create(v5, 0);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v7;
  if (v7)
  {
    v8 = v7;
    dispatch_retain(v7);
    *(_QWORD *)(a1 + 96) = 0;
    dispatch_release(v8);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_QWORD *)a1 = off_1E4A07EC0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)block);
  *(_QWORD *)(a1 + 8) = &unk_1E4A06330;
  *(_QWORD *)(a1 + 56) = *a2;
  v9 = a2[1];
  *(_QWORD *)(a1 + 64) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v26);
  *(_QWORD *)a1 = off_1E4A07F50;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v25);
  *(_QWORD *)a1 = off_1E4A07C88;
  v12 = getuid();
  abm::helper::getUserConfig(v12, (xpc_object_t *)(a1 + 104));
  *(_QWORD *)(a1 + 112) = *a2;
  v13 = a2[1];
  *(_QWORD *)(a1 + 120) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = a1 + 152;
  if (*a2)
  {
    v16 = (std::__shared_weak_count *)a2[1];
    v23 = *a2;
    v24 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_1;
    block[4] = &v23;
    if (abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
    {
      v19 = v24;
      if (!v24)
        return a1;
    }
    else
    {
      dispatch_once(&abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
      v19 = v24;
      if (!v24)
        return a1;
    }
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return a1;
}

void sub_1A347D088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  _QWORD *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  ctu::SharedSynchronizable<diag::DIAGConfigurer>::~SharedSynchronizable(v4);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

void sub_1A347D0B4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  ctu::SharedLoggable<abm::HelperServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

__int128 *abm::HelperServerInternal::getName(abm::HelperServerInternal *this)
{
  unsigned __int8 v1;
  uid_t v3;
  const char *v4;
  const char *v5;
  char *v6;
  std::string v7;
  std::string __p;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_6);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&_MergedGlobals_6))
    return &xmmword_1ED1149F0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "com.apple.abm.helper");
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(".", &v7, &__p);
  v3 = getuid();
  v4 = "mobile";
  v5 = "";
  if (v3 == 25)
    v5 = "wireless";
  if (v3 != 501)
    v4 = v5;
  if (v3)
    v6 = (char *)v4;
  else
    v6 = "root";
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v6, &__p, (std::string *)&xmmword_1ED1149F0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  __cxa_guard_release(&_MergedGlobals_6);
  return &xmmword_1ED1149F0;
}

void sub_1A347D1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a14 & 0x80000000) == 0)
  {
    __cxa_guard_abort(&_MergedGlobals_6);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  __cxa_guard_abort(&_MergedGlobals_6);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<abm::HelperServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E4A07EC0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E4A07EC0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void abm::HelperServerInternal::~HelperServerInternal(abm::HelperServerInternal *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  NSObject *v8;
  NSObject *v9;
  std::__shared_weak_count *v10;

  *(_QWORD *)this = off_1E4A07C88;
  std::__tree<std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>,std::__map_value_compare<abm::helper::TaskID,std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>,std::less<abm::helper::TaskID>,true>,std::allocator<std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>>>::destroy(*((_QWORD **)this + 19));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  xpc_release(*((xpc_object_t *)this + 13));
  *((_QWORD *)this + 13) = 0;
  *(_QWORD *)this = off_1E4A07EC0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v8 = *((_QWORD *)this + 12);
  if (v8)
    dispatch_release(v8);
  v9 = *((_QWORD *)this + 11);
  if (v9)
    dispatch_release(v9);
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
}

{
  void *v1;

  abm::HelperServerInternal::~HelperServerInternal(this);
  operator delete(v1);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(char *__s@<X1>, std::string *a2@<X0>, std::string *a3@<X8>)
{
  size_t v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::append(a2, __s, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void ___ZN3abm20HelperServerInternal4initEv_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  xpc_object_t value;
  int v5;
  void *v6;
  __int128 v7;
  _DWORD *v8;
  _DWORD *i;
  unsigned int v10;
  const char *v11;
  size_t v12;
  _QWORD *v13;
  NSObject *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  void *v23;
  NSObject *v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int *v35;
  uint64_t **v36;
  int v37;
  uint64_t IsInternalBuild;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count_vtbl *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *shared_owners;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  __int128 v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t *v197;
  unint64_t v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  __int128 v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t *v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t *v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t *v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  unint64_t v232;
  NSObject *v233;
  uint64_t *v234;
  uint64_t **v235;
  uint64_t **v236;
  int v237;
  void *v238;
  uint64_t v239;
  uint64_t *v240;
  uint64_t v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  NSObject *v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  const char *v251;
  uint64_t v252;
  __int128 *v253;
  int *v254;
  __int128 v255;
  _QWORD aBlock[6];
  std::__shared_weak_count *v257;
  void *v258;
  dispatch_object_t object;
  uint64_t v260;
  std::__shared_weak_count *v261;
  xpc_object_t v262;
  void *v263[3];
  __int128 *v264;
  uint8_t buf[16];
  _OWORD v266[4];
  void *__p[2];
  __int128 v268;
  __int128 v269;
  _OWORD v270[9];
  unint64_t v271;
  __int128 v272;
  void (*v273)(uint64_t);
  void *v274;
  std::__shared_weak_count_vtbl *v275;
  __int128 block;
  _QWORD *(*v277)(uint64_t);
  void *v278;
  void (__cdecl **p_on_zero_shared_weak)(std::__shared_weak_count *__hidden);
  __int128 **v280;
  uint64_t v281;

  v281 = *MEMORY[0x1E0C80C00];
  v2 = a1[4];
  if (MEMORY[0x1A85902BC](*(_QWORD *)(v2 + 104)) != MEMORY[0x1E0C812F8])
  {
    v3 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = getuid();
      _os_log_error_impl(&dword_1A343C000, v3, OS_LOG_TYPE_ERROR, "XPC config is invalid for user: %d", buf, 8u);
    }
    return;
  }
  *(_QWORD *)(v2 + 168) = CFRunLoopGetCurrent();
  value = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 104), "UserID");
  *(_QWORD *)buf = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)buf = xpc_null_create();
  v5 = xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)buf);
  if (v5 && v5 != 501 && v5 != 25)
    return;
  memset(v263, 170, sizeof(v263));
  abm::helper::getTasksForUser(v5, (char **)v263);
  v6 = v263[0];
  if (v263[0] == v263[1])
  {
    if (!v263[0])
      return;
    goto LABEL_332;
  }
  v271 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v270[7] = v7;
  v270[8] = v7;
  v270[5] = v7;
  v270[6] = v7;
  v270[3] = v7;
  v270[4] = v7;
  v270[1] = v7;
  v270[2] = v7;
  v269 = v7;
  v270[0] = v7;
  *(_OWORD *)__p = v7;
  v268 = v7;
  v266[2] = v7;
  v266[3] = v7;
  v266[0] = v7;
  v266[1] = v7;
  *(_OWORD *)buf = v7;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
  v8 = v263[0];
  for (i = v263[1]; v8 != i; ++v8)
  {
    v10 = *v8 - 1;
    v11 = "invalid";
    if (v10 <= 9)
      v11 = off_1E4A08258[v10];
    v12 = strlen(v11);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v266, (uint64_t)v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" ", 1);
  }
  v14 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str[abi:ne180100](buf, &block);
    v253 = SHIBYTE(v277) >= 0 ? &block : (__int128 *)block;
    LODWORD(v272) = 136315138;
    *(_QWORD *)((char *)&v272 + 4) = v253;
    _os_log_debug_impl(&dword_1A343C000, v14, OS_LOG_TYPE_DEBUG, "#D Available tasks: %s", (uint8_t *)&v272, 0xCu);
    if (SHIBYTE(v277) < 0)
      operator delete((void *)block);
  }
  v15 = *(void **)(v2 + 104);
  v262 = v15;
  if (v15)
  {
    xpc_retain(v15);
    v260 = *(_QWORD *)(v2 + 112);
    v16 = *(std::__shared_weak_count **)(v2 + 120);
    v261 = v16;
    if (!v16)
      goto LABEL_24;
  }
  else
  {
    v262 = xpc_null_create();
    v260 = *(_QWORD *)(v2 + 112);
    v16 = *(std::__shared_weak_count **)(v2 + 120);
    v261 = v16;
    if (!v16)
      goto LABEL_24;
  }
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldxr(p_shared_owners);
  while (__stxr(v18 + 1, p_shared_owners));
LABEL_24:
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN3abm20HelperServerInternal4initEv_block_invoke_5;
  aBlock[3] = &__block_descriptor_tmp_5;
  v20 = a1[5];
  v19 = (std::__shared_weak_count *)a1[6];
  aBlock[4] = v2;
  aBlock[5] = v20;
  v257 = v19;
  if (v19)
  {
    p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
  }
  v23 = _Block_copy(aBlock);
  v24 = *(NSObject **)(v2 + 88);
  if (v24)
    dispatch_retain(*(dispatch_object_t *)(v2 + 88));
  v258 = v23;
  object = v24;
  TelephonyXPC::Server::create();
  v25 = block;
  block = 0uLL;
  v26 = *(std::__shared_weak_count **)(v2 + 136);
  *(_OWORD *)(v2 + 128) = v25;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
  if (*((_QWORD *)&block + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&block + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (object)
    dispatch_release(object);
  if (v258)
    _Block_release(v258);
  v32 = v261;
  if (v261)
  {
    v33 = (unint64_t *)&v261->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  xpc_release(v262);
  v262 = 0;
  v35 = (int *)v263[0];
  v254 = (int *)v263[1];
  if (v263[0] != v263[1])
  {
    v36 = (uint64_t **)(v2 + 152);
    while (1)
    {
      v37 = *v35;
      v255 = 0uLL;
      IsInternalBuild = TelephonyUtilIsInternalBuild();
      if ((IsInternalBuild & 1) != 0 || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
      {
        switch(v37)
        {
          case 3:
            v39 = *(std::__shared_weak_count **)(v2 + 80);
            if (!v39 || (v40 = *(_QWORD *)(v2 + 72), (v41 = std::__shared_weak_count::lock(v39)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v42 = v41;
            v43 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
            v45 = (unint64_t *)&v41->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
            v47 = *(_QWORD *)(v2 + 112);
            v48 = *(std::__shared_weak_count **)(v2 + 120);
            v49 = (std::__shared_weak_count *)operator new(0xE0uLL);
            v50 = v49;
            v49->__shared_owners_ = 0;
            v51 = (unint64_t *)&v49->__shared_owners_;
            v49->__shared_weak_owners_ = 0;
            v49->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A08080;
            *(_QWORD *)&block = v47;
            *((_QWORD *)&block + 1) = v48;
            if (v48)
            {
              v52 = (unint64_t *)&v48->__shared_owners_;
              do
                v53 = __ldxr(v52);
              while (__stxr(v53 + 1, v52));
            }
            v54 = (std::__shared_weak_count_vtbl *)&v49[1];
            *(_QWORD *)&v272 = v40;
            *((_QWORD *)&v272 + 1) = v42;
            abm::TapToRadarTask::TapToRadarTask((uint64_t)&v49[1], 3, (uint64_t *)&block, (uint64_t *)&v272);
            std::__shared_weak_count::__release_weak(v42);
            if (!v48)
              goto LABEL_69;
            v55 = (unint64_t *)&v48->__shared_owners_;
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
              shared_owners = (std::__shared_weak_count *)v50[4].__shared_owners_;
              if (shared_owners)
                goto LABEL_70;
            }
            else
            {
LABEL_69:
              shared_owners = (std::__shared_weak_count *)v50[4].__shared_owners_;
              if (shared_owners)
              {
LABEL_70:
                if (shared_owners->__shared_owners_ != -1)
                  goto LABEL_290;
                do
                  v58 = __ldxr(v51);
                while (__stxr(v58 + 1, v51));
                v59 = (unint64_t *)&v50->__shared_weak_owners_;
                do
                  v60 = __ldxr(v59);
                while (__stxr(v60 + 1, v59));
                v50[4].__vftable = v54;
                v50[4].__shared_owners_ = (uint64_t)v50;
                std::__shared_weak_count::__release_weak(shared_owners);
                goto LABEL_288;
              }
            }
            do
              v229 = __ldxr(v51);
            while (__stxr(v229 + 1, v51));
            v230 = (unint64_t *)&v50->__shared_weak_owners_;
            do
              v231 = __ldxr(v230);
            while (__stxr(v231 + 1, v230));
            v50[4].__vftable = v54;
            v50[4].__shared_owners_ = (uint64_t)v50;
            do
LABEL_288:
              v232 = __ldaxr(v51);
            while (__stlxr(v232 - 1, v51));
            if (v232)
            {
LABEL_290:
              *(_QWORD *)&v255 = v50 + 1;
              *((_QWORD *)&v255 + 1) = v50;
              goto LABEL_294;
            }
LABEL_326:
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
            *(_QWORD *)&v255 = v50 + 1;
            *((_QWORD *)&v255 + 1) = v50;
            goto LABEL_294;
          case 4:
            v191 = *(std::__shared_weak_count **)(v2 + 80);
            if (!v191 || (v192 = *(_QWORD *)(v2 + 72), (v193 = std::__shared_weak_count::lock(v191)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v194 = v193;
            *(_QWORD *)&v272 = v192;
            *((_QWORD *)&v272 + 1) = v193;
            v195 = (unint64_t *)&v193->__shared_weak_owners_;
            do
              v196 = __ldxr(v195);
            while (__stxr(v196 + 1, v195));
            v197 = (unint64_t *)&v193->__shared_owners_;
            do
              v198 = __ldaxr(v197);
            while (__stlxr(v198 - 1, v197));
            if (!v198)
            {
              ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
              std::__shared_weak_count::__release_weak(v194);
            }
            std::allocate_shared[abi:ne180100]<abm::SystemLogsTask,std::allocator<abm::SystemLogsTask>,abm::helper::TaskID &,std::shared_ptr<ctu::LogServer> &,std::weak_ptr<abm::HelperServerInternal>,void>((std::__shared_weak_count_vtbl **)&block, 4, *(_QWORD *)(v2 + 112), *(std::__shared_weak_count **)(v2 + 120), (uint64_t *)&v272);
            v199 = *((_QWORD *)&block + 1);
            block = 0uLL;
            *((_QWORD *)&v255 + 1) = v199;
            if (*((_QWORD *)&v272 + 1))
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v272 + 1));
            goto LABEL_228;
          case 5:
            v122 = *(std::__shared_weak_count **)(v2 + 80);
            if (!v122 || (v123 = *(_QWORD *)(v2 + 72), (v124 = std::__shared_weak_count::lock(v122)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v125 = v124;
            *(_QWORD *)&v272 = v123;
            *((_QWORD *)&v272 + 1) = v124;
            v126 = (unint64_t *)&v124->__shared_weak_owners_;
            do
              v127 = __ldxr(v126);
            while (__stxr(v127 + 1, v126));
            v128 = (unint64_t *)&v124->__shared_owners_;
            do
              v129 = __ldaxr(v128);
            while (__stlxr(v129 - 1, v128));
            if (!v129)
            {
              ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
              std::__shared_weak_count::__release_weak(v125);
            }
            std::allocate_shared[abi:ne180100]<abm::LogCompressionTask,std::allocator<abm::LogCompressionTask>,abm::helper::TaskID &,std::shared_ptr<ctu::LogServer> &,std::weak_ptr<abm::HelperServerInternal>,void>((std::__shared_weak_count_vtbl **)&block, 5, *(_QWORD *)(v2 + 112), *(std::__shared_weak_count **)(v2 + 120), (uint64_t *)&v272);
            v130 = *((_QWORD *)&block + 1);
            block = 0uLL;
            *((_QWORD *)&v255 + 1) = v130;
            if (*((_QWORD *)&v272 + 1))
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v272 + 1));
            goto LABEL_149;
          case 6:
            v146 = *(std::__shared_weak_count **)(v2 + 80);
            if (!v146 || (v147 = *(_QWORD *)(v2 + 72), (v148 = std::__shared_weak_count::lock(v146)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v149 = v148;
            v150 = (unint64_t *)&v148->__shared_weak_owners_;
            do
              v151 = __ldxr(v150);
            while (__stxr(v151 + 1, v150));
            v152 = (unint64_t *)&v148->__shared_owners_;
            do
              v153 = __ldaxr(v152);
            while (__stlxr(v153 - 1, v152));
            if (!v153)
            {
              ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
              std::__shared_weak_count::__release_weak(v149);
            }
            v154 = *(_QWORD *)(v2 + 112);
            v155 = *(std::__shared_weak_count **)(v2 + 120);
            v156 = (std::__shared_weak_count *)operator new(0xA0uLL);
            v50 = v156;
            v156->__shared_owners_ = 0;
            v157 = (unint64_t *)&v156->__shared_owners_;
            v156->__shared_weak_owners_ = 0;
            v156->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A08030;
            *(_QWORD *)&block = v154;
            *((_QWORD *)&block + 1) = v155;
            if (v155)
            {
              v158 = (unint64_t *)&v155->__shared_owners_;
              do
                v159 = __ldxr(v158);
              while (__stxr(v159 + 1, v158));
            }
            v54 = (std::__shared_weak_count_vtbl *)&v156[1];
            *(_QWORD *)&v272 = v147;
            *((_QWORD *)&v272 + 1) = v149;
            abm::DiagnosticToolsTask::DiagnosticToolsTask(&v156[1].__vftable, 6, (uint64_t *)&block, (uint64_t *)&v272);
            std::__shared_weak_count::__release_weak(v149);
            if (!v155)
              goto LABEL_181;
            v160 = (unint64_t *)&v155->__shared_owners_;
            do
              v161 = __ldaxr(v160);
            while (__stlxr(v161 - 1, v160));
            if (!v161)
            {
              ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
              std::__shared_weak_count::__release_weak(v155);
              v162 = (std::__shared_weak_count *)v50[4].__shared_owners_;
              if (v162)
                goto LABEL_182;
            }
            else
            {
LABEL_181:
              v162 = (std::__shared_weak_count *)v50[4].__shared_owners_;
              if (v162)
              {
LABEL_182:
                if (v162->__shared_owners_ != -1)
                  goto LABEL_282;
                do
                  v163 = __ldxr(v157);
                while (__stxr(v163 + 1, v157));
                v164 = (unint64_t *)&v50->__shared_weak_owners_;
                do
                  v165 = __ldxr(v164);
                while (__stxr(v165 + 1, v164));
                v50[4].__vftable = v54;
                v50[4].__shared_owners_ = (uint64_t)v50;
                std::__shared_weak_count::__release_weak(v162);
                goto LABEL_280;
              }
            }
            do
              v225 = __ldxr(v157);
            while (__stxr(v225 + 1, v157));
            v226 = (unint64_t *)&v50->__shared_weak_owners_;
            do
              v227 = __ldxr(v226);
            while (__stxr(v227 + 1, v226));
            v50[4].__vftable = v54;
            v50[4].__shared_owners_ = (uint64_t)v50;
            do
LABEL_280:
              v228 = __ldaxr(v157);
            while (__stlxr(v228 - 1, v157));
            if (v228)
            {
LABEL_282:
              *(_QWORD *)&v255 = v50 + 1;
              *((_QWORD *)&v255 + 1) = v50;
              goto LABEL_294;
            }
            goto LABEL_326;
          case 7:
            goto LABEL_76;
          case 8:
            goto LABEL_97;
          case 9:
            goto LABEL_118;
          case 10:
            if (!capabilities::abs::supportsCellularLogging((capabilities::abs *)IsInternalBuild))
              goto LABEL_291;
            v166 = *(std::__shared_weak_count **)(v2 + 80);
            if (!v166 || (v167 = *(_QWORD *)(v2 + 72), (v168 = std::__shared_weak_count::lock(v166)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v169 = v168;
            v170 = (unint64_t *)&v168->__shared_weak_owners_;
            do
              v171 = __ldxr(v170);
            while (__stxr(v171 + 1, v170));
            v172 = (unint64_t *)&v168->__shared_owners_;
            do
              v173 = __ldaxr(v172);
            while (__stlxr(v173 - 1, v172));
            if (!v173)
            {
              ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
              std::__shared_weak_count::__release_weak(v169);
            }
            v174 = *(_QWORD *)(v2 + 112);
            v175 = *(std::__shared_weak_count **)(v2 + 120);
            v176 = (std::__shared_weak_count *)operator new(0xE0uLL);
            v177 = v176;
            v176->__shared_owners_ = 0;
            v178 = (unint64_t *)&v176->__shared_owners_;
            v176->__shared_weak_owners_ = 0;
            v176->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A080D0;
            *(_QWORD *)&block = v174;
            *((_QWORD *)&block + 1) = v175;
            if (v175)
            {
              v179 = (unint64_t *)&v175->__shared_owners_;
              do
                v180 = __ldxr(v179);
              while (__stxr(v180 + 1, v179));
            }
            v54 = (std::__shared_weak_count_vtbl *)&v176[1];
            *(_QWORD *)&v272 = v167;
            *((_QWORD *)&v272 + 1) = v169;
            abm::CellularLoggingTask::CellularLoggingTask((uint64_t)&v176[1], 10, (uint64_t *)&block, (uint64_t *)&v272);
            std::__shared_weak_count::__release_weak(v169);
            if (v175)
            {
              v181 = (unint64_t *)&v175->__shared_owners_;
              do
                v182 = __ldaxr(v181);
              while (__stlxr(v182 - 1, v181));
              if (!v182)
              {
                ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                std::__shared_weak_count::__release_weak(v175);
              }
            }
            v183 = (std::__shared_weak_count *)v177[4].__shared_owners_;
            if (v183)
            {
              if (v183->__shared_owners_ != -1)
                goto LABEL_217;
              do
                v184 = __ldxr(v178);
              while (__stxr(v184 + 1, v178));
              v185 = (unint64_t *)&v177->__shared_weak_owners_;
              do
                v186 = __ldxr(v185);
              while (__stxr(v186 + 1, v185));
              v177[4].__vftable = v54;
              v177[4].__shared_owners_ = (uint64_t)v177;
              std::__shared_weak_count::__release_weak(v183);
            }
            else
            {
              do
                v187 = __ldxr(v178);
              while (__stxr(v187 + 1, v178));
              v188 = (unint64_t *)&v177->__shared_weak_owners_;
              do
                v189 = __ldxr(v188);
              while (__stxr(v189 + 1, v188));
              v177[4].__vftable = v54;
              v177[4].__shared_owners_ = (uint64_t)v177;
            }
            do
              v190 = __ldaxr(v178);
            while (__stlxr(v190 - 1, v178));
            if (!v190)
            {
              ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
              std::__shared_weak_count::__release_weak(v177);
            }
LABEL_217:
            *(_QWORD *)&v255 = v177 + 1;
            *((_QWORD *)&v255 + 1) = v177;
            goto LABEL_294;
          default:
            goto LABEL_291;
        }
      }
      switch(v37)
      {
        case 4:
LABEL_228:
          v200 = *(std::__shared_weak_count **)(v2 + 80);
          if (!v200 || (v201 = *(_QWORD *)(v2 + 72), (v202 = std::__shared_weak_count::lock(v200)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v203 = v202;
          *(_QWORD *)&v272 = v201;
          *((_QWORD *)&v272 + 1) = v202;
          v204 = (unint64_t *)&v202->__shared_weak_owners_;
          do
            v205 = __ldxr(v204);
          while (__stxr(v205 + 1, v204));
          v206 = (unint64_t *)&v202->__shared_owners_;
          do
            v207 = __ldaxr(v206);
          while (__stlxr(v207 - 1, v206));
          if (!v207)
          {
            ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
            std::__shared_weak_count::__release_weak(v203);
          }
          std::allocate_shared[abi:ne180100]<abm::SystemLogsTask,std::allocator<abm::SystemLogsTask>,abm::helper::TaskID &,std::shared_ptr<ctu::LogServer> &,std::weak_ptr<abm::HelperServerInternal>,void>((std::__shared_weak_count_vtbl **)&block, v37, *(_QWORD *)(v2 + 112), *(std::__shared_weak_count **)(v2 + 120), (uint64_t *)&v272);
          v208 = block;
          block = 0uLL;
          v209 = (std::__shared_weak_count *)*((_QWORD *)&v255 + 1);
          v255 = v208;
          if (v209)
          {
            v210 = (unint64_t *)&v209->__shared_owners_;
            do
              v211 = __ldaxr(v210);
            while (__stlxr(v211 - 1, v210));
            if (!v211)
            {
              ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
              std::__shared_weak_count::__release_weak(v209);
            }
          }
          v143 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
          if (!*((_QWORD *)&block + 1))
            goto LABEL_246;
          v212 = (unint64_t *)(*((_QWORD *)&block + 1) + 8);
          do
            v145 = __ldaxr(v212);
          while (__stlxr(v145 - 1, v212));
          goto LABEL_244;
        case 5:
LABEL_149:
          v131 = *(std::__shared_weak_count **)(v2 + 80);
          if (!v131 || (v132 = *(_QWORD *)(v2 + 72), (v133 = std::__shared_weak_count::lock(v131)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v134 = v133;
          *(_QWORD *)&v272 = v132;
          *((_QWORD *)&v272 + 1) = v133;
          v135 = (unint64_t *)&v133->__shared_weak_owners_;
          do
            v136 = __ldxr(v135);
          while (__stxr(v136 + 1, v135));
          v137 = (unint64_t *)&v133->__shared_owners_;
          do
            v138 = __ldaxr(v137);
          while (__stlxr(v138 - 1, v137));
          if (!v138)
          {
            ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
            std::__shared_weak_count::__release_weak(v134);
          }
          std::allocate_shared[abi:ne180100]<abm::LogCompressionTask,std::allocator<abm::LogCompressionTask>,abm::helper::TaskID &,std::shared_ptr<ctu::LogServer> &,std::weak_ptr<abm::HelperServerInternal>,void>((std::__shared_weak_count_vtbl **)&block, v37, *(_QWORD *)(v2 + 112), *(std::__shared_weak_count **)(v2 + 120), (uint64_t *)&v272);
          v139 = block;
          block = 0uLL;
          v140 = (std::__shared_weak_count *)*((_QWORD *)&v255 + 1);
          v255 = v139;
          if (v140)
          {
            v141 = (unint64_t *)&v140->__shared_owners_;
            do
              v142 = __ldaxr(v141);
            while (__stlxr(v142 - 1, v141));
            if (!v142)
            {
              ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
              std::__shared_weak_count::__release_weak(v140);
            }
          }
          v143 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
          if (*((_QWORD *)&block + 1))
          {
            v144 = (unint64_t *)(*((_QWORD *)&block + 1) + 8);
            do
              v145 = __ldaxr(v144);
            while (__stlxr(v145 - 1, v144));
LABEL_244:
            if (!v145)
            {
              ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
              std::__shared_weak_count::__release_weak(v143);
            }
          }
LABEL_246:
          if (!*((_QWORD *)&v272 + 1))
            goto LABEL_291;
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v272 + 1));
          v54 = (std::__shared_weak_count_vtbl *)v255;
          if ((_QWORD)v255)
            goto LABEL_294;
          goto LABEL_317;
        case 7:
LABEL_76:
          v61 = *(std::__shared_weak_count **)(v2 + 80);
          if (!v61 || (v62 = *(_QWORD *)(v2 + 72), (v63 = std::__shared_weak_count::lock(v61)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v64 = v63;
          v65 = (unint64_t *)&v63->__shared_weak_owners_;
          do
            v66 = __ldxr(v65);
          while (__stxr(v66 + 1, v65));
          v67 = (unint64_t *)&v63->__shared_owners_;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v64);
          }
          v69 = *(_QWORD *)(v2 + 112);
          v70 = *(std::__shared_weak_count **)(v2 + 120);
          v71 = (std::__shared_weak_count *)operator new(0xA8uLL);
          v50 = v71;
          v71->__shared_owners_ = 0;
          v72 = (unint64_t *)&v71->__shared_owners_;
          v71->__shared_weak_owners_ = 0;
          v71->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A08120;
          *(_QWORD *)&block = v69;
          *((_QWORD *)&block + 1) = v70;
          if (v70)
          {
            v73 = (unint64_t *)&v70->__shared_owners_;
            do
              v74 = __ldxr(v73);
            while (__stxr(v74 + 1, v73));
          }
          v54 = (std::__shared_weak_count_vtbl *)&v71[1];
          *(_QWORD *)&v272 = v62;
          *((_QWORD *)&v272 + 1) = v64;
          abm::LogManagementTask::LogManagementTask(&v71[1].__vftable, v37, (uint64_t *)&block, (uint64_t *)&v272);
          std::__shared_weak_count::__release_weak(v64);
          if (!v70)
            goto LABEL_91;
          v75 = (unint64_t *)&v70->__shared_owners_;
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
            v77 = (std::__shared_weak_count *)v50[4].__shared_owners_;
            if (v77)
              goto LABEL_92;
          }
          else
          {
LABEL_91:
            v77 = (std::__shared_weak_count *)v50[4].__shared_owners_;
            if (v77)
            {
LABEL_92:
              if (v77->__shared_owners_ != -1)
                goto LABEL_255;
              do
                v78 = __ldxr(v72);
              while (__stxr(v78 + 1, v72));
              v79 = (unint64_t *)&v50->__shared_weak_owners_;
              do
                v80 = __ldxr(v79);
              while (__stxr(v80 + 1, v79));
              v50[4].__vftable = v54;
              v50[4].__shared_owners_ = (uint64_t)v50;
              std::__shared_weak_count::__release_weak(v77);
              goto LABEL_253;
            }
          }
          do
            v213 = __ldxr(v72);
          while (__stxr(v213 + 1, v72));
          v214 = (unint64_t *)&v50->__shared_weak_owners_;
          do
            v215 = __ldxr(v214);
          while (__stxr(v215 + 1, v214));
          v50[4].__vftable = v54;
          v50[4].__shared_owners_ = (uint64_t)v50;
          do
LABEL_253:
            v216 = __ldaxr(v72);
          while (__stlxr(v216 - 1, v72));
          if (v216)
          {
LABEL_255:
            *(_QWORD *)&v255 = v50 + 1;
            *((_QWORD *)&v255 + 1) = v50;
            goto LABEL_294;
          }
          goto LABEL_326;
        case 8:
LABEL_97:
          v81 = *(std::__shared_weak_count **)(v2 + 80);
          if (!v81 || (v82 = *(_QWORD *)(v2 + 72), (v83 = std::__shared_weak_count::lock(v81)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v84 = v83;
          v85 = (unint64_t *)&v83->__shared_weak_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
          v87 = (unint64_t *)&v83->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v84);
          }
          v89 = *(_QWORD *)(v2 + 112);
          v90 = *(std::__shared_weak_count **)(v2 + 120);
          v91 = (std::__shared_weak_count *)operator new(0xB0uLL);
          v50 = v91;
          v91->__shared_owners_ = 0;
          v92 = (unint64_t *)&v91->__shared_owners_;
          v91->__shared_weak_owners_ = 0;
          v91->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A08170;
          *(_QWORD *)&block = v89;
          *((_QWORD *)&block + 1) = v90;
          if (v90)
          {
            v93 = (unint64_t *)&v90->__shared_owners_;
            do
              v94 = __ldxr(v93);
            while (__stxr(v94 + 1, v93));
          }
          v54 = (std::__shared_weak_count_vtbl *)&v91[1];
          *(_QWORD *)&v272 = v82;
          *((_QWORD *)&v272 + 1) = v84;
          abm::ProfileManagementTask::ProfileManagementTask(&v91[1].__vftable, v37, (uint64_t *)&block, (uint64_t *)&v272);
          std::__shared_weak_count::__release_weak(v84);
          if (!v90)
            goto LABEL_112;
          v95 = (unint64_t *)&v90->__shared_owners_;
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
            v97 = (std::__shared_weak_count *)v50[4].__shared_owners_;
            if (v97)
              goto LABEL_113;
          }
          else
          {
LABEL_112:
            v97 = (std::__shared_weak_count *)v50[4].__shared_owners_;
            if (v97)
            {
LABEL_113:
              if (v97->__shared_owners_ != -1)
                goto LABEL_263;
              do
                v98 = __ldxr(v92);
              while (__stxr(v98 + 1, v92));
              v99 = (unint64_t *)&v50->__shared_weak_owners_;
              do
                v100 = __ldxr(v99);
              while (__stxr(v100 + 1, v99));
              v50[4].__vftable = v54;
              v50[4].__shared_owners_ = (uint64_t)v50;
              std::__shared_weak_count::__release_weak(v97);
              goto LABEL_261;
            }
          }
          do
            v217 = __ldxr(v92);
          while (__stxr(v217 + 1, v92));
          v218 = (unint64_t *)&v50->__shared_weak_owners_;
          do
            v219 = __ldxr(v218);
          while (__stxr(v219 + 1, v218));
          v50[4].__vftable = v54;
          v50[4].__shared_owners_ = (uint64_t)v50;
          do
LABEL_261:
            v220 = __ldaxr(v92);
          while (__stlxr(v220 - 1, v92));
          if (v220)
          {
LABEL_263:
            *(_QWORD *)&v255 = v50 + 1;
            *((_QWORD *)&v255 + 1) = v50;
            goto LABEL_294;
          }
          goto LABEL_326;
        case 9:
LABEL_118:
          v101 = *(std::__shared_weak_count **)(v2 + 80);
          if (!v101 || (v102 = *(_QWORD *)(v2 + 72), (v103 = std::__shared_weak_count::lock(v101)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v104 = v103;
          v105 = (unint64_t *)&v103->__shared_weak_owners_;
          do
            v106 = __ldxr(v105);
          while (__stxr(v106 + 1, v105));
          v107 = (unint64_t *)&v103->__shared_owners_;
          do
            v108 = __ldaxr(v107);
          while (__stlxr(v108 - 1, v107));
          if (!v108)
          {
            ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
            std::__shared_weak_count::__release_weak(v104);
          }
          v109 = *(_QWORD *)(v2 + 112);
          v110 = *(std::__shared_weak_count **)(v2 + 120);
          v111 = (std::__shared_weak_count *)operator new(0x150uLL);
          v112 = v111;
          v111->__shared_owners_ = 0;
          v113 = (unint64_t *)&v111->__shared_owners_;
          v111->__shared_weak_owners_ = 0;
          v111->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A081C0;
          *(_QWORD *)&block = v109;
          *((_QWORD *)&block + 1) = v110;
          if (v110)
          {
            v114 = (unint64_t *)&v110->__shared_owners_;
            do
              v115 = __ldxr(v114);
            while (__stxr(v115 + 1, v114));
          }
          v54 = (std::__shared_weak_count_vtbl *)&v111[1];
          *(_QWORD *)&v272 = v102;
          *((_QWORD *)&v272 + 1) = v104;
          abm::BasebandTracingTask::BasebandTracingTask((uint64_t)&v111[1], v37, (uint64_t *)&block, (uint64_t *)&v272);
          std::__shared_weak_count::__release_weak(v104);
          if (!v110)
            goto LABEL_133;
          v116 = (unint64_t *)&v110->__shared_owners_;
          do
            v117 = __ldaxr(v116);
          while (__stlxr(v117 - 1, v116));
          if (!v117)
          {
            ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
            std::__shared_weak_count::__release_weak(v110);
            v118 = (std::__shared_weak_count *)v112[4].__shared_owners_;
            if (!v118)
            {
              do
LABEL_265:
                v221 = __ldxr(v113);
              while (__stxr(v221 + 1, v113));
              v222 = (unint64_t *)&v112->__shared_weak_owners_;
              do
                v223 = __ldxr(v222);
              while (__stxr(v223 + 1, v222));
              v112[4].__vftable = v54;
              v112[4].__shared_owners_ = (uint64_t)v112;
              goto LABEL_269;
            }
          }
          else
          {
LABEL_133:
            v118 = (std::__shared_weak_count *)v112[4].__shared_owners_;
            if (!v118)
              goto LABEL_265;
          }
          if (v118->__shared_owners_ != -1)
            goto LABEL_271;
          do
            v119 = __ldxr(v113);
          while (__stxr(v119 + 1, v113));
          v120 = (unint64_t *)&v112->__shared_weak_owners_;
          do
            v121 = __ldxr(v120);
          while (__stxr(v121 + 1, v120));
          v112[4].__vftable = v54;
          v112[4].__shared_owners_ = (uint64_t)v112;
          std::__shared_weak_count::__release_weak(v118);
          do
LABEL_269:
            v224 = __ldaxr(v113);
          while (__stlxr(v224 - 1, v113));
          if (v224)
          {
LABEL_271:
            *(_QWORD *)&v255 = v112 + 1;
            *((_QWORD *)&v255 + 1) = v112;
            goto LABEL_294;
          }
          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
          std::__shared_weak_count::__release_weak(v112);
          *(_QWORD *)&v255 = v112 + 1;
          *((_QWORD *)&v255 + 1) = v112;
LABEL_294:
          *(_QWORD *)&v272 = MEMORY[0x1E0C809B0];
          *((_QWORD *)&v272 + 1) = 0x40000000;
          v273 = ___ZN3abm10HelperTask4initEv_block_invoke;
          v274 = &__block_descriptor_tmp_26;
          v275 = v54;
          v264 = &v272;
          *(_QWORD *)&block = MEMORY[0x1E0C809B0];
          *((_QWORD *)&block + 1) = 0x40000000;
          v277 = ___ZNK3ctu20SharedSynchronizableIN3abm10HelperTaskEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
          v278 = &__block_descriptor_tmp_9_5;
          p_on_zero_shared_weak = &v54[1].__on_zero_shared_weak;
          v280 = &v264;
          v233 = v54[2].~__shared_weak_count_0;
          if (v54[2].__on_zero_shared)
          {
            dispatch_async_and_wait(v233, &block);
            v234 = *v36;
            v235 = (uint64_t **)(v2 + 152);
            v236 = (uint64_t **)(v2 + 152);
            if (*v36)
              goto LABEL_300;
LABEL_304:
            v238 = operator new(0x38uLL);
            *((_DWORD *)v238 + 8) = v37;
            *((_QWORD *)v238 + 5) = 0;
            *((_QWORD *)v238 + 6) = 0;
            *(_QWORD *)v238 = 0;
            *((_QWORD *)v238 + 1) = 0;
            *((_QWORD *)v238 + 2) = v236;
            *v235 = (uint64_t *)v238;
            v239 = **(_QWORD **)(v2 + 144);
            v240 = (uint64_t *)v238;
            if (v239)
            {
              *(_QWORD *)(v2 + 144) = v239;
              v240 = *v235;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 152), v240);
            ++*(_QWORD *)(v2 + 160);
            v241 = *((_QWORD *)&v255 + 1);
            v54 = (std::__shared_weak_count_vtbl *)v255;
            if (*((_QWORD *)&v255 + 1))
              goto LABEL_309;
            goto LABEL_311;
          }
          dispatch_sync(v233, &block);
          v234 = *v36;
          v235 = (uint64_t **)(v2 + 152);
          v236 = (uint64_t **)(v2 + 152);
          if (!*v36)
            goto LABEL_304;
          while (1)
          {
LABEL_300:
            while (1)
            {
              v236 = (uint64_t **)v234;
              v237 = *((_DWORD *)v234 + 8);
              if (v37 >= v237)
                break;
              v234 = *v236;
              v235 = v236;
              if (!*v236)
                goto LABEL_304;
            }
            if (v237 >= v37)
              break;
            v234 = v236[1];
            if (!v234)
            {
              v235 = v236 + 1;
              goto LABEL_304;
            }
          }
          v238 = v236;
          v241 = *((_QWORD *)&v255 + 1);
          if (*((_QWORD *)&v255 + 1))
          {
LABEL_309:
            v242 = (unint64_t *)(v241 + 8);
            do
              v243 = __ldxr(v242);
            while (__stxr(v243 + 1, v242));
          }
LABEL_311:
          v244 = (std::__shared_weak_count *)*((_QWORD *)v238 + 6);
          *((_QWORD *)v238 + 5) = v54;
          *((_QWORD *)v238 + 6) = v241;
          if (v244)
          {
            v245 = (unint64_t *)&v244->__shared_owners_;
            do
              v246 = __ldaxr(v245);
            while (__stlxr(v246 - 1, v245));
            if (!v246)
            {
              ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
              std::__shared_weak_count::__release_weak(v244);
            }
          }
          v247 = *(NSObject **)(v2 + 40);
          if (os_log_type_enabled(v247, OS_LOG_TYPE_DEBUG))
          {
            v251 = "invalid";
            if ((v37 - 1) <= 9)
              v251 = off_1E4A08258[v37 - 1];
            LODWORD(block) = 136315138;
            *(_QWORD *)((char *)&block + 4) = v251;
            _os_log_debug_impl(&dword_1A343C000, v247, OS_LOG_TYPE_DEBUG, "#D Task: %s added", (uint8_t *)&block, 0xCu);
            v248 = (std::__shared_weak_count *)*((_QWORD *)&v255 + 1);
            if (!*((_QWORD *)&v255 + 1))
              goto LABEL_50;
LABEL_318:
            v249 = (unint64_t *)&v248->__shared_owners_;
            do
              v250 = __ldaxr(v249);
            while (__stlxr(v250 - 1, v249));
            if (!v250)
            {
              ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
              std::__shared_weak_count::__release_weak(v248);
            }
            goto LABEL_50;
          }
LABEL_317:
          v248 = (std::__shared_weak_count *)*((_QWORD *)&v255 + 1);
          if (*((_QWORD *)&v255 + 1))
            goto LABEL_318;
LABEL_50:
          if (++v35 == v254)
            goto LABEL_327;
          break;
        default:
LABEL_291:
          v54 = (std::__shared_weak_count_vtbl *)v255;
          if (!(_QWORD)v255)
            goto LABEL_317;
          goto LABEL_294;
      }
    }
  }
LABEL_327:
  if (v257)
    std::__shared_weak_count::__release_weak(v257);
  *(_QWORD *)buf = *MEMORY[0x1E0DE4F50];
  v252 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v266[0] = v252;
  *((_QWORD *)&v266[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v268) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A858F92C](v270);
  v6 = v263[0];
  if (v263[0])
  {
LABEL_332:
    v263[1] = v6;
    operator delete(v6);
  }
}

void sub_1A347EA90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,char a22,uint64_t a23,char a24,uint64_t a25,xpc_object_t object,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,xpc_object_t a31)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_DWORD *std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str[abi:ne180100]@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  const void *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = result[30];
  if ((v3 & 0x10) != 0)
  {
    v4 = *((_QWORD *)result + 14);
    v5 = *((_QWORD *)result + 9);
    if (v4 < v5)
    {
      *((_QWORD *)result + 14) = v5;
      v4 = v5;
    }
    v6 = (const void *)*((_QWORD *)result + 8);
    v7 = v4 - (_QWORD)v6;
    if (v4 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_16;
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      a2[23] = 0;
LABEL_4:
      *a2 = 0;
      return result;
    }
    v6 = (const void *)*((_QWORD *)result + 5);
    v7 = *((_QWORD *)result + 7) - (_QWORD)v6;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_16:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v7 >= 0x17)
  {
    v8 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v8 = v7 | 7;
    v9 = v8 + 1;
    v10 = operator new(v8 + 1);
    *((_QWORD *)a2 + 1) = v7;
    *((_QWORD *)a2 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a2 = v10;
    a2 = v10;
  }
  else
  {
    a2[23] = v7;
    if (!v7)
      goto LABEL_4;
  }
  result = memmove(a2, v6, v7);
  a2[v7] = 0;
  return result;
}

void ___ZN3abm20HelperServerInternal4initEv_block_invoke_5(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t buf[4];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315138;
          v10 = TelephonyXPC::Server::asString();
          _os_log_debug_impl(&dword_1A343C000, v6, OS_LOG_TYPE_DEBUG, "#D Server status: %s", buf, 0xCu);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1A347EE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c51_ZTSNSt3__18weak_ptrIN3abm20HelperServerInternalEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c51_ZTSNSt3__18weak_ptrIN3abm20HelperServerInternalEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t dispatch::callback<void({block_pointer})(TelephonyXPC::Server::ServerStatus)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void abm::HelperServerInternal::start(abm::HelperServerInternal *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN3abm20HelperServerInternal5startEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_9_0;
  v1[4] = this;
  ctu::SharedSynchronizable<abm::HelperServerInternal>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN3abm20HelperServerInternal5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  TelephonyXPC::Server *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  NSObject *v11;
  NSObject *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(TelephonyXPC::Server **)(v1 + 128);
  if (v2)
  {
    TelephonyXPC::Server::start(v2);
    v3 = *(_QWORD **)(v1 + 144);
    v4 = (_QWORD *)(v1 + 152);
    if (v3 != (_QWORD *)(v1 + 152))
    {
      v5 = MEMORY[0x1E0C809B0];
      do
      {
        v6 = v3[5];
        v7 = (std::__shared_weak_count *)v3[6];
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldxr(p_shared_owners);
          while (__stxr(v9 + 1, p_shared_owners));
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        if (v6)
        {
          v11 = *(NSObject **)(v6 + 112);
          v12 = *(NSObject **)(v6 + 88);
          block[0] = v5;
          block[1] = 0x40000000;
          block[2] = ___ZN3abm10HelperTask5startEv_block_invoke;
          block[3] = &__block_descriptor_tmp_5_5;
          block[4] = v6;
          dispatch_group_notify(v11, v12, block);
        }
        if (!v7)
          goto LABEL_18;
        v13 = (unint64_t *)&v7->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        do
          v15 = __ldaxr(v13);
        while (__stlxr(v15 - 1, v13));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
          v16 = (_QWORD *)v3[1];
          if (!v16)
          {
            do
            {
LABEL_22:
              v17 = (_QWORD *)v3[2];
              v18 = *v17 == (_QWORD)v3;
              v3 = v17;
            }
            while (!v18);
            goto LABEL_4;
          }
        }
        else
        {
LABEL_18:
          v16 = (_QWORD *)v3[1];
          if (!v16)
            goto LABEL_22;
        }
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
LABEL_4:
        v3 = v17;
      }
      while (v17 != v4);
    }
  }
}

uint64_t abm::HelperServerInternal::isBusy(abm::HelperServerInternal *this)
{
  NSObject *v1;
  char *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  _QWORD block[6];

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN3abm20HelperServerInternal6isBusyEv_block_invoke;
  v5[3] = &unk_1E4A07D40;
  v5[4] = &v6;
  v5[5] = this;
  v10 = v5;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3abm20HelperServerInternalEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_20;
  block[4] = (char *)this + 72;
  block[5] = &v10;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
  v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void ___ZN3abm20HelperServerInternal6isBusyEv_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  NSObject *v10;
  dispatch_time_t v11;
  BOOL v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;

  v1 = *(_QWORD **)(a1 + 40);
  if (!v1[16])
    return;
  v2 = (_QWORD *)v1[18];
  v3 = v1 + 19;
  if (v2 == v1 + 19)
    return;
  while (1)
  {
    v5 = v2[5];
    v6 = (std::__shared_weak_count *)v2[6];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    if (v5)
    {
      v10 = *(NSObject **)(v5 + 112);
      if (v10)
      {
        v11 = dispatch_time(0, 5000000);
        v12 = dispatch_group_wait(v10, v11) != 0;
      }
      else
      {
        v12 = 0;
      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v12;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
        break;
    }
    if (!v6)
      goto LABEL_21;
    v13 = (unint64_t *)&v6->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      v16 = (_QWORD *)v2[1];
      if (!v16)
      {
        do
        {
LABEL_25:
          v17 = (_QWORD *)v2[2];
          v18 = *v17 == (_QWORD)v2;
          v2 = v17;
        }
        while (!v18);
        goto LABEL_4;
      }
    }
    else
    {
LABEL_21:
      v16 = (_QWORD *)v2[1];
      if (!v16)
        goto LABEL_25;
    }
    do
    {
      v17 = v16;
      v16 = (_QWORD *)*v16;
    }
    while (v16);
LABEL_4:
    v2 = v17;
    if (v17 == v3)
      return;
  }
  if (v6)
  {
    v19 = (unint64_t *)&v6->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void abm::HelperServerInternal::stop(abm::HelperServerInternal *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN3abm20HelperServerInternal4stopEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_13_1;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3abm20HelperServerInternalEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_20;
  block[4] = (char *)this + 72;
  block[5] = &v4;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void ___ZN3abm20HelperServerInternal4stopEv_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  NSObject *v10;
  NSObject *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD v18[5];
  _QWORD *v19;
  _QWORD block[6];

  v1 = *(_QWORD **)(a1 + 32);
  if (v1[16])
  {
    v2 = (_QWORD *)v1[18];
    v3 = v1 + 19;
    if (v2 != v1 + 19)
    {
      v4 = MEMORY[0x1E0C809B0];
      do
      {
        v6 = (_QWORD *)v2[5];
        v5 = (std::__shared_weak_count *)v2[6];
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v8 = __ldxr(p_shared_owners);
          while (__stxr(v8 + 1, p_shared_owners));
          do
            v9 = __ldxr(p_shared_owners);
          while (__stxr(v9 + 1, p_shared_owners));
        }
        if (!v6)
          goto LABEL_13;
        v18[0] = v4;
        v18[1] = 0x40000000;
        v18[2] = ___ZN3abm10HelperTask4stopEv_block_invoke;
        v18[3] = &__block_descriptor_tmp_7_9;
        v18[4] = v6;
        v19 = v18;
        block[0] = v4;
        block[1] = 0x40000000;
        block[2] = ___ZNK3ctu20SharedSynchronizableIN3abm10HelperTaskEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
        block[3] = &__block_descriptor_tmp_9_5;
        block[4] = v6 + 9;
        block[5] = &v19;
        v10 = v6[11];
        if (v6[12])
        {
          dispatch_async_and_wait(v10, block);
          v11 = v6[14];
          if (v11)
            goto LABEL_12;
        }
        else
        {
          dispatch_sync(v10, block);
          v11 = v6[14];
          if (v11)
          {
LABEL_12:
            dispatch_retain(v11);
            dispatch_group_wait(v11, 0xFFFFFFFFFFFFFFFFLL);
            dispatch_release(v11);
LABEL_13:
            if (v5)
              goto LABEL_14;
            goto LABEL_23;
          }
        }
        dispatch_group_wait(0, 0xFFFFFFFFFFFFFFFFLL);
        if (v5)
        {
LABEL_14:
          v12 = (unint64_t *)&v5->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
          do
            v14 = __ldaxr(v12);
          while (__stlxr(v14 - 1, v12));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
LABEL_23:
        v15 = (_QWORD *)v2[1];
        if (v15)
        {
          do
          {
            v16 = v15;
            v15 = (_QWORD *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v16 = (_QWORD *)v2[2];
            v17 = *v16 == (_QWORD)v2;
            v2 = v16;
          }
          while (!v17);
        }
        v2 = v16;
      }
      while (v16 != v3);
    }
  }
}

void abm::HelperServerInternal::setCommandHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t *v6;
  NSObject *v7;
  _QWORD v8[5];
  std::string __p;
  void *aBlock;
  dispatch_object_t object;

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v8[2] = ___ZN3abm20HelperServerInternal17setCommandHandlerENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC17ServerClientStateEN3xpc4dictENS9_IU13block_pointerFviSD_EEEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_14_1;
  v8[4] = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v5 = *(void **)a3;
    if (!*(_QWORD *)a3)
      goto LABEL_6;
    goto LABEL_5;
  }
  __p = *(std::string *)a2;
  v5 = *(void **)a3;
  if (*(_QWORD *)a3)
LABEL_5:
    v5 = _Block_copy(v5);
LABEL_6:
  v6 = (uint64_t *)(a1 + 72);
  v7 = *(NSObject **)(a3 + 8);
  aBlock = v5;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  ctu::SharedSynchronizable<abm::HelperServerInternal>::execute_wrapped(v6, (uint64_t)v8);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void ___ZN3abm20HelperServerInternal17setCommandHandlerENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC17ServerClientStateEN3xpc4dictENS9_IU13block_pointerFviSD_EEEEEE_block_invoke(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  void *aBlock;
  NSObject *object;
  std::string v6;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 128))
    return;
  if ((*(char *)(a1 + 63) & 0x80000000) == 0)
  {
    v6 = *(std::string *)(a1 + 40);
    v2 = *(void **)(a1 + 64);
    if (!v2)
      goto LABEL_7;
    goto LABEL_6;
  }
  std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
  v2 = *(void **)(a1 + 64);
  if (v2)
LABEL_6:
    v2 = _Block_copy(v2);
LABEL_7:
  v3 = *(NSObject **)(a1 + 72);
  aBlock = v2;
  object = v3;
  if (v3)
    dispatch_retain(v3);
  TelephonyXPC::Server::setCommandHandler();
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_1A347F77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::ServerClientState,xpc::dict,dispatch::callback<void({block_pointer})(int,xpc::dict)>)>::~callback((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c121_ZTSN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC17ServerClientStateEN3xpc4dictENS0_IU13block_pointerFviS4_EEEEEE(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  void *v6;
  NSObject *v7;

  v4 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
    v6 = *(void **)(a2 + 64);
    if (!v6)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = *(_OWORD *)(a2 + 40);
  v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
  *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  v6 = *(void **)(a2 + 64);
  if (v6)
LABEL_5:
    v6 = _Block_copy(v6);
LABEL_6:
  v7 = *(NSObject **)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 72) = v7;
  if (v7)
    dispatch_retain(v7);
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c121_ZTSN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC17ServerClientStateEN3xpc4dictENS0_IU13block_pointerFviS4_EEEEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 72);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 64);
  if (v3)
    _Block_release(v3);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void abm::HelperServerInternal::sendCommandToBasebandManager(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  void *v6;
  _QWORD v7[6];
  std::string __p;
  xpc_object_t object;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN3abm20HelperServerInternal28sendCommandToBasebandManagerENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN3xpc4dictEU13block_pointerFvN12TelephonyXPC6ResultEPvE_block_invoke;
  v7[3] = &unk_1E4A07DF0;
  v7[4] = a4;
  v7[5] = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v6 = *a3;
    object = v6;
    if (v6)
      goto LABEL_3;
  }
  else
  {
    __p = *(std::string *)a2;
    v6 = *a3;
    object = v6;
    if (v6)
    {
LABEL_3:
      xpc_retain(v6);
      goto LABEL_6;
    }
  }
  object = xpc_null_create();
LABEL_6:
  ctu::SharedSynchronizable<abm::HelperServerInternal>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v7);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void ___ZN3abm20HelperServerInternal28sendCommandToBasebandManagerENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN3xpc4dictEU13block_pointerFvN12TelephonyXPC6ResultEPvE_block_invoke()
{
  unint64_t v0;
  uint64_t *p_shared_owners;
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  char v9[24];
  unint64_t v10;
  std::__shared_weak_count *v11;

  v10 = 0xAAAAAAAAAAAAAAAALL;
  v11 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v9[23] = 12;
  strcpy(v9, "helperserver");
  abm::client::CreateManager();
  do
    v0 = __ldxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stxr(v0 + 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  p_shared_owners = &v11->__shared_owners_;
  do
    v2 = __ldxr((unint64_t *)p_shared_owners);
  while (__stxr(v2 + 1, (unint64_t *)p_shared_owners));
  abm::client::PerformCommand();
  v3 = &v11->__shared_owners_;
  do
    v4 = __ldaxr((unint64_t *)v3);
  while (__stlxr(v4 - 1, (unint64_t *)v3));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  v5 = &v11->__shared_owners_;
  do
    v6 = __ldaxr((unint64_t *)v5);
  while (__stlxr(v6 - 1, (unint64_t *)v5));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  v7 = &v11->__shared_owners_;
  do
    v8 = __ldaxr((unint64_t *)v7);
  while (__stlxr(v8 - 1, (unint64_t *)v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_1A347FB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v10 - 32);
  _Unwind_Resume(a1);
}

void sub_1A347FB5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 33) < 0)
    operator delete(*(void **)(v1 - 56));
  _Unwind_Resume(exception_object);
}

void ___ZN3abm20HelperServerInternal28sendCommandToBasebandManagerENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN3xpc4dictEU13block_pointerFvN12TelephonyXPC6ResultEPvE_block_invoke_2(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  int v5;
  std::string __p;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v5 = *a2;
    if (*((char *)a2 + 31) < 0)
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
    else
      __p = *(std::string *)(a2 + 2);
    (*(void (**)(uint64_t, int *, uint64_t))(v3 + 16))(v3, &v5, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1A347FC14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrIN3abm6client7ManagerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrIN3abm6client7ManagerEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

xpc_object_t __copy_helper_block_e8_48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c15_ZTSN3xpc4dictE(std::string *a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  void *v6;
  xpc_object_t result;

  v4 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
    v6 = *(void **)(a2 + 72);
    a1[3].__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    if (v6)
      return xpc_retain(v6);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 48);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    v6 = *(void **)(a2 + 72);
    a1[3].__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    if (v6)
      return xpc_retain(v6);
  }
  result = xpc_null_create();
  a1[3].__r_.__value_.__r.__words[0] = (std::string::size_type)result;
  return result;
}

void __destroy_helper_block_e8_48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 72));
  *(_QWORD *)(a1 + 72) = 0;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

uint64_t abm::HelperServerInternal::getRunLoop(abm::HelperServerInternal *this)
{
  return *((_QWORD *)this + 21);
}

uint64_t ctu::Loggable<abm::HelperServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<abm::HelperServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(abm::HelperServerInternal *a1@<X0>, std::string *a2@<X8>)
{
  abm::HelperServerInternal::getName(a1);
  if (byte_1ED114A07 < 0)
  {
    std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)xmmword_1ED1149F0, *((std::string::size_type *)&xmmword_1ED1149F0 + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = xmmword_1ED1149F0;
    a2->__r_.__value_.__r.__words[2] = unk_1ED114A00;
  }
}

uint64_t ctu::Loggable<abm::HelperServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<abm::HelperServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E4A07EC0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<abm::HelperServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E4A07EC0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<abm::HelperServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1A347FF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1A347FF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<abm::HelperServerInternal>::shared_ptr[abi:ne180100]<abm::HelperServerInternal,std::shared_ptr<abm::HelperServerInternal> ctu::SharedSynchronizable<abm::HelperServerInternal>::make_shared_ptr<abm::HelperServerInternal>(abm::HelperServerInternal*)::{lambda(abm::HelperServerInternal*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A07F00;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1A348007C(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<abm::HelperServerInternal> ctu::SharedSynchronizable<abm::HelperServerInternal>::make_shared_ptr<abm::HelperServerInternal>(abm::HelperServerInternal*)::{lambda(abm::HelperServerInternal*)#1}::operator() const(abm::HelperServerInternal*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1A348009C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<abm::HelperServerInternal *,std::shared_ptr<abm::HelperServerInternal> ctu::SharedSynchronizable<abm::HelperServerInternal>::make_shared_ptr<abm::HelperServerInternal>(abm::HelperServerInternal*)::{lambda(abm::HelperServerInternal *)#1},std::allocator<abm::HelperServerInternal>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<abm::HelperServerInternal *,std::shared_ptr<abm::HelperServerInternal> ctu::SharedSynchronizable<abm::HelperServerInternal>::make_shared_ptr<abm::HelperServerInternal>(abm::HelperServerInternal*)::{lambda(abm::HelperServerInternal *)#1},std::allocator<abm::HelperServerInternal>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<abm::HelperServerInternal> ctu::SharedSynchronizable<abm::HelperServerInternal>::make_shared_ptr<abm::HelperServerInternal>(abm::HelperServerInternal*)::{lambda(abm::HelperServerInternal*)#1}::operator() const(abm::HelperServerInternal*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<abm::HelperServerInternal *,std::shared_ptr<abm::HelperServerInternal> ctu::SharedSynchronizable<abm::HelperServerInternal>::make_shared_ptr<abm::HelperServerInternal>(abm::HelperServerInternal*)::{lambda(abm::HelperServerInternal *)#1},std::allocator<abm::HelperServerInternal>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN3abm20HelperServerInternalEE15make_shared_ptrIS2_EENSt3__110shared_pt"
                     "rIT_EEPS7_EUlPS2_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN3abm20HelperServerInternalEE15make_shared_ptrIS2_EENSt3__1"
                                "10shared_ptrIT_EEPS7_EUlPS2_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN3abm20HelperServerInternalEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN3abm20HelperServerInternalEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<abm::HelperServerInternal> ctu::SharedSynchronizable<abm::HelperServerInternal>::make_shared_ptr<abm::HelperServerInternal>(abm::HelperServerInternal*)::{lambda(abm::HelperServerInternal*)#1}::operator() const(abm::HelperServerInternal*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedLoggable<abm::HelperServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E4A07EC0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void std::__tree<std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>,std::__map_value_compare<abm::helper::TaskID,std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>,std::less<abm::helper::TaskID>,true>,std::allocator<std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>>>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    std::__tree<std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>,std::__map_value_compare<abm::helper::TaskID,std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>,std::less<abm::helper::TaskID>,true>,std::allocator<std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>>>::destroy(*a1);
    std::__tree<std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>,std::__map_value_compare<abm::helper::TaskID,std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>,std::less<abm::helper::TaskID>,true>,std::allocator<std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>>>::destroy(a1[1]);
    v2 = (std::__shared_weak_count *)a1[6];
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      operator delete(a1);
    }
    else
    {
LABEL_6:
      operator delete(a1);
    }
  }
}

void std::allocate_shared[abi:ne180100]<abm::LogCompressionTask,std::allocator<abm::LogCompressionTask>,abm::helper::TaskID &,std::shared_ptr<ctu::LogServer> &,std::weak_ptr<abm::HelperServerInternal>,void>(std::__shared_weak_count_vtbl **a1, int a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t *a5)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  std::__shared_weak_count_vtbl *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27[2];
  uint64_t v28[2];

  v10 = (std::__shared_weak_count *)operator new(0xB0uLL);
  v11 = v10;
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A07F90;
  v13 = (std::__shared_weak_count_vtbl *)&v10[1];
  v28[0] = a3;
  v28[1] = (uint64_t)a4;
  if (a4)
  {
    v14 = (unint64_t *)&a4->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (std::__shared_weak_count *)a5[1];
  v27[0] = *a5;
  v27[1] = (uint64_t)v16;
  *a5 = 0;
  a5[1] = 0;
  abm::LogCompressionTask::LogCompressionTask(&v10[1].__vftable, a2, v28, v27);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  if (a4)
  {
    v17 = (unint64_t *)&a4->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
      *a1 = v13;
      a1[1] = (std::__shared_weak_count_vtbl *)v11;
      shared_owners = (std::__shared_weak_count *)v11[4].__shared_owners_;
      if (shared_owners)
        goto LABEL_11;
      do
LABEL_17:
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v25 = __ldxr(p_shared_weak_owners);
      while (__stxr(v25 + 1, p_shared_weak_owners));
      v11[4].__vftable = v13;
      v11[4].__shared_owners_ = (uint64_t)v11;
      goto LABEL_21;
    }
  }
  *a1 = v13;
  a1[1] = (std::__shared_weak_count_vtbl *)v11;
  shared_owners = (std::__shared_weak_count *)v11[4].__shared_owners_;
  if (!shared_owners)
    goto LABEL_17;
LABEL_11:
  if (shared_owners->__shared_owners_ != -1)
    return;
  do
    v20 = __ldxr(p_shared_owners);
  while (__stxr(v20 + 1, p_shared_owners));
  v21 = (unint64_t *)&v11->__shared_weak_owners_;
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  v11[4].__vftable = v13;
  v11[4].__shared_owners_ = (uint64_t)v11;
  std::__shared_weak_count::__release_weak(shared_owners);
  do
LABEL_21:
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_1A3480438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  void *v14;

  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v14);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<abm::LogCompressionTask>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A07F90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<abm::LogCompressionTask>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A07F90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<abm::LogCompressionTask>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<abm::SystemLogsTask,std::allocator<abm::SystemLogsTask>,abm::helper::TaskID &,std::shared_ptr<ctu::LogServer> &,std::weak_ptr<abm::HelperServerInternal>,void>(std::__shared_weak_count_vtbl **a1, int a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t *a5)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  std::__shared_weak_count_vtbl *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27[2];
  uint64_t v28[2];

  v10 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v11 = v10;
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A07FE0;
  v13 = (std::__shared_weak_count_vtbl *)&v10[1];
  v28[0] = a3;
  v28[1] = (uint64_t)a4;
  if (a4)
  {
    v14 = (unint64_t *)&a4->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (std::__shared_weak_count *)a5[1];
  v27[0] = *a5;
  v27[1] = (uint64_t)v16;
  *a5 = 0;
  a5[1] = 0;
  abm::SystemLogsTask::SystemLogsTask((uint64_t)&v10[1], a2, v28, v27);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  if (a4)
  {
    v17 = (unint64_t *)&a4->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
      *a1 = v13;
      a1[1] = (std::__shared_weak_count_vtbl *)v11;
      shared_owners = (std::__shared_weak_count *)v11[4].__shared_owners_;
      if (shared_owners)
        goto LABEL_11;
      do
LABEL_17:
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v25 = __ldxr(p_shared_weak_owners);
      while (__stxr(v25 + 1, p_shared_weak_owners));
      v11[4].__vftable = v13;
      v11[4].__shared_owners_ = (uint64_t)v11;
      goto LABEL_21;
    }
  }
  *a1 = v13;
  a1[1] = (std::__shared_weak_count_vtbl *)v11;
  shared_owners = (std::__shared_weak_count *)v11[4].__shared_owners_;
  if (!shared_owners)
    goto LABEL_17;
LABEL_11:
  if (shared_owners->__shared_owners_ != -1)
    return;
  do
    v20 = __ldxr(p_shared_owners);
  while (__stxr(v20 + 1, p_shared_owners));
  v21 = (unint64_t *)&v11->__shared_weak_owners_;
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  v11[4].__vftable = v13;
  v11[4].__shared_owners_ = (uint64_t)v11;
  std::__shared_weak_count::__release_weak(shared_owners);
  do
LABEL_21:
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_1A3480654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  void *v14;

  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v14);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<abm::SystemLogsTask>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A07FE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<abm::SystemLogsTask>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A07FE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<abm::SystemLogsTask>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<abm::DiagnosticToolsTask>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A08030;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<abm::DiagnosticToolsTask>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A08030;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<abm::DiagnosticToolsTask>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<abm::TapToRadarTask>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A08080;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<abm::TapToRadarTask>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A08080;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<abm::TapToRadarTask>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<abm::CellularLoggingTask>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A080D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<abm::CellularLoggingTask>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A080D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<abm::CellularLoggingTask>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<abm::LogManagementTask>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A08120;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<abm::LogManagementTask>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A08120;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<abm::LogManagementTask>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<abm::ProfileManagementTask>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A08170;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<abm::ProfileManagementTask>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A08170;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<abm::ProfileManagementTask>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<abm::BasebandTracingTask>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A081C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<abm::BasebandTracingTask>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A081C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<abm::BasebandTracingTask>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ctu::SharedSynchronizable<abm::HelperServerInternal>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3abm20HelperServerInternalEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E4A08228;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN3abm20HelperServerInternalEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c55_ZTSNSt3__110shared_ptrIKN3abm20HelperServerInternalEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c55_ZTSNSt3__110shared_ptrIKN3abm20HelperServerInternalEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void SAHEURCoreDumpTraceProtocol::SAHEURCoreDumpTraceProtocol(SAHEURCoreDumpTraceProtocol *this)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *global_queue;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  dispatch_object_t object;
  __int128 v12;
  _QWORD block[5];

  EURCoreDumpTraceProtocol::EURCoreDumpTraceProtocol(this);
  *v2 = off_1E4A082B8;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1A343C000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_6;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v4 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v12 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v4 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v12 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_6;
  }
  v5 = (unint64_t *)(v4 + 8);
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
LABEL_6:
  global_queue = dispatch_get_global_queue(0, 0);
  object = global_queue;
  if (global_queue)
    dispatch_retain(global_queue);
  BasebandTransport::create((capabilities::radio *)&v12, &object, (uint64_t)this + 104);
  if (object)
    dispatch_release(object);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1A3480B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, char a10)
{
  void **v10;

  if (object)
    dispatch_release(object);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  EURCoreDumpTraceProtocol::~EURCoreDumpTraceProtocol(v10);
  _Unwind_Resume(a1);
}

void EURCoreDumpTraceProtocol::~EURCoreDumpTraceProtocol(void **this)
{
  *this = &unk_1E4A070C8;
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  *this = &unk_1E4A07118;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
}

void SAHEURCoreDumpTraceProtocol::~SAHEURCoreDumpTraceProtocol(SAHEURCoreDumpTraceProtocol *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = off_1E4A082B8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      *(_QWORD *)this = &unk_1E4A070C8;
      if ((*((char *)this + 95) & 0x80000000) == 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  *(_QWORD *)this = &unk_1E4A070C8;
  if (*((char *)this + 95) < 0)
LABEL_6:
    operator delete(*((void **)this + 9));
LABEL_7:
  *(_QWORD *)this = &unk_1E4A07118;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = off_1E4A082B8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      *(_QWORD *)this = &unk_1E4A070C8;
      if ((*((char *)this + 95) & 0x80000000) == 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  *(_QWORD *)this = &unk_1E4A070C8;
  if (*((char *)this + 95) < 0)
LABEL_6:
    operator delete(*((void **)this + 9));
LABEL_7:
  *(_QWORD *)this = &unk_1E4A07118;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = off_1E4A082B8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      *(_QWORD *)this = &unk_1E4A070C8;
      if ((*((char *)this + 95) & 0x80000000) == 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  *(_QWORD *)this = &unk_1E4A070C8;
  if (*((char *)this + 95) < 0)
LABEL_6:
    operator delete(*((void **)this + 9));
LABEL_7:
  *(_QWORD *)this = &unk_1E4A07118;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(this);
}

uint64_t SAHEURCoreDumpTraceProtocol::resetInternalState(uint64_t this)
{
  *(_DWORD *)(this + 96) = 0;
  if (*(char *)(this + 95) < 0)
  {
    **(_BYTE **)(this + 72) = 0;
    *(_QWORD *)(this + 80) = 0;
  }
  else
  {
    *(_BYTE *)(this + 72) = 0;
    *(_BYTE *)(this + 95) = 0;
  }
  return this;
}

uint64_t SAHEURCoreDumpTraceProtocol::createTransport(SAHEURCoreDumpTraceProtocol *this)
{
  uint64_t v2;
  capabilities::abs *shouldUseMinBasebandTransportIOReadSize;
  int v4;
  int v5;
  uint64_t v6;
  void *aBlock;
  int v9;
  char v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  char v15;

  v2 = *((_QWORD *)this + 13);
  v9 = 2;
  v10 = 0;
  v11 = 10;
  shouldUseMinBasebandTransportIOReadSize = (capabilities::abs *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize(this);
  if ((_DWORD)shouldUseMinBasebandTransportIOReadSize)
    v4 = 0x4000;
  else
    v4 = 0x8000;
  v12 = v4;
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadCount(shouldUseMinBasebandTransportIOReadSize))
    v5 = 4;
  else
    v5 = 16;
  v13 = v5;
  v14 = 0;
  v15 = 0;
  aBlock = 0;
  v6 = (*(uint64_t (**)(uint64_t, int *, void **))(*(_QWORD *)v2 + 48))(v2, &v9, &aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if ((v6 & 1) == 0)
    *((_DWORD *)this + 24) = 1;
  return v6;
}

void sub_1A3480F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock)
{
  if (aBlock)
    _Block_release(aBlock);
  _Unwind_Resume(exception_object);
}

void SAHEURCoreDumpTraceProtocol::generateCrashReason(uint64_t a1, const __CFDictionary **a2, void *a3, size_t a4)
{
  uint64_t (*v6)(uint64_t);
  std::string *v8;
  __int128 v9;
  void **v10;
  NSObject *v11;
  char *v12;
  std::string v13;
  void *__p[2];
  int64_t v15;
  _QWORD v16[2];
  uint64_t v17;

  if (a3
    && a4
    && (*a2
      ? (v6 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
      : (v6 = 0),
        v6))
  {
    bzero(a3, a4);
    v16[0] = 0xAAAAAAAAAAAAAAAALL;
    v16[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v16, *a2);
    v12 = (char *)operator new(0x20uLL);
    strcpy(v12, "*** NO REASON SPECIFIED ***");
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v17, "kKeyTraceDumpStateReason");
    ctu::cf::map_adapter::getString();
    MEMORY[0x1A858F29C](&v17);
    v8 = std::string::insert(&v13, 0, "AP-Triggered: ", 0xEuLL);
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v15 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    operator delete(v12);
    if (v15 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    strlcpy((char *)a3, (const char *)v10, a4);
    if (SHIBYTE(v15) < 0)
      operator delete(__p[0]);
    MEMORY[0x1A858F2D8](v16);
  }
  else
  {
    v11 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_error_impl(&dword_1A343C000, v11, OS_LOG_TYPE_ERROR, "No space to store reason string or empty dictionary provided\n", (uint8_t *)__p, 2u);
    }
  }
}

void sub_1A34810E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a26 < 0)
  {
    operator delete(__p);
    MEMORY[0x1A858F2D8](v26 - 56);
    _Unwind_Resume(a1);
  }
  MEMORY[0x1A858F2D8](v26 - 56);
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t SAHEURCoreDumpTraceProtocol::crashBasebandOverDIAG(uint64_t a1)
{
  NSObject *v2;
  _BOOL8 v3;
  NSObject *v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  char v12;
  _QWORD v14[6];
  _QWORD v15[4];
  _QWORD *v16;
  uint8_t buf[8];
  uint64_t v18;
  _QWORD *(*v19)(uint64_t);
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if ((TelephonyBasebandGetReset() & 1) != 0)
  {
    v2 = *(NSObject **)(a1 + 40);
    v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A343C000, v2, OS_LOG_TYPE_DEFAULT, "#I Crashing baseband over DIAG interface", buf, 2u);
    }
    v5 = capabilities::diag::supportedInterfaces((capabilities::diag *)v3);
    v6 = v5 & 0x1FF;
    if ((v5 & 0x1FF) != 0)
    {
      v7 = 0;
      v8 = MEMORY[0x1E0C809B0];
      do
      {
        if (v7 == 9)
          std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
        if (((1 << v7) & v6) != 0)
        {
          v6 &= ~(1 << v7);
          if ((SAHEURCoreDumpTraceProtocol::createTransport((SAHEURCoreDumpTraceProtocol *)a1) & 1) != 0)
          {
            v9 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&buf[4] = 1 << v7;
              _os_log_impl(&dword_1A343C000, v9, OS_LOG_TYPE_DEFAULT, "#I Triggering crash on interface %u", buf, 8u);
            }
            v10 = *(_QWORD *)(a1 + 104);
            v15[0] = 0;
            v15[1] = v15;
            v15[2] = 0x2000000000;
            v14[0] = v8;
            v14[1] = 0x40000000;
            v14[2] = ___ZN17BasebandTransportdeEv_block_invoke;
            v14[3] = &unk_1E4A0A0E8;
            v14[4] = v15;
            v14[5] = v10;
            v15[3] = 0;
            v16 = v14;
            *(_QWORD *)buf = v8;
            v18 = 0x40000000;
            v19 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
            v20 = &__block_descriptor_tmp_77;
            v21 = v10 + 72;
            v22 = &v16;
            v11 = *(NSObject **)(v10 + 88);
            if (*(_QWORD *)(v10 + 96))
              dispatch_async_and_wait(v11, buf);
            else
              dispatch_sync(v11, buf);
            _Block_object_dispose(v15, 8);
            v12 = ETLBBSimulateCrashExt();
            BasebandTransport::close(*(BasebandTransport **)(a1 + 104));
            if ((v12 & 1) != 0)
              break;
          }
          else
          {
            BasebandTransport::close(*(BasebandTransport **)(a1 + 104));
          }
        }
        ++v7;
      }
      while ((v6 & 0x1FF) != 0);
    }
    TelephonyBasebandGetReset();
  }
  else
  {
    v4 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1A343C000, v4, OS_LOG_TYPE_ERROR, "Failed to get baseband reset state", buf, 2u);
    }
  }
  return 0;
}

BOOL SAHEURCoreDumpTraceProtocol::crashBasebandWithGPIO(capabilities::coredump *a1)
{
  int v2;
  _BOOL8 result;
  NSObject *v4;
  NSObject *v6;
  uint8_t v7[16];
  uint8_t v8[15];
  char v9;

  v9 = 0;
  v2 = capabilities::coredump::supportsGPIOSignalling(a1);
  result = 0;
  if (v2)
  {
    if ((TelephonyBasebandGetReset() & 1) != 0)
    {
      v4 = *((_QWORD *)a1 + 5);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v7 = 0;
        _os_log_impl(&dword_1A343C000, v4, OS_LOG_TYPE_DEFAULT, "#I Crashing baseband with GPIO", v7, 2u);
      }
      TelephonyBasebandSetModemCoredumpGPIO();
      usleep(0xF4240u);
      TelephonyBasebandSetModemCoredumpGPIO();
    }
    else
    {
      v6 = *((_QWORD *)a1 + 5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v8 = 0;
        _os_log_error_impl(&dword_1A343C000, v6, OS_LOG_TYPE_ERROR, "Failed to get Baseband Reset state", v8, 2u);
      }
    }
    return v9 != 0;
  }
  return result;
}

void SAHEURCoreDumpTraceProtocol::handleLog(SAHEURCoreDumpTraceProtocol *this, int a2, const char *__s)
{
  size_t v6;
  std::string::size_type v7;
  std::string *p_dst;
  uint64_t v9;
  uint64_t v10;
  std::string::size_type v11;
  char v12;
  std::string::size_type v13;
  std::string::size_type size;
  std::string *v15;
  size_t v16;
  _BYTE *v17;
  unint64_t v18;
  std::string *v19;
  char *v21;
  int v22;
  char *v23;
  std::string *v24;
  std::string::size_type v25;
  std::string::size_type v26;
  NSObject *v27;
  std::string *v28;
  std::string __dst;
  uint8_t buf[4];
  int v31;
  __int16 v32;
  std::string *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  memset(&__dst, 170, sizeof(__dst));
  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_8:
    memcpy(p_dst, __s, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  v11 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  v12 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  size = __dst.__r_.__value_.__l.__size_;
  v13 = __dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &__dst;
  else
    v15 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v16 = __dst.__r_.__value_.__l.__size_;
  v17 = memchr(v15, 10, v16);
  if (v17)
    v18 = (unint64_t)v17;
  else
    v18 = (unint64_t)v15 + v16;
  v19 = (std::string *)(v18 + 1);
  if (v18 - (_QWORD)v15 != v16 && v19 != (std::string *)((char *)v15 + v16))
  {
    v21 = (char *)v15 + v16 + ~v18;
    do
    {
      v22 = v19->__r_.__value_.__s.__data_[0];
      if (v22 != 10)
        *(_BYTE *)v18++ = v22;
      v19 = (std::string *)((char *)v19 + 1);
      --v21;
    }
    while (v21);
    v11 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    size = __dst.__r_.__value_.__l.__size_;
    v13 = __dst.__r_.__value_.__r.__words[0];
    v12 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  if (v12 >= 0)
    v23 = (char *)&__dst + v11;
  else
    v23 = (char *)(v13 + size);
  if (v12 >= 0)
    v24 = &__dst;
  else
    v24 = (std::string *)v13;
  if (v12 >= 0)
    v25 = v11;
  else
    v25 = size;
  v26 = v18 - (_QWORD)v24;
  if (v25 < v18 - (unint64_t)v24)
    std::string::__throw_out_of_range[abi:ne180100]();
  if (&v23[-v18] == (char *)-1)
  {
    if (v12 < 0)
    {
      __dst.__r_.__value_.__l.__size_ = v18 - (_QWORD)v24;
      *(_BYTE *)(v13 + v26) = 0;
      v27 = *((_QWORD *)this + 5);
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        goto LABEL_45;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v26 & 0x7F;
      __dst.__r_.__value_.__s.__data_[v26] = 0;
      v27 = *((_QWORD *)this + 5);
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        goto LABEL_45;
    }
LABEL_39:
    v28 = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v28 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 67109378;
    v31 = a2;
    v32 = 2080;
    v33 = v28;
    _os_log_impl(&dword_1A343C000, v27, OS_LOG_TYPE_DEFAULT, "#I bbu: %04x:%s", buf, 0x12u);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_42;
    return;
  }
  std::string::__erase_external_with_move(&__dst, v26, (std::string::size_type)&v23[-v18]);
  v27 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    goto LABEL_39;
LABEL_45:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_42:
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_1A3481830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SAHEURCoreDumpTraceProtocol::crashBasebandForCoreDump(capabilities::coredump *a1, const __CFDictionary **a2)
{
  uint64_t Controller;
  const void *v5;
  const __CFDictionary *v6;
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  uint8_t v11[8];
  const __CFDictionary *v12;
  uint8_t buf[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int16 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  Controller = TelephonyBasebandCreateController();
  if (Controller)
  {
    v5 = (const void *)Controller;
    if (!SAHEURCoreDumpTraceProtocol::crashBasebandWithGPIO(a1))
    {
      v18 = 0;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      *(_OWORD *)buf = 0u;
      v6 = *a2;
      v12 = v6;
      if (v6)
        CFRetain(v6);
      SAHEURCoreDumpTraceProtocol::generateCrashReason((uint64_t)a1, &v12, &buf[2], 0x50uLL);
      if (v6)
        CFRelease(v6);
      if ((SAHEURCoreDumpTraceProtocol::crashBasebandOverDIAG((uint64_t)a1) & 1) == 0)
      {
        v7 = *((_QWORD *)a1 + 5);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v11 = 0;
          _os_log_error_impl(&dword_1A343C000, v7, OS_LOG_TYPE_ERROR, "Unable to gracefully crash baseband", v11, 2u);
        }
      }
    }
    v11[0] = 0;
    TelephonyBasebandGetReset();
    v8 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      if (v11[0])
        v9 = (const char *)&unk_1A3584B3E;
      else
        v9 = "not ";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v9;
      _os_log_impl(&dword_1A343C000, v8, OS_LOG_TYPE_DEFAULT, "#I Baseband is %sin reset", buf, 0xCu);
    }
    CFRelease(v5);
  }
  return 1;
}

void sub_1A34819F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t SAHEURCoreDumpTraceProtocol::collectBasebandCoreDump(SAHEURCoreDumpTraceProtocol *this)
{
  uint64_t result;
  int v3;
  const void *v4;
  const __CFAllocator *v5;
  __CFDictionary *Mutable;
  CFNumberRef v7;
  _QWORD *v8;
  int v9;
  _BOOL4 v10;
  NSObject *v11;
  const void *v12;
  NSObject *v13;
  NSObject *v14;
  void *value[2];
  int valuePtr;
  CFTypeRef cf;
  uint8_t buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  cf = 0;
  result = BBUpdaterExtremeCreate();
  v3 = 2;
  if (result)
  {
    v4 = (const void *)result;
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(Mutable, CFSTR("DisallowFusing"), (const void *)*MEMORY[0x1E0C9AE50]);
    valuePtr = 2;
    v7 = CFNumberCreate(v5, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(Mutable, CFSTR("BootMode"), v7);
    CFRelease(v7);
    value[0] = 0;
    v8 = (_QWORD *)((char *)this + 72);
    if ((ctu::cf::convert_copy() & 1) != 0)
    {
      CFDictionarySetValue(Mutable, CFSTR("coreDumpPath"), value[0]);
      CFRelease(value[0]);
      if (BBUpdaterSetOptions())
      {
        *(_QWORD *)buf = 0;
        v9 = BBUpdaterExecCommand();
        v10 = v9 != 0;
        v11 = *((_QWORD *)this + 5);
        if (v9)
        {
          if (os_log_type_enabled(*((os_log_t *)this + 5), OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(value[0]) = 0;
            _os_log_impl(&dword_1A343C000, v11, OS_LOG_TYPE_DEFAULT, "#I Success: Executing command to collect CoreDump", (uint8_t *)value, 2u);
            v12 = *(const void **)buf;
            if (!*(_QWORD *)buf)
              goto LABEL_17;
            goto LABEL_16;
          }
        }
        else if (os_log_type_enabled(*((os_log_t *)this + 5), OS_LOG_TYPE_ERROR))
        {
          LOWORD(value[0]) = 0;
          _os_log_error_impl(&dword_1A343C000, v11, OS_LOG_TYPE_ERROR, "Failed: Executing command to collect CoreDump", (uint8_t *)value, 2u);
          v12 = *(const void **)buf;
          if (!*(_QWORD *)buf)
          {
LABEL_17:
            CFRelease(v4);
            if (Mutable)
              CFRelease(Mutable);
            if (cf)
            {
              CFRelease(cf);
              if (v10)
              {
LABEL_21:
                v3 = 0;
                result = 1;
                goto LABEL_24;
              }
            }
            else if (v10)
            {
              goto LABEL_21;
            }
            result = 0;
            v3 = 2;
            goto LABEL_24;
          }
LABEL_16:
          CFRelease(v12);
          goto LABEL_17;
        }
        v12 = *(const void **)buf;
        if (!*(_QWORD *)buf)
          goto LABEL_17;
        goto LABEL_16;
      }
      v14 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1A343C000, v14, OS_LOG_TYPE_ERROR, "Failed: Setting CoreDump options for BBUpdater", buf, 2u);
        v10 = 0;
        goto LABEL_17;
      }
    }
    else
    {
      v13 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        if (*((char *)this + 95) < 0)
          v8 = (_QWORD *)*v8;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v8;
        _os_log_error_impl(&dword_1A343C000, v13, OS_LOG_TYPE_ERROR, "Failed: Converting CoreDump path to CFStringRef. fScratchFolder=[%s]", buf, 0xCu);
      }
    }
    v10 = 0;
    goto LABEL_17;
  }
LABEL_24:
  *((_DWORD *)this + 24) = v3;
  return result;
}

uint64_t SAHEURCoreDumpTraceProtocol::snapshotInternal(EURCoreDumpTraceProtocol *a1, const __CFDictionary **a2, _QWORD *a3)
{
  _BOOL8 ScratchPath;
  const __CFDictionary *v7;
  capabilities::radio *v8;
  int v9;
  const __CFDictionary *v10;
  CFTypeRef cf;
  const __CFDictionary *v13;

  (*(void (**)(EURCoreDumpTraceProtocol *))(*(_QWORD *)a1 + 64))(a1);
  ScratchPath = EURCoreDumpTraceProtocol::createScratchPath(a1);
  if (ScratchPath)
  {
    v7 = *a2;
    v13 = v7;
    if (v7)
      CFRetain(v7);
    SAHEURCoreDumpTraceProtocol::crashBasebandForCoreDump(a1, &v13);
    if (v7)
      CFRelease(v7);
    v8 = (capabilities::radio *)SAHEURCoreDumpTraceProtocol::collectBasebandCoreDump(a1);
    v9 = (int)v8;
    if ((capabilities::radio::mav20Plus(v8) & 1) != 0)
    {
      if (v9)
        EURCoreDumpTraceProtocol::collectBasebandCrashListM20((uint64_t)a1, (uint64_t)a3);
    }
    else if (v9)
    {
      EURCoreDumpTraceProtocol::collectBasebandCrashList((uint64_t)a1, a3);
    }
  }
  else
  {
    *((_DWORD *)a1 + 24) = 2;
    capabilities::radio::mav20Plus((capabilities::radio *)ScratchPath);
  }
  v10 = *a2;
  cf = v10;
  if (v10)
    CFRetain(v10);
  EURCoreDumpTraceProtocol::moveToSnapshotPath((uint64_t)a1, (const __CFDictionary **)&cf);
  if (cf)
    CFRelease(cf);
  return *((unsigned int *)a1 + 24);
}

void sub_1A3481E00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1A3481E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t SAHEURCoreDumpTraceProtocol::snapshot(uint64_t a1, const void **a2, uint64_t a3)
{
  const void *v5;
  uint64_t v6;
  CFTypeRef cf;

  v5 = *a2;
  cf = v5;
  if (v5)
    CFRetain(v5);
  v6 = (*(uint64_t (**)(uint64_t, CFTypeRef *, uint64_t))(*(_QWORD *)a1 + 72))(a1, &cf, a3);
  if (cf)
    CFRelease(cf);
  return v6;
}

void sub_1A3481E9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

const char *SAHEURCoreDumpTraceProtocol::getName(SAHEURCoreDumpTraceProtocol *this)
{
  return "trace.coredump";
}

char *bsp::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _DWORD *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned __int8 *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned __int8 *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned __int8 *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned __int8 *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned __int8 *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

_DWORD *bsp::tlv::abm::writeField(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t bsp::tlv::abm::getFieldSize()
{
  return 4;
}

{
  return 80;
}

{
  return 131;
}

{
  return 2;
}

{
  return 131;
}

{
  return 2;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 2;
}

{
  return 2;
}

{
  return 20;
}

{
  return 2;
}

{
  return 10;
}

{
  return 14;
}

{
  return 22;
}

{
  return 6;
}

{
  return 1;
}

{
  return 1;
}

{
  return 4;
}

{
  return 1;
}

{
  return 1;
}

{
  return 6;
}

{
  return 10;
}

{
  return 2;
}

{
  return 2;
}

{
  return 6;
}

{
  return 6;
}

{
  return 14;
}

{
  return 22;
}

{
  return 2;
}

{
  return 28;
}

{
  return 46;
}

{
  return 12;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 2;
}

{
  return 2;
}

{
  return 4;
}

{
  return 1;
}

{
  return 1;
}

{
  return 4;
}

uint64_t tlv::parseV<bsp::tlv::abm::CoreDumpEnabledType>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1A3481F3C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::CoreDumpEnabledType>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::CoreDumpEnabledType>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

_OWORD *bsp::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _OWORD *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)0x50);
  *a3 = *(_OWORD *)a1;
  v5 = *((_OWORD *)a1 + 1);
  v6 = *((_OWORD *)a1 + 2);
  v7 = *((_OWORD *)a1 + 4);
  a3[3] = *((_OWORD *)a1 + 3);
  a3[4] = v7;
  a3[1] = v5;
  a3[2] = v6;
  return (_OWORD *)((char *)a1 + 80);
}

_OWORD *bsp::tlv::abm::writeField(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  *a1 = *a2;
  v2 = a2[1];
  v3 = a2[2];
  v4 = a2[4];
  a1[3] = a2[3];
  a1[4] = v4;
  a1[1] = v2;
  a1[2] = v3;
  return a1 + 5;
}

__n128 tlv::parseV<bsp::tlv::abm::CrashReason>@<Q0>(tlv **a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  tlv *v5;
  __int128 v6;
  __n128 result;

  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)0x50);
  v6 = *((_OWORD *)v5 + 3);
  a3[2] = *((_OWORD *)v5 + 2);
  a3[3] = v6;
  a3[4] = *((_OWORD *)v5 + 4);
  result = *((__n128 *)v5 + 1);
  *a3 = *(_OWORD *)v5;
  a3[1] = result;
  *a1 = (tlv *)((char *)v5 + 80);
  return result;
}

void sub_1A348204C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::CrashReason>()
{
  return 83;
}

__n128 tlv::writeV<bsp::tlv::abm::CrashReason>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *a1;
  *(_OWORD *)v2 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v2 + 64) = v5;
  *(__n128 *)(v2 + 16) = result;
  *(_OWORD *)(v2 + 32) = v4;
  *a1 = v2 + 80;
  return result;
}

uint64_t bsp::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)0x83);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  v5 = *(_OWORD *)(a1 + 16);
  v6 = *(_OWORD *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a3 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a3 + 64) = v7;
  *(_OWORD *)(a3 + 16) = v5;
  *(_OWORD *)(a3 + 32) = v6;
  v8 = *(_OWORD *)(a1 + 80);
  v9 = *(_OWORD *)(a1 + 96);
  v10 = *(_OWORD *)(a1 + 112);
  *(_DWORD *)(a3 + 127) = *(_DWORD *)(a1 + 127);
  *(_OWORD *)(a3 + 96) = v9;
  *(_OWORD *)(a3 + 112) = v10;
  *(_OWORD *)(a3 + 80) = v8;
  return a1 + 131;
}

{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)0x83);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  v5 = *(_OWORD *)(a1 + 16);
  v6 = *(_OWORD *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a3 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a3 + 64) = v7;
  *(_OWORD *)(a3 + 16) = v5;
  *(_OWORD *)(a3 + 32) = v6;
  v8 = *(_OWORD *)(a1 + 80);
  v9 = *(_OWORD *)(a1 + 96);
  v10 = *(_OWORD *)(a1 + 112);
  *(_DWORD *)(a3 + 127) = *(_DWORD *)(a1 + 127);
  *(_OWORD *)(a3 + 96) = v9;
  *(_OWORD *)(a3 + 112) = v10;
  *(_OWORD *)(a3 + 80) = v8;
  return a1 + 131;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)0x10);
  *(_OWORD *)(a3 + 4) = *(_OWORD *)(a1 + 4);
  return a1 + 20;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  *(_BYTE *)a3 = *(_BYTE *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 1) = *(_BYTE *)(a1 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 2) = *(_BYTE *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 3), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 3) = *(_BYTE *)(a1 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 4) = *(_BYTE *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 5), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 5) = *(_BYTE *)(a1 + 5);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 6) = *(_BYTE *)(a1 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 7), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 7) = *(_BYTE *)(a1 + 7);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 8) = *(_BYTE *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 9), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 9) = *(_BYTE *)(a1 + 9);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 10), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 10);
  return a1 + 14;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *(_WORD *)a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 10), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 10);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 14), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 14);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 18), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)(a1 + 18);
  return a1 + 22;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *(_WORD *)a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 10), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 10);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 14), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 14);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 18), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)(a1 + 18);
  return a1 + 22;
}

{
  uint64_t v6;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *(_WORD *)a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 2) = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 4) = *(_WORD *)(a1 + 4);
  v6 = bsp::tlv::abm::parseField(a1 + 6, a2, a3 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)v6, a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 24) = *(_WORD *)v6;
  tlv::throwIfNotEnoughBytes((tlv *)(v6 + 2), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 28) = *(_WORD *)(v6 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(v6 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(v6 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(v6 + 8), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 36) = *(_DWORD *)(v6 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(v6 + 12), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 40) = *(_DWORD *)(v6 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(v6 + 16), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 44) = *(_DWORD *)(v6 + 16);
  tlv::throwIfNotEnoughBytes((tlv *)(v6 + 20), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 48) = *(_DWORD *)(v6 + 20);
  tlv::throwIfNotEnoughBytes((tlv *)(v6 + 24), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 52) = *(_WORD *)(v6 + 24);
  return v6 + 26;
}

uint64_t bsp::tlv::abm::writeField(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 127) = *(_DWORD *)(a2 + 127);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  return a1 + 131;
}

{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 127) = *(_DWORD *)(a2 + 127);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  return a1 + 131;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 4);
  return a1 + 20;
}

{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7) = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_DWORD *)(a1 + 10) = *(_DWORD *)(a2 + 12);
  return a1 + 14;
}

{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 6) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 10) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 14) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 18) = *(_DWORD *)(a2 + 20);
  return a1 + 22;
}

{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7) = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_DWORD *)(a1 + 10) = *(_DWORD *)(a2 + 12);
  return a1 + 14;
}

{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 6) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 10) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 14) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 18) = *(_DWORD *)(a2 + 20);
  return a1 + 22;
}

{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 7) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 15);
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 15) = *(_BYTE *)(a2 + 17);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 20);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 24);
  *(_WORD *)(a1 + 22) = *(_WORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 52);
  return a1 + 46;
}

__n128 tlv::parseV<bsp::tlv::abm::CoreDumpCrashReasonA5String>@<Q0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;

  *(_DWORD *)(a3 + 127) = 0;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)0x83);
  v6 = *((_OWORD *)v5 + 7);
  *(_OWORD *)(a3 + 96) = *((_OWORD *)v5 + 6);
  *(_OWORD *)(a3 + 112) = v6;
  *(_DWORD *)(a3 + 127) = *(_DWORD *)((char *)v5 + 127);
  v7 = *((_OWORD *)v5 + 3);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)v5 + 2);
  *(_OWORD *)(a3 + 48) = v7;
  v8 = *((_OWORD *)v5 + 5);
  *(_OWORD *)(a3 + 64) = *((_OWORD *)v5 + 4);
  *(_OWORD *)(a3 + 80) = v8;
  result = *((__n128 *)v5 + 1);
  *(_OWORD *)a3 = *(_OWORD *)v5;
  *(__n128 *)(a3 + 16) = result;
  *a1 = (tlv *)((char *)v5 + 131);
  return result;
}

void sub_1A34821B4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::CoreDumpCrashReasonA5String>()
{
  return 134;
}

__n128 tlv::writeV<bsp::tlv::abm::CoreDumpCrashReasonA5String>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *a1;
  *(_OWORD *)v2 = *(_OWORD *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v2 + 64) = v5;
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  result = *(__n128 *)(a2 + 80);
  v7 = *(_OWORD *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(v2 + 127) = *(_DWORD *)(a2 + 127);
  *(_OWORD *)(v2 + 96) = v7;
  *(_OWORD *)(v2 + 112) = v8;
  *(__n128 *)(v2 + 80) = result;
  *a1 = v2 + 131;
  return result;
}

char *bsp::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _WORD *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

_WORD *bsp::tlv::abm::writeField(_WORD *a1, _WORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1 + 5;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1 + 3;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1 + 3;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1 + 5;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1 + 3;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1 + 3;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  a1[13] = a2[13];
  return a1 + 14;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t tlv::parseV<bsp::tlv::abm::CoreDumpCrashReasonA5Line>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1A3482294(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::CoreDumpCrashReasonA5Line>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::CoreDumpCrashReasonA5Line>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

__n128 tlv::parseV<bsp::tlv::abm::CoreDumpCrashReasonQ6String>@<Q0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;

  *(_DWORD *)(a3 + 127) = 0;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)0x83);
  v6 = *((_OWORD *)v5 + 7);
  *(_OWORD *)(a3 + 96) = *((_OWORD *)v5 + 6);
  *(_OWORD *)(a3 + 112) = v6;
  *(_DWORD *)(a3 + 127) = *(_DWORD *)((char *)v5 + 127);
  v7 = *((_OWORD *)v5 + 3);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)v5 + 2);
  *(_OWORD *)(a3 + 48) = v7;
  v8 = *((_OWORD *)v5 + 5);
  *(_OWORD *)(a3 + 64) = *((_OWORD *)v5 + 4);
  *(_OWORD *)(a3 + 80) = v8;
  result = *((__n128 *)v5 + 1);
  *(_OWORD *)a3 = *(_OWORD *)v5;
  *(__n128 *)(a3 + 16) = result;
  *a1 = (tlv *)((char *)v5 + 131);
  return result;
}

void sub_1A34823EC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::CoreDumpCrashReasonQ6String>()
{
  return 134;
}

__n128 tlv::writeV<bsp::tlv::abm::CoreDumpCrashReasonQ6String>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *a1;
  *(_OWORD *)v2 = *(_OWORD *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v2 + 64) = v5;
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  result = *(__n128 *)(a2 + 80);
  v7 = *(_OWORD *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(v2 + 127) = *(_DWORD *)(a2 + 127);
  *(_OWORD *)(v2 + 96) = v7;
  *(_OWORD *)(v2 + 112) = v8;
  *(__n128 *)(v2 + 80) = result;
  *a1 = v2 + 131;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::CoreDumpCrashReasonQ6Line>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1A34824CC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::CoreDumpCrashReasonQ6Line>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::CoreDumpCrashReasonQ6Line>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

char *abm::data::getDataPropertyNameFromDict(xpc_object_t *a1)
{
  xpc_object_t value;
  unsigned int v3;
  xpc_object_t object;

  if (MEMORY[0x1A85902BC](*a1) != MEMORY[0x1E0C812F8])
    return "Unknown";
  value = xpc_dictionary_get_value(*a1, "kDataProperty");
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  v3 = xpc::dyn_cast_or_default();
  xpc_release(object);
  if (v3 < 5)
    return off_1E4A08498[v3];
  else
    return "Unknown";
}

void sub_1A34825B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::data::getDataPropertyTypeFromDict(xpc_object_t *a1)
{
  xpc_object_t value;
  unsigned int v4;
  xpc_object_t object;

  if (MEMORY[0x1A85902BC](*a1) != MEMORY[0x1E0C812F8])
    return 5;
  value = xpc_dictionary_get_value(*a1, "kDataProperty");
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  v4 = xpc::dyn_cast_or_default();
  xpc_release(object);
  if (v4 >= 5)
    return 5;
  else
    return v4;
}

void sub_1A3482670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void abm::data::DataAggregationProtocol::toDict(abm::data::DataAggregationProtocol *this@<X0>, void **a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A85902BC](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_int64_create(0);
  if (!v7)
    v7 = xpc_null_create();
  v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  v10 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kDataAggregationProtocol", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataAggregationProtocol::addToDict(abm::data::DataAggregationProtocol *this, xpc_object_t *a2)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*a2, "kDataAggregationProtocol", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

const char *abm::data::DataAggregationProtocol::asString(abm::data::DataAggregationProtocol *this)
{
  uint64_t v1;

  v1 = *((int *)this + 3);
  if (v1 > 2)
    return "unknown";
  else
    return off_1E4A084C0[v1];
}

void abm::data::DataProperty<abm::data::DataAggregationProtocol>::createDictForGet(xpc_object_t *a1@<X8>)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;

  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A85902BC](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_int64_create(0);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataAggregationProtocol>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t value;
  int v5;
  xpc_object_t object;

  *(_QWORD *)a2 = &off_1E4A08340;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1A85902BC](*a1) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(*a1, "kDataAggregationProtocol"))
  {
    value = xpc_dictionary_get_value(*a1, "kDataAggregationProtocol");
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    v5 = xpc::dyn_cast_or_default();
    xpc_release(object);
    if (v5)
    {
      if (v5 == 1)
      {
        *(_DWORD *)(a2 + 12) = 1;
      }
      else if (v5 == 2)
      {
        *(_DWORD *)(a2 + 12) = 2;
      }
      else
      {
        *(_BYTE *)(a2 + 8) = 0;
        *(_DWORD *)(a2 + 12) = 3;
      }
    }
    else
    {
      *(_DWORD *)(a2 + 12) = 0;
    }
  }
  else
  {
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_1A3482ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::data::DataProperty<abm::data::DataAggregationProtocol>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &off_1E4A08340;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (result >= 3)
  {
    *(_BYTE *)(a2 + 8) = 0;
    result = 3;
  }
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void abm::data::DataAggregationMaxDatagrams::toDict(abm::data::DataAggregationMaxDatagrams *this@<X0>, void **a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A85902BC](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_int64_create(1);
  if (!v7)
    v7 = xpc_null_create();
  v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  v10 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kDataAggregationMaxDatagrams", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataAggregationMaxDatagrams::addToDict(abm::data::DataAggregationMaxDatagrams *this, xpc_object_t *a2)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*a2, "kDataAggregationMaxDatagrams", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxDatagrams>::createDictForGet(xpc_object_t *a1@<X8>)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;

  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A85902BC](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_int64_create(1);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxDatagrams>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t object;

  *(_QWORD *)a2 = &off_1E4A08388;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1A85902BC](*a1) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(*a1, "kDataAggregationMaxDatagrams"))
  {
    value = xpc_dictionary_get_value(*a1, "kDataAggregationMaxDatagrams");
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    *(_DWORD *)(a2 + 12) = xpc::dyn_cast_or_default();
    xpc_release(object);
  }
  else
  {
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_1A3482EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::data::DataProperty<abm::data::DataAggregationMaxDatagrams>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &off_1E4A08388;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void abm::data::DataAggregationMaxSize::toDict(abm::data::DataAggregationMaxSize *this@<X0>, void **a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A85902BC](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_int64_create(2);
  if (!v7)
    v7 = xpc_null_create();
  v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  v10 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kDataAggregationMaxSize", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataAggregationMaxSize::addToDict(abm::data::DataAggregationMaxSize *this, xpc_object_t *a2)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*a2, "kDataAggregationMaxSize", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxSize>::createDictForGet(xpc_object_t *a1@<X8>)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;

  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A85902BC](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_int64_create(2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxSize>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t object;

  *(_QWORD *)a2 = &off_1E4A083D0;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1A85902BC](*a1) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(*a1, "kDataAggregationMaxSize"))
  {
    value = xpc_dictionary_get_value(*a1, "kDataAggregationMaxSize");
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    *(_DWORD *)(a2 + 12) = xpc::dyn_cast_or_default();
    xpc_release(object);
  }
  else
  {
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_1A3483284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::data::DataProperty<abm::data::DataAggregationMaxSize>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &off_1E4A083D0;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void abm::data::DataFlowControl::toDict(abm::data::DataFlowControl *this@<X0>, void **a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A85902BC](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_int64_create(3);
  if (!v7)
    v7 = xpc_null_create();
  v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  v10 = xpc_BOOL_create(*((_BYTE *)this + 9));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kDataFlowControl", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataFlowControl::addToDict(abm::data::DataFlowControl *this, xpc_object_t *a2)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_BOOL_create(*((_BYTE *)this + 9));
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*a2, "kDataFlowControl", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataFlowControl>::createDictForGet(xpc_object_t *a1@<X8>)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;

  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A85902BC](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_int64_create(3);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataFlowControl>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t object;

  *(_QWORD *)a2 = &off_1E4A08418;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1A85902BC](*a1) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(*a1, "kDataFlowControl"))
  {
    value = xpc_dictionary_get_value(*a1, "kDataFlowControl");
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    *(_BYTE *)(a2 + 9) = xpc::dyn_cast_or_default();
    xpc_release(object);
  }
  else
  {
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_1A3483660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::data::DataProperty<abm::data::DataFlowControl>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &off_1E4A08418;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(_BYTE *)(a2 + 9) = (_DWORD)result != 0;
  return result;
}

void abm::data::DataPowerSave::toDict(abm::data::DataPowerSave *this@<X0>, void **a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A85902BC](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_int64_create(4);
  if (!v7)
    v7 = xpc_null_create();
  v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  v10 = xpc_BOOL_create(*((_BYTE *)this + 9));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kDataPowerSave", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataPowerSave::addToDict(abm::data::DataPowerSave *this, xpc_object_t *a2)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_BOOL_create(*((_BYTE *)this + 9));
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*a2, "kDataPowerSave", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataPowerSave>::createDictForGet(xpc_object_t *a1@<X8>)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;

  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A85902BC](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_int64_create(4);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataPowerSave>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t object;

  *(_QWORD *)a2 = &off_1E4A08460;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1A85902BC](*a1) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(*a1, "kDataPowerSave"))
  {
    value = xpc_dictionary_get_value(*a1, "kDataPowerSave");
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    *(_BYTE *)(a2 + 9) = xpc::dyn_cast_or_default();
    xpc_release(object);
  }
  else
  {
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_1A3483A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::data::DataProperty<abm::data::DataPowerSave>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &off_1E4A08460;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(_BYTE *)(a2 + 9) = (_DWORD)result != 0;
  return result;
}

void abm::HelperServer::create(uint64_t *a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v4 = (uint64_t *)operator new(0x28uLL);
  v5 = *a1;
  v6 = (std::__shared_weak_count *)a1[1];
  v4[1] = 0;
  v4[2] = 0;
  *v4 = (uint64_t)off_1E4A084E8;
  v7 = v4 + 3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v19 = v6;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v21 = v6;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v19 = 0;
    v21 = 0;
  }
  v20 = v5;
  abm::HelperServerInternal::create(&v20, v7);
  v12 = v21;
  if (v21)
  {
    v13 = (unint64_t *)&v21->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v19)
  {
    v15 = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v6)
  {
    v17 = (unint64_t *)&v6->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *a2 = v7;
  a2[1] = v4;
}

void sub_1A3483BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;

  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t *abm::HelperServer::HelperServer(uint64_t *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9[2];

  v3 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = (uint64_t)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  abm::HelperServerInternal::create(v9, a1);
  if (!v3)
    return a1;
  v6 = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9[2];

  v3 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = (uint64_t)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  abm::HelperServerInternal::create(v9, a1);
  if (!v3)
    return a1;
  v6 = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_1A3483CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1A3483D90(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void abm::HelperServer::~HelperServer(abm::HelperServer *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void abm::HelperServer::start(abm::HelperServer *this)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD v3[5];

  v1 = *(_QWORD *)this;
  v2 = (uint64_t *)(*(_QWORD *)this + 72);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN3abm20HelperServerInternal5startEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_9_0;
  v3[4] = v1;
  ctu::SharedSynchronizable<abm::HelperServerInternal>::execute_wrapped(v2, (uint64_t)v3);
}

uint64_t abm::HelperServer::isBusy(abm::HelperServer *this)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  _QWORD block[6];

  v1 = *(_QWORD *)this;
  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN3abm20HelperServerInternal6isBusyEv_block_invoke;
  v5[3] = &unk_1E4A07D40;
  v5[4] = &v6;
  v5[5] = v1;
  v10 = v5;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3abm20HelperServerInternalEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_20;
  block[4] = v1 + 72;
  block[5] = &v10;
  v2 = *(NSObject **)(v1 + 88);
  if (*(_QWORD *)(v1 + 96))
    dispatch_async_and_wait(v2, block);
  else
    dispatch_sync(v2, block);
  v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void abm::HelperServer::stop(abm::HelperServer *this)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[5];
  _QWORD *v5;
  _QWORD block[6];

  v1 = *(_QWORD *)this;
  v2 = *(_QWORD *)this + 72;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZN3abm20HelperServerInternal4stopEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_13_1;
  v4[4] = v1;
  v5 = v4;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3abm20HelperServerInternalEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_20;
  block[4] = v2;
  block[5] = &v5;
  v3 = *(NSObject **)(v1 + 88);
  if (*(_QWORD *)(v1 + 96))
    dispatch_async_and_wait(v3, block);
  else
    dispatch_sync(v3, block);
}

void std::__shared_ptr_emplace<abm::HelperServerWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A084E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<abm::HelperServerWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A084E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<abm::HelperServerWrapper>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

double ICETrace::createInternal@<D0>(_OWORD *a1@<X8>)
{
  ICETrace *v3;
  double result;
  __int128 v5;

  v3 = (ICETrace *)operator new(0x1F0uLL);
  ICETrace::ICETrace(v3);
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<ICETrace>::shared_ptr[abi:ne180100]<ICETrace,std::shared_ptr<ICETrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<ICETrace>(ICETrace*)::{lambda(ICETrace*)#1},void>(&v5, (uint64_t)v3);
  ctu::Loggable<Trace,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v5);
  result = *(double *)&v5;
  *a1 = v5;
  return result;
}

void sub_1A348413C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1A3484150(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ICETrace::ICETrace(ICETrace *this)
{
  capabilities::trace *v2;
  capabilities::trace *v3;
  capabilities::radio *v4;
  capabilities::abs *v5;
  capabilities::radio *shouldUseMinBasebandTransportIOReadSize;
  int v7;
  capabilities::abs *v8;
  int v9;
  int v10;
  unsigned __int8 v11;
  char *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  dispatch_object_t object;
  __int128 v21;
  void *__p[2];
  char v23;
  _QWORD block[5];

  v23 = 8;
  strcpy((char *)__p, "trace.bb");
  v2 = (capabilities::trace *)Trace::Trace((uint64_t)this, (uint64_t)__p);
  if (v23 < 0)
    operator delete(__p[0]);
  *(_QWORD *)this = off_1E4A08538;
  *((_DWORD *)this + 38) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_BYTE *)this + 317) = 1;
  *((_QWORD *)this + 40) = 0;
  *((_WORD *)this + 164) = 0;
  *((_BYTE *)this + 336) = 0;
  v3 = (capabilities::trace *)capabilities::trace::defaultHistorySizeMB(v2);
  *((_DWORD *)this + 85) = (_DWORD)v3;
  *((_BYTE *)this + 344) = 0;
  v4 = (capabilities::radio *)capabilities::trace::defaultFileSizeBytes(v3);
  *((_DWORD *)this + 87) = (_DWORD)v4;
  v5 = (capabilities::abs *)capabilities::radio::vendor(v4);
  shouldUseMinBasebandTransportIOReadSize = (capabilities::radio *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v5);
  if ((_DWORD)shouldUseMinBasebandTransportIOReadSize)
    v7 = 0x4000;
  else
    v7 = 0x8000;
  *((_DWORD *)this + 88) = v7;
  v8 = (capabilities::abs *)capabilities::radio::vendor(shouldUseMinBasebandTransportIOReadSize);
  if (((_DWORD)v8 - 1) > 2)
    v9 = 23;
  else
    v9 = dword_1A3580480[(int)v8 - 1];
  if ((capabilities::abs::shouldUseMinBasebandTransportIOReadCount(v8) & 1) != 0)
    goto LABEL_10;
  if (v9 == 2)
  {
    v10 = 16;
    goto LABEL_16;
  }
  if (v9 == 16 || v9 == 15)
    v10 = 36;
  else
LABEL_10:
    v10 = 4;
LABEL_16:
  *((_DWORD *)this + 89) = v10;
  *((_BYTE *)this + 360) = 0;
  *((_DWORD *)this + 95) = 0;
  *(_QWORD *)((char *)this + 372) = 0;
  *(_QWORD *)((char *)this + 364) = 0;
  *((_QWORD *)this + 48) = TelephonyBasebandCreateController();
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1A343C000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_6;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v12 = (char *)this + 392;
    v13 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v21 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_21;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v12 = (char *)this + 392;
    v13 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v21 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_21;
  }
  v14 = (unint64_t *)(v13 + 8);
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
LABEL_21:
  v16 = *((_QWORD *)this + 11);
  object = v16;
  if (v16)
    dispatch_retain(v16);
  BasebandTransport::create((capabilities::radio *)&v21, &object, (uint64_t)v12);
  if (object)
    dispatch_release(object);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  *((_BYTE *)this + 473) = 0;
  *((_QWORD *)this + 60) = 0;
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_BYTE *)this + 432) = 0;
  *((_BYTE *)this + 471) = 0;
  *(_QWORD *)((char *)this + 463) = 0;
  *(_QWORD *)((char *)this + 455) = 0;
}

void sub_1A3484430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  void **v19;
  NSObject *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;

  if (object)
    dispatch_release(object);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v18 + 368);
  v21 = *(NSObject **)(v18 + 320);
  if (v21)
  {
    dispatch_group_leave(v21);
    v22 = *(NSObject **)(v18 + 320);
    if (v22)
      dispatch_release(v22);
  }
  v23 = *(void **)(v18 + 280);
  if (v23)
  {
    *(_QWORD *)(v18 + 288) = v23;
    operator delete(v23);
    v24 = *(void **)(v18 + 256);
    if (!v24)
    {
LABEL_8:
      v25 = *(void **)(v18 + 232);
      if (!v25)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else
  {
    v24 = *(void **)(v18 + 256);
    if (!v24)
      goto LABEL_8;
  }
  *(_QWORD *)(v18 + 264) = v24;
  operator delete(v24);
  v25 = *(void **)(v18 + 232);
  if (!v25)
  {
LABEL_9:
    if ((*(char *)(v18 + 231) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  *(_QWORD *)(v18 + 240) = v25;
  operator delete(v25);
  if ((*(char *)(v18 + 231) & 0x80000000) == 0)
  {
LABEL_10:
    if ((*(char *)(v18 + 207) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(v18 + 208));
  if ((*(char *)(v18 + 207) & 0x80000000) == 0)
  {
LABEL_11:
    if ((*(char *)(v18 + 183) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_18:
  operator delete(*(void **)(v18 + 184));
  if ((*(char *)(v18 + 183) & 0x80000000) == 0)
  {
LABEL_13:
    Trace::~Trace((Trace *)v18);
    _Unwind_Resume(a1);
  }
LABEL_12:
  operator delete(*v19);
  goto LABEL_13;
}

uint64_t ICETrace::getDefaultEnabled(ICETrace *this)
{
  int IsCarrierBuild;

  IsCarrierBuild = TelephonyUtilIsCarrierBuild();
  return IsCarrierBuild & (TelephonyUtilIsInternalBuild() ^ 1);
}

BOOL ICETrace::init(_QWORD *a1, uint64_t a2, uint64_t *a3, NSObject **a4)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  NSObject *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  int v23;
  _QWORD v25[6];
  std::string __p;
  uint64_t v27;
  std::__shared_weak_count *v28;
  dispatch_object_t object;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  _QWORD block[6];

  v30 = 0;
  v31 = &v30;
  v32 = 0x2000000000;
  v33 = 0;
  v7 = MEMORY[0x1E0C809B0];
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 1174405120;
  v25[2] = ___ZN8ICETrace4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_8weak_ptrIN3abm19BasebandTracingTaskEEEN8dispatch5groupE_block_invoke;
  v25[3] = &unk_1E4A08608;
  v25[4] = &v30;
  v25[5] = a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v8 = (std::__shared_weak_count *)a3[1];
  v27 = *a3;
  v28 = v8;
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }
  v11 = *a4;
  object = v11;
  if (v11)
    dispatch_retain(v11);
  v34 = v25;
  block[0] = v7;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke_0;
  block[3] = &__block_descriptor_tmp_131;
  block[4] = a1 + 9;
  block[5] = &v34;
  v12 = a1[11];
  if (a1[12])
  {
    dispatch_async_and_wait(v12, block);
    v13 = (std::__shared_weak_count *)a1[10];
    if (!v13)
LABEL_27:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    dispatch_sync(v12, block);
    v13 = (std::__shared_weak_count *)a1[10];
    if (!v13)
      goto LABEL_27;
  }
  v14 = a1[9];
  v15 = std::__shared_weak_count::lock(v13);
  if (!v15)
    goto LABEL_27;
  v16 = v15;
  v17 = operator new(8uLL);
  *v17 = a1;
  v18 = a1[11];
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v20 = __ldxr(p_shared_owners);
  while (__stxr(v20 + 1, p_shared_owners));
  v21 = operator new(0x18uLL);
  *v21 = v17;
  v21[1] = v14;
  v21[2] = v16;
  dispatch_async_f(v18, v21, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<Trace>::execute_wrapped<ICETrace::init(std::string,std::weak_ptr<abm::BasebandTracingTask>,dispatch::group)::$_0>(ICETrace::init(std::string,std::weak_ptr<abm::BasebandTracingTask>,dispatch::group)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ICETrace::init(std::string,std::weak_ptr<abm::BasebandTracingTask>,dispatch::group)::$_0,std::default_delete<ICETrace::init(std::string,std::weak_ptr<abm::BasebandTracingTask>,dispatch::group)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  v23 = *((unsigned __int8 *)v31 + 24);
  if (object)
    dispatch_release(object);
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  _Block_object_dispose(&v30, 8);
  return v23 != 0;
}

void sub_1A3484774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN8ICETrace4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_8weak_ptrIN3abm19BasebandTracingTaskEEEN8dispatch5groupE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  NSObject *v6;
  _BOOL4 v7;
  _BOOL4 v8;
  _BOOL4 v9;
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;
  _BOOL4 v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  _BOOL4 v18;
  void *v19[3];
  dispatch_object_t object;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string v23;
  std::string __p;
  void *v25[2];
  char v26;
  _BYTE v27[48];

  v2 = *(_QWORD *)(a1 + 40);
  if (*(char *)(a1 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    v21 = *(_QWORD *)(a1 + 72);
    v22 = v3;
    if (!v3)
      goto LABEL_7;
  }
  else
  {
    v23 = *(std::string *)(a1 + 48);
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    v21 = *(_QWORD *)(a1 + 72);
    v22 = v3;
    if (!v3)
      goto LABEL_7;
  }
  p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
  do
    v5 = __ldxr(p_shared_weak_owners);
  while (__stxr(v5 + 1, p_shared_weak_owners));
LABEL_7:
  v6 = *(NSObject **)(a1 + 88);
  object = v6;
  if (v6)
    dispatch_retain(v6);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = Trace::init(v2, (void **)&v23.__r_.__value_.__l.__data_, &v21, &object);
  if (object)
    dispatch_release(object);
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      goto LABEL_206;
LABEL_17:
    HIBYTE(v19[2]) = 7;
    strcpy((char *)v19, "Enabled");
    memset(&__p, 0, sizeof(__p));
    v26 = 7;
    strcpy((char *)v25, "BBTrace");
    memset(&v27[24], 0, 24);
    v7 = defaults::get((char *)v25, (char *)v19, (std::string *)&v27[24]);
    if (v7)
    {
      prop::file::get<std::string>((const void **)v25, (uint64_t)v19, (uint64_t)&v27[24], (std::string *)v27);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = *(std::string *)v27;
    }
    if ((v27[47] & 0x80000000) != 0)
    {
      operator delete(*(void **)&v27[24]);
      if ((v26 & 0x80000000) == 0)
      {
LABEL_23:
        if (!v7)
        {
LABEL_28:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v19[2]) & 0x80000000) == 0)
              goto LABEL_30;
          }
          else if ((SHIBYTE(v19[2]) & 0x80000000) == 0)
          {
            goto LABEL_30;
          }
          operator delete(v19[0]);
LABEL_30:
          HIBYTE(v19[2]) = 4;
          strcpy((char *)v19, "Mode");
          memset(&__p, 0, sizeof(__p));
          v26 = 7;
          strcpy((char *)v25, "BBTrace");
          memset(&v27[24], 0, 24);
          v8 = defaults::get((char *)v25, (char *)v19, (std::string *)&v27[24]);
          if (v8)
          {
            prop::file::get<std::string>((const void **)v25, (uint64_t)v19, (uint64_t)&v27[24], (std::string *)v27);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            __p = *(std::string *)v27;
          }
          if ((v27[47] & 0x80000000) != 0)
          {
            operator delete(*(void **)&v27[24]);
            if ((v26 & 0x80000000) == 0)
            {
LABEL_36:
              if (!v8)
                goto LABEL_44;
              goto LABEL_42;
            }
          }
          else if ((v26 & 0x80000000) == 0)
          {
            goto LABEL_36;
          }
          operator delete(v25[0]);
          if (!v8)
            goto LABEL_44;
LABEL_42:
          *(_DWORD *)&v27[24] = -1431655766;
          if (util::convert<int>(&__p, &v27[24], 0))
            *(_DWORD *)(v2 + 152) = *(_DWORD *)&v27[24];
LABEL_44:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v19[2]) & 0x80000000) == 0)
              goto LABEL_46;
          }
          else if ((SHIBYTE(v19[2]) & 0x80000000) == 0)
          {
            goto LABEL_46;
          }
          operator delete(v19[0]);
LABEL_46:
          HIBYTE(v19[2]) = 7;
          strcpy((char *)v19, "History");
          memset(&__p, 0, sizeof(__p));
          v26 = 7;
          strcpy((char *)v25, "BBTrace");
          memset(&v27[24], 0, 24);
          v9 = defaults::get((char *)v25, (char *)v19, (std::string *)&v27[24]);
          if (v9)
          {
            prop::file::get<std::string>((const void **)v25, (uint64_t)v19, (uint64_t)&v27[24], (std::string *)v27);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            __p = *(std::string *)v27;
          }
          if ((v27[47] & 0x80000000) != 0)
          {
            operator delete(*(void **)&v27[24]);
            if ((v26 & 0x80000000) == 0)
            {
LABEL_52:
              if (!v9)
              {
LABEL_59:
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(__p.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v19[2]) & 0x80000000) == 0)
                    goto LABEL_61;
                }
                else if ((SHIBYTE(v19[2]) & 0x80000000) == 0)
                {
                  goto LABEL_61;
                }
                operator delete(v19[0]);
LABEL_61:
                v27[23] = 4;
                strcpy(v27, "File");
                v27[47] = 7;
                strcpy(&v27[24], "BBTrace");
                prop::get_from_file(&v27[24], v27, v2 + 160);
                if ((v27[47] & 0x80000000) != 0)
                {
                  operator delete(*(void **)&v27[24]);
                  if ((v27[23] & 0x80000000) == 0)
                    goto LABEL_63;
                }
                else if ((v27[23] & 0x80000000) == 0)
                {
                  goto LABEL_63;
                }
                operator delete(*(void **)v27);
LABEL_63:
                strcpy(&v27[23], "\nBBTrace");
                strcpy(v27, "File_Sleep");
                v27[47] = 7;
                prop::get_from_file(&v27[24], v27, v2 + 184);
                if ((v27[47] & 0x80000000) != 0)
                {
                  operator delete(*(void **)&v27[24]);
                  if ((v27[23] & 0x80000000) == 0)
                    goto LABEL_65;
                }
                else if ((v27[23] & 0x80000000) == 0)
                {
                  goto LABEL_65;
                }
                operator delete(*(void **)v27);
LABEL_65:
                HIBYTE(v19[2]) = 20;
                strcpy((char *)v19, "Enabled_During_Sleep");
                memset(&__p, 0, sizeof(__p));
                v26 = 7;
                strcpy((char *)v25, "BBTrace");
                memset(&v27[24], 0, 24);
                v10 = defaults::get((char *)v25, (char *)v19, (std::string *)&v27[24]);
                if (v10)
                {
                  prop::file::get<std::string>((const void **)v25, (uint64_t)v19, (uint64_t)&v27[24], (std::string *)v27);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  __p = *(std::string *)v27;
                }
                if ((v27[47] & 0x80000000) != 0)
                {
                  operator delete(*(void **)&v27[24]);
                  if ((v26 & 0x80000000) == 0)
                  {
LABEL_71:
                    if (!v10)
                    {
LABEL_82:
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(__p.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(v19[2]) & 0x80000000) == 0)
                          goto LABEL_84;
                      }
                      else if ((SHIBYTE(v19[2]) & 0x80000000) == 0)
                      {
                        goto LABEL_84;
                      }
                      operator delete(v19[0]);
LABEL_84:
                      HIBYTE(v19[2]) = 14;
                      strcpy((char *)v19, "BackgroundMode");
                      memset(&__p, 0, sizeof(__p));
                      v26 = 7;
                      strcpy((char *)v25, "BBTrace");
                      memset(&v27[24], 0, 24);
                      v11 = defaults::get((char *)v25, (char *)v19, (std::string *)&v27[24]);
                      if (v11)
                      {
                        prop::file::get<std::string>((const void **)v25, (uint64_t)v19, (uint64_t)&v27[24], (std::string *)v27);
                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(__p.__r_.__value_.__l.__data_);
                        __p = *(std::string *)v27;
                      }
                      if ((v27[47] & 0x80000000) != 0)
                      {
                        operator delete(*(void **)&v27[24]);
                        if ((v26 & 0x80000000) == 0)
                        {
LABEL_90:
                          if (!v11)
                          {
LABEL_97:
                            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                            {
                              operator delete(__p.__r_.__value_.__l.__data_);
                              if ((SHIBYTE(v19[2]) & 0x80000000) == 0)
                                goto LABEL_99;
                            }
                            else if ((SHIBYTE(v19[2]) & 0x80000000) == 0)
                            {
                              goto LABEL_99;
                            }
                            operator delete(v19[0]);
LABEL_99:
                            HIBYTE(v19[2]) = 14;
                            strcpy((char *)v19, "High_Watermark");
                            memset(&__p, 0, sizeof(__p));
                            v26 = 7;
                            strcpy((char *)v25, "BBTrace");
                            memset(&v27[24], 0, 24);
                            v12 = defaults::get((char *)v25, (char *)v19, (std::string *)&v27[24]);
                            if (v12)
                            {
                              prop::file::get<std::string>((const void **)v25, (uint64_t)v19, (uint64_t)&v27[24], (std::string *)v27);
                              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(__p.__r_.__value_.__l.__data_);
                              __p = *(std::string *)v27;
                            }
                            if ((v27[47] & 0x80000000) != 0)
                            {
                              operator delete(*(void **)&v27[24]);
                              if ((v26 & 0x80000000) == 0)
                              {
LABEL_105:
                                if (!v12)
                                {
LABEL_112:
                                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                  {
                                    operator delete(__p.__r_.__value_.__l.__data_);
                                    if ((SHIBYTE(v19[2]) & 0x80000000) == 0)
                                      goto LABEL_114;
                                  }
                                  else if ((SHIBYTE(v19[2]) & 0x80000000) == 0)
                                  {
                                    goto LABEL_114;
                                  }
                                  operator delete(v19[0]);
LABEL_114:
                                  HIBYTE(v19[2]) = 13;
                                  strcpy((char *)v19, "Low_Watermark");
                                  memset(&__p, 0, sizeof(__p));
                                  v26 = 7;
                                  strcpy((char *)v25, "BBTrace");
                                  memset(&v27[24], 0, 24);
                                  v13 = defaults::get((char *)v25, (char *)v19, (std::string *)&v27[24]);
                                  if (v13)
                                  {
                                    prop::file::get<std::string>((const void **)v25, (uint64_t)v19, (uint64_t)&v27[24], (std::string *)v27);
                                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                      operator delete(__p.__r_.__value_.__l.__data_);
                                    __p = *(std::string *)v27;
                                  }
                                  if ((v27[47] & 0x80000000) != 0)
                                  {
                                    operator delete(*(void **)&v27[24]);
                                    if ((v26 & 0x80000000) == 0)
                                    {
LABEL_120:
                                      if (!v13)
                                      {
LABEL_127:
                                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                        {
                                          operator delete(__p.__r_.__value_.__l.__data_);
                                          if ((SHIBYTE(v19[2]) & 0x80000000) == 0)
                                            goto LABEL_129;
                                        }
                                        else if ((SHIBYTE(v19[2]) & 0x80000000) == 0)
                                        {
                                          goto LABEL_129;
                                        }
                                        operator delete(v19[0]);
LABEL_129:
                                        v27[23] = 7;
                                        strcpy(v27, "ETBFile");
                                        v27[47] = 7;
                                        strcpy(&v27[24], "BBTrace");
                                        prop::get_from_file(&v27[24], v27, v2 + 208);
                                        if ((v27[47] & 0x80000000) != 0)
                                        {
                                          operator delete(*(void **)&v27[24]);
                                          if ((v27[23] & 0x80000000) == 0)
                                            goto LABEL_131;
                                        }
                                        else if ((v27[23] & 0x80000000) == 0)
                                        {
                                          goto LABEL_131;
                                        }
                                        operator delete(*(void **)v27);
LABEL_131:
                                        HIBYTE(v19[2]) = 18;
                                        strcpy((char *)v19, "MaxMemoryFileCount");
                                        memset(&__p, 0, sizeof(__p));
                                        v26 = 7;
                                        strcpy((char *)v25, "BBTrace");
                                        memset(&v27[24], 0, 24);
                                        v14 = defaults::get((char *)v25, (char *)v19, (std::string *)&v27[24]);
                                        if (v14)
                                        {
                                          prop::file::get<std::string>((const void **)v25, (uint64_t)v19, (uint64_t)&v27[24], (std::string *)v27);
                                          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                            operator delete(__p.__r_.__value_.__l.__data_);
                                          __p = *(std::string *)v27;
                                        }
                                        if ((v27[47] & 0x80000000) != 0)
                                        {
                                          operator delete(*(void **)&v27[24]);
                                          if ((v26 & 0x80000000) == 0)
                                          {
LABEL_137:
                                            if (!v14)
                                            {
LABEL_146:
                                              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                              {
                                                operator delete(__p.__r_.__value_.__l.__data_);
                                                if ((SHIBYTE(v19[2]) & 0x80000000) == 0)
                                                  goto LABEL_148;
                                              }
                                              else if ((SHIBYTE(v19[2]) & 0x80000000) == 0)
                                              {
                                                goto LABEL_148;
                                              }
                                              operator delete(v19[0]);
LABEL_148:
                                              HIBYTE(v19[2]) = 15;
                                              strcpy((char *)v19, "KeepScratchLogs");
                                              memset(&__p, 0, sizeof(__p));
                                              v26 = 7;
                                              strcpy((char *)v25, "BBTrace");
                                              memset(&v27[24], 0, 24);
                                              v15 = defaults::get((char *)v25, (char *)v19, (std::string *)&v27[24]);
                                              if (v15)
                                              {
                                                prop::file::get<std::string>((const void **)v25, (uint64_t)v19, (uint64_t)&v27[24], (std::string *)v27);
                                                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                  operator delete(__p.__r_.__value_.__l.__data_);
                                                __p = *(std::string *)v27;
                                              }
                                              if ((v27[47] & 0x80000000) != 0)
                                              {
                                                operator delete(*(void **)&v27[24]);
                                                if ((v26 & 0x80000000) == 0)
                                                {
LABEL_154:
                                                  if (!v15)
                                                  {
LABEL_161:
                                                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                    {
                                                      operator delete(__p.__r_.__value_.__l.__data_);
                                                      if ((SHIBYTE(v19[2]) & 0x80000000) == 0)
                                                        goto LABEL_163;
                                                    }
                                                    else if ((SHIBYTE(v19[2]) & 0x80000000) == 0)
                                                    {
                                                      goto LABEL_163;
                                                    }
                                                    operator delete(v19[0]);
LABEL_163:
                                                    HIBYTE(v19[2]) = 8;
                                                    strcpy((char *)v19, "FileSize");
                                                    memset(&__p, 0, sizeof(__p));
                                                    v26 = 7;
                                                    strcpy((char *)v25, "BBTrace");
                                                    memset(&v27[24], 0, 24);
                                                    v16 = defaults::get((char *)v25, (char *)v19, (std::string *)&v27[24]);
                                                    if (v16)
                                                    {
                                                      prop::file::get<std::string>((const void **)v25, (uint64_t)v19, (uint64_t)&v27[24], (std::string *)v27);
                                                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                        operator delete(__p.__r_.__value_.__l.__data_);
                                                      __p = *(std::string *)v27;
                                                    }
                                                    if ((v27[47] & 0x80000000) != 0)
                                                    {
                                                      operator delete(*(void **)&v27[24]);
                                                      if ((v26 & 0x80000000) == 0)
                                                      {
LABEL_169:
                                                        if (!v16)
                                                        {
LABEL_176:
                                                          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                          {
                                                            operator delete(__p.__r_.__value_.__l.__data_);
                                                            if ((SHIBYTE(v19[2]) & 0x80000000) == 0)
                                                              goto LABEL_178;
                                                          }
                                                          else if ((SHIBYTE(v19[2]) & 0x80000000) == 0)
                                                          {
                                                            goto LABEL_178;
                                                          }
                                                          operator delete(v19[0]);
LABEL_178:
                                                          HIBYTE(v19[2]) = 6;
                                                          strcpy((char *)v19, "SizeIO");
                                                          memset(&__p, 0, sizeof(__p));
                                                          v26 = 7;
                                                          strcpy((char *)v25, "BBTrace");
                                                          memset(&v27[24], 0, 24);
                                                          v17 = defaults::get((char *)v25, (char *)v19, (std::string *)&v27[24]);
                                                          if (v17)
                                                          {
                                                            prop::file::get<std::string>((const void **)v25, (uint64_t)v19, (uint64_t)&v27[24], (std::string *)v27);
                                                            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                              operator delete(__p.__r_.__value_.__l.__data_);
                                                            __p = *(std::string *)v27;
                                                          }
                                                          if ((v27[47] & 0x80000000) != 0)
                                                          {
                                                            operator delete(*(void **)&v27[24]);
                                                            if ((v26 & 0x80000000) == 0)
                                                            {
LABEL_184:
                                                              if (!v17)
                                                              {
LABEL_191:
                                                                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                                {
                                                                  operator delete(__p.__r_.__value_.__l.__data_);
                                                                  if ((SHIBYTE(v19[2]) & 0x80000000) == 0)
                                                                    goto LABEL_193;
                                                                }
                                                                else if ((SHIBYTE(v19[2]) & 0x80000000) == 0)
                                                                {
                                                                  goto LABEL_193;
                                                                }
                                                                operator delete(v19[0]);
LABEL_193:
                                                                HIBYTE(v19[2]) = 14;
                                                                strcpy((char *)v19, "NumberOfReadIO");
                                                                memset(&__p, 0, sizeof(__p));
                                                                v26 = 7;
                                                                strcpy((char *)v25, "BBTrace");
                                                                memset(&v27[24], 0, 24);
                                                                v18 = defaults::get((char *)v25, (char *)v19, (std::string *)&v27[24]);
                                                                if (v18)
                                                                {
                                                                  prop::file::get<std::string>((const void **)v25, (uint64_t)v19, (uint64_t)&v27[24], (std::string *)v27);
                                                                  __p = *(std::string *)v27;
                                                                }
                                                                if ((v27[47] & 0x80000000) != 0)
                                                                {
                                                                  operator delete(*(void **)&v27[24]);
                                                                  if ((v26 & 0x80000000) == 0)
                                                                  {
LABEL_197:
                                                                    if (!v18)
                                                                    {
LABEL_204:
                                                                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                                                      {
                                                                        operator delete(__p.__r_.__value_.__l.__data_);
                                                                        if ((SHIBYTE(v19[2]) & 0x80000000) == 0)
                                                                          goto LABEL_206;
                                                                      }
                                                                      else if ((SHIBYTE(v19[2]) & 0x80000000) == 0)
                                                                      {
                                                                        goto LABEL_206;
                                                                      }
                                                                      operator delete(v19[0]);
                                                                      goto LABEL_206;
                                                                    }
LABEL_203:
                                                                    util::convert<unsigned int>(&__p, (_DWORD *)(v2 + 356), 0);
                                                                    goto LABEL_204;
                                                                  }
                                                                }
                                                                else if ((v26 & 0x80000000) == 0)
                                                                {
                                                                  goto LABEL_197;
                                                                }
                                                                operator delete(v25[0]);
                                                                if (!v18)
                                                                  goto LABEL_204;
                                                                goto LABEL_203;
                                                              }
LABEL_190:
                                                              util::convert<unsigned int>(&__p, (_DWORD *)(v2 + 352), 0);
                                                              goto LABEL_191;
                                                            }
                                                          }
                                                          else if ((v26 & 0x80000000) == 0)
                                                          {
                                                            goto LABEL_184;
                                                          }
                                                          operator delete(v25[0]);
                                                          if (!v17)
                                                            goto LABEL_191;
                                                          goto LABEL_190;
                                                        }
LABEL_175:
                                                        util::convert<unsigned int>(&__p, (_DWORD *)(v2 + 348), 0);
                                                        goto LABEL_176;
                                                      }
                                                    }
                                                    else if ((v26 & 0x80000000) == 0)
                                                    {
                                                      goto LABEL_169;
                                                    }
                                                    operator delete(v25[0]);
                                                    if (!v16)
                                                      goto LABEL_176;
                                                    goto LABEL_175;
                                                  }
LABEL_160:
                                                  util::convert<BOOL>(&__p, (BOOL *)(v2 + 344), 0);
                                                  goto LABEL_161;
                                                }
                                              }
                                              else if ((v26 & 0x80000000) == 0)
                                              {
                                                goto LABEL_154;
                                              }
                                              operator delete(v25[0]);
                                              if (!v15)
                                                goto LABEL_161;
                                              goto LABEL_160;
                                            }
LABEL_145:
                                            util::convert<unsigned int>(&__p, (_DWORD *)(v2 + 332), 0);
                                            goto LABEL_146;
                                          }
                                        }
                                        else if ((v26 & 0x80000000) == 0)
                                        {
                                          goto LABEL_137;
                                        }
                                        operator delete(v25[0]);
                                        if (!v14)
                                          goto LABEL_146;
                                        goto LABEL_145;
                                      }
LABEL_126:
                                      util::convert<int>(&__p, (_DWORD *)(v2 + 312), 0);
                                      goto LABEL_127;
                                    }
                                  }
                                  else if ((v26 & 0x80000000) == 0)
                                  {
                                    goto LABEL_120;
                                  }
                                  operator delete(v25[0]);
                                  if (!v13)
                                    goto LABEL_127;
                                  goto LABEL_126;
                                }
LABEL_111:
                                util::convert<int>(&__p, (_DWORD *)(v2 + 308), 0);
                                goto LABEL_112;
                              }
                            }
                            else if ((v26 & 0x80000000) == 0)
                            {
                              goto LABEL_105;
                            }
                            operator delete(v25[0]);
                            if (!v12)
                              goto LABEL_112;
                            goto LABEL_111;
                          }
LABEL_96:
                          util::convert<BOOL>(&__p, (BOOL *)(v2 + 304), 0);
                          goto LABEL_97;
                        }
                      }
                      else if ((v26 & 0x80000000) == 0)
                      {
                        goto LABEL_90;
                      }
                      operator delete(v25[0]);
                      if (!v11)
                        goto LABEL_97;
                      goto LABEL_96;
                    }
LABEL_81:
                    util::convert<BOOL>(&__p, (BOOL *)(v2 + 316), 0);
                    goto LABEL_82;
                  }
                }
                else if ((v26 & 0x80000000) == 0)
                {
                  goto LABEL_71;
                }
                operator delete(v25[0]);
                if (!v10)
                  goto LABEL_82;
                goto LABEL_81;
              }
LABEL_58:
              util::convert<int>(&__p, (_DWORD *)(v2 + 340), 0);
              goto LABEL_59;
            }
          }
          else if ((v26 & 0x80000000) == 0)
          {
            goto LABEL_52;
          }
          operator delete(v25[0]);
          if (!v9)
            goto LABEL_59;
          goto LABEL_58;
        }
LABEL_27:
        util::convert<BOOL>(&__p, (BOOL *)(v2 + 336), 0);
        goto LABEL_28;
      }
    }
    else if ((v26 & 0x80000000) == 0)
    {
      goto LABEL_23;
    }
    operator delete(v25[0]);
    if (!v7)
      goto LABEL_28;
    goto LABEL_27;
  }
  operator delete(v23.__r_.__value_.__l.__data_);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    goto LABEL_17;
LABEL_206:
  *(_BYTE *)(v2 + 472) = 0;
}

void sub_1A3485624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void sub_1A3485768(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, dispatch_object_t object, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count *v20;

  if (object)
  {
    dispatch_release(object);
    v20 = a14;
    if (!a14)
    {
LABEL_3:
      if (a20 < 0)
        goto LABEL_10;
      goto LABEL_11;
    }
  }
  else
  {
    v20 = a14;
    if (!a14)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v20);
  if (a20 < 0)
LABEL_10:
    JUMPOUT(0x1A348575CLL);
LABEL_11:
  JUMPOUT(0x1A3485760);
}

void __copy_helper_block_e8_48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c50_ZTSNSt3__18weak_ptrIN3abm19BasebandTracingTaskEEE88c21_ZTSN8dispatch5groupE(std::string *a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  std::string::size_type v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;

  v4 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
    v6 = *(_QWORD *)(a2 + 80);
    a1[3].__r_.__value_.__r.__words[0] = *(_QWORD *)(a2 + 72);
    a1[3].__r_.__value_.__l.__size_ = v6;
    if (!v6)
      goto LABEL_7;
LABEL_5:
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    goto LABEL_7;
  }
  v5 = *(_OWORD *)(a2 + 48);
  v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
  *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  v6 = *(_QWORD *)(a2 + 80);
  a1[3].__r_.__value_.__r.__words[0] = *(_QWORD *)(a2 + 72);
  a1[3].__r_.__value_.__l.__size_ = v6;
  if (v6)
    goto LABEL_5;
LABEL_7:
  v9 = *(NSObject **)(a2 + 88);
  a1[3].__r_.__value_.__r.__words[2] = (std::string::size_type)v9;
  if (v9)
    dispatch_retain(v9);
}

void __destroy_helper_block_e8_48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c50_ZTSNSt3__18weak_ptrIN3abm19BasebandTracingTaskEEE88c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;

  v2 = *(NSObject **)(a1 + 88);
  if (v2)
    dispatch_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void ICETrace::~ICETrace(ICETrace *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  const void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;

  *(_QWORD *)this = off_1E4A08538;
  BasebandTransport::close(*((BasebandTransport **)this + 49));
  if (*((_BYTE *)this + 472))
  {
    dispatch_group_leave(*((dispatch_group_t *)this + 18));
    *((_BYTE *)this + 472) = 0;
  }
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *((_BYTE *)this + 336) = 0;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 61);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 58);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if ((*((char *)this + 455) & 0x80000000) == 0)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  if (*((char *)this + 455) < 0)
LABEL_18:
    operator delete(*((void **)this + 54));
LABEL_19:
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 53);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v14 = (const void *)*((_QWORD *)this + 51);
      if (!v14)
        goto LABEL_25;
      goto LABEL_24;
    }
  }
  v14 = (const void *)*((_QWORD *)this + 51);
  if (v14)
LABEL_24:
    _Block_release(v14);
LABEL_25:
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 50);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = *((_QWORD *)this + 40);
  if (v21)
  {
    dispatch_group_leave(v21);
    v22 = *((_QWORD *)this + 40);
    if (v22)
      dispatch_release(v22);
  }
  v23 = (void *)*((_QWORD *)this + 35);
  if (v23)
  {
    *((_QWORD *)this + 36) = v23;
    operator delete(v23);
  }
  v24 = (void *)*((_QWORD *)this + 32);
  if (v24)
  {
    *((_QWORD *)this + 33) = v24;
    operator delete(v24);
  }
  v25 = (void *)*((_QWORD *)this + 29);
  if (v25)
  {
    *((_QWORD *)this + 30) = v25;
    operator delete(v25);
  }
  if ((*((char *)this + 231) & 0x80000000) == 0)
  {
    if ((*((char *)this + 207) & 0x80000000) == 0)
      goto LABEL_46;
LABEL_49:
    operator delete(*((void **)this + 23));
    if ((*((char *)this + 183) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_50;
  }
  operator delete(*((void **)this + 26));
  if (*((char *)this + 207) < 0)
    goto LABEL_49;
LABEL_46:
  if ((*((char *)this + 183) & 0x80000000) == 0)
  {
LABEL_47:
    Trace::~Trace(this);
    return;
  }
LABEL_50:
  operator delete(*((void **)this + 20));
  Trace::~Trace(this);
}

{
  void *v1;

  ICETrace::~ICETrace(this);
  operator delete(v1);
}

void ICETrace::closeTransport_sync(ICETrace *this)
{
  BasebandTransport::close(*((BasebandTransport **)this + 49));
  if (*((_BYTE *)this + 472))
  {
    dispatch_group_leave(*((dispatch_group_t *)this + 18));
    *((_BYTE *)this + 472) = 0;
  }
}

void std::shared_ptr<TraceFileCollection>::reset[abi:ne180100](_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

const char *ICETrace::getName(ICETrace *this)
{
  return "trace.bb";
}

void ICETrace::getSettingPrefix(char *a1@<X8>)
{
  a1[23] = 15;
  strcpy(a1, "BasebandTrace::");
}

uint64_t ICETrace::openTransport_sync(ICETrace *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  unint64_t v15;
  void *v16;
  void *v17;
  capabilities::abs *shouldUseMinBasebandTransportIOReadSize;
  uint64_t v19;
  void *v20;
  config::hw *v21;
  uint64_t v23;
  const void *v24;
  void *v25;
  void *v26;
  void *v27;
  int v28;
  char v29;
  __int16 v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _BYTE v36[7];
  _QWORD v37[6];
  std::__shared_weak_count *v38;
  _QWORD aBlock[6];
  std::__shared_weak_count *v40;
  uint8_t buf[16];

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
    if (*(_DWORD *)(*((_QWORD *)this + 49) + 328) == 1)
    {
LABEL_9:
      v10 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A343C000, v10, OS_LOG_TYPE_DEFAULT, "#I Transport is open already", buf, 2u);
      }
      v11 = 1;
      goto LABEL_33;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    if (*(_DWORD *)(*((_QWORD *)this + 49) + 328) == 1)
      goto LABEL_9;
  }
  v12 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN8ICETrace18openTransport_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_6_1;
  aBlock[4] = this;
  aBlock[5] = v3;
  v40 = v5;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v14 = _Block_copy(aBlock);
  v37[0] = v12;
  v37[1] = 1174405120;
  v37[2] = ___ZN8ICETrace18openTransport_syncEv_block_invoke_7;
  v37[3] = &__block_descriptor_tmp_10_0;
  v37[4] = this;
  v37[5] = v3;
  v38 = v5;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  v16 = _Block_copy(v37);
  v17 = (void *)*((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = v16;
  if (v17)
    _Block_release(v17);
  shouldUseMinBasebandTransportIOReadSize = (capabilities::abs *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)v17);
  capabilities::abs::shouldUseMinBasebandTransportIOReadCount(shouldUseMinBasebandTransportIOReadSize);
  v19 = *((_QWORD *)this + 49);
  v28 = 9;
  v29 = 0;
  v30 = -21846;
  v31 = -86;
  v32 = 10;
  v33 = *((_QWORD *)this + 44);
  v34 = 0;
  v35 = 0;
  memset(v36, 170, sizeof(v36));
  if (v14)
    v20 = _Block_copy(v14);
  else
    v20 = 0;
  v27 = v20;
  v11 = (*(uint64_t (**)(uint64_t, int *, void **))(*(_QWORD *)v19 + 48))(v19, &v28, &v27);
  v21 = (config::hw *)v27;
  if (v27)
    _Block_release(v27);
  if ((_DWORD)v11 && (config::hw::watch(v21) & 1) == 0 && !*((_BYTE *)this + 304))
  {
    v23 = *((_QWORD *)this + 49);
    v24 = (const void *)*((_QWORD *)this + 51);
    if (v24)
    {
      v25 = _Block_copy(v24);
      v26 = v25;
      BasebandTransport::reportStatus(v23, 600, &v26);
      if (v25)
        _Block_release(v25);
    }
    else
    {
      v26 = 0;
      BasebandTransport::reportStatus(v23, 600, &v26);
    }
  }
  if (v38)
    std::__shared_weak_count::__release_weak(v38);
  if (v14)
    _Block_release(v14);
  if (v40)
    std::__shared_weak_count::__release_weak(v40);
LABEL_33:
  std::__shared_weak_count::__release_weak(v5);
  return v11;
}

void sub_1A3485EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *aBlock, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  std::__shared_weak_count *v30;
  const void *v31;

  if (a23)
    std::__shared_weak_count::__release_weak(a23);
  if (v31)
    _Block_release(v31);
  if (a30)
    std::__shared_weak_count::__release_weak(a30);
  std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(a1);
}

void ___ZN8ICETrace18openTransport_syncEv_block_invoke(_QWORD *a1, const unsigned __int8 *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  TraceFileCollection *v13;
  NSObject *v14;
  capabilities::abs *v15;
  unsigned int v16;
  unsigned int v17;
  NSObject *v18;
  uint8_t buf[4];
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (a1[5])
      {
        if (*(_BYTE *)(v7 + 336) && !*(_BYTE *)(v7 + 360) && (v13 = *(TraceFileCollection **)(v7 + 368)) != 0)
        {
          v14 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            v20 = a3;
            _os_log_debug_impl(&dword_1A343C000, v14, OS_LOG_TYPE_DEBUG, "#D Received TRACE chunk size %d", buf, 8u);
            v13 = *(TraceFileCollection **)(v7 + 368);
          }
          TraceFileCollection::handleReadData(v13, a2);
          v15 = (capabilities::abs *)TraceFileCollection::getInMemoryRemaining(*(TraceFileCollection **)(v7 + 368));
          v16 = v15;
          if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v15))
            v17 = 0x8000;
          else
            v17 = 0x10000;
          if (v16 <= v17)
          {
            v18 = *(NSObject **)(v7 + 40);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_debug_impl(&dword_1A343C000, v18, OS_LOG_TYPE_DEBUG, "#D Archiving...", buf, 2u);
            }
            TraceFileCollection::archive(*(TraceFileCollection **)(v7 + 368));
          }
        }
        else
        {
          v10 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            v20 = a3;
            _os_log_debug_impl(&dword_1A343C000, v10, OS_LOG_TYPE_DEBUG, "#D Trace disabled. Dropping received TRACE chunk size %d", buf, 8u);
          }
        }
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1A3486110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN8ICETrace18openTransport_syncEv_block_invoke_7(_QWORD *a1, _DWORD *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  __int128 v9;
  const void *v10;
  size_t v11;
  size_t v12;
  __int128 *p_dst;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  size_t v18;
  size_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::string v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  void *v30;
  char v31;
  __int128 v32;
  char v33;
  _BYTE v34[8];
  _QWORD *v35;
  void *__p[2];
  char v37;
  __int128 v38[2];
  __int128 v39;
  unint64_t v40;
  __int128 __dst;
  unint64_t v42;
  __int128 buf;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  std::__shared_weak_count *v51;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v51 = v6;
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        if (*a2 == 3)
        {
          v14 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf) = 0;
            _os_log_impl(&dword_1A343C000, v14, OS_LOG_TYPE_DEFAULT, "#E No Logging Traffic detected (Stalled?)", (uint8_t *)&buf, 2u);
          }
        }
        else if (*a2 == 2)
        {
          v8 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf) = 0;
            _os_log_impl(&dword_1A343C000, v8, OS_LOG_TYPE_DEFAULT, "#E TRACE transport error", (uint8_t *)&buf, 2u);
          }
          *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v48 = v9;
          v49 = v9;
          v46 = v9;
          v47 = v9;
          v44 = v9;
          v45 = v9;
          buf = v9;
          v10 = (const void *)*MEMORY[0x1E0CFB590];
          v11 = strlen((const char *)*MEMORY[0x1E0CFB590]);
          if (v11 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v12 = v11;
          if (v11 >= 0x17)
          {
            v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v11 | 7) != 0x17)
              v15 = v11 | 7;
            v16 = v15 + 1;
            p_dst = (__int128 *)operator new(v15 + 1);
            *((_QWORD *)&__dst + 1) = v12;
            v42 = v16 | 0x8000000000000000;
            *(_QWORD *)&__dst = p_dst;
          }
          else
          {
            HIBYTE(v42) = v11;
            p_dst = &__dst;
            if (!v11)
            {
LABEL_18:
              *((_BYTE *)p_dst + v12) = 0;
              v17 = (const void *)*MEMORY[0x1E0CFC000];
              v18 = strlen((const char *)*MEMORY[0x1E0CFC000]);
              if (v18 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              v19 = v18;
              if (v18 >= 0x17)
              {
                v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v18 | 7) != 0x17)
                  v21 = v18 | 7;
                v22 = v21 + 1;
                v20 = operator new(v21 + 1);
                *((_QWORD *)&v39 + 1) = v19;
                v40 = v22 | 0x8000000000000000;
                *(_QWORD *)&v39 = v20;
              }
              else
              {
                HIBYTE(v40) = v18;
                v20 = &v39;
                if (!v18)
                {
LABEL_26:
                  v20[v19] = 0;
                  BYTE7(v38[1]) = 21;
                  strcpy((char *)v38, "TRACE transport error");
                  Timestamp::Timestamp((Timestamp *)v34);
                  Timestamp::asString((uint64_t)v34, 0, 9, __p);
                  v33 = 0;
                  LOBYTE(v32) = 0;
                  ResetInfo::ResetInfo((std::string *)&buf, &__dst, &v39, v38, (uint64_t)__p, 7, &v32);
                  if (v37 < 0)
                  {
                    operator delete(__p[0]);
                    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v34, v35);
                    if ((SHIBYTE(v40) & 0x80000000) == 0)
                    {
LABEL_28:
                      if ((SHIBYTE(v42) & 0x80000000) == 0)
                        goto LABEL_29;
LABEL_41:
                      operator delete((void *)__dst);
LABEL_29:
                      ResetInfo::ResetInfo(&v25, &buf);
                      ICETrace::commandResetModem_sync(v5, (__int128 *)&v25);
                      if (v31 < 0)
                      {
                        operator delete(v30);
                        if ((v29 & 0x80000000) == 0)
                        {
LABEL_31:
                          if ((v27 & 0x80000000) == 0)
                            goto LABEL_32;
                          goto LABEL_44;
                        }
                      }
                      else if ((v29 & 0x80000000) == 0)
                      {
                        goto LABEL_31;
                      }
                      operator delete(v28);
                      if ((v27 & 0x80000000) == 0)
                      {
LABEL_32:
                        if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          goto LABEL_33;
                        goto LABEL_45;
                      }
LABEL_44:
                      operator delete(v26);
                      if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_33:
                        if ((SHIBYTE(v49) & 0x80000000) == 0)
                          goto LABEL_34;
                        goto LABEL_46;
                      }
LABEL_45:
                      operator delete(v25.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v49) & 0x80000000) == 0)
                      {
LABEL_34:
                        if ((SBYTE7(v47) & 0x80000000) == 0)
                          goto LABEL_35;
                        goto LABEL_47;
                      }
LABEL_46:
                      operator delete(*((void **)&v48 + 1));
                      if ((SBYTE7(v47) & 0x80000000) == 0)
                      {
LABEL_35:
                        if ((SHIBYTE(v45) & 0x80000000) == 0)
                          goto LABEL_36;
                        goto LABEL_48;
                      }
LABEL_47:
                      operator delete((void *)v46);
                      if ((SHIBYTE(v45) & 0x80000000) == 0)
                      {
LABEL_36:
                        if ((SBYTE7(v44) & 0x80000000) == 0)
                          goto LABEL_37;
                        goto LABEL_49;
                      }
LABEL_48:
                      operator delete(*((void **)&v44 + 1));
                      if ((SBYTE7(v44) & 0x80000000) == 0)
                      {
LABEL_37:
                        v7 = v51;
                        if (!v51)
                          return;
                        goto LABEL_50;
                      }
LABEL_49:
                      operator delete((void *)buf);
                      v7 = v51;
                      if (!v51)
                        return;
                      goto LABEL_50;
                    }
                  }
                  else
                  {
                    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v34, v35);
                    if ((SHIBYTE(v40) & 0x80000000) == 0)
                      goto LABEL_28;
                  }
                  operator delete((void *)v39);
                  if ((SHIBYTE(v42) & 0x80000000) == 0)
                    goto LABEL_29;
                  goto LABEL_41;
                }
              }
              memmove(v20, v17, v19);
              goto LABEL_26;
            }
          }
          memmove(p_dst, v10, v12);
          goto LABEL_18;
        }
      }
LABEL_50:
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1A3486524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  ResetInfo::~ResetInfo((void **)va);
  ResetInfo::~ResetInfo((void **)(v2 - 192));
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v2 - 80);
  _Unwind_Resume(a1);
}

void sub_1A3486550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,_QWORD *a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (a35 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a27, a28);
  if (a45 < 0)
  {
    operator delete(a40);
    if ((*(char *)(v45 - 193) & 0x80000000) == 0)
    {
LABEL_5:
      std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v45 - 80);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v45 - 193) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v45 - 216));
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v45 - 80);
  _Unwind_Resume(a1);
}

void sub_1A34865D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

void ICETrace::commandResetModem_sync(uint64_t a1, __int128 *a2)
{
  NSObject *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::string v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  uint8_t buf[16];
  uint64_t v20;
  std::__shared_weak_count *v21;

  v4 = *(NSObject **)(a1 + 144);
  if (v4)
  {
    dispatch_retain(*(dispatch_object_t *)(a1 + 144));
    dispatch_group_enter(v4);
  }
  v5 = *(std::__shared_weak_count **)(a1 + 136);
  if (v5)
  {
    v6 = std::__shared_weak_count::lock(v5);
    v21 = v6;
    if (v6)
    {
      v7 = *(_QWORD *)(a1 + 128);
      v20 = v7;
      if (!v7)
      {
        v9 = v6;
LABEL_19:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        goto LABEL_23;
      }
      v8 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A343C000, v8, OS_LOG_TYPE_DEFAULT, "#I Request to reset baseband", buf, 2u);
      }
      ResetInfo::ResetInfo(&v12, a2);
      abm::BasebandTracingTask::commandResetModem(v7, (ResetInfo *)&v12);
      if (v18 < 0)
      {
        operator delete(__p);
        if ((v16 & 0x80000000) == 0)
        {
LABEL_10:
          if ((v14 & 0x80000000) == 0)
            goto LABEL_11;
          goto LABEL_17;
        }
      }
      else if ((v16 & 0x80000000) == 0)
      {
        goto LABEL_10;
      }
      operator delete(v15);
      if ((v14 & 0x80000000) == 0)
      {
LABEL_11:
        if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_12;
LABEL_18:
        operator delete(v12.__r_.__value_.__l.__data_);
        v9 = v21;
        if (!v21)
          goto LABEL_23;
        goto LABEL_19;
      }
LABEL_17:
      operator delete(v13);
      if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_12:
        v9 = v21;
        if (!v21)
          goto LABEL_23;
        goto LABEL_19;
      }
      goto LABEL_18;
    }
  }
LABEL_23:
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
}

void sub_1A3486768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  NSObject *v9;
  uint64_t v10;

  ResetInfo::~ResetInfo(&a9);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v10 - 64);
  if (v9)
  {
    dispatch_group_leave(v9);
    dispatch_release(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t ICETrace::issueStartCommands_sync(ICETrace *this, group *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *gr_name;
  unint64_t v13;
  void *v14;
  NSObject *v15;
  unint64_t v16;
  void *v17;
  NSObject *v18;
  unint64_t v19;
  void *v20;
  NSObject *v21;
  unint64_t v22;
  void *v23;
  capabilities::abs *TraceConfigFile_sync;
  const void *v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  int64_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  xpc_object_t v39;
  void *v40;
  char v41;
  xpc_object_t xdict;
  xpc_object_t xdicta;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  dispatch_object_t object;
  std::string v49;
  std::string v50;
  _QWORD v51[5];
  dispatch_group_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  void *v55;
  dispatch_object_t v56;
  void *v57;
  dispatch_object_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD v61[5];
  dispatch_group_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  void *v65;
  dispatch_object_t v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD v69[5];
  dispatch_group_t group;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD aBlock[5];
  char *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t v79;
  unint64_t v80;
  uint8_t buf[8];
  uint64_t v82;
  void (*v83)(_QWORD *);
  void *v84;
  void *v85;
  CFTypeRef v86;
  xpc_object_t v87;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v3 || (v5 = *((_QWORD *)this + 9), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  gr_name = a2->gr_name;
  if (gr_name)
  {
    dispatch_retain((dispatch_object_t)gr_name);
    dispatch_group_enter((dispatch_group_t)gr_name);
  }
  v79 = 0xAAAAAAAAAAAAAAAALL;
  v80 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN8ICETrace23issueStartCommands_syncEN8dispatch5groupE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_14_2;
  aBlock[4] = this;
  v76 = gr_name;
  if (gr_name)
  {
    dispatch_retain((dispatch_object_t)gr_name);
    dispatch_group_enter((dispatch_group_t)gr_name);
  }
  v77 = v5;
  v78 = v7;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v14 = _Block_copy(aBlock);
  v15 = *((_QWORD *)this + 11);
  if (v15)
    dispatch_retain(*((dispatch_object_t *)this + 11));
  v79 = (unint64_t)v14;
  v80 = (unint64_t)v15;
  v73 = 0xAAAAAAAAAAAAAAAALL;
  v74 = 0xAAAAAAAAAAAAAAAALL;
  v69[0] = MEMORY[0x1E0C809B0];
  v69[1] = 1174405120;
  v69[2] = ___ZN8ICETrace23issueStartCommands_syncEN8dispatch5groupE_block_invoke_15;
  v69[3] = &__block_descriptor_tmp_17_3;
  v69[4] = this;
  group = (dispatch_group_t)gr_name;
  if (gr_name)
  {
    dispatch_retain((dispatch_object_t)gr_name);
    dispatch_group_enter(group);
  }
  v71 = v5;
  v72 = v7;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  v17 = _Block_copy(v69);
  v18 = *((_QWORD *)this + 11);
  if (v18)
    dispatch_retain(*((dispatch_object_t *)this + 11));
  v73 = (unint64_t)v17;
  v74 = (unint64_t)v18;
  v67 = 0xAAAAAAAAAAAAAAAALL;
  v68 = 0xAAAAAAAAAAAAAAAALL;
  v61[0] = MEMORY[0x1E0C809B0];
  v61[1] = 1174405120;
  v61[2] = ___ZN8ICETrace23issueStartCommands_syncEN8dispatch5groupE_block_invoke_18;
  v61[3] = &__block_descriptor_tmp_19_1;
  v61[4] = this;
  v62 = (dispatch_group_t)gr_name;
  if (gr_name)
  {
    dispatch_retain((dispatch_object_t)gr_name);
    dispatch_group_enter(v62);
  }
  v63 = v5;
  v64 = v7;
  do
    v19 = __ldxr(p_shared_weak_owners);
  while (__stxr(v19 + 1, p_shared_weak_owners));
  if (v17)
  {
    v65 = _Block_copy(v17);
    v66 = v18;
    if (!v18)
      goto LABEL_30;
    goto LABEL_29;
  }
  v65 = 0;
  v66 = v18;
  if (v18)
LABEL_29:
    dispatch_retain(v18);
LABEL_30:
  v45 = v17;
  v20 = _Block_copy(v61);
  v21 = *((_QWORD *)this + 11);
  v46 = v20;
  if (v21)
  {
    dispatch_retain(v21);
    v20 = v46;
  }
  v67 = (unint64_t)v20;
  v68 = (unint64_t)v21;
  v59 = 0xAAAAAAAAAAAAAAAALL;
  v60 = 0xAAAAAAAAAAAAAAAALL;
  v51[0] = MEMORY[0x1E0C809B0];
  v51[1] = 1174405120;
  v51[2] = ___ZN8ICETrace23issueStartCommands_syncEN8dispatch5groupE_block_invoke_20;
  v51[3] = &__block_descriptor_tmp_27;
  v51[4] = this;
  v52 = (dispatch_group_t)gr_name;
  if (gr_name)
  {
    dispatch_retain((dispatch_object_t)gr_name);
    dispatch_group_enter(v52);
  }
  v53 = v5;
  v54 = v7;
  do
    v22 = __ldxr(p_shared_weak_owners);
  while (__stxr(v22 + 1, p_shared_weak_owners));
  v23 = v46;
  if (v46)
    v23 = _Block_copy(v46);
  v55 = v23;
  v56 = v21;
  if (v21)
    dispatch_retain(v21);
  if (v14)
  {
    v57 = _Block_copy(v14);
    v58 = v15;
    if (!v15)
      goto LABEL_43;
    goto LABEL_42;
  }
  v57 = 0;
  v58 = v15;
  if (v15)
LABEL_42:
    dispatch_retain(v15);
LABEL_43:
  v44 = v14;
  TraceConfigFile_sync = (capabilities::abs *)_Block_copy(v51);
  v25 = TraceConfigFile_sync;
  v26 = *((_QWORD *)this + 11);
  if (v26)
    dispatch_retain(*((dispatch_object_t *)this + 11));
  v59 = (unint64_t)v25;
  v60 = (unint64_t)v26;
  if (*((_QWORD *)this + 30) != *((_QWORD *)this + 29))
    goto LABEL_54;
  if (*((char *)this + 183) < 0)
    std::string::__init_copy_ctor_external(&v50, *((const std::string::value_type **)this + 20), *((_QWORD *)this + 21));
  else
    v50 = *(std::string *)((char *)this + 160);
  TraceConfigFile_sync = (capabilities::abs *)ICETrace::loadTraceConfigFile_sync((uint64_t)this, (std::string::size_type)&v50, (_QWORD *)this + 29, 0);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v50.__r_.__value_.__l.__data_);
    if (*((_QWORD *)this + 33) != *((_QWORD *)this + 32))
      goto LABEL_61;
  }
  else
  {
LABEL_54:
    if (*((_QWORD *)this + 33) != *((_QWORD *)this + 32))
      goto LABEL_61;
  }
  if (*((char *)this + 207) < 0)
    std::string::__init_copy_ctor_external(&v49, *((const std::string::value_type **)this + 23), *((_QWORD *)this + 24));
  else
    v49 = *(std::string *)((char *)this + 184);
  TraceConfigFile_sync = (capabilities::abs *)ICETrace::loadTraceConfigFile_sync((uint64_t)this, (std::string::size_type)&v49, (_QWORD *)this + 32, 0);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
LABEL_61:
  if (*((_QWORD *)this + 30) != *((_QWORD *)this + 29) && *((_QWORD *)this + 33) != *((_QWORD *)this + 32))
  {
    if (capabilities::abs::supportsBBUSBMux(TraceConfigFile_sync))
    {
      v27 = *((_QWORD *)this + 52);
      if (v25)
      {
        v47 = _Block_copy(v25);
        object = v26;
        if (!v26)
        {
LABEL_67:
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v27 + 72))(v27, &v47);
          if (object)
            dispatch_release(object);
          if (v47)
            _Block_release(v47);
          goto LABEL_153;
        }
      }
      else
      {
        v47 = 0;
        object = v26;
        if (!v26)
          goto LABEL_67;
      }
      dispatch_retain(v26);
      goto LABEL_67;
    }
    v31 = *((unsigned int *)this + 38);
    v32 = xpc_dictionary_create(0, 0, 0);
    if (v32 || (v32 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1A85902BC](v32) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v32);
        xdict = v32;
      }
      else
      {
        xdict = xpc_null_create();
      }
    }
    else
    {
      xdict = xpc_null_create();
      v32 = 0;
    }
    xpc_release(v32);
    v33 = xpc_null_create();
    xpc_release(v33);
    v34 = xpc_int64_create(v31);
    if (v34 || (v34 = xpc_null_create()) != 0)
    {
      xpc_retain(v34);
      v35 = v34;
    }
    else
    {
      v35 = xpc_null_create();
      v34 = 0;
    }
    xpc_dictionary_set_value(xdict, "Mode", v35);
    v36 = xpc_null_create();
    xpc_release(v35);
    xpc_release(v36);
    v37 = xdict;
    if (xdict)
      xpc_retain(xdict);
    else
      v37 = xpc_null_create();
    xpc_release(v34);
    xpc_release(xdict);
    v38 = xpc_null_create();
    xpc_release(v38);
    if (v37)
    {
      xpc_retain(v37);
      v39 = v37;
      if (v25)
        goto LABEL_140;
    }
    else
    {
      v39 = xpc_null_create();
      if (v25)
      {
LABEL_140:
        v40 = _Block_copy(v25);
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        v82 = 1174405120;
        v83 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEclIJS5_S7_EEEvDpT__block_invoke;
        v84 = &__block_descriptor_tmp_132;
        if (v40)
        {
          xdicta = v40;
          v41 = 0;
          v85 = _Block_copy(v40);
          v86 = 0;
          v87 = v39;
          if (v39)
          {
LABEL_142:
            xpc_retain(v39);
LABEL_146:
            dispatch_async(v26, buf);
            xpc_release(v87);
            v87 = 0;
            if (v86)
              CFRelease(v86);
            if (v85)
              _Block_release(v85);
            if ((v41 & 1) == 0)
              _Block_release(xdicta);
            xpc_release(v39);
            xpc_release(v37);
LABEL_153:
            v29 = 1;
            if (!v26)
              goto LABEL_75;
LABEL_74:
            dispatch_release(v26);
            goto LABEL_75;
          }
        }
        else
        {
          xdicta = 0;
          v41 = 1;
          v85 = 0;
          v86 = 0;
          v87 = v39;
          if (v39)
            goto LABEL_142;
        }
LABEL_145:
        v87 = xpc_null_create();
        goto LABEL_146;
      }
    }
    xdicta = 0;
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    v82 = 1174405120;
    v83 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEclIJS5_S7_EEEvDpT__block_invoke;
    v84 = &__block_descriptor_tmp_132;
    v41 = 1;
    v85 = 0;
    v86 = 0;
    v87 = v39;
    if (v39)
      goto LABEL_142;
    goto LABEL_145;
  }
  v28 = *((_QWORD *)this + 5);
  v29 = 0;
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v28, OS_LOG_TYPE_DEFAULT, "#E Cannot find trace config file!", buf, 2u);
    v29 = 0;
  }
  if (v26)
    goto LABEL_74;
LABEL_75:
  if (v25)
    _Block_release(v25);
  if (v58)
    dispatch_release(v58);
  if (v57)
    _Block_release(v57);
  if (v56)
    dispatch_release(v56);
  if (v55)
    _Block_release(v55);
  if (v54)
    std::__shared_weak_count::__release_weak(v54);
  if (v52)
  {
    dispatch_group_leave(v52);
    if (v52)
      dispatch_release(v52);
  }
  if (v21)
    dispatch_release(v21);
  if (v46)
    _Block_release(v46);
  if (v66)
    dispatch_release(v66);
  if (v65)
    _Block_release(v65);
  if (v64)
    std::__shared_weak_count::__release_weak(v64);
  if (v62)
  {
    dispatch_group_leave(v62);
    if (v62)
      dispatch_release(v62);
  }
  if (v18)
    dispatch_release(v18);
  if (v45)
    _Block_release(v45);
  if (v72)
    std::__shared_weak_count::__release_weak(v72);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (v15)
    dispatch_release(v15);
  if (v44)
    _Block_release(v44);
  if (v78)
    std::__shared_weak_count::__release_weak(v78);
  if (v76)
  {
    dispatch_group_leave((dispatch_group_t)v76);
    if (v76)
      dispatch_release((dispatch_object_t)v76);
  }
  if (gr_name)
  {
    dispatch_group_leave((dispatch_group_t)gr_name);
    dispatch_release((dispatch_object_t)gr_name);
  }
  std::__shared_weak_count::__release_weak(v7);
  return v29;
}

void sub_1A3487084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,dispatch_group_t group,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,dispatch_group_t object,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,dispatch_group_t a60,uint64_t a61,std::__shared_weak_count *a62)
{
  std::__shared_weak_count *v62;
  NSObject *v63;
  uint64_t v64;
  std::__shared_weak_count *v66;
  NSObject *v67;
  NSObject *v68;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,xpc::dict)>::~callback((uint64_t)&a13);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,xpc::dict)>::~callback((uint64_t)&a41);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a39);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a37);
  if (a36)
    std::__shared_weak_count::__release_weak(a36);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a53);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(a9);
  if (a50)
    std::__shared_weak_count::__release_weak(a50);
  if (object)
  {
    dispatch_group_leave(object);
    if (object)
      dispatch_release(object);
  }
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v64 - 256);
  if (a62)
    std::__shared_weak_count::__release_weak(a62);
  if (a60)
  {
    dispatch_group_leave(a60);
    if (a60)
      dispatch_release(a60);
  }
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v64 - 176);
  v66 = *(std::__shared_weak_count **)(v64 - 184);
  if (v66)
    std::__shared_weak_count::__release_weak(v66);
  v67 = *(NSObject **)(v64 - 200);
  if (v67)
  {
    dispatch_group_leave(v67);
    v68 = *(NSObject **)(v64 - 200);
    if (v68)
      dispatch_release(v68);
  }
  if (v63)
  {
    dispatch_group_leave(v63);
    dispatch_release(v63);
  }
  std::__shared_weak_count::__release_weak(v62);
  _Unwind_Resume(a1);
}

void ___ZN8ICETrace23issueStartCommands_syncEN8dispatch5groupE_block_invoke(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  NSObject *v9;
  __int128 v10;
  const void *v11;
  size_t v12;
  size_t v13;
  __int128 *v14;
  __int128 v15;
  const void *v16;
  size_t v17;
  size_t v18;
  __int128 *p_dst;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  size_t v23;
  size_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  size_t v33;
  size_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  std::string v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *v46;
  char v47;
  __int128 v48;
  char v49;
  void *v50[2];
  char v51;
  std::string v52;
  void *v53;
  char v54;
  void *v55;
  char v56;
  void *v57;
  char v58;
  __int128 v59;
  char v60;
  _BYTE v61[8];
  _QWORD *v62;
  void *__p[2];
  char v64;
  char *v65;
  __int128 v66;
  __int128 v67;
  unint64_t v68;
  __int128 __dst;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  uint8_t buf[16];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v4 = a1[4];
  v5 = *(NSObject **)(v4 + 144);
  if (v5)
  {
    dispatch_retain(*(dispatch_object_t *)(v4 + 144));
    dispatch_group_enter(v5);
  }
  v71 = 0;
  v72 = 0;
  v6 = (std::__shared_weak_count *)a1[7];
  if (!v6)
    goto LABEL_79;
  v72 = std::__shared_weak_count::lock(v6);
  if (!v72)
    goto LABEL_84;
  v71 = a1[6];
  if (!v71)
    goto LABEL_79;
  v7 = *a2;
  v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v8 = 0;
  v9 = *(NSObject **)(v4 + 40);
  if (!v8)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A343C000, v9, OS_LOG_TYPE_DEFAULT, "#I Successfully set mode", buf, 2u);
    }
    *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v78 = v15;
    v79 = v15;
    v76 = v15;
    v77 = v15;
    v74 = v15;
    v75 = v15;
    *(_OWORD *)buf = v15;
    v16 = (const void *)*MEMORY[0x1E0CFB598];
    v17 = strlen((const char *)*MEMORY[0x1E0CFB598]);
    if (v17 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v18 = v17;
    if (v17 >= 0x17)
    {
      v30 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17)
        v30 = v17 | 7;
      v31 = v30 + 1;
      p_dst = (__int128 *)operator new(v30 + 1);
      *((_QWORD *)&__dst + 1) = v18;
      v70 = v31 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v70) = v17;
      p_dst = &__dst;
      if (!v17)
      {
LABEL_57:
        *((_BYTE *)p_dst + v18) = 0;
        v32 = (const void *)*MEMORY[0x1E0CFBEA8];
        v33 = strlen((const char *)*MEMORY[0x1E0CFBEA8]);
        if (v33 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v34 = v33;
        if (v33 >= 0x17)
        {
          v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v33 | 7) != 0x17)
            v36 = v33 | 7;
          v37 = v36 + 1;
          v35 = operator new(v36 + 1);
          *((_QWORD *)&v67 + 1) = v34;
          v68 = v37 | 0x8000000000000000;
          *(_QWORD *)&v67 = v35;
        }
        else
        {
          HIBYTE(v68) = v33;
          v35 = &v67;
          if (!v33)
          {
LABEL_65:
            v35[v34] = 0;
            v38 = (char *)operator new(0x40uLL);
            v65 = v38;
            v66 = xmmword_1A35802B0;
            strcpy(v38, "Requesting Soft Reset to make the sync'd trace mode active");
            Timestamp::Timestamp((Timestamp *)v61);
            Timestamp::asString((uint64_t)v61, 0, 9, v50);
            v49 = 0;
            LOBYTE(v48) = 0;
            ResetInfo::ResetInfo((std::string *)buf, &__dst, &v67, (__int128 *)&v65, (uint64_t)v50, 7, &v48);
            if (v51 < 0)
              operator delete(v50[0]);
            std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v61, v62);
            operator delete(v38);
            if (SHIBYTE(v68) < 0)
              operator delete((void *)v67);
            if (SHIBYTE(v70) < 0)
              operator delete((void *)__dst);
            ResetInfo::ResetInfo(&v41, (__int128 *)buf);
            ICETrace::commandResetModem_sync(v4, (__int128 *)&v41);
            if (v47 < 0)
            {
              operator delete(v46);
              if ((v45 & 0x80000000) == 0)
              {
LABEL_73:
                if ((v43 & 0x80000000) == 0)
                  goto LABEL_74;
                goto LABEL_89;
              }
            }
            else if ((v45 & 0x80000000) == 0)
            {
              goto LABEL_73;
            }
            operator delete(v44);
            if ((v43 & 0x80000000) == 0)
            {
LABEL_74:
              if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_75;
              goto LABEL_90;
            }
LABEL_89:
            operator delete(v42);
            if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_75:
              if ((SHIBYTE(v79) & 0x80000000) == 0)
                goto LABEL_76;
              goto LABEL_48;
            }
LABEL_90:
            operator delete(v41.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v79) & 0x80000000) == 0)
              goto LABEL_76;
LABEL_48:
            operator delete(*((void **)&v78 + 1));
            if (SBYTE7(v77) < 0)
              goto LABEL_49;
            goto LABEL_77;
          }
        }
        memmove(v35, v32, v34);
        goto LABEL_65;
      }
    }
    memmove(p_dst, v16, v18);
    goto LABEL_57;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v7;
    _os_log_error_impl(&dword_1A343C000, v9, OS_LOG_TYPE_ERROR, "Unable to set mode %@", buf, 0xCu);
  }
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v78 = v10;
  v79 = v10;
  v76 = v10;
  v77 = v10;
  v74 = v10;
  v75 = v10;
  *(_OWORD *)buf = v10;
  v11 = (const void *)*MEMORY[0x1E0CFB590];
  v12 = strlen((const char *)*MEMORY[0x1E0CFB590]);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v20 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v20 = v12 | 7;
    v21 = v20 + 1;
    v14 = (__int128 *)operator new(v20 + 1);
    *((_QWORD *)&__dst + 1) = v13;
    v70 = v21 | 0x8000000000000000;
    *(_QWORD *)&__dst = v14;
    goto LABEL_24;
  }
  HIBYTE(v70) = v12;
  v14 = &__dst;
  if (v12)
LABEL_24:
    memmove(v14, v11, v13);
  *((_BYTE *)v14 + v13) = 0;
  v22 = (const void *)*MEMORY[0x1E0CFBEA8];
  v23 = strlen((const char *)*MEMORY[0x1E0CFBEA8]);
  if (v23 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v24 = v23;
  if (v23 >= 0x17)
  {
    v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v26 = v23 | 7;
    v27 = v26 + 1;
    v25 = operator new(v26 + 1);
    *((_QWORD *)&v67 + 1) = v24;
    v68 = v27 | 0x8000000000000000;
    *(_QWORD *)&v67 = v25;
    goto LABEL_32;
  }
  HIBYTE(v68) = v23;
  v25 = &v67;
  if (v23)
LABEL_32:
    memmove(v25, v22, v24);
  *((_BYTE *)v25 + v24) = 0;
  v28 = (char *)operator new(0x28uLL);
  v65 = v28;
  v66 = xmmword_1A35802A0;
  strcpy(v28, "Failed to sync trace mode between AP/BB");
  Timestamp::Timestamp((Timestamp *)v61);
  Timestamp::asString((uint64_t)v61, 0, 9, __p);
  v60 = 0;
  LOBYTE(v59) = 0;
  ResetInfo::ResetInfo((std::string *)buf, &__dst, &v67, (__int128 *)&v65, (uint64_t)__p, 7, &v59);
  if (v64 < 0)
    operator delete(__p[0]);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v61, v62);
  operator delete(v28);
  if (SHIBYTE(v68) < 0)
    operator delete((void *)v67);
  if (SHIBYTE(v70) < 0)
    operator delete((void *)__dst);
  ResetInfo::ResetInfo(&v52, (__int128 *)buf);
  ICETrace::commandResetModem_sync(v4, (__int128 *)&v52);
  if (v58 < 0)
  {
    operator delete(v57);
    if ((v56 & 0x80000000) == 0)
    {
LABEL_41:
      if ((v54 & 0x80000000) == 0)
        goto LABEL_42;
LABEL_46:
      operator delete(v53);
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_47;
      goto LABEL_75;
    }
  }
  else if ((v56 & 0x80000000) == 0)
  {
    goto LABEL_41;
  }
  operator delete(v55);
  if (v54 < 0)
    goto LABEL_46;
LABEL_42:
  if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_75;
LABEL_47:
  operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79) < 0)
    goto LABEL_48;
LABEL_76:
  if (SBYTE7(v77) < 0)
  {
LABEL_49:
    operator delete((void *)v76);
    if (SHIBYTE(v75) < 0)
      goto LABEL_50;
    goto LABEL_78;
  }
LABEL_77:
  if (SHIBYTE(v75) < 0)
  {
LABEL_50:
    operator delete(*((void **)&v74 + 1));
    if (SBYTE7(v74) < 0)
      goto LABEL_51;
    goto LABEL_79;
  }
LABEL_78:
  if (SBYTE7(v74) < 0)
  {
LABEL_51:
    operator delete(*(void **)buf);
    v29 = v72;
    if (!v72)
      goto LABEL_84;
    goto LABEL_80;
  }
LABEL_79:
  v29 = v72;
  if (!v72)
    goto LABEL_84;
LABEL_80:
  p_shared_owners = (unint64_t *)&v29->__shared_owners_;
  do
    v40 = __ldaxr(p_shared_owners);
  while (__stlxr(v40 - 1, p_shared_owners));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
LABEL_84:
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
}

void sub_1A34878D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  NSObject *v9;
  uint64_t v10;

  ResetInfo::~ResetInfo(&a9);
  ResetInfo::~ResetInfo((void **)(v10 - 208));
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v10 - 224);
  if (v9)
  {
    dispatch_group_leave(v9);
    dispatch_release(v9);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1A3487A24()
{
  uint64_t v0;
  uint64_t v1;

  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1 - 224);
  if (v0)
    JUMPOUT(0x1A34879F8);
  JUMPOUT(0x1A3487A1CLL);
}

uint64_t ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void ___ZN8ICETrace23issueStartCommands_syncEN8dispatch5groupE_block_invoke_15(_QWORD *a1, __CFError **a2)
{
  uint64_t v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  __CFError *v7;
  uint64_t (*v8)(uint64_t);
  NSObject *v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  __int128 v12;
  const void *v13;
  size_t v14;
  size_t v15;
  __int128 *p_dst;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  size_t v20;
  size_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::string v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  __int128 v35;
  char v36;
  _BYTE v37[8];
  _QWORD *v38;
  void *__p[2];
  char v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  __int128 __dst;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint8_t buf[16];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v4 = a1[4];
  v5 = *(NSObject **)(v4 + 144);
  if (v5)
  {
    dispatch_retain(*(dispatch_object_t *)(v4 + 144));
    dispatch_group_enter(v5);
  }
  v47 = 0;
  v48 = 0;
  v6 = (std::__shared_weak_count *)a1[7];
  if (!v6)
    goto LABEL_48;
  v48 = std::__shared_weak_count::lock(v6);
  if (!v48)
    goto LABEL_53;
  v47 = a1[6];
  if (!v47)
    goto LABEL_48;
  v7 = *a2;
  v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v8 = 0;
  v9 = *(NSObject **)(v4 + 40);
  if (!v8)
  {
    if (os_log_type_enabled(*(os_log_t *)(v4 + 40), OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A343C000, v9, OS_LOG_TYPE_DEFAULT, "#I Trace command succeeded.", buf, 2u);
      v11 = v48;
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (os_log_type_enabled(*(os_log_t *)(v4 + 40), OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v7;
    _os_log_error_impl(&dword_1A343C000, v9, OS_LOG_TYPE_ERROR, "Failed ARI trace command: %@", buf, 0xCu);
    v7 = *a2;
  }
  if (CFErrorGetCode(v7) != 2)
  {
    *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v54 = v12;
    v55 = v12;
    v52 = v12;
    v53 = v12;
    v50 = v12;
    v51 = v12;
    *(_OWORD *)buf = v12;
    v13 = (const void *)*MEMORY[0x1E0CFB590];
    v14 = strlen((const char *)*MEMORY[0x1E0CFB590]);
    if (v14 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v15 = v14;
    if (v14 >= 0x17)
    {
      v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v17 = v14 | 7;
      v18 = v17 + 1;
      p_dst = (__int128 *)operator new(v17 + 1);
      *((_QWORD *)&__dst + 1) = v15;
      v46 = v18 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v46) = v14;
      p_dst = &__dst;
      if (!v14)
      {
LABEL_26:
        *((_BYTE *)p_dst + v15) = 0;
        v19 = (const void *)*MEMORY[0x1E0CFBEA8];
        v20 = strlen((const char *)*MEMORY[0x1E0CFBEA8]);
        if (v20 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v21 = v20;
        if (v20 >= 0x17)
        {
          v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v20 | 7) != 0x17)
            v23 = v20 | 7;
          v24 = v23 + 1;
          v22 = operator new(v23 + 1);
          *((_QWORD *)&v43 + 1) = v21;
          v44 = v24 | 0x8000000000000000;
          *(_QWORD *)&v43 = v22;
        }
        else
        {
          HIBYTE(v44) = v20;
          v22 = &v43;
          if (!v20)
          {
LABEL_34:
            v22[v21] = 0;
            v25 = (char *)operator new(0x20uLL);
            v41 = v25;
            v42 = xmmword_1A357F050;
            strcpy(v25, "Failed ARI trace command");
            Timestamp::Timestamp((Timestamp *)v37);
            Timestamp::asString((uint64_t)v37, 0, 9, __p);
            v36 = 0;
            LOBYTE(v35) = 0;
            ResetInfo::ResetInfo((std::string *)buf, &__dst, &v43, (__int128 *)&v41, (uint64_t)__p, 7, &v35);
            if (v40 < 0)
              operator delete(__p[0]);
            std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v37, v38);
            operator delete(v25);
            if (SHIBYTE(v44) < 0)
              operator delete((void *)v43);
            if (SHIBYTE(v46) < 0)
              operator delete((void *)__dst);
            ResetInfo::ResetInfo(&v28, (__int128 *)buf);
            ICETrace::commandResetModem_sync(v4, (__int128 *)&v28);
            if (v34 < 0)
            {
              operator delete(v33);
              if ((v32 & 0x80000000) == 0)
              {
LABEL_42:
                if ((v30 & 0x80000000) == 0)
                  goto LABEL_43;
                goto LABEL_58;
              }
            }
            else if ((v32 & 0x80000000) == 0)
            {
              goto LABEL_42;
            }
            operator delete(v31);
            if ((v30 & 0x80000000) == 0)
            {
LABEL_43:
              if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_44;
              goto LABEL_59;
            }
LABEL_58:
            operator delete(v29);
            if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_44:
              if ((SHIBYTE(v55) & 0x80000000) == 0)
                goto LABEL_45;
              goto LABEL_60;
            }
LABEL_59:
            operator delete(v28.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v55) & 0x80000000) == 0)
            {
LABEL_45:
              if ((SBYTE7(v53) & 0x80000000) == 0)
                goto LABEL_46;
              goto LABEL_61;
            }
LABEL_60:
            operator delete(*((void **)&v54 + 1));
            if ((SBYTE7(v53) & 0x80000000) == 0)
            {
LABEL_46:
              if ((SHIBYTE(v51) & 0x80000000) == 0)
                goto LABEL_47;
LABEL_62:
              operator delete(*((void **)&v50 + 1));
              if (SBYTE7(v50) < 0)
                goto LABEL_63;
LABEL_48:
              v11 = v48;
              if (!v48)
                goto LABEL_53;
              goto LABEL_49;
            }
LABEL_61:
            operator delete((void *)v52);
            if ((SHIBYTE(v51) & 0x80000000) == 0)
            {
LABEL_47:
              if ((SBYTE7(v50) & 0x80000000) == 0)
                goto LABEL_48;
LABEL_63:
              operator delete(*(void **)buf);
              v11 = v48;
              if (!v48)
                goto LABEL_53;
              goto LABEL_49;
            }
            goto LABEL_62;
          }
        }
        memmove(v22, v19, v21);
        goto LABEL_34;
      }
    }
    memmove(p_dst, v13, v15);
    goto LABEL_26;
  }
  v10 = *(NSObject **)(v4 + 40);
  if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    goto LABEL_48;
  *(_WORD *)buf = 0;
  _os_log_error_impl(&dword_1A343C000, v10, OS_LOG_TYPE_ERROR, "File access error!", buf, 2u);
  v11 = v48;
LABEL_49:
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_53:
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
}

void sub_1A3487F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  NSObject *v49;
  uint64_t v50;

  ResetInfo::~ResetInfo((void **)&a9);
  ResetInfo::~ResetInfo((void **)(v50 - 208));
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v50 - 224);
  if (!v49)
    _Unwind_Resume(a1);
  dispatch_group_leave(v49);
  dispatch_release(v49);
  _Unwind_Resume(a1);
}

void ___ZN8ICETrace23issueStartCommands_syncEN8dispatch5groupE_block_invoke_18(_QWORD *a1, __CFError **a2)
{
  uint64_t v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  __CFError *v7;
  uint64_t (*v8)(uint64_t);
  NSObject *v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  char v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  NSObject *v18;
  __int128 v19;
  const void *v20;
  size_t v21;
  size_t v22;
  __int128 *p_dst;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  size_t v27;
  size_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  void *v35;
  dispatch_object_t v36;
  void *aBlock;
  dispatch_object_t object;
  std::string v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  __int128 v46;
  char v47;
  _BYTE v48[8];
  _QWORD *v49;
  void *__p[2];
  char v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  unint64_t v55;
  __int128 __dst;
  unint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  _BYTE buf[32];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v4 = a1[4];
  v5 = *(NSObject **)(v4 + 144);
  if (v5)
  {
    dispatch_retain(*(dispatch_object_t *)(v4 + 144));
    dispatch_group_enter(v5);
  }
  v58 = 0;
  v59 = 0;
  v6 = (std::__shared_weak_count *)a1[7];
  if (!v6)
    goto LABEL_60;
  v59 = std::__shared_weak_count::lock(v6);
  if (!v59)
    goto LABEL_65;
  v58 = a1[6];
  if (!v58)
    goto LABEL_60;
  v7 = *a2;
  v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v8 = 0;
  if (!v8)
  {
    *(_QWORD *)&buf[8] = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&buf[16] = 0xAAAAAAAAAAAAAAAALL;
    v12 = *(_BYTE *)(v4 + 304);
    *(_QWORD *)buf = &off_1E4A08BE0;
    buf[8] = 1;
    buf[9] = v12;
    *(_QWORD *)&buf[12] = *(_QWORD *)(v4 + 308);
    v13 = *(_QWORD *)(v4 + 416);
    v14 = (void *)a1[8];
    if (v14)
      v14 = _Block_copy(v14);
    v15 = a1[9];
    aBlock = v14;
    object = v15;
    if (v15)
      dispatch_retain(v15);
    (*(void (**)(uint64_t, _BYTE *, void **))(*(_QWORD *)v13 + 96))(v13, buf, &aBlock);
    if (object)
      dispatch_release(object);
    if (aBlock)
      _Block_release(aBlock);
    v16 = *(_QWORD *)(v4 + 416);
    v17 = (void *)a1[8];
    if (v17)
      v17 = _Block_copy(v17);
    v18 = a1[9];
    v35 = v17;
    v36 = v18;
    if (v18)
      dispatch_retain(v18);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v16 + 48))(v16, &v35);
    if (v36)
      dispatch_release(v36);
    if (v35)
      _Block_release(v35);
    goto LABEL_60;
  }
  v9 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v7;
    _os_log_error_impl(&dword_1A343C000, v9, OS_LOG_TYPE_ERROR, "Failed to set masks: %@", buf, 0xCu);
    v7 = *a2;
  }
  if (CFErrorGetCode(v7) != 2)
  {
    *(_QWORD *)&v19 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v64 = v19;
    v65 = v19;
    v62 = v19;
    v63 = v19;
    *(_OWORD *)&buf[16] = v19;
    v61 = v19;
    *(_OWORD *)buf = v19;
    v20 = (const void *)*MEMORY[0x1E0CFB590];
    v21 = strlen((const char *)*MEMORY[0x1E0CFB590]);
    if (v21 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v22 = v21;
    if (v21 >= 0x17)
    {
      v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v21 | 7) != 0x17)
        v24 = v21 | 7;
      v25 = v24 + 1;
      p_dst = (__int128 *)operator new(v24 + 1);
      *((_QWORD *)&__dst + 1) = v22;
      v57 = v25 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v57) = v21;
      p_dst = &__dst;
      if (!v21)
      {
LABEL_38:
        *((_BYTE *)p_dst + v22) = 0;
        v26 = (const void *)*MEMORY[0x1E0CFBEA8];
        v27 = strlen((const char *)*MEMORY[0x1E0CFBEA8]);
        if (v27 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v28 = v27;
        if (v27 >= 0x17)
        {
          v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v27 | 7) != 0x17)
            v30 = v27 | 7;
          v31 = v30 + 1;
          v29 = operator new(v30 + 1);
          *((_QWORD *)&v54 + 1) = v28;
          v55 = v31 | 0x8000000000000000;
          *(_QWORD *)&v54 = v29;
        }
        else
        {
          HIBYTE(v55) = v27;
          v29 = &v54;
          if (!v27)
          {
LABEL_46:
            v29[v28] = 0;
            v32 = (char *)operator new(0x20uLL);
            v52 = v32;
            v53 = xmmword_1A357F050;
            strcpy(v32, "Failed ARI trace command");
            Timestamp::Timestamp((Timestamp *)v48);
            Timestamp::asString((uint64_t)v48, 0, 9, __p);
            v47 = 0;
            LOBYTE(v46) = 0;
            ResetInfo::ResetInfo((std::string *)buf, &__dst, &v54, (__int128 *)&v52, (uint64_t)__p, 7, &v46);
            if (v51 < 0)
              operator delete(__p[0]);
            std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v48, v49);
            operator delete(v32);
            if (SHIBYTE(v55) < 0)
              operator delete((void *)v54);
            if (SHIBYTE(v57) < 0)
              operator delete((void *)__dst);
            ResetInfo::ResetInfo(&v39, (__int128 *)buf);
            ICETrace::commandResetModem_sync(v4, (__int128 *)&v39);
            if (v45 < 0)
            {
              operator delete(v44);
              if ((v43 & 0x80000000) == 0)
              {
LABEL_54:
                if ((v41 & 0x80000000) == 0)
                  goto LABEL_55;
                goto LABEL_70;
              }
            }
            else if ((v43 & 0x80000000) == 0)
            {
              goto LABEL_54;
            }
            operator delete(v42);
            if ((v41 & 0x80000000) == 0)
            {
LABEL_55:
              if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_56;
              goto LABEL_71;
            }
LABEL_70:
            operator delete(v40);
            if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_56:
              if ((SHIBYTE(v65) & 0x80000000) == 0)
                goto LABEL_57;
              goto LABEL_72;
            }
LABEL_71:
            operator delete(v39.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v65) & 0x80000000) == 0)
            {
LABEL_57:
              if ((SBYTE7(v63) & 0x80000000) == 0)
                goto LABEL_58;
              goto LABEL_73;
            }
LABEL_72:
            operator delete(*((void **)&v64 + 1));
            if ((SBYTE7(v63) & 0x80000000) == 0)
            {
LABEL_58:
              if ((SHIBYTE(v61) & 0x80000000) == 0)
                goto LABEL_59;
LABEL_74:
              operator delete(*(void **)&buf[24]);
              if ((buf[23] & 0x80000000) != 0)
                goto LABEL_75;
LABEL_60:
              v11 = v59;
              if (!v59)
                goto LABEL_65;
              goto LABEL_61;
            }
LABEL_73:
            operator delete((void *)v62);
            if ((SHIBYTE(v61) & 0x80000000) == 0)
            {
LABEL_59:
              if ((buf[23] & 0x80000000) == 0)
                goto LABEL_60;
LABEL_75:
              operator delete(*(void **)buf);
              v11 = v59;
              if (!v59)
                goto LABEL_65;
              goto LABEL_61;
            }
            goto LABEL_74;
          }
        }
        memmove(v29, v26, v28);
        goto LABEL_46;
      }
    }
    memmove(p_dst, v20, v22);
    goto LABEL_38;
  }
  v10 = *(NSObject **)(v4 + 40);
  if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    goto LABEL_60;
  *(_WORD *)buf = 0;
  _os_log_error_impl(&dword_1A343C000, v10, OS_LOG_TYPE_ERROR, "File access error!", buf, 2u);
  v11 = v59;
LABEL_61:
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v34 = __ldaxr(p_shared_owners);
  while (__stlxr(v34 - 1, p_shared_owners));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_65:
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
}

void sub_1A3488568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1A3488638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a9);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v10 - 224);
  if (!v9)
    JUMPOUT(0x1A348861CLL);
  JUMPOUT(0x1A348860CLL);
}

void sub_1A3488660()
{
  uint64_t v0;

  if (*(char *)(v0 - 225) < 0)
    JUMPOUT(0x1A348866CLL);
  JUMPOUT(0x1A3488600);
}

void sub_1A3488684()
{
  uint64_t v0;
  uint64_t v1;

  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1 - 224);
  if (!v0)
    JUMPOUT(0x1A348861CLL);
  JUMPOUT(0x1A348860CLL);
}

void sub_1A3488698()
{
  uint64_t v0;
  uint64_t v1;

  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1 - 224);
  if (!v0)
    JUMPOUT(0x1A348861CLL);
  JUMPOUT(0x1A348860CLL);
}

_QWORD *dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::callback(_QWORD *a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 8);
  *a1 = v4;
  a1[1] = v5;
  if (v5)
    dispatch_retain(v5);
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c29_ZTSNSt3__18weak_ptrI5TraceEE64c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  void *v9;
  NSObject *v10;

  v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = a1[5];
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (void *)a2[8];
  if (v9)
    v9 = _Block_copy(v9);
  v10 = a2[9];
  a1[8] = v9;
  a1[9] = v10;
  if (v10)
    dispatch_retain(v10);
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c29_ZTSNSt3__18weak_ptrI5TraceEE64c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  NSObject *v6;

  v2 = a1[9];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[8];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[7];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  v5 = a1[5];
  if (v5)
  {
    dispatch_group_leave(v5);
    v6 = a1[5];
    if (v6)
      dispatch_release(v6);
  }
}

void ___ZN8ICETrace23issueStartCommands_syncEN8dispatch5groupE_block_invoke_20(_QWORD *a1, std::string::size_type *a2, xpc_object_t *a3)
{
  uint64_t v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  std::string::size_type v9;
  uint64_t (*v10)(uint64_t);
  NSObject *v11;
  __int128 v12;
  const void *v13;
  size_t v14;
  size_t v15;
  __int128 *v16;
  xpc_object_t value;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  size_t v21;
  size_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unsigned int v27;
  NSObject *v28;
  const char *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  std::string::size_type *v33;
  std::string::size_type v34;
  std::string::size_type v35;
  std::ios_base *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  const char *v40;
  size_t v41;
  _QWORD *v42;
  _QWORD *v43;
  const char *v44;
  size_t v45;
  _QWORD *v46;
  NSObject *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  NSObject *v52;
  __int128 v53;
  const void *v54;
  size_t v55;
  size_t v56;
  _BYTE *v57;
  int v58;
  NSObject *v59;
  _BOOL4 v60;
  __int128 v61;
  uint64_t v62;
  void *v63;
  NSObject *v64;
  __int128 v65;
  const void *v66;
  size_t v67;
  size_t v68;
  __int128 *p_dst;
  uint64_t v70;
  uint64_t v71;
  const void *v72;
  size_t v73;
  size_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  const void *v81;
  size_t v82;
  size_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  size_t v87;
  _BYTE *v88;
  std::string::size_type size;
  std::string *v90;
  const void *v91;
  uint64_t v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *p_shared_owners;
  unint64_t v96;
  __int128 *v97;
  std::string v98;
  __int128 v99;
  char v100;
  _BYTE v101[8];
  _QWORD *v102;
  void *v103[2];
  char v104;
  __int128 __dst;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  void *aBlock;
  dispatch_object_t object;
  void *v114;
  dispatch_object_t v115;
  std::string v116;
  __int128 v117;
  char v118;
  void *v119[2];
  char v120;
  std::string v121;
  void *v122;
  char v123;
  void *v124;
  char v125;
  void *v126;
  char v127;
  __int128 v128;
  char v129;
  __int128 v130;
  unint64_t v131;
  void *__p[2];
  char v133;
  void *v134;
  __int128 v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  std::string buf[5];
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  unint64_t v149;
  uint64_t v150;

  v150 = *MEMORY[0x1E0C80C00];
  v6 = a1[4];
  v7 = *(NSObject **)(v6 + 144);
  if (v7)
  {
    dispatch_retain(*(dispatch_object_t *)(v6 + 144));
    dispatch_group_enter(v7);
  }
  v137 = 0;
  v136 = 0;
  v8 = (std::__shared_weak_count *)a1[7];
  if (!v8)
    goto LABEL_157;
  v137 = std::__shared_weak_count::lock(v8);
  if (!v137)
    goto LABEL_162;
  v136 = a1[6];
  if (!v136)
    goto LABEL_157;
  v9 = *a2;
  v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!v9)
    v10 = 0;
  if (!v10)
  {
    value = xpc_dictionary_get_value(*a3, "Mode");
    buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)value;
    if (value)
      xpc_retain(value);
    else
      buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v27 = xpc::dyn_cast_or_default();
    xpc_release(buf[0].__r_.__value_.__l.__data_);
    if (*(_DWORD *)(v6 + 152) == v27)
    {
      v28 = *(NSObject **)(v6 + 40);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        if (v27 > 6)
          v29 = "Unknown";
        else
          v29 = off_1E4A08D30[v27];
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
        _os_log_impl(&dword_1A343C000, v28, OS_LOG_TYPE_DEFAULT, "#I Trace mode (%s) get success.  Baseband mode matches AP setting.", (uint8_t *)buf, 0xCu);
        v27 = *(_DWORD *)(v6 + 152);
      }
      *(_DWORD *)(v6 + 364) = 0;
      if (v27 != 6 && v27)
        goto LABEL_85;
      v58 = ICETrace::openTransport_sync((ICETrace *)v6);
      v59 = *(NSObject **)(v6 + 40);
      v60 = os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT);
      if (v58)
      {
        if (v60)
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1A343C000, v59, OS_LOG_TYPE_DEFAULT, "#I Transport open success", (uint8_t *)buf, 2u);
        }
LABEL_85:
        buf[2].__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v61 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v61 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1] = v61;
        *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2] = v61;
        *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v61;
        trace::TraceMaskInfo::TraceMaskInfo(buf, v6 + 232, v6 + 256);
        v62 = *(_QWORD *)(v6 + 416);
        v63 = (void *)a1[8];
        if (v63)
          v63 = _Block_copy(v63);
        v64 = a1[9];
        v114 = v63;
        v115 = v64;
        if (v64)
          dispatch_retain(v64);
        (*(void (**)(uint64_t, std::string *, void **))(*(_QWORD *)v62 + 88))(v62, buf, &v114);
        if (v115)
          dispatch_release(v115);
        if (v114)
          _Block_release(v114);
        buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E4A08C08;
        if (buf[1].__r_.__value_.__l.__size_)
        {
          buf[1].__r_.__value_.__r.__words[2] = buf[1].__r_.__value_.__l.__size_;
          operator delete((void *)buf[1].__r_.__value_.__l.__size_);
        }
        if (buf[0].__r_.__value_.__l.__size_)
        {
          buf[0].__r_.__value_.__r.__words[2] = buf[0].__r_.__value_.__l.__size_;
          operator delete((void *)buf[0].__r_.__value_.__l.__size_);
        }
        goto LABEL_157;
      }
      if (v60)
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1A343C000, v59, OS_LOG_TYPE_DEFAULT, "#E Failed to open TRACE transport", (uint8_t *)buf, 2u);
      }
      *(_QWORD *)&v65 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v65 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&buf[4].__r_.__value_.__l.__data_ = v65;
      *(_OWORD *)&buf[3].__r_.__value_.__r.__words[1] = v65;
      *(_OWORD *)&buf[2].__r_.__value_.__r.__words[2] = v65;
      *(_OWORD *)&buf[2].__r_.__value_.__l.__data_ = v65;
      *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1] = v65;
      *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2] = v65;
      *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v65;
      v66 = (const void *)*MEMORY[0x1E0CFB590];
      v67 = strlen((const char *)*MEMORY[0x1E0CFB590]);
      if (v67 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v68 = v67;
      if (v67 >= 0x17)
      {
        v70 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v67 | 7) != 0x17)
          v70 = v67 | 7;
        v71 = v70 + 1;
        p_dst = (__int128 *)operator new(v70 + 1);
        *((_QWORD *)&__dst + 1) = v68;
        *(_QWORD *)&v106 = v71 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        BYTE7(v106) = v67;
        p_dst = &__dst;
        if (!v67)
        {
LABEL_107:
          *((_BYTE *)p_dst + v68) = 0;
          v72 = (const void *)*MEMORY[0x1E0CFC000];
          v73 = strlen((const char *)*MEMORY[0x1E0CFC000]);
          if (v73 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v74 = v73;
          if (v73 >= 0x17)
          {
            v76 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v73 | 7) != 0x17)
              v76 = v73 | 7;
            v77 = v76 + 1;
            v75 = operator new(v76 + 1);
            *((_QWORD *)&v148 + 1) = v74;
            v149 = v77 | 0x8000000000000000;
            *(_QWORD *)&v148 = v75;
          }
          else
          {
            HIBYTE(v149) = v73;
            v75 = &v148;
            if (!v73)
              goto LABEL_115;
          }
          memmove(v75, v72, v74);
LABEL_115:
          *((_BYTE *)v75 + v74) = 0;
          v78 = operator new(0x20uLL);
          v134 = v78;
          v135 = xmmword_1A35802C0;
          strcpy((char *)v78, "Failed to open TRACE transport");
          Timestamp::Timestamp((Timestamp *)&v130);
          Timestamp::asString((uint64_t)&v130, 0, 9, v119);
          v118 = 0;
          LOBYTE(v117) = 0;
          ResetInfo::ResetInfo(buf, &__dst, &v148, (__int128 *)&v134, (uint64_t)v119, 7, &v117);
          if (v120 < 0)
            operator delete(v119[0]);
          std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v130, *((_QWORD **)&v130 + 1));
          operator delete(v78);
          if (SHIBYTE(v149) < 0)
            operator delete((void *)v148);
          if (SBYTE7(v106) < 0)
            operator delete((void *)__dst);
          ResetInfo::ResetInfo(&v116, (__int128 *)buf);
          ICETrace::commandResetModem_sync(v6, (__int128 *)&v116);
          ResetInfo::~ResetInfo((void **)&v116.__r_.__value_.__l.__data_);
          ResetInfo::~ResetInfo((void **)&buf[0].__r_.__value_.__l.__data_);
          goto LABEL_157;
        }
      }
      memmove(p_dst, v66, v68);
      goto LABEL_107;
    }
    ++*(_DWORD *)(v6 + 364);
    *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&buf[4].__r_.__value_.__r.__words[1] = v30;
    v147 = v30;
    v146 = v30;
    v145 = v30;
    v144 = v30;
    v143 = v30;
    v142 = v30;
    v141 = v30;
    v140 = v30;
    v139 = v30;
    *(_OWORD *)&buf[3].__r_.__value_.__r.__words[2] = v30;
    *(_OWORD *)&buf[3].__r_.__value_.__l.__data_ = v30;
    *(_OWORD *)&buf[2].__r_.__value_.__r.__words[1] = v30;
    *(_OWORD *)&buf[1].__r_.__value_.__r.__words[2] = v30;
    *(_OWORD *)&buf[1].__r_.__value_.__l.__data_ = v30;
    *(_OWORD *)&buf[0].__r_.__value_.__r.__words[1] = v30;
    v31 = MEMORY[0x1E0DE4FE0];
    v32 = MEMORY[0x1E0DE4FE0] + 64;
    v33 = (std::string::size_type *)MEMORY[0x1E0DE4F60];
    v34 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v35 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    buf[4].__r_.__value_.__r.__words[2] = MEMORY[0x1E0DE4FE0] + 64;
    buf[0].__r_.__value_.__r.__words[0] = v34;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + *(_QWORD *)(v34 - 24)) = v35;
    v36 = (std::ios_base *)((char *)buf + *(_QWORD *)(buf[0].__r_.__value_.__r.__words[0] - 24));
    std::ios_base::init(v36, &buf[0].__r_.__value_.__r.__words[1]);
    v36[1].__vftable = 0;
    v36[1].__fmtflags_ = -1;
    buf[0].__r_.__value_.__r.__words[0] = v31 + 24;
    buf[4].__r_.__value_.__r.__words[2] = v32;
    std::streambuf::basic_streambuf();
    v37 = MEMORY[0x1E0DE4FB8];
    buf[0].__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
    memset(&buf[3], 0, 32);
    LODWORD(buf[4].__r_.__value_.__r.__words[1]) = 16;
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"AP STT (Mode = ", 15);
    v39 = *(int *)(v6 + 152);
    if (v39 > 6)
      v40 = "Unknown";
    else
      v40 = off_1E4A08D30[v39];
    v41 = strlen(v40);
    v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v40, v41);
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)") mismatch with BB XSIO mode (XSIO = ", 37);
    if (v27 > 6)
      v44 = "Unknown";
    else
      v44 = off_1E4A08D30[v27];
    v45 = strlen(v44);
    v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v44, v45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)") count=", 8);
    std::ostream::operator<<();
    v47 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      std::ostringstream::str[abi:ne180100](&__dst, (uint64_t)buf);
      v97 = (SBYTE7(v106) & 0x80u) == 0 ? &__dst : (__int128 *)__dst;
      LODWORD(v148) = 136315138;
      *(_QWORD *)((char *)&v148 + 4) = v97;
      _os_log_error_impl(&dword_1A343C000, v47, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v148, 0xCu);
      if (SBYTE7(v106) < 0)
        operator delete((void *)__dst);
    }
    v48 = *(_DWORD *)(v6 + 364);
    if (v48 <= 2)
    {
      v49 = *(_QWORD *)(v6 + 416);
      v50 = *(unsigned int *)(v6 + 152);
      v51 = (void *)a1[10];
      if (v51)
        v51 = _Block_copy(v51);
      v52 = a1[11];
      aBlock = v51;
      object = v52;
      if (v52)
        dispatch_retain(v52);
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v49 + 80))(v49, v50, &aBlock);
      if (object)
        dispatch_release(object);
      if (aBlock)
        _Block_release(aBlock);
      goto LABEL_154;
    }
    if (v48 != 3)
    {
LABEL_154:
      buf[0].__r_.__value_.__r.__words[0] = *v33;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words
                                + *(_QWORD *)(buf[0].__r_.__value_.__r.__words[0] - 24)) = v33[3];
      buf[0].__r_.__value_.__l.__size_ = v37 + 16;
      if (SHIBYTE(buf[3].__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[3].__r_.__value_.__l.__data_);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1A858F92C](&buf[4].__r_.__value_.__r.__words[2]);
      goto LABEL_157;
    }
    *(_QWORD *)&v53 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v53 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v110 = v53;
    v111 = v53;
    v108 = v53;
    v109 = v53;
    v106 = v53;
    v107 = v53;
    __dst = v53;
    v54 = (const void *)*MEMORY[0x1E0CFB590];
    v55 = strlen((const char *)*MEMORY[0x1E0CFB590]);
    if (v55 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v56 = v55;
    if (v55 >= 0x17)
    {
      v79 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v55 | 7) != 0x17)
        v79 = v55 | 7;
      v80 = v79 + 1;
      v57 = operator new(v79 + 1);
      *((_QWORD *)&v148 + 1) = v56;
      v149 = v80 | 0x8000000000000000;
      *(_QWORD *)&v148 = v57;
    }
    else
    {
      HIBYTE(v149) = v55;
      v57 = &v148;
      if (!v55)
      {
LABEL_126:
        v57[v56] = 0;
        v81 = (const void *)*MEMORY[0x1E0CFC000];
        v82 = strlen((const char *)*MEMORY[0x1E0CFC000]);
        if (v82 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v83 = v82;
        if (v82 >= 0x17)
        {
          v85 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v82 | 7) != 0x17)
            v85 = v82 | 7;
          v86 = v85 + 1;
          v84 = operator new(v85 + 1);
          *((_QWORD *)&v135 + 1) = v86 | 0x8000000000000000;
          v134 = v84;
          *(_QWORD *)&v135 = v83;
        }
        else
        {
          HIBYTE(v135) = v82;
          v84 = &v134;
          if (!v82)
          {
LABEL_134:
            *((_BYTE *)v84 + v83) = 0;
            if ((buf[4].__r_.__value_.__s.__data_[8] & 0x10) != 0)
            {
              size = buf[4].__r_.__value_.__r.__words[0];
              if (buf[4].__r_.__value_.__r.__words[0] < buf[2].__r_.__value_.__l.__size_)
              {
                buf[4].__r_.__value_.__r.__words[0] = buf[2].__r_.__value_.__l.__size_;
                size = buf[2].__r_.__value_.__l.__size_;
              }
              v90 = &buf[2];
            }
            else
            {
              if ((buf[4].__r_.__value_.__s.__data_[8] & 8) == 0)
              {
                v87 = 0;
                HIBYTE(v131) = 0;
                v88 = &v130;
                goto LABEL_149;
              }
              v90 = &buf[1];
              size = buf[1].__r_.__value_.__r.__words[2];
            }
            v91 = (const void *)v90->__r_.__value_.__r.__words[0];
            v87 = size - v90->__r_.__value_.__r.__words[0];
            if (v87 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            if (v87 >= 0x17)
            {
              v92 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v87 | 7) != 0x17)
                v92 = v87 | 7;
              v93 = v92 + 1;
              v88 = operator new(v92 + 1);
              v131 = v93 | 0x8000000000000000;
              *(_QWORD *)&v130 = v88;
              *((_QWORD *)&v130 + 1) = v87;
            }
            else
            {
              HIBYTE(v131) = size - v90->__r_.__value_.__s.__data_[0];
              v88 = &v130;
              if (!v87)
              {
LABEL_149:
                v88[v87] = 0;
                Timestamp::Timestamp((Timestamp *)v101);
                Timestamp::asString((uint64_t)v101, 0, 9, v103);
                v100 = 0;
                LOBYTE(v99) = 0;
                ResetInfo::ResetInfo((std::string *)&__dst, &v148, (__int128 *)&v134, &v130, (uint64_t)v103, 3, &v99);
                if (v104 < 0)
                {
                  operator delete(v103[0]);
                  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v101, v102);
                  if ((SHIBYTE(v131) & 0x80000000) == 0)
                  {
LABEL_151:
                    if ((SHIBYTE(v135) & 0x80000000) == 0)
                      goto LABEL_152;
                    goto LABEL_167;
                  }
                }
                else
                {
                  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v101, v102);
                  if ((SHIBYTE(v131) & 0x80000000) == 0)
                    goto LABEL_151;
                }
                operator delete((void *)v130);
                if ((SHIBYTE(v135) & 0x80000000) == 0)
                {
LABEL_152:
                  if ((SHIBYTE(v149) & 0x80000000) == 0)
                  {
LABEL_153:
                    ResetInfo::ResetInfo(&v98, &__dst);
                    ICETrace::commandResetModem_sync(v6, (__int128 *)&v98);
                    ResetInfo::~ResetInfo((void **)&v98.__r_.__value_.__l.__data_);
                    *(_DWORD *)(v6 + 364) = 0;
                    ResetInfo::~ResetInfo((void **)&__dst);
                    goto LABEL_154;
                  }
LABEL_168:
                  operator delete((void *)v148);
                  goto LABEL_153;
                }
LABEL_167:
                operator delete(v134);
                if ((SHIBYTE(v149) & 0x80000000) == 0)
                  goto LABEL_153;
                goto LABEL_168;
              }
            }
            memmove(v88, v91, v87);
            goto LABEL_149;
          }
        }
        memmove(v84, v81, v83);
        goto LABEL_134;
      }
    }
    memmove(v57, v54, v56);
    goto LABEL_126;
  }
  v11 = *(NSObject **)(v6 + 40);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 138412290;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v9;
    _os_log_impl(&dword_1A343C000, v11, OS_LOG_TYPE_DEFAULT, "#E Failed to get trace mode: %@", (uint8_t *)buf, 0xCu);
  }
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&buf[4].__r_.__value_.__l.__data_ = v12;
  *(_OWORD *)&buf[3].__r_.__value_.__r.__words[1] = v12;
  *(_OWORD *)&buf[2].__r_.__value_.__r.__words[2] = v12;
  *(_OWORD *)&buf[2].__r_.__value_.__l.__data_ = v12;
  *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1] = v12;
  *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2] = v12;
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v12;
  v13 = (const void *)*MEMORY[0x1E0CFB590];
  v14 = strlen((const char *)*MEMORY[0x1E0CFB590]);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v18 = v14 | 7;
    v19 = v18 + 1;
    v16 = (__int128 *)operator new(v18 + 1);
    *((_QWORD *)&__dst + 1) = v15;
    *(_QWORD *)&v106 = v19 | 0x8000000000000000;
    *(_QWORD *)&__dst = v16;
    goto LABEL_20;
  }
  BYTE7(v106) = v14;
  v16 = &__dst;
  if (v14)
LABEL_20:
    memmove(v16, v13, v15);
  *((_BYTE *)v16 + v15) = 0;
  v20 = (const void *)*MEMORY[0x1E0CFBEA8];
  v21 = strlen((const char *)*MEMORY[0x1E0CFBEA8]);
  if (v21 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v22 = v21;
  if (v21 >= 0x17)
  {
    v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v24 = v21 | 7;
    v25 = v24 + 1;
    v23 = operator new(v24 + 1);
    *((_QWORD *)&v148 + 1) = v22;
    v149 = v25 | 0x8000000000000000;
    *(_QWORD *)&v148 = v23;
    goto LABEL_28;
  }
  HIBYTE(v149) = v21;
  v23 = &v148;
  if (v21)
LABEL_28:
    memmove(v23, v20, v22);
  *((_BYTE *)v23 + v22) = 0;
  v26 = operator new(0x20uLL);
  v134 = v26;
  v135 = xmmword_1A357F050;
  strcpy((char *)v26, "Failed to get trace mode");
  Timestamp::Timestamp((Timestamp *)&v130);
  Timestamp::asString((uint64_t)&v130, 0, 9, __p);
  v129 = 0;
  LOBYTE(v128) = 0;
  ResetInfo::ResetInfo(buf, &__dst, &v148, (__int128 *)&v134, (uint64_t)__p, 7, &v128);
  if (v133 < 0)
    operator delete(__p[0]);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v130, *((_QWORD **)&v130 + 1));
  operator delete(v26);
  if (SHIBYTE(v149) < 0)
    operator delete((void *)v148);
  if (SBYTE7(v106) < 0)
    operator delete((void *)__dst);
  ResetInfo::ResetInfo(&v121, (__int128 *)buf);
  ICETrace::commandResetModem_sync(v6, (__int128 *)&v121);
  if (v127 < 0)
  {
    operator delete(v126);
    if ((v125 & 0x80000000) == 0)
    {
LABEL_37:
      if ((v123 & 0x80000000) == 0)
        goto LABEL_38;
      goto LABEL_46;
    }
  }
  else if ((v125 & 0x80000000) == 0)
  {
    goto LABEL_37;
  }
  operator delete(v124);
  if ((v123 & 0x80000000) == 0)
  {
LABEL_38:
    if ((SHIBYTE(v121.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_47;
  }
LABEL_46:
  operator delete(v122);
  if ((SHIBYTE(v121.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_39:
    if ((buf[4].__r_.__value_.__s.__data_[15] & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_48;
  }
LABEL_47:
  operator delete(v121.__r_.__value_.__l.__data_);
  if ((buf[4].__r_.__value_.__s.__data_[15] & 0x80000000) == 0)
  {
LABEL_40:
    if ((SHIBYTE(buf[2].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_49;
  }
LABEL_48:
  operator delete((void *)buf[3].__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(buf[2].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_41:
    if ((SHIBYTE(buf[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_50;
  }
LABEL_49:
  operator delete(buf[2].__r_.__value_.__l.__data_);
  if ((SHIBYTE(buf[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_42:
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_51;
    goto LABEL_157;
  }
LABEL_50:
  operator delete(buf[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
LABEL_51:
    operator delete(buf[0].__r_.__value_.__l.__data_);
LABEL_157:
  v94 = v137;
  if (v137)
  {
    p_shared_owners = (unint64_t *)&v137->__shared_owners_;
    do
      v96 = __ldaxr(p_shared_owners);
    while (__stlxr(v96 - 1, p_shared_owners));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
LABEL_162:
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
}

void sub_1A3489634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33)
{
  NSObject *v33;

  ResetInfo::~ResetInfo(&a10);
  ResetInfo::~ResetInfo(&a33);
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x2D0]);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2C0]);
  if (v33)
  {
    dispatch_group_leave(v33);
    dispatch_release(v33);
  }
  _Unwind_Resume(a1);
}

void trace::TraceMaskInfo::~TraceMaskInfo(trace::TraceMaskInfo *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E4A08C08;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

_BYTE *std::ostringstream::str[abi:ne180100](_BYTE *__dst, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const void *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = __dst;
  v3 = *(_DWORD *)(a2 + 104);
  if ((v3 & 0x10) != 0)
  {
    v4 = *(_QWORD *)(a2 + 96);
    v5 = *(_QWORD *)(a2 + 56);
    if (v4 < v5)
    {
      *(_QWORD *)(a2 + 96) = v5;
      v4 = v5;
    }
    v6 = *(const void **)(a2 + 48);
    v7 = v4 - (_QWORD)v6;
    if (v4 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_16;
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      __dst[23] = 0;
LABEL_4:
      *__dst = 0;
      return __dst;
    }
    v6 = *(const void **)(a2 + 24);
    v7 = *(_QWORD *)(a2 + 40) - (_QWORD)v6;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_16:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v7 >= 0x17)
  {
    v8 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v8 = v7 | 7;
    v9 = v8 + 1;
    v10 = operator new(v8 + 1);
    v2[1] = v7;
    v2[2] = v9 | 0x8000000000000000;
    *v2 = v10;
    v2 = v10;
  }
  else
  {
    __dst[23] = v7;
    if (!v7)
      goto LABEL_4;
  }
  __dst = memmove(v2, v6, v7);
  *((_BYTE *)v2 + v7) = 0;
  return __dst;
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c29_ZTSNSt3__18weak_ptrI5TraceEE64c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE80c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;

  v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = a1[5];
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (void *)a2[8];
  if (v9)
    v9 = _Block_copy(v9);
  v10 = a2[9];
  a1[8] = v9;
  a1[9] = v10;
  if (v10)
    dispatch_retain(v10);
  v11 = (void *)a2[10];
  if (v11)
    v11 = _Block_copy(v11);
  v12 = a2[11];
  a1[10] = v11;
  a1[11] = v12;
  if (v12)
    dispatch_retain(v12);
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c29_ZTSNSt3__18weak_ptrI5TraceEE64c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE80c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  NSObject *v4;
  const void *v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  NSObject *v8;

  v2 = a1[11];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[10];
  if (v3)
    _Block_release(v3);
  v4 = a1[9];
  if (v4)
    dispatch_release(v4);
  v5 = (const void *)a1[8];
  if (v5)
    _Block_release(v5);
  v6 = (std::__shared_weak_count *)a1[7];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  v7 = a1[5];
  if (v7)
  {
    dispatch_group_leave(v7);
    v8 = a1[5];
    if (v8)
      dispatch_release(v8);
  }
}

BOOL ICETrace::loadTraceConfigFile_sync(uint64_t a1, std::string::size_type a2, _QWORD *a3, int a4)
{
  std::string::size_type v7;
  const char *v8;
  size_t v9;
  std::string::size_type v10;
  std::string *p_dst;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  std::string::size_type v15;
  __int128 v16;
  const char *p_p;
  size_t v18;
  std::string *v19;
  __int128 v20;
  int filtered_files;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  const char *v25;
  NSObject *v26;
  const char *v27;
  void **v28;
  void **v29;
  int v30;
  std::string *p_buf;
  int v32;
  const char *v33;
  __int128 v34;
  void *v35;
  size_t v36;
  int v37;
  size_t v38;
  int v39;
  size_t v40;
  unint64_t v41;
  char *v42;
  const void *v43;
  char *v44;
  void **v45;
  std::string::size_type v46;
  _BOOL8 v47;
  NSObject *v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  std::string *v53;
  uint64_t v54;
  void **v55;
  void **v56;
  void *v57;
  std::string *v59;
  _QWORD *v60;
  void *__p;
  char v63;
  std::string __dst;
  std::locale v65;
  std::__shared_weak_count *v66;
  void *v67;
  void **v68;
  uint64_t v69;
  void *v70[3];
  void *v71;
  size_t v72;
  uint64_t v73;
  std::string buf;
  uint64_t v75;
  __int16 v76;
  _BOOL4 v77;
  std::string v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v71 = 0;
  v72 = 0;
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = 19;
  v73 = 0;
  strcpy((char *)&buf, "kKeyTraceConfigPath");
  defaults::bbtrace::get((char *)&buf, (std::string::size_type *)&v71);
  v60 = a3;
  v7 = a2;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v69 = 0;
  memset(v70, 170, sizeof(v70));
  HIBYTE(v70[2]) = 0;
  LOBYTE(v70[0]) = 0;
  v67 = 0;
  v68 = 0;
  v8 = (const char *)KTLGetKDMProductName();
  v9 = strlen(v8);
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = v10;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v9;
  p_dst = &__dst;
  if (v9)
LABEL_10:
    memmove(p_dst, v8, v10);
  p_dst->__r_.__value_.__s.__data_[v10] = 0;
  v14 = std::string::append(&__dst, ".*\\.", 4uLL);
  v15 = a2;
  v16 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v78.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v16;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  KTLGetMaskFileExtensionName();
  if (v63 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  v18 = strlen(p_p);
  v19 = std::string::append(&v78, p_p, v18);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  buf.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)&v65, (uint64_t)&buf, 0);
  filtered_files = ctu::fs::get_filtered_files();
  v22 = v66;
  if (!v66)
    goto LABEL_18;
  p_shared_owners = (unint64_t *)&v66->__shared_owners_;
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    std::locale::~locale(&v65);
    if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_19:
      if ((v63 & 0x80000000) == 0)
        goto LABEL_20;
      goto LABEL_29;
    }
  }
  else
  {
LABEL_18:
    std::locale::~locale(&v65);
    if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_19;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
  if ((v63 & 0x80000000) == 0)
  {
LABEL_20:
    if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_30;
  }
LABEL_29:
  operator delete(__p);
  if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_21:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_31;
  }
LABEL_30:
  operator delete(v78.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_22:
    if (filtered_files)
      goto LABEL_23;
LABEL_32:
    v26 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1A343C000, v26, OS_LOG_TYPE_ERROR, "Failed to get files", (uint8_t *)&buf, 2u);
    }
    goto LABEL_83;
  }
LABEL_31:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (!filtered_files)
    goto LABEL_32;
LABEL_23:
  if (a4)
  {
    v25 = (const char *)a2;
    if (*(char *)(a2 + 23) < 0)
      v25 = *(const char **)a2;
    KTLGetETBFilename(v25);
  }
  else
  {
    v27 = (const char *)a2;
    if (*(char *)(a2 + 23) < 0)
      v27 = *(const char **)a2;
    KTLGetKDMFilename(v27);
  }
  buf = v78;
  v28 = (void **)v67;
  v29 = v68;
  v30 = SHIBYTE(v78.__r_.__value_.__r.__words[2]);
  if (v67 != v68)
  {
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_buf = &buf;
    else
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    while (1)
    {
      v32 = *((char *)v28 + 23);
      v33 = (const char *)v28;
      if (v32 < 0)
        v33 = (const char *)*v28;
      if (!strcasecmp((const char *)p_buf, v33))
        break;
      v28 += 3;
      if (v28 == v29)
        goto LABEL_58;
    }
    if (v28 != v70)
    {
      if (SHIBYTE(v70[2]) < 0)
      {
        if ((v32 & 0x80u) == 0)
          v35 = v28;
        else
          v35 = *v28;
        if ((v32 & 0x80u) == 0)
          v36 = v32;
        else
          v36 = (size_t)v28[1];
        std::string::__assign_no_alias<false>(v70, v35, v36);
      }
      else if ((v32 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v70, *v28, (size_t)v28[1]);
      }
      else
      {
        v34 = *(_OWORD *)v28;
        v70[2] = v28[2];
        *(_OWORD *)v70 = v34;
      }
    }
  }
LABEL_58:
  if (v30 < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    v37 = SHIBYTE(v70[2]);
    if (SHIBYTE(v70[2]) >= 0)
      v38 = HIBYTE(v70[2]);
    else
      v38 = (size_t)v70[1];
    if (v38)
    {
LABEL_63:
      v39 = SHIBYTE(v73);
      if (v73 >= 0)
        v40 = HIBYTE(v73);
      else
        v40 = v72;
      v41 = v40 + v38;
      memset(&v78, 170, sizeof(v78));
      if (v40 + v38 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v41 > 0x16)
      {
        v50 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v41 | 7) != 0x17)
          v50 = v41 | 7;
        v51 = v50 + 1;
        v42 = (char *)operator new(v50 + 1);
        v78.__r_.__value_.__l.__size_ = v40 + v38;
        v78.__r_.__value_.__r.__words[2] = v51 | 0x8000000000000000;
        v78.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
        if (!v40)
        {
LABEL_73:
          v44 = &v42[v40];
          if (v37 >= 0)
            v45 = v70;
          else
            v45 = (void **)v70[0];
          memmove(v44, v45, v38);
          v44[v38] = 0;
          v46 = v7;
          if ((ctu::fs::load_file() & 1) != 0)
          {
            v47 = 1;
            v48 = *(NSObject **)(a1 + 40);
            if (!os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
              goto LABEL_103;
          }
          else if (a4 == 1)
          {
            *((_BYTE *)&buf.__r_.__value_.__s + 23) = 8;
            strcpy((char *)&buf, "Disabled");
            if (*(char *)(v7 + 23) >= 0)
              v52 = (const char *)v7;
            else
              v52 = *(const char **)v7;
            v47 = strcasecmp((const char *)&buf, v52) == 0;
            v48 = *(NSObject **)(a1 + 40);
            if (!os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
            {
LABEL_103:
              if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v78.__r_.__value_.__l.__data_);
              goto LABEL_105;
            }
          }
          else
          {
            v47 = 0;
            v48 = *(NSObject **)(a1 + 40);
            if (!os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
              goto LABEL_103;
          }
          if (*(char *)(v46 + 23) < 0)
            v46 = *(_QWORD *)v46;
          KTLGetMaskFileExtensionName();
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v53 = &__dst;
          else
            v53 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          v54 = v60[1] - *v60;
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v46;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v53;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
          v75 = v54;
          v76 = 1024;
          v77 = v47;
          _os_log_impl(&dword_1A343C000, v48, OS_LOG_TYPE_DEFAULT, "#I Read file %s.%s(%lu bytes) success: %d", (uint8_t *)&buf, 0x26u);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          goto LABEL_103;
        }
      }
      else
      {
        memset(&v78, 0, sizeof(v78));
        v42 = (char *)&v78;
        *((_BYTE *)&v78.__r_.__value_.__s + 23) = v40 + v38;
        if (!v40)
          goto LABEL_73;
      }
      if (v39 >= 0)
        v43 = &v71;
      else
        v43 = v71;
      memmove(v42, v43, v40);
      goto LABEL_73;
    }
  }
  else
  {
    v37 = SHIBYTE(v70[2]);
    if (SHIBYTE(v70[2]) >= 0)
      v38 = HIBYTE(v70[2]);
    else
      v38 = (size_t)v70[1];
    if (v38)
      goto LABEL_63;
  }
LABEL_83:
  v49 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
  {
    KTLGetMaskFileExtensionName();
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v59 = &buf;
    else
      v59 = (std::string *)buf.__r_.__value_.__r.__words[0];
    if (*(char *)(v7 + 23) < 0)
      v15 = *(_QWORD *)v7;
    LODWORD(v78.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v78.__r_.__value_.__r.__words + 4) = (std::string::size_type)v59;
    WORD2(v78.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v78.__r_.__value_.__r.__words[1] + 6) = v15;
    _os_log_error_impl(&dword_1A343C000, v49, OS_LOG_TYPE_ERROR, "Error loading baseband %s file: %s", (uint8_t *)&v78, 0x16u);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }
  v47 = 0;
LABEL_105:
  v55 = (void **)v67;
  if (v67)
  {
    v56 = v68;
    v57 = v67;
    if (v68 != v67)
    {
      do
      {
        if (*((char *)v56 - 1) < 0)
          operator delete(*(v56 - 3));
        v56 -= 3;
      }
      while (v56 != v55);
      v57 = v67;
    }
    v68 = v55;
    operator delete(v57);
  }
  if (SHIBYTE(v70[2]) < 0)
  {
    operator delete(v70[0]);
    if ((SHIBYTE(v73) & 0x80000000) == 0)
      return v47;
LABEL_117:
    operator delete(v71);
    return v47;
  }
  if (SHIBYTE(v73) < 0)
    goto LABEL_117;
  return v47;
}

void sub_1A348A2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::locale a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  void *v46;
  int v47;

  if (v47 < 0)
    operator delete(v46);
  std::vector<std::string>::~vector[abi:ne180100](&a32);
  if (a40 < 0)
    operator delete(__p);
  if (a46 < 0)
    operator delete(a41);
  _Unwind_Resume(a1);
}

uint64_t dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,xpc::dict)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void ICETrace::setLPMHandlers_sync(ICETrace *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  NSObject *v13;
  unint64_t v14;
  void *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  dispatch_object_t v20;
  void *v21;
  dispatch_object_t object;
  _QWORD v23[6];
  std::__shared_weak_count *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD aBlock[6];
  std::__shared_weak_count *v28;
  unint64_t v29;
  unint64_t v30;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v29 = 0xAAAAAAAAAAAAAAAALL;
  v30 = 0xAAAAAAAAAAAAAAAALL;
  v10 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN8ICETrace19setLPMHandlers_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_31;
  aBlock[4] = this;
  aBlock[5] = v3;
  v28 = v5;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  v12 = _Block_copy(aBlock);
  v13 = *((_QWORD *)this + 11);
  if (v13)
    dispatch_retain(*((dispatch_object_t *)this + 11));
  v29 = (unint64_t)v12;
  v30 = (unint64_t)v13;
  v25 = 0xAAAAAAAAAAAAAAAALL;
  v26 = 0xAAAAAAAAAAAAAAAALL;
  v23[0] = v10;
  v23[1] = 1174405120;
  v23[2] = ___ZN8ICETrace19setLPMHandlers_syncEv_block_invoke_32;
  v23[3] = &__block_descriptor_tmp_37;
  v23[4] = this;
  v23[5] = v3;
  v24 = v5;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v15 = _Block_copy(v23);
  v16 = *((_QWORD *)this + 11);
  if (v16)
    dispatch_retain(*((dispatch_object_t *)this + 11));
  v25 = (unint64_t)v15;
  v26 = (unint64_t)v16;
  v17 = *((_QWORD *)this + 52);
  if (v17)
  {
    if (v12)
    {
      v21 = _Block_copy(v12);
      object = v13;
      if (!v13)
        goto LABEL_21;
    }
    else
    {
      v21 = 0;
      object = v13;
      if (!v13)
      {
LABEL_21:
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v17 + 112))(v17, &v21);
        if (object)
          dispatch_release(object);
        if (v21)
          _Block_release(v21);
        v18 = *((_QWORD *)this + 52);
        if (v15)
        {
          v19 = _Block_copy(v15);
          v20 = v16;
          if (!v16)
          {
LABEL_28:
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v18 + 120))(v18, &v19);
            if (v20)
              dispatch_release(v20);
            if (v19)
              _Block_release(v19);
            goto LABEL_32;
          }
        }
        else
        {
          v19 = 0;
          v20 = v16;
          if (!v16)
            goto LABEL_28;
        }
        dispatch_retain(v16);
        goto LABEL_28;
      }
    }
    dispatch_retain(v13);
    goto LABEL_21;
  }
LABEL_32:
  if (v16)
    dispatch_release(v16);
  if (v15)
    _Block_release(v15);
  if (v24)
    std::__shared_weak_count::__release_weak(v24);
  if (v13)
    dispatch_release(v13);
  if (v12)
    _Block_release(v12);
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1A348A6B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v31;

  dispatch::callback<void({block_pointer})(void)>::~callback((uint64_t)&a9);
  dispatch::callback<void({block_pointer})(void)>::~callback((uint64_t)&a20);
  if (a19)
  {
    std::__shared_weak_count::__release_weak(a19);
    dispatch::callback<void({block_pointer})(dispatch::group_session)>::~callback(v29 - 96);
    v31 = a28;
    if (!a28)
    {
LABEL_3:
      std::__shared_weak_count::__release_weak(v28);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    dispatch::callback<void({block_pointer})(dispatch::group_session)>::~callback(v29 - 96);
    v31 = a28;
    if (!a28)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v31);
  std::__shared_weak_count::__release_weak(v28);
  _Unwind_Resume(a1);
}

void ___ZN8ICETrace19setLPMHandlers_syncEv_block_invoke(_QWORD *a1, dispatch_object_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  void *v17;
  NSObject *v18;
  uint64_t v19;
  const void *v20;
  void *v21;
  int v22;
  NSObject *v23;
  _BOOL4 v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  void *v30;
  dispatch_object_t v31;
  void *v32;
  dispatch_object_t object;
  uint8_t v34[16];
  void *v35;
  _QWORD aBlock[5];
  dispatch_group_t group;
  dispatch_group_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint8_t buf[16];
  void *__p;
  char v43;
  void *v44;
  char v45;
  _BYTE v46[8];
  _QWORD *v47;
  void *v48;
  char v49;
  std::__shared_weak_count *v51;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v51 = v6;
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
      {
LABEL_70:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v29 = __ldaxr(p_shared_owners);
        while (__stlxr(v29 - 1, p_shared_owners));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      v8 = *(NSObject **)(v5 + 144);
      if (v8)
      {
        dispatch_retain(*(dispatch_object_t *)(v5 + 144));
        dispatch_group_enter(v8);
      }
      v9 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A343C000, v9, OS_LOG_TYPE_DEFAULT, "#I ARI Low Power enter event received", buf, 2u);
      }
      if (*(_QWORD *)(v5 + 480))
      {
        v49 = 0;
        LOBYTE(v48) = 0;
        Timestamp::Timestamp((Timestamp *)v46);
        v45 = 0;
        LOBYTE(v44) = 0;
        v43 = 0;
        LOBYTE(__p) = 0;
        abm::trace::TraceInfo::push();
        if (v43 < 0)
        {
          operator delete(__p);
          if ((v45 & 0x80000000) == 0)
          {
LABEL_11:
            std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v46, v47);
            if ((v49 & 0x80000000) == 0)
              goto LABEL_12;
LABEL_21:
            operator delete(v48);
            if (*(_BYTE *)(v5 + 328))
              goto LABEL_22;
            goto LABEL_13;
          }
        }
        else if ((v45 & 0x80000000) == 0)
        {
          goto LABEL_11;
        }
        operator delete(v44);
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v46, v47);
        if (v49 < 0)
          goto LABEL_21;
      }
LABEL_12:
      if (*(_BYTE *)(v5 + 328))
        goto LABEL_22;
LABEL_13:
      v10 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A343C000, v10, OS_LOG_TYPE_DEFAULT, "#I Holding ARI LPM Enter session until EnterLowPower call", buf, 2u);
      }
      v11 = *a2;
      if (*a2)
      {
        dispatch_retain(*a2);
        dispatch_group_enter(v11);
      }
      v12 = *(NSObject **)(v5 + 320);
      *(_QWORD *)(v5 + 320) = v11;
      if (v12)
      {
        dispatch_group_leave(v12);
        dispatch_release(v12);
      }
LABEL_22:
      memset(buf, 170, sizeof(buf));
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN8ICETrace19setLPMHandlers_syncEv_block_invoke_28;
      aBlock[3] = &__block_descriptor_tmp_29;
      v13 = *a2;
      aBlock[4] = v5;
      group = v13;
      if (v13)
      {
        dispatch_retain(v13);
        dispatch_group_enter(group);
      }
      v38 = v8;
      if (v8)
      {
        dispatch_retain(v8);
        dispatch_group_enter(v38);
      }
      v14 = (std::__shared_weak_count *)a1[6];
      v39 = a1[5];
      v40 = v14;
      if (v14)
      {
        p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
        do
          v16 = __ldxr(p_shared_weak_owners);
        while (__stxr(v16 + 1, p_shared_weak_owners));
      }
      v17 = _Block_copy(aBlock);
      v18 = *(NSObject **)(v5 + 88);
      if (v18)
        dispatch_retain(*(dispatch_object_t *)(v5 + 88));
      *(_QWORD *)buf = v17;
      *(_QWORD *)&buf[8] = v18;
      *(_BYTE *)(v5 + 317) = 0;
      v19 = *(_QWORD *)(v5 + 392);
      v20 = *(const void **)(v5 + 408);
      if (v20)
      {
        v21 = _Block_copy(v20);
        v35 = v21;
        BasebandTransport::reportStatus(v19, 0, &v35);
        if (v21)
          _Block_release(v21);
        v22 = *(unsigned __int8 *)(v5 + 316);
        v23 = *(NSObject **)(v5 + 40);
        v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
        if (v22)
        {
LABEL_35:
          if (v24)
          {
            *(_WORD *)v34 = 0;
            _os_log_impl(&dword_1A343C000, v23, OS_LOG_TYPE_DEFAULT, "#I Enabling sleep profile for LPM", v34, 2u);
          }
          v25 = *(_QWORD *)(v5 + 416);
          if (!v25)
            goto LABEL_56;
          if (v17)
          {
            v32 = _Block_copy(v17);
            object = v18;
            if (!v18)
            {
LABEL_41:
              (*(void (**)(uint64_t, void **))(*(_QWORD *)v25 + 56))(v25, &v32);
              if (object)
                dispatch_release(object);
              if (v32)
                _Block_release(v32);
LABEL_56:
              if (v18)
                dispatch_release(v18);
              if (v17)
                _Block_release(v17);
              if (v40)
                std::__shared_weak_count::__release_weak(v40);
              if (v38)
              {
                dispatch_group_leave(v38);
                if (v38)
                  dispatch_release(v38);
              }
              if (group)
              {
                dispatch_group_leave(group);
                if (group)
                  dispatch_release(group);
              }
              if (v8)
              {
                dispatch_group_leave(v8);
                dispatch_release(v8);
              }
              goto LABEL_70;
            }
          }
          else
          {
            v32 = 0;
            object = v18;
            if (!v18)
              goto LABEL_41;
          }
          dispatch_retain(v18);
          goto LABEL_41;
        }
      }
      else
      {
        v35 = 0;
        BasebandTransport::reportStatus(v19, 0, &v35);
        v26 = *(unsigned __int8 *)(v5 + 316);
        v23 = *(NSObject **)(v5 + 40);
        v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
        if (v26)
          goto LABEL_35;
      }
      if (v24)
      {
        *(_WORD *)v34 = 0;
        _os_log_impl(&dword_1A343C000, v23, OS_LOG_TYPE_DEFAULT, "#I Pausing traffic for LPM", v34, 2u);
      }
      v27 = *(_QWORD *)(v5 + 416);
      if (!v27)
        goto LABEL_56;
      if (v17)
      {
        v30 = _Block_copy(v17);
        v31 = v18;
        if (!v18)
        {
LABEL_52:
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v27 + 64))(v27, &v30);
          if (v31)
            dispatch_release(v31);
          if (v30)
            _Block_release(v30);
          goto LABEL_56;
        }
      }
      else
      {
        v30 = 0;
        v31 = v18;
        if (!v18)
          goto LABEL_52;
      }
      dispatch_retain(v18);
      goto LABEL_52;
    }
  }
}

void sub_1A348ABF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,dispatch_group_t object,dispatch_group_t group,uint64_t a23,std::__shared_weak_count *a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  NSObject *v32;
  uint64_t v33;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a9);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a25);
  if (a24)
    std::__shared_weak_count::__release_weak(a24);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (object)
  {
    dispatch_group_leave(object);
    if (object)
      dispatch_release(object);
  }
  if (v32)
  {
    dispatch_group_leave(v32);
    dispatch_release(v32);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v33 - 80);
  _Unwind_Resume(a1);
}

void ___ZN8ICETrace19setLPMHandlers_syncEv_block_invoke_28(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  _BOOL4 v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  uint64_t (*v15)(uint64_t);
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[8];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (!a1[7])
      {
LABEL_17:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      v8 = *a2;
      if (*a2)
        v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      else
        v9 = 0;
      v10 = *(NSObject **)(v5 + 40);
      v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      if (v9)
      {
        if (v11)
        {
          v18 = 138412290;
          v19 = v8;
          v12 = "#E Unable to switch to sleep configuration: %@";
          v13 = v10;
          v14 = 12;
LABEL_12:
          _os_log_impl(&dword_1A343C000, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v18, v14);
        }
      }
      else if (v11)
      {
        LOWORD(v18) = 0;
        v12 = "#I Successfully configured sleep";
        v13 = v10;
        v14 = 2;
        goto LABEL_12;
      }
      if (*a2)
        v15 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      else
        v15 = 0;
      *(_BYTE *)(v5 + 317) = v15 == 0;
      goto LABEL_17;
    }
  }
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c30_ZTSN8dispatch13group_sessionE56c29_ZTSNSt3__18weak_ptrI5TraceEE(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = a1[5];
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = a2[6];
  a1[6] = v6;
  if (v6)
  {
    dispatch_retain(v6);
    v7 = a1[6];
    if (v7)
      dispatch_group_enter(v7);
  }
  v8 = a2[8];
  a1[7] = a2[7];
  a1[8] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 16);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c30_ZTSN8dispatch13group_sessionE56c29_ZTSNSt3__18weak_ptrI5TraceEE(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;

  v2 = (std::__shared_weak_count *)a1[8];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = a1[6];
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = a1[6];
    if (v4)
      dispatch_release(v4);
  }
  v5 = a1[5];
  if (v5)
  {
    dispatch_group_leave(v5);
    v6 = a1[5];
    if (v6)
      dispatch_release(v6);
  }
}

void ___ZN8ICETrace19setLPMHandlers_syncEv_block_invoke_32(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  config::hw *v8;
  config::hw *v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  __int128 v14;
  const void *v15;
  size_t v16;
  size_t v17;
  __int128 *p_dst;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  size_t v22;
  size_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  const void *v32;
  void *v33;
  void *v34;
  void *v35;
  dispatch_object_t object;
  _QWORD aBlock[5];
  dispatch_group_t group;
  uint64_t v39;
  std::__shared_weak_count *v40;
  std::string v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *v46;
  char v47;
  __int128 v48;
  char v49;
  _BYTE v50[8];
  _QWORD *v51;
  void *__p[2];
  char v53;
  char *v54;
  __int128 v55;
  __int128 v56;
  unint64_t v57;
  __int128 __dst;
  unint64_t v59;
  uint8_t buf[16];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  void *v67;
  char v68;
  void *v69;
  char v70;
  _BYTE v71[8];
  _QWORD *v72;
  void *v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  _BYTE v78[8];
  _QWORD *v79;
  void *v80;
  char v81;
  uint64_t v82;
  std::__shared_weak_count *v83;

  v2 = a1[4];
  v82 = 0;
  v83 = 0;
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    goto LABEL_76;
  v83 = std::__shared_weak_count::lock(v3);
  if (!v83)
    return;
  v82 = a1[5];
  if (!v82)
    goto LABEL_76;
  v4 = *(NSObject **)(v2 + 144);
  if (v4)
  {
    dispatch_retain(*(dispatch_object_t *)(v2 + 144));
    dispatch_group_enter(v4);
  }
  if (!*(_QWORD *)(v2 + 480))
    goto LABEL_104;
  v81 = 0;
  LOBYTE(v80) = 0;
  Timestamp::Timestamp((Timestamp *)v78);
  v77 = 0;
  LOWORD(v76) = 0;
  LOBYTE(v75) = 0;
  abm::trace::TraceInfo::push();
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v78, v79);
  if (v81 < 0)
  {
    operator delete(v80);
    if (*(_BYTE *)(v2 + 317))
    {
LABEL_9:
      memset(buf, 170, sizeof(buf));
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN8ICETrace19setLPMHandlers_syncEv_block_invoke_34;
      aBlock[3] = &__block_descriptor_tmp_36;
      aBlock[4] = v2;
      group = v4;
      if (v4)
      {
        dispatch_retain(v4);
        dispatch_group_enter(group);
      }
      v5 = (std::__shared_weak_count *)a1[6];
      v39 = a1[5];
      v40 = v5;
      if (v5)
      {
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          v7 = __ldxr(p_shared_weak_owners);
        while (__stxr(v7 + 1, p_shared_weak_owners));
      }
      v8 = (config::hw *)_Block_copy(aBlock);
      v9 = v8;
      v10 = *(NSObject **)(v2 + 88);
      if (v10)
        dispatch_retain(*(dispatch_object_t *)(v2 + 88));
      *(_QWORD *)buf = v9;
      *(_QWORD *)&buf[8] = v10;
      v11 = *(_QWORD *)(v2 + 416);
      if (!v11)
        goto LABEL_24;
      if (v9)
      {
        v35 = _Block_copy(v9);
        object = v10;
        if (!v10)
        {
LABEL_20:
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 48))(v11, &v35);
          if (object)
            dispatch_release(object);
          v8 = (config::hw *)v35;
          if (v35)
            _Block_release(v35);
LABEL_24:
          v12 = *(_DWORD *)(v2 + 152);
          if ((v12 == 6 || !v12) && (config::hw::watch(v8) & 1) == 0 && !*(_BYTE *)(v2 + 304))
          {
            v31 = *(_QWORD *)(v2 + 392);
            v32 = *(const void **)(v2 + 408);
            if (v32)
            {
              v33 = _Block_copy(v32);
              v34 = v33;
              BasebandTransport::reportStatus(v31, 600, &v34);
              if (v33)
                _Block_release(v33);
            }
            else
            {
              v34 = 0;
              BasebandTransport::reportStatus(v31, 600, &v34);
            }
          }
          if (v10)
            dispatch_release(v10);
          if (v9)
            _Block_release(v9);
          if (v40)
            std::__shared_weak_count::__release_weak(v40);
          if (group)
          {
            dispatch_group_leave(group);
            if (group)
              dispatch_release(group);
          }
LABEL_74:
          if (!v4)
            goto LABEL_76;
          goto LABEL_75;
        }
      }
      else
      {
        v35 = 0;
        object = v10;
        if (!v10)
          goto LABEL_20;
      }
      dispatch_retain(v10);
      goto LABEL_20;
    }
  }
  else
  {
LABEL_104:
    if (*(_BYTE *)(v2 + 317))
      goto LABEL_9;
  }
  v13 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v13, OS_LOG_TYPE_DEFAULT, "#E Detected failure on last LPM entry", buf, 2u);
  }
  if (*(_QWORD *)(v2 + 480))
  {
    v74 = 0;
    LOBYTE(v73) = 0;
    Timestamp::Timestamp((Timestamp *)v71);
    v70 = 0;
    LOBYTE(v69) = 0;
    v68 = 0;
    LOBYTE(v67) = 0;
    abm::trace::TraceInfo::push();
    if (v68 < 0)
    {
      operator delete(v67);
      if ((v70 & 0x80000000) == 0)
      {
LABEL_43:
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v71, v72);
        if ((v74 & 0x80000000) == 0)
          goto LABEL_44;
LABEL_95:
        operator delete(v73);
        goto LABEL_44;
      }
    }
    else if ((v70 & 0x80000000) == 0)
    {
      goto LABEL_43;
    }
    operator delete(v69);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v71, v72);
    if ((v74 & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_95;
  }
LABEL_44:
  *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v66 = v14;
  v65 = v14;
  v64 = v14;
  v63 = v14;
  v62 = v14;
  v61 = v14;
  *(_OWORD *)buf = v14;
  v15 = (const void *)*MEMORY[0x1E0CFB590];
  v16 = strlen((const char *)*MEMORY[0x1E0CFB590]);
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v17 = v16;
  if (v16 >= 0x17)
  {
    v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v19 = v16 | 7;
    v20 = v19 + 1;
    p_dst = (__int128 *)operator new(v19 + 1);
    *((_QWORD *)&__dst + 1) = v17;
    v59 = v20 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_51;
  }
  HIBYTE(v59) = v16;
  p_dst = &__dst;
  if (v16)
LABEL_51:
    memmove(p_dst, v15, v17);
  *((_BYTE *)p_dst + v17) = 0;
  v21 = (const void *)*MEMORY[0x1E0CFBEA8];
  v22 = strlen((const char *)*MEMORY[0x1E0CFBEA8]);
  if (v22 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v23 = v22;
  if (v22 >= 0x17)
  {
    v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v25 = v22 | 7;
    v26 = v25 + 1;
    v24 = operator new(v25 + 1);
    *((_QWORD *)&v56 + 1) = v23;
    v57 = v26 | 0x8000000000000000;
    *(_QWORD *)&v56 = v24;
    goto LABEL_59;
  }
  HIBYTE(v57) = v22;
  v24 = &v56;
  if (v22)
LABEL_59:
    memmove(v24, v21, v23);
  *((_BYTE *)v24 + v23) = 0;
  v27 = (char *)operator new(0x28uLL);
  v54 = v27;
  v55 = xmmword_1A35802D0;
  strcpy(v27, "Detected failure on last LPM entry");
  Timestamp::Timestamp((Timestamp *)v50);
  Timestamp::asString((uint64_t)v50, 0, 9, __p);
  v49 = 0;
  LOBYTE(v48) = 0;
  ResetInfo::ResetInfo((std::string *)buf, &__dst, &v56, (__int128 *)&v54, (uint64_t)__p, 7, &v48);
  if (v53 < 0)
    operator delete(__p[0]);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v50, v51);
  operator delete(v27);
  if (SHIBYTE(v57) < 0)
    operator delete((void *)v56);
  if (SHIBYTE(v59) < 0)
    operator delete((void *)__dst);
  ResetInfo::ResetInfo(&v41, (__int128 *)buf);
  ICETrace::commandResetModem_sync(v2, (__int128 *)&v41);
  if (v47 < 0)
  {
    operator delete(v46);
    if ((v45 & 0x80000000) == 0)
    {
LABEL_68:
      if ((v43 & 0x80000000) == 0)
        goto LABEL_69;
      goto LABEL_86;
    }
  }
  else if ((v45 & 0x80000000) == 0)
  {
    goto LABEL_68;
  }
  operator delete(v44);
  if ((v43 & 0x80000000) == 0)
  {
LABEL_69:
    if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_70;
    goto LABEL_87;
  }
LABEL_86:
  operator delete(v42);
  if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_70:
    if ((SHIBYTE(v66) & 0x80000000) == 0)
      goto LABEL_71;
    goto LABEL_88;
  }
LABEL_87:
  operator delete(v41.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v66) & 0x80000000) == 0)
  {
LABEL_71:
    if ((SBYTE7(v64) & 0x80000000) == 0)
      goto LABEL_72;
    goto LABEL_89;
  }
LABEL_88:
  operator delete(*((void **)&v65 + 1));
  if ((SBYTE7(v64) & 0x80000000) == 0)
  {
LABEL_72:
    if ((SHIBYTE(v62) & 0x80000000) == 0)
      goto LABEL_73;
LABEL_90:
    operator delete(*((void **)&v61 + 1));
    if ((SBYTE7(v61) & 0x80000000) == 0)
      goto LABEL_74;
    goto LABEL_91;
  }
LABEL_89:
  operator delete((void *)v63);
  if (SHIBYTE(v62) < 0)
    goto LABEL_90;
LABEL_73:
  if ((SBYTE7(v61) & 0x80000000) == 0)
    goto LABEL_74;
LABEL_91:
  operator delete(*(void **)buf);
  if (v4)
  {
LABEL_75:
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
LABEL_76:
  v28 = v83;
  if (v83)
  {
    p_shared_owners = (unint64_t *)&v83->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_1A348B5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, dispatch_group_t group, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;
  void *a73;
  char a74;
  NSObject *v74;
  uint64_t v75;

  if (a72 < 0)
    operator delete(__p);
  if (a74 < 0)
    operator delete(a73);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v75 - 240, *(_QWORD **)(v75 - 232));
  if (*(char *)(v75 - 193) < 0)
    operator delete(*(void **)(v75 - 216));
  if (v74)
  {
    dispatch_group_leave(v74);
    dispatch_release(v74);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v75 - 96);
  _Unwind_Resume(a1);
}

void ___ZN8ICETrace19setLPMHandlers_syncEv_block_invoke_34(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  _BOOL4 v11;
  __int128 v12;
  const void *v13;
  size_t v14;
  size_t v15;
  __int128 *p_dst;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  size_t v20;
  size_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::string v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  __int128 v35;
  char v36;
  _BYTE v37[8];
  _QWORD *v38;
  void *__p[2];
  char v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  __int128 __dst;
  unint64_t v46;
  std::__shared_weak_count *v48;
  uint8_t buf[16];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[7];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v48 = v6;
    if (v6)
    {
      v7 = v6;
      if (a1[6])
      {
        v8 = *a2;
        if (*a2)
          v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v9 = 0;
        v10 = *(NSObject **)(v5 + 40);
        v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        if (v9)
        {
          if (v11)
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v8;
            _os_log_impl(&dword_1A343C000, v10, OS_LOG_TYPE_DEFAULT, "#E Unable to switch to active configuration: %@", buf, 0xCu);
          }
          *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v54 = v12;
          v55 = v12;
          v52 = v12;
          v53 = v12;
          v50 = v12;
          v51 = v12;
          *(_OWORD *)buf = v12;
          v13 = (const void *)*MEMORY[0x1E0CFB590];
          v14 = strlen((const char *)*MEMORY[0x1E0CFB590]);
          if (v14 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v15 = v14;
          if (v14 >= 0x17)
          {
            v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v14 | 7) != 0x17)
              v17 = v14 | 7;
            v18 = v17 + 1;
            p_dst = (__int128 *)operator new(v17 + 1);
            *((_QWORD *)&__dst + 1) = v15;
            v46 = v18 | 0x8000000000000000;
            *(_QWORD *)&__dst = p_dst;
          }
          else
          {
            HIBYTE(v46) = v14;
            p_dst = &__dst;
            if (!v14)
            {
LABEL_20:
              *((_BYTE *)p_dst + v15) = 0;
              v19 = (const void *)*MEMORY[0x1E0CFBEA8];
              v20 = strlen((const char *)*MEMORY[0x1E0CFBEA8]);
              if (v20 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              v21 = v20;
              if (v20 >= 0x17)
              {
                v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v20 | 7) != 0x17)
                  v23 = v20 | 7;
                v24 = v23 + 1;
                v22 = operator new(v23 + 1);
                *((_QWORD *)&v43 + 1) = v21;
                v44 = v24 | 0x8000000000000000;
                *(_QWORD *)&v43 = v22;
              }
              else
              {
                HIBYTE(v44) = v20;
                v22 = &v43;
                if (!v20)
                {
LABEL_28:
                  v22[v21] = 0;
                  v25 = (char *)operator new(0x38uLL);
                  v41 = v25;
                  v42 = xmmword_1A35802E0;
                  strcpy(v25, "Failed to enable active trace profile with ARI command");
                  Timestamp::Timestamp((Timestamp *)v37);
                  Timestamp::asString((uint64_t)v37, 0, 9, __p);
                  v36 = 0;
                  LOBYTE(v35) = 0;
                  ResetInfo::ResetInfo((std::string *)buf, &__dst, &v43, (__int128 *)&v41, (uint64_t)__p, 7, &v35);
                  if (v40 < 0)
                    operator delete(__p[0]);
                  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v37, v38);
                  operator delete(v25);
                  if (SHIBYTE(v44) < 0)
                    operator delete((void *)v43);
                  if (SHIBYTE(v46) < 0)
                    operator delete((void *)__dst);
                  ResetInfo::ResetInfo(&v28, (__int128 *)buf);
                  ICETrace::commandResetModem_sync(v5, (__int128 *)&v28);
                  if (v34 < 0)
                  {
                    operator delete(v33);
                    if ((v32 & 0x80000000) == 0)
                    {
LABEL_36:
                      if ((v30 & 0x80000000) == 0)
                        goto LABEL_37;
                      goto LABEL_46;
                    }
                  }
                  else if ((v32 & 0x80000000) == 0)
                  {
                    goto LABEL_36;
                  }
                  operator delete(v31);
                  if ((v30 & 0x80000000) == 0)
                  {
LABEL_37:
                    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_38;
                    goto LABEL_47;
                  }
LABEL_46:
                  operator delete(v29);
                  if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_38:
                    if ((SHIBYTE(v55) & 0x80000000) == 0)
                      goto LABEL_39;
                    goto LABEL_48;
                  }
LABEL_47:
                  operator delete(v28.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v55) & 0x80000000) == 0)
                  {
LABEL_39:
                    if ((SBYTE7(v53) & 0x80000000) == 0)
                      goto LABEL_40;
                    goto LABEL_49;
                  }
LABEL_48:
                  operator delete(*((void **)&v54 + 1));
                  if ((SBYTE7(v53) & 0x80000000) == 0)
                  {
LABEL_40:
                    if ((SHIBYTE(v51) & 0x80000000) == 0)
                      goto LABEL_41;
                    goto LABEL_50;
                  }
LABEL_49:
                  operator delete((void *)v52);
                  if ((SHIBYTE(v51) & 0x80000000) == 0)
                  {
LABEL_41:
                    if ((SBYTE7(v50) & 0x80000000) == 0)
                      goto LABEL_42;
                    goto LABEL_51;
                  }
LABEL_50:
                  operator delete(*((void **)&v50 + 1));
                  if ((SBYTE7(v50) & 0x80000000) == 0)
                  {
LABEL_42:
                    v7 = v48;
                    if (!v48)
                      return;
                    goto LABEL_52;
                  }
LABEL_51:
                  operator delete(*(void **)buf);
                  v7 = v48;
                  if (!v48)
                    return;
                  goto LABEL_52;
                }
              }
              memmove(v22, v19, v21);
              goto LABEL_28;
            }
          }
          memmove(p_dst, v13, v15);
          goto LABEL_20;
        }
        if (v11)
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1A343C000, v10, OS_LOG_TYPE_DEFAULT, "#I Successfully configured active trace", buf, 2u);
        }
      }
LABEL_52:
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1A348BBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;

  ResetInfo::~ResetInfo(&a9);
  ResetInfo::~ResetInfo((void **)(v9 - 192));
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v9 - 208);
  _Unwind_Resume(a1);
}

void sub_1A348BBF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,_QWORD *a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  void *v49;
  uint64_t v50;

  if (a34 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a26, a27);
  operator delete(v49);
  if (a43 < 0)
  {
    operator delete(a38);
    if ((a49 & 0x80000000) == 0)
    {
LABEL_5:
      std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v50 - 208);
      _Unwind_Resume(a1);
    }
  }
  else if ((a49 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a44);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v50 - 208);
  _Unwind_Resume(a1);
}

void sub_1A348BC90(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1 - 208);
  _Unwind_Resume(a1);
}

uint64_t dispatch::callback<void({block_pointer})(dispatch::group_session)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(void)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void ICETrace::clearLPMHandlers_sync(ICETrace *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  dispatch_object_t v5;
  void *aBlock;
  dispatch_object_t object;

  v2 = *((_QWORD *)this + 52);
  if (v2)
  {
    aBlock = 0;
    object = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v2 + 112))(v2, &aBlock);
    if (object)
      dispatch_release(object);
    if (aBlock)
      _Block_release(aBlock);
    v3 = *((_QWORD *)this + 52);
    v4 = 0;
    v5 = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 120))(v3, &v4);
    if (v5)
      dispatch_release(v5);
    if (v4)
      _Block_release(v4);
  }
}

void sub_1A348BDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  dispatch::callback<void({block_pointer})(void)>::~callback((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1A348BDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  dispatch::callback<void({block_pointer})(dispatch::group_session)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void ICETrace::prepare_sync(ICETrace *this)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  char *v5;
  size_t v6;
  std::string::size_type v7;
  std::string *p_buf;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  void *v12;
  size_t size;
  int v14;
  int v15;
  _BOOL4 v16;
  NSObject *v17;
  void *v18;
  char *v19;
  int v20;
  unsigned __int8 v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  NSObject *v35;
  _BOOL4 v36;
  const char *v37;
  NSObject *v38;
  std::__shared_weak_count *v39;
  void *v40[3];
  _DWORD v41[2];
  std::string __p;
  void *v43[2];
  char v44;
  std::string block;
  void *v46;
  __int128 *v47;
  std::string buf;
  __int128 v49;
  void *v50[2];
  void *v51[2];
  __int128 v52;
  _BYTE v53[24];
  unint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((int *)this + 38);
    if (v3 > 6)
      v4 = "Unknown";
    else
      v4 = off_1E4A08D30[v3];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
    _os_log_impl(&dword_1A343C000, v2, OS_LOG_TYPE_DEFAULT, "#I Preparing BB Trace with mode: %s", (uint8_t *)&buf, 0xCu);
  }
  *((_BYTE *)this + 360) = 0;
  ICETrace::setTraceMode_sync((uint64_t)this, *((_DWORD *)this + 38));
  v5 = abm::trace::kScratchFolder[0];
  v6 = strlen(abm::trace::kScratchFolder[0]);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_buf = (std::string *)operator new(v9 + 1);
    buf.__r_.__value_.__l.__size_ = v7;
    buf.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    goto LABEL_13;
  }
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = v6;
  p_buf = &buf;
  if (v6)
LABEL_13:
    memmove(p_buf, v5, v7);
  p_buf->__r_.__value_.__s.__data_[v7] = 0;
  v11 = std::string::append(&buf, "BBTrace.scratch/", 0x10uLL);
  v12 = (void *)v11->__r_.__value_.__r.__words[0];
  size = v11->__r_.__value_.__l.__size_;
  v41[0] = v11->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v41 + 3) = *(_DWORD *)((char *)&v11->__r_.__value_.__r.__words[2] + 3);
  v14 = SHIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if (*((_QWORD *)this + 46))
      goto LABEL_28;
  }
  else if (*((_QWORD *)this + 46))
  {
    goto LABEL_28;
  }
  v15 = *((_DWORD *)this + 38);
  if (v15 == 6 || !v15)
  {
    HIBYTE(v40[2]) = 18;
    strcpy((char *)v40, "MaxMemoryFileCount");
    memset(&__p, 0, sizeof(__p));
    v44 = 7;
    strcpy((char *)v43, "BBTrace");
    memset(&buf, 0, sizeof(buf));
    v16 = defaults::get((char *)v43, (char *)v40, &buf);
    if (v16)
    {
      prop::file::get<std::string>((const void **)v43, (uint64_t)v40, (uint64_t)&buf, &block);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = block;
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf.__r_.__value_.__l.__data_);
      if ((v44 & 0x80000000) == 0)
      {
LABEL_26:
        if (!v16)
        {
LABEL_33:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v40[2]) & 0x80000000) == 0)
              goto LABEL_35;
          }
          else if ((SHIBYTE(v40[2]) & 0x80000000) == 0)
          {
            goto LABEL_35;
          }
          operator delete(v40[0]);
LABEL_35:
          buf.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAA0000;
          *(_OWORD *)&v53[8] = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0u;
          v49 = 0u;
          *(_OWORD *)v50 = 0u;
          *(_OWORD *)v51 = 0u;
          v52 = 0u;
          *(_OWORD *)v53 = 0u;
          v54 = 0xAAAAAAAA00100000;
          if (v14 < 0)
          {
            std::string::__assign_no_alias<true>((_QWORD *)&v52 + 1, v12, size);
            if (SBYTE7(v52) < 0)
            {
              v51[1] = (void *)5;
              v19 = (char *)v51[0];
              goto LABEL_41;
            }
          }
          else
          {
            *((_QWORD *)&v52 + 1) = v12;
            *(_QWORD *)v53 = size;
            *(_DWORD *)&v53[8] = v41[0];
            *(_DWORD *)&v53[11] = *(_DWORD *)((char *)v41 + 3);
            v53[15] = v14;
          }
          v19 = (char *)v51;
          BYTE7(v52) = 5;
LABEL_41:
          strcpy(v19, ".istp");
          v20 = *((_DWORD *)this + 83);
          *(_DWORD *)&v53[16] = *((_DWORD *)this + 85);
          *(_DWORD *)&v53[20] = v20;
          LODWORD(v54) = *((_DWORD *)this + 87);
          {
            __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1A343C000);
          }
          block.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
          block.__r_.__value_.__l.__size_ = 0x40000000;
          block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
          v46 = &__block_descriptor_tmp_13_6;
          v47 = &GetABMLogServer(void)::sLogServer;
          if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
          {
            v22 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
            v39 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
            if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
              goto LABEL_46;
          }
          else
          {
            dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
            v22 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
            v39 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
            if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
              goto LABEL_46;
          }
          v23 = (unint64_t *)(v22 + 8);
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
LABEL_46:
          TraceFileCollection::create();
          v25 = *(_OWORD *)v43;
          v43[0] = 0;
          v43[1] = 0;
          v26 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
          *((_OWORD *)this + 23) = v25;
          if (v26)
          {
            p_shared_owners = (unint64_t *)&v26->__shared_owners_;
            do
              v28 = __ldaxr(p_shared_owners);
            while (__stlxr(v28 - 1, p_shared_owners));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          v29 = (std::__shared_weak_count *)v43[1];
          if (v43[1])
          {
            v30 = (unint64_t *)((char *)v43[1] + 8);
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          if (v39)
          {
            v32 = (unint64_t *)&v39->__shared_owners_;
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          if ((v53[15] & 0x80000000) != 0)
          {
            operator delete(*((void **)&v52 + 1));
            if ((SBYTE7(v52) & 0x80000000) == 0)
            {
LABEL_63:
              v18 = (void *)*((_QWORD *)&v49 + 1);
              if (!*((_QWORD *)&v49 + 1))
                goto LABEL_65;
              goto LABEL_64;
            }
          }
          else if ((SBYTE7(v52) & 0x80000000) == 0)
          {
            goto LABEL_63;
          }
          operator delete(v51[0]);
          v18 = (void *)*((_QWORD *)&v49 + 1);
          if (!*((_QWORD *)&v49 + 1))
          {
LABEL_65:
            if (SBYTE7(v49) < 0)
              operator delete((void *)buf.__r_.__value_.__l.__size_);
            goto LABEL_67;
          }
LABEL_64:
          v50[0] = v18;
          operator delete(v18);
          goto LABEL_65;
        }
LABEL_32:
        util::convert<unsigned int>(&__p, (_DWORD *)this + 83, 0);
        goto LABEL_33;
      }
    }
    else if ((v44 & 0x80000000) == 0)
    {
      goto LABEL_26;
    }
    operator delete(v43[0]);
    if (!v16)
      goto LABEL_33;
    goto LABEL_32;
  }
LABEL_28:
  v17 = *((_QWORD *)this + 5);
  v18 = (void *)os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v18)
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1A343C000, v17, OS_LOG_TYPE_DEFAULT, "#I Continuing trace with previous TraceFileCollection instance", (uint8_t *)&buf, 2u);
  }
LABEL_67:
  if (config::hw::watch((config::hw *)v18) && !*((_DWORD *)this + 38))
  {
    v34 = ICETrace::openTransport_sync(this);
    v35 = *((_QWORD *)this + 5);
    v36 = os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
    if (v34)
    {
      if (v36)
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        v37 = "#I Transport open success";
LABEL_74:
        _os_log_impl(&dword_1A343C000, v35, OS_LOG_TYPE_DEFAULT, v37, (uint8_t *)&buf, 2u);
      }
    }
    else if (v36)
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      v37 = "#E Failed to open TRACE transport during prepare stage; ignore this failure and proceed";
      goto LABEL_74;
    }
  }
  if (*((_QWORD *)this + 46))
  {
    if (!*((_BYTE *)this + 472))
    {
      v38 = *((_QWORD *)this + 18);
      if (v38)
      {
        dispatch_group_enter(v38);
        *((_BYTE *)this + 472) = 1;
      }
    }
  }
  *((_BYTE *)this + 473) = 1;
  if (v14 < 0)
    operator delete(v12);
}

void sub_1A348C468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  void *v41;
  int v42;

  TraceFileCollection::Parameters::~Parameters(&a36);
  if (v42 < 0)
  {
    operator delete(v41);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t ICETrace::setTraceMode_sync(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  SoftwareBypassShim **v7;
  SoftwareBypassShim *v8;
  uint64_t v9;
  NSObject *v10;
  __int128 v11;
  const void *v12;
  size_t v13;
  size_t v14;
  __int128 *p_dst;
  NSObject *v16;
  const char *v17;
  NSObject *v18;
  NSObject *v19;
  const char *v20;
  const char *v21;
  NSObject *v22;
  uint32_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  NSObject *v31;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  size_t v36;
  size_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  const char *v42;
  const char *v43;
  std::string v44;
  void *v45;
  char v46;
  void *v47;
  char v48;
  void *v49;
  char v50;
  __int128 v51;
  char v52;
  _BYTE v53[8];
  _QWORD *v54;
  void *__p[2];
  char v56;
  __int128 v57[2];
  __int128 v58;
  unint64_t v59;
  __int128 __dst;
  unint64_t v61;
  _BYTE buf[32];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (!a2 && !*(_BYTE *)(a1 + 329))
  {
    v4 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "Active on AP";
      _os_log_debug_impl(&dword_1A343C000, v4, OS_LOG_TYPE_DEBUG, "#D Mode (%s) has not changed", buf, 0xCu);
    }
    return 1;
  }
  if (a2 > 6 || ((1 << a2) & 0x45) == 0)
  {
    v10 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a2;
      _os_log_error_impl(&dword_1A343C000, v10, OS_LOG_TYPE_ERROR, "Invalid Mode selected: %d", buf, 8u);
    }
    *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v66 = v11;
    v67 = v11;
    v64 = v11;
    v65 = v11;
    *(_OWORD *)&buf[16] = v11;
    v63 = v11;
    *(_OWORD *)buf = v11;
    v12 = (const void *)*MEMORY[0x1E0CFB590];
    v13 = strlen((const char *)*MEMORY[0x1E0CFB590]);
    if (v13 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v33 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v33 = v13 | 7;
      v34 = v33 + 1;
      p_dst = (__int128 *)operator new(v33 + 1);
      *((_QWORD *)&__dst + 1) = v14;
      v61 = v34 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v61) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_52:
        *((_BYTE *)p_dst + v14) = 0;
        v35 = (const void *)*MEMORY[0x1E0CFBEA8];
        v36 = strlen((const char *)*MEMORY[0x1E0CFBEA8]);
        if (v36 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v37 = v36;
        if (v36 >= 0x17)
        {
          v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v36 | 7) != 0x17)
            v39 = v36 | 7;
          v40 = v39 + 1;
          v38 = operator new(v39 + 1);
          *((_QWORD *)&v58 + 1) = v37;
          v59 = v40 | 0x8000000000000000;
          *(_QWORD *)&v58 = v38;
        }
        else
        {
          HIBYTE(v59) = v36;
          v38 = &v58;
          if (!v36)
          {
LABEL_60:
            v38[v37] = 0;
            BYTE7(v57[1]) = 21;
            strcpy((char *)v57, "Invalid Mode selected");
            Timestamp::Timestamp((Timestamp *)v53);
            Timestamp::asString((uint64_t)v53, 0, 9, __p);
            v52 = 0;
            LOBYTE(v51) = 0;
            ResetInfo::ResetInfo((std::string *)buf, &__dst, &v58, v57, (uint64_t)__p, 7, &v51);
            if (v56 < 0)
            {
              operator delete(__p[0]);
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v53, v54);
              if ((SHIBYTE(v59) & 0x80000000) == 0)
              {
LABEL_62:
                if ((SHIBYTE(v61) & 0x80000000) == 0)
                  goto LABEL_63;
LABEL_82:
                operator delete((void *)__dst);
LABEL_63:
                ResetInfo::ResetInfo(&v44, (__int128 *)buf);
                ICETrace::commandResetModem_sync(a1, (__int128 *)&v44);
                if (v50 < 0)
                {
                  operator delete(v49);
                  if ((v48 & 0x80000000) == 0)
                  {
LABEL_65:
                    if ((v46 & 0x80000000) == 0)
                      goto LABEL_66;
                    goto LABEL_85;
                  }
                }
                else if ((v48 & 0x80000000) == 0)
                {
                  goto LABEL_65;
                }
                operator delete(v47);
                if ((v46 & 0x80000000) == 0)
                {
LABEL_66:
                  if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_67;
                  goto LABEL_86;
                }
LABEL_85:
                operator delete(v45);
                if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_67:
                  *(_DWORD *)(a1 + 152) = 0;
                  if ((SHIBYTE(v67) & 0x80000000) == 0)
                    goto LABEL_68;
                  goto LABEL_87;
                }
LABEL_86:
                operator delete(v44.__r_.__value_.__l.__data_);
                *(_DWORD *)(a1 + 152) = 0;
                if ((SHIBYTE(v67) & 0x80000000) == 0)
                {
LABEL_68:
                  if ((SBYTE7(v65) & 0x80000000) == 0)
                    goto LABEL_69;
                  goto LABEL_88;
                }
LABEL_87:
                operator delete(*((void **)&v66 + 1));
                if ((SBYTE7(v65) & 0x80000000) == 0)
                {
LABEL_69:
                  if ((SHIBYTE(v63) & 0x80000000) == 0)
                    goto LABEL_70;
                  goto LABEL_89;
                }
LABEL_88:
                operator delete((void *)v64);
                if ((SHIBYTE(v63) & 0x80000000) == 0)
                {
LABEL_70:
                  if ((buf[23] & 0x80000000) == 0)
                    return 0;
LABEL_90:
                  operator delete(*(void **)buf);
                  return 0;
                }
LABEL_89:
                operator delete(*(void **)&buf[24]);
                if ((buf[23] & 0x80000000) == 0)
                  return 0;
                goto LABEL_90;
              }
            }
            else
            {
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v53, v54);
              if ((SHIBYTE(v59) & 0x80000000) == 0)
                goto LABEL_62;
            }
            operator delete((void *)v58);
            if ((SHIBYTE(v61) & 0x80000000) == 0)
              goto LABEL_63;
            goto LABEL_82;
          }
        }
        memmove(v38, v35, v37);
        goto LABEL_60;
      }
    }
    memmove(p_dst, v12, v14);
    goto LABEL_52;
  }
  if (!capabilities::abs::supportsBBUSBMux((capabilities::abs *)a1))
  {
    v7 = (SoftwareBypassShim **)(a1 + 456);
    v8 = *(SoftwareBypassShim **)(a1 + 456);
    if (v8)
    {
      if (*((_QWORD *)v8 + 2))
        goto LABEL_15;
    }
    else
    {
      SoftwareBypassShim::create((std::__shared_weak_count **)buf);
      v24 = *(_OWORD *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v25 = *(std::__shared_weak_count **)(a1 + 464);
      *(_OWORD *)v7 = v24;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v28 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v29 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v8 = *v7;
      if (*((_QWORD *)*v7 + 2))
      {
LABEL_15:
        if (a2 > 6)
          v9 = 2863311530;
        else
          v9 = dword_1A358048C[a2];
        v5 = SoftwareBypassShim::bypassCtl(v8, v9);
        v41 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          v42 = SoftwareBypassShim::bypassInterfaceMaskAsString(*v7, v9);
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v42;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v5;
          _os_log_impl(&dword_1A343C000, v41, OS_LOG_TYPE_DEFAULT, "#I bypassCtl( %s): success: %d", buf, 0x12u);
          v18 = *(NSObject **)(a1 + 40);
          if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            return v5;
        }
        else
        {
          v18 = *(NSObject **)(a1 + 40);
          if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            return v5;
        }
        goto LABEL_77;
      }
    }
    v31 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      goto LABEL_46;
    *(_WORD *)buf = 0;
    v21 = "expected to use software bypass, but it is not supported";
    v22 = v31;
    v23 = 2;
LABEL_94:
    _os_log_error_impl(&dword_1A343C000, v22, OS_LOG_TYPE_ERROR, v21, buf, v23);
LABEL_46:
    v5 = 0;
    v18 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      return v5;
    goto LABEL_77;
  }
  if (a2 == 2)
  {
    v6 = TelephonyBasebandEnableModemMux();
    usleep(0x186A0u);
    if (!v6 || !TelephonyBasebandEnableModemVBUS())
    {
LABEL_30:
      v19 = *(NSObject **)(a1 + 40);
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        goto LABEL_46;
      v20 = "On";
      if (a2 == 2)
        v20 = "Off";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v20;
      v21 = "Failed to set VBUS/Mux %s";
      v22 = v19;
      v23 = 12;
      goto LABEL_94;
    }
  }
  else if (!TelephonyBasebandEnableModemVBUS() || (TelephonyBasebandEnableModemMux() & 1) == 0)
  {
    goto LABEL_30;
  }
  v16 = *(NSObject **)(a1 + 40);
  if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 1;
    v18 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      return v5;
    goto LABEL_77;
  }
  v17 = "Off";
  if (a2 == 2)
    v17 = "On";
  *(_DWORD *)buf = 136315138;
  *(_QWORD *)&buf[4] = v17;
  _os_log_impl(&dword_1A343C000, v16, OS_LOG_TYPE_DEFAULT, "#I Set VBUS/Mux %s", buf, 0xCu);
  v5 = 1;
  v18 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
LABEL_77:
    v43 = "failure";
    if ((_DWORD)v5)
      v43 = "success";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v43;
    _os_log_impl(&dword_1A343C000, v18, OS_LOG_TYPE_DEFAULT, "#I Set mode %s", buf, 0xCu);
  }
  return v5;
}

void sub_1A348CD00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  ResetInfo::~ResetInfo((void **)va);
  ResetInfo::~ResetInfo((void **)(v2 - 192));
  _Unwind_Resume(a1);
}

void sub_1A348CD1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  ResetInfo::~ResetInfo((void **)(v1 - 192));
  _Unwind_Resume(a1);
}

void sub_1A348CD30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,_QWORD *a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (a35 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a27, a28);
  if (a45 < 0)
    operator delete(a40);
  if (*(char *)(v45 - 193) < 0)
  {
    operator delete(*(void **)(v45 - 216));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void TraceFileCollection::Parameters::~Parameters(void **this)
{
  void *v2;

  if (*((char *)this + 103) < 0)
  {
    operator delete(this[10]);
    if ((*((char *)this + 79) & 0x80000000) == 0)
    {
LABEL_3:
      v2 = this[4];
      if (!v2)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((*((char *)this + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[7]);
  v2 = this[4];
  if (v2)
  {
LABEL_4:
    this[5] = v2;
    operator delete(v2);
  }
LABEL_5:
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void ICETrace::start_sync(uint64_t a1, char **a2, const void **a3)
{
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  char *v9;
  int started;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *v14;
  const void *v15;
  CFTypeRef cf;
  dispatch_object_t object;
  void *v18;
  void *v19;
  _BYTE v20[8];
  _QWORD *v21;
  void *v22;
  char v23;
  group v24;
  void *v25;
  char v26;
  _BYTE v27[8];
  _QWORD *v28;
  void *v29;
  char v30;
  uint8_t buf[4];
  const char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 473))
  {
    v6 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      goto LABEL_3;
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
    v6 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
LABEL_3:
      if (!*(_QWORD *)(a1 + 480))
        goto LABEL_11;
      goto LABEL_10;
    }
  }
  v7 = *(int *)(a1 + 152);
  if (v7 > 6)
    v8 = "Unknown";
  else
    v8 = off_1E4A08D30[v7];
  *(_DWORD *)buf = 136315138;
  v32 = v8;
  _os_log_impl(&dword_1A343C000, v6, OS_LOG_TYPE_DEFAULT, "#I Starting BB Trace with mode: %s", buf, 0xCu);
  if (!*(_QWORD *)(a1 + 480))
  {
LABEL_11:
    v9 = *a2;
    v24.gr_name = v9;
    if (!v9)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_10:
  v30 = 0;
  LOBYTE(v29) = 0;
  Timestamp::Timestamp((Timestamp *)v27);
  v26 = 0;
  LOBYTE(v25) = 0;
  HIBYTE(v24.gr_mem) = 0;
  LOBYTE(v24.gr_passwd) = 0;
  abm::trace::TraceInfo::push();
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v27, v28);
  if ((v30 & 0x80000000) == 0)
    goto LABEL_11;
  operator delete(v29);
  v9 = *a2;
  v24.gr_name = v9;
  if (v9)
LABEL_12:
    dispatch_retain((dispatch_object_t)v9);
LABEL_13:
  started = ICETrace::issueStartCommands_sync((ICETrace *)a1, &v24);
  if (v9)
    dispatch_release((dispatch_object_t)v9);
  if (started)
  {
    ICETrace::setLPMHandlers_sync((ICETrace *)a1);
    if (*(_QWORD *)(a1 + 480))
    {
      v23 = 0;
      LOBYTE(v22) = 0;
      Timestamp::Timestamp((Timestamp *)v20);
      LOBYTE(v19) = 0;
      LOBYTE(v18) = 0;
      abm::trace::TraceInfo::push();
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v20, v21);
      if (v23 < 0)
        operator delete(v22);
    }
  }
  else
  {
    v11 = *(std::__shared_weak_count **)(a1 + 376);
    *(_QWORD *)(a1 + 368) = 0;
    *(_QWORD *)(a1 + 376) = 0;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    ICETrace::setTraceMode_sync(a1, 0);
    *(_BYTE *)(a1 + 336) = 0;
    v14 = *a2;
    object = v14;
    if (v14)
      dispatch_retain(v14);
    v15 = *a3;
    cf = v15;
    if (v15)
      CFRetain(v15);
    (*(void (**)(uint64_t, dispatch_object_t *, CFTypeRef *))(*(_QWORD *)a1 + 192))(a1, &object, &cf);
    if (cf)
      CFRelease(cf);
    if (object)
      dispatch_release(object);
  }
}

void sub_1A348D154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, dispatch_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ICETrace::reinit(uint64_t a1, dispatch_object_t *a2)
{
  NSObject *v3;
  _QWORD v4[5];
  dispatch_group_t group;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 1174405120;
  v4[2] = ___ZN8ICETrace6reinitEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v4[3] = &__block_descriptor_tmp_40;
  v4[4] = a1;
  group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v3);
  }
  ctu::SharedSynchronizable<Trace>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v4);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
}

void ___ZN8ICETrace6reinitEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 320);
  *(_QWORD *)(v1 + 320) = 0;
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
  *(_BYTE *)(v1 + 328) = 0;
}

void ICETrace::prepare(uint64_t a1, dispatch_object_t *a2)
{
  NSObject *v3;
  _QWORD v4[5];
  dispatch_group_t group;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 1174405120;
  v4[2] = ___ZN8ICETrace7prepareEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v4[3] = &__block_descriptor_tmp_41;
  v4[4] = a1;
  group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v3);
  }
  ctu::SharedSynchronizable<Trace>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v4);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
}

void ___ZN8ICETrace7prepareEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 144);
  if (v2)
  {
    dispatch_retain(*(dispatch_object_t *)(v1 + 144));
    dispatch_group_enter(v2);
  }
  if (*(_BYTE *)(v1 + 336))
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 176))(v1);
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
}

void sub_1A348D490(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void ICETrace::start(uint64_t a1, dispatch_object_t *a2, const void **a3)
{
  NSObject *v6;
  const void *v7;
  uint64_t *v8;
  NSObject *v9;
  _QWORD v10[5];
  dispatch_group_t group;
  CFTypeRef cf;
  dispatch_object_t object;

  v6 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v6);
  }
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1174405120;
  v10[2] = ___ZN8ICETrace5startEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v10[3] = &__block_descriptor_tmp_42;
  v10[4] = a1;
  group = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(v6);
  }
  v7 = *a3;
  cf = v7;
  if (v7)
    CFRetain(v7);
  v8 = (uint64_t *)(a1 + 72);
  v9 = *a2;
  object = v9;
  if (v9)
    dispatch_retain(v9);
  ctu::SharedSynchronizable<Trace>::execute_wrapped(v8, (uint64_t)v10);
  if (object)
    dispatch_release(object);
  if (cf)
    CFRelease(cf);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (v6)
  {
    dispatch_group_leave(v6);
    dispatch_release(v6);
  }
}

void ___ZN8ICETrace5startEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  CommandDriverFactory *v6;
  NSObject *v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  NSObject *v26;
  const void *v27;
  NSObject *v28;
  const void *v29;
  CFTypeRef v30;
  NSObject *v31;
  CFTypeRef cf;
  dispatch_object_t object[2];
  std::__shared_weak_count *v34;
  __int128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38[3];
  _QWORD v39[2];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 144);
  if (v3)
  {
    dispatch_retain(*(dispatch_object_t *)(v2 + 144));
    dispatch_group_enter(v3);
  }
  v39[0] = 0xAAAAAAAAAAAAAAAALL;
  v39[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v39, *(const __CFDictionary **)(a1 + 48));
  memset(v38, 170, sizeof(v38));
  v4 = (const char *)*MEMORY[0x1E0CFB530];
  __p[0] = 0;
  __p[1] = 0;
  v37 = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v35, v4);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A858F29C](&v35);
  if ((SHIBYTE(v37) & 0x80000000) == 0)
  {
    v5 = *(_QWORD *)(v2 + 416);
    if (v5)
      goto LABEL_5;
LABEL_8:
    v6 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    v7 = off_1ED114670;
    if (!off_1ED114670)
    {
      CommandDriverFactory::create_default_global(v6);
      v8 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v9 = (std::__shared_weak_count *)*(&off_1ED114670 + 1);
      off_1ED114670 = v8;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v12 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v13 = (unint64_t *)((char *)__p[1] + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v7 = off_1ED114670;
    }
    object[1] = v7;
    v34 = (std::__shared_weak_count *)*(&off_1ED114670 + 1);
    if (*(&off_1ED114670 + 1))
    {
      v15 = (unint64_t *)(*(&off_1ED114670 + 1) + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    (*((void (**)(__int128 *__return_ptr, NSObject *))v7->isa + 17))(&v35, v7);
    v17 = v35;
    v35 = 0uLL;
    v18 = *(std::__shared_weak_count **)(v2 + 424);
    *(_OWORD *)(v2 + 416) = v17;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
    if (*((_QWORD *)&v35 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (v34)
    {
      v24 = &v34->__shared_owners_;
      do
        v25 = __ldaxr((unint64_t *)v24);
      while (__stlxr(v25 - 1, (unint64_t *)v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    goto LABEL_38;
  }
  operator delete(__p[0]);
  v5 = *(_QWORD *)(v2 + 416);
  if (!v5)
    goto LABEL_8;
LABEL_5:
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 152))(v5) & 1) == 0)
    goto LABEL_47;
LABEL_38:
  ICETrace::processETB_sync((std::string::size_type *)v2);
  v26 = *(NSObject **)(a1 + 56);
  if (*(_BYTE *)(v2 + 336))
  {
    object[0] = *(dispatch_object_t *)(a1 + 56);
    if (v26)
      dispatch_retain(v26);
    v27 = *(const void **)(a1 + 48);
    cf = v27;
    if (v27)
      CFRetain(v27);
    (*(void (**)(uint64_t, dispatch_object_t *, CFTypeRef *))(*(_QWORD *)v2 + 184))(v2, object, &cf);
    if (cf)
      CFRelease(cf);
    v28 = object[0];
    if (object[0])
LABEL_46:
      dispatch_release(v28);
  }
  else
  {
    v31 = *(NSObject **)(a1 + 56);
    if (v26)
      dispatch_retain(v26);
    v29 = *(const void **)(a1 + 48);
    v30 = v29;
    if (v29)
      CFRetain(v29);
    (*(void (**)(uint64_t, NSObject **, CFTypeRef *))(*(_QWORD *)v2 + 192))(v2, &v31, &v30);
    if (v30)
      CFRelease(v30);
    v28 = v31;
    if (v31)
      goto LABEL_46;
  }
LABEL_47:
  if (SHIBYTE(v38[2]) < 0)
    operator delete(v38[0]);
  MEMORY[0x1A858F2D8](v39);
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
}

void sub_1A348D904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  NSObject *v28;
  uint64_t v29;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  if (a28 < 0)
    operator delete(__p);
  MEMORY[0x1A858F2D8](v29 - 64);
  if (v28)
  {
    dispatch_group_leave(v28);
    dispatch_release(v28);
  }
  _Unwind_Resume(a1);
}

void ICETrace::processETB_sync(std::string::size_type *this)
{
  const std::string::value_type *v2;
  _OWORD *v3;
  int v4;
  const char *v5;
  BOOL TraceConfigFile_sync;
  BOOL v7;
  std::__shared_weak_count *v8;
  std::string::size_type v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  NSObject *v18;
  std::string::size_type v19;
  _BYTE *v20;
  _BYTE *v21;
  size_t v22;
  char *v23;
  NSObject *v24;
  void *v25;
  dispatch_object_t object;
  void *__p;
  char *v28;
  char *v29;
  _QWORD aBlock[6];
  std::__shared_weak_count *v31;
  std::string v32;
  char *v33[2];
  uint64_t v34;
  uint8_t buf[24];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (!capabilities::abs::supportsETB((capabilities::abs *)this))
    return;
  HIBYTE(v34) = 8;
  strcpy((char *)v33, "Disabled");
  v3 = this + 26;
  v2 = (const std::string::value_type *)this[26];
  v4 = *((char *)this + 231);
  v5 = v4 >= 0 ? (const char *)(this + 26) : (const char *)this[26];
  if (!strcasecmp((const char *)v33, v5))
    return;
  if (v4 < 0)
  {
    if (!this[27])
      return;
    v33[0] = 0;
    v33[1] = 0;
    v34 = 0;
    std::string::__init_copy_ctor_external(&v32, v2, this[27]);
  }
  else
  {
    if (!v4)
      return;
    v33[0] = 0;
    v33[1] = 0;
    v34 = 0;
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *v3;
    v32.__r_.__value_.__r.__words[2] = this[28];
  }
  TraceConfigFile_sync = ICETrace::loadTraceConfigFile_sync((uint64_t)this, (std::string::size_type)&v32, v33, 1);
  v7 = TraceConfigFile_sync;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v32.__r_.__value_.__l.__data_);
    if (v7)
    {
LABEL_13:
      if (this + 35 != (std::string::size_type *)v33)
        std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(this + 35, v33[0], v33[1], v33[1] - v33[0]);
      v8 = (std::__shared_weak_count *)this[10];
      if (!v8 || (v9 = this[9], (v10 = std::__shared_weak_count::lock(v8)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v11 = v10;
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v13 = __ldxr(p_shared_weak_owners);
      while (__stxr(v13 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
      memset(buf, 170, 16);
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN8ICETrace15processETB_syncEv_block_invoke;
      aBlock[3] = &__block_descriptor_tmp_113;
      aBlock[4] = this;
      aBlock[5] = v9;
      v31 = v11;
      do
        v16 = __ldxr(p_shared_weak_owners);
      while (__stxr(v16 + 1, p_shared_weak_owners));
      v17 = _Block_copy(aBlock);
      v18 = this[11];
      if (v18)
        dispatch_retain((dispatch_object_t)this[11]);
      *(_QWORD *)buf = v17;
      *(_QWORD *)&buf[8] = v18;
      v19 = this[52];
      if (!v19)
      {
LABEL_40:
        if (v18)
          dispatch_release(v18);
        if (v17)
          _Block_release(v17);
        if (v31)
          std::__shared_weak_count::__release_weak(v31);
        std::__shared_weak_count::__release_weak(v11);
        v23 = v33[0];
        if (!v33[0])
          return;
        goto LABEL_51;
      }
      __p = 0;
      v28 = 0;
      v29 = 0;
      v21 = (_BYTE *)this[35];
      v20 = (_BYTE *)this[36];
      v22 = v20 - v21;
      if (v20 != v21)
      {
        if ((v22 & 0x8000000000000000) != 0)
          std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
        __p = operator new(v20 - v21);
        v29 = (char *)__p + v22;
        memcpy(__p, v21, v22);
        v28 = (char *)__p + v22;
      }
      if (v17)
      {
        v25 = _Block_copy(v17);
        object = v18;
        if (!v18)
        {
LABEL_34:
          (*(void (**)(std::string::size_type, void **, void **))(*(_QWORD *)v19 + 128))(v19, &__p, &v25);
          if (object)
            dispatch_release(object);
          if (v25)
            _Block_release(v25);
          if (__p)
          {
            v28 = (char *)__p;
            operator delete(__p);
          }
          goto LABEL_40;
        }
      }
      else
      {
        v25 = 0;
        object = v18;
        if (!v18)
          goto LABEL_34;
      }
      dispatch_retain(v18);
      goto LABEL_34;
    }
  }
  else if (TraceConfigFile_sync)
  {
    goto LABEL_13;
  }
  v24 = this[5];
  if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    v23 = v33[0];
    if (!v33[0])
      return;
    goto LABEL_51;
  }
  if (*((char *)this + 231) < 0)
    v3 = *(_OWORD **)v3;
  *(_DWORD *)buf = 136315138;
  *(_QWORD *)&buf[4] = v3;
  _os_log_error_impl(&dword_1A343C000, v24, OS_LOG_TYPE_ERROR, "Failed to load ETB config: %s", buf, 0xCu);
  v23 = v33[0];
  if (v33[0])
  {
LABEL_51:
    v33[1] = v23;
    operator delete(v23);
  }
}

void sub_1A348DD54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE56c21_ZTSN8dispatch5groupE(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  const void *v6;
  NSObject *v7;

  v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = a1[5];
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = (const void *)a2[6];
  a1[6] = v6;
  if (v6)
    CFRetain(v6);
  v7 = a2[7];
  a1[7] = v7;
  if (v7)
    dispatch_retain(v7);
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE56c21_ZTSN8dispatch5groupE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  NSObject *v4;
  NSObject *v5;

  v2 = a1[7];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[6];
  if (v3)
    CFRelease(v3);
  v4 = a1[5];
  if (v4)
  {
    dispatch_group_leave(v4);
    v5 = a1[5];
    if (v5)
      dispatch_release(v5);
  }
}

void ICETrace::stop_sync(uint64_t a1, NSObject **a2)
{
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  NSObject *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _BYTE v23[8];
  _QWORD *v24;
  void *v25;
  char v26;
  void *v27;
  dispatch_object_t object;
  uint8_t buf[8];
  __int128 v30;
  _QWORD aBlock[5];
  dispatch_group_t group;
  uint64_t v33;
  std::__shared_weak_count *v34;
  const void *v35;
  dispatch_object_t v36;
  void *v37;
  char v38[24];
  char v39;
  _BYTE v40[8];
  _QWORD *v41;
  void *v42;
  char v43;

  v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v4, OS_LOG_TYPE_DEFAULT, "#I Stopping", buf, 2u);
  }
  if (!*(_QWORD *)(a1 + 480))
    goto LABEL_7;
  v43 = 0;
  LOBYTE(v42) = 0;
  Timestamp::Timestamp((Timestamp *)v40);
  v39 = 0;
  *(_WORD *)v38 = 0;
  LOBYTE(v37) = 0;
  abm::trace::TraceInfo::push();
  if ((v38[0] & 0x80000000) == 0)
  {
    if ((v39 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_43;
  }
  operator delete(v37);
  if (v39 < 0)
  {
LABEL_43:
    operator delete(*(void **)&v38[1]);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v40, v41);
    if (v43 < 0)
      goto LABEL_44;
LABEL_7:
    BasebandTransport::close(*(BasebandTransport **)(a1 + 392));
    if (!*(_BYTE *)(a1 + 472))
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_6:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v40, v41);
  if ((v43 & 0x80000000) == 0)
    goto LABEL_7;
LABEL_44:
  operator delete(v42);
  BasebandTransport::close(*(BasebandTransport **)(a1 + 392));
  if (*(_BYTE *)(a1 + 472))
  {
LABEL_8:
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 144));
    *(_BYTE *)(a1 + 472) = 0;
  }
LABEL_9:
  ICETrace::setTraceMode_sync(a1, 0);
  v5 = *a2;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v6 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v6 || (v7 = *(_QWORD *)(a1 + 72), (v8 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v35 = (const void *)0xAAAAAAAAAAAAAAAALL;
  v36 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN8ICETrace9stop_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_44;
  aBlock[4] = a1;
  group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    if (group)
      dispatch_group_enter(group);
  }
  v33 = v7;
  v34 = v9;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v15 = _Block_copy(aBlock);
  v16 = *(NSObject **)(a1 + 88);
  if (v16)
    dispatch_retain(*(dispatch_object_t *)(a1 + 88));
  v35 = v15;
  v36 = v16;
  v17 = *(_QWORD *)(a1 + 416);
  if (v17 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 152))(v17))
  {
    *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v18 = *(_BYTE *)(a1 + 304);
    *(_QWORD *)buf = &off_1E4A08BE0;
    LOBYTE(v30) = 0;
    BYTE1(v30) = v18;
    *(_QWORD *)((char *)&v30 + 4) = *(_QWORD *)(a1 + 308);
    v19 = *(_QWORD *)(a1 + 416);
    if (v15)
    {
      v27 = _Block_copy(v15);
      object = v16;
      if (!v16)
      {
LABEL_31:
        (*(void (**)(uint64_t, uint8_t *, void **))(*(_QWORD *)v19 + 96))(v19, buf, &v27);
        if (object)
          dispatch_release(object);
        if (v27)
          _Block_release(v27);
        goto LABEL_35;
      }
    }
    else
    {
      v27 = 0;
      object = v16;
      if (!v16)
        goto LABEL_31;
    }
    dispatch_retain(v16);
    goto LABEL_31;
  }
LABEL_35:
  ICETrace::clearLPMHandlers_sync((ICETrace *)a1);
  v20 = *(std::__shared_weak_count **)(a1 + 424);
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  if (!v20)
    goto LABEL_39;
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    *(_BYTE *)(a1 + 473) = 0;
    if (!*(_QWORD *)(a1 + 480))
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *(_BYTE *)(a1 + 473) = 0;
    if (!*(_QWORD *)(a1 + 480))
      goto LABEL_47;
  }
  v26 = 0;
  LOBYTE(v25) = 0;
  Timestamp::Timestamp((Timestamp *)v23);
  abm::trace::TraceInfo::push();
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v23, v24);
  if (v26 < 0)
    operator delete(v25);
LABEL_47:
  if (v36)
    dispatch_release(v36);
  if (v35)
    _Block_release(v35);
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  std::__shared_weak_count::__release_weak(v9);
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
}

void sub_1A348E2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,dispatch_group_t group,uint64_t a42,std::__shared_weak_count *a43)
{
  NSObject *v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  NSObject *v47;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a30);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v45 - 176);
  if (a43)
  {
    std::__shared_weak_count::__release_weak(a43);
    v47 = group;
    if (!group)
      goto LABEL_7;
  }
  else
  {
    v47 = group;
    if (!group)
      goto LABEL_7;
  }
  dispatch_group_leave(v47);
  if (group)
    dispatch_release(group);
LABEL_7:
  std::__shared_weak_count::__release_weak(v44);
  if (v43)
  {
    dispatch_group_leave(v43);
    dispatch_release(v43);
  }
  _Unwind_Resume(a1);
}

void sub_1A348E43C()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x1A348E434);
  JUMPOUT(0x1A348E424);
}

void ___ZN8ICETrace9stop_syncEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  NSObject *v11;
  _BOOL4 v12;
  __int128 v13;
  const void *v14;
  size_t v15;
  size_t v16;
  __int128 *p_dst;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  size_t v21;
  size_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::string v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  void *v34;
  char v35;
  __int128 v36;
  char v37;
  _BYTE v38[8];
  _QWORD *v39;
  void *__p[2];
  char v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  unint64_t v45;
  __int128 __dst;
  unint64_t v47;
  std::__shared_weak_count *v49;
  uint8_t buf[16];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v4 = a1[4];
  v5 = *(NSObject **)(v4 + 144);
  if (v5)
  {
    dispatch_retain(*(dispatch_object_t *)(v4 + 144));
    dispatch_group_enter(v5);
  }
  v6 = (std::__shared_weak_count *)a1[7];
  if (v6)
  {
    v7 = std::__shared_weak_count::lock(v6);
    v49 = v7;
    if (v7)
    {
      v8 = v7;
      if (a1[6])
      {
        v9 = *a2;
        if (*a2)
          v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v10 = 0;
        v11 = *(NSObject **)(v4 + 40);
        v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
        if (v10)
        {
          if (v12)
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v9;
            _os_log_impl(&dword_1A343C000, v11, OS_LOG_TYPE_DEFAULT, "#E Stop failed: %@", buf, 0xCu);
          }
          *(_QWORD *)&v13 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v55 = v13;
          v56 = v13;
          v53 = v13;
          v54 = v13;
          v51 = v13;
          v52 = v13;
          *(_OWORD *)buf = v13;
          v14 = (const void *)*MEMORY[0x1E0CFB590];
          v15 = strlen((const char *)*MEMORY[0x1E0CFB590]);
          if (v15 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v16 = v15;
          if (v15 >= 0x17)
          {
            v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v15 | 7) != 0x17)
              v18 = v15 | 7;
            v19 = v18 + 1;
            p_dst = (__int128 *)operator new(v18 + 1);
            *((_QWORD *)&__dst + 1) = v16;
            v47 = v19 | 0x8000000000000000;
            *(_QWORD *)&__dst = p_dst;
          }
          else
          {
            HIBYTE(v47) = v15;
            p_dst = &__dst;
            if (!v15)
            {
LABEL_22:
              *((_BYTE *)p_dst + v16) = 0;
              v20 = (const void *)*MEMORY[0x1E0CFBEA8];
              v21 = strlen((const char *)*MEMORY[0x1E0CFBEA8]);
              if (v21 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              v22 = v21;
              if (v21 >= 0x17)
              {
                v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v21 | 7) != 0x17)
                  v24 = v21 | 7;
                v25 = v24 + 1;
                v23 = operator new(v24 + 1);
                *((_QWORD *)&v44 + 1) = v22;
                v45 = v25 | 0x8000000000000000;
                *(_QWORD *)&v44 = v23;
              }
              else
              {
                HIBYTE(v45) = v21;
                v23 = &v44;
                if (!v21)
                {
LABEL_30:
                  v23[v22] = 0;
                  v26 = (char *)operator new(0x28uLL);
                  v42 = v26;
                  v43 = xmmword_1A35802F0;
                  strcpy(v26, "Failed to stop trace with ARI command");
                  Timestamp::Timestamp((Timestamp *)v38);
                  Timestamp::asString((uint64_t)v38, 0, 9, __p);
                  v37 = 0;
                  LOBYTE(v36) = 0;
                  ResetInfo::ResetInfo((std::string *)buf, &__dst, &v44, (__int128 *)&v42, (uint64_t)__p, 7, &v36);
                  if (v41 < 0)
                    operator delete(__p[0]);
                  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v38, v39);
                  operator delete(v26);
                  if (SHIBYTE(v45) < 0)
                    operator delete((void *)v44);
                  if (SHIBYTE(v47) < 0)
                    operator delete((void *)__dst);
                  ResetInfo::ResetInfo(&v29, (__int128 *)buf);
                  ICETrace::commandResetModem_sync(v4, (__int128 *)&v29);
                  if (v35 < 0)
                  {
                    operator delete(v34);
                    if ((v33 & 0x80000000) == 0)
                    {
LABEL_38:
                      if ((v31 & 0x80000000) == 0)
                        goto LABEL_39;
                      goto LABEL_48;
                    }
                  }
                  else if ((v33 & 0x80000000) == 0)
                  {
                    goto LABEL_38;
                  }
                  operator delete(v32);
                  if ((v31 & 0x80000000) == 0)
                  {
LABEL_39:
                    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_40;
                    goto LABEL_49;
                  }
LABEL_48:
                  operator delete(v30);
                  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_40:
                    if ((SHIBYTE(v56) & 0x80000000) == 0)
                      goto LABEL_41;
                    goto LABEL_50;
                  }
LABEL_49:
                  operator delete(v29.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v56) & 0x80000000) == 0)
                  {
LABEL_41:
                    if ((SBYTE7(v54) & 0x80000000) == 0)
                      goto LABEL_42;
                    goto LABEL_51;
                  }
LABEL_50:
                  operator delete(*((void **)&v55 + 1));
                  if ((SBYTE7(v54) & 0x80000000) == 0)
                  {
LABEL_42:
                    if ((SHIBYTE(v52) & 0x80000000) == 0)
                      goto LABEL_43;
                    goto LABEL_52;
                  }
LABEL_51:
                  operator delete((void *)v53);
                  if ((SHIBYTE(v52) & 0x80000000) == 0)
                  {
LABEL_43:
                    if ((SBYTE7(v51) & 0x80000000) == 0)
                      goto LABEL_44;
LABEL_53:
                    operator delete(*(void **)buf);
                    v8 = v49;
                    if (!v49)
                      goto LABEL_58;
                    goto LABEL_54;
                  }
LABEL_52:
                  operator delete(*((void **)&v51 + 1));
                  if ((SBYTE7(v51) & 0x80000000) == 0)
                  {
LABEL_44:
                    v8 = v49;
                    if (!v49)
                      goto LABEL_58;
                    goto LABEL_54;
                  }
                  goto LABEL_53;
                }
              }
              memmove(v23, v20, v22);
              goto LABEL_30;
            }
          }
          memmove(p_dst, v14, v16);
          goto LABEL_22;
        }
        if (v12)
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1A343C000, v11, OS_LOG_TYPE_DEFAULT, "#I Stop successful.", buf, 2u);
        }
      }
LABEL_54:
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
LABEL_58:
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
}

void sub_1A348E8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  NSObject *v49;
  uint64_t v50;

  ResetInfo::~ResetInfo((void **)&a9);
  ResetInfo::~ResetInfo((void **)(v50 - 208));
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v50 - 224);
  if (!v49)
    _Unwind_Resume(a1);
  dispatch_group_leave(v49);
  dispatch_release(v49);
  _Unwind_Resume(a1);
}

void ICETrace::stop(uint64_t a1, dispatch_object_t *a2, const void **a3)
{
  NSObject *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  NSObject *v16;
  const void *v17;
  _QWORD v18[5];
  dispatch_group_t group;
  uint64_t v20;
  std::__shared_weak_count *v21;
  dispatch_object_t object;
  CFTypeRef cf;

  v6 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v6);
  }
  v8 = *(_QWORD *)(a1 + 72);
  v7 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v7 || (v9 = std::__shared_weak_count::lock(v7)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v10 = v9;
  p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v10);
  }
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 1174405120;
  v18[2] = ___ZN8ICETrace4stopEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v18[3] = &__block_descriptor_tmp_45;
  v18[4] = a1;
  group = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(v6);
  }
  v20 = v8;
  v21 = v10;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  v16 = *a2;
  object = v16;
  if (v16)
    dispatch_retain(v16);
  v17 = *a3;
  cf = v17;
  if (v17)
    CFRetain(v17);
  ctu::SharedSynchronizable<Trace>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v18);
  if (cf)
    CFRelease(cf);
  if (object)
    dispatch_release(object);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  std::__shared_weak_count::__release_weak(v10);
  if (v6)
  {
    dispatch_group_leave(v6);
    dispatch_release(v6);
  }
}

void sub_1A348EB38(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN8ICETrace4stopEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  const void *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  CFTypeRef cf;
  dispatch_object_t object;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v2 = a1[4];
  v3 = *(NSObject **)(v2 + 144);
  if (v3)
  {
    dispatch_retain(*(dispatch_object_t *)(v2 + 144));
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[7];
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v14 = v5;
    if (v5)
    {
      v6 = v5;
      v13 = a1[6];
      if (v13 && *(_BYTE *)(v2 + 336))
      {
        v7 = a1[8];
        object = v7;
        if (v7)
          dispatch_retain(v7);
        v8 = (const void *)a1[9];
        cf = v8;
        if (v8)
          CFRetain(v8);
        (*(void (**)(uint64_t, dispatch_object_t *, CFTypeRef *))(*(_QWORD *)v2 + 192))(v2, &object, &cf);
        if (cf)
          CFRelease(cf);
        if (object)
          dispatch_release(object);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
}

void sub_1A348EC68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11)
{
  NSObject *v11;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)&a9);
  if (object)
  {
    dispatch_release(object);
    std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
    if (!v11)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
    if (!v11)
      goto LABEL_3;
  }
  dispatch_group_leave(v11);
  dispatch_release(v11);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c29_ZTSNSt3__18weak_ptrI5TraceEE64c21_ZTSN8dispatch5groupE72c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  CFTypeRef result;

  v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = a1[5];
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = a2[8];
  a1[8] = v9;
  if (v9)
    dispatch_retain(v9);
  result = (CFTypeRef)a2[9];
  a1[9] = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c29_ZTSNSt3__18weak_ptrI5TraceEE64c21_ZTSN8dispatch5groupE72c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(_QWORD *a1)
{
  const void *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  NSObject *v6;

  v2 = (const void *)a1[9];
  if (v2)
    CFRelease(v2);
  v3 = a1[8];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[7];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  v5 = a1[5];
  if (v5)
  {
    dispatch_group_leave(v5);
    v6 = a1[5];
    if (v6)
      dispatch_release(v6);
  }
}

void ICETrace::abort(uint64_t a1, dispatch_object_t *a2)
{
  NSObject *v4;
  NSObject *v5;
  _QWORD v6[5];
  dispatch_group_t group;
  dispatch_object_t object;

  v4 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v4);
  }
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 1174405120;
  v6[2] = ___ZN8ICETrace5abortEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v6[3] = &__block_descriptor_tmp_46;
  v6[4] = a1;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  v5 = *a2;
  object = v5;
  if (v5)
    dispatch_retain(v5);
  ctu::SharedSynchronizable<Trace>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v6);
  if (object)
    dispatch_release(object);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
}

void ___ZN8ICETrace5abortEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  dispatch_object_t object;
  void *__p;
  char v9;
  void *v10;
  char v11;
  _BYTE v12[8];
  _QWORD *v13;
  void *v14;
  char v15;
  uint8_t buf[16];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 144);
  if (v3)
  {
    dispatch_retain(*(dispatch_object_t *)(v2 + 144));
    dispatch_group_enter(v3);
  }
  v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v4, OS_LOG_TYPE_DEFAULT, "#I Abort received", buf, 2u);
  }
  if (!*(_QWORD *)(v2 + 480))
    goto LABEL_7;
  v15 = 0;
  LOBYTE(v14) = 0;
  Timestamp::Timestamp((Timestamp *)v12);
  v11 = 0;
  LOBYTE(v10) = 0;
  v9 = 0;
  LOBYTE(__p) = 0;
  abm::trace::TraceInfo::push();
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v12, v13);
  if (v15 < 0)
  {
    operator delete(v14);
    v5 = *(_QWORD *)(v2 + 416);
    if (!v5)
      goto LABEL_12;
  }
  else
  {
LABEL_7:
    v5 = *(_QWORD *)(v2 + 416);
    if (!v5)
      goto LABEL_12;
  }
  v6 = *(NSObject **)(a1 + 48);
  object = v6;
  if (v6)
    dispatch_retain(v6);
  (*(void (**)(uint64_t, dispatch_object_t *))(*(_QWORD *)v5 + 144))(v5, &object);
  if (object)
    dispatch_release(object);
LABEL_12:
  BasebandTransport::close(*(BasebandTransport **)(v2 + 392));
  if (*(_BYTE *)(v2 + 472))
  {
    dispatch_group_leave(*(dispatch_group_t *)(v2 + 144));
    *(_BYTE *)(v2 + 472) = 0;
  }
  *(_BYTE *)(v2 + 473) = 0;
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
}

void sub_1A348F018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24)
{
  NSObject *v24;

  if (object)
    dispatch_release(object);
  if (v24)
  {
    dispatch_group_leave(v24);
    dispatch_release(v24);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A348F090()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x1A348F088);
  JUMPOUT(0x1A348F078);
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c21_ZTSN8dispatch5groupE(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;

  v4 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = *(NSObject **)(a1 + 40);
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  if (v6)
    dispatch_retain(v6);
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(NSObject **)(a1 + 40);
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = *(NSObject **)(a1 + 40);
    if (v4)
      dispatch_release(v4);
  }
}

void ICETrace::shutdown(uint64_t a1, dispatch_object_t *a2)
{
  NSObject *v4;
  NSObject *v5;
  _QWORD v6[5];
  dispatch_group_t group;
  dispatch_object_t object;

  v4 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v4);
  }
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 1174405120;
  v6[2] = ___ZN8ICETrace8shutdownEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v6[3] = &__block_descriptor_tmp_47;
  v6[4] = a1;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  v5 = *a2;
  object = v5;
  if (v5)
    dispatch_retain(v5);
  ctu::SharedSynchronizable<Trace>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v6);
  if (object)
    dispatch_release(object);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
}

void ___ZN8ICETrace8shutdownEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  dispatch_object_t object;
  uint8_t buf[16];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 144);
  if (v3)
  {
    dispatch_retain(*(dispatch_object_t *)(v2 + 144));
    dispatch_group_enter(v3);
  }
  v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v4, OS_LOG_TYPE_DEFAULT, "#I shutdown received", buf, 2u);
  }
  v5 = *(_QWORD *)(v2 + 416);
  if (v5)
  {
    v6 = *(NSObject **)(a1 + 48);
    object = v6;
    if (v6)
      dispatch_retain(v6);
    (*(void (**)(uint64_t, dispatch_object_t *))(*(_QWORD *)v5 + 144))(v5, &object);
    if (object)
      dispatch_release(object);
  }
  BasebandTransport::close(*(BasebandTransport **)(v2 + 392));
  if (*(_BYTE *)(v2 + 472))
  {
    dispatch_group_leave(*(dispatch_group_t *)(v2 + 144));
    *(_BYTE *)(v2 + 472) = 0;
  }
  v7 = *(std::__shared_weak_count **)(v2 + 424);
  *(_QWORD *)(v2 + 416) = 0;
  *(_QWORD *)(v2 + 424) = 0;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *(std::__shared_weak_count **)(v2 + 376);
  *(_QWORD *)(v2 + 368) = 0;
  *(_QWORD *)(v2 + 376) = 0;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *(_BYTE *)(v2 + 473) = 0;
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
}

void sub_1A348F384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  NSObject *v10;

  if (object)
  {
    dispatch_release(object);
    if (!v10)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v10)
  {
    goto LABEL_6;
  }
  dispatch_group_leave(v10);
  dispatch_release(v10);
  goto LABEL_6;
}

void ICETrace::enterLowPower(ICETrace *this, group *a2)
{
  NSObject *v2;
  char *v3;
  _QWORD v4[5];
  _QWORD *v5;
  _QWORD block[6];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZN8ICETrace13enterLowPowerEN8dispatch5groupE_block_invoke;
  v4[3] = &__block_descriptor_tmp_48;
  v4[4] = this;
  v5 = v4;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke_0;
  block[3] = &__block_descriptor_tmp_131;
  block[4] = (char *)this + 72;
  block[5] = &v5;
  v3 = (char *)this + 88;
  v2 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v3 + 1))
    dispatch_async_and_wait(v2, block);
  else
    dispatch_sync(v2, block);
}

void ___ZN8ICETrace13enterLowPowerEN8dispatch5groupE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v1 + 328) = 1;
  v2 = *(NSObject **)(v1 + 320);
  *(_QWORD *)(v1 + 320) = 0;
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
  v3 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEFAULT, "#I EnterLowPower received", v4, 2u);
  }
}

void ICETrace::exitLowPower(ICETrace *this, group *a2)
{
  NSObject *v2;
  char *v3;
  _QWORD v4[5];
  _QWORD *v5;
  _QWORD block[6];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZN8ICETrace12exitLowPowerEN8dispatch5groupE_block_invoke;
  v4[3] = &__block_descriptor_tmp_49;
  v4[4] = this;
  v5 = v4;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke_0;
  block[3] = &__block_descriptor_tmp_131;
  block[4] = (char *)this + 72;
  block[5] = &v5;
  v3 = (char *)this + 88;
  v2 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v3 + 1))
    dispatch_async_and_wait(v2, block);
  else
    dispatch_sync(v2, block);
}

void ___ZN8ICETrace12exitLowPowerEN8dispatch5groupE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v1 + 328) = 0;
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1A343C000, v2, OS_LOG_TYPE_DEFAULT, "#I ExitLowPower received", v3, 2u);
  }
}

void ICETrace::snapshot(uint64_t a1, dispatch_object_t *a2, const __CFDictionary **a3)
{
  NSObject *v5;
  NSObject *v6;
  const void *v7;
  size_t v8;
  std::string::size_type v9;
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  size_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  size_t v21;
  size_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  uint8_t *v30;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  size_t v34;
  std::string *v35;
  std::string::value_type *v36;
  std::string::size_type size;
  std::string::size_type v38;
  void **v39;
  void *v40;
  int v41;
  void **v42;
  void *v43;
  void *v44;
  uint64_t v45;
  BOOL v46;
  NSObject *v48;
  void **v49;
  NSObject *v50;
  _QWORD v51[5];
  dispatch_group_t group;
  std::string v53;
  std::string v54;
  std::string v55;
  void *v56;
  size_t v57;
  int64_t v58;
  void *v59[2];
  unint64_t v60;
  std::string v61;
  std::string v62;
  void *__p[3];
  std::string __dst;
  _QWORD v65[2];
  std::string v66;
  uint8_t buf[24];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v5);
  }
  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "snapshot";
    _os_log_debug_impl(&dword_1A343C000, v6, OS_LOG_TYPE_DEBUG, "#D %s", buf, 0xCu);
  }
  v65[0] = 0xAAAAAAAAAAAAAAAALL;
  v65[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v65, *a3);
  memset(buf, 170, sizeof(buf));
  v7 = (const void *)*MEMORY[0x1E0CFB250];
  v8 = strlen((const char *)*MEMORY[0x1E0CFB250]);
  if (v8 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v9 = v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = v9;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_12;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v8;
  p_dst = &__dst;
  if (v8)
LABEL_12:
    memmove(p_dst, v7, v9);
  v13 = (const char *)*MEMORY[0x1E0CFB370];
  p_dst->__r_.__value_.__s.__data_[v9] = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)__p, v13);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A858F29C](__p);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  memset(&__dst, 170, sizeof(__dst));
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_1A357F480;
  strcpy((char *)__p[0], "kCollectTelephonyLogsWithCoredump");
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v62, "kKeyTraceAction");
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A858F29C](&v62);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  memset(__p, 170, sizeof(__p));
  strcpy((char *)&v62, "kTraceFilterActionNone");
  *((_BYTE *)&v62.__r_.__value_.__s + 23) = 22;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v66, "kKeyTraceFilterAction");
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A858F29C](&v66);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  v14 = abm::trace::kSnapshotFolder[0];
  v15 = strlen(abm::trace::kSnapshotFolder[0]);
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v16 = (void *)v15;
  if (v15 >= 0x17)
  {
    v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v18 = v15 | 7;
    v19 = v18 + 1;
    v17 = operator new(v18 + 1);
    v59[1] = v16;
    v60 = v19 | 0x8000000000000000;
    v59[0] = v17;
    goto LABEL_26;
  }
  HIBYTE(v60) = v15;
  v17 = v59;
  if (v15)
LABEL_26:
    memmove(v17, v14, (size_t)v16);
  *((_BYTE *)v16 + (_QWORD)v17) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v56, "kKeyTraceDumpStatePath");
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A858F29C](&v56);
  v20 = abm::trace::kLogDirPrefix[0];
  v21 = strlen(abm::trace::kLogDirPrefix[0]);
  if (v21 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v22 = v21;
  if (v21 >= 0x17)
  {
    v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v24 = v21 | 7;
    v25 = v24 + 1;
    v23 = operator new(v24 + 1);
    v57 = v22;
    v58 = v25 | 0x8000000000000000;
    v56 = v23;
    goto LABEL_34;
  }
  HIBYTE(v58) = v21;
  v23 = &v56;
  if (v21)
LABEL_34:
    memmove(v23, v20, v22);
  *((_BYTE *)v23 + v22) = 0;
  if (v58 >= 0)
    v26 = (const std::string::value_type *)&v56;
  else
    v26 = (const std::string::value_type *)v56;
  if (v58 >= 0)
    v27 = HIBYTE(v58);
  else
    v27 = v57;
  v28 = std::string::append(&v61, v26, v27);
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v66.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if ((buf[23] & 0x80u) == 0)
    v30 = buf;
  else
    v30 = *(uint8_t **)buf;
  if ((buf[23] & 0x80u) == 0)
    v31 = buf[23];
  else
    v31 = *(_QWORD *)&buf[8];
  v32 = std::string::append(&v66, (const std::string::value_type *)v30, v31);
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  v34 = strlen(abm::trace::kICETraceSnapshotDirectorySuffix[0]);
  v35 = std::string::append(&v62, abm::trace::kICETraceSnapshotDirectorySuffix[0], v34);
  v36 = (std::string::value_type *)v35->__r_.__value_.__r.__words[0];
  size = v35->__r_.__value_.__l.__size_;
  v38 = v35->__r_.__value_.__r.__words[2];
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v62.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_49:
      if ((SHIBYTE(v58) & 0x80000000) == 0)
        goto LABEL_50;
      goto LABEL_82;
    }
  }
  else if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_49;
  }
  operator delete(v66.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v58) & 0x80000000) == 0)
  {
LABEL_50:
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_51;
LABEL_83:
    operator delete(v61.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v60) & 0x80000000) == 0)
      goto LABEL_52;
    goto LABEL_84;
  }
LABEL_82:
  operator delete(v56);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_83;
LABEL_51:
  if ((SHIBYTE(v60) & 0x80000000) == 0)
    goto LABEL_52;
LABEL_84:
  operator delete(v59[0]);
LABEL_52:
  memset(&v62, 170, sizeof(v62));
  memset(&v66, 0, sizeof(v66));
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v61, "kKeyTraceDumpStateReason");
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A858F29C](&v61);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v61, (const char *)*MEMORY[0x1E0CFB330]);
  v39 = (void **)(a1 + 432);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A858F29C](&v61);
  if (*(char *)(a1 + 455) < 0)
    operator delete(*v39);
  *(_OWORD *)v39 = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 448) = *((_QWORD *)&v66.__r_.__value_.__l + 2);
  v40 = (void *)HIBYTE(__p[2]);
  v41 = SHIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) < 0)
    v40 = __p[1];
  if (v40 != (void *)22)
    goto LABEL_68;
  v42 = (void **)__p[0];
  if (SHIBYTE(__p[2]) >= 0)
    v42 = __p;
  v43 = *v42;
  v44 = v42[1];
  v45 = *(uint64_t *)((char *)v42 + 14);
  v46 = v43 == *(void **)"kTraceFilterActionNone" && v44 == *(void **)"lterActionNone";
  if (!v46 || v45 != *(_QWORD *)"tionNone")
  {
LABEL_68:
    v48 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      v49 = (void **)__p[0];
      if (v41 >= 0)
        v49 = __p;
      LODWORD(v66.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v66.__r_.__value_.__r.__words + 4) = (std::string::size_type)v49;
      _os_log_impl(&dword_1A343C000, v48, OS_LOG_TYPE_DEFAULT, "#I Skipping snapshot as trace filter is '%s'", (uint8_t *)&v66, 0xCu);
    }
    goto LABEL_72;
  }
  v51[0] = MEMORY[0x1E0C809B0];
  v51[1] = 1174405120;
  v51[2] = ___ZN8ICETrace8snapshotEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v51[3] = &__block_descriptor_tmp_53_0;
  v51[4] = a1;
  group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(group);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v53, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v53 = __dst;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v54, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  else
    v54 = v62;
  if ((v38 & 0x8000000000000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v55, v36, size);
  }
  else
  {
    v55.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
    v55.__r_.__value_.__l.__size_ = size;
    v55.__r_.__value_.__r.__words[2] = v38;
  }
  ctu::SharedSynchronizable<Trace>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v51);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v55.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_104:
      if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_105;
      goto LABEL_109;
    }
  }
  else if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_104;
  }
  operator delete(v54.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_105:
    v50 = group;
    if (!group)
      goto LABEL_72;
    goto LABEL_110;
  }
LABEL_109:
  operator delete(v53.__r_.__value_.__l.__data_);
  v50 = group;
  if (!group)
    goto LABEL_72;
LABEL_110:
  dispatch_group_leave(v50);
  if (group)
    dispatch_release(group);
LABEL_72:
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v62.__r_.__value_.__l.__data_);
    if ((v38 & 0x8000000000000000) == 0)
    {
LABEL_74:
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        goto LABEL_75;
      goto LABEL_87;
    }
  }
  else if ((v38 & 0x8000000000000000) == 0)
  {
    goto LABEL_74;
  }
  operator delete(v36);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
LABEL_75:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_76;
    goto LABEL_88;
  }
LABEL_87:
  operator delete(__p[0]);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_76:
    if (((char)buf[23] & 0x80000000) == 0)
      goto LABEL_77;
    goto LABEL_89;
  }
LABEL_88:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (((char)buf[23] & 0x80000000) == 0)
  {
LABEL_77:
    MEMORY[0x1A858F2D8](v65);
    if (!v5)
      return;
    goto LABEL_78;
  }
LABEL_89:
  operator delete(*(void **)buf);
  MEMORY[0x1A858F2D8](v65);
  if (v5)
  {
LABEL_78:
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
}

void sub_1A348FDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_group_t group, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  NSObject *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v65;

  if (a26 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      v65 = group;
      if (!group)
      {
LABEL_8:
        if (a53 < 0)
          operator delete(a48);
        if (v62 < 0)
          operator delete(v61);
        if (a60 < 0)
          operator delete(a55);
        if (*(char *)(v63 - 177) < 0)
          operator delete(*(void **)(v63 - 200));
        if (*(char *)(v63 - 105) < 0)
          operator delete(*(void **)(v63 - 128));
        MEMORY[0x1A858F2D8](v63 - 176);
        if (v60)
        {
          dispatch_group_leave(v60);
          dispatch_release(v60);
        }
        _Unwind_Resume(a1);
      }
LABEL_7:
      dispatch_group_leave(v65);
      dispatch_release(group);
      goto LABEL_8;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  v65 = group;
  if (!group)
    goto LABEL_8;
  goto LABEL_7;
}

void ___ZN8ICETrace8snapshotEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  std::string *v4;
  __int128 v5;
  _QWORD *v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v21;
  _BOOL4 v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  NSObject *v32;
  std::__shared_weak_count *v33;
  _BYTE v34[8];
  _QWORD *v35;
  std::string v36;
  xpc_object_t object;
  std::string v38;
  std::string v39;
  __int128 v40;
  std::string::size_type v41;
  std::string v42;
  void *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 144);
  if (v3)
  {
    dispatch_retain(*(dispatch_object_t *)(v2 + 144));
    dispatch_group_enter(v3);
  }
  if (*(_BYTE *)(v2 + 336) && *(_QWORD *)(v2 + 368))
  {
    capabilities::radio::firmwarePrefix((capabilities::radio *)a1);
    v4 = std::string::insert(&v38, 0, "Baseband Trace\nBBFW Version: ", 0x1DuLL);
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    v6 = (_QWORD *)(v2 + 432);
    v7 = *(char *)(v2 + 455);
    if (v7 >= 0)
      v8 = (const std::string::value_type *)(v2 + 432);
    else
      v8 = *(const std::string::value_type **)(v2 + 432);
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(v2 + 455);
    else
      v9 = *(_QWORD *)(v2 + 440);
    v10 = std::string::append(&v39, v8, v9);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v42, "\n", 1uLL);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v41 = v12->__r_.__value_.__r.__words[2];
    v40 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v42.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_13:
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_14;
LABEL_39:
        operator delete(v38.__r_.__value_.__l.__data_);
LABEL_14:
        v14 = *(unsigned __int8 *)(a1 + 71);
        v15 = (char)v14;
        if ((v14 & 0x80u) != 0)
          v14 = *(_QWORD *)(a1 + 56);
        if (v14 == 17)
        {
          if (v15 >= 0)
            v16 = (uint64_t *)(a1 + 48);
          else
            v16 = *(uint64_t **)(a1 + 48);
          v17 = *v16;
          v18 = v16[1];
          v19 = *((unsigned __int8 *)v16 + 16);
          v21 = v17 == *(_QWORD *)"kShutdownAllTrace"
             && v18 == *(_QWORD *)"nAllTrace"
             && v19 == str_71[16];
          v22 = 1;
          if (v21)
          {
            v23 = *(unsigned __int8 *)(v2 + 344);
            *(_BYTE *)(v2 + 360) = 1;
            BasebandTransport::close(*(BasebandTransport **)(v2 + 392));
            if (*(_BYTE *)(v2 + 472))
            {
              dispatch_group_leave(*(dispatch_group_t *)(v2 + 144));
              *(_BYTE *)(v2 + 472) = 0;
            }
            v22 = v23 != 0;
            ICETrace::setTraceMode_sync(v2, 0);
          }
          if (!*(_QWORD *)(v2 + 480))
            goto LABEL_43;
        }
        else
        {
          v22 = 1;
          if (!*(_QWORD *)(v2 + 480))
            goto LABEL_43;
        }
        v42.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
        *(_OWORD *)&v42.__r_.__value_.__r.__words[1] = xmmword_1A357F950;
        strcpy(v42.__r_.__value_.__l.__data_, "Trace State Configuration");
        ICETrace::getStateAsDict_sync(v2, a1 + 72, &object);
        abm::trace::TraceInfo::push();
        xpc_release(object);
        object = 0;
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v42.__r_.__value_.__l.__data_);
          if ((*(char *)(a1 + 119) & 0x80000000) == 0)
            goto LABEL_36;
        }
        else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
        {
LABEL_36:
          v36 = *(std::string *)(a1 + 96);
          goto LABEL_42;
        }
        std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)(a1 + 96), *(_QWORD *)(a1 + 104));
LABEL_42:
        Timestamp::Timestamp((Timestamp *)v34);
        abm::trace::TraceInfo::push();
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v34, v35);
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v36.__r_.__value_.__l.__data_);
          v24 = *(NSObject **)(v2 + 40);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_44;
          goto LABEL_47;
        }
LABEL_43:
        v24 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
LABEL_44:
          if (*(char *)(v2 + 455) < 0)
            v6 = (_QWORD *)*v6;
          LODWORD(v42.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v42.__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
          _os_log_impl(&dword_1A343C000, v24, OS_LOG_TYPE_DEFAULT, "#I Snapshot: BBFW=%s", (uint8_t *)&v42, 0xCu);
          v24 = *(NSObject **)(v2 + 40);
        }
LABEL_47:
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          v25 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v25 = (_QWORD *)*v25;
          LODWORD(v42.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v42.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
          WORD2(v42.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v42.__r_.__value_.__r.__words[1] + 6) = v22;
          _os_log_impl(&dword_1A343C000, v24, OS_LOG_TYPE_DEFAULT, "#I Snapshot: Path=%s [move=%d]", (uint8_t *)&v42, 0x12u);
        }
        v26 = *(_QWORD *)(v2 + 392);
        v42.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
        v42.__r_.__value_.__l.__size_ = 0x40000000;
        v42.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN17BasebandTransport9dumpStateEb_block_invoke;
        v43 = &__block_descriptor_tmp_70;
        v44 = v26;
        v45 = 1;
        ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped((uint64_t *)(v26 + 72), (uint64_t)&v42);
        v27 = *(std::__shared_weak_count **)(v2 + 488);
        v33 = v27;
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(p_shared_owners);
          while (__stxr(v29 + 1, p_shared_owners));
        }
        TraceFileCollection::snapshot();
        if (v33)
        {
          v30 = (unint64_t *)&v33->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v32 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v42.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1A343C000, v32, OS_LOG_TYPE_DEFAULT, "#I snapshot complete", (uint8_t *)&v42, 2u);
        }
        if (SHIBYTE(v41) < 0)
          operator delete((void *)v40);
        goto LABEL_63;
      }
    }
    else if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v39.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_63:
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
}

void sub_1A34905C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,_QWORD *a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,xpc_object_t object,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  NSObject *v46;
  uint64_t v47;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a24, a25);
  if (a32 < 0)
    operator delete(a27);
  if (*(char *)(v47 - 137) < 0)
  {
    operator delete(*(void **)(v47 - 160));
    if (!v46)
LABEL_12:
      _Unwind_Resume(a1);
  }
  else if (!v46)
  {
    goto LABEL_12;
  }
  dispatch_group_leave(v46);
  dispatch_release(v46);
  goto LABEL_12;
}

void sub_1A34906FC()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x1A34906F4);
  JUMPOUT(0x1A34906E4);
}

void ICETrace::getStateAsDict_sync(uint64_t a1@<X0>, uint64_t a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_object_t v6;
  xpc_object_t v7;
  uint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  NSObject *v11;
  const char *v12;
  xpc_object_t v13;
  xpc_object_t v14;
  uint64_t v15;
  const char *v16;
  xpc_object_t v17;
  xpc_object_t v18;
  std::string *p_buf;
  xpc_object_t v20;
  xpc_object_t v21;
  const char *v22;
  xpc_object_t v23;
  xpc_object_t v24;
  std::string *p_p;
  xpc_object_t v26;
  xpc_object_t v27;
  int v28;
  std::string *v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  const char *v33;
  xpc_object_t v34;
  xpc_object_t v35;
  const char *v36;
  xpc_object_t v37;
  xpc_object_t v38;
  const char *v39;
  xpc_object_t v40;
  xpc_object_t v41;
  unsigned int v42;
  std::string *v43;
  xpc_object_t v44;
  xpc_object_t v45;
  unsigned int v46;
  std::string *v47;
  xpc_object_t v48;
  xpc_object_t v49;
  unsigned int v50;
  std::string *v51;
  xpc_object_t v52;
  xpc_object_t v53;
  xpc_object_t v54;
  const char *v55;
  xpc_object_t v56;
  xpc_object_t v57;
  const char *v58;
  xpc_object_t v59;
  xpc_object_t v60;
  std::string::value_type *v61;
  uint64_t v62;
  unint64_t v63;
  std::string *v64;
  std::string *v65;
  std::string::value_type *v66;
  __int128 *v67;
  std::string::size_type *v68;
  unint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  std::string::value_type v73;
  std::string *v74;
  xpc_object_t v75;
  xpc_object_t v76;
  std::string::value_type *v77;
  uint64_t v78;
  unint64_t v79;
  std::string *v80;
  std::string *v81;
  std::string::value_type *v82;
  __int128 *v83;
  std::string::size_type *v84;
  unint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  std::string::value_type v89;
  std::string *v90;
  xpc_object_t v91;
  xpc_object_t v92;
  std::string __p;
  std::string buf;

  *a3 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v6 = xpc_dictionary_create(0, 0, 0);
  v7 = v6;
  v8 = MEMORY[0x1E0C812F8];
  if (v6)
  {
    *a3 = v6;
  }
  else
  {
    v7 = xpc_null_create();
    *a3 = v7;
    if (!v7)
    {
      v9 = xpc_null_create();
      v7 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A85902BC](v7) == v8)
  {
    xpc_retain(v7);
    goto LABEL_9;
  }
  v9 = xpc_null_create();
LABEL_8:
  *a3 = v9;
LABEL_9:
  xpc_release(v7);
  v10 = *a3;
  if (MEMORY[0x1A85902BC](*a3) != v8)
  {
    v11 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1A343C000, v11, OS_LOG_TYPE_ERROR, "Failed to create state dump dictionary", (uint8_t *)&buf, 2u);
    }
    return;
  }
  if (*(_BYTE *)(a1 + 336))
    v12 = "true";
  else
    v12 = "false";
  v13 = xpc_string_create(v12);
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v10, "Enabled", v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  v15 = *(int *)(a1 + 152);
  if (v15 > 6)
    v16 = "Unknown";
  else
    v16 = off_1E4A08CF8[v15];
  v17 = xpc_string_create(v16);
  if (!v17)
    v17 = xpc_null_create();
  xpc_dictionary_set_value(v10, "Mode", v17);
  v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  ICETrace::historyAsString_sync(a1, (char *)&buf);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_buf = &buf;
  else
    p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  v20 = xpc_string_create((const char *)p_buf);
  if (!v20)
    v20 = xpc_null_create();
  xpc_dictionary_set_value(v10, "History", v20);
  v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (*(_BYTE *)(a1 + 304))
    v22 = "true";
  else
    v22 = "false";
  v23 = xpc_string_create(v22);
  if (!v23)
    v23 = xpc_null_create();
  xpc_dictionary_set_value(v10, "BackgroundMode", v23);
  v24 = xpc_null_create();
  xpc_release(v23);
  xpc_release(v24);
  std::to_string(&buf, *(_DWORD *)(a1 + 308));
  __p = buf;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v26 = xpc_string_create((const char *)p_p);
  if (!v26)
    v26 = xpc_null_create();
  xpc_dictionary_set_value(*a3, "High_Watermark", v26);
  v27 = xpc_null_create();
  xpc_release(v26);
  xpc_release(v27);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v28 = *(_DWORD *)(a1 + 312);
  memset(&__p, 0, sizeof(__p));
  std::to_string(&buf, v28);
  __p = buf;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &__p;
  else
    v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v30 = xpc_string_create((const char *)v29);
  if (!v30)
    v30 = xpc_null_create();
  v31 = *a3;
  xpc_dictionary_set_value(*a3, "Low_Watermark", v30);
  v32 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v32);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v33 = (const char *)(a1 + 160);
    if ((*(char *)(a1 + 183) & 0x80000000) == 0)
      goto LABEL_48;
  }
  else
  {
    v33 = (const char *)(a1 + 160);
    if ((*(char *)(a1 + 183) & 0x80000000) == 0)
      goto LABEL_48;
  }
  v33 = *(const char **)v33;
LABEL_48:
  v34 = xpc_string_create(v33);
  if (!v34)
    v34 = xpc_null_create();
  xpc_dictionary_set_value(v31, "File", v34);
  v35 = xpc_null_create();
  xpc_release(v34);
  xpc_release(v35);
  if (*(_BYTE *)(a1 + 316))
    v36 = "true";
  else
    v36 = "false";
  v37 = xpc_string_create(v36);
  if (!v37)
    v37 = xpc_null_create();
  xpc_dictionary_set_value(v31, "Enabled_During_Sleep", v37);
  v38 = xpc_null_create();
  xpc_release(v37);
  xpc_release(v38);
  v39 = (const char *)(a1 + 184);
  if (*(char *)(a1 + 207) < 0)
    v39 = *(const char **)v39;
  v40 = xpc_string_create(v39);
  if (!v40)
    v40 = xpc_null_create();
  xpc_dictionary_set_value(v31, "File_Sleep", v40);
  v41 = xpc_null_create();
  xpc_release(v40);
  xpc_release(v41);
  v42 = *(_DWORD *)(a1 + 348);
  memset(&__p, 0, sizeof(__p));
  std::to_string(&buf, v42);
  __p = buf;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v43 = &__p;
  else
    v43 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v44 = xpc_string_create((const char *)v43);
  if (!v44)
    v44 = xpc_null_create();
  xpc_dictionary_set_value(*a3, "FileSize", v44);
  v45 = xpc_null_create();
  xpc_release(v44);
  xpc_release(v45);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v46 = *(_DWORD *)(a1 + 352);
  memset(&__p, 0, sizeof(__p));
  std::to_string(&buf, v46);
  __p = buf;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v47 = &__p;
  else
    v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v48 = xpc_string_create((const char *)v47);
  if (!v48)
    v48 = xpc_null_create();
  xpc_dictionary_set_value(*a3, "SizeIO", v48);
  v49 = xpc_null_create();
  xpc_release(v48);
  xpc_release(v49);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v50 = *(_DWORD *)(a1 + 356);
  memset(&__p, 0, sizeof(__p));
  std::to_string(&buf, v50);
  __p = buf;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v51 = &__p;
  else
    v51 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v52 = xpc_string_create((const char *)v51);
  if (!v52)
    v52 = xpc_null_create();
  v53 = *a3;
  xpc_dictionary_set_value(*a3, "NumberOfReadIO", v52);
  v54 = xpc_null_create();
  xpc_release(v52);
  xpc_release(v54);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v55 = (const char *)(a1 + 208);
    if ((*(char *)(a1 + 231) & 0x80000000) == 0)
      goto LABEL_80;
  }
  else
  {
    v55 = (const char *)(a1 + 208);
    if ((*(char *)(a1 + 231) & 0x80000000) == 0)
      goto LABEL_80;
  }
  v55 = *(const char **)v55;
LABEL_80:
  v56 = xpc_string_create(v55);
  if (!v56)
    v56 = xpc_null_create();
  xpc_dictionary_set_value(v53, "ETBFile", v56);
  v57 = xpc_null_create();
  xpc_release(v56);
  xpc_release(v57);
  if (*(char *)(a2 + 23) >= 0)
    v58 = (const char *)a2;
  else
    v58 = *(const char **)a2;
  v59 = xpc_string_create(v58);
  if (!v59)
    v59 = xpc_null_create();
  xpc_dictionary_set_value(v53, (const char *)*MEMORY[0x1E0CFB928], v59);
  v60 = xpc_null_create();
  xpc_release(v59);
  xpc_release(v60);
  v62 = *(_QWORD *)(a1 + 232);
  v61 = *(std::string::value_type **)(a1 + 240);
  v63 = (unint64_t)&v61[-v62];
  if ((unint64_t)&v61[-v62] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v63 > 0x16)
  {
    v71 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v63 | 7) != 0x17)
      v71 = v63 | 7;
    v72 = v71 + 1;
    v64 = (std::string *)operator new(v71 + 1);
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)&v61[-v62];
    buf.__r_.__value_.__r.__words[2] = v72 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
    if ((std::string::value_type *)v62 != v61)
      goto LABEL_90;
LABEL_99:
    v65 = v64;
    goto LABEL_106;
  }
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = (_BYTE)v61 - v62;
  v64 = &buf;
  if ((std::string::value_type *)v62 == v61)
    goto LABEL_99;
LABEL_90:
  if (v63 < 0x20 || (unint64_t)v64 - v62 < 0x20)
  {
    v65 = v64;
    v66 = (std::string::value_type *)v62;
  }
  else
  {
    v65 = (std::string *)((char *)v64 + (v63 & 0xFFFFFFFFFFFFFFE0));
    v66 = (std::string::value_type *)(v62 + (v63 & 0xFFFFFFFFFFFFFFE0));
    v67 = (__int128 *)(v62 + 16);
    v68 = &v64->__r_.__value_.__r.__words[2];
    v69 = v63 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v70 = *v67;
      *((_OWORD *)v68 - 1) = *(v67 - 1);
      *(_OWORD *)v68 = v70;
      v67 += 2;
      v68 += 4;
      v69 -= 32;
    }
    while (v69);
    if (v63 == (v63 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_106;
  }
  do
  {
    v73 = *v66++;
    v65->__r_.__value_.__s.__data_[0] = v73;
    v65 = (std::string *)((char *)v65 + 1);
  }
  while (v66 != v61);
LABEL_106:
  v65->__r_.__value_.__s.__data_[0] = 0;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v74 = &buf;
  else
    v74 = (std::string *)buf.__r_.__value_.__r.__words[0];
  v75 = xpc_string_create((const char *)v74);
  if (!v75)
    v75 = xpc_null_create();
  xpc_dictionary_set_value(*a3, "Active Mask", v75);
  v76 = xpc_null_create();
  xpc_release(v75);
  xpc_release(v76);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v78 = *(_QWORD *)(a1 + 256);
  v77 = *(std::string::value_type **)(a1 + 264);
  v79 = (unint64_t)&v77[-v78];
  if ((unint64_t)&v77[-v78] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v79 <= 0x16)
  {
    *((_BYTE *)&buf.__r_.__value_.__s + 23) = (_BYTE)v77 - v78;
    v80 = &buf;
    if ((std::string::value_type *)v78 != v77)
      goto LABEL_116;
LABEL_125:
    v81 = v80;
    goto LABEL_128;
  }
  v87 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v79 | 7) != 0x17)
    v87 = v79 | 7;
  v88 = v87 + 1;
  v80 = (std::string *)operator new(v87 + 1);
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)&v77[-v78];
  buf.__r_.__value_.__r.__words[2] = v88 | 0x8000000000000000;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
  if ((std::string::value_type *)v78 == v77)
    goto LABEL_125;
LABEL_116:
  if (v79 < 0x20 || (unint64_t)v80 - v78 < 0x20)
  {
    v81 = v80;
    v82 = (std::string::value_type *)v78;
    do
    {
LABEL_127:
      v89 = *v82++;
      v81->__r_.__value_.__s.__data_[0] = v89;
      v81 = (std::string *)((char *)v81 + 1);
    }
    while (v82 != v77);
    goto LABEL_128;
  }
  v81 = (std::string *)((char *)v80 + (v79 & 0xFFFFFFFFFFFFFFE0));
  v82 = (std::string::value_type *)(v78 + (v79 & 0xFFFFFFFFFFFFFFE0));
  v83 = (__int128 *)(v78 + 16);
  v84 = &v80->__r_.__value_.__r.__words[2];
  v85 = v79 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v86 = *v83;
    *((_OWORD *)v84 - 1) = *(v83 - 1);
    *(_OWORD *)v84 = v86;
    v83 += 2;
    v84 += 4;
    v85 -= 32;
  }
  while (v85);
  if (v79 != (v79 & 0xFFFFFFFFFFFFFFE0))
    goto LABEL_127;
LABEL_128:
  v81->__r_.__value_.__s.__data_[0] = 0;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v90 = &buf;
  else
    v90 = (std::string *)buf.__r_.__value_.__r.__words[0];
  v91 = xpc_string_create((const char *)v90);
  if (!v91)
    v91 = xpc_null_create();
  xpc_dictionary_set_value(*a3, "Sleep Mask", v91);
  v92 = xpc_null_create();
  xpc_release(v91);
  xpc_release(v92);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
}

void sub_1A3491120(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1A3490CA0);
}

void sub_1A349112C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  xpc_object_t *v14;

  if (a14 < 0)
  {
    operator delete(__p);
    xpc::dict::~dict(v14);
    _Unwind_Resume(a1);
  }
  xpc::dict::~dict(v14);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  __int128 v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;

  v4 = *(NSObject **)(a2 + 40);
  a1[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = a1[1].__r_.__value_.__r.__words[2];
    if (v5)
      dispatch_group_enter(v5);
  }
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a1 + 2, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&a1[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a1 + 3, *(const std::string::value_type **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 72);
    a1[3].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 88);
    *(_OWORD *)&a1[3].__r_.__value_.__l.__data_ = v7;
  }
  v8 = a1 + 4;
  if (*(char *)(a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 96), *(_QWORD *)(a2 + 104));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 96);
    a1[4].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 112);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
}

void sub_1A3491378(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  NSObject *v5;
  NSObject *v6;

  if (*(char *)(v1 + 95) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 71) & 0x80000000) == 0)
    {
LABEL_3:
      v5 = *(NSObject **)(v1 + 40);
      if (!v5)
        goto LABEL_9;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  v5 = *(NSObject **)(v1 + 40);
  if (!v5)
    goto LABEL_9;
LABEL_7:
  dispatch_group_leave(v5);
  v6 = *(NSObject **)(v1 + 40);
  if (v6)
    dispatch_release(v6);
LABEL_9:
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
LABEL_4:
    v2 = *(NSObject **)(a1 + 40);
    if (!v2)
      return;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(*(void **)(a1 + 48));
  v2 = *(NSObject **)(a1 + 40);
  if (!v2)
    return;
LABEL_9:
  dispatch_group_leave(v2);
  v3 = *(NSObject **)(a1 + 40);
  if (v3)
    dispatch_release(v3);
}

void ICETrace::dumpState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  _QWORD v4[5];
  std::string __p;

  v3 = (uint64_t *)(a1 + 72);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 1174405120;
  v4[2] = ___ZN8ICETrace9dumpStateEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke;
  v4[3] = &__block_descriptor_tmp_54_0;
  v4[4] = a1;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    __p = *(std::string *)a3;
    ctu::SharedSynchronizable<Trace>::execute_wrapped(v3, (uint64_t)v4);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  ctu::SharedSynchronizable<Trace>::execute_wrapped(v3, (uint64_t)v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_5;
}

void ___ZN8ICETrace9dumpStateEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  void **v5;
  std::string v6;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  void **v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 144);
  if (v3)
  {
    dispatch_retain(*(dispatch_object_t *)(v2 + 144));
    dispatch_group_enter(v3);
  }
  v4 = *(NSObject **)(v2 + 40);
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    goto LABEL_12;
  if (*(char *)(a1 + 63) < 0)
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
  else
    v6 = *(std::string *)(a1 + 40);
  ICETrace::dumpState_sync(v2, (uint64_t)&v6, 1, 10, __p);
  if (v8 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  *(_DWORD *)buf = 136315138;
  v10 = v5;
  _os_log_impl(&dword_1A343C000, v4, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
  if (v8 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_16;
LABEL_12:
    if (!v3)
      return;
    goto LABEL_13;
  }
  if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_12;
LABEL_16:
  operator delete(v6.__r_.__value_.__l.__data_);
  if (!v3)
    return;
LABEL_13:
  dispatch_group_leave(v3);
  dispatch_release(v3);
}

void sub_1A349168C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  NSObject *v14;

  if (!v14)
    _Unwind_Resume(exception_object);
  dispatch_group_leave(v14);
  dispatch_release(v14);
  _Unwind_Resume(exception_object);
}

uint64_t ICETrace::dumpState_sync@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, std::string::value_type a4@<W3>, _BYTE *a5@<X8>)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  const char *v19;
  size_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  unsigned int v50;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  char *v73;
  __int128 *v74;
  _OWORD *v75;
  unint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  std::string *v81;
  std::string::size_type v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  _OWORD *v90;
  _BYTE *v91;
  char *v92;
  __int128 *v93;
  _OWORD *v94;
  unint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  void *v101;
  uint64_t v102;
  int v103;
  _QWORD *v104;
  _QWORD *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  size_t v109;
  uint64_t v110;
  const void *v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE *v114;
  uint64_t v115;
  std::string __p;
  void *v119;
  uint64_t v120;
  int64_t v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  void *v127[2];
  __int128 v128;
  unint64_t v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  std::string v140;

  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v129 = 0xAAAAAAAAAAAAAAAALL;
  v139 = v9;
  v138 = v9;
  v137 = v9;
  v136 = v9;
  v135 = v9;
  v134 = v9;
  v133 = v9;
  v132 = v9;
  v131 = v9;
  v128 = v9;
  *(_OWORD *)v127 = v9;
  v126 = v9;
  v125 = v9;
  v124 = v9;
  v123 = v9;
  v10 = MEMORY[0x1E0DE4FE0];
  v11 = MEMORY[0x1E0DE4FE0] + 64;
  v130 = MEMORY[0x1E0DE4FE0] + 64;
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v122 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v122 + *(_QWORD *)(v122 - 24)) = v12;
  v13 = (std::ios_base *)((char *)&v122 + *(_QWORD *)(v122 - 24));
  std::ios_base::init(v13, &v123);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  v122 = v10 + 24;
  v130 = v11;
  std::streambuf::basic_streambuf();
  *(_QWORD *)&v123 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v127 = 0u;
  v128 = 0u;
  LODWORD(v129) = 16;
  if (a3)
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v122, (uint64_t)"\n----- BB Trace Dump State -----\n", 33);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v122, (uint64_t)"Enabled         : ", 18);
  *(_DWORD *)((char *)v14 + *(_QWORD *)(*v14 - 24) + 8) |= 1u;
  v15 = (_QWORD *)std::ostream::operator<<();
  v140.__r_.__value_.__s.__data_[0] = a4;
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v140, 1);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Mode            : ", 18);
  v18 = *(int *)(a1 + 152);
  if (v18 > 6)
    v19 = "Unknown";
  else
    v19 = off_1E4A08D30[v18];
  v20 = strlen(v19);
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v19, v20);
  v140.__r_.__value_.__s.__data_[0] = a4;
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)&v140, 1);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"History         : ", 18);
  ICETrace::historyAsString_sync(a1, (char *)&v119);
  if (v121 >= 0)
    v24 = &v119;
  else
    v24 = v119;
  if (v121 >= 0)
    v25 = HIBYTE(v121);
  else
    v25 = v120;
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
  v140.__r_.__value_.__s.__data_[0] = a4;
  v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)&v140, 1);
  v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"BackgroundMode  : ", 18);
  *(_DWORD *)((char *)v28 + *(_QWORD *)(*v28 - 24) + 8) |= 1u;
  v29 = (_QWORD *)std::ostream::operator<<();
  v140.__r_.__value_.__s.__data_[0] = a4;
  v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)&v140, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"HighWatermark   : ", 18);
  v31 = (_QWORD *)std::ostream::operator<<();
  v140.__r_.__value_.__s.__data_[0] = a4;
  v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)&v140, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"LowWatermark    : ", 18);
  v33 = (_QWORD *)std::ostream::operator<<();
  v140.__r_.__value_.__s.__data_[0] = a4;
  v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)&v140, 1);
  v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"ActiveConfigFile: ", 18);
  v36 = *(char *)(a1 + 183);
  if (v36 >= 0)
    v37 = a1 + 160;
  else
    v37 = *(_QWORD *)(a1 + 160);
  if (v36 >= 0)
    v38 = *(unsigned __int8 *)(a1 + 183);
  else
    v38 = *(_QWORD *)(a1 + 168);
  v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v37, v38);
  v140.__r_.__value_.__s.__data_[0] = a4;
  v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)&v140, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Enabled During Sleep  : ", 24);
  v41 = (_QWORD *)std::ostream::operator<<();
  v140.__r_.__value_.__s.__data_[0] = a4;
  v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)&v140, 1);
  v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"SleepConfigFile\t   : ", 21);
  v44 = *(char *)(a1 + 207);
  if (v44 >= 0)
    v45 = a1 + 184;
  else
    v45 = *(_QWORD *)(a1 + 184);
  if (v44 >= 0)
    v46 = *(unsigned __int8 *)(a1 + 207);
  else
    v46 = *(_QWORD *)(a1 + 192);
  v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, v45, v46);
  v140.__r_.__value_.__s.__data_[0] = a4;
  v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)&v140, 1);
  v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Max memory file count :", 23);
  v50 = *(_DWORD *)(a1 + 332);
  if (v50)
  {
    std::to_string(&v140, v50);
    __p = v140;
  }
  else
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 8;
    strcpy((char *)&__p, "No limit");
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)p_p, size);
  v140.__r_.__value_.__s.__data_[0] = a4;
  v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)&v140, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"File Size : ", 12);
  v55 = (_QWORD *)std::ostream::operator<<();
  v140.__r_.__value_.__s.__data_[0] = a4;
  v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)&v140, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Transport Read Size   : ", 24);
  v57 = (_QWORD *)std::ostream::operator<<();
  v140.__r_.__value_.__s.__data_[0] = a4;
  v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)&v140, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Transport Read Count  : ", 24);
  v59 = (_QWORD *)std::ostream::operator<<();
  v140.__r_.__value_.__s.__data_[0] = a4;
  v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)&v140, 1);
  v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"ETB Config File :", 17);
  v62 = *(char *)(a1 + 231);
  if (v62 >= 0)
    v63 = a1 + 208;
  else
    v63 = *(_QWORD *)(a1 + 208);
  if (v62 >= 0)
    v64 = *(unsigned __int8 *)(a1 + 231);
  else
    v64 = *(_QWORD *)(a1 + 216);
  v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, v63, v64);
  v140.__r_.__value_.__s.__data_[0] = a4;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)&v140, 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v121) & 0x80000000) == 0)
      goto LABEL_41;
LABEL_44:
    operator delete(v119);
    if (!a3)
      goto LABEL_103;
LABEL_45:
    v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v122, (uint64_t)"ActiveMask      : ", 18);
    v68 = *(_QWORD *)(a1 + 232);
    v67 = *(char **)(a1 + 240);
    v69 = (unint64_t)&v67[-v68];
    if ((unint64_t)&v67[-v68] > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v70 = v66;
    if (v69 > 0x16)
    {
      v78 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v69 | 7) != 0x17)
        v78 = v69 | 7;
      v79 = v78 + 1;
      v71 = (char *)operator new(v78 + 1);
      v140.__r_.__value_.__l.__size_ = (std::string::size_type)&v67[-v68];
      v140.__r_.__value_.__r.__words[2] = v79 | 0x8000000000000000;
      v140.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
      if ((char *)v68 != v67)
        goto LABEL_48;
    }
    else
    {
      *((_BYTE *)&v140.__r_.__value_.__s + 23) = (_BYTE)v67 - v68;
      v71 = (char *)&v140;
      if ((char *)v68 != v67)
      {
LABEL_48:
        if (v69 < 0x20 || (unint64_t)&v71[-v68] < 0x20)
        {
          v72 = v71;
          v73 = (char *)v68;
        }
        else
        {
          v72 = &v71[v69 & 0xFFFFFFFFFFFFFFE0];
          v73 = (char *)(v68 + (v69 & 0xFFFFFFFFFFFFFFE0));
          v74 = (__int128 *)(v68 + 16);
          v75 = v71 + 16;
          v76 = v69 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v77 = *v74;
            *(v75 - 1) = *(v74 - 1);
            *v75 = v77;
            v74 += 2;
            v75 += 2;
            v76 -= 32;
          }
          while (v76);
          if (v69 == (v69 & 0xFFFFFFFFFFFFFFE0))
            goto LABEL_60;
        }
        do
        {
          v80 = *v73++;
          *v72++ = v80;
        }
        while (v73 != v67);
LABEL_60:
        *v72 = 0;
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v81 = &v140;
        else
          v81 = (std::string *)v140.__r_.__value_.__r.__words[0];
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v82 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
        else
          v82 = v140.__r_.__value_.__l.__size_;
        v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)v81, v82);
        LOBYTE(v119) = a4;
        v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)&v119, 1);
        v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"SleepMask       : ", 18);
        v87 = *(_QWORD *)(a1 + 256);
        v86 = *(char **)(a1 + 264);
        v88 = (unint64_t)&v86[-v87];
        if ((unint64_t)&v86[-v87] > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v89 = v85;
        if (v88 > 0x16)
        {
          v98 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v88 | 7) != 0x17)
            v98 = v88 | 7;
          v99 = v98 + 1;
          v90 = operator new(v98 + 1);
          v120 = (uint64_t)&v86[-v87];
          v121 = v99 | 0x8000000000000000;
          v119 = v90;
          if ((char *)v87 != v86)
            goto LABEL_69;
        }
        else
        {
          HIBYTE(v121) = (_BYTE)v86 - v87;
          v90 = &v119;
          if ((char *)v87 != v86)
          {
LABEL_69:
            if (v88 < 0x20 || (unint64_t)v90 - v87 < 0x20)
            {
              v91 = v90;
              v92 = (char *)v87;
              v97 = a2;
            }
            else
            {
              v91 = (char *)v90 + (v88 & 0xFFFFFFFFFFFFFFE0);
              v92 = (char *)(v87 + (v88 & 0xFFFFFFFFFFFFFFE0));
              v93 = (__int128 *)(v87 + 16);
              v94 = v90 + 1;
              v95 = v88 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v96 = *v93;
                *(v94 - 1) = *(v93 - 1);
                *v94 = v96;
                v93 += 2;
                v94 += 2;
                v95 -= 32;
              }
              while (v95);
              v97 = a2;
              if (v88 == (v88 & 0xFFFFFFFFFFFFFFE0))
                goto LABEL_81;
            }
            do
            {
              v100 = *v92++;
              *v91++ = v100;
            }
            while (v92 != v86);
LABEL_81:
            *v91 = 0;
            if (v121 >= 0)
              v101 = &v119;
            else
              v101 = v119;
            if (v121 >= 0)
              v102 = HIBYTE(v121);
            else
              v102 = v120;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)v101, v102);
            if (SHIBYTE(v121) < 0)
            {
              operator delete(v119);
              if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_89:
                v103 = *(char *)(v97 + 23);
                if ((v103 & 0x80000000) == 0)
                  goto LABEL_90;
                goto LABEL_94;
              }
            }
            else if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_89;
            }
            operator delete(v140.__r_.__value_.__l.__data_);
            v103 = *(char *)(v97 + 23);
            if ((v103 & 0x80000000) == 0)
            {
LABEL_90:
              if (!(_BYTE)v103)
                goto LABEL_102;
              goto LABEL_95;
            }
LABEL_94:
            if (!*(_QWORD *)(v97 + 8))
            {
LABEL_102:
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v122, (uint64_t)"\n---------------------------------\n", 35);
              goto LABEL_103;
            }
LABEL_95:
            v140.__r_.__value_.__s.__data_[0] = a4;
            v104 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v122, (uint64_t)&v140, 1);
            v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"Reason: ", 8);
            v106 = *(char *)(v97 + 23);
            if (v106 >= 0)
              v107 = v97;
            else
              v107 = *(_QWORD *)v97;
            if (v106 >= 0)
              v108 = *(unsigned __int8 *)(v97 + 23);
            else
              v108 = *(_QWORD *)(v97 + 8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, v107, v108);
            goto LABEL_102;
          }
        }
        v91 = v90;
        v97 = a2;
        goto LABEL_81;
      }
    }
    v72 = v71;
    goto LABEL_60;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v121) < 0)
    goto LABEL_44;
LABEL_41:
  if (a3)
    goto LABEL_45;
LABEL_103:
  if ((v129 & 0x10) != 0)
  {
    v110 = *((_QWORD *)&v128 + 1);
    if (*((_QWORD *)&v128 + 1) < (unint64_t)v126)
    {
      *((_QWORD *)&v128 + 1) = v126;
      v110 = v126;
    }
    v111 = (const void *)*((_QWORD *)&v125 + 1);
    v109 = v110 - *((_QWORD *)&v125 + 1);
    if ((unint64_t)(v110 - *((_QWORD *)&v125 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_120;
  }
  else
  {
    if ((v129 & 8) == 0)
    {
      v109 = 0;
      a5[23] = 0;
      goto LABEL_116;
    }
    v111 = (const void *)v124;
    v109 = v125 - v124;
    if ((_QWORD)v125 - (_QWORD)v124 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_120:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v109 >= 0x17)
  {
    v112 = (v109 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v109 | 7) != 0x17)
      v112 = v109 | 7;
    v113 = v112 + 1;
    v114 = operator new(v112 + 1);
    *((_QWORD *)a5 + 1) = v109;
    *((_QWORD *)a5 + 2) = v113 | 0x8000000000000000;
    *(_QWORD *)a5 = v114;
    a5 = v114;
    goto LABEL_115;
  }
  a5[23] = v109;
  if (v109)
LABEL_115:
    memmove(a5, v111, v109);
LABEL_116:
  v115 = MEMORY[0x1E0DE4FB8];
  a5[v109] = 0;
  v122 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&v122 + *(_QWORD *)(v122 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *(_QWORD *)&v123 = v115 + 16;
  if (SBYTE7(v128) < 0)
    operator delete(v127[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A858F92C](&v130);
}

void sub_1A3492000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  uint64_t v23;

  if (a22 < 0)
    operator delete(__p);
  if (*(char *)(v23 - 97) < 0)
  {
    operator delete(*(void **)(v23 - 120));
    std::ostringstream::~ostringstream((uint64_t)&a23);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a23);
  _Unwind_Resume(a1);
}

BOOL ICETrace::setProperty(_QWORD *a1, dispatch_object_t *a2, uint64_t *a3, uint64_t *a4)
{
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  int v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t *v16;
  uint64_t *v17;
  _QWORD v18[6];
  dispatch_group_t group;
  uint64_t *v20;
  dispatch_object_t object;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  _BYTE block[24];
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v8 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v8);
  }
  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = 0;
  v9 = MEMORY[0x1E0C809B0];
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 1174405120;
  v18[2] = ___ZN8ICETrace11setPropertyEN8dispatch5groupERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA__block_invoke;
  v18[3] = &unk_1E4A08A10;
  v18[5] = a1;
  group = v8;
  if (v8)
  {
    dispatch_retain(v8);
    dispatch_group_enter(v8);
  }
  v18[4] = &v23;
  v10 = *a2;
  v20 = a3;
  object = v10;
  if (v10)
    dispatch_retain(v10);
  v22 = a4;
  v27 = v18;
  *(_QWORD *)block = v9;
  *(_QWORD *)&block[8] = 0x40000000;
  *(_QWORD *)&block[16] = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke_0;
  v29 = &__block_descriptor_tmp_131;
  v30 = a1 + 9;
  v31 = &v27;
  v11 = a1[11];
  if (a1[12])
  {
    dispatch_async_and_wait(v11, block);
    if (*((_BYTE *)v24 + 24))
      goto LABEL_9;
  }
  else
  {
    dispatch_sync(v11, block);
    if (*((_BYTE *)v24 + 24))
    {
LABEL_9:
      v12 = 1;
      v13 = object;
      if (!object)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  v14 = a1[5];
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a3 + 23) >= 0)
      v16 = a3;
    else
      v16 = (uint64_t *)*a3;
    if (*((char *)a4 + 23) >= 0)
      v17 = a4;
    else
      v17 = (uint64_t *)*a4;
    *(_DWORD *)block = 136315394;
    *(_QWORD *)&block[4] = v16;
    *(_WORD *)&block[12] = 2080;
    *(_QWORD *)&block[14] = v17;
    _os_log_error_impl(&dword_1A343C000, v14, OS_LOG_TYPE_ERROR, "Set %s to %s failed.", block, 0x16u);
    v12 = *((unsigned __int8 *)v24 + 24);
    v13 = object;
    if (object)
      goto LABEL_14;
  }
  else
  {
    v12 = 0;
    v13 = object;
    if (object)
LABEL_14:
      dispatch_release(v13);
  }
LABEL_15:
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  _Block_object_dispose(&v23, 8);
  if (v8)
  {
    dispatch_group_leave(v8);
    dispatch_release(v8);
  }
  return v12 != 0;
}

void ___ZN8ICETrace11setPropertyEN8dispatch5groupERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA__block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::string::size_type v3;
  int v4;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  NSObject *v8;
  __int128 *v9;
  __int128 v10;
  __int128 *v11;
  __int128 v12;
  __int128 *v13;
  __int128 v14;
  __int128 *v15;
  __int128 v16;
  __int128 *v17;
  __int128 v18;
  __int128 *v19;
  __int128 v20;
  __int128 *v21;
  __int128 v22;
  __int128 *v23;
  __int128 v24;
  __int128 *v25;
  __int128 v26;
  __int128 *v27;
  __int128 v28;
  uint64_t v29;
  __int128 *v30;
  __int128 v31;
  __int128 *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 *v36;
  __int128 v37;
  __int128 *v38;
  __int128 v39;
  const void **v40;
  int v41;
  size_t v42;
  unint64_t v43;
  std::string *p_buf;
  uint64_t v45;
  uint64_t v46;
  const void *v47;
  uint64_t v48;
  int v49;
  const std::string::value_type *v50;
  std::string::size_type v51;
  std::string *v52;
  __int128 v53;
  _BYTE v54[8];
  _QWORD *v55;
  void *v56[2];
  std::string::size_type v57;
  std::string v58;
  void *v59[2];
  char v60;
  NSObject *v61;
  std::string v62;
  void *v63[2];
  char v64;
  NSObject *v65;
  std::string v66;
  void *v67[2];
  char v68;
  std::string v69;
  void *v70[2];
  char v71;
  dispatch_object_t v72;
  std::string v73;
  void *v74[2];
  char v75;
  std::string v76;
  void *v77[2];
  char v78;
  dispatch_object_t v79;
  std::string v80;
  void *v81[2];
  char v82;
  dispatch_object_t v83;
  std::string v84;
  void *v85[2];
  char v86;
  dispatch_object_t v87;
  std::string v88;
  void *v89[2];
  char v90;
  NSObject *v91;
  std::string v92;
  void *v93[2];
  char v94;
  dispatch_object_t v95;
  std::string v96;
  void *__p[2];
  char v98;
  dispatch_object_t v99;
  std::string v100;
  void *v101[2];
  char v102;
  dispatch_object_t v103;
  std::string v104;
  void *v105[2];
  char v106;
  std::string v107;
  void *v108[2];
  char v109;
  NSObject *v110;
  std::string buf;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(char *)(v3 + 23);
  if ((v4 & 0x80000000) == 0)
  {
    if (strcasecmp(*(const char **)(a1 + 56), "Enabled"))
    {
      if (strcasecmp((const char *)v3, "History"))
      {
        if (strcasecmp((const char *)v3, "Mode"))
        {
          if (strcasecmp((const char *)v3, "File"))
          {
            if (strcasecmp((const char *)v3, "File_Sleep"))
            {
              if (strcasecmp((const char *)v3, "BackgroundMode"))
              {
                if (strcasecmp((const char *)v3, "High_Watermark"))
                {
                  if (strcasecmp((const char *)v3, "Low_Watermark"))
                  {
                    if (strcasecmp((const char *)v3, "Enabled_During_Sleep"))
                    {
                      if (strcasecmp((const char *)v3, "ETBFile"))
                      {
                        if (strcasecmp((const char *)v3, "MaxMemoryFileCount"))
                        {
                          if (strcasecmp((const char *)v3, "KeepScratchLogs"))
                          {
                            if (strcasecmp((const char *)v3, "FileSize"))
                            {
                              v6 = (const char *)v3;
                              if (strcasecmp((const char *)v3, "SizeIO"))
                                goto LABEL_16;
LABEL_35:
                              v8 = *(NSObject **)(a1 + 64);
                              v65 = v8;
                              if (v8)
                                dispatch_retain(v8);
                              std::string::basic_string[abi:ne180100]<0>(v63, "SizeIO");
                              v9 = *(__int128 **)(a1 + 72);
                              if (*((char *)v9 + 23) < 0)
                              {
                                std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
                              }
                              else
                              {
                                v10 = *v9;
                                v62.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
                                *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v10;
                              }
                              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = ICETrace::setPropTransportReadSize_sync((_BYTE *)v2, &v65, (char *)v63, (const char *)&v62);
                              if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
                              {
                                operator delete(v62.__r_.__value_.__l.__data_);
                                if ((v64 & 0x80000000) == 0)
                                  goto LABEL_188;
                              }
                              else if ((v64 & 0x80000000) == 0)
                              {
                                goto LABEL_188;
                              }
                              operator delete(v63[0]);
                              if (!v8)
                                goto LABEL_190;
                              goto LABEL_189;
                            }
LABEL_155:
                            v8 = *(NSObject **)(a1 + 64);
                            if (v8)
                              dispatch_retain(*(dispatch_object_t *)(a1 + 64));
                            std::string::basic_string[abi:ne180100]<0>(v67, "FileSize");
                            v36 = *(__int128 **)(a1 + 72);
                            if (*((char *)v36 + 23) < 0)
                            {
                              std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)v36, *((_QWORD *)v36 + 1));
                            }
                            else
                            {
                              v37 = *v36;
                              v66.__r_.__value_.__r.__words[2] = *((_QWORD *)v36 + 2);
                              *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v37;
                            }
                            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = ICETrace::setPropFileSize_sync(v2, v35, (char *)v67, (const char *)&v66);
                            if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
                            {
                              operator delete(v66.__r_.__value_.__l.__data_);
                              if ((v68 & 0x80000000) == 0)
                                goto LABEL_188;
                            }
                            else if ((v68 & 0x80000000) == 0)
                            {
                              goto LABEL_188;
                            }
                            operator delete(v67[0]);
                            if (!v8)
                              goto LABEL_190;
                            goto LABEL_189;
                          }
LABEL_146:
                          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = prop::bbtrace::set((char *)v3, *(const char **)(a1 + 72));
                          v34 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
                          if (*(_BYTE *)(v34 + 24))
                            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = prop::bbtrace::get<BOOL>(*(char **)(a1 + 56), (BOOL *)(v2 + 344));
                          else
                            *(_BYTE *)(v34 + 24) = 0;
                          goto LABEL_190;
                        }
LABEL_135:
                        v8 = *(NSObject **)(a1 + 64);
                        v72 = v8;
                        if (v8)
                          dispatch_retain(v8);
                        std::string::basic_string[abi:ne180100]<0>(v70, "MaxMemoryFileCount");
                        v32 = *(__int128 **)(a1 + 72);
                        if (*((char *)v32 + 23) < 0)
                        {
                          std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)v32, *((_QWORD *)v32 + 1));
                        }
                        else
                        {
                          v33 = *v32;
                          v69.__r_.__value_.__r.__words[2] = *((_QWORD *)v32 + 2);
                          *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v33;
                        }
                        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = ICETrace::setPropMaxMemoryFileCount_sync(v2, &v72, (char *)v70, (const char *)&v69);
                        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
                        {
                          operator delete(v69.__r_.__value_.__l.__data_);
                          if ((v71 & 0x80000000) == 0)
                            goto LABEL_188;
                        }
                        else if ((v71 & 0x80000000) == 0)
                        {
                          goto LABEL_188;
                        }
                        operator delete(v70[0]);
                        if (!v8)
                          goto LABEL_190;
                        goto LABEL_189;
                      }
LABEL_124:
                      v8 = *(NSObject **)(a1 + 64);
                      if (v8)
                        dispatch_retain(*(dispatch_object_t *)(a1 + 64));
                      std::string::basic_string[abi:ne180100]<0>(v74, "ETBFile");
                      v30 = *(__int128 **)(a1 + 72);
                      if (*((char *)v30 + 23) < 0)
                      {
                        std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
                      }
                      else
                      {
                        v31 = *v30;
                        v73.__r_.__value_.__r.__words[2] = *((_QWORD *)v30 + 2);
                        *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v31;
                      }
                      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = ICETrace::setPropETBSetup_sync(v2, v29, (char *)v74, (uint64_t *)&v73);
                      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(v73.__r_.__value_.__l.__data_);
                        if ((v75 & 0x80000000) == 0)
                          goto LABEL_188;
                      }
                      else if ((v75 & 0x80000000) == 0)
                      {
                        goto LABEL_188;
                      }
                      operator delete(v74[0]);
                      if (!v8)
                        goto LABEL_190;
                      goto LABEL_189;
                    }
LABEL_113:
                    v8 = *(NSObject **)(a1 + 64);
                    v79 = v8;
                    if (v8)
                      dispatch_retain(v8);
                    std::string::basic_string[abi:ne180100]<0>(v77, "Enabled_During_Sleep");
                    v27 = *(__int128 **)(a1 + 72);
                    if (*((char *)v27 + 23) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v76, *(const std::string::value_type **)v27, *((_QWORD *)v27 + 1));
                    }
                    else
                    {
                      v28 = *v27;
                      v76.__r_.__value_.__r.__words[2] = *((_QWORD *)v27 + 2);
                      *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v28;
                    }
                    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = ICETrace::setPropSleepTraceEnabled_sync(v2, &v79, (char *)v77, (const char *)&v76);
                    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(v76.__r_.__value_.__l.__data_);
                      if ((v78 & 0x80000000) == 0)
                        goto LABEL_188;
                    }
                    else if ((v78 & 0x80000000) == 0)
                    {
                      goto LABEL_188;
                    }
                    operator delete(v77[0]);
                    if (!v8)
                      goto LABEL_190;
                    goto LABEL_189;
                  }
LABEL_102:
                  v8 = *(NSObject **)(a1 + 64);
                  v83 = v8;
                  if (v8)
                    dispatch_retain(v8);
                  std::string::basic_string[abi:ne180100]<0>(v81, "Low_Watermark");
                  v25 = *(__int128 **)(a1 + 72);
                  if (*((char *)v25 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)v25, *((_QWORD *)v25 + 1));
                  }
                  else
                  {
                    v26 = *v25;
                    v80.__r_.__value_.__r.__words[2] = *((_QWORD *)v25 + 2);
                    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v26;
                  }
                  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = ICETrace::setPropLowWatermark_sync(v2, &v83, (char *)v81, (const char *)&v80);
                  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(v80.__r_.__value_.__l.__data_);
                    if ((v82 & 0x80000000) == 0)
                      goto LABEL_188;
                  }
                  else if ((v82 & 0x80000000) == 0)
                  {
                    goto LABEL_188;
                  }
                  operator delete(v81[0]);
                  if (!v8)
                    goto LABEL_190;
                  goto LABEL_189;
                }
LABEL_91:
                v8 = *(NSObject **)(a1 + 64);
                v87 = v8;
                if (v8)
                  dispatch_retain(v8);
                v86 = 14;
                strcpy((char *)v85, "High_Watermark");
                v23 = *(__int128 **)(a1 + 72);
                if (*((char *)v23 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v84, *(const std::string::value_type **)v23, *((_QWORD *)v23 + 1));
                }
                else
                {
                  v24 = *v23;
                  v84.__r_.__value_.__r.__words[2] = *((_QWORD *)v23 + 2);
                  *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v24;
                }
                *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = ICETrace::setPropHighWatermark_sync(v2, &v87, (char *)v85, (const char *)&v84);
                if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v84.__r_.__value_.__l.__data_);
                  if ((v86 & 0x80000000) == 0)
                    goto LABEL_188;
                }
                else if ((v86 & 0x80000000) == 0)
                {
                  goto LABEL_188;
                }
                operator delete(v85[0]);
                if (!v8)
                  goto LABEL_190;
                goto LABEL_189;
              }
LABEL_80:
              v8 = *(NSObject **)(a1 + 64);
              v91 = v8;
              if (v8)
                dispatch_retain(v8);
              v90 = 14;
              strcpy((char *)v89, "BackgroundMode");
              v21 = *(__int128 **)(a1 + 72);
              if (*((char *)v21 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v21, *((_QWORD *)v21 + 1));
              }
              else
              {
                v22 = *v21;
                v88.__r_.__value_.__r.__words[2] = *((_QWORD *)v21 + 2);
                *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v22;
              }
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = ICETrace::setPropBackgroundMode_sync(v2, &v91, (char *)v89, (const char *)&v88);
              if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v88.__r_.__value_.__l.__data_);
                if ((v90 & 0x80000000) == 0)
                  goto LABEL_188;
              }
              else if ((v90 & 0x80000000) == 0)
              {
                goto LABEL_188;
              }
              operator delete(v89[0]);
              if (!v8)
                goto LABEL_190;
              goto LABEL_189;
            }
LABEL_69:
            v8 = *(NSObject **)(a1 + 64);
            v95 = v8;
            if (v8)
              dispatch_retain(v8);
            v94 = 10;
            strcpy((char *)v93, "File_Sleep");
            v19 = *(__int128 **)(a1 + 72);
            if (*((char *)v19 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v92, *(const std::string::value_type **)v19, *((_QWORD *)v19 + 1));
            }
            else
            {
              v20 = *v19;
              v92.__r_.__value_.__r.__words[2] = *((_QWORD *)v19 + 2);
              *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v20;
            }
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = ICETrace::setPropSleepConfig_sync(v2, &v95, (char *)v93, (uint64_t *)&v92);
            if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v92.__r_.__value_.__l.__data_);
              if ((v94 & 0x80000000) == 0)
                goto LABEL_188;
            }
            else if ((v94 & 0x80000000) == 0)
            {
              goto LABEL_188;
            }
            operator delete(v93[0]);
            if (!v8)
              goto LABEL_190;
            goto LABEL_189;
          }
LABEL_58:
          v8 = *(NSObject **)(a1 + 64);
          v99 = v8;
          if (v8)
            dispatch_retain(v8);
          v98 = 4;
          strcpy((char *)__p, "File");
          v17 = *(__int128 **)(a1 + 72);
          if (*((char *)v17 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
          }
          else
          {
            v18 = *v17;
            v96.__r_.__value_.__r.__words[2] = *((_QWORD *)v17 + 2);
            *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v18;
          }
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = ICETrace::setPropActiveConfig_sync(v2, &v99, (char *)__p, (uint64_t *)&v96);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v96.__r_.__value_.__l.__data_);
            if ((v98 & 0x80000000) == 0)
              goto LABEL_188;
          }
          else if ((v98 & 0x80000000) == 0)
          {
            goto LABEL_188;
          }
          operator delete(__p[0]);
          if (!v8)
            goto LABEL_190;
          goto LABEL_189;
        }
LABEL_47:
        v8 = *(NSObject **)(a1 + 64);
        v103 = v8;
        if (v8)
          dispatch_retain(v8);
        v102 = 4;
        strcpy((char *)v101, "Mode");
        v15 = *(__int128 **)(a1 + 72);
        if (*((char *)v15 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v100, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
        }
        else
        {
          v16 = *v15;
          v100.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
          *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v16;
        }
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = ICETrace::setPropMode_sync(v2, &v103, (char *)v101, (const char *)&v100);
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v100.__r_.__value_.__l.__data_);
          if ((v102 & 0x80000000) == 0)
            goto LABEL_188;
        }
        else if ((v102 & 0x80000000) == 0)
        {
          goto LABEL_188;
        }
        operator delete(v101[0]);
        if (!v8)
          goto LABEL_190;
        goto LABEL_189;
      }
LABEL_43:
      v8 = *(NSObject **)(a1 + 64);
      if (v8)
        dispatch_retain(*(dispatch_object_t *)(a1 + 64));
      v106 = 7;
      strcpy((char *)v105, "History");
      v13 = *(__int128 **)(a1 + 72);
      if (*((char *)v13 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
      }
      else
      {
        v14 = *v13;
        v104.__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
        *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v14;
      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = ICETrace::setPropHistory_sync(v2, v5, (char *)v105, (const char *)&v104);
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v104.__r_.__value_.__l.__data_);
        if ((v106 & 0x80000000) == 0)
          goto LABEL_188;
      }
      else if ((v106 & 0x80000000) == 0)
      {
        goto LABEL_188;
      }
      operator delete(v105[0]);
      if (!v8)
        goto LABEL_190;
      goto LABEL_189;
    }
LABEL_39:
    v8 = *(NSObject **)(a1 + 64);
    v110 = v8;
    if (v8)
      dispatch_retain(v8);
    v109 = 7;
    strcpy((char *)v108, "Enabled");
    v11 = *(__int128 **)(a1 + 72);
    if (*((char *)v11 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v107, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
    }
    else
    {
      v12 = *v11;
      v107.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
      *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v12;
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = ICETrace::setPropEnabled_sync(v2, &v110, (char *)v108, (const char *)&v107);
    if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v107.__r_.__value_.__l.__data_);
      if ((v109 & 0x80000000) == 0)
        goto LABEL_188;
    }
    else if ((v109 & 0x80000000) == 0)
    {
      goto LABEL_188;
    }
    operator delete(v108[0]);
    if (!v8)
      goto LABEL_190;
    goto LABEL_189;
  }
  v6 = *(const char **)v3;
  if (!strcasecmp(*(const char **)v3, "Enabled"))
    goto LABEL_39;
  if (!strcasecmp(v6, "History"))
    goto LABEL_43;
  if (!strcasecmp(v6, "Mode"))
    goto LABEL_47;
  if (!strcasecmp(v6, "File"))
    goto LABEL_58;
  if (!strcasecmp(v6, "File_Sleep"))
    goto LABEL_69;
  if (!strcasecmp(v6, "BackgroundMode"))
    goto LABEL_80;
  if (!strcasecmp(v6, "High_Watermark"))
    goto LABEL_91;
  if (!strcasecmp(v6, "Low_Watermark"))
    goto LABEL_102;
  if (!strcasecmp(v6, "Enabled_During_Sleep"))
    goto LABEL_113;
  if (!strcasecmp(v6, "ETBFile"))
    goto LABEL_124;
  if (!strcasecmp(v6, "MaxMemoryFileCount"))
    goto LABEL_135;
  if (!strcasecmp(v6, "KeepScratchLogs"))
    goto LABEL_146;
  if (!strcasecmp(v6, "FileSize"))
    goto LABEL_155;
  if (!strcasecmp(v6, "SizeIO"))
    goto LABEL_35;
LABEL_16:
  if (!strcasecmp(v6, "NumberOfReadIO"))
  {
    v8 = *(NSObject **)(a1 + 64);
    v61 = v8;
    if (v8)
      dispatch_retain(v8);
    std::string::basic_string[abi:ne180100]<0>(v59, "NumberOfReadIO");
    v38 = *(__int128 **)(a1 + 72);
    if (*((char *)v38 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)v38, *((_QWORD *)v38 + 1));
    }
    else
    {
      v39 = *v38;
      v58.__r_.__value_.__r.__words[2] = *((_QWORD *)v38 + 2);
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v39;
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = ICETrace::setPropTransportReadCount_sync((_BYTE *)v2, &v61, (char *)v59, (const char *)&v58);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v58.__r_.__value_.__l.__data_);
      if ((v60 & 0x80000000) == 0)
      {
LABEL_188:
        if (!v8)
          goto LABEL_190;
        goto LABEL_189;
      }
    }
    else if ((v60 & 0x80000000) == 0)
    {
      goto LABEL_188;
    }
    operator delete(v59[0]);
    if (!v8)
      goto LABEL_190;
LABEL_189:
    dispatch_release(v8);
    goto LABEL_190;
  }
  v7 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    if (v4 < 0)
      v3 = *(_QWORD *)v3;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v3;
    _os_log_error_impl(&dword_1A343C000, v7, OS_LOG_TYPE_ERROR, "Key not handled: %s", (uint8_t *)&buf, 0xCu);
  }
LABEL_190:
  if (!*(_QWORD *)(v2 + 480))
    return;
  v40 = *(const void ***)(a1 + 56);
  v41 = *((char *)v40 + 23);
  if (v41 >= 0)
    v42 = *((unsigned __int8 *)v40 + 23);
  else
    v42 = (size_t)v40[1];
  v43 = v42 + 3;
  memset(&buf, 170, sizeof(buf));
  if (v42 + 3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v43 >= 0x17)
  {
    v45 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v45 = v43 | 7;
    v46 = v45 + 1;
    p_buf = (std::string *)operator new(v45 + 1);
    buf.__r_.__value_.__l.__size_ = v42 + 3;
    buf.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
  }
  else
  {
    memset(&buf, 0, sizeof(buf));
    p_buf = &buf;
    *((_BYTE *)&buf.__r_.__value_.__s + 23) = v42 + 3;
    if (!v42)
      goto LABEL_205;
  }
  if (v41 >= 0)
    v47 = v40;
  else
    v47 = *v40;
  memmove(p_buf, v47, v42);
LABEL_205:
  *(_DWORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v42) = 2112800;
  v48 = *(_QWORD *)(a1 + 72);
  v49 = *(char *)(v48 + 23);
  if (v49 >= 0)
    v50 = *(const std::string::value_type **)(a1 + 72);
  else
    v50 = *(const std::string::value_type **)v48;
  if (v49 >= 0)
    v51 = *(unsigned __int8 *)(v48 + 23);
  else
    v51 = *(_QWORD *)(v48 + 8);
  v52 = std::string::append(&buf, v50, v51);
  v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v57 = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)v56 = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  Timestamp::Timestamp((Timestamp *)v54);
  abm::trace::TraceInfo::push();
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v54, v55);
  if ((SHIBYTE(v57) & 0x80000000) == 0)
  {
    if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_215:
    operator delete(buf.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v56[0]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_215;
}

void sub_1A34931E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  NSObject *v32;

  if (a32 < 0)
  {
    operator delete(__p);
    if (!v32)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v32)
  {
    goto LABEL_6;
  }
  dispatch_release(v32);
  _Unwind_Resume(a1);
}

uint64_t ICETrace::setPropEnabled_sync(uint64_t a1, NSObject **a2, char *a3, const char *a4)
{
  uint64_t v7;
  int v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  CommandDriverFactory *v12;
  void *v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  NSObject *v33;
  const void *v34;
  NSObject *v35;
  _QWORD *v36;
  void *v38;
  char v39;
  CFTypeRef v40;
  dispatch_object_t v41;
  CFTypeRef cf;
  dispatch_object_t object;
  int v44;
  std::string __p;
  void *v46;
  std::__shared_weak_count *v47;
  char v48;
  std::string v49;
  std::string buf;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (!prop::bbtrace::set(a3, a4))
    return 0;
  v44 = -1431655766;
  memset(&__p, 0, sizeof(__p));
  v48 = 7;
  strcpy((char *)&v46, "BBTrace");
  memset(&buf, 0, sizeof(buf));
  v7 = defaults::get((char *)&v46, a3, &buf);
  if ((_DWORD)v7)
  {
    prop::file::get<std::string>((const void **)&v46, (uint64_t)a3, (uint64_t)&buf, &v49);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v49;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v48 & 0x80000000) == 0)
    {
LABEL_8:
      if ((_DWORD)v7)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v48 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(v46);
  if ((_DWORD)v7)
  {
LABEL_9:
    v7 = util::convert<int>(&__p, &v44, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_10:
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!(_DWORD)v7)
      return v7;
    goto LABEL_17;
  }
LABEL_16:
  if (!(_DWORD)v7)
    return v7;
LABEL_17:
  v8 = v44;
  v9 = *(unsigned __int8 *)(a1 + 336);
  if (v44 != v9)
  {
    v10 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v9;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v8;
      _os_log_impl(&dword_1A343C000, v10, OS_LOG_TYPE_DEFAULT, "#I Setting enable from %d to %d", (uint8_t *)&buf, 0xEu);
      v8 = v44;
    }
    *(_BYTE *)(a1 + 336) = v8 != 0;
    __p.__r_.__value_.__r.__words[0] = 0;
    v11 = *(_QWORD *)(a1 + 416);
    if (v11)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 152))(v11) & 1) == 0)
        return 1;
    }
    else
    {
      v12 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
      v13 = (void *)off_1ED114670;
      if (!off_1ED114670)
      {
        CommandDriverFactory::create_default_global(v12);
        v14 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
        v15 = (std::__shared_weak_count *)*(&off_1ED114670 + 1);
        off_1ED114670 = v14;
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
        if (buf.__r_.__value_.__l.__size_)
        {
          v19 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        v13 = (void *)off_1ED114670;
      }
      v46 = v13;
      v47 = (std::__shared_weak_count *)*(&off_1ED114670 + 1);
      if (*(&off_1ED114670 + 1))
      {
        v21 = (unint64_t *)(*(&off_1ED114670 + 1) + 8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
      (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v13 + 136))(&v49, v13);
      v23 = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = 0uLL;
      v24 = *(std::__shared_weak_count **)(a1 + 424);
      *(_OWORD *)(a1 + 416) = v23;
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = (std::__shared_weak_count *)v49.__r_.__value_.__l.__size_;
      if (v49.__r_.__value_.__l.__size_)
      {
        v28 = (unint64_t *)(v49.__r_.__value_.__l.__size_ + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = v47;
      if (v47)
      {
        v31 = (unint64_t *)&v47->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
    }
    if (*(_BYTE *)(a1 + 336))
    {
      v33 = *a2;
      object = v33;
      if (v33)
        dispatch_retain(v33);
      v34 = (const void *)__p.__r_.__value_.__r.__words[0];
      cf = (CFTypeRef)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
        CFRetain(__p.__r_.__value_.__l.__data_);
      (*(void (**)(uint64_t, dispatch_object_t *, CFTypeRef *))(*(_QWORD *)a1 + 184))(a1, &object, &cf);
      if (cf)
        CFRelease(cf);
      if (object)
        dispatch_release(object);
    }
    else if (*(_QWORD *)(a1 + 416))
    {
      v35 = *a2;
      v41 = v35;
      if (v35)
        dispatch_retain(v35);
      v34 = (const void *)__p.__r_.__value_.__r.__words[0];
      v40 = (CFTypeRef)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
        CFRetain(__p.__r_.__value_.__l.__data_);
      (*(void (**)(uint64_t, dispatch_object_t *, CFTypeRef *))(*(_QWORD *)a1 + 192))(a1, &v41, &v40);
      if (v40)
        CFRelease(v40);
      if (v41)
        dispatch_release(v41);
      if (*(_QWORD *)(a1 + 368))
      {
        std::string::basic_string[abi:ne180100]<0>(&v38, abm::trace::kTrashFolder[0]);
        TraceFileCollection::clear();
        v36 = (_QWORD *)(a1 + 368);
        if (v39 < 0)
          operator delete(v38);
        std::shared_ptr<TraceFileCollection>::reset[abi:ne180100](v36);
      }
    }
    else
    {
      v34 = (const void *)__p.__r_.__value_.__r.__words[0];
    }
    if (v34)
      CFRelease(v34);
  }
  return v7;
}

void sub_1A3493B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, dispatch_object_t object, char a17, uint64_t a18, uint64_t a19, const void *a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a14 < 0)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a20);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a20);
  _Unwind_Resume(a1);
}

void sub_1A3493C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t ICETrace::setPropHistory_sync(uint64_t a1, uint64_t a2, char *a3, const char *a4)
{
  _BOOL4 v6;
  uint64_t v7;
  int v8;
  int v9;
  NSObject *v10;
  TraceFileCollection *v11;
  int v13;
  std::string __p;
  void *v15[2];
  char v16;
  std::string v17;
  std::string buf;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!prop::bbtrace::set(a3, a4))
    return 0;
  v13 = -1431655766;
  memset(&__p, 0, sizeof(__p));
  v16 = 7;
  strcpy((char *)v15, "BBTrace");
  memset(&buf, 0, sizeof(buf));
  v6 = defaults::get((char *)v15, a3, &buf);
  if (v6)
  {
    prop::file::get<std::string>((const void **)v15, (uint64_t)a3, (uint64_t)&buf, &v17);
    __p = v17;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_6:
      if (v6)
        goto LABEL_7;
      goto LABEL_13;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(v15[0]);
  if (v6)
  {
LABEL_7:
    v7 = util::convert<int>(&__p, &v13, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_8;
LABEL_14:
    if (!(_DWORD)v7)
      return v7;
    goto LABEL_15;
  }
LABEL_13:
  v7 = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_14;
LABEL_8:
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!(_DWORD)v7)
    return v7;
LABEL_15:
  v8 = v13;
  v9 = *(_DWORD *)(a1 + 340);
  if (v13 != v9)
  {
    v10 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v9;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v8;
      _os_log_impl(&dword_1A343C000, v10, OS_LOG_TYPE_DEFAULT, "#I Setting history from %d MB to %d MB", (uint8_t *)&buf, 0xEu);
      v8 = v13;
    }
    *(_DWORD *)(a1 + 340) = v8;
    v11 = *(TraceFileCollection **)(a1 + 368);
    if (v11)
      TraceFileCollection::setHistory(v11);
  }
  return v7;
}

void sub_1A3493E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ICETrace::setPropMode_sync(uint64_t a1, dispatch_object_t *a2, char *a3, const char *a4)
{
  NSObject *v7;
  _BOOL4 v8;
  uint64_t data_low;
  int v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  NSObject *v16;
  const char *v17;
  NSObject *v18;
  uint32_t v19;
  uint64_t v20;
  NSObject *v22;
  const char *v23;
  const char *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  NSObject *v35;
  uint64_t v36;
  NSObject *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  _QWORD v41[5];
  dispatch_group_t object;
  uint64_t v43;
  std::__shared_weak_count *v44;
  int v45;
  _QWORD v46[2];
  _QWORD aBlock[5];
  dispatch_group_t group;
  uint64_t v49;
  std::__shared_weak_count *v50;
  std::string __p;
  char v52[8];
  char v53;
  std::string v54;
  std::string buf;
  const char *v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v7);
  }
  if ((prop::bbtrace::set(a3, a4) & 1) != 0)
  {
    memset(&__p, 0, sizeof(__p));
    v53 = 7;
    strcpy(v52, "BBTrace");
    memset(&buf, 0, sizeof(buf));
    v8 = defaults::get(v52, a3, &buf);
    if (v8)
    {
      prop::file::get<std::string>((const void **)v52, (uint64_t)a3, (uint64_t)&buf, &v54);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v54;
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf.__r_.__value_.__l.__data_);
      if ((v53 & 0x80000000) == 0)
      {
LABEL_10:
        data_low = 2863311530;
        if (v8)
          goto LABEL_11;
        goto LABEL_27;
      }
    }
    else if ((v53 & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(*(void **)v52);
    data_low = 2863311530;
    if (v8)
    {
LABEL_11:
      LODWORD(buf.__r_.__value_.__l.__data_) = -1431655766;
      v10 = util::convert<int>(&__p, &buf, 0);
      LOBYTE(v8) = v10;
      if (v10)
        data_low = LODWORD(buf.__r_.__value_.__l.__data_);
      else
        data_low = 2863311530;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_15:
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v8)
          goto LABEL_16;
        goto LABEL_29;
      }
LABEL_28:
      if (!v8)
      {
LABEL_16:
        v11 = *(NSObject **)(a1 + 40);
        v12 = 0;
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          goto LABEL_41;
        if (a3[23] < 0)
        {
          a3 = *(char **)a3;
          v13 = *(int *)(a1 + 152);
          if (v13 <= 6)
          {
LABEL_19:
            v14 = off_1E4A08D30[v13];
            if (data_low > 6)
            {
LABEL_20:
              v15 = "Unknown";
LABEL_39:
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a3;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v14;
              HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
              v56 = v15;
              v17 = "#I Failed to get %s property as mode from %s to %s";
              v18 = v11;
              v19 = 32;
              goto LABEL_40;
            }
LABEL_38:
            v15 = off_1E4A08D30[(int)data_low];
            goto LABEL_39;
          }
        }
        else
        {
          v13 = *(int *)(a1 + 152);
          if (v13 <= 6)
            goto LABEL_19;
        }
        v14 = "Unknown";
        if (data_low > 6)
          goto LABEL_20;
        goto LABEL_38;
      }
LABEL_29:
      v20 = *(int *)(a1 + 152);
      if ((_DWORD)v20 == (_DWORD)data_low)
      {
        if (!*(_BYTE *)(a1 + 329))
        {
LABEL_34:
          v12 = 1;
          if (!v7)
            return v12;
          goto LABEL_42;
        }
LABEL_33:
        *(_DWORD *)(a1 + 152) = data_low;
        goto LABEL_34;
      }
      if (*(_BYTE *)(a1 + 329))
        goto LABEL_33;
      v22 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        if (v20 > 6)
          v23 = "Unknown";
        else
          v23 = off_1E4A08D30[v20];
        if (data_low > 6)
          v24 = "Unknown";
        else
          v24 = off_1E4A08D30[(int)data_low];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v24;
        _os_log_impl(&dword_1A343C000, v22, OS_LOG_TYPE_DEFAULT, "#I Setting mode from %s to %s", (uint8_t *)&buf, 0x16u);
      }
      v25 = *(std::__shared_weak_count **)(a1 + 80);
      if (!v25 || (v26 = *(_QWORD *)(a1 + 72), (v27 = std::__shared_weak_count::lock(v25)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v28 = v27;
      p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v30 = __ldxr(p_shared_weak_owners);
      while (__stxr(v30 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
      *(_DWORD *)(a1 + 152) = data_low;
      *(_BYTE *)(a1 + 329) = 1;
      if (capabilities::abs::supportsBBUSBMux((capabilities::abs *)v27))
      {
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN8ICETrace16setPropMode_syncEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8__block_invoke;
        aBlock[3] = &__block_descriptor_tmp_93;
        aBlock[4] = a1;
        group = v7;
        if (v7)
        {
          dispatch_retain(v7);
          dispatch_group_enter(group);
        }
        v49 = v26;
        v50 = v28;
        do
          v33 = __ldxr(p_shared_weak_owners);
        while (__stxr(v33 + 1, p_shared_weak_owners));
        v34 = _Block_copy(aBlock);
        v35 = *(NSObject **)(a1 + 88);
        if (v35)
          dispatch_retain(*(dispatch_object_t *)(a1 + 88));
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
        buf.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
        v36 = *(_QWORD *)(a1 + 416);
        if (v36)
        {
          dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::callback(v46, (uint64_t)&buf);
          (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v36 + 80))(v36, data_low, v46);
          dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)v46);
        }
        if (v50)
          std::__shared_weak_count::__release_weak(v50);
        if (!group)
          goto LABEL_87;
        dispatch_group_leave(group);
        v37 = group;
        if (!group)
          goto LABEL_87;
      }
      else
      {
        v41[0] = MEMORY[0x1E0C809B0];
        v41[1] = 1174405120;
        v41[2] = ___ZN8ICETrace16setPropMode_syncEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8__block_invoke_94;
        v41[3] = &__block_descriptor_tmp_95;
        v41[4] = a1;
        object = v7;
        if (v7)
        {
          dispatch_retain(v7);
          dispatch_group_enter(object);
        }
        v43 = v26;
        v44 = v28;
        do
          v38 = __ldxr(p_shared_weak_owners);
        while (__stxr(v38 + 1, p_shared_weak_owners));
        v45 = data_low;
        v34 = _Block_copy(v41);
        v35 = *(NSObject **)(a1 + 88);
        if (v35)
          dispatch_retain(*(dispatch_object_t *)(a1 + 88));
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
        buf.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
        v39 = *(_QWORD *)(a1 + 416);
        if (v39)
        {
          dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::callback(v40, (uint64_t)&buf);
          (*(void (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v39 + 80))(v39, 0, v40);
          dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)v40);
        }
        if (v44)
          std::__shared_weak_count::__release_weak(v44);
        if (!object || (dispatch_group_leave(object), (v37 = object) == 0))
        {
LABEL_87:
          if (v35)
          {
            dispatch_release(v35);
            v34 = (void *)buf.__r_.__value_.__r.__words[0];
          }
          if (v34)
            _Block_release(v34);
          std::__shared_weak_count::__release_weak(v28);
          v12 = 1;
          if (v7)
            goto LABEL_42;
          return v12;
        }
      }
      dispatch_release(v37);
      goto LABEL_87;
    }
LABEL_27:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_15;
    goto LABEL_28;
  }
  v16 = *(NSObject **)(a1 + 40);
  v12 = 0;
  if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    goto LABEL_41;
  if (a3[23] < 0)
    a3 = *(char **)a3;
  LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a3;
  v17 = "#I Failed to set %s property";
  v18 = v16;
  v19 = 12;
LABEL_40:
  _os_log_impl(&dword_1A343C000, v18, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&buf, v19);
  v12 = 0;
LABEL_41:
  if (v7)
  {
LABEL_42:
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
  return v12;
}

void sub_1A34944A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, dispatch_group_t group, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,dispatch_group_t a28,uint64_t a29,std::__shared_weak_count *a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  NSObject *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a10);
  if (a19)
    std::__shared_weak_count::__release_weak(a19);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v38 - 112);
  std::__shared_weak_count::__release_weak(v37);
  if (v36)
  {
    dispatch_group_leave(v36);
    dispatch_release(v36);
  }
  _Unwind_Resume(a1);
}

uint64_t ICETrace::setPropActiveConfig_sync(uint64_t a1, dispatch_object_t *a2, char *a3, uint64_t *a4)
{
  NSObject *v7;
  uint64_t *v8;
  const char *v9;
  int v10;
  const std::string::value_type *v11;
  const char *v12;
  NSObject *v13;
  uint64_t v14;
  BOOL v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t *v19;
  char v20;
  __int128 v21;
  char *v22;
  std::string::value_type *v24;
  size_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  NSObject *v36;
  __int128 v37;
  uint64_t v38;
  void *v39;
  dispatch_object_t object;
  _QWORD aBlock[5];
  dispatch_group_t group;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t v45;
  unint64_t v46;
  std::string v47;
  void *__p;
  char *v49;
  uint64_t v50;
  _BYTE buf[32];
  void *v52[2];
  unint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v7);
  }
  v8 = (uint64_t *)(a1 + 160);
  if (*(char *)(a1 + 183) >= 0)
    v9 = (const char *)(a1 + 160);
  else
    v9 = *(const char **)(a1 + 160);
  v10 = *((char *)a4 + 23);
  v11 = (const std::string::value_type *)*a4;
  if (v10 >= 0)
    v12 = (const char *)a4;
  else
    v12 = (const char *)*a4;
  if (!strcasecmp(v9, v12))
  {
    v13 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl(&dword_1A343C000, v13, OS_LOG_TYPE_DEFAULT, "#I Trace config already set: %s", buf, 0xCu);
    }
    v14 = 1;
  }
  else
  {
    __p = 0;
    v49 = 0;
    v50 = 0;
    if (v10 < 0)
      std::string::__init_copy_ctor_external(&v47, v11, a4[1]);
    else
      v47 = *(std::string *)a4;
    v15 = ICETrace::loadTraceConfigFile_sync(a1, (std::string::size_type)&v47, &__p, 0);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v47.__r_.__value_.__l.__data_);
      v16 = *(NSObject **)(a1 + 40);
      v17 = v16;
      if (v15)
      {
LABEL_18:
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          v18 = a1 + 160;
          if (*(char *)(a1 + 183) < 0)
            v18 = *v8;
          v19 = a4;
          if (*((char *)a4 + 23) < 0)
            v19 = (uint64_t *)*a4;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v18;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v19;
          _os_log_impl(&dword_1A343C000, v16, OS_LOG_TYPE_DEFAULT, "#I Setting Active Config File from %s to %s", buf, 0x16u);
        }
        if (prop::bbtrace::set(a3, (const char *)a4))
        {
          if (v8 != a4)
          {
            v20 = *((_BYTE *)a4 + 23);
            if (*(char *)(a1 + 183) < 0)
            {
              if (v20 >= 0)
                v24 = (std::string::value_type *)a4;
              else
                v24 = (std::string::value_type *)*a4;
              if (v20 >= 0)
                v25 = *((unsigned __int8 *)a4 + 23);
              else
                v25 = a4[1];
              std::string::__assign_no_alias<false>((void **)(a1 + 160), v24, v25);
            }
            else if ((*((_BYTE *)a4 + 23) & 0x80) != 0)
            {
              std::string::__assign_no_alias<true>((_QWORD *)(a1 + 160), (void *)*a4, a4[1]);
            }
            else
            {
              v21 = *(_OWORD *)a4;
              *(_QWORD *)(a1 + 176) = a4[2];
              *(_OWORD *)v8 = v21;
            }
          }
          if ((void **)(a1 + 232) != &__p)
            std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>((_QWORD *)(a1 + 232), (char *)__p, v49, v49 - (_BYTE *)__p);
          v26 = *(std::__shared_weak_count **)(a1 + 80);
          if (!v26 || (v27 = *(_QWORD *)(a1 + 72), (v28 = std::__shared_weak_count::lock(v26)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v29 = v28;
          p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
          do
            v31 = __ldxr(p_shared_weak_owners);
          while (__stxr(v31 + 1, p_shared_weak_owners));
          p_shared_owners = (unint64_t *)&v28->__shared_owners_;
          do
            v33 = __ldaxr(p_shared_owners);
          while (__stlxr(v33 - 1, p_shared_owners));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v29);
          }
          v45 = 0xAAAAAAAAAAAAAAAALL;
          v46 = 0xAAAAAAAAAAAAAAAALL;
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 1174405120;
          aBlock[2] = ___ZN8ICETrace24setPropActiveConfig_syncEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8__block_invoke;
          aBlock[3] = &__block_descriptor_tmp_101;
          aBlock[4] = a1;
          group = v7;
          if (v7)
          {
            dispatch_retain(v7);
            dispatch_group_enter(group);
          }
          v43 = v27;
          v44 = v29;
          do
            v34 = __ldxr(p_shared_weak_owners);
          while (__stxr(v34 + 1, p_shared_weak_owners));
          v35 = _Block_copy(aBlock);
          v36 = *(NSObject **)(a1 + 88);
          if (v36)
            dispatch_retain(*(dispatch_object_t *)(a1 + 88));
          v45 = (unint64_t)v35;
          v46 = (unint64_t)v36;
          if (!*(_QWORD *)(a1 + 416))
          {
LABEL_72:
            if (v36)
              dispatch_release(v36);
            if (v35)
              _Block_release(v35);
            if (v44)
              std::__shared_weak_count::__release_weak(v44);
            if (group)
            {
              dispatch_group_leave(group);
              if (group)
                dispatch_release(group);
            }
            std::__shared_weak_count::__release_weak(v29);
            v14 = 1;
            v22 = (char *)__p;
            if (!__p)
              goto LABEL_33;
LABEL_32:
            v49 = v22;
            operator delete(v22);
            goto LABEL_33;
          }
          v53 = 0xAAAAAAAAAAAAAAAALL;
          *(_QWORD *)&v37 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v37 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&buf[16] = v37;
          *(_OWORD *)v52 = v37;
          *(_OWORD *)buf = v37;
          trace::TraceMaskInfo::TraceMaskInfo(buf, a1 + 232, a1 + 256);
          v38 = *(_QWORD *)(a1 + 416);
          if (v35)
          {
            v39 = _Block_copy(v35);
            object = v36;
            if (!v36)
            {
LABEL_64:
              (*(void (**)(uint64_t, _BYTE *, void **))(*(_QWORD *)v38 + 88))(v38, buf, &v39);
              if (object)
                dispatch_release(object);
              if (v39)
                _Block_release(v39);
              *(_QWORD *)buf = &off_1E4A08C08;
              if (v52[0])
              {
                v52[1] = v52[0];
                operator delete(v52[0]);
              }
              if (*(_QWORD *)&buf[8])
              {
                *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
                operator delete(*(void **)&buf[8]);
              }
              goto LABEL_72;
            }
          }
          else
          {
            v39 = 0;
            object = v36;
            if (!v36)
              goto LABEL_64;
          }
          dispatch_retain(v36);
          goto LABEL_64;
        }
LABEL_31:
        v14 = 0;
        v22 = (char *)__p;
        if (!__p)
          goto LABEL_33;
        goto LABEL_32;
      }
    }
    else
    {
      v16 = *(NSObject **)(a1 + 40);
      v17 = v16;
      if (v15)
        goto LABEL_18;
    }
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      goto LABEL_31;
    if (*((char *)a4 + 23) < 0)
      a4 = (uint64_t *)*a4;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = a4;
    _os_log_error_impl(&dword_1A343C000, v16, OS_LOG_TYPE_ERROR, "Failed to load trace config %s", buf, 0xCu);
    v14 = 0;
    v22 = (char *)__p;
    if (__p)
      goto LABEL_32;
  }
LABEL_33:
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
  return v14;
}

void sub_1A3494ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, dispatch_group_t group, uint64_t a17, std::__shared_weak_count *a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,uint64_t a29,char a30)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ICETrace::setPropSleepConfig_sync(uint64_t a1, dispatch_object_t *a2, char *a3, uint64_t *a4)
{
  NSObject *v7;
  uint64_t *v8;
  const char *v9;
  int v10;
  const std::string::value_type *v11;
  const char *v12;
  NSObject *v13;
  uint64_t v14;
  BOOL v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t *v19;
  char v20;
  __int128 v21;
  char *v22;
  std::string::value_type *v24;
  size_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  NSObject *v36;
  __int128 v37;
  uint64_t v38;
  void *v39;
  dispatch_object_t object;
  _QWORD aBlock[5];
  dispatch_group_t group;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t v45;
  unint64_t v46;
  std::string v47;
  void *__p;
  char *v49;
  uint64_t v50;
  _BYTE buf[32];
  void *v52[2];
  unint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v7);
  }
  v8 = (uint64_t *)(a1 + 184);
  if (*(char *)(a1 + 207) >= 0)
    v9 = (const char *)(a1 + 184);
  else
    v9 = *(const char **)(a1 + 184);
  v10 = *((char *)a4 + 23);
  v11 = (const std::string::value_type *)*a4;
  if (v10 >= 0)
    v12 = (const char *)a4;
  else
    v12 = (const char *)*a4;
  if (!strcasecmp(v9, v12))
  {
    v13 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl(&dword_1A343C000, v13, OS_LOG_TYPE_DEFAULT, "#I Trace config already set: %s", buf, 0xCu);
    }
    v14 = 1;
  }
  else
  {
    __p = 0;
    v49 = 0;
    v50 = 0;
    if (v10 < 0)
      std::string::__init_copy_ctor_external(&v47, v11, a4[1]);
    else
      v47 = *(std::string *)a4;
    v15 = ICETrace::loadTraceConfigFile_sync(a1, (std::string::size_type)&v47, &__p, 0);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v47.__r_.__value_.__l.__data_);
      v16 = *(NSObject **)(a1 + 40);
      v17 = v16;
      if (v15)
      {
LABEL_18:
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          v18 = a1 + 184;
          if (*(char *)(a1 + 207) < 0)
            v18 = *v8;
          v19 = a4;
          if (*((char *)a4 + 23) < 0)
            v19 = (uint64_t *)*a4;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v18;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v19;
          _os_log_impl(&dword_1A343C000, v16, OS_LOG_TYPE_DEFAULT, "#I Setting Sleep Config File from %s to %s", buf, 0x16u);
        }
        if (prop::bbtrace::set(a3, (const char *)a4))
        {
          if (v8 != a4)
          {
            v20 = *((_BYTE *)a4 + 23);
            if (*(char *)(a1 + 207) < 0)
            {
              if (v20 >= 0)
                v24 = (std::string::value_type *)a4;
              else
                v24 = (std::string::value_type *)*a4;
              if (v20 >= 0)
                v25 = *((unsigned __int8 *)a4 + 23);
              else
                v25 = a4[1];
              std::string::__assign_no_alias<false>((void **)(a1 + 184), v24, v25);
            }
            else if ((*((_BYTE *)a4 + 23) & 0x80) != 0)
            {
              std::string::__assign_no_alias<true>((_QWORD *)(a1 + 184), (void *)*a4, a4[1]);
            }
            else
            {
              v21 = *(_OWORD *)a4;
              *(_QWORD *)(a1 + 200) = a4[2];
              *(_OWORD *)v8 = v21;
            }
          }
          if ((void **)(a1 + 256) != &__p)
            std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>((_QWORD *)(a1 + 256), (char *)__p, v49, v49 - (_BYTE *)__p);
          v26 = *(std::__shared_weak_count **)(a1 + 80);
          if (!v26 || (v27 = *(_QWORD *)(a1 + 72), (v28 = std::__shared_weak_count::lock(v26)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v29 = v28;
          p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
          do
            v31 = __ldxr(p_shared_weak_owners);
          while (__stxr(v31 + 1, p_shared_weak_owners));
          p_shared_owners = (unint64_t *)&v28->__shared_owners_;
          do
            v33 = __ldaxr(p_shared_owners);
          while (__stlxr(v33 - 1, p_shared_owners));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v29);
          }
          v45 = 0xAAAAAAAAAAAAAAAALL;
          v46 = 0xAAAAAAAAAAAAAAAALL;
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 1174405120;
          aBlock[2] = ___ZN8ICETrace23setPropSleepConfig_syncEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8__block_invoke;
          aBlock[3] = &__block_descriptor_tmp_103;
          aBlock[4] = a1;
          group = v7;
          if (v7)
          {
            dispatch_retain(v7);
            dispatch_group_enter(group);
          }
          v43 = v27;
          v44 = v29;
          do
            v34 = __ldxr(p_shared_weak_owners);
          while (__stxr(v34 + 1, p_shared_weak_owners));
          v35 = _Block_copy(aBlock);
          v36 = *(NSObject **)(a1 + 88);
          if (v36)
            dispatch_retain(*(dispatch_object_t *)(a1 + 88));
          v45 = (unint64_t)v35;
          v46 = (unint64_t)v36;
          if (!*(_QWORD *)(a1 + 416))
          {
LABEL_72:
            if (v36)
              dispatch_release(v36);
            if (v35)
              _Block_release(v35);
            if (v44)
              std::__shared_weak_count::__release_weak(v44);
            if (group)
            {
              dispatch_group_leave(group);
              if (group)
                dispatch_release(group);
            }
            std::__shared_weak_count::__release_weak(v29);
            v14 = 1;
            v22 = (char *)__p;
            if (!__p)
              goto LABEL_33;
LABEL_32:
            v49 = v22;
            operator delete(v22);
            goto LABEL_33;
          }
          v53 = 0xAAAAAAAAAAAAAAAALL;
          *(_QWORD *)&v37 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v37 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&buf[16] = v37;
          *(_OWORD *)v52 = v37;
          *(_OWORD *)buf = v37;
          trace::TraceMaskInfo::TraceMaskInfo(buf, a1 + 232, a1 + 256);
          v38 = *(_QWORD *)(a1 + 416);
          if (v35)
          {
            v39 = _Block_copy(v35);
            object = v36;
            if (!v36)
            {
LABEL_64:
              (*(void (**)(uint64_t, _BYTE *, void **))(*(_QWORD *)v38 + 88))(v38, buf, &v39);
              if (object)
                dispatch_release(object);
              if (v39)
                _Block_release(v39);
              *(_QWORD *)buf = &off_1E4A08C08;
              if (v52[0])
              {
                v52[1] = v52[0];
                operator delete(v52[0]);
              }
              if (*(_QWORD *)&buf[8])
              {
                *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
                operator delete(*(void **)&buf[8]);
              }
              goto LABEL_72;
            }
          }
          else
          {
            v39 = 0;
            object = v36;
            if (!v36)
              goto LABEL_64;
          }
          dispatch_retain(v36);
          goto LABEL_64;
        }
LABEL_31:
        v14 = 0;
        v22 = (char *)__p;
        if (!__p)
          goto LABEL_33;
        goto LABEL_32;
      }
    }
    else
    {
      v16 = *(NSObject **)(a1 + 40);
      v17 = v16;
      if (v15)
        goto LABEL_18;
    }
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      goto LABEL_31;
    if (*((char *)a4 + 23) < 0)
      a4 = (uint64_t *)*a4;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = a4;
    _os_log_error_impl(&dword_1A343C000, v16, OS_LOG_TYPE_ERROR, "Failed to load trace config %s", buf, 0xCu);
    v14 = 0;
    v22 = (char *)__p;
    if (__p)
      goto LABEL_32;
  }
LABEL_33:
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
  return v14;
}

void sub_1A349508C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, dispatch_group_t group, uint64_t a17, std::__shared_weak_count *a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,uint64_t a29,char a30)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ICETrace::setPropBackgroundMode_sync(uint64_t a1, NSObject **a2, char *a3, const char *a4)
{
  int v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  int v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  std::string::size_type v27;
  std::string::value_type v28;
  uint64_t v29;
  config::hw *v30;
  int v31;
  uint64_t v32;
  const void *v33;
  void *v34;
  NSObject *v35;
  const char *v36;
  void **v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  const void *v41;
  void *v42;
  void *v43;
  void *v44;
  _QWORD v45[2];
  _QWORD aBlock[5];
  dispatch_group_t group;
  uint64_t v48;
  std::__shared_weak_count *v49;
  char v50;
  std::string __p;
  void *v52[2];
  char v53;
  std::string v54;
  std::string buf;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (!capabilities::abs::supportsTraceBackgroundMode((capabilities::abs *)a1))
    return 0;
  v8 = prop::bbtrace::set(a3, a4);
  v9 = *a2;
  if (v9)
  {
    dispatch_retain(v9);
    dispatch_group_enter(v9);
  }
  v10 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v10 || (v11 = *(_QWORD *)(a1 + 72), (v12 = std::__shared_weak_count::lock(v10)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (v17)
  {
    if (v8)
      goto LABEL_12;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
    if (v8)
    {
LABEL_12:
      v50 = -86;
      memset(&__p, 0, sizeof(__p));
      v53 = 7;
      strcpy((char *)v52, "BBTrace");
      memset(&buf, 0, sizeof(buf));
      v18 = defaults::get((char *)v52, a3, &buf);
      if (v18)
      {
        prop::file::get<std::string>((const void **)v52, (uint64_t)a3, (uint64_t)&buf, &v54);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __p = v54;
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(buf.__r_.__value_.__l.__data_);
        if ((v53 & 0x80000000) == 0)
        {
LABEL_18:
          if (v18)
            goto LABEL_19;
          goto LABEL_29;
        }
      }
      else if ((v53 & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(v52[0]);
      if (v18)
      {
LABEL_19:
        v19 = util::convert<BOOL>(&__p, (BOOL *)&v50, 0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_20;
        goto LABEL_30;
      }
LABEL_29:
      v19 = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_20:
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!(_DWORD)v19)
        {
LABEL_59:
          std::__shared_weak_count::__release_weak(v13);
          if (!v9)
            return v19;
          goto LABEL_25;
        }
LABEL_31:
        v21 = v50;
        if (v50 == *(_BYTE *)(a1 + 304))
          goto LABEL_59;
        v22 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          v23 = "enabled";
          if (!v21)
            v23 = "disabled";
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
          _os_log_impl(&dword_1A343C000, v22, OS_LOG_TYPE_DEFAULT, "#I Setting BB Trace BackgroundMode to %s", (uint8_t *)&buf, 0xCu);
          LOBYTE(v21) = v50;
        }
        *(_BYTE *)(a1 + 304) = v21;
        if (!*(_BYTE *)(a1 + 336)
          || (v24 = *(_QWORD *)(a1 + 416)) == 0
          || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 152))(v24))
        {
          v35 = *(NSObject **)(a1 + 40);
          if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
            goto LABEL_59;
          if (v50)
            v36 = "enable";
          else
            v36 = "disable";
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
          _os_log_impl(&dword_1A343C000, v35, OS_LOG_TYPE_DEFAULT, "#I Trace is not enabled/started. Restart Trace for 'BackgroundMode %s' action to take effect", (uint8_t *)&buf, 0xCu);
LABEL_57:
          std::__shared_weak_count::__release_weak(v13);
          v19 = 1;
          if (!v9)
            return v19;
          goto LABEL_25;
        }
        v54.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
        v54.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN8ICETrace26setPropBackgroundMode_syncEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8__block_invoke;
        aBlock[3] = &__block_descriptor_tmp_86;
        aBlock[4] = a1;
        group = v9;
        if (v9)
        {
          dispatch_retain(v9);
          dispatch_group_enter(group);
        }
        v48 = v11;
        v49 = v13;
        do
          v25 = __ldxr(p_shared_weak_owners);
        while (__stxr(v25 + 1, p_shared_weak_owners));
        v26 = _Block_copy(aBlock);
        v27 = *(_QWORD *)(a1 + 88);
        if (v27)
          dispatch_retain(*(dispatch_object_t *)(a1 + 88));
        v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
        v54.__r_.__value_.__l.__size_ = v27;
        buf.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
        buf.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
        v28 = *(_BYTE *)(a1 + 304);
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E4A08BE0;
        buf.__r_.__value_.__s.__data_[8] = 1;
        buf.__r_.__value_.__s.__data_[9] = v28;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 4) = *(_QWORD *)(a1 + 308);
        v29 = *(_QWORD *)(a1 + 416);
        dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::callback(v45, (uint64_t)&v54);
        (*(void (**)(uint64_t, std::string *, _QWORD *))(*(_QWORD *)v29 + 96))(v29, &buf, v45);
        v30 = (config::hw *)dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)v45);
        v31 = *(_DWORD *)(a1 + 152);
        if (v31 != 6 && v31 || (config::hw::watch(v30) & 1) != 0 || *(_BYTE *)(a1 + 304))
        {
          v32 = *(_QWORD *)(a1 + 392);
          v33 = *(const void **)(a1 + 408);
          if (v33)
          {
            v34 = _Block_copy(v33);
            v43 = v34;
            BasebandTransport::reportStatus(v32, 0, &v43);
            if (v34)
              _Block_release(v34);
            goto LABEL_63;
          }
          v43 = 0;
          v37 = &v43;
          v38 = v32;
          v39 = 0;
        }
        else
        {
          v40 = *(_QWORD *)(a1 + 392);
          v41 = *(const void **)(a1 + 408);
          if (v41)
          {
            v42 = _Block_copy(v41);
            v44 = v42;
            BasebandTransport::reportStatus(v40, 600, &v44);
            if (v42)
              _Block_release(v42);
            goto LABEL_63;
          }
          v44 = 0;
          v37 = &v44;
          v38 = v40;
          v39 = 600;
        }
        BasebandTransport::reportStatus(v38, v39, v37);
LABEL_63:
        dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&v54);
        if (v49)
          std::__shared_weak_count::__release_weak(v49);
        if (group)
        {
          dispatch_group_leave(group);
          if (group)
            dispatch_release(group);
        }
        goto LABEL_57;
      }
LABEL_30:
      if (!(_DWORD)v19)
        goto LABEL_59;
      goto LABEL_31;
    }
  }
  std::__shared_weak_count::__release_weak(v13);
  v19 = 0;
  if (v9)
  {
LABEL_25:
    dispatch_group_leave(v9);
    dispatch_release(v9);
  }
  return v19;
}

void sub_1A3495690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, dispatch_group_t group, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ICETrace::setPropHighWatermark_sync(uint64_t a1, dispatch_object_t *a2, char *a3, const char *a4)
{
  NSObject *v7;
  _BOOL4 v8;
  uint64_t v9;
  int v10;
  int v11;
  NSObject *v12;
  int v14;
  std::string v15;
  void *__p[2];
  char v17;
  std::string v18;
  std::string buf;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v7);
  }
  if (!prop::bbtrace::set(a3, a4))
  {
    v9 = 0;
    goto LABEL_21;
  }
  v14 = -1431655766;
  memset(&v15, 0, sizeof(v15));
  v17 = 7;
  strcpy((char *)__p, "BBTrace");
  memset(&buf, 0, sizeof(buf));
  v8 = defaults::get((char *)__p, a3, &buf);
  if (v8)
  {
    prop::file::get<std::string>((const void **)__p, (uint64_t)a3, (uint64_t)&buf, &v18);
    v15 = v18;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v17 & 0x80000000) == 0)
    {
LABEL_8:
      if (v8)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v17 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(__p[0]);
  if (v8)
  {
LABEL_9:
    v9 = util::convert<int>(&v15, &v14, 0);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_15;
    goto LABEL_16;
  }
LABEL_14:
  v9 = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
LABEL_15:
    operator delete(v15.__r_.__value_.__l.__data_);
LABEL_16:
  if ((_DWORD)v9)
  {
    v10 = v14;
    v11 = *(_DWORD *)(a1 + 308);
    if (v14 != v11)
    {
      v12 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = v11;
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v10;
        _os_log_impl(&dword_1A343C000, v12, OS_LOG_TYPE_DEFAULT, "#I Setting high watermark from %d to %d", (uint8_t *)&buf, 0xEu);
        v10 = v14;
      }
      *(_DWORD *)(a1 + 308) = v10;
    }
  }
LABEL_21:
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
  return v9;
}

void sub_1A3495988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  NSObject *v23;

  if (a16 < 0)
    operator delete(__p);
  if (v23)
  {
    dispatch_group_leave(v23);
    dispatch_release(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ICETrace::setPropLowWatermark_sync(uint64_t a1, dispatch_object_t *a2, char *a3, const char *a4)
{
  NSObject *v7;
  _BOOL4 v8;
  uint64_t v9;
  int v10;
  int v11;
  NSObject *v12;
  int v14;
  std::string v15;
  void *__p[2];
  char v17;
  std::string v18;
  std::string buf;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v7);
  }
  if (!prop::bbtrace::set(a3, a4))
  {
    v9 = 0;
    goto LABEL_21;
  }
  v14 = -1431655766;
  memset(&v15, 0, sizeof(v15));
  v17 = 7;
  strcpy((char *)__p, "BBTrace");
  memset(&buf, 0, sizeof(buf));
  v8 = defaults::get((char *)__p, a3, &buf);
  if (v8)
  {
    prop::file::get<std::string>((const void **)__p, (uint64_t)a3, (uint64_t)&buf, &v18);
    v15 = v18;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v17 & 0x80000000) == 0)
    {
LABEL_8:
      if (v8)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v17 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(__p[0]);
  if (v8)
  {
LABEL_9:
    v9 = util::convert<int>(&v15, &v14, 0);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_15;
    goto LABEL_16;
  }
LABEL_14:
  v9 = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
LABEL_15:
    operator delete(v15.__r_.__value_.__l.__data_);
LABEL_16:
  if ((_DWORD)v9)
  {
    v10 = v14;
    v11 = *(_DWORD *)(a1 + 312);
    if (v14 != v11)
    {
      v12 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = v11;
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v10;
        _os_log_impl(&dword_1A343C000, v12, OS_LOG_TYPE_DEFAULT, "#I Setting low watermark from %d to %d", (uint8_t *)&buf, 0xEu);
        v10 = v14;
      }
      *(_DWORD *)(a1 + 312) = v10;
    }
  }
LABEL_21:
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
  return v9;
}

void sub_1A3495BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  NSObject *v23;

  if (a16 < 0)
    operator delete(__p);
  if (v23)
  {
    dispatch_group_leave(v23);
    dispatch_release(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ICETrace::setPropSleepTraceEnabled_sync(uint64_t a1, dispatch_object_t *a2, char *a3, const char *a4)
{
  NSObject *v7;
  _BOOL4 v8;
  uint64_t v9;
  int v10;
  int v11;
  NSObject *v12;
  char v14;
  std::string v15;
  void *__p[2];
  char v17;
  std::string v18;
  std::string buf;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v7);
  }
  if (!prop::bbtrace::set(a3, a4))
  {
    v9 = 0;
    goto LABEL_21;
  }
  v14 = -86;
  memset(&v15, 0, sizeof(v15));
  v17 = 7;
  strcpy((char *)__p, "BBTrace");
  memset(&buf, 0, sizeof(buf));
  v8 = defaults::get((char *)__p, a3, &buf);
  if (v8)
  {
    prop::file::get<std::string>((const void **)__p, (uint64_t)a3, (uint64_t)&buf, &v18);
    v15 = v18;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v17 & 0x80000000) == 0)
    {
LABEL_8:
      if (v8)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v17 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(__p[0]);
  if (v8)
  {
LABEL_9:
    v9 = util::convert<BOOL>(&v15, (BOOL *)&v14, 0);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_15;
    goto LABEL_16;
  }
LABEL_14:
  v9 = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
LABEL_15:
    operator delete(v15.__r_.__value_.__l.__data_);
LABEL_16:
  if ((_DWORD)v9)
  {
    v10 = v14;
    v11 = *(unsigned __int8 *)(a1 + 316);
    if (v14 != v11)
    {
      v12 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = v11;
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v10;
        _os_log_impl(&dword_1A343C000, v12, OS_LOG_TYPE_DEFAULT, "#I Setting sleep trace enabled from %d to %d", (uint8_t *)&buf, 0xEu);
        LOBYTE(v10) = v14;
      }
      *(_BYTE *)(a1 + 316) = v10;
    }
  }
LABEL_21:
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
  return v9;
}

void sub_1A3495E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  NSObject *v23;

  if (a16 < 0)
    operator delete(__p);
  if (v23)
  {
    dispatch_group_leave(v23);
    dispatch_release(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ICETrace::setPropETBSetup_sync(uint64_t a1, uint64_t a2, char *a3, uint64_t *a4)
{
  uint64_t *v7;
  const char *v8;
  const char *v9;
  __int128 v10;
  const void *v11;
  size_t v12;
  size_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  size_t v20;
  size_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t *v28;
  char v29;
  __int128 v30;
  void *v31;
  size_t v32;
  std::string v33;
  void *v34;
  char v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  __int128 v40;
  char v41;
  char v42[8];
  _QWORD *v43;
  void *__p[2];
  char v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE __dst[24];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (!capabilities::abs::supportsETB((capabilities::abs *)a1))
    return 0;
  if ((*(char *)(a1 + 231) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 231))
      return 0;
LABEL_6:
    v7 = (uint64_t *)(a1 + 208);
    if (*(char *)(a1 + 231) >= 0)
      v8 = (const char *)(a1 + 208);
    else
      v8 = *(const char **)(a1 + 208);
    if (*((char *)a4 + 23) >= 0)
      v9 = (const char *)a4;
    else
      v9 = (const char *)*a4;
    if (!strcasecmp(v8, v9))
      return 0;
    *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v55 = v10;
    v56 = v10;
    v53 = v10;
    v54 = v10;
    v51 = v10;
    v52 = v10;
    v50 = v10;
    v11 = (const void *)*MEMORY[0x1E0CFB598];
    v12 = strlen((const char *)*MEMORY[0x1E0CFB598]);
    if (v12 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v13 = v12;
    if (v12 >= 0x17)
    {
      v17 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v17 = v12 | 7;
      v18 = v17 + 1;
      v14 = operator new(v17 + 1);
      *(_QWORD *)&__dst[8] = v13;
      *(_QWORD *)&__dst[16] = v18 | 0x8000000000000000;
      *(_QWORD *)__dst = v14;
    }
    else
    {
      __dst[23] = v12;
      v14 = __dst;
      if (!v12)
      {
LABEL_23:
        v14[v13] = 0;
        v19 = (const void *)*MEMORY[0x1E0CFBFA0];
        v20 = strlen((const char *)*MEMORY[0x1E0CFBFA0]);
        if (v20 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v21 = v20;
        if (v20 >= 0x17)
        {
          v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v20 | 7) != 0x17)
            v23 = v20 | 7;
          v24 = v23 + 1;
          v22 = operator new(v23 + 1);
          *((_QWORD *)&v48 + 1) = v21;
          v49 = v24 | 0x8000000000000000;
          *(_QWORD *)&v48 = v22;
        }
        else
        {
          HIBYTE(v49) = v20;
          v22 = &v48;
          if (!v20)
          {
LABEL_31:
            v22[v21] = 0;
            v25 = (char *)operator new(0x20uLL);
            v46 = v25;
            v47 = xmmword_1A357F820;
            strcpy(v25, "ETB Config file has changed");
            Timestamp::Timestamp((Timestamp *)v42);
            Timestamp::asString((uint64_t)v42, 0, 9, __p);
            v41 = 0;
            LOBYTE(v40) = 0;
            ResetInfo::ResetInfo((std::string *)&v50, (__int128 *)__dst, &v48, (__int128 *)&v46, (uint64_t)__p, 7, &v40);
            if (v45 < 0)
              operator delete(__p[0]);
            std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v42, v43);
            operator delete(v25);
            if (SHIBYTE(v49) < 0)
            {
              operator delete((void *)v48);
              if ((__dst[23] & 0x80000000) == 0)
                goto LABEL_35;
            }
            else if ((__dst[23] & 0x80000000) == 0)
            {
              goto LABEL_35;
            }
            operator delete(*(void **)__dst);
LABEL_35:
            ResetInfo::ResetInfo(&v33, &v50);
            ICETrace::commandResetModem_sync(a1, (__int128 *)&v33);
            if (v39 < 0)
            {
              operator delete(v38);
              if ((v37 & 0x80000000) == 0)
              {
LABEL_37:
                if ((v35 & 0x80000000) == 0)
                  goto LABEL_38;
                goto LABEL_54;
              }
            }
            else if ((v37 & 0x80000000) == 0)
            {
              goto LABEL_37;
            }
            operator delete(v36);
            if ((v35 & 0x80000000) == 0)
            {
LABEL_38:
              if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_39;
LABEL_55:
              operator delete(v33.__r_.__value_.__l.__data_);
LABEL_39:
              v15 = prop::bbtrace::set(a3, (const char *)a4);
              if ((_DWORD)v15)
              {
                v26 = *(NSObject **)(a1 + 40);
                if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
                {
                  v27 = a1 + 208;
                  if (*(char *)(a1 + 231) < 0)
                    v27 = *v7;
                  v28 = a4;
                  if (*((char *)a4 + 23) < 0)
                    v28 = (uint64_t *)*a4;
                  *(_DWORD *)__dst = 136315394;
                  *(_QWORD *)&__dst[4] = v27;
                  *(_WORD *)&__dst[12] = 2080;
                  *(_QWORD *)&__dst[14] = v28;
                  _os_log_impl(&dword_1A343C000, v26, OS_LOG_TYPE_DEFAULT, "#I Setting ETB Config File from %s to %s", __dst, 0x16u);
                }
                if (v7 != a4)
                {
                  v29 = *((_BYTE *)a4 + 23);
                  if (*(char *)(a1 + 231) < 0)
                  {
                    if (v29 >= 0)
                      v31 = a4;
                    else
                      v31 = (void *)*a4;
                    if (v29 >= 0)
                      v32 = *((unsigned __int8 *)a4 + 23);
                    else
                      v32 = a4[1];
                    std::string::__assign_no_alias<false>((void **)(a1 + 208), v31, v32);
                  }
                  else if ((*((_BYTE *)a4 + 23) & 0x80) != 0)
                  {
                    std::string::__assign_no_alias<true>((_QWORD *)(a1 + 208), (void *)*a4, a4[1]);
                  }
                  else
                  {
                    v30 = *(_OWORD *)a4;
                    *(_QWORD *)(a1 + 224) = a4[2];
                    *(_OWORD *)v7 = v30;
                  }
                }
              }
              if (SHIBYTE(v56) < 0)
              {
                operator delete(*((void **)&v55 + 1));
                if ((SBYTE7(v54) & 0x80000000) == 0)
                {
LABEL_66:
                  if ((SHIBYTE(v52) & 0x80000000) == 0)
                    goto LABEL_67;
                  goto LABEL_71;
                }
              }
              else if ((SBYTE7(v54) & 0x80000000) == 0)
              {
                goto LABEL_66;
              }
              operator delete((void *)v53);
              if ((SHIBYTE(v52) & 0x80000000) == 0)
              {
LABEL_67:
                if ((SBYTE7(v51) & 0x80000000) == 0)
                  return v15;
LABEL_72:
                operator delete((void *)v50);
                return v15;
              }
LABEL_71:
              operator delete(*((void **)&v51 + 1));
              if ((SBYTE7(v51) & 0x80000000) == 0)
                return v15;
              goto LABEL_72;
            }
LABEL_54:
            operator delete(v34);
            if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_39;
            goto LABEL_55;
          }
        }
        memmove(v22, v19, v21);
        goto LABEL_31;
      }
    }
    memmove(v14, v11, v13);
    goto LABEL_23;
  }
  if (*(_QWORD *)(a1 + 216))
    goto LABEL_6;
  return 0;
}

void sub_1A3496330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  ResetInfo::~ResetInfo(&a10);
  ResetInfo::~ResetInfo(&a39);
  _Unwind_Resume(a1);
}

void sub_1A349634C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,_QWORD *a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  void *v44;
  uint64_t v45;

  if (a35 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a27, a28);
  operator delete(v44);
  if (a44 < 0)
    operator delete(a39);
  if (*(char *)(v45 - 105) < 0)
    operator delete(*(void **)(v45 - 128));
  _Unwind_Resume(a1);
}

void sub_1A34963C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  ResetInfo::~ResetInfo(&a39);
  _Unwind_Resume(a1);
}

uint64_t ICETrace::setPropMaxMemoryFileCount_sync(uint64_t a1, dispatch_object_t *a2, char *a3, const char *a4)
{
  NSObject *v7;
  _BOOL4 v8;
  uint64_t v9;
  int v10;
  int v11;
  NSObject *v12;
  TraceFileCollection *v13;
  int v15;
  std::string v16;
  void *__p[2];
  char v18;
  std::string v19;
  std::string buf;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v7);
  }
  if (!prop::bbtrace::set(a3, a4))
  {
    v9 = 0;
    goto LABEL_23;
  }
  v15 = -1431655766;
  memset(&v16, 0, sizeof(v16));
  v18 = 7;
  strcpy((char *)__p, "BBTrace");
  memset(&buf, 0, sizeof(buf));
  v8 = defaults::get((char *)__p, a3, &buf);
  if (v8)
  {
    prop::file::get<std::string>((const void **)__p, (uint64_t)a3, (uint64_t)&buf, &v19);
    v16 = v19;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v18 & 0x80000000) == 0)
    {
LABEL_8:
      if (v8)
        goto LABEL_9;
LABEL_14:
      v9 = 0;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_17;
LABEL_15:
      if (!(_DWORD)v9)
        goto LABEL_23;
      goto LABEL_18;
    }
  }
  else if ((v18 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(__p[0]);
  if (!v8)
    goto LABEL_14;
LABEL_9:
  v9 = util::convert<unsigned int>(&v16, &v15, 0);
  if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_15;
LABEL_17:
  operator delete(v16.__r_.__value_.__l.__data_);
  if (!(_DWORD)v9)
    goto LABEL_23;
LABEL_18:
  v10 = v15;
  v11 = *(_DWORD *)(a1 + 332);
  if (v15 != v11)
  {
    v12 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v11;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v10;
      _os_log_impl(&dword_1A343C000, v12, OS_LOG_TYPE_DEFAULT, "#I Setting max memory file count from %u to %u", (uint8_t *)&buf, 0xEu);
      v10 = v15;
    }
    *(_DWORD *)(a1 + 332) = v10;
    v13 = *(TraceFileCollection **)(a1 + 368);
    if (v13)
      TraceFileCollection::setMaxMemoryFileCount(v13);
  }
LABEL_23:
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
  return v9;
}

void sub_1A34965E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  NSObject *v23;

  if (v23)
  {
    dispatch_group_leave(v23);
    dispatch_release(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ICETrace::setPropFileSize_sync(uint64_t a1, uint64_t a2, char *a3, const char *a4)
{
  _BOOL4 v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  NSObject *v10;
  TraceFileCollection *v11;
  int v13;
  std::string __p;
  void *v15[2];
  char v16;
  std::string v17;
  std::string buf;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!prop::bbtrace::set(a3, a4))
    return 0;
  v13 = -1431655766;
  memset(&__p, 0, sizeof(__p));
  v16 = 7;
  strcpy((char *)v15, "BBTrace");
  memset(&buf, 0, sizeof(buf));
  v6 = defaults::get((char *)v15, a3, &buf);
  if (v6)
  {
    prop::file::get<std::string>((const void **)v15, (uint64_t)a3, (uint64_t)&buf, &v17);
    __p = v17;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_6:
      if (v6)
        goto LABEL_7;
      goto LABEL_13;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(v15[0]);
  if (v6)
  {
LABEL_7:
    v7 = util::convert<unsigned int>(&__p, &v13, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_8;
LABEL_14:
    if (!(_DWORD)v7)
      return v7;
    goto LABEL_15;
  }
LABEL_13:
  v7 = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_14;
LABEL_8:
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!(_DWORD)v7)
    return v7;
LABEL_15:
  v8 = v13;
  v9 = *(_DWORD *)(a1 + 348);
  if (v13 != v9)
  {
    v10 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v9 >> 10;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v8 >> 10;
      _os_log_impl(&dword_1A343C000, v10, OS_LOG_TYPE_DEFAULT, "#I Changing file size from %d KB to %d KB", (uint8_t *)&buf, 0xEu);
      v8 = v13;
    }
    *(_DWORD *)(a1 + 348) = v8;
    v11 = *(TraceFileCollection **)(a1 + 368);
    if (v11)
      TraceFileCollection::setFileSize(v11);
  }
  return v7;
}

void sub_1A349683C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ICETrace::setPropTransportReadSize_sync(_BYTE *a1, NSObject **a2, char *a3, const char *a4)
{
  uint64_t v7;
  unsigned int v9;
  unsigned int v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  CFTypeRef v14;
  dispatch_object_t v15;
  CFTypeRef cf;
  dispatch_object_t object;
  unsigned int v18;
  std::string __p;
  void *v20[2];
  char v21;
  std::string v22;
  std::string buf;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!prop::bbtrace::set(a3, a4))
    return 0;
  v18 = 0;
  memset(&__p, 0, sizeof(__p));
  v21 = 7;
  strcpy((char *)v20, "BBTrace");
  memset(&buf, 0, sizeof(buf));
  v7 = defaults::get((char *)v20, a3, &buf);
  if ((_DWORD)v7)
  {
    prop::file::get<std::string>((const void **)v20, (uint64_t)a3, (uint64_t)&buf, &v22);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v22;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v21 & 0x80000000) == 0)
    {
LABEL_8:
      if (!(_DWORD)v7)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v21 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(v20[0]);
  if (!(_DWORD)v7)
  {
LABEL_9:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v7 = util::convert<unsigned int>(&__p, &v18, 0);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if (!(_DWORD)v7)
      return v7;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!(_DWORD)v7)
    return v7;
LABEL_18:
  v9 = v18;
  v10 = *((_DWORD *)a1 + 88);
  if (v18 != v10)
  {
    v11 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v10 >> 10;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v9 >> 10;
      _os_log_impl(&dword_1A343C000, v11, OS_LOG_TYPE_DEFAULT, "#I Updating trace transport read-size from %u KB to %u KB", (uint8_t *)&buf, 0xEu);
      v9 = v18;
    }
    *((_DWORD *)a1 + 88) = v9;
    if (a1[336])
    {
      v12 = *a2;
      object = v12;
      if (v12)
        dispatch_retain(v12);
      cf = 0;
      (*(void (**)(_BYTE *, dispatch_object_t *, CFTypeRef *))(*(_QWORD *)a1 + 192))(a1, &object, &cf);
      if (cf)
        CFRelease(cf);
      if (object)
        dispatch_release(object);
      v13 = *a2;
      v15 = v13;
      if (v13)
        dispatch_retain(v13);
      v14 = 0;
      (*(void (**)(_BYTE *, dispatch_object_t *, CFTypeRef *))(*(_QWORD *)a1 + 184))(a1, &v15, &v14);
      if (v14)
        CFRelease(v14);
      if (v15)
        dispatch_release(v15);
    }
  }
  return v7;
}

void sub_1A3496AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, dispatch_object_t object, char a12, dispatch_object_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ICETrace::setPropTransportReadCount_sync(_BYTE *a1, NSObject **a2, char *a3, const char *a4)
{
  uint64_t v7;
  int v9;
  int v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  CFTypeRef v14;
  dispatch_object_t v15;
  CFTypeRef cf;
  dispatch_object_t object;
  int v18;
  std::string __p;
  void *v20[2];
  char v21;
  std::string v22;
  std::string buf;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!prop::bbtrace::set(a3, a4))
    return 0;
  v18 = 0;
  memset(&__p, 0, sizeof(__p));
  v21 = 7;
  strcpy((char *)v20, "BBTrace");
  memset(&buf, 0, sizeof(buf));
  v7 = defaults::get((char *)v20, a3, &buf);
  if ((_DWORD)v7)
  {
    prop::file::get<std::string>((const void **)v20, (uint64_t)a3, (uint64_t)&buf, &v22);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v22;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v21 & 0x80000000) == 0)
    {
LABEL_8:
      if (!(_DWORD)v7)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v21 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(v20[0]);
  if (!(_DWORD)v7)
  {
LABEL_9:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v7 = util::convert<unsigned int>(&__p, &v18, 0);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if (!(_DWORD)v7)
      return v7;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!(_DWORD)v7)
    return v7;
LABEL_18:
  v9 = v18;
  v10 = *((_DWORD *)a1 + 89);
  if (v18 != v10)
  {
    v11 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v10;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v9;
      _os_log_impl(&dword_1A343C000, v11, OS_LOG_TYPE_DEFAULT, "#I Updating trace transport read-count from %d to %d", (uint8_t *)&buf, 0xEu);
      v9 = v18;
    }
    *((_DWORD *)a1 + 89) = v9;
    if (a1[336])
    {
      v12 = *a2;
      object = v12;
      if (v12)
        dispatch_retain(v12);
      cf = 0;
      (*(void (**)(_BYTE *, dispatch_object_t *, CFTypeRef *))(*(_QWORD *)a1 + 192))(a1, &object, &cf);
      if (cf)
        CFRelease(cf);
      if (object)
        dispatch_release(object);
      v13 = *a2;
      v15 = v13;
      if (v13)
        dispatch_retain(v13);
      v14 = 0;
      (*(void (**)(_BYTE *, dispatch_object_t *, CFTypeRef *))(*(_QWORD *)a1 + 184))(a1, &v15, &v14);
      if (v14)
        CFRelease(v14);
      if (v15)
        dispatch_release(v15);
    }
  }
  return v7;
}

void sub_1A3496E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, dispatch_object_t object, char a12, dispatch_object_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE64c21_ZTSN8dispatch5groupE(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;

  v4 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = *(NSObject **)(a1 + 48);
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = *(NSObject **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v6;
  if (v6)
    dispatch_retain(v6);
}

void __destroy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE64c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;

  v2 = *(NSObject **)(a1 + 64);
  if (v2)
    dispatch_release(v2);
  v3 = *(NSObject **)(a1 + 48);
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = *(NSObject **)(a1 + 48);
    if (v4)
      dispatch_release(v4);
  }
}

uint64_t ICETrace::getProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[8];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  _QWORD block[6];

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 1;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZN8ICETrace11getPropertyERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERS6__block_invoke;
  v7[3] = &unk_1E4A08A48;
  v7[6] = a2;
  v7[7] = a3;
  v7[4] = &v8;
  v7[5] = a1;
  v12 = v7;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke_0;
  block[3] = &__block_descriptor_tmp_131;
  block[4] = a1 + 72;
  block[5] = &v12;
  v4 = a1 + 88;
  v3 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(v4 + 8))
    dispatch_async_and_wait(v3, block);
  else
    dispatch_sync(v3, block);
  v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void ___ZN8ICETrace11getPropertyERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERS6__block_invoke(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  const char *v4;
  NSObject *v5;
  int v6;
  int v7;
  int v8;
  std::string::size_type v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  size_t v17;
  __int128 v18;
  int v19;
  int v20;
  int v21;
  void *v22;
  size_t v23;
  void *v24;
  size_t v25;
  uint64_t v26;
  __int128 v27;
  void *__p[2];
  char v29;
  _QWORD v30[2];
  std::string buf;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(const char **)(a1 + 48);
  if (v3[23] < 0)
  {
    v4 = *(const char **)v3;
    if (strcasecmp(*(const char **)v3, "Enabled"))
    {
      if (strcasecmp(v4, "History"))
      {
        if (strcasecmp(v4, "Mode"))
        {
          if (strcasecmp(v4, "File"))
          {
            if (strcasecmp(v4, "File_Sleep"))
            {
              if (strcasecmp(v4, "BackgroundMode"))
              {
                if (strcasecmp(v4, "High_Watermark"))
                {
                  if (strcasecmp(v4, "Low_Watermark"))
                  {
                    if (strcasecmp(v4, "Enabled_During_Sleep"))
                    {
                      if (strcasecmp(v4, "State"))
                      {
                        if (strcasecmp(v4, "ETBFile"))
                        {
                          if (strcasecmp(v4, "MaxMemoryFileCount"))
                          {
                            if (strcasecmp(v4, "KeepScratchLogs"))
                            {
                              if (strcasecmp(v4, "FileSize"))
                              {
                                if (strcasecmp(v4, "SizeIO"))
                                  goto LABEL_17;
LABEL_37:
                                util::to_str<unsigned int>(*(_DWORD *)(v2 + 352), &buf);
LABEL_66:
                                v26 = *(_QWORD *)(a1 + 56);
                                if (*(char *)(v26 + 23) < 0)
                                  operator delete(*(void **)v26);
                                v27 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
                                *(_QWORD *)(v26 + 16) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
                                *(_OWORD *)v26 = v27;
                                return;
                              }
LABEL_78:
                              util::to_str<unsigned int>(*(_DWORD *)(v2 + 348), &buf);
                              goto LABEL_66;
                            }
LABEL_77:
                            util::to_str<BOOL>(*(unsigned __int8 *)(v2 + 344), &buf);
                            goto LABEL_66;
                          }
LABEL_76:
                          util::to_str<unsigned int>(*(_DWORD *)(v2 + 332), &buf);
                          goto LABEL_66;
                        }
LABEL_75:
                        std::string::operator=(*(std::string **)(a1 + 56), (const std::string *)(v2 + 208));
                        return;
                      }
                      goto LABEL_71;
                    }
LABEL_65:
                    util::to_str<BOOL>(*(unsigned __int8 *)(v2 + 316), &buf);
                    goto LABEL_66;
                  }
LABEL_56:
                  util::to_str<BOOL>(*(_DWORD *)(v2 + 312), &buf);
                  goto LABEL_66;
                }
                goto LABEL_54;
              }
              goto LABEL_53;
            }
            goto LABEL_49;
          }
LABEL_45:
          v13 = (_QWORD *)(v2 + 160);
          v14 = *(_QWORD *)(a1 + 56);
          if (v14 == v2 + 160)
            return;
          v15 = *(unsigned __int8 *)(v2 + 183);
          if ((*(char *)(v14 + 23) & 0x80000000) == 0)
          {
            if ((v15 & 0x80) == 0)
            {
LABEL_52:
              v18 = *(_OWORD *)v13;
              *(_QWORD *)(v14 + 16) = v13[2];
              *(_OWORD *)v14 = v18;
              return;
            }
            v16 = *(void **)(v2 + 160);
            v17 = *(_QWORD *)(v2 + 168);
LABEL_70:
            std::string::__assign_no_alias<true>((_QWORD *)v14, v16, v17);
            return;
          }
          v21 = (char)v15;
          v22 = *(void **)(v2 + 160);
          v23 = *(_QWORD *)(v2 + 168);
LABEL_58:
          if (v21 >= 0)
            v24 = v13;
          else
            v24 = v22;
          if (v21 >= 0)
            v25 = v15;
          else
            v25 = v23;
          std::string::__assign_no_alias<false>((void **)v14, v24, v25);
          return;
        }
        goto LABEL_40;
      }
      goto LABEL_39;
    }
  }
  else if (strcasecmp(*(const char **)(a1 + 48), "Enabled"))
  {
    if (strcasecmp(v3, "History"))
    {
      if (strcasecmp(v3, "Mode"))
      {
        if (strcasecmp(v3, "File"))
        {
          if (strcasecmp(v3, "File_Sleep"))
          {
            if (strcasecmp(v3, "BackgroundMode"))
            {
              if (strcasecmp(v3, "High_Watermark"))
              {
                if (strcasecmp(v3, "Low_Watermark"))
                {
                  if (strcasecmp(v3, "Enabled_During_Sleep"))
                  {
                    if (strcasecmp(v3, "State"))
                    {
                      if (strcasecmp(v3, "ETBFile"))
                      {
                        if (strcasecmp(v3, "MaxMemoryFileCount"))
                        {
                          if (strcasecmp(v3, "KeepScratchLogs"))
                          {
                            if (strcasecmp(v3, "FileSize"))
                            {
                              v4 = v3;
                              if (strcasecmp(v3, "SizeIO"))
                              {
LABEL_17:
                                if (strcasecmp(v4, "NumberOfReadIO"))
                                {
                                  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
                                  v5 = *(NSObject **)(v2 + 40);
                                  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
                                  {
                                    if (v3[23] < 0)
                                      v3 = *(const char **)v3;
                                    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                                    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
                                    _os_log_error_impl(&dword_1A343C000, v5, OS_LOG_TYPE_ERROR, "Key not handled: %s", (uint8_t *)&buf, 0xCu);
                                  }
                                  return;
                                }
                                util::to_str<unsigned int>(*(_DWORD *)(v2 + 356), &buf);
                                goto LABEL_66;
                              }
                              goto LABEL_37;
                            }
                            goto LABEL_78;
                          }
                          goto LABEL_77;
                        }
                        goto LABEL_76;
                      }
                      goto LABEL_75;
                    }
LABEL_71:
                    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_1A3584B3E);
                    ICETrace::dumpState_sync(v2, (uint64_t)__p, 0, 10, &buf);
                    std::string::operator=(*(std::string **)(a1 + 56), &buf);
                    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(buf.__r_.__value_.__l.__data_);
                    if (v29 < 0)
                      operator delete(__p[0]);
                    return;
                  }
                  goto LABEL_65;
                }
                goto LABEL_56;
              }
LABEL_54:
              v20 = *(_DWORD *)(v2 + 308);
              v30[0] = 0;
              *(_QWORD *)((char *)v30 + 7) = 0;
              std::to_string(&buf, v20);
              goto LABEL_41;
            }
LABEL_53:
            v19 = *(unsigned __int8 *)(v2 + 304);
            v30[0] = 0;
            *(_QWORD *)((char *)v30 + 7) = 0;
            std::to_string(&buf, v19);
            goto LABEL_41;
          }
LABEL_49:
          v13 = (_QWORD *)(v2 + 184);
          v14 = *(_QWORD *)(a1 + 56);
          if (v14 == v2 + 184)
            return;
          v15 = *(unsigned __int8 *)(v2 + 207);
          if ((*(char *)(v14 + 23) & 0x80000000) == 0)
          {
            if ((v15 & 0x80) == 0)
              goto LABEL_52;
            v16 = *(void **)(v2 + 184);
            v17 = *(_QWORD *)(v2 + 192);
            goto LABEL_70;
          }
          v21 = (char)v15;
          v22 = *(void **)(v2 + 184);
          v23 = *(_QWORD *)(v2 + 192);
          goto LABEL_58;
        }
        goto LABEL_45;
      }
LABEL_40:
      v8 = *(_DWORD *)(v2 + 152);
      v30[0] = 0;
      *(_QWORD *)((char *)v30 + 7) = 0;
      std::to_string(&buf, v8);
      goto LABEL_41;
    }
LABEL_39:
    v7 = *(_DWORD *)(v2 + 340);
    v30[0] = 0;
    *(_QWORD *)((char *)v30 + 7) = 0;
    std::to_string(&buf, v7);
    goto LABEL_41;
  }
  v6 = *(unsigned __int8 *)(v2 + 336);
  v30[0] = 0;
  *(_QWORD *)((char *)v30 + 7) = 0;
  std::to_string(&buf, v6);
LABEL_41:
  v30[0] = buf.__r_.__value_.__l.__size_;
  v9 = buf.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)v30 + 7) = *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 7);
  v10 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  v11 = *(_QWORD *)(a1 + 56);
  if (*(char *)(v11 + 23) < 0)
    operator delete(*(void **)v11);
  v12 = v30[0];
  *(_QWORD *)v11 = v9;
  *(_QWORD *)(v11 + 8) = v12;
  *(_QWORD *)(v11 + 15) = *(_QWORD *)((char *)v30 + 7);
  *(_BYTE *)(v11 + 23) = v10;
}

void sub_1A3497614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ICETrace::historyAsString_sync@<X0>(uint64_t this@<X0>, char *a2@<X8>)
{
  char *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v13;
  char v14;
  size_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  std::string __p;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void *v27[2];
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  std::string v40;

  v2 = a2;
  if (!*(_DWORD *)(this + 340))
  {
    a2[23] = 8;
    strcpy(a2, "Infinite");
    return this;
  }
  v3 = this;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v29 = 0xAAAAAAAAAAAAAAAALL;
  v39 = v4;
  v38 = v4;
  v37 = v4;
  v36 = v4;
  v35 = v4;
  v34 = v4;
  v33 = v4;
  v32 = v4;
  v31 = v4;
  v28 = v4;
  *(_OWORD *)v27 = v4;
  v26 = v4;
  v25 = v4;
  v24 = v4;
  v23 = v4;
  v5 = MEMORY[0x1E0DE4FE0];
  v6 = MEMORY[0x1E0DE4FE0] + 64;
  v30 = MEMORY[0x1E0DE4FE0] + 64;
  v7 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v22 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v22 + *(_QWORD *)(v22 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v22 + *(_QWORD *)(v22 - 24));
  std::ios_base::init(v9, &v23);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v22 = v5 + 24;
  v30 = v6;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v23 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v27 = 0u;
  v28 = 0u;
  LODWORD(v29) = 16;
  std::to_string(&v40, *(_DWORD *)(v3 + 340));
  __p = v40;
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" MB", 3);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v14 = v29;
    if ((v29 & 0x10) == 0)
      goto LABEL_10;
LABEL_14:
    v16 = *((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v28 + 1) < (unint64_t)v26)
    {
      *((_QWORD *)&v28 + 1) = v26;
      v16 = v26;
    }
    v17 = (const void *)*((_QWORD *)&v25 + 1);
    v15 = v16 - *((_QWORD *)&v25 + 1);
    if ((unint64_t)(v16 - *((_QWORD *)&v25 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_28;
    goto LABEL_17;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  v14 = v29;
  if ((v29 & 0x10) != 0)
    goto LABEL_14;
LABEL_10:
  if ((v14 & 8) == 0)
  {
    v15 = 0;
    v2[23] = 0;
    goto LABEL_24;
  }
  v17 = (const void *)v24;
  v15 = v25 - v24;
  if ((_QWORD)v25 - (_QWORD)v24 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_28:
    std::string::__throw_length_error[abi:ne180100]();
LABEL_17:
  if (v15 >= 0x17)
  {
    v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v18 = v15 | 7;
    v19 = v18 + 1;
    v20 = (char *)operator new(v18 + 1);
    *((_QWORD *)v2 + 1) = v15;
    *((_QWORD *)v2 + 2) = v19 | 0x8000000000000000;
    *(_QWORD *)v2 = v20;
    v2 = v20;
  }
  else
  {
    v2[23] = v15;
    if (!v15)
      goto LABEL_24;
  }
  memmove(v2, v17, v15);
LABEL_24:
  v2[v15] = 0;
  v22 = *v7;
  *(uint64_t *)((char *)&v22 + *(_QWORD *)(v22 - 24)) = v7[3];
  *(_QWORD *)&v23 = v10 + 16;
  if (SBYTE7(v28) < 0)
    operator delete(v27[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A858F92C](&v30);
}

void sub_1A34979B0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1A3497808);
}

void sub_1A34979BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void ___ZN8ICETrace26setPropBackgroundMode_syncEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8__block_invoke(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  __int128 v11;
  const void *v12;
  size_t v13;
  size_t v14;
  __int128 *p_dst;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  size_t v19;
  size_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  const char *v27;
  std::string v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  __int128 v35;
  char v36;
  _BYTE v37[8];
  _QWORD *v38;
  void *__p[2];
  char v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  __int128 __dst;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint8_t buf[16];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v4 = a1[4];
  v5 = *(NSObject **)(v4 + 144);
  if (v5)
  {
    dispatch_retain(*(dispatch_object_t *)(v4 + 144));
    dispatch_group_enter(v5);
  }
  v6 = (std::__shared_weak_count *)a1[7];
  if (v6)
  {
    v7 = std::__shared_weak_count::lock(v6);
    v48 = v7;
    if (v7)
    {
      v8 = v7;
      v47 = a1[6];
      if (!v47
        || (*a2
          ? (v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get)
          : (v9 = 0),
            !v9))
      {
LABEL_51:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        goto LABEL_55;
      }
      v10 = *(NSObject **)(v4 + 40);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        if (*(_BYTE *)(v4 + 304))
          v27 = "enabled";
        else
          v27 = "disabled";
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v27;
        _os_log_error_impl(&dword_1A343C000, v10, OS_LOG_TYPE_ERROR, "Failed to set BB Trace BackgroundMode to %s", buf, 0xCu);
      }
      *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v54 = v11;
      v55 = v11;
      v52 = v11;
      v53 = v11;
      v50 = v11;
      v51 = v11;
      *(_OWORD *)buf = v11;
      v12 = (const void *)*MEMORY[0x1E0CFB590];
      v13 = strlen((const char *)*MEMORY[0x1E0CFB590]);
      if (v13 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v14 = v13;
      if (v13 >= 0x17)
      {
        v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17)
          v16 = v13 | 7;
        v17 = v16 + 1;
        p_dst = (__int128 *)operator new(v16 + 1);
        *((_QWORD *)&__dst + 1) = v14;
        v46 = v17 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v46) = v13;
        p_dst = &__dst;
        if (!v13)
        {
LABEL_19:
          *((_BYTE *)p_dst + v14) = 0;
          v18 = (const void *)*MEMORY[0x1E0CFBEA8];
          v19 = strlen((const char *)*MEMORY[0x1E0CFBEA8]);
          if (v19 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v20 = v19;
          if (v19 >= 0x17)
          {
            v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v19 | 7) != 0x17)
              v22 = v19 | 7;
            v23 = v22 + 1;
            v21 = operator new(v22 + 1);
            *((_QWORD *)&v43 + 1) = v20;
            v44 = v23 | 0x8000000000000000;
            *(_QWORD *)&v43 = v21;
          }
          else
          {
            HIBYTE(v44) = v19;
            v21 = &v43;
            if (!v19)
            {
LABEL_27:
              v21[v20] = 0;
              v24 = (char *)operator new(0x20uLL);
              v41 = v24;
              v42 = xmmword_1A3580300;
              strcpy(v24, "Failed to set trace params");
              Timestamp::Timestamp((Timestamp *)v37);
              Timestamp::asString((uint64_t)v37, 0, 9, __p);
              v36 = 0;
              LOBYTE(v35) = 0;
              ResetInfo::ResetInfo((std::string *)buf, &__dst, &v43, (__int128 *)&v41, (uint64_t)__p, 7, &v35);
              if (v40 < 0)
                operator delete(__p[0]);
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v37, v38);
              operator delete(v24);
              if (SHIBYTE(v44) < 0)
                operator delete((void *)v43);
              if (SHIBYTE(v46) < 0)
                operator delete((void *)__dst);
              ResetInfo::ResetInfo(&v28, (__int128 *)buf);
              ICETrace::commandResetModem_sync(v4, (__int128 *)&v28);
              if (v34 < 0)
              {
                operator delete(v33);
                if ((v32 & 0x80000000) == 0)
                {
LABEL_35:
                  if ((v30 & 0x80000000) == 0)
                    goto LABEL_36;
                  goto LABEL_45;
                }
              }
              else if ((v32 & 0x80000000) == 0)
              {
                goto LABEL_35;
              }
              operator delete(v31);
              if ((v30 & 0x80000000) == 0)
              {
LABEL_36:
                if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_37;
                goto LABEL_46;
              }
LABEL_45:
              operator delete(v29);
              if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_37:
                if ((SHIBYTE(v55) & 0x80000000) == 0)
                  goto LABEL_38;
                goto LABEL_47;
              }
LABEL_46:
              operator delete(v28.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v55) & 0x80000000) == 0)
              {
LABEL_38:
                if ((SBYTE7(v53) & 0x80000000) == 0)
                  goto LABEL_39;
                goto LABEL_48;
              }
LABEL_47:
              operator delete(*((void **)&v54 + 1));
              if ((SBYTE7(v53) & 0x80000000) == 0)
              {
LABEL_39:
                if ((SHIBYTE(v51) & 0x80000000) == 0)
                  goto LABEL_40;
                goto LABEL_49;
              }
LABEL_48:
              operator delete((void *)v52);
              if ((SHIBYTE(v51) & 0x80000000) == 0)
              {
LABEL_40:
                if ((SBYTE7(v50) & 0x80000000) == 0)
                  goto LABEL_41;
LABEL_50:
                operator delete(*(void **)buf);
                v8 = v48;
                if (!v48)
                  goto LABEL_55;
                goto LABEL_51;
              }
LABEL_49:
              operator delete(*((void **)&v50 + 1));
              if ((SBYTE7(v50) & 0x80000000) == 0)
              {
LABEL_41:
                v8 = v48;
                if (!v48)
                  goto LABEL_55;
                goto LABEL_51;
              }
              goto LABEL_50;
            }
          }
          memmove(v21, v18, v20);
          goto LABEL_27;
        }
      }
      memmove(p_dst, v12, v14);
      goto LABEL_19;
    }
  }
LABEL_55:
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
}

void sub_1A3497E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  NSObject *v49;
  uint64_t v50;

  ResetInfo::~ResetInfo((void **)&a9);
  ResetInfo::~ResetInfo((void **)(v50 - 208));
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v50 - 224);
  if (!v49)
    _Unwind_Resume(a1);
  dispatch_group_leave(v49);
  dispatch_release(v49);
  _Unwind_Resume(a1);
}

void ___ZN8ICETrace16setPropMode_syncEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8__block_invoke(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  NSObject *v9;
  __int128 v10;
  const void *v11;
  size_t v12;
  size_t v13;
  __int128 *v14;
  __int128 v15;
  const void *v16;
  size_t v17;
  size_t v18;
  __int128 *p_dst;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  size_t v23;
  size_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  size_t v33;
  size_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  std::string v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *v46;
  char v47;
  __int128 v48;
  char v49;
  void *v50[2];
  char v51;
  std::string v52;
  void *v53;
  char v54;
  void *v55;
  char v56;
  void *v57;
  char v58;
  __int128 v59;
  char v60;
  _BYTE v61[8];
  _QWORD *v62;
  void *__p[2];
  char v64;
  char *v65;
  __int128 v66;
  __int128 v67;
  unint64_t v68;
  __int128 __dst;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  uint8_t buf[16];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v4 = a1[4];
  v5 = *(NSObject **)(v4 + 144);
  if (v5)
  {
    dispatch_retain(*(dispatch_object_t *)(v4 + 144));
    dispatch_group_enter(v5);
  }
  v71 = 0;
  v72 = 0;
  v6 = (std::__shared_weak_count *)a1[7];
  if (!v6)
    goto LABEL_79;
  v72 = std::__shared_weak_count::lock(v6);
  if (!v72)
    goto LABEL_84;
  v71 = a1[6];
  if (!v71)
    goto LABEL_79;
  v7 = *a2;
  v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v8 = 0;
  v9 = *(NSObject **)(v4 + 40);
  if (!v8)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A343C000, v9, OS_LOG_TYPE_DEFAULT, "#I Successfully set mode", buf, 2u);
    }
    *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v78 = v15;
    v79 = v15;
    v76 = v15;
    v77 = v15;
    v74 = v15;
    v75 = v15;
    *(_OWORD *)buf = v15;
    v16 = (const void *)*MEMORY[0x1E0CFB598];
    v17 = strlen((const char *)*MEMORY[0x1E0CFB598]);
    if (v17 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v18 = v17;
    if (v17 >= 0x17)
    {
      v30 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17)
        v30 = v17 | 7;
      v31 = v30 + 1;
      p_dst = (__int128 *)operator new(v30 + 1);
      *((_QWORD *)&__dst + 1) = v18;
      v70 = v31 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v70) = v17;
      p_dst = &__dst;
      if (!v17)
      {
LABEL_57:
        *((_BYTE *)p_dst + v18) = 0;
        v32 = (const void *)*MEMORY[0x1E0CFBEA8];
        v33 = strlen((const char *)*MEMORY[0x1E0CFBEA8]);
        if (v33 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v34 = v33;
        if (v33 >= 0x17)
        {
          v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v33 | 7) != 0x17)
            v36 = v33 | 7;
          v37 = v36 + 1;
          v35 = operator new(v36 + 1);
          *((_QWORD *)&v67 + 1) = v34;
          v68 = v37 | 0x8000000000000000;
          *(_QWORD *)&v67 = v35;
        }
        else
        {
          HIBYTE(v68) = v33;
          v35 = &v67;
          if (!v33)
          {
LABEL_65:
            v35[v34] = 0;
            v38 = (char *)operator new(0x38uLL);
            v65 = v38;
            v66 = xmmword_1A3580310;
            strcpy(v38, "Requesting Soft Reset to make the new trace mode active");
            Timestamp::Timestamp((Timestamp *)v61);
            Timestamp::asString((uint64_t)v61, 0, 9, v50);
            v49 = 0;
            LOBYTE(v48) = 0;
            ResetInfo::ResetInfo((std::string *)buf, &__dst, &v67, (__int128 *)&v65, (uint64_t)v50, 7, &v48);
            if (v51 < 0)
              operator delete(v50[0]);
            std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v61, v62);
            operator delete(v38);
            if (SHIBYTE(v68) < 0)
              operator delete((void *)v67);
            if (SHIBYTE(v70) < 0)
              operator delete((void *)__dst);
            ResetInfo::ResetInfo(&v41, (__int128 *)buf);
            ICETrace::commandResetModem_sync(v4, (__int128 *)&v41);
            if (v47 < 0)
            {
              operator delete(v46);
              if ((v45 & 0x80000000) == 0)
              {
LABEL_73:
                if ((v43 & 0x80000000) == 0)
                  goto LABEL_74;
                goto LABEL_89;
              }
            }
            else if ((v45 & 0x80000000) == 0)
            {
              goto LABEL_73;
            }
            operator delete(v44);
            if ((v43 & 0x80000000) == 0)
            {
LABEL_74:
              if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_75;
              goto LABEL_90;
            }
LABEL_89:
            operator delete(v42);
            if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_75:
              if ((SHIBYTE(v79) & 0x80000000) == 0)
                goto LABEL_76;
              goto LABEL_48;
            }
LABEL_90:
            operator delete(v41.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v79) & 0x80000000) == 0)
              goto LABEL_76;
LABEL_48:
            operator delete(*((void **)&v78 + 1));
            if (SBYTE7(v77) < 0)
              goto LABEL_49;
            goto LABEL_77;
          }
        }
        memmove(v35, v32, v34);
        goto LABEL_65;
      }
    }
    memmove(p_dst, v16, v18);
    goto LABEL_57;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v7;
    _os_log_error_impl(&dword_1A343C000, v9, OS_LOG_TYPE_ERROR, "Unable to set mode %@", buf, 0xCu);
  }
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v78 = v10;
  v79 = v10;
  v76 = v10;
  v77 = v10;
  v74 = v10;
  v75 = v10;
  *(_OWORD *)buf = v10;
  v11 = (const void *)*MEMORY[0x1E0CFB590];
  v12 = strlen((const char *)*MEMORY[0x1E0CFB590]);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v20 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v20 = v12 | 7;
    v21 = v20 + 1;
    v14 = (__int128 *)operator new(v20 + 1);
    *((_QWORD *)&__dst + 1) = v13;
    v70 = v21 | 0x8000000000000000;
    *(_QWORD *)&__dst = v14;
    goto LABEL_24;
  }
  HIBYTE(v70) = v12;
  v14 = &__dst;
  if (v12)
LABEL_24:
    memmove(v14, v11, v13);
  *((_BYTE *)v14 + v13) = 0;
  v22 = (const void *)*MEMORY[0x1E0CFBEA8];
  v23 = strlen((const char *)*MEMORY[0x1E0CFBEA8]);
  if (v23 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v24 = v23;
  if (v23 >= 0x17)
  {
    v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v26 = v23 | 7;
    v27 = v26 + 1;
    v25 = operator new(v26 + 1);
    *((_QWORD *)&v67 + 1) = v24;
    v68 = v27 | 0x8000000000000000;
    *(_QWORD *)&v67 = v25;
    goto LABEL_32;
  }
  HIBYTE(v68) = v23;
  v25 = &v67;
  if (v23)
LABEL_32:
    memmove(v25, v22, v24);
  *((_BYTE *)v25 + v24) = 0;
  v28 = (char *)operator new(0x20uLL);
  v65 = v28;
  v66 = xmmword_1A357F050;
  strcpy(v28, "Failed to set trace mode");
  Timestamp::Timestamp((Timestamp *)v61);
  Timestamp::asString((uint64_t)v61, 0, 9, __p);
  v60 = 0;
  LOBYTE(v59) = 0;
  ResetInfo::ResetInfo((std::string *)buf, &__dst, &v67, (__int128 *)&v65, (uint64_t)__p, 7, &v59);
  if (v64 < 0)
    operator delete(__p[0]);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v61, v62);
  operator delete(v28);
  if (SHIBYTE(v68) < 0)
    operator delete((void *)v67);
  if (SHIBYTE(v70) < 0)
    operator delete((void *)__dst);
  ResetInfo::ResetInfo(&v52, (__int128 *)buf);
  ICETrace::commandResetModem_sync(v4, (__int128 *)&v52);
  if (v58 < 0)
  {
    operator delete(v57);
    if ((v56 & 0x80000000) == 0)
    {
LABEL_41:
      if ((v54 & 0x80000000) == 0)
        goto LABEL_42;
LABEL_46:
      operator delete(v53);
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_47;
      goto LABEL_75;
    }
  }
  else if ((v56 & 0x80000000) == 0)
  {
    goto LABEL_41;
  }
  operator delete(v55);
  if (v54 < 0)
    goto LABEL_46;
LABEL_42:
  if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_75;
LABEL_47:
  operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79) < 0)
    goto LABEL_48;
LABEL_76:
  if (SBYTE7(v77) < 0)
  {
LABEL_49:
    operator delete((void *)v76);
    if (SHIBYTE(v75) < 0)
      goto LABEL_50;
    goto LABEL_78;
  }
LABEL_77:
  if (SHIBYTE(v75) < 0)
  {
LABEL_50:
    operator delete(*((void **)&v74 + 1));
    if (SBYTE7(v74) < 0)
      goto LABEL_51;
    goto LABEL_79;
  }
LABEL_78:
  if (SBYTE7(v74) < 0)
  {
LABEL_51:
    operator delete(*(void **)buf);
    v29 = v72;
    if (!v72)
      goto LABEL_84;
    goto LABEL_80;
  }
LABEL_79:
  v29 = v72;
  if (!v72)
    goto LABEL_84;
LABEL_80:
  p_shared_owners = (unint64_t *)&v29->__shared_owners_;
  do
    v40 = __ldaxr(p_shared_owners);
  while (__stlxr(v40 - 1, p_shared_owners));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
LABEL_84:
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
}

void sub_1A3498640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  NSObject *v9;
  uint64_t v10;

  ResetInfo::~ResetInfo(&a9);
  ResetInfo::~ResetInfo((void **)(v10 - 208));
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v10 - 224);
  if (v9)
  {
    dispatch_group_leave(v9);
    dispatch_release(v9);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1A349878C()
{
  uint64_t v0;
  uint64_t v1;

  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1 - 224);
  if (v0)
    JUMPOUT(0x1A3498760);
  JUMPOUT(0x1A3498784);
}

void ___ZN8ICETrace16setPropMode_syncEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8__block_invoke_94(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  NSObject *v9;
  __int128 v10;
  const void *v11;
  size_t v12;
  size_t v13;
  __int128 *p_dst;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  size_t v18;
  size_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::string v27;
  void *v28;
  char v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  __int128 v34;
  char v35;
  _BYTE v36[8];
  _QWORD *v37;
  void *__p[2];
  char v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  __int128 __dst;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint8_t buf[16];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(NSObject **)(v4 + 144);
  if (v5)
  {
    dispatch_retain(*(dispatch_object_t *)(v4 + 144));
    dispatch_group_enter(v5);
  }
  v46 = 0;
  v47 = 0;
  v6 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v6)
    goto LABEL_42;
  v47 = std::__shared_weak_count::lock(v6);
  if (!v47)
    goto LABEL_47;
  v46 = *(_QWORD *)(a1 + 48);
  if (!v46)
    goto LABEL_42;
  v7 = *a2;
  v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!v7)
    v8 = 0;
  if (!v8)
  {
    ICETrace::setTraceMode_sync(v4, *(_DWORD *)(a1 + 64));
    goto LABEL_42;
  }
  v9 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v7;
    _os_log_error_impl(&dword_1A343C000, v9, OS_LOG_TYPE_ERROR, "Unable to set mode %@", buf, 0xCu);
  }
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v53 = v10;
  v54 = v10;
  v51 = v10;
  v52 = v10;
  v49 = v10;
  v50 = v10;
  *(_OWORD *)buf = v10;
  v11 = (const void *)*MEMORY[0x1E0CFB590];
  v12 = strlen((const char *)*MEMORY[0x1E0CFB590]);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    p_dst = (__int128 *)operator new(v15 + 1);
    *((_QWORD *)&__dst + 1) = v13;
    v45 = v16 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_19;
  }
  HIBYTE(v45) = v12;
  p_dst = &__dst;
  if (v12)
LABEL_19:
    memmove(p_dst, v11, v13);
  *((_BYTE *)p_dst + v13) = 0;
  v17 = (const void *)*MEMORY[0x1E0CFBEA8];
  v18 = strlen((const char *)*MEMORY[0x1E0CFBEA8]);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v20 = operator new(v21 + 1);
    *((_QWORD *)&v42 + 1) = v19;
    v43 = v22 | 0x8000000000000000;
    *(_QWORD *)&v42 = v20;
    goto LABEL_27;
  }
  HIBYTE(v43) = v18;
  v20 = &v42;
  if (v18)
LABEL_27:
    memmove(v20, v17, v19);
  *((_BYTE *)v20 + v19) = 0;
  v23 = (char *)operator new(0x20uLL);
  v40 = v23;
  v41 = xmmword_1A357F050;
  strcpy(v23, "Failed to set trace mode");
  Timestamp::Timestamp((Timestamp *)v36);
  Timestamp::asString((uint64_t)v36, 0, 9, __p);
  v35 = 0;
  LOBYTE(v34) = 0;
  ResetInfo::ResetInfo((std::string *)buf, &__dst, &v42, (__int128 *)&v40, (uint64_t)__p, 7, &v34);
  if (v39 < 0)
    operator delete(__p[0]);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v36, v37);
  operator delete(v23);
  if (SHIBYTE(v43) < 0)
    operator delete((void *)v42);
  if (SHIBYTE(v45) < 0)
    operator delete((void *)__dst);
  ResetInfo::ResetInfo(&v27, (__int128 *)buf);
  ICETrace::commandResetModem_sync(v4, (__int128 *)&v27);
  if (v33 < 0)
  {
    operator delete(v32);
    if ((v31 & 0x80000000) == 0)
    {
LABEL_36:
      if ((v29 & 0x80000000) == 0)
        goto LABEL_37;
      goto LABEL_52;
    }
  }
  else if ((v31 & 0x80000000) == 0)
  {
    goto LABEL_36;
  }
  operator delete(v30);
  if ((v29 & 0x80000000) == 0)
  {
LABEL_37:
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_53;
  }
LABEL_52:
  operator delete(v28);
  if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_38:
    if ((SHIBYTE(v54) & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_54;
  }
LABEL_53:
  operator delete(v27.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v54) & 0x80000000) == 0)
  {
LABEL_39:
    if ((SBYTE7(v52) & 0x80000000) == 0)
      goto LABEL_40;
LABEL_55:
    operator delete((void *)v51);
    if ((SHIBYTE(v50) & 0x80000000) == 0)
    {
LABEL_41:
      if ((SBYTE7(v49) & 0x80000000) == 0)
        goto LABEL_42;
LABEL_57:
      operator delete(*(void **)buf);
      v24 = v47;
      if (!v47)
        goto LABEL_47;
      goto LABEL_43;
    }
    goto LABEL_56;
  }
LABEL_54:
  operator delete(*((void **)&v53 + 1));
  if (SBYTE7(v52) < 0)
    goto LABEL_55;
LABEL_40:
  if ((SHIBYTE(v50) & 0x80000000) == 0)
    goto LABEL_41;
LABEL_56:
  operator delete(*((void **)&v49 + 1));
  if (SBYTE7(v49) < 0)
    goto LABEL_57;
LABEL_42:
  v24 = v47;
  if (!v47)
    goto LABEL_47;
LABEL_43:
  p_shared_owners = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_47:
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
}

void sub_1A3498BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  NSObject *v49;
  uint64_t v50;

  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v50 - 224);
  if (v49)
  {
    dispatch_group_leave(v49);
    dispatch_release(v49);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN8ICETrace24setPropActiveConfig_syncEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8__block_invoke(_QWORD *a1, __CFError **a2)
{
  uint64_t v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  __CFError *v7;
  uint64_t (*v8)(uint64_t);
  NSObject *v9;
  NSObject *v10;
  int v11;
  NSObject *v12;
  _BOOL4 v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  void *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  __int128 v22;
  const void *v23;
  size_t v24;
  size_t v25;
  __int128 *p_dst;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  size_t v30;
  size_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  void *v39;
  dispatch_object_t object;
  _QWORD aBlock[5];
  dispatch_group_t group;
  dispatch_group_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  std::string v46;
  void *v47;
  char v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  __int128 v53;
  char v54;
  _BYTE v55[8];
  _QWORD *v56;
  void *__p[2];
  char v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  unint64_t v62;
  __int128 __dst;
  unint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint8_t buf[16];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v4 = a1[4];
  v5 = *(NSObject **)(v4 + 144);
  if (v5)
  {
    dispatch_retain(*(dispatch_object_t *)(v4 + 144));
    dispatch_group_enter(v5);
  }
  v65 = 0;
  v66 = 0;
  v6 = (std::__shared_weak_count *)a1[7];
  if (!v6)
    goto LABEL_89;
  v66 = std::__shared_weak_count::lock(v6);
  if (!v66)
    goto LABEL_94;
  v65 = a1[6];
  if (!v65)
    goto LABEL_89;
  v7 = *a2;
  v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v8 = 0;
  if (!v8)
  {
    v11 = *(unsigned __int8 *)(v4 + 336);
    v12 = *(NSObject **)(v4 + 40);
    v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if (v11)
    {
      if (v13)
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A343C000, v12, OS_LOG_TYPE_DEFAULT, "#I Sending command to enable new active trace mask", buf, 2u);
      }
      memset(buf, 170, sizeof(buf));
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN8ICETrace24setPropActiveConfig_syncEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8__block_invoke_98;
      aBlock[3] = &__block_descriptor_tmp_100;
      v14 = a1[5];
      aBlock[4] = v4;
      group = v14;
      if (v14)
      {
        dispatch_retain(v14);
        dispatch_group_enter(group);
      }
      v43 = v5;
      if (v5)
      {
        dispatch_retain(v5);
        dispatch_group_enter(v43);
      }
      v15 = (std::__shared_weak_count *)a1[7];
      v44 = a1[6];
      v45 = v15;
      if (v15)
      {
        p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
        do
          v17 = __ldxr(p_shared_weak_owners);
        while (__stxr(v17 + 1, p_shared_weak_owners));
      }
      v18 = _Block_copy(aBlock);
      v19 = *(NSObject **)(v4 + 88);
      if (v19)
        dispatch_retain(*(dispatch_object_t *)(v4 + 88));
      *(_QWORD *)buf = v18;
      *(_QWORD *)&buf[8] = v19;
      v20 = *(_QWORD *)(v4 + 416);
      if (v20)
      {
        if (v18)
          v21 = _Block_copy(v18);
        else
          v21 = 0;
        v39 = v21;
        object = v19;
        if (v19)
          dispatch_retain(v19);
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v20 + 48))(v20, &v39);
        if (object)
          dispatch_release(object);
        if (v39)
          _Block_release(v39);
      }
      if (v19)
        dispatch_release(v19);
      if (v18)
        _Block_release(v18);
      if (v45)
        std::__shared_weak_count::__release_weak(v45);
      if (v43)
      {
        dispatch_group_leave(v43);
        if (v43)
          dispatch_release(v43);
      }
      if (group)
      {
        dispatch_group_leave(group);
        if (group)
          dispatch_release(group);
      }
    }
    else if (v13)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A343C000, v12, OS_LOG_TYPE_DEFAULT, "#I Successfully set active trace mask", buf, 2u);
    }
    goto LABEL_89;
  }
  v9 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v7;
    _os_log_error_impl(&dword_1A343C000, v9, OS_LOG_TYPE_ERROR, "Unable to set active trace mask: %@", buf, 0xCu);
    v7 = *a2;
  }
  if (CFErrorGetCode(v7) == 2)
  {
    v10 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1A343C000, v10, OS_LOG_TYPE_ERROR, "File access error!", buf, 2u);
    }
    goto LABEL_89;
  }
  *(_QWORD *)&v22 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v73 = v22;
  v72 = v22;
  v71 = v22;
  v70 = v22;
  v69 = v22;
  v68 = v22;
  *(_OWORD *)buf = v22;
  v23 = (const void *)*MEMORY[0x1E0CFB590];
  v24 = strlen((const char *)*MEMORY[0x1E0CFB590]);
  if (v24 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v25 = v24;
  if (v24 >= 0x17)
  {
    v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v27 = v24 | 7;
    v28 = v27 + 1;
    p_dst = (__int128 *)operator new(v27 + 1);
    *((_QWORD *)&__dst + 1) = v25;
    v64 = v28 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_36;
  }
  HIBYTE(v64) = v24;
  p_dst = &__dst;
  if (v24)
LABEL_36:
    memmove(p_dst, v23, v25);
  *((_BYTE *)p_dst + v25) = 0;
  v29 = (const void *)*MEMORY[0x1E0CFBEA8];
  v30 = strlen((const char *)*MEMORY[0x1E0CFBEA8]);
  if (v30 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v31 = v30;
  if (v30 >= 0x17)
  {
    v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v33 = v30 | 7;
    v34 = v33 + 1;
    v32 = operator new(v33 + 1);
    *((_QWORD *)&v61 + 1) = v31;
    v62 = v34 | 0x8000000000000000;
    *(_QWORD *)&v61 = v32;
    goto LABEL_44;
  }
  HIBYTE(v62) = v30;
  v32 = &v61;
  if (v30)
LABEL_44:
    memmove(v32, v29, v31);
  *((_BYTE *)v32 + v31) = 0;
  v35 = (char *)operator new(0x20uLL);
  v59 = v35;
  v60 = xmmword_1A3580320;
  strcpy(v35, "Failed to set trace active mask");
  Timestamp::Timestamp((Timestamp *)v55);
  Timestamp::asString((uint64_t)v55, 0, 9, __p);
  v54 = 0;
  LOBYTE(v53) = 0;
  ResetInfo::ResetInfo((std::string *)buf, &__dst, &v61, (__int128 *)&v59, (uint64_t)__p, 7, &v53);
  if (v58 < 0)
    operator delete(__p[0]);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v55, v56);
  operator delete(v35);
  if (SHIBYTE(v62) < 0)
    operator delete((void *)v61);
  if (SHIBYTE(v64) < 0)
    operator delete((void *)__dst);
  ResetInfo::ResetInfo(&v46, (__int128 *)buf);
  ICETrace::commandResetModem_sync(v4, (__int128 *)&v46);
  if (v52 < 0)
  {
    operator delete(v51);
    if ((v50 & 0x80000000) == 0)
    {
LABEL_53:
      if ((v48 & 0x80000000) == 0)
        goto LABEL_54;
      goto LABEL_64;
    }
  }
  else if ((v50 & 0x80000000) == 0)
  {
    goto LABEL_53;
  }
  operator delete(v49);
  if ((v48 & 0x80000000) == 0)
  {
LABEL_54:
    if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_55;
    goto LABEL_65;
  }
LABEL_64:
  operator delete(v47);
  if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_55:
    if ((SHIBYTE(v73) & 0x80000000) == 0)
      goto LABEL_56;
    goto LABEL_66;
  }
LABEL_65:
  operator delete(v46.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v73) & 0x80000000) == 0)
  {
LABEL_56:
    if ((SBYTE7(v71) & 0x80000000) == 0)
      goto LABEL_57;
    goto LABEL_67;
  }
LABEL_66:
  operator delete(*((void **)&v72 + 1));
  if ((SBYTE7(v71) & 0x80000000) == 0)
  {
LABEL_57:
    if ((SHIBYTE(v69) & 0x80000000) == 0)
      goto LABEL_58;
    goto LABEL_68;
  }
LABEL_67:
  operator delete((void *)v70);
  if ((SHIBYTE(v69) & 0x80000000) == 0)
  {
LABEL_58:
    if (SBYTE7(v68) < 0)
      goto LABEL_69;
    goto LABEL_89;
  }
LABEL_68:
  operator delete(*((void **)&v68 + 1));
  if (SBYTE7(v68) < 0)
LABEL_69:
    operator delete(*(void **)buf);
LABEL_89:
  v36 = v66;
  if (v66)
  {
    p_shared_owners = (unint64_t *)&v66->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
LABEL_94:
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
}

void sub_1A349932C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, dispatch_group_t object, dispatch_group_t group, uint64_t a19, std::__shared_weak_count *a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN8ICETrace24setPropActiveConfig_syncEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8__block_invoke_98(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  __int128 v11;
  const void *v12;
  size_t v13;
  size_t v14;
  __int128 *p_dst;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  size_t v19;
  size_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::string v27;
  void *v28;
  char v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  __int128 v34;
  char v35;
  _BYTE v36[8];
  _QWORD *v37;
  void *__p[2];
  char v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  __int128 __dst;
  unint64_t v45;
  std::__shared_weak_count *v47;
  uint8_t buf[16];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[8];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v47 = v6;
    if (v6)
    {
      v7 = v6;
      if (a1[7])
      {
        v8 = *a2;
        v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!*a2)
          v9 = 0;
        v10 = *(NSObject **)(v5 + 40);
        if (v9)
        {
          if (os_log_type_enabled(*(os_log_t *)(v5 + 40), OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v8;
            _os_log_error_impl(&dword_1A343C000, v10, OS_LOG_TYPE_ERROR, "Failed to enable active trace profile: %@", buf, 0xCu);
          }
          *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v53 = v11;
          v54 = v11;
          v51 = v11;
          v52 = v11;
          v49 = v11;
          v50 = v11;
          *(_OWORD *)buf = v11;
          v12 = (const void *)*MEMORY[0x1E0CFB590];
          v13 = strlen((const char *)*MEMORY[0x1E0CFB590]);
          if (v13 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v14 = v13;
          if (v13 >= 0x17)
          {
            v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v13 | 7) != 0x17)
              v16 = v13 | 7;
            v17 = v16 + 1;
            p_dst = (__int128 *)operator new(v16 + 1);
            *((_QWORD *)&__dst + 1) = v14;
            v45 = v17 | 0x8000000000000000;
            *(_QWORD *)&__dst = p_dst;
          }
          else
          {
            HIBYTE(v45) = v13;
            p_dst = &__dst;
            if (!v13)
            {
LABEL_19:
              *((_BYTE *)p_dst + v14) = 0;
              v18 = (const void *)*MEMORY[0x1E0CFBEA8];
              v19 = strlen((const char *)*MEMORY[0x1E0CFBEA8]);
              if (v19 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              v20 = v19;
              if (v19 >= 0x17)
              {
                v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v19 | 7) != 0x17)
                  v22 = v19 | 7;
                v23 = v22 + 1;
                v21 = operator new(v22 + 1);
                *((_QWORD *)&v42 + 1) = v20;
                v43 = v23 | 0x8000000000000000;
                *(_QWORD *)&v42 = v21;
              }
              else
              {
                HIBYTE(v43) = v19;
                v21 = &v42;
                if (!v19)
                {
LABEL_27:
                  v21[v20] = 0;
                  v24 = (char *)operator new(0x28uLL);
                  v40 = v24;
                  v41 = xmmword_1A35802F0;
                  strcpy(v24, "Failed to enable active trace profile");
                  Timestamp::Timestamp((Timestamp *)v36);
                  Timestamp::asString((uint64_t)v36, 0, 9, __p);
                  v35 = 0;
                  LOBYTE(v34) = 0;
                  ResetInfo::ResetInfo((std::string *)buf, &__dst, &v42, (__int128 *)&v40, (uint64_t)__p, 7, &v34);
                  if (v39 < 0)
                    operator delete(__p[0]);
                  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v36, v37);
                  operator delete(v24);
                  if (SHIBYTE(v43) < 0)
                    operator delete((void *)v42);
                  if (SHIBYTE(v45) < 0)
                    operator delete((void *)__dst);
                  ResetInfo::ResetInfo(&v27, (__int128 *)buf);
                  ICETrace::commandResetModem_sync(v5, (__int128 *)&v27);
                  if (v33 < 0)
                  {
                    operator delete(v32);
                    if ((v31 & 0x80000000) == 0)
                    {
LABEL_35:
                      if ((v29 & 0x80000000) == 0)
                        goto LABEL_36;
                      goto LABEL_45;
                    }
                  }
                  else if ((v31 & 0x80000000) == 0)
                  {
                    goto LABEL_35;
                  }
                  operator delete(v30);
                  if ((v29 & 0x80000000) == 0)
                  {
LABEL_36:
                    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_37;
                    goto LABEL_46;
                  }
LABEL_45:
                  operator delete(v28);
                  if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_37:
                    if ((SHIBYTE(v54) & 0x80000000) == 0)
                      goto LABEL_38;
                    goto LABEL_47;
                  }
LABEL_46:
                  operator delete(v27.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v54) & 0x80000000) == 0)
                  {
LABEL_38:
                    if ((SBYTE7(v52) & 0x80000000) == 0)
                      goto LABEL_39;
                    goto LABEL_48;
                  }
LABEL_47:
                  operator delete(*((void **)&v53 + 1));
                  if ((SBYTE7(v52) & 0x80000000) == 0)
                  {
LABEL_39:
                    if ((SHIBYTE(v50) & 0x80000000) == 0)
                      goto LABEL_40;
                    goto LABEL_49;
                  }
LABEL_48:
                  operator delete((void *)v51);
                  if ((SHIBYTE(v50) & 0x80000000) == 0)
                  {
LABEL_40:
                    if ((SBYTE7(v49) & 0x80000000) == 0)
                      goto LABEL_41;
                    goto LABEL_50;
                  }
LABEL_49:
                  operator delete(*((void **)&v49 + 1));
                  if ((SBYTE7(v49) & 0x80000000) == 0)
                  {
LABEL_41:
                    v7 = v47;
                    if (!v47)
                      return;
                    goto LABEL_51;
                  }
LABEL_50:
                  operator delete(*(void **)buf);
                  v7 = v47;
                  if (!v47)
                    return;
                  goto LABEL_51;
                }
              }
              memmove(v21, v18, v20);
              goto LABEL_27;
            }
          }
          memmove(p_dst, v12, v14);
          goto LABEL_19;
        }
        if (os_log_type_enabled(*(os_log_t *)(v5 + 40), OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1A343C000, v10, OS_LOG_TYPE_DEFAULT, "#I Successfully enabled active trace mask", buf, 2u);
        }
      }
LABEL_51:
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1A349988C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;

  ResetInfo::~ResetInfo(&a9);
  ResetInfo::~ResetInfo((void **)(v9 - 192));
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v9 - 208);
  _Unwind_Resume(a1);
}

void sub_1A34998B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,_QWORD *a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  void *v49;
  uint64_t v50;

  if (a34 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a26, a27);
  operator delete(v49);
  if (a43 < 0)
  {
    operator delete(a38);
    if ((a49 & 0x80000000) == 0)
    {
LABEL_5:
      std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v50 - 208);
      _Unwind_Resume(a1);
    }
  }
  else if ((a49 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a44);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v50 - 208);
  _Unwind_Resume(a1);
}

void sub_1A3499950(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1 - 208);
  _Unwind_Resume(a1);
}

void ___ZN8ICETrace23setPropSleepConfig_syncEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8__block_invoke(_QWORD *a1, __CFError **a2)
{
  uint64_t v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  __CFError *v7;
  uint64_t (*v8)(uint64_t);
  NSObject *v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  __int128 v12;
  const void *v13;
  size_t v14;
  size_t v15;
  __int128 *p_dst;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  size_t v20;
  size_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::string v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  __int128 v35;
  char v36;
  _BYTE v37[8];
  _QWORD *v38;
  void *__p[2];
  char v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  __int128 __dst;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint8_t buf[16];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v4 = a1[4];
  v5 = *(NSObject **)(v4 + 144);
  if (v5)
  {
    dispatch_retain(*(dispatch_object_t *)(v4 + 144));
    dispatch_group_enter(v5);
  }
  v47 = 0;
  v48 = 0;
  v6 = (std::__shared_weak_count *)a1[7];
  if (!v6)
    goto LABEL_48;
  v48 = std::__shared_weak_count::lock(v6);
  if (!v48)
    goto LABEL_53;
  v47 = a1[6];
  if (!v47)
    goto LABEL_48;
  v7 = *a2;
  v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v8 = 0;
  v9 = *(NSObject **)(v4 + 40);
  if (!v8)
  {
    if (os_log_type_enabled(*(os_log_t *)(v4 + 40), OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A343C000, v9, OS_LOG_TYPE_DEFAULT, "#I Successfully set sleep trace mask", buf, 2u);
      v11 = v48;
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (os_log_type_enabled(*(os_log_t *)(v4 + 40), OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v7;
    _os_log_error_impl(&dword_1A343C000, v9, OS_LOG_TYPE_ERROR, "Unable to set sleep trace mask: %@", buf, 0xCu);
    v7 = *a2;
  }
  if (CFErrorGetCode(v7) != 2)
  {
    *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v54 = v12;
    v55 = v12;
    v52 = v12;
    v53 = v12;
    v50 = v12;
    v51 = v12;
    *(_OWORD *)buf = v12;
    v13 = (const void *)*MEMORY[0x1E0CFB590];
    v14 = strlen((const char *)*MEMORY[0x1E0CFB590]);
    if (v14 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v15 = v14;
    if (v14 >= 0x17)
    {
      v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v17 = v14 | 7;
      v18 = v17 + 1;
      p_dst = (__int128 *)operator new(v17 + 1);
      *((_QWORD *)&__dst + 1) = v15;
      v46 = v18 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v46) = v14;
      p_dst = &__dst;
      if (!v14)
      {
LABEL_26:
        *((_BYTE *)p_dst + v15) = 0;
        v19 = (const void *)*MEMORY[0x1E0CFBEA8];
        v20 = strlen((const char *)*MEMORY[0x1E0CFBEA8]);
        if (v20 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v21 = v20;
        if (v20 >= 0x17)
        {
          v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v20 | 7) != 0x17)
            v23 = v20 | 7;
          v24 = v23 + 1;
          v22 = operator new(v23 + 1);
          *((_QWORD *)&v43 + 1) = v21;
          v44 = v24 | 0x8000000000000000;
          *(_QWORD *)&v43 = v22;
        }
        else
        {
          HIBYTE(v44) = v20;
          v22 = &v43;
          if (!v20)
          {
LABEL_34:
            v22[v21] = 0;
            v25 = (char *)operator new(0x20uLL);
            v41 = v25;
            v42 = xmmword_1A35802C0;
            strcpy(v25, "Failed to set trace sleep mask");
            Timestamp::Timestamp((Timestamp *)v37);
            Timestamp::asString((uint64_t)v37, 0, 9, __p);
            v36 = 0;
            LOBYTE(v35) = 0;
            ResetInfo::ResetInfo((std::string *)buf, &__dst, &v43, (__int128 *)&v41, (uint64_t)__p, 7, &v35);
            if (v40 < 0)
              operator delete(__p[0]);
            std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v37, v38);
            operator delete(v25);
            if (SHIBYTE(v44) < 0)
              operator delete((void *)v43);
            if (SHIBYTE(v46) < 0)
              operator delete((void *)__dst);
            ResetInfo::ResetInfo(&v28, (__int128 *)buf);
            ICETrace::commandResetModem_sync(v4, (__int128 *)&v28);
            if (v34 < 0)
            {
              operator delete(v33);
              if ((v32 & 0x80000000) == 0)
              {
LABEL_42:
                if ((v30 & 0x80000000) == 0)
                  goto LABEL_43;
                goto LABEL_58;
              }
            }
            else if ((v32 & 0x80000000) == 0)
            {
              goto LABEL_42;
            }
            operator delete(v31);
            if ((v30 & 0x80000000) == 0)
            {
LABEL_43:
              if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_44;
              goto LABEL_59;
            }
LABEL_58:
            operator delete(v29);
            if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_44:
              if ((SHIBYTE(v55) & 0x80000000) == 0)
                goto LABEL_45;
              goto LABEL_60;
            }
LABEL_59:
            operator delete(v28.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v55) & 0x80000000) == 0)
            {
LABEL_45:
              if ((SBYTE7(v53) & 0x80000000) == 0)
                goto LABEL_46;
              goto LABEL_61;
            }
LABEL_60:
            operator delete(*((void **)&v54 + 1));
            if ((SBYTE7(v53) & 0x80000000) == 0)
            {
LABEL_46:
              if ((SHIBYTE(v51) & 0x80000000) == 0)
                goto LABEL_47;
LABEL_62:
              operator delete(*((void **)&v50 + 1));
              if (SBYTE7(v50) < 0)
                goto LABEL_63;
LABEL_48:
              v11 = v48;
              if (!v48)
                goto LABEL_53;
              goto LABEL_49;
            }
LABEL_61:
            operator delete((void *)v52);
            if ((SHIBYTE(v51) & 0x80000000) == 0)
            {
LABEL_47:
              if ((SBYTE7(v50) & 0x80000000) == 0)
                goto LABEL_48;
LABEL_63:
              operator delete(*(void **)buf);
              v11 = v48;
              if (!v48)
                goto LABEL_53;
              goto LABEL_49;
            }
            goto LABEL_62;
          }
        }
        memmove(v22, v19, v21);
        goto LABEL_34;
      }
    }
    memmove(p_dst, v13, v15);
    goto LABEL_26;
  }
  v10 = *(NSObject **)(v4 + 40);
  if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    goto LABEL_48;
  *(_WORD *)buf = 0;
  _os_log_error_impl(&dword_1A343C000, v10, OS_LOG_TYPE_ERROR, "File access error!", buf, 2u);
  v11 = v48;
LABEL_49:
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_53:
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
}

void sub_1A3499E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  NSObject *v49;
  uint64_t v50;

  ResetInfo::~ResetInfo((void **)&a9);
  ResetInfo::~ResetInfo((void **)(v50 - 208));
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v50 - 224);
  if (!v49)
    _Unwind_Resume(a1);
  dispatch_group_leave(v49);
  dispatch_release(v49);
  _Unwind_Resume(a1);
}

BOOL ICETrace::watermarkIsValid_sync(ICETrace *this, unsigned int a2)
{
  return a2 < 0x65;
}

void ___ZN8ICETrace15processETB_syncEv_block_invoke(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  NSObject *v11;
  __int128 v12;
  const void *v13;
  size_t v14;
  size_t v15;
  __int128 *p_dst;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  size_t v20;
  size_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::string v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  __int128 v35;
  char v36;
  _BYTE v37[8];
  _QWORD *v38;
  void *__p[2];
  char v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  __int128 __dst;
  unint64_t v46;
  std::__shared_weak_count *v48;
  uint8_t buf[16];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v4 = a1[4];
  v5 = *(NSObject **)(v4 + 144);
  if (v5)
  {
    dispatch_retain(*(dispatch_object_t *)(v4 + 144));
    dispatch_group_enter(v5);
  }
  v6 = (std::__shared_weak_count *)a1[6];
  if (v6)
  {
    v7 = std::__shared_weak_count::lock(v6);
    v48 = v7;
    if (v7)
    {
      v8 = v7;
      if (a1[5])
      {
        v9 = *a2;
        v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!*a2)
          v10 = 0;
        v11 = *(NSObject **)(v4 + 40);
        if (v10)
        {
          if (os_log_type_enabled(*(os_log_t *)(v4 + 40), OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v9;
            _os_log_error_impl(&dword_1A343C000, v11, OS_LOG_TYPE_ERROR, "Unable to set etb trace mask: %@", buf, 0xCu);
          }
          *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v54 = v12;
          v55 = v12;
          v52 = v12;
          v53 = v12;
          v50 = v12;
          v51 = v12;
          *(_OWORD *)buf = v12;
          v13 = (const void *)*MEMORY[0x1E0CFB590];
          v14 = strlen((const char *)*MEMORY[0x1E0CFB590]);
          if (v14 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v15 = v14;
          if (v14 >= 0x17)
          {
            v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v14 | 7) != 0x17)
              v17 = v14 | 7;
            v18 = v17 + 1;
            p_dst = (__int128 *)operator new(v17 + 1);
            *((_QWORD *)&__dst + 1) = v15;
            v46 = v18 | 0x8000000000000000;
            *(_QWORD *)&__dst = p_dst;
          }
          else
          {
            HIBYTE(v46) = v14;
            p_dst = &__dst;
            if (!v14)
            {
LABEL_21:
              *((_BYTE *)p_dst + v15) = 0;
              v19 = (const void *)*MEMORY[0x1E0CFBEA8];
              v20 = strlen((const char *)*MEMORY[0x1E0CFBEA8]);
              if (v20 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              v21 = v20;
              if (v20 >= 0x17)
              {
                v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v20 | 7) != 0x17)
                  v23 = v20 | 7;
                v24 = v23 + 1;
                v22 = operator new(v23 + 1);
                *((_QWORD *)&v43 + 1) = v21;
                v44 = v24 | 0x8000000000000000;
                *(_QWORD *)&v43 = v22;
              }
              else
              {
                HIBYTE(v44) = v20;
                v22 = &v43;
                if (!v20)
                {
LABEL_29:
                  v22[v21] = 0;
                  v25 = (char *)operator new(0x20uLL);
                  v41 = v25;
                  v42 = xmmword_1A357F830;
                  strcpy(v25, "Failed to set trace etb mask");
                  Timestamp::Timestamp((Timestamp *)v37);
                  Timestamp::asString((uint64_t)v37, 0, 9, __p);
                  v36 = 0;
                  LOBYTE(v35) = 0;
                  ResetInfo::ResetInfo((std::string *)buf, &__dst, &v43, (__int128 *)&v41, (uint64_t)__p, 7, &v35);
                  if (v40 < 0)
                    operator delete(__p[0]);
                  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v37, v38);
                  operator delete(v25);
                  if (SHIBYTE(v44) < 0)
                    operator delete((void *)v43);
                  if (SHIBYTE(v46) < 0)
                    operator delete((void *)__dst);
                  ResetInfo::ResetInfo(&v28, (__int128 *)buf);
                  ICETrace::commandResetModem_sync(v4, (__int128 *)&v28);
                  if (v34 < 0)
                  {
                    operator delete(v33);
                    if ((v32 & 0x80000000) == 0)
                    {
LABEL_37:
                      if ((v30 & 0x80000000) == 0)
                        goto LABEL_38;
                      goto LABEL_47;
                    }
                  }
                  else if ((v32 & 0x80000000) == 0)
                  {
                    goto LABEL_37;
                  }
                  operator delete(v31);
                  if ((v30 & 0x80000000) == 0)
                  {
LABEL_38:
                    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_39;
                    goto LABEL_48;
                  }
LABEL_47:
                  operator delete(v29);
                  if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_39:
                    if ((SHIBYTE(v55) & 0x80000000) == 0)
                      goto LABEL_40;
                    goto LABEL_49;
                  }
LABEL_48:
                  operator delete(v28.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v55) & 0x80000000) == 0)
                  {
LABEL_40:
                    if ((SBYTE7(v53) & 0x80000000) == 0)
                      goto LABEL_41;
                    goto LABEL_50;
                  }
LABEL_49:
                  operator delete(*((void **)&v54 + 1));
                  if ((SBYTE7(v53) & 0x80000000) == 0)
                  {
LABEL_41:
                    if ((SHIBYTE(v51) & 0x80000000) == 0)
                      goto LABEL_42;
                    goto LABEL_51;
                  }
LABEL_50:
                  operator delete((void *)v52);
                  if ((SHIBYTE(v51) & 0x80000000) == 0)
                  {
LABEL_42:
                    if ((SBYTE7(v50) & 0x80000000) == 0)
                      goto LABEL_43;
LABEL_52:
                    operator delete(*(void **)buf);
                    v8 = v48;
                    if (!v48)
                      goto LABEL_57;
                    goto LABEL_53;
                  }
LABEL_51:
                  operator delete(*((void **)&v50 + 1));
                  if ((SBYTE7(v50) & 0x80000000) == 0)
                  {
LABEL_43:
                    v8 = v48;
                    if (!v48)
                      goto LABEL_57;
                    goto LABEL_53;
                  }
                  goto LABEL_52;
                }
              }
              memmove(v22, v19, v21);
              goto LABEL_29;
            }
          }
          memmove(p_dst, v13, v15);
          goto LABEL_21;
        }
        if (os_log_type_enabled(*(os_log_t *)(v4 + 40), OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1A343C000, v11, OS_LOG_TYPE_DEFAULT, "#I Successfully set etb trace mask.", buf, 2u);
        }
      }
LABEL_53:
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
LABEL_57:
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
}

void sub_1A349A3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  NSObject *v49;
  uint64_t v50;

  ResetInfo::~ResetInfo((void **)&a9);
  ResetInfo::~ResetInfo((void **)(v50 - 208));
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v50 - 224);
  if (!v49)
    _Unwind_Resume(a1);
  dispatch_group_leave(v49);
  dispatch_release(v49);
  _Unwind_Resume(a1);
}

_QWORD *trace::TraceMaskInfo::TraceMaskInfo(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  const void *v6;
  size_t v7;
  char *v8;
  char *v9;
  const void *v10;
  size_t v11;
  char *v12;
  char *v13;

  a1[1] = 0;
  *a1 = &off_1E4A08C08;
  a1[2] = 0;
  a1[3] = 0;
  v6 = *(const void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = v5 - *(_QWORD *)a2;
  if (v5 != *(_QWORD *)a2)
  {
    if ((v7 & 0x8000000000000000) != 0)
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v5 - *(_QWORD *)a2);
    a1[1] = v8;
    a1[2] = v8;
    v9 = &v8[v7];
    a1[3] = &v8[v7];
    memcpy(v8, v6, v7);
    a1[2] = v9;
  }
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  v10 = *(const void **)a3;
  v11 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v11)
  {
    if ((v11 & 0x8000000000000000) != 0)
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v11);
    a1[4] = v12;
    a1[5] = v12;
    v13 = &v12[v11];
    a1[6] = &v12[v11];
    memcpy(v12, v10, v11);
    a1[5] = v13;
  }
  return a1;
}

void sub_1A349A570(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 40) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  size_t v14;
  char *v15;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      goto LABEL_22;
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if ((v11 & 0x8000000000000000) != 0)
LABEL_22:
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    result = operator new(v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    v12 = a3 - __src;
    if (v12)
      result = memcpy(result, __src, v12);
LABEL_21:
    v7[1] = &v9[v12];
    return result;
  }
  v13 = (_BYTE *)result[1];
  v14 = v13 - v9;
  if (v13 - v9 >= a4)
  {
    v12 = a3 - __src;
    if (v12)
      result = memmove((void *)*result, __src, v12);
    goto LABEL_21;
  }
  v15 = &__src[v14];
  if (v13 != v9)
  {
    result = memmove((void *)*result, __src, v14);
    v9 = (char *)v7[1];
  }
  if (a3 != v15)
    result = memmove(v9, v15, a3 - v15);
  v7[1] = &v9[a3 - v15];
  return result;
}

_QWORD *std::shared_ptr<ICETrace>::shared_ptr[abi:ne180100]<ICETrace,std::shared_ptr<ICETrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<ICETrace>(ICETrace*)::{lambda(ICETrace*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A08C30;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1A349A7F8(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<ICETrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<ICETrace>(ICETrace*)::{lambda(ICETrace*)#1}::operator() const(ICETrace*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1A349A818(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ICETrace *,std::shared_ptr<ICETrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<ICETrace>(ICETrace*)::{lambda(ICETrace *)#1},std::allocator<ICETrace>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ICETrace *,std::shared_ptr<ICETrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<ICETrace>(ICETrace*)::{lambda(ICETrace *)#1},std::allocator<ICETrace>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<ICETrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<ICETrace>(ICETrace*)::{lambda(ICETrace*)#1}::operator() const(ICETrace*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<ICETrace *,std::shared_ptr<ICETrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<ICETrace>(ICETrace*)::{lambda(ICETrace *)#1},std::allocator<ICETrace>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI8ICETraceEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI8ICETraceEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI8ICETraceEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI8ICETraceEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<ICETrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<ICETrace>(ICETrace*)::{lambda(ICETrace*)#1}::operator() const(ICETrace*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<Trace>::execute_wrapped<ICETrace::init(std::string,std::weak_ptr<abm::BasebandTracingTask>,dispatch::group)::$_0>(ICETrace::init(std::string,std::weak_ptr<abm::BasebandTracingTask>,dispatch::group)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ICETrace::init(std::string,std::weak_ptr<abm::BasebandTracingTask>,dispatch::group)::$_0,std::default_delete<ICETrace::init(std::string,std::weak_ptr<abm::BasebandTracingTask>,dispatch::group)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  char *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::string __dst;
  void *__p[2];
  std::string::size_type v24;
  __int128 v25;

  v2 = *a1;
  v3 = **a1;
  v4 = abm::trace::kScratchFolder[0];
  v5 = strlen(abm::trace::kScratchFolder[0]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v6;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
    p_dst = &__dst;
    if (!v5)
      goto LABEL_9;
  }
  memmove(p_dst, v4, v6);
LABEL_9:
  p_dst->__r_.__value_.__s.__data_[v6] = 0;
  v10 = std::string::append(&__dst, "BBTrace.scratch/", 0x10uLL);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v24 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  abm::trace::TraceInfo::create();
  v12 = v25;
  v25 = 0uLL;
  v13 = *(std::__shared_weak_count **)(v3 + 488);
  *(_OWORD *)(v3 + 480) = v12;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (!*((_QWORD *)&v25 + 1))
    goto LABEL_18;
  v17 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if ((SHIBYTE(v24) & 0x80000000) == 0)
    {
LABEL_19:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_20;
LABEL_24:
      operator delete(__dst.__r_.__value_.__l.__data_);
      operator delete(v2);
      v19 = (std::__shared_weak_count *)a1[2];
      if (!v19)
        goto LABEL_29;
      goto LABEL_25;
    }
  }
  else
  {
LABEL_18:
    if ((SHIBYTE(v24) & 0x80000000) == 0)
      goto LABEL_19;
  }
  operator delete(__p[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_24;
LABEL_20:
  operator delete(v2);
  v19 = (std::__shared_weak_count *)a1[2];
  if (!v19)
    goto LABEL_29;
LABEL_25:
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_29:
  operator delete(a1);
}

void sub_1A349AAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  _QWORD *v21;
  void *v22;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      operator delete(v22);
      v24 = (std::__shared_weak_count *)v21[2];
      if (!v24)
        goto LABEL_11;
      goto LABEL_7;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  operator delete(v22);
  v24 = (std::__shared_weak_count *)v21[2];
  if (!v24)
    goto LABEL_11;
LABEL_7:
  p_shared_owners = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_11:
  operator delete(v21);
  _Unwind_Resume(a1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEclIJS5_S7_EEEvDpT__block_invoke(_QWORD *a1)
{
  const void *v2;
  uint64_t v3;
  void *v4;
  xpc_object_t object;
  CFTypeRef cf;

  v3 = a1[4];
  v2 = (const void *)a1[5];
  cf = v2;
  if (v2)
    CFRetain(v2);
  v4 = (void *)a1[6];
  object = v4;
  if (v4)
    xpc_retain(v4);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, CFTypeRef *, xpc_object_t *))(v3 + 16))(v3, &cf, &object);
  xpc_release(object);
  object = 0;
  if (cf)
    CFRelease(cf);
}

void sub_1A349AC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, CFTypeRef cf)
{
  xpc_release(object);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c87_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c15_ZTSN3xpc4dictE(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  void *v5;
  const void *v6;
  void *v7;
  xpc_object_t result;

  v4 = (const void *)a2[4];
  if (!v4)
  {
    v6 = (const void *)a2[5];
    a1[4] = 0;
    a1[5] = v6;
    if (!v6)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = _Block_copy(v4);
  v6 = (const void *)a2[5];
  a1[4] = v5;
  a1[5] = v6;
  if (v6)
LABEL_5:
    CFRetain(v6);
LABEL_6:
  v7 = (void *)a2[6];
  a1[6] = v7;
  if (v7)
    return xpc_retain(v7);
  result = xpc_null_create();
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c87_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c15_ZTSN3xpc4dictE(uint64_t a1)
{
  const void *v2;
  const void *v3;

  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 32);
  if (v3)
    _Block_release(v3);
}

void ctu::SharedSynchronizable<Trace>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E4A08CC8;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI5TraceE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t __cxx_global_var_init_114()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1A343C000);
  }
  return result;
}

_QWORD *abm::SystemLogsTask::getName(abm::SystemLogsTask *this)
{
  unsigned __int8 v1;
  unsigned int v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_7);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&_MergedGlobals_7))
    return qword_1ED114A10;
  v4 = *((_DWORD *)this + 26) - 1;
  if (v4 > 9)
    v5 = "invalid";
  else
    v5 = off_1E4A08E10[v4];
  std::string::basic_string[abi:ne180100]<0>(qword_1ED114A10, v5);
  __cxa_atexit(MEMORY[0x1E0DE44D0], qword_1ED114A10, &dword_1A343C000);
  __cxa_guard_release(&_MergedGlobals_7);
  return qword_1ED114A10;
}

void sub_1A349B008(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&_MergedGlobals_7);
  _Unwind_Resume(a1);
}

uint64_t abm::SystemLogsTask::SystemLogsTask(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v5 = (std::__shared_weak_count *)a3[1];
  v18 = *a3;
  v19 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (std::__shared_weak_count *)a4[1];
  v16 = *a4;
  v17 = v8;
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }
  abm::HelperTask::HelperTask(a1, a2, &v18, &v16);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  v11 = v19;
  if (v19)
  {
    v12 = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_QWORD *)a1 = off_1E4A08D78;
  v14 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  *(_QWORD *)(a1 + 136) = dispatch_queue_create("systemlogs.task.queue", v14);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  return a1;
}

void sub_1A349B114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void abm::SystemLogsTask::init_sync(abm::SystemLogsTask *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  void *v16;
  NSObject *v17;
  char *v18;
  unint64_t v19;
  void *v20;
  NSObject *v21;
  char *v22;
  unint64_t v23;
  void *v24;
  NSObject *v25;
  char *v26;
  unint64_t v27;
  void *v28;
  NSObject *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD v32[6];
  std::__shared_weak_count *v33;
  _QWORD v34[2];
  char *v35;
  __int128 v36;
  _QWORD v37[6];
  std::__shared_weak_count *v38;
  _QWORD v39[2];
  char *v40;
  __int128 v41;
  _QWORD v42[6];
  std::__shared_weak_count *v43;
  _QWORD v44[2];
  char *v45;
  __int128 v46;
  _QWORD aBlock[6];
  std::__shared_weak_count *v48;
  _QWORD v49[2];
  char *v50;
  __int128 v51;
  uint64_t v52;
  std::__shared_weak_count *v53;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v10)
      goto LABEL_57;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v10)
      goto LABEL_57;
  }
  v11 = std::__shared_weak_count::lock(v10);
  v53 = v11;
  if (v11)
  {
    v12 = v11;
    v13 = *((_QWORD *)this + 15);
    v52 = v13;
    if (v13)
    {
      v14 = (char *)operator new(0x20uLL);
      v50 = v14;
      v51 = xmmword_1A357F820;
      strcpy(v14, "CommandOsLogArchiveSnapshot");
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3321888768;
      aBlock[2] = ___ZN3abm14SystemLogsTask9init_syncEv_block_invoke;
      aBlock[3] = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrIN3abm10HelperTaskEEE_e242_v48__0_ServerClientState__shared_ptr_TelephonyXPC::ServerClientState::State____State_____shared_weak_count___8_dict__object__v__24_callback_void_____int__xpc::dict____block_void_____int__xpc::dict_______queue__object___dispatch_object_s____32l;
      aBlock[4] = this;
      aBlock[5] = v3;
      v48 = v5;
      do
        v15 = __ldxr(p_shared_weak_owners);
      while (__stxr(v15 + 1, p_shared_weak_owners));
      v16 = _Block_copy(aBlock);
      v17 = *((_QWORD *)this + 11);
      if (v17)
        dispatch_retain(*((dispatch_object_t *)this + 11));
      v49[0] = v16;
      v49[1] = v17;
      abm::HelperServerInternal::setCommandHandler(v13, (uint64_t)&v50, (uint64_t)v49);
      if (v17)
        dispatch_release(v17);
      if (v16)
        _Block_release(v16);
      operator delete(v14);
      v18 = (char *)operator new(0x20uLL);
      v45 = v18;
      v46 = xmmword_1A3580300;
      strcpy(v18, "CommandSysdiagnoseSnapshot");
      v42[0] = MEMORY[0x1E0C809B0];
      v42[1] = 3321888768;
      v42[2] = ___ZN3abm14SystemLogsTask9init_syncEv_block_invoke_4;
      v42[3] = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrIN3abm10HelperTaskEEE_e242_v48__0_ServerClientState__shared_ptr_TelephonyXPC::ServerClientState::State____State_____shared_weak_count___8_dict__object__v__24_callback_void_____int__xpc::dict____block_void_____int__xpc::dict_______queue__object___dispatch_object_s____32l;
      v42[4] = this;
      v42[5] = v3;
      v43 = v5;
      do
        v19 = __ldxr(p_shared_weak_owners);
      while (__stxr(v19 + 1, p_shared_weak_owners));
      v20 = _Block_copy(v42);
      v21 = *((_QWORD *)this + 11);
      if (v21)
        dispatch_retain(*((dispatch_object_t *)this + 11));
      v44[0] = v20;
      v44[1] = v21;
      abm::HelperServerInternal::setCommandHandler(v13, (uint64_t)&v45, (uint64_t)v44);
      if (v21)
        dispatch_release(v21);
      if (v20)
        _Block_release(v20);
      operator delete(v18);
      v22 = (char *)operator new(0x20uLL);
      v40 = v22;
      v41 = xmmword_1A357F050;
      strcpy(v22, "CommandSysdiagnoseStatus");
      v37[0] = MEMORY[0x1E0C809B0];
      v37[1] = 3321888768;
      v37[2] = ___ZN3abm14SystemLogsTask9init_syncEv_block_invoke_2;
      v37[3] = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrIN3abm10HelperTaskEEE_e242_v48__0_ServerClientState__shared_ptr_TelephonyXPC::ServerClientState::State____State_____shared_weak_count___8_dict__object__v__24_callback_void_____int__xpc::dict____block_void_____int__xpc::dict_______queue__object___dispatch_object_s____32l;
      v37[4] = this;
      v37[5] = v3;
      v38 = v5;
      do
        v23 = __ldxr(p_shared_weak_owners);
      while (__stxr(v23 + 1, p_shared_weak_owners));
      v24 = _Block_copy(v37);
      v25 = *((_QWORD *)this + 11);
      if (v25)
        dispatch_retain(*((dispatch_object_t *)this + 11));
      v39[0] = v24;
      v39[1] = v25;
      abm::HelperServerInternal::setCommandHandler(v13, (uint64_t)&v40, (uint64_t)v39);
      if (v25)
        dispatch_release(v25);
      if (v24)
        _Block_release(v24);
      operator delete(v22);
      v26 = (char *)operator new(0x20uLL);
      v35 = v26;
      v36 = xmmword_1A357F830;
      strcpy(v26, "CommandOsLogProcessingStatus");
      v32[0] = MEMORY[0x1E0C809B0];
      v32[1] = 3321888768;
      v32[2] = ___ZN3abm14SystemLogsTask9init_syncEv_block_invoke_6;
      v32[3] = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrIN3abm10HelperTaskEEE_e242_v48__0_ServerClientState__shared_ptr_TelephonyXPC::ServerClientState::State____State_____shared_weak_count___8_dict__object__v__24_callback_void_____int__xpc::dict____block_void_____int__xpc::dict_______queue__object___dispatch_object_s____32l;
      v32[4] = this;
      v32[5] = v3;
      v33 = v5;
      do
        v27 = __ldxr(p_shared_weak_owners);
      while (__stxr(v27 + 1, p_shared_weak_owners));
      v28 = _Block_copy(v32);
      v29 = *((_QWORD *)this + 11);
      if (v29)
        dispatch_retain(v29);
      v34[0] = v28;
      v34[1] = v29;
      abm::HelperServerInternal::setCommandHandler(v13, (uint64_t)&v35, (uint64_t)v34);
      if (v29)
        dispatch_release(v29);
      if (v28)
        _Block_release(v28);
      operator delete(v26);
      if (v33)
        std::__shared_weak_count::__release_weak(v33);
      if (v38)
        std::__shared_weak_count::__release_weak(v38);
      if (v43)
        std::__shared_weak_count::__release_weak(v43);
      if (v48)
        std::__shared_weak_count::__release_weak(v48);
    }
    v30 = (unint64_t *)&v12->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_57:
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1A349B5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40,char a41)
{
  std::__shared_weak_count *v41;
  void *v42;
  uint64_t v43;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;

  dispatch::callback<void({block_pointer})(TelephonyXPC::ServerClientState,xpc::dict,dispatch::callback<void({block_pointer})(int,xpc::dict)>)>::~callback((uint64_t)&a17);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  operator delete(v42);
  if (a28)
  {
    std::__shared_weak_count::__release_weak(a28);
    v45 = a40;
    if (!a40)
    {
LABEL_5:
      v46 = *(std::__shared_weak_count **)(v43 - 168);
      if (!v46)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  else
  {
    v45 = a40;
    if (!a40)
      goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v45);
  v46 = *(std::__shared_weak_count **)(v43 - 168);
  if (!v46)
  {
LABEL_6:
    std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v43 - 120);
    std::__shared_weak_count::__release_weak(v41);
    _Unwind_Resume(a1);
  }
LABEL_9:
  std::__shared_weak_count::__release_weak(v46);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v43 - 120);
  std::__shared_weak_count::__release_weak(v41);
  _Unwind_Resume(a1);
}

void sub_1A349B6B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v2;
  uint64_t v3;
  std::__shared_weak_count *v5;

  dispatch::callback<void({block_pointer})(TelephonyXPC::ServerClientState,xpc::dict,dispatch::callback<void({block_pointer})(int,xpc::dict)>)>::~callback(v3 - 160);
  v5 = *(std::__shared_weak_count **)(v3 - 168);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  operator delete(v2);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v3 - 120);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_1A349B6F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v2 - 120);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void ___ZN3abm14SystemLogsTask9init_syncEv_block_invoke(void **a1, uint64_t a2, xpc_object_t *a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  void *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *v14;
  xpc_object_t v15;
  void *v16;
  ctu::XpcJetsamAssertion *v17;
  std::string::size_type v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  xpc_object_t value;
  NSObject *v29;
  xpc_object_t v30;
  xpc_object_t v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  NSObject *v35;
  NSObject *v36;
  NSObject *v37;
  std::string *v38;
  std::string *v39;
  char *v40;
  unint64_t *v41;
  unint64_t v42;
  std::string *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  void *__p[2];
  void (*v48)(uint64_t);
  std::string v49;
  std::string v50;
  std::string v51;
  dispatch_group_t group[2];
  NSObject *v53;
  std::string v54;
  std::string v55[2];
  void *v56[5];
  unint64_t v57;

  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v8 = a1[4];
    v9 = std::__shared_weak_count::lock(v5);
    if (v9)
    {
      v10 = v9;
      v11 = a1[5];
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (v13)
      {
        if (!v11)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v10);
        if (!v11)
          return;
      }
      v14 = *((_QWORD *)v8 + 14);
      if (v14)
      {
        dispatch_retain(*((dispatch_object_t *)v8 + 14));
        dispatch_group_enter(v14);
      }
      if (MEMORY[0x1A85902BC](*a3) != MEMORY[0x1E0C812F8])
      {
        v15 = xpc_null_create();
        if (*(_QWORD *)a4)
          v16 = _Block_copy(*(const void **)a4);
        else
          v16 = 0;
        v29 = *(NSObject **)(a4 + 8);
        __p[0] = (void *)MEMORY[0x1E0C809B0];
        __p[1] = (void *)3321888768;
        v48 = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__2ES2_EEEvDpT__block_invoke;
        v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
        if (v16)
        {
          LODWORD(v50.__r_.__value_.__l.__data_) = -534716414;
          v49.__r_.__value_.__l.__size_ = (std::string::size_type)_Block_copy(v16);
          v49.__r_.__value_.__r.__words[2] = (std::string::size_type)v15;
          if (v15)
          {
LABEL_36:
            xpc_retain(v15);
LABEL_39:
            dispatch_async(v29, __p);
            xpc_release((xpc_object_t)v49.__r_.__value_.__r.__words[2]);
            v49.__r_.__value_.__r.__words[2] = 0;
            if (v49.__r_.__value_.__l.__size_)
              _Block_release((const void *)v49.__r_.__value_.__l.__size_);
            if (v16)
              _Block_release(v16);
            xpc_release(v15);
            goto LABEL_44;
          }
        }
        else
        {
          LODWORD(v50.__r_.__value_.__l.__data_) = -534716414;
          v49.__r_.__value_.__l.__size_ = 0;
          v49.__r_.__value_.__r.__words[2] = (std::string::size_type)v15;
          if (v15)
            goto LABEL_36;
        }
        v49.__r_.__value_.__r.__words[2] = (std::string::size_type)xpc_null_create();
        goto LABEL_39;
      }
      v56[4] = (void *)0xAAAAAAAAAAAAAAAALL;
      v57 = 0xAAAAAAAAAAAAAAAALL;
      v17 = (ctu::XpcJetsamAssertion *)pthread_mutex_lock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
      v18 = xmmword_1ED1146C0;
      if (!(_QWORD)xmmword_1ED1146C0)
      {
        ctu::XpcJetsamAssertion::create_default_global(v17);
        v19 = *(_OWORD *)__p;
        __p[0] = 0;
        __p[1] = 0;
        v20 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED1146C0 + 1);
        xmmword_1ED1146C0 = v19;
        if (v20)
        {
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v18 = xmmword_1ED1146C0;
      }
      v23 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED1146C0 + 1);
      v55[1].__r_.__value_.__r.__words[0] = v18;
      v55[1].__r_.__value_.__l.__size_ = *((_QWORD *)&xmmword_1ED1146C0 + 1);
      if (*((_QWORD *)&xmmword_1ED1146C0 + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&xmmword_1ED1146C0 + 1) + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      pthread_mutex_unlock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
      HIBYTE(v56[2]) = 19;
      strcpy((char *)v56, "logarchive snapshot");
      ctu::XpcJetsamAssertion::createActivity();
      if (SHIBYTE(v56[2]) < 0)
        operator delete(v56[0]);
      if (v23)
      {
        v26 = (unint64_t *)&v23->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      memset(&v55[1], 170, sizeof(std::string));
      value = xpc_dictionary_get_value(*a3, "TimestampString");
      v54.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
      if (value)
        xpc_retain(value);
      else
        v54.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      Timestamp::Timestamp((Timestamp *)v55);
      Timestamp::asString((uint64_t)v55, 0, 9, __p);
      xpc::dyn_cast_or_default();
      if (SHIBYTE(v48) < 0)
        operator delete(__p[0]);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v55, (_QWORD *)v55[0].__r_.__value_.__l.__size_);
      xpc_release(v54.__r_.__value_.__l.__data_);
      memset(v55, 170, 24);
      v30 = xpc_dictionary_get_value(*a3, "History");
      v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
      if (v30)
        xpc_retain(v30);
      else
        v54.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      __p[0] = 0;
      __p[1] = 0;
      v48 = 0;
      xpc::dyn_cast_or_default();
      if (SHIBYTE(v48) < 0)
        operator delete(__p[0]);
      xpc_release(v54.__r_.__value_.__l.__data_);
      memset(&v54, 170, sizeof(v54));
      v31 = xpc_dictionary_get_value(*a3, "LogPath");
      __p[0] = v31;
      if (v31)
        xpc_retain(v31);
      else
        __p[0] = xpc_null_create();
      xpc::dyn_cast_or_default();
      xpc_release(__p[0]);
      v32 = (unint64_t *)a1[6];
      __p[0] = a1[5];
      __p[1] = v32;
      if (v32)
      {
        v33 = v32 + 2;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      v48 = (void (*)(uint64_t))v8;
      if (SHIBYTE(v55[1].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v49, v55[1].__r_.__value_.__l.__data_, v55[1].__r_.__value_.__l.__size_);
      else
        v49 = v55[1];
      if (SHIBYTE(v55[0].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v50, v55[0].__r_.__value_.__l.__data_, v55[0].__r_.__value_.__l.__size_);
      else
        v50 = v55[0];
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v51, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
      else
        v51 = v54;
      group[0] = v14;
      if (v14)
      {
        dispatch_retain(v14);
        if (group[0])
          dispatch_group_enter(group[0]);
      }
      v35 = *(NSObject **)a4;
      if (*(_QWORD *)a4)
        v35 = _Block_copy(v35);
      v36 = *(NSObject **)(a4 + 8);
      group[1] = v35;
      v53 = v36;
      if (v36)
        dispatch_retain(v36);
      v37 = *((_QWORD *)v8 + 17);
      v38 = (std::string *)operator new(0x78uLL);
      v39 = v38;
      v40 = (char *)__p[1];
      v38->__r_.__value_.__l.__data_ = (std::string::pointer)__p[0];
      v38->__r_.__value_.__l.__size_ = (std::string::size_type)v40;
      if (v40)
      {
        v41 = (unint64_t *)(v40 + 16);
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      v38->__r_.__value_.__r.__words[2] = (std::string::size_type)v48;
      v43 = v38 + 1;
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v43, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v43->__r_.__value_.__l.__data_ = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
        v39[1].__r_.__value_.__r.__words[2] = v49.__r_.__value_.__r.__words[2];
      }
      v39[2] = v50;
      memset(&v50, 0, sizeof(v50));
      v39[3] = v51;
      memset(&v51, 0, sizeof(v51));
      *(_OWORD *)&v39[4].__r_.__value_.__l.__data_ = *(_OWORD *)group;
      group[0] = 0;
      group[1] = 0;
      v39[4].__r_.__value_.__r.__words[2] = (std::string::size_type)v53;
      v53 = 0;
      dispatch_async_f(v37, v39, (dispatch_function_t)_ZZN8dispatch5asyncIZZN3abm14SystemLogsTask9init_syncEvEUb_E3__1EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS6_14default_deleteIS8_EEEEENUlPvE_8__invokeESC_);
      _ZZZN3abm14SystemLogsTask9init_syncEvEUb_EN3__1D1Ev((uint64_t)__p);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v54.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v55[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_85:
          if ((SHIBYTE(v55[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_86;
          goto LABEL_90;
        }
      }
      else if ((SHIBYTE(v55[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_85;
      }
      operator delete(v55[0].__r_.__value_.__l.__data_);
      if ((SHIBYTE(v55[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_86:
        v44 = (std::__shared_weak_count *)v57;
        if (!v57)
        {
LABEL_44:
          if (v14)
          {
            dispatch_group_leave(v14);
            dispatch_release(v14);
          }
          return;
        }
LABEL_91:
        v45 = (unint64_t *)&v44->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
        goto LABEL_44;
      }
LABEL_90:
      operator delete(v55[1].__r_.__value_.__l.__data_);
      v44 = (std::__shared_weak_count *)v57;
      if (!v57)
        goto LABEL_44;
      goto LABEL_91;
    }
  }
}

void sub_1A349BD98(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;
  std::__shared_weak_count *v43;

  v43 = *(std::__shared_weak_count **)(v41 + 8);
  if (v43)
  {
    std::__shared_weak_count::__release_weak(v43);
    __clang_call_terminate(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1A349BE60(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  xpc_release(object);
  if (a32 < 0)
    operator delete(a27);
  JUMPOUT(0x1A349BEC0);
}

void sub_1A349BE94(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,xpc_object_t object)
{
  uint64_t v27;

  if (a14 < 0)
    operator delete(__p);
  xpc_release(object);
  if (*(char *)(v27 - 129) < 0)
    operator delete(*(void **)(v27 - 152));
  JUMPOUT(0x1A349BF1CLL);
}

void sub_1A349BED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,xpc_object_t object,uint64_t a28,uint64_t a29,char a30,_QWORD *a31)
{
  NSObject *v31;
  uint64_t v32;

  if (a14 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a30, a31);
  xpc_release(object);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v32 - 96);
  if (v31)
  {
    dispatch_group_leave(v31);
    dispatch_release(v31);
  }
  _Unwind_Resume(a1);
}

void sub_1A349BF40()
{
  uint64_t v0;
  uint64_t v1;

  if (*(char *)(v1 - 105) < 0)
    operator delete(*(void **)(v1 - 128));
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1 - 152);
  if (!v0)
    JUMPOUT(0x1A349BF38);
  JUMPOUT(0x1A349BF28);
}

void sub_1A349BF68()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x1A349BF38);
  JUMPOUT(0x1A349BF28);
}

uint64_t _ZZZN3abm14SystemLogsTask9init_syncEvEUb_EN3__1D1Ev(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;

  v2 = *(NSObject **)(a1 + 112);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 104);
  if (v3)
    _Block_release(v3);
  v4 = *(NSObject **)(a1 + 96);
  if (v4)
  {
    dispatch_group_leave(v4);
    v5 = *(NSObject **)(a1 + 96);
    if (v5)
      dispatch_release(v5);
  }
  if (*(char *)(a1 + 95) < 0)
  {
    operator delete(*(void **)(a1 + 72));
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
LABEL_10:
      if ((*(char *)(a1 + 47) & 0x80000000) == 0)
        goto LABEL_11;
LABEL_16:
      operator delete(*(void **)(a1 + 24));
      v6 = *(std::__shared_weak_count **)(a1 + 8);
      if (!v6)
        return a1;
      goto LABEL_12;
    }
  }
  else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_10;
  }
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_16;
LABEL_11:
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
LABEL_12:
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void ___ZN3abm14SystemLogsTask9init_syncEv_block_invoke_4(void **a1, uint64_t a2, xpc_object_t *a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  void *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *v14;
  xpc_object_t v15;
  void *v16;
  ctu::XpcJetsamAssertion *v17;
  void *v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  xpc_object_t value;
  NSObject *v29;
  uint64_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  char v35;
  unint64_t *v36;
  unint64_t *v37;
  unint64_t v38;
  NSObject *v39;
  NSObject *v40;
  NSObject *v41;
  void **v42;
  void **v43;
  char *v44;
  unint64_t *v45;
  unint64_t v46;
  std::string *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  void *__p[2];
  __int128 v52;
  std::string aBlock;
  std::string v54;
  dispatch_group_t group[2];
  NSObject *v56;
  std::string v57;
  std::string v58[2];
  std::string v59;
  std::string v60;
  void *v61[6];
  char v62[32];
  unint64_t v63;
  unint64_t v64;

  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v8 = a1[4];
    v9 = std::__shared_weak_count::lock(v5);
    if (v9)
    {
      v10 = v9;
      v11 = a1[5];
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (v13)
      {
        if (!v11)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v10);
        if (!v11)
          return;
      }
      v14 = *((_QWORD *)v8 + 14);
      if (v14)
      {
        dispatch_retain(*((dispatch_object_t *)v8 + 14));
        dispatch_group_enter(v14);
      }
      if (MEMORY[0x1A85902BC](*a3) != MEMORY[0x1E0C812F8])
      {
        v15 = xpc_null_create();
        if (*(_QWORD *)a4)
          v16 = _Block_copy(*(const void **)a4);
        else
          v16 = 0;
        v29 = *(NSObject **)(a4 + 8);
        __p[0] = (void *)MEMORY[0x1E0C809B0];
        __p[1] = (void *)3321888768;
        *(_QWORD *)&v52 = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__2ES2_EEEvDpT__block_invoke;
        *((_QWORD *)&v52 + 1) = &__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
        if (v16)
        {
          LODWORD(aBlock.__r_.__value_.__r.__words[2]) = -534716414;
          aBlock.__r_.__value_.__r.__words[0] = (std::string::size_type)_Block_copy(v16);
          aBlock.__r_.__value_.__l.__size_ = (std::string::size_type)v15;
          if (v15)
          {
LABEL_34:
            xpc_retain(v15);
LABEL_37:
            dispatch_async(v29, __p);
            xpc_release((xpc_object_t)aBlock.__r_.__value_.__l.__size_);
            aBlock.__r_.__value_.__l.__size_ = 0;
            if (aBlock.__r_.__value_.__r.__words[0])
              _Block_release(aBlock.__r_.__value_.__l.__data_);
            if (v16)
              _Block_release(v16);
            xpc_release(v15);
            goto LABEL_42;
          }
        }
        else
        {
          LODWORD(aBlock.__r_.__value_.__r.__words[2]) = -534716414;
          aBlock.__r_.__value_.__r.__words[0] = 0;
          aBlock.__r_.__value_.__l.__size_ = (std::string::size_type)v15;
          if (v15)
            goto LABEL_34;
        }
        aBlock.__r_.__value_.__l.__size_ = (std::string::size_type)xpc_null_create();
        goto LABEL_37;
      }
      v63 = 0xAAAAAAAAAAAAAAAALL;
      v64 = 0xAAAAAAAAAAAAAAAALL;
      v17 = (ctu::XpcJetsamAssertion *)pthread_mutex_lock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
      v18 = (void *)xmmword_1ED1146C0;
      if (!(_QWORD)xmmword_1ED1146C0)
      {
        ctu::XpcJetsamAssertion::create_default_global(v17);
        v19 = *(_OWORD *)__p;
        __p[0] = 0;
        __p[1] = 0;
        v20 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED1146C0 + 1);
        xmmword_1ED1146C0 = v19;
        if (v20)
        {
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v18 = (void *)xmmword_1ED1146C0;
      }
      v23 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED1146C0 + 1);
      v61[3] = v18;
      v61[4] = *((void **)&xmmword_1ED1146C0 + 1);
      if (*((_QWORD *)&xmmword_1ED1146C0 + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&xmmword_1ED1146C0 + 1) + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      pthread_mutex_unlock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
      v62[23] = 20;
      strcpy(v62, "sysdiagnose snapshot");
      ctu::XpcJetsamAssertion::createActivity();
      if (v23)
      {
        v26 = (unint64_t *)&v23->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      memset(&v61[3], 170, 24);
      value = xpc_dictionary_get_value(*a3, "TimestampString");
      v60.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
      if (value)
        xpc_retain(value);
      else
        v60.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      Timestamp::Timestamp((Timestamp *)v61);
      Timestamp::asString(v30, 0, 9, __p);
      xpc::dyn_cast_or_default();
      if (SBYTE7(v52) < 0)
        operator delete(__p[0]);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v61, (_QWORD *)v61[1]);
      xpc_release(v60.__r_.__value_.__l.__data_);
      memset(v61, 170, 24);
      v31 = xpc_dictionary_get_value(*a3, "DumpStateReason");
      v60.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
      if (v31)
        xpc_retain(v31);
      else
        v60.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v52 = 0;
      xpc::dyn_cast_or_default();
      if (SBYTE7(v52) < 0)
        operator delete(__p[0]);
      xpc_release(v60.__r_.__value_.__l.__data_);
      memset(&v60, 170, sizeof(v60));
      abm::SystemLogsTask::filterReason_sync((uint64_t)v61, &v60);
      memset(&v59, 170, sizeof(v59));
      v32 = xpc_dictionary_get_value(*a3, "History");
      v58[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
      if (v32)
        xpc_retain(v32);
      else
        v58[1].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v52 = 0;
      xpc::dyn_cast_or_default();
      if (SBYTE7(v52) < 0)
        operator delete(__p[0]);
      xpc_release(v58[1].__r_.__value_.__l.__data_);
      memset(&v58[1], 170, sizeof(std::string));
      v33 = xpc_dictionary_get_value(*a3, "LogPath");
      __p[0] = v33;
      if (v33)
        xpc_retain(v33);
      else
        __p[0] = xpc_null_create();
      xpc::dyn_cast_or_default();
      xpc_release(__p[0]);
      v34 = xpc_dictionary_get_value(*a3, "RequireUserConfirmation");
      __p[0] = v34;
      if (v34)
        xpc_retain(v34);
      else
        __p[0] = xpc_null_create();
      v35 = xpc::dyn_cast_or_default();
      xpc_release(__p[0]);
      v36 = (unint64_t *)a1[6];
      __p[0] = a1[5];
      __p[1] = v36;
      if (v36)
      {
        v37 = v36 + 2;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      LOBYTE(v52) = v35;
      *((_QWORD *)&v52 + 1) = v8;
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&aBlock, v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
      else
        aBlock = v60;
      if (SHIBYTE(v61[5]) < 0)
        std::string::__init_copy_ctor_external(&v54, (const std::string::value_type *)v61[3], (std::string::size_type)v61[4]);
      else
        v54 = *(std::string *)&v61[3];
      group[0] = v14;
      if (v14)
      {
        dispatch_retain(v14);
        if (group[0])
          dispatch_group_enter(group[0]);
      }
      v39 = *(NSObject **)a4;
      if (*(_QWORD *)a4)
        v39 = _Block_copy(v39);
      v40 = *(NSObject **)(a4 + 8);
      group[1] = v39;
      v56 = v40;
      if (v40)
        dispatch_retain(v40);
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v57, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
      else
        v57 = v59;
      if (SHIBYTE(v58[1].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(v58, v58[1].__r_.__value_.__l.__data_, v58[1].__r_.__value_.__l.__size_);
      else
        v58[0] = v58[1];
      v41 = *((_QWORD *)v8 + 17);
      v42 = (void **)operator new(0x98uLL);
      v43 = v42;
      v44 = (char *)__p[1];
      *v42 = __p[0];
      v42[1] = v44;
      if (v44)
      {
        v45 = (unint64_t *)(v44 + 16);
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      *((_OWORD *)v42 + 1) = v52;
      if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external((std::string *)(v42 + 4), aBlock.__r_.__value_.__l.__data_, aBlock.__r_.__value_.__l.__size_);
      else
        *(std::string *)(v42 + 4) = aBlock;
      v47 = (std::string *)(v43 + 7);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v47, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v47->__r_.__value_.__l.__data_ = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
        v43[9] = (void *)v54.__r_.__value_.__r.__words[2];
      }
      *((_OWORD *)v43 + 5) = *(_OWORD *)group;
      *(_OWORD *)group = 0u;
      v43[12] = v56;
      v56 = 0;
      *(std::string *)(v43 + 13) = v57;
      memset(&v57, 0, sizeof(v57));
      *(std::string *)(v43 + 16) = v58[0];
      memset(v58, 0, 24);
      dispatch_async_f(v41, v43, (dispatch_function_t)_ZZN8dispatch5asyncIZZN3abm14SystemLogsTask9init_syncEvEUb0_E3__3EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS6_14default_deleteIS8_EEEEENUlPvE_8__invokeESC_);
      _ZZZN3abm14SystemLogsTask9init_syncEvEUb0_EN3__3D1Ev((uint64_t)__p);
      if (SHIBYTE(v58[1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v58[1].__r_.__value_.__l.__data_);
        if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_97:
          if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_98;
          goto LABEL_104;
        }
      }
      else if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_97;
      }
      operator delete(v59.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_98:
        if ((SHIBYTE(v61[2]) & 0x80000000) == 0)
          goto LABEL_99;
        goto LABEL_105;
      }
LABEL_104:
      operator delete(v60.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v61[2]) & 0x80000000) == 0)
      {
LABEL_99:
        if ((SHIBYTE(v61[5]) & 0x80000000) == 0)
          goto LABEL_100;
        goto LABEL_106;
      }
LABEL_105:
      operator delete(v61[0]);
      if ((SHIBYTE(v61[5]) & 0x80000000) == 0)
      {
LABEL_100:
        v48 = (std::__shared_weak_count *)v64;
        if (!v64)
        {
LABEL_42:
          if (v14)
          {
            dispatch_group_leave(v14);
            dispatch_release(v14);
          }
          return;
        }
LABEL_107:
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
        goto LABEL_42;
      }
LABEL_106:
      operator delete(v61[3]);
      v48 = (std::__shared_weak_count *)v64;
      if (!v64)
        goto LABEL_42;
      goto LABEL_107;
    }
  }
}

void sub_1A349C81C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,dispatch_group_t group,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;
  void **v55;
  std::__shared_weak_count *v57;

  if (*(char *)(v54 + 55) < 0)
    operator delete(*v55);
  v57 = *(std::__shared_weak_count **)(v54 + 8);
  if (v57)
  {
    std::__shared_weak_count::__release_weak(v57);
    __clang_call_terminate(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1A349C920(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  xpc_release(object);
  if (a33 < 0)
    operator delete(a28);
  JUMPOUT(0x1A349C970);
}

void sub_1A349C954(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  xpc_release(object);
  if (a36 < 0)
    operator delete(a31);
  JUMPOUT(0x1A349C9B4);
}

void sub_1A349C988(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,xpc_object_t object,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a14 < 0)
    operator delete(__p);
  xpc_release(object);
  if (a42 < 0)
    operator delete(a37);
  JUMPOUT(0x1A349C9CCLL);
}

void sub_1A349C9E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,xpc_object_t object)
{
  uint64_t v37;

  if (a14 < 0)
    operator delete(__p);
  xpc_release(object);
  if (*(char *)(v37 - 129) < 0)
    operator delete(*(void **)(v37 - 152));
  JUMPOUT(0x1A349CA6CLL);
}

void sub_1A349CA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,xpc_object_t object)
{
  NSObject *v37;
  uint64_t v38;

  if (a14 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v38 - 176, *(_QWORD **)(v38 - 168));
  xpc_release(object);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v38 - 96);
  if (v37)
  {
    dispatch_group_leave(v37);
    dispatch_release(v37);
  }
  _Unwind_Resume(a1);
}

void sub_1A349CA90()
{
  uint64_t v0;
  uint64_t v1;

  if (*(char *)(v1 - 105) < 0)
    operator delete(*(void **)(v1 - 128));
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1 - 152);
  if (!v0)
    JUMPOUT(0x1A349CA88);
  JUMPOUT(0x1A349CA78);
}

void sub_1A349CAB8()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x1A349CA88);
  JUMPOUT(0x1A349CA78);
}

void abm::SystemLogsTask::filterReason_sync(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type size;
  std::string::size_type v5;
  char *i;
  unint64_t v7;
  char v8;
  std::string *v9;
  unint64_t v10;
  std::string *v11;
  std::string::size_type v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  std::string *v16;
  size_t v17;
  __int128 *p_dst;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  void **v23;
  void *__p[2];
  char v25;
  void *v26[3];
  __int128 __dst;
  __int128 v28;
  char v29;
  void *v30;
  char v31;
  void *v32[2];
  char v33;
  void *v34[2];
  char v35;
  void *v36[2];
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  memset(a2, 170, sizeof(std::string));
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    v3 = *(_QWORD *)(a1 + 16);
    a2->__r_.__value_.__r.__words[2] = v3;
    size = HIBYTE(v3);
    if ((size & 0x80u) != 0)
      size = a2->__r_.__value_.__l.__size_;
    if (!size)
      return;
LABEL_9:
    memset(v26, 170, sizeof(v26));
    strcpy((char *)&v28 + 7, "\t**");
    strcpy((char *)&__dst, "[abmtool]");
    v29 = 2;
    v31 = 3;
    LODWORD(v30) = 2763306;
    v33 = 14;
    strcpy((char *)v32, "[ABM Settings]");
    v35 = 13;
    strcpy((char *)v34, "BB-Triggered:");
    v37 = 13;
    strcpy((char *)v36, "AP-Triggered:");
    std::vector<std::string>::vector[abi:ne180100](v26, (uint64_t)&__dst, 6uLL);
    if (v37 < 0)
    {
      operator delete(v36[0]);
      if ((v35 & 0x80000000) == 0)
      {
LABEL_11:
        if ((v33 & 0x80000000) == 0)
          goto LABEL_12;
        goto LABEL_65;
      }
    }
    else if ((v35 & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(v34[0]);
    if ((v33 & 0x80000000) == 0)
    {
LABEL_12:
      if ((v31 & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_66;
    }
LABEL_65:
    operator delete(v32[0]);
    if ((v31 & 0x80000000) == 0)
    {
LABEL_13:
      if ((v29 & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_67;
    }
LABEL_66:
    operator delete(v30);
    if ((v29 & 0x80000000) == 0)
    {
LABEL_14:
      if ((SBYTE7(v28) & 0x80000000) == 0)
      {
LABEL_15:
        for (i = (char *)v26[0]; i != v26[1]; i += 24)
        {
          util::strip_pattern(i, (uint64_t)a2, (std::string *)&__dst);
          if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
            operator delete(a2->__r_.__value_.__l.__data_);
          *(_OWORD *)&a2->__r_.__value_.__l.__data_ = __dst;
          a2->__r_.__value_.__r.__words[2] = v28;
        }
        v25 = 2;
        strcpy((char *)__p, " \t");
        util::strip_leading_trailing(a2, __p, &__dst);
        if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
          operator delete(a2->__r_.__value_.__l.__data_);
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = __dst;
        a2->__r_.__value_.__r.__words[2] = v28;
        BYTE7(v28) = 0;
        LOBYTE(__dst) = 0;
        if (v25 < 0)
          operator delete(__p[0]);
        v7 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        v8 = v7;
        v9 = (std::string *)a2->__r_.__value_.__r.__words[0];
        v10 = a2->__r_.__value_.__l.__size_;
        if ((v7 & 0x80u) == 0)
          v11 = a2;
        else
          v11 = (std::string *)a2->__r_.__value_.__r.__words[0];
        if ((v7 & 0x80u) == 0)
          v12 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        else
          v12 = a2->__r_.__value_.__l.__size_;
        if (v12)
        {
          v13 = MEMORY[0x1E0C80978];
          do
          {
            v14 = v11->__r_.__value_.__s.__data_[0];
            if ((v14 & 0x80000000) != 0)
              v15 = __maskrune(v14, 0x500uLL);
            else
              v15 = *(_DWORD *)(v13 + 4 * v14 + 60) & 0x500;
            if (!v15)
              v11->__r_.__value_.__s.__data_[0] = 95;
            v11 = (std::string *)((char *)v11 + 1);
            --v12;
          }
          while (v12);
          v7 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
          v9 = (std::string *)a2->__r_.__value_.__r.__words[0];
          v10 = a2->__r_.__value_.__l.__size_;
          v8 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        }
        if (v8 >= 0)
        {
          v16 = a2;
        }
        else
        {
          v7 = v10;
          v16 = v9;
        }
        if (v7 >= 0x1E)
          v17 = 30;
        else
          v17 = v7;
        if (v17 >= 0x17)
        {
          v20 = (v17 & 0x18) + 8;
          if ((v17 | 7) != 0x17)
            v20 = v17 | 7;
          v21 = v20 + 1;
          p_dst = (__int128 *)operator new(v20 + 1);
          *((_QWORD *)&__dst + 1) = v17;
          *(_QWORD *)&v28 = v21 | 0x8000000000000000;
          *(_QWORD *)&__dst = p_dst;
        }
        else
        {
          BYTE7(v28) = v17;
          p_dst = &__dst;
          if (!v17)
          {
            LOBYTE(__dst) = 0;
            if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_48;
            goto LABEL_54;
          }
        }
        memmove(p_dst, v16, v17);
        *((_BYTE *)p_dst + v17) = 0;
        if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_48:
          *(_OWORD *)&a2->__r_.__value_.__l.__data_ = __dst;
          a2->__r_.__value_.__r.__words[2] = v28;
          v19 = (void **)v26[0];
          if (!v26[0])
            return;
LABEL_55:
          v22 = (void **)v26[1];
          v23 = v19;
          if (v26[1] != v19)
          {
            do
            {
              if (*((char *)v22 - 1) < 0)
                operator delete(*(v22 - 3));
              v22 -= 3;
            }
            while (v22 != v19);
            v23 = (void **)v26[0];
          }
          v26[1] = v19;
          operator delete(v23);
          return;
        }
LABEL_54:
        operator delete(a2->__r_.__value_.__l.__data_);
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = __dst;
        a2->__r_.__value_.__r.__words[2] = v28;
        v19 = (void **)v26[0];
        if (!v26[0])
          return;
        goto LABEL_55;
      }
LABEL_68:
      operator delete((void *)__dst);
      goto LABEL_15;
    }
LABEL_67:
    operator delete(*((void **)&v28 + 1));
    if ((SBYTE7(v28) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_68;
  }
  std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  v5 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((v5 & 0x80u) != 0)
    v5 = a2->__r_.__value_.__l.__size_;
  if (v5)
    goto LABEL_9;
}

void sub_1A349CF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  std::vector<std::string>::~vector[abi:ne180100](&a16);
  if (*(char *)(v54 + 23) < 0)
  {
    operator delete(*(void **)v54);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t dispatch::callback<void({block_pointer})(int,xpc::dict)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t _ZZZN3abm14SystemLogsTask9init_syncEvEUb0_EN3__3D1Ev(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;

  if (*(char *)(a1 + 151) < 0)
  {
    operator delete(*(void **)(a1 + 128));
    if ((*(char *)(a1 + 127) & 0x80000000) == 0)
    {
LABEL_3:
      v2 = *(NSObject **)(a1 + 96);
      if (!v2)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((*(char *)(a1 + 127) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 104));
  v2 = *(NSObject **)(a1 + 96);
  if (v2)
LABEL_4:
    dispatch_release(v2);
LABEL_5:
  v3 = *(const void **)(a1 + 88);
  if (v3)
    _Block_release(v3);
  v4 = *(NSObject **)(a1 + 80);
  if (v4)
  {
    dispatch_group_leave(v4);
    v5 = *(NSObject **)(a1 + 80);
    if (v5)
      dispatch_release(v5);
  }
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_12;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    v6 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v6)
      return a1;
    goto LABEL_13;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_12:
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
LABEL_13:
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void ___ZN3abm14SystemLogsTask9init_syncEv_block_invoke_2(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  NSObject *v13;
  std::string::size_type size;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  std::string *v19;
  xpc_object_t v20;
  xpc_object_t v21;
  NSObject *v22;
  void **v23;
  xpc_object_t v24;
  const void *v25;
  void *v26;
  NSObject *v27;
  void *v28;
  std::string v29;
  xpc_object_t object;
  void *__p[2];
  void (*v32)(uint64_t);
  void *v33;
  void *aBlock;
  xpc_object_t v35;
  int v36;
  uint8_t buf[4];
  void **v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v5 = (std::__shared_weak_count *)a1[6];
  if (!v5)
    return;
  v7 = a1[4];
  v8 = std::__shared_weak_count::lock(v5);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v13 = *(NSObject **)(v7 + 112);
  if (v13)
  {
    dispatch_retain(*(dispatch_object_t *)(v7 + 112));
    dispatch_group_enter(v13);
  }
  object = xpc_null_create();
  memset(&v29, 170, sizeof(v29));
  if (*(char *)(v7 + 167) < 0)
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)(v7 + 144), *(_QWORD *)(v7 + 152));
  else
    v29 = *(std::string *)(v7 + 144);
  size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v29.__r_.__value_.__l.__size_;
  if (size)
  {
    v15 = xpc_dictionary_create(0, 0, 0);
    if (v15 || (v15 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1A85902BC](v15) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v15);
        v16 = v15;
      }
      else
      {
        v16 = xpc_null_create();
      }
    }
    else
    {
      v16 = xpc_null_create();
      v15 = 0;
    }
    xpc_release(v15);
    v17 = xpc_null_create();
    v18 = object;
    object = v16;
    xpc_release(v18);
    xpc_release(v17);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v29;
    else
      v19 = (std::string *)v29.__r_.__value_.__r.__words[0];
    v20 = xpc_string_create((const char *)v19);
    if (!v20)
      v20 = xpc_null_create();
    xpc_dictionary_set_value(object, "TimestampString", v20);
    v21 = xpc_null_create();
    xpc_release(v20);
    xpc_release(v21);
  }
  v22 = *(NSObject **)(v7 + 40);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((xpc::object *)&object);
    v23 = SHIBYTE(v32) >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v38 = v23;
    _os_log_impl(&dword_1A343C000, v22, OS_LOG_TYPE_DEFAULT, "#I Snapshot - running: %s", buf, 0xCu);
    if (SHIBYTE(v32) < 0)
      operator delete(__p[0]);
  }
  v24 = object;
  if (object)
  {
    xpc_retain(object);
    v25 = *(const void **)a4;
    if (*(_QWORD *)a4)
    {
LABEL_37:
      v26 = _Block_copy(v25);
      goto LABEL_40;
    }
  }
  else
  {
    v24 = xpc_null_create();
    v25 = *(const void **)a4;
    if (*(_QWORD *)a4)
      goto LABEL_37;
  }
  v26 = 0;
LABEL_40:
  v27 = *(NSObject **)(a4 + 8);
  __p[0] = (void *)MEMORY[0x1E0C809B0];
  __p[1] = (void *)3321888768;
  v32 = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__2ES2_EEEvDpT__block_invoke;
  v33 = &__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
  if (!v26)
  {
    v36 = 0;
    aBlock = 0;
    v35 = v24;
    if (v24)
      goto LABEL_42;
LABEL_44:
    v35 = xpc_null_create();
    goto LABEL_45;
  }
  v28 = _Block_copy(v26);
  v36 = 0;
  aBlock = v28;
  v35 = v24;
  if (!v24)
    goto LABEL_44;
LABEL_42:
  xpc_retain(v24);
LABEL_45:
  dispatch_async(v27, __p);
  xpc_release(v35);
  v35 = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v26)
    _Block_release(v26);
  xpc_release(v24);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  xpc_release(object);
  if (v13)
  {
    dispatch_group_leave(v13);
    dispatch_release(v13);
  }
}

void sub_1A349D4B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN3abm14SystemLogsTask9init_syncEv_block_invoke_6(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  NSObject *v13;
  int64_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  NSObject *v21;
  void **v22;
  xpc_object_t v23;
  const void *v24;
  void *v25;
  NSObject *v26;
  void *v27;
  xpc_object_t object;
  void *__p[2];
  void (*v30)(uint64_t);
  void *v31;
  void *aBlock;
  xpc_object_t v33;
  int v34;
  uint8_t buf[4];
  void **v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = (std::__shared_weak_count *)a1[6];
  if (!v5)
    return;
  v7 = a1[4];
  v8 = std::__shared_weak_count::lock(v5);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v13 = *(NSObject **)(v7 + 112);
  if (v13)
  {
    dispatch_retain(*(dispatch_object_t *)(v7 + 112));
    dispatch_group_enter(v13);
  }
  object = xpc_null_create();
  v14 = *(unsigned int *)(v7 + 168);
  if ((_DWORD)v14)
  {
    v15 = xpc_dictionary_create(0, 0, 0);
    if (v15 || (v15 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1A85902BC](v15) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v15);
        v16 = v15;
      }
      else
      {
        v16 = xpc_null_create();
      }
    }
    else
    {
      v16 = xpc_null_create();
      v15 = 0;
    }
    xpc_release(v15);
    v17 = xpc_null_create();
    v18 = object;
    object = v16;
    xpc_release(v18);
    xpc_release(v17);
    v19 = xpc_int64_create(v14);
    if (!v19)
      v19 = xpc_null_create();
    xpc_dictionary_set_value(object, "Mode", v19);
    v20 = xpc_null_create();
    xpc_release(v19);
    xpc_release(v20);
  }
  v21 = *(NSObject **)(v7 + 40);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((xpc::object *)&object);
    v22 = SHIBYTE(v30) >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v36 = v22;
    _os_log_impl(&dword_1A343C000, v21, OS_LOG_TYPE_DEFAULT, "#I Snapshot - running: %s", buf, 0xCu);
    if (SHIBYTE(v30) < 0)
      operator delete(__p[0]);
  }
  v23 = object;
  if (object)
  {
    xpc_retain(object);
    v24 = *(const void **)a4;
    if (*(_QWORD *)a4)
    {
LABEL_29:
      v25 = _Block_copy(v24);
      goto LABEL_32;
    }
  }
  else
  {
    v23 = xpc_null_create();
    v24 = *(const void **)a4;
    if (*(_QWORD *)a4)
      goto LABEL_29;
  }
  v25 = 0;
LABEL_32:
  v26 = *(NSObject **)(a4 + 8);
  __p[0] = (void *)MEMORY[0x1E0C809B0];
  __p[1] = (void *)3321888768;
  v30 = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__2ES2_EEEvDpT__block_invoke;
  v31 = &__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
  if (!v25)
  {
    v34 = 0;
    aBlock = 0;
    v33 = v23;
    if (v23)
      goto LABEL_34;
LABEL_36:
    v33 = xpc_null_create();
    goto LABEL_37;
  }
  v27 = _Block_copy(v25);
  v34 = 0;
  aBlock = v27;
  v33 = v23;
  if (!v23)
    goto LABEL_36;
LABEL_34:
  xpc_retain(v23);
LABEL_37:
  dispatch_async(v26, __p);
  xpc_release(v33);
  v33 = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v25)
    _Block_release(v25);
  xpc_release(v23);
  xpc_release(object);
  if (v13)
  {
    dispatch_group_leave(v13);
    dispatch_release(v13);
  }
}

void sub_1A349D890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t abm::SystemLogsTask::askForConfirmation_sync()
{
  uint64_t result;

  if ((TelephonyUtilIsInternalBuild() & 1) != 0)
    return 2;
  result = TelephonyUtilIsCarrierBuild();
  if ((_DWORD)result)
    return 2;
  return result;
}

void abm::SystemLogsTask::convertSysdiagnoseTimeFormat_sync(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  _BYTE *v11;
  char v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  time_t v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t **v23;
  int v24;
  _DWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE __p[48];
  _QWORD v33[2];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;
  tm v43;
  _QWORD v44[3];
  std::locale v45;
  int v46;
  char v47;

  memset(v44, 170, sizeof(v44));
  Timestamp::Timestamp((Timestamp *)v44);
  v43.tm_zone = (char *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v43.tm_mon = v4;
  *(_OWORD *)&v43.tm_isdst = v4;
  *(_OWORD *)&v43.tm_sec = v4;
  v41 = v4;
  v40 = v4;
  v39 = v4;
  v38 = v4;
  v37 = v4;
  v36 = v4;
  v35 = v4;
  v34 = v4;
  v33[1] = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&__p[32] = v4;
  *(_OWORD *)&__p[16] = v4;
  *(_OWORD *)__p = v4;
  v31 = v4;
  v30 = v4;
  v29 = v4;
  v28 = v4;
  v5 = MEMORY[0x1E0DE4FD8];
  v6 = MEMORY[0x1E0DE4FD8] + 64;
  v42 = 0xAAAAAAAAAAAAAAAALL;
  v33[0] = MEMORY[0x1E0DE4FD8] + 64;
  v7 = (uint64_t *)MEMORY[0x1E0DE4F58];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 16);
  v27 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 8);
  *(uint64_t *)((char *)&v27 + *(_QWORD *)(v27 - 24)) = v8;
  *(_QWORD *)&v28 = 0;
  v9 = (std::ios_base *)((char *)&v27 + *(_QWORD *)(v27 - 24));
  std::ios_base::init(v9, (char *)&v28 + 8);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v27 = v5 + 24;
  v33[0] = v6;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  *((_QWORD *)&v28 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  v11 = &__p[8];
  memset(&__p[8], 0, 32);
  v12 = 8;
  *(_DWORD *)&__p[40] = 8;
  if (&__p[8] != (_BYTE *)a1)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__assign_no_alias<true>(&__p[8], *(void **)a1, *(_QWORD *)(a1 + 8));
      v12 = __p[40];
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)a1;
      *(_QWORD *)&__p[24] = *(_QWORD *)(a1 + 16);
    }
  }
  *(_QWORD *)&__p[32] = 0;
  v13 = __p[31];
  if (__p[31] >= 0)
    v14 = &__p[8];
  else
    v14 = *(_BYTE **)&__p[8];
  if (__p[31] >= 0)
    v15 = __p[31];
  else
    v15 = *(_QWORD *)&__p[16];
  if ((v12 & 8) != 0)
  {
    *((_QWORD *)&v29 + 1) = v14;
    *(_QWORD *)&v30 = v14;
    *(_QWORD *)&__p[32] = &v14[v15];
    *((_QWORD *)&v30 + 1) = &v14[v15];
  }
  if ((v12 & 0x10) != 0)
  {
    *(_QWORD *)&__p[32] = &v14[v15];
    if ((__p[31] & 0x80) != 0)
    {
      v16 = (*(_QWORD *)&__p[24] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (*(_QWORD *)&__p[16] >= v16)
      {
        *(_QWORD *)&__p[16] = (*(_QWORD *)&__p[24] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        v11 = *(_BYTE **)&__p[8];
        goto LABEL_21;
      }
      v13 = *(_QWORD *)&__p[16];
    }
    else
    {
      v16 = 22;
      if (__p[31] > 0x15u)
      {
        __p[31] = 22;
LABEL_21:
        v11[v16] = 0;
        goto LABEL_22;
      }
    }
    std::string::append((std::string *)&__p[8], v16 - v13, 0);
LABEL_22:
    v17 = __p[31];
    if (__p[31] < 0)
      v17 = *(_QWORD *)&__p[16];
    *(_QWORD *)&v31 = v14;
    *((_QWORD *)&v31 + 1) = v14;
    *(_QWORD *)__p = &v14[v17];
    if ((__p[40] & 3) != 0)
    {
      if (v15 >> 31)
      {
        v18 = ((v15 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v19 = 0x7FFFFFFF * ((v18 + ((v15 - 0x80000000 - v18) >> 1)) >> 30);
        v14 += v19 + 0x7FFFFFFF;
        v15 = v15 - v19 - 0x7FFFFFFF;
        *((_QWORD *)&v31 + 1) = v14;
      }
      if (v15)
        *((_QWORD *)&v31 + 1) = &v14[v15];
    }
  }
  v47 = -86;
  MEMORY[0x1A858F734](&v47, &v27, 0);
  if (v47)
  {
    v46 = 0;
    std::ios_base::getloc((const std::ios_base *)((char *)&v27 + *(_QWORD *)(v27 - 24)));
    std::locale::use_facet(&v45, MEMORY[0x1E0DE4CC8]);
    std::locale::~locale(&v45);
    std::time_get<char,std::istreambuf_iterator<char>>::get();
    std::ios_base::clear((std::ios_base *)((char *)&v27 + *(_QWORD *)(v27 - 24)), *(_DWORD *)((char *)&v29 + *(_QWORD *)(v27 - 24) + 8) | v46);
  }
  v43.tm_isdst = -1;
  v20 = mktime(&v43);
  v21 = (uint64_t *)v44[1];
  if (v44[1])
  {
    while (1)
    {
      while (1)
      {
        v23 = (uint64_t **)v21;
        v24 = *((_DWORD *)v21 + 8);
        if (v24 < 1)
          break;
        v21 = *v23;
        v22 = v23;
        if (!*v23)
          goto LABEL_38;
      }
      if ((v24 & 0x80000000) == 0)
        break;
      v21 = v23[1];
      if (!v21)
      {
        v22 = v23 + 1;
        goto LABEL_38;
      }
    }
    v25 = v23;
  }
  else
  {
    v22 = (uint64_t **)&v44[1];
    v23 = (uint64_t **)&v44[1];
LABEL_38:
    v25 = operator new(0x38uLL);
    v25[8] = 0;
    *((_QWORD *)v25 + 5) = 0;
    *((_QWORD *)v25 + 6) = 0;
    *(_QWORD *)v25 = 0;
    *((_QWORD *)v25 + 1) = 0;
    *((_QWORD *)v25 + 2) = v23;
    *v22 = (uint64_t *)v25;
    v26 = (uint64_t *)v25;
    if (*(_QWORD *)v44[0])
    {
      v44[0] = *(_QWORD *)v44[0];
      v26 = *v22;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v44[1], v26);
    ++v44[2];
  }
  *((_QWORD *)v25 + 5) = v20;
  *((_QWORD *)v25 + 6) = 0;
  Timestamp::asString((uint64_t)v44, 0, 16, a2);
  v27 = *v7;
  *(uint64_t *)((char *)&v27 + *(_QWORD *)(v27 - 24)) = v7[3];
  *((_QWORD *)&v28 + 1) = v10 + 16;
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1A858F92C](v33);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v44, (_QWORD *)v44[1]);
}

void sub_1A349DDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  uint64_t v25;

  if (a24 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1A858F92C](v24);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v25 - 120, *(_QWORD **)(v25 - 112));
  _Unwind_Resume(a1);
}

void sub_1A349DE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::istringstream::~istringstream((uint64_t)&a9);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v9 - 120, *(_QWORD **)(v9 - 112));
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F58];
  v3 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1A858F92C](a1 + 120);
  return a1;
}

void abm::SystemLogsTask::snapshotSysdiagnose_sync(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  config::hw *v7;
  __int128 v8;
  size_t v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  config::hw *v13;
  int v14;
  const char *v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  size_t size;
  unint64_t v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  std::string *v25;
  void **v26;
  uint64_t v27;
  config::build *v28;
  void **v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  size_t v42;
  void **v43;
  uint64_t v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  NSObject *v49;
  void *v50;
  void *v51;
  void *v52;
  NSObject *v53;
  uint64_t v54;
  void *v55;
  NSObject *v56;
  void *v57;
  void *v58;
  void *v59;
  void *__p[2];
  unsigned __int8 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  void *v67[2];
  __int128 v68;
  __int128 v69;
  _OWORD v70[9];
  unint64_t v71;
  std::string v72;
  std::string v73;
  void *v74[3];
  _QWORD v75[3];
  _QWORD v76[3];
  _QWORD v77[2];
  _QWORD v78[2];
  void *__dst[6];

  __dst[3] = *(void **)MEMORY[0x1E0C80C00];
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  memset(v74, 170, sizeof(v74));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v73 = *(std::string *)a2;
  abm::SystemLogsTask::convertSysdiagnoseTimeFormat_sync((uint64_t)&v73, v74);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  memset(&v72, 170, sizeof(v72));
  config::hw::product(v7);
  util::strip_non_alpha(&v72);
  v71 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v70[7] = v8;
  v70[8] = v8;
  v70[5] = v8;
  v70[6] = v8;
  v70[3] = v8;
  v70[4] = v8;
  v70[1] = v8;
  v70[2] = v8;
  v69 = v8;
  v70[0] = v8;
  *(_OWORD *)v67 = v8;
  v68 = v8;
  v65 = v8;
  v66 = v8;
  v63 = v8;
  v64 = v8;
  v62 = v8;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v62);
  v9 = strlen(abm::trace::kSysdiagnosePrefix[0]);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)abm::trace::kSysdiagnosePrefix[0], v9);
  if (SHIBYTE(v74[2]) >= 0)
    v11 = v74;
  else
    v11 = (void **)v74[0];
  if (SHIBYTE(v74[2]) >= 0)
    v12 = HIBYTE(v74[2]);
  else
    v12 = (uint64_t)v74[1];
  v13 = (config::hw *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  v14 = config::hw::watch(v13);
  if (v14)
    v15 = "-Watch_OS-";
  else
    v15 = "-iPhone_OS-";
  if (v14)
    v16 = 10;
  else
    v16 = 11;
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v15, v16);
  v18 = SHIBYTE(v72.__r_.__value_.__r.__words[2]);
  if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v72.__r_.__value_.__r.__words[2]);
  else
    size = v72.__r_.__value_.__l.__size_;
  v20 = size + 1;
  memset(__dst, 170, 24);
  if (size + 1 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = v17;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = (void **)operator new(v23 + 1);
    __dst[1] = (void *)(size + 1);
    __dst[2] = (void *)(v24 | 0x8000000000000000);
    __dst[0] = v22;
  }
  else
  {
    memset(__dst, 0, 24);
    v22 = __dst;
    HIBYTE(__dst[2]) = size + 1;
    if (!size)
      goto LABEL_32;
  }
  if (v18 >= 0)
    v25 = &v72;
  else
    v25 = (std::string *)v72.__r_.__value_.__r.__words[0];
  memmove(v22, v25, size);
LABEL_32:
  *(_WORD *)((char *)v22 + size) = 45;
  if (SHIBYTE(__dst[2]) >= 0)
    v26 = __dst;
  else
    v26 = (void **)__dst[0];
  if (SHIBYTE(__dst[2]) >= 0)
    v27 = HIBYTE(__dst[2]);
  else
    v27 = (uint64_t)__dst[1];
  v28 = (config::build *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v26, v27);
  config::build::version(v28);
  if ((v61 & 0x80u) == 0)
    v29 = __p;
  else
    v29 = (void **)__p[0];
  if ((v61 & 0x80u) == 0)
    v30 = v61;
  else
    v30 = (uint64_t)__p[1];
  v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
  v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"--", 2);
  v33 = *(char *)(a3 + 23);
  if (v33 >= 0)
    v34 = a3;
  else
    v34 = *(_QWORD *)a3;
  if (v33 >= 0)
    v35 = *(unsigned __int8 *)(a3 + 23);
  else
    v35 = *(_QWORD *)(a3 + 8);
  v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
  if ((char)v61 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_52;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_52;
  }
  operator delete(__dst[0]);
LABEL_52:
  v37 = (void *)MEMORY[0x1A858FF20](v36);
  v77[0] = CFSTR("logarchive");
  v75[0] = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", *MEMORY[0x1E0D44708]);
  v76[0] = &unk_1E4A10758;
  v75[1] = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", *MEMORY[0x1E0D44718]);
  v76[1] = &unk_1E4A10758;
  v75[2] = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", *MEMORY[0x1E0D446E8]);
  v76[2] = &unk_1E4A10758;
  v38 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v76, v75, 3);
  v77[1] = CFSTR("basebandMeta");
  v78[0] = v38;
  v78[1] = &unk_1E4A10798;
  v39 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v78, v77, 2);
  v40 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v41 = (void *)MEMORY[0x1E0CB3940];
  if ((BYTE8(v69) & 0x10) != 0)
  {
    v44 = v69;
    if ((unint64_t)v69 < *((_QWORD *)&v66 + 1))
    {
      *(_QWORD *)&v69 = *((_QWORD *)&v66 + 1);
      v44 = *((_QWORD *)&v66 + 1);
    }
    v45 = (const void *)v66;
    v42 = v44 - v66;
    if ((unint64_t)(v44 - v66) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_90;
  }
  else
  {
    if ((BYTE8(v69) & 8) == 0)
    {
      v42 = 0;
      HIBYTE(__dst[2]) = 0;
      v43 = __dst;
      goto LABEL_67;
    }
    v45 = (const void *)*((_QWORD *)&v64 + 1);
    v42 = *((_QWORD *)&v65 + 1) - *((_QWORD *)&v64 + 1);
    if (*((_QWORD *)&v65 + 1) - *((_QWORD *)&v64 + 1) > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_90:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v42 >= 0x17)
  {
    v46 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v42 | 7) != 0x17)
      v46 = v42 | 7;
    v47 = v46 + 1;
    v43 = (void **)operator new(v46 + 1);
    __dst[1] = (void *)v42;
    __dst[2] = (void *)(v47 | 0x8000000000000000);
    __dst[0] = v43;
    goto LABEL_66;
  }
  HIBYTE(__dst[2]) = v42;
  v43 = __dst;
  if (v42)
LABEL_66:
    memmove(v43, v45, v42);
LABEL_67:
  *((_BYTE *)v43 + v42) = 0;
  if (SHIBYTE(__dst[2]) >= 0)
    v48 = __dst;
  else
    v48 = (void **)__dst[0];
  objc_msgSend(v40, "setObject:forKeyedSubscript:", objc_msgSend(v41, "stringWithUTF8String:", v48), CFSTR("archiveName"));
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
  objc_msgSend(v40, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("shouldCreateTarBall"));
  objc_msgSend(v40, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("getMetrics"));
  objc_msgSend(v40, "setValue:forKey:", v39, CFSTR("capOverride"));
  v49 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
  {
    v50 = (void *)objc_msgSend((id)objc_msgSend(v40, "description"), "UTF8String");
    LODWORD(__dst[0]) = 136315138;
    *(void **)((char *)__dst + 4) = v50;
    _os_log_impl(&dword_1A343C000, v49, OS_LOG_TYPE_DEFAULT, "#I Snapshot - starting: collecting sysdiagnose with metaData: %s", (uint8_t *)__dst, 0xCu);
  }
  v59 = 0;
  __p[0] = 0;
  v51 = (void *)objc_msgSend(MEMORY[0x1E0DE8AA8], "sysdiagnoseWithMetadata:withMetrics:withError:", v40, &v59, __p);
  v52 = __p[0];
  if (__p[0])
  {
    v53 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      v58 = (void *)objc_msgSend((id)objc_msgSend(v52, "description"), "UTF8String");
      LODWORD(__dst[0]) = 136315138;
      *(void **)((char *)__dst + 4) = v58;
      _os_log_error_impl(&dword_1A343C000, v53, OS_LOG_TYPE_ERROR, "Error collecting sysdiagnose: %s", (uint8_t *)__dst, 0xCu);
    }
  }
  else
  {
    v55 = v59;
    if (v59)
    {
      v56 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        v57 = (void *)objc_msgSend((id)objc_msgSend(v55, "description"), "UTF8String");
        LODWORD(__dst[0]) = 136315138;
        *(void **)((char *)__dst + 4) = v57;
        _os_log_impl(&dword_1A343C000, v56, OS_LOG_TYPE_DEFAULT, "#I Sysdiagnose metrics: %s", (uint8_t *)__dst, 0xCu);
      }
    }
  }
  if (v51)
    std::string::__assign_external(a4, (const std::string::value_type *)objc_msgSend(v51, "UTF8String"));
  objc_autoreleasePoolPop(v37);
  *(_QWORD *)&v62 = *MEMORY[0x1E0DE4F50];
  v54 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v63 = v54;
  *((_QWORD *)&v63 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v68) < 0)
    operator delete(v67[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A858F92C](v70);
  if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v74[2]) & 0x80000000) == 0)
      return;
LABEL_88:
    operator delete(v74[0]);
    return;
  }
  operator delete(v72.__r_.__value_.__l.__data_);
  if (SHIBYTE(v74[2]) < 0)
    goto LABEL_88;
}

void sub_1A349E60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;
  uint64_t v57;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  if (a56 < 0)
    operator delete(__p);
  if (*(char *)(v57 - 209) < 0)
    operator delete(*(void **)(v57 - 232));
  if (*(char *)(v56 + 23) < 0)
    operator delete(*(void **)v56);
  _Unwind_Resume(a1);
}

void abm::SystemLogsTask::snapshotOsLogArchive_sync(char *a1@<X2>, uint64_t a2@<X0>, const std::string::value_type *a3@<X1>, uint64_t a4@<X3>, NSObject **a5@<X4>, std::string *a6@<X8>)
{
  char *v8;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  char *v17;
  size_t v18;
  std::string::size_type v19;
  std::string *p_dst;
  uint64_t v21;
  uint64_t v22;
  int v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  int v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  size_t v33;
  std::string *v34;
  __int128 v35;
  __int128 v36;
  time_t v37;
  int64_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  xpc_object_t v43;
  std::string *v44;
  xpc_object_t v45;
  xpc_object_t v46;
  xpc_object_t v47;
  xpc_object_t v48;
  xpc_object_t v49;
  xpc_object_t v50;
  xpc_object_t v51;
  xpc_object_t v52;
  NSObject *v53;
  std::string *v54;
  NSObject *v55;
  char updated;
  NSObject *v57;
  std::string *v58;
  size_t size;
  std::string __p;
  gid_t v61;
  uid_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  void *v66;
  uint64_t v67;
  dispatch_group_t group;
  xpc_object_t xdict;
  std::string v70;
  std::string __dst;
  std::string v72;
  uint8_t buf[4];
  std::string *v74;
  tm __idx;
  uint64_t v76;

  v8 = a1;
  v76 = *MEMORY[0x1E0C80C00];
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, "false") && strcasecmp(v8, "off") && strcasecmp(v8, "no"))
    {
      if (strcasecmp(v8, "true")
        && strcasecmp(v8, "on")
        && strcasecmp(v8, "yes")
        && strcasecmp(v8, "full")
        && strcasecmp(v8, "streaming"))
      {
        v12 = v8;
        if (!strcasecmp(v8, "lite"))
          goto LABEL_132;
        goto LABEL_21;
      }
LABEL_32:
      v15 = 1;
      goto LABEL_33;
    }
LABEL_31:
    v15 = 0;
    goto LABEL_33;
  }
  v12 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, "false") || !strcasecmp(v12, "off") || !strcasecmp(v12, "no"))
    goto LABEL_31;
  if (!strcasecmp(v12, "true")
    || !strcasecmp(v12, "on")
    || !strcasecmp(v12, "yes")
    || !strcasecmp(v12, "full")
    || !strcasecmp(v12, "streaming"))
  {
    goto LABEL_32;
  }
  if (!strcasecmp(v12, "lite"))
  {
LABEL_132:
    v15 = 2;
    goto LABEL_33;
  }
LABEL_21:
  if (!strcasecmp(v12, "background"))
    goto LABEL_132;
  *(_QWORD *)&__idx.tm_sec = 0xAAAAAAAAAAAAAAAALL;
  v13 = std::stol((const std::string *)v8, (size_t *)&__idx, 0);
  v14 = v8[23];
  if ((v14 & 0x80u) != 0)
    v14 = *((_QWORD *)v8 + 1);
  if (*(_QWORD *)&__idx.tm_sec == v14)
  {
    v15 = v13;
    if ((v13 & 0x8000000000000000) == 0)
    {
LABEL_33:
      memset(a6, 170, sizeof(std::string));
      v17 = abm::trace::kLogDirPrefix[0];
      v18 = strlen(abm::trace::kLogDirPrefix[0]);
      if (v18 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v19 = v18;
      if (v18 >= 0x17)
      {
        v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v18 | 7) != 0x17)
          v21 = v18 | 7;
        v22 = v21 + 1;
        p_dst = (std::string *)operator new(v21 + 1);
        __dst.__r_.__value_.__l.__size_ = v19;
        __dst.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v18;
        p_dst = &__dst;
        if (!v18)
        {
LABEL_41:
          p_dst->__r_.__value_.__s.__data_[v19] = 0;
          v23 = *(char *)(a4 + 23);
          if (v23 >= 0)
            v24 = (const std::string::value_type *)a4;
          else
            v24 = *(const std::string::value_type **)a4;
          if (v23 >= 0)
            v25 = *(unsigned __int8 *)(a4 + 23);
          else
            v25 = *(_QWORD *)(a4 + 8);
          v26 = std::string::insert(&__dst, 0, v24, v25);
          v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
          v72.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v27;
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          v26->__r_.__value_.__r.__words[0] = 0;
          v28 = a3[23];
          if (v28 >= 0)
            v29 = a3;
          else
            v29 = *(const std::string::value_type **)a3;
          if (v28 >= 0)
            v30 = *((unsigned __int8 *)a3 + 23);
          else
            v30 = *((_QWORD *)a3 + 1);
          v31 = std::string::append(&v72, v29, v30);
          v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
          *(_QWORD *)&__idx.tm_mon = *((_QWORD *)&v31->__r_.__value_.__l + 2);
          *(_OWORD *)&__idx.tm_sec = v32;
          v31->__r_.__value_.__l.__size_ = 0;
          v31->__r_.__value_.__r.__words[2] = 0;
          v31->__r_.__value_.__r.__words[0] = 0;
          v33 = strlen(abm::trace::kLogArchiveSuffix[0]);
          v34 = std::string::append((std::string *)&__idx, abm::trace::kLogArchiveSuffix[0], v33);
          v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          a6->__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
          *(_OWORD *)&a6->__r_.__value_.__l.__data_ = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__idx.tm_year) < 0)
          {
            operator delete(*(void **)&__idx.tm_sec);
            if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_55:
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_56;
              goto LABEL_60;
            }
          }
          else if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_55;
          }
          operator delete(v72.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_56:
            memset(&v72, 170, sizeof(v72));
            if ((SHIBYTE(a6->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_57:
              v70 = *a6;
              goto LABEL_62;
            }
LABEL_61:
            std::string::__init_copy_ctor_external(&v70, a6->__r_.__value_.__l.__data_, a6->__r_.__value_.__l.__size_);
LABEL_62:
            support::fs::createUniquePath((const char *)&v70, &v72);
            if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v70.__r_.__value_.__l.__data_);
            __idx.tm_zone = (char *)0xAAAAAAAAAAAAAAAALL;
            *(_QWORD *)&v36 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v36 + 1) = 0xAAAAAAAAAAAAAAAALL;
            *(_OWORD *)&__idx.tm_mon = v36;
            *(_OWORD *)&__idx.tm_isdst = v36;
            *(_OWORD *)&__idx.tm_sec = v36;
            if (a3[23] < 0)
              a3 = *(const std::string::value_type **)a3;
            if (strptime(a3, "%Y-%m-%d-%H-%M-%S", &__idx))
            {
              __idx.tm_isdst = -1;
              v37 = mktime(&__idx);
              if (v37 == -1)
                v38 = -1;
              else
                v38 = v37 - v15;
            }
            else
            {
              v38 = 0;
            }
            xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
            v39 = xpc_dictionary_create(0, 0, 0);
            v40 = v39;
            if (v39)
            {
              xdict = v39;
            }
            else
            {
              v40 = xpc_null_create();
              xdict = v40;
              if (!v40)
              {
                v41 = xpc_null_create();
                v40 = 0;
                goto LABEL_78;
              }
            }
            if (MEMORY[0x1A85902BC](v40) == MEMORY[0x1E0C812F8])
            {
              xpc_retain(v40);
LABEL_79:
              xpc_release(v40);
              v42 = xpc_BOOL_create(1);
              if (!v42)
                v42 = xpc_null_create();
              xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0D446F8], v42);
              v43 = xpc_null_create();
              xpc_release(v42);
              xpc_release(v43);
              if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v44 = &v72;
              else
                v44 = (std::string *)v72.__r_.__value_.__r.__words[0];
              v45 = xpc_string_create((const char *)v44);
              if (!v45)
                v45 = xpc_null_create();
              xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0D44710], v45);
              v46 = xpc_null_create();
              xpc_release(v45);
              xpc_release(v46);
              v47 = xpc_int64_create(v38);
              if (!v47)
                v47 = xpc_null_create();
              xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0D446F0], v47);
              v48 = xpc_null_create();
              xpc_release(v47);
              xpc_release(v48);
              v49 = xpc_int64_create(v38);
              if (!v49)
                v49 = xpc_null_create();
              xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0D44700], v49);
              v50 = xpc_null_create();
              xpc_release(v49);
              xpc_release(v50);
              v51 = xpc_int64_create(v38);
              if (!v51)
                v51 = xpc_null_create();
              xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0D44720], v51);
              v52 = xpc_null_create();
              xpc_release(v51);
              xpc_release(v52);
              v53 = *(NSObject **)(a2 + 40);
              if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
              {
                xpc::object::to_string((xpc::object *)&xdict);
                v54 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                    ? &__dst
                    : (std::string *)__dst.__r_.__value_.__r.__words[0];
                *(_DWORD *)buf = 136315138;
                v74 = v54;
                _os_log_impl(&dword_1A343C000, v53, OS_LOG_TYPE_DEFAULT, "#I Snapshot - starting: collecting systemlogs archive with parameters: %s", buf, 0xCu);
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__dst.__r_.__value_.__l.__data_);
              }
              v63 = MEMORY[0x1E0C809B0];
              v64 = 3321888768;
              v65 = ___ZN3abm14SystemLogsTask25snapshotOsLogArchive_syncENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_S7_N8dispatch13group_sessionE_block_invoke;
              v66 = &__block_descriptor_48_e8_40c30_ZTSN8dispatch13group_sessionE_e9_v16__0r_8l;
              v55 = *a5;
              v67 = a2;
              group = v55;
              if (v55)
              {
                dispatch_retain(v55);
                dispatch_group_enter(group);
              }
              if (OSLogCreateArchiveWithDictionary())
              {
                if (SHIBYTE(a6->__r_.__value_.__r.__words[2]) < 0)
                {
                  *a6->__r_.__value_.__l.__data_ = 0;
                  a6->__r_.__value_.__l.__size_ = 0;
                }
                else
                {
                  a6->__r_.__value_.__s.__data_[0] = 0;
                  *((_BYTE *)&a6->__r_.__value_.__s + 23) = 0;
                }
              }
              else
              {
                v61 = -1431655766;
                v62 = -1431655766;
                if (!support::fs::getUidGid(1, &v62, &v61))
                  goto LABEL_111;
                if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&__p, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
                else
                  __p = v72;
                updated = support::fs::updateOwner((const char *)&__p, v62, v61);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                if ((updated & 1) == 0)
                {
LABEL_111:
                  v57 = *(NSObject **)(a2 + 40);
                  if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
                  {
                    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 9;
                    __dst.__r_.__value_.__r.__words[0] = *(_QWORD *)"_wireless";
                    LOWORD(__dst.__r_.__value_.__r.__words[1]) = str_1[8];
                    *(_DWORD *)buf = 136315138;
                    v74 = &__dst;
                    _os_log_error_impl(&dword_1A343C000, v57, OS_LOG_TYPE_ERROR, "Failed to update to %s", buf, 0xCu);
                    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__dst.__r_.__value_.__l.__data_);
                  }
                }
                if (&v72 != a6)
                {
                  if (SHIBYTE(a6->__r_.__value_.__r.__words[2]) < 0)
                  {
                    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v58 = &v72;
                    else
                      v58 = (std::string *)v72.__r_.__value_.__r.__words[0];
                    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      size = HIBYTE(v72.__r_.__value_.__r.__words[2]);
                    else
                      size = v72.__r_.__value_.__l.__size_;
                    std::string::__assign_no_alias<false>((void **)&a6->__r_.__value_.__l.__data_, v58, size);
                  }
                  else if ((*((_BYTE *)&v72.__r_.__value_.__s + 23) & 0x80) != 0)
                  {
                    std::string::__assign_no_alias<true>(a6, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    *a6 = v72;
                  }
                }
              }
              if (group)
              {
                dispatch_group_leave(group);
                if (group)
                  dispatch_release(group);
              }
              xpc_release(xdict);
              if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v72.__r_.__value_.__l.__data_);
              return;
            }
            v41 = xpc_null_create();
LABEL_78:
            xdict = v41;
            goto LABEL_79;
          }
LABEL_60:
          operator delete(__dst.__r_.__value_.__l.__data_);
          memset(&v72, 170, sizeof(v72));
          if ((SHIBYTE(a6->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_57;
          goto LABEL_61;
        }
      }
      memmove(p_dst, v17, v19);
      goto LABEL_41;
    }
  }
  v16 = *(NSObject **)(a2 + 40);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    if (v8[23] < 0)
      v8 = *(char **)v8;
    __idx.tm_sec = 136315138;
    *(_QWORD *)&__idx.tm_min = v8;
    _os_log_impl(&dword_1A343C000, v16, OS_LOG_TYPE_DEFAULT, "#I Error on history value : %s", (uint8_t *)&__idx, 0xCu);
  }
  a6->__r_.__value_.__r.__words[0] = 0;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
}

void sub_1A349F064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,dispatch_group_t group,xpc_object_t object,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,char a43)
{
  uint64_t v43;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    if (!os_log_type_enabled(*(os_log_t *)(v43 + 40), OS_LOG_TYPE_DEFAULT))
      JUMPOUT(0x1A349E958);
    JUMPOUT(0x1A349E918);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3abm14SystemLogsTask25snapshotOsLogArchive_syncENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_S7_N8dispatch13group_sessionE_block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v4 = 136315138;
    v5 = a2;
    _os_log_error_impl(&dword_1A343C000, v3, OS_LOG_TYPE_ERROR, "Error creating systemlogs archive: %s", (uint8_t *)&v4, 0xCu);
  }
}

void abm::SystemLogsTask::~SystemLogsTask(abm::SystemLogsTask *this)
{
  void *v1;

  abm::SystemLogsTask::~SystemLogsTask(this);
  operator delete(v1);
}

{
  NSObject *v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;

  *(_QWORD *)this = off_1E4A08D78;
  if ((*((char *)this + 167) & 0x80000000) == 0)
  {
    v2 = *((_QWORD *)this + 17);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*((void **)this + 18));
  v2 = *((_QWORD *)this + 17);
  if (v2)
LABEL_3:
    dispatch_release(v2);
LABEL_4:
  *(_QWORD *)this = off_1E4A0F3B8;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = *((_QWORD *)this + 14);
  if (v4)
    dispatch_release(v4);
  *(_QWORD *)this = &unk_1E4A06FA8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v5 = *((_QWORD *)this + 12);
  if (v5)
    dispatch_release(v5);
  v6 = *((_QWORD *)this + 11);
  if (v6)
    dispatch_release(v6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

_QWORD *std::vector<std::string>::vector[abi:ne180100](_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  std::string *v9;
  __int128 *v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    v5 = 24 * a3;
    v6 = (char *)operator new(24 * a3);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      v9 = (std::string *)&v6[v7];
      v10 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v8 = *v10;
        v9->__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v8;
      }
      v7 += 24;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_1A349F3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_1A349F3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 3;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__2ES2_EEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  xpc_object_t object;

  v1 = *(unsigned int *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  object = v2;
  if (v2)
    xpc_retain(v2);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v3 + 16))(v3, v1, &object);
  xpc_release(object);
}

void sub_1A349F69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZZN3abm14SystemLogsTask9init_syncEvEUb_E3__1EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS6_14default_deleteIS8_EEEEENUlPvE_8__invokeESC_(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  NSObject *v10;
  std::string::size_type size;
  xpc_object_t v12;
  xpc_object_t v13;
  std::string *p_p;
  std::string::size_type v15;
  xpc_object_t v16;
  const void *v17;
  void *v18;
  NSObject *v19;
  void *v20;
  std::string *v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  const void *v25;
  void *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  NSObject *v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string __p;
  __int128 buf;
  void (*v36)(uint64_t);
  void *v37;
  void *aBlock;
  xpc_object_t object;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v2)
    goto LABEL_78;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = std::__shared_weak_count::lock(v2);
  if (!v4)
    goto LABEL_78;
  v5 = v4;
  v6 = *(_QWORD *)a1;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    if (!v6)
      goto LABEL_78;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6)
      goto LABEL_78;
  }
  *(_DWORD *)(v3 + 168) = 1;
  memset(&__p, 170, sizeof(__p));
  if (*(char *)(a1 + 47) < 0)
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
  else
    v33 = *(std::string *)(a1 + 24);
  if (*(char *)(a1 + 71) < 0)
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
  else
    v32 = *(std::string *)(a1 + 48);
  if (*(char *)(a1 + 95) < 0)
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(a1 + 72), *(_QWORD *)(a1 + 80));
  else
    v31 = *(std::string *)(a1 + 72);
  v9 = *(NSObject **)(a1 + 96);
  v30 = v9;
  if (v9)
  {
    dispatch_retain(v9);
    dispatch_group_enter(v9);
  }
  abm::SystemLogsTask::snapshotOsLogArchive_sync((char *)&v32, v3, (const std::string::value_type *)&v33, (uint64_t)&v31, &v30, &__p);
  if (v9)
  {
    dispatch_group_leave(v9);
    dispatch_release(v9);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_24:
      if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_25;
      goto LABEL_35;
    }
  }
  else if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(v32.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_25:
    v10 = *(NSObject **)(v3 + 40);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      goto LABEL_26;
    goto LABEL_36;
  }
LABEL_35:
  operator delete(v33.__r_.__value_.__l.__data_);
  v10 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
LABEL_26:
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (size)
      goto LABEL_29;
LABEL_41:
    v16 = xpc_null_create();
    v17 = *(const void **)(a1 + 104);
    if (v17)
      v18 = _Block_copy(v17);
    else
      v18 = 0;
    v19 = *(NSObject **)(a1 + 112);
    *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
    *((_QWORD *)&buf + 1) = 3321888768;
    v36 = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__2ES2_EEEvDpT__block_invoke;
    v37 = &__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
    if (v18)
    {
      v20 = _Block_copy(v18);
      v40 = -534716416;
      aBlock = v20;
      object = v16;
      if (v16)
      {
LABEL_47:
        xpc_retain(v16);
LABEL_50:
        dispatch_async(v19, &buf);
        xpc_release(object);
        object = 0;
        if (aBlock)
          _Block_release(aBlock);
        if (v18)
          _Block_release(v18);
        xpc_release(v16);
        goto LABEL_76;
      }
    }
    else
    {
      v40 = -534716416;
      aBlock = 0;
      object = v16;
      if (v16)
        goto LABEL_47;
    }
    object = xpc_null_create();
    goto LABEL_50;
  }
LABEL_36:
  p_p = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(buf) = 136315138;
  *(_QWORD *)((char *)&buf + 4) = p_p;
  _os_log_impl(&dword_1A343C000, v10, OS_LOG_TYPE_DEFAULT, "#I Snapshot systemlogs archive finished: [path=%s]", (uint8_t *)&buf, 0xCu);
  v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v15 = __p.__r_.__value_.__l.__size_;
  if (!v15)
    goto LABEL_41;
LABEL_29:
  v12 = xpc_dictionary_create(0, 0, 0);
  if (v12 || (v12 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A85902BC](v12) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v12);
      v13 = v12;
    }
    else
    {
      v13 = xpc_null_create();
    }
  }
  else
  {
    v13 = xpc_null_create();
    v12 = 0;
  }
  xpc_release(v12);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &__p;
  else
    v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v22 = xpc_string_create((const char *)v21);
  if (!v22)
    v22 = xpc_null_create();
  xpc_dictionary_set_value(v13, "PackagePath", v22);
  v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  if (v13)
  {
    xpc_retain(v13);
    v24 = v13;
    v25 = *(const void **)(a1 + 104);
    if (v25)
    {
LABEL_63:
      v26 = _Block_copy(v25);
      goto LABEL_66;
    }
  }
  else
  {
    v24 = xpc_null_create();
    v25 = *(const void **)(a1 + 104);
    if (v25)
      goto LABEL_63;
  }
  v26 = 0;
LABEL_66:
  v27 = *(NSObject **)(a1 + 112);
  *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
  *((_QWORD *)&buf + 1) = 3321888768;
  v36 = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__2ES2_EEEvDpT__block_invoke;
  v37 = &__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
  if (!v26)
  {
    v40 = 0;
    aBlock = 0;
    object = v24;
    if (v24)
      goto LABEL_68;
LABEL_70:
    object = xpc_null_create();
    goto LABEL_71;
  }
  v28 = _Block_copy(v26);
  v40 = 0;
  aBlock = v28;
  object = v24;
  if (!v24)
    goto LABEL_70;
LABEL_68:
  xpc_retain(v24);
LABEL_71:
  dispatch_async(v27, &buf);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v26)
    _Block_release(v26);
  xpc_release(v24);
  xpc_release(v13);
LABEL_76:
  *(_DWORD *)(v3 + 168) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_78:
  v29 = (void *)_ZZZN3abm14SystemLogsTask9init_syncEvEUb_EN3__1D1Ev(a1);
  operator delete(v29);
}

void sub_1A349FBD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZZN3abm14SystemLogsTask9init_syncEvEUb0_E3__3EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS6_14default_deleteIS8_EEEEENUlPvE_8__invokeESC_(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char IsInternalBuild;
  uint64_t v10;
  __int128 *v11;
  void **v12;
  char v13;
  __int128 v14;
  NSObject *v15;
  NSObject *v16;
  std::string *v17;
  std::string::size_type v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  const void *v22;
  void *v23;
  const void *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  size_t v28;
  NSObject *v29;
  NSObject *v30;
  std::string::size_type size;
  xpc_object_t v32;
  xpc_object_t v33;
  std::string *v34;
  std::string::size_type v35;
  xpc_object_t v36;
  const void *v37;
  void *v38;
  NSObject *v39;
  void *v40;
  std::string *v41;
  xpc_object_t v42;
  xpc_object_t v43;
  xpc_object_t v44;
  const void *v45;
  void *v46;
  const void *v47;
  NSObject *v48;
  void *v49;
  xpc_object_t v50;
  const void *v51;
  void *v52;
  const void *v53;
  NSObject *v54;
  void *v55;
  std::string *v56;
  xpc_object_t v57;
  xpc_object_t v58;
  xpc_object_t v59;
  const void *v60;
  void *v61;
  NSObject *v62;
  void *v63;
  void *v64;
  NSObject *v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::string v69;
  uint8_t buf[4];
  __int128 *p_p;
  __int16 v72;
  std::string *v73;
  __int128 __p;
  void (*v75)(uint64_t);
  void *v76;
  void *aBlock;
  xpc_object_t object;
  int v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v2)
    goto LABEL_169;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = std::__shared_weak_count::lock(v2);
  if (!v4)
    goto LABEL_169;
  v5 = v4;
  v6 = *(_QWORD *)a1;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    if (!v6)
      goto LABEL_169;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6)
      goto LABEL_169;
  }
  if (!*(_BYTE *)(a1 + 16))
  {
    v11 = (__int128 *)(a1 + 56);
    v12 = (void **)(v3 + 144);
    if (v3 + 144 != a1 + 56)
    {
      v13 = *(_BYTE *)(a1 + 79);
      if (*(char *)(v3 + 167) < 0)
      {
        if (v13 >= 0)
          v27 = (void *)(a1 + 56);
        else
          v27 = *(void **)(a1 + 56);
        if (v13 >= 0)
          v28 = *(unsigned __int8 *)(a1 + 79);
        else
          v28 = *(_QWORD *)(a1 + 64);
        std::string::__assign_no_alias<false>(v12, v27, v28);
      }
      else if ((*(_BYTE *)(a1 + 79) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v12, *(void **)(a1 + 56), *(_QWORD *)(a1 + 64));
      }
      else
      {
        v14 = *v11;
        *(_QWORD *)(v3 + 160) = *(_QWORD *)(a1 + 72);
        *(_OWORD *)v12 = v14;
      }
    }
    *(_DWORD *)(v3 + 168) = 2;
    memset(&v69, 170, sizeof(v69));
    if (*(char *)(a1 + 79) < 0)
    {
      std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)(a1 + 56), *(_QWORD *)(a1 + 64));
    }
    else
    {
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = *v11;
      v68.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 72);
    }
    if (*(char *)(a1 + 55) < 0)
      std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)(a1 + 32), *(_QWORD *)(a1 + 40));
    else
      v67 = *(std::string *)(a1 + 32);
    v29 = *(NSObject **)(a1 + 80);
    if (v29)
    {
      dispatch_retain(*(dispatch_object_t *)(a1 + 80));
      dispatch_group_enter(v29);
    }
    abm::SystemLogsTask::snapshotSysdiagnose_sync(v3, (uint64_t)&v68, (uint64_t)&v67, &v69);
    if (v29)
    {
      dispatch_group_leave(v29);
      dispatch_release(v29);
    }
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v67.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_81:
        v30 = *(NSObject **)(v3 + 40);
        if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          goto LABEL_82;
        goto LABEL_91;
      }
    }
    else if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_81;
    }
    operator delete(v68.__r_.__value_.__l.__data_);
    v30 = *(NSObject **)(v3 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
LABEL_82:
      size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v69.__r_.__value_.__l.__size_;
      if (size)
        goto LABEL_85;
      goto LABEL_96;
    }
LABEL_91:
    v34 = &v69;
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v34 = (std::string *)v69.__r_.__value_.__r.__words[0];
    LODWORD(__p) = 136315138;
    *(_QWORD *)((char *)&__p + 4) = v34;
    _os_log_impl(&dword_1A343C000, v30, OS_LOG_TYPE_DEFAULT, "#I Snapshot sysdiagnose finished: [path=%s]", (uint8_t *)&__p, 0xCu);
    v35 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v35 = v69.__r_.__value_.__l.__size_;
    if (v35)
    {
LABEL_85:
      v32 = xpc_dictionary_create(0, 0, 0);
      if (v32 || (v32 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1A85902BC](v32) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v32);
          v33 = v32;
        }
        else
        {
          v33 = xpc_null_create();
        }
      }
      else
      {
        v33 = xpc_null_create();
        v32 = 0;
      }
      xpc_release(v32);
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = &v69;
      else
        v56 = (std::string *)v69.__r_.__value_.__r.__words[0];
      v57 = xpc_string_create((const char *)v56);
      if (!v57)
        v57 = xpc_null_create();
      xpc_dictionary_set_value(v33, "PackagePath", v57);
      v58 = xpc_null_create();
      xpc_release(v57);
      xpc_release(v58);
      if (v33)
      {
        xpc_retain(v33);
        v59 = v33;
        v60 = *(const void **)(a1 + 88);
        if (v60)
        {
LABEL_153:
          v61 = _Block_copy(v60);
          goto LABEL_156;
        }
      }
      else
      {
        v59 = xpc_null_create();
        v60 = *(const void **)(a1 + 88);
        if (v60)
          goto LABEL_153;
      }
      v61 = 0;
LABEL_156:
      v62 = *(NSObject **)(a1 + 96);
      *(_QWORD *)&__p = MEMORY[0x1E0C809B0];
      *((_QWORD *)&__p + 1) = 3321888768;
      v75 = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__2ES2_EEEvDpT__block_invoke;
      v76 = &__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
      if (v61)
      {
        v63 = _Block_copy(v61);
        v79 = 0;
        aBlock = v63;
        object = v59;
        if (v59)
        {
LABEL_158:
          xpc_retain(v59);
LABEL_161:
          dispatch_async(v62, &__p);
          xpc_release(object);
          object = 0;
          if (aBlock)
            _Block_release(aBlock);
          if (v61)
            _Block_release(v61);
          xpc_release(v59);
          xpc_release(v33);
          goto LABEL_166;
        }
      }
      else
      {
        v79 = 0;
        aBlock = 0;
        object = v59;
        if (v59)
          goto LABEL_158;
      }
      object = xpc_null_create();
      goto LABEL_161;
    }
LABEL_96:
    v36 = xpc_null_create();
    v37 = *(const void **)(a1 + 88);
    if (v37)
      v38 = _Block_copy(v37);
    else
      v38 = 0;
    v39 = *(NSObject **)(a1 + 96);
    *(_QWORD *)&__p = MEMORY[0x1E0C809B0];
    *((_QWORD *)&__p + 1) = 3321888768;
    v75 = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__2ES2_EEEvDpT__block_invoke;
    v76 = &__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
    if (v38)
      v40 = _Block_copy(v38);
    else
      v40 = 0;
    v79 = -534716416;
    aBlock = v40;
    object = v36;
    if (v36)
      xpc_retain(v36);
    else
      object = xpc_null_create();
    dispatch_async(v39, &__p);
    xpc_release(object);
    object = 0;
    if (aBlock)
      _Block_release(aBlock);
    if (v38)
      _Block_release(v38);
    xpc_release(v36);
LABEL_166:
    if (*(char *)(v3 + 167) < 0)
    {
      **(_BYTE **)(v3 + 144) = 0;
      *(_QWORD *)(v3 + 152) = 0;
      *(_DWORD *)(v3 + 168) = 0;
      if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_169;
    }
    else
    {
      *(_BYTE *)(v3 + 144) = 0;
      *(_BYTE *)(v3 + 167) = 0;
      *(_DWORD *)(v3 + 168) = 0;
      if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_169;
    }
    operator delete(v69.__r_.__value_.__l.__data_);
    goto LABEL_169;
  }
  IsInternalBuild = TelephonyUtilIsInternalBuild();
  v10 = MEMORY[0x1E0C809B0];
  if ((IsInternalBuild & 1) == 0 && (TelephonyUtilIsCarrierBuild() & 1) == 0)
    goto LABEL_133;
  *(_DWORD *)(v3 + 168) = 1;
  memset(&v69, 170, sizeof(v69));
  if (*(char *)(a1 + 79) < 0)
    std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)(a1 + 56), *(_QWORD *)(a1 + 64));
  else
    v68 = *(std::string *)(a1 + 56);
  if (*(char *)(a1 + 127) < 0)
    std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)(a1 + 104), *(_QWORD *)(a1 + 112));
  else
    v67 = *(std::string *)(a1 + 104);
  if (*(char *)(a1 + 151) < 0)
    std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)(a1 + 128), *(_QWORD *)(a1 + 136));
  else
    v66 = *(std::string *)(a1 + 128);
  v15 = *(NSObject **)(a1 + 80);
  v65 = v15;
  if (v15)
  {
    dispatch_retain(v15);
    dispatch_group_enter(v15);
  }
  abm::SystemLogsTask::snapshotOsLogArchive_sync((char *)&v67, v3, (const std::string::value_type *)&v68, (uint64_t)&v66, &v65, &v69);
  if (v15)
  {
    dispatch_group_leave(v15);
    dispatch_release(v15);
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v66.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_31:
      if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_32;
      goto LABEL_36;
    }
  }
  else if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v67.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_32:
    v16 = *(NSObject **)(v3 + 40);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      goto LABEL_41;
    goto LABEL_37;
  }
LABEL_36:
  operator delete(v68.__r_.__value_.__l.__data_);
  v16 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    goto LABEL_41;
LABEL_37:
  HIBYTE(v75) = 7;
  strcpy((char *)&__p, "Dismiss");
  v17 = &v69;
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v17 = (std::string *)v69.__r_.__value_.__r.__words[0];
  *(_DWORD *)buf = 136315394;
  p_p = &__p;
  v72 = 2080;
  v73 = v17;
  _os_log_impl(&dword_1A343C000, v16, OS_LOG_TYPE_DEFAULT, "#I Snapshot systemlogs archive finished: option=%s [path=%s]", buf, 0x16u);
  if (SHIBYTE(v75) < 0)
    operator delete((void *)__p);
LABEL_41:
  v18 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v18 = v69.__r_.__value_.__l.__size_;
  if (!v18)
  {
    v21 = xpc_null_create();
    v22 = *(const void **)(a1 + 88);
    if (v22)
    {
      v23 = _Block_copy(v22);
      v24 = v23;
      v25 = *(NSObject **)(a1 + 96);
      *(_QWORD *)&__p = v10;
      *((_QWORD *)&__p + 1) = 3321888768;
      v75 = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__2ES2_EEEvDpT__block_invoke;
      v76 = &__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
      if (v23)
      {
        v26 = _Block_copy(v23);
        v79 = -534716416;
        aBlock = v26;
        object = v21;
        if (v21)
        {
LABEL_51:
          xpc_retain(v21);
LABEL_63:
          dispatch_async(v25, &__p);
          xpc_release(object);
          object = 0;
          if (aBlock)
            _Block_release(aBlock);
          if (v24)
            _Block_release(v24);
          xpc_release(v21);
          goto LABEL_131;
        }
LABEL_62:
        object = xpc_null_create();
        goto LABEL_63;
      }
    }
    else
    {
      v24 = 0;
      v25 = *(NSObject **)(a1 + 96);
      *(_QWORD *)&__p = v10;
      *((_QWORD *)&__p + 1) = 3321888768;
      v75 = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__2ES2_EEEvDpT__block_invoke;
      v76 = &__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
    }
    v79 = -534716416;
    aBlock = 0;
    object = v21;
    if (v21)
      goto LABEL_51;
    goto LABEL_62;
  }
  v19 = xpc_dictionary_create(0, 0, 0);
  if (v19 || (v19 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A85902BC](v19) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v19);
      v20 = v19;
    }
    else
    {
      v20 = xpc_null_create();
    }
  }
  else
  {
    v20 = xpc_null_create();
    v19 = 0;
  }
  xpc_release(v19);
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = &v69;
  else
    v41 = (std::string *)v69.__r_.__value_.__r.__words[0];
  v42 = xpc_string_create((const char *)v41);
  if (!v42)
    v42 = xpc_null_create();
  xpc_dictionary_set_value(v20, "PackagePath", v42);
  v43 = xpc_null_create();
  xpc_release(v42);
  xpc_release(v43);
  if (v20)
  {
    xpc_retain(v20);
    v44 = v20;
    v45 = *(const void **)(a1 + 88);
    if (v45)
      goto LABEL_119;
LABEL_123:
    v47 = 0;
    v48 = *(NSObject **)(a1 + 96);
    *(_QWORD *)&__p = v10;
    *((_QWORD *)&__p + 1) = 3321888768;
    v75 = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__2ES2_EEEvDpT__block_invoke;
    v76 = &__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
LABEL_124:
    v79 = 0;
    aBlock = 0;
    object = v44;
    if (v44)
      goto LABEL_121;
LABEL_125:
    object = xpc_null_create();
    goto LABEL_126;
  }
  v44 = xpc_null_create();
  v45 = *(const void **)(a1 + 88);
  if (!v45)
    goto LABEL_123;
LABEL_119:
  v46 = _Block_copy(v45);
  v47 = v46;
  v48 = *(NSObject **)(a1 + 96);
  *(_QWORD *)&__p = v10;
  *((_QWORD *)&__p + 1) = 3321888768;
  v75 = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__2ES2_EEEvDpT__block_invoke;
  v76 = &__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
  if (!v46)
    goto LABEL_124;
  v49 = _Block_copy(v46);
  v79 = 0;
  aBlock = v49;
  object = v44;
  if (!v44)
    goto LABEL_125;
LABEL_121:
  xpc_retain(v44);
LABEL_126:
  dispatch_async(v48, &__p);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v47)
    _Block_release(v47);
  xpc_release(v44);
  xpc_release(v20);
LABEL_131:
  *(_DWORD *)(v3 + 168) = 0;
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
LABEL_133:
  v50 = xpc_null_create();
  v51 = *(const void **)(a1 + 88);
  if (!v51)
  {
    v53 = 0;
    v54 = *(NSObject **)(a1 + 96);
    *(_QWORD *)&__p = v10;
    *((_QWORD *)&__p + 1) = 3321888768;
    v75 = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__2ES2_EEEvDpT__block_invoke;
    v76 = &__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
LABEL_138:
    v79 = -534716416;
    aBlock = 0;
    object = v50;
    if (v50)
      goto LABEL_136;
LABEL_139:
    object = xpc_null_create();
    goto LABEL_140;
  }
  v52 = _Block_copy(v51);
  v53 = v52;
  v54 = *(NSObject **)(a1 + 96);
  *(_QWORD *)&__p = v10;
  *((_QWORD *)&__p + 1) = 3321888768;
  v75 = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__2ES2_EEEvDpT__block_invoke;
  v76 = &__block_descriptor_52_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c15_ZTSN3xpc4dictE_e5_v8__0l;
  if (!v52)
    goto LABEL_138;
  v55 = _Block_copy(v52);
  v79 = -534716416;
  aBlock = v55;
  object = v50;
  if (!v50)
    goto LABEL_139;
LABEL_136:
  xpc_retain(v50);
LABEL_140:
  dispatch_async(v54, &__p);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v53)
    _Block_release(v53);
  xpc_release(v50);
  *(_DWORD *)(v3 + 168) = 0;
LABEL_169:
  v64 = (void *)_ZZZN3abm14SystemLogsTask9init_syncEvEUb0_EN3__3D1Ev(a1);
  operator delete(v64);
}

void sub_1A34A07B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __cxx_global_var_init_40()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance, &dword_1A343C000);
  }
  return result;
}

double BasebandIPCTraceICE::createInternal@<D0>(_OWORD *a1@<X8>)
{
  BasebandIPCTraceICE *v3;
  double result;
  __int128 v5;

  v3 = (BasebandIPCTraceICE *)operator new(0xA8uLL);
  BasebandIPCTraceICE::BasebandIPCTraceICE(v3);
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<BasebandIPCTraceICE>::shared_ptr[abi:ne180100]<BasebandIPCTraceICE,std::shared_ptr<BasebandIPCTraceICE> ctu::SharedSynchronizable<Trace>::make_shared_ptr<BasebandIPCTraceICE>(BasebandIPCTraceICE*)::{lambda(BasebandIPCTraceICE*)#1},void>(&v5, (uint64_t)v3);
  ctu::Loggable<Trace,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v5);
  result = *(double *)&v5;
  *a1 = v5;
  return result;
}

void sub_1A34A09DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1A34A09F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void BasebandIPCTraceICE::BasebandIPCTraceICE(BasebandIPCTraceICE *this)
{
  char isSupported;
  uint64_t v3;
  void *v4[2];
  char v5;
  void *__p[2];
  char v7;

  v7 = 11;
  strcpy((char *)__p, "trace.bbipc");
  Trace::Trace((uint64_t)this, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  *(_QWORD *)this = off_1E4A08E70;
  v5 = 11;
  strcpy((char *)v4, "BasebandIPC");
  isSupported = abm::trace::isSupported((uint64_t)v4);
  if (v5 < 0)
    operator delete(v4[0]);
  *((_BYTE *)this + 152) = isSupported;
  v3 = (*(uint64_t (**)(BasebandIPCTraceICE *))(*(_QWORD *)this + 160))(this);
  if (*(char *)(v3 + 23) < 0)
    v3 = *(_QWORD *)v3;
  *((_QWORD *)this + 20) = dispatch_queue_create((const char *)v3, 0);
}

void sub_1A34A0AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  Trace *v14;

  Trace::~Trace(v14);
  _Unwind_Resume(a1);
}

void sub_1A34A0B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BasebandIPCTraceICE::init(uint64_t a1, uint64_t a2, uint64_t *a3, NSObject **a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  NSObject *v10;
  int v11;
  _BOOL4 v12;
  uint64_t v13;
  void *v15[2];
  char v16;
  dispatch_object_t object;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::string v20;
  std::string v21;
  void *__p[2];
  char v23;
  std::string v24;
  std::string v25;

  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v7 = (std::__shared_weak_count *)a3[1];
    v18 = *a3;
    v19 = v7;
    if (!v7)
      goto LABEL_7;
  }
  else
  {
    v20 = *(std::string *)a2;
    v7 = (std::__shared_weak_count *)a3[1];
    v18 = *a3;
    v19 = v7;
    if (!v7)
      goto LABEL_7;
  }
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
LABEL_7:
  v10 = *a4;
  object = v10;
  if (v10)
    dispatch_retain(v10);
  v11 = Trace::init(a1, (void **)&v20.__r_.__value_.__l.__data_, &v18, &object);
  if (object)
    dispatch_release(object);
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v11)
      goto LABEL_15;
    return 0;
  }
  operator delete(v20.__r_.__value_.__l.__data_);
  if (!v11)
    return 0;
LABEL_15:
  v16 = 7;
  strcpy((char *)v15, "Enabled");
  memset(&v21, 0, sizeof(v21));
  v23 = 11;
  strcpy((char *)__p, "BasebandIPC");
  memset(&v25, 0, sizeof(v25));
  v12 = defaults::get((char *)__p, (char *)v15, &v25);
  if (v12)
  {
    prop::file::get<std::string>((const void **)__p, (uint64_t)v15, (uint64_t)&v25, &v24);
    v21 = v24;
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    if ((v23 & 0x80000000) == 0)
    {
LABEL_19:
      if (v12)
        goto LABEL_20;
LABEL_27:
      v13 = 0;
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_29;
      goto LABEL_28;
    }
  }
  else if ((v23 & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(__p[0]);
  if (!v12)
    goto LABEL_27;
LABEL_20:
  v13 = util::convert<BOOL>(&v21, (BOOL *)(a1 + 152), 0);
  if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_29;
LABEL_28:
  operator delete(v21.__r_.__value_.__l.__data_);
LABEL_29:
  if ((v16 & 0x80000000) == 0)
    return v13;
  operator delete(v15[0]);
  return v13;
}

void sub_1A34A0D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, dispatch_object_t object, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a30 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void BasebandIPCTraceICE::~BasebandIPCTraceICE(BasebandIPCTraceICE *this)
{
  NSObject *v2;

  *(_QWORD *)this = off_1E4A08E70;
  v2 = *((_QWORD *)this + 20);
  if (v2)
    dispatch_release(v2);
  Trace::~Trace(this);
}

{
  NSObject *v2;

  *(_QWORD *)this = off_1E4A08E70;
  v2 = *((_QWORD *)this + 20);
  if (v2)
    dispatch_release(v2);
  Trace::~Trace(this);
}

{
  NSObject *v2;
  void *v3;

  *(_QWORD *)this = off_1E4A08E70;
  v2 = *((_QWORD *)this + 20);
  if (v2)
    dispatch_release(v2);
  Trace::~Trace(this);
  operator delete(v3);
}

uint64_t BasebandIPCTraceICE::snapshot(uint64_t a1, NSObject **a2, const __CFDictionary **a3)
{
  void *v5;
  int v6;
  void **v7;
  void *v8;
  void *v9;
  uint64_t v10;
  BOOL v11;
  NSObject *v13;
  void **v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  void *v19;
  void **v20;
  void *v21;
  void *v22;
  uint64_t v23;
  BOOL v24;
  NSObject *v26;
  NSObject *v27;
  uint64_t *v28;
  _QWORD v29[5];
  _BYTE v30[16];
  dispatch_group_t group;
  void *__p[3];
  void *v33[3];
  _QWORD v34[2];
  uint64_t v35;
  uint8_t buf[23];
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v34[0] = 0xAAAAAAAAAAAAAAAALL;
  v34[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v34, *a3);
  memset(v33, 170, sizeof(v33));
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)buf, "kKeyTraceAction");
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A858F29C](buf);
  memset(__p, 170, sizeof(__p));
  strcpy((char *)buf, "kTraceFilterActionNone");
  v37 = 22;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v35, "kKeyTraceFilterAction");
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A858F29C](&v35);
  if (v37 < 0)
    operator delete(*(void **)buf);
  v5 = (void *)HIBYTE(__p[2]);
  v6 = SHIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) < 0)
    v5 = __p[1];
  if (v5 != (void *)22)
    goto LABEL_15;
  v7 = (void **)__p[0];
  if (SHIBYTE(__p[2]) >= 0)
    v7 = __p;
  v8 = *v7;
  v9 = v7[1];
  v10 = *(uint64_t *)((char *)v7 + 14);
  v11 = v8 == *(void **)"kTraceFilterActionNone" && v9 == *(void **)"lterActionNone";
  if (!v11 || v10 != *(_QWORD *)"tionNone")
  {
LABEL_15:
    v13 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      goto LABEL_20;
    v14 = (void **)__p[0];
    if (v6 >= 0)
      v14 = __p;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v14;
    v15 = "#I Skipping snapshot as trace filter is '%s'";
    v16 = v13;
    v17 = 12;
    goto LABEL_19;
  }
  v19 = (void *)HIBYTE(v33[2]);
  if (SHIBYTE(v33[2]) < 0)
    v19 = v33[1];
  if (v19 != (void *)21)
    goto LABEL_37;
  v20 = v33;
  if (SHIBYTE(v33[2]) < 0)
    v20 = (void **)v33[0];
  v21 = *v20;
  v22 = v20[1];
  v23 = *(uint64_t *)((char *)v20 + 13);
  v24 = v21 == *(void **)"kCollectTelephonyLogs" && v22 == *(void **)"TelephonyLogs";
  if (v24 && v23 == *(_QWORD *)"honyLogs")
  {
    v27 = *a2;
    if (v27)
    {
      dispatch_retain(v27);
      dispatch_group_enter(v27);
    }
    v29[0] = MEMORY[0x1E0C809B0];
    v29[1] = 1174405120;
    v29[2] = ___ZN19BasebandIPCTraceICE8snapshotEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
    v29[3] = &__block_descriptor_tmp_7_2;
    v29[4] = a1;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v30, (const ctu::cf::dict_adapter *)v34);
    v28 = (uint64_t *)(a1 + 72);
    group = v27;
    if (v27)
    {
      dispatch_retain(v27);
      if (group)
        dispatch_group_enter(group);
    }
    ctu::SharedSynchronizable<Trace>::execute_wrapped(v28, (uint64_t)v29);
    if (group)
    {
      dispatch_group_leave(group);
      if (group)
        dispatch_release(group);
    }
    MEMORY[0x1A858F2D8](v30);
    if (v27)
    {
      dispatch_group_leave(v27);
      dispatch_release(v27);
    }
  }
  else
  {
LABEL_37:
    v26 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v15 = "#I Skipping";
      v16 = v26;
      v17 = 2;
LABEL_19:
      _os_log_impl(&dword_1A343C000, v16, OS_LOG_TYPE_DEFAULT, v15, buf, v17);
    }
  }
LABEL_20:
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v33[2]) & 0x80000000) == 0)
      return MEMORY[0x1A858F2D8](v34);
LABEL_24:
    operator delete(v33[0]);
    return MEMORY[0x1A858F2D8](v34);
  }
  if (SHIBYTE(v33[2]) < 0)
    goto LABEL_24;
  return MEMORY[0x1A858F2D8](v34);
}

void sub_1A34A11EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  NSObject *v29;
  uint64_t v30;

  if (v29)
  {
    dispatch_group_leave(v29);
    dispatch_release(v29);
  }
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    MEMORY[0x1A858F2D8](v30 - 104);
    _Unwind_Resume(a1);
  }
  MEMORY[0x1A858F2D8](v30 - 104);
  _Unwind_Resume(a1);
}

void ___ZN19BasebandIPCTraceICE8snapshotEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  size_t v12;
  std::string::size_type v13;
  std::string *p_p;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  size_t v18;
  std::string::size_type v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  std::string::value_type *v32;
  std::string::size_type size;
  std::string::size_type v34;
  char *v35;
  size_t v36;
  std::string::size_type v37;
  std::string *v38;
  uint64_t v39;
  uint64_t v40;
  std::string *v41;
  std::string::value_type *v42;
  std::string::size_type v43;
  std::string::size_type v44;
  NSObject *global_queue;
  NSObject *v46;
  NSObject *v47;
  _QWORD block[5];
  dispatch_group_t group;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string __p;
  void *__dst[3];
  void *v56[4];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 144);
  if (v3)
  {
    dispatch_retain(*(dispatch_object_t *)(v2 + 144));
    dispatch_group_enter(v3);
  }
  if (!*(_BYTE *)(v2 + 152))
    goto LABEL_80;
  memset(v56, 170, 24);
  v4 = (const void *)*MEMORY[0x1E0CFB250];
  v5 = strlen((const char *)*MEMORY[0x1E0CFB250]);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    __dst[2] = (void *)(v9 | 0x8000000000000000);
    __dst[0] = v7;
    goto LABEL_11;
  }
  HIBYTE(__dst[2]) = v5;
  v7 = __dst;
  if (v5)
LABEL_11:
    memmove(v7, v4, (size_t)v6);
  v10 = (const char *)*MEMORY[0x1E0CFB370];
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, v10);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A858F29C](&__p);
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
  memset(__dst, 170, sizeof(__dst));
  v11 = abm::trace::kSnapshotFolder[0];
  v12 = strlen(abm::trace::kSnapshotFolder[0]);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    p_p = (std::string *)operator new(v15 + 1);
    __p.__r_.__value_.__l.__size_ = v13;
    __p.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_21;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v12;
  p_p = &__p;
  if (v12)
LABEL_21:
    memmove(p_p, v11, v13);
  p_p->__r_.__value_.__s.__data_[v13] = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v53, "kKeyTraceDumpStatePath");
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A858F29C](&v53);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v17 = abm::trace::kLogDirPrefix[0];
  v18 = strlen(abm::trace::kLogDirPrefix[0]);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v20 = operator new(v21 + 1);
    v52.__r_.__value_.__l.__size_ = v19;
    v52.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
    v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
    goto LABEL_31;
  }
  *((_BYTE *)&v52.__r_.__value_.__s + 23) = v18;
  v20 = &v52;
  if (v18)
LABEL_31:
    memmove(v20, v17, v19);
  *((_BYTE *)v20 + v19) = 0;
  if (SHIBYTE(__dst[2]) >= 0)
    v23 = (const std::string::value_type *)__dst;
  else
    v23 = (const std::string::value_type *)__dst[0];
  if (SHIBYTE(__dst[2]) >= 0)
    v24 = HIBYTE(__dst[2]);
  else
    v24 = (std::string::size_type)__dst[1];
  v25 = std::string::insert(&v52, 0, v23, v24);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v56[2]) >= 0)
    v27 = (const std::string::value_type *)v56;
  else
    v27 = (const std::string::value_type *)v56[0];
  if (SHIBYTE(v56[2]) >= 0)
    v28 = HIBYTE(v56[2]);
  else
    v28 = (std::string::size_type)v56[1];
  v29 = std::string::append(&v53, v27, v28);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = std::string::append(&__p, "-bbipc", 6uLL);
  v32 = (std::string::value_type *)v31->__r_.__value_.__r.__words[0];
  size = v31->__r_.__value_.__l.__size_;
  v34 = v31->__r_.__value_.__r.__words[2];
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_46;
LABEL_62:
    operator delete(v53.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_63;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_62;
LABEL_46:
  if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_47;
LABEL_63:
  operator delete(v52.__r_.__value_.__l.__data_);
LABEL_47:
  v35 = abm::trace::kScratchFolder[0];
  v36 = strlen(abm::trace::kScratchFolder[0]);
  if (v36 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v37 = v36;
  if (v36 >= 0x17)
  {
    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v39 = v36 | 7;
    v40 = v39 + 1;
    v38 = (std::string *)operator new(v39 + 1);
    __p.__r_.__value_.__l.__size_ = v37;
    __p.__r_.__value_.__r.__words[2] = v40 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
    goto LABEL_54;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v36;
  v38 = &__p;
  if (v36)
LABEL_54:
    memmove(v38, v35, v37);
  v38->__r_.__value_.__s.__data_[v37] = 0;
  v41 = std::string::append(&__p, "bbipc.scratch", 0xDuLL);
  v42 = (std::string::value_type *)v41->__r_.__value_.__r.__words[0];
  v43 = v41->__r_.__value_.__l.__size_;
  v44 = v41->__r_.__value_.__r.__words[2];
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZN19BasebandIPCTraceICE8snapshotEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke_2;
  block[3] = &__block_descriptor_tmp_6_2;
  v46 = *(NSObject **)(a1 + 56);
  block[4] = v2;
  group = v46;
  if (v46)
  {
    dispatch_retain(v46);
    dispatch_group_enter(group);
  }
  if ((v44 & 0x8000000000000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v50, v42, v43);
  }
  else
  {
    v50.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
    v50.__r_.__value_.__l.__size_ = v43;
    v50.__r_.__value_.__r.__words[2] = v44;
  }
  if ((v34 & 0x8000000000000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v51, v32, size);
  }
  else
  {
    v51.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    v51.__r_.__value_.__l.__size_ = size;
    v51.__r_.__value_.__r.__words[2] = v34;
  }
  dispatch_async(global_queue, block);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v51.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_70:
      v47 = group;
      if (!group)
        goto LABEL_76;
      goto LABEL_74;
    }
  }
  else if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_70;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  v47 = group;
  if (!group)
    goto LABEL_76;
LABEL_74:
  dispatch_group_leave(v47);
  if (group)
    dispatch_release(group);
LABEL_76:
  if ((v44 & 0x8000000000000000) != 0)
  {
    operator delete(v42);
    if ((v34 & 0x8000000000000000) == 0)
    {
LABEL_78:
      if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
        goto LABEL_79;
      goto LABEL_85;
    }
  }
  else if ((v34 & 0x8000000000000000) == 0)
  {
    goto LABEL_78;
  }
  operator delete(v32);
  if (SHIBYTE(__dst[2]) < 0)
  {
LABEL_85:
    operator delete(__dst[0]);
    if (SHIBYTE(v56[2]) < 0)
      goto LABEL_86;
LABEL_80:
    if (!v3)
      return;
    goto LABEL_81;
  }
LABEL_79:
  if ((SHIBYTE(v56[2]) & 0x80000000) == 0)
    goto LABEL_80;
LABEL_86:
  operator delete(v56[0]);
  if (v3)
  {
LABEL_81:
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
}

void sub_1A34A183C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_group_t group, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  NSObject *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  if (a21 < 0)
    operator delete(__p);
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (v46 < 0)
    operator delete(v45);
  if (v47 < 0)
    operator delete(v44);
  if (*(char *)(v48 - 113) < 0)
    operator delete(*(void **)(v48 - 136));
  if (*(char *)(v48 - 89) < 0)
    operator delete(*(void **)(v48 - 112));
  if (v43)
  {
    dispatch_group_leave(v43);
    dispatch_release(v43);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A34A19A0()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x1A34A1998);
  JUMPOUT(0x1A34A1988);
}

void ___ZN19BasebandIPCTraceICE8snapshotEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  const std::__fs::filesystem::path *v3;
  int v4;
  int v5;
  BOOL v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  char v13;
  const std::__fs::filesystem::path *v14;
  std::error_code *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  char v19[4];
  uint8_t buf[4];
  const std::__fs::filesystem::path *v21;
  __int16 v22;
  std::string::__raw *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)v19 = 0;
  v3 = (const std::__fs::filesystem::path *)(a1 + 48);
  if (!support::fs::createDir((const char *)(a1 + 48), 0x1EDu, 1))
  {
    v9 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      goto LABEL_37;
    if (*(char *)(a1 + 71) < 0)
      v3 = (const std::__fs::filesystem::path *)v3->__pn_.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v21 = v3;
    v10 = "#E Failed create %s";
    v11 = v9;
LABEL_13:
    v12 = 12;
LABEL_14:
    _os_log_impl(&dword_1A343C000, v11, OS_LOG_TYPE_DEFAULT, v10, buf, v12);
    goto LABEL_37;
  }
  v4 = AriHost::RegisterClient((AriHost *)"BBIPCTrace", v19, *(int **)(v2 + 160), (dispatch_queue_s *)0xFFFFFFFFLL);
  v5 = *(_DWORD *)v19;
  if (v4)
    v6 = 1;
  else
    v6 = *(_DWORD *)v19 == 0;
  if (v6)
  {
    v7 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_37;
    *(_DWORD *)buf = 67109120;
    LODWORD(v21) = v5;
    v8 = "Failed AriHost::RegisterClient 0x%x";
LABEL_32:
    _os_log_error_impl(&dword_1A343C000, v7, OS_LOG_TYPE_ERROR, v8, buf, 8u);
    goto LABEL_37;
  }
  v13 = KTLInitOptions();
  if ((v13 & 1) == 0)
  {
    v7 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_37;
    *(_DWORD *)buf = 67109120;
    LODWORD(v21) = *(_DWORD *)v19;
    v8 = "Failed KTLInitOptions 0x%x";
    goto LABEL_32;
  }
  if ((KTLOpenChannel() & 1) == 0)
  {
    v7 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_37;
    *(_DWORD *)buf = 67109120;
    LODWORD(v21) = *(_DWORD *)v19;
    v8 = "Failed KTLOpenChannel 0x%x";
    goto LABEL_32;
  }
  if ((GetBBIPCLogs() & 1) == 0)
  {
    v7 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_37;
    *(_DWORD *)buf = 67109120;
    LODWORD(v21) = *(_DWORD *)v19;
    v8 = "Failed GetBBIPCLogs 0x%x";
    goto LABEL_32;
  }
  v14 = (const std::__fs::filesystem::path *)(a1 + 72);
  if (!support::fs::createDir((const char *)(a1 + 72), 0x1EDu, 1))
  {
    v17 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      goto LABEL_37;
    if (*(char *)(a1 + 95) < 0)
      v14 = (const std::__fs::filesystem::path *)v14->__pn_.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v21 = v14;
    v10 = "#E Failed create dir %s";
    v11 = v17;
    goto LABEL_13;
  }
  if (!support::fs::rename(v3, (const std::__fs::filesystem::path *)(a1 + 72), v15))
  {
    v16 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a1 + 71) < 0)
        v3 = (const std::__fs::filesystem::path *)v3->__pn_.__r_.__value_.__r.__words[0];
      if (*(char *)(a1 + 95) < 0)
        v14 = (const std::__fs::filesystem::path *)v14->__pn_.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315394;
      v21 = v3;
      v22 = 2080;
      v23 = (std::string::__raw *)v14;
      v10 = "#E Failed to move %s to %s";
      v11 = v16;
      v12 = 22;
      goto LABEL_14;
    }
  }
LABEL_37:
  if (*(_DWORD *)v19 && AriHost::DeregisterClient((AriHost *)*(unsigned int *)v19))
  {
    v18 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v21) = *(_DWORD *)v19;
      _os_log_error_impl(&dword_1A343C000, v18, OS_LOG_TYPE_ERROR, "Failed deregistering ARI Client: 0x%x", buf, 8u);
    }
  }
}

void ___ZN19BasebandIPCTraceICE8snapshotEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke_3(uint64_t a1, unsigned int a2, unsigned int a3)
{
  NSObject *v5;
  int v6;
  double v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 134217984;
    v7 = (double)a2 * 100.0 / (double)a3;
    _os_log_impl(&dword_1A343C000, v5, OS_LOG_TYPE_DEFAULT, "#I Progress: %f", (uint8_t *)&v6, 0xCu);
  }
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  v4 = *(NSObject **)(a2 + 40);
  a1[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = a1[1].__r_.__value_.__r.__words[2];
    if (v5)
      dispatch_group_enter(v5);
  }
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a1 + 2, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&a1[2].__r_.__value_.__l.__data_ = v6;
  }
  v7 = a1 + 3;
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 72);
    a1[3].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 88);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
}

void sub_1A34A1EF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  NSObject *v4;
  NSObject *v5;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  v4 = *(NSObject **)(v1 + 40);
  if (v4)
  {
    dispatch_group_leave(v4);
    v5 = *(NSObject **)(v1 + 40);
    if (v5)
      dispatch_release(v5);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  if (*(char *)(a1 + 95) < 0)
  {
    operator delete(*(void **)(a1 + 72));
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
LABEL_3:
      v2 = *(NSObject **)(a1 + 40);
      if (!v2)
        return;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 48));
  v2 = *(NSObject **)(a1 + 40);
  if (!v2)
    return;
LABEL_7:
  dispatch_group_leave(v2);
  v3 = *(NSObject **)(a1 + 40);
  if (v3)
    dispatch_release(v3);
}

void __copy_helper_block_e8_40c27_ZTSN3ctu2cf12dict_adapterE56c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;

  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)(a1 + 40), (const ctu::cf::dict_adapter *)(a2 + 40));
  v4 = *(NSObject **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = *(NSObject **)(a1 + 56);
    if (v5)
      dispatch_group_enter(v5);
  }
}

void __destroy_helper_block_e8_40c27_ZTSN3ctu2cf12dict_adapterE56c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 56);
    if (v3)
      dispatch_release(v3);
  }
  JUMPOUT(0x1A858F2D8);
}

void BasebandIPCTraceICE::dumpState(uint64_t a1, dispatch_object_t *a2)
{
  NSObject *v3;
  _QWORD v4[5];
  dispatch_group_t group;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 1174405120;
  v4[2] = ___ZN19BasebandIPCTraceICE9dumpStateEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke;
  v4[3] = &__block_descriptor_tmp_8_2;
  v4[4] = a1;
  group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v3);
  }
  ctu::SharedSynchronizable<Trace>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v4);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
}

void ___ZN19BasebandIPCTraceICE9dumpStateEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 144);
  if (v2)
  {
    dispatch_retain(*(dispatch_object_t *)(v1 + 144));
    dispatch_group_enter(v2);
  }
  v3 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(v1 + 152);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEFAULT, "#I Enabled = %d", (uint8_t *)v5, 8u);
  }
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
}

BOOL BasebandIPCTraceICE::setProperty(uint64_t a1, dispatch_object_t *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  NSObject *v11;
  _QWORD v13[6];
  dispatch_group_t group;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  _QWORD *v21;
  _QWORD block[6];

  v7 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v7);
  }
  v17 = 0;
  v18 = &v17;
  v19 = 0x2000000000;
  v20 = 0;
  v8 = MEMORY[0x1E0C809B0];
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 1174405120;
  v13[2] = ___ZN19BasebandIPCTraceICE11setPropertyEN8dispatch5groupERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA__block_invoke;
  v13[3] = &unk_1E4A08FD0;
  v13[5] = a1;
  group = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(v7);
  }
  v13[4] = &v17;
  v15 = a3;
  v16 = a4;
  v21 = v13;
  block[0] = v8;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke_1;
  block[3] = &__block_descriptor_tmp_26;
  block[4] = a1 + 72;
  block[5] = &v21;
  v9 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(a1 + 96))
  {
    dispatch_async_and_wait(v9, block);
    v10 = *((unsigned __int8 *)v18 + 24);
    v11 = group;
    if (!group)
      goto LABEL_11;
  }
  else
  {
    dispatch_sync(v9, block);
    v10 = *((unsigned __int8 *)v18 + 24);
    v11 = group;
    if (!group)
      goto LABEL_11;
  }
  dispatch_group_leave(v11);
  if (group)
    dispatch_release(group);
LABEL_11:
  _Block_object_dispose(&v17, 8);
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
  return v10 != 0;
}

void ___ZN19BasebandIPCTraceICE11setPropertyEN8dispatch5groupERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA__block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int v5;
  std::string v6;
  void *__p[2];
  char v8;
  std::string v9;
  std::string v10;

  v2 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = prop::bbipc::set(*(char **)(a1 + 56), *(char **)(a1 + 64));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_BYTE *)(v3 + 24))
  {
    v4 = *(char **)(a1 + 56);
    memset(&v6, 0, sizeof(v6));
    v8 = 11;
    strcpy((char *)__p, "BasebandIPC");
    memset(&v10, 0, sizeof(v10));
    v5 = defaults::get((char *)__p, v4, &v10);
    if (v5)
    {
      prop::file::get<std::string>((const void **)__p, (uint64_t)v4, (uint64_t)&v10, &v9);
      v6 = v9;
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v10.__r_.__value_.__l.__data_);
      if ((v8 & 0x80000000) == 0)
      {
LABEL_6:
        if (!v5)
          goto LABEL_7;
        goto LABEL_12;
      }
    }
    else if ((v8 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(__p[0]);
    if (!v5)
    {
LABEL_7:
      if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_8:
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v5;
        return;
      }
LABEL_13:
      operator delete(v6.__r_.__value_.__l.__data_);
      goto LABEL_8;
    }
LABEL_12:
    LOBYTE(v5) = util::convert<BOOL>(&v6, (BOOL *)(v2 + 152), 0);
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_13;
  }
  *(_BYTE *)(v3 + 24) = 0;
}

void sub_1A34A246C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;

  v3 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    v4 = *(NSObject **)(a1 + 48);
    if (v4)
      dispatch_group_enter(v4);
  }
}

void __destroy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 48);
    if (v3)
      dispatch_release(v3);
  }
}

uint64_t BasebandIPCTraceICE::getProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  _QWORD block[6];

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZN19BasebandIPCTraceICE11getPropertyERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERS6__block_invoke;
  v7[3] = &unk_1E4A09008;
  v7[4] = &v8;
  v7[5] = a2;
  v7[6] = a3;
  v12 = v7;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke_1;
  block[3] = &__block_descriptor_tmp_26;
  block[4] = a1 + 72;
  block[5] = &v12;
  v4 = a1 + 88;
  v3 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(v4 + 8))
    dispatch_async_and_wait(v3, block);
  else
    dispatch_sync(v3, block);
  v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void ___ZN19BasebandIPCTraceICE11getPropertyERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERS6__block_invoke(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  BOOL v4;
  void *__p[2];
  char v6;

  v2 = (char *)a1[5];
  v3 = a1[6];
  v6 = 11;
  strcpy((char *)__p, "BasebandIPC");
  v4 = prop::get_from_file((char *)__p, v2, v3);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = v4;
}

void sub_1A34A2668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void BasebandIPCTraceICE::getSettingPrefix(char *a1@<X8>)
{
  a1[23] = 13;
  strcpy(a1, "BasebandIPC::");
}

const char *BasebandIPCTraceICE::getName(BasebandIPCTraceICE *this)
{
  return "trace.bbipc";
}

_QWORD *std::shared_ptr<BasebandIPCTraceICE>::shared_ptr[abi:ne180100]<BasebandIPCTraceICE,std::shared_ptr<BasebandIPCTraceICE> ctu::SharedSynchronizable<Trace>::make_shared_ptr<BasebandIPCTraceICE>(BasebandIPCTraceICE*)::{lambda(BasebandIPCTraceICE*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A09050;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1A34A27C0(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<BasebandIPCTraceICE> ctu::SharedSynchronizable<Trace>::make_shared_ptr<BasebandIPCTraceICE>(BasebandIPCTraceICE*)::{lambda(BasebandIPCTraceICE*)#1}::operator() const(BasebandIPCTraceICE*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1A34A27E0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<BasebandIPCTraceICE *,std::shared_ptr<BasebandIPCTraceICE> ctu::SharedSynchronizable<Trace>::make_shared_ptr<BasebandIPCTraceICE>(BasebandIPCTraceICE*)::{lambda(BasebandIPCTraceICE *)#1},std::allocator<BasebandIPCTraceICE>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<BasebandIPCTraceICE *,std::shared_ptr<BasebandIPCTraceICE> ctu::SharedSynchronizable<Trace>::make_shared_ptr<BasebandIPCTraceICE>(BasebandIPCTraceICE*)::{lambda(BasebandIPCTraceICE *)#1},std::allocator<BasebandIPCTraceICE>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<BasebandIPCTraceICE> ctu::SharedSynchronizable<Trace>::make_shared_ptr<BasebandIPCTraceICE>(BasebandIPCTraceICE*)::{lambda(BasebandIPCTraceICE*)#1}::operator() const(BasebandIPCTraceICE*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<BasebandIPCTraceICE *,std::shared_ptr<BasebandIPCTraceICE> ctu::SharedSynchronizable<Trace>::make_shared_ptr<BasebandIPCTraceICE>(BasebandIPCTraceICE*)::{lambda(BasebandIPCTraceICE *)#1},std::allocator<BasebandIPCTraceICE>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI19BasebandIPCTraceICEEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI19BasebandIPCTraceICEEENSt3__110sh"
                                "ared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI19BasebandIPCTraceICEEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI19BasebandIPCTraceICEEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<BasebandIPCTraceICE> ctu::SharedSynchronizable<Trace>::make_shared_ptr<BasebandIPCTraceICE>(BasebandIPCTraceICE*)::{lambda(BasebandIPCTraceICE*)#1}::operator() const(BasebandIPCTraceICE*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void abm::AppMonitorInternal::create(const ctu::OsLogContext *a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count_vtbl *v4;
  _BYTE v5[16];

  *(_QWORD *)a2 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAAAALL;
  v4 = (std::__shared_weak_count_vtbl *)operator new(0x58uLL);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v5, a1);
  abm::AppMonitorInternal::AppMonitorInternal(v4);
  *(_QWORD *)a2 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<abm::AppMonitorInternal>::shared_ptr[abi:ne180100]<abm::AppMonitorInternal,std::shared_ptr<abm::AppMonitorInternal> ctu::SharedSynchronizable<abm::AppMonitorInternal>::make_shared_ptr<abm::AppMonitorInternal>(abm::AppMonitorInternal*)::{lambda(abm::AppMonitorInternal*)#1},void>((std::__shared_weak_count_vtbl **)a2, v4);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v5);
}

void sub_1A34A2928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

void sub_1A34A293C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

_QWORD *abm::AppMonitorInternal::AppMonitorInternal(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  id v5;
  NSObject *v7;
  uint8_t v8[8];
  _BYTE v9[8];

  v2 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  v3 = dispatch_queue_create("AppMonitorInternal.queue", v2);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = v3;
  if (v3)
  {
    v4 = v3;
    dispatch_retain(v3);
    a1[3] = 0;
    dispatch_release(v4);
  }
  else
  {
    a1[3] = 0;
  }
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 4), (const ctu::OsLogLogger *)v9);
  MEMORY[0x1A858F170](v9);
  v5 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  a1[5] = v5;
  a1[6] = 0;
  a1[10] = 0;
  if (v5)
    return a1;
  v7 = a1[4];
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    return a1;
  *(_WORD *)v8 = 0;
  _os_log_error_impl(&dword_1A343C000, v7, OS_LOG_TYPE_ERROR, "AppMonitor: failed to create bundle ID store", v8, 2u);
  return a1;
}

void sub_1A34A2A64(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;

  v3 = v2;
  MEMORY[0x1A858F170](v3);
  v5 = v1[3];
  if (v5)
  {
    dispatch_release(v5);
    v6 = v1[2];
    if (!v6)
    {
LABEL_3:
      v7 = (std::__shared_weak_count *)v1[1];
      if (!v7)
LABEL_8:
        _Unwind_Resume(a1);
LABEL_7:
      std::__shared_weak_count::__release_weak(v7);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v6 = v1[2];
    if (!v6)
      goto LABEL_3;
  }
  dispatch_release(v6);
  v7 = (std::__shared_weak_count *)v1[1];
  if (!v7)
    goto LABEL_8;
  goto LABEL_7;
}

uint64_t abm::AppMonitor::AppMonitor(uint64_t a1, const ctu::OsLogContext *a2)
{
  _BYTE v4[16];

  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v4, a2);
  abm::AppMonitorInternal::create((const ctu::OsLogContext *)v4, a1);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v4);
  return a1;
}

{
  _BYTE v4[16];

  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v4, a2);
  abm::AppMonitorInternal::create((const ctu::OsLogContext *)v4, a1);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v4);
  return a1;
}

void sub_1A34A2B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

void sub_1A34A2B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

void abm::AppMonitor::setAppStateHandler(uint64_t **a1, NSObject **a2, _QWORD *a3)
{
  uint64_t *v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  dispatch_object_t object;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *a2;
  object = v5;
  if (v5)
    dispatch_retain(v5);
  v6 = a3[3];
  if (!v6)
    goto LABEL_6;
  if ((_QWORD *)v6 != a3)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
LABEL_6:
    v11 = (_QWORD *)v6;
    goto LABEL_8;
  }
  v11 = v10;
  (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v10);
LABEL_8:
  abm::AppMonitorInternal::setAppStateHandler(v4, &object, v10);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_13;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_13:
  if (object)
    dispatch_release(object);
}

void sub_1A34A2C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!object)
    _Unwind_Resume(exception_object);
  dispatch_release(object);
  _Unwind_Resume(exception_object);
}

void abm::AppMonitorInternal::setAppStateHandler(uint64_t *a1, NSObject **a2, _QWORD *a3)
{
  NSObject *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  dispatch_object_t object;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v9 = a1;
  object = v5;
  if (v5)
    dispatch_retain(v5);
  v6 = v11;
  v7 = a3[3];
  if (!v7)
    goto LABEL_6;
  if ((_QWORD *)v7 != a3)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
LABEL_6:
    v12 = (_BYTE *)v7;
    goto LABEL_8;
  }
  v12 = v11;
  (*(void (**)(_QWORD *, _BYTE *))(*a3 + 24))(a3, v11);
LABEL_8:
  ctu::SharedSynchronizable<abm::AppMonitorInternal>::execute_wrapped<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}>(a1, (uint64_t)&v9);
  if (v12 == v11)
  {
    v8 = 4;
  }
  else
  {
    if (!v12)
      goto LABEL_13;
    v8 = 5;
    v6 = v12;
  }
  (*(void (**)(_QWORD *))(*v6 + 8 * v8))(v6);
LABEL_13:
  if (object)
    dispatch_release(object);
}

void sub_1A34A2DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  _Unwind_Resume(exception_object);
}

BOOL abm::AppMonitor::addBundleID(_QWORD **a1, uint64_t a2)
{
  _QWORD *v2;
  _BOOL8 result;
  _BOOL8 v4;
  std::string __p;

  v2 = *a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  result = abm::AppMonitorInternal::addBundleID(v2, (uint64_t)&__p);
  v4 = result;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    return v4;
  }
  return result;
}

void sub_1A34A2E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL abm::AppMonitorInternal::addBundleID(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::string::size_type v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  char *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _BOOL8 result;
  NSObject *v15;
  _QWORD *v16;
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      v16 = a1;
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, v4);
      v3 = (std::__shared_weak_count *)a1[1];
      if (!v3)
        goto LABEL_20;
      goto LABEL_7;
    }
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    v16 = a1;
    __p = *(std::string *)a2;
    v3 = (std::__shared_weak_count *)a1[1];
    if (!v3)
LABEL_20:
      std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_7:
    v5 = *a1;
    v6 = std::__shared_weak_count::lock(v3);
    if (!v6)
      goto LABEL_20;
    v7 = v6;
    v8 = (char *)operator new(0x20uLL);
    *(_QWORD *)v8 = v16;
    *(std::string *)(v8 + 8) = __p;
    memset(&__p, 0, sizeof(__p));
    v9 = a1[2];
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = operator new(0x18uLL);
    *v12 = v8;
    v12[1] = v5;
    v12[2] = v7;
    dispatch_async_f(v9, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<abm::AppMonitorInternal>::execute_wrapped<abm::AppMonitorInternal::addBundleID(std::string)::{lambda(void)#1}>(abm::AppMonitorInternal::addBundleID(std::string)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<abm::AppMonitorInternal::addBundleID(std::string)::{lambda(void)#1},std::default_delete<abm::AppMonitorInternal::addBundleID(std::string)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (v13)
    {
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return 1;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return 1;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    return 1;
  }
  v15 = a1[4];
  result = os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
  if (result)
  {
    LOWORD(v16) = 0;
    _os_log_error_impl(&dword_1A343C000, v15, OS_LOG_TYPE_ERROR, "AppMonitor: skipping addition of empty bundle ID", (uint8_t *)&v16, 2u);
    return 0;
  }
  return result;
}

BOOL abm::AppMonitor::removeBundleID(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  _BOOL8 v7;
  std::string __s;
  _QWORD *v10;
  std::string __p;
  _QWORD aBlock[6];
  id v13;
  uint64_t block;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  void *v17;
  char *v18;
  id *v19;
  char v20;

  v2 = (_QWORD *)*a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v3 = SHIBYTE(__s.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      if (v3)
      {
        v10 = v2;
        __p = __s;
        goto LABEL_8;
      }
      goto LABEL_10;
    }
  }
  else
  {
    __s = *(std::string *)a2;
    v3 = SHIBYTE(__s.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  if (__s.__r_.__value_.__l.__size_)
  {
    v10 = v2;
    std::string::__init_copy_ctor_external(&__p, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
LABEL_8:
    v4 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZNK3ctu20SharedSynchronizableIN3abm18AppMonitorInternalEE20execute_wrapped_syncIZNS2_14removeBundleIDENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEUlvE_EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSD__block_invoke;
    aBlock[3] = &__block_descriptor_48_e5_B8__0l;
    aBlock[4] = v2;
    aBlock[5] = &v10;
    v13 = _Block_copy(aBlock);
    v5 = v2[2];
    if (v2[3])
    {
      v20 = -86;
      block = v4;
      v15 = 3221225472;
      v16 = ___ZN8dispatch19async_and_wait_implIRU8__strongU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEE_block_invoke;
      v17 = &__block_descriptor_48_e5_v8__0l;
      v18 = &v20;
      v19 = &v13;
      dispatch_async_and_wait(v5, &block);
    }
    else
    {
      v20 = -86;
      block = v4;
      v15 = 3221225472;
      v16 = ___ZN8dispatch9sync_implIRU8__strongU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEE_block_invoke;
      v17 = &__block_descriptor_48_e5_v8__0l;
      v18 = &v20;
      v19 = &v13;
      dispatch_sync(v5, &block);
    }
    v7 = v20 != 0;

    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return v7;
    }
    else if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return v7;
    }
    goto LABEL_18;
  }
LABEL_10:
  v6 = v2[4];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    LOWORD(block) = 0;
    _os_log_error_impl(&dword_1A343C000, v6, OS_LOG_TYPE_ERROR, "AppMonitor: skipping removal of empty bundle ID", (uint8_t *)&block, 2u);
    v7 = 0;
    if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v7;
  }
  else
  {
    v7 = 0;
    if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v7;
  }
LABEL_18:
  operator delete(__s.__r_.__value_.__l.__data_);
  return v7;
}

void sub_1A34A324C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void abm::AppMonitor::start(abm::AppMonitorInternal **this)
{
  abm::AppMonitorInternal::start(*this);
}

void abm::AppMonitorInternal::start(abm::AppMonitorInternal *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _QWORD v11[2];
  std::__shared_weak_count *v12;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (!v2 || (v3 = *(_QWORD *)this, (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v11[0] = this;
  v11[1] = v3;
  v12 = v5;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  ctu::SharedSynchronizable<abm::AppMonitorInternal>::execute_wrapped<abm::AppMonitorInternal::start(void)::{lambda(void)#1}>((uint64_t *)this, (uint64_t)v11);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  std::__shared_weak_count::__release_weak(v5);
}

void abm::AppMonitor::stop(uint64_t **this)
{
  uint64_t v1;

  ctu::SharedSynchronizable<abm::AppMonitorInternal>::execute_wrapped<abm::AppMonitorInternal::stop(void)::{lambda(void)#1}>(*this, &v1);
}

_QWORD *abm::AppMonitor::create@<X0>(const ctu::OsLogContext *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0x28uLL);
  result = std::__shared_ptr_emplace<abm::AppMonitor>::__shared_ptr_emplace[abi:ne180100]<ctu::OsLogContext &,std::allocator<abm::AppMonitor>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1A34A33A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<abm::AppMonitorInternal>::execute_wrapped<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}>(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x30uLL);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_QWORD *)(a2 + 8) = 0;
  v10 = (_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 40);
  if (v9)
  {
    if (v9 == a2 + 16)
    {
      v8[5] = v8 + 2;
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
      goto LABEL_9;
    }
    v8[5] = v9;
  }
  else
  {
    v10 = v8 + 5;
  }
  *v10 = 0;
LABEL_9:
  v11 = a1[2];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v14 = operator new(0x18uLL);
  *v14 = v8;
  v14[1] = v5;
  v14[2] = v7;
  dispatch_async_f(v11, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<abm::AppMonitorInternal>::execute_wrapped<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}>(abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1},std::default_delete<abm::AppMonitorInternal::setAppStateHandler(dispatch::queue,std::function<void ()(std::string,abm::AppState)>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

