void sub_1A350F5B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,dispatch_group_t group,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,xpc_object_t a28,xpc_object_t object,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

xpc_object_t __Block_byref_object_copy__10(uint64_t a1, uint64_t a2)
{
  xpc_object_t result;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  result = xpc_null_create();
  *(_QWORD *)(a2 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

void ___ZN3abm20HelperClientInternal7performENS_6helper6TaskIDEPKcN3xpc4dictERS6__block_invoke_12(_QWORD *a1, uint64_t a2, xpc_object_t *a3)
{
  uint64_t v5;
  void **v6;
  int v7;
  size_t v8;
  __int128 v9;
  uint64_t v10;
  xpc_object_t v11;
  size_t v12;
  void *v13;
  size_t v14;
  void *v15;

  if (a1[6])
  {
    v5 = *(_QWORD *)(a1[4] + 8);
    *(_DWORD *)(v5 + 40) = *(_DWORD *)a2;
    if (v5 + 40 != a2)
    {
      v6 = (void **)(v5 + 48);
      v7 = *(char *)(v5 + 71);
      v8 = *(unsigned __int8 *)(a2 + 31);
      if ((v7 & 0x80000000) == 0)
      {
        if ((v8 & 0x80) == 0)
        {
          v9 = *(_OWORD *)(a2 + 8);
          v6[2] = *(void **)(a2 + 24);
          *(_OWORD *)v6 = v9;
          v10 = *(_QWORD *)(a1[5] + 8);
          v11 = *a3;
          if (!*a3)
            goto LABEL_17;
LABEL_15:
          xpc_retain(v11);
LABEL_18:
          v15 = *(void **)(v10 + 40);
          *(_QWORD *)(v10 + 40) = v11;
          xpc_release(v15);
          return;
        }
        std::string::__assign_no_alias<true>(v6, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
        v10 = *(_QWORD *)(a1[5] + 8);
        v11 = *a3;
        if (v11)
          goto LABEL_15;
LABEL_17:
        v11 = xpc_null_create();
        goto LABEL_18;
      }
      v12 = *(_QWORD *)(a2 + 16);
      if ((v8 & 0x80u) == 0)
        v13 = (void *)(a2 + 8);
      else
        v13 = *(void **)(a2 + 8);
      if ((v8 & 0x80u) == 0)
        v14 = v8;
      else
        v14 = v12;
      std::string::__assign_no_alias<false>(v6, v13, v14);
    }
    v10 = *(_QWORD *)(a1[5] + 8);
    v11 = *a3;
    if (v11)
      goto LABEL_15;
    goto LABEL_17;
  }
}

void __copy_helper_block_e8_48c54_ZTSNSt3__110shared_ptrIN3abm20HelperClientInternalEEE64c30_ZTSN8dispatch13group_sessionE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  NSObject *v6;
  NSObject *v7;

  v3 = a2[7];
  a1[6] = a2[6];
  a1[7] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a2[8];
  a1[8] = v6;
  if (v6)
  {
    dispatch_retain(v6);
    v7 = a1[8];
    if (v7)
      dispatch_group_enter(v7);
  }
}

void __destroy_helper_block_e8_48c54_ZTSNSt3__110shared_ptrIN3abm20HelperClientInternalEEE64c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(NSObject **)(a1 + 64);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 64);
    if (v3)
      dispatch_release(v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

xpc_object_t __copy_helper_block_e8_56c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  void *v3;
  xpc_object_t result;

  v3 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v3;
  if (v3)
    return xpc_retain(v3);
  result = xpc_null_create();
  *(_QWORD *)(a1 + 56) = result;
  return result;
}

void __destroy_helper_block_e8_56c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(_QWORD *)(a1 + 56) = 0;
}

void std::__shared_ptr_emplace<abm::HelperClientWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A0C808;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<abm::HelperClientWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A0C808;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<abm::HelperClientWrapper>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<abm::helper::DaemonObserver>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A0C858;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<abm::helper::DaemonObserver>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A0C858;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<abm::helper::DaemonObserver>::__on_zero_shared(uint64_t a1)
{
  abm::helper::DaemonObserver::~DaemonObserver((abm::helper::DaemonObserver *)(a1 + 24));
}

uint64_t diag::DIAGReader::Parameters::Parameters(uint64_t a1, int a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, int a6, char *__s, int a8, int a9)
{
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  capabilities::trace *v24;
  _BYTE *v25;
  _BYTE *v26;
  size_t v27;
  char *v28;
  char *v29;
  int v30;
  int v31;
  size_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  const std::string::value_type *v36;
  char *v37;
  size_t v38;
  std::string::size_type v39;
  std::string *v40;
  uint64_t v41;
  uint64_t v42;
  std::string *v43;
  __int128 v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  size_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  size_t v58;
  std::string::size_type v59;
  _BYTE *v60;
  size_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  size_t v67;
  std::string::size_type v68;
  _BYTE *v69;
  char *v70;
  size_t v71;
  std::string::size_type v72;
  _BYTE *v73;
  char *v74;
  size_t v75;
  std::string::size_type v76;
  std::string *p_dst;
  uint64_t v78;
  uint64_t v79;
  std::string *v80;
  __int128 v81;
  __int128 v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  unint64_t *v86;
  char *v87;
  size_t v88;
  std::string::size_type v89;
  std::string *v90;
  uint64_t v91;
  uint64_t v92;
  std::string *v93;
  __int128 v94;
  __int128 v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  std::string *v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  std::string *v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  std::string __dst;
  __int128 v119;
  void *__p[2];
  char v121;
  std::string v122;
  void *v123[2];
  unint64_t v124;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = *a3;
  *(_DWORD *)(a1 + 16) = a2;
  v13 = a3[1];
  *(_QWORD *)(a1 + 32) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_QWORD *)(a1 + 40) = *a4;
  v16 = a4[1];
  *(_QWORD *)(a1 + 48) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_QWORD *)(a1 + 56) = *a5;
  v19 = a5[1];
  *(_QWORD *)(a1 + 64) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  v22 = (char *)(a1 + 96);
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 200) = 0x100000;
  v23 = *(_QWORD *)(a1 + 40);
  v24 = (capabilities::trace *)(a1 + 120);
  if (a1 + 120 == v23 + 56)
  {
LABEL_14:
    if (a6)
      goto LABEL_15;
    goto LABEL_40;
  }
  v26 = *(_BYTE **)(v23 + 56);
  v25 = *(_BYTE **)(v23 + 64);
  v27 = v25 - v26;
  if (v25 != v26)
  {
    if ((v27 & 0x8000000000000000) != 0)
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    v28 = (char *)operator new(v25 - v26);
    *(_QWORD *)(a1 + 120) = v28;
    *(_QWORD *)(a1 + 128) = v28;
    v29 = &v28[v27];
    *(_QWORD *)(a1 + 136) = &v28[v27];
    v24 = (capabilities::trace *)memcpy(v28, v26, v27);
    *(_QWORD *)(a1 + 128) = v29;
    goto LABEL_14;
  }
  *(_QWORD *)(a1 + 128) = v27;
  if (a6)
  {
LABEL_15:
    *(_DWORD *)(a1 + 192) = a6;
    if (a8)
      goto LABEL_16;
    goto LABEL_41;
  }
LABEL_40:
  v24 = (capabilities::trace *)capabilities::trace::defaultHistorySizeMB(v24);
  *(_DWORD *)(a1 + 192) = (_DWORD)v24;
  if (a8)
  {
LABEL_16:
    v30 = a9;
    *(_DWORD *)(a1 + 196) = a8;
    v31 = *(_DWORD *)(a1 + 16);
    if (v31 != 15)
      goto LABEL_17;
    goto LABEL_42;
  }
LABEL_41:
  v30 = a9;
  *(_DWORD *)(a1 + 196) = capabilities::trace::defaultMemoryFileMaxCount(v24);
  v31 = *(_DWORD *)(a1 + 16);
  if (v31 != 15)
  {
LABEL_17:
    if (v31 == 11)
    {
      *(_WORD *)(a1 + 88) = 1;
      if (*(char *)(a1 + 119) < 0)
      {
        *(_QWORD *)(a1 + 104) = 12;
        v22 = *(char **)(a1 + 96);
      }
      else
      {
        *(_BYTE *)(a1 + 119) = 12;
      }
      strcpy(v22, "header.qmdl2");
      if (__s)
      {
        v52 = strlen(__s);
        if (v52 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v53 = (void *)v52;
        if (v52 >= 0x17)
        {
          v101 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v52 | 7) != 0x17)
            v101 = v52 | 7;
          v102 = v101 + 1;
          v54 = operator new(v101 + 1);
          v123[1] = v53;
          v124 = v102 | 0x8000000000000000;
          v123[0] = v54;
        }
        else
        {
          HIBYTE(v124) = v52;
          v54 = v123;
          if (!v52)
          {
            LOBYTE(v123[0]) = 0;
            v55 = a1 + 168;
            if ((*(char *)(a1 + 191) & 0x80000000) == 0)
              goto LABEL_64;
            goto LABEL_63;
          }
        }
        memcpy(v54, __s, (size_t)v53);
        *((_BYTE *)v53 + (_QWORD)v54) = 0;
        v55 = a1 + 168;
        if (*(char *)(a1 + 191) < 0)
LABEL_63:
          operator delete(*(void **)v55);
LABEL_64:
        *(_OWORD *)v55 = *(_OWORD *)v123;
        *(_QWORD *)(v55 + 16) = v124;
        if (!__s)
        {
          if (v121 < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v122.__r_.__value_.__l.__data_);
        }
        if (*(char *)(a1 + 167) < 0)
        {
          *(_QWORD *)(a1 + 152) = 7;
          v56 = *(char **)(a1 + 144);
        }
        else
        {
          v56 = (char *)(a1 + 144);
          *(_BYTE *)(a1 + 167) = 7;
        }
        strcpy(v56, ".adplv4");
        *(_DWORD *)(a1 + 200) = 0x40000;
        v74 = abm::trace::kScratchFolder[0];
        v75 = strlen(abm::trace::kScratchFolder[0]);
        if (v75 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v76 = v75;
        if (v75 >= 0x17)
        {
          v78 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v75 | 7) != 0x17)
            v78 = v75 | 7;
          v79 = v78 + 1;
          p_dst = (std::string *)operator new(v78 + 1);
          __dst.__r_.__value_.__l.__size_ = v76;
          __dst.__r_.__value_.__r.__words[2] = v79 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v75;
          p_dst = &__dst;
          if (!v75)
            goto LABEL_107;
        }
        memmove(p_dst, v74, v76);
LABEL_107:
        p_dst->__r_.__value_.__s.__data_[v76] = 0;
        v80 = std::string::append(&__dst, "ADPL.scratch", 0xCuLL);
        v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
        v124 = v80->__r_.__value_.__r.__words[2];
        *(_OWORD *)v123 = v81;
        v80->__r_.__value_.__l.__size_ = 0;
        v80->__r_.__value_.__r.__words[2] = 0;
        v80->__r_.__value_.__r.__words[0] = 0;
        abm::trace::TraceInfo::create();
        v82 = v119;
        v119 = 0uLL;
        v83 = *(std::__shared_weak_count **)(a1 + 80);
        *(_OWORD *)(a1 + 72) = v82;
        if (v83)
        {
          p_shared_owners = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(p_shared_owners);
          while (__stlxr(v85 - 1, p_shared_owners));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
        v49 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
        if (*((_QWORD *)&v119 + 1))
        {
          v86 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
          do
            v51 = __ldaxr(v86);
          while (__stlxr(v51 - 1, v86));
          goto LABEL_133;
        }
LABEL_134:
        if ((SHIBYTE(v124) & 0x80000000) == 0)
          goto LABEL_135;
LABEL_138:
        operator delete(v123[0]);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return a1;
LABEL_139:
        operator delete(__dst.__r_.__value_.__l.__data_);
        return a1;
      }
      v57 = abm::trace::kScratchFolder[0];
      v58 = strlen(abm::trace::kScratchFolder[0]);
      if (v58 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v59 = v58;
      if (v58 >= 0x17)
      {
        v107 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v58 | 7) != 0x17)
          v107 = v58 | 7;
        v108 = v107 + 1;
        v60 = operator new(v107 + 1);
        v122.__r_.__value_.__l.__size_ = v59;
        v122.__r_.__value_.__r.__words[2] = v108 | 0x8000000000000000;
        v122.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
      }
      else
      {
        *((_BYTE *)&v122.__r_.__value_.__s + 23) = v58;
        v60 = &v122;
        if (!v58)
        {
LABEL_159:
          v60[v59] = 0;
          v121 = 12;
          strcpy((char *)__p, "ADPL.scratch");
          v109 = std::string::append(&v122, (const std::string::value_type *)__p, 0xCuLL);
          v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
          v124 = v109->__r_.__value_.__r.__words[2];
          *(_OWORD *)v123 = v110;
          v109->__r_.__value_.__l.__size_ = 0;
          v109->__r_.__value_.__r.__words[2] = 0;
          v109->__r_.__value_.__r.__words[0] = 0;
          v55 = a1 + 168;
          if (*(char *)(a1 + 191) < 0)
            goto LABEL_63;
          goto LABEL_64;
        }
      }
      memmove(v60, v57, v59);
      goto LABEL_159;
    }
    *(_WORD *)(a1 + 88) = 256;
    if (*(char *)(a1 + 119) < 0)
    {
      *(_QWORD *)(a1 + 104) = 0;
      **(_BYTE **)(a1 + 96) = 0;
      if (__s)
      {
LABEL_22:
        v32 = strlen(__s);
        if (v32 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v33 = (void *)v32;
        if (v32 >= 0x17)
        {
          v105 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v32 | 7) != 0x17)
            v105 = v32 | 7;
          v106 = v105 + 1;
          v34 = operator new(v105 + 1);
          v123[1] = v33;
          v124 = v106 | 0x8000000000000000;
          v123[0] = v34;
        }
        else
        {
          HIBYTE(v124) = v32;
          v34 = v123;
          if (!v32)
          {
            LOBYTE(v123[0]) = 0;
            v35 = a1 + 168;
            if ((*(char *)(a1 + 191) & 0x80000000) == 0)
              goto LABEL_27;
            goto LABEL_26;
          }
        }
        v32 = (size_t)memcpy(v34, __s, (size_t)v33);
        *((_BYTE *)v33 + (_QWORD)v34) = 0;
        v35 = a1 + 168;
        if (*(char *)(a1 + 191) < 0)
LABEL_26:
          operator delete(*(void **)v35);
LABEL_27:
        *(_OWORD *)v35 = *(_OWORD *)v123;
        *(_QWORD *)(v35 + 16) = v124;
        if (!__s)
        {
          if (v121 < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v122.__r_.__value_.__l.__data_);
        }
        if (capabilities::diag::diagVersion((capabilities::diag *)v32) == 3)
          v36 = ".diag.qmdl2";
        else
          v36 = ".diag.qmdl";
        std::string::__assign_external((std::string *)(a1 + 144), v36);
        *(_DWORD *)(a1 + 200) = v30;
        v37 = abm::trace::kScratchFolder[0];
        v38 = strlen(abm::trace::kScratchFolder[0]);
        if (v38 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v39 = v38;
        if (v38 >= 0x17)
        {
          v41 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v38 | 7) != 0x17)
            v41 = v38 | 7;
          v42 = v41 + 1;
          v40 = (std::string *)operator new(v41 + 1);
          __dst.__r_.__value_.__l.__size_ = v39;
          __dst.__r_.__value_.__r.__words[2] = v42 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v38;
          v40 = &__dst;
          if (!v38)
          {
LABEL_48:
            v40->__r_.__value_.__s.__data_[v39] = 0;
            v43 = std::string::append(&__dst, "DIAG.scratch", 0xCuLL);
            v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
            v124 = v43->__r_.__value_.__r.__words[2];
            *(_OWORD *)v123 = v44;
            v43->__r_.__value_.__l.__size_ = 0;
            v43->__r_.__value_.__r.__words[2] = 0;
            v43->__r_.__value_.__r.__words[0] = 0;
            abm::trace::TraceInfo::create();
            v45 = v119;
            v119 = 0uLL;
            v46 = *(std::__shared_weak_count **)(a1 + 80);
            *(_OWORD *)(a1 + 72) = v45;
            if (v46)
            {
              v47 = (unint64_t *)&v46->__shared_owners_;
              do
                v48 = __ldaxr(v47);
              while (__stlxr(v48 - 1, v47));
              if (!v48)
              {
                ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                std::__shared_weak_count::__release_weak(v46);
              }
            }
            v49 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
            if (!*((_QWORD *)&v119 + 1))
              goto LABEL_134;
            v50 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            goto LABEL_133;
          }
        }
        memmove(v40, v37, v39);
        goto LABEL_48;
      }
    }
    else
    {
      *(_BYTE *)(a1 + 119) = 0;
      *v22 = 0;
      if (__s)
        goto LABEL_22;
    }
    v70 = abm::trace::kScratchFolder[0];
    v71 = strlen(abm::trace::kScratchFolder[0]);
    if (v71 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v72 = v71;
    if (v71 >= 0x17)
    {
      v115 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v71 | 7) != 0x17)
        v115 = v71 | 7;
      v116 = v115 + 1;
      v73 = operator new(v115 + 1);
      v122.__r_.__value_.__l.__size_ = v72;
      v122.__r_.__value_.__r.__words[2] = v116 | 0x8000000000000000;
      v122.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
    }
    else
    {
      *((_BYTE *)&v122.__r_.__value_.__s + 23) = v71;
      v73 = &v122;
      if (!v71)
      {
LABEL_171:
        v73[v72] = 0;
        v121 = 12;
        strcpy((char *)__p, "DIAG.scratch");
        v32 = (size_t)std::string::append(&v122, (const std::string::value_type *)__p, 0xCuLL);
        v117 = *(_OWORD *)v32;
        v124 = *(_QWORD *)(v32 + 16);
        *(_OWORD *)v123 = v117;
        *(_QWORD *)(v32 + 8) = 0;
        *(_QWORD *)(v32 + 16) = 0;
        *(_QWORD *)v32 = 0;
        v35 = a1 + 168;
        if (*(char *)(a1 + 191) < 0)
          goto LABEL_26;
        goto LABEL_27;
      }
    }
    memmove(v73, v70, v72);
    goto LABEL_171;
  }
LABEL_42:
  *(_WORD *)(a1 + 88) = 1;
  if (*(char *)(a1 + 119) < 0)
  {
    *(_QWORD *)(a1 + 104) = 12;
    v22 = *(char **)(a1 + 96);
  }
  else
  {
    *(_BYTE *)(a1 + 119) = 12;
  }
  strcpy(v22, "header.qmdl2");
  if (!__s)
  {
    v66 = abm::trace::kScratchFolder[0];
    v67 = strlen(abm::trace::kScratchFolder[0]);
    if (v67 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v68 = v67;
    if (v67 >= 0x17)
    {
      v111 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v67 | 7) != 0x17)
        v111 = v67 | 7;
      v112 = v111 + 1;
      v69 = operator new(v111 + 1);
      v122.__r_.__value_.__l.__size_ = v68;
      v122.__r_.__value_.__r.__words[2] = v112 | 0x8000000000000000;
      v122.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
    }
    else
    {
      *((_BYTE *)&v122.__r_.__value_.__s + 23) = v67;
      v69 = &v122;
      if (!v67)
      {
LABEL_165:
        v69[v68] = 0;
        v121 = 12;
        strcpy((char *)__p, "QDSS.scratch");
        v113 = std::string::append(&v122, (const std::string::value_type *)__p, 0xCuLL);
        v114 = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
        v124 = v113->__r_.__value_.__r.__words[2];
        *(_OWORD *)v123 = v114;
        v113->__r_.__value_.__l.__size_ = 0;
        v113->__r_.__value_.__r.__words[2] = 0;
        v113->__r_.__value_.__r.__words[0] = 0;
        v64 = a1 + 168;
        if (*(char *)(a1 + 191) < 0)
          goto LABEL_81;
        goto LABEL_82;
      }
    }
    memmove(v69, v66, v68);
    goto LABEL_165;
  }
  v61 = strlen(__s);
  if (v61 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v62 = (void *)v61;
  if (v61 >= 0x17)
  {
    v103 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v61 | 7) != 0x17)
      v103 = v61 | 7;
    v104 = v103 + 1;
    v63 = operator new(v103 + 1);
    v123[1] = v62;
    v124 = v104 | 0x8000000000000000;
    v123[0] = v63;
  }
  else
  {
    HIBYTE(v124) = v61;
    v63 = v123;
    if (!v61)
    {
      LOBYTE(v123[0]) = 0;
      v64 = a1 + 168;
      if ((*(char *)(a1 + 191) & 0x80000000) == 0)
        goto LABEL_82;
      goto LABEL_81;
    }
  }
  memcpy(v63, __s, (size_t)v62);
  *((_BYTE *)v62 + (_QWORD)v63) = 0;
  v64 = a1 + 168;
  if (*(char *)(a1 + 191) < 0)
LABEL_81:
    operator delete(*(void **)v64);
LABEL_82:
  *(_OWORD *)v64 = *(_OWORD *)v123;
  *(_QWORD *)(v64 + 16) = v124;
  if (!__s)
  {
    if (v121 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v122.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a1 + 167) < 0)
  {
    *(_QWORD *)(a1 + 152) = 4;
    v65 = *(char **)(a1 + 144);
  }
  else
  {
    v65 = (char *)(a1 + 144);
    *(_BYTE *)(a1 + 167) = 4;
  }
  strcpy(v65, ".bin");
  *(_DWORD *)(a1 + 200) = v30;
  v87 = abm::trace::kScratchFolder[0];
  v88 = strlen(abm::trace::kScratchFolder[0]);
  if (v88 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v89 = v88;
  if (v88 >= 0x17)
  {
    v91 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17)
      v91 = v88 | 7;
    v92 = v91 + 1;
    v90 = (std::string *)operator new(v91 + 1);
    __dst.__r_.__value_.__l.__size_ = v89;
    __dst.__r_.__value_.__r.__words[2] = v92 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v90;
    goto LABEL_124;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v88;
  v90 = &__dst;
  if (v88)
LABEL_124:
    memmove(v90, v87, v89);
  v90->__r_.__value_.__s.__data_[v89] = 0;
  v93 = std::string::append(&__dst, "QDSS.scratch", 0xCuLL);
  v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
  v124 = v93->__r_.__value_.__r.__words[2];
  *(_OWORD *)v123 = v94;
  v93->__r_.__value_.__l.__size_ = 0;
  v93->__r_.__value_.__r.__words[2] = 0;
  v93->__r_.__value_.__r.__words[0] = 0;
  abm::trace::TraceInfo::create();
  v95 = v119;
  v119 = 0uLL;
  v96 = *(std::__shared_weak_count **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = v95;
  if (v96)
  {
    v97 = (unint64_t *)&v96->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v49 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
  if (!*((_QWORD *)&v119 + 1))
    goto LABEL_134;
  v99 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
  do
    v51 = __ldaxr(v99);
  while (__stlxr(v51 - 1, v99));
LABEL_133:
  if (v51)
    goto LABEL_134;
  ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
  std::__shared_weak_count::__release_weak(v49);
  if (SHIBYTE(v124) < 0)
    goto LABEL_138;
LABEL_135:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_139;
  return a1;
}

{
  return diag::DIAGReader::Parameters::Parameters(a1, a2, a3, a4, a5, a6, __s, a8, a9);
}

void sub_1A35106F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v41;

  if (a25 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  TraceFileCollection::Parameters::~Parameters(a9);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v39);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](a11);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v38);
  v41 = *(std::__shared_weak_count **)(v37 + 8);
  if (v41)
    std::__shared_weak_count::__release_weak(v41);
  _Unwind_Resume(a1);
}

void diag::DIAGReader::Parameters::create(int a1@<W0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, int a5@<W4>, char *a6@<X5>, int a7@<W6>, int a8@<W7>, _QWORD *a9@<X8>)
{
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *shared_owners;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *p_shared_weak_owners;
  unint64_t v57;
  unint64_t v58;
  _QWORD v61[2];
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;

  v16 = *a2;
  v15 = (std::__shared_weak_count *)a2[1];
  v17 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v18 = v17;
  v17->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  v17->__shared_weak_owners_ = 0;
  v17->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A0C9D8;
  if (v15)
  {
    v20 = (unint64_t *)&v15->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = *a3;
  v23 = (std::__shared_weak_count *)a3[1];
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = *a4;
  v27 = (std::__shared_weak_count *)a4[1];
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v64 = v16;
  v65 = v15;
  if (v15)
  {
    v30 = (unint64_t *)&v15->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = &v17[1].__vftable;
  v62 = v22;
  v63 = v23;
  if (v23)
  {
    v33 = (unint64_t *)&v23->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v61[0] = v26;
  v61[1] = v27;
  if (v27)
  {
    v35 = (unint64_t *)&v27->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  diag::DIAGReader::Parameters::Parameters((uint64_t)&v17[1], a1, &v64, &v62, v61, a5, a6, a7, a8);
  if (v27)
  {
    v37 = (unint64_t *)&v27->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v39 = v63;
  if (v63)
  {
    v40 = (unint64_t *)&v63->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v65;
  if (v65)
  {
    v43 = (unint64_t *)&v65->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (v27)
  {
    v45 = (unint64_t *)&v27->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v23)
  {
    v47 = (unint64_t *)&v23->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v15)
  {
    v49 = (unint64_t *)&v15->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      shared_owners = (std::__shared_weak_count *)v18[1].__shared_owners_;
      if (shared_owners)
        goto LABEL_49;
      do
LABEL_55:
        v55 = __ldxr(p_shared_owners);
      while (__stxr(v55 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
      do
        v57 = __ldxr(p_shared_weak_owners);
      while (__stxr(v57 + 1, p_shared_weak_owners));
      v18[1].__vftable = (std::__shared_weak_count_vtbl *)&v18[1];
      v18[1].__shared_owners_ = (uint64_t)v18;
      goto LABEL_59;
    }
  }
  shared_owners = (std::__shared_weak_count *)v18[1].__shared_owners_;
  if (!shared_owners)
    goto LABEL_55;
LABEL_49:
  if (shared_owners->__shared_owners_ != -1)
    goto LABEL_62;
  do
    v52 = __ldxr(p_shared_owners);
  while (__stxr(v52 + 1, p_shared_owners));
  v53 = (unint64_t *)&v18->__shared_weak_owners_;
  do
    v54 = __ldxr(v53);
  while (__stxr(v54 + 1, v53));
  v18[1].__vftable = (std::__shared_weak_count_vtbl *)&v18[1];
  v18[1].__shared_owners_ = (uint64_t)v18;
  std::__shared_weak_count::__release_weak(shared_owners);
  do
LABEL_59:
    v58 = __ldaxr(p_shared_owners);
  while (__stlxr(v58 - 1, p_shared_owners));
  if (!v58)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_62:
  *a9 = v32;
  a9[1] = v18;
}

void sub_1A3510B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  void *v35;

  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (a16)
  {
    v25 = (unint64_t *)&a16->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
    }
  }
  if (a18)
  {
    v27 = (unint64_t *)&a18->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  if (v20)
  {
    v29 = (unint64_t *)&v20->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v19)
  {
    v31 = (unint64_t *)&v19->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v18)
  {
    v33 = (unint64_t *)&v18->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v35);
  _Unwind_Resume(a1);
}

uint64_t diag::DIAGReader::DIAGReader(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  void *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  std::__shared_weak_count *v34;
  __int128 v35;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = *a2;
  v6 = a1 + 16;
  v7 = a2[1];
  *(_QWORD *)(a1 + 24) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = (uint64_t *)(a1 + 32);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v11 = *(void **)a3;
  if (*(_QWORD *)a3)
    v11 = _Block_copy(v11);
  *(_QWORD *)(a1 + 72) = v11;
  v12 = *(NSObject **)(a3 + 8);
  *(_QWORD *)(a1 + 80) = v12;
  if (v12)
    dispatch_retain(v12);
  v13 = *(std::__shared_weak_count **)(*a2 + 64);
  v34 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  TraceFileCollection::create();
  v16 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v35;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v34)
  {
    v19 = (unint64_t *)&v34->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v21 = *v10;
  if (*v10 && *(_DWORD *)(*(_QWORD *)v6 + 16) == 2)
  {
    v22 = *(std::__shared_weak_count **)(a1 + 40);
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      do
        v25 = __ldxr(v23);
      while (__stxr(v25 + 1, v23));
      *(_DWORD *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 52) = 0;
      do
        v26 = __ldxr(v23);
      while (__stxr(v26 + 1, v23));
      v27 = *(std::__shared_weak_count **)(a1 + 64);
      *(_QWORD *)(a1 + 56) = v21;
      *(_QWORD *)(a1 + 64) = v22;
      if (!v27)
      {
LABEL_36:
        if (v22)
        {
          v30 = (unint64_t *)&v22->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
          do
            v32 = __ldaxr(v30);
          while (__stlxr(v32 - 1, v30));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 52) = 0;
      v27 = *(std::__shared_weak_count **)(a1 + 64);
      *(_QWORD *)(a1 + 56) = v21;
      *(_QWORD *)(a1 + 64) = 0;
      if (!v27)
        goto LABEL_36;
    }
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    goto LABEL_36;
  }
  return a1;
}

void sub_1A3510F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  diag::DIAGProtocolHDLC *v12;
  uint64_t v13;
  std::__shared_weak_count *v15;

  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  dispatch::callback<void({block_pointer})(std::string)>::~callback(v13);
  diag::DIAGProtocolHDLC::~DIAGProtocolHDLC(v12);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v10);
  v15 = *(std::__shared_weak_count **)(v9 + 8);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  _Unwind_Resume(a1);
}

void diag::DIAGProtocolHDLC::~DIAGProtocolHDLC(diag::DIAGProtocolHDLC *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void diag::DIAGReader::~DIAGReader(diag::DIAGReader *this)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;

  v2 = *((_QWORD *)this + 10);
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)*((_QWORD *)this + 9);
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
}

void diag::DIAGReader::start(diag::DIAGReader *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  capabilities::abs *shouldUseMinBasebandTransportIOReadSize;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  void *v18;
  int v19;
  unint64_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  void *v24;
  std::__shared_weak_count *v25;
  int v26;
  size_t v27;
  unint64_t v28;
  std::string::value_type *v29;
  unsigned __int8 v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void **v35;
  std::string *v36;
  std::string::value_type *v37;
  std::string::size_type size;
  int v39;
  const void *v40;
  void *v41;
  NSObject *v42;
  const void *v43;
  capabilities::abs *v44;
  int v45;
  void *__p[2];
  unsigned __int8 v47;
  std::string v48;
  _DWORD v49[2];
  void *v50;
  _QWORD v51[6];
  std::__shared_weak_count *v52;
  void *v53;
  int v54;
  char v55;
  __int16 v56;
  char v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  char v62;
  _BYTE v63[7];
  _QWORD v64[6];
  std::__shared_weak_count *v65;
  _QWORD aBlock[6];
  std::__shared_weak_count *v67;
  _DWORD v68[2];
  __int16 v69;
  char v70;
  _QWORD block[4];
  void *v72;
  std::string v73;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (!v2 || (v3 = *(_QWORD *)this, (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v69 = -21846;
  v70 = -86;
  v68[0] = -1431655766;
  *(_DWORD *)((char *)v68 + 3) = -1431655766;
  v10 = *(_DWORD *)(*((_QWORD *)this + 2) + 16);
  shouldUseMinBasebandTransportIOReadSize = (capabilities::abs *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)v4);
  if ((_DWORD)shouldUseMinBasebandTransportIOReadSize)
    v12 = 0x4000;
  else
    v12 = 0x8000;
  if ((capabilities::abs::shouldUseMinBasebandTransportIOReadCount(shouldUseMinBasebandTransportIOReadSize) & 1) != 0)
  {
LABEL_13:
    v13 = 4;
    if (*(_DWORD *)(*((_QWORD *)this + 2) + 16) != 2)
      goto LABEL_49;
LABEL_19:
    *((_DWORD *)this + 12) = 0;
    *((_BYTE *)this + 52) = 0;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN4diag10DIAGReader5startEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_20;
    aBlock[4] = this;
    aBlock[5] = v3;
    v67 = v5;
    do
      v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
    v15 = _Block_copy(aBlock);
    v16 = v67;
    if (!v67)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (v10 == 2)
  {
    v13 = 16;
    if (*(_DWORD *)(*((_QWORD *)this + 2) + 16) == 2)
      goto LABEL_19;
  }
  else
  {
    if (v10 != 16 && v10 != 15)
      goto LABEL_13;
    v13 = 36;
    if (*(_DWORD *)(*((_QWORD *)this + 2) + 16) == 2)
      goto LABEL_19;
  }
LABEL_49:
  v30 = atomic_load((unsigned __int8 *)&qword_1ED114BD0);
  if ((v30 & 1) == 0)
  {
    v44 = (capabilities::abs *)__cxa_guard_acquire(&qword_1ED114BD0);
    if ((_DWORD)v44)
    {
      if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v44))
        v45 = 0x4000;
      else
        v45 = 0x8000;
      _MergedGlobals_17 = v45;
      __cxa_guard_release(&qword_1ED114BD0);
    }
  }
  v64[0] = MEMORY[0x1E0C809B0];
  v64[1] = 1174405120;
  v64[2] = ___ZN4diag10DIAGReader5startEv_block_invoke_7;
  v64[3] = &__block_descriptor_tmp_8_7;
  v64[4] = this;
  v64[5] = v3;
  v65 = v5;
  do
    v31 = __ldxr(p_shared_weak_owners);
  while (__stxr(v31 + 1, p_shared_weak_owners));
  v15 = _Block_copy(v64);
  v16 = v65;
  if (v65)
LABEL_22:
    std::__shared_weak_count::__release_weak(v16);
LABEL_23:
  v17 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
  v54 = v10;
  v55 = 1;
  v56 = v69;
  v57 = v70;
  v58 = 10;
  v59 = v12;
  v60 = v13;
  v61 = 0;
  v62 = 0;
  *(_DWORD *)v63 = v68[0];
  *(_DWORD *)&v63[3] = *(_DWORD *)((char *)v68 + 3);
  if (v15)
    v18 = _Block_copy(v15);
  else
    v18 = 0;
  v53 = v18;
  v19 = (*(uint64_t (**)(uint64_t, int *, void **))(*(_QWORD *)v17 + 48))(v17, &v54, &v53);
  if (v53)
    _Block_release(v53);
  if (!v19)
  {
    if (!*((_QWORD *)this + 9) || !*((_QWORD *)this + 10))
      goto LABEL_79;
    BasebandTransport::asString(*(unsigned int *)(*((_QWORD *)this + 2) + 16), (char *)__p);
    v26 = (char)v47;
    if ((v47 & 0x80u) == 0)
      v27 = v47;
    else
      v27 = (size_t)__p[1];
    v28 = v27 + 15;
    memset(&v48, 170, sizeof(v48));
    if (v27 + 15 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v28 >= 0x17)
    {
      v32 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v28 | 7) != 0x17)
        v32 = v28 | 7;
      v33 = v32 + 1;
      v34 = (char *)operator new(v32 + 1);
      v48.__r_.__value_.__l.__size_ = v27 + 15;
      v48.__r_.__value_.__r.__words[2] = v33 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
      qmemcpy(v34, "Failed to open ", 15);
      v29 = v34 + 15;
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v27 + 15;
      strcpy((char *)&v48, "Failed to open ");
      v29 = &v48.__r_.__value_.__s.__data_[15];
      if (!v27)
        goto LABEL_61;
    }
    if (v26 >= 0)
      v35 = __p;
    else
      v35 = (void **)__p[0];
    memmove(v29, v35, v27);
LABEL_61:
    v29[v27] = 0;
    v36 = std::string::append(&v48, " transport", 0xAuLL);
    v37 = (std::string::value_type *)v36->__r_.__value_.__r.__words[0];
    size = v36->__r_.__value_.__l.__size_;
    v49[0] = v36->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v49 + 3) = *(_DWORD *)((char *)&v36->__r_.__value_.__r.__words[2] + 3);
    v39 = SHIBYTE(v36->__r_.__value_.__r.__words[2]);
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    v40 = (const void *)*((_QWORD *)this + 9);
    if (v40)
      v41 = _Block_copy(v40);
    else
      v41 = 0;
    v42 = *((_QWORD *)this + 10);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEclIJS7_EEEvDpT__block_invoke;
    block[3] = &__block_descriptor_tmp_24_0;
    if (v41)
    {
      v72 = _Block_copy(v41);
      if ((v39 & 0x80000000) == 0)
      {
LABEL_66:
        v73.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
        v73.__r_.__value_.__l.__size_ = size;
        LODWORD(v73.__r_.__value_.__r.__words[2]) = v49[0];
        *(_DWORD *)((char *)&v73.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v49 + 3);
        *((_BYTE *)&v73.__r_.__value_.__s + 23) = v39;
        goto LABEL_69;
      }
    }
    else
    {
      v72 = 0;
      if ((v39 & 0x80000000) == 0)
        goto LABEL_66;
    }
    std::string::__init_copy_ctor_external(&v73, v37, size);
LABEL_69:
    dispatch_async(v42, block);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v73.__r_.__value_.__l.__data_);
      v43 = v72;
      if (!v72)
        goto LABEL_74;
    }
    else
    {
      v43 = v72;
      if (!v72)
      {
LABEL_74:
        if (v41)
          _Block_release(v41);
        if (v39 < 0)
        {
          operator delete(v37);
          if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_78:
            if (((char)v47 & 0x80000000) == 0)
              goto LABEL_79;
            goto LABEL_84;
          }
        }
        else if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_78;
        }
        operator delete(v48.__r_.__value_.__l.__data_);
        if (((char)v47 & 0x80000000) == 0)
          goto LABEL_79;
LABEL_84:
        operator delete(__p[0]);
        if (!v15)
          goto LABEL_81;
        goto LABEL_80;
      }
    }
    _Block_release(v43);
    goto LABEL_74;
  }
  v51[0] = MEMORY[0x1E0C809B0];
  v51[1] = 1174405120;
  v51[2] = ___ZN4diag10DIAGReader5startEv_block_invoke_9;
  v51[3] = &__block_descriptor_tmp_13_4;
  v51[4] = this;
  v51[5] = v3;
  v52 = v5;
  do
    v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  v21 = _Block_copy(v51);
  v22 = v21;
  v23 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
  if (!v21)
  {
    v50 = 0;
    BasebandTransport::reportStatus(v23, 60, &v50);
    v25 = v52;
    if (!v52)
      goto LABEL_79;
LABEL_46:
    std::__shared_weak_count::__release_weak(v25);
    if (!v15)
      goto LABEL_81;
    goto LABEL_80;
  }
  v24 = _Block_copy(v21);
  v50 = v24;
  BasebandTransport::reportStatus(v23, 60, &v50);
  if (v24)
    _Block_release(v24);
  _Block_release(v22);
  v25 = v52;
  if (v52)
    goto LABEL_46;
LABEL_79:
  if (v15)
LABEL_80:
    _Block_release(v15);
LABEL_81:
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1A35116AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  __cxa_guard_abort(&qword_1ED114BD0);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_1A35116CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *aBlock)
{
  std::__shared_weak_count *v30;
  const void *v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  const void *v36;

  v36 = *(const void **)(v34 - 120);
  if (v36)
    _Block_release(v36);
  if (v33)
    _Block_release(v33);
  operator delete(v32);
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (v31)
    _Block_release(v31);
  std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(a1);
}

void ___ZN4diag10DIAGReader5startEv_block_invoke(_QWORD *a1, const unsigned __int8 *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (a1[5])
        diag::DIAGProtocolHDLC::handleReadData((diag::DIAGProtocolHDLC *)(v7 + 48), a2, a3);
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1A351185C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrIN4diag10DIAGReaderEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrIN4diag10DIAGReaderEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN4diag10DIAGReader5startEv_block_invoke_7(_QWORD *a1, const unsigned __int8 *a2, unsigned int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unsigned int Data;
  BOOL v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (a1[5])
      {
        Data = TraceFileCollection::handleReadData(*(TraceFileCollection **)(v7 + 32), a2);
        if (TraceFileCollection::getInMemoryRemaining(*(TraceFileCollection **)(v7 + 32)) < _MergedGlobals_17)
          TraceFileCollection::archive(*(TraceFileCollection **)(v7 + 32));
        if (Data)
          v11 = a3 > Data;
        else
          v11 = 0;
        if (v11)
          TraceFileCollection::handleReadData(*(TraceFileCollection **)(v7 + 32), &a2[Data]);
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1A35119A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1A35119B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN4diag10DIAGReader5startEv_block_invoke_9(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  int v8;
  size_t v9;
  unint64_t v10;
  std::string::value_type *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void **v16;
  std::string *v17;
  std::string::value_type *v18;
  std::string::size_type size;
  int v20;
  const void *v21;
  void *v22;
  NSObject *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  _BYTE v26[8];
  _QWORD *v27;
  std::string v28;
  void *v29[2];
  unsigned __int8 v30;
  std::string v31;
  _DWORD v32[2];
  std::__shared_weak_count *v34;
  _QWORD block[4];
  void *v36;
  std::string v37;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (_QWORD *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v34 = v6;
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
        goto LABEL_46;
      if (!v5[9] || !v5[10] || *(_DWORD *)a2 != 2)
      {
        if (!*(_QWORD *)(v5[2] + 72))
          goto LABEL_46;
        std::to_string(&v28, *(_QWORD *)(a2 + 24));
        Timestamp::Timestamp((Timestamp *)v26);
        abm::trace::TraceInfo::push();
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v26, v27);
        if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_46;
        v12 = (void *)v28.__r_.__value_.__r.__words[0];
        goto LABEL_45;
      }
      BasebandTransport::asString(*(unsigned int *)(v5[2] + 16), (char *)v29);
      v8 = (char)v30;
      if ((v30 & 0x80u) == 0)
        v9 = v30;
      else
        v9 = (size_t)v29[1];
      v10 = v9 + 20;
      memset(&v31, 170, sizeof(v31));
      if (v9 + 20 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v10 >= 0x17)
      {
        v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v10 | 7) != 0x17)
          v13 = v10 | 7;
        v14 = v13 + 1;
        v15 = (char *)operator new(v13 + 1);
        v31.__r_.__value_.__l.__size_ = v9 + 20;
        v31.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
        v31.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
        *((_DWORD *)v15 + 4) = 544042866;
        *(_OWORD *)v15 = *(_OWORD *)"Failed to read from ";
        v11 = v15 + 20;
      }
      else
      {
        HIDWORD(v31.__r_.__value_.__r.__words[2]) = 0;
        *((_BYTE *)&v31.__r_.__value_.__s + 23) = v9 + 20;
        LODWORD(v31.__r_.__value_.__r.__words[2]) = 544042866;
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)"Failed to read from ";
        v11 = &v31.__r_.__value_.__s.__data_[20];
        if (!v9)
          goto LABEL_24;
      }
      if (v8 >= 0)
        v16 = v29;
      else
        v16 = (void **)v29[0];
      memmove(v11, v16, v9);
LABEL_24:
      v11[v9] = 0;
      v17 = std::string::append(&v31, " transport", 0xAuLL);
      v18 = (std::string::value_type *)v17->__r_.__value_.__r.__words[0];
      size = v17->__r_.__value_.__l.__size_;
      v32[0] = v17->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v32 + 3) = *(_DWORD *)((char *)&v17->__r_.__value_.__r.__words[2] + 3);
      v20 = SHIBYTE(v17->__r_.__value_.__r.__words[2]);
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v21 = (const void *)v5[9];
      if (v21)
        v22 = _Block_copy(v21);
      else
        v22 = 0;
      v23 = v5[10];
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 1174405120;
      block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEclIJS7_EEEvDpT__block_invoke;
      block[3] = &__block_descriptor_tmp_24_0;
      if (v22)
      {
        v36 = _Block_copy(v22);
        if ((v20 & 0x80000000) == 0)
        {
LABEL_29:
          v37.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
          v37.__r_.__value_.__l.__size_ = size;
          LODWORD(v37.__r_.__value_.__r.__words[2]) = v32[0];
          *(_DWORD *)((char *)&v37.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v32 + 3);
          *((_BYTE *)&v37.__r_.__value_.__s + 23) = v20;
          goto LABEL_32;
        }
      }
      else
      {
        v36 = 0;
        if ((v20 & 0x80000000) == 0)
          goto LABEL_29;
      }
      std::string::__init_copy_ctor_external(&v37, v18, size);
LABEL_32:
      dispatch_async(v23, block);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      if (v36)
        _Block_release(v36);
      if (v22)
        _Block_release(v22);
      if (v20 < 0)
      {
        operator delete(v18);
        if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_40:
          if (((char)v30 & 0x80000000) == 0)
            goto LABEL_46;
LABEL_44:
          v12 = v29[0];
LABEL_45:
          operator delete(v12);
LABEL_46:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
      }
      else if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_40;
      }
      operator delete(v31.__r_.__value_.__l.__data_);
      if (((char)v30 & 0x80000000) == 0)
        goto LABEL_46;
      goto LABEL_44;
    }
  }
}

void sub_1A3511D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  void *v42;
  const void *v43;
  uint64_t v44;
  const void *v46;

  v46 = *(const void **)(v44 - 96);
  if (v46)
    _Block_release(v46);
  if (v43)
    _Block_release(v43);
  operator delete(v42);
  if (a42 < 0)
    operator delete(__p);
  if (a36 < 0)
  {
    operator delete(a31);
    std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v44 - 144);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v44 - 144);
  _Unwind_Resume(a1);
}

void diag::DIAGReader::stop(diag::DIAGReader *this)
{
  uint64_t v2;
  _BYTE v3[8];
  _QWORD *v4;
  std::string v5;

  BasebandTransport::close(*(BasebandTransport **)(*((_QWORD *)this + 2) + 24));
  v2 = *((_QWORD *)this + 2);
  if (*(_QWORD *)(v2 + 72))
  {
    std::to_string(&v5, *(_QWORD *)(*(_QWORD *)(v2 + 24) + 336));
    Timestamp::Timestamp((Timestamp *)v3);
    abm::trace::TraceInfo::push();
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v3, v4);
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_1A3511F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,_QWORD *a22)
{
  uint64_t v22;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a21, a22);
  if (*(char *)(v22 - 17) < 0)
    operator delete(*(void **)(v22 - 40));
  _Unwind_Resume(a1);
}

void diag::DIAGReader::snapshot(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  std::string::size_type size;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::string::size_type v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  const std::string::value_type *v27;
  const std::string::value_type *v28;
  int v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  void **v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  std::string::size_type v41;
  char v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  char v49[8];
  _QWORD *v50;
  std::string v51;
  void *__p[2];
  unsigned __int8 v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string::value_type *v59;
  unint64_t v60;
  _BYTE v61[32];
  _QWORD v62[5];

  v62[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v61[24] = 0xAAAAAAAAAAAAAALL;
  memset(v61, 170, 24);
  v59 = (std::string::value_type *)0xAAAAAAAAAAAAAA00;
  v60 = 0xAAAAAAAAAAAAAAAALL;
  *(_WORD *)&v61[7] = 0;
  v4 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 40);
  v5 = v4[1];
  v6 = v4[2];
  if (v5 != v6)
  {
    while (1)
    {
      ETLDIAGLoggingGetGUIDString();
      v7 = std::string::insert(&v56, 0, "GUID: ", 6uLL);
      v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v57.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      v9 = std::string::append(&v57, "\n", 1uLL);
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v58.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &v58;
      else
        v11 = (std::string *)v58.__r_.__value_.__r.__words[0];
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
      else
        size = v58.__r_.__value_.__l.__size_;
      std::string::append((std::string *)&v59, (const std::string::value_type *)v11, size);
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v58.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_12:
          if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_16;
          goto LABEL_3;
        }
      }
      else if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_12;
      }
      operator delete(v57.__r_.__value_.__l.__data_);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
LABEL_16:
        operator delete(v56.__r_.__value_.__l.__data_);
LABEL_3:
      v5 += 16;
      if (v5 == v6)
      {
        v4 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 40);
        break;
      }
    }
  }
  v13 = (unsigned __int8 *)v4[4];
  v14 = (unsigned __int8 *)v4[5];
  while (v13 != v14)
  {
    std::to_string(&v56, *v13);
    v15 = std::string::insert(&v56, 0, "DiagID: ", 8uLL);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&v57, "\n", 1uLL);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v58;
    else
      v19 = (std::string *)v58.__r_.__value_.__r.__words[0];
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
    else
      v20 = v58.__r_.__value_.__l.__size_;
    std::string::append((std::string *)&v59, (const std::string::value_type *)v19, v20);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v58.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_29:
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_33;
        goto LABEL_20;
      }
    }
    else if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_29;
    }
    operator delete(v57.__r_.__value_.__l.__data_);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
LABEL_33:
      operator delete(v56.__r_.__value_.__l.__data_);
LABEL_20:
    ++v13;
  }
  *((_BYTE *)&v54.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v54, "Ext: ");
  if (v61[7] >= 0)
    v21 = (const std::string::value_type *)&v59;
  else
    v21 = v59;
  if (v61[7] >= 0)
    v22 = v61[7];
  else
    v22 = v60;
  v23 = std::string::insert(&v54, 0, v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = *(_QWORD *)(a1 + 16);
  v28 = *(const std::string::value_type **)(v25 + 144);
  v26 = v25 + 144;
  v27 = v28;
  v29 = *(char *)(v26 + 23);
  if (v29 >= 0)
    v30 = (const std::string::value_type *)v26;
  else
    v30 = v27;
  if (v29 >= 0)
    v31 = *(unsigned __int8 *)(v26 + 23);
  else
    v31 = *(_QWORD *)(v26 + 8);
  v32 = std::string::append(&v55, v30, v31);
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  v34 = std::string::append(&v56, "\nQSR: ", 6uLL);
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  capabilities::radio::firmwarePrefix((capabilities::radio *)v34);
  if ((v53 & 0x80u) == 0)
    v36 = __p;
  else
    v36 = (void **)__p[0];
  if ((v53 & 0x80u) == 0)
    v37 = v53;
  else
    v37 = (std::string::size_type)__p[1];
  v38 = std::string::append(&v57, (const std::string::value_type *)v36, v37);
  v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  v40 = std::string::append(&v58, "hash\n", 5uLL);
  v41 = v40->__r_.__value_.__r.__words[0];
  v62[0] = v40->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v62 + 7) = *(std::string::size_type *)((char *)&v40->__r_.__value_.__r.__words[1] + 7);
  v42 = HIBYTE(v40->__r_.__value_.__r.__words[2]);
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)&v61[8] = v41;
  *(_QWORD *)&v61[23] = *(_QWORD *)((char *)v62 + 7);
  *(_QWORD *)&v61[16] = v62[0];
  v61[31] = v42;
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v58.__r_.__value_.__l.__data_);
    if (((char)v53 & 0x80000000) == 0)
    {
LABEL_54:
      if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_55;
      goto LABEL_62;
    }
  }
  else if (((char)v53 & 0x80000000) == 0)
  {
    goto LABEL_54;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_55:
    if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_56;
    goto LABEL_63;
  }
LABEL_62:
  operator delete(v57.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_56:
    if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_57;
    goto LABEL_64;
  }
LABEL_63:
  operator delete(v56.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_57:
    if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_58;
    goto LABEL_65;
  }
LABEL_64:
  operator delete(v55.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_58:
    if (!*(_QWORD *)(*(_QWORD *)(a1 + 16) + 72))
      goto LABEL_70;
    goto LABEL_66;
  }
LABEL_65:
  operator delete(v54.__r_.__value_.__l.__data_);
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 16) + 72))
    goto LABEL_70;
LABEL_66:
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v51 = *(std::string *)a2;
  Timestamp::Timestamp((Timestamp *)v49);
  abm::trace::TraceInfo::push();
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v49, v50);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v51.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 32))
      goto LABEL_80;
    goto LABEL_71;
  }
LABEL_70:
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_80;
LABEL_71:
  v43 = *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 16) + 80);
  v48 = v43;
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldxr(p_shared_owners);
    while (__stxr(v45 + 1, p_shared_owners));
  }
  TraceFileCollection::snapshot();
  if (v48)
  {
    v46 = (unint64_t *)&v48->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
LABEL_80:
  if ((v61[7] & 0x80000000) == 0)
  {
    if ((v61[31] & 0x80000000) == 0)
      return;
LABEL_84:
    operator delete(*(void **)&v61[8]);
    return;
  }
  operator delete(v59);
  if ((v61[31] & 0x80000000) != 0)
    goto LABEL_84;
}

void sub_1A3512598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  if (*(char *)(v58 - 145) < 0)
  {
    operator delete(*(void **)(v58 - 168));
    if ((*(char *)(v58 - 121) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v58 - 121) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v58 - 144));
  _Unwind_Resume(exception_object);
}

BOOL diag::DIAGReader::isStarted(diag::DIAGReader *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
  return *(_BYTE *)(v1 + 332) && *(_DWORD *)(v1 + 328) == 1;
}

uint64_t diag::DIAGReader::getReadCount(diag::DIAGReader *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 24) + 336);
}

TraceFileCollection *diag::DIAGReader::setHistory(diag::DIAGReader *this)
{
  TraceFileCollection *result;

  result = (TraceFileCollection *)*((_QWORD *)this + 4);
  if (result)
    return (TraceFileCollection *)TraceFileCollection::setHistory(result);
  return result;
}

TraceFileCollection *diag::DIAGReader::setMaxMemoryFile(diag::DIAGReader *this)
{
  TraceFileCollection *result;

  result = (TraceFileCollection *)*((_QWORD *)this + 4);
  if (result)
    return (TraceFileCollection *)TraceFileCollection::setMaxMemoryFileCount(result);
  return result;
}

TraceFileCollection *diag::DIAGReader::setFileSize(diag::DIAGReader *this)
{
  TraceFileCollection *result;

  result = (TraceFileCollection *)*((_QWORD *)this + 4);
  if (result)
    return (TraceFileCollection *)TraceFileCollection::setFileSize(result);
  return result;
}

void diag::DIAGReader::shutdown(diag::DIAGReader *this)
{
  char *v1;
  size_t v2;
  void *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *__dst[2];
  unint64_t v8;

  if (*((_QWORD *)this + 4))
  {
    v1 = abm::trace::kTrashFolder[0];
    v2 = strlen(abm::trace::kTrashFolder[0]);
    if (v2 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v3 = (void *)v2;
    if (v2 >= 0x17)
    {
      v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v2 | 7) != 0x17)
        v5 = v2 | 7;
      v6 = v5 + 1;
      v4 = (void **)operator new(v5 + 1);
      __dst[1] = v3;
      v8 = v6 | 0x8000000000000000;
      __dst[0] = v4;
    }
    else
    {
      HIBYTE(v8) = v2;
      v4 = __dst;
      if (!v2)
      {
LABEL_10:
        *((_BYTE *)v3 + (_QWORD)v4) = 0;
        TraceFileCollection::clear();
        if (SHIBYTE(v8) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memmove(v4, v1, (size_t)v3);
    goto LABEL_10;
  }
}

void sub_1A351290C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t diag::DIAGReader::getTraceInfo@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(_QWORD *)(this + 16);
  v4 = *(_QWORD *)(v2 + 72);
  v3 = *(_QWORD *)(v2 + 80);
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return this;
}

TraceFileCollection *diag::DIAGReader::archive(diag::DIAGReader *this)
{
  TraceFileCollection *result;

  result = (TraceFileCollection *)*((_QWORD *)this + 4);
  if (result)
    return (TraceFileCollection *)TraceFileCollection::archive(result);
  return result;
}

TraceFileCollection *diag::DIAGReader::getCurrentIndex(diag::DIAGReader *this)
{
  TraceFileCollection *result;

  result = (TraceFileCollection *)*((_QWORD *)this + 4);
  if (result)
    return (TraceFileCollection *)TraceFileCollection::getNewestFileNumber(result);
  return result;
}

void diag::DIAGReaderManager::create(_QWORD *a1@<X8>)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)operator new(0x40uLL);
  v4 = v3;
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A0CA58;
  v3[2].__shared_owners_ = 0;
  v3[2].__vftable = 0;
  v3[1].__shared_weak_owners_ = (uint64_t)&v3[2];
  *a1 = v3 + 1;
  a1[1] = v3;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&v3[1];
  v3[1].__shared_owners_ = (uint64_t)v3;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
}

_QWORD *diag::DIAGReaderManager::DIAGReaderManager(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  this[4] = 0;
  this[3] = 0;
  this[2] = this + 3;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[4] = 0;
  this[3] = 0;
  this[2] = this + 3;
  return this;
}

void diag::DIAGReaderManager::~DIAGReaderManager(diag::DIAGReaderManager *this)
{
  std::__shared_weak_count *v2;

  std::__tree<std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>,std::__map_value_compare<abm::helper::TaskID,std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>,std::less<abm::helper::TaskID>,true>,std::allocator<std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>>>::destroy(*((_QWORD **)this + 3));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

{
  std::__shared_weak_count *v2;

  std::__tree<std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>,std::__map_value_compare<abm::helper::TaskID,std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>,std::less<abm::helper::TaskID>,true>,std::allocator<std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>>>::destroy(*((_QWORD **)this + 3));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void diag::DIAGReaderManager::addReader(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v17;
  NSObject *v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *shared_owners;
  unint64_t v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unsigned int v40;
  void *v41;
  uint64_t v42;
  uint64_t *v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  void *aBlock;
  NSObject *object;
  uint64_t v55;
  std::__shared_weak_count *v56;
  void *v57;
  NSObject *v58;
  _QWORD v59[2];

  v8 = (_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  if (!v7)
    goto LABEL_12;
  v9 = a1 + 24;
  do
  {
    v10 = *(_DWORD *)(v7 + 32);
    v11 = v10 >= a2;
    if (v10 >= a2)
      v12 = (uint64_t *)v7;
    else
      v12 = (uint64_t *)(v7 + 8);
    if (v11)
      v9 = v7;
    v7 = *v12;
  }
  while (*v12);
  if ((_QWORD *)v9 == v8 || *(_DWORD *)(v9 + 32) > a2)
  {
LABEL_12:
    v14 = *a3;
    v13 = (std::__shared_weak_count *)a3[1];
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    if (*(_QWORD *)a4)
    {
      v17 = _Block_copy(*(const void **)a4);
      v18 = *(NSObject **)(a4 + 8);
      aBlock = v17;
      object = v18;
      if (!v18)
        goto LABEL_18;
    }
    else
    {
      v17 = 0;
      v18 = *(NSObject **)(a4 + 8);
      aBlock = 0;
      object = v18;
      if (!v18)
      {
LABEL_18:
        v19 = (std::__shared_weak_count *)operator new(0x70uLL);
        v20 = v19;
        v19->__shared_owners_ = 0;
        v21 = (unint64_t *)&v19->__shared_owners_;
        v19->__shared_weak_owners_ = 0;
        v19->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A0C988;
        v59[0] = v14;
        v59[1] = v13;
        if (v13)
        {
          v22 = (unint64_t *)&v13->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        if (v17)
        {
          v24 = _Block_copy(v17);
          v25 = (uint64_t)&v20[1];
          v57 = v24;
          v58 = v18;
          if (!v18)
            goto LABEL_24;
        }
        else
        {
          v24 = 0;
          v25 = (uint64_t)&v19[1];
          v57 = 0;
          v58 = v18;
          if (!v18)
          {
LABEL_24:
            diag::DIAGReader::DIAGReader(v25, v59, (uint64_t)&v57);
            if (v18)
              dispatch_release(v18);
            if (v24)
              _Block_release(v24);
            if (!v13)
              goto LABEL_32;
            v26 = (unint64_t *)&v13->__shared_owners_;
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
              v55 = v25;
              v56 = v20;
              shared_owners = (std::__shared_weak_count *)v20[1].__shared_owners_;
              if (shared_owners)
                goto LABEL_33;
            }
            else
            {
LABEL_32:
              v55 = v25;
              v56 = v20;
              shared_owners = (std::__shared_weak_count *)v20[1].__shared_owners_;
              if (shared_owners)
              {
LABEL_33:
                if (shared_owners->__shared_owners_ != -1)
                  goto LABEL_50;
                do
                  v29 = __ldxr(v21);
                while (__stxr(v29 + 1, v21));
                p_shared_weak_owners = (unint64_t *)&v20->__shared_weak_owners_;
                do
                  v31 = __ldxr(p_shared_weak_owners);
                while (__stxr(v31 + 1, p_shared_weak_owners));
                v20[1].__vftable = (std::__shared_weak_count_vtbl *)&v20[1];
                v20[1].__shared_owners_ = (uint64_t)v20;
                std::__shared_weak_count::__release_weak(shared_owners);
                do
LABEL_47:
                  v35 = __ldaxr(v21);
                while (__stlxr(v35 - 1, v21));
                if (!v35)
                {
                  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                  std::__shared_weak_count::__release_weak(v20);
                }
LABEL_50:
                if (object)
                  dispatch_release(object);
                if (aBlock)
                  _Block_release(aBlock);
                if (!v13)
                  goto LABEL_58;
                v36 = (unint64_t *)&v13->__shared_owners_;
                do
                  v37 = __ldaxr(v36);
                while (__stlxr(v37 - 1, v36));
                if (!v37)
                {
                  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
                  std::__shared_weak_count::__release_weak(v13);
                  v38 = *v8;
                  v39 = v8;
                  if (*v8)
                  {
                    while (1)
                    {
LABEL_63:
                      while (1)
                      {
                        v39 = (_QWORD *)v38;
                        v40 = *(_DWORD *)(v38 + 32);
                        if (v40 <= a2)
                          break;
                        v38 = *v39;
                        v8 = v39;
                        if (!*v39)
                          goto LABEL_67;
                      }
                      if (v40 >= a2)
                        break;
                      v38 = v39[1];
                      if (!v38)
                      {
                        v8 = v39 + 1;
                        goto LABEL_67;
                      }
                    }
                    v41 = v39;
                    v45 = v55;
                    v44 = v56;
                    if (!v56)
                      goto LABEL_74;
LABEL_72:
                    v46 = (unint64_t *)&v44->__shared_owners_;
                    do
                      v47 = __ldxr(v46);
                    while (__stxr(v47 + 1, v46));
LABEL_74:
                    v48 = (std::__shared_weak_count *)*((_QWORD *)v41 + 6);
                    *((_QWORD *)v41 + 5) = v45;
                    *((_QWORD *)v41 + 6) = v44;
                    if (v48)
                    {
                      v49 = (unint64_t *)&v48->__shared_owners_;
                      do
                        v50 = __ldaxr(v49);
                      while (__stlxr(v50 - 1, v49));
                      if (!v50)
                      {
                        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                        std::__shared_weak_count::__release_weak(v48);
                      }
                    }
                    if (v56)
                    {
                      v51 = (unint64_t *)&v56->__shared_owners_;
                      do
                        v52 = __ldaxr(v51);
                      while (__stlxr(v52 - 1, v51));
                      if (!v52)
                      {
                        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                        std::__shared_weak_count::__release_weak(v56);
                      }
                    }
                    return;
                  }
                }
                else
                {
LABEL_58:
                  v38 = *v8;
                  v39 = v8;
                  if (*v8)
                    goto LABEL_63;
                }
LABEL_67:
                v41 = operator new(0x38uLL);
                *((_DWORD *)v41 + 8) = a2;
                *((_QWORD *)v41 + 5) = 0;
                *((_QWORD *)v41 + 6) = 0;
                *(_QWORD *)v41 = 0;
                *((_QWORD *)v41 + 1) = 0;
                *((_QWORD *)v41 + 2) = v39;
                *v8 = v41;
                v42 = **(_QWORD **)(a1 + 16);
                v43 = (uint64_t *)v41;
                if (v42)
                {
                  *(_QWORD *)(a1 + 16) = v42;
                  v43 = (uint64_t *)*v8;
                }
                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 24), v43);
                ++*(_QWORD *)(a1 + 32);
                v45 = v55;
                v44 = v56;
                if (!v56)
                  goto LABEL_74;
                goto LABEL_72;
              }
            }
            do
              v32 = __ldxr(v21);
            while (__stxr(v32 + 1, v21));
            v33 = (unint64_t *)&v20->__shared_weak_owners_;
            do
              v34 = __ldxr(v33);
            while (__stxr(v34 + 1, v33));
            v20[1].__vftable = (std::__shared_weak_count_vtbl *)&v20[1];
            v20[1].__shared_owners_ = (uint64_t)v20;
            goto LABEL_47;
          }
        }
        dispatch_retain(v18);
        goto LABEL_24;
      }
    }
    dispatch_retain(v18);
    goto LABEL_18;
  }
}

void sub_1A3512EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A3512EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  std::__shared_weak_count *v17;
  void *v19;

  dispatch::callback<void({block_pointer})(std::string)>::~callback((uint64_t)&a15);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v19);
  dispatch::callback<void({block_pointer})(std::string)>::~callback((uint64_t)&a9);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1A3512F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  dispatch::callback<void({block_pointer})(std::string)>::~callback((uint64_t)&a9);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void diag::DIAGReaderManager::start(diag::DIAGReaderManager *this)
{
  char *v1;
  char *v2;
  char *v3;
  char *v4;
  BOOL v5;

  v1 = (char *)*((_QWORD *)this + 2);
  v2 = (char *)this + 24;
  if (v1 != (char *)this + 24)
  {
    do
    {
      diag::DIAGReader::start(*((diag::DIAGReader **)v1 + 5));
      v3 = (char *)*((_QWORD *)v1 + 1);
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = *(char **)v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (char *)*((_QWORD *)v1 + 2);
          v5 = *(_QWORD *)v4 == (_QWORD)v1;
          v1 = v4;
        }
        while (!v5);
      }
      v1 = v4;
    }
    while (v4 != v2);
  }
}

void diag::DIAGReaderManager::stop(diag::DIAGReaderManager *this)
{
  char *v1;
  char *v2;
  char *v3;
  char *v4;
  BOOL v5;

  v1 = (char *)*((_QWORD *)this + 2);
  v2 = (char *)this + 24;
  if (v1 != (char *)this + 24)
  {
    do
    {
      diag::DIAGReader::stop(*((diag::DIAGReader **)v1 + 5));
      v3 = (char *)*((_QWORD *)v1 + 1);
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = *(char **)v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (char *)*((_QWORD *)v1 + 2);
          v5 = *(_QWORD *)v4 == (_QWORD)v1;
          v1 = v4;
        }
        while (!v5);
      }
      v1 = v4;
    }
    while (v4 != v2);
  }
}

void diag::DIAGReaderManager::startIfNotStarted(diag::DIAGReaderManager *this)
{
  char *v1;
  char *v2;
  diag::DIAGReader *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  BOOL v7;

  v1 = (char *)*((_QWORD *)this + 2);
  v2 = (char *)this + 24;
  if (v1 != (char *)this + 24)
  {
    do
    {
      v3 = (diag::DIAGReader *)*((_QWORD *)v1 + 5);
      v4 = *(_QWORD *)(*((_QWORD *)v3 + 2) + 24);
      if (!*(_BYTE *)(v4 + 332) || *(_DWORD *)(v4 + 328) != 1)
        diag::DIAGReader::start(v3);
      v5 = (char *)*((_QWORD *)v1 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (char *)*((_QWORD *)v1 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v1;
          v1 = v6;
        }
        while (!v7);
      }
      v1 = v6;
    }
    while (v6 != v2);
  }
}

void diag::DIAGReaderManager::snapshot(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;

  v5 = *(_QWORD *)(a1 + 24);
  v3 = a1 + 24;
  v4 = v5;
  if (v5)
  {
    v6 = v3;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != v3 && *(_DWORD *)(v6 + 32) <= a2)
      diag::DIAGReader::snapshot(*(_QWORD *)(v6 + 40), a3);
  }
}

uint64_t diag::DIAGReaderManager::wait(uint64_t this, unsigned int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;

  v2 = *(_QWORD **)(this + 16);
  v3 = (_QWORD *)(this + 24);
  if (v2 != (_QWORD *)(this + 24))
  {
    if (a2 <= 1)
    {
      do
      {
        v11 = (_QWORD *)v2[1];
        if (v11)
        {
          do
          {
            v12 = v11;
            v11 = (_QWORD *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v12 = (_QWORD *)v2[2];
            v10 = *v12 == (_QWORD)v2;
            v2 = v12;
          }
          while (!v10);
        }
        v2 = v12;
      }
      while (v12 != v3);
    }
    else
    {
      do
      {
        v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2[5] + 16) + 24) + 336);
        v6 = 2;
        do
        {
          this = usleep(0x7A120u);
          v7 = v5 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2[5] + 16) + 24) + 336) || v6++ >= a2;
          v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2[5] + 16) + 24) + 336);
        }
        while (!v7);
        v8 = (_QWORD *)v2[1];
        if (v8)
        {
          do
          {
            v9 = v8;
            v8 = (_QWORD *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v9 = (_QWORD *)v2[2];
            v10 = *v9 == (_QWORD)v2;
            v2 = v9;
          }
          while (!v10);
        }
        v2 = v9;
      }
      while (v9 != v3);
    }
  }
  return this;
}

void diag::DIAGReaderManager::pushInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _BYTE v16[8];
  _QWORD *v17;
  std::string v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v3 = *(_QWORD **)(a1 + 16);
  v4 = (_QWORD *)(a1 + 24);
  if (v3 != (_QWORD *)(a1 + 24))
  {
    do
    {
      v6 = *(_QWORD *)(v3[5] + 16);
      v8 = *(_QWORD *)(v6 + 72);
      v7 = *(std::__shared_weak_count **)(v6 + 80);
      v19 = v8;
      v20 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (!v8)
        goto LABEL_12;
      if (*(char *)(a3 + 23) < 0)
        std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      else
        v18 = *(std::string *)a3;
      Timestamp::Timestamp((Timestamp *)v16);
      abm::trace::TraceInfo::push();
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v16, v17);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v18.__r_.__value_.__l.__data_);
        if (v7)
        {
LABEL_13:
          v11 = (unint64_t *)&v7->__shared_owners_;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
      }
      else
      {
LABEL_12:
        if (v7)
          goto LABEL_13;
      }
      v13 = (_QWORD *)v3[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v3[2];
          v15 = *v14 == (_QWORD)v3;
          v3 = v14;
        }
        while (!v15);
      }
      v3 = v14;
    }
    while (v14 != v4);
  }
}

void sub_1A351338C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void sub_1A35133A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,_QWORD *a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a22, a23);
  if (a30 < 0)
    operator delete(a25);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v30 - 64);
  _Unwind_Resume(a1);
}

void diag::DIAGReaderManager::pushInfo(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  xpc_object_t object;

  v3 = *(_QWORD **)(a1 + 16);
  v4 = (_QWORD *)(a1 + 24);
  if (v3 != (_QWORD *)(a1 + 24))
  {
    do
    {
      v6 = *(_QWORD *)(v3[5] + 16);
      v8 = *(_QWORD *)(v6 + 72);
      v7 = *(std::__shared_weak_count **)(v6 + 80);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (v8)
      {
        object = *a3;
        if (*a3)
          xpc_retain(*a3);
        else
          object = xpc_null_create();
        abm::trace::TraceInfo::push();
        xpc_release(object);
      }
      if (!v7)
        goto LABEL_16;
      v11 = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        v13 = (_QWORD *)v3[1];
        if (!v13)
        {
          do
          {
LABEL_20:
            v14 = (_QWORD *)v3[2];
            v15 = *v14 == (_QWORD)v3;
            v3 = v14;
          }
          while (!v15);
          goto LABEL_3;
        }
      }
      else
      {
LABEL_16:
        v13 = (_QWORD *)v3[1];
        if (!v13)
          goto LABEL_20;
      }
      do
      {
        v14 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
LABEL_3:
      v3 = v14;
    }
    while (v14 != v4);
  }
}

void sub_1A3513528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
  xpc_release(object);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void diag::DIAGReaderManager::pushInfo(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  std::string *v5;
  int *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD **v17;
  _QWORD *v18[2];
  std::string v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = (_QWORD *)(a1 + 24);
  if (v2 != (_QWORD *)(a1 + 24))
  {
    v5 = (std::string *)(a2 + 32);
    v6 = (int *)(a2 + 16);
    do
    {
      v7 = *(_QWORD *)(v2[5] + 16);
      v9 = *(_QWORD *)(v7 + 72);
      v8 = *(std::__shared_weak_count **)(v7 + 80);
      v20 = v9;
      v21 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      if (!v9)
        goto LABEL_12;
      if (*(char *)(a2 + 55) < 0)
        std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
      else
        v19 = *v5;
      v18[0] = 0;
      v18[1] = 0;
      v17 = v18;
      std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>((uint64_t *)&v17, *(int **)(a2 + 8), v6);
      abm::trace::TraceInfo::push();
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v17, v18[0]);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v19.__r_.__value_.__l.__data_);
        if (v8)
        {
LABEL_13:
          v12 = (unint64_t *)&v8->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
LABEL_12:
        if (v8)
          goto LABEL_13;
      }
      v14 = (_QWORD *)v2[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v2[2];
          v16 = *v15 == (_QWORD)v2;
          v2 = v15;
        }
        while (!v16);
      }
      v2 = v15;
    }
    while (v15 != v3);
  }
}

void sub_1A3513720(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1 - 96);
  _Unwind_Resume(a1);
}

void sub_1A3513734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,_QWORD *a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a22, a23);
      if ((a30 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a22, a23);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_4:
    std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v30 - 96);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a25);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v30 - 96);
  _Unwind_Resume(a1);
}

TraceFileCollection *diag::DIAGReaderManager::setHistory(uint64_t a1, unsigned int a2)
{
  TraceFileCollection *result;
  uint64_t v3;
  uint64_t v4;
  TraceFileCollection *v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;

  v4 = *(_QWORD *)(a1 + 24);
  result = (TraceFileCollection *)(a1 + 24);
  v3 = v4;
  if (v4)
  {
    v5 = result;
    do
    {
      v6 = *(_DWORD *)(v3 + 32);
      v7 = v6 >= a2;
      if (v6 >= a2)
        v8 = (uint64_t *)v3;
      else
        v8 = (uint64_t *)(v3 + 8);
      if (v7)
        v5 = (TraceFileCollection *)v3;
      v3 = *v8;
    }
    while (*v8);
    if (v5 != result && *((_DWORD *)v5 + 8) <= a2)
    {
      result = *(TraceFileCollection **)(*((_QWORD *)v5 + 5) + 32);
      if (result)
        return (TraceFileCollection *)TraceFileCollection::setHistory(result);
    }
  }
  return result;
}

TraceFileCollection *diag::DIAGReaderManager::setMaxMemoryFile(uint64_t a1, unsigned int a2)
{
  TraceFileCollection *result;
  uint64_t v3;
  uint64_t v4;
  TraceFileCollection *v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;

  v4 = *(_QWORD *)(a1 + 24);
  result = (TraceFileCollection *)(a1 + 24);
  v3 = v4;
  if (v4)
  {
    v5 = result;
    do
    {
      v6 = *(_DWORD *)(v3 + 32);
      v7 = v6 >= a2;
      if (v6 >= a2)
        v8 = (uint64_t *)v3;
      else
        v8 = (uint64_t *)(v3 + 8);
      if (v7)
        v5 = (TraceFileCollection *)v3;
      v3 = *v8;
    }
    while (*v8);
    if (v5 != result && *((_DWORD *)v5 + 8) <= a2)
    {
      result = *(TraceFileCollection **)(*((_QWORD *)v5 + 5) + 32);
      if (result)
        return (TraceFileCollection *)TraceFileCollection::setMaxMemoryFileCount(result);
    }
  }
  return result;
}

void diag::DIAGReaderManager::setStallHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *v11;
  NSObject *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  void *aBlock;
  NSObject *object;

  v3 = *(_QWORD **)(a1 + 16);
  v4 = (_QWORD *)(a1 + 24);
  if (v3 != (_QWORD *)(a1 + 24))
  {
    do
    {
      if (*((_DWORD *)v3 + 8) == 1)
        goto LABEL_21;
      v6 = *(_QWORD *)(v3[5] + 16);
      v8 = *(_QWORD *)(v6 + 72);
      v7 = *(std::__shared_weak_count **)(v6 + 80);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (v8)
      {
        v11 = *(void **)a3;
        if (*(_QWORD *)a3)
          v11 = _Block_copy(v11);
        v12 = *(NSObject **)(a3 + 8);
        aBlock = v11;
        object = v12;
        if (v12)
          dispatch_retain(v12);
        abm::trace::TraceInfo::setHandler();
        if (object)
          dispatch_release(object);
        if (aBlock)
          _Block_release(aBlock);
      }
      if (!v7)
        goto LABEL_21;
      v13 = (unint64_t *)&v7->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (v14)
      {
LABEL_21:
        v15 = (_QWORD *)v3[1];
        if (!v15)
          goto LABEL_25;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        v15 = (_QWORD *)v3[1];
        if (!v15)
        {
          do
          {
LABEL_25:
            v16 = (_QWORD *)v3[2];
            v17 = *v16 == (_QWORD)v3;
            v3 = v16;
          }
          while (!v17);
          goto LABEL_3;
        }
      }
      do
      {
        v16 = v15;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
LABEL_3:
      v3 = v16;
    }
    while (v16 != v4);
  }
}

void sub_1A35139C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>::~callback((uint64_t)&a9);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

TraceFileCollection *diag::DIAGReaderManager::setFileSize(uint64_t a1, unsigned int a2)
{
  TraceFileCollection *result;
  uint64_t v3;
  uint64_t v4;
  TraceFileCollection *v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;

  v4 = *(_QWORD *)(a1 + 24);
  result = (TraceFileCollection *)(a1 + 24);
  v3 = v4;
  if (v4)
  {
    v5 = result;
    do
    {
      v6 = *(_DWORD *)(v3 + 32);
      v7 = v6 >= a2;
      if (v6 >= a2)
        v8 = (uint64_t *)v3;
      else
        v8 = (uint64_t *)(v3 + 8);
      if (v7)
        v5 = (TraceFileCollection *)v3;
      v3 = *v8;
    }
    while (*v8);
    if (v5 != result && *((_DWORD *)v5 + 8) <= a2)
    {
      result = *(TraceFileCollection **)(*((_QWORD *)v5 + 5) + 32);
      if (result)
        return (TraceFileCollection *)TraceFileCollection::setFileSize(result);
    }
  }
  return result;
}

void diag::DIAGReaderManager::shutdown(diag::DIAGReaderManager *this)
{
  char *v1;
  char *v2;
  char *v3;
  char *v4;
  BOOL v5;

  v1 = (char *)*((_QWORD *)this + 2);
  v2 = (char *)this + 24;
  if (v1 != (char *)this + 24)
  {
    do
    {
      diag::DIAGReader::shutdown(*((diag::DIAGReader **)v1 + 5));
      v3 = (char *)*((_QWORD *)v1 + 1);
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = *(char **)v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (char *)*((_QWORD *)v1 + 2);
          v5 = *(_QWORD *)v4 == (_QWORD)v1;
          v1 = v4;
        }
        while (!v5);
      }
      v1 = v4;
    }
    while (v4 != v2);
  }
}

TraceFileCollection *diag::DIAGReaderManager::archive(TraceFileCollection *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;

  v1 = (_QWORD *)*((_QWORD *)this + 2);
  v2 = (_QWORD *)((char *)this + 24);
  if (v1 != (_QWORD *)((char *)this + 24))
  {
    do
    {
      this = *(TraceFileCollection **)(v1[5] + 32);
      if (this)
        this = (TraceFileCollection *)TraceFileCollection::archive(this);
      v3 = (_QWORD *)v1[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v1[2];
          v5 = *v4 == (_QWORD)v1;
          v1 = v4;
        }
        while (!v5);
      }
      v1 = v4;
    }
    while (v4 != v2);
  }
  return this;
}

uint64_t diag::DIAGReaderManager::getCurrentIndex(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  TraceFileCollection *v9;

  v4 = *(_QWORD *)(a1 + 24);
  v2 = a1 + 24;
  v3 = v4;
  if (!v4)
    return 0;
  v5 = v2;
  do
  {
    v6 = *(_DWORD *)(v3 + 32);
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v3;
    else
      v8 = (uint64_t *)(v3 + 8);
    if (v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 != v2 && *(_DWORD *)(v5 + 32) <= a2 && (v9 = *(TraceFileCollection **)(*(_QWORD *)(v5 + 40) + 32)) != 0)
    return TraceFileCollection::getNewestFileNumber(v9);
  else
    return 0;
}

void std::__shared_ptr_emplace<diag::DIAGReader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A0C988;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<diag::DIAGReader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A0C988;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<diag::DIAGReader>::__on_zero_shared(uint64_t a1)
{
  diag::DIAGReader::~DIAGReader((diag::DIAGReader *)(a1 + 24));
}

void std::__shared_ptr_emplace<diag::DIAGReader::Parameters::create(BasebandTransport::Protocol,std::shared_ptr<BasebandTransport>,std::shared_ptr<ETLDIAGGUIDParameter>,std::shared_ptr<ctu::LogServer>,int,char const*,unsigned int,unsigned int)::make_shared_enabler,std::allocator<diag::DIAGReader::Parameters::create(BasebandTransport::Protocol,std::shared_ptr<BasebandTransport>,std::shared_ptr<ETLDIAGGUIDParameter>,std::shared_ptr<ctu::LogServer>,int,char const*,unsigned int,unsigned int)::make_shared_enabler>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A0C9D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<diag::DIAGReader::Parameters::create(BasebandTransport::Protocol,std::shared_ptr<BasebandTransport>,std::shared_ptr<ETLDIAGGUIDParameter>,std::shared_ptr<ctu::LogServer>,int,char const*,unsigned int,unsigned int)::make_shared_enabler,std::allocator<diag::DIAGReader::Parameters::create(BasebandTransport::Protocol,std::shared_ptr<BasebandTransport>,std::shared_ptr<ETLDIAGGUIDParameter>,std::shared_ptr<ctu::LogServer>,int,char const*,unsigned int,unsigned int)::make_shared_enabler>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A0C9D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<diag::DIAGReader::Parameters::create(BasebandTransport::Protocol,std::shared_ptr<BasebandTransport>,std::shared_ptr<ETLDIAGGUIDParameter>,std::shared_ptr<ctu::LogServer>,int,char const*,unsigned int,unsigned int)::make_shared_enabler,std::allocator<diag::DIAGReader::Parameters::create(BasebandTransport::Protocol,std::shared_ptr<BasebandTransport>,std::shared_ptr<ETLDIAGGUIDParameter>,std::shared_ptr<ctu::LogServer>,int,char const*,unsigned int,unsigned int)::make_shared_enabler>>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;

  if (*(char *)(a1 + 215) < 0)
  {
    operator delete(*(void **)(a1 + 192));
    if ((*(char *)(a1 + 191) & 0x80000000) == 0)
    {
LABEL_3:
      v2 = *(void **)(a1 + 144);
      if (!v2)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((*(char *)(a1 + 191) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 168));
  v2 = *(void **)(a1 + 144);
  if (v2)
  {
LABEL_4:
    *(_QWORD *)(a1 + 152) = v2;
    operator delete(v2);
  }
LABEL_5:
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    v3 = *(std::__shared_weak_count **)(a1 + 104);
    if (!v3)
      goto LABEL_15;
  }
  else
  {
    v3 = *(std::__shared_weak_count **)(a1 + 104);
    if (!v3)
      goto LABEL_15;
  }
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
LABEL_15:
    v6 = *(std::__shared_weak_count **)(a1 + 88);
    if (!v6)
      goto LABEL_21;
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  v6 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v6)
    goto LABEL_21;
LABEL_16:
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_21:
  v9 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v9)
    goto LABEL_25;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = *(std::__shared_weak_count **)(a1 + 56);
    if (!v12)
      goto LABEL_31;
  }
  else
  {
LABEL_25:
    v12 = *(std::__shared_weak_count **)(a1 + 56);
    if (!v12)
      goto LABEL_31;
  }
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_31:
  v15 = *(std::__shared_weak_count **)(a1 + 32);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEclIJS7_EEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::string __p;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
  else
    __p = *(std::string *)(a1 + 40);
  (*(void (**)(uint64_t, std::string *))(v1 + 16))(v1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1A3513DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  std::string *v5;
  __int128 v6;

  v4 = *(void **)(a2 + 32);
  if (v4)
    v4 = _Block_copy(v4);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1A3513E70(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 32);
  if (v3)
    _Block_release(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  const void *v2;

  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    v2 = *(const void **)(a1 + 32);
    if (!v2)
      return;
    goto LABEL_5;
  }
  v2 = *(const void **)(a1 + 32);
  if (v2)
LABEL_5:
    _Block_release(v2);
}

void std::__shared_ptr_emplace<diag::DIAGReaderManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A0CA58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<diag::DIAGReaderManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A0CA58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<diag::DIAGReaderManager>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;

  std::__tree<std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>,std::__map_value_compare<abm::helper::TaskID,std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>,std::less<abm::helper::TaskID>,true>,std::allocator<std::__value_type<abm::helper::TaskID,std::shared_ptr<abm::HelperTask>>>>::destroy(*(_QWORD **)(a1 + 48));
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

uint64_t _GLOBAL__sub_I_DIAGReader_cpp()
{
  uint64_t result;

  result = ETLDIAGLoggingGetDefaultView();
  kETLDIAGLoggingDefaultView = result;
  return result;
}

const char *abm::helper::asString(int a1)
{
  const char *v1;
  const char *v2;

  v1 = "mobile";
  v2 = "";
  if (a1 == 25)
    v2 = "wireless";
  if (a1 != 501)
    v1 = v2;
  if (a1)
    return v1;
  else
    return "root";
}

{
  if ((a1 - 1) > 9)
    return "invalid";
  else
    return off_1E4A0CD90[a1 - 1];
}

{
  if ((a1 - 1) > 4)
    return "Unknown";
  else
    return off_1E4A0CE38[a1 - 1];
}

const char *abm::helper::asString(unsigned int a1)
{
  if (a1 > 2)
    return "invalid";
  else
    return off_1E4A0CDE0[a1];
}

{
  if (a1 > 7)
    return "Invalid";
  else
    return off_1E4A0CDF8[a1];
}

uint64_t abm::helper::asEnum(abm::helper *this, const char *a2)
{
  const char **v3;
  unsigned int v4;
  const char *v5;
  size_t v6;
  size_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  void *v17;
  const char *v18;
  int v19;
  void *v20;
  const char *v21;
  int v22;
  _QWORD v24[2];
  int64_t v25;
  _QWORD __dst[2];
  int64_t v27;

  v3 = (const char **)off_1E4A0CE30;
  v4 = -1;
  while (1)
  {
    v5 = "Unknown";
    if (v4 <= 4)
      v5 = *v3;
    v6 = strlen(v5);
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v9 = v6 | 7;
      v10 = v9 + 1;
      v8 = operator new(v9 + 1);
      __dst[1] = v7;
      v27 = v10 | 0x8000000000000000;
      __dst[0] = v8;
LABEL_11:
      memcpy(v8, v5, v7);
      goto LABEL_12;
    }
    HIBYTE(v27) = v6;
    v8 = __dst;
    if (v6)
      goto LABEL_11;
LABEL_12:
    *((_BYTE *)v8 + v7) = 0;
    v11 = strlen((const char *)this);
    if (v11 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v12 = v11;
    if (v11 >= 0x17)
    {
      v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v14 = v11 | 7;
      v15 = v14 + 1;
      v13 = operator new(v14 + 1);
      v24[1] = v12;
      v25 = v15 | 0x8000000000000000;
      v24[0] = v13;
LABEL_19:
      memcpy(v13, this, v12);
      goto LABEL_20;
    }
    HIBYTE(v25) = v11;
    v13 = v24;
    if (v11)
      goto LABEL_19;
LABEL_20:
    *((_BYTE *)v13 + v12) = 0;
    v16 = SHIBYTE(v27);
    v17 = (void *)__dst[0];
    v18 = v27 >= 0 ? (const char *)__dst : (const char *)__dst[0];
    v19 = SHIBYTE(v25);
    v20 = (void *)v24[0];
    v21 = v25 >= 0 ? (const char *)v24 : (const char *)v24[0];
    v22 = strcasecmp(v18, v21);
    if (v19 < 0)
      break;
    if (v16 < 0)
      goto LABEL_31;
LABEL_28:
    if (!v22)
      return v4 + 1;
LABEL_32:
    ++v3;
    if (++v4 == 5)
      return 0;
  }
  operator delete(v20);
  if ((v16 & 0x80000000) == 0)
    goto LABEL_28;
LABEL_31:
  operator delete(v17);
  if (v22)
    goto LABEL_32;
  return v4 + 1;
}

void sub_1A3514210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

size_t abm::helper::asString@<X0>(size_t result@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *v2;
  char *v3;
  size_t v4;
  char *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = a2;
  if (!(_DWORD)result)
  {
    a2[23] = 3;
    *(_WORD *)a2 = 26223;
    a2[2] = 102;
    a2[3] = 0;
    return result;
  }
  if ((_DWORD)result == 2)
  {
    v3 = abm::trace::kLogTarExtension[0];
    result = strlen(abm::trace::kLogTarExtension[0]);
    if (result <= 0x7FFFFFFFFFFFFFF7)
    {
      v4 = result;
      if (result >= 0x17)
      {
        v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((result | 7) != 0x17)
          v7 = result | 7;
        v8 = v7 + 1;
        v9 = operator new(v7 + 1);
        v2[1] = v4;
        v2[2] = v8 | 0x8000000000000000;
        *v2 = v9;
        v2 = v9;
      }
      else
      {
        *((_BYTE *)v2 + 23) = result;
        if (!result)
          goto LABEL_16;
      }
      result = (size_t)memmove(v2, v3, v4);
LABEL_16:
      *((_BYTE *)v2 + v4) = 0;
      return result;
    }
LABEL_21:
    std::string::__throw_length_error[abi:ne180100]();
  }
  v5 = abm::trace::kLogTarGzExtension;
  result = strlen(abm::trace::kLogTarGzExtension);
  if (result > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_21;
  v6 = result;
  if (result >= 0x17)
  {
    v10 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v10 = result | 7;
    v11 = v10 + 1;
    v12 = operator new(v10 + 1);
    v2[1] = v6;
    v2[2] = v11 | 0x8000000000000000;
    *v2 = v12;
    v2 = v12;
  }
  else
  {
    *((_BYTE *)v2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)v2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(v2, v5, v6);
  *((_BYTE *)v2 + v6) = 0;
  return result;
}

double EURCoreDumpTrace::createInternal@<D0>(_QWORD *a1@<X8>)
{
  EURCoreDumpTrace *v3;
  double result;
  __int128 v5;

  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  v3 = (EURCoreDumpTrace *)operator new(0xD8uLL);
  EURCoreDumpTrace::EURCoreDumpTrace(v3);
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<EURCoreDumpTrace>::shared_ptr[abi:ne180100]<EURCoreDumpTrace,std::shared_ptr<EURCoreDumpTrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<EURCoreDumpTrace>(EURCoreDumpTrace*)::{lambda(EURCoreDumpTrace*)#1},void>(&v5, (uint64_t)v3);
  ctu::Loggable<Trace,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v5);
  result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  return result;
}

void sub_1A3514428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1A351443C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void EURCoreDumpTrace::EURCoreDumpTrace(EURCoreDumpTrace *this)
{
  CommandDriverFactory *v2;
  uint64_t v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  capabilities::coredump *v14;
  unint64_t *v15;
  unint64_t v16;
  capabilities::trace *v17;
  void *__p[2];
  char v19;
  __int128 v20;

  v19 = 14;
  strcpy((char *)__p, "trace.coredump");
  Trace::Trace((uint64_t)this, (uint64_t)__p);
  if (v19 < 0)
    operator delete(__p[0]);
  *(_QWORD *)this = off_1E4A0CE70;
  *((_QWORD *)this + 19) = 0;
  *((_BYTE *)this + 161) = 0;
  v2 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v3 = off_1ED114670;
  if (!off_1ED114670)
  {
    CommandDriverFactory::create_default_global(v2);
    v4 = v20;
    v20 = 0uLL;
    v5 = (std::__shared_weak_count *)*(&off_1ED114670 + 1);
    off_1ED114670 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (*((_QWORD *)&v20 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v3 = off_1ED114670;
  }
  v11 = (std::__shared_weak_count *)*(&off_1ED114670 + 1);
  if (*(&off_1ED114670 + 1))
  {
    v12 = (unint64_t *)(*(&off_1ED114670 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v14 = (capabilities::coredump *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 112))(v3);
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v17 = (capabilities::trace *)capabilities::coredump::coredumpAttemptCount(v14);
  *((_DWORD *)this + 46) = (_DWORD)v17;
  *((_QWORD *)this + 24) = (char *)this + 192;
  *((_QWORD *)this + 25) = (char *)this + 192;
  *((_QWORD *)this + 26) = 0;
  *((_BYTE *)this + 160) = capabilities::trace::allowed(v17);
}

void sub_1A3514608(_Unwind_Exception *a1)
{
  Trace *v1;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  Trace::~Trace(v1);
  _Unwind_Resume(a1);
}

void sub_1A3514668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1A3514660);
}

uint64_t *std::list<boost::signals2::connection>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 3;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void EURCoreDumpTrace::~EURCoreDumpTrace(EURCoreDumpTrace *this)
{
  char *v2;
  char *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int i;
  unsigned int v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  char *v11;
  char *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  char *v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  char *v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  __int128 v57;
  _OWORD v58[10];
  unint64_t v59;
  void *__p;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E4A0CE70;
  v2 = (char *)this + 192;
  v3 = (char *)*((_QWORD *)this + 25);
  if (v3 != (char *)this + 192)
  {
    do
    {
      v4 = (unsigned int *)*((_QWORD *)v3 + 3);
      if (v4)
      {
        v5 = v4 + 2;
        for (i = v4[2]; i; i = v7)
        {
          v7 = __ldxr(v5);
          if (v7 == i)
          {
            if (!__stxr(i + 1, v5))
            {
              v8 = *((_QWORD *)v3 + 2);
              if (v8)
              {
                *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
                *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
                v58[8] = v9;
                v58[9] = v9;
                v58[6] = v9;
                v58[7] = v9;
                v58[4] = v9;
                v58[5] = v9;
                v58[2] = v9;
                v58[3] = v9;
                v58[0] = v9;
                v58[1] = v9;
                v59 = 10;
                __p = v58;
                v61 = 0;
                v62 = v8;
                (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
                if (*(_BYTE *)(v8 + 24))
                {
                  *(_BYTE *)(v8 + 24) = 0;
                  v10 = *(_DWORD *)(v8 + 28) - 1;
                  *(_DWORD *)(v8 + 28) = v10;
                  if (!v10)
                  {
                    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v8 + 40))(&v57, v8);
                    v25 = v61;
                    if (v61 == v59 && v61 != -1)
                    {
                      if (4 * v61 <= (unint64_t)(v61 + 1))
                        v26 = v61 + 1;
                      else
                        v26 = 4 * v61;
                      boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl((uint64_t)v58, v26);
                      v25 = v61;
                    }
                    v27 = *((_QWORD *)&v57 + 1);
                    *((_OWORD *)__p + v25) = v57;
                    if (v27)
                    {
                      v28 = (unsigned int *)(v27 + 8);
                      do
                        v29 = __ldxr(v28);
                      while (__stxr(v29 + 1, v28));
                      v25 = v61;
                    }
                    v61 = v25 + 1;
                    v30 = (unsigned int *)*((_QWORD *)&v57 + 1);
                    if (*((_QWORD *)&v57 + 1))
                    {
                      v31 = (unsigned int *)(*((_QWORD *)&v57 + 1) + 8);
                      do
                      {
                        v32 = __ldaxr(v31);
                        v33 = v32 - 1;
                      }
                      while (__stlxr(v33, v31));
                      if (!v33)
                      {
                        (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 16))(v30);
                        v34 = v30 + 3;
                        do
                        {
                          v35 = __ldaxr(v34);
                          v36 = v35 - 1;
                        }
                        while (__stlxr(v36, v34));
                        if (!v36)
                          (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 24))(v30);
                      }
                    }
                  }
                }
                (*(void (**)(uint64_t))(*(_QWORD *)v62 + 32))(v62);
                v11 = (char *)__p;
                if (__p)
                {
                  if (v61 - 1 >= 0)
                  {
                    v12 = (char *)__p + 16 * v61;
                    do
                    {
                      v13 = (unsigned int *)*((_QWORD *)v12 - 1);
                      if (v13)
                      {
                        v14 = v13 + 2;
                        do
                        {
                          v15 = __ldaxr(v14);
                          v16 = v15 - 1;
                        }
                        while (__stlxr(v16, v14));
                        if (!v16)
                        {
                          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
                          v17 = v13 + 3;
                          do
                          {
                            v18 = __ldaxr(v17);
                            v19 = v18 - 1;
                          }
                          while (__stlxr(v19, v17));
                          if (!v19)
                            (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 24))(v13);
                        }
                      }
                      v12 -= 16;
                    }
                    while (v12 > v11);
                  }
                  if (v59 >= 0xB)
                    operator delete(__p);
                }
              }
              do
              {
                v20 = __ldaxr(v5);
                v21 = v20 - 1;
              }
              while (__stlxr(v21, v5));
              if (!v21)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
                v22 = v4 + 3;
                do
                {
                  v23 = __ldaxr(v22);
                  v24 = v23 - 1;
                }
                while (__stlxr(v24, v22));
                if (!v24)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
              }
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v3 = (char *)*((_QWORD *)v3 + 1);
    }
    while (v3 != v2);
  }
  if (*((_QWORD *)this + 26))
  {
    v37 = *((_QWORD *)this + 24);
    v38 = (char *)*((_QWORD *)this + 25);
    v39 = *(_QWORD *)v38;
    *(_QWORD *)(v39 + 8) = *(_QWORD *)(v37 + 8);
    **(_QWORD **)(v37 + 8) = v39;
    *((_QWORD *)this + 26) = 0;
    if (v38 != v2)
    {
      do
      {
        v47 = (char *)*((_QWORD *)v38 + 1);
        v48 = (unsigned int *)*((_QWORD *)v38 + 3);
        if (v48)
        {
          v49 = v48 + 3;
          do
          {
            v50 = __ldaxr(v49);
            v51 = v50 - 1;
          }
          while (__stlxr(v51, v49));
          if (!v51)
            (*(void (**)(unsigned int *))(*(_QWORD *)v48 + 24))(v48);
        }
        operator delete(v38);
        v38 = v47;
      }
      while (v47 != v2);
    }
  }
  v40 = *((_QWORD *)this + 19);
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  if (*((_QWORD *)this + 26))
  {
    v41 = *((_QWORD *)this + 24);
    v42 = (char *)*((_QWORD *)this + 25);
    v43 = *(_QWORD *)v42;
    *(_QWORD *)(v43 + 8) = *(_QWORD *)(v41 + 8);
    **(_QWORD **)(v41 + 8) = v43;
    *((_QWORD *)this + 26) = 0;
    if (v42 != v2)
    {
      do
      {
        v52 = (char *)*((_QWORD *)v42 + 1);
        v53 = (unsigned int *)*((_QWORD *)v42 + 3);
        if (v53)
        {
          v54 = v53 + 3;
          do
          {
            v55 = __ldaxr(v54);
            v56 = v55 - 1;
          }
          while (__stlxr(v56, v54));
          if (!v56)
            (*(void (**)(unsigned int *))(*(_QWORD *)v53 + 24))(v53);
        }
        operator delete(v42);
        v42 = v52;
      }
      while (v52 != v2);
    }
  }
  v44 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(p_shared_owners);
    while (__stlxr(v46 - 1, p_shared_owners));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  Trace::~Trace(this);
}

{
  void *v1;

  EURCoreDumpTrace::~EURCoreDumpTrace(this);
  operator delete(v1);
}

void sub_1A3514B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  if (a2)
  {
    boost::shared_ptr<void>::~shared_ptr((uint64_t)&a11);
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)&a13);
    boost::shared_ptr<boost::signals2::detail::connection_body_base>::~shared_ptr((uint64_t)&a9);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EURCoreDumpTrace::init(_QWORD *a1, uint64_t a2, uint64_t *a3, NSObject **a4)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  NSObject *v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  __int128 *p_dst;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  size_t v19;
  size_t v20;
  void *p_p;
  uint64_t v22;
  uint64_t v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  void *v28;
  NSObject *v29;
  uint64_t v30;
  void *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  void (*v50)(char *, char *, uint64_t);
  void (*v51)(uint64_t, _WORD *, unsigned int);
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t **v62;
  __int128 v63;
  pthread_mutex_t *v64;
  unsigned int *v65;
  unsigned int v66;
  uint64_t *v67;
  uint64_t *v68;
  int v69;
  uint64_t **v70;
  uint64_t *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  _QWORD **v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  int v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  int v103;
  int v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  int v108;
  int v109;
  int v110;
  _QWORD *v111;
  __int128 v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  unsigned int *v119;
  unsigned int v120;
  uint64_t **v121;
  unsigned int *v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int v128;
  int v129;
  unsigned int v130;
  uint64_t v131;
  BOOL v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t i;
  uint64_t v136;
  uint64_t v138;
  char *v139;
  uint64_t **v140;
  int v141;
  int v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  BOOL v147;
  BOOL v148;
  uint64_t *v149;
  uint64_t *v150;
  int v151;
  BOOL v152;
  uint64_t **v153;
  uint64_t **v154;
  int v155;
  uint64_t ***v156;
  BOOL v157;
  BOOL v158;
  uint64_t ***v159;
  int v160;
  uint64_t *v161;
  uint64_t *v162;
  int v163;
  uint64_t **v164;
  int v165;
  int v166;
  uint64_t *v167;
  uint64_t *v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  unsigned int *v175;
  unsigned int *v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int *v179;
  unsigned int v180;
  unsigned int v181;
  _QWORD *v182;
  _QWORD *v183;
  uint64_t v184;
  int *v185;
  int v186;
  uint64_t v187;
  unsigned int *v188;
  unsigned int v189;
  unsigned int v190;
  _QWORD *v191;
  uint64_t *v192;
  unsigned int *v193;
  unsigned int v194;
  unsigned int *v195;
  unsigned int *v196;
  uint64_t *v197;
  _QWORD *v198;
  _QWORD *v199;
  uint64_t *v200;
  unsigned int v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t *v204;
  uint64_t v205;
  int v206;
  BOOL v207;
  BOOL v208;
  uint64_t *v209;
  int v210;
  uint64_t *v211;
  _QWORD *v212;
  uint64_t v213;
  unsigned int *v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int *v219;
  unsigned int *v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int *v223;
  unsigned int v224;
  unsigned int v225;
  char *v226;
  char *v227;
  unsigned int *v228;
  unsigned int *v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int *v232;
  unsigned int v233;
  unsigned int v234;
  void (*v235)(__int128 *, __int128 *, uint64_t);
  uint64_t v236;
  uint64_t v237;
  void *v238;
  uint64_t v239;
  int v240;
  int v241;
  unsigned int *v242;
  unsigned int *v243;
  unsigned int v244;
  unsigned int v245;
  uint64_t v246;
  unsigned int *v247;
  unsigned int v248;
  unsigned int v249;
  unint64_t *p_shared_owners;
  unint64_t v251;
  const void *v252;
  _OWORD *v253;
  uint64_t v254;
  uint64_t v255;
  void *v256;
  std::__shared_weak_count *v257;
  uint64_t v258;
  std::__shared_weak_count *v259;
  std::__shared_weak_count *v260;
  NSObject *v261;
  void *v262;
  void *v263;
  void *v264;
  void *v265;
  void *v266;
  void *v267;
  void *v268;
  void *v269;
  char v270;
  char v271;
  char v272;
  char v273;
  char v274;
  void (*v275)(char *, char *, uint64_t);
  void (*v276)(uint64_t, _WORD *, unsigned int);
  unint64_t *v277;
  unint64_t v278;
  _QWORD *v279;
  unint64_t v280;
  _QWORD *v281;
  _QWORD *v282;
  unint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  unint64_t v286;
  uint64_t **v287;
  __int128 v288;
  pthread_mutex_t *v289;
  unsigned int *v290;
  unsigned int v291;
  uint64_t *v292;
  uint64_t *v293;
  int v294;
  uint64_t **v295;
  uint64_t *v296;
  uint64_t v297;
  _QWORD *v298;
  _QWORD *v299;
  _QWORD *v300;
  uint64_t v301;
  _QWORD *v302;
  _QWORD *v303;
  uint64_t v304;
  unsigned int *v305;
  unsigned int v306;
  _QWORD **v307;
  _QWORD *v308;
  _QWORD *v309;
  _QWORD *v310;
  _QWORD *v311;
  _QWORD *v312;
  uint64_t v313;
  uint64_t v314;
  _QWORD *v315;
  _QWORD *v316;
  _QWORD *v317;
  _QWORD *v318;
  uint64_t v319;
  _QWORD *v320;
  _QWORD *v321;
  _QWORD *v322;
  int v323;
  _QWORD *v324;
  _QWORD *v325;
  _QWORD *v326;
  _QWORD *v327;
  int v328;
  int v329;
  _QWORD *v330;
  _QWORD *v331;
  _QWORD *v332;
  int v333;
  int v334;
  int v335;
  _QWORD *v336;
  __int128 v337;
  _QWORD *v338;
  _QWORD *v339;
  _QWORD *v340;
  uint64_t v341;
  uint64_t *v342;
  uint64_t v343;
  unsigned int *v344;
  unsigned int v345;
  uint64_t **v346;
  unsigned int *v347;
  unsigned int *v348;
  unsigned int v349;
  unsigned int v350;
  unsigned int *v351;
  unsigned int v352;
  unsigned int v353;
  int v354;
  unsigned int v355;
  uint64_t v356;
  BOOL v357;
  uint64_t v358;
  uint64_t *v359;
  uint64_t j;
  uint64_t v361;
  unsigned int v362;
  uint64_t v363;
  char *v364;
  uint64_t **v365;
  int v366;
  int v367;
  uint64_t *v368;
  uint64_t v369;
  uint64_t v370;
  int v371;
  BOOL v372;
  BOOL v373;
  uint64_t *v374;
  uint64_t *v375;
  uint64_t **v376;
  uint64_t **v377;
  int v378;
  uint64_t ***v379;
  BOOL v380;
  BOOL v381;
  uint64_t ***v382;
  int v383;
  BOOL v384;
  int v385;
  uint64_t *v386;
  uint64_t *v387;
  int v388;
  uint64_t **v389;
  int v390;
  int v391;
  uint64_t *v392;
  uint64_t *v393;
  uint64_t *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t *v398;
  uint64_t v399;
  unsigned int *v400;
  unsigned int *v401;
  unsigned int v402;
  unsigned int v403;
  unsigned int *v404;
  unsigned int v405;
  unsigned int v406;
  _QWORD *v407;
  _QWORD *v408;
  uint64_t v409;
  int *v410;
  int v411;
  uint64_t v412;
  unsigned int *v413;
  unsigned int v414;
  unsigned int v415;
  _QWORD *v416;
  uint64_t *v417;
  unsigned int *v418;
  unsigned int v419;
  unsigned int *v420;
  unsigned int *v421;
  uint64_t *v422;
  _QWORD *v423;
  _QWORD *v424;
  uint64_t *v425;
  unsigned int v426;
  uint64_t v427;
  uint64_t *v428;
  uint64_t *v429;
  uint64_t v430;
  int v431;
  BOOL v432;
  BOOL v433;
  uint64_t *v434;
  int v435;
  uint64_t *v436;
  _QWORD *v437;
  uint64_t v438;
  unsigned int *v439;
  unsigned int v440;
  unsigned int v441;
  unsigned int v442;
  unsigned int v443;
  unsigned int *v444;
  unsigned int *v445;
  unsigned int v446;
  unsigned int v447;
  unsigned int *v448;
  unsigned int v449;
  unsigned int v450;
  char *v451;
  char *v452;
  unsigned int *v453;
  unsigned int *v454;
  unsigned int v455;
  unsigned int v456;
  unsigned int *v457;
  unsigned int v458;
  unsigned int v459;
  void (*v460)(__int128 *, __int128 *, uint64_t);
  uint64_t v461;
  uint64_t v462;
  void *v463;
  uint64_t v464;
  int v465;
  int v466;
  unsigned int *v467;
  unsigned int *v468;
  unsigned int v469;
  unsigned int v470;
  uint64_t v471;
  unsigned int *v472;
  unsigned int v473;
  unsigned int v474;
  unint64_t *v475;
  unint64_t v476;
  const void *v477;
  _OWORD *v478;
  uint64_t v479;
  uint64_t v480;
  void *v481;
  std::__shared_weak_count *v482;
  uint64_t v483;
  std::__shared_weak_count *v484;
  std::__shared_weak_count *v485;
  NSObject *v486;
  void *v487;
  void *v488;
  void *v489;
  void *v490;
  void *v491;
  void *v492;
  void *v493;
  void *v494;
  char v495;
  char v496;
  char v497;
  char v498;
  char v499;
  void (*v500)(char *, char *, uint64_t);
  void (*v501)(uint64_t, _WORD *, unsigned int);
  unint64_t *v502;
  unint64_t v503;
  _QWORD *v504;
  unint64_t v505;
  _QWORD *v506;
  _QWORD *v507;
  unint64_t v508;
  uint64_t v509;
  _QWORD *v510;
  unint64_t v511;
  uint64_t **v512;
  __int128 v513;
  pthread_mutex_t *v514;
  unsigned int *v515;
  unsigned int v516;
  uint64_t *v517;
  uint64_t *v518;
  int v519;
  uint64_t **v520;
  uint64_t *v521;
  uint64_t v522;
  _QWORD *v523;
  _QWORD *v524;
  _QWORD *v525;
  uint64_t v526;
  _QWORD *v527;
  _QWORD *v528;
  uint64_t v529;
  unsigned int *v530;
  unsigned int v531;
  _QWORD **v532;
  _QWORD *v533;
  _QWORD *v534;
  _QWORD *v535;
  _QWORD *v536;
  _QWORD *v537;
  uint64_t v538;
  uint64_t v539;
  _QWORD *v540;
  _QWORD *v541;
  _QWORD *v542;
  _QWORD *v543;
  uint64_t v544;
  _QWORD *v545;
  _QWORD *v546;
  _QWORD *v547;
  int v548;
  _QWORD *v549;
  _QWORD *v550;
  _QWORD *v551;
  _QWORD *v552;
  int v553;
  int v554;
  _QWORD *v555;
  _QWORD *v556;
  _QWORD *v557;
  int v558;
  int v559;
  int v560;
  _QWORD *v561;
  __int128 v562;
  _QWORD *v563;
  _QWORD *v564;
  _QWORD *v565;
  uint64_t v566;
  uint64_t *v567;
  uint64_t v568;
  unsigned int *v569;
  unsigned int v570;
  uint64_t **v571;
  unsigned int *v572;
  unsigned int *v573;
  unsigned int v574;
  unsigned int v575;
  unsigned int *v576;
  unsigned int v577;
  unsigned int v578;
  int v579;
  unsigned int v580;
  uint64_t v581;
  BOOL v582;
  uint64_t v583;
  uint64_t *v584;
  uint64_t k;
  uint64_t v586;
  unsigned int v587;
  uint64_t v588;
  char *v589;
  uint64_t **v590;
  int v591;
  int v592;
  uint64_t *v593;
  uint64_t v594;
  uint64_t v595;
  int v596;
  BOOL v597;
  BOOL v598;
  uint64_t *v599;
  uint64_t *v600;
  uint64_t **v601;
  uint64_t **v602;
  int v603;
  uint64_t ***v604;
  BOOL v605;
  BOOL v606;
  uint64_t ***v607;
  int v608;
  BOOL v609;
  int v610;
  uint64_t *v611;
  uint64_t *v612;
  int v613;
  uint64_t **v614;
  int v615;
  int v616;
  uint64_t *v617;
  uint64_t *v618;
  uint64_t *v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t *v623;
  uint64_t v624;
  unsigned int *v625;
  unsigned int *v626;
  unsigned int v627;
  unsigned int v628;
  unsigned int *v629;
  unsigned int v630;
  unsigned int v631;
  _QWORD *v632;
  _QWORD *v633;
  uint64_t v634;
  int *v635;
  int v636;
  uint64_t v637;
  unsigned int *v638;
  unsigned int v639;
  unsigned int v640;
  _QWORD *v641;
  uint64_t *v642;
  unsigned int *v643;
  unsigned int v644;
  unsigned int *v645;
  unsigned int *v646;
  uint64_t *v647;
  _QWORD *v648;
  _QWORD *v649;
  uint64_t *v650;
  unsigned int v651;
  uint64_t v652;
  uint64_t *v653;
  uint64_t *v654;
  uint64_t v655;
  int v656;
  BOOL v657;
  BOOL v658;
  uint64_t *v659;
  int v660;
  uint64_t *v661;
  _QWORD *v662;
  uint64_t v663;
  unsigned int *v664;
  unsigned int v665;
  unsigned int v666;
  unsigned int v667;
  unsigned int v668;
  unsigned int *v669;
  unsigned int *v670;
  unsigned int v671;
  unsigned int v672;
  unsigned int *v673;
  unsigned int v674;
  unsigned int v675;
  char *v676;
  char *v677;
  unsigned int *v678;
  unsigned int *v679;
  unsigned int v680;
  unsigned int v681;
  unsigned int *v682;
  unsigned int v683;
  unsigned int v684;
  void (*v685)(__int128 *, __int128 *, uint64_t);
  uint64_t v686;
  uint64_t v687;
  void *v688;
  uint64_t v689;
  int v690;
  int v691;
  unsigned int *v692;
  unsigned int *v693;
  unsigned int v694;
  unsigned int v695;
  uint64_t v696;
  unsigned int *v697;
  unsigned int v698;
  unsigned int v699;
  unint64_t *v700;
  unint64_t v701;
  const void *v702;
  _OWORD *v703;
  uint64_t v704;
  unsigned int *v706;
  unsigned int v707;
  unsigned int v708;
  unsigned int *v709;
  unsigned int v710;
  unsigned int v711;
  unsigned int *v712;
  unsigned int v713;
  unsigned int v714;
  uint64_t *v715;
  void *v716;
  uint64_t *v717;
  void *v718;
  uint64_t **v719;
  void *v720;
  uint64_t **v721;
  void *v722;
  unsigned int v723;
  void *v724;
  void *v725;
  void *v726;
  uint64_t **v727;
  void *v728;
  std::__shared_weak_count *v729;
  std::__shared_weak_count *v730;
  std::__shared_weak_count *v731;
  void *aBlock;
  void *aBlocka;
  uint64_t v735;
  uint64_t ***v736;
  uint64_t v737;
  uint64_t ***v738;
  uint64_t v739;
  uint64_t ***v740;
  __int128 v741;
  __int128 v742;
  __int128 v743;
  _QWORD v744[5];
  dispatch_object_t object;
  uint64_t v746;
  std::__shared_weak_count *v747;
  std::string v748;
  void *__p;
  uint64_t v750;
  int64_t v751;
  void *v752;
  _QWORD *v753;
  void *v754;
  uint64_t v755;
  dispatch_object_t v756;
  void *v757;
  __int128 __dst;
  __int128 v759;
  __int128 v760;
  uint64_t v761;
  dispatch_object_t v762;
  void *v763;
  dispatch_object_t v764;
  void *v765;
  uint64_t (**v766)();
  unint64_t v767;
  void *v768;
  __int128 block;
  __int128 v770;
  __int128 v771;
  __int128 v772;
  __int128 v773;
  __int128 v774;
  __int128 v775;
  __int128 v776;
  __int128 v777;
  __int128 v778;
  unint64_t v779;
  void *p_block;
  uint64_t v781;
  pthread_mutex_t *v782;
  uint64_t v783;

  v783 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v748, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v6 = (uint64_t)a1;
    v7 = (std::__shared_weak_count *)a3[1];
    v746 = *a3;
    v747 = v7;
    if (!v7)
      goto LABEL_7;
  }
  else
  {
    v6 = (uint64_t)a1;
    v748 = *(std::string *)a2;
    v7 = (std::__shared_weak_count *)a3[1];
    v746 = *a3;
    v747 = v7;
    if (!v7)
      goto LABEL_7;
  }
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
LABEL_7:
  v10 = *a4;
  object = v10;
  if (v10)
    dispatch_retain(v10);
  v11 = Trace::init(v6, (void **)&v748.__r_.__value_.__l.__data_, &v746, &object);
  if (object)
    dispatch_release(object);
  if (v747)
    std::__shared_weak_count::__release_weak(v747);
  if ((SHIBYTE(v748.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!(_DWORD)v11)
      return v11;
LABEL_17:
    v723 = v11;
    v12 = abm::trace::kScratchFolder[0];
    v13 = strlen(abm::trace::kScratchFolder[0]);
    if (v13 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v16 = v13 | 7;
      v17 = v16 + 1;
      p_dst = (__int128 *)operator new(v16 + 1);
      *((_QWORD *)&__dst + 1) = v14;
      *(_QWORD *)&v759 = v17 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      BYTE7(v759) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_25:
        *((_BYTE *)p_dst + v14) = 0;
        v18 = EURCoreDumpTrace::kCoreDumpScratchFolder[0];
        v19 = strlen(EURCoreDumpTrace::kCoreDumpScratchFolder[0]);
        if (v19 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v20 = v19;
        if (v19 >= 0x17)
        {
          v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v22 = v19 | 7;
          v23 = v22 + 1;
          p_p = operator new(v22 + 1);
          v750 = v20;
          v751 = v23 | 0x8000000000000000;
          __p = p_p;
        }
        else
        {
          HIBYTE(v751) = v19;
          p_p = &__p;
          if (!v19)
          {
LABEL_33:
            *((_BYTE *)p_p + v20) = 0;
            if (v751 >= 0)
              v24 = (const std::string::value_type *)&__p;
            else
              v24 = (const std::string::value_type *)__p;
            if (v751 >= 0)
              v25 = HIBYTE(v751);
            else
              v25 = v750;
            v26 = std::string::append((std::string *)&__dst, v24, v25);
            v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
            *(_QWORD *)&v770 = *((_QWORD *)&v26->__r_.__value_.__l + 2);
            block = v27;
            v26->__r_.__value_.__l.__size_ = 0;
            v26->__r_.__value_.__r.__words[2] = 0;
            v26->__r_.__value_.__r.__words[0] = 0;
            support::fs::createDir((const char *)&block, 0x1EDu, 1);
            if (SBYTE7(v770) < 0)
            {
              operator delete((void *)block);
              if ((SHIBYTE(v751) & 0x80000000) == 0)
              {
LABEL_41:
                if ((SBYTE7(v759) & 0x80000000) == 0)
                  goto LABEL_42;
LABEL_46:
                operator delete((void *)__dst);
LABEL_42:
                v28 = (void *)MEMORY[0x1E0C809B0];
                v744[0] = MEMORY[0x1E0C809B0];
                v744[1] = 0x40000000;
                v744[2] = ___ZN16EURCoreDumpTrace4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_8weak_ptrIN3abm19BasebandTracingTaskEEEN8dispatch5groupE_block_invoke;
                v744[3] = &__block_descriptor_tmp_21;
                v744[4] = a1;
                *(_QWORD *)&__dst = v744;
                *(_QWORD *)&block = MEMORY[0x1E0C809B0];
                *((_QWORD *)&block + 1) = 0x40000000;
                *(_QWORD *)&v770 = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke_4;
                *((_QWORD *)&v770 + 1) = &__block_descriptor_tmp_50;
                *(_QWORD *)&v771 = a1 + 9;
                *((_QWORD *)&v771 + 1) = &__dst;
                v29 = a1[11];
                if (a1[12])
                  dispatch_async_and_wait(v29, &block);
                else
                  dispatch_sync(v29, &block);
                v30 = a1[21];
                __p = v28;
                v750 = 0x40000000;
                v751 = (int64_t)___ZN3ctu20SharedSynchronizableI5TraceE13connect_eventIN5boost8signals26signalIFvNSt3__14listIN8coredump13CommandDriver29EURCoreDumpTraceProtocolCrashENS7_9allocatorISB_EEEEENS5_19optional_last_valueIvEEiNS7_4lessIiEENS4_8functionISF_EENSK_IFvRKNS5_10connectionESE_EEENS5_5mutexEEE16EURCoreDumpTracevJSE_EEEDTcl7connectfp_cvNS7_10shared_ptrIS1_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSY_S10_E_block_invoke;
                v752 = &__block_descriptor_tmp_52_1;
                v753 = a1 + 9;
                v754 = EURCoreDumpTrace::postBootCrashReasonUpdate_sync;
                v755 = 0;
                v31 = _Block_copy(&__p);
                v735 = v30;
                v32 = (std::__shared_weak_count *)a1[10];
                if (!v32 || (v33 = a1[9], (v34 = std::__shared_weak_count::lock(v32)) == 0))
                  std::__throw_bad_weak_ptr[abi:ne180100]();
                v35 = v34;
                v36 = a1[11];
                v756 = v36;
                if (v31)
                  v37 = _Block_copy(v31);
                else
                  v37 = 0;
                v757 = v37;
                dispatch_retain(v36);
                __dst = 0u;
                v759 = 0u;
                v762 = v36;
                if (v37)
                  v37 = _Block_copy(v37);
                v763 = v37;
                dispatch_retain(v36);
                v764 = v36;
                v729 = v35;
                v724 = v31;
                if (v37)
                {
                  v38 = _Block_copy(v37);
                  v765 = v38;
                  dispatch_retain(v36);
                  if (v38)
                  {
                    v39 = _Block_copy(v38);
                    dispatch_retain(v36);
                    v766 = 0;
                    if (v39)
                    {
                      v40 = _Block_copy(v39);
                      dispatch_retain(v36);
                      v718 = v39;
                      if (v40)
                      {
                        v41 = _Block_copy(v40);
                        dispatch_retain(v36);
                        aBlock = v40;
                        if (v41)
                        {
                          v42 = _Block_copy(v41);
                          dispatch_retain(v36);
                          if (v42)
                          {
                            v43 = _Block_copy(v42);
                            dispatch_retain(v36);
                            v767 = (unint64_t)v36;
                            if (v43)
                            {
                              v44 = _Block_copy(v43);
                              v45 = 0;
                              v46 = 0;
                              v47 = 0;
                              v48 = 0;
                              v49 = 0;
                              goto LABEL_70;
                            }
                            v45 = 0;
                            v46 = 0;
                            v47 = 0;
                            v48 = 0;
                            v44 = 0;
LABEL_69:
                            v49 = 1;
LABEL_70:
                            v768 = v44;
                            dispatch_retain(v36);
                            dispatch_release(v36);
                            if ((v49 & 1) == 0)
                              _Block_release(v43);
                            dispatch_release(v36);
                            if ((v48 & 1) == 0)
                              _Block_release(v42);
                            dispatch_release(v36);
                            if ((v47 & 1) == 0)
                              _Block_release(v41);
                            v766 = boost::function1<void,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>)::stored_vtable;
                            dispatch_release(v36);
                            if ((v46 & 1) == 0)
                              _Block_release(aBlock);
                            dispatch_release(v36);
                            if ((v45 & 1) == 0)
                              _Block_release(v718);
                            *(_QWORD *)&v770 = 0xAAAAAAAAAAAAAAAALL;
                            *((_QWORD *)&v770 + 1) = 0xAAAAAAAAAAAAAAAALL;
                            *(_QWORD *)&block = 0;
                            *((_QWORD *)&block + 1) = 0xAAAAAAAAAAAAAAAALL;
                            boost::function1<void,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>::move_assign((uint64_t)&block, (uint64_t *)&v766);
                            boost::function1<void,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>::move_assign((uint64_t)&v766, (uint64_t *)&v759 + 1);
                            boost::function1<void,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>::move_assign((uint64_t)&v759 + 8, (uint64_t *)&block);
                            if ((_QWORD)block)
                            {
                              if ((block & 1) == 0)
                              {
                                v50 = *(void (**)(char *, char *, uint64_t))(block & 0xFFFFFFFFFFFFFFFELL);
                                if (v50)
                                  v50((char *)&block + 8, (char *)&block + 8, 2);
                              }
                            }
                            if (v766)
                            {
                              if ((v766 & 1) == 0)
                              {
                                v51 = *(void (**)(uint64_t, _WORD *, unsigned int))((unint64_t)v766 & 0xFFFFFFFFFFFFFFFELL);
                                if (v51)
                                  v51((uint64_t)&v767, &v767, 2u);
                              }
                              v766 = 0;
                            }
                            dispatch_release(v764);
                            if (v765)
                              _Block_release(v765);
                            dispatch_release(v762);
                            if (v763)
                              _Block_release(v763);
                            aBlocka = a1 + 24;
                            v52 = (unint64_t *)&v729->__shared_weak_owners_;
                            do
                              v53 = __ldxr(v52);
                            while (__stxr(v53 + 1, v52));
                            v54 = operator new(0x18uLL);
                            *v54 = &off_1E4A0D530;
                            v54[1] = v33;
                            v54[2] = v729;
                            do
                              v55 = __ldxr(v52);
                            while (__stxr(v55 + 1, v52));
                            v56 = operator new(0x18uLL);
                            v57 = v56;
                            *v56 = &off_1E4A0D530;
                            v56[1] = v33;
                            v56[2] = v729;
                            do
                              v58 = __ldxr(v52);
                            while (__stxr(v58 + 1, v52));
                            *((_QWORD *)&block + 1) = v56;
                            LODWORD(block) = 2;
                            v59 = *((_QWORD *)&__dst + 1);
                            if (*((_QWORD *)&__dst + 1) < (unint64_t)v759)
                            {
                              v60 = operator new(0x18uLL);
                              *v60 = &off_1E4A0D530;
                              v60[1] = v33;
                              v60[2] = v729;
                              do
                                v61 = __ldxr(v52);
                              while (__stxr(v61 + 1, v52));
                              *(_QWORD *)(v59 + 8) = v60;
                              *(_DWORD *)v59 = 2;
                              *((_QWORD *)&__dst + 1) = v59 + 24;
                              goto LABEL_103;
                            }
                            v185 = std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((int **)&__dst, (uint64_t)&block);
                            v186 = block ^ ((int)block >> 31);
                            *((_QWORD *)&__dst + 1) = v185;
                            if (v186 == 2)
                            {
                              v57 = (_QWORD *)*((_QWORD *)&block + 1);
                              if (*((_QWORD *)&block + 1))
LABEL_103:
                                (*(void (**)(_QWORD *))(*v57 + 8))(v57);
                            }
                            else
                            {
                              if (v186 == 1)
                              {
                                v187 = v770;
                                if (!(_QWORD)v770)
                                  goto LABEL_104;
                                v188 = (unsigned int *)(v770 + 12);
                                do
                                {
                                  v189 = __ldaxr(v188);
                                  v190 = v189 - 1;
                                }
                                while (__stlxr(v190, v188));
                                if (v190)
                                  goto LABEL_104;
                              }
                              else
                              {
                                v187 = v770;
                                if (!(_QWORD)v770)
                                  goto LABEL_104;
                                v706 = (unsigned int *)(v770 + 12);
                                do
                                {
                                  v707 = __ldaxr(v706);
                                  v708 = v707 - 1;
                                }
                                while (__stlxr(v708, v706));
                                if (v708)
                                  goto LABEL_104;
                              }
                              (*(void (**)(uint64_t))(*(_QWORD *)v187 + 24))(v187);
                            }
LABEL_104:
                            (*(void (**)(_QWORD *))(*v54 + 8))(v54);
                            std::__shared_weak_count::__release_weak(v729);
                            v62 = *(uint64_t ***)(v735 + 136);
                            *(_QWORD *)&v63 = 0xAAAAAAAAAAAAAAAALL;
                            *((_QWORD *)&v63 + 1) = 0xAAAAAAAAAAAAAAAALL;
                            v777 = v63;
                            v778 = v63;
                            v775 = v63;
                            v776 = v63;
                            v773 = v63;
                            v774 = v63;
                            v771 = v63;
                            v772 = v63;
                            block = v63;
                            v770 = v63;
                            v64 = (pthread_mutex_t *)v62[3];
                            v779 = 10;
                            p_block = &block;
                            v781 = 0;
                            v782 = v64;
                            pthread_mutex_lock(v64);
                            v766 = (uint64_t (**)())0xAAAAAAAAAAAAAAAALL;
                            v767 = 0xAAAAAAAAAAAAAAAALL;
                            v65 = (unsigned int *)v62[1];
                            v736 = (uint64_t ***)v62;
                            if (v65)
                            {
                              v66 = atomic_load(v65 + 2);
                              if (v66 == 1)
                              {
                                v67 = (uint64_t *)**v62;
                                v68 = v62[2];
                                v69 = 2;
                                if (v68 != v67)
                                {
LABEL_201:
                                  v129 = 0;
                                  v130 = v69 - 1;
                                  while (1)
                                  {
                                    v133 = v68[2];
                                    v134 = *(uint64_t **)(v133 + 32);
                                    if (!v134)
                                      goto LABEL_202;
                                    for (i = *v134; ; i += 24)
                                    {
                                      if (i == v134[1])
                                        goto LABEL_202;
                                      if ((*(_DWORD *)i ^ (*(int *)i >> 31)) <= 1)
                                        break;
                                      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(i + 8) + 24))(*(_QWORD *)(i + 8)) & 1) != 0)
                                        goto LABEL_218;
LABEL_211:
                                      ;
                                    }
                                    v136 = *(_QWORD *)(i + 16);
                                    if (v136)
                                    {
                                      if (atomic_load((unsigned int *)(v136 + 8)))
                                        goto LABEL_211;
                                    }
LABEL_218:
                                    if (*(_BYTE *)(v133 + 24))
                                    {
                                      *(_BYTE *)(v133 + 24) = 0;
                                      boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v133, &block);
                                    }
LABEL_202:
                                    v131 = v68[2];
                                    if (*(_BYTE *)(v131 + 24))
                                    {
                                      v67 = (uint64_t *)v68[1];
                                      goto LABEL_204;
                                    }
                                    v138 = **v62;
                                    v140 = (uint64_t **)(v138 + 32);
                                    v139 = *(char **)(v138 + 32);
                                    if (!v139)
                                    {
                                      if (*(uint64_t **)(v138 + 80) != v68)
                                        goto LABEL_295;
                                      v162 = (uint64_t *)v68[1];
                                      v164 = (uint64_t **)(v138 + 32);
                                      v143 = (uint64_t *)(v138 + 32);
                                      if (v162 != (uint64_t *)v138)
                                        goto LABEL_291;
                                      goto LABEL_273;
                                    }
                                    v141 = *(_DWORD *)(v131 + 64);
                                    v142 = *(_DWORD *)(v131 + 72);
                                    v143 = (uint64_t *)(v138 + 32);
                                    v144 = *(_QWORD *)(v138 + 32);
                                    if (v141 == 1)
                                    {
                                      v143 = (uint64_t *)(v138 + 32);
                                      v145 = *(_QWORD *)(v138 + 32);
                                      do
                                      {
                                        while (1)
                                        {
                                          v151 = *(_DWORD *)(v145 + 32);
                                          v152 = v151 < 1;
                                          if (v151 == 1)
                                            v152 = *(_DWORD *)(v145 + 40) < v142;
                                          if (!v152)
                                            break;
                                          v145 = *(_QWORD *)(v145 + 8);
                                          if (!v145)
                                            goto LABEL_239;
                                        }
                                        v143 = (uint64_t *)v145;
                                        v145 = *(_QWORD *)v145;
                                      }
                                      while (v145);
                                    }
                                    else
                                    {
                                      do
                                      {
                                        v146 = *(_DWORD *)(v144 + 32);
                                        v147 = v146 == v141;
                                        v148 = v146 < v141;
                                        if (v146 >= v141)
                                          v149 = (uint64_t *)v144;
                                        else
                                          v149 = (uint64_t *)(v144 + 8);
                                        if (v148)
                                          v150 = v143;
                                        else
                                          v150 = (uint64_t *)v144;
                                        if (v147)
                                        {
                                          v149 = (uint64_t *)v144;
                                          v143 = (uint64_t *)v144;
                                        }
                                        else
                                        {
                                          v143 = v150;
                                        }
                                        v144 = *v149;
                                      }
                                      while (*v149);
                                    }
LABEL_239:
                                    if ((uint64_t *)v143[6] == v68)
                                    {
                                      v153 = (uint64_t **)(v138 + 32);
                                      v154 = *(uint64_t ***)(v138 + 32);
                                      if (v141 != 1)
                                      {
                                        do
                                        {
                                          v155 = *((_DWORD *)v154 + 8);
                                          v156 = (uint64_t ***)(v154 + 1);
                                          v157 = v141 == v155;
                                          v158 = v141 < v155;
                                          if (v141 >= v155)
                                            v159 = (uint64_t ***)(v154 + 1);
                                          else
                                            v159 = (uint64_t ***)v154;
                                          if (!v158)
                                            v154 = v153;
                                          if (v157)
                                            v159 = v156;
                                          else
                                            v153 = v154;
                                          v154 = *v159;
                                        }
                                        while (*v159);
LABEL_257:
                                        v161 = (uint64_t *)v138;
                                        if (v153 != v140)
                                          v161 = v153[6];
                                        v162 = (uint64_t *)v68[1];
                                        if (v162 != v161)
                                        {
                                          if (v141 != 1)
                                          {
                                            v163 = *((_DWORD *)v139 + 8);
                                            if (v141 == v163)
                                              goto LABEL_294;
                                            while (1)
                                            {
                                              if (v141 < v163)
                                              {
                                                v170 = *(_QWORD *)v139;
                                                if (!*(_QWORD *)v139)
                                                {
                                                  v140 = (uint64_t **)v139;
LABEL_290:
                                                  v164 = (uint64_t **)v139;
LABEL_291:
                                                  v139 = (char *)operator new(0x38uLL);
                                                  v171 = *(_QWORD *)(v131 + 64);
                                                  *((_DWORD *)v139 + 10) = *(_DWORD *)(v131 + 72);
                                                  *((_QWORD *)v139 + 4) = v171;
                                                  *((_QWORD *)v139 + 6) = 0;
                                                  *(_QWORD *)v139 = 0;
                                                  *((_QWORD *)v139 + 1) = 0;
                                                  *((_QWORD *)v139 + 2) = v164;
                                                  *v140 = (uint64_t *)v139;
                                                  v172 = **(_QWORD **)(v138 + 24);
                                                  v173 = (uint64_t *)v139;
                                                  if (v172)
                                                  {
                                                    *(_QWORD *)(v138 + 24) = v172;
                                                    v173 = *v140;
                                                  }
                                                  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v138 + 32), v173);
                                                  ++*(_QWORD *)(v138 + 40);
LABEL_294:
                                                  *((_QWORD *)v139 + 6) = v162;
                                                  goto LABEL_295;
                                                }
                                              }
                                              else
                                              {
                                                if (v163 >= v141)
                                                  goto LABEL_294;
                                                v170 = *((_QWORD *)v139 + 1);
                                                if (!v170)
                                                {
                                                  v140 = (uint64_t **)(v139 + 8);
                                                  goto LABEL_290;
                                                }
                                              }
                                              v163 = *(_DWORD *)(v170 + 32);
                                              v139 = (char *)v170;
                                              if (v141 == v163)
                                              {
                                                *(_QWORD *)(v170 + 48) = v162;
                                                goto LABEL_295;
                                              }
                                            }
                                          }
                                          while (1)
                                          {
                                            v164 = (uint64_t **)v139;
                                            v165 = *((_DWORD *)v139 + 8);
                                            if (v165 == 1)
                                            {
                                              v166 = *((_DWORD *)v139 + 10);
                                              if (v166 <= v142)
                                              {
                                                if (v166 >= v142)
                                                {
                                                  *((_QWORD *)v139 + 6) = v162;
                                                  goto LABEL_295;
                                                }
LABEL_269:
                                                v139 = (char *)*((_QWORD *)v139 + 1);
                                                if (!v139)
                                                {
                                                  v140 = v164 + 1;
                                                  goto LABEL_291;
                                                }
                                                continue;
                                              }
                                            }
                                            else if (v165 <= 1)
                                            {
                                              goto LABEL_269;
                                            }
                                            v139 = *(char **)v139;
                                            if (!*v164)
                                            {
                                              v140 = v164;
                                              goto LABEL_291;
                                            }
                                          }
                                        }
LABEL_273:
                                        v167 = (uint64_t *)v143[1];
                                        v168 = v143;
                                        if (v167)
                                        {
                                          do
                                          {
                                            v169 = v167;
                                            v167 = (uint64_t *)*v167;
                                          }
                                          while (v167);
                                        }
                                        else
                                        {
                                          do
                                          {
                                            v169 = (uint64_t *)v168[2];
                                            v147 = *v169 == (_QWORD)v168;
                                            v168 = v169;
                                          }
                                          while (!v147);
                                        }
                                        if (*(uint64_t **)(v138 + 24) == v143)
                                          *(_QWORD *)(v138 + 24) = v169;
                                        --*(_QWORD *)(v138 + 40);
                                        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v139, v143);
                                        operator delete(v143);
                                        goto LABEL_295;
                                      }
                                      while (1)
                                      {
                                        v160 = *((_DWORD *)v154 + 8);
                                        if (v160 == 1)
                                        {
                                          if (v142 >= *((_DWORD *)v154 + 10))
                                            goto LABEL_251;
                                        }
                                        else if (v160 <= 1)
                                        {
LABEL_251:
                                          v154 = (uint64_t **)v154[1];
                                          if (!v154)
                                            goto LABEL_257;
                                          continue;
                                        }
                                        v153 = v154;
                                        v154 = (uint64_t **)*v154;
                                        if (!v154)
                                          goto LABEL_257;
                                      }
                                    }
LABEL_295:
                                    v174 = *v68;
                                    v67 = (uint64_t *)v68[1];
                                    *(_QWORD *)(v174 + 8) = v67;
                                    *(_QWORD *)v68[1] = v174;
                                    --*(_QWORD *)(v138 + 16);
                                    v175 = (unsigned int *)v68[3];
                                    v62 = (uint64_t **)v736;
                                    if (v175)
                                    {
                                      v176 = v175 + 2;
                                      do
                                      {
                                        v177 = __ldaxr(v176);
                                        v178 = v177 - 1;
                                      }
                                      while (__stlxr(v178, v176));
                                      if (!v178)
                                      {
                                        (*(void (**)(unsigned int *))(*(_QWORD *)v175 + 16))(v175);
                                        v179 = v175 + 3;
                                        do
                                        {
                                          v180 = __ldaxr(v179);
                                          v181 = v180 - 1;
                                        }
                                        while (__stlxr(v181, v179));
                                        if (!v181)
                                          (*(void (**)(unsigned int *))(*(_QWORD *)v175 + 24))(v175);
                                      }
                                    }
                                    operator delete(v68);
LABEL_204:
                                    v132 = v67 != (uint64_t *)**v62 && v130 >= ++v129;
                                    v68 = v67;
                                    if (!v132)
                                    {
LABEL_304:
                                      v62[2] = v67;
                                      v182 = operator new(0x50uLL);
                                      v182[1] = 0;
                                      v182[2] = 0;
                                      *((_BYTE *)v182 + 24) = 1;
                                      *((_DWORD *)v182 + 7) = 1;
                                      *v182 = off_1E4A0D1F8;
                                      v183 = operator new(0x38uLL);
                                      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v183, (uint64_t *)&__dst);
                                      v183[3] = 0;
                                      v184 = *((_QWORD *)&v759 + 1);
                                      if (*((_QWORD *)&v759 + 1))
                                      {
                                        v183[3] = *((_QWORD *)&v759 + 1);
                                        if ((v184 & 1) != 0)
                                        {
                                          *((_OWORD *)v183 + 2) = v760;
                                          v183[6] = v761;
                                        }
                                        else
                                        {
                                          (*(void (**)(__int128 *, _QWORD *, _QWORD))(v184 & 0xFFFFFFFFFFFFFFFELL))(&v760, v183 + 4, 0);
                                        }
                                      }
                                      v182[4] = v183;
                                      v182[5] = 0;
                                      v191 = operator new(0x18uLL);
                                      v191[1] = 0x100000001;
                                      *v191 = off_1E4A0D2A0;
                                      v191[2] = v183;
                                      v182[5] = v191;
                                      v182[6] = v62[3];
                                      v192 = v62[4];
                                      v182[7] = v192;
                                      if (v192)
                                      {
                                        v193 = (unsigned int *)(v192 + 1);
                                        do
                                          v194 = __ldxr(v193);
                                        while (__stxr(v194 + 1, v193));
                                      }
                                      *((_DWORD *)v182 + 16) = 0;
                                      *((_BYTE *)v182 + 68) = 0;
                                      v766 = (uint64_t (**)())v182;
                                      v195 = (unsigned int *)operator new(0x18uLL);
                                      *((_QWORD *)v195 + 1) = 0x100000001;
                                      v196 = v195 + 2;
                                      *(_QWORD *)v195 = off_1E4A0D300;
                                      *((_QWORD *)v195 + 2) = v182;
                                      v767 = (unint64_t)v195;
                                      v197 = (uint64_t *)**v62;
                                      v198 = operator new(0x20uLL);
                                      v199 = v198;
                                      v200 = v197 + 4;
                                      v198[2] = v182;
                                      v198[3] = v195;
                                      do
                                        v201 = __ldxr(v196);
                                      while (__stxr(v201 + 1, v196));
                                      v202 = *v197;
                                      *(_QWORD *)(v202 + 8) = v198;
                                      *v198 = v202;
                                      *v197 = (uint64_t)v198;
                                      v198[1] = v197;
                                      ++v197[2];
                                      v203 = (uint64_t *)v197[4];
                                      if (!v203)
                                      {
                                        v203 = v197 + 4;
                                        goto LABEL_341;
                                      }
                                      v204 = v197 + 4;
                                      v205 = v197[4];
                                      do
                                      {
                                        v206 = *(_DWORD *)(v205 + 32);
                                        v207 = v206 == 2;
                                        v208 = v206 < 2;
                                        if (v206 >= 2)
                                          v209 = (uint64_t *)v205;
                                        else
                                          v209 = (uint64_t *)(v205 + 8);
                                        if (!v208)
                                          v204 = (uint64_t *)v205;
                                        if (v207)
                                        {
                                          v209 = (uint64_t *)v205;
                                          v204 = (uint64_t *)v205;
                                        }
                                        v205 = *v209;
                                      }
                                      while (*v209);
                                      if (v204 != v200 && *((_DWORD *)v204 + 8) == 2)
                                      {
LABEL_332:
                                        *((_DWORD *)v182 + 16) = 2;
                                        *(_QWORD *)((char *)v182 + 68) = 0xAAAAAAAAAAAAAA00;
                                        goto LABEL_344;
                                      }
                                      v210 = *((_DWORD *)v203 + 8);
                                      while (1)
                                      {
                                        if (v210 == 2)
                                          goto LABEL_332;
                                        if (v210 < 3)
                                        {
                                          v211 = (uint64_t *)v203[1];
                                          if (!v211)
                                          {
                                            v200 = v203 + 1;
LABEL_341:
                                            v212 = operator new(0x38uLL);
                                            v212[4] = 0xAAAAAA0000000002;
                                            *((_DWORD *)v212 + 10) = -1431655766;
                                            v212[6] = v199;
                                            *v212 = 0;
                                            v212[1] = 0;
                                            v212[2] = v203;
                                            *v200 = (uint64_t)v212;
                                            v213 = *(_QWORD *)v197[3];
                                            if (v213)
                                            {
                                              v197[3] = v213;
                                              v212 = (_QWORD *)*v200;
                                            }
                                            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v197[4], v212);
                                            ++v197[5];
                                            v182 = v766;
                                            v195 = (unsigned int *)v767;
                                            *((_DWORD *)v766 + 16) = 2;
                                            *(_QWORD *)((char *)v182 + 68) = 0xAAAAAAAAAAAAAA00;
                                            if (v195)
                                            {
LABEL_344:
                                              v214 = v195 + 3;
                                              do
                                                v215 = __ldxr(v214);
                                              while (__stxr(v215 + 1, v214));
                                              *(_QWORD *)&v741 = v182;
                                              *((_QWORD *)&v741 + 1) = v195;
                                              do
                                                v216 = __ldxr(v214);
                                              while (__stxr(v216 + 1, v214));
                                              do
                                              {
                                                v217 = __ldaxr(v214);
                                                v218 = v217 - 1;
                                              }
                                              while (__stlxr(v218, v214));
                                              if (!v218)
                                                (*(void (**)(unsigned int *))(*(_QWORD *)v195 + 24))(v195);
                                              v219 = (unsigned int *)v767;
                                              if (v767)
                                              {
LABEL_352:
                                                v220 = v219 + 2;
                                                do
                                                {
                                                  v221 = __ldaxr(v220);
                                                  v222 = v221 - 1;
                                                }
                                                while (__stlxr(v222, v220));
                                                if (!v222)
                                                {
                                                  (*(void (**)(unsigned int *))(*(_QWORD *)v219 + 16))(v219);
                                                  v223 = v219 + 3;
                                                  do
                                                  {
                                                    v224 = __ldaxr(v223);
                                                    v225 = v224 - 1;
                                                  }
                                                  while (__stlxr(v225, v223));
                                                  if (!v225)
                                                    (*(void (**)(unsigned int *))(*(_QWORD *)v219 + 24))(v219);
                                                }
                                              }
                                            }
                                            else
                                            {
                                              v741 = (unint64_t)v182;
                                              v219 = (unsigned int *)v767;
                                              if (v767)
                                                goto LABEL_352;
                                            }
                                            pthread_mutex_unlock(v782);
                                            v226 = (char *)p_block;
                                            if (p_block)
                                            {
                                              if (v781 - 1 >= 0)
                                              {
                                                v227 = (char *)p_block + 16 * v781;
                                                do
                                                {
                                                  v228 = (unsigned int *)*((_QWORD *)v227 - 1);
                                                  if (v228)
                                                  {
                                                    v229 = v228 + 2;
                                                    do
                                                    {
                                                      v230 = __ldaxr(v229);
                                                      v231 = v230 - 1;
                                                    }
                                                    while (__stlxr(v231, v229));
                                                    if (!v231)
                                                    {
                                                      (*(void (**)(unsigned int *))(*(_QWORD *)v228 + 16))(v228);
                                                      v232 = v228 + 3;
                                                      do
                                                      {
                                                        v233 = __ldaxr(v232);
                                                        v234 = v233 - 1;
                                                      }
                                                      while (__stlxr(v234, v232));
                                                      if (!v234)
                                                        (*(void (**)(unsigned int *))(*(_QWORD *)v228 + 24))(v228);
                                                    }
                                                  }
                                                  v227 -= 16;
                                                }
                                                while (v227 > v226);
                                              }
                                              if (v779 >= 0xB)
                                                operator delete(p_block);
                                            }
                                            if (*((_QWORD *)&v759 + 1))
                                            {
                                              if ((BYTE8(v759) & 1) == 0)
                                              {
                                                v235 = *(void (**)(__int128 *, __int128 *, uint64_t))(*((_QWORD *)&v759 + 1) & 0xFFFFFFFFFFFFFFFELL);
                                                if (v235)
                                                  v235(&v760, &v760, 2);
                                              }
                                              *((_QWORD *)&v759 + 1) = 0;
                                            }
                                            v236 = __dst;
                                            if (!(_QWORD)__dst)
                                              goto LABEL_399;
                                            v237 = *((_QWORD *)&__dst + 1);
                                            v238 = (void *)__dst;
                                            if (*((_QWORD *)&__dst + 1) == (_QWORD)__dst)
                                              goto LABEL_398;
                                            v239 = *((_QWORD *)&__dst + 1);
                                            while (2)
                                            {
                                              v240 = *(_DWORD *)(v239 - 24);
                                              v239 -= 24;
                                              v241 = v240 ^ (v240 >> 31);
                                              if (v241 == 2)
                                              {
                                                v246 = *(_QWORD *)(v237 - 16);
                                                if (v246)
                                                  (*(void (**)(uint64_t))(*(_QWORD *)v246 + 8))(v246);
                                              }
                                              else if (v241 == 1)
                                              {
                                                v242 = *(unsigned int **)(v237 - 8);
                                                if (v242)
                                                {
                                                  v243 = v242 + 3;
                                                  do
                                                  {
                                                    v244 = __ldaxr(v243);
                                                    v245 = v244 - 1;
                                                  }
                                                  while (__stlxr(v245, v243));
                                                  if (!v245)
                                                    goto LABEL_389;
                                                }
                                              }
                                              else
                                              {
                                                v242 = *(unsigned int **)(v237 - 8);
                                                if (v242)
                                                {
                                                  v247 = v242 + 3;
                                                  do
                                                  {
                                                    v248 = __ldaxr(v247);
                                                    v249 = v248 - 1;
                                                  }
                                                  while (__stlxr(v249, v247));
                                                  if (!v249)
LABEL_389:
                                                    (*(void (**)(unsigned int *))(*(_QWORD *)v242 + 24))(v242);
                                                }
                                              }
                                              v237 = v239;
                                              if (v239 == v236)
                                              {
                                                v238 = (void *)__dst;
LABEL_398:
                                                *((_QWORD *)&__dst + 1) = v236;
                                                operator delete(v238);
LABEL_399:
                                                dispatch_release(v756);
                                                if (v757)
                                                  _Block_release(v757);
                                                p_shared_owners = (unint64_t *)&v729->__shared_owners_;
                                                do
                                                  v251 = __ldaxr(p_shared_owners);
                                                while (__stlxr(v251 - 1, p_shared_owners));
                                                if (v251)
                                                {
                                                  v252 = v724;
                                                  if (!v724)
                                                    goto LABEL_408;
LABEL_407:
                                                  _Block_release(v252);
                                                }
                                                else
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v729->__on_zero_shared)(v729);
                                                  std::__shared_weak_count::__release_weak(v729);
                                                  v252 = v724;
                                                  if (v724)
                                                    goto LABEL_407;
                                                }
LABEL_408:
                                                v253 = operator new(0x20uLL);
                                                v253[1] = v741;
                                                v254 = a1[24];
                                                *(_QWORD *)v253 = v254;
                                                *((_QWORD *)v253 + 1) = aBlocka;
                                                *(_QWORD *)(v254 + 8) = v253;
                                                a1[24] = v253;
                                                ++a1[26];
                                                v255 = a1[21];
                                                __p = (void *)MEMORY[0x1E0C809B0];
                                                v750 = 0x40000000;
                                                v751 = (int64_t)___ZN3ctu20SharedSynchronizableI5TraceE13connect_eventIN5boost8signals26signalIFvbENS5_19optional_last_valueIvEEiNSt3__14lessIiEENS4_8functionIS7_EENSD_IFvRKNS5_10connectionEbEEENS5_5mutexEEE16EURCoreDumpTracevJbEEEDTcl7connectfp_cvNSA_10shared_ptrIS1_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSR_ST_E_block_invoke;
                                                v752 = &__block_descriptor_tmp_56_2;
                                                v753 = a1 + 9;
                                                v754 = EURCoreDumpTrace::getCoreDumpEnabledStatusUpdate_sync;
                                                v755 = 0;
                                                v256 = _Block_copy(&__p);
                                                v737 = v255;
                                                v257 = (std::__shared_weak_count *)a1[10];
                                                if (!v257
                                                  || (v258 = a1[9], (v259 = std::__shared_weak_count::lock(v257)) == 0))
                                                {
                                                  std::__throw_bad_weak_ptr[abi:ne180100]();
                                                }
                                                v260 = v259;
                                                v261 = a1[11];
                                                v756 = v261;
                                                if (v256)
                                                  v262 = _Block_copy(v256);
                                                else
                                                  v262 = 0;
                                                v757 = v262;
                                                dispatch_retain(v261);
                                                __dst = 0u;
                                                v759 = 0u;
                                                v762 = v261;
                                                if (v262)
                                                  v262 = _Block_copy(v262);
                                                v763 = v262;
                                                dispatch_retain(v261);
                                                v764 = v261;
                                                v730 = v260;
                                                v725 = v256;
                                                if (v262)
                                                {
                                                  v263 = _Block_copy(v262);
                                                  v765 = v263;
                                                  dispatch_retain(v261);
                                                  if (v263)
                                                  {
                                                    v264 = _Block_copy(v263);
                                                    dispatch_retain(v261);
                                                    v766 = 0;
                                                    if (v264)
                                                    {
                                                      v265 = _Block_copy(v264);
                                                      dispatch_retain(v261);
                                                      v716 = v264;
                                                      if (v265)
                                                      {
                                                        v266 = _Block_copy(v265);
                                                        dispatch_retain(v261);
                                                        v720 = v265;
                                                        if (v266)
                                                        {
                                                          v267 = _Block_copy(v266);
                                                          dispatch_retain(v261);
                                                          if (v267)
                                                          {
                                                            v268 = _Block_copy(v267);
                                                            dispatch_retain(v261);
                                                            v767 = (unint64_t)v261;
                                                            if (v268)
                                                            {
                                                              v269 = _Block_copy(v268);
                                                              v270 = 0;
                                                              v271 = 0;
                                                              v272 = 0;
                                                              v273 = 0;
                                                              v274 = 0;
                                                              goto LABEL_430;
                                                            }
                                                            v270 = 0;
                                                            v271 = 0;
                                                            v272 = 0;
                                                            v273 = 0;
                                                            v269 = 0;
LABEL_429:
                                                            v274 = 1;
LABEL_430:
                                                            v768 = v269;
                                                            dispatch_retain(v261);
                                                            dispatch_release(v261);
                                                            if ((v274 & 1) == 0)
                                                              _Block_release(v268);
                                                            dispatch_release(v261);
                                                            if ((v273 & 1) == 0)
                                                              _Block_release(v267);
                                                            dispatch_release(v261);
                                                            if ((v272 & 1) == 0)
                                                              _Block_release(v266);
                                                            v766 = boost::function1<void,BOOL>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>)::stored_vtable;
                                                            dispatch_release(v261);
                                                            if ((v271 & 1) == 0)
                                                              _Block_release(v720);
                                                            dispatch_release(v261);
                                                            if ((v270 & 1) == 0)
                                                              _Block_release(v716);
                                                            *(_QWORD *)&v770 = 0xAAAAAAAAAAAAAAAALL;
                                                            *((_QWORD *)&v770 + 1) = 0xAAAAAAAAAAAAAAAALL;
                                                            *(_QWORD *)&block = 0;
                                                            *((_QWORD *)&block + 1) = 0xAAAAAAAAAAAAAAAALL;
                                                            boost::function1<void,BOOL>::move_assign((uint64_t)&block, (uint64_t *)&v766);
                                                            boost::function1<void,BOOL>::move_assign((uint64_t)&v766, (uint64_t *)&v759 + 1);
                                                            boost::function1<void,BOOL>::move_assign((uint64_t)&v759 + 8, (uint64_t *)&block);
                                                            if ((_QWORD)block)
                                                            {
                                                              if ((block & 1) == 0)
                                                              {
                                                                v275 = *(void (**)(char *, char *, uint64_t))(block & 0xFFFFFFFFFFFFFFFELL);
                                                                if (v275)
                                                                  v275((char *)&block + 8, (char *)&block + 8, 2);
                                                              }
                                                            }
                                                            if (v766)
                                                            {
                                                              if ((v766 & 1) == 0)
                                                              {
                                                                v276 = *(void (**)(uint64_t, _WORD *, unsigned int))((unint64_t)v766 & 0xFFFFFFFFFFFFFFFELL);
                                                                if (v276)
                                                                  v276((uint64_t)&v767, &v767, 2u);
                                                              }
                                                              v766 = 0;
                                                            }
                                                            dispatch_release(v764);
                                                            if (v765)
                                                              _Block_release(v765);
                                                            dispatch_release(v762);
                                                            if (v763)
                                                              _Block_release(v763);
                                                            v277 = (unint64_t *)&v730->__shared_weak_owners_;
                                                            do
                                                              v278 = __ldxr(v277);
                                                            while (__stxr(v278 + 1, v277));
                                                            v279 = operator new(0x18uLL);
                                                            *v279 = &off_1E4A0D530;
                                                            v279[1] = v258;
                                                            v279[2] = v730;
                                                            do
                                                              v280 = __ldxr(v277);
                                                            while (__stxr(v280 + 1, v277));
                                                            v281 = operator new(0x18uLL);
                                                            v282 = v281;
                                                            *v281 = &off_1E4A0D530;
                                                            v281[1] = v258;
                                                            v281[2] = v730;
                                                            do
                                                              v283 = __ldxr(v277);
                                                            while (__stxr(v283 + 1, v277));
                                                            *((_QWORD *)&block + 1) = v281;
                                                            LODWORD(block) = 2;
                                                            v284 = *((_QWORD *)&__dst + 1);
                                                            if (*((_QWORD *)&__dst + 1) >= (unint64_t)v759)
                                                            {
                                                              v410 = std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((int **)&__dst, (uint64_t)&block);
                                                              v411 = block ^ ((int)block >> 31);
                                                              *((_QWORD *)&__dst + 1) = v410;
                                                              if (v411 != 2)
                                                              {
                                                                if (v411 == 1)
                                                                {
                                                                  v412 = v770;
                                                                  if (!(_QWORD)v770)
                                                                    goto LABEL_464;
                                                                  v413 = (unsigned int *)(v770 + 12);
                                                                  do
                                                                  {
                                                                    v414 = __ldaxr(v413);
                                                                    v415 = v414 - 1;
                                                                  }
                                                                  while (__stlxr(v415, v413));
                                                                  if (v415)
                                                                    goto LABEL_464;
                                                                }
                                                                else
                                                                {
                                                                  v412 = v770;
                                                                  if (!(_QWORD)v770)
                                                                    goto LABEL_464;
                                                                  v709 = (unsigned int *)(v770 + 12);
                                                                  do
                                                                  {
                                                                    v710 = __ldaxr(v709);
                                                                    v711 = v710 - 1;
                                                                  }
                                                                  while (__stlxr(v711, v709));
                                                                  if (v711)
                                                                    goto LABEL_464;
                                                                }
                                                                (*(void (**)(uint64_t))(*(_QWORD *)v412 + 24))(v412);
                                                                goto LABEL_464;
                                                              }
                                                              v282 = (_QWORD *)*((_QWORD *)&block + 1);
                                                              if (*((_QWORD *)&block + 1))
                                                                goto LABEL_463;
                                                            }
                                                            else
                                                            {
                                                              v285 = operator new(0x18uLL);
                                                              *v285 = &off_1E4A0D530;
                                                              v285[1] = v258;
                                                              v285[2] = v730;
                                                              do
                                                                v286 = __ldxr(v277);
                                                              while (__stxr(v286 + 1, v277));
                                                              *(_QWORD *)(v284 + 8) = v285;
                                                              *(_DWORD *)v284 = 2;
                                                              *((_QWORD *)&__dst + 1) = v284 + 24;
LABEL_463:
                                                              (*(void (**)(_QWORD *))(*v282 + 8))(v282);
                                                            }
LABEL_464:
                                                            (*(void (**)(_QWORD *))(*v279 + 8))(v279);
                                                            std::__shared_weak_count::__release_weak(v730);
                                                            v287 = *(uint64_t ***)(v737 + 160);
                                                            *(_QWORD *)&v288 = 0xAAAAAAAAAAAAAAAALL;
                                                            *((_QWORD *)&v288 + 1) = 0xAAAAAAAAAAAAAAAALL;
                                                            v777 = v288;
                                                            v778 = v288;
                                                            v775 = v288;
                                                            v776 = v288;
                                                            v773 = v288;
                                                            v774 = v288;
                                                            v771 = v288;
                                                            v772 = v288;
                                                            block = v288;
                                                            v770 = v288;
                                                            v289 = (pthread_mutex_t *)v287[3];
                                                            v779 = 10;
                                                            p_block = &block;
                                                            v781 = 0;
                                                            v782 = v289;
                                                            pthread_mutex_lock(v289);
                                                            v766 = (uint64_t (**)())0xAAAAAAAAAAAAAAAALL;
                                                            v767 = 0xAAAAAAAAAAAAAAAALL;
                                                            v290 = (unsigned int *)v287[1];
                                                            v738 = (uint64_t ***)v287;
                                                            if (v290)
                                                            {
                                                              v291 = atomic_load(v290 + 2);
                                                              if (v291 == 1)
                                                              {
                                                                v292 = (uint64_t *)**v287;
                                                                v293 = v287[2];
                                                                v294 = 2;
                                                                if (v293 != v292)
                                                                  goto LABEL_561;
                                                                goto LABEL_560;
                                                              }
                                                            }
                                                            v295 = (uint64_t **)operator new(0x20uLL);
                                                            v296 = *v287;
                                                            v297 = **v287;
                                                            v721 = v295;
                                                            v298 = operator new(0x40uLL);
                                                            v299 = v298;
                                                            *v298 = v298;
                                                            v298[1] = v298;
                                                            v298[2] = 0;
                                                            v300 = *(_QWORD **)(v297 + 8);
                                                            if (v300 != (_QWORD *)v297)
                                                            {
                                                              v301 = 0;
                                                              v302 = v298;
                                                              do
                                                              {
                                                                v303 = operator new(0x20uLL);
                                                                v303[2] = v300[2];
                                                                v304 = v300[3];
                                                                v303[3] = v304;
                                                                if (v304)
                                                                {
                                                                  v305 = (unsigned int *)(v304 + 8);
                                                                  do
                                                                    v306 = __ldxr(v305);
                                                                  while (__stxr(v306 + 1, v305));
                                                                  v302 = (_QWORD *)*v299;
                                                                  v301 = v299[2];
                                                                }
                                                                *v303 = v302;
                                                                v303[1] = v299;
                                                                v302[1] = v303;
                                                                *v299 = v303;
                                                                v299[2] = ++v301;
                                                                v300 = (_QWORD *)v300[1];
                                                                v302 = v303;
                                                              }
                                                              while (v300 != (_QWORD *)v297);
                                                            }
                                                            v717 = v296;
                                                            v299[3] = 0;
                                                            v307 = (_QWORD **)(v299 + 3);
                                                            v299[4] = 0;
                                                            v308 = v299 + 4;
                                                            v299[5] = 0;
                                                            *((_BYTE *)v299 + 48) = *(_BYTE *)(v297 + 48);
                                                            v299[3] = v299 + 4;
                                                            v309 = *(_QWORD **)(v297 + 24);
                                                            v310 = (_QWORD *)(v297 + 32);
                                                            if (v309 == (_QWORD *)(v297 + 32))
                                                            {
LABEL_476:
                                                              *((_BYTE *)v299 + 56) = *(_BYTE *)(v297 + 56);
                                                              v311 = *(_QWORD **)(v297 + 24);
                                                              if (v311 != v310)
                                                              {
                                                                v312 = (_QWORD *)v299[3];
                                                                v313 = v299[1];
                                                                do
                                                                {
                                                                  v312[6] = v313;
                                                                  v314 = v297;
                                                                  if (v311 != v310)
                                                                    v314 = v311[6];
                                                                  v315 = (_QWORD *)v311[1];
                                                                  v316 = v315;
                                                                  v317 = v311;
                                                                  if (v315)
                                                                  {
                                                                    do
                                                                    {
                                                                      v318 = v316;
                                                                      v316 = (_QWORD *)*v316;
                                                                    }
                                                                    while (v316);
                                                                  }
                                                                  else
                                                                  {
                                                                    do
                                                                    {
                                                                      v318 = (_QWORD *)v317[2];
                                                                      v147 = *v318 == (_QWORD)v317;
                                                                      v317 = v318;
                                                                    }
                                                                    while (!v147);
                                                                  }
                                                                  v319 = v297;
                                                                  if (v318 != v310)
                                                                    v319 = v318[6];
                                                                  while (v314 != v319)
                                                                  {
                                                                    v314 = *(_QWORD *)(v314 + 8);
                                                                    v313 = *(_QWORD *)(v313 + 8);
                                                                  }
                                                                  if (v315)
                                                                  {
                                                                    do
                                                                    {
                                                                      v320 = v315;
                                                                      v315 = (_QWORD *)*v315;
                                                                    }
                                                                    while (v315);
                                                                  }
                                                                  else
                                                                  {
                                                                    do
                                                                    {
                                                                      v320 = (_QWORD *)v311[2];
                                                                      v147 = *v320 == (_QWORD)v311;
                                                                      v311 = v320;
                                                                    }
                                                                    while (!v147);
                                                                  }
                                                                  v321 = (_QWORD *)v312[1];
                                                                  if (v321)
                                                                  {
                                                                    do
                                                                    {
                                                                      v322 = v321;
                                                                      v321 = (_QWORD *)*v321;
                                                                    }
                                                                    while (v321);
                                                                  }
                                                                  else
                                                                  {
                                                                    do
                                                                    {
                                                                      v322 = (_QWORD *)v312[2];
                                                                      v147 = *v322 == (_QWORD)v312;
                                                                      v312 = v322;
                                                                    }
                                                                    while (!v147);
                                                                  }
                                                                  v311 = v320;
                                                                  v312 = v322;
                                                                }
                                                                while (v320 != v310);
                                                              }
                                                              *v721 = v299;
                                                              v721[1] = 0;
                                                              v342 = (uint64_t *)operator new(0x18uLL);
                                                              v287 = (uint64_t **)v738;
                                                              v342[1] = 0x100000001;
                                                              *v342 = (uint64_t)off_1E4A0D660;
                                                              v342[2] = (uint64_t)v299;
                                                              v721[1] = v342;
                                                              v721[2] = (uint64_t *)v717[2];
                                                              v343 = v717[3];
                                                              v721[3] = (uint64_t *)v343;
                                                              if (v343)
                                                              {
                                                                v344 = (unsigned int *)(v343 + 8);
                                                                do
                                                                  v345 = __ldxr(v344);
                                                                while (__stxr(v345 + 1, v344));
                                                              }
                                                              v346 = (uint64_t **)operator new(0x18uLL);
                                                              v346[1] = (uint64_t *)0x100000001;
                                                              *v346 = (uint64_t *)off_1E4A0D600;
                                                              v346[2] = (uint64_t *)v721;
                                                              v347 = (unsigned int *)v738[1];
                                                              *v738 = v721;
                                                              v738[1] = v346;
                                                              if (v347)
                                                              {
                                                                v348 = v347 + 2;
                                                                do
                                                                {
                                                                  v349 = __ldaxr(v348);
                                                                  v350 = v349 - 1;
                                                                }
                                                                while (__stlxr(v350, v348));
                                                                if (!v350)
                                                                {
                                                                  (*(void (**)(unsigned int *))(*(_QWORD *)v347 + 16))(v347);
                                                                  v351 = v347 + 3;
                                                                  do
                                                                  {
                                                                    v352 = __ldaxr(v351);
                                                                    v353 = v352 - 1;
                                                                  }
                                                                  while (__stlxr(v353, v351));
                                                                  if (!v353)
                                                                    (*(void (**)(unsigned int *))(*(_QWORD *)v347 + 24))(v347);
                                                                }
                                                              }
                                                              v294 = 0;
                                                              v292 = **v738;
LABEL_560:
                                                              v293 = (uint64_t *)v292[1];
                                                              if (v292 == v293)
                                                                goto LABEL_664;
LABEL_561:
                                                              v354 = 0;
                                                              v355 = v294 - 1;
LABEL_569:
                                                              v358 = v293[2];
                                                              v359 = *(uint64_t **)(v358 + 32);
                                                              if (!v359)
                                                                goto LABEL_562;
                                                              for (j = *v359; ; j += 24)
                                                              {
                                                                if (j == v359[1])
                                                                  goto LABEL_562;
                                                                if ((*(_DWORD *)j ^ (*(int *)j >> 31)) > 1)
                                                                {
                                                                  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(j + 8) + 24))(*(_QWORD *)(j + 8)) & 1) != 0)
                                                                    goto LABEL_578;
                                                                }
                                                                else
                                                                {
                                                                  v361 = *(_QWORD *)(j + 16);
                                                                  if (!v361
                                                                    || (v362 = atomic_load((unsigned int *)(v361 + 8))) == 0)
                                                                  {
LABEL_578:
                                                                    if (*(_BYTE *)(v358 + 24))
                                                                    {
                                                                      *(_BYTE *)(v358 + 24) = 0;
                                                                      boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v358, &block);
                                                                    }
LABEL_562:
                                                                    v356 = v293[2];
                                                                    if (*(_BYTE *)(v356 + 24))
                                                                    {
                                                                      v292 = (uint64_t *)v293[1];
                                                                      goto LABEL_564;
                                                                    }
                                                                    v363 = **v287;
                                                                    v365 = (uint64_t **)(v363 + 32);
                                                                    v364 = *(char **)(v363 + 32);
                                                                    if (!v364)
                                                                    {
                                                                      if (*(uint64_t **)(v363 + 80) != v293)
                                                                        goto LABEL_655;
                                                                      v387 = (uint64_t *)v293[1];
                                                                      v389 = (uint64_t **)(v363 + 32);
                                                                      v368 = (uint64_t *)(v363 + 32);
                                                                      if (v387 != (uint64_t *)v363)
                                                                        goto LABEL_651;
                                                                      goto LABEL_633;
                                                                    }
                                                                    v366 = *(_DWORD *)(v356 + 64);
                                                                    v367 = *(_DWORD *)(v356 + 72);
                                                                    v368 = (uint64_t *)(v363 + 32);
                                                                    v369 = *(_QWORD *)(v363 + 32);
                                                                    if (v366 == 1)
                                                                    {
                                                                      v368 = (uint64_t *)(v363 + 32);
                                                                      v370 = *(_QWORD *)(v363 + 32);
                                                                      do
                                                                      {
                                                                        while (1)
                                                                        {
                                                                          v383 = *(_DWORD *)(v370 + 32);
                                                                          v384 = v383 < 1;
                                                                          if (v383 == 1)
                                                                            v384 = *(_DWORD *)(v370 + 40) < v367;
                                                                          if (v384)
                                                                            break;
                                                                          v368 = (uint64_t *)v370;
                                                                          v370 = *(_QWORD *)v370;
                                                                          if (!v370)
                                                                            goto LABEL_593;
                                                                        }
                                                                        v370 = *(_QWORD *)(v370 + 8);
                                                                      }
                                                                      while (v370);
                                                                    }
                                                                    else
                                                                    {
                                                                      do
                                                                      {
                                                                        v371 = *(_DWORD *)(v369 + 32);
                                                                        v372 = v371 == v366;
                                                                        v373 = v371 < v366;
                                                                        if (v371 >= v366)
                                                                          v374 = (uint64_t *)v369;
                                                                        else
                                                                          v374 = (uint64_t *)(v369 + 8);
                                                                        if (v373)
                                                                          v375 = v368;
                                                                        else
                                                                          v375 = (uint64_t *)v369;
                                                                        if (v372)
                                                                        {
                                                                          v374 = (uint64_t *)v369;
                                                                          v368 = (uint64_t *)v369;
                                                                        }
                                                                        else
                                                                        {
                                                                          v368 = v375;
                                                                        }
                                                                        v369 = *v374;
                                                                      }
                                                                      while (*v374);
                                                                    }
LABEL_593:
                                                                    if ((uint64_t *)v368[6] == v293)
                                                                    {
                                                                      v376 = (uint64_t **)(v363 + 32);
                                                                      v377 = *(uint64_t ***)(v363 + 32);
                                                                      if (v366 != 1)
                                                                      {
                                                                        do
                                                                        {
                                                                          v378 = *((_DWORD *)v377 + 8);
                                                                          v379 = (uint64_t ***)(v377 + 1);
                                                                          v380 = v366 == v378;
                                                                          v381 = v366 < v378;
                                                                          if (v366 >= v378)
                                                                            v382 = (uint64_t ***)(v377 + 1);
                                                                          else
                                                                            v382 = (uint64_t ***)v377;
                                                                          if (!v381)
                                                                            v377 = v376;
                                                                          if (v380)
                                                                            v382 = v379;
                                                                          else
                                                                            v376 = v377;
                                                                          v377 = *v382;
                                                                        }
                                                                        while (*v382);
LABEL_617:
                                                                        v386 = (uint64_t *)v363;
                                                                        if (v376 != v365)
                                                                          v386 = v376[6];
                                                                        v387 = (uint64_t *)v293[1];
                                                                        if (v387 != v386)
                                                                        {
                                                                          if (v366 != 1)
                                                                          {
                                                                            v388 = *((_DWORD *)v364 + 8);
                                                                            if (v366 == v388)
                                                                              goto LABEL_654;
                                                                            while (1)
                                                                            {
                                                                              if (v366 < v388)
                                                                              {
                                                                                v395 = *(_QWORD *)v364;
                                                                                if (!*(_QWORD *)v364)
                                                                                {
                                                                                  v365 = (uint64_t **)v364;
LABEL_650:
                                                                                  v389 = (uint64_t **)v364;
LABEL_651:
                                                                                  v364 = (char *)operator new(0x38uLL);
                                                                                  v396 = *(_QWORD *)(v356 + 64);
                                                                                  *((_DWORD *)v364 + 10) = *(_DWORD *)(v356 + 72);
                                                                                  *((_QWORD *)v364 + 4) = v396;
                                                                                  *((_QWORD *)v364 + 6) = 0;
                                                                                  *(_QWORD *)v364 = 0;
                                                                                  *((_QWORD *)v364 + 1) = 0;
                                                                                  *((_QWORD *)v364 + 2) = v389;
                                                                                  *v365 = (uint64_t *)v364;
                                                                                  v397 = **(_QWORD **)(v363 + 24);
                                                                                  v398 = (uint64_t *)v364;
                                                                                  if (v397)
                                                                                  {
                                                                                    *(_QWORD *)(v363 + 24) = v397;
                                                                                    v398 = *v365;
                                                                                  }
                                                                                  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v363 + 32), v398);
                                                                                  ++*(_QWORD *)(v363 + 40);
LABEL_654:
                                                                                  *((_QWORD *)v364 + 6) = v387;
                                                                                  goto LABEL_655;
                                                                                }
                                                                              }
                                                                              else
                                                                              {
                                                                                if (v388 >= v366)
                                                                                  goto LABEL_654;
                                                                                v395 = *((_QWORD *)v364 + 1);
                                                                                if (!v395)
                                                                                {
                                                                                  v365 = (uint64_t **)(v364 + 8);
                                                                                  goto LABEL_650;
                                                                                }
                                                                              }
                                                                              v388 = *(_DWORD *)(v395 + 32);
                                                                              v364 = (char *)v395;
                                                                              if (v366 == v388)
                                                                              {
                                                                                *(_QWORD *)(v395 + 48) = v387;
                                                                                goto LABEL_655;
                                                                              }
                                                                            }
                                                                          }
                                                                          while (1)
                                                                          {
                                                                            v389 = (uint64_t **)v364;
                                                                            v390 = *((_DWORD *)v364 + 8);
                                                                            if (v390 == 1)
                                                                            {
                                                                              v391 = *((_DWORD *)v364 + 10);
                                                                              if (v391 <= v367)
                                                                              {
                                                                                if (v391 >= v367)
                                                                                {
                                                                                  *((_QWORD *)v364 + 6) = v387;
                                                                                  goto LABEL_655;
                                                                                }
LABEL_629:
                                                                                v364 = (char *)*((_QWORD *)v364 + 1);
                                                                                if (!v364)
                                                                                {
                                                                                  v365 = v389 + 1;
                                                                                  goto LABEL_651;
                                                                                }
                                                                                continue;
                                                                              }
                                                                            }
                                                                            else if (v390 <= 1)
                                                                            {
                                                                              goto LABEL_629;
                                                                            }
                                                                            v364 = *(char **)v364;
                                                                            if (!*v389)
                                                                            {
                                                                              v365 = v389;
                                                                              goto LABEL_651;
                                                                            }
                                                                          }
                                                                        }
LABEL_633:
                                                                        v392 = (uint64_t *)v368[1];
                                                                        v393 = v368;
                                                                        if (v392)
                                                                        {
                                                                          do
                                                                          {
                                                                            v394 = v392;
                                                                            v392 = (uint64_t *)*v392;
                                                                          }
                                                                          while (v392);
                                                                        }
                                                                        else
                                                                        {
                                                                          do
                                                                          {
                                                                            v394 = (uint64_t *)v393[2];
                                                                            v147 = *v394 == (_QWORD)v393;
                                                                            v393 = v394;
                                                                          }
                                                                          while (!v147);
                                                                        }
                                                                        if (*(uint64_t **)(v363 + 24) == v368)
                                                                          *(_QWORD *)(v363 + 24) = v394;
                                                                        --*(_QWORD *)(v363 + 40);
                                                                        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v364, v368);
                                                                        operator delete(v368);
                                                                        goto LABEL_655;
                                                                      }
                                                                      while (1)
                                                                      {
                                                                        v385 = *((_DWORD *)v377 + 8);
                                                                        if (v385 == 1)
                                                                        {
                                                                          if (v367 >= *((_DWORD *)v377 + 10))
                                                                            goto LABEL_611;
                                                                        }
                                                                        else if (v385 <= 1)
                                                                        {
LABEL_611:
                                                                          v377 = (uint64_t **)v377[1];
                                                                          if (!v377)
                                                                            goto LABEL_617;
                                                                          continue;
                                                                        }
                                                                        v376 = v377;
                                                                        v377 = (uint64_t **)*v377;
                                                                        if (!v377)
                                                                          goto LABEL_617;
                                                                      }
                                                                    }
LABEL_655:
                                                                    v399 = *v293;
                                                                    v292 = (uint64_t *)v293[1];
                                                                    *(_QWORD *)(v399 + 8) = v292;
                                                                    *(_QWORD *)v293[1] = v399;
                                                                    --*(_QWORD *)(v363 + 16);
                                                                    v400 = (unsigned int *)v293[3];
                                                                    v287 = (uint64_t **)v738;
                                                                    if (v400)
                                                                    {
                                                                      v401 = v400 + 2;
                                                                      do
                                                                      {
                                                                        v402 = __ldaxr(v401);
                                                                        v403 = v402 - 1;
                                                                      }
                                                                      while (__stlxr(v403, v401));
                                                                      if (!v403)
                                                                      {
                                                                        (*(void (**)(unsigned int *))(*(_QWORD *)v400 + 16))(v400);
                                                                        v404 = v400 + 3;
                                                                        do
                                                                        {
                                                                          v405 = __ldaxr(v404);
                                                                          v406 = v405 - 1;
                                                                        }
                                                                        while (__stlxr(v406, v404));
                                                                        if (!v406)
                                                                          (*(void (**)(unsigned int *))(*(_QWORD *)v400 + 24))(v400);
                                                                      }
                                                                    }
                                                                    operator delete(v293);
LABEL_564:
                                                                    v357 = v292 != (uint64_t *)**v287 && v355 >= ++v354;
                                                                    v293 = v292;
                                                                    if (!v357)
                                                                    {
LABEL_664:
                                                                      v287[2] = v292;
                                                                      v407 = operator new(0x50uLL);
                                                                      v407[1] = 0;
                                                                      v407[2] = 0;
                                                                      *((_BYTE *)v407 + 24) = 1;
                                                                      *((_DWORD *)v407 + 7) = 1;
                                                                      *v407 = off_1E4A0D6C0;
                                                                      v408 = operator new(0x38uLL);
                                                                      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v408, (uint64_t *)&__dst);
                                                                      v408[3] = 0;
                                                                      v409 = *((_QWORD *)&v759 + 1);
                                                                      if (*((_QWORD *)&v759 + 1))
                                                                      {
                                                                        v408[3] = *((_QWORD *)&v759 + 1);
                                                                        if ((v409 & 1) != 0)
                                                                        {
                                                                          *((_OWORD *)v408 + 2) = v760;
                                                                          v408[6] = v761;
                                                                        }
                                                                        else
                                                                        {
                                                                          (*(void (**)(__int128 *, _QWORD *, _QWORD))(v409 & 0xFFFFFFFFFFFFFFFELL))(&v760, v408 + 4, 0);
                                                                        }
                                                                      }
                                                                      v407[4] = v408;
                                                                      v407[5] = 0;
                                                                      v416 = operator new(0x18uLL);
                                                                      v416[1] = 0x100000001;
                                                                      *v416 = off_1E4A0D718;
                                                                      v416[2] = v408;
                                                                      v407[5] = v416;
                                                                      v407[6] = v287[3];
                                                                      v417 = v287[4];
                                                                      v407[7] = v417;
                                                                      if (v417)
                                                                      {
                                                                        v418 = (unsigned int *)(v417 + 1);
                                                                        do
                                                                          v419 = __ldxr(v418);
                                                                        while (__stxr(v419 + 1, v418));
                                                                      }
                                                                      *((_DWORD *)v407 + 16) = 0;
                                                                      *((_BYTE *)v407 + 68) = 0;
                                                                      v766 = (uint64_t (**)())v407;
                                                                      v420 = (unsigned int *)operator new(0x18uLL);
                                                                      *((_QWORD *)v420 + 1) = 0x100000001;
                                                                      v421 = v420 + 2;
                                                                      *(_QWORD *)v420 = off_1E4A0D778;
                                                                      *((_QWORD *)v420 + 2) = v407;
                                                                      v767 = (unint64_t)v420;
                                                                      v422 = (uint64_t *)**v287;
                                                                      v423 = operator new(0x20uLL);
                                                                      v424 = v423;
                                                                      v425 = v422 + 4;
                                                                      v423[2] = v407;
                                                                      v423[3] = v420;
                                                                      do
                                                                        v426 = __ldxr(v421);
                                                                      while (__stxr(v426 + 1, v421));
                                                                      v427 = *v422;
                                                                      *(_QWORD *)(v427 + 8) = v423;
                                                                      *v423 = v427;
                                                                      *v422 = (uint64_t)v423;
                                                                      v423[1] = v422;
                                                                      ++v422[2];
                                                                      v428 = (uint64_t *)v422[4];
                                                                      if (!v428)
                                                                      {
                                                                        v428 = v422 + 4;
                                                                        goto LABEL_701;
                                                                      }
                                                                      v429 = v422 + 4;
                                                                      v430 = v422[4];
                                                                      do
                                                                      {
                                                                        v431 = *(_DWORD *)(v430 + 32);
                                                                        v432 = v431 == 2;
                                                                        v433 = v431 < 2;
                                                                        if (v431 >= 2)
                                                                          v434 = (uint64_t *)v430;
                                                                        else
                                                                          v434 = (uint64_t *)(v430 + 8);
                                                                        if (!v433)
                                                                          v429 = (uint64_t *)v430;
                                                                        if (v432)
                                                                        {
                                                                          v434 = (uint64_t *)v430;
                                                                          v429 = (uint64_t *)v430;
                                                                        }
                                                                        v430 = *v434;
                                                                      }
                                                                      while (*v434);
                                                                      if (v429 != v425 && *((_DWORD *)v429 + 8) == 2)
                                                                      {
LABEL_692:
                                                                        *((_DWORD *)v407 + 16) = 2;
                                                                        *(_QWORD *)((char *)v407 + 68) = 0xAAAAAAAAAAAAAA00;
                                                                        goto LABEL_704;
                                                                      }
                                                                      v435 = *((_DWORD *)v428 + 8);
                                                                      while (1)
                                                                      {
                                                                        if (v435 == 2)
                                                                          goto LABEL_692;
                                                                        if (v435 < 3)
                                                                        {
                                                                          v436 = (uint64_t *)v428[1];
                                                                          if (!v436)
                                                                          {
                                                                            v425 = v428 + 1;
LABEL_701:
                                                                            v437 = operator new(0x38uLL);
                                                                            v437[4] = 0xAAAAAA0000000002;
                                                                            *((_DWORD *)v437 + 10) = -1431655766;
                                                                            v437[6] = v424;
                                                                            *v437 = 0;
                                                                            v437[1] = 0;
                                                                            v437[2] = v428;
                                                                            *v425 = (uint64_t)v437;
                                                                            v438 = *(_QWORD *)v422[3];
                                                                            if (v438)
                                                                            {
                                                                              v422[3] = v438;
                                                                              v437 = (_QWORD *)*v425;
                                                                            }
                                                                            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v422[4], v437);
                                                                            ++v422[5];
                                                                            v407 = v766;
                                                                            v420 = (unsigned int *)v767;
                                                                            *((_DWORD *)v766 + 16) = 2;
                                                                            *(_QWORD *)((char *)v407 + 68) = 0xAAAAAAAAAAAAAA00;
                                                                            if (v420)
                                                                            {
LABEL_704:
                                                                              v439 = v420 + 3;
                                                                              do
                                                                                v440 = __ldxr(v439);
                                                                              while (__stxr(v440 + 1, v439));
                                                                              *(_QWORD *)&v742 = v407;
                                                                              *((_QWORD *)&v742 + 1) = v420;
                                                                              do
                                                                                v441 = __ldxr(v439);
                                                                              while (__stxr(v441 + 1, v439));
                                                                              do
                                                                              {
                                                                                v442 = __ldaxr(v439);
                                                                                v443 = v442 - 1;
                                                                              }
                                                                              while (__stlxr(v443, v439));
                                                                              if (!v443)
                                                                                (*(void (**)(unsigned int *))(*(_QWORD *)v420 + 24))(v420);
                                                                              v444 = (unsigned int *)v767;
                                                                              if (v767)
                                                                              {
LABEL_712:
                                                                                v445 = v444 + 2;
                                                                                do
                                                                                {
                                                                                  v446 = __ldaxr(v445);
                                                                                  v447 = v446 - 1;
                                                                                }
                                                                                while (__stlxr(v447, v445));
                                                                                if (!v447)
                                                                                {
                                                                                  (*(void (**)(unsigned int *))(*(_QWORD *)v444 + 16))(v444);
                                                                                  v448 = v444 + 3;
                                                                                  do
                                                                                  {
                                                                                    v449 = __ldaxr(v448);
                                                                                    v450 = v449 - 1;
                                                                                  }
                                                                                  while (__stlxr(v450, v448));
                                                                                  if (!v450)
                                                                                    (*(void (**)(unsigned int *))(*(_QWORD *)v444 + 24))(v444);
                                                                                }
                                                                              }
                                                                            }
                                                                            else
                                                                            {
                                                                              v742 = (unint64_t)v407;
                                                                              v444 = (unsigned int *)v767;
                                                                              if (v767)
                                                                                goto LABEL_712;
                                                                            }
                                                                            pthread_mutex_unlock(v782);
                                                                            v451 = (char *)p_block;
                                                                            if (p_block)
                                                                            {
                                                                              if (v781 - 1 >= 0)
                                                                              {
                                                                                v452 = (char *)p_block + 16 * v781;
                                                                                do
                                                                                {
                                                                                  v453 = (unsigned int *)*((_QWORD *)v452 - 1);
                                                                                  if (v453)
                                                                                  {
                                                                                    v454 = v453 + 2;
                                                                                    do
                                                                                    {
                                                                                      v455 = __ldaxr(v454);
                                                                                      v456 = v455 - 1;
                                                                                    }
                                                                                    while (__stlxr(v456, v454));
                                                                                    if (!v456)
                                                                                    {
                                                                                      (*(void (**)(unsigned int *))(*(_QWORD *)v453 + 16))(v453);
                                                                                      v457 = v453 + 3;
                                                                                      do
                                                                                      {
                                                                                        v458 = __ldaxr(v457);
                                                                                        v459 = v458 - 1;
                                                                                      }
                                                                                      while (__stlxr(v459, v457));
                                                                                      if (!v459)
                                                                                        (*(void (**)(unsigned int *))(*(_QWORD *)v453 + 24))(v453);
                                                                                    }
                                                                                  }
                                                                                  v452 -= 16;
                                                                                }
                                                                                while (v452 > v451);
                                                                              }
                                                                              if (v779 >= 0xB)
                                                                                operator delete(p_block);
                                                                            }
                                                                            if (*((_QWORD *)&v759 + 1))
                                                                            {
                                                                              if ((BYTE8(v759) & 1) == 0)
                                                                              {
                                                                                v460 = *(void (**)(__int128 *, __int128 *, uint64_t))(*((_QWORD *)&v759 + 1) & 0xFFFFFFFFFFFFFFFELL);
                                                                                if (v460)
                                                                                  v460(&v760, &v760, 2);
                                                                              }
                                                                              *((_QWORD *)&v759 + 1) = 0;
                                                                            }
                                                                            v461 = __dst;
                                                                            if (!(_QWORD)__dst)
                                                                              goto LABEL_759;
                                                                            v462 = *((_QWORD *)&__dst + 1);
                                                                            v463 = (void *)__dst;
                                                                            if (*((_QWORD *)&__dst + 1) == (_QWORD)__dst)
                                                                              goto LABEL_758;
                                                                            v464 = *((_QWORD *)&__dst + 1);
                                                                            while (2)
                                                                            {
                                                                              v465 = *(_DWORD *)(v464 - 24);
                                                                              v464 -= 24;
                                                                              v466 = v465 ^ (v465 >> 31);
                                                                              if (v466 == 2)
                                                                              {
                                                                                v471 = *(_QWORD *)(v462 - 16);
                                                                                if (v471)
                                                                                  (*(void (**)(uint64_t))(*(_QWORD *)v471 + 8))(v471);
                                                                              }
                                                                              else if (v466 == 1)
                                                                              {
                                                                                v467 = *(unsigned int **)(v462 - 8);
                                                                                if (v467)
                                                                                {
                                                                                  v468 = v467 + 3;
                                                                                  do
                                                                                  {
                                                                                    v469 = __ldaxr(v468);
                                                                                    v470 = v469 - 1;
                                                                                  }
                                                                                  while (__stlxr(v470, v468));
                                                                                  if (!v470)
                                                                                    goto LABEL_749;
                                                                                }
                                                                              }
                                                                              else
                                                                              {
                                                                                v467 = *(unsigned int **)(v462 - 8);
                                                                                if (v467)
                                                                                {
                                                                                  v472 = v467 + 3;
                                                                                  do
                                                                                  {
                                                                                    v473 = __ldaxr(v472);
                                                                                    v474 = v473 - 1;
                                                                                  }
                                                                                  while (__stlxr(v474, v472));
                                                                                  if (!v474)
LABEL_749:
                                                                                    (*(void (**)(unsigned int *))(*(_QWORD *)v467 + 24))(v467);
                                                                                }
                                                                              }
                                                                              v462 = v464;
                                                                              if (v464 == v461)
                                                                              {
                                                                                v463 = (void *)__dst;
LABEL_758:
                                                                                *((_QWORD *)&__dst + 1) = v461;
                                                                                operator delete(v463);
LABEL_759:
                                                                                dispatch_release(v756);
                                                                                if (v757)
                                                                                  _Block_release(v757);
                                                                                v475 = (unint64_t *)&v730->__shared_owners_;
                                                                                do
                                                                                  v476 = __ldaxr(v475);
                                                                                while (__stlxr(v476 - 1, v475));
                                                                                if (v476)
                                                                                {
                                                                                  v477 = v725;
                                                                                  if (!v725)
                                                                                    goto LABEL_768;
LABEL_767:
                                                                                  _Block_release(v477);
                                                                                }
                                                                                else
                                                                                {
                                                                                  ((void (*)(std::__shared_weak_count *))v730->__on_zero_shared)(v730);
                                                                                  std::__shared_weak_count::__release_weak(v730);
                                                                                  v477 = v725;
                                                                                  if (v725)
                                                                                    goto LABEL_767;
                                                                                }
LABEL_768:
                                                                                v478 = operator new(0x20uLL);
                                                                                v478[1] = v742;
                                                                                v479 = a1[24];
                                                                                *(_QWORD *)v478 = v479;
                                                                                *((_QWORD *)v478 + 1) = aBlocka;
                                                                                *(_QWORD *)(v479 + 8) = v478;
                                                                                a1[24] = v478;
                                                                                ++a1[26];
                                                                                v480 = a1[21];
                                                                                __p = (void *)MEMORY[0x1E0C809B0];
                                                                                v750 = 0x40000000;
                                                                                v751 = (int64_t)___ZN3ctu20SharedSynchronizableI5TraceE13connect_eventIN5boost8signals26signalIFvN8coredump13CommandDriver6StatusEENS5_19optional_last_valueIvEEiNSt3__14lessIiEENS4_8functionISA_EENSG_IFvRKNS5_10connectionES9_EEENS5_5mutexEEE16EURCoreDumpTracevJS9_EEEDTcl7connectfp_cvNSD_10shared_ptrIS1_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSU_SW_E_block_invoke;
                                                                                v752 = &__block_descriptor_tmp_59_0;
                                                                                v753 = a1 + 9;
                                                                                v754 = EURCoreDumpTrace::commandDriverStatus_sync;
                                                                                v755 = 0;
                                                                                v481 = _Block_copy(&__p);
                                                                                v739 = v480;
                                                                                v482 = (std::__shared_weak_count *)a1[10];
                                                                                if (!v482
                                                                                  || (v483 = a1[9],
                                                                                      (v484 = std::__shared_weak_count::lock(v482)) == 0))
                                                                                {
                                                                                  std::__throw_bad_weak_ptr[abi:ne180100]();
                                                                                }
                                                                                v485 = v484;
                                                                                v486 = a1[11];
                                                                                v756 = v486;
                                                                                if (v481)
                                                                                  v487 = _Block_copy(v481);
                                                                                else
                                                                                  v487 = 0;
                                                                                v757 = v487;
                                                                                dispatch_retain(v486);
                                                                                __dst = 0u;
                                                                                v759 = 0u;
                                                                                v762 = v486;
                                                                                if (v487)
                                                                                  v487 = _Block_copy(v487);
                                                                                v763 = v487;
                                                                                dispatch_retain(v486);
                                                                                v764 = v486;
                                                                                v728 = v481;
                                                                                v731 = v485;
                                                                                if (v487)
                                                                                {
                                                                                  v488 = _Block_copy(v487);
                                                                                  v765 = v488;
                                                                                  dispatch_retain(v486);
                                                                                  if (v488)
                                                                                  {
                                                                                    v489 = _Block_copy(v488);
                                                                                    dispatch_retain(v486);
                                                                                    v766 = 0;
                                                                                    if (v489)
                                                                                    {
                                                                                      v490 = _Block_copy(v489);
                                                                                      dispatch_retain(v486);
                                                                                      v722 = v489;
                                                                                      if (v490)
                                                                                      {
                                                                                        v491 = _Block_copy(v490);
                                                                                        dispatch_retain(v486);
                                                                                        v726 = v490;
                                                                                        if (v491)
                                                                                        {
                                                                                          v492 = _Block_copy(v491);
                                                                                          dispatch_retain(v486);
                                                                                          if (v492)
                                                                                          {
                                                                                            v493 = _Block_copy(v492);
                                                                                            dispatch_retain(v486);
                                                                                            v767 = (unint64_t)v486;
                                                                                            if (v493)
                                                                                            {
                                                                                              v494 = _Block_copy(v493);
                                                                                              v495 = 0;
                                                                                              v496 = 0;
                                                                                              v497 = 0;
                                                                                              v498 = 0;
                                                                                              v499 = 0;
                                                                                              goto LABEL_790;
                                                                                            }
                                                                                            v495 = 0;
                                                                                            v496 = 0;
                                                                                            v497 = 0;
                                                                                            v498 = 0;
                                                                                            v494 = 0;
LABEL_789:
                                                                                            v499 = 1;
LABEL_790:
                                                                                            v768 = v494;
                                                                                            dispatch_retain(v486);
                                                                                            dispatch_release(v486);
                                                                                            if ((v499 & 1) == 0)
                                                                                              _Block_release(v493);
                                                                                            dispatch_release(v486);
                                                                                            if ((v498 & 1) == 0)
                                                                                              _Block_release(v492);
                                                                                            dispatch_release(v486);
                                                                                            if ((v497 & 1) == 0)
                                                                                              _Block_release(v491);
                                                                                            v766 = boost::function1<void,coredump::CommandDriver::Status>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>>)::stored_vtable;
                                                                                            dispatch_release(v486);
                                                                                            if ((v496 & 1) == 0)
                                                                                              _Block_release(v726);
                                                                                            dispatch_release(v486);
                                                                                            if ((v495 & 1) == 0)
                                                                                              _Block_release(v722);
                                                                                            *(_QWORD *)&v770 = 0xAAAAAAAAAAAAAAAALL;
                                                                                            *((_QWORD *)&v770 + 1) = 0xAAAAAAAAAAAAAAAALL;
                                                                                            *(_QWORD *)&block = 0;
                                                                                            *((_QWORD *)&block + 1) = 0xAAAAAAAAAAAAAAAALL;
                                                                                            boost::function1<void,coredump::CommandDriver::Status>::move_assign((uint64_t)&block, (uint64_t *)&v766);
                                                                                            boost::function1<void,coredump::CommandDriver::Status>::move_assign((uint64_t)&v766, (uint64_t *)&v759 + 1);
                                                                                            boost::function1<void,coredump::CommandDriver::Status>::move_assign((uint64_t)&v759 + 8, (uint64_t *)&block);
                                                                                            if ((_QWORD)block)
                                                                                            {
                                                                                              if ((block & 1) == 0)
                                                                                              {
                                                                                                v500 = *(void (**)(char *, char *, uint64_t))(block & 0xFFFFFFFFFFFFFFFELL);
                                                                                                if (v500)
                                                                                                  v500((char *)&block + 8, (char *)&block + 8, 2);
                                                                                              }
                                                                                            }
                                                                                            if (v766)
                                                                                            {
                                                                                              if ((v766 & 1) == 0)
                                                                                              {
                                                                                                v501 = *(void (**)(uint64_t, _WORD *, unsigned int))((unint64_t)v766 & 0xFFFFFFFFFFFFFFFELL);
                                                                                                if (v501)
                                                                                                  v501((uint64_t)&v767, &v767, 2u);
                                                                                              }
                                                                                              v766 = 0;
                                                                                            }
                                                                                            dispatch_release(v764);
                                                                                            if (v765)
                                                                                              _Block_release(v765);
                                                                                            dispatch_release(v762);
                                                                                            if (v763)
                                                                                              _Block_release(v763);
                                                                                            v502 = (unint64_t *)&v731->__shared_weak_owners_;
                                                                                            do
                                                                                              v503 = __ldxr(v502);
                                                                                            while (__stxr(v503 + 1, v502));
                                                                                            v504 = operator new(0x18uLL);
                                                                                            *v504 = &off_1E4A0D530;
                                                                                            v504[1] = v483;
                                                                                            v504[2] = v731;
                                                                                            do
                                                                                              v505 = __ldxr(v502);
                                                                                            while (__stxr(v505 + 1, v502));
                                                                                            v506 = operator new(0x18uLL);
                                                                                            v507 = v506;
                                                                                            *v506 = &off_1E4A0D530;
                                                                                            v506[1] = v483;
                                                                                            v506[2] = v731;
                                                                                            do
                                                                                              v508 = __ldxr(v502);
                                                                                            while (__stxr(v508 + 1, v502));
                                                                                            *((_QWORD *)&block + 1) = v506;
                                                                                            LODWORD(block) = 2;
                                                                                            v509 = *((_QWORD *)&__dst + 1);
                                                                                            if (*((_QWORD *)&__dst + 1) >= (unint64_t)v759)
                                                                                            {
                                                                                              v635 = std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((int **)&__dst, (uint64_t)&block);
                                                                                              v636 = block ^ ((int)block >> 31);
                                                                                              *((_QWORD *)&__dst + 1) = v635;
                                                                                              if (v636 != 2)
                                                                                              {
                                                                                                if (v636 == 1)
                                                                                                {
                                                                                                  v637 = v770;
                                                                                                  if (!(_QWORD)v770)
                                                                                                    goto LABEL_824;
                                                                                                  v638 = (unsigned int *)(v770 + 12);
                                                                                                  do
                                                                                                  {
                                                                                                    v639 = __ldaxr(v638);
                                                                                                    v640 = v639 - 1;
                                                                                                  }
                                                                                                  while (__stlxr(v640, v638));
                                                                                                  if (v640)
                                                                                                    goto LABEL_824;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  v637 = v770;
                                                                                                  if (!(_QWORD)v770)
                                                                                                    goto LABEL_824;
                                                                                                  v712 = (unsigned int *)(v770 + 12);
                                                                                                  do
                                                                                                  {
                                                                                                    v713 = __ldaxr(v712);
                                                                                                    v714 = v713 - 1;
                                                                                                  }
                                                                                                  while (__stlxr(v714, v712));
                                                                                                  if (v714)
                                                                                                    goto LABEL_824;
                                                                                                }
                                                                                                (*(void (**)(uint64_t))(*(_QWORD *)v637 + 24))(v637);
                                                                                                goto LABEL_824;
                                                                                              }
                                                                                              v507 = (_QWORD *)*((_QWORD *)&block + 1);
                                                                                              if (*((_QWORD *)&block + 1))
                                                                                                goto LABEL_823;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              v510 = operator new(0x18uLL);
                                                                                              *v510 = &off_1E4A0D530;
                                                                                              v510[1] = v483;
                                                                                              v510[2] = v731;
                                                                                              do
                                                                                                v511 = __ldxr(v502);
                                                                                              while (__stxr(v511 + 1, v502));
                                                                                              *(_QWORD *)(v509 + 8) = v510;
                                                                                              *(_DWORD *)v509 = 2;
                                                                                              *((_QWORD *)&__dst + 1) = v509 + 24;
LABEL_823:
                                                                                              (*(void (**)(_QWORD *))(*v507 + 8))(v507);
                                                                                            }
LABEL_824:
                                                                                            (*(void (**)(_QWORD *))(*v504 + 8))(v504);
                                                                                            std::__shared_weak_count::__release_weak(v731);
                                                                                            v512 = *(uint64_t ***)(v739 + 112);
                                                                                            *(_QWORD *)&v513 = 0xAAAAAAAAAAAAAAAALL;
                                                                                            *((_QWORD *)&v513 + 1) = 0xAAAAAAAAAAAAAAAALL;
                                                                                            v777 = v513;
                                                                                            v778 = v513;
                                                                                            v775 = v513;
                                                                                            v776 = v513;
                                                                                            v773 = v513;
                                                                                            v774 = v513;
                                                                                            v771 = v513;
                                                                                            v772 = v513;
                                                                                            block = v513;
                                                                                            v770 = v513;
                                                                                            v514 = (pthread_mutex_t *)v512[3];
                                                                                            v779 = 10;
                                                                                            p_block = &block;
                                                                                            v781 = 0;
                                                                                            v782 = v514;
                                                                                            pthread_mutex_lock(v514);
                                                                                            v766 = (uint64_t (**)())0xAAAAAAAAAAAAAAAALL;
                                                                                            v767 = 0xAAAAAAAAAAAAAAAALL;
                                                                                            v515 = (unsigned int *)v512[1];
                                                                                            v740 = (uint64_t ***)v512;
                                                                                            if (v515)
                                                                                            {
                                                                                              v516 = atomic_load(v515 + 2);
                                                                                              if (v516 == 1)
                                                                                              {
                                                                                                v517 = (uint64_t *)**v512;
                                                                                                v518 = v512[2];
                                                                                                v519 = 2;
                                                                                                if (v518 != v517)
                                                                                                  goto LABEL_921;
                                                                                                goto LABEL_920;
                                                                                              }
                                                                                            }
                                                                                            v520 = (uint64_t **)operator new(0x20uLL);
                                                                                            v521 = *v512;
                                                                                            v522 = **v512;
                                                                                            v727 = v520;
                                                                                            v523 = operator new(0x40uLL);
                                                                                            v524 = v523;
                                                                                            *v523 = v523;
                                                                                            v523[1] = v523;
                                                                                            v523[2] = 0;
                                                                                            v525 = *(_QWORD **)(v522 + 8);
                                                                                            if (v525 != (_QWORD *)v522)
                                                                                            {
                                                                                              v526 = 0;
                                                                                              v527 = v523;
                                                                                              do
                                                                                              {
                                                                                                v528 = operator new(0x20uLL);
                                                                                                v528[2] = v525[2];
                                                                                                v529 = v525[3];
                                                                                                v528[3] = v529;
                                                                                                if (v529)
                                                                                                {
                                                                                                  v530 = (unsigned int *)(v529 + 8);
                                                                                                  do
                                                                                                    v531 = __ldxr(v530);
                                                                                                  while (__stxr(v531 + 1, v530));
                                                                                                  v527 = (_QWORD *)*v524;
                                                                                                  v526 = v524[2];
                                                                                                }
                                                                                                *v528 = v527;
                                                                                                v528[1] = v524;
                                                                                                v527[1] = v528;
                                                                                                *v524 = v528;
                                                                                                v524[2] = ++v526;
                                                                                                v525 = (_QWORD *)v525[1];
                                                                                                v527 = v528;
                                                                                              }
                                                                                              while (v525 != (_QWORD *)v522);
                                                                                            }
                                                                                            v524[3] = 0;
                                                                                            v532 = (_QWORD **)(v524 + 3);
                                                                                            v524[4] = 0;
                                                                                            v533 = v524 + 4;
                                                                                            v524[5] = 0;
                                                                                            *((_BYTE *)v524 + 48) = *(_BYTE *)(v522 + 48);
                                                                                            v524[3] = v524 + 4;
                                                                                            v534 = *(_QWORD **)(v522 + 24);
                                                                                            v535 = (_QWORD *)(v522 + 32);
                                                                                            if (v534 == (_QWORD *)(v522 + 32))
                                                                                            {
LABEL_836:
                                                                                              *((_BYTE *)v524 + 56) = *(_BYTE *)(v522 + 56);
                                                                                              v536 = *(_QWORD **)(v522 + 24);
                                                                                              if (v536 != v535)
                                                                                              {
                                                                                                v537 = (_QWORD *)v524[3];
                                                                                                v538 = v524[1];
                                                                                                do
                                                                                                {
                                                                                                  v537[6] = v538;
                                                                                                  v539 = v522;
                                                                                                  if (v536 != v535)
                                                                                                    v539 = v536[6];
                                                                                                  v540 = (_QWORD *)v536[1];
                                                                                                  v541 = v540;
                                                                                                  v542 = v536;
                                                                                                  if (v540)
                                                                                                  {
                                                                                                    do
                                                                                                    {
                                                                                                      v543 = v541;
                                                                                                      v541 = (_QWORD *)*v541;
                                                                                                    }
                                                                                                    while (v541);
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    do
                                                                                                    {
                                                                                                      v543 = (_QWORD *)v542[2];
                                                                                                      v147 = *v543 == (_QWORD)v542;
                                                                                                      v542 = v543;
                                                                                                    }
                                                                                                    while (!v147);
                                                                                                  }
                                                                                                  v544 = v522;
                                                                                                  if (v543 != v535)
                                                                                                    v544 = v543[6];
                                                                                                  while (v539 != v544)
                                                                                                  {
                                                                                                    v539 = *(_QWORD *)(v539 + 8);
                                                                                                    v538 = *(_QWORD *)(v538 + 8);
                                                                                                  }
                                                                                                  if (v540)
                                                                                                  {
                                                                                                    do
                                                                                                    {
                                                                                                      v545 = v540;
                                                                                                      v540 = (_QWORD *)*v540;
                                                                                                    }
                                                                                                    while (v540);
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    do
                                                                                                    {
                                                                                                      v545 = (_QWORD *)v536[2];
                                                                                                      v147 = *v545 == (_QWORD)v536;
                                                                                                      v536 = v545;
                                                                                                    }
                                                                                                    while (!v147);
                                                                                                  }
                                                                                                  v546 = (_QWORD *)v537[1];
                                                                                                  if (v546)
                                                                                                  {
                                                                                                    do
                                                                                                    {
                                                                                                      v547 = v546;
                                                                                                      v546 = (_QWORD *)*v546;
                                                                                                    }
                                                                                                    while (v546);
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    do
                                                                                                    {
                                                                                                      v547 = (_QWORD *)v537[2];
                                                                                                      v147 = *v547 == (_QWORD)v537;
                                                                                                      v537 = v547;
                                                                                                    }
                                                                                                    while (!v147);
                                                                                                  }
                                                                                                  v536 = v545;
                                                                                                  v537 = v547;
                                                                                                }
                                                                                                while (v545 != v535);
                                                                                              }
                                                                                              *v727 = v524;
                                                                                              v727[1] = 0;
                                                                                              v567 = (uint64_t *)operator new(0x18uLL);
                                                                                              v512 = (uint64_t **)v740;
                                                                                              v567[1] = 0x100000001;
                                                                                              *v567 = (uint64_t)off_1E4A0D8B8;
                                                                                              v567[2] = (uint64_t)v524;
                                                                                              v727[1] = v567;
                                                                                              v727[2] = (uint64_t *)v521[2];
                                                                                              v568 = v521[3];
                                                                                              v727[3] = (uint64_t *)v568;
                                                                                              if (v568)
                                                                                              {
                                                                                                v569 = (unsigned int *)(v568 + 8);
                                                                                                do
                                                                                                  v570 = __ldxr(v569);
                                                                                                while (__stxr(v570 + 1, v569));
                                                                                              }
                                                                                              v571 = (uint64_t **)operator new(0x18uLL);
                                                                                              v571[1] = (uint64_t *)0x100000001;
                                                                                              *v571 = (uint64_t *)off_1E4A0D858;
                                                                                              v571[2] = (uint64_t *)v727;
                                                                                              v572 = (unsigned int *)v740[1];
                                                                                              *v740 = v727;
                                                                                              v740[1] = v571;
                                                                                              if (v572)
                                                                                              {
                                                                                                v573 = v572 + 2;
                                                                                                do
                                                                                                {
                                                                                                  v574 = __ldaxr(v573);
                                                                                                  v575 = v574 - 1;
                                                                                                }
                                                                                                while (__stlxr(v575, v573));
                                                                                                if (!v575)
                                                                                                {
                                                                                                  (*(void (**)(unsigned int *))(*(_QWORD *)v572 + 16))(v572);
                                                                                                  v576 = v572 + 3;
                                                                                                  do
                                                                                                  {
                                                                                                    v577 = __ldaxr(v576);
                                                                                                    v578 = v577 - 1;
                                                                                                  }
                                                                                                  while (__stlxr(v578, v576));
                                                                                                  if (!v578)
                                                                                                    (*(void (**)(unsigned int *))(*(_QWORD *)v572 + 24))(v572);
                                                                                                }
                                                                                              }
                                                                                              v519 = 0;
                                                                                              v517 = **v740;
LABEL_920:
                                                                                              v518 = (uint64_t *)v517[1];
                                                                                              if (v517 == v518)
                                                                                                goto LABEL_1024;
LABEL_921:
                                                                                              v579 = 0;
                                                                                              v580 = v519 - 1;
LABEL_929:
                                                                                              v583 = v518[2];
                                                                                              v584 = *(uint64_t **)(v583 + 32);
                                                                                              if (!v584)
                                                                                                goto LABEL_922;
                                                                                              for (k = *v584; ; k += 24)
                                                                                              {
                                                                                                if (k == v584[1])
                                                                                                  goto LABEL_922;
                                                                                                if ((*(_DWORD *)k ^ (*(int *)k >> 31)) > 1)
                                                                                                {
                                                                                                  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(k + 8) + 24))(*(_QWORD *)(k + 8)) & 1) != 0)
                                                                                                    goto LABEL_938;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  v586 = *(_QWORD *)(k + 16);
                                                                                                  if (!v586 || (v587 = atomic_load((unsigned int *)(v586 + 8))) == 0)
                                                                                                  {
LABEL_938:
                                                                                                    if (*(_BYTE *)(v583 + 24))
                                                                                                    {
                                                                                                      *(_BYTE *)(v583 + 24) = 0;
                                                                                                      boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v583, &block);
                                                                                                    }
LABEL_922:
                                                                                                    v581 = v518[2];
                                                                                                    if (*(_BYTE *)(v581 + 24))
                                                                                                    {
                                                                                                      v517 = (uint64_t *)v518[1];
                                                                                                      goto LABEL_924;
                                                                                                    }
                                                                                                    v588 = **v512;
                                                                                                    v590 = (uint64_t **)(v588 + 32);
                                                                                                    v589 = *(char **)(v588 + 32);
                                                                                                    if (!v589)
                                                                                                    {
                                                                                                      if (*(uint64_t **)(v588 + 80) != v518)
                                                                                                        goto LABEL_1015;
                                                                                                      v612 = (uint64_t *)v518[1];
                                                                                                      v614 = (uint64_t **)(v588 + 32);
                                                                                                      v593 = (uint64_t *)(v588 + 32);
                                                                                                      if (v612 != (uint64_t *)v588)
                                                                                                        goto LABEL_1011;
                                                                                                      goto LABEL_993;
                                                                                                    }
                                                                                                    v591 = *(_DWORD *)(v581 + 64);
                                                                                                    v592 = *(_DWORD *)(v581 + 72);
                                                                                                    v593 = (uint64_t *)(v588 + 32);
                                                                                                    v594 = *(_QWORD *)(v588 + 32);
                                                                                                    if (v591 == 1)
                                                                                                    {
                                                                                                      v593 = (uint64_t *)(v588 + 32);
                                                                                                      v595 = *(_QWORD *)(v588 + 32);
                                                                                                      do
                                                                                                      {
                                                                                                        while (1)
                                                                                                        {
                                                                                                          v608 = *(_DWORD *)(v595 + 32);
                                                                                                          v609 = v608 < 1;
                                                                                                          if (v608 == 1)
                                                                                                            v609 = *(_DWORD *)(v595 + 40) < v592;
                                                                                                          if (v609)
                                                                                                            break;
                                                                                                          v593 = (uint64_t *)v595;
                                                                                                          v595 = *(_QWORD *)v595;
                                                                                                          if (!v595)
                                                                                                            goto LABEL_953;
                                                                                                        }
                                                                                                        v595 = *(_QWORD *)(v595 + 8);
                                                                                                      }
                                                                                                      while (v595);
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      do
                                                                                                      {
                                                                                                        v596 = *(_DWORD *)(v594 + 32);
                                                                                                        v597 = v596 == v591;
                                                                                                        v598 = v596 < v591;
                                                                                                        if (v596 >= v591)
                                                                                                          v599 = (uint64_t *)v594;
                                                                                                        else
                                                                                                          v599 = (uint64_t *)(v594 + 8);
                                                                                                        if (v598)
                                                                                                          v600 = v593;
                                                                                                        else
                                                                                                          v600 = (uint64_t *)v594;
                                                                                                        if (v597)
                                                                                                        {
                                                                                                          v599 = (uint64_t *)v594;
                                                                                                          v593 = (uint64_t *)v594;
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                          v593 = v600;
                                                                                                        }
                                                                                                        v594 = *v599;
                                                                                                      }
                                                                                                      while (*v599);
                                                                                                    }
LABEL_953:
                                                                                                    if ((uint64_t *)v593[6] == v518)
                                                                                                    {
                                                                                                      v601 = (uint64_t **)(v588 + 32);
                                                                                                      v602 = *(uint64_t ***)(v588 + 32);
                                                                                                      if (v591 != 1)
                                                                                                      {
                                                                                                        do
                                                                                                        {
                                                                                                          v603 = *((_DWORD *)v602 + 8);
                                                                                                          v604 = (uint64_t ***)(v602 + 1);
                                                                                                          v605 = v591 == v603;
                                                                                                          v606 = v591 < v603;
                                                                                                          if (v591 >= v603)
                                                                                                            v607 = (uint64_t ***)(v602 + 1);
                                                                                                          else
                                                                                                            v607 = (uint64_t ***)v602;
                                                                                                          if (!v606)
                                                                                                            v602 = v601;
                                                                                                          if (v605)
                                                                                                            v607 = v604;
                                                                                                          else
                                                                                                            v601 = v602;
                                                                                                          v602 = *v607;
                                                                                                        }
                                                                                                        while (*v607);
LABEL_977:
                                                                                                        v611 = (uint64_t *)**v512;
                                                                                                        if (v601 != v590)
                                                                                                          v611 = v601[6];
                                                                                                        v612 = (uint64_t *)v518[1];
                                                                                                        if (v612 != v611)
                                                                                                        {
                                                                                                          if (v591 != 1)
                                                                                                          {
                                                                                                            v613 = *((_DWORD *)v589 + 8);
                                                                                                            if (v591 == v613)
                                                                                                              goto LABEL_1014;
                                                                                                            while (1)
                                                                                                            {
                                                                                                              if (v591 < v613)
                                                                                                              {
                                                                                                                v620 = *(_QWORD *)v589;
                                                                                                                if (!*(_QWORD *)v589)
                                                                                                                {
                                                                                                                  v590 = (uint64_t **)v589;
LABEL_1010:
                                                                                                                  v614 = (uint64_t **)v589;
LABEL_1011:
                                                                                                                  v589 = (char *)operator new(0x38uLL);
                                                                                                                  v621 = *(_QWORD *)(v581 + 64);
                                                                                                                  *((_DWORD *)v589 + 10) = *(_DWORD *)(v581 + 72);
                                                                                                                  *((_QWORD *)v589 + 4) = v621;
                                                                                                                  *((_QWORD *)v589 + 6) = 0;
                                                                                                                  *(_QWORD *)v589 = 0;
                                                                                                                  *((_QWORD *)v589 + 1) = 0;
                                                                                                                  *((_QWORD *)v589 + 2) = v614;
                                                                                                                  *v590 = (uint64_t *)v589;
                                                                                                                  v622 = **(_QWORD **)(v588 + 24);
                                                                                                                  v623 = (uint64_t *)v589;
                                                                                                                  if (v622)
                                                                                                                  {
                                                                                                                    *(_QWORD *)(v588 + 24) = v622;
                                                                                                                    v623 = *v590;
                                                                                                                  }
                                                                                                                  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v588 + 32), v623);
                                                                                                                  ++*(_QWORD *)(v588 + 40);
LABEL_1014:
                                                                                                                  *((_QWORD *)v589 + 6) = v612;
                                                                                                                  goto LABEL_1015;
                                                                                                                }
                                                                                                              }
                                                                                                              else
                                                                                                              {
                                                                                                                if (v613 >= v591)
                                                                                                                  goto LABEL_1014;
                                                                                                                v620 = *((_QWORD *)v589 + 1);
                                                                                                                if (!v620)
                                                                                                                {
                                                                                                                  v590 = (uint64_t **)(v589 + 8);
                                                                                                                  goto LABEL_1010;
                                                                                                                }
                                                                                                              }
                                                                                                              v613 = *(_DWORD *)(v620 + 32);
                                                                                                              v589 = (char *)v620;
                                                                                                              if (v591 == v613)
                                                                                                              {
                                                                                                                *(_QWORD *)(v620 + 48) = v612;
                                                                                                                goto LABEL_1015;
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                          while (1)
                                                                                                          {
                                                                                                            v614 = (uint64_t **)v589;
                                                                                                            v615 = *((_DWORD *)v589 + 8);
                                                                                                            if (v615 == 1)
                                                                                                            {
                                                                                                              v616 = *((_DWORD *)v589 + 10);
                                                                                                              if (v616 <= v592)
                                                                                                              {
                                                                                                                if (v616 >= v592)
                                                                                                                {
                                                                                                                  *((_QWORD *)v589 + 6) = v612;
                                                                                                                  goto LABEL_1015;
                                                                                                                }
LABEL_989:
                                                                                                                v589 = (char *)*((_QWORD *)v589 + 1);
                                                                                                                if (!v589)
                                                                                                                {
                                                                                                                  v590 = v614 + 1;
                                                                                                                  goto LABEL_1011;
                                                                                                                }
                                                                                                                continue;
                                                                                                              }
                                                                                                            }
                                                                                                            else if (v615 <= 1)
                                                                                                            {
                                                                                                              goto LABEL_989;
                                                                                                            }
                                                                                                            v589 = *(char **)v589;
                                                                                                            if (!*v614)
                                                                                                            {
                                                                                                              v590 = v614;
                                                                                                              goto LABEL_1011;
                                                                                                            }
                                                                                                          }
                                                                                                        }
LABEL_993:
                                                                                                        v617 = (uint64_t *)v593[1];
                                                                                                        v618 = v593;
                                                                                                        if (v617)
                                                                                                        {
                                                                                                          do
                                                                                                          {
                                                                                                            v619 = v617;
                                                                                                            v617 = (uint64_t *)*v617;
                                                                                                          }
                                                                                                          while (v617);
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                          do
                                                                                                          {
                                                                                                            v619 = (uint64_t *)v618[2];
                                                                                                            v147 = *v619 == (_QWORD)v618;
                                                                                                            v618 = v619;
                                                                                                          }
                                                                                                          while (!v147);
                                                                                                        }
                                                                                                        if (*(uint64_t **)(v588 + 24) == v593)
                                                                                                          *(_QWORD *)(v588 + 24) = v619;
                                                                                                        --*(_QWORD *)(v588 + 40);
                                                                                                        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v589, v593);
                                                                                                        operator delete(v593);
                                                                                                        goto LABEL_1015;
                                                                                                      }
                                                                                                      while (1)
                                                                                                      {
                                                                                                        v610 = *((_DWORD *)v602 + 8);
                                                                                                        if (v610 == 1)
                                                                                                        {
                                                                                                          if (v592 >= *((_DWORD *)v602 + 10))
                                                                                                            goto LABEL_971;
                                                                                                        }
                                                                                                        else if (v610 <= 1)
                                                                                                        {
LABEL_971:
                                                                                                          v602 = (uint64_t **)v602[1];
                                                                                                          if (!v602)
                                                                                                            goto LABEL_977;
                                                                                                          continue;
                                                                                                        }
                                                                                                        v601 = v602;
                                                                                                        v602 = (uint64_t **)*v602;
                                                                                                        if (!v602)
                                                                                                          goto LABEL_977;
                                                                                                      }
                                                                                                    }
LABEL_1015:
                                                                                                    v624 = *v518;
                                                                                                    v517 = (uint64_t *)v518[1];
                                                                                                    *(_QWORD *)(v624 + 8) = v517;
                                                                                                    *(_QWORD *)v518[1] = v624;
                                                                                                    --*(_QWORD *)(v588 + 16);
                                                                                                    v625 = (unsigned int *)v518[3];
                                                                                                    v512 = (uint64_t **)v740;
                                                                                                    if (v625)
                                                                                                    {
                                                                                                      v626 = v625 + 2;
                                                                                                      do
                                                                                                      {
                                                                                                        v627 = __ldaxr(v626);
                                                                                                        v628 = v627 - 1;
                                                                                                      }
                                                                                                      while (__stlxr(v628, v626));
                                                                                                      if (!v628)
                                                                                                      {
                                                                                                        (*(void (**)(unsigned int *))(*(_QWORD *)v625 + 16))(v625);
                                                                                                        v629 = v625 + 3;
                                                                                                        do
                                                                                                        {
                                                                                                          v630 = __ldaxr(v629);
                                                                                                          v631 = v630 - 1;
                                                                                                        }
                                                                                                        while (__stlxr(v631, v629));
                                                                                                        if (!v631)
                                                                                                          (*(void (**)(unsigned int *))(*(_QWORD *)v625 + 24))(v625);
                                                                                                      }
                                                                                                    }
                                                                                                    operator delete(v518);
LABEL_924:
                                                                                                    v582 = v517 != (uint64_t *)**v512 && v580 >= ++v579;
                                                                                                    v518 = v517;
                                                                                                    if (!v582)
                                                                                                    {
LABEL_1024:
                                                                                                      v512[2] = v517;
                                                                                                      v632 = operator new(0x50uLL);
                                                                                                      v632[1] = 0;
                                                                                                      v632[2] = 0;
                                                                                                      *((_BYTE *)v632 + 24) = 1;
                                                                                                      *((_DWORD *)v632 + 7) = 1;
                                                                                                      *v632 = off_1E4A0D918;
                                                                                                      v633 = operator new(0x38uLL);
                                                                                                      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v633, (uint64_t *)&__dst);
                                                                                                      v633[3] = 0;
                                                                                                      v634 = *((_QWORD *)&v759 + 1);
                                                                                                      if (*((_QWORD *)&v759 + 1))
                                                                                                      {
                                                                                                        v633[3] = *((_QWORD *)&v759 + 1);
                                                                                                        if ((v634 & 1) != 0)
                                                                                                        {
                                                                                                          *((_OWORD *)v633 + 2) = v760;
                                                                                                          v633[6] = v761;
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                          (*(void (**)(__int128 *, _QWORD *, _QWORD))(v634 & 0xFFFFFFFFFFFFFFFELL))(&v760, v633 + 4, 0);
                                                                                                        }
                                                                                                      }
                                                                                                      v632[4] = v633;
                                                                                                      v632[5] = 0;
                                                                                                      v641 = operator new(0x18uLL);
                                                                                                      v641[1] = 0x100000001;
                                                                                                      *v641 = off_1E4A0D970;
                                                                                                      v641[2] = v633;
                                                                                                      v632[5] = v641;
                                                                                                      v632[6] = v512[3];
                                                                                                      v642 = v512[4];
                                                                                                      v632[7] = v642;
                                                                                                      if (v642)
                                                                                                      {
                                                                                                        v643 = (unsigned int *)(v642 + 1);
                                                                                                        do
                                                                                                          v644 = __ldxr(v643);
                                                                                                        while (__stxr(v644 + 1, v643));
                                                                                                      }
                                                                                                      *((_DWORD *)v632 + 16) = 0;
                                                                                                      *((_BYTE *)v632 + 68) = 0;
                                                                                                      v766 = (uint64_t (**)())v632;
                                                                                                      v645 = (unsigned int *)operator new(0x18uLL);
                                                                                                      *((_QWORD *)v645 + 1) = 0x100000001;
                                                                                                      v646 = v645 + 2;
                                                                                                      *(_QWORD *)v645 = off_1E4A0D9D0;
                                                                                                      *((_QWORD *)v645 + 2) = v632;
                                                                                                      v767 = (unint64_t)v645;
                                                                                                      v647 = (uint64_t *)**v512;
                                                                                                      v648 = operator new(0x20uLL);
                                                                                                      v649 = v648;
                                                                                                      v650 = v647 + 4;
                                                                                                      v648[2] = v632;
                                                                                                      v648[3] = v645;
                                                                                                      do
                                                                                                        v651 = __ldxr(v646);
                                                                                                      while (__stxr(v651 + 1, v646));
                                                                                                      v652 = *v647;
                                                                                                      *(_QWORD *)(v652 + 8) = v648;
                                                                                                      *v648 = v652;
                                                                                                      *v647 = (uint64_t)v648;
                                                                                                      v648[1] = v647;
                                                                                                      ++v647[2];
                                                                                                      v653 = (uint64_t *)v647[4];
                                                                                                      if (!v653)
                                                                                                      {
                                                                                                        v653 = v647 + 4;
                                                                                                        goto LABEL_1061;
                                                                                                      }
                                                                                                      v654 = v647 + 4;
                                                                                                      v655 = v647[4];
                                                                                                      do
                                                                                                      {
                                                                                                        v656 = *(_DWORD *)(v655 + 32);
                                                                                                        v657 = v656 == 2;
                                                                                                        v658 = v656 < 2;
                                                                                                        if (v656 >= 2)
                                                                                                          v659 = (uint64_t *)v655;
                                                                                                        else
                                                                                                          v659 = (uint64_t *)(v655 + 8);
                                                                                                        if (!v658)
                                                                                                          v654 = (uint64_t *)v655;
                                                                                                        if (v657)
                                                                                                        {
                                                                                                          v659 = (uint64_t *)v655;
                                                                                                          v654 = (uint64_t *)v655;
                                                                                                        }
                                                                                                        v655 = *v659;
                                                                                                      }
                                                                                                      while (*v659);
                                                                                                      if (v654 != v650 && *((_DWORD *)v654 + 8) == 2)
                                                                                                      {
LABEL_1052:
                                                                                                        *((_DWORD *)v632 + 16) = 2;
                                                                                                        *(_QWORD *)((char *)v632 + 68) = 0xAAAAAAAAAAAAAA00;
                                                                                                        goto LABEL_1064;
                                                                                                      }
                                                                                                      v660 = *((_DWORD *)v653 + 8);
                                                                                                      while (1)
                                                                                                      {
                                                                                                        if (v660 == 2)
                                                                                                          goto LABEL_1052;
                                                                                                        if (v660 < 3)
                                                                                                        {
                                                                                                          v661 = (uint64_t *)v653[1];
                                                                                                          if (!v661)
                                                                                                          {
                                                                                                            v650 = v653 + 1;
LABEL_1061:
                                                                                                            v662 = operator new(0x38uLL);
                                                                                                            v662[4] = 0xAAAAAA0000000002;
                                                                                                            *((_DWORD *)v662 + 10) = -1431655766;
                                                                                                            v662[6] = v649;
                                                                                                            *v662 = 0;
                                                                                                            v662[1] = 0;
                                                                                                            v662[2] = v653;
                                                                                                            *v650 = (uint64_t)v662;
                                                                                                            v663 = *(_QWORD *)v647[3];
                                                                                                            if (v663)
                                                                                                            {
                                                                                                              v647[3] = v663;
                                                                                                              v662 = (_QWORD *)*v650;
                                                                                                            }
                                                                                                            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v647[4], v662);
                                                                                                            ++v647[5];
                                                                                                            v632 = v766;
                                                                                                            v645 = (unsigned int *)v767;
                                                                                                            *((_DWORD *)v766 + 16) = 2;
                                                                                                            *(_QWORD *)((char *)v632 + 68) = 0xAAAAAAAAAAAAAA00;
                                                                                                            if (v645)
                                                                                                            {
LABEL_1064:
                                                                                                              v664 = v645 + 3;
                                                                                                              do
                                                                                                                v665 = __ldxr(v664);
                                                                                                              while (__stxr(v665 + 1, v664));
                                                                                                              *(_QWORD *)&v743 = v632;
                                                                                                              *((_QWORD *)&v743 + 1) = v645;
                                                                                                              do
                                                                                                                v666 = __ldxr(v664);
                                                                                                              while (__stxr(v666 + 1, v664));
                                                                                                              do
                                                                                                              {
                                                                                                                v667 = __ldaxr(v664);
                                                                                                                v668 = v667 - 1;
                                                                                                              }
                                                                                                              while (__stlxr(v668, v664));
                                                                                                              if (!v668)
                                                                                                                (*(void (**)(unsigned int *))(*(_QWORD *)v645 + 24))(v645);
                                                                                                              v669 = (unsigned int *)v767;
                                                                                                              if (v767)
                                                                                                              {
LABEL_1072:
                                                                                                                v670 = v669 + 2;
                                                                                                                do
                                                                                                                {
                                                                                                                  v671 = __ldaxr(v670);
                                                                                                                  v672 = v671 - 1;
                                                                                                                }
                                                                                                                while (__stlxr(v672, v670));
                                                                                                                if (!v672)
                                                                                                                {
                                                                                                                  (*(void (**)(unsigned int *))(*(_QWORD *)v669 + 16))(v669);
                                                                                                                  v673 = v669 + 3;
                                                                                                                  do
                                                                                                                  {
                                                                                                                    v674 = __ldaxr(v673);
                                                                                                                    v675 = v674 - 1;
                                                                                                                  }
                                                                                                                  while (__stlxr(v675, v673));
                                                                                                                  if (!v675)
                                                                                                                    (*(void (**)(unsigned int *))(*(_QWORD *)v669 + 24))(v669);
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              v743 = (unint64_t)v632;
                                                                                                              v669 = (unsigned int *)v767;
                                                                                                              if (v767)
                                                                                                                goto LABEL_1072;
                                                                                                            }
                                                                                                            pthread_mutex_unlock(v782);
                                                                                                            v676 = (char *)p_block;
                                                                                                            if (p_block)
                                                                                                            {
                                                                                                              if (v781 - 1 >= 0)
                                                                                                              {
                                                                                                                v677 = (char *)p_block + 16 * v781;
                                                                                                                do
                                                                                                                {
                                                                                                                  v678 = (unsigned int *)*((_QWORD *)v677 - 1);
                                                                                                                  if (v678)
                                                                                                                  {
                                                                                                                    v679 = v678 + 2;
                                                                                                                    do
                                                                                                                    {
                                                                                                                      v680 = __ldaxr(v679);
                                                                                                                      v681 = v680 - 1;
                                                                                                                    }
                                                                                                                    while (__stlxr(v681, v679));
                                                                                                                    if (!v681)
                                                                                                                    {
                                                                                                                      (*(void (**)(unsigned int *))(*(_QWORD *)v678 + 16))(v678);
                                                                                                                      v682 = v678 + 3;
                                                                                                                      do
                                                                                                                      {
                                                                                                                        v683 = __ldaxr(v682);
                                                                                                                        v684 = v683 - 1;
                                                                                                                      }
                                                                                                                      while (__stlxr(v684, v682));
                                                                                                                      if (!v684)
                                                                                                                        (*(void (**)(unsigned int *))(*(_QWORD *)v678 + 24))(v678);
                                                                                                                    }
                                                                                                                  }
                                                                                                                  v677 -= 16;
                                                                                                                }
                                                                                                                while (v677 > v676);
                                                                                                              }
                                                                                                              if (v779 >= 0xB)
                                                                                                                operator delete(p_block);
                                                                                                            }
                                                                                                            if (*((_QWORD *)&v759 + 1))
                                                                                                            {
                                                                                                              if ((BYTE8(v759) & 1) == 0)
                                                                                                              {
                                                                                                                v685 = *(void (**)(__int128 *, __int128 *, uint64_t))(*((_QWORD *)&v759 + 1) & 0xFFFFFFFFFFFFFFFELL);
                                                                                                                if (v685)
                                                                                                                  v685(&v760, &v760, 2);
                                                                                                              }
                                                                                                              *((_QWORD *)&v759 + 1) = 0;
                                                                                                            }
                                                                                                            v686 = __dst;
                                                                                                            if (!(_QWORD)__dst)
                                                                                                              goto LABEL_1119;
                                                                                                            v687 = *((_QWORD *)&__dst + 1);
                                                                                                            v688 = (void *)__dst;
                                                                                                            if (*((_QWORD *)&__dst + 1) == (_QWORD)__dst)
                                                                                                              goto LABEL_1118;
                                                                                                            v689 = *((_QWORD *)&__dst + 1);
                                                                                                            while (2)
                                                                                                            {
                                                                                                              v690 = *(_DWORD *)(v689 - 24);
                                                                                                              v689 -= 24;
                                                                                                              v691 = v690 ^ (v690 >> 31);
                                                                                                              if (v691 == 2)
                                                                                                              {
                                                                                                                v696 = *(_QWORD *)(v687 - 16);
                                                                                                                if (v696)
                                                                                                                  (*(void (**)(uint64_t))(*(_QWORD *)v696 + 8))(v696);
                                                                                                              }
                                                                                                              else if (v691 == 1)
                                                                                                              {
                                                                                                                v692 = *(unsigned int **)(v687 - 8);
                                                                                                                if (v692)
                                                                                                                {
                                                                                                                  v693 = v692 + 3;
                                                                                                                  do
                                                                                                                  {
                                                                                                                    v694 = __ldaxr(v693);
                                                                                                                    v695 = v694 - 1;
                                                                                                                  }
                                                                                                                  while (__stlxr(v695, v693));
                                                                                                                  if (!v695)
                                                                                                                    goto LABEL_1109;
                                                                                                                }
                                                                                                              }
                                                                                                              else
                                                                                                              {
                                                                                                                v692 = *(unsigned int **)(v687 - 8);
                                                                                                                if (v692)
                                                                                                                {
                                                                                                                  v697 = v692 + 3;
                                                                                                                  do
                                                                                                                  {
                                                                                                                    v698 = __ldaxr(v697);
                                                                                                                    v699 = v698 - 1;
                                                                                                                  }
                                                                                                                  while (__stlxr(v699, v697));
                                                                                                                  if (!v699)
LABEL_1109:
                                                                                                                    (*(void (**)(unsigned int *))(*(_QWORD *)v692 + 24))(v692);
                                                                                                                }
                                                                                                              }
                                                                                                              v687 = v689;
                                                                                                              if (v689 == v686)
                                                                                                              {
                                                                                                                v688 = (void *)__dst;
LABEL_1118:
                                                                                                                *((_QWORD *)&__dst + 1) = v686;
                                                                                                                operator delete(v688);
LABEL_1119:
                                                                                                                dispatch_release(v756);
                                                                                                                if (v757)
                                                                                                                  _Block_release(v757);
                                                                                                                v700 = (unint64_t *)&v731->__shared_owners_;
                                                                                                                do
                                                                                                                  v701 = __ldaxr(v700);
                                                                                                                while (__stlxr(v701 - 1, v700));
                                                                                                                if (v701)
                                                                                                                {
                                                                                                                  v702 = v728;
                                                                                                                  if (!v728)
                                                                                                                  {
LABEL_1128:
                                                                                                                    v703 = operator new(0x20uLL);
                                                                                                                    v703[1] = v743;
                                                                                                                    v704 = a1[24];
                                                                                                                    *(_QWORD *)v703 = v704;
                                                                                                                    *((_QWORD *)v703 + 1) = aBlocka;
                                                                                                                    *(_QWORD *)(v704 + 8) = v703;
                                                                                                                    a1[24] = v703;
                                                                                                                    ++a1[26];
                                                                                                                    return v723;
                                                                                                                  }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                  ((void (*)(std::__shared_weak_count *))v731->__on_zero_shared)(v731);
                                                                                                                  std::__shared_weak_count::__release_weak(v731);
                                                                                                                  v702 = v728;
                                                                                                                  if (!v728)
                                                                                                                    goto LABEL_1128;
                                                                                                                }
                                                                                                                _Block_release(v702);
                                                                                                                goto LABEL_1128;
                                                                                                              }
                                                                                                              continue;
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                          v661 = (uint64_t *)*v653;
                                                                                                          v650 = v653;
                                                                                                          if (!*v653)
                                                                                                            goto LABEL_1061;
                                                                                                        }
                                                                                                        v660 = *((_DWORD *)v661 + 8);
                                                                                                        v653 = v661;
                                                                                                      }
                                                                                                    }
                                                                                                    goto LABEL_929;
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                            while (2)
                                                                                            {
                                                                                              v548 = *((_DWORD *)v534 + 8);
                                                                                              v549 = (_QWORD *)*v533;
                                                                                              v550 = v524 + 4;
                                                                                              if (*v532 == v533)
                                                                                                goto LABEL_873;
                                                                                              v551 = (_QWORD *)*v533;
                                                                                              v552 = v524 + 4;
                                                                                              if (v549)
                                                                                              {
                                                                                                do
                                                                                                {
                                                                                                  v550 = v551;
                                                                                                  v551 = (_QWORD *)v551[1];
                                                                                                }
                                                                                                while (v551);
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                do
                                                                                                {
                                                                                                  v550 = (_QWORD *)v552[2];
                                                                                                  v147 = *v550 == (_QWORD)v552;
                                                                                                  v552 = v550;
                                                                                                }
                                                                                                while (v147);
                                                                                              }
                                                                                              v553 = *((_DWORD *)v534 + 10);
                                                                                              v554 = *((_DWORD *)v550 + 8);
                                                                                              if (v554 == v548)
                                                                                              {
                                                                                                if (v548 == 1)
                                                                                                {
                                                                                                  if (*((_DWORD *)v550 + 10) >= v553)
                                                                                                  {
                                                                                                    v555 = (_QWORD *)*v533;
                                                                                                    v556 = v524 + 4;
                                                                                                    v557 = v524 + 4;
                                                                                                    if (v549)
                                                                                                      goto LABEL_885;
LABEL_892:
                                                                                                    v561 = operator new(0x38uLL);
                                                                                                    v562 = *((_OWORD *)v534 + 2);
                                                                                                    v561[6] = v534[6];
                                                                                                    *((_OWORD *)v561 + 2) = v562;
                                                                                                    *v561 = 0;
                                                                                                    v561[1] = 0;
                                                                                                    v561[2] = v557;
                                                                                                    *v556 = v561;
                                                                                                    v563 = (_QWORD *)**v532;
                                                                                                    if (v563)
                                                                                                    {
                                                                                                      *v532 = v563;
                                                                                                      v561 = (_QWORD *)*v556;
                                                                                                    }
                                                                                                    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v524[4], v561);
                                                                                                    ++v524[5];
LABEL_895:
                                                                                                    v564 = (_QWORD *)v534[1];
                                                                                                    if (v564)
                                                                                                    {
                                                                                                      do
                                                                                                      {
                                                                                                        v565 = v564;
                                                                                                        v564 = (_QWORD *)*v564;
                                                                                                      }
                                                                                                      while (v564);
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      do
                                                                                                      {
                                                                                                        v565 = (_QWORD *)v534[2];
                                                                                                        v147 = *v565 == (_QWORD)v534;
                                                                                                        v534 = v565;
                                                                                                      }
                                                                                                      while (!v147);
                                                                                                    }
                                                                                                    v534 = v565;
                                                                                                    if (v565 == v535)
                                                                                                      goto LABEL_836;
                                                                                                    continue;
                                                                                                  }
LABEL_873:
                                                                                                  if (v549)
                                                                                                    v557 = v550;
                                                                                                  else
                                                                                                    v557 = v524 + 4;
                                                                                                  if (v549)
                                                                                                    v556 = v550 + 1;
                                                                                                  else
                                                                                                    v556 = v524 + 4;
                                                                                                  if (!*v556)
                                                                                                    goto LABEL_892;
                                                                                                  goto LABEL_895;
                                                                                                }
                                                                                              }
                                                                                              else if (v554 < v548)
                                                                                              {
                                                                                                goto LABEL_873;
                                                                                              }
                                                                                              break;
                                                                                            }
                                                                                            v556 = v524 + 4;
                                                                                            v557 = v524 + 4;
                                                                                            if (!v549)
                                                                                              goto LABEL_892;
                                                                                            v555 = (_QWORD *)*v533;
                                                                                            if (v548 != 1)
                                                                                            {
                                                                                              v558 = *((_DWORD *)v549 + 8);
                                                                                              v557 = (_QWORD *)*v533;
                                                                                              while (v548 != v558)
                                                                                              {
                                                                                                if (v548 < v558)
                                                                                                {
                                                                                                  v566 = *v557;
                                                                                                  v556 = v557;
                                                                                                  if (!*v557)
                                                                                                    goto LABEL_892;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  if (v558 >= v548)
                                                                                                    goto LABEL_895;
                                                                                                  v566 = v557[1];
                                                                                                  if (!v566)
                                                                                                    goto LABEL_891;
                                                                                                }
                                                                                                v558 = *(_DWORD *)(v566 + 32);
                                                                                                v557 = (_QWORD *)v566;
                                                                                              }
                                                                                              goto LABEL_895;
                                                                                            }
                                                                                            while (1)
                                                                                            {
LABEL_885:
                                                                                              v557 = v555;
                                                                                              v559 = *((_DWORD *)v555 + 8);
                                                                                              if (v559 == 1)
                                                                                              {
                                                                                                v560 = *((_DWORD *)v555 + 10);
                                                                                                if (v560 > v553)
                                                                                                  goto LABEL_884;
                                                                                                if (v560 >= v553)
                                                                                                  goto LABEL_895;
                                                                                              }
                                                                                              else if (v559 > 1)
                                                                                              {
LABEL_884:
                                                                                                v555 = (_QWORD *)*v555;
                                                                                                v556 = v557;
                                                                                                if (!*v557)
                                                                                                  goto LABEL_892;
                                                                                                continue;
                                                                                              }
                                                                                              v555 = (_QWORD *)v555[1];
                                                                                              if (!v555)
                                                                                              {
LABEL_891:
                                                                                                v556 = v557 + 1;
                                                                                                goto LABEL_892;
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                          v495 = 0;
                                                                                          v496 = 0;
                                                                                          v497 = 0;
LABEL_788:
                                                                                          dispatch_retain(v486);
                                                                                          v492 = 0;
                                                                                          v493 = 0;
                                                                                          v494 = 0;
                                                                                          v767 = (unint64_t)v486;
                                                                                          v498 = 1;
                                                                                          goto LABEL_789;
                                                                                        }
                                                                                        v495 = 0;
                                                                                        v496 = 0;
LABEL_787:
                                                                                        dispatch_retain(v486);
                                                                                        v491 = 0;
                                                                                        v497 = 1;
                                                                                        goto LABEL_788;
                                                                                      }
                                                                                      v495 = 0;
LABEL_786:
                                                                                      dispatch_retain(v486);
                                                                                      v726 = 0;
                                                                                      v496 = 1;
                                                                                      goto LABEL_787;
                                                                                    }
LABEL_785:
                                                                                    dispatch_retain(v486);
                                                                                    v722 = 0;
                                                                                    v495 = 1;
                                                                                    goto LABEL_786;
                                                                                  }
                                                                                }
                                                                                else
                                                                                {
                                                                                  v765 = 0;
                                                                                  dispatch_retain(v486);
                                                                                }
                                                                                dispatch_retain(v486);
                                                                                v766 = 0;
                                                                                goto LABEL_785;
                                                                              }
                                                                              continue;
                                                                            }
                                                                          }
                                                                        }
                                                                        else
                                                                        {
                                                                          v436 = (uint64_t *)*v428;
                                                                          v425 = v428;
                                                                          if (!*v428)
                                                                            goto LABEL_701;
                                                                        }
                                                                        v435 = *((_DWORD *)v436 + 8);
                                                                        v428 = v436;
                                                                      }
                                                                    }
                                                                    goto LABEL_569;
                                                                  }
                                                                }
                                                              }
                                                            }
                                                            while (2)
                                                            {
                                                              v323 = *((_DWORD *)v309 + 8);
                                                              v324 = (_QWORD *)*v308;
                                                              v325 = v299 + 4;
                                                              if (*v307 == v308)
                                                                goto LABEL_513;
                                                              v326 = (_QWORD *)*v308;
                                                              v327 = v299 + 4;
                                                              if (v324)
                                                              {
                                                                do
                                                                {
                                                                  v325 = v326;
                                                                  v326 = (_QWORD *)v326[1];
                                                                }
                                                                while (v326);
                                                              }
                                                              else
                                                              {
                                                                do
                                                                {
                                                                  v325 = (_QWORD *)v327[2];
                                                                  v147 = *v325 == (_QWORD)v327;
                                                                  v327 = v325;
                                                                }
                                                                while (v147);
                                                              }
                                                              v328 = *((_DWORD *)v309 + 10);
                                                              v329 = *((_DWORD *)v325 + 8);
                                                              if (v329 == v323)
                                                              {
                                                                if (v323 == 1)
                                                                {
                                                                  if (*((_DWORD *)v325 + 10) >= v328)
                                                                  {
                                                                    v330 = (_QWORD *)*v308;
                                                                    v331 = v299 + 4;
                                                                    v332 = v299 + 4;
                                                                    if (v324)
                                                                      goto LABEL_525;
LABEL_532:
                                                                    v336 = operator new(0x38uLL);
                                                                    v337 = *((_OWORD *)v309 + 2);
                                                                    v336[6] = v309[6];
                                                                    *((_OWORD *)v336 + 2) = v337;
                                                                    *v336 = 0;
                                                                    v336[1] = 0;
                                                                    v336[2] = v332;
                                                                    *v331 = v336;
                                                                    v338 = (_QWORD *)**v307;
                                                                    if (v338)
                                                                    {
                                                                      *v307 = v338;
                                                                      v336 = (_QWORD *)*v331;
                                                                    }
                                                                    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v299[4], v336);
                                                                    ++v299[5];
LABEL_535:
                                                                    v339 = (_QWORD *)v309[1];
                                                                    if (v339)
                                                                    {
                                                                      do
                                                                      {
                                                                        v340 = v339;
                                                                        v339 = (_QWORD *)*v339;
                                                                      }
                                                                      while (v339);
                                                                    }
                                                                    else
                                                                    {
                                                                      do
                                                                      {
                                                                        v340 = (_QWORD *)v309[2];
                                                                        v147 = *v340 == (_QWORD)v309;
                                                                        v309 = v340;
                                                                      }
                                                                      while (!v147);
                                                                    }
                                                                    v309 = v340;
                                                                    if (v340 == v310)
                                                                      goto LABEL_476;
                                                                    continue;
                                                                  }
LABEL_513:
                                                                  if (v324)
                                                                    v332 = v325;
                                                                  else
                                                                    v332 = v299 + 4;
                                                                  if (v324)
                                                                    v331 = v325 + 1;
                                                                  else
                                                                    v331 = v299 + 4;
                                                                  if (!*v331)
                                                                    goto LABEL_532;
                                                                  goto LABEL_535;
                                                                }
                                                              }
                                                              else if (v329 < v323)
                                                              {
                                                                goto LABEL_513;
                                                              }
                                                              break;
                                                            }
                                                            v331 = v299 + 4;
                                                            v332 = v299 + 4;
                                                            if (!v324)
                                                              goto LABEL_532;
                                                            v330 = (_QWORD *)*v308;
                                                            if (v323 != 1)
                                                            {
                                                              v333 = *((_DWORD *)v324 + 8);
                                                              v332 = (_QWORD *)*v308;
                                                              while (v323 != v333)
                                                              {
                                                                if (v323 < v333)
                                                                {
                                                                  v341 = *v332;
                                                                  v331 = v332;
                                                                  if (!*v332)
                                                                    goto LABEL_532;
                                                                }
                                                                else
                                                                {
                                                                  if (v333 >= v323)
                                                                    goto LABEL_535;
                                                                  v341 = v332[1];
                                                                  if (!v341)
                                                                    goto LABEL_531;
                                                                }
                                                                v333 = *(_DWORD *)(v341 + 32);
                                                                v332 = (_QWORD *)v341;
                                                              }
                                                              goto LABEL_535;
                                                            }
                                                            while (1)
                                                            {
LABEL_525:
                                                              v332 = v330;
                                                              v334 = *((_DWORD *)v330 + 8);
                                                              if (v334 == 1)
                                                              {
                                                                v335 = *((_DWORD *)v330 + 10);
                                                                if (v335 > v328)
                                                                  goto LABEL_524;
                                                                if (v335 >= v328)
                                                                  goto LABEL_535;
                                                              }
                                                              else if (v334 > 1)
                                                              {
LABEL_524:
                                                                v330 = (_QWORD *)*v330;
                                                                v331 = v332;
                                                                if (!*v332)
                                                                  goto LABEL_532;
                                                                continue;
                                                              }
                                                              v330 = (_QWORD *)v330[1];
                                                              if (!v330)
                                                              {
LABEL_531:
                                                                v331 = v332 + 1;
                                                                goto LABEL_532;
                                                              }
                                                            }
                                                          }
                                                          v270 = 0;
                                                          v271 = 0;
                                                          v272 = 0;
LABEL_428:
                                                          dispatch_retain(v261);
                                                          v267 = 0;
                                                          v268 = 0;
                                                          v269 = 0;
                                                          v767 = (unint64_t)v261;
                                                          v273 = 1;
                                                          goto LABEL_429;
                                                        }
                                                        v270 = 0;
                                                        v271 = 0;
LABEL_427:
                                                        dispatch_retain(v261);
                                                        v266 = 0;
                                                        v272 = 1;
                                                        goto LABEL_428;
                                                      }
                                                      v270 = 0;
LABEL_426:
                                                      dispatch_retain(v261);
                                                      v720 = 0;
                                                      v271 = 1;
                                                      goto LABEL_427;
                                                    }
LABEL_425:
                                                    dispatch_retain(v261);
                                                    v716 = 0;
                                                    v270 = 1;
                                                    goto LABEL_426;
                                                  }
                                                }
                                                else
                                                {
                                                  v765 = 0;
                                                  dispatch_retain(v261);
                                                }
                                                dispatch_retain(v261);
                                                v766 = 0;
                                                goto LABEL_425;
                                              }
                                              continue;
                                            }
                                          }
                                        }
                                        else
                                        {
                                          v211 = (uint64_t *)*v203;
                                          v200 = v203;
                                          if (!*v203)
                                            goto LABEL_341;
                                        }
                                        v210 = *((_DWORD *)v211 + 8);
                                        v203 = v211;
                                      }
                                    }
                                  }
                                }
LABEL_200:
                                v68 = (uint64_t *)v67[1];
                                if (v67 == v68)
                                  goto LABEL_304;
                                goto LABEL_201;
                              }
                            }
                            v70 = (uint64_t **)operator new(0x20uLL);
                            v71 = *v62;
                            v72 = **v62;
                            v719 = v70;
                            v73 = operator new(0x40uLL);
                            v74 = v73;
                            *v73 = v73;
                            v73[1] = v73;
                            v73[2] = 0;
                            v75 = *(_QWORD **)(v72 + 8);
                            if (v75 != (_QWORD *)v72)
                            {
                              v76 = 0;
                              v77 = v73;
                              do
                              {
                                v78 = operator new(0x20uLL);
                                v78[2] = v75[2];
                                v79 = v75[3];
                                v78[3] = v79;
                                if (v79)
                                {
                                  v80 = (unsigned int *)(v79 + 8);
                                  do
                                    v81 = __ldxr(v80);
                                  while (__stxr(v81 + 1, v80));
                                  v77 = (_QWORD *)*v74;
                                  v76 = v74[2];
                                }
                                *v78 = v77;
                                v78[1] = v74;
                                v77[1] = v78;
                                *v74 = v78;
                                v74[2] = ++v76;
                                v75 = (_QWORD *)v75[1];
                                v77 = v78;
                              }
                              while (v75 != (_QWORD *)v72);
                            }
                            v715 = v71;
                            v74[3] = 0;
                            v82 = (_QWORD **)(v74 + 3);
                            v74[4] = 0;
                            v83 = v74 + 4;
                            v74[5] = 0;
                            *((_BYTE *)v74 + 48) = *(_BYTE *)(v72 + 48);
                            v74[3] = v74 + 4;
                            v84 = *(_QWORD **)(v72 + 24);
                            v85 = (_QWORD *)(v72 + 32);
                            if (v84 == (_QWORD *)(v72 + 32))
                            {
LABEL_116:
                              *((_BYTE *)v74 + 56) = *(_BYTE *)(v72 + 56);
                              v86 = *(_QWORD **)(v72 + 24);
                              if (v86 != v85)
                              {
                                v87 = (_QWORD *)v74[3];
                                v88 = v74[1];
                                do
                                {
                                  v87[6] = v88;
                                  v89 = v72;
                                  if (v86 != v85)
                                    v89 = v86[6];
                                  v90 = (_QWORD *)v86[1];
                                  v91 = v90;
                                  v92 = v86;
                                  if (v90)
                                  {
                                    do
                                    {
                                      v93 = v91;
                                      v91 = (_QWORD *)*v91;
                                    }
                                    while (v91);
                                  }
                                  else
                                  {
                                    do
                                    {
                                      v93 = (_QWORD *)v92[2];
                                      v147 = *v93 == (_QWORD)v92;
                                      v92 = v93;
                                    }
                                    while (!v147);
                                  }
                                  v94 = v72;
                                  if (v93 != v85)
                                    v94 = v93[6];
                                  while (v89 != v94)
                                  {
                                    v89 = *(_QWORD *)(v89 + 8);
                                    v88 = *(_QWORD *)(v88 + 8);
                                  }
                                  if (v90)
                                  {
                                    do
                                    {
                                      v95 = v90;
                                      v90 = (_QWORD *)*v90;
                                    }
                                    while (v90);
                                  }
                                  else
                                  {
                                    do
                                    {
                                      v95 = (_QWORD *)v86[2];
                                      v147 = *v95 == (_QWORD)v86;
                                      v86 = v95;
                                    }
                                    while (!v147);
                                  }
                                  v96 = (_QWORD *)v87[1];
                                  if (v96)
                                  {
                                    do
                                    {
                                      v97 = v96;
                                      v96 = (_QWORD *)*v96;
                                    }
                                    while (v96);
                                  }
                                  else
                                  {
                                    do
                                    {
                                      v97 = (_QWORD *)v87[2];
                                      v147 = *v97 == (_QWORD)v87;
                                      v87 = v97;
                                    }
                                    while (!v147);
                                  }
                                  v86 = v95;
                                  v87 = v97;
                                }
                                while (v95 != v85);
                              }
                              *v719 = v74;
                              v719[1] = 0;
                              v117 = (uint64_t *)operator new(0x18uLL);
                              v62 = (uint64_t **)v736;
                              v117[1] = 0x100000001;
                              *v117 = (uint64_t)off_1E4A0D198;
                              v117[2] = (uint64_t)v74;
                              v719[1] = v117;
                              v719[2] = (uint64_t *)v715[2];
                              v118 = v715[3];
                              v719[3] = (uint64_t *)v118;
                              if (v118)
                              {
                                v119 = (unsigned int *)(v118 + 8);
                                do
                                  v120 = __ldxr(v119);
                                while (__stxr(v120 + 1, v119));
                              }
                              v121 = (uint64_t **)operator new(0x18uLL);
                              v121[1] = (uint64_t *)0x100000001;
                              *v121 = (uint64_t *)off_1E4A0D128;
                              v121[2] = (uint64_t *)v719;
                              v122 = (unsigned int *)v736[1];
                              *v736 = v719;
                              v736[1] = v121;
                              if (v122)
                              {
                                v123 = v122 + 2;
                                do
                                {
                                  v124 = __ldaxr(v123);
                                  v125 = v124 - 1;
                                }
                                while (__stlxr(v125, v123));
                                if (!v125)
                                {
                                  (*(void (**)(unsigned int *))(*(_QWORD *)v122 + 16))(v122);
                                  v126 = v122 + 3;
                                  do
                                  {
                                    v127 = __ldaxr(v126);
                                    v128 = v127 - 1;
                                  }
                                  while (__stlxr(v128, v126));
                                  if (!v128)
                                    (*(void (**)(unsigned int *))(*(_QWORD *)v122 + 24))(v122);
                                }
                              }
                              v69 = 0;
                              v67 = **v736;
                              goto LABEL_200;
                            }
                            while (1)
                            {
                              v98 = *((_DWORD *)v84 + 8);
                              v99 = (_QWORD *)*v83;
                              v100 = v74 + 4;
                              if (*v82 != v83)
                              {
                                v101 = (_QWORD *)*v83;
                                v102 = v74 + 4;
                                if (v99)
                                {
                                  do
                                  {
                                    v100 = v101;
                                    v101 = (_QWORD *)v101[1];
                                  }
                                  while (v101);
                                }
                                else
                                {
                                  do
                                  {
                                    v100 = (_QWORD *)v102[2];
                                    v147 = *v100 == (_QWORD)v102;
                                    v102 = v100;
                                  }
                                  while (v147);
                                }
                                v103 = *((_DWORD *)v84 + 10);
                                v104 = *((_DWORD *)v100 + 8);
                                if (v104 == v98)
                                {
                                  if (v98 != 1)
                                    goto LABEL_161;
                                  if (*((_DWORD *)v100 + 10) >= v103)
                                  {
                                    v105 = (_QWORD *)*v83;
                                    v106 = v74 + 4;
                                    v107 = v74 + 4;
                                    if (v99)
                                      goto LABEL_165;
LABEL_172:
                                    v111 = operator new(0x38uLL);
                                    v112 = *((_OWORD *)v84 + 2);
                                    v111[6] = v84[6];
                                    *((_OWORD *)v111 + 2) = v112;
                                    *v111 = 0;
                                    v111[1] = 0;
                                    v111[2] = v107;
                                    *v106 = v111;
                                    v113 = (_QWORD *)**v82;
                                    if (v113)
                                    {
                                      *v82 = v113;
                                      v111 = (_QWORD *)*v106;
                                    }
                                    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v74[4], v111);
                                    ++v74[5];
                                    goto LABEL_175;
                                  }
                                }
                                else if (v104 >= v98)
                                {
LABEL_161:
                                  v106 = v74 + 4;
                                  v107 = v74 + 4;
                                  if (!v99)
                                    goto LABEL_172;
                                  v105 = (_QWORD *)*v83;
                                  if (v98 != 1)
                                  {
                                    v108 = *((_DWORD *)v99 + 8);
                                    v107 = (_QWORD *)*v83;
                                    while (v98 != v108)
                                    {
                                      if (v98 < v108)
                                      {
                                        v116 = *v107;
                                        v106 = v107;
                                        if (!*v107)
                                          goto LABEL_172;
                                      }
                                      else
                                      {
                                        if (v108 >= v98)
                                          goto LABEL_175;
                                        v116 = v107[1];
                                        if (!v116)
                                          goto LABEL_171;
                                      }
                                      v108 = *(_DWORD *)(v116 + 32);
                                      v107 = (_QWORD *)v116;
                                    }
                                    goto LABEL_175;
                                  }
                                  while (1)
                                  {
LABEL_165:
                                    v107 = v105;
                                    v109 = *((_DWORD *)v105 + 8);
                                    if (v109 == 1)
                                    {
                                      v110 = *((_DWORD *)v105 + 10);
                                      if (v110 > v103)
                                        goto LABEL_164;
                                      if (v110 >= v103)
                                        goto LABEL_175;
                                    }
                                    else if (v109 > 1)
                                    {
LABEL_164:
                                      v105 = (_QWORD *)*v105;
                                      v106 = v107;
                                      if (!*v107)
                                        goto LABEL_172;
                                      continue;
                                    }
                                    v105 = (_QWORD *)v105[1];
                                    if (!v105)
                                    {
LABEL_171:
                                      v106 = v107 + 1;
                                      goto LABEL_172;
                                    }
                                  }
                                }
                              }
                              if (v99)
                                v107 = v100;
                              else
                                v107 = v74 + 4;
                              if (v99)
                                v106 = v100 + 1;
                              else
                                v106 = v74 + 4;
                              if (!*v106)
                                goto LABEL_172;
LABEL_175:
                              v114 = (_QWORD *)v84[1];
                              if (v114)
                              {
                                do
                                {
                                  v115 = v114;
                                  v114 = (_QWORD *)*v114;
                                }
                                while (v114);
                              }
                              else
                              {
                                do
                                {
                                  v115 = (_QWORD *)v84[2];
                                  v147 = *v115 == (_QWORD)v84;
                                  v84 = v115;
                                }
                                while (!v147);
                              }
                              v84 = v115;
                              if (v115 == v85)
                                goto LABEL_116;
                            }
                          }
                          v45 = 0;
                          v46 = 0;
                          v47 = 0;
LABEL_68:
                          dispatch_retain(v36);
                          v42 = 0;
                          v43 = 0;
                          v44 = 0;
                          v767 = (unint64_t)v36;
                          v48 = 1;
                          goto LABEL_69;
                        }
                        v45 = 0;
                        v46 = 0;
LABEL_67:
                        dispatch_retain(v36);
                        v41 = 0;
                        v47 = 1;
                        goto LABEL_68;
                      }
                      v45 = 0;
LABEL_66:
                      dispatch_retain(v36);
                      aBlock = 0;
                      v46 = 1;
                      goto LABEL_67;
                    }
LABEL_65:
                    dispatch_retain(v36);
                    v718 = 0;
                    v45 = 1;
                    goto LABEL_66;
                  }
                }
                else
                {
                  v765 = 0;
                  dispatch_retain(v36);
                }
                dispatch_retain(v36);
                v766 = 0;
                goto LABEL_65;
              }
            }
            else if ((SHIBYTE(v751) & 0x80000000) == 0)
            {
              goto LABEL_41;
            }
            operator delete(__p);
            if ((SBYTE7(v759) & 0x80000000) == 0)
              goto LABEL_42;
            goto LABEL_46;
          }
        }
        memmove(p_p, v18, v20);
        goto LABEL_33;
      }
    }
    memmove(p_dst, v12, v14);
    goto LABEL_25;
  }
  operator delete(v748.__r_.__value_.__l.__data_);
  if ((_DWORD)v11)
    goto LABEL_17;
  return v11;
}

void sub_1A3518A64(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  boost::signals2::detail::connection_body_base *v57;
  unsigned int *v58;

  if (a2)
  {
    if (*(_QWORD *)v58)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100](v58, *(_QWORD *)v58);
      operator delete(*(void **)v58);
    }
    operator delete(v58);
    boost::signals2::detail::connection_body_base::~connection_body_base(v57);
    JUMPOUT(0x1A3519CA4);
  }
  JUMPOUT(0x1A3519EF4);
}

void sub_1A35193F8(uint64_t a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  if (a2)
  {
    v2 = STACK[0x228];
    if (STACK[0x228])
    {
      if ((uint64_t)(STACK[0x230] - 1) >= 0)
      {
        v3 = v2 + 16 * STACK[0x230];
        do
        {
          v4 = *(unsigned int **)(v3 - 8);
          if (v4)
          {
            v5 = v4 + 2;
            do
            {
              v6 = __ldaxr(v5);
              v7 = v6 - 1;
            }
            while (__stlxr(v7, v5));
            if (!v7)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
              v8 = v4 + 3;
              do
              {
                v9 = __ldaxr(v8);
                v10 = v9 - 1;
              }
              while (__stlxr(v10, v8));
              if (!v10)
                (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
            }
          }
          v3 -= 16;
        }
        while (v3 > v2);
      }
      if (STACK[0x220] >= 0xB)
        operator delete((void *)STACK[0x228]);
    }
    JUMPOUT(0x1A3519EACLL);
  }
  JUMPOUT(0x1A3519EF4);
}

void sub_1A35194A0(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1A35194B0);
  JUMPOUT(0x1A3519EF4);
}

void sub_1A35194C0(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1A35194C8);
  JUMPOUT(0x1A3519EF4);
}

void sub_1A35194D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  boost::signals2::connection::~connection((boost::signals2::connection *)va);
  _Unwind_Resume(a1);
}

void sub_1A35194F0(void *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1A3519EF4);
}

void sub_1A3519518(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1A3519ECCLL);
  }
  JUMPOUT(0x1A3519EF4);
}

void sub_1A351952C(void *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);

  if (a2)
  {
    __cxa_begin_catch(a1);
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      if ((v3 & 1) == 0)
      {
        v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4)
          v4(v2 + 32, v2 + 32, 2);
      }
      *(_QWORD *)(v2 + 24) = 0;
    }
    if (*(_QWORD *)v2)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v2, *(_QWORD *)v2);
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1A3519EF4);
}

void sub_1A3519594(uint64_t a1, int a2)
{
  boost::signals2::detail::connection_body_base *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  if (a2)
  {
    __cxa_end_catch();
    v3 = (unsigned int *)*((_QWORD *)v2 + 5);
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
        v7 = v3 + 3;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
          (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
      }
    }
    boost::signals2::detail::connection_body_base::~connection_body_base(v2);
    JUMPOUT(0x1A3519D60);
  }
  JUMPOUT(0x1A3519EF4);
}

void sub_1A3519604(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1A351960CLL);
  JUMPOUT(0x1A3519EF4);
}

void sub_1A3519618(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1A3519620);
  JUMPOUT(0x1A3519EF4);
}

void sub_1A351962C(uint64_t a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  if (a2)
  {
    v2 = STACK[0x228];
    if (STACK[0x228])
    {
      if ((uint64_t)(STACK[0x230] - 1) >= 0)
      {
        v3 = v2 + 16 * STACK[0x230];
        do
        {
          v4 = *(unsigned int **)(v3 - 8);
          if (v4)
          {
            v5 = v4 + 2;
            do
            {
              v6 = __ldaxr(v5);
              v7 = v6 - 1;
            }
            while (__stlxr(v7, v5));
            if (!v7)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
              v8 = v4 + 3;
              do
              {
                v9 = __ldaxr(v8);
                v10 = v9 - 1;
              }
              while (__stlxr(v10, v8));
              if (!v10)
                (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
            }
          }
          v3 -= 16;
        }
        while (v3 > v2);
      }
      if (STACK[0x220] >= 0xB)
        operator delete((void *)STACK[0x228]);
    }
    JUMPOUT(0x1A3519ED4);
  }
  JUMPOUT(0x1A3519EF4);
}

void sub_1A35196D4(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1A35196E4);
  JUMPOUT(0x1A3519EF4);
}

void sub_1A35196F4(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1A35196FCLL);
  JUMPOUT(0x1A3519EF4);
}

void sub_1A351970C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  boost::signals2::connection::~connection((boost::signals2::connection *)va);
  _Unwind_Resume(a1);
}

void sub_1A3519724(void *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1A3519EF4);
}

void sub_1A351974C(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1A3519EFCLL);
  }
  JUMPOUT(0x1A3519EF4);
}

void sub_1A3519760(void *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);

  if (a2)
  {
    __cxa_begin_catch(a1);
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      if ((v3 & 1) == 0)
      {
        v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4)
          v4(v2 + 32, v2 + 32, 2);
      }
      *(_QWORD *)(v2 + 24) = 0;
    }
    if (*(_QWORD *)v2)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v2, *(_QWORD *)v2);
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1A3519EF4);
}

void sub_1A35197C8(uint64_t a1, int a2)
{
  boost::signals2::detail::connection_body_base *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  if (a2)
  {
    __cxa_end_catch();
    v3 = (unsigned int *)*((_QWORD *)v2 + 5);
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
        v7 = v3 + 3;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
          (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
      }
    }
    boost::signals2::detail::connection_body_base::~connection_body_base(v2);
    JUMPOUT(0x1A3519E1CLL);
  }
  JUMPOUT(0x1A3519EF4);
}

void sub_1A3519838(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1A3519840);
  JUMPOUT(0x1A3519EF4);
}

void sub_1A351984C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1A3519854);
  JUMPOUT(0x1A3519EF4);
}

void sub_1A3519860(uint64_t a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  if (a2)
  {
    v2 = STACK[0x228];
    if (STACK[0x228])
    {
      if ((uint64_t)(STACK[0x230] - 1) >= 0)
      {
        v3 = v2 + 16 * STACK[0x230];
        do
        {
          v4 = *(unsigned int **)(v3 - 8);
          if (v4)
          {
            v5 = v4 + 2;
            do
            {
              v6 = __ldaxr(v5);
              v7 = v6 - 1;
            }
            while (__stlxr(v7, v5));
            if (!v7)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
              v8 = v4 + 3;
              do
              {
                v9 = __ldaxr(v8);
                v10 = v9 - 1;
              }
              while (__stlxr(v10, v8));
              if (!v10)
                (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
            }
          }
          v3 -= 16;
        }
        while (v3 > v2);
      }
      if (STACK[0x220] >= 0xB)
        operator delete((void *)STACK[0x228]);
    }
    JUMPOUT(0x1A3519F04);
  }
  JUMPOUT(0x1A3519EF4);
}

void sub_1A3519908(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1A3519918);
  JUMPOUT(0x1A3519EF4);
}

void sub_1A3519928(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1A3519930);
  JUMPOUT(0x1A3519EF4);
}

void sub_1A3519940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  char a68;

  if (a68 < 0)
  {
    operator delete(__p);
    if (a37 < 0)
    {
LABEL_5:
      operator delete(a32);
      if ((a49 & 0x80000000) == 0)
LABEL_9:
        JUMPOUT(0x1A3519EF4);
LABEL_8:
      operator delete(a44);
      _Unwind_Resume(a1);
    }
  }
  else if (a37 < 0)
  {
    goto LABEL_5;
  }
  if ((a49 & 0x80000000) == 0)
    goto LABEL_9;
  goto LABEL_8;
}

void sub_1A3519A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,dispatch_object_t object,uint64_t a27,std::__shared_weak_count *a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  std::__shared_weak_count *v35;

  if (object)
  {
    dispatch_release(object);
    v35 = a28;
    if (!a28)
    {
LABEL_3:
      if ((a34 & 0x80000000) == 0)
LABEL_8:
        JUMPOUT(0x1A3519EF4);
LABEL_7:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v35 = a28;
    if (!a28)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v35);
  if ((a34 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_1A3519A68(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  void (*v58)(uint64_t *, uint64_t *, uint64_t);

  if (a2)
  {
    boost::function1<void,coredump::CommandDriver::Status>::~function1(&a57);
    boost::function<void ()(coredump::CommandDriver::Status)>::~function(&a53);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>>::~DispatchSlot((uint64_t)&a51);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>>::~DispatchSlot((uint64_t)&a49);
    if (a44)
    {
      if ((a44 & 1) == 0)
      {
        v58 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(a44 & 0xFFFFFFFFFFFFFFFELL);
        if (v58)
          v58(&a45, &a45, 2);
      }
      a44 = 0;
    }
    if (__p)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)&__p, (uint64_t)__p);
      operator delete(__p);
      ctu::DispatchSlot<dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>>::~DispatchSlot((uint64_t)&a39);
      __clang_call_terminate(a1);
    }
    JUMPOUT(0x1A3519EB4);
  }
  JUMPOUT(0x1A3519EF4);
}

void sub_1A3519AEC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  void (*v58)(uint64_t *, uint64_t *, uint64_t);

  if (a2)
  {
    boost::function1<void,BOOL>::~function1(&a57);
    boost::function<void ()(BOOL)>::~function(&a53);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::~DispatchSlot((uint64_t)&a51);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::~DispatchSlot((uint64_t)&a49);
    if (a44)
    {
      if ((a44 & 1) == 0)
      {
        v58 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(a44 & 0xFFFFFFFFFFFFFFFELL);
        if (v58)
          v58(&a45, &a45, 2);
      }
      a44 = 0;
    }
    if (__p)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)&__p, (uint64_t)__p);
      operator delete(__p);
      ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::~DispatchSlot((uint64_t)&a39);
      __clang_call_terminate(a1);
    }
    JUMPOUT(0x1A3519EDCLL);
  }
  JUMPOUT(0x1A3519EF4);
}

void sub_1A3519B70(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  void (*v57)(uint64_t *, uint64_t *, uint64_t);

  if (a2)
  {
    boost::function1<void,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>::~function1(&a57);
    boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>::~function(&a53);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>::~DispatchSlot((uint64_t)&a51);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>::~DispatchSlot((uint64_t)&a49);
    if (a44)
    {
      if ((a44 & 1) == 0)
      {
        v57 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(a44 & 0xFFFFFFFFFFFFFFFELL);
        if (v57)
          v57(&a45, &a45, 2);
      }
      a44 = 0;
    }
    if (__p)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)&__p, (uint64_t)__p);
      operator delete(__p);
    }
    JUMPOUT(0x1A3519F0CLL);
  }
  JUMPOUT(0x1A3519EF4);
}

void sub_1A3519C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1A351A058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void EURCoreDumpTrace::postBootCrashReasonUpdate_sync(_QWORD *a1, uint64_t *a2)
{
  char *v4;
  NSObject *v5;
  char *v6;
  char *v7;
  uint64_t *v8;
  std::string *v9;
  uint64_t v10;
  NSObject *v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint8_t v27[4];
  uint8_t *v28;
  uint8_t buf[48];
  unint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!a2[2])
  {
    v4 = (char *)operator new(0x38uLL);
    strcpy(v4, "Baseband did not provide a post-boot crash reason");
    v5 = a1[5];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v4;
      _os_log_impl(&dword_1A343C000, v5, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
    }
    v30 = 0xAAAAAAAAAAAAAAAALL;
    memset(buf, 0, sizeof(buf));
    std::string::__assign_no_alias<true>(buf, v4, 0x31uLL);
    if ((char)buf[47] < 0)
    {
      *(_QWORD *)&buf[32] = 4;
      v6 = *(char **)&buf[24];
    }
    else
    {
      buf[47] = 4;
      v6 = (char *)&buf[24];
    }
    strcpy(v6, "None");
    v30 = 0;
    v7 = (char *)operator new(0x48uLL);
    v8 = (uint64_t *)v7;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    if ((char)buf[23] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v7 + 16), *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
    }
    else
    {
      *((_OWORD *)v7 + 1) = *(_OWORD *)buf;
      *((_QWORD *)v7 + 4) = *(_QWORD *)&buf[16];
    }
    v9 = (std::string *)(v8 + 5);
    if ((char)buf[47] < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)&buf[24], *(std::string::size_type *)&buf[32]);
    }
    else
    {
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&buf[24];
      v8[7] = *(_QWORD *)&buf[40];
    }
    v8[8] = v30;
    v10 = *a2;
    *v8 = *a2;
    v8[1] = (uint64_t)a2;
    *(_QWORD *)(v10 + 8) = v8;
    *a2 = (uint64_t)v8;
    ++a2[2];
    if ((char)buf[47] < 0)
    {
      operator delete(*(void **)&buf[24]);
      if (((char)buf[23] & 0x80000000) == 0)
        goto LABEL_15;
    }
    else if (((char)buf[23] & 0x80000000) == 0)
    {
LABEL_15:
      operator delete(v4);
      goto LABEL_16;
    }
    operator delete(*(void **)buf);
    goto LABEL_15;
  }
LABEL_16:
  memset(buf, 170, 24);
  makeCrashString((char *)buf, (uint64_t)a2);
  v11 = a1[5];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = buf;
    if ((buf[23] & 0x80u) != 0)
      v12 = *(uint8_t **)buf;
    *(_DWORD *)v27 = 136446210;
    v28 = v12;
    _os_log_impl(&dword_1A343C000, v11, OS_LOG_TYPE_DEFAULT, "#I Baseband crash: %{public}s", v27, 0xCu);
  }
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::list(&v24, (uint64_t)a2);
  EURCoreDumpTrace::submitCrash_sync((uint64_t)a1, (uint64_t)&v24);
  if (v26)
  {
    v13 = v24;
    v14 = v25;
    v15 = *v25;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v24 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    v26 = 0;
    if (v14 != &v24)
    {
      while (1)
      {
        v16 = (uint64_t *)v14[1];
        if (*((char *)v14 + 63) < 0)
        {
          operator delete((void *)v14[5]);
          if ((*((char *)v14 + 39) & 0x80000000) == 0)
            goto LABEL_24;
LABEL_27:
          operator delete((void *)v14[2]);
          operator delete(v14);
          v14 = v16;
          if (v16 == &v24)
            break;
        }
        else
        {
          if (*((char *)v14 + 39) < 0)
            goto LABEL_27;
LABEL_24:
          operator delete(v14);
          v14 = v16;
          if (v16 == &v24)
            break;
        }
      }
    }
  }
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::list(&v21, (uint64_t)a2);
  EURCoreDumpTrace::updateAnalyticsEvent_sync(a1, (uint64_t)&v21);
  if (v23)
  {
    v17 = v21;
    v18 = v22;
    v19 = *v22;
    *(_QWORD *)(v19 + 8) = *(_QWORD *)(v21 + 8);
    **(_QWORD **)(v17 + 8) = v19;
    v23 = 0;
    if (v18 != &v21)
    {
      while (1)
      {
        v20 = (uint64_t *)v18[1];
        if (*((char *)v18 + 63) < 0)
        {
          operator delete((void *)v18[5]);
          if ((*((char *)v18 + 39) & 0x80000000) == 0)
            goto LABEL_32;
LABEL_35:
          operator delete((void *)v18[2]);
          operator delete(v18);
          v18 = v20;
          if (v20 == &v21)
            break;
        }
        else
        {
          if (*((char *)v18 + 39) < 0)
            goto LABEL_35;
LABEL_32:
          operator delete(v18);
          v18 = v20;
          if (v20 == &v21)
            break;
        }
      }
    }
  }
  if ((char)buf[23] < 0)
    operator delete(*(void **)buf);
}

void sub_1A351A470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v17;
  char *v18;
  void **v19;

  if (v18[39] < 0)
    operator delete(*v19);
  operator delete(v18);
  std::pair<std::string,std::string>::~pair((uint64_t)&a17);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void sub_1A351A4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1A351A4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::~list((char *)&a9);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void boost::signals2::connection::~connection(boost::signals2::connection *this)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v1 = (unsigned int *)*((_QWORD *)this + 1);
  if (v1)
  {
    v2 = v1 + 3;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 24))(v1);
  }
}

void EURCoreDumpTrace::getCoreDumpEnabledStatusUpdate_sync(EURCoreDumpTrace *this, int a2)
{
  int v4;
  NSObject *v5;
  const char *v6;
  const char *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[5];
  dispatch_group_t group;
  uint64_t v21;
  std::__shared_weak_count *v22;
  char v23;
  void *aBlock;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = *((unsigned __int8 *)this + 160);
  v5 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = "Disabled";
    if (a2)
      v7 = "Enabled";
    else
      v7 = "Disabled";
    if (v4)
      v6 = "Enabled";
    *(_DWORD *)buf = 136315394;
    v26 = v7;
    v27 = 2080;
    v28 = v6;
    _os_log_impl(&dword_1A343C000, v5, OS_LOG_TYPE_DEFAULT, "#I Initial coredump state: BB=%s, AP=%s", buf, 0x16u);
  }
  if (v4 != a2)
  {
    v8 = *((_QWORD *)this + 18);
    if (v8)
    {
      dispatch_retain(*((dispatch_object_t *)this + 18));
      dispatch_group_enter(v8);
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v9 || (v10 = *((_QWORD *)this + 9), (v11 = std::__shared_weak_count::lock(v9)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v12 = v11;
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    v17 = *((_QWORD *)this + 21);
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 1174405120;
    v19[2] = ___ZN16EURCoreDumpTrace35getCoreDumpEnabledStatusUpdate_syncEb_block_invoke;
    v19[3] = &__block_descriptor_tmp_8_8;
    v19[4] = this;
    group = v8;
    if (v8)
    {
      dispatch_retain(v8);
      dispatch_group_enter(v8);
    }
    v21 = v10;
    v22 = v12;
    do
      v18 = __ldxr(p_shared_weak_owners);
    while (__stxr(v18 + 1, p_shared_weak_owners));
    v23 = v4;
    aBlock = _Block_copy(v19);
    (*(void (**)(uint64_t, BOOL, void **))(*(_QWORD *)v17 + 80))(v17, v4 != 0, &aBlock);
    if (aBlock)
      _Block_release(aBlock);
    if (v22)
      std::__shared_weak_count::__release_weak(v22);
    if (group)
    {
      dispatch_group_leave(group);
      if (group)
        dispatch_release(group);
    }
    std::__shared_weak_count::__release_weak(v12);
    if (v8)
    {
      dispatch_group_leave(v8);
      dispatch_release(v8);
    }
  }
}

void sub_1A351A790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_group_t group, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void *aBlock)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t EURCoreDumpTrace::commandDriverStatus_sync(uint64_t result, int a2)
{
  uint64_t v2;

  if (!a2)
  {
    v2 = result;
    if (*(_BYTE *)(result + 161))
    {
      *(_BYTE *)(result + 161) = 0;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 168) + 64))(*(_QWORD *)(result + 168));
    }
    result = capabilities::trace::allowed((capabilities::trace *)result);
    if ((_DWORD)result)
    {
      result = capabilities::trace::supportsCoreDumpStatus((capabilities::trace *)result);
      if ((_DWORD)result)
        return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 168) + 72))(*(_QWORD *)(v2 + 168));
    }
  }
  return result;
}

capabilities::trace *EURCoreDumpTrace::updateCoreDumpStatus_sync(EURCoreDumpTrace *this)
{
  capabilities::trace *result;

  result = (capabilities::trace *)capabilities::trace::allowed(this);
  if ((_DWORD)result)
  {
    result = (capabilities::trace *)capabilities::trace::supportsCoreDumpStatus(result);
    if ((_DWORD)result)
      return (capabilities::trace *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 21) + 72))(*((_QWORD *)this + 21));
  }
  return result;
}

void ___ZN16EURCoreDumpTrace35getCoreDumpEnabledStatusUpdate_syncEb_block_invoke(uint64_t a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  const char *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const char *v12;
  int v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (*(_QWORD *)(a1 + 48))
      {
        v8 = *(NSObject **)(v5 + 40);
        if (a2)
        {
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            v9 = "Enabled";
            if (!*(_BYTE *)(a1 + 64))
              v9 = "Disabled";
            v13 = 136315394;
            v14 = v9;
            v15 = 2080;
            v16 = v9;
            _os_log_impl(&dword_1A343C000, v8, OS_LOG_TYPE_DEFAULT, "#I Updated coredump state: BB=%s, AP=%s", (uint8_t *)&v13, 0x16u);
          }
        }
        else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          if (*(_BYTE *)(a1 + 64))
            v12 = "Enabled";
          else
            v12 = "Disabled";
          v13 = 136315138;
          v14 = v12;
          _os_log_error_impl(&dword_1A343C000, v8, OS_LOG_TYPE_ERROR, "Failed to update coredump state on BB to %s", (uint8_t *)&v13, 0xCu);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

uint64_t makeCrashString(char *a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  std::locale::id *v5;
  __int128 v6;
  _QWORD *v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  __int128 *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  char *v18;
  int v19;
  uint64_t v20;
  const void *v21;
  size_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v29;
  _BYTE v30[32];
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void *__p[2];
  __int128 v38;
  __int128 v39;
  _OWORD v40[9];
  unint64_t v41;
  std::locale v42;

  v41 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40[7] = v3;
  v40[8] = v3;
  v40[5] = v3;
  v40[6] = v3;
  v40[3] = v3;
  v40[4] = v3;
  v40[1] = v3;
  v40[2] = v3;
  v39 = v3;
  v40[0] = v3;
  *(_OWORD *)__p = v3;
  v38 = v3;
  v35 = v3;
  v36 = v3;
  v33 = v3;
  v34 = v3;
  v32 = v3;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v32);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 != a2)
  {
    v5 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      v31 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)v30 = v6;
      *(_OWORD *)&v30[16] = v6;
      v29 = v6;
      if (*(char *)(v4 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v29, *(const std::string::value_type **)(v4 + 16), *(_QWORD *)(v4 + 24));
      }
      else
      {
        v29 = *(_OWORD *)(v4 + 16);
        *(_QWORD *)v30 = *(_QWORD *)(v4 + 32);
      }
      if (*(char *)(v4 + 63) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v30[8], *(const std::string::value_type **)(v4 + 40), *(_QWORD *)(v4 + 48));
      }
      else
      {
        *(_OWORD *)&v30[8] = *(_OWORD *)(v4 + 40);
        *(_QWORD *)&v30[24] = *(_QWORD *)(v4 + 56);
      }
      v31 = *(_QWORD *)(v4 + 64);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"Crash @ ", 8);
      if (v30[31] >= 0)
        v8 = &v30[8];
      else
        v8 = *(_BYTE **)&v30[8];
      if (v30[31] >= 0)
        v9 = v30[31];
      else
        v9 = *(_QWORD *)&v30[16];
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
      LOBYTE(v42.__locale_) = 58;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v42, 1);
      v11 = (_QWORD *)std::ostream::operator<<();
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", Reason:'", 10);
      if (v30[7] >= 0)
        v13 = &v29;
      else
        v13 = (__int128 *)v29;
      if (v30[7] >= 0)
        v14 = v30[7];
      else
        v14 = *((_QWORD *)&v29 + 1);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"', TID:", 7);
      v16 = (_QWORD *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
      v17 = std::locale::use_facet(&v42, v5);
      ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
      std::locale::~locale(&v42);
      std::ostream::put();
      std::ostream::flush();
      if ((v30[31] & 0x80000000) != 0)
      {
        operator delete(*(void **)&v30[8]);
        if ((v30[7] & 0x80000000) != 0)
LABEL_26:
          operator delete((void *)v29);
      }
      else if ((v30[7] & 0x80000000) != 0)
      {
        goto LABEL_26;
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != a2);
  }
  v18 = a1;
  memset(a1, 170, 24);
  if ((BYTE8(v39) & 0x10) != 0)
  {
    v20 = v39;
    if ((unint64_t)v39 < *((_QWORD *)&v36 + 1))
    {
      *(_QWORD *)&v39 = *((_QWORD *)&v36 + 1);
      v20 = *((_QWORD *)&v36 + 1);
    }
    v21 = (const void *)v36;
    v22 = v20 - v36;
    if ((unint64_t)(v20 - v36) >= 0x7FFFFFFFFFFFFFF8)
LABEL_50:
      std::string::__throw_length_error[abi:ne180100]();
LABEL_34:
    if (v22 >= 0x17)
    {
      v24 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 | 7) != 0x17)
        v24 = v22 | 7;
      v25 = v24 + 1;
      v23 = operator new(v24 + 1);
      *((_QWORD *)a1 + 1) = v22;
      *((_QWORD *)a1 + 2) = v25 | 0x8000000000000000;
      *(_QWORD *)a1 = v23;
    }
    else
    {
      a1[23] = v22;
      v23 = a1;
      if (!v22)
      {
        *a1 = 0;
        v19 = a1[23];
        if ((v19 & 0x80000000) == 0)
          goto LABEL_43;
LABEL_37:
        if (*((_QWORD *)a1 + 1))
          goto LABEL_46;
        *((_QWORD *)a1 + 1) = 22;
        v18 = *(char **)a1;
        goto LABEL_45;
      }
    }
    memmove(v23, v21, v22);
    *((_BYTE *)v23 + v22) = 0;
    v19 = a1[23];
    if ((v19 & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_37;
  }
  if ((BYTE8(v39) & 8) != 0)
  {
    v21 = (const void *)*((_QWORD *)&v34 + 1);
    v22 = *((_QWORD *)&v35 + 1) - *((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v35 + 1) - *((_QWORD *)&v34 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
      goto LABEL_50;
    goto LABEL_34;
  }
  a1[23] = 0;
  *a1 = 0;
  v19 = a1[23];
  if (v19 < 0)
    goto LABEL_37;
LABEL_43:
  if (v19)
    goto LABEL_46;
  a1[23] = 22;
LABEL_45:
  strcpy(v18, "Crash reason not found");
LABEL_46:
  *(_QWORD *)&v32 = *MEMORY[0x1E0DE4F50];
  v26 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&v32 + *(_QWORD *)(v32 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v33 = v26;
  *((_QWORD *)&v33 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v38) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A858F92C](v40);
}

void sub_1A351AE18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_1A351AE54(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::locale::~locale((std::locale *)(v2 - 96));
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  JUMPOUT(0x1A351AE70);
}

void EURCoreDumpTrace::submitCrash_sync(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  __int128 v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  const char *v11;
  xpc_object_t v12;
  xpc_object_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  std::string *v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  std::string *v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  xpc_object_t v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *size;
  unint64_t *p_shared_owners;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  xpc_object_t xdict;
  xpc_object_t object;
  std::string v51;
  uint8_t buf[16];
  _OWORD v53[4];
  void *__p[2];
  __int128 v55;
  __int128 v56;
  _OWORD v57[9];
  unint64_t v58;

  v3 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of crash info", buf, 2u);
  }
  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A85902BC](v4) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v4);
      xdict = v4;
    }
    else
    {
      xdict = xpc_null_create();
    }
  }
  else
  {
    xdict = xpc_null_create();
    v4 = 0;
  }
  xpc_release(v4);
  v5 = xpc_array_create(0, 0);
  if (v5 || (v5 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A85902BC](v5) == MEMORY[0x1E0C812C8])
    {
      xpc_retain(v5);
      v6 = v5;
    }
    else
    {
      v6 = xpc_null_create();
    }
  }
  else
  {
    v6 = xpc_null_create();
    v5 = 0;
  }
  xpc_release(v5);
  v47 = a1;
  v58 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v57[7] = v7;
  v57[8] = v7;
  v57[5] = v7;
  v57[6] = v7;
  v57[3] = v7;
  v57[4] = v7;
  v57[1] = v7;
  v57[2] = v7;
  v56 = v7;
  v57[0] = v7;
  v55 = v7;
  v53[3] = v7;
  *(_OWORD *)__p = v7;
  v53[1] = v7;
  v53[2] = v7;
  *(_OWORD *)buf = v7;
  v53[0] = v7;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
  v8 = *(_QWORD *)(a2 + 8);
  if (v8 != a2)
  {
    v9 = (const char *)*MEMORY[0x1E0CFB758];
    v10 = (const char *)*MEMORY[0x1E0CFB640];
    v11 = (const char *)*MEMORY[0x1E0CFB3E0];
    do
    {
      v12 = xpc_dictionary_create(0, 0, 0);
      if (v12 || (v12 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1A85902BC](v12) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v12);
          v13 = v12;
        }
        else
        {
          v13 = xpc_null_create();
        }
      }
      else
      {
        v13 = xpc_null_create();
        v12 = 0;
      }
      xpc_release(v12);
      v14 = *(char *)(v8 + 39);
      if (v14 >= 0)
        v15 = v8 + 16;
      else
        v15 = *(_QWORD *)(v8 + 16);
      if (v14 >= 0)
        v16 = *(unsigned __int8 *)(v8 + 39);
      else
        v16 = *(_QWORD *)(v8 + 24);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, v15, v16);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" [", 2);
      v19 = *(char *)(v8 + 63);
      if (v19 >= 0)
        v20 = v8 + 40;
      else
        v20 = *(_QWORD *)(v8 + 40);
      if (v19 >= 0)
        v21 = *(unsigned __int8 *)(v8 + 63);
      else
        v21 = *(_QWORD *)(v8 + 48);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)":", 1);
      v23 = (_QWORD *)std::ostream::operator<<();
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"]", 1);
      std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(*v24 - 24)));
      v25 = std::locale::use_facet((const std::locale *)&v51, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
      std::locale::~locale((std::locale *)&v51);
      std::ostream::put();
      std::ostream::flush();
      if (*(char *)(v8 + 39) < 0)
        std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)(v8 + 16), *(_QWORD *)(v8 + 24));
      else
        v51 = *(std::string *)(v8 + 16);
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &v51;
      else
        v26 = (std::string *)v51.__r_.__value_.__r.__words[0];
      v27 = xpc_string_create((const char *)v26);
      if (!v27)
        v27 = xpc_null_create();
      xpc_dictionary_set_value(v13, v9, v27);
      v28 = xpc_null_create();
      xpc_release(v27);
      xpc_release(v28);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v51.__r_.__value_.__l.__data_);
      v29 = xpc_int64_create(*(unsigned int *)(v8 + 64));
      if (!v29)
        v29 = xpc_null_create();
      xpc_dictionary_set_value(v13, v10, v29);
      v30 = xpc_null_create();
      xpc_release(v29);
      xpc_release(v30);
      if (*(char *)(v8 + 63) < 0)
        std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)(v8 + 40), *(_QWORD *)(v8 + 48));
      else
        v51 = *(std::string *)(v8 + 40);
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = &v51;
      else
        v31 = (std::string *)v51.__r_.__value_.__r.__words[0];
      v32 = xpc_string_create((const char *)v31);
      if (!v32)
        v32 = xpc_null_create();
      xpc_dictionary_set_value(v13, v11, v32);
      v33 = xpc_null_create();
      xpc_release(v32);
      xpc_release(v33);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v51.__r_.__value_.__l.__data_);
      xpc_array_append_value(v6, v13);
      xpc_release(v13);
      v8 = *(_QWORD *)(v8 + 8);
    }
    while (v8 != a2);
  }
  v34 = xpc_string_create((const char *)*MEMORY[0x1E0CFC190]);
  if (!v34)
    v34 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB020], v34);
  v35 = xpc_null_create();
  xpc_release(v34);
  xpc_release(v35);
  v36 = xpc_int64_create(524365);
  if (!v36)
    v36 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB0E8], v36);
  v37 = xpc_null_create();
  xpc_release(v36);
  xpc_release(v37);
  if (v6)
  {
    xpc_retain(v6);
    v38 = v6;
  }
  else
  {
    v38 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB018], v38);
  v39 = xpc_null_create();
  xpc_release(v38);
  xpc_release(v39);
  v40 = *(std::__shared_weak_count **)(v47 + 136);
  if (v40)
  {
    v41 = std::__shared_weak_count::lock(v40);
    v51.__r_.__value_.__l.__size_ = (std::string::size_type)v41;
    if (v41)
    {
      v42 = *(_QWORD *)(v47 + 128);
      v51.__r_.__value_.__r.__words[0] = v42;
      if (v42)
      {
        object = xdict;
        if (xdict)
          xpc_retain(xdict);
        else
          object = xpc_null_create();
        abm::BasebandTracingTask::commandReportStatsAWD(v42, &object);
        xpc_release(object);
        object = 0;
        size = (std::__shared_weak_count *)v51.__r_.__value_.__l.__size_;
        if (!v51.__r_.__value_.__l.__size_)
          goto LABEL_77;
      }
      else
      {
        size = v41;
      }
      p_shared_owners = (unint64_t *)&size->__shared_owners_;
      do
        v45 = __ldaxr(p_shared_owners);
      while (__stlxr(v45 - 1, p_shared_owners));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
LABEL_77:
  *(_QWORD *)buf = *MEMORY[0x1E0DE4F50];
  v46 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v53[0] = v46;
  *((_QWORD *)&v53[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v55) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A858F92C](v57);
  xpc_release(v6);
  xpc_release(xdict);
}

void sub_1A351B50C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, uint64_t a11, xpc_object_t a12, uint64_t a13, xpc_object_t object, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  xpc_release(object);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a19);
  xpc_release(a12);
  xpc_release(a10);
  _Unwind_Resume(a1);
}

uint64_t *std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::list(uint64_t *a1, uint64_t a2)
{
  uint64_t i;
  __int128 v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  __int128 v9;
  std::string *v10;

  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (i = *(_QWORD *)(a2 + 8); i != a2; i = *(_QWORD *)(i + 8))
  {
    v7 = (char *)operator new(0x48uLL);
    v8 = (uint64_t *)v7;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    if (*(char *)(i + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v7 + 16), *(const std::string::value_type **)(i + 16), *(_QWORD *)(i + 24));
    }
    else
    {
      v9 = *(_OWORD *)(i + 16);
      *((_QWORD *)v7 + 4) = *(_QWORD *)(i + 32);
      *((_OWORD *)v7 + 1) = v9;
    }
    v10 = (std::string *)(v8 + 5);
    if (*(char *)(i + 63) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)(i + 40), *(_QWORD *)(i + 48));
    }
    else
    {
      v5 = *(_OWORD *)(i + 40);
      v8[7] = *(_QWORD *)(i + 56);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v5;
    }
    v8[8] = *(_QWORD *)(i + 64);
    v6 = *a1;
    *v8 = *a1;
    v8[1] = (uint64_t)a1;
    *(_QWORD *)(v6 + 8) = v8;
    *a1 = (uint64_t)v8;
    ++a1[2];
  }
  return a1;
}

void sub_1A351B73C(_Unwind_Exception *a1)
{
  char *v1;
  char *v2;
  void **v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;

  if (v2[39] < 0)
    operator delete(*v3);
  operator delete(v2);
  if (!*((_QWORD *)v1 + 2)
    || (v5 = *(_QWORD *)v1,
        v6 = (char *)*((_QWORD *)v1 + 1),
        v7 = *(_QWORD *)v6,
        *(_QWORD *)(v7 + 8) = *(_QWORD *)(*(_QWORD *)v1 + 8),
        **(_QWORD **)(v5 + 8) = v7,
        *((_QWORD *)v1 + 2) = 0,
        v6 == v1))
  {
LABEL_5:
    _Unwind_Resume(a1);
  }
  while (1)
  {
    v8 = (char *)*((_QWORD *)v6 + 1);
    if (v6[63] < 0)
    {
      operator delete(*((void **)v6 + 5));
      if (v6[39] < 0)
LABEL_11:
        operator delete(*((void **)v6 + 2));
    }
    else if (v6[39] < 0)
    {
      goto LABEL_11;
    }
    operator delete(v6);
    v6 = v8;
    if (v8 == v1)
      goto LABEL_5;
  }
}

char *std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::~list(char *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v6;

  if (*((_QWORD *)a1 + 2))
  {
    v2 = *(_QWORD *)a1;
    v3 = (char *)*((_QWORD *)a1 + 1);
    v4 = *(_QWORD *)v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*(_QWORD *)a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    *((_QWORD *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (char *)*((_QWORD *)v3 + 1);
        if (v3[63] < 0)
        {
          operator delete(*((void **)v3 + 5));
          if (v3[39] < 0)
LABEL_9:
            operator delete(*((void **)v3 + 2));
        }
        else if (v3[39] < 0)
        {
          goto LABEL_9;
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void EURCoreDumpTrace::updateAnalyticsEvent_sync(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  xpc_object_t v5;
  uint64_t v6;
  xpc_object_t v7;
  uint64_t v8;
  const char *v9;
  xpc_object_t v10;
  xpc_object_t v11;
  uint64_t v12;
  int v13;
  size_t v14;
  unint64_t v15;
  void **p_dst;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  std::string *v20;
  std::string::size_type size;
  std::string *v22;
  __int128 v23;
  const char *v24;
  xpc_object_t v25;
  xpc_object_t v26;
  uint64_t v27;
  const char *v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  xpc_object_t v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  void **v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  xpc_object_t object;
  std::string v54;
  void **__dst;
  unint64_t v56;
  _QWORD v57[5];

  v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v57[1]) = 0;
    _os_log_impl(&dword_1A343C000, v4, OS_LOG_TYPE_DEFAULT, "#I Updating Analytics metric of crash info", (uint8_t *)&v57[1], 2u);
  }
  v5 = xpc_dictionary_create(0, 0, 0);
  v6 = MEMORY[0x1E0C812F8];
  if (v5 || (v5 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A85902BC](v5) == v6)
    {
      xpc_retain(v5);
      v7 = v5;
    }
    else
    {
      v7 = xpc_null_create();
    }
  }
  else
  {
    v7 = xpc_null_create();
    v5 = 0;
  }
  xpc_release(v5);
  v8 = *(_QWORD *)(a2 + 8);
  v9 = (const char *)(v8 + 16);
  if (*(char *)(v8 + 39) < 0)
    v9 = *(const char **)v9;
  v10 = xpc_string_create(v9);
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v7, "resetReason", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  memset(v57, 170, 32);
  v12 = *(_QWORD *)(a2 + 8);
  v13 = *(char *)(v12 + 63);
  if (v13 >= 0)
    v14 = *(unsigned __int8 *)(v12 + 63);
  else
    v14 = *(_QWORD *)(v12 + 48);
  v15 = v14 + 1;
  __dst = (void **)0xAAAAAAAAAAAAAAAALL;
  v56 = 0xAAAAAAAAAAAAAAAALL;
  if (v14 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v15 >= 0x17)
  {
    v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v17 = v15 | 7;
    v18 = v17 + 1;
    p_dst = (void **)operator new(v17 + 1);
    v56 = v14 + 1;
    v57[0] = v18 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    v56 = 0;
    v57[0] = 0;
    __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v57[0]) = v14 + 1;
    if (!v14)
      goto LABEL_27;
  }
  if (v13 >= 0)
    v19 = (const void *)(v12 + 40);
  else
    v19 = *(const void **)(v12 + 40);
  memmove(p_dst, v19, v14);
LABEL_27:
  *(_WORD *)((char *)p_dst + v14) = 58;
  std::to_string(&v54, *(_DWORD *)(v12 + 64));
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = &v54;
  else
    v20 = (std::string *)v54.__r_.__value_.__r.__words[0];
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  else
    size = v54.__r_.__value_.__l.__size_;
  v22 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v20, size);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v57[3] = *((_QWORD *)&v22->__r_.__value_.__l + 2);
  *(_OWORD *)&v57[1] = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v54.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v57[0]) & 0x80000000) == 0)
      goto LABEL_35;
  }
  else if ((SHIBYTE(v57[0]) & 0x80000000) == 0)
  {
    goto LABEL_35;
  }
  operator delete(__dst);
LABEL_35:
  if (v57[3] >= 0)
    v24 = (const char *)&v57[1];
  else
    v24 = (const char *)v57[1];
  v25 = xpc_string_create(v24);
  if (!v25)
    v25 = xpc_null_create();
  xpc_dictionary_set_value(v7, "shortResetReason", v25);
  v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
  v27 = *(_QWORD *)(a2 + 8);
  v28 = (const char *)(v27 + 40);
  if (*(char *)(v27 + 63) < 0)
    v28 = *(const char **)v28;
  v29 = xpc_string_create(v28);
  if (!v29)
    v29 = xpc_null_create();
  xpc_dictionary_set_value(v7, "basebandCrashFileName", v29);
  v30 = xpc_null_create();
  xpc_release(v29);
  xpc_release(v30);
  v31 = xpc_dictionary_create(0, 0, 0);
  if (v31 || (v31 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A85902BC](v31) == v6)
    {
      xpc_retain(v31);
      v32 = v31;
    }
    else
    {
      v32 = xpc_null_create();
    }
  }
  else
  {
    v32 = xpc_null_create();
    v31 = 0;
  }
  xpc_release(v31);
  v33 = xpc_string_create("metricsCCBasebandResetInfo");
  if (!v33)
    v33 = xpc_null_create();
  xpc_dictionary_set_value(v32, (const char *)*MEMORY[0x1E0CFB278], v33);
  v34 = xpc_null_create();
  xpc_release(v33);
  xpc_release(v34);
  v35 = xpc_string_create("Crash");
  if (!v35)
    v35 = xpc_null_create();
  xpc_dictionary_set_value(v32, (const char *)*MEMORY[0x1E0CFB3F0], v35);
  v36 = xpc_null_create();
  xpc_release(v35);
  xpc_release(v36);
  if (v7)
  {
    xpc_retain(v7);
    v37 = v7;
  }
  else
  {
    v37 = xpc_null_create();
  }
  xpc_dictionary_set_value(v32, (const char *)*MEMORY[0x1E0CFB9D8], v37);
  v38 = xpc_null_create();
  xpc_release(v37);
  xpc_release(v38);
  v39 = xpc_string_create((const char *)*MEMORY[0x1E0CFB448]);
  if (!v39)
    v39 = xpc_null_create();
  xpc_dictionary_set_value(v32, (const char *)*MEMORY[0x1E0CFB3E8], v39);
  v40 = xpc_null_create();
  xpc_release(v39);
  xpc_release(v40);
  v41 = xpc_dictionary_create(0, 0, 0);
  if (v41 || (v41 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A85902BC](v41) == v6)
    {
      xpc_retain(v41);
      v42 = v41;
    }
    else
    {
      v42 = xpc_null_create();
    }
  }
  else
  {
    v42 = xpc_null_create();
    v41 = 0;
  }
  xpc_release(v41);
  v43 = xpc_string_create((const char *)*MEMORY[0x1E0CFAFE8]);
  if (!v43)
    v43 = xpc_null_create();
  xpc_dictionary_set_value(v42, (const char *)*MEMORY[0x1E0CFB020], v43);
  v44 = xpc_null_create();
  xpc_release(v43);
  xpc_release(v44);
  if (v32)
  {
    xpc_retain(v32);
    v45 = v32;
  }
  else
  {
    v45 = xpc_null_create();
  }
  xpc_dictionary_set_value(v42, (const char *)*MEMORY[0x1E0CFB018], v45);
  v46 = xpc_null_create();
  xpc_release(v45);
  xpc_release(v46);
  v47 = (std::__shared_weak_count *)a1[17];
  if (v47)
  {
    v48 = std::__shared_weak_count::lock(v47);
    v56 = (unint64_t)v48;
    if (v48)
    {
      v49 = (void **)a1[16];
      __dst = v49;
      if (v49)
      {
        object = v42;
        if (v42)
          xpc_retain(v42);
        else
          object = xpc_null_create();
        abm::BasebandTracingTask::commandReportStatsAWD((uint64_t)v49, &object);
        xpc_release(object);
        object = 0;
        v50 = (std::__shared_weak_count *)v56;
        if (!v56)
          goto LABEL_84;
      }
      else
      {
        v50 = v48;
      }
      p_shared_owners = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldaxr(p_shared_owners);
      while (__stlxr(v52 - 1, p_shared_owners));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
  }
LABEL_84:
  xpc_release(v42);
  xpc_release(v32);
  if (SHIBYTE(v57[3]) < 0)
    operator delete((void *)v57[1]);
  xpc_release(v7);
}

void sub_1A351BEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;

  xpc_release(object);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  xpc_release(v30);
  xpc_release(v29);
  if (a28 < 0)
    operator delete(__p);
  xpc_release(v28);
  _Unwind_Resume(a1);
}

void EURCoreDumpTrace::storeCrashReason_sync(_QWORD *a1, uint64_t a2)
{
  NSObject *v3;
  std::string *p_p;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[2];
  std::string v13;
  uint8_t v14[8];
  std::string __p;
  __int128 buf;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  memset(&__p, 170, sizeof(__p));
  makeCrashString((char *)&__p, a2);
  v3 = a1[5];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = p_p;
    _os_log_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEFAULT, "#I Baseband crash: %{public}s", (uint8_t *)&buf, 0xCu);
  }
  v5 = (std::__shared_weak_count *)a1[17];
  if (!v5)
    goto LABEL_18;
  v6 = std::__shared_weak_count::lock(v5);
  *((_QWORD *)&buf + 1) = v6;
  if (!v6)
    goto LABEL_18;
  v7 = v6;
  v8 = a1[16];
  *(_QWORD *)&buf = v8;
  if (v8)
  {
    v9 = a1[5];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_1A343C000, v9, OS_LOG_TYPE_DEFAULT, "#I Request to reset baseband", v14, 2u);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v13 = __p;
    v12[0] = 0;
    v12[1] = 0;
    abm::BasebandTracingTask::setLastCrashReason(v8, (uint64_t)&v13, (uint64_t)v12);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
  }
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
LABEL_18:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_19:
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1A351C24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v24 - 64);
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void EURCoreDumpTrace::snapshot_sync(uint64_t a1, const void **a2)
{
  NSObject *v4;
  const char *v5;
  unsigned int v6;
  uint64_t v7;
  const void *v8;
  int v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD v17[6];
  CFTypeRef cf;
  uint8_t v19[4];
  const char *v20;
  __int128 buf;
  uint64_t v22;
  _QWORD *(*v23)(_QWORD *, _QWORD *);
  void (*v24)(_QWORD *);
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 160))
      v5 = "true";
    else
      v5 = "false";
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v5;
    _os_log_impl(&dword_1A343C000, v4, OS_LOG_TYPE_DEFAULT, "#I Snapshot requested. Enabled = %s", (uint8_t *)&buf, 0xCu);
  }
  if (*(_BYTE *)(a1 + 160))
  {
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v22 = 0x4002000000;
    v23 = __Block_byref_object_copy__4;
    v24 = __Block_byref_object_dispose__4;
    v25 = (uint64_t)&v25;
    v26 = &v25;
    v27 = 0;
    v6 = *(_DWORD *)(a1 + 184);
    if (v6)
    {
      while (1)
      {
        v7 = *(_QWORD *)(a1 + 152);
        v8 = *a2;
        cf = v8;
        if (v8)
          CFRetain(v8);
        v9 = (*(uint64_t (**)(uint64_t, CFTypeRef *, uint64_t))(*(_QWORD *)v7 + 56))(v7, &cf, *((_QWORD *)&buf + 1) + 40);
        if (cf)
          CFRelease(cf);
        if (!v9)
          break;
        v10 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          if (v6 <= 1)
            v11 = "giving up";
          else
            v11 = "trying again";
          *(_DWORD *)v19 = 136315138;
          v20 = v11;
          _os_log_error_impl(&dword_1A343C000, v10, OS_LOG_TYPE_ERROR, "Failed to capture, %s", v19, 0xCu);
          if (!--v6)
            goto LABEL_25;
        }
        else if (!--v6)
        {
          goto LABEL_25;
        }
      }
      if (*(_QWORD *)(*((_QWORD *)&buf + 1) + 56))
      {
        v17[0] = MEMORY[0x1E0C809B0];
        v17[1] = 0x40000000;
        v17[2] = ___ZN16EURCoreDumpTrace13snapshot_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
        v17[3] = &unk_1E4A0CF70;
        v17[4] = &buf;
        v17[5] = a1;
        ctu::SharedSynchronizable<Trace>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v17);
        _Block_object_dispose(&buf, 8);
        if (!v27)
          return;
        goto LABEL_26;
      }
      v12 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v19 = 0;
        _os_log_error_impl(&dword_1A343C000, v12, OS_LOG_TYPE_ERROR, "Baseband did not provide a coredump crash reason", v19, 2u);
        _Block_object_dispose(&buf, 8);
        if (!v27)
          return;
        goto LABEL_26;
      }
    }
LABEL_25:
    _Block_object_dispose(&buf, 8);
    if (!v27)
      return;
LABEL_26:
    v13 = v25;
    v14 = v26;
    v15 = *v26;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v25 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    v27 = 0;
    if (v14 == &v25)
      return;
    do
    {
      v16 = (uint64_t *)v14[1];
      if (*((char *)v14 + 63) < 0)
      {
        operator delete((void *)v14[5]);
        if (*((char *)v14 + 39) < 0)
LABEL_33:
          operator delete((void *)v14[2]);
      }
      else if (*((char *)v14 + 39) < 0)
      {
        goto LABEL_33;
      }
      operator delete(v14);
      v14 = v16;
    }
    while (v16 != &v25);
  }
}

void sub_1A351C5BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *__Block_byref_object_copy__4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result[5] = result + 5;
  result[6] = result + 5;
  result[7] = 0;
  v2 = a2[7];
  if (v2)
  {
    v4 = a2[5];
    v3 = (uint64_t *)a2[6];
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    v6 = result[5];
    *(_QWORD *)(v6 + 8) = v3;
    *v3 = v6;
    result[5] = v4;
    *(_QWORD *)(v4 + 8) = result + 5;
    result[7] = v2;
    a2[7] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__4(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;

  if (a1[7])
  {
    v1 = (char *)(a1 + 5);
    v2 = a1[5];
    v3 = (char *)a1[6];
    v4 = *(_QWORD *)v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v2 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[7] = 0;
    if (v3 != (char *)(a1 + 5))
    {
      do
      {
        v5 = (char *)*((_QWORD *)v3 + 1);
        if (v3[63] < 0)
        {
          operator delete(*((void **)v3 + 5));
          if (v3[39] < 0)
LABEL_9:
            operator delete(*((void **)v3 + 2));
        }
        else if (v3[39] < 0)
        {
          goto LABEL_9;
        }
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != v1);
    }
  }
}

void ___ZN16EURCoreDumpTrace13snapshot_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(v2 + 161) = 0;
  EURCoreDumpTrace::storeCrashReason_sync((_QWORD *)v2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::list(&v14, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  EURCoreDumpTrace::submitCrash_sync(v2, (uint64_t)&v14);
  if (v16)
  {
    v3 = v14;
    v4 = v15;
    v5 = *v15;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    v16 = 0;
    if (v4 != &v14)
    {
      do
      {
        v9 = (uint64_t *)v4[1];
        if (*((char *)v4 + 63) < 0)
        {
          operator delete((void *)v4[5]);
          if (*((char *)v4 + 39) < 0)
LABEL_11:
            operator delete((void *)v4[2]);
        }
        else if (*((char *)v4 + 39) < 0)
        {
          goto LABEL_11;
        }
        operator delete(v4);
        v4 = v9;
      }
      while (v9 != &v14);
    }
  }
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::list(&v11, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  EURCoreDumpTrace::updateAnalyticsEvent_sync((_QWORD *)v2, (uint64_t)&v11);
  if (v13)
  {
    v6 = v11;
    v7 = v12;
    v8 = *v12;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v11 + 8);
    **(_QWORD **)(v6 + 8) = v8;
    v13 = 0;
    if (v7 != &v11)
    {
      do
      {
        v10 = (uint64_t *)v7[1];
        if (*((char *)v7 + 63) < 0)
        {
          operator delete((void *)v7[5]);
          if (*((char *)v7 + 39) < 0)
LABEL_17:
            operator delete((void *)v7[2]);
        }
        else if (*((char *)v7 + 39) < 0)
        {
          goto LABEL_17;
        }
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != &v11);
    }
  }
}

void sub_1A351C85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::~list(&a9);
  _Unwind_Resume(a1);
}

void sub_1A351C870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::~list(va);
  _Unwind_Resume(a1);
}

void EURCoreDumpTrace::snapshot(uint64_t a1, dispatch_object_t *a2, const void **a3)
{
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  NSObject *v16;
  unint64_t v17;
  const void *v18;
  _QWORD v19[5];
  dispatch_group_t object;
  dispatch_group_t group;
  uint64_t v22;
  std::__shared_weak_count *v23;
  CFTypeRef cf;

  v6 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v6);
  }
  v7 = *(NSObject **)(a1 + 144);
  if (v7)
  {
    dispatch_retain(*(dispatch_object_t *)(a1 + 144));
    dispatch_group_enter(v7);
  }
  v9 = *(_QWORD *)(a1 + 72);
  v8 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v8 || (v10 = std::__shared_weak_count::lock(v8)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  v16 = *a2;
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 1174405120;
  v19[2] = ___ZN16EURCoreDumpTrace8snapshotEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v19[3] = &__block_descriptor_tmp_26_1;
  v19[4] = a1;
  object = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(v7);
  }
  group = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(v6);
  }
  v22 = v9;
  v23 = v11;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = *a3;
  cf = v18;
  if (v18)
    CFRetain(v18);
  ctu::SharedSynchronizable<Trace>::execute_wrapped((uint64_t *)(a1 + 72), v16, (uint64_t)v19);
  if (cf)
    CFRelease(cf);
  if (v23)
    std::__shared_weak_count::__release_weak(v23);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (object)
  {
    dispatch_group_leave(object);
    if (object)
      dispatch_release(object);
  }
  std::__shared_weak_count::__release_weak(v11);
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
  if (v6)
  {
    dispatch_group_leave(v6);
    dispatch_release(v6);
  }
}

void sub_1A351CA78(_Unwind_Exception *exception_object)
{
  NSObject *v1;
  NSObject *v2;

  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
    if (!v1)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v1)
  {
    goto LABEL_3;
  }
  dispatch_group_leave(v1);
  dispatch_release(v1);
  _Unwind_Resume(exception_object);
}

void ___ZN16EURCoreDumpTrace8snapshotEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  NSObject *v16;
  unsigned __int8 v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  NSObject *global_queue;
  NSObject *v22;
  NSObject *v23;
  const void *v24;
  _QWORD v25[5];
  dispatch_group_t object;
  dispatch_group_t group;
  CFTypeRef cf;
  void *__p;
  __int128 v30;
  _QWORD v31[2];
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  uint8_t buf[24];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v32 = 0;
  v33 = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v3)
  {
    v4 = 0;
    goto LABEL_28;
  }
  v4 = std::__shared_weak_count::lock(v3);
  v33 = v4;
  if (!v4 || (v32 = *(_QWORD *)(a1 + 56)) == 0)
  {
LABEL_28:
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED114D18 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v18 = qword_1ED114D18;
      if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
        goto LABEL_31;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
      v18 = qword_1ED114D18;
      if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
      {
LABEL_31:
        if (!v4)
          return;
        goto LABEL_32;
      }
    }
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/ABMHel"
                         "per/Server/Tasks/Wireless/Trace/CoreDump/EURCoreDumpTrace.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 312;
    _os_log_error_impl(&dword_1A343C000, v18, OS_LOG_TYPE_ERROR, "Invalid Weak pointer. File: %s Line: %d", buf, 0x12u);
    if (!v4)
      return;
    goto LABEL_32;
  }
  v31[0] = 0xAAAAAAAAAAAAAAAALL;
  v31[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v31, *(const __CFDictionary **)(a1 + 72));
  memset(buf, 170, sizeof(buf));
  __p = operator new(0x28uLL);
  v30 = xmmword_1A357F480;
  strcpy((char *)__p, "kCollectTelephonyLogsWithCoredump");
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v34, "kKeyTraceAction");
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A858F29C](&v34);
  operator delete(__p);
  v5 = buf[23];
  if ((buf[23] & 0x80u) != 0)
    v5 = *(_QWORD *)&buf[8];
  if (v5 != 33)
    goto LABEL_22;
  v6 = buf;
  if ((buf[23] & 0x80u) != 0)
    v6 = *(uint8_t **)buf;
  v7 = *(_QWORD *)v6;
  v8 = *((_QWORD *)v6 + 1);
  v9 = *((_QWORD *)v6 + 2);
  v10 = *((_QWORD *)v6 + 3);
  v11 = v6[32];
  v12 = v7 == *(_QWORD *)"kCollectTelephonyLogsWithCoredump" && v8 == *(_QWORD *)"TelephonyLogsWithCoredump";
  v13 = v12 && v9 == *(_QWORD *)"yLogsWithCoredump";
  v14 = v13 && v10 == *(_QWORD *)"hCoredump";
  if (v14 && v11 == str_67[32])
  {
    global_queue = dispatch_get_global_queue(0, 0);
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 1174405120;
    v25[2] = ___ZN16EURCoreDumpTrace8snapshotEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke_24;
    v25[3] = &__block_descriptor_tmp_25;
    v22 = *(NSObject **)(a1 + 40);
    v25[4] = v2;
    object = v22;
    if (v22)
    {
      dispatch_retain(v22);
      dispatch_group_enter(v22);
    }
    v23 = *(NSObject **)(a1 + 48);
    group = v23;
    if (v23)
    {
      dispatch_retain(v23);
      dispatch_group_enter(v23);
    }
    v24 = *(const void **)(a1 + 72);
    cf = v24;
    if (v24)
      CFRetain(v24);
    dispatch_async(global_queue, v25);
    if (cf)
      CFRelease(cf);
    if (group)
    {
      dispatch_group_leave(group);
      if (group)
        dispatch_release(group);
    }
    if (object)
    {
      dispatch_group_leave(object);
      if (object)
        dispatch_release(object);
    }
  }
  else
  {
LABEL_22:
    v16 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_error_impl(&dword_1A343C000, v16, OS_LOG_TYPE_ERROR, "Skip Coredump since abm::kCollectTelephonyLogsWithCoredump != traceAction", (uint8_t *)&__p, 2u);
    }
  }
  if ((char)buf[23] < 0)
    operator delete(*(void **)buf);
  MEMORY[0x1A858F2D8](v31);
LABEL_32:
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_1A351CE8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN16EURCoreDumpTrace8snapshotEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke_24(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  const void *v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(const void **)(a1 + 56);
  v3 = v2;
  if (v2)
    CFRetain(v2);
  EURCoreDumpTrace::snapshot_sync(v1, &v3);
  if (v2)
    CFRelease(v2);
}

void sub_1A351CF44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c30_ZTSN8dispatch13group_sessionE56c29_ZTSNSt3__18weak_ptrI5TraceEE72c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  CFTypeRef result;

  v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = a1[5];
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = a2[6];
  a1[6] = v6;
  if (v6)
  {
    dispatch_retain(v6);
    v7 = a1[6];
    if (v7)
      dispatch_group_enter(v7);
  }
  v8 = a2[8];
  a1[7] = a2[7];
  a1[8] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 16);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  result = (CFTypeRef)a2[9];
  a1[9] = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c30_ZTSN8dispatch13group_sessionE56c29_ZTSNSt3__18weak_ptrI5TraceEE72c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(_QWORD *a1)
{
  const void *v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;

  v2 = (const void *)a1[9];
  if (v2)
    CFRelease(v2);
  v3 = (std::__shared_weak_count *)a1[8];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = a1[6];
  if (v4)
  {
    dispatch_group_leave(v4);
    v5 = a1[6];
    if (v5)
      dispatch_release(v5);
  }
  v6 = a1[5];
  if (v6)
  {
    dispatch_group_leave(v6);
    v7 = a1[5];
    if (v7)
      dispatch_release(v7);
  }
}

BOOL EURCoreDumpTrace::setProperty(capabilities::trace *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  _BOOL8 v10;
  _QWORD v11[8];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  _QWORD block[6];

  if ((capabilities::trace::allowed(a1) & 1) != 0)
  {
    v12 = 0;
    v13 = &v12;
    v14 = 0x2000000000;
    v15 = 0;
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 0x40000000;
    v11[2] = ___ZN16EURCoreDumpTrace11setPropertyEN8dispatch5groupERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA__block_invoke;
    v11[3] = &unk_1E4A0CFF8;
    v11[4] = &v12;
    v11[5] = a1;
    v11[6] = a3;
    v11[7] = a4;
    v16 = v11;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke_4;
    block[3] = &__block_descriptor_tmp_50;
    block[4] = (char *)a1 + 72;
    block[5] = &v16;
    v7 = *((_QWORD *)a1 + 11);
    if (*((_QWORD *)a1 + 12))
      dispatch_async_and_wait(v7, block);
    else
      dispatch_sync(v7, block);
    v10 = *((_BYTE *)v13 + 24) != 0;
    _Block_object_dispose(&v12, 8);
    return v10;
  }
  else
  {
    v8 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(block[0]) = 0;
      _os_log_impl(&dword_1A343C000, v8, OS_LOG_TYPE_DEFAULT, "#I Set property not allowed", (uint8_t *)block, 2u);
    }
    return 0;
  }
}

void ___ZN16EURCoreDumpTrace11setPropertyEN8dispatch5groupERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA__block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  int v11;
  void *v12;
  std::string *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  capabilities::trace *v20;
  std::string v21;
  void *__p[2];
  char v23;
  std::string v24;
  std::string __dst;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = (const void *)*MEMORY[0x1E0CFAF68];
  v5 = strlen((const char *)*MEMORY[0x1E0CFAF68]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v6;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
  p_dst = &__dst;
  if (v5)
LABEL_8:
    memmove(p_dst, v4, v6);
  p_dst->__r_.__value_.__s.__data_[v6] = 0;
  if (*(char *)(v3 + 23) >= 0)
    v10 = (const char *)v3;
  else
    v10 = *(const char **)v3;
  v11 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  v12 = (void *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &__dst;
  else
    v13 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  v14 = strcasecmp(v10, (const char *)v13);
  v15 = v14;
  if (v11 < 0)
  {
    operator delete(v12);
    if (v15)
      return;
  }
  else if (v14)
  {
    return;
  }
  v16 = prop::coredump::set(*(_QWORD *)(a1 + 48), *(char **)(a1 + 56));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v16;
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (!*(_BYTE *)(v17 + 24))
  {
    *(_BYTE *)(v17 + 24) = 0;
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      return;
    goto LABEL_29;
  }
  v18 = *(char **)(a1 + 48);
  memset(&v21, 0, sizeof(v21));
  v23 = 8;
  strcpy((char *)__p, "CoreDump");
  memset(&__dst, 0, sizeof(__dst));
  v16 = defaults::get((char *)__p, v18, &__dst);
  v19 = v16;
  if ((_DWORD)v16)
  {
    prop::file::get<std::string>((const void **)__p, (uint64_t)v18, (uint64_t)&__dst, &v24);
    v21 = v24;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((v23 & 0x80000000) == 0)
    {
LABEL_24:
      if (!v19)
        goto LABEL_25;
LABEL_35:
      v16 = util::convert<BOOL>(&v21, (BOOL *)(v2 + 160), 0);
      LOBYTE(v19) = v16;
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_26;
      goto LABEL_36;
    }
  }
  else if ((v23 & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(__p[0]);
  if (v19)
    goto LABEL_35;
LABEL_25:
  if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_26;
LABEL_36:
  operator delete(v21.__r_.__value_.__l.__data_);
LABEL_26:
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v19;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    return;
LABEL_29:
  v20 = (capabilities::trace *)capabilities::trace::allowed((capabilities::trace *)v16);
  if ((_DWORD)v20)
  {
    if (capabilities::trace::supportsCoreDumpStatus(v20))
      (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 168) + 72))(*(_QWORD *)(v2 + 168));
  }
}

void sub_1A351D3F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t EURCoreDumpTrace::getProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[8];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  _QWORD block[6];

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZN16EURCoreDumpTrace11getPropertyERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERS6__block_invoke;
  v7[3] = &unk_1E4A0D020;
  v7[6] = a2;
  v7[7] = a3;
  v7[4] = &v8;
  v7[5] = a1;
  v12 = v7;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI5TraceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke_4;
  block[3] = &__block_descriptor_tmp_50;
  block[4] = a1 + 72;
  block[5] = &v12;
  v4 = a1 + 88;
  v3 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(v4 + 8))
    dispatch_async_and_wait(v3, block);
  else
    dispatch_sync(v3, block);
  v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void ___ZN16EURCoreDumpTrace11getPropertyERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERS6__block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  int v5;
  std::string::size_type v6;
  char v7;
  uint64_t v8;
  std::string *p_p;
  std::string::size_type size;
  std::string *v11;
  std::string::size_type v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  std::string __p;
  std::string v17;
  std::string v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  v3 = a1[5];
  v2 = a1[6];
  *((_BYTE *)&v17.__r_.__value_.__s + 23) = 5;
  LODWORD(v17.__r_.__value_.__l.__data_) = *(_DWORD *)"State";
  WORD2(v17.__r_.__value_.__r.__words[0]) = str_22_0[4];
  if (*(char *)(v2 + 23) >= 0)
    v4 = (const char *)v2;
  else
    v4 = *(const char **)v2;
  if (!strcasecmp(v4, (const char *)&v17))
  {
    *((_BYTE *)&v18.__r_.__value_.__s + 23) = 9;
    strcpy((char *)&v18, "Enabled: ");
    std::to_string(&v17, *(unsigned __int8 *)(v3 + 160));
    __p = v17;
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v11 = std::string::append(&v18, (const std::string::value_type *)p_p, size);
    v12 = v11->__r_.__value_.__r.__words[0];
    v19[0] = v11->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v19 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
    v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v14 = a1[7];
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    v15 = v19[0];
    *(_QWORD *)v14 = v12;
    *(_QWORD *)(v14 + 8) = v15;
    *(_QWORD *)(v14 + 15) = *(_QWORD *)((char *)v19 + 7);
    *(_BYTE *)(v14 + 23) = v13;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_19;
    }
    else if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    operator delete(v18.__r_.__value_.__l.__data_);
    goto LABEL_19;
  }
  *((_BYTE *)&v17.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v17, "Enabled");
  if (strcasecmp(v4, (const char *)&v17))
    return;
  v5 = *(unsigned __int8 *)(v3 + 160);
  v18.__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)v18.__r_.__value_.__r.__words + 7) = 0;
  std::to_string(&v17, v5);
  v18.__r_.__value_.__r.__words[0] = v17.__r_.__value_.__l.__size_;
  v6 = v17.__r_.__value_.__r.__words[0];
  *(std::string::size_type *)((char *)v18.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v17.__r_.__value_.__r.__words[1] + 7);
  v7 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  v8 = a1[7];
  if (*(char *)(v8 + 23) < 0)
    operator delete(*(void **)v8);
  *(_QWORD *)v8 = v6;
  *(_QWORD *)(v8 + 8) = v18.__r_.__value_.__r.__words[0];
  *(_QWORD *)(v8 + 15) = *(std::string::size_type *)((char *)v18.__r_.__value_.__r.__words + 7);
  *(_BYTE *)(v8 + 23) = v7;
LABEL_19:
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
}

void sub_1A351D710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    if (*(char *)(*(_QWORD *)(v23 + 56) + 23) < 0)
      JUMPOUT(0x1A351D5D4);
    JUMPOUT(0x1A351D5DCLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A351D790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if ((a14 & 0x80000000) == 0)
    JUMPOUT(0x1A351D758);
  JUMPOUT(0x1A351D750);
}

void EURCoreDumpTrace::dumpState(uint64_t a1)
{
  std::__shared_weak_count *v3;
  uint64_t *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  unint64_t v13;
  _QWORD v14[5];
  dispatch_group_t group;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v5 = *(_QWORD *)(a1 + 72);
  v3 = *(std::__shared_weak_count **)(a1 + 80);
  v4 = (uint64_t *)(a1 + 72);
  if (!v3 || (v6 = std::__shared_weak_count::lock(v3)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = *(NSObject **)(a1 + 144);
  if (v12)
  {
    dispatch_retain(*(dispatch_object_t *)(a1 + 144));
    dispatch_group_enter(v12);
  }
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 1174405120;
  v14[2] = ___ZN16EURCoreDumpTrace9dumpStateEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke;
  v14[3] = &__block_descriptor_tmp_32_1;
  v14[4] = a1;
  group = v12;
  if (v12)
  {
    dispatch_retain(v12);
    dispatch_group_enter(v12);
  }
  v16 = v5;
  v17 = v7;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  ctu::SharedSynchronizable<Trace>::execute_wrapped(v4, (uint64_t)v14);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (v12)
  {
    dispatch_group_leave(v12);
    dispatch_release(v12);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void ___ZN16EURCoreDumpTrace9dumpStateEN8dispatch5groupENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  const char *v6;
  unsigned __int8 v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
  {
    v4 = 0;
    goto LABEL_10;
  }
  v3 = a1[4];
  v4 = std::__shared_weak_count::lock(v2);
  if (!v4 || !a1[6])
  {
LABEL_10:
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED114D18 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v8 = qword_1ED114D18;
      if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
        goto LABEL_13;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
      v8 = qword_1ED114D18;
      if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
      {
LABEL_13:
        if (!v4)
          return;
        goto LABEL_14;
      }
    }
    v11 = 136315394;
    v12 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/ABMHelper/Server/Task"
          "s/Wireless/Trace/CoreDump/EURCoreDumpTrace.cpp";
    v13 = 1024;
    v14 = 411;
    _os_log_error_impl(&dword_1A343C000, v8, OS_LOG_TYPE_ERROR, "Invalid Weak pointer. File: %s Line: %d", (uint8_t *)&v11, 0x12u);
    if (!v4)
      return;
    goto LABEL_14;
  }
  v5 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(v3 + 160))
      v6 = "True";
    else
      v6 = "False";
    v11 = 136315138;
    v12 = v6;
    _os_log_impl(&dword_1A343C000, v5, OS_LOG_TYPE_DEFAULT, "#I Enabled: %s", (uint8_t *)&v11, 0xCu);
  }
LABEL_14:
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void EURCoreDumpTrace::abort(uint64_t a1, const void *a2, ctu **a3)
{
  xpc_object_t v4;
  uint64_t v5;
  xpc_object_t value;
  const char *v7;
  char v8;
  xpc_object_t *v9;
  int v10;
  NSObject *v11;
  xpc_object_t v12;
  xpc_object_t object[3];

  ctu::cf_to_xpc(*a3, a2);
  v4 = object[0];
  v5 = MEMORY[0x1E0C812F8];
  if (object[0] && MEMORY[0x1A85902BC](object[0]) == v5)
    xpc_retain(object[0]);
  else
    v4 = xpc_null_create();
  xpc_release(object[0]);
  if (MEMORY[0x1A85902BC](v4) == v5)
  {
    memset(object, 170, sizeof(object));
    value = xpc_dictionary_get_value(v4, (const char *)*MEMORY[0x1E0CFB8D0]);
    v12 = value;
    if (value)
      xpc_retain(value);
    else
      v12 = xpc_null_create();
    xpc::dyn_cast_or_default();
    xpc_release(v12);
    v7 = (const char *)*MEMORY[0x1E0CFBF98];
    v8 = HIBYTE(object[2]);
    if (SHIBYTE(object[2]) < 0)
    {
      v9 = (xpc_object_t *)object[0];
      if (!strcasecmp(v7, (const char *)object[0])
        || !strcasecmp((const char *)*MEMORY[0x1E0CFC000], (const char *)object[0]))
      {
LABEL_21:
        *(_BYTE *)(a1 + 161) = 1;
        v11 = *(NSObject **)(a1 + 40);
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          goto LABEL_18;
        goto LABEL_17;
      }
    }
    else
    {
      if (!strcasecmp(v7, (const char *)object))
        goto LABEL_21;
      v9 = object;
      if (!strcasecmp((const char *)*MEMORY[0x1E0CFC000], (const char *)object))
        goto LABEL_21;
    }
    v10 = strcasecmp((const char *)*MEMORY[0x1E0CFBEA0], (const char *)v9);
    *(_BYTE *)(a1 + 161) = v10 == 0;
    if (v10 || (v11 = *(NSObject **)(a1 + 40), !os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)))
    {
LABEL_18:
      if (v8 < 0)
        operator delete(object[0]);
      goto LABEL_20;
    }
LABEL_17:
    LOWORD(v12) = 0;
    _os_log_impl(&dword_1A343C000, v11, OS_LOG_TYPE_DEFAULT, "#I Baseband crash reason will be parsed", (uint8_t *)&v12, 2u);
    v8 = HIBYTE(object[2]);
    goto LABEL_18;
  }
LABEL_20:
  xpc_release(v4);
}

void sub_1A351DCEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  void *v9;

  xpc_release(object);
  xpc_release(v9);
  _Unwind_Resume(a1);
}

void EURCoreDumpTrace::getSettingPrefix(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 8) = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)(a1 + 16) = 0xAAAAAAAAAAAAAAAALL;
  *(_BYTE *)(a1 + 23) = 10;
  strcpy((char *)a1, "CoreDump::");
}

const char *EURCoreDumpTrace::getName(EURCoreDumpTrace *this)
{
  return "trace.coredump";
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body_base>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 32))(*(_QWORD *)(a1 + 184));
  v2 = *(_QWORD *)(a1 + 168);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 176);
    if (v3 - 1 >= 0)
    {
      v4 = v2 + 16 * v3;
      do
      {
        v5 = *(unsigned int **)(v4 - 8);
        if (v5)
        {
          v6 = v5 + 2;
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
            v9 = v5 + 3;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
              (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 24))(v5);
          }
        }
        v4 -= 16;
      }
      while (v4 > v2);
    }
    if (*(_QWORD *)(a1 + 160) >= 0xBuLL)
      operator delete(*(void **)(a1 + 168));
  }
  return a1;
}

uint64_t boost::shared_ptr<void>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  v4 = (_QWORD *)a1;
  if (a2 >= 0xB)
  {
    if (a2 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(16 * a2);
  }
  v6 = *(_QWORD **)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 176);
  if (v5)
  {
    v7 = &v6[2 * v5];
    v8 = v4;
    do
    {
      v9 = v6[1];
      *v8 = *v6;
      v8[1] = v9;
      if (v9)
      {
        v10 = (unsigned int *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v6 += 2;
      v8 += 2;
    }
    while (v6 != v7);
    v6 = *(_QWORD **)(a1 + 168);
  }
  if (v6)
  {
    v12 = *(_QWORD *)(a1 + 176);
    if (v12 - 1 >= 0)
    {
      v13 = &v6[2 * v12];
      do
      {
        v14 = (unsigned int *)*(v13 - 1);
        if (v14)
        {
          v15 = v14 + 2;
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
            v18 = v14 + 3;
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
              (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 24))(v14);
          }
        }
        v13 -= 2;
      }
      while (v13 > v6);
    }
    if (*(_QWORD *)(a1 + 160) >= 0xBuLL)
      operator delete(*(void **)(a1 + 168));
  }
  *(_QWORD *)(a1 + 160) = a2;
  *(_QWORD *)(a1 + 168) = v4;
}

_QWORD *std::shared_ptr<EURCoreDumpTrace>::shared_ptr[abi:ne180100]<EURCoreDumpTrace,std::shared_ptr<EURCoreDumpTrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<EURCoreDumpTrace>(EURCoreDumpTrace*)::{lambda(EURCoreDumpTrace*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A0D098;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1A351E184(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<EURCoreDumpTrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<EURCoreDumpTrace>(EURCoreDumpTrace*)::{lambda(EURCoreDumpTrace*)#1}::operator() const(EURCoreDumpTrace*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1A351E1A4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<EURCoreDumpTrace *,std::shared_ptr<EURCoreDumpTrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<EURCoreDumpTrace>(EURCoreDumpTrace*)::{lambda(EURCoreDumpTrace *)#1},std::allocator<EURCoreDumpTrace>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<EURCoreDumpTrace *,std::shared_ptr<EURCoreDumpTrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<EURCoreDumpTrace>(EURCoreDumpTrace*)::{lambda(EURCoreDumpTrace *)#1},std::allocator<EURCoreDumpTrace>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<EURCoreDumpTrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<EURCoreDumpTrace>(EURCoreDumpTrace*)::{lambda(EURCoreDumpTrace*)#1}::operator() const(EURCoreDumpTrace*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<EURCoreDumpTrace *,std::shared_ptr<EURCoreDumpTrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<EURCoreDumpTrace>(EURCoreDumpTrace*)::{lambda(EURCoreDumpTrace *)#1},std::allocator<EURCoreDumpTrace>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI16EURCoreDumpTraceEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI16EURCoreDumpTraceEENSt3__110share"
                                "d_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI16EURCoreDumpTraceEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI5TraceE15make_shared_ptrI16EURCoreDumpTraceEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<EURCoreDumpTrace> ctu::SharedSynchronizable<Trace>::make_shared_ptr<EURCoreDumpTrace>(EURCoreDumpTrace*)::{lambda(EURCoreDumpTrace*)#1}::operator() const(EURCoreDumpTrace*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ___ZN3ctu20SharedSynchronizableI5TraceE13connect_eventIN5boost8signals26signalIFvNSt3__14listIN8coredump13CommandDriver29EURCoreDumpTraceProtocolCrashENS7_9allocatorISB_EEEEENS5_19optional_last_valueIvEEiNS7_4lessIiEENS4_8functionISF_EENSK_IFvRKNS5_10connectionESE_EEENS5_5mutexEEE16EURCoreDumpTracevJSE_EEEDTcl7connectfp_cvNS7_10shared_ptrIS1_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSY_S10_E_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  void (*v3)(_QWORD *, uint64_t *);
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v3 = (void (*)(_QWORD *, uint64_t *))a1[5];
  v2 = a1[6];
  v4 = (_QWORD *)(a1[4] + (v2 >> 1) - 72);
  if ((v2 & 1) != 0)
    v3 = *(void (**)(_QWORD *, uint64_t *))(*v4 + v3);
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::list(&v9, a2);
  v3(v4, &v9);
  if (v11)
  {
    v5 = v9;
    v6 = v10;
    v7 = *v10;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v9 + 8);
    **(_QWORD **)(v5 + 8) = v7;
    v11 = 0;
    if (v6 != &v9)
    {
      do
      {
        v8 = (uint64_t *)v6[1];
        if (*((char *)v6 + 63) < 0)
        {
          operator delete((void *)v6[5]);
          if (*((char *)v6 + 39) < 0)
LABEL_11:
            operator delete((void *)v6[2]);
        }
        else if (*((char *)v6 + 39) < 0)
        {
          goto LABEL_11;
        }
        operator delete(v6);
        v6 = v8;
      }
      while (v8 != &v9);
    }
  }
}

void sub_1A351E348(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::~list(va);
  _Unwind_Resume(a1);
}

uint64_t boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>::~slot(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 32, a1 + 32, 2);
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(_QWORD *)a1)
  {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)a1, *(_QWORD *)a1);
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>::~DispatchSlot(uint64_t a1)
{
  const void *v2;

  dispatch_release(*(dispatch_object_t *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    _Block_release(v2);
  return a1;
}

uint64_t boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 184));
  v2 = *(_QWORD *)(a1 + 168);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 176);
    if (v3 - 1 >= 0)
    {
      v4 = v2 + 16 * v3;
      do
      {
        v5 = *(unsigned int **)(v4 - 8);
        if (v5)
        {
          v6 = v5 + 2;
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
            v9 = v5 + 3;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
              (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 24))(v5);
          }
        }
        v4 -= 16;
      }
      while (v4 > v2);
    }
    if (*(_QWORD *)(a1 + 160) >= 0xBuLL)
      operator delete(*(void **)(a1 + 168));
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_base::destroy(uint64_t this)
{
  if (this)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  return this;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<KernelPCITrace::BuffContext *>::destroy((_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>(_DWORD *a1, _QWORD *a2)
{
  int v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  __int128 v16;

  v2 = a1[7] - 1;
  a1[7] = v2;
  if (!v2)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 40))(&v16);
    v4 = a2[22];
    if (v4 == a2[20] && v4 != -1)
    {
      if (4 * v4 <= (unint64_t)(v4 + 1))
        v5 = v4 + 1;
      else
        v5 = 4 * v4;
      boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl((uint64_t)a2, v5);
      v4 = a2[22];
    }
    v6 = *((_QWORD *)&v16 + 1);
    *(_OWORD *)(a2[21] + 16 * v4) = v16;
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      v4 = a2[22];
    }
    a2[22] = v4 + 1;
    v9 = (unsigned int *)*((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
  }
}

void sub_1A351E940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::shared_ptr<void>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void boost::signals2::detail::connection_body_base::~connection_body_base(boost::signals2::detail::connection_body_base *this)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  *(_QWORD *)this = off_1E4A0D260;
  v1 = (unsigned int *)*((_QWORD *)this + 2);
  if (v1)
  {
    v2 = v1 + 3;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 24))(v1);
  }
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  _QWORD *v1;

  v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>::~connection_body(a1);
  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  __int128 v2;
  pthread_mutex_t *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int i;
  unsigned int v10;
  uint64_t v11;
  char v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  char *v22;
  char *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  _OWORD v33[10];
  unint64_t v34;
  void *__p;
  uint64_t v36;
  pthread_mutex_t *v37;
  _QWORD v38[4];

  v38[3] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[8] = v2;
  v33[9] = v2;
  v33[6] = v2;
  v33[7] = v2;
  v33[4] = v2;
  v33[5] = v2;
  v33[2] = v2;
  v33[3] = v2;
  v33[0] = v2;
  v33[1] = v2;
  v3 = *(pthread_mutex_t **)(a1 + 48);
  v34 = 10;
  __p = v33;
  v36 = 0;
  v37 = v3;
  pthread_mutex_lock(v3);
  v4 = *(uint64_t **)(a1 + 32);
  if (!v4)
    goto LABEL_40;
  v5 = *v4;
  if (*v4 == v4[1])
    goto LABEL_40;
  do
  {
    memset(v38, 170, 24);
    v6 = *(_DWORD *)v5 ^ (*(int *)v5 >> 31);
    if (v6 == 2)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v5 + 8) + 16))(&v32);
      v38[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
      LODWORD(v38[0]) = 1;
      if (v32)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
          goto LABEL_26;
LABEL_19:
        v11 = *(_QWORD *)(v5 + 16);
        if (!v11)
          goto LABEL_27;
        if (!atomic_load((unsigned int *)(v11 + 8)))
          goto LABEL_27;
LABEL_21:
        v13 = 0;
        if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
          goto LABEL_30;
        goto LABEL_22;
      }
LABEL_18:
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v6 != 1)
    {
      LODWORD(v38[0]) = 0;
      v38[1] = 0;
      v38[2] = 0;
      goto LABEL_18;
    }
    v7 = *(_QWORD *)(v5 + 16);
    if (!v7)
    {
LABEL_25:
      v38[1] = 0;
      v38[2] = v7;
      LODWORD(v38[0]) = 0;
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    v8 = (unsigned int *)(v7 + 8);
    for (i = *(_DWORD *)(v7 + 8); ; i = v10)
    {
      if (!i)
      {
        v7 = 0;
        goto LABEL_25;
      }
      v10 = __ldxr(v8);
      if (v10 != i)
      {
        __clrex();
        continue;
      }
      if (!__stxr(i + 1, v8))
        break;
    }
    v38[1] = *(_QWORD *)(v5 + 8);
    v38[2] = v7;
    LODWORD(v38[0]) = 0;
    if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) != 2)
      goto LABEL_19;
LABEL_26:
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v5 + 8) + 24))(*(_QWORD *)(v5 + 8)))
      goto LABEL_21;
LABEL_27:
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v33);
    }
    v13 = 1;
    if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
    {
LABEL_30:
      v14 = (unsigned int *)v38[2];
      if (v38[2])
      {
        v15 = (unsigned int *)(v38[2] + 8);
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
          v18 = v14 + 3;
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
            (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 24))(v14);
        }
      }
      goto LABEL_38;
    }
LABEL_22:
    if (v38[1])
      (*(void (**)(_QWORD))(*(_QWORD *)v38[1] + 8))(v38[1]);
LABEL_38:
    if ((v13 & 1) != 0)
      break;
    v5 += 24;
  }
  while (v5 != *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
LABEL_40:
  v21 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v37);
  v22 = (char *)__p;
  if (__p)
  {
    if (v36 - 1 >= 0)
    {
      v23 = (char *)__p + 16 * v36;
      do
      {
        v24 = (unsigned int *)*((_QWORD *)v23 - 1);
        if (v24)
        {
          v25 = v24 + 2;
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 16))(v24);
            v28 = v24 + 3;
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
              (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 24))(v24);
          }
        }
        v23 -= 16;
      }
      while (v23 > v22);
    }
    if (v34 >= 0xB)
      operator delete(__p);
  }
  return v21 != 0;
}

void sub_1A351ED38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *(_QWORD *)(result + 40);
  v2 = (_QWORD *)(result + 32);
  *a2 = *(_QWORD *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *(unsigned int **)(result + 40);
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
    if (v6)
    {
      v7 = v6 + 2;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
        v10 = v6 + 3;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
      }
    }
  }
  else
  {
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
  }
  return result;
}

_QWORD *std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    if (v6 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v5);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[24 * v6];
    v8 = v7;
    do
    {
      v10 = *(_DWORD *)v3 ^ (*(int *)v3 >> 31);
      if (v10 == 2)
      {
        *((_QWORD *)v8 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8) + 32))(*(_QWORD *)(v3 + 8));
      }
      else if (v10 == 1)
      {
        v11 = *(_QWORD *)(v3 + 16);
        *((_QWORD *)v8 + 1) = *(_QWORD *)(v3 + 8);
        *((_QWORD *)v8 + 2) = v11;
        if (v11)
        {
          v12 = (unsigned int *)(v11 + 12);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
      }
      else
      {
        v14 = *(_QWORD *)(v3 + 16);
        *((_QWORD *)v8 + 1) = *(_QWORD *)(v3 + 8);
        *((_QWORD *)v8 + 2) = v14;
        if (v14)
        {
          v15 = (unsigned int *)(v14 + 12);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
      }
      v9 = *(_DWORD *)v3;
      v3 += 24;
      *(_DWORD *)v8 = v9 ^ (v9 >> 31);
      v8 += 24;
    }
    while (v3 != v4);
    a1[1] = v8;
  }
  return a1;
}

void sub_1A351F03C(_Unwind_Exception *exception_object)
{
  unsigned int *v1;

  if (*(_QWORD *)v1)
  {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100](v1, *(_QWORD *)v1);
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>::operator()[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  if (a2 != result)
  {
    v2 = result;
    v3 = a2;
    do
    {
      v4 = *(_DWORD *)(v3 - 24);
      v3 -= 24;
      v5 = v4 ^ (v4 >> 31);
      if (v5 == 2)
      {
        result = *(_QWORD *)(a2 - 16);
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        goto LABEL_3;
      }
      if (v5 == 1)
      {
        result = *(_QWORD *)(a2 - 8);
        if (!result)
          goto LABEL_3;
        v6 = (unsigned int *)(result + 12);
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (v8)
          goto LABEL_3;
      }
      else
      {
        result = *(_QWORD *)(a2 - 8);
        if (!result)
          goto LABEL_3;
        v9 = (unsigned int *)(result + 12);
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (v11)
          goto LABEL_3;
      }
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
LABEL_3:
      a2 = v3;
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::~variant(uint64_t a1)
{
  int v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *(_DWORD *)a1 ^ (*(int *)a1 >> 31);
  if (v2 != 2)
  {
    if (v2 == 1)
    {
      v3 = *(unsigned int **)(a1 + 16);
      if (!v3)
        return a1;
      v4 = v3 + 3;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (v6)
        return a1;
    }
    else
    {
      v3 = *(unsigned int **)(a1 + 16);
      if (!v3)
        return a1;
      v9 = v3 + 3;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (v11)
        return a1;
    }
    (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    return a1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

unsigned int *std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100](unsigned int *result, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  if (v4 != a2)
  {
    v5 = *((_QWORD *)result + 1);
    do
    {
      v6 = *(_DWORD *)(v5 - 24);
      v5 -= 24;
      v7 = v6 ^ (v6 >> 31);
      if (v7 == 2)
      {
        result = *(unsigned int **)(v4 - 16);
        if (result)
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        goto LABEL_3;
      }
      if (v7 == 1)
      {
        result = *(unsigned int **)(v4 - 8);
        if (!result)
          goto LABEL_3;
        v8 = result + 3;
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (v10)
          goto LABEL_3;
      }
      else
      {
        result = *(unsigned int **)(v4 - 8);
        if (!result)
          goto LABEL_3;
        v11 = result + 3;
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (v13)
          goto LABEL_3;
      }
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 24))(result);
LABEL_3:
      v4 = v5;
    }
    while (v5 != a2);
  }
  *((_QWORD *)v3 + 1) = a2;
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>>::dispose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3)
          v3(v1 + 32, v1 + 32, 2);
      }
      *(_QWORD *)(v1 + 24) = 0;
    }
    if (*(_QWORD *)v1)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v1, *(_QWORD *)v1);
      operator delete(*(void **)v1);
    }
    operator delete((void *)v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>>::get_untyped_deleter()
{
  return 0;
}

_QWORD *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  *a1 = off_1E4A0D1F8;
  v2 = (unsigned int *)a1[7];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  v9 = (unsigned int *)a1[5];
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
      v13 = v9 + 3;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
    }
  }
  *a1 = off_1E4A0D260;
  v16 = (unsigned int *)a1[2];
  if (v16)
  {
    v17 = v16 + 3;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16);
  }
  return a1;
}

uint64_t boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::~variant(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;

  if (*(_DWORD *)a1 == *(int *)a1 >> 31)
  {
    v2 = *(unsigned int **)(a1 + 16);
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    return a1;
  }
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>::~function(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  NSObject *v6;
  void *v7;
  const void *v8;
  const char *v9;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v9 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001A35833DCLL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001A35833DCLL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      v8 = (const void *)*((_QWORD *)a2 + 1);
      if (v8)
LABEL_9:
        _Block_release(v8);
    }
  }
  else
  {
    v6 = *(NSObject **)a1;
    v7 = *(void **)(a1 + 8);
    *(_QWORD *)a2 = *(_QWORD *)a1;
    if (v7)
    {
      v7 = _Block_copy(v7);
      v6 = *(NSObject **)a2;
    }
    *((_QWORD *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      v8 = *(const void **)(a1 + 8);
      if (v8)
        goto LABEL_9;
    }
  }
}

void boost::detail::function::void_function_obj_invoker1<ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,void,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>::invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  NSObject *v8;
  void *v9;
  const void *v10;
  void *v11;
  const void *v12;
  void *v13;
  const void *v14;
  void *v15;
  const void *v16;
  void *v17;
  const void *v18;
  void *v19;
  const void *v20;
  char v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  void (*v29)(__int128 *, __int128 *, uint64_t);
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  __int128 v42;
  uint64_t v43;
  _QWORD block[6];

  v35 = (uint64_t)&v35;
  v36 = &v35;
  v37 = 0;
  v2 = a2[2];
  if (v2)
  {
    v4 = *a2;
    v3 = (uint64_t *)a2[1];
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(*a2 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    v6 = v35;
    *(_QWORD *)(v35 + 8) = v3;
    *v3 = v6;
    *(_QWORD *)(v4 + 8) = &v35;
    v35 = v4;
    v37 = v2;
    a2[2] = 0;
  }
  v8 = *(NSObject **)a1;
  v7 = *(const void **)(a1 + 8);
  if (!v7)
  {
    v10 = 0;
    goto LABEL_12;
  }
  v9 = _Block_copy(v7);
  v10 = v9;
  if (!v9)
  {
LABEL_12:
    v21 = 1;
LABEL_13:
    v41 = (unint64_t)boost::function1<void,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>::assign_to<dispatch::block<void({block_pointer})(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>(dispatch::block<void({block_pointer})(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>)::stored_vtable;
    *(_QWORD *)&v42 = 0;
    goto LABEL_23;
  }
  v11 = _Block_copy(v9);
  v12 = v11;
  if (!v11)
  {
    v21 = 0;
    goto LABEL_13;
  }
  v13 = _Block_copy(v11);
  v14 = v13;
  if (v13)
  {
    v15 = _Block_copy(v13);
    v16 = v15;
    if (v15)
    {
      v17 = _Block_copy(v15);
      v18 = v17;
      if (v17)
      {
        v19 = _Block_copy(v17);
        v20 = v19;
        if (v19)
        {
          *(_QWORD *)&v42 = _Block_copy(v19);
          _Block_release(v20);
        }
        else
        {
          *(_QWORD *)&v42 = 0;
        }
        _Block_release(v18);
      }
      else
      {
        *(_QWORD *)&v42 = 0;
      }
      _Block_release(v16);
    }
    else
    {
      *(_QWORD *)&v42 = 0;
    }
    v41 = (unint64_t)boost::function1<void,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>::assign_to<dispatch::block<void({block_pointer})(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>(dispatch::block<void({block_pointer})(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>)::stored_vtable;
    _Block_release(v14);
  }
  else
  {
    v41 = (unint64_t)boost::function1<void,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>::assign_to<dispatch::block<void({block_pointer})(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>(dispatch::block<void({block_pointer})(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>)::stored_vtable;
    *(_QWORD *)&v42 = 0;
  }
  _Block_release(v12);
  v21 = 0;
LABEL_23:
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::list(&v38, (uint64_t)&v35);
  v22 = (uint64_t *)operator new(0x18uLL);
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::list(v22, (uint64_t)&v38);
  v23 = (char *)operator new(0x20uLL);
  v24 = v23;
  *(_QWORD *)v23 = 0;
  v25 = v41;
  if (v41)
  {
    *(_QWORD *)v23 = v41;
    if ((v25 & 1) != 0)
    {
      *(_OWORD *)(v23 + 8) = v42;
      *((_QWORD *)v23 + 3) = v43;
    }
    else
    {
      (*(void (**)(__int128 *, char *, _QWORD))(v25 & 0xFFFFFFFFFFFFFFFELL))(&v42, v23 + 8, 0);
    }
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvNSt3__14listIN8coredump13CommandDriver29EURCoreDumpTraceProtocolCrashENS3_9allocatorIS7_EEEEEEESA__block_invoke;
  block[3] = &__block_descriptor_tmp_54_2;
  block[4] = v24;
  block[5] = v22;
  dispatch_async(v8, block);
  if (v40)
  {
    v26 = v38;
    v27 = v39;
    v28 = *v39;
    *(_QWORD *)(v28 + 8) = *(_QWORD *)(v38 + 8);
    **(_QWORD **)(v26 + 8) = v28;
    v40 = 0;
    if (v27 != &v38)
    {
      do
      {
        v33 = (uint64_t *)v27[1];
        if (*((char *)v27 + 63) < 0)
        {
          operator delete((void *)v27[5]);
          if (*((char *)v27 + 39) < 0)
LABEL_44:
            operator delete((void *)v27[2]);
        }
        else if (*((char *)v27 + 39) < 0)
        {
          goto LABEL_44;
        }
        operator delete(v27);
        v27 = v33;
      }
      while (v33 != &v38);
    }
  }
  if (v41)
  {
    if ((v41 & 1) == 0)
    {
      v29 = *(void (**)(__int128 *, __int128 *, uint64_t))(v41 & 0xFFFFFFFFFFFFFFFELL);
      if (v29)
        v29(&v42, &v42, 2);
    }
    v41 = 0;
  }
  if ((v21 & 1) == 0)
    _Block_release(v10);
  if (v37)
  {
    v30 = v35;
    v31 = v36;
    v32 = *v36;
    *(_QWORD *)(v32 + 8) = *(_QWORD *)(v35 + 8);
    **(_QWORD **)(v30 + 8) = v32;
    v37 = 0;
    if (v31 != &v35)
    {
      do
      {
        v34 = (uint64_t *)v31[1];
        if (*((char *)v31 + 63) < 0)
        {
          operator delete((void *)v31[5]);
          if (*((char *)v31 + 39) < 0)
LABEL_50:
            operator delete((void *)v31[2]);
        }
        else if (*((char *)v31 + 39) < 0)
        {
          goto LABEL_50;
        }
        operator delete(v31);
        v31 = v34;
      }
      while (v34 != &v35);
    }
  }
}

void sub_1A351FA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  const void *v15;
  void *v16;
  char v17;

  operator delete(v16);
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::~list(&a12);
  boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>::~function(&a15);
  if ((v17 & 1) == 0)
    _Block_release(v15);
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::~list((char *)&a9);
  _Unwind_Resume(a1);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvNSt3__14listIN8coredump13CommandDriver29EURCoreDumpTraceProtocolCrashENS3_9allocatorIS7_EEEEEEESA__block_invoke(uint64_t a1)
{
  _QWORD *v2;
  void (*v3)(_QWORD *, std::runtime_error *);
  uint64_t v4;
  void (__cdecl *v5)(std::runtime_error *__hidden);
  uint64_t v6;
  uint64_t v7;
  std::runtime_error_vtbl *v8;
  std::runtime_error_vtbl *v9;
  char *imp;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void (*v17)(uint64_t *, uint64_t *, uint64_t);
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  std::runtime_error *v22;
  uint64_t *v23;
  char *v24;
  uint64_t v25;
  void (__cdecl *v26)(std::runtime_error *__hidden);
  uint64_t v27;
  std::runtime_error v28;
  uint64_t v29;

  v2 = *(_QWORD **)(a1 + 32);
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::list(&v25, *(_QWORD *)(a1 + 40));
  if (!*v2)
  {
    std::runtime_error::runtime_error(&v28, "call to empty boost::function");
    v28.__vftable = (std::runtime_error_vtbl *)off_1E4A0D4C8;
    boost::throw_exception<boost::bad_function_call>(&v28);
  }
  v3 = *(void (**)(_QWORD *, std::runtime_error *))((*v2 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v28.__vftable = (std::runtime_error_vtbl *)&v28;
  v28.__imp_.__imp_ = (const char *)&v28;
  v29 = 0;
  v4 = v27;
  if (v27)
  {
    v6 = v25;
    v5 = v26;
    v7 = *(_QWORD *)v26;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v25 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    v8 = v28.__vftable;
    v28.~runtime_error_0 = v5;
    *(_QWORD *)v5 = v8;
    *(_QWORD *)(v6 + 8) = &v28;
    v27 = 0;
    v28.__vftable = (std::runtime_error_vtbl *)v6;
    v29 = v4;
  }
  v3(v2 + 1, &v28);
  if (v29)
  {
    v9 = v28.__vftable;
    imp = (char *)v28.__imp_.__imp_;
    v11 = *(_QWORD *)v28.__imp_.__imp_;
    *(_QWORD *)(v11 + 8) = v28.~runtime_error_0;
    *(_QWORD *)v9->~runtime_error_0 = v11;
    v29 = 0;
    if (imp != (char *)&v28)
    {
      do
      {
        v22 = (std::runtime_error *)*((_QWORD *)imp + 1);
        if (imp[63] < 0)
        {
          operator delete(*((void **)imp + 5));
          if (imp[39] < 0)
LABEL_25:
            operator delete(*((void **)imp + 2));
        }
        else if (imp[39] < 0)
        {
          goto LABEL_25;
        }
        operator delete(imp);
        imp = (char *)v22;
      }
      while (v22 != &v28);
    }
  }
  if (v27)
  {
    v12 = v25;
    v13 = (uint64_t *)v26;
    v14 = *(_QWORD *)v26;
    *(_QWORD *)(v14 + 8) = *(_QWORD *)(v25 + 8);
    **(_QWORD **)(v12 + 8) = v14;
    v27 = 0;
    if (v13 != &v25)
    {
      do
      {
        v23 = (uint64_t *)v13[1];
        if (*((char *)v13 + 63) < 0)
        {
          operator delete((void *)v13[5]);
          if (*((char *)v13 + 39) < 0)
LABEL_31:
            operator delete((void *)v13[2]);
        }
        else if (*((char *)v13 + 39) < 0)
        {
          goto LABEL_31;
        }
        operator delete(v13);
        v13 = v23;
      }
      while (v23 != &v25);
    }
  }
  v15 = *(uint64_t **)(a1 + 32);
  if (v15)
  {
    v16 = *v15;
    if (*v15)
    {
      if ((v16 & 1) == 0)
      {
        v17 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v16 & 0xFFFFFFFFFFFFFFFELL);
        if (v17)
          v17(v15 + 1, v15 + 1, 2);
      }
      *v15 = 0;
    }
    operator delete(v15);
  }
  v18 = *(char **)(a1 + 40);
  if (v18)
  {
    if (!*((_QWORD *)v18 + 2)
      || (v19 = *(_QWORD *)v18,
          v20 = (char *)*((_QWORD *)v18 + 1),
          v21 = *(_QWORD *)v20,
          *(_QWORD *)(v21 + 8) = *(_QWORD *)(*(_QWORD *)v18 + 8),
          **(_QWORD **)(v19 + 8) = v21,
          *((_QWORD *)v18 + 2) = 0,
          v20 == v18))
    {
LABEL_18:
      operator delete(v18);
      return;
    }
    while (1)
    {
      v24 = (char *)*((_QWORD *)v20 + 1);
      if (v20[63] < 0)
      {
        operator delete(*((void **)v20 + 5));
        if (v20[39] < 0)
LABEL_37:
          operator delete(*((void **)v20 + 2));
      }
      else if (v20[39] < 0)
      {
        goto LABEL_37;
      }
      operator delete(v20);
      v20 = v24;
      if (v24 == v18)
        goto LABEL_18;
    }
  }
}

void sub_1A351FD44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::runtime_error a12)
{
  std::runtime_error::~runtime_error(&a12);
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::~list((char *)&a9);
  _Unwind_Resume(a1);
}

void sub_1A351FD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::~list(&a9);
  _Unwind_Resume(a1);
}

void sub_1A351FD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, char a12)
{
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::~list(&a12);
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::~list(&a9);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::bad_function_call>(const std::runtime_error *a1)
{
  void *exception;
  void *v3;

  exception = __cxa_allocate_exception(0x40uLL);
  v3 = (void *)boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, const std::runtime_error *a2)
{
  *(_QWORD *)a1 = &unk_1E4A0D498;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &off_1E4A0D420;
  *(_QWORD *)(a1 + 8) = &unk_1E4A0D450;
  *(_QWORD *)(a1 + 24) = &unk_1E4A0D478;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_1E4A0D4F0;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

char *boost::wrapexcept<boost::bad_function_call>::clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_1E4A0D498;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *((_QWORD *)v2 + 1) = off_1E4A0D4C8;
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)v2 + 3) = &unk_1E4A0D4F0;
  *((_QWORD *)v2 + 4) = v3;
  if (!v3)
  {
    v5 = 0;
    *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
    *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
    *(_QWORD *)v2 = &off_1E4A0D420;
    *((_QWORD *)v2 + 1) = &unk_1E4A0D450;
    *((_QWORD *)v2 + 3) = &unk_1E4A0D478;
    goto LABEL_7;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  v4 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &off_1E4A0D420;
  *((_QWORD *)v2 + 1) = &unk_1E4A0D450;
  *((_QWORD *)v2 + 3) = &unk_1E4A0D478;
  if (v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 40))(&v10);
    v5 = v10;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
    }
LABEL_7:
    *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
    v6 = *(_QWORD *)(a1 + 48);
    *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
    *((_QWORD *)v2 + 6) = v6;
    v7 = *((_QWORD *)v2 + 4);
    if (!v7)
      goto LABEL_9;
    goto LABEL_8;
  }
  v5 = 0;
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 48);
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  *((_QWORD *)v2 + 6) = v9;
  v7 = *((_QWORD *)v2 + 4);
  if (v7)
LABEL_8:
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
LABEL_9:
  *((_QWORD *)v2 + 4) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  return v2;
}

void sub_1A3520000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_1A35200BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_1E4A0D4F0;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  operator delete((void *)a1);
}

void `non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_1E4A0D4F0;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_1E4A0D4F0;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
  operator delete(&this[-1].__imp_);
}

void `non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_1E4A0D4F0;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_1E4A0D4F0;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
  operator delete(&a1[-2].__imp_);
}

void boost::bad_function_call::~bad_function_call(std::runtime_error *this)
{
  void *v1;

  std::runtime_error::~runtime_error(this);
  operator delete(v1);
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E4A0D498;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = off_1E4A0D4C8;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_1E4A0D4F0;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &off_1E4A0D420;
  *(_QWORD *)(a1 + 8) = &unk_1E4A0D450;
  *(_QWORD *)(a1 + 24) = &unk_1E4A0D478;
  return a1;
}

void sub_1A3520324(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  void *v6;
  void *v7;
  const char *v8;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001A35834F9 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001A35834F9 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
LABEL_9:
        _Block_release(v7);
    }
  }
  else
  {
    v6 = *a1;
    if (*a1)
      v6 = _Block_copy(v6);
    *(_QWORD *)a2 = v6;
    if (a3 == 1)
    {
      v7 = *a1;
      if (*a1)
        goto LABEL_9;
    }
  }
}

void boost::detail::function::void_function_obj_invoker1<dispatch::block<void({block_pointer})(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,void,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>::invoke(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  v2 = *a1;
  v12 = (uint64_t)&v12;
  v13 = &v12;
  v14 = 0;
  v3 = a2[2];
  if (v3)
  {
    v5 = *a2;
    v4 = (uint64_t *)a2[1];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(*a2 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v7 = v12;
    *(_QWORD *)(v12 + 8) = v4;
    *v4 = v7;
    *(_QWORD *)(v5 + 8) = &v12;
    v12 = v5;
    v14 = v3;
    a2[2] = 0;
  }
  (*(void (**)(uint64_t, uint64_t *))(v2 + 16))(v2, &v12);
  if (v14)
  {
    v8 = v12;
    v9 = v13;
    v10 = *v13;
    *(_QWORD *)(v10 + 8) = *(_QWORD *)(v12 + 8);
    **(_QWORD **)(v8 + 8) = v10;
    v14 = 0;
    if (v9 != &v12)
    {
      do
      {
        v11 = (uint64_t *)v9[1];
        if (*((char *)v9 + 63) < 0)
        {
          operator delete((void *)v9[5]);
          if (*((char *)v9 + 39) < 0)
LABEL_11:
            operator delete((void *)v9[2]);
        }
        else if (*((char *)v9 + 39) < 0)
        {
          goto LABEL_11;
        }
        operator delete(v9);
        v9 = v11;
      }
      while (v11 != &v12);
    }
  }
}

void sub_1A3520528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;

  if (!a12
    || (v13 = a10,
        v14 = (uint64_t)a11,
        v15 = *a11,
        *(_QWORD *)(v15 + 8) = *(_QWORD *)(a10 + 8),
        **(_QWORD **)(v13 + 8) = v15,
        a12 = 0,
        (uint64_t *)v14 == &a10))
  {
LABEL_3:
    _Unwind_Resume(exception_object);
  }
  while (1)
  {
    v16 = *(uint64_t **)(v14 + 8);
    if (*(char *)(v14 + 63) < 0)
    {
      operator delete(*(void **)(v14 + 40));
      if (*(char *)(v14 + 39) < 0)
LABEL_9:
        operator delete(*(void **)(v14 + 16));
    }
    else if (*(char *)(v14 + 39) < 0)
    {
      goto LABEL_9;
    }
    operator delete((void *)v14);
    v14 = (uint64_t)v16;
    if (v16 == &a10)
      goto LABEL_3;
  }
}

uint64_t boost::function1<void,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>::move_assign(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  __int128 v7;

  if (a2 != (uint64_t *)result)
  {
    v2 = a2;
    v3 = (uint64_t *)result;
    v4 = *a2;
    if (*a2)
    {
      *(_QWORD *)result = v4;
      if ((v4 & 1) != 0)
      {
        v7 = *(_OWORD *)(a2 + 1);
        *(_QWORD *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      v5 = *(_QWORD *)result;
      if (!*(_QWORD *)result)
        return result;
      if ((v5 & 1) == 0)
      {
        v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6)
          result = v6(result + 8, result + 8, 2);
      }
      v2 = v3;
    }
    *v2 = 0;
  }
  return result;
}

void sub_1A3520644(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_1A3520654(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *boost::function1<void,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>::~function1(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

int *std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>(int **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  int *v8;
  int *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  int v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  int *v35;
  int *v36;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 3) > v3)
    v3 = 0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[2] - (char *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (int *)&v7[24 * v2];
  v9 = (int *)&v7[24 * v6];
  v10 = v8 + 2;
  v11 = (_QWORD *)(a2 + 8);
  v12 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  if (v12 == 2)
  {
    *v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v11 + 32))(*v11);
    v12 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  }
  else
  {
    if (v12 != 1)
      v12 = 0;
    *(_OWORD *)v10 = *(_OWORD *)v11;
    *v11 = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  *v8 = v12;
  v13 = v8 + 6;
  v15 = *a1;
  v14 = a1[1];
  v36 = v8;
  v16 = v14;
  if (v14 != *a1)
  {
    do
    {
      v17 = *(v16 - 6);
      v16 -= 6;
      v18 = v17 ^ (v17 >> 31);
      if (v18 == 2)
      {
        *((_QWORD *)v8 - 2) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v14 - 2) + 32))(*((_QWORD *)v14 - 2));
      }
      else if (v18 == 1)
      {
        *((_QWORD *)v8 - 2) = *((_QWORD *)v14 - 2);
        v19 = *((_QWORD *)v14 - 1);
        *((_QWORD *)v8 - 1) = v19;
        if (v19)
        {
          v20 = (unsigned int *)(v19 + 12);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
      }
      else
      {
        *((_QWORD *)v8 - 2) = *((_QWORD *)v14 - 2);
        v22 = *((_QWORD *)v14 - 1);
        *((_QWORD *)v8 - 1) = v22;
        if (v22)
        {
          v23 = (unsigned int *)(v22 + 12);
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
      }
      *(v8 - 6) = *v16 ^ (*v16 >> 31);
      v8 = v36 - 6;
      v36 -= 6;
      v14 = v16;
    }
    while (v16 != v15);
    v16 = *a1;
    v14 = a1[1];
  }
  *a1 = v8;
  a1[1] = v13;
  a1[2] = v9;
  if (v14 == v16)
  {
    if (v14)
      goto LABEL_33;
    return v13;
  }
  do
  {
    v35 = v14 - 6;
    v26 = *(v14 - 6) ^ (*(v14 - 6) >> 31);
    if (v26 == 2)
    {
      v31 = *((_QWORD *)v14 - 2);
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    }
    else if (v26 == 1)
    {
      v27 = (unsigned int *)*((_QWORD *)v14 - 1);
      if (v27)
      {
        v28 = v27 + 3;
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
          goto LABEL_42;
      }
    }
    else
    {
      v27 = (unsigned int *)*((_QWORD *)v14 - 1);
      if (v27)
      {
        v32 = v27 + 3;
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
LABEL_42:
          (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 24))(v27);
      }
    }
    v14 = v35;
  }
  while (v35 != v16);
  v14 = v16;
  if (!v16)
    return v13;
LABEL_33:
  operator delete(v14);
  return v13;
}

void sub_1A35209A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A35209C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)va1);
  std::__split_buffer<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(_DWORD *)(i - 24);
    *(_QWORD *)(a1 + 16) = i - 24;
    v5 = v4 ^ (v4 >> 31);
    if (v5 == 2)
    {
      v10 = *(_QWORD *)(i - 16);
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
    else if (v5 == 1)
    {
      v6 = *(unsigned int **)(i - 8);
      if (v6)
      {
        v7 = v6 + 3;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
          goto LABEL_10;
      }
    }
    else
    {
      v6 = *(unsigned int **)(i - 8);
      if (v6)
      {
        v11 = v6 + 3;
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
LABEL_10:
          (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
          continue;
        }
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t i;
  int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    for (i = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8); ; i += 24)
    {
      if (i == v3)
        return a1;
      v5 = *(_DWORD *)i ^ (*(int *)i >> 31);
      if (v5 == 2)
      {
        v10 = *(_QWORD *)(i + 8);
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
      else if (v5 == 1)
      {
        v6 = *(unsigned int **)(i + 16);
        if (v6)
        {
          v7 = v6 + 3;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
            goto LABEL_12;
        }
      }
      else
      {
        v6 = *(unsigned int **)(i + 16);
        if (v6)
        {
          v11 = v6 + 3;
          do
          {
            v12 = __ldaxr(v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v11));
          if (!v13)
          {
LABEL_12:
            (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            continue;
          }
        }
      }
    }
  }
  return a1;
}

_QWORD *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<Trace>>::~foreign_weak_ptr_impl(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E4A0D530;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<Trace>>::~foreign_weak_ptr_impl(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_1E4A0D530;
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<Trace>>::lock(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = 0;
LABEL_6:
  v7 = operator new(0x18uLL);
  *v7 = &off_1E4A0D590;
  v7[1] = v6;
  v7[2] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *a2 = v7;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *a2 = v7;
  }
}

void sub_1A3520CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<Trace>>::expired(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  return !v1 || *(_QWORD *)(v1 + 8) == -1;
}

_QWORD *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<Trace>>::clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E4A0D530;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

_QWORD *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<Trace>>::~foreign_shared_ptr_impl(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_1E4A0D590;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<Trace>>::~foreign_shared_ptr_impl(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_1E4A0D590;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<Trace>>::clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E4A0D590;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t ___ZN3ctu20SharedSynchronizableI5TraceE13connect_eventIN5boost8signals26signalIFvbENS5_19optional_last_valueIvEEiNSt3__14lessIiEENS4_8functionIS7_EENSD_IFvRKNS5_10connectionEbEEENS5_5mutexEEE16EURCoreDumpTracevJbEEEDTcl7connectfp_cvNSA_10shared_ptrIS1_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSR_ST_E_block_invoke(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[5];
  v2 = a1[6];
  v3 = (_QWORD *)(a1[4] + (v2 >> 1) - 72);
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>::~slot(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 32, a1 + 32, 2);
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(_QWORD *)a1)
  {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)a1, *(_QWORD *)a1);
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::~DispatchSlot(uint64_t a1)
{
  const void *v2;

  dispatch_release(*(dispatch_object_t *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    _Block_release(v2);
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<KernelPCITrace::BuffContext *>::destroy((_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  _QWORD *v1;

  v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::~connection_body(a1);
  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  __int128 v2;
  pthread_mutex_t *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int i;
  unsigned int v10;
  uint64_t v11;
  char v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  char *v22;
  char *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  _OWORD v33[10];
  unint64_t v34;
  void *__p;
  uint64_t v36;
  pthread_mutex_t *v37;
  _QWORD v38[4];

  v38[3] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[8] = v2;
  v33[9] = v2;
  v33[6] = v2;
  v33[7] = v2;
  v33[4] = v2;
  v33[5] = v2;
  v33[2] = v2;
  v33[3] = v2;
  v33[0] = v2;
  v33[1] = v2;
  v3 = *(pthread_mutex_t **)(a1 + 48);
  v34 = 10;
  __p = v33;
  v36 = 0;
  v37 = v3;
  pthread_mutex_lock(v3);
  v4 = *(uint64_t **)(a1 + 32);
  if (!v4)
    goto LABEL_40;
  v5 = *v4;
  if (*v4 == v4[1])
    goto LABEL_40;
  do
  {
    memset(v38, 170, 24);
    v6 = *(_DWORD *)v5 ^ (*(int *)v5 >> 31);
    if (v6 == 2)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v5 + 8) + 16))(&v32);
      v38[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
      LODWORD(v38[0]) = 1;
      if (v32)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
          goto LABEL_26;
LABEL_19:
        v11 = *(_QWORD *)(v5 + 16);
        if (!v11)
          goto LABEL_27;
        if (!atomic_load((unsigned int *)(v11 + 8)))
          goto LABEL_27;
LABEL_21:
        v13 = 0;
        if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
          goto LABEL_30;
        goto LABEL_22;
      }
LABEL_18:
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v6 != 1)
    {
      LODWORD(v38[0]) = 0;
      v38[1] = 0;
      v38[2] = 0;
      goto LABEL_18;
    }
    v7 = *(_QWORD *)(v5 + 16);
    if (!v7)
    {
LABEL_25:
      v38[1] = 0;
      v38[2] = v7;
      LODWORD(v38[0]) = 0;
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    v8 = (unsigned int *)(v7 + 8);
    for (i = *(_DWORD *)(v7 + 8); ; i = v10)
    {
      if (!i)
      {
        v7 = 0;
        goto LABEL_25;
      }
      v10 = __ldxr(v8);
      if (v10 != i)
      {
        __clrex();
        continue;
      }
      if (!__stxr(i + 1, v8))
        break;
    }
    v38[1] = *(_QWORD *)(v5 + 8);
    v38[2] = v7;
    LODWORD(v38[0]) = 0;
    if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) != 2)
      goto LABEL_19;
LABEL_26:
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v5 + 8) + 24))(*(_QWORD *)(v5 + 8)))
      goto LABEL_21;
LABEL_27:
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v33);
    }
    v13 = 1;
    if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
    {
LABEL_30:
      v14 = (unsigned int *)v38[2];
      if (v38[2])
      {
        v15 = (unsigned int *)(v38[2] + 8);
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
          v18 = v14 + 3;
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
            (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 24))(v14);
        }
      }
      goto LABEL_38;
    }
LABEL_22:
    if (v38[1])
      (*(void (**)(_QWORD))(*(_QWORD *)v38[1] + 8))(v38[1]);
LABEL_38:
    if ((v13 & 1) != 0)
      break;
    v5 += 24;
  }
  while (v5 != *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
LABEL_40:
  v21 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v37);
  v22 = (char *)__p;
  if (__p)
  {
    if (v36 - 1 >= 0)
    {
      v23 = (char *)__p + 16 * v36;
      do
      {
        v24 = (unsigned int *)*((_QWORD *)v23 - 1);
        if (v24)
        {
          v25 = v24 + 2;
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 16))(v24);
            v28 = v24 + 3;
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
              (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 24))(v24);
          }
        }
        v23 -= 16;
      }
      while (v23 > v22);
    }
    if (v34 >= 0xB)
      operator delete(__p);
  }
  return v21 != 0;
}

void sub_1A3521654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *(_QWORD *)(result + 40);
  v2 = (_QWORD *)(result + 32);
  *a2 = *(_QWORD *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *(unsigned int **)(result + 40);
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
    if (v6)
    {
      v7 = v6 + 2;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
        v10 = v6 + 3;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
      }
    }
  }
  else
  {
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::dispose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3)
          v3(v1 + 32, v1 + 32, 2);
      }
      *(_QWORD *)(v1 + 24) = 0;
    }
    if (*(_QWORD *)v1)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v1, *(_QWORD *)v1);
      operator delete(*(void **)v1);
    }
    operator delete((void *)v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::get_untyped_deleter()
{
  return 0;
}

_QWORD *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  *a1 = off_1E4A0D6C0;
  v2 = (unsigned int *)a1[7];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  v9 = (unsigned int *)a1[5];
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
      v13 = v9 + 3;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
    }
  }
  *a1 = off_1E4A0D260;
  v16 = (unsigned int *)a1[2];
  if (v16)
  {
    v17 = v16 + 3;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16);
  }
  return a1;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(BOOL)>::~function(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  NSObject *v6;
  void *v7;
  const void *v8;
  const char *v9;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v9 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001A35839B8 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001A35839B8 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      v8 = (const void *)*((_QWORD *)a2 + 1);
      if (v8)
LABEL_9:
        _Block_release(v8);
    }
  }
  else
  {
    v6 = *(NSObject **)a1;
    v7 = *(void **)(a1 + 8);
    *(_QWORD *)a2 = *(_QWORD *)a1;
    if (v7)
    {
      v7 = _Block_copy(v7);
      v6 = *(NSObject **)a2;
    }
    *((_QWORD *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      v8 = *(const void **)(a1 + 8);
      if (v8)
        goto LABEL_9;
    }
  }
}

void boost::detail::function::void_function_obj_invoker1<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>,void,BOOL>::invoke(uint64_t a1, char a2)
{
  const void *v3;
  NSObject *v4;
  void *v5;
  const void *v6;
  void *v7;
  const void *v8;
  void *v9;
  const void *v10;
  void *v11;
  const void *v12;
  void *v13;
  const void *v14;
  void *v15;
  const void *v16;
  void *v17;
  char v18;
  _BYTE *v19;
  _QWORD *v20;
  void *v21;
  void (*v22)(_QWORD *, _QWORD *, uint64_t);
  _QWORD v23[3];
  _QWORD block[6];

  v4 = *(NSObject **)a1;
  v3 = *(const void **)(a1 + 8);
  if (!v3)
  {
    v6 = 0;
    goto LABEL_10;
  }
  v5 = _Block_copy(v3);
  v6 = v5;
  if (!v5)
  {
LABEL_10:
    v18 = 1;
LABEL_11:
    v17 = 0;
    v23[0] = 0;
    goto LABEL_21;
  }
  v7 = _Block_copy(v5);
  v8 = v7;
  if (!v7)
  {
    v18 = 0;
    goto LABEL_11;
  }
  v9 = _Block_copy(v7);
  v10 = v9;
  if (v9)
  {
    v11 = _Block_copy(v9);
    v12 = v11;
    if (v11)
    {
      v13 = _Block_copy(v11);
      v14 = v13;
      if (v13)
      {
        v15 = _Block_copy(v13);
        v16 = v15;
        if (v15)
        {
          v17 = _Block_copy(v15);
          v23[0] = v17;
          _Block_release(v16);
        }
        else
        {
          v17 = 0;
          v23[0] = 0;
        }
        _Block_release(v14);
      }
      else
      {
        v17 = 0;
        v23[0] = 0;
      }
      _Block_release(v12);
    }
    else
    {
      v17 = 0;
      v23[0] = 0;
    }
    _Block_release(v10);
  }
  else
  {
    v17 = 0;
    v23[0] = 0;
  }
  _Block_release(v8);
  v18 = 0;
LABEL_21:
  v19 = operator new(1uLL);
  *v19 = a2;
  v20 = operator new(0x20uLL);
  *v20 = boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(dispatch::block<void({block_pointer})(BOOL)>)::stored_vtable;
  if (v17)
    v21 = _Block_copy(v17);
  else
    v21 = 0;
  v20[1] = v21;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvbEEEb_block_invoke;
  block[3] = &__block_descriptor_tmp_57_2;
  block[4] = v20;
  block[5] = v19;
  dispatch_async(v4, block);
  if (boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(dispatch::block<void({block_pointer})(BOOL)>)::stored_vtable)
  {
    if ((boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(dispatch::block<void({block_pointer})(BOOL)>)::stored_vtable & 1) == 0)
    {
      v22 = *(void (**)(_QWORD *, _QWORD *, uint64_t))((unint64_t)boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(dispatch::block<void({block_pointer})(BOOL)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL);
      if (v22)
        v22(v23, v23, 2);
    }
  }
  if ((v18 & 1) == 0)
    _Block_release(v6);
}

void sub_1A3521DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  const void *v9;
  const void *v10;
  char v11;

  if (v10)
    _Block_release(v10);
  if ((v11 & 1) == 0)
    _Block_release(v9);
  _Unwind_Resume(exception_object);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvbEEEb_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v3;
  uint64_t v4;
  void (*v5)(uint64_t *, uint64_t *, uint64_t);
  void *v6;
  std::runtime_error v7;

  v1 = *(_QWORD **)(a1 + 32);
  if (!*v1)
  {
    std::runtime_error::runtime_error(&v7, "call to empty boost::function");
    v7.__vftable = (std::runtime_error_vtbl *)off_1E4A0D4C8;
    boost::throw_exception<boost::bad_function_call>(&v7);
  }
  (*(void (**)(_QWORD *, _QWORD))((*v1 & 0xFFFFFFFFFFFFFFFELL) + 8))(v1 + 1, **(unsigned __int8 **)(a1 + 40));
  v3 = *(uint64_t **)(a1 + 32);
  if (v3)
  {
    v4 = *v3;
    if (*v3)
    {
      if ((v4 & 1) == 0)
      {
        v5 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
        if (v5)
          v5(v3 + 1, v3 + 1, 2);
      }
      *v3 = 0;
    }
    operator delete(v3);
  }
  v6 = *(void **)(a1 + 40);
  if (v6)
    operator delete(v6);
}

void sub_1A3521EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(BOOL)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  void *v6;
  void *v7;
  const char *v8;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001A35839F6 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001A35839F6 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
LABEL_9:
        _Block_release(v7);
    }
  }
  else
  {
    v6 = *a1;
    if (*a1)
      v6 = _Block_copy(v6);
    *(_QWORD *)a2 = v6;
    if (a3 == 1)
    {
      v7 = *a1;
      if (*a1)
        goto LABEL_9;
    }
  }
}

uint64_t boost::detail::function::void_function_obj_invoker1<dispatch::block<void({block_pointer})(BOOL)>,void,BOOL>::invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 16))();
}

uint64_t boost::function1<void,BOOL>::move_assign(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  __int128 v7;

  if (a2 != (uint64_t *)result)
  {
    v2 = a2;
    v3 = (uint64_t *)result;
    v4 = *a2;
    if (*a2)
    {
      *(_QWORD *)result = v4;
      if ((v4 & 1) != 0)
      {
        v7 = *(_OWORD *)(a2 + 1);
        *(_QWORD *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      v5 = *(_QWORD *)result;
      if (!*(_QWORD *)result)
        return result;
      if ((v5 & 1) == 0)
      {
        v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6)
          result = v6(result + 8, result + 8, 2);
      }
      v2 = v3;
    }
    *v2 = 0;
  }
  return result;
}

void sub_1A3522060(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_1A3522070(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *boost::function1<void,BOOL>::~function1(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t ___ZN3ctu20SharedSynchronizableI5TraceE13connect_eventIN5boost8signals26signalIFvN8coredump13CommandDriver6StatusEENS5_19optional_last_valueIvEEiNSt3__14lessIiEENS4_8functionISA_EENSG_IFvRKNS5_10connectionES9_EEENS5_5mutexEEE16EURCoreDumpTracevJS9_EEEDTcl7connectfp_cvNSD_10shared_ptrIS1_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSU_SW_E_block_invoke(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[5];
  v2 = a1[6];
  v3 = (_QWORD *)(a1[4] + (v2 >> 1) - 72);
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>::~slot(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 32, a1 + 32, 2);
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(_QWORD *)a1)
  {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)a1, *(_QWORD *)a1);
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>>::~DispatchSlot(uint64_t a1)
{
  const void *v2;

  dispatch_release(*(dispatch_object_t *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    _Block_release(v2);
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<KernelPCITrace::BuffContext *>::destroy((_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  _QWORD *v1;

  v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>::~connection_body(a1);
  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  __int128 v2;
  pthread_mutex_t *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int i;
  unsigned int v10;
  uint64_t v11;
  char v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  char *v22;
  char *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  _OWORD v33[10];
  unint64_t v34;
  void *__p;
  uint64_t v36;
  pthread_mutex_t *v37;
  _QWORD v38[4];

  v38[3] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[8] = v2;
  v33[9] = v2;
  v33[6] = v2;
  v33[7] = v2;
  v33[4] = v2;
  v33[5] = v2;
  v33[2] = v2;
  v33[3] = v2;
  v33[0] = v2;
  v33[1] = v2;
  v3 = *(pthread_mutex_t **)(a1 + 48);
  v34 = 10;
  __p = v33;
  v36 = 0;
  v37 = v3;
  pthread_mutex_lock(v3);
  v4 = *(uint64_t **)(a1 + 32);
  if (!v4)
    goto LABEL_40;
  v5 = *v4;
  if (*v4 == v4[1])
    goto LABEL_40;
  do
  {
    memset(v38, 170, 24);
    v6 = *(_DWORD *)v5 ^ (*(int *)v5 >> 31);
    if (v6 == 2)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v5 + 8) + 16))(&v32);
      v38[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
      LODWORD(v38[0]) = 1;
      if (v32)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
          goto LABEL_26;
LABEL_19:
        v11 = *(_QWORD *)(v5 + 16);
        if (!v11)
          goto LABEL_27;
        if (!atomic_load((unsigned int *)(v11 + 8)))
          goto LABEL_27;
LABEL_21:
        v13 = 0;
        if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
          goto LABEL_30;
        goto LABEL_22;
      }
LABEL_18:
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v6 != 1)
    {
      LODWORD(v38[0]) = 0;
      v38[1] = 0;
      v38[2] = 0;
      goto LABEL_18;
    }
    v7 = *(_QWORD *)(v5 + 16);
    if (!v7)
    {
LABEL_25:
      v38[1] = 0;
      v38[2] = v7;
      LODWORD(v38[0]) = 0;
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    v8 = (unsigned int *)(v7 + 8);
    for (i = *(_DWORD *)(v7 + 8); ; i = v10)
    {
      if (!i)
      {
        v7 = 0;
        goto LABEL_25;
      }
      v10 = __ldxr(v8);
      if (v10 != i)
      {
        __clrex();
        continue;
      }
      if (!__stxr(i + 1, v8))
        break;
    }
    v38[1] = *(_QWORD *)(v5 + 8);
    v38[2] = v7;
    LODWORD(v38[0]) = 0;
    if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) != 2)
      goto LABEL_19;
LABEL_26:
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v5 + 8) + 24))(*(_QWORD *)(v5 + 8)))
      goto LABEL_21;
LABEL_27:
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v33);
    }
    v13 = 1;
    if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
    {
LABEL_30:
      v14 = (unsigned int *)v38[2];
      if (v38[2])
      {
        v15 = (unsigned int *)(v38[2] + 8);
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
          v18 = v14 + 3;
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
            (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 24))(v14);
        }
      }
      goto LABEL_38;
    }
LABEL_22:
    if (v38[1])
      (*(void (**)(_QWORD))(*(_QWORD *)v38[1] + 8))(v38[1]);
LABEL_38:
    if ((v13 & 1) != 0)
      break;
    v5 += 24;
  }
  while (v5 != *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
LABEL_40:
  v21 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v37);
  v22 = (char *)__p;
  if (__p)
  {
    if (v36 - 1 >= 0)
    {
      v23 = (char *)__p + 16 * v36;
      do
      {
        v24 = (unsigned int *)*((_QWORD *)v23 - 1);
        if (v24)
        {
          v25 = v24 + 2;
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 16))(v24);
            v28 = v24 + 3;
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
              (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 24))(v24);
          }
        }
        v23 -= 16;
      }
      while (v23 > v22);
    }
    if (v34 >= 0xB)
      operator delete(__p);
  }
  return v21 != 0;
}

void sub_1A3522870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *(_QWORD *)(result + 40);
  v2 = (_QWORD *)(result + 32);
  *a2 = *(_QWORD *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *(unsigned int **)(result + 40);
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
    if (v6)
    {
      v7 = v6 + 2;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
        v10 = v6 + 3;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
      }
    }
  }
  else
  {
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>>::dispose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3)
          v3(v1 + 32, v1 + 32, 2);
      }
      *(_QWORD *)(v1 + 24) = 0;
    }
    if (*(_QWORD *)v1)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v1, *(_QWORD *)v1);
      operator delete(*(void **)v1);
    }
    operator delete((void *)v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>>::get_untyped_deleter()
{
  return 0;
}

_QWORD *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  *a1 = off_1E4A0D918;
  v2 = (unsigned int *)a1[7];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  v9 = (unsigned int *)a1[5];
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
      v13 = v9 + 3;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
    }
  }
  *a1 = off_1E4A0D260;
  v16 = (unsigned int *)a1[2];
  if (v16)
  {
    v17 = v16 + 3;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16);
  }
  return a1;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(coredump::CommandDriver::Status)>::~function(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  NSObject *v6;
  void *v7;
  const void *v8;
  const char *v9;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v9 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001A3583DF5 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001A3583DF5 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      v8 = (const void *)*((_QWORD *)a2 + 1);
      if (v8)
LABEL_9:
        _Block_release(v8);
    }
  }
  else
  {
    v6 = *(NSObject **)a1;
    v7 = *(void **)(a1 + 8);
    *(_QWORD *)a2 = *(_QWORD *)a1;
    if (v7)
    {
      v7 = _Block_copy(v7);
      v6 = *(NSObject **)a2;
    }
    *((_QWORD *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      v8 = *(const void **)(a1 + 8);
      if (v8)
        goto LABEL_9;
    }
  }
}

void boost::detail::function::void_function_obj_invoker1<ctu::DispatchSlot<dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>>,void,coredump::CommandDriver::Status>::invoke(uint64_t a1, int a2)
{
  const void *v3;
  NSObject *v4;
  void *v5;
  const void *v6;
  void *v7;
  const void *v8;
  void *v9;
  const void *v10;
  void *v11;
  const void *v12;
  void *v13;
  const void *v14;
  void *v15;
  const void *v16;
  void *v17;
  char v18;
  _DWORD *v19;
  _QWORD *v20;
  void *v21;
  void (*v22)(_QWORD *, _QWORD *, uint64_t);
  _QWORD v23[3];
  _QWORD block[6];

  v4 = *(NSObject **)a1;
  v3 = *(const void **)(a1 + 8);
  if (!v3)
  {
    v6 = 0;
    goto LABEL_10;
  }
  v5 = _Block_copy(v3);
  v6 = v5;
  if (!v5)
  {
LABEL_10:
    v18 = 1;
LABEL_11:
    v17 = 0;
    v23[0] = 0;
    goto LABEL_21;
  }
  v7 = _Block_copy(v5);
  v8 = v7;
  if (!v7)
  {
    v18 = 0;
    goto LABEL_11;
  }
  v9 = _Block_copy(v7);
  v10 = v9;
  if (v9)
  {
    v11 = _Block_copy(v9);
    v12 = v11;
    if (v11)
    {
      v13 = _Block_copy(v11);
      v14 = v13;
      if (v13)
      {
        v15 = _Block_copy(v13);
        v16 = v15;
        if (v15)
        {
          v17 = _Block_copy(v15);
          v23[0] = v17;
          _Block_release(v16);
        }
        else
        {
          v17 = 0;
          v23[0] = 0;
        }
        _Block_release(v14);
      }
      else
      {
        v17 = 0;
        v23[0] = 0;
      }
      _Block_release(v12);
    }
    else
    {
      v17 = 0;
      v23[0] = 0;
    }
    _Block_release(v10);
  }
  else
  {
    v17 = 0;
    v23[0] = 0;
  }
  _Block_release(v8);
  v18 = 0;
LABEL_21:
  v19 = operator new(4uLL);
  *v19 = a2;
  v20 = operator new(0x20uLL);
  *v20 = boost::function1<void,coredump::CommandDriver::Status>::assign_to<dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>>(dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>)::stored_vtable;
  if (v17)
    v21 = _Block_copy(v17);
  else
    v21 = 0;
  v20[1] = v21;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvN8coredump13CommandDriver6StatusEEEES5__block_invoke;
  block[3] = &__block_descriptor_tmp_60_0;
  block[4] = v20;
  block[5] = v19;
  dispatch_async(v4, block);
  if (boost::function1<void,coredump::CommandDriver::Status>::assign_to<dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>>(dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>)::stored_vtable)
  {
    if ((boost::function1<void,coredump::CommandDriver::Status>::assign_to<dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>>(dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>)::stored_vtable & 1) == 0)
    {
      v22 = *(void (**)(_QWORD *, _QWORD *, uint64_t))((unint64_t)boost::function1<void,coredump::CommandDriver::Status>::assign_to<dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>>(dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL);
      if (v22)
        v22(v23, v23, 2);
    }
  }
  if ((v18 & 1) == 0)
    _Block_release(v6);
}

void sub_1A3522FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  const void *v9;
  const void *v10;
  char v11;

  if (v10)
    _Block_release(v10);
  if ((v11 & 1) == 0)
    _Block_release(v9);
  _Unwind_Resume(exception_object);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvN8coredump13CommandDriver6StatusEEEES5__block_invoke(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v3;
  uint64_t v4;
  void (*v5)(uint64_t *, uint64_t *, uint64_t);
  void *v6;
  std::runtime_error v7;

  v1 = *(_QWORD **)(a1 + 32);
  if (!*v1)
  {
    std::runtime_error::runtime_error(&v7, "call to empty boost::function");
    v7.__vftable = (std::runtime_error_vtbl *)off_1E4A0D4C8;
    boost::throw_exception<boost::bad_function_call>(&v7);
  }
  (*(void (**)(_QWORD *, _QWORD))((*v1 & 0xFFFFFFFFFFFFFFFELL) + 8))(v1 + 1, **(unsigned int **)(a1 + 40));
  v3 = *(uint64_t **)(a1 + 32);
  if (v3)
  {
    v4 = *v3;
    if (*v3)
    {
      if ((v4 & 1) == 0)
      {
        v5 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
        if (v5)
          v5(v3 + 1, v3 + 1, 2);
      }
      *v3 = 0;
    }
    operator delete(v3);
  }
  v6 = *(void **)(a1 + 40);
  if (v6)
    operator delete(v6);
}

void sub_1A35230CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  void *v6;
  void *v7;
  const char *v8;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001A3583E53 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001A3583E53 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
LABEL_9:
        _Block_release(v7);
    }
  }
  else
  {
    v6 = *a1;
    if (*a1)
      v6 = _Block_copy(v6);
    *(_QWORD *)a2 = v6;
    if (a3 == 1)
    {
      v7 = *a1;
      if (*a1)
        goto LABEL_9;
    }
  }
}

uint64_t boost::detail::function::void_function_obj_invoker1<dispatch::block<void({block_pointer})(coredump::CommandDriver::Status)>,void,coredump::CommandDriver::Status>::invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 16))();
}

uint64_t boost::function1<void,coredump::CommandDriver::Status>::move_assign(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  __int128 v7;

  if (a2 != (uint64_t *)result)
  {
    v2 = a2;
    v3 = (uint64_t *)result;
    v4 = *a2;
    if (*a2)
    {
      *(_QWORD *)result = v4;
      if ((v4 & 1) != 0)
      {
        v7 = *(_OWORD *)(a2 + 1);
        *(_QWORD *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      v5 = *(_QWORD *)result;
      if (!*(_QWORD *)result)
        return result;
      if ((v5 & 1) == 0)
      {
        v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6)
          result = v6(result + 8, result + 8, 2);
      }
      v2 = v3;
    }
    *v2 = 0;
  }
  return result;
}

void sub_1A352327C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_1A352328C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *boost::function1<void,coredump::CommandDriver::Status>::~function1(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t __cxx_global_var_init_34()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1A343C000);
  }
  return result;
}

_QWORD *abm::DiagnosticToolsTask::DiagnosticToolsTask(_QWORD *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v5 = (std::__shared_weak_count *)a3[1];
  v17 = *a3;
  v18 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v8;
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }
  abm::HelperTask::HelperTask((uint64_t)a1, a2, &v17, &v15);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *a1 = off_1E4A0DA90;
  return a1;
}

void sub_1A35233F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void abm::DiagnosticToolsTask::~DiagnosticToolsTask(abm::DiagnosticToolsTask *this)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;

  *(_QWORD *)this = off_1E4A0F3B8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *((_QWORD *)this + 14);
  if (v3)
    dispatch_release(v3);
  *(_QWORD *)this = &unk_1E4A06FA8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v4 = *((_QWORD *)this + 12);
  if (v4)
    dispatch_release(v4);
  v5 = *((_QWORD *)this + 11);
  if (v5)
    dispatch_release(v5);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

{
  void *v1;

  abm::DiagnosticToolsTask::~DiagnosticToolsTask(this);
  operator delete(v1);
}

_QWORD *abm::DiagnosticToolsTask::getName(abm::DiagnosticToolsTask *this)
{
  unsigned __int8 v1;
  unsigned int v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_18);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&_MergedGlobals_18))
    return qword_1ED114BE0;
  v4 = *((_DWORD *)this + 26) - 1;
  if (v4 > 9)
    v5 = "invalid";
  else
    v5 = off_1E4A0DB58[v4];
  std::string::basic_string[abi:ne180100]<0>(qword_1ED114BE0, v5);
  __cxa_atexit(MEMORY[0x1E0DE44D0], qword_1ED114BE0, &dword_1A343C000);
  __cxa_guard_release(&_MergedGlobals_18);
  return qword_1ED114BE0;
}

void sub_1A3523560(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&_MergedGlobals_18);
  _Unwind_Resume(a1);
}

void abm::DiagnosticToolsTask::init_sync(abm::DiagnosticToolsTask *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  NSObject *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD aBlock[6];
  std::__shared_weak_count *v20;
  _QWORD v21[2];
  char v22[32];
  uint64_t v23;
  std::__shared_weak_count *v24;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v10)
      goto LABEL_27;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v10)
      goto LABEL_27;
  }
  v11 = std::__shared_weak_count::lock(v10);
  v24 = v11;
  if (v11)
  {
    v12 = v11;
    v13 = *((_QWORD *)this + 15);
    v23 = v13;
    if (v13)
    {
      v22[23] = 16;
      strcpy(v22, "kCommandTailspin");
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN3abm19DiagnosticToolsTask9init_syncEv_block_invoke;
      aBlock[3] = &__block_descriptor_tmp_22;
      aBlock[4] = this;
      aBlock[5] = v3;
      v20 = v5;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      v15 = _Block_copy(aBlock);
      v16 = *((_QWORD *)this + 11);
      if (v16)
        dispatch_retain(v16);
      v21[0] = v15;
      v21[1] = v16;
      abm::HelperServerInternal::setCommandHandler(v13, (uint64_t)v22, (uint64_t)v21);
      if (v16)
        dispatch_release(v16);
      if (v15)
        _Block_release(v15);
      if (v20)
        std::__shared_weak_count::__release_weak(v20);
    }
    v17 = (unint64_t *)&v12->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_27:
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1A352372C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  std::__shared_weak_count *v17;
  uint64_t v18;

  dispatch::callback<void({block_pointer})(TelephonyXPC::ServerClientState,xpc::dict,dispatch::callback<void({block_pointer})(int,xpc::dict)>)>::~callback((uint64_t)&a17);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v18 - 64);
  std::__shared_weak_count::__release_weak(v17);
  _Unwind_Resume(a1);
}

void ___ZN3abm19DiagnosticToolsTask9init_syncEv_block_invoke(_QWORD *a1, uint64_t a2, xpc_object_t *a3, uint64_t a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  NSObject *v9;
  int v10;
  std::string::value_type *v11;
  std::string::size_type v12;
  std::string::size_type v13;
  int v14;
  xpc_object_t value;
  const std::string::value_type *v16;
  std::string::size_type v17;
  xpc_object_t v18;
  xpc_object_t v19;
  std::string::size_type v20;
  int v21;
  int v22;
  xpc_object_t v23;
  void *v24;
  NSObject *v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  void *v30;
  std::string v31;
  std::string __p;
  xpc_object_t object;
  uint64_t v34;
  std::__shared_weak_count *v35;
  xpc_object_t block;
  std::string::size_type v37;
  void (*v38)(uint64_t);
  void *v39;
  void *aBlock;
  xpc_object_t v41;
  int v42;

  v5 = a1[4];
  v34 = 0;
  v35 = 0;
  v6 = (std::__shared_weak_count *)a1[6];
  if (v6)
  {
    v35 = std::__shared_weak_count::lock(v6);
    if (!v35)
      return;
    v34 = a1[5];
    if (v34)
    {
      v9 = *(NSObject **)(v5 + 112);
      if (v9)
      {
        dispatch_retain(*(dispatch_object_t *)(v5 + 112));
        dispatch_group_enter(v9);
      }
      if (MEMORY[0x1A85902BC](*a3) != MEMORY[0x1E0C812F8])
      {
        v10 = 0;
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v30 = 0;
        memset(&__p, 0, sizeof(__p));
LABEL_8:
        v31.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
        v31.__r_.__value_.__l.__size_ = v13;
        v31.__r_.__value_.__r.__words[2] = v12;
        goto LABEL_21;
      }
      value = xpc_dictionary_get_value(*a3, "LogPath");
      object = value;
      if (value)
        xpc_retain(value);
      else
        object = xpc_null_create();
      xpc::dyn_cast_or_default();
      v16 = (const std::string::value_type *)block;
      v17 = (std::string::size_type)v38;
      HIBYTE(v38) = 0;
      LOBYTE(block) = 0;
      xpc_release(object);
      v18 = xpc_dictionary_get_value(*a3, "DumpStateReason");
      object = v18;
      if (v18)
        xpc_retain(v18);
      else
        object = xpc_null_create();
      xpc::dyn_cast_or_default();
      v11 = (std::string::value_type *)block;
      v13 = v37;
      v12 = (std::string::size_type)v38;
      HIBYTE(v38) = 0;
      LOBYTE(block) = 0;
      xpc_release(object);
      v19 = xpc_dictionary_get_value(*a3, "kKeyDuration");
      block = v19;
      if (v19)
        xpc_retain(v19);
      else
        block = xpc_null_create();
      v10 = xpc::dyn_cast_or_default();
      xpc_release(block);
      if ((v17 & 0x8000000000000000) != 0)
      {
        std::string::__init_copy_ctor_external(&__p, v16, v37);
        v30 = (void *)v16;
        v14 = 1;
        if ((v12 & 0x8000000000000000) == 0)
          goto LABEL_8;
      }
      else
      {
        v20 = (std::string::size_type)v16;
        v14 = 0;
        v30 = (void *)v20;
        __p.__r_.__value_.__r.__words[0] = v20;
        __p.__r_.__value_.__l.__size_ = v37;
        __p.__r_.__value_.__r.__words[2] = v17;
        if ((v12 & 0x8000000000000000) == 0)
          goto LABEL_8;
      }
      std::string::__init_copy_ctor_external(&v31, v11, v13);
LABEL_21:
      v21 = abm::DiagnosticToolsTask::tailspin_sync(v5, (const char *)&__p, (uint64_t)&v31, v10);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v31.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_23:
          if (!*(_QWORD *)a4)
            goto LABEL_44;
LABEL_27:
          if (!*(_QWORD *)(a4 + 8))
            goto LABEL_44;
          if (v21)
            v22 = 0;
          else
            v22 = -534716416;
          v23 = xpc_null_create();
          if (*(_QWORD *)a4)
            v24 = _Block_copy(*(const void **)a4);
          else
            v24 = 0;
          v25 = *(NSObject **)(a4 + 8);
          block = (xpc_object_t)MEMORY[0x1E0C809B0];
          v37 = 1174405120;
          v38 = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke_2;
          v39 = &__block_descriptor_tmp_8_9;
          if (v24)
          {
            v26 = _Block_copy(v24);
            v42 = v22;
            aBlock = v26;
            v41 = v23;
            if (v23)
            {
LABEL_36:
              xpc_retain(v23);
LABEL_39:
              dispatch_async(v25, &block);
              xpc_release(v41);
              v41 = 0;
              if (aBlock)
                _Block_release(aBlock);
              if (v24)
                _Block_release(v24);
              xpc_release(v23);
LABEL_44:
              if ((v12 & 0x8000000000000000) != 0)
              {
                operator delete(v11);
                if (v14)
                {
LABEL_46:
                  operator delete(v30);
                  if (!v9)
                    goto LABEL_51;
LABEL_50:
                  dispatch_group_leave(v9);
                  dispatch_release(v9);
                  goto LABEL_51;
                }
              }
              else if (v14)
              {
                goto LABEL_46;
              }
              if (!v9)
                goto LABEL_51;
              goto LABEL_50;
            }
          }
          else
          {
            v42 = v22;
            aBlock = 0;
            v41 = v23;
            if (v23)
              goto LABEL_36;
          }
          v41 = xpc_null_create();
          goto LABEL_39;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_23;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!*(_QWORD *)a4)
        goto LABEL_44;
      goto LABEL_27;
    }
  }
LABEL_51:
  v27 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_1A3523B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,xpc_object_t a23,char a24,uint64_t a25,xpc_object_t object)
{
  NSObject *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;

  xpc_release(object);
  if (v29 < 0)
    operator delete(v28);
  if (v30 < 0)
    operator delete(v27);
  if (v26)
  {
    dispatch_group_leave(v26);
    dispatch_release(v26);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t abm::DiagnosticToolsTask::tailspin_sync(uint64_t a1, const char *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  _BOOL4 v13;
  const char *v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  uint64_t v18;
  const char *v19;
  std::string __p;
  std::string v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v8 = *(NSObject **)(a1 + 40);
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      goto LABEL_14;
LABEL_7:
    *(_DWORD *)buf = 67109120;
    LODWORD(v24) = a4;
    _os_log_impl(&dword_1A343C000, v8, OS_LOG_TYPE_DEFAULT, "#I Tailspin: Duration: %d seconds", buf, 8u);
    if ((a2[23] & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_8;
  }
  if (*(char *)(a3 + 23) < 0)
  {
    if (*(_QWORD *)(a3 + 8))
      v9 = *(const char **)a3;
    else
      v9 = "<no reason>";
  }
  else if (*(_BYTE *)(a3 + 23))
  {
    v9 = (const char *)a3;
  }
  else
  {
    v9 = "<no reason>";
  }
  *(_DWORD *)buf = 136315138;
  v24 = v9;
  _os_log_impl(&dword_1A343C000, v8, OS_LOG_TYPE_DEFAULT, "#I Tailspin: Reason: %s", buf, 0xCu);
  v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    goto LABEL_7;
LABEL_14:
  if ((a2[23] & 0x80000000) == 0)
  {
LABEL_15:
    v22 = *(std::string *)a2;
    if (*(char *)(a3 + 23) < 0)
      goto LABEL_16;
LABEL_9:
    __p = *(std::string *)a3;
    goto LABEL_17;
  }
LABEL_8:
  std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    goto LABEL_9;
LABEL_16:
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
LABEL_17:
  v10 = abm::tailspin::dumpOutputWithOptions_sync((uint64_t)&v22, (uint64_t *)&__p, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_19:
      v11 = *((unsigned __int8 *)a2 + 23);
      if ((a2[23] & 0x80000000) == 0)
        goto LABEL_20;
      goto LABEL_29;
    }
  }
  else if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(v22.__r_.__value_.__l.__data_);
  v11 = *((unsigned __int8 *)a2 + 23);
  if ((a2[23] & 0x80000000) == 0)
  {
LABEL_20:
    v12 = *(NSObject **)(a1 + 40);
    v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if (v11)
      goto LABEL_21;
    goto LABEL_30;
  }
LABEL_29:
  v18 = *((_QWORD *)a2 + 1);
  v12 = *(NSObject **)(a1 + 40);
  v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  if (v18)
  {
LABEL_21:
    if (v13)
    {
      if ((v11 & 0x80) != 0)
        a2 = *(const char **)a2;
      v14 = "NO";
      if ((_DWORD)v10)
        v14 = "YES";
      *(_DWORD *)buf = 136315394;
      v24 = a2;
      v25 = 2080;
      v26 = v14;
      v15 = "#I Tailspin: Log is generated at %s. Success: %s";
      v16 = v12;
      v17 = 22;
LABEL_34:
      _os_log_impl(&dword_1A343C000, v16, OS_LOG_TYPE_DEFAULT, v15, buf, v17);
      return v10;
    }
    return v10;
  }
LABEL_30:
  if (v13)
  {
    v19 = "NO";
    if ((_DWORD)v10)
      v19 = "YES";
    *(_DWORD *)buf = 136315138;
    v24 = v19;
    v15 = "#I Tailspin: Log is generated at tailspin's default location. Success: %s";
    v16 = v12;
    v17 = 12;
    goto LABEL_34;
  }
  return v10;
}

void sub_1A3523F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  xpc_object_t object;

  v1 = *(unsigned int *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  object = v2;
  if (v2)
    xpc_retain(v2);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v3 + 16))(v3, v1, &object);
  xpc_release(object);
}

void sub_1A3523F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t diag::DIAGConfigurerUSB::DIAGConfigurerUSB(uint64_t a1, uint64_t *a2, int *a3, uint64_t a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  capabilities::diag *v27;
  int v29;
  CFTypeRef cf;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;

  v7 = (std::__shared_weak_count *)a2[1];
  v35 = *a2;
  v36 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v29 = *a3;
  v10 = (const void *)*((_QWORD *)a3 + 1);
  cf = v10;
  if (v10)
    CFRetain(v10);
  v11 = (std::__shared_weak_count *)*((_QWORD *)a3 + 3);
  v31 = *((_QWORD *)a3 + 2);
  v32 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *((_QWORD *)a3 + 4);
  v15 = (std::__shared_weak_count *)*((_QWORD *)a3 + 5);
  v33 = v14;
  v34 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  diag::DIAGConfigurer::DIAGConfigurer(a1, &v35, (uint64_t)&v29, a4);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v20 = v32;
  if (v32)
  {
    v21 = (unint64_t *)&v32->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      v23 = (void *)cf;
      if (!cf)
        goto LABEL_23;
      goto LABEL_22;
    }
  }
  v23 = (void *)cf;
  if (cf)
LABEL_22:
    CFRelease(v23);
LABEL_23:
  v24 = v36;
  if (v36)
  {
    v25 = (unint64_t *)&v36->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  *(_QWORD *)a1 = off_1E4A0DBB8;
  v27 = (capabilities::diag *)capabilities::diag::interfaceAfterBoot((capabilities::diag *)v23);
  *(_DWORD *)(a1 + 176) = (_DWORD)v27;
  *(_DWORD *)(a1 + 180) = capabilities::diag::preferredInterface(v27);
  return a1;
}

void sub_1A352415C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  diag::DIAGConfigurer::Parameters_t::~Parameters_t((diag::DIAGConfigurer::Parameters_t *)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1A3524178(_Unwind_Exception *a1)
{
  diag::DIAGConfigurer *v1;

  diag::DIAGConfigurer::~DIAGConfigurer(v1);
  _Unwind_Resume(a1);
}

void diag::DIAGConfigurerUSB::~DIAGConfigurerUSB(diag::DIAGConfigurerUSB *this)
{
  void *v1;

  diag::DIAGConfigurer::~DIAGConfigurer(this);
  operator delete(v1);
}

void diag::DIAGConfigurerUSB::reset(diag::DIAGConfigurerUSB *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN4diag17DIAGConfigurerUSB5resetEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_23;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4diag14DIAGConfigurerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke_1;
  block[3] = &__block_descriptor_tmp_12_1;
  block[4] = (char *)this + 72;
  block[5] = &v4;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void ___ZN4diag17DIAGConfigurerUSB5resetEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  capabilities::diag *v3;
  NSObject *v4;
  uint8_t v5[16];
  uint8_t buf[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v2, OS_LOG_TYPE_DEFAULT, "#I Resetting DIAG configuration", buf, 2u);
  }
  v3 = (capabilities::diag *)BasebandTransport::close(*(BasebandTransport **)(v1 + 120));
  *(_DWORD *)(v1 + 176) = capabilities::diag::interfaceAfterBoot(v3);
  if ((*(_DWORD *)(v1 + 104) - 1) <= 1)
  {
    TelephonyBasebandEnableModemVBUS();
    TelephonyBasebandEnableModemMux();
    v4 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1A343C000, v4, OS_LOG_TYPE_DEFAULT, "#I Mux Off", v5, 2u);
    }
  }
}

void diag::DIAGConfigurerUSB::starting(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  NSObject *v15;
  unint64_t v16;
  _QWORD v17[5];
  void *aBlock;
  dispatch_object_t object;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v6 = *(_QWORD *)(a1 + 72);
  v4 = *(std::__shared_weak_count **)(a1 + 80);
  v5 = (uint64_t *)(a1 + 72);
  if (!v4 || (v8 = std::__shared_weak_count::lock(v4)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 1174405120;
  v17[2] = ___ZN4diag17DIAGConfigurerUSB8startingEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  v17[3] = &__block_descriptor_tmp_7_7;
  v17[4] = a1;
  v14 = *(void **)a2;
  if (*(_QWORD *)a2)
    v14 = _Block_copy(v14);
  v15 = *(NSObject **)(a2 + 8);
  aBlock = v14;
  object = v15;
  if (v15)
    dispatch_retain(v15);
  v20 = v6;
  v21 = v9;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  ctu::SharedSynchronizable<diag::DIAGConfigurer>::execute_wrapped(v5, (uint64_t)v17);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  std::__shared_weak_count::__release_weak(v9);
}

void ___ZN4diag17DIAGConfigurerUSB8startingEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  void *v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  std::__shared_weak_count *v16;
  const void *v17;
  void *v18;
  uint64_t v19;
  int v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  void *v27;
  NSObject *v28;
  void *v29;
  NSObject *v30;
  NSObject *v31;
  void *v32;
  _QWORD v33[7];
  std::__shared_weak_count *v34;
  void *v35;
  dispatch_object_t v36;
  void *v37;
  dispatch_object_t v38;
  _QWORD aBlock[7];
  std::__shared_weak_count *v40;
  void *v41;
  dispatch_object_t object;
  const void *v43;
  dispatch_object_t v44;
  uint64_t block;
  uint64_t p_block;
  uint64_t v47;
  void *v48;
  const void *v49;
  char v50;

  v2 = a1[4];
  v3 = *(_QWORD *)(v2 + 136);
  if (v3)
  {
    block = 0;
    p_block = (uint64_t)&block;
    v47 = 0x2000000000;
    LOBYTE(v48) = 0;
    v4 = *(_DWORD *)(v2 + 104);
    if (v4 <= 4)
    {
      if (((1 << v4) & 0x13) != 0)
      {
        *(_DWORD *)(v2 + 152) = *(_DWORD *)(v2 + 180);
        v5 = MEMORY[0x1E0C809B0];
        *(_BYTE *)(v2 + 164) = 1;
        aBlock[0] = v5;
        aBlock[2] = ___ZN4diag17DIAGConfigurerUSB8startingEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_2;
        aBlock[3] = &unk_1E4A0DC70;
        v7 = a1[7];
        v6 = (std::__shared_weak_count *)a1[8];
        aBlock[5] = v2;
        aBlock[6] = v7;
        v8 = *(_QWORD *)(v2 + 152);
        v9 = *(_QWORD *)(v2 + 160);
        aBlock[1] = 1174405120;
        v40 = v6;
        if (v6)
        {
          p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
          do
            v11 = __ldxr(p_shared_weak_owners);
          while (__stxr(v11 + 1, p_shared_weak_owners));
        }
        aBlock[4] = &block;
        v12 = (void *)a1[5];
        if (v12)
          v12 = _Block_copy(v12);
        v13 = a1[6];
        v41 = v12;
        object = v13;
        if (v13)
          dispatch_retain(v13);
        v14 = _Block_copy(aBlock);
        v15 = *(NSObject **)(v2 + 88);
        if (v15)
          dispatch_retain(v15);
        v43 = v14;
        v44 = v15;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, const void **))(*(_QWORD *)v3 + 48))(v3, 65, v8, v9, &v43);
        if (v44)
          dispatch_release(v44);
        if (v43)
          _Block_release(v43);
        if (object)
          dispatch_release(object);
        if (v41)
          _Block_release(v41);
        v16 = v40;
        if (!v40)
          goto LABEL_23;
      }
      else
      {
        v19 = MEMORY[0x1E0C809B0];
        if (v4 == 2)
          v20 = 2;
        else
          v20 = 4;
        *(_DWORD *)(v2 + 152) = v20;
        v33[0] = v19;
        v33[2] = ___ZN4diag17DIAGConfigurerUSB8startingEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_5;
        v33[3] = &unk_1E4A0DCA8;
        v22 = a1[7];
        v21 = (std::__shared_weak_count *)a1[8];
        v33[5] = v2;
        v33[6] = v22;
        v23 = *(_QWORD *)(v2 + 152);
        v24 = *(_QWORD *)(v2 + 160);
        v33[1] = 1174405120;
        v34 = v21;
        if (v21)
        {
          v25 = (unint64_t *)&v21->__shared_weak_owners_;
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        v33[4] = &block;
        v27 = (void *)a1[5];
        if (v27)
          v27 = _Block_copy(v27);
        v28 = a1[6];
        v35 = v27;
        v36 = v28;
        if (v28)
          dispatch_retain(v28);
        v29 = _Block_copy(v33);
        v30 = *(NSObject **)(v2 + 88);
        if (v30)
          dispatch_retain(v30);
        v37 = v29;
        v38 = v30;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v3 + 48))(v3, 1, v23, v24, &v37);
        if (v38)
          dispatch_release(v38);
        if (v37)
          _Block_release(v37);
        if (v36)
          dispatch_release(v36);
        if (v35)
          _Block_release(v35);
        v16 = v34;
        if (!v34)
          goto LABEL_23;
      }
      std::__shared_weak_count::__release_weak(v16);
    }
LABEL_23:
    _Block_object_dispose(&block, 8);
    return;
  }
  v17 = (const void *)a1[5];
  if (v17)
    v18 = _Block_copy(v17);
  else
    v18 = 0;
  v31 = a1[6];
  block = MEMORY[0x1E0C809B0];
  p_block = 1174405120;
  v47 = (uint64_t)___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
  v48 = &__block_descriptor_tmp_13_5;
  if (v18)
    v32 = _Block_copy(v18);
  else
    v32 = 0;
  v49 = v32;
  v50 = 0;
  dispatch_async(v31, &block);
  if (v49)
    _Block_release(v49);
  if (v18)
    _Block_release(v18);
}

void sub_1A3524794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  uint64_t v29;

  dispatch::callback<void({block_pointer})(BOOL)>::~callback((uint64_t)&a19);
  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v28);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  _Block_object_dispose((const void *)(v29 - 112), 8);
  _Unwind_Resume(a1);
}

void ___ZN4diag17DIAGConfigurerUSB8startingEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_2(_QWORD *a1, char a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  uint64_t v9;
  capabilities::abs *shouldUseMinBasebandTransportIOReadSize;
  int v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  const char *v15;
  int v16;
  char v17;
  const void *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  void *aBlock;
  int v25;
  char v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  char v31;
  std::__shared_weak_count *v33;
  _BYTE buf[24];
  void *v35;
  void *v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[7];
  if (v3)
  {
    v5 = a1[5];
    v6 = std::__shared_weak_count::lock(v3);
    v33 = v6;
    if (v6)
    {
      v7 = v6;
      if (a1[6])
      {
        *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = a2;
        if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
        {
          *(_DWORD *)(v5 + 176) = *(_DWORD *)(v5 + 152);
          if (*(_DWORD *)(v5 + 104) == 4)
          {
            v8 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1A343C000, v8, OS_LOG_TYPE_DEFAULT, "#I Releasing transport", buf, 2u);
            }
            *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = BasebandTransport::close(*(BasebandTransport **)(v5 + 120));
          }
          else
          {
            v9 = *(_QWORD *)(v5 + 120);
            v25 = 2;
            v26 = 0;
            v27 = 10;
            shouldUseMinBasebandTransportIOReadSize = (capabilities::abs *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)v6);
            if ((_DWORD)shouldUseMinBasebandTransportIOReadSize)
              v11 = 0x4000;
            else
              v11 = 0x8000;
            v28 = v11;
            if (capabilities::abs::shouldUseMinBasebandTransportIOReadCount(shouldUseMinBasebandTransportIOReadSize))
              v12 = 4;
            else
              v12 = 16;
            v29 = v12;
            v30 = 0;
            v31 = 0;
            aBlock = 0;
            *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = (*(uint64_t (**)(uint64_t, int *, void **))(*(_QWORD *)v9 + 48))(v9, &v25, &aBlock);
            if (aBlock)
              _Block_release(aBlock);
          }
        }
        v13 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          v14 = *(int *)(v5 + 104);
          if (v14 > 4)
            v15 = "Unknown";
          else
            v15 = off_1E4A0DE38[v14];
          v16 = *(unsigned __int8 *)(*(_QWORD *)(a1[4] + 8) + 24);
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v15;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v16;
          _os_log_impl(&dword_1A343C000, v13, OS_LOG_TYPE_DEFAULT, "#I Starting %s, success = %d", buf, 0x12u);
        }
        v17 = *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24);
        v18 = (const void *)a1[8];
        if (v18)
          v19 = _Block_copy(v18);
        else
          v19 = 0;
        v20 = a1[9];
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 1174405120;
        *(_QWORD *)&buf[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
        v35 = &__block_descriptor_tmp_13_5;
        if (v19)
          v21 = _Block_copy(v19);
        else
          v21 = 0;
        v36 = v21;
        v37 = v17;
        dispatch_async(v20, buf);
        if (v36)
          _Block_release(v36);
        if (v19)
          _Block_release(v19);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1A3524AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_48c46_ZTSNSt3__18weak_ptrIN4diag14DIAGConfigurerEEE64c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  NSObject *v8;

  v4 = a2[7];
  a1[6] = a2[6];
  a1[7] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[8];
  if (v7)
    v7 = _Block_copy(v7);
  v8 = a2[9];
  a1[8] = v7;
  a1[9] = v8;
  if (v8)
    dispatch_retain(v8);
}

void __destroy_helper_block_e8_48c46_ZTSNSt3__18weak_ptrIN4diag14DIAGConfigurerEEE64c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[9];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[8];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[7];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void ___ZN4diag17DIAGConfigurerUSB8startingEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_5(_QWORD *a1, char a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  int v11;
  char v12;
  const void *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _BYTE v19[24];
  void *v20;
  void *aBlock;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[7];
  if (v3)
  {
    v5 = a1[5];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[6])
      {
        *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = a2;
        if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
          *(_DWORD *)(v5 + 176) = *(_DWORD *)(v5 + 152);
        v8 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          v9 = *(int *)(v5 + 104);
          if (v9 > 4)
            v10 = "Unknown";
          else
            v10 = off_1E4A0DE38[v9];
          v11 = *(unsigned __int8 *)(*(_QWORD *)(a1[4] + 8) + 24);
          *(_DWORD *)v19 = 136315394;
          *(_QWORD *)&v19[4] = v10;
          *(_WORD *)&v19[12] = 1024;
          *(_DWORD *)&v19[14] = v11;
          _os_log_impl(&dword_1A343C000, v8, OS_LOG_TYPE_DEFAULT, "#I Starting %s, success = %d", v19, 0x12u);
        }
        v12 = *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24);
        v13 = (const void *)a1[8];
        if (v13)
          v14 = _Block_copy(v13);
        else
          v14 = 0;
        v15 = a1[9];
        *(_QWORD *)v19 = MEMORY[0x1E0C809B0];
        *(_QWORD *)&v19[8] = 1174405120;
        *(_QWORD *)&v19[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
        v20 = &__block_descriptor_tmp_13_5;
        if (v14)
          v16 = _Block_copy(v14);
        else
          v16 = 0;
        aBlock = v16;
        v22 = v12;
        dispatch_async(v15, v19);
        if (aBlock)
          _Block_release(aBlock);
        if (v14)
          _Block_release(v14);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1A3524DCC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void diag::DIAGConfigurerUSB::started(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  NSObject *v15;
  unint64_t v16;
  _QWORD v17[5];
  void *aBlock;
  dispatch_object_t object;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v6 = *(_QWORD *)(a1 + 72);
  v4 = *(std::__shared_weak_count **)(a1 + 80);
  v5 = (uint64_t *)(a1 + 72);
  if (!v4 || (v8 = std::__shared_weak_count::lock(v4)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 1174405120;
  v17[2] = ___ZN4diag17DIAGConfigurerUSB7startedEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  v17[3] = &__block_descriptor_tmp_9_4;
  v17[4] = a1;
  v14 = *(void **)a2;
  if (*(_QWORD *)a2)
    v14 = _Block_copy(v14);
  v15 = *(NSObject **)(a2 + 8);
  aBlock = v14;
  object = v15;
  if (v15)
    dispatch_retain(v15);
  v20 = v6;
  v21 = v9;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  ctu::SharedSynchronizable<diag::DIAGConfigurer>::execute_wrapped(v5, (uint64_t)v17);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  std::__shared_weak_count::__release_weak(v9);
}

void ___ZN4diag17DIAGConfigurerUSB7startedEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  void *v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  const void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  int v19;
  NSObject *v20;
  const void *v21;
  void *v22;
  NSObject *v23;
  void *v24;
  uint64_t v25;
  const char *v26;
  const void *v27;
  void *v28;
  NSObject *v29;
  void *v30;
  _QWORD v31[7];
  std::__shared_weak_count *v32;
  void *v33;
  dispatch_object_t v34;
  void *aBlock;
  dispatch_object_t object;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char v40;
  _BYTE block[24];
  void *v42;
  void *v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v2 = a1[4];
  v3 = *(_QWORD *)(v2 + 136);
  if (v3)
  {
    v37 = 0;
    v38 = &v37;
    v39 = 0x2000000000;
    v40 = 0;
    switch(*(_DWORD *)(v2 + 104))
    {
      case 0:
      case 1:
      case 4:
        v4 = MEMORY[0x1E0C809B0];
        *(_DWORD *)(v2 + 156) = 1;
        v31[0] = v4;
        v31[2] = ___ZN4diag17DIAGConfigurerUSB7startedEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_2;
        v31[3] = &unk_1E4A0DD10;
        v6 = a1[7];
        v5 = (std::__shared_weak_count *)a1[8];
        v31[5] = v2;
        v31[6] = v6;
        v7 = *(_QWORD *)(v2 + 152);
        v8 = *(_QWORD *)(v2 + 160);
        v31[1] = 1174405120;
        v32 = v5;
        if (v5)
        {
          p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
          do
            v10 = __ldxr(p_shared_weak_owners);
          while (__stxr(v10 + 1, p_shared_weak_owners));
        }
        v31[4] = &v37;
        v11 = (void *)a1[5];
        if (v11)
          v11 = _Block_copy(v11);
        v12 = a1[6];
        v33 = v11;
        v34 = v12;
        if (v12)
          dispatch_retain(v12);
        v13 = _Block_copy(v31);
        v14 = *(NSObject **)(v2 + 88);
        if (v14)
          dispatch_retain(v14);
        aBlock = v13;
        object = v14;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v3 + 48))(v3, 4, v7, v8, &aBlock);
        if (object)
          dispatch_release(object);
        if (aBlock)
          _Block_release(aBlock);
        if (v34)
          dispatch_release(v34);
        if (v33)
          _Block_release(v33);
        if (v32)
          std::__shared_weak_count::__release_weak(v32);
        goto LABEL_60;
      case 2:
        *((_BYTE *)v38 + 24) = TelephonyBasebandEnableModemMux();
        usleep(0x186A0u);
        if (*((_BYTE *)v38 + 24))
        {
          v19 = TelephonyBasebandEnableModemVBUS();
          *((_BYTE *)v38 + 24) = v19;
          v20 = *(NSObject **)(v2 + 40);
          if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            goto LABEL_50;
        }
        else
        {
          v19 = 0;
          *((_BYTE *)v38 + 24) = 0;
          v20 = *(NSObject **)(v2 + 40);
          if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
LABEL_50:
            v27 = (const void *)a1[5];
            if (v27)
              v28 = _Block_copy(v27);
            else
              v28 = 0;
            v29 = a1[6];
            *(_QWORD *)block = MEMORY[0x1E0C809B0];
            *(_QWORD *)&block[8] = 1174405120;
            *(_QWORD *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
            v42 = &__block_descriptor_tmp_13_5;
            if (v28)
              v30 = _Block_copy(v28);
            else
              v30 = 0;
            v43 = v30;
            v44 = v19;
            dispatch_async(v29, block);
            if (v43)
              _Block_release(v43);
            if (v28)
              _Block_release(v28);
LABEL_60:
            _Block_object_dispose(&v37, 8);
            return;
          }
        }
        v25 = *(int *)(v2 + 104);
        if (v25 > 4)
          v26 = "Unknown";
        else
          v26 = off_1E4A0DE38[v25];
        *(_DWORD *)block = 136315394;
        *(_QWORD *)&block[4] = v26;
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = v19;
        _os_log_impl(&dword_1A343C000, v20, OS_LOG_TYPE_DEFAULT, "#I Started %s, success = %d", block, 0x12u);
        LOBYTE(v19) = *((_BYTE *)v38 + 24);
        goto LABEL_50;
      case 3:
        v21 = (const void *)a1[5];
        if (v21)
          v22 = _Block_copy(v21);
        else
          v22 = 0;
        v23 = a1[6];
        *(_QWORD *)block = MEMORY[0x1E0C809B0];
        *(_QWORD *)&block[8] = 1174405120;
        *(_QWORD *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
        v42 = &__block_descriptor_tmp_13_5;
        if (v22)
          v24 = _Block_copy(v22);
        else
          v24 = 0;
        v43 = v24;
        v44 = 0;
        dispatch_async(v23, block);
        if (v43)
          _Block_release(v43);
        if (v22)
          _Block_release(v22);
        goto LABEL_60;
      default:
        goto LABEL_60;
    }
  }
  v15 = (const void *)a1[5];
  if (v15)
    v16 = _Block_copy(v15);
  else
    v16 = 0;
  v17 = a1[6];
  *(_QWORD *)block = MEMORY[0x1E0C809B0];
  *(_QWORD *)&block[8] = 1174405120;
  *(_QWORD *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
  v42 = &__block_descriptor_tmp_13_5;
  if (v16)
    v18 = _Block_copy(v16);
  else
    v18 = 0;
  v43 = v18;
  v44 = 0;
  dispatch_async(v17, block);
  if (v43)
    _Block_release(v43);
  if (v16)
    _Block_release(v16);
}

void sub_1A3525378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4diag17DIAGConfigurerUSB7startedEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_2(_QWORD *a1, char a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  int v11;
  char v12;
  const void *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _BYTE v19[24];
  void *v20;
  void *aBlock;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[7];
  if (v3)
  {
    v5 = a1[5];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[6])
      {
        *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = a2;
        v8 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          v9 = *(int *)(v5 + 104);
          if (v9 > 4)
            v10 = "Unknown";
          else
            v10 = off_1E4A0DE38[v9];
          v11 = *(unsigned __int8 *)(*(_QWORD *)(a1[4] + 8) + 24);
          *(_DWORD *)v19 = 136315394;
          *(_QWORD *)&v19[4] = v10;
          *(_WORD *)&v19[12] = 1024;
          *(_DWORD *)&v19[14] = v11;
          _os_log_impl(&dword_1A343C000, v8, OS_LOG_TYPE_DEFAULT, "#I Started %s, success = %d", v19, 0x12u);
        }
        v12 = *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24);
        v13 = (const void *)a1[8];
        if (v13)
          v14 = _Block_copy(v13);
        else
          v14 = 0;
        v15 = a1[9];
        *(_QWORD *)v19 = MEMORY[0x1E0C809B0];
        *(_QWORD *)&v19[8] = 1174405120;
        *(_QWORD *)&v19[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
        v20 = &__block_descriptor_tmp_13_5;
        if (v14)
          v16 = _Block_copy(v14);
        else
          v16 = 0;
        aBlock = v16;
        v22 = v12;
        dispatch_async(v15, v19);
        if (aBlock)
          _Block_release(aBlock);
        if (v14)
          _Block_release(v14);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1A35255DC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void diag::DIAGConfigurerUSB::stopping(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  NSObject *v6;
  _QWORD v7[5];
  void *aBlock;
  dispatch_object_t object;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN4diag17DIAGConfigurerUSB8stoppingEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_10_4;
  v7[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = (uint64_t *)(a1 + 72);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<diag::DIAGConfigurer>::execute_wrapped(v5, (uint64_t)v7);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN4diag17DIAGConfigurerUSB8stoppingEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(capabilities::abs *a1)
{
  uint64_t v1;
  int v3;
  int v4;
  NSObject *v5;
  const void *v6;
  void *v7;
  NSObject *v8;
  int v9;
  uint64_t v10;
  capabilities::abs *shouldUseMinBasebandTransportIOReadSize;
  int v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  const void *v17;
  void *v18;
  uint64_t v19;
  const char *v20;
  NSObject *v21;
  void *v22;
  const void *v23;
  void *v24;
  NSObject *v25;
  void *v26;
  NSObject *v27;
  void *v28;
  void *aBlock;
  int v30;
  char v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  char v36;
  _BYTE buf[24];
  void *v38;
  void *v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)a1 + 4);
  switch(*(_DWORD *)(v1 + 104))
  {
    case 0:
      v10 = *(_QWORD *)(v1 + 120);
      v30 = 2;
      v31 = 0;
      v32 = 10;
      shouldUseMinBasebandTransportIOReadSize = (capabilities::abs *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize(a1);
      if ((_DWORD)shouldUseMinBasebandTransportIOReadSize)
        v12 = 0x4000;
      else
        v12 = 0x8000;
      v33 = v12;
      if (capabilities::abs::shouldUseMinBasebandTransportIOReadCount(shouldUseMinBasebandTransportIOReadSize))
        v13 = 4;
      else
        v13 = 16;
      v34 = v13;
      v35 = 0;
      v36 = 0;
      aBlock = 0;
      v9 = (*(uint64_t (**)(uint64_t, int *, void **))(*(_QWORD *)v10 + 48))(v10, &v30, &aBlock);
      if (aBlock)
        _Block_release(aBlock);
      goto LABEL_17;
    case 1:
    case 2:
      v3 = TelephonyBasebandEnableModemVBUS();
      usleep(0x186A0u);
      v4 = 0;
      if (!v3)
      {
        v5 = *(NSObject **)(v1 + 40);
        if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
          goto LABEL_4;
LABEL_23:
        v19 = *(int *)(v1 + 104);
        if (v19 > 4)
          v20 = "Unknown";
        else
          v20 = off_1E4A0DE38[v19];
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v20;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v4;
        _os_log_impl(&dword_1A343C000, v5, OS_LOG_TYPE_DEFAULT, "#I Stopping %s, success = %d", buf, 0x12u);
        v6 = (const void *)*((_QWORD *)a1 + 5);
        if (v6)
          goto LABEL_5;
        goto LABEL_27;
      }
      v4 = TelephonyBasebandEnableModemMux();
      v5 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        goto LABEL_23;
LABEL_4:
      v6 = (const void *)*((_QWORD *)a1 + 5);
      if (v6)
      {
LABEL_5:
        v7 = _Block_copy(v6);
        goto LABEL_28;
      }
LABEL_27:
      v7 = 0;
LABEL_28:
      v21 = *((_QWORD *)a1 + 6);
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 1174405120;
      *(_QWORD *)&buf[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
      v38 = &__block_descriptor_tmp_13_5;
      if (v7)
        v22 = _Block_copy(v7);
      else
        v22 = 0;
      v39 = v22;
      v40 = v4;
      dispatch_async(v21, buf);
      if (v39)
        _Block_release(v39);
      if (v7)
        _Block_release(v7);
      return;
    case 3:
      v17 = (const void *)*((_QWORD *)a1 + 5);
      if (v17)
        v18 = _Block_copy(v17);
      else
        v18 = 0;
      v27 = *((_QWORD *)a1 + 6);
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 1174405120;
      *(_QWORD *)&buf[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
      v38 = &__block_descriptor_tmp_13_5;
      if (v18)
        v28 = _Block_copy(v18);
      else
        v28 = 0;
      v39 = v28;
      v40 = 0;
      dispatch_async(v27, buf);
      if (v39)
        _Block_release(v39);
      if (v18)
        _Block_release(v18);
      return;
    case 4:
      v8 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A343C000, v8, OS_LOG_TYPE_DEFAULT, "#I Releasing transport", buf, 2u);
      }
      v9 = BasebandTransport::close(*(BasebandTransport **)(v1 + 120));
LABEL_17:
      v14 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        v15 = *(int *)(v1 + 104);
        if (v15 > 4)
          v16 = "Unknown";
        else
          v16 = off_1E4A0DE38[v15];
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v16;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v9;
        _os_log_impl(&dword_1A343C000, v14, OS_LOG_TYPE_DEFAULT, "#I Stopping %s, success = %d", buf, 0x12u);
      }
      v23 = (const void *)*((_QWORD *)a1 + 5);
      if (v23)
        v24 = _Block_copy(v23);
      else
        v24 = 0;
      v25 = *((_QWORD *)a1 + 6);
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 1174405120;
      *(_QWORD *)&buf[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
      v38 = &__block_descriptor_tmp_13_5;
      if (v24)
        v26 = _Block_copy(v24);
      else
        v26 = 0;
      v39 = v26;
      v40 = v9;
      dispatch_async(v25, buf);
      if (v39)
        _Block_release(v39);
      if (v24)
        _Block_release(v24);
      return;
    default:
      return;
  }
}

void sub_1A3525ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void diag::DIAGConfigurerUSB::stopped(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  NSObject *v6;
  _QWORD v7[5];
  void *aBlock;
  dispatch_object_t object;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN4diag17DIAGConfigurerUSB7stoppedEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_11_3;
  v7[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = (uint64_t *)(a1 + 72);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<diag::DIAGConfigurer>::execute_wrapped(v5, (uint64_t)v7);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN4diag17DIAGConfigurerUSB7stoppedEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(_QWORD *a1)
{
  uint64_t v1;
  int v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  int v7;
  int v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  const char *v15;
  const void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  const void *v20;
  NSObject *v21;
  void *v22;
  const void *v23;
  NSObject *v24;
  void *v25;
  _BYTE v26[24];
  void *v27;
  void *aBlock;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v1 = a1[4];
  switch(*(_DWORD *)(v1 + 104))
  {
    case 0:
    case 4:
      *(_DWORD *)(v1 + 156) = 1;
      v3 = BasebandTransport::close(*(BasebandTransport **)(v1 + 120));
      v4 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        v5 = *(int *)(v1 + 104);
        if (v5 > 4)
          v6 = "Unknown";
        else
          v6 = off_1E4A0DE38[v5];
        *(_DWORD *)v26 = 136315394;
        *(_QWORD *)&v26[4] = v6;
        *(_WORD *)&v26[12] = 1024;
        *(_DWORD *)&v26[14] = v3;
        _os_log_impl(&dword_1A343C000, v4, OS_LOG_TYPE_DEFAULT, "#I Stopped %s, success = %d", v26, 0x12u);
      }
      v16 = (const void *)a1[5];
      if (v16)
        v17 = _Block_copy(v16);
      else
        v17 = 0;
      v18 = a1[6];
      *(_QWORD *)v26 = MEMORY[0x1E0C809B0];
      *(_QWORD *)&v26[8] = 1174405120;
      *(_QWORD *)&v26[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
      v27 = &__block_descriptor_tmp_13_5;
      if (v17)
        v19 = _Block_copy(v17);
      else
        v19 = 0;
      aBlock = v19;
      v29 = v3;
      dispatch_async(v18, v26);
      if (aBlock)
        _Block_release(aBlock);
      if (v17)
        goto LABEL_49;
      break;
    case 1:
    case 2:
      v7 = TelephonyBasebandEnableModemVBUS();
      usleep(0x186A0u);
      v8 = 0;
      if (v7)
      {
        v8 = 0;
        if (TelephonyBasebandEnableModemMux())
          v8 = BasebandTransport::close(*(BasebandTransport **)(v1 + 120));
      }
      v9 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *(int *)(v1 + 104);
        if (v10 > 4)
          v11 = "Unknown";
        else
          v11 = off_1E4A0DE38[v10];
        *(_DWORD *)v26 = 136315394;
        *(_QWORD *)&v26[4] = v11;
        *(_WORD *)&v26[12] = 1024;
        *(_DWORD *)&v26[14] = v8;
        _os_log_impl(&dword_1A343C000, v9, OS_LOG_TYPE_DEFAULT, "#I Stopped %s, success = %d", v26, 0x12u);
      }
      v20 = (const void *)a1[5];
      if (v20)
        v17 = _Block_copy(v20);
      else
        v17 = 0;
      v21 = a1[6];
      *(_QWORD *)v26 = MEMORY[0x1E0C809B0];
      *(_QWORD *)&v26[8] = 1174405120;
      *(_QWORD *)&v26[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
      v27 = &__block_descriptor_tmp_13_5;
      if (v17)
        v22 = _Block_copy(v17);
      else
        v22 = 0;
      aBlock = v22;
      v29 = v8;
      dispatch_async(v21, v26);
      if (aBlock)
        _Block_release(aBlock);
      if (v17)
        goto LABEL_49;
      break;
    case 3:
      v12 = BasebandTransport::close(*(BasebandTransport **)(v1 + 120));
      v13 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v14 = *(int *)(v1 + 104);
        if (v14 > 4)
          v15 = "Unknown";
        else
          v15 = off_1E4A0DE38[v14];
        *(_DWORD *)v26 = 136315394;
        *(_QWORD *)&v26[4] = v15;
        *(_WORD *)&v26[12] = 1024;
        *(_DWORD *)&v26[14] = v12;
        _os_log_impl(&dword_1A343C000, v13, OS_LOG_TYPE_DEFAULT, "#I Stopped %s, success = %d", v26, 0x12u);
      }
      v23 = (const void *)a1[5];
      if (v23)
        v17 = _Block_copy(v23);
      else
        v17 = 0;
      v24 = a1[6];
      *(_QWORD *)v26 = MEMORY[0x1E0C809B0];
      *(_QWORD *)&v26[8] = 1174405120;
      *(_QWORD *)&v26[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
      v27 = &__block_descriptor_tmp_13_5;
      if (v17)
        v25 = _Block_copy(v17);
      else
        v25 = 0;
      aBlock = v25;
      v29 = v12;
      dispatch_async(v24, v26);
      if (aBlock)
        _Block_release(aBlock);
      if (v17)
LABEL_49:
        _Block_release(v17);
      break;
    default:
      return;
  }
}

void sub_1A3525FC4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1A352600C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1A3526008);
  JUMPOUT(0x1A3526000);
}

void sub_1A3526014(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1A3526008);
  JUMPOUT(0x1A3526000);
}

void sub_1A352601C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1A3526008);
  JUMPOUT(0x1A3526000);
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t _GLOBAL__sub_I_DIAGConfigurerUSB_cpp()
{
  uint64_t result;

  result = ETLDIAGLoggingGetDefaultView();
  dword_1ED114BFC = result;
  return result;
}

_QWORD *abm::BasebandTracingTask::getName(abm::BasebandTracingTask *this)
{
  unsigned __int8 v1;
  unsigned int v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_20);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&_MergedGlobals_20))
    return qword_1ED114C08;
  v4 = *((_DWORD *)this + 26) - 1;
  if (v4 > 9)
    v5 = "invalid";
  else
    v5 = off_1E4A0EA78[v4];
  std::string::basic_string[abi:ne180100]<0>(qword_1ED114C08, v5);
  __cxa_atexit(MEMORY[0x1E0DE44D0], qword_1ED114C08, &dword_1A343C000);
  __cxa_guard_release(&_MergedGlobals_20);
  return qword_1ED114C08;
}

void sub_1A3526114(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&_MergedGlobals_20);
  _Unwind_Resume(a1);
}

uint64_t abm::BasebandTracingTask::BasebandTracingTask(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  dispatch_queue_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v28;
  __int128 v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;

  v6 = (std::__shared_weak_count *)a3[1];
  v32 = *a3;
  v33 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (std::__shared_weak_count *)a4[1];
  v30 = *a4;
  v31 = v9;
  if (v9)
  {
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }
  abm::HelperTask::HelperTask(a1, a2, &v32, &v30);
  if (v31)
    std::__shared_weak_count::__release_weak(v31);
  v12 = v33;
  if (v33)
  {
    v13 = (unint64_t *)&v33->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(_QWORD *)a1 = off_1E4A0DE70;
  *(_QWORD *)(a1 + 136) = dispatch_group_create();
  v15 = dispatch_queue_create("basebandtracing.pending", 0);
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = v15;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_DWORD *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 184) = a1 + 184;
  *(_QWORD *)(a1 + 192) = a1 + 184;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_QWORD *)(a1 + 264) = *a3;
  v16 = a3[1];
  *(_QWORD *)(a1 + 272) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  v19 = (std::__shared_weak_count *)a3[1];
  v28 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  ctu::DispatchTimerService::create();
  v22 = *(std::__shared_weak_count **)(a1 + 304);
  *(_OWORD *)(a1 + 296) = v29;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v28)
  {
    v25 = (unint64_t *)&v28->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  abm::BasebandTracingTask::startTraceRunLoop_sync((abm::BasebandTracingTask *)a1);
  return a1;
}

void sub_1A3526374(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v6;
  NSObject *v7;

  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v3 + 16);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v3);
  if (*(char *)(v1 + 247) < 0)
    operator delete(*(void **)(v1 + 224));
  dispatch::callback<void({block_pointer})(ResetInfo)>::~callback(v3 - 40);
  std::list<dispatch::group_session>::~list(v2);
  std::__tree<std::__value_type<std::string const,std::shared_ptr<Trace>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::shared_ptr<Trace>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::shared_ptr<Trace>>>>::destroy(*(_QWORD *)(v1 + 160));
  v6 = *(NSObject **)(v1 + 144);
  if (v6)
  {
    dispatch_release(v6);
    v7 = *(NSObject **)(v1 + 136);
    if (!v7)
    {
LABEL_5:
      abm::HelperTask::~HelperTask((abm::HelperTask *)v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v7 = *(NSObject **)(v1 + 136);
    if (!v7)
      goto LABEL_5;
  }
  dispatch_release(v7);
  abm::HelperTask::~HelperTask((abm::HelperTask *)v1);
  _Unwind_Resume(a1);
}

void sub_1A3526410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, char a15)
{
  if (a14)
    std::__shared_weak_count::__release_weak(a14);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void abm::BasebandTracingTask::startTraceRunLoop_sync(abm::BasebandTracingTask *this)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD v4[5];
  dispatch_object_t object;
  uint8_t buf[16];

  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v2, OS_LOG_TYPE_DEFAULT, "#I Starting ABM Trace RunLoop", buf, 2u);
  }
  v3 = dispatch_group_create();
  dispatch_group_enter(v3);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 1174405120;
  v4[2] = ___ZN3abm19BasebandTracingTask22startTraceRunLoop_syncEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_24;
  v4[4] = this;
  object = v3;
  if (v3)
    dispatch_retain(v3);
  pthread_create((pthread_t *)this + 36, 0, (void *(__cdecl *)(void *))abm::BasebandTracingTask::sServerTraceRunLoopMain, v4);
  dispatch_group_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
  if (object)
    dispatch_release(object);
  if (v3)
    dispatch_release(v3);
}

void sub_1A3526514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object)
{
  NSObject *v14;

  if (object)
  {
    dispatch_release(object);
    if (!v14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v14)
  {
    goto LABEL_3;
  }
  dispatch_release(v14);
  _Unwind_Resume(exception_object);
}

uint64_t dispatch::callback<void({block_pointer})(ResetInfo)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t *std::list<dispatch::group_session>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  NSObject *v6;
  uint64_t *v7;
  NSObject *v8;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v7 = (uint64_t *)v3[1];
        v6 = v3[2];
        if (v6)
        {
          dispatch_group_leave(v6);
          v8 = v3[2];
          if (v8)
            dispatch_release(v8);
        }
        operator delete(v3);
        v3 = v7;
      }
      while (v7 != a1);
    }
  }
  return a1;
}

uint64_t abm::BasebandTracingTask::sServerTraceRunLoopMain(void (**this)(abm::BasebandTracingTask *), void *a2)
{
  CFRunLoopSourceRef v3;
  __CFRunLoopSource *v4;
  __CFRunLoop *Current;
  const __CFString *v6;
  __CFRunLoop *v7;
  unsigned __int8 v9;
  NSObject *v10;
  uint8_t v11[16];
  CFRunLoopSourceContext context;

  memset(&context, 0, sizeof(context));
  v3 = CFRunLoopSourceCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &context);
  if (v3)
  {
    v4 = v3;
    Current = CFRunLoopGetCurrent();
    v6 = (const __CFString *)*MEMORY[0x1E0C9B280];
    CFRunLoopAddSource(Current, v4, (CFRunLoopMode)*MEMORY[0x1E0C9B280]);
    this[2]((abm::BasebandTracingTask *)this);
    while ((CFRunLoopRunInMode(v6, 1.79769313e308, 1u) - 1) > 1)
      ;
    v7 = CFRunLoopGetCurrent();
    CFRunLoopRemoveSource(v7, v4, v6);
    CFRelease(v4);
    return 0;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED114D18 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
  }
  if (GetOsLogContext(void)::onceToken != -1)
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
    v10 = qword_1ED114D18;
    if (os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_DEFAULT))
      goto LABEL_9;
    return 0;
  }
  v10 = qword_1ED114D18;
  if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_DEFAULT))
    return 0;
LABEL_9:
  *(_WORD *)v11 = 0;
  _os_log_impl(&dword_1A343C000, v10, OS_LOG_TYPE_DEFAULT, "Failed to create dummySource for trace runloop", v11, 2u);
  return 0;
}

void ___ZN3abm19BasebandTracingTask22startTraceRunLoop_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *(_QWORD *)(a1 + 32);
  pthread_setname_np("ABM.Trace.RunLoop");
  *(_QWORD *)(v2 + 280) = CFRunLoopGetCurrent();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEFAULT, "#I ABM Trace RunLoop Started", v4, 2u);
  }
}

void abm::BasebandTracingTask::stopTraceRunLoop_sync(abm::BasebandTracingTask *this)
{
  NSObject *v2;
  int v3;
  NSObject *v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v5[0]) = 0;
    _os_log_impl(&dword_1A343C000, v2, OS_LOG_TYPE_DEFAULT, "#I Stopping ABM Trace RunLoop", (uint8_t *)v5, 2u);
  }
  usleep(0x7A120u);
  CFRunLoopStop(*((CFRunLoopRef *)this + 35));
  *((_QWORD *)this + 35) = 0;
  v3 = pthread_join(*((pthread_t *)this + 36), 0);
  *((_QWORD *)this + 36) = 0;
  v4 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl(&dword_1A343C000, v4, OS_LOG_TYPE_DEFAULT, "#I Stopped ABM Trace RunLoop: %d", (uint8_t *)v5, 8u);
  }
}

void abm::BasebandTracingTask::init_sync(abm::BasebandTracingTask *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  NSObject *v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  NSObject *v32;
  char *v33;
  unint64_t v34;
  void *v35;
  NSObject *v36;
  char *v37;
  unint64_t v38;
  void *v39;
  NSObject *v40;
  unint64_t v41;
  void *v42;
  NSObject *v43;
  unint64_t v44;
  void *v45;
  NSObject *v46;
  unint64_t v47;
  void *v48;
  NSObject *v49;
  unint64_t v50;
  void *v51;
  NSObject *v52;
  unint64_t v53;
  void *v54;
  NSObject *v55;
  unint64_t v56;
  void *v57;
  NSObject *v58;
  unint64_t v59;
  void *v60;
  NSObject *v61;
  char *v62;
  unint64_t v63;
  void *v64;
  NSObject *v65;
  unint64_t v66;
  void *v67;
  NSObject *v68;
  char *v69;
  unint64_t v70;
  void *v71;
  NSObject *v72;
  char *v73;
  unint64_t v74;
  void *v75;
  NSObject *v76;
  unint64_t v77;
  void *v78;
  NSObject *v79;
  unint64_t v80;
  void *v81;
  NSObject *v82;
  unint64_t v83;
  void *v84;
  NSObject *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  _QWORD v89[6];
  std::__shared_weak_count *v90;
  void *v91;
  dispatch_object_t v92;
  char v93[24];
  _QWORD v94[6];
  std::__shared_weak_count *v95;
  void *v96;
  dispatch_object_t v97;
  char v98[24];
  _QWORD v99[6];
  std::__shared_weak_count *v100;
  _QWORD v101[2];
  char v102[24];
  _QWORD v103[6];
  std::__shared_weak_count *v104;
  void *v105;
  dispatch_object_t object;
  char *v107;
  __int128 v108;
  _QWORD v109[6];
  std::__shared_weak_count *v110;
  _QWORD v111[2];
  char *v112;
  __int128 v113;
  _QWORD v114[6];
  std::__shared_weak_count *v115;
  _QWORD v116[2];
  char v117[24];
  _QWORD v118[6];
  std::__shared_weak_count *v119;
  _QWORD v120[2];
  char *v121;
  __int128 v122;
  _QWORD v123[6];
  std::__shared_weak_count *v124;
  _QWORD v125[2];
  char v126[24];
  _QWORD v127[6];
  std::__shared_weak_count *v128;
  _QWORD v129[2];
  char v130[24];
  _QWORD v131[6];
  std::__shared_weak_count *v132;
  _QWORD v133[2];
  char v134[24];
  _QWORD v135[6];
  std::__shared_weak_count *v136;
  _QWORD v137[2];
  char v138[24];
  _QWORD v139[6];
  std::__shared_weak_count *v140;
  _QWORD v141[2];
  char v142[24];
  _QWORD v143[6];
  std::__shared_weak_count *v144;
  _QWORD v145[2];
  char v146[24];
  _QWORD v147[6];
  std::__shared_weak_count *v148;
  _QWORD v149[2];
  char v150[24];
  _QWORD v151[6];
  std::__shared_weak_count *v152;
  _QWORD v153[2];
  char *v154;
  __int128 v155;
  _QWORD v156[6];
  std::__shared_weak_count *v157;
  _QWORD v158[2];
  char *v159;
  __int128 v160;
  _QWORD aBlock[6];
  std::__shared_weak_count *v162;
  _QWORD v163[2];
  char v164[24];
  uint64_t v165;
  std::__shared_weak_count *v166;
  NSObject *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  __int128 buf;
  void (*v171)(uint64_t);
  void *v172;
  uint64_t v173;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
    v168 = 0;
    v169 = 0;
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v10)
      goto LABEL_207;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    v168 = 0;
    v169 = 0;
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v10)
      goto LABEL_207;
  }
  v11 = std::__shared_weak_count::lock(v10);
  v169 = v11;
  if (!v11)
    goto LABEL_212;
  v168 = *((_QWORD *)this + 15);
  if (v168)
  {
    abm::BasebandTracingTask::createLogFolderPaths((abm::BasebandTracingTask *)v11);
    abm::BasebandTracingTask::removeDumpingFile_sync(this, -1);
    abm::BasebandTracingTask::addTraces(this);
    v12 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1A343C000, v12, OS_LOG_TYPE_DEFAULT, "#I Initializing", (uint8_t *)&buf, 2u);
    }
    v13 = *((_QWORD *)this + 11);
    v167 = v13;
    if (v13)
      dispatch_retain(v13);
    v14 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
    v165 = *((_QWORD *)this + 33);
    v166 = v14;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    ResetDetection::create(&v167, &v165, *((_QWORD *)this + 35), (uint64_t *)&buf);
    v17 = buf;
    buf = 0uLL;
    v18 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
    *(_OWORD *)((char *)this + 248) = v17;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
    if (*((_QWORD *)&buf + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v166;
    if (v166)
    {
      v25 = (unint64_t *)&v166->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v167)
      dispatch_release(v167);
    v27 = *((_QWORD *)this + 31);
    v28 = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
    *((_QWORD *)&buf + 1) = 0x40000000;
    v171 = ___ZN14ResetDetection5startEv_block_invoke;
    v172 = &__block_descriptor_tmp_3_0;
    v173 = v27;
    ctu::SharedSynchronizable<ResetDetection>::execute_wrapped((uint64_t *)(v27 + 72), (uint64_t)&buf);
    v29 = v168;
    v164[23] = 17;
    strcpy(v164, "CommandTraceStart");
    aBlock[0] = v28;
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_7_8;
    aBlock[4] = this;
    aBlock[5] = v3;
    v162 = v5;
    do
      v30 = __ldxr(p_shared_weak_owners);
    while (__stxr(v30 + 1, p_shared_weak_owners));
    v31 = _Block_copy(aBlock);
    v32 = *((_QWORD *)this + 11);
    if (v32)
      dispatch_retain(*((dispatch_object_t *)this + 11));
    v163[0] = v31;
    v163[1] = v32;
    abm::HelperServerInternal::setCommandHandler(v29, (uint64_t)v164, (uint64_t)v163);
    if (v32)
      dispatch_release(v32);
    if (v31)
      _Block_release(v31);
    v33 = (char *)operator new(0x20uLL);
    v159 = v33;
    v160 = xmmword_1A357F950;
    strcpy(v33, "CommandTraceEnterLowPower");
    v156[0] = v28;
    v156[1] = 1174405120;
    v156[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_8;
    v156[3] = &__block_descriptor_tmp_11_4;
    v156[4] = this;
    v156[5] = v3;
    v157 = v5;
    do
      v34 = __ldxr(p_shared_weak_owners);
    while (__stxr(v34 + 1, p_shared_weak_owners));
    v35 = _Block_copy(v156);
    v36 = *((_QWORD *)this + 11);
    if (v36)
      dispatch_retain(*((dispatch_object_t *)this + 11));
    v158[0] = v35;
    v158[1] = v36;
    abm::HelperServerInternal::setCommandHandler(v29, (uint64_t)&v159, (uint64_t)v158);
    if (v36)
      dispatch_release(v36);
    if (v35)
      _Block_release(v35);
    operator delete(v33);
    v37 = (char *)operator new(0x20uLL);
    v154 = v37;
    v155 = xmmword_1A357F050;
    strcpy(v37, "CommandTraceExitLowPower");
    v151[0] = v28;
    v151[1] = 1174405120;
    v151[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_12;
    v151[3] = &__block_descriptor_tmp_15_2;
    v151[4] = this;
    v151[5] = v3;
    v152 = v5;
    do
      v38 = __ldxr(p_shared_weak_owners);
    while (__stxr(v38 + 1, p_shared_weak_owners));
    v39 = _Block_copy(v151);
    v40 = *((_QWORD *)this + 11);
    if (v40)
      dispatch_retain(*((dispatch_object_t *)this + 11));
    v153[0] = v39;
    v153[1] = v40;
    abm::HelperServerInternal::setCommandHandler(v29, (uint64_t)&v154, (uint64_t)v153);
    if (v40)
      dispatch_release(v40);
    if (v39)
      _Block_release(v39);
    operator delete(v37);
    v150[23] = 17;
    strcpy(v150, "CommandTraceFlush");
    v147[0] = v28;
    v147[1] = 1174405120;
    v147[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_16;
    v147[3] = &__block_descriptor_tmp_19_3;
    v147[4] = this;
    v147[5] = v3;
    v148 = v5;
    do
      v41 = __ldxr(p_shared_weak_owners);
    while (__stxr(v41 + 1, p_shared_weak_owners));
    v42 = _Block_copy(v147);
    v43 = *((_QWORD *)this + 11);
    if (v43)
      dispatch_retain(*((dispatch_object_t *)this + 11));
    v149[0] = v42;
    v149[1] = v43;
    abm::HelperServerInternal::setCommandHandler(v29, (uint64_t)v150, (uint64_t)v149);
    if (v43)
      dispatch_release(v43);
    if (v42)
      _Block_release(v42);
    v146[23] = 17;
    strcpy(v146, "CommandTraceAbort");
    v143[0] = v28;
    v143[1] = 1174405120;
    v143[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_20;
    v143[3] = &__block_descriptor_tmp_25_0;
    v143[4] = this;
    v143[5] = v3;
    v144 = v5;
    do
      v44 = __ldxr(p_shared_weak_owners);
    while (__stxr(v44 + 1, p_shared_weak_owners));
    v45 = _Block_copy(v143);
    v46 = *((_QWORD *)this + 11);
    if (v46)
      dispatch_retain(*((dispatch_object_t *)this + 11));
    v145[0] = v45;
    v145[1] = v46;
    abm::HelperServerInternal::setCommandHandler(v29, (uint64_t)v146, (uint64_t)v145);
    if (v46)
      dispatch_release(v46);
    if (v45)
      _Block_release(v45);
    v142[23] = 18;
    strcpy(v142, "CommandTraceReinit");
    v139[0] = v28;
    v139[1] = 1174405120;
    v139[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_26;
    v139[3] = &__block_descriptor_tmp_32_2;
    v139[4] = this;
    v139[5] = v3;
    v140 = v5;
    do
      v47 = __ldxr(p_shared_weak_owners);
    while (__stxr(v47 + 1, p_shared_weak_owners));
    v48 = _Block_copy(v139);
    v49 = *((_QWORD *)this + 11);
    if (v49)
      dispatch_retain(*((dispatch_object_t *)this + 11));
    v141[0] = v48;
    v141[1] = v49;
    abm::HelperServerInternal::setCommandHandler(v29, (uint64_t)v142, (uint64_t)v141);
    if (v49)
      dispatch_release(v49);
    if (v48)
      _Block_release(v48);
    v138[23] = 20;
    strcpy(v138, "CommandTraceShutdown");
    v135[0] = v28;
    v135[1] = 1174405120;
    v135[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_33;
    v135[3] = &__block_descriptor_tmp_40_0;
    v135[4] = this;
    v135[5] = v3;
    v136 = v5;
    do
      v50 = __ldxr(p_shared_weak_owners);
    while (__stxr(v50 + 1, p_shared_weak_owners));
    v51 = _Block_copy(v135);
    v52 = *((_QWORD *)this + 11);
    if (v52)
      dispatch_retain(*((dispatch_object_t *)this + 11));
    v137[0] = v51;
    v137[1] = v52;
    abm::HelperServerInternal::setCommandHandler(v29, (uint64_t)v138, (uint64_t)v137);
    if (v52)
      dispatch_release(v52);
    if (v51)
      _Block_release(v51);
    v134[23] = 19;
    strcpy(v134, "CommandTracePrepare");
    v131[0] = v28;
    v131[1] = 1174405120;
    v131[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_41;
    v131[3] = &__block_descriptor_tmp_44_0;
    v131[4] = this;
    v131[5] = v3;
    v132 = v5;
    do
      v53 = __ldxr(p_shared_weak_owners);
    while (__stxr(v53 + 1, p_shared_weak_owners));
    v54 = _Block_copy(v131);
    v55 = *((_QWORD *)this + 11);
    if (v55)
      dispatch_retain(*((dispatch_object_t *)this + 11));
    v133[0] = v54;
    v133[1] = v55;
    abm::HelperServerInternal::setCommandHandler(v29, (uint64_t)v134, (uint64_t)v133);
    if (v55)
      dispatch_release(v55);
    if (v54)
      _Block_release(v54);
    v130[23] = 16;
    strcpy(v130, "CommandTraceStop");
    v127[0] = v28;
    v127[1] = 1174405120;
    v127[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_45;
    v127[3] = &__block_descriptor_tmp_48_1;
    v127[4] = this;
    v127[5] = v3;
    v128 = v5;
    do
      v56 = __ldxr(p_shared_weak_owners);
    while (__stxr(v56 + 1, p_shared_weak_owners));
    v57 = _Block_copy(v127);
    v58 = *((_QWORD *)this + 11);
    if (v58)
      dispatch_retain(*((dispatch_object_t *)this + 11));
    v129[0] = v57;
    v129[1] = v58;
    abm::HelperServerInternal::setCommandHandler(v29, (uint64_t)v130, (uint64_t)v129);
    if (v58)
      dispatch_release(v58);
    if (v57)
      _Block_release(v57);
    v126[23] = 18;
    strcpy(v126, "CommandCollectLogs");
    v123[0] = v28;
    v123[1] = 1174405120;
    v123[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_49;
    v123[3] = &__block_descriptor_tmp_56_3;
    v123[4] = this;
    v123[5] = v3;
    v124 = v5;
    do
      v59 = __ldxr(p_shared_weak_owners);
    while (__stxr(v59 + 1, p_shared_weak_owners));
    v60 = _Block_copy(v123);
    v61 = *((_QWORD *)this + 11);
    if (v61)
      dispatch_retain(*((dispatch_object_t *)this + 11));
    v125[0] = v60;
    v125[1] = v61;
    abm::HelperServerInternal::setCommandHandler(v29, (uint64_t)v126, (uint64_t)v125);
    if (v61)
      dispatch_release(v61);
    if (v60)
      _Block_release(v60);
    v62 = (char *)operator new(0x20uLL);
    v121 = v62;
    v122 = xmmword_1A3580300;
    strcpy(v62, "CommandCollectBasebandLogs");
    v118[0] = v28;
    v118[1] = 1174405120;
    v118[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_57;
    v118[3] = &__block_descriptor_tmp_60_1;
    v118[4] = this;
    v118[5] = v3;
    v119 = v5;
    do
      v63 = __ldxr(p_shared_weak_owners);
    while (__stxr(v63 + 1, p_shared_weak_owners));
    v64 = _Block_copy(v118);
    v65 = *((_QWORD *)this + 11);
    if (v65)
      dispatch_retain(*((dispatch_object_t *)this + 11));
    v120[0] = v64;
    v120[1] = v65;
    abm::HelperServerInternal::setCommandHandler(v29, (uint64_t)&v121, (uint64_t)v120);
    if (v65)
      dispatch_release(v65);
    if (v64)
      _Block_release(v64);
    operator delete(v62);
    v117[23] = 16;
    strcpy(v117, "CommandDumpState");
    v114[0] = v28;
    v114[1] = 1174405120;
    v114[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_61;
    v114[3] = &__block_descriptor_tmp_68_1;
    v114[4] = this;
    v114[5] = v3;
    v115 = v5;
    do
      v66 = __ldxr(p_shared_weak_owners);
    while (__stxr(v66 + 1, p_shared_weak_owners));
    v67 = _Block_copy(v114);
    v68 = *((_QWORD *)this + 11);
    if (v68)
      dispatch_retain(*((dispatch_object_t *)this + 11));
    v116[0] = v67;
    v116[1] = v68;
    abm::HelperServerInternal::setCommandHandler(v29, (uint64_t)v117, (uint64_t)v116);
    if (v68)
      dispatch_release(v68);
    if (v67)
      _Block_release(v67);
    v69 = (char *)operator new(0x20uLL);
    v112 = v69;
    v113 = xmmword_1A357F950;
    strcpy(v69, "CommandGetLastCrashReason");
    v109[0] = v28;
    v109[1] = 1174405120;
    v109[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_69;
    v109[3] = &__block_descriptor_tmp_72;
    v109[4] = this;
    v109[5] = v3;
    v110 = v5;
    do
      v70 = __ldxr(p_shared_weak_owners);
    while (__stxr(v70 + 1, p_shared_weak_owners));
    v71 = _Block_copy(v109);
    v72 = *((_QWORD *)this + 11);
    if (v72)
      dispatch_retain(*((dispatch_object_t *)this + 11));
    v111[0] = v71;
    v111[1] = v72;
    abm::HelperServerInternal::setCommandHandler(v29, (uint64_t)&v112, (uint64_t)v111);
    if (v72)
      dispatch_release(v72);
    if (v71)
      _Block_release(v71);
    operator delete(v69);
    v73 = (char *)operator new(0x20uLL);
    v107 = v73;
    v108 = xmmword_1A357F950;
    strcpy(v73, "CommandSetLastCrashReason");
    v103[0] = v28;
    v103[1] = 1174405120;
    v103[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_73;
    v103[3] = &__block_descriptor_tmp_74_0;
    v103[4] = this;
    v103[5] = v3;
    v104 = v5;
    do
      v74 = __ldxr(p_shared_weak_owners);
    while (__stxr(v74 + 1, p_shared_weak_owners));
    v75 = _Block_copy(v103);
    v76 = *((_QWORD *)this + 11);
    if (v76)
      dispatch_retain(*((dispatch_object_t *)this + 11));
    v105 = v75;
    object = v76;
    abm::HelperServerInternal::setCommandHandler(v29, (uint64_t)&v107, (uint64_t)&v105);
    if (object)
      dispatch_release(object);
    if (v105)
      _Block_release(v105);
    operator delete(v73);
    v102[23] = 18;
    strcpy(v102, "CommandSetProperty");
    v99[0] = v28;
    v99[1] = 1174405120;
    v99[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_75;
    v99[3] = &__block_descriptor_tmp_80;
    v99[4] = this;
    v99[5] = v3;
    v100 = v5;
    do
      v77 = __ldxr(p_shared_weak_owners);
    while (__stxr(v77 + 1, p_shared_weak_owners));
    v78 = _Block_copy(v99);
    v79 = *((_QWORD *)this + 11);
    if (v79)
      dispatch_retain(*((dispatch_object_t *)this + 11));
    v101[0] = v78;
    v101[1] = v79;
    abm::HelperServerInternal::setCommandHandler(v29, (uint64_t)v102, (uint64_t)v101);
    if (v79)
      dispatch_release(v79);
    if (v78)
      _Block_release(v78);
    v98[23] = 18;
    strcpy(v98, "CommandGetProperty");
    v94[0] = v28;
    v94[1] = 1174405120;
    v94[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_81;
    v94[3] = &__block_descriptor_tmp_82;
    v94[4] = this;
    v94[5] = v3;
    v95 = v5;
    do
      v80 = __ldxr(p_shared_weak_owners);
    while (__stxr(v80 + 1, p_shared_weak_owners));
    v81 = _Block_copy(v94);
    v82 = *((_QWORD *)this + 11);
    if (v82)
      dispatch_retain(*((dispatch_object_t *)this + 11));
    v96 = v81;
    v97 = v82;
    abm::HelperServerInternal::setCommandHandler(v29, (uint64_t)v98, (uint64_t)&v96);
    if (v97)
      dispatch_release(v97);
    if (v96)
      _Block_release(v96);
    v93[23] = 21;
    strcpy(v93, "CommandCheckReachable");
    v89[0] = v28;
    v89[1] = 1174405120;
    v89[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_83;
    v89[3] = &__block_descriptor_tmp_84;
    v89[4] = this;
    v89[5] = v3;
    v90 = v5;
    do
      v83 = __ldxr(p_shared_weak_owners);
    while (__stxr(v83 + 1, p_shared_weak_owners));
    v84 = _Block_copy(v89);
    v85 = *((_QWORD *)this + 11);
    if (v85)
      dispatch_retain(v85);
    v91 = v84;
    v92 = v85;
    abm::HelperServerInternal::setCommandHandler(v29, (uint64_t)v93, (uint64_t)&v91);
    if (v92)
      dispatch_release(v92);
    if (v91)
      _Block_release(v91);
    if (v90)
      std::__shared_weak_count::__release_weak(v90);
    if (v95)
      std::__shared_weak_count::__release_weak(v95);
    if (v100)
      std::__shared_weak_count::__release_weak(v100);
    if (v104)
      std::__shared_weak_count::__release_weak(v104);
    if (v110)
      std::__shared_weak_count::__release_weak(v110);
    if (v115)
      std::__shared_weak_count::__release_weak(v115);
    if (v119)
      std::__shared_weak_count::__release_weak(v119);
    if (v124)
      std::__shared_weak_count::__release_weak(v124);
    if (v128)
      std::__shared_weak_count::__release_weak(v128);
    if (v132)
      std::__shared_weak_count::__release_weak(v132);
    if (v136)
      std::__shared_weak_count::__release_weak(v136);
    if (v140)
      std::__shared_weak_count::__release_weak(v140);
    if (v144)
      std::__shared_weak_count::__release_weak(v144);
    if (v148)
      std::__shared_weak_count::__release_weak(v148);
    if (v152)
      std::__shared_weak_count::__release_weak(v152);
    if (v157)
      std::__shared_weak_count::__release_weak(v157);
    if (v162)
      std::__shared_weak_count::__release_weak(v162);
  }
LABEL_207:
  v86 = v169;
  if (v169)
  {
    v87 = (unint64_t *)&v169->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
LABEL_212:
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1A35278C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__shared_weak_count *a66;
  std::__shared_weak_count *v66;
  uint64_t v67;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;

  dispatch::callback<void({block_pointer})(TelephonyXPC::ServerClientState,xpc::dict,dispatch::callback<void({block_pointer})(int,xpc::dict)>)>::~callback((uint64_t)&a19);
  if (a18)
  {
    std::__shared_weak_count::__release_weak(a18);
    v69 = a30;
    if (!a30)
    {
LABEL_3:
      v70 = a42;
      if (!a42)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  else
  {
    v69 = a30;
    if (!a30)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v69);
  v70 = a42;
  if (!a42)
  {
LABEL_4:
    v71 = a54;
    if (!a54)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_21:
  std::__shared_weak_count::__release_weak(v70);
  v71 = a54;
  if (!a54)
  {
LABEL_5:
    v72 = a66;
    if (!a66)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  std::__shared_weak_count::__release_weak(v71);
  v72 = a66;
  if (!a66)
  {
LABEL_6:
    v73 = (std::__shared_weak_count *)STACK[0x228];
    if (!STACK[0x228])
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  std::__shared_weak_count::__release_weak(v72);
  v73 = (std::__shared_weak_count *)STACK[0x228];
  if (!STACK[0x228])
  {
LABEL_7:
    v74 = (std::__shared_weak_count *)STACK[0x288];
    if (!STACK[0x288])
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  std::__shared_weak_count::__release_weak(v73);
  v74 = (std::__shared_weak_count *)STACK[0x288];
  if (!STACK[0x288])
  {
LABEL_8:
    v75 = (std::__shared_weak_count *)STACK[0x2E8];
    if (!STACK[0x2E8])
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  std::__shared_weak_count::__release_weak(v74);
  v75 = (std::__shared_weak_count *)STACK[0x2E8];
  if (!STACK[0x2E8])
  {
LABEL_9:
    v76 = (std::__shared_weak_count *)STACK[0x348];
    if (!STACK[0x348])
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  std::__shared_weak_count::__release_weak(v75);
  v76 = (std::__shared_weak_count *)STACK[0x348];
  if (!STACK[0x348])
  {
LABEL_10:
    v77 = (std::__shared_weak_count *)STACK[0x3A8];
    if (!STACK[0x3A8])
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  std::__shared_weak_count::__release_weak(v76);
  v77 = (std::__shared_weak_count *)STACK[0x3A8];
  if (!STACK[0x3A8])
  {
LABEL_11:
    v78 = (std::__shared_weak_count *)STACK[0x408];
    if (!STACK[0x408])
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  std::__shared_weak_count::__release_weak(v77);
  v78 = (std::__shared_weak_count *)STACK[0x408];
  if (!STACK[0x408])
  {
LABEL_12:
    v79 = (std::__shared_weak_count *)STACK[0x468];
    if (!STACK[0x468])
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  std::__shared_weak_count::__release_weak(v78);
  v79 = (std::__shared_weak_count *)STACK[0x468];
  if (!STACK[0x468])
  {
LABEL_13:
    v80 = (std::__shared_weak_count *)STACK[0x4C8];
    if (!STACK[0x4C8])
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  std::__shared_weak_count::__release_weak(v79);
  v80 = (std::__shared_weak_count *)STACK[0x4C8];
  if (!STACK[0x4C8])
  {
LABEL_14:
    v81 = (std::__shared_weak_count *)STACK[0x528];
    if (!STACK[0x528])
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  std::__shared_weak_count::__release_weak(v80);
  v81 = (std::__shared_weak_count *)STACK[0x528];
  if (!STACK[0x528])
  {
LABEL_15:
    v82 = (std::__shared_weak_count *)STACK[0x588];
    if (!STACK[0x588])
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  std::__shared_weak_count::__release_weak(v81);
  v82 = (std::__shared_weak_count *)STACK[0x588];
  if (!STACK[0x588])
  {
LABEL_16:
    v83 = (std::__shared_weak_count *)STACK[0x5E8];
    if (!STACK[0x5E8])
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  std::__shared_weak_count::__release_weak(v82);
  v83 = (std::__shared_weak_count *)STACK[0x5E8];
  if (!STACK[0x5E8])
  {
LABEL_17:
    v84 = (std::__shared_weak_count *)STACK[0x648];
    if (!STACK[0x648])
    {
LABEL_36:
      std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v67 - 176);
      std::__shared_weak_count::__release_weak(v66);
      _Unwind_Resume(a1);
    }
LABEL_35:
    std::__shared_weak_count::__release_weak(v84);
    std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v67 - 176);
    std::__shared_weak_count::__release_weak(v66);
    _Unwind_Resume(a1);
  }
LABEL_34:
  std::__shared_weak_count::__release_weak(v83);
  v84 = (std::__shared_weak_count *)STACK[0x648];
  if (!STACK[0x648])
    goto LABEL_36;
  goto LABEL_35;
}

void abm::BasebandTracingTask::createLogFolderPaths(abm::BasebandTracingTask *this)
{
  char *v1;
  size_t v2;
  void *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *__dst[2];
  unint64_t v8;

  v1 = abm::trace::kSnapshotFolder[0];
  v2 = strlen(abm::trace::kSnapshotFolder[0]);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v3 = (void *)v2;
  if (v2 >= 0x17)
  {
    v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v5 = v2 | 7;
    v6 = v5 + 1;
    v4 = (void **)operator new(v5 + 1);
    __dst[1] = v3;
    v8 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_8;
  }
  HIBYTE(v8) = v2;
  v4 = __dst;
  if (v2)
LABEL_8:
    memmove(v4, v1, (size_t)v3);
  *((_BYTE *)v3 + (_QWORD)v4) = 0;
  support::fs::createDir((const char *)__dst, 0x1EDu, 1);
  if (SHIBYTE(v8) < 0)
    operator delete(__dst[0]);
}

void sub_1A3527DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void abm::BasebandTracingTask::removeDumpingFile_sync(abm::BasebandTracingTask *this, int a2)
{
  char *v4;
  size_t v5;
  std::error_code *v6;
  size_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  const std::__fs::filesystem::path *v13;
  NSObject *v14;
  _QWORD v15[2];
  int64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x80000000) == 0)
  {
    while (close(a2) && *__error() == 4)
      ;
  }
  v4 = abm::trace::kDumpIndicationFilePath;
  v5 = strlen(abm::trace::kDumpIndicationFilePath);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    v15[1] = v7;
    v16 = v10 | 0x8000000000000000;
    v15[0] = v8;
    goto LABEL_11;
  }
  HIBYTE(v16) = v5;
  v8 = v15;
  if (v5)
LABEL_11:
    memmove(v8, v4, v7);
  *((_BYTE *)v8 + v7) = 0;
  v11 = SHIBYTE(v16);
  v12 = (void *)v15[0];
  if (v16 >= 0)
    v13 = (const std::__fs::filesystem::path *)v15;
  else
    v13 = (const std::__fs::filesystem::path *)v15[0];
  if (remove(v13, v6))
    unlink((const char *)v13);
  if ((v11 & 0x80000000) == 0)
  {
    v14 = *((_QWORD *)this + 5);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      return;
LABEL_21:
    LODWORD(v15[0]) = 67109120;
    HIDWORD(v15[0]) = a2;
    _os_log_impl(&dword_1A343C000, v14, OS_LOG_TYPE_DEFAULT, "#I Removed dumping file. FD=%d", (uint8_t *)v15, 8u);
    return;
  }
  operator delete(v12);
  v14 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    goto LABEL_21;
}

uint64_t abm::BasebandTracingTask::addTraces(abm::BasebandTracingTask *this)
{
  abm::BasebandTracingTask *v1;
  char v2;
  uint64_t v3;
  __int128 v4;
  void **v5;
  int isSupported;
  int v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  NSObject *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t **v26;
  std::string *v27;
  std::string::size_type size;
  _QWORD *v29;
  const void *v30;
  const void *v31;
  int v32;
  const void *v33;
  size_t v34;
  size_t v35;
  int v36;
  int v37;
  _QWORD *v38;
  std::string *v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  NSObject *v48;
  std::string *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v55;
  dispatch_object_t object;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t v59;
  unint64_t v60;
  std::string v61;
  std::string v62;
  uint8_t buf[4];
  std::string *v64;
  void *v65[2];
  uint64_t v66;
  _BYTE v67[40];
  uint64_t v68;
  _BYTE v69[24];
  char __p[14];
  __int16 v71;
  uint64_t v72;
  uint64_t v73;

  v1 = this;
  v2 = 0;
  v3 = 0;
  v73 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v65 = v4;
  v66 = 0x3AAAAAAAAAAAAAALL;
  *(_OWORD *)&v67[8] = v4;
  v72 = 0xDAAAAAAAAAAAAAALL;
  *(_OWORD *)&v69[8] = v4;
  v71 = -21846;
  *(_QWORD *)&v67[32] = 0xAAAAAAAAAAAAAAAALL;
  v68 = 0x8AAAAAAAAAAAAAALL;
  LOWORD(v65[0]) = *(_WORD *)"IPC";
  WORD1(v65[0]) = str_41[2];
  strcpy(&v67[23], "\tCoreDump");
  strcpy(v67, "KernelPCI");
  v69[23] = 11;
  strcpy(v69, "BasebandIPC");
  v55 = (_QWORD *)((char *)this + 160);
  strcpy(__p, "BasebandTrace");
  do
  {
    while (1)
    {
      v5 = &v65[3 * v3];
      memset(&v62, 170, sizeof(v62));
      if (*((char *)v5 + 23) < 0)
        std::string::__init_copy_ctor_external(&v62, (const std::string::value_type *)*v5, (std::string::size_type)v5[1]);
      else
        v62 = *(std::string *)v5;
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v61, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
      else
        v61 = v62;
      isSupported = abm::trace::isSupported((uint64_t)&v61);
      v7 = isSupported;
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v61.__r_.__value_.__l.__data_);
        if (!v7)
          goto LABEL_3;
LABEL_15:
        v8 = (std::__shared_weak_count *)*((_QWORD *)v1 + 10);
        if (!v8 || (v9 = *((_QWORD *)v1 + 9), (v10 = std::__shared_weak_count::lock(v8)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v11 = v10;
        p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (v15)
        {
          v16 = std::__shared_weak_count::lock(v10);
          if (v16)
          {
LABEL_23:
            v17 = (unint64_t *)&v16->__shared_weak_owners_;
            do
              v18 = __ldxr(v17);
            while (__stxr(v18 + 1, v17));
            v19 = (unint64_t *)&v16->__shared_owners_;
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
            v59 = 0xAAAAAAAAAAAAAAAALL;
            v60 = 0xAAAAAAAAAAAAAAAALL;
            v57 = v9;
            v58 = v16;
            do
              v21 = __ldxr(v17);
            while (__stxr(v21 + 1, v17));
            v22 = *((_QWORD *)v1 + 14);
            object = v22;
            if (v22)
              goto LABEL_32;
            goto LABEL_33;
          }
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v11);
          v16 = std::__shared_weak_count::lock(v11);
          if (v16)
            goto LABEL_23;
        }
        v59 = 0xAAAAAAAAAAAAAAAALL;
        v60 = 0xAAAAAAAAAAAAAAAALL;
        v57 = 0;
        v58 = 0;
        v22 = *((_QWORD *)v1 + 14);
        object = v22;
        if (v22)
LABEL_32:
          dispatch_retain(v22);
LABEL_33:
        Trace::create((char *)&v62, &v57, &object, &v59);
        if (object)
          dispatch_release(object);
        if (v58)
          std::__shared_weak_count::__release_weak(v58);
        v23 = v59;
        if (!v59)
        {
LABEL_89:
          v50 = (std::__shared_weak_count *)v60;
          if (!v60)
            goto LABEL_93;
          v51 = (unint64_t *)(v60 + 8);
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
            if (!v16)
              goto LABEL_2;
          }
          else
          {
LABEL_93:
            if (!v16)
            {
LABEL_2:
              std::__shared_weak_count::__release_weak(v11);
              goto LABEL_3;
            }
          }
          std::__shared_weak_count::__release_weak(v16);
          goto LABEL_2;
        }
        v24 = v55;
        v25 = (_QWORD *)*v55;
        v26 = (uint64_t **)v55;
        if (*v55)
        {
          if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = &v62;
          else
            v27 = (std::string *)v62.__r_.__value_.__r.__words[0];
          if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v62.__r_.__value_.__r.__words[2]);
          else
            size = v62.__r_.__value_.__l.__size_;
          while (1)
          {
            v24 = v25;
            v31 = (const void *)v25[4];
            v29 = v25 + 4;
            v30 = v31;
            v32 = *((char *)v29 + 23);
            if (v32 >= 0)
              v33 = v29;
            else
              v33 = v30;
            if (v32 >= 0)
              v34 = *((unsigned __int8 *)v29 + 23);
            else
              v34 = v29[1];
            if (v34 >= size)
              v35 = size;
            else
              v35 = v34;
            v36 = memcmp(v27, v33, v35);
            if (v36)
            {
              if (v36 < 0)
                goto LABEL_45;
LABEL_59:
              v37 = memcmp(v33, v27, v35);
              if (v37)
              {
                if ((v37 & 0x80000000) == 0)
                  goto LABEL_77;
              }
              else if (v34 >= size)
              {
LABEL_77:
                v38 = v24;
                v1 = this;
                v42 = v60;
                if (v60)
                  goto LABEL_78;
                goto LABEL_80;
              }
              v25 = (_QWORD *)v24[1];
              if (!v25)
              {
                v26 = (uint64_t **)(v24 + 1);
                break;
              }
            }
            else
            {
              if (size >= v34)
                goto LABEL_59;
LABEL_45:
              v25 = (_QWORD *)*v24;
              v26 = (uint64_t **)v24;
              if (!*v24)
                break;
            }
          }
        }
        v38 = operator new(0x48uLL);
        v39 = (std::string *)(v38 + 4);
        v1 = this;
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v39, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v39->__r_.__value_.__l.__data_ = *(_OWORD *)&v62.__r_.__value_.__l.__data_;
          v38[6] = *((_QWORD *)&v62.__r_.__value_.__l + 2);
        }
        v38[7] = 0;
        v38[8] = 0;
        *v38 = 0;
        v38[1] = 0;
        v38[2] = v24;
        *v26 = v38;
        v40 = **((_QWORD **)this + 19);
        v41 = v38;
        if (v40)
        {
          *((_QWORD *)this + 19) = v40;
          v41 = *v26;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 20), v41);
        ++*((_QWORD *)this + 21);
        v23 = v59;
        v42 = v60;
        if (v60)
        {
LABEL_78:
          v43 = (unint64_t *)(v42 + 8);
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 1, v43));
        }
LABEL_80:
        v45 = (std::__shared_weak_count *)v38[8];
        v38[7] = v23;
        v38[8] = v42;
        if (!v45)
          goto LABEL_84;
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
          v48 = *((_QWORD *)v1 + 5);
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
            goto LABEL_85;
        }
        else
        {
LABEL_84:
          v48 = *((_QWORD *)v1 + 5);
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
          {
LABEL_85:
            v49 = &v62;
            if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v49 = (std::string *)v62.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136315138;
            v64 = v49;
            _os_log_impl(&dword_1A343C000, v48, OS_LOG_TYPE_DEFAULT, "#I Adding trace '%s'", buf, 0xCu);
          }
        }
        v2 = 1;
        goto LABEL_89;
      }
      if (isSupported)
        goto LABEL_15;
LABEL_3:
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        break;
      if (++v3 == 5)
        goto LABEL_99;
    }
    operator delete(v62.__r_.__value_.__l.__data_);
    ++v3;
  }
  while (v3 != 5);
LABEL_99:
  if (SHIBYTE(v72) < 0)
  {
    operator delete(*(void **)__p);
    if ((v69[23] & 0x80000000) != 0)
      goto LABEL_106;
LABEL_101:
    if ((SHIBYTE(v68) & 0x80000000) == 0)
      goto LABEL_102;
LABEL_107:
    operator delete(*(void **)&v67[24]);
    if ((v67[23] & 0x80000000) != 0)
      goto LABEL_108;
LABEL_103:
    if (SHIBYTE(v66) < 0)
LABEL_109:
      operator delete(v65[0]);
  }
  else
  {
    if ((v69[23] & 0x80000000) == 0)
      goto LABEL_101;
LABEL_106:
    operator delete(*(void **)v69);
    if (SHIBYTE(v68) < 0)
      goto LABEL_107;
LABEL_102:
    if ((v67[23] & 0x80000000) == 0)
      goto LABEL_103;
LABEL_108:
    operator delete(*(void **)v67);
    if (SHIBYTE(v66) < 0)
      goto LABEL_109;
  }
  return v2 & 1;
}

void sub_1A3528608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  void *v63;

  operator delete(v63);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (v62)
    std::__shared_weak_count::__release_weak(v62);
  std::__shared_weak_count::__release_weak(v61);
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a61 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a55 & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_12;
    }
  }
  else if ((a61 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a56);
  if ((a55 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a49 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a50);
  if ((a49 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a43 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a44);
  if ((a43 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a37 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a38);
  if ((a37 & 0x80000000) == 0)
LABEL_9:
    _Unwind_Resume(a1);
LABEL_15:
  operator delete(a32);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke(_QWORD *a1, uint64_t a2, void **a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *v19;
  _QWORD aBlock[5];
  xpc_object_t object;
  void *v22;
  void *v23;
  NSObject *v24;
  NSObject *v25;
  uint8_t buf[16];

  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v8 = a1[4];
    v9 = std::__shared_weak_count::lock(v5);
    if (v9)
    {
      v10 = v9;
      if (!a1[5])
      {
LABEL_25:
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        return;
      }
      v11 = *(NSObject **)(v8 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A343C000, v11, OS_LOG_TYPE_DEFAULT, "#I Request to start", buf, 2u);
      }
      v12 = *(NSObject **)(v8 + 112);
      v25 = v12;
      if (v12)
      {
        dispatch_retain(v12);
        dispatch_group_enter(v12);
      }
      if (*(_QWORD *)a4)
      {
        v13 = _Block_copy(*(const void **)a4);
        v14 = *(NSObject **)(a4 + 8);
        v23 = v13;
        v24 = v14;
        if (!v14)
        {
LABEL_11:
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 1174405120;
          aBlock[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_4;
          aBlock[3] = &__block_descriptor_tmp_5_4;
          v15 = *a3;
          aBlock[4] = v8;
          object = v15;
          if (v15)
            xpc_retain(v15);
          else
            object = xpc_null_create();
          v16 = _Block_copy(aBlock);
          v22 = v16;
          v19 = 0;
          abm::BasebandTracingTask::performWork(v8, &v25, 4, (uint64_t)&v23, &v22, &v19);
          if (v16)
            _Block_release(v16);
          if (v14)
            dispatch_release(v14);
          if (v13)
            _Block_release(v13);
          if (v12)
          {
            dispatch_group_leave(v12);
            dispatch_release(v12);
          }
          xpc_release(object);
          object = 0;
          goto LABEL_25;
        }
      }
      else
      {
        v13 = 0;
        v14 = *(NSObject **)(a4 + 8);
        v23 = 0;
        v24 = v14;
        if (!v14)
          goto LABEL_11;
      }
      dispatch_retain(v14);
      goto LABEL_11;
    }
  }
}

void abm::BasebandTracingTask::performWork(uint64_t a1, NSObject **a2, int a3, uint64_t a4, void **a5, void **a6)
{
  NSObject *v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  _QWORD block[5];
  dispatch_group_t group;
  void *v17;
  dispatch_object_t object;
  void *v19;
  void *aBlock;
  int v21;

  v9 = *(NSObject **)(a1 + 144);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZN3abm19BasebandTracingTask11performWorkEN8dispatch13group_sessionENS0_5StateENS1_8callbackIU13block_pointerFviN3xpc4dictEEEENS1_5blockIU13block_pointerFvvEEESD__block_invoke;
  block[3] = &__block_descriptor_tmp_115;
  v21 = a3;
  v10 = *a2;
  block[4] = a1;
  group = v10;
  if (v10)
  {
    dispatch_retain(v10);
    dispatch_group_enter(v10);
  }
  v11 = *(void **)a4;
  if (*(_QWORD *)a4)
    v11 = _Block_copy(v11);
  v12 = *(NSObject **)(a4 + 8);
  v17 = v11;
  object = v12;
  if (v12)
    dispatch_retain(v12);
  v13 = *a5;
  if (*a5)
    v13 = _Block_copy(v13);
  v19 = v13;
  v14 = *a6;
  if (*a6)
    v14 = _Block_copy(v14);
  aBlock = v14;
  dispatch_async(v9, block);
  if (aBlock)
    _Block_release(aBlock);
  if (v19)
    _Block_release(v19);
  if (object)
    dispatch_release(object);
  if (v17)
    _Block_release(v17);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  const void *v5;
  CFTypeID v6;
  xpc_object_t object;
  CFTypeRef cf;
  const void *v9;
  NSObject *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 136);
  v10 = v3;
  if (v3)
    dispatch_retain(v3);
  v4 = *(void **)(a1 + 40);
  object = v4;
  if (v4)
    xpc_retain(v4);
  else
    object = xpc_null_create();
  xpc::bridge();
  v5 = cf;
  if (cf && (v6 = CFGetTypeID(cf), v6 == CFDictionaryGetTypeID()))
  {
    v9 = cf;
    CFRetain(cf);
  }
  else
  {
    v5 = 0;
    v9 = 0;
  }
  abm::BasebandTracingTask::startInternal(v2, &v10, &v9);
  if (v5)
    CFRelease(v5);
  if (cf)
    CFRelease(cf);
  xpc_release(object);
  if (v3)
    dispatch_release(v3);
}

void sub_1A3528B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, const void *a10, const void *a11)
{
  NSObject *v11;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a11);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef(&a10);
  xpc_release(object);
  if (v11)
    dispatch_release(v11);
  _Unwind_Resume(a1);
}

void abm::BasebandTracingTask::startInternal(uint64_t a1, NSObject **a2, const void **a3)
{
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  const void *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  _QWORD v14[4];
  dispatch_object_t object;
  const void *v16;
  uint8_t buf[8];
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  void *v20;
  _QWORD *v21;

  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v6, OS_LOG_TYPE_DEFAULT, "#I Starting all traces", buf, 2u);
  }
  v7 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 1174405120;
  v14[2] = ___ZN3abm19BasebandTracingTask13startInternalEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v14[3] = &__block_descriptor_tmp_121;
  v8 = *a2;
  object = v8;
  if (v8)
    dispatch_retain(v8);
  v9 = *a3;
  v16 = v9;
  if (v9)
    CFRetain(v9);
  v10 = *(_QWORD **)(a1 + 152);
  *(_QWORD *)buf = v7;
  v18 = 0x40000000;
  v19 = ___ZN3abm19BasebandTracingTask14doForAllTracesIU13block_pointerFvNSt3__110shared_ptrI5TraceEEEEEvT__block_invoke;
  v20 = &unk_1E4A0EA20;
  v21 = v14;
  if (v10 != (_QWORD *)(a1 + 160))
  {
    do
    {
      v19((uint64_t)buf, (uint64_t)(v10 + 4));
      v11 = (_QWORD *)v10[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v10[2];
          v13 = *v12 == (_QWORD)v10;
          v10 = v12;
        }
        while (!v13);
      }
      v10 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 160));
    v9 = v16;
  }
  if (v9)
    CFRelease(v9);
  if (object)
    dispatch_release(object);
}

void sub_1A3528D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, dispatch_object_t object)
{
  const void **v13;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(v13);
  if (object)
    dispatch_release(object);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_40c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  void *v3;
  xpc_object_t result;

  v3 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (v3)
    return xpc_retain(v3);
  result = xpc_null_create();
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v17;
  _QWORD aBlock[5];
  void *v19;
  void *v20;
  NSObject *v21;
  NSObject *v22;
  uint8_t buf[16];

  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v5);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_19:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v10 = *(NSObject **)(v7 + 40);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A343C000, v10, OS_LOG_TYPE_DEFAULT, "#I Request to sleep", buf, 2u);
      }
      v11 = *(NSObject **)(v7 + 112);
      v22 = v11;
      if (v11)
      {
        dispatch_retain(v11);
        dispatch_group_enter(v11);
      }
      if (*(_QWORD *)a4)
      {
        v12 = _Block_copy(*(const void **)a4);
        v13 = *(NSObject **)(a4 + 8);
        v20 = v12;
        v21 = v13;
        if (!v13)
        {
LABEL_11:
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 0x40000000;
          aBlock[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_9;
          aBlock[3] = &__block_descriptor_tmp_10_5;
          aBlock[4] = v7;
          v14 = _Block_copy(aBlock);
          v19 = v14;
          v17 = 0;
          abm::BasebandTracingTask::performWork(v7, &v22, 7, (uint64_t)&v20, &v19, &v17);
          if (v14)
            _Block_release(v14);
          if (v13)
            dispatch_release(v13);
          if (v12)
            _Block_release(v12);
          if (v11)
          {
            dispatch_group_leave(v11);
            dispatch_release(v11);
          }
          goto LABEL_19;
        }
      }
      else
      {
        v12 = 0;
        v13 = *(NSObject **)(a4 + 8);
        v20 = 0;
        v21 = v13;
        if (!v13)
          goto LABEL_11;
      }
      dispatch_retain(v13);
      goto LABEL_11;
    }
  }
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_9(uint64_t a1)
{
  abm::BasebandTracingTask *v1;
  char *v2;
  group var18;

  v1 = *(abm::BasebandTracingTask **)(a1 + 32);
  v2 = (char *)*((_QWORD *)v1 + 17);
  var18.gr_name = v2;
  if (v2)
    dispatch_retain((dispatch_object_t)v2);
  abm::BasebandTracingTask::enterLowPowerInternal(v1, &var18);
  if (v2)
    dispatch_release((dispatch_object_t)v2);
}

void sub_1A3529008(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
    dispatch_release(v1);
  _Unwind_Resume(exception_object);
}

void abm::BasebandTracingTask::enterLowPowerInternal(abm::BasebandTracingTask *this, group *a2)
{
  NSObject *v4;
  uint64_t v5;
  char *gr_name;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  BOOL v11;
  _QWORD v12[4];
  char *v13;
  uint8_t buf[8];
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  void *v17;
  _QWORD *v18;

  v4 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v4, OS_LOG_TYPE_DEFAULT, "#I Enter Low Power", buf, 2u);
  }
  v5 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 1174405120;
  v12[2] = ___ZN3abm19BasebandTracingTask21enterLowPowerInternalEN8dispatch5groupE_block_invoke;
  v12[3] = &__block_descriptor_tmp_116;
  gr_name = a2->gr_name;
  v13 = gr_name;
  if (gr_name)
    dispatch_retain((dispatch_object_t)gr_name);
  v7 = (char *)*((_QWORD *)this + 19);
  v8 = (char *)this + 160;
  *(_QWORD *)buf = v5;
  v15 = 0x40000000;
  v16 = ___ZN3abm19BasebandTracingTask14doForAllTracesIU13block_pointerFvNSt3__110shared_ptrI5TraceEEEEEvT__block_invoke;
  v17 = &unk_1E4A0EA20;
  v18 = v12;
  if (v7 == v8)
  {
    if (!gr_name)
      return;
    goto LABEL_7;
  }
  do
  {
    v16((uint64_t)buf, (uint64_t)(v7 + 32));
    v9 = (char *)*((_QWORD *)v7 + 1);
    if (v9)
    {
      do
      {
        v10 = v9;
        v9 = *(char **)v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        v10 = (char *)*((_QWORD *)v7 + 2);
        v11 = *(_QWORD *)v10 == (_QWORD)v7;
        v7 = v10;
      }
      while (!v11);
    }
    v7 = v10;
  }
  while (v10 != v8);
  gr_name = v13;
  if (v13)
LABEL_7:
    dispatch_release((dispatch_object_t)gr_name);
}

void sub_1A352916C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  _Unwind_Resume(exception_object);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_12(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v17;
  _QWORD aBlock[5];
  void *v19;
  void *v20;
  NSObject *v21;
  NSObject *v22;
  uint8_t buf[16];

  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v5);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_19:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v10 = *(NSObject **)(v7 + 40);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A343C000, v10, OS_LOG_TYPE_DEFAULT, "#I Request to wake", buf, 2u);
      }
      v11 = *(NSObject **)(v7 + 112);
      v22 = v11;
      if (v11)
      {
        dispatch_retain(v11);
        dispatch_group_enter(v11);
      }
      if (*(_QWORD *)a4)
      {
        v12 = _Block_copy(*(const void **)a4);
        v13 = *(NSObject **)(a4 + 8);
        v20 = v12;
        v21 = v13;
        if (!v13)
        {
LABEL_11:
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 0x40000000;
          aBlock[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_13;
          aBlock[3] = &__block_descriptor_tmp_14_4;
          aBlock[4] = v7;
          v14 = _Block_copy(aBlock);
          v19 = v14;
          v17 = 0;
          abm::BasebandTracingTask::performWork(v7, &v22, 8, (uint64_t)&v20, &v19, &v17);
          if (v14)
            _Block_release(v14);
          if (v13)
            dispatch_release(v13);
          if (v12)
            _Block_release(v12);
          if (v11)
          {
            dispatch_group_leave(v11);
            dispatch_release(v11);
          }
          goto LABEL_19;
        }
      }
      else
      {
        v12 = 0;
        v13 = *(NSObject **)(a4 + 8);
        v20 = 0;
        v21 = v13;
        if (!v13)
          goto LABEL_11;
      }
      dispatch_retain(v13);
      goto LABEL_11;
    }
  }
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_13(uint64_t a1)
{
  abm::BasebandTracingTask *v1;
  char *v2;
  group var18;

  v1 = *(abm::BasebandTracingTask **)(a1 + 32);
  v2 = (char *)*((_QWORD *)v1 + 17);
  var18.gr_name = v2;
  if (v2)
    dispatch_retain((dispatch_object_t)v2);
  abm::BasebandTracingTask::exitLowPowerInternal(v1, &var18);
  if (v2)
    dispatch_release((dispatch_object_t)v2);
}

void sub_1A35293B8(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
    dispatch_release(v1);
  _Unwind_Resume(exception_object);
}

void abm::BasebandTracingTask::exitLowPowerInternal(abm::BasebandTracingTask *this, group *a2)
{
  NSObject *v4;
  uint64_t v5;
  char *gr_name;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  BOOL v11;
  _QWORD v12[4];
  char *v13;
  uint8_t buf[8];
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  void *v17;
  _QWORD *v18;

  v4 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v4, OS_LOG_TYPE_DEFAULT, "#I Exit Low Power", buf, 2u);
  }
  v5 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 1174405120;
  v12[2] = ___ZN3abm19BasebandTracingTask20exitLowPowerInternalEN8dispatch5groupE_block_invoke;
  v12[3] = &__block_descriptor_tmp_117;
  gr_name = a2->gr_name;
  v13 = gr_name;
  if (gr_name)
    dispatch_retain((dispatch_object_t)gr_name);
  v7 = (char *)*((_QWORD *)this + 19);
  v8 = (char *)this + 160;
  *(_QWORD *)buf = v5;
  v15 = 0x40000000;
  v16 = ___ZN3abm19BasebandTracingTask14doForAllTracesIU13block_pointerFvNSt3__110shared_ptrI5TraceEEEEEvT__block_invoke;
  v17 = &unk_1E4A0EA20;
  v18 = v12;
  if (v7 == v8)
  {
    if (!gr_name)
      return;
    goto LABEL_7;
  }
  do
  {
    v16((uint64_t)buf, (uint64_t)(v7 + 32));
    v9 = (char *)*((_QWORD *)v7 + 1);
    if (v9)
    {
      do
      {
        v10 = v9;
        v9 = *(char **)v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        v10 = (char *)*((_QWORD *)v7 + 2);
        v11 = *(_QWORD *)v10 == (_QWORD)v7;
        v7 = v10;
      }
      while (!v11);
    }
    v7 = v10;
  }
  while (v10 != v8);
  gr_name = v13;
  if (v13)
LABEL_7:
    dispatch_release((dispatch_object_t)gr_name);
}

void sub_1A352951C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  _Unwind_Resume(exception_object);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_16(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v17;
  _QWORD aBlock[5];
  void *v19;
  void *v20;
  NSObject *v21;
  NSObject *v22;
  uint8_t buf[16];

  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v5);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_19:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v10 = *(NSObject **)(v7 + 40);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A343C000, v10, OS_LOG_TYPE_DEFAULT, "#I Request to flush", buf, 2u);
      }
      v11 = *(NSObject **)(v7 + 112);
      v22 = v11;
      if (v11)
      {
        dispatch_retain(v11);
        dispatch_group_enter(v11);
      }
      if (*(_QWORD *)a4)
      {
        v12 = _Block_copy(*(const void **)a4);
        v13 = *(NSObject **)(a4 + 8);
        v20 = v12;
        v21 = v13;
        if (!v13)
        {
LABEL_11:
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 0x40000000;
          aBlock[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_17;
          aBlock[3] = &__block_descriptor_tmp_18_1;
          aBlock[4] = v7;
          v14 = _Block_copy(aBlock);
          v19 = v14;
          v17 = 0;
          abm::BasebandTracingTask::performWork(v7, &v22, 1, (uint64_t)&v20, &v19, &v17);
          if (v14)
            _Block_release(v14);
          if (v13)
            dispatch_release(v13);
          if (v12)
            _Block_release(v12);
          if (v11)
          {
            dispatch_group_leave(v11);
            dispatch_release(v11);
          }
          goto LABEL_19;
        }
      }
      else
      {
        v12 = 0;
        v13 = *(NSObject **)(a4 + 8);
        v20 = 0;
        v21 = v13;
        if (!v13)
          goto LABEL_11;
      }
      dispatch_retain(v13);
      goto LABEL_11;
    }
  }
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_17(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1A343C000, v1, OS_LOG_TYPE_DEFAULT, "#I Flush complete", v2, 2u);
  }
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_20(_QWORD *a1, uint64_t a2, void **a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  void *v22;
  _QWORD aBlock[5];
  dispatch_group_t object;
  void *v25;
  void *v26;
  NSObject *v27;
  NSObject *v28;
  _QWORD v29[5];
  dispatch_group_t group;
  xpc_object_t v31;
  uint8_t buf[16];

  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v8 = a1[4];
    v9 = std::__shared_weak_count::lock(v5);
    if (v9)
    {
      v10 = v9;
      if (!a1[5])
      {
LABEL_36:
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        return;
      }
      v11 = *(NSObject **)(v8 + 112);
      if (v11)
      {
        dispatch_retain(*(dispatch_object_t *)(v8 + 112));
        dispatch_group_enter(v11);
      }
      v12 = *(NSObject **)(v8 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A343C000, v12, OS_LOG_TYPE_DEFAULT, "#I Request to abort", buf, 2u);
      }
      v13 = *(NSObject **)(v8 + 136);
      v14 = MEMORY[0x1E0C809B0];
      v29[0] = MEMORY[0x1E0C809B0];
      v29[1] = 1174405120;
      v29[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_21;
      v29[3] = &__block_descriptor_tmp_22_1;
      v29[4] = v8;
      group = v11;
      if (v11)
      {
        dispatch_retain(v11);
        dispatch_group_enter(group);
      }
      v15 = *a3;
      v31 = v15;
      if (v15)
        xpc_retain(v15);
      else
        v31 = xpc_null_create();
      ctu::SharedSynchronizable<abm::HelperTask>::execute_wrapped((uint64_t *)(v8 + 72), v13, (uint64_t)v29);
      v16 = *(NSObject **)(v8 + 112);
      v28 = v16;
      if (v16)
      {
        dispatch_retain(v16);
        dispatch_group_enter(v16);
      }
      if (*(_QWORD *)a4)
      {
        v17 = _Block_copy(*(const void **)a4);
        v18 = *(NSObject **)(a4 + 8);
        v26 = v17;
        v27 = v18;
        if (!v18)
        {
LABEL_18:
          aBlock[0] = v14;
          aBlock[1] = 1174405120;
          aBlock[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_23;
          aBlock[3] = &__block_descriptor_tmp_24_1;
          aBlock[4] = v8;
          object = v11;
          if (v11)
          {
            dispatch_retain(v11);
            dispatch_group_enter(v11);
          }
          v19 = _Block_copy(aBlock);
          v25 = v19;
          v22 = 0;
          abm::BasebandTracingTask::performWork(v8, &v28, 5, (uint64_t)&v26, &v25, &v22);
          if (v19)
            _Block_release(v19);
          if (v18)
            dispatch_release(v18);
          if (v17)
            _Block_release(v17);
          if (v16)
          {
            dispatch_group_leave(v16);
            dispatch_release(v16);
          }
          if (object)
          {
            dispatch_group_leave(object);
            if (object)
              dispatch_release(object);
          }
          xpc_release(v31);
          v31 = 0;
          if (group)
          {
            dispatch_group_leave(group);
            if (group)
              dispatch_release(group);
          }
          if (v11)
          {
            dispatch_group_leave(v11);
            dispatch_release(v11);
          }
          goto LABEL_36;
        }
      }
      else
      {
        v17 = 0;
        v18 = *(NSObject **)(a4 + 8);
        v26 = 0;
        v27 = v18;
        if (!v18)
          goto LABEL_18;
      }
      dispatch_retain(v18);
      goto LABEL_18;
    }
  }
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_21(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  const void *v5;
  CFTypeID v6;
  xpc_object_t object;
  CFTypeRef cf;
  const void *v9;
  NSObject *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 136);
  v10 = v3;
  if (v3)
    dispatch_retain(v3);
  v4 = *(void **)(a1 + 48);
  object = v4;
  if (v4)
    xpc_retain(v4);
  else
    object = xpc_null_create();
  xpc::bridge();
  v5 = cf;
  if (cf && (v6 = CFGetTypeID(cf), v6 == CFDictionaryGetTypeID()))
  {
    v9 = cf;
    CFRetain(cf);
  }
  else
  {
    v5 = 0;
    v9 = 0;
  }
  abm::BasebandTracingTask::abortInternal(v2, &v10, &v9);
  if (v5)
    CFRelease(v5);
  if (cf)
    CFRelease(cf);
  xpc_release(object);
  if (v3)
    dispatch_release(v3);
}

void sub_1A3529B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, const void *a10, const void *a11)
{
  NSObject *v11;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a11);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef(&a10);
  xpc_release(object);
  if (v11)
    dispatch_release(v11);
  _Unwind_Resume(a1);
}

void abm::BasebandTracingTask::abortInternal(uint64_t a1, NSObject **a2, const void **a3)
{
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  const void *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  _QWORD v14[4];
  dispatch_object_t object;
  const void *v16;
  uint8_t buf[8];
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  void *v20;
  _QWORD *v21;

  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v6, OS_LOG_TYPE_DEFAULT, "#I Aborting all Traces", buf, 2u);
  }
  v7 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 1174405120;
  v14[2] = ___ZN3abm19BasebandTracingTask13abortInternalEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v14[3] = &__block_descriptor_tmp_123;
  v8 = *a2;
  object = v8;
  if (v8)
    dispatch_retain(v8);
  v9 = *a3;
  v16 = v9;
  if (v9)
    CFRetain(v9);
  v10 = *(_QWORD **)(a1 + 152);
  *(_QWORD *)buf = v7;
  v18 = 0x40000000;
  v19 = ___ZN3abm19BasebandTracingTask14doForAllTracesIU13block_pointerFvNSt3__110shared_ptrI5TraceEEEEEvT__block_invoke;
  v20 = &unk_1E4A0EA20;
  v21 = v14;
  if (v10 != (_QWORD *)(a1 + 160))
  {
    do
    {
      v19((uint64_t)buf, (uint64_t)(v10 + 4));
      v11 = (_QWORD *)v10[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v10[2];
          v13 = *v12 == (_QWORD)v10;
          v10 = v12;
        }
        while (!v13);
      }
      v10 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 160));
    v9 = v16;
  }
  if (v9)
    CFRelease(v9);
  if (object)
    dispatch_release(object);
}

void sub_1A3529CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, dispatch_object_t object)
{
  const void **v13;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(v13);
  if (object)
    dispatch_release(object);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  void *v6;
  xpc_object_t result;

  v4 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = *(NSObject **)(a1 + 40);
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  if (v6)
    return xpc_retain(v6);
  result = xpc_null_create();
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c15_ZTSN3xpc4dictE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 40);
    if (v3)
      dispatch_release(v3);
  }
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_23(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const void *v3;
  NSObject *v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 136);
  v4 = v2;
  if (v2)
    dispatch_retain(v2);
  v3 = 0;
  abm::BasebandTracingTask::stopInternal(v1, &v4, &v3);
  if (v2)
    dispatch_release(v2);
}

void sub_1A3529E14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  NSObject *v2;
  const void *v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  if (v2)
    dispatch_release(v2);
  _Unwind_Resume(a1);
}

void abm::BasebandTracingTask::stopInternal(uint64_t a1, NSObject **a2, const void **a3)
{
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  const void *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  _QWORD v14[4];
  dispatch_object_t object;
  const void *v16;
  uint8_t buf[8];
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  void *v20;
  _QWORD *v21;

  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v6, OS_LOG_TYPE_DEFAULT, "#I Stopping all Traces", buf, 2u);
  }
  v7 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 1174405120;
  v14[2] = ___ZN3abm19BasebandTracingTask12stopInternalEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v14[3] = &__block_descriptor_tmp_122;
  v8 = *a2;
  object = v8;
  if (v8)
    dispatch_retain(v8);
  v9 = *a3;
  v16 = v9;
  if (v9)
    CFRetain(v9);
  v10 = *(_QWORD **)(a1 + 152);
  *(_QWORD *)buf = v7;
  v18 = 0x40000000;
  v19 = ___ZN3abm19BasebandTracingTask14doForAllTracesIU13block_pointerFvNSt3__110shared_ptrI5TraceEEEEEvT__block_invoke;
  v20 = &unk_1E4A0EA20;
  v21 = v14;
  if (v10 != (_QWORD *)(a1 + 160))
  {
    do
    {
      v19((uint64_t)buf, (uint64_t)(v10 + 4));
      v11 = (_QWORD *)v10[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v10[2];
          v13 = *v12 == (_QWORD)v10;
          v10 = v12;
        }
        while (!v13);
      }
      v10 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 160));
    v9 = v16;
  }
  if (v9)
    CFRelease(v9);
  if (object)
    dispatch_release(object);
}

void sub_1A3529FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, dispatch_object_t object)
{
  const void **v13;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(v13);
  if (object)
    dispatch_release(object);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_26(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  NSObject *v8;
  NSObject *v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  uint64_t v14;
  uint8_t *v15;
  xpc_object_t v16;
  xpc_object_t v17;
  uint8_t *v18;
  CFTypeID v19;
  uint8_t *v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  void *v24;
  NSObject *v25;
  void *v26;
  NSObject *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  void *v32;
  _QWORD v33[5];
  CFTypeRef cf;
  void *v35;
  void *v36;
  NSObject *v37;
  NSObject *v38;
  void *v39;
  _QWORD aBlock[5];
  void *v41;
  _QWORD v42[2];
  NSObject *v43;
  _QWORD v44[5];
  dispatch_group_t group;
  xpc_object_t object;
  xpc_object_t v47;
  _QWORD *v48;
  uint8_t buf[8];
  char v50;
  uint64_t v51;
  std::__shared_weak_count *v52;

  v5 = a1[4];
  v51 = 0;
  v52 = 0;
  v6 = (std::__shared_weak_count *)a1[6];
  if (v6)
  {
    v52 = std::__shared_weak_count::lock(v6);
    if (!v52)
      return;
    v51 = a1[5];
    if (v51)
    {
      v8 = *(NSObject **)(v5 + 112);
      if (v8)
      {
        dispatch_retain(*(dispatch_object_t *)(v5 + 112));
        dispatch_group_enter(v8);
      }
      v9 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A343C000, v9, OS_LOG_TYPE_DEFAULT, "#I Request to reinit", buf, 2u);
      }
      v10 = xpc_dictionary_create(0, 0, 0);
      if (v10 || (v10 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1A85902BC](v10) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v10);
          v11 = v10;
        }
        else
        {
          v11 = xpc_null_create();
        }
      }
      else
      {
        v11 = xpc_null_create();
        v10 = 0;
      }
      xpc_release(v10);
      v12 = xpc_string_create("kReinitAllTrace");
      if (!v12)
        v12 = xpc_null_create();
      xpc_dictionary_set_value(v11, "kKeyTraceAction", v12);
      v13 = xpc_null_create();
      xpc_release(v12);
      xpc_release(v13);
      Timestamp::Timestamp((Timestamp *)&v47);
      Timestamp::asString(v14, 0, 9, buf);
      if (v50 >= 0)
        v15 = buf;
      else
        v15 = *(uint8_t **)buf;
      v16 = xpc_string_create((const char *)v15);
      if (!v16)
        v16 = xpc_null_create();
      xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E0CFB370], v16);
      v17 = xpc_null_create();
      xpc_release(v16);
      xpc_release(v17);
      if (v50 < 0)
      {
        operator delete(*(void **)buf);
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v47, v48);
        v47 = v11;
        if (v11)
          goto LABEL_23;
      }
      else
      {
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v47, v48);
        v47 = v11;
        if (v11)
        {
LABEL_23:
          xpc_retain(v11);
          goto LABEL_26;
        }
      }
      v47 = xpc_null_create();
LABEL_26:
      xpc::bridge();
      v18 = *(uint8_t **)buf;
      if (!*(_QWORD *)buf)
        goto LABEL_32;
      v19 = CFGetTypeID(*(CFTypeRef *)buf);
      if (v19 == CFDictionaryGetTypeID())
      {
        CFRetain(v18);
        v20 = *(uint8_t **)buf;
        if (!*(_QWORD *)buf)
        {
LABEL_32:
          xpc_release(v47);
          v21 = *(NSObject **)(v5 + 136);
          v22 = MEMORY[0x1E0C809B0];
          v44[0] = MEMORY[0x1E0C809B0];
          v44[1] = 1174405120;
          v44[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_27;
          v44[3] = &__block_descriptor_tmp_28;
          v44[4] = v5;
          group = v8;
          if (v8)
          {
            dispatch_retain(v8);
            dispatch_group_enter(group);
          }
          object = v11;
          if (v11)
            xpc_retain(v11);
          else
            object = xpc_null_create();
          ctu::SharedSynchronizable<abm::HelperTask>::execute_wrapped((uint64_t *)(v5 + 72), v21, (uint64_t)v44);
          v23 = *(NSObject **)(v5 + 112);
          v43 = v23;
          if (v23)
          {
            dispatch_retain(v23);
            dispatch_group_enter(v23);
          }
          v42[0] = 0;
          v42[1] = 0;
          aBlock[0] = v22;
          aBlock[1] = 0x40000000;
          aBlock[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_29;
          aBlock[3] = &__block_descriptor_tmp_30;
          aBlock[4] = v5;
          v24 = _Block_copy(aBlock);
          v41 = v24;
          v39 = 0;
          abm::BasebandTracingTask::performWork(v5, &v43, 5, (uint64_t)v42, &v41, &v39);
          if (v24)
            _Block_release(v24);
          if (v23)
          {
            dispatch_group_leave(v23);
            dispatch_release(v23);
          }
          v25 = *(NSObject **)(v5 + 112);
          v38 = v25;
          if (v25)
          {
            dispatch_retain(v25);
            dispatch_group_enter(v25);
          }
          if (*(_QWORD *)a4)
          {
            v26 = _Block_copy(*(const void **)a4);
            v27 = *(NSObject **)(a4 + 8);
            v36 = v26;
            v37 = v27;
            if (!v27)
            {
LABEL_48:
              v33[0] = v22;
              v33[1] = 1174405120;
              v33[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_2;
              v33[3] = &__block_descriptor_tmp_31_0;
              v33[4] = v5;
              cf = v18;
              if (v18)
                CFRetain(v18);
              v28 = _Block_copy(v33);
              v35 = v28;
              v32 = 0;
              abm::BasebandTracingTask::performWork(v5, &v38, 2, (uint64_t)&v36, &v35, &v32);
              if (v28)
                _Block_release(v28);
              if (v27)
                dispatch_release(v27);
              if (v26)
                _Block_release(v26);
              if (v25)
              {
                dispatch_group_leave(v25);
                dispatch_release(v25);
              }
              if (cf)
                CFRelease(cf);
              xpc_release(object);
              object = 0;
              if (group)
              {
                dispatch_group_leave(group);
                if (group)
                  dispatch_release(group);
              }
              if (v18)
                CFRelease(v18);
              xpc_release(v11);
              if (v8)
              {
                dispatch_group_leave(v8);
                dispatch_release(v8);
              }
              goto LABEL_67;
            }
          }
          else
          {
            v26 = 0;
            v27 = *(NSObject **)(a4 + 8);
            v36 = 0;
            v37 = v27;
            if (!v27)
              goto LABEL_48;
          }
          dispatch_retain(v27);
          goto LABEL_48;
        }
      }
      else
      {
        v18 = 0;
        v20 = *(uint8_t **)buf;
        if (!*(_QWORD *)buf)
          goto LABEL_32;
      }
      CFRelease(v20);
      goto LABEL_32;
    }
  }
LABEL_67:
  v29 = v52;
  if (v52)
  {
    p_shared_owners = (unint64_t *)&v52->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_1A352A53C(_Unwind_Exception *a1)
{
  NSObject *v1;
  void *v2;
  uint64_t v3;

  xpc_release(*(xpc_object_t *)(v3 - 168));
  xpc_release(v2);
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v3 - 112);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_27(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  const void *v5;
  CFTypeID v6;
  xpc_object_t object;
  CFTypeRef cf;
  const void *v9;
  NSObject *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 136);
  v10 = v3;
  if (v3)
    dispatch_retain(v3);
  v4 = *(void **)(a1 + 48);
  object = v4;
  if (v4)
    xpc_retain(v4);
  else
    object = xpc_null_create();
  xpc::bridge();
  v5 = cf;
  if (cf && (v6 = CFGetTypeID(cf), v6 == CFDictionaryGetTypeID()))
  {
    v9 = cf;
    CFRetain(cf);
  }
  else
  {
    v5 = 0;
    v9 = 0;
  }
  abm::BasebandTracingTask::abortInternal(v2, &v10, &v9);
  if (v5)
    CFRelease(v5);
  if (cf)
    CFRelease(cf);
  xpc_release(object);
  if (v3)
    dispatch_release(v3);
}

void sub_1A352A6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, const void *a10, const void *a11)
{
  NSObject *v11;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a11);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef(&a10);
  xpc_release(object);
  if (v11)
    dispatch_release(v11);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_29(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const void *v3;
  NSObject *v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 136);
  v4 = v2;
  if (v2)
    dispatch_retain(v2);
  v3 = 0;
  abm::BasebandTracingTask::stopInternal(v1, &v4, &v3);
  if (v2)
    dispatch_release(v2);
}

void sub_1A352A77C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  NSObject *v2;
  const void *v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  if (v2)
    dispatch_release(v2);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const void *v4;
  const void *v5;
  NSObject *v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 136);
  v6 = v3;
  if (v3)
    dispatch_retain(v3);
  v4 = *(const void **)(a1 + 40);
  v5 = v4;
  if (v4)
    CFRetain(v4);
  abm::BasebandTracingTask::reinitInternal(v2, &v6, &v5);
  if (v4)
    CFRelease(v4);
  if (v3)
    dispatch_release(v3);
}

void sub_1A352A83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  NSObject *v9;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  if (v9)
    dispatch_release(v9);
  _Unwind_Resume(a1);
}

void abm::BasebandTracingTask::reinitInternal(uint64_t a1, NSObject **a2, const void **a3)
{
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  const void *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  _QWORD v14[4];
  dispatch_object_t object;
  const void *v16;
  uint8_t buf[8];
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  void *v20;
  _QWORD *v21;

  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v6, OS_LOG_TYPE_DEFAULT, "#I Reinit all Traces", buf, 2u);
  }
  v7 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 1174405120;
  v14[2] = ___ZN3abm19BasebandTracingTask14reinitInternalEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v14[3] = &__block_descriptor_tmp_119;
  v8 = *a2;
  object = v8;
  if (v8)
    dispatch_retain(v8);
  v9 = *a3;
  v16 = v9;
  if (v9)
    CFRetain(v9);
  v10 = *(_QWORD **)(a1 + 152);
  *(_QWORD *)buf = v7;
  v18 = 0x40000000;
  v19 = ___ZN3abm19BasebandTracingTask14doForAllTracesIU13block_pointerFvNSt3__110shared_ptrI5TraceEEEEEvT__block_invoke;
  v20 = &unk_1E4A0EA20;
  v21 = v14;
  if (v10 != (_QWORD *)(a1 + 160))
  {
    do
    {
      v19((uint64_t)buf, (uint64_t)(v10 + 4));
      v11 = (_QWORD *)v10[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v10[2];
          v13 = *v12 == (_QWORD)v10;
          v10 = v12;
        }
        while (!v13);
      }
      v10 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 160));
    v9 = v16;
  }
  if (v9)
    CFRelease(v9);
  if (object)
    dispatch_release(object);
}

void sub_1A352A9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, dispatch_object_t object)
{
  const void **v13;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(v13);
  if (object)
    dispatch_release(object);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    CFRelease(v1);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_33(_QWORD *a1, uint64_t a2, xpc_object_t *a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  NSObject *v11;
  NSObject *v12;
  xpc_object_t v13;
  xpc_object_t v14;
  uint64_t v15;
  uint8_t *v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  uint8_t *v20;
  CFTypeID v21;
  uint8_t *v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  void *v26;
  NSObject *v27;
  void *v28;
  NSObject *v29;
  void *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  void *v33;
  _QWORD v34[5];
  CFTypeRef cf;
  void *v36;
  void *v37;
  NSObject *v38;
  NSObject *v39;
  void *v40;
  _QWORD aBlock[5];
  CFTypeRef v42;
  void *v43;
  _QWORD v44[2];
  NSObject *v45;
  _QWORD v46[5];
  dispatch_group_t group;
  CFTypeRef v48;
  xpc_object_t v49;
  _QWORD *v50;
  uint8_t buf[8];
  char v52;
  std::__shared_weak_count *v54;

  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v8 = a1[4];
    v9 = std::__shared_weak_count::lock(v5);
    v54 = v9;
    if (v9)
    {
      v10 = v9;
      if (!a1[5])
      {
LABEL_66:
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v32 = __ldaxr(p_shared_owners);
        while (__stlxr(v32 - 1, p_shared_owners));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        return;
      }
      v11 = *(NSObject **)(v8 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A343C000, v11, OS_LOG_TYPE_DEFAULT, "#I Request to shutdown", buf, 2u);
      }
      v12 = *(NSObject **)(v8 + 112);
      if (v12)
      {
        dispatch_retain(*(dispatch_object_t *)(v8 + 112));
        dispatch_group_enter(v12);
      }
      v13 = xpc_string_create("kShutdownAllTrace");
      if (!v13)
        v13 = xpc_null_create();
      xpc_dictionary_set_value(*a3, "kKeyTraceAction", v13);
      v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
      Timestamp::Timestamp((Timestamp *)&v49);
      Timestamp::asString(v15, 0, 9, buf);
      if (v52 >= 0)
        v16 = buf;
      else
        v16 = *(uint8_t **)buf;
      v17 = xpc_string_create((const char *)v16);
      if (!v17)
        v17 = xpc_null_create();
      xpc_dictionary_set_value(*a3, (const char *)*MEMORY[0x1E0CFB370], v17);
      v18 = xpc_null_create();
      xpc_release(v17);
      xpc_release(v18);
      if (v52 < 0)
      {
        operator delete(*(void **)buf);
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v49, v50);
        v49 = *a3;
        v19 = v49;
        if (v49)
          goto LABEL_17;
      }
      else
      {
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v49, v50);
        v49 = *a3;
        v19 = v49;
        if (v49)
        {
LABEL_17:
          xpc_retain(v19);
          goto LABEL_20;
        }
      }
      v49 = xpc_null_create();
LABEL_20:
      xpc::bridge();
      v20 = *(uint8_t **)buf;
      if (!*(_QWORD *)buf)
        goto LABEL_26;
      v21 = CFGetTypeID(*(CFTypeRef *)buf);
      if (v21 == CFDictionaryGetTypeID())
      {
        CFRetain(v20);
        v22 = *(uint8_t **)buf;
        if (!*(_QWORD *)buf)
        {
LABEL_26:
          xpc_release(v49);
          v23 = *(NSObject **)(v8 + 136);
          v24 = MEMORY[0x1E0C809B0];
          v46[0] = MEMORY[0x1E0C809B0];
          v46[1] = 1174405120;
          v46[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_34;
          v46[3] = &__block_descriptor_tmp_35_0;
          v46[4] = v8;
          group = v12;
          if (v12)
          {
            dispatch_retain(v12);
            dispatch_group_enter(group);
          }
          v48 = v20;
          if (v20)
            CFRetain(v20);
          ctu::SharedSynchronizable<abm::HelperTask>::execute_wrapped((uint64_t *)(v8 + 72), v23, (uint64_t)v46);
          v25 = *(NSObject **)(v8 + 112);
          v45 = v25;
          if (v25)
          {
            dispatch_retain(v25);
            dispatch_group_enter(v25);
          }
          v44[0] = 0;
          v44[1] = 0;
          aBlock[0] = v24;
          aBlock[1] = 1174405120;
          aBlock[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_36;
          aBlock[3] = &__block_descriptor_tmp_37_0;
          aBlock[4] = v8;
          v42 = v20;
          if (v20)
            CFRetain(v20);
          v26 = _Block_copy(aBlock);
          v43 = v26;
          v40 = 0;
          abm::BasebandTracingTask::performWork(v8, &v45, 6, (uint64_t)v44, &v43, &v40);
          if (v26)
            _Block_release(v26);
          if (v25)
          {
            dispatch_group_leave(v25);
            dispatch_release(v25);
          }
          v27 = *(NSObject **)(v8 + 112);
          v39 = v27;
          if (v27)
          {
            dispatch_retain(v27);
            dispatch_group_enter(v27);
          }
          if (*(_QWORD *)a4)
          {
            v28 = _Block_copy(*(const void **)a4);
            v29 = *(NSObject **)(a4 + 8);
            v37 = v28;
            v38 = v29;
            if (!v29)
            {
LABEL_43:
              v34[0] = v24;
              v34[1] = 1174405120;
              v34[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_38;
              v34[3] = &__block_descriptor_tmp_39_0;
              v34[4] = v8;
              cf = v20;
              if (v20)
                CFRetain(v20);
              v30 = _Block_copy(v34);
              v36 = v30;
              v33 = 0;
              abm::BasebandTracingTask::performWork(v8, &v39, 6, (uint64_t)&v37, &v36, &v33);
              if (v30)
                _Block_release(v30);
              if (v29)
                dispatch_release(v29);
              if (v28)
                _Block_release(v28);
              if (v27)
              {
                dispatch_group_leave(v27);
                dispatch_release(v27);
              }
              if (cf)
                CFRelease(cf);
              if (v42)
                CFRelease(v42);
              if (v48)
                CFRelease(v48);
              if (group)
              {
                dispatch_group_leave(group);
                if (group)
                  dispatch_release(group);
              }
              if (v20)
                CFRelease(v20);
              if (v12)
              {
                dispatch_group_leave(v12);
                dispatch_release(v12);
              }
              goto LABEL_66;
            }
          }
          else
          {
            v28 = 0;
            v29 = *(NSObject **)(a4 + 8);
            v37 = 0;
            v38 = v29;
            if (!v29)
              goto LABEL_43;
          }
          dispatch_retain(v29);
          goto LABEL_43;
        }
      }
      else
      {
        v20 = 0;
        v22 = *(uint8_t **)buf;
        if (!*(_QWORD *)buf)
          goto LABEL_26;
      }
      CFRelease(v22);
      goto LABEL_26;
    }
  }
}

void sub_1A352AF34(_Unwind_Exception *a1)
{
  NSObject *v1;
  uint64_t v2;

  xpc_release(*(xpc_object_t *)(v2 - 168));
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v2 - 112);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_34(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const void *v4;
  const void *v5;
  NSObject *v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 136);
  v6 = v3;
  if (v3)
    dispatch_retain(v3);
  v4 = *(const void **)(a1 + 48);
  v5 = v4;
  if (v4)
    CFRetain(v4);
  abm::BasebandTracingTask::abortInternal(v2, &v6, &v5);
  if (v4)
    CFRelease(v4);
  if (v3)
    dispatch_release(v3);
}

void sub_1A352B058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  NSObject *v9;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  if (v9)
    dispatch_release(v9);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  CFTypeRef result;

  v4 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = *(NSObject **)(a1 + 40);
    if (v5)
      dispatch_group_enter(v5);
  }
  result = *(CFTypeRef *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1)
{
  const void *v2;
  NSObject *v3;
  NSObject *v4;

  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
  v3 = *(NSObject **)(a1 + 40);
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = *(NSObject **)(a1 + 40);
    if (v4)
      dispatch_release(v4);
  }
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_36(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const void *v4;
  const void *v5;
  NSObject *v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 136);
  v6 = v3;
  if (v3)
    dispatch_retain(v3);
  v4 = *(const void **)(a1 + 40);
  v5 = v4;
  if (v4)
    CFRetain(v4);
  abm::BasebandTracingTask::snapshotInternal(v2, &v6, &v5);
  if (v4)
    CFRelease(v4);
  if (v3)
    dispatch_release(v3);
}

void sub_1A352B1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  NSObject *v9;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  if (v9)
    dispatch_release(v9);
  _Unwind_Resume(a1);
}

void abm::BasebandTracingTask::snapshotInternal(uint64_t a1, NSObject **a2, const void **a3)
{
  NSObject *v6;
  _BOOL8 v7;
  uint64_t v8;
  NSObject *v9;
  const void *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD v15[4];
  dispatch_object_t object;
  const void *v17;
  uint8_t buf[8];
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  void *v21;
  _QWORD *v22;

  v6 = *(NSObject **)(a1 + 40);
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v6, OS_LOG_TYPE_DEFAULT, "#I Snapshotting all traces", buf, 2u);
  }
  abm::BasebandTracingTask::createLogFolderPaths((abm::BasebandTracingTask *)v7);
  v8 = MEMORY[0x1E0C809B0];
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1174405120;
  v15[2] = ___ZN3abm19BasebandTracingTask16snapshotInternalEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v15[3] = &__block_descriptor_tmp_118;
  v9 = *a2;
  object = v9;
  if (v9)
    dispatch_retain(v9);
  v10 = *a3;
  v17 = v10;
  if (v10)
    CFRetain(v10);
  v11 = *(_QWORD **)(a1 + 152);
  *(_QWORD *)buf = v8;
  v19 = 0x40000000;
  v20 = ___ZN3abm19BasebandTracingTask14doForAllTracesIU13block_pointerFvNSt3__110shared_ptrI5TraceEEEEEvT__block_invoke;
  v21 = &unk_1E4A0EA20;
  v22 = v15;
  if (v11 != (_QWORD *)(a1 + 160))
  {
    do
    {
      v20((uint64_t)buf, (uint64_t)(v11 + 4));
      v12 = (_QWORD *)v11[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v11[2];
          v14 = *v13 == (_QWORD)v11;
          v11 = v13;
        }
        while (!v14);
      }
      v11 = v13;
    }
    while (v13 != (_QWORD *)(a1 + 160));
    v10 = v17;
  }
  if (v10)
    CFRelease(v10);
  if (object)
    dispatch_release(object);
}

void sub_1A352B34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, dispatch_object_t object)
{
  const void **v13;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(v13);
  if (object)
    dispatch_release(object);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_38(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const void *v4;
  const void *v5;
  NSObject *v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 136);
  v6 = v3;
  if (v3)
    dispatch_retain(v3);
  v4 = *(const void **)(a1 + 40);
  v5 = v4;
  if (v4)
    CFRetain(v4);
  abm::BasebandTracingTask::shutdownInternal(v2, &v6, &v5);
  if (v4)
    CFRelease(v4);
  if (v3)
    dispatch_release(v3);
}

void sub_1A352B404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  NSObject *v9;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  if (v9)
    dispatch_release(v9);
  _Unwind_Resume(a1);
}

void abm::BasebandTracingTask::shutdownInternal(uint64_t a1, NSObject **a2, const void **a3)
{
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  const void *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  _QWORD v14[4];
  dispatch_object_t object;
  const void *v16;
  uint8_t buf[8];
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  void *v20;
  _QWORD *v21;

  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v6, OS_LOG_TYPE_DEFAULT, "#I Shutdown all Traces", buf, 2u);
  }
  v7 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 1174405120;
  v14[2] = ___ZN3abm19BasebandTracingTask16shutdownInternalEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v14[3] = &__block_descriptor_tmp_124;
  v8 = *a2;
  object = v8;
  if (v8)
    dispatch_retain(v8);
  v9 = *a3;
  v16 = v9;
  if (v9)
    CFRetain(v9);
  v10 = *(_QWORD **)(a1 + 152);
  *(_QWORD *)buf = v7;
  v18 = 0x40000000;
  v19 = ___ZN3abm19BasebandTracingTask14doForAllTracesIU13block_pointerFvNSt3__110shared_ptrI5TraceEEEEEvT__block_invoke;
  v20 = &unk_1E4A0EA20;
  v21 = v14;
  if (v10 != (_QWORD *)(a1 + 160))
  {
    do
    {
      v19((uint64_t)buf, (uint64_t)(v10 + 4));
      v11 = (_QWORD *)v10[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v10[2];
          v13 = *v12 == (_QWORD)v10;
          v10 = v12;
        }
        while (!v13);
      }
      v10 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 160));
    v9 = v16;
  }
  if (v9)
    CFRelease(v9);
  if (object)
    dispatch_release(object);
}

void sub_1A352B5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, dispatch_object_t object)
{
  const void **v13;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(v13);
  if (object)
    dispatch_release(object);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_41(_QWORD *a1, uint64_t a2, void **a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  void *v11;
  CFTypeRef v12;
  CFTypeID v13;
  NSObject *v14;
  NSObject *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *v21;
  _QWORD aBlock[5];
  CFTypeRef v23;
  void *v24;
  void *v25;
  NSObject *v26;
  NSObject *v27;
  xpc_object_t object;
  CFTypeRef cf[2];
  std::__shared_weak_count *v31;

  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v8 = a1[4];
    v9 = std::__shared_weak_count::lock(v5);
    v31 = v9;
    if (v9)
    {
      v10 = v9;
      if (!a1[5])
      {
LABEL_33:
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        return;
      }
      v11 = *a3;
      object = v11;
      if (v11)
        xpc_retain(v11);
      else
        object = xpc_null_create();
      xpc::bridge();
      v12 = cf[0];
      if (cf[0])
      {
        v13 = CFGetTypeID(cf[0]);
        if (v13 == CFDictionaryGetTypeID())
          CFRetain(cf[0]);
        else
          v12 = 0;
        CFRelease(cf[0]);
      }
      xpc_release(object);
      v14 = *(NSObject **)(v8 + 40);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(cf[0]) = 0;
        _os_log_impl(&dword_1A343C000, v14, OS_LOG_TYPE_DEFAULT, "#I Request to prepare", (uint8_t *)cf, 2u);
      }
      v15 = *(NSObject **)(v8 + 112);
      v27 = v15;
      if (v15)
      {
        dispatch_retain(v15);
        dispatch_group_enter(v15);
      }
      if (*(_QWORD *)a4)
      {
        v16 = _Block_copy(*(const void **)a4);
        v17 = *(NSObject **)(a4 + 8);
        v25 = v16;
        v26 = v17;
        if (!v17)
        {
LABEL_19:
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 1174405120;
          aBlock[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_42;
          aBlock[3] = &__block_descriptor_tmp_43;
          aBlock[4] = v8;
          v23 = v12;
          if (v12)
            CFRetain(v12);
          v18 = _Block_copy(aBlock);
          v24 = v18;
          v21 = 0;
          abm::BasebandTracingTask::performWork(v8, &v27, 3, (uint64_t)&v25, &v24, &v21);
          if (v18)
            _Block_release(v18);
          if (v17)
            dispatch_release(v17);
          if (v16)
            _Block_release(v16);
          if (v15)
          {
            dispatch_group_leave(v15);
            dispatch_release(v15);
          }
          if (v23)
            CFRelease(v23);
          if (v12)
            CFRelease(v12);
          goto LABEL_33;
        }
      }
      else
      {
        v16 = 0;
        v17 = *(NSObject **)(a4 + 8);
        v25 = 0;
        v26 = v17;
        if (!v17)
          goto LABEL_19;
      }
      dispatch_retain(v17);
      goto LABEL_19;
    }
  }
}

void sub_1A352B844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, xpc_object_t object,char a21)
{
  uint64_t v21;

  xpc_release(object);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v21 - 80);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_42(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const void *v4;
  const void *v5;
  NSObject *v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 136);
  v6 = v3;
  if (v3)
    dispatch_retain(v3);
  v4 = *(const void **)(a1 + 40);
  v5 = v4;
  if (v4)
    CFRetain(v4);
  abm::BasebandTracingTask::prepareInternal(v2, &v6, &v5);
  if (v4)
    CFRelease(v4);
  if (v3)
    dispatch_release(v3);
}

void sub_1A352B910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  NSObject *v9;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  if (v9)
    dispatch_release(v9);
  _Unwind_Resume(a1);
}

void abm::BasebandTracingTask::prepareInternal(uint64_t a1, NSObject **a2, const void **a3)
{
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  const void *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  _QWORD v14[4];
  dispatch_object_t object;
  const void *v16;
  uint8_t buf[8];
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  void *v20;
  _QWORD *v21;

  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v6, OS_LOG_TYPE_DEFAULT, "#I Preparing all traces", buf, 2u);
  }
  v7 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 1174405120;
  v14[2] = ___ZN3abm19BasebandTracingTask15prepareInternalEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v14[3] = &__block_descriptor_tmp_120;
  v8 = *a2;
  object = v8;
  if (v8)
    dispatch_retain(v8);
  v9 = *a3;
  v16 = v9;
  if (v9)
    CFRetain(v9);
  v10 = *(_QWORD **)(a1 + 152);
  *(_QWORD *)buf = v7;
  v18 = 0x40000000;
  v19 = ___ZN3abm19BasebandTracingTask14doForAllTracesIU13block_pointerFvNSt3__110shared_ptrI5TraceEEEEEvT__block_invoke;
  v20 = &unk_1E4A0EA20;
  v21 = v14;
  if (v10 != (_QWORD *)(a1 + 160))
  {
    do
    {
      v19((uint64_t)buf, (uint64_t)(v10 + 4));
      v11 = (_QWORD *)v10[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v10[2];
          v13 = *v12 == (_QWORD)v10;
          v10 = v12;
        }
        while (!v13);
      }
      v10 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 160));
    v9 = v16;
  }
  if (v9)
    CFRelease(v9);
  if (object)
    dispatch_release(object);
}

void sub_1A352BAAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, dispatch_object_t object)
{
  const void **v13;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(v13);
  if (object)
    dispatch_release(object);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_45(_QWORD *a1, uint64_t a2, void **a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  void *v11;
  CFTypeRef v12;
  CFTypeID v13;
  NSObject *v14;
  NSObject *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *v21;
  _QWORD aBlock[5];
  CFTypeRef v23;
  void *v24;
  void *v25;
  NSObject *v26;
  NSObject *v27;
  xpc_object_t object;
  CFTypeRef cf[2];
  std::__shared_weak_count *v31;

  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v8 = a1[4];
    v9 = std::__shared_weak_count::lock(v5);
    v31 = v9;
    if (v9)
    {
      v10 = v9;
      if (!a1[5])
      {
LABEL_33:
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        return;
      }
      v11 = *a3;
      object = v11;
      if (v11)
        xpc_retain(v11);
      else
        object = xpc_null_create();
      xpc::bridge();
      v12 = cf[0];
      if (cf[0])
      {
        v13 = CFGetTypeID(cf[0]);
        if (v13 == CFDictionaryGetTypeID())
          CFRetain(cf[0]);
        else
          v12 = 0;
        CFRelease(cf[0]);
      }
      xpc_release(object);
      v14 = *(NSObject **)(v8 + 40);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(cf[0]) = 0;
        _os_log_impl(&dword_1A343C000, v14, OS_LOG_TYPE_DEFAULT, "#I Request to stop", (uint8_t *)cf, 2u);
      }
      v15 = *(NSObject **)(v8 + 112);
      v27 = v15;
      if (v15)
      {
        dispatch_retain(v15);
        dispatch_group_enter(v15);
      }
      if (*(_QWORD *)a4)
      {
        v16 = _Block_copy(*(const void **)a4);
        v17 = *(NSObject **)(a4 + 8);
        v25 = v16;
        v26 = v17;
        if (!v17)
        {
LABEL_19:
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 1174405120;
          aBlock[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_46;
          aBlock[3] = &__block_descriptor_tmp_47_1;
          aBlock[4] = v8;
          v23 = v12;
          if (v12)
            CFRetain(v12);
          v18 = _Block_copy(aBlock);
          v24 = v18;
          v21 = 0;
          abm::BasebandTracingTask::performWork(v8, &v27, 5, (uint64_t)&v25, &v24, &v21);
          if (v18)
            _Block_release(v18);
          if (v17)
            dispatch_release(v17);
          if (v16)
            _Block_release(v16);
          if (v15)
          {
            dispatch_group_leave(v15);
            dispatch_release(v15);
          }
          if (v23)
            CFRelease(v23);
          if (v12)
            CFRelease(v12);
          goto LABEL_33;
        }
      }
      else
      {
        v16 = 0;
        v17 = *(NSObject **)(a4 + 8);
        v25 = 0;
        v26 = v17;
        if (!v17)
          goto LABEL_19;
      }
      dispatch_retain(v17);
      goto LABEL_19;
    }
  }
}

void sub_1A352BD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, xpc_object_t object,char a21)
{
  uint64_t v21;

  xpc_release(object);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v21 - 80);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_46(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const void *v4;
  const void *v5;
  NSObject *v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 136);
  v6 = v3;
  if (v3)
    dispatch_retain(v3);
  v4 = *(const void **)(a1 + 40);
  v5 = v4;
  if (v4)
    CFRetain(v4);
  abm::BasebandTracingTask::stopInternal(v2, &v6, &v5);
  if (v4)
    CFRelease(v4);
  if (v3)
    dispatch_release(v3);
}

void sub_1A352BE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  NSObject *v9;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  if (v9)
    dispatch_release(v9);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_49(_QWORD *a1, uint64_t a2, xpc_object_t *a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  xpc_object_t value;
  CFTypeRef v12;
  CFTypeID v13;
  CFTypeRef v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  void **v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  void *v31;
  NSObject *v32;
  void *v33;
  NSObject *v34;
  void *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void *v38;
  _QWORD v39[5];
  CFTypeRef cf;
  void *v41;
  void *v42;
  NSObject *v43;
  NSObject *v44;
  void *v45;
  _QWORD aBlock[5];
  void *v47;
  _QWORD v48[2];
  NSObject *v49;
  const void *v50;
  NSObject *v51;
  xpc_object_t v52;
  uint8_t buf[8];
  xpc_object_t v54;
  void *v55[3];
  std::__shared_weak_count *v57;

  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v8 = (_QWORD *)a1[4];
    v9 = std::__shared_weak_count::lock(v5);
    v57 = v9;
    if (v9)
    {
      v10 = v9;
      if (!a1[5])
      {
LABEL_73:
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v37 = __ldaxr(p_shared_owners);
        while (__stlxr(v37 - 1, p_shared_owners));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        return;
      }
      memset(v55, 170, sizeof(v55));
      value = xpc_dictionary_get_value(*a3, "kKeyTraceAction");
      v54 = value;
      if (value)
        xpc_retain(value);
      else
        v54 = xpc_null_create();
      xpc::dyn_cast_or_default();
      xpc_release(v54);
      v54 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      v52 = *a3;
      if (v52)
        xpc_retain(v52);
      else
        v52 = xpc_null_create();
      xpc::bridge();
      v12 = *(CFTypeRef *)buf;
      if (*(_QWORD *)buf && (v13 = CFGetTypeID(*(CFTypeRef *)buf), v13 == CFDictionaryGetTypeID()))
      {
        v54 = *(xpc_object_t *)buf;
        CFRetain(*(CFTypeRef *)buf);
        v14 = *(CFTypeRef *)buf;
      }
      else
      {
        v12 = 0;
        v54 = 0;
        v14 = *(CFTypeRef *)buf;
        if (!*(_QWORD *)buf)
          goto LABEL_15;
      }
      CFRelease(v14);
LABEL_15:
      xpc_release(v52);
      v15 = v8[5];
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A343C000, v15, OS_LOG_TYPE_DEFAULT, "#I Request to collect logs", buf, 2u);
      }
      v16 = (void *)HIBYTE(v55[2]);
      if (SHIBYTE(v55[2]) < 0)
        v16 = v55[1];
      v17 = MEMORY[0x1E0C809B0];
      if (v16 == (void *)33)
      {
        v18 = v55;
        if (SHIBYTE(v55[2]) < 0)
          v18 = (void **)v55[0];
        v19 = *v18;
        v20 = v18[1];
        v21 = v18[2];
        v22 = v18[3];
        v23 = *((unsigned __int8 *)v18 + 32);
        if (v19 == *(void **)"kCollectTelephonyLogsWithCoredump"
          && v20 == *(void **)"TelephonyLogsWithCoredump"
          && v21 == *(void **)"yLogsWithCoredump"
          && v22 == *(void **)"hCoredump"
          && v23 == str_67[32])
        {
          v28 = v8[5];
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1A343C000, v28, OS_LOG_TYPE_DEFAULT, "#I Abort all traces before collecting coredump", buf, 2u);
          }
          v29 = v8[17];
          v51 = v29;
          if (v29)
            dispatch_retain(v29);
          v50 = v12;
          if (v12)
            CFRetain(v12);
          abm::BasebandTracingTask::abortInternal((uint64_t)v8, &v51, &v50);
          if (v12)
            CFRelease(v12);
          if (v29)
            dispatch_release(v29);
          v30 = v8[14];
          v49 = v30;
          if (v30)
          {
            dispatch_retain(v30);
            dispatch_group_enter(v30);
          }
          v48[0] = 0;
          v48[1] = 0;
          aBlock[0] = v17;
          aBlock[1] = 0x40000000;
          aBlock[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_50;
          aBlock[3] = &__block_descriptor_tmp_51_0;
          aBlock[4] = v8;
          v31 = _Block_copy(aBlock);
          v47 = v31;
          v45 = 0;
          abm::BasebandTracingTask::performWork((uint64_t)v8, &v49, 5, (uint64_t)v48, &v47, &v45);
          if (v31)
            _Block_release(v31);
          if (v30)
          {
            dispatch_group_leave(v30);
            dispatch_release(v30);
          }
        }
      }
      v32 = v8[14];
      v44 = v32;
      if (v32)
      {
        dispatch_retain(v32);
        dispatch_group_enter(v32);
      }
      if (*(_QWORD *)a4)
      {
        v33 = _Block_copy(*(const void **)a4);
        v34 = *(NSObject **)(a4 + 8);
        v42 = v33;
        v43 = v34;
        if (!v34)
        {
LABEL_57:
          v39[0] = v17;
          v39[1] = 1174405120;
          v39[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_2_52;
          v39[3] = &__block_descriptor_tmp_55_1;
          v39[4] = v8;
          cf = v12;
          if (v12)
            CFRetain(v12);
          v35 = _Block_copy(v39);
          v41 = v35;
          v38 = 0;
          abm::BasebandTracingTask::performWork((uint64_t)v8, &v44, 9, (uint64_t)&v42, &v41, &v38);
          if (v35)
            _Block_release(v35);
          if (v34)
            dispatch_release(v34);
          if (v33)
            _Block_release(v33);
          if (v32)
          {
            dispatch_group_leave(v32);
            dispatch_release(v32);
          }
          if (cf)
            CFRelease(cf);
          if (v12)
            CFRelease(v12);
          if (SHIBYTE(v55[2]) < 0)
            operator delete(v55[0]);
          goto LABEL_73;
        }
      }
      else
      {
        v33 = 0;
        v34 = *(NSObject **)(a4 + 8);
        v42 = 0;
        v43 = v34;
        if (!v34)
          goto LABEL_57;
      }
      dispatch_retain(v34);
      goto LABEL_57;
    }
  }
}

void sub_1A352C298(_Unwind_Exception *a1)
{
  NSObject *v1;
  uint64_t v2;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v2 - 152));
  if (v1)
    dispatch_release(v1);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v2 - 112));
  if (*(char *)(v2 - 81) < 0)
    operator delete(*(void **)(v2 - 104));
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v2 - 80);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_50(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const void *v3;
  NSObject *v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 136);
  v4 = v2;
  if (v2)
    dispatch_retain(v2);
  v3 = 0;
  abm::BasebandTracingTask::stopInternal(v1, &v4, &v3);
  if (v2)
    dispatch_release(v2);
}

void sub_1A352C3BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  NSObject *v2;
  const void *v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  if (v2)
    dispatch_release(v2);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_2_52(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  int DumpingFile_sync;
  const void *v7;
  _QWORD block[6];
  dispatch_group_t group;
  const void *v10;
  NSObject *v11;
  uint8_t buf[8];
  uint8_t *v13;
  uint64_t v14;
  int v15;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEFAULT, "#I Snapshot: Begin", buf, 2u);
  }
  v4 = *(NSObject **)(v2 + 136);
  if (v4)
  {
    dispatch_retain(*(dispatch_object_t *)(v2 + 136));
    dispatch_group_enter(v4);
  }
  v5 = dispatch_group_create();
  *(_QWORD *)buf = 0;
  v13 = buf;
  v14 = 0x2000000000;
  v15 = -1;
  DumpingFile_sync = abm::BasebandTracingTask::createDumpingFile_sync((abm::BasebandTracingTask *)v2);
  *((_DWORD *)v13 + 6) = DumpingFile_sync;
  v11 = v5;
  if (v5)
    dispatch_retain(v5);
  v7 = *(const void **)(a1 + 40);
  v10 = v7;
  if (v7)
    CFRetain(v7);
  abm::BasebandTracingTask::snapshotInternal(v2, &v11, &v10);
  if (v7)
    CFRelease(v7);
  if (v5)
    dispatch_release(v5);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_53;
  block[3] = &unk_1E4A0E338;
  block[5] = v2;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  block[4] = buf;
  dispatch_group_notify(v5, *(dispatch_queue_t *)(v2 + 88), block);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  _Block_object_dispose(buf, 8);
  if (v5)
    dispatch_release(v5);
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
}

void sub_1A352C590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  va_list va;

  va_start(va, a9);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  if (v10)
  {
    dispatch_release(v10);
    _Block_object_dispose((const void *)(v11 - 64), 8);
    dispatch_release(v10);
    if (!v9)
      goto LABEL_6;
  }
  else
  {
    _Block_object_dispose((const void *)(v11 - 64), 8);
    if (!v9)
LABEL_6:
      _Unwind_Resume(a1);
  }
  dispatch_group_leave(v9);
  dispatch_release(v9);
  goto LABEL_6;
}

uint64_t abm::BasebandTracingTask::createDumpingFile_sync(abm::BasebandTracingTask *this)
{
  char *v2;
  size_t v3;
  std::error_code *v4;
  size_t v5;
  void **p_dst;
  uint64_t v7;
  uint64_t v8;
  int v9;
  std::__fs::filesystem::path *v10;
  const std::__fs::filesystem::path *v11;
  char *v12;
  size_t v13;
  size_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  NSObject *v20;
  std::__fs::filesystem::path *__dst;
  size_t v23;
  int64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = abm::trace::kDumpIndicationFilePath;
  v3 = strlen(abm::trace::kDumpIndicationFilePath);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v3;
  if (v3 >= 0x17)
  {
    v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v7 = v3 | 7;
    v8 = v7 + 1;
    p_dst = (void **)operator new(v7 + 1);
    v23 = v5;
    v24 = v8 | 0x8000000000000000;
    __dst = (std::__fs::filesystem::path *)p_dst;
    goto LABEL_8;
  }
  HIBYTE(v24) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_8:
    memmove(p_dst, v2, v5);
  *((_BYTE *)p_dst + v5) = 0;
  v9 = SHIBYTE(v24);
  v10 = __dst;
  if (v24 >= 0)
    v11 = (const std::__fs::filesystem::path *)&__dst;
  else
    v11 = __dst;
  if (remove(v11, v4))
    unlink((const char *)v11);
  if (v9 < 0)
    operator delete(v10);
  v12 = abm::trace::kDumpIndicationFilePath;
  v13 = strlen(abm::trace::kDumpIndicationFilePath);
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v14 = v13;
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    v15 = (void **)operator new(v16 + 1);
    v23 = v14;
    v24 = v17 | 0x8000000000000000;
    __dst = (std::__fs::filesystem::path *)v15;
    goto LABEL_23;
  }
  HIBYTE(v24) = v13;
  v15 = (void **)&__dst;
  if (v13)
LABEL_23:
    memmove(v15, v12, v14);
  *((_BYTE *)v15 + v14) = 0;
  if (v24 >= 0)
    v18 = (const char *)&__dst;
  else
    v18 = (const char *)__dst;
  v19 = open(v18, 512, 420);
  if (SHIBYTE(v24) < 0)
  {
    operator delete(__dst);
    v20 = *((_QWORD *)this + 5);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      return v19;
LABEL_31:
    LODWORD(__dst) = 67109120;
    HIDWORD(__dst) = v19;
    _os_log_impl(&dword_1A343C000, v20, OS_LOG_TYPE_DEFAULT, "#I Created dumping file. FD=%d", (uint8_t *)&__dst, 8u);
    return v19;
  }
  v20 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    goto LABEL_31;
  return v19;
}

void sub_1A352C860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_53(uint64_t a1)
{
  abm::BasebandTracingTask *v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *(abm::BasebandTracingTask **)(a1 + 40);
  v3 = *((_QWORD *)v2 + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEFAULT, "#I Snapshot: Complete", v4, 2u);
  }
  abm::BasebandTracingTask::removeDumpingFile_sync(v2, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_57(_QWORD *a1, uint64_t a2, void **a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  uint64_t v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  unint64_t v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  xpc_object_t v19;
  void *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  NSObject *v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  void *v32;
  _QWORD aBlock[6];
  std::__shared_weak_count *v34;
  xpc_object_t object;
  void *v36;
  void *v37;
  NSObject *v38;
  NSObject *v39;
  unint64_t v40;
  unint64_t v41;
  std::__shared_weak_count *v43;
  __int128 buf;
  void (*v45)(uint64_t);
  void *v46;
  const void *v47;
  xpc_object_t v48;
  int v49;

  v5 = (std::__shared_weak_count *)a1[6];
  if (!v5)
    return;
  v8 = a1[4];
  v9 = std::__shared_weak_count::lock(v5);
  v43 = v9;
  if (!v9)
    return;
  if (!a1[5])
  {
    v18 = v9;
LABEL_53:
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    return;
  }
  v10 = *(NSObject **)(v8 + 40);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1A343C000, v10, OS_LOG_TYPE_DEFAULT, "#I Request to collect baseband logs alone", (uint8_t *)&buf, 2u);
  }
  HIBYTE(v45) = 13;
  strcpy((char *)&buf, "BasebandTrace");
  v40 = 0xAAAAAAAAAAAAAAAALL;
  v41 = 0xAAAAAAAAAAAAAAAALL;
  abm::BasebandTracingTask::getTrace((char *)&buf, v8, &v40);
  v11 = v40;
  if (v40)
  {
    v12 = *(NSObject **)(v8 + 112);
    v39 = v12;
    if (v12)
    {
      dispatch_retain(v12);
      dispatch_group_enter(v12);
    }
    if (*(_QWORD *)a4)
    {
      v13 = _Block_copy(*(const void **)a4);
      v14 = *(NSObject **)(a4 + 8);
      v37 = v13;
      v38 = v14;
      if (!v14)
      {
LABEL_12:
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_58;
        aBlock[3] = &__block_descriptor_tmp_59_1;
        aBlock[4] = v8;
        aBlock[5] = v11;
        v34 = (std::__shared_weak_count *)v41;
        if (v41)
        {
          v15 = (unint64_t *)(v41 + 8);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        v17 = *a3;
        object = v17;
        if (v17)
          xpc_retain(v17);
        else
          object = xpc_null_create();
        v21 = _Block_copy(aBlock);
        v36 = v21;
        v32 = 0;
        abm::BasebandTracingTask::performWork(v8, &v39, 9, (uint64_t)&v37, &v36, &v32);
        if (v21)
          _Block_release(v21);
        if (v14)
          dispatch_release(v14);
        if (v13)
          _Block_release(v13);
        if (v12)
        {
          dispatch_group_leave(v12);
          dispatch_release(v12);
        }
        xpc_release(object);
        object = 0;
        v22 = v34;
        if (v34)
        {
          v23 = (unint64_t *)&v34->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        goto LABEL_47;
      }
    }
    else
    {
      v13 = 0;
      v14 = *(NSObject **)(a4 + 8);
      v37 = 0;
      v38 = v14;
      if (!v14)
        goto LABEL_12;
    }
    dispatch_retain(v14);
    goto LABEL_12;
  }
  v19 = xpc_null_create();
  if (*(_QWORD *)a4)
    v20 = _Block_copy(*(const void **)a4);
  else
    v20 = 0;
  v25 = *(NSObject **)(a4 + 8);
  *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
  *((_QWORD *)&buf + 1) = 1174405120;
  v45 = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke_3;
  v46 = &__block_descriptor_tmp_127;
  if (!v20)
  {
    v49 = -534716416;
    v47 = 0;
    v48 = v19;
    if (v19)
      goto LABEL_39;
LABEL_41:
    v48 = xpc_null_create();
    goto LABEL_42;
  }
  v26 = _Block_copy(v20);
  v49 = -534716416;
  v47 = v26;
  v48 = v19;
  if (!v19)
    goto LABEL_41;
LABEL_39:
  xpc_retain(v19);
LABEL_42:
  dispatch_async(v25, &buf);
  xpc_release(v48);
  v48 = 0;
  if (v47)
    _Block_release(v47);
  if (v20)
    _Block_release(v20);
  xpc_release(v19);
LABEL_47:
  v27 = (std::__shared_weak_count *)v41;
  if (v41)
  {
    v28 = (unint64_t *)(v41 + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v18 = v43;
  if (v43)
    goto LABEL_53;
}

void sub_1A352CCE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void abm::BasebandTracingTask::getTraceNoAssert(char *a1@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  abm::BasebandTracingTask::getTrace(a1, a2, a3);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_58(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  CFTypeRef v7;
  CFTypeID v8;
  xpc_object_t object;
  uint8_t buf[8];
  CFTypeRef cf;
  dispatch_object_t v12;

  v2 = a1[4];
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEFAULT, "#I Snapshot BB: Begin", buf, 2u);
  }
  v4 = a1[5];
  v5 = *(NSObject **)(v2 + 136);
  v12 = v5;
  if (v5)
    dispatch_retain(v5);
  v6 = (void *)a1[7];
  object = v6;
  if (v6)
    xpc_retain(v6);
  else
    object = xpc_null_create();
  xpc::bridge();
  v7 = *(CFTypeRef *)buf;
  if (*(_QWORD *)buf && (v8 = CFGetTypeID(*(CFTypeRef *)buf), v8 == CFDictionaryGetTypeID()))
  {
    cf = v7;
    CFRetain(v7);
  }
  else
  {
    cf = 0;
  }
  (*(void (**)(uint64_t, dispatch_object_t *, CFTypeRef *))(*(_QWORD *)v4 + 120))(v4, &v12, &cf);
  if (cf)
    CFRelease(cf);
  if (*(_QWORD *)buf)
    CFRelease(*(CFTypeRef *)buf);
  xpc_release(object);
  if (v12)
    dispatch_release(v12);
}

void sub_1A352CE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, const void *a11, uint64_t a12, const void *a13, dispatch_object_t a14)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a13);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef(&a11);
  xpc_release(object);
  if (a14)
    dispatch_release(a14);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_40c32_ZTSNSt3__110shared_ptrI5TraceEE56c15_ZTSN3xpc4dictE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *v6;
  xpc_object_t result;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (void *)a2[7];
  a1[7] = v6;
  if (v6)
    return xpc_retain(v6);
  result = xpc_null_create();
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c32_ZTSNSt3__110shared_ptrI5TraceEE56c15_ZTSN3xpc4dictE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(_QWORD *)(a1 + 56) = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_61(_QWORD *a1, uint64_t a2, xpc_object_t *a3, uint64_t a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  xpc_object_t value;
  NSObject *v13;
  uint64_t v14;
  _QWORD *v15;
  NSObject *v16;
  void *v17;
  NSObject *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  _QWORD v25[4];
  dispatch_group_t group;
  void *aBlock;
  dispatch_object_t object;
  _QWORD v29[4];
  dispatch_object_t v30;
  std::string __p[2];
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint8_t buf[8];
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  void *v37;
  _QWORD *v38;

  v5 = a1[4];
  v32 = 0;
  v33 = 0;
  v6 = (std::__shared_weak_count *)a1[6];
  if (v6)
  {
    v33 = std::__shared_weak_count::lock(v6);
    if (!v33)
      return;
    v32 = a1[5];
    if (v32)
    {
      v9 = *(NSObject **)(v5 + 112);
      if (v9)
      {
        dispatch_retain(*(dispatch_object_t *)(v5 + 112));
        dispatch_group_enter(v9);
      }
      v10 = dispatch_group_create();
      v11 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A343C000, v11, OS_LOG_TYPE_DEFAULT, "#I Request to print trace state", buf, 2u);
      }
      memset(&__p[1], 170, sizeof(std::string));
      value = xpc_dictionary_get_value(*a3, "DumpStateReason");
      *(_QWORD *)buf = value;
      if (value)
        xpc_retain(value);
      else
        *(_QWORD *)buf = xpc_null_create();
      xpc::dyn_cast_or_default();
      xpc_release(*(xpc_object_t *)buf);
      v13 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A343C000, v13, OS_LOG_TYPE_DEFAULT, "#I --------------- Trace state ---------------", buf, 2u);
      }
      v14 = MEMORY[0x1E0C809B0];
      v29[0] = MEMORY[0x1E0C809B0];
      v29[1] = 1174405120;
      v29[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_63;
      v29[3] = &__block_descriptor_tmp_65_1;
      v30 = v10;
      if (v10)
        dispatch_retain(v10);
      if (SHIBYTE(__p[1].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(__p, __p[1].__r_.__value_.__l.__data_, __p[1].__r_.__value_.__l.__size_);
      else
        __p[0] = __p[1];
      v15 = *(_QWORD **)(v5 + 152);
      *(_QWORD *)buf = v14;
      v35 = 0x40000000;
      v36 = ___ZN3abm19BasebandTracingTask14doForAllTracesIU13block_pointerFvNSt3__110shared_ptrI5TraceEEEEEvT__block_invoke;
      v37 = &unk_1E4A0EA20;
      v38 = v29;
      if (v15 != (_QWORD *)(v5 + 160))
      {
        do
        {
          v36((uint64_t)buf, (uint64_t)(v15 + 4));
          v22 = (_QWORD *)v15[1];
          if (v22)
          {
            do
            {
              v23 = v22;
              v22 = (_QWORD *)*v22;
            }
            while (v22);
          }
          else
          {
            do
            {
              v23 = (_QWORD *)v15[2];
              v24 = *v23 == (_QWORD)v15;
              v15 = v23;
            }
            while (!v24);
          }
          v15 = v23;
        }
        while (v23 != (_QWORD *)(v5 + 160));
      }
      v16 = *(NSObject **)(v5 + 88);
      v25[0] = v14;
      v25[1] = 1174405120;
      v25[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_66;
      v25[3] = &__block_descriptor_tmp_67_1;
      group = v9;
      if (v9)
      {
        dispatch_retain(v9);
        dispatch_group_enter(v9);
      }
      v17 = *(void **)a4;
      if (*(_QWORD *)a4)
        v17 = _Block_copy(v17);
      v18 = *(NSObject **)(a4 + 8);
      aBlock = v17;
      object = v18;
      if (v18)
        dispatch_retain(v18);
      dispatch_group_notify(v10, v16, v25);
      if (object)
        dispatch_release(object);
      if (aBlock)
        _Block_release(aBlock);
      if (group)
      {
        dispatch_group_leave(group);
        if (group)
          dispatch_release(group);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (v30)
        dispatch_release(v30);
      if (SHIBYTE(__p[1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[1].__r_.__value_.__l.__data_);
      if (v10)
        dispatch_release(v10);
      if (v9)
      {
        dispatch_group_leave(v9);
        dispatch_release(v9);
      }
    }
  }
  v19 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1A352D2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, dispatch_object_t object,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  NSObject *v33;
  NSObject *v34;

  if (object)
  {
    dispatch_release(object);
    if ((a32 & 0x80000000) == 0)
    {
LABEL_4:
      if (v34)
      {
        dispatch_release(v34);
        if (!v33)
        {
LABEL_6:
          std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
          _Unwind_Resume(a1);
        }
      }
      else if (!v33)
      {
        goto LABEL_6;
      }
      dispatch_group_leave(v33);
      dispatch_release(v33);
      std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
      _Unwind_Resume(a1);
    }
  }
  else if ((a32 & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(__p);
  goto LABEL_4;
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_63(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  NSObject *v4;
  std::string __p;
  dispatch_object_t object;

  v3 = *a2;
  v4 = *(NSObject **)(a1 + 32);
  object = v4;
  if (v4)
    dispatch_retain(v4);
  if (*(char *)(a1 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
  else
    __p = *(std::string *)(a1 + 40);
  (*(void (**)(uint64_t, dispatch_object_t *, std::string *))(*(_QWORD *)v3 + 128))(v3, &object, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (object)
    dispatch_release(object);
}

void sub_1A352D410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, dispatch_object_t object)
{
  if (!object)
    _Unwind_Resume(exception_object);
  dispatch_release(object);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c21_ZTSN8dispatch5groupE40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  std::string *v5;
  __int128 v6;

  v4 = *(NSObject **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    dispatch_retain(v4);
  v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1A352D4BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  NSObject *v3;

  v3 = *(NSObject **)(v1 + 32);
  if (v3)
    dispatch_release(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c21_ZTSN8dispatch5groupE40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  NSObject *v2;

  if ((*(char *)(a1 + 63) & 0x80000000) == 0)
  {
    v2 = *(NSObject **)(a1 + 32);
    if (!v2)
      return;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 40));
  v2 = *(NSObject **)(a1 + 32);
  if (v2)
LABEL_3:
    dispatch_release(v2);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_66(uint64_t a1)
{
  xpc_object_t v2;
  const void *v3;
  void *v4;
  NSObject *v5;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  int v9;

  v2 = xpc_null_create();
  v3 = *(const void **)(a1 + 40);
  if (v3)
    v4 = _Block_copy(v3);
  else
    v4 = 0;
  v5 = *(NSObject **)(a1 + 48);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke_3;
  block[3] = &__block_descriptor_tmp_127;
  if (v4)
  {
    v9 = 0;
    aBlock = _Block_copy(v4);
    object = v2;
    if (v2)
    {
LABEL_6:
      xpc_retain(v2);
      goto LABEL_9;
    }
  }
  else
  {
    v9 = 0;
    aBlock = 0;
    object = v2;
    if (v2)
      goto LABEL_6;
  }
  object = xpc_null_create();
LABEL_9:
  dispatch_async(v5, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v4)
    _Block_release(v4);
  xpc_release(v2);
}

void __copy_helper_block_e8_32c30_ZTSN8dispatch13group_sessionE40c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;

  v4 = a2[4];
  a1[4] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = a1[4];
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = (void *)a2[5];
  if (v6)
    v6 = _Block_copy(v6);
  v7 = a2[6];
  a1[5] = v6;
  a1[6] = v7;
  if (v7)
    dispatch_retain(v7);
}

void __destroy_helper_block_e8_32c30_ZTSN8dispatch13group_sessionE40c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  NSObject *v4;
  NSObject *v5;

  v2 = a1[6];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[5];
  if (v3)
    _Block_release(v3);
  v4 = a1[4];
  if (v4)
  {
    dispatch_group_leave(v4);
    v5 = a1[4];
    if (v5)
      dispatch_release(v5);
  }
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_69(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  uint64_t *v13;
  NSObject *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD v17[5];
  dispatch_group_t group;
  void *aBlock;
  dispatch_object_t object;
  uint8_t buf[16];

  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v5);
    if (v8)
    {
      v9 = v8;
      if (a1[5])
      {
        v10 = *(NSObject **)(v7 + 40);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1A343C000, v10, OS_LOG_TYPE_DEFAULT, "#I Request to get last crash reason", buf, 2u);
        }
        v11 = *(NSObject **)(v7 + 112);
        if (v11)
        {
          dispatch_retain(*(dispatch_object_t *)(v7 + 112));
          dispatch_group_enter(v11);
        }
        v17[0] = MEMORY[0x1E0C809B0];
        v17[1] = 1174405120;
        v17[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_70;
        v17[3] = &__block_descriptor_tmp_71_0;
        v17[4] = v7;
        group = v11;
        if (v11)
        {
          dispatch_retain(v11);
          dispatch_group_enter(v11);
        }
        v12 = *(void **)a4;
        if (*(_QWORD *)a4)
          v12 = _Block_copy(v12);
        v13 = (uint64_t *)(v7 + 72);
        v14 = *(NSObject **)(a4 + 8);
        aBlock = v12;
        object = v14;
        if (v14)
          dispatch_retain(v14);
        ctu::SharedSynchronizable<abm::HelperTask>::execute_wrapped(v13, (uint64_t)v17);
        if (object)
          dispatch_release(object);
        if (aBlock)
          _Block_release(aBlock);
        if (group)
        {
          dispatch_group_leave(group);
          if (group)
            dispatch_release(group);
        }
        if (v11)
        {
          dispatch_group_leave(v11);
          dispatch_release(v11);
        }
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_70(_QWORD *a1)
{
  uint64_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  const char *v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  const void *v9;
  void *v10;
  NSObject *v11;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  int v15;

  v2 = a1[4];
  v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A85902BC](v3) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v3);
      v4 = v3;
    }
    else
    {
      v4 = xpc_null_create();
    }
  }
  else
  {
    v4 = xpc_null_create();
    v3 = 0;
  }
  xpc_release(v3);
  v5 = (const char *)(v2 + 224);
  if (*(char *)(v2 + 247) < 0)
    v5 = *(const char **)v5;
  v6 = xpc_string_create(v5);
  if (!v6)
    v6 = xpc_null_create();
  xpc_dictionary_set_value(v4, "BasebandCrashReason", v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  if (v4)
  {
    xpc_retain(v4);
    v8 = v4;
    v9 = (const void *)a1[6];
    if (v9)
    {
LABEL_13:
      v10 = _Block_copy(v9);
      goto LABEL_16;
    }
  }
  else
  {
    v8 = xpc_null_create();
    v9 = (const void *)a1[6];
    if (v9)
      goto LABEL_13;
  }
  v10 = 0;
LABEL_16:
  v11 = a1[7];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke_3;
  block[3] = &__block_descriptor_tmp_127;
  if (v10)
  {
    v15 = 0;
    aBlock = _Block_copy(v10);
    object = v8;
    if (v8)
    {
LABEL_18:
      xpc_retain(v8);
      goto LABEL_21;
    }
  }
  else
  {
    v15 = 0;
    aBlock = 0;
    object = v8;
    if (v8)
      goto LABEL_18;
  }
  object = xpc_null_create();
LABEL_21:
  dispatch_async(v11, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v10)
    _Block_release(v10);
  xpc_release(v8);
  xpc_release(v4);
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;

  v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = a1[5];
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = (void *)a2[6];
  if (v6)
    v6 = _Block_copy(v6);
  v7 = a2[7];
  a1[6] = v6;
  a1[7] = v7;
  if (v7)
    dispatch_retain(v7);
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  NSObject *v4;
  NSObject *v5;

  v2 = a1[7];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[6];
  if (v3)
    _Block_release(v3);
  v4 = a1[5];
  if (v4)
  {
    dispatch_group_leave(v4);
    v5 = a1[5];
    if (v5)
      dispatch_release(v5);
  }
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_73(_QWORD *a1, uint64_t a2, xpc_object_t *a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  xpc_object_t value;
  NSObject *v12;
  std::string *p_p;
  void *v14;
  NSObject *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *v18;
  NSObject *v19;
  std::string v20;
  std::string __p;
  std::__shared_weak_count *v23;
  xpc_object_t object[4];

  object[3] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v8 = a1[4];
    v9 = std::__shared_weak_count::lock(v5);
    v23 = v9;
    if (v9)
    {
      v10 = v9;
      if (!a1[5])
        goto LABEL_23;
      memset(&__p, 170, sizeof(__p));
      value = xpc_dictionary_get_value(*a3, "BasebandCrashReason");
      object[0] = value;
      if (value)
        xpc_retain(value);
      else
        object[0] = xpc_null_create();
      xpc::dyn_cast_or_default();
      xpc_release(object[0]);
      v12 = *(NSObject **)(v8 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        LODWORD(object[0]) = 136446210;
        *(xpc_object_t *)((char *)object + 4) = p_p;
        _os_log_impl(&dword_1A343C000, v12, OS_LOG_TYPE_DEFAULT, "#I Setting last crash reason to %{public}s", (uint8_t *)object, 0xCu);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v20 = __p;
      if (*(_QWORD *)a4)
      {
        v14 = _Block_copy(*(const void **)a4);
        v15 = *(NSObject **)(a4 + 8);
        v18 = v14;
        v19 = v15;
        if (!v15)
          goto LABEL_17;
      }
      else
      {
        v14 = 0;
        v15 = *(NSObject **)(a4 + 8);
        v18 = 0;
        v19 = v15;
        if (!v15)
        {
LABEL_17:
          abm::BasebandTracingTask::setLastCrashReason(v8, (uint64_t)&v20, (uint64_t)&v18);
          if (v15)
            dispatch_release(v15);
          if (v14)
            _Block_release(v14);
          if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v20.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_23;
          }
          else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_23;
          }
          operator delete(__p.__r_.__value_.__l.__data_);
LABEL_23:
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
          return;
        }
      }
      dispatch_retain(v15);
      goto LABEL_17;
    }
  }
}

void sub_1A352DD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,xpc_object_t object)
{
  if (a22 < 0)
    operator delete(__p);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void abm::BasebandTracingTask::setLastCrashReason(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t *v6;
  NSObject *v7;
  _QWORD v8[5];
  std::string __p;
  void *aBlock;
  dispatch_object_t object;

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v8[2] = ___ZN3abm19BasebandTracingTask18setLastCrashReasonENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_108;
  v8[4] = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v5 = *(void **)a3;
    if (!*(_QWORD *)a3)
      goto LABEL_6;
    goto LABEL_5;
  }
  __p = *(std::string *)a2;
  v5 = *(void **)a3;
  if (*(_QWORD *)a3)
LABEL_5:
    v5 = _Block_copy(v5);
LABEL_6:
  v6 = (uint64_t *)(a1 + 72);
  v7 = *(NSObject **)(a3 + 8);
  aBlock = v5;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  ctu::SharedSynchronizable<abm::HelperTask>::execute_wrapped(v6, (uint64_t)v8);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_75(_QWORD *a1, uint64_t a2, xpc_object_t *a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  xpc_object_t value;
  xpc_object_t v12;
  xpc_object_t v13;
  NSObject *v14;
  std::string *v15;
  std::string *v16;
  std::string *p_p;
  std::string::size_type size;
  std::string::size_type v19;
  std::string::size_type v20;
  NSObject *v21;
  void *v22;
  NSObject *v23;
  xpc_object_t v24;
  void *v25;
  NSObject *v26;
  void *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  void *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  _QWORD aBlock[5];
  std::string v35;
  std::string v36;
  std::string v37;
  void *v38;
  dispatch_object_t v39;
  void *v40;
  void *v41;
  dispatch_object_t object;
  NSObject *v43;
  std::string __p;
  std::string v45;
  std::string v46;
  std::__shared_weak_count *v48;
  _BYTE buf[24];
  std::string *v50;
  const void *v51;
  xpc_object_t v52;
  int v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v8 = a1[4];
    v9 = std::__shared_weak_count::lock(v5);
    v48 = v9;
    if (v9)
    {
      v10 = v9;
      if (!a1[5])
        goto LABEL_54;
      memset(&v46, 170, sizeof(v46));
      value = xpc_dictionary_get_value(*a3, "TraceName");
      *(_QWORD *)buf = value;
      if (value)
        xpc_retain(value);
      else
        *(_QWORD *)buf = xpc_null_create();
      xpc::dyn_cast_or_default();
      xpc_release(*(xpc_object_t *)buf);
      memset(&v45, 170, sizeof(v45));
      v12 = xpc_dictionary_get_value(*a3, "PropertyKey");
      *(_QWORD *)buf = v12;
      if (v12)
        xpc_retain(v12);
      else
        *(_QWORD *)buf = xpc_null_create();
      xpc::dyn_cast_or_default();
      xpc_release(*(xpc_object_t *)buf);
      memset(&__p, 170, sizeof(__p));
      v13 = xpc_dictionary_get_value(*a3, "PropertyValue");
      *(_QWORD *)buf = v13;
      if (v13)
        xpc_retain(v13);
      else
        *(_QWORD *)buf = xpc_null_create();
      xpc::dyn_cast_or_default();
      xpc_release(*(xpc_object_t *)buf);
      v14 = *(NSObject **)(v8 + 40);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        v15 = &v46;
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v15 = (std::string *)v46.__r_.__value_.__r.__words[0];
        v16 = &v45;
        if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v16 = (std::string *)v45.__r_.__value_.__r.__words[0];
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v15;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v16;
        *(_WORD *)&buf[22] = 2080;
        v50 = p_p;
        _os_log_impl(&dword_1A343C000, v14, OS_LOG_TYPE_DEFAULT, "#I Request to set property: name=%s, key=%s, value=%s", buf, 0x20u);
      }
      size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v46.__r_.__value_.__l.__size_;
      if (size)
      {
        v19 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
        if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v19 = v45.__r_.__value_.__l.__size_;
        if (v19)
        {
          v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v20 = __p.__r_.__value_.__l.__size_;
          if (v20)
          {
            v21 = *(NSObject **)(v8 + 112);
            v43 = v21;
            if (v21)
            {
              dispatch_retain(v21);
              dispatch_group_enter(v21);
            }
            v22 = *(void **)a4;
            if (*(_QWORD *)a4)
              v22 = _Block_copy(v22);
            v23 = *(NSObject **)(a4 + 8);
            v41 = v22;
            object = v23;
            if (v23)
              dispatch_retain(v23);
            aBlock[0] = MEMORY[0x1E0C809B0];
            aBlock[1] = 1174405120;
            aBlock[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_76;
            aBlock[3] = &__block_descriptor_tmp_79;
            aBlock[4] = v8;
            if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v35, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
            else
              v35 = v46;
            if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v36, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
            else
              v36 = v45;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v37, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            else
              v37 = __p;
            v30 = *(void **)a4;
            if (*(_QWORD *)a4)
              v30 = _Block_copy(v30);
            v31 = *(NSObject **)(a4 + 8);
            v38 = v30;
            v39 = v31;
            if (v31)
              dispatch_retain(v31);
            v32 = _Block_copy(aBlock);
            v40 = v32;
            v33 = 0;
            abm::BasebandTracingTask::performWork(v8, &v43, 10, (uint64_t)&v41, &v40, &v33);
            if (v32)
              _Block_release(v32);
            if (object)
              dispatch_release(object);
            if (v41)
              _Block_release(v41);
            if (v21)
            {
              dispatch_group_leave(v21);
              dispatch_release(v21);
            }
            if (v39)
              dispatch_release(v39);
            if (v38)
              _Block_release(v38);
            if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v37.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_87:
                if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_51;
LABEL_91:
                operator delete(v35.__r_.__value_.__l.__data_);
                goto LABEL_51;
              }
            }
            else if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_87;
            }
            operator delete(v36.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_51;
            goto LABEL_91;
          }
        }
      }
      v24 = xpc_null_create();
      if (*(_QWORD *)a4)
        v25 = _Block_copy(*(const void **)a4);
      else
        v25 = 0;
      v26 = *(NSObject **)(a4 + 8);
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 1174405120;
      *(_QWORD *)&buf[16] = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke_3;
      v50 = (std::string *)&__block_descriptor_tmp_127;
      if (v25)
      {
        v27 = _Block_copy(v25);
        v53 = -534716414;
        v51 = v27;
        v52 = v24;
        if (v24)
        {
LABEL_43:
          xpc_retain(v24);
LABEL_46:
          dispatch_async(v26, buf);
          xpc_release(v52);
          v52 = 0;
          if (v51)
            _Block_release(v51);
          if (v25)
            _Block_release(v25);
          xpc_release(v24);
LABEL_51:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_53:
              if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_54;
LABEL_61:
              operator delete(v46.__r_.__value_.__l.__data_);
LABEL_54:
              p_shared_owners = (unint64_t *)&v10->__shared_owners_;
              do
                v29 = __ldaxr(p_shared_owners);
              while (__stlxr(v29 - 1, p_shared_owners));
              if (!v29)
              {
                ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
                std::__shared_weak_count::__release_weak(v10);
              }
              return;
            }
          }
          else if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_53;
          }
          operator delete(v45.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_54;
          goto LABEL_61;
        }
      }
      else
      {
        v53 = -534716414;
        v51 = 0;
        v52 = v24;
        if (v24)
          goto LABEL_43;
      }
      v52 = xpc_null_create();
      goto LABEL_46;
    }
  }
}

void sub_1A352E490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  NSObject *v41;
  uint64_t v42;

  if (a26 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      dispatch::callback<void({block_pointer})(int,xpc::dict)>::~callback((uint64_t)&a33);
      if (!v41)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  dispatch::callback<void({block_pointer})(int,xpc::dict)>::~callback((uint64_t)&a33);
  if (!v41)
  {
LABEL_4:
    if ((a41 & 0x80000000) == 0)
    {
LABEL_10:
      if (*(char *)(v42 - 153) < 0)
        operator delete(*(void **)(v42 - 176));
      if (*(char *)(v42 - 129) < 0)
        operator delete(*(void **)(v42 - 152));
      std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v42 - 128);
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(a36);
    goto LABEL_10;
  }
LABEL_8:
  dispatch_group_leave(v41);
  dispatch_release(v41);
  if ((a41 & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_76(_QWORD *a1)
{
  dispatch_queue_t *v2;
  NSObject *v3;
  char v4;
  const void *v5;
  void *v6;
  NSObject *v7;
  _QWORD v8[4];
  void *aBlock;
  dispatch_object_t object;
  char v11;
  dispatch_object_t v12;

  v2 = (dispatch_queue_t *)a1[4];
  v3 = v2[17];
  v12 = v3;
  if (v3)
    dispatch_retain(v3);
  v4 = ((uint64_t (*)(dispatch_queue_t *, dispatch_object_t *, _QWORD *, _QWORD *, _QWORD *))(*v2)[10].isa)(v2, &v12, a1 + 5, a1 + 8, a1 + 11);
  if (v12)
    dispatch_release(v12);
  v5 = (const void *)a1[14];
  if (v5 && a1[15])
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 1174405120;
    v8[2] = ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_2_77;
    v8[3] = &__block_descriptor_tmp_78_1;
    v6 = _Block_copy(v5);
    v7 = a1[15];
    aBlock = v6;
    object = v7;
    if (v7)
      dispatch_retain(v7);
    v11 = v4;
    dispatch_group_notify(v2[17], v2[11], v8);
    if (object)
      dispatch_release(object);
    if (aBlock)
      _Block_release(aBlock);
  }
}

void sub_1A352E6FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  NSObject *v3;

  v3 = *(NSObject **)(v1 - 40);
  if (v3)
    dispatch_release(v3);
  _Unwind_Resume(exception_object);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_2_77(uint64_t a1)
{
  int v2;
  xpc_object_t v3;
  const void *v4;
  void *v5;
  NSObject *v6;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  int v10;

  if (*(_BYTE *)(a1 + 48))
    v2 = 0;
  else
    v2 = -534716416;
  v3 = xpc_null_create();
  v4 = *(const void **)(a1 + 32);
  if (v4)
    v5 = _Block_copy(v4);
  else
    v5 = 0;
  v6 = *(NSObject **)(a1 + 40);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke_3;
  block[3] = &__block_descriptor_tmp_127;
  if (v5)
  {
    v10 = v2;
    aBlock = _Block_copy(v5);
    object = v3;
    if (v3)
    {
LABEL_9:
      xpc_retain(v3);
      goto LABEL_12;
    }
  }
  else
  {
    v10 = v2;
    aBlock = 0;
    object = v3;
    if (v3)
      goto LABEL_9;
  }
  object = xpc_null_create();
LABEL_12:
  dispatch_async(v6, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  xpc_release(v3);
}

void __copy_helper_block_e8_32c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 32);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_32c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 40);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 32);
  if (v3)
    _Block_release(v3);
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE112c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  void *v9;
  NSObject *v10;

  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
    v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
    v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(_OWORD *)(a2 + 64);
      v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 80);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
LABEL_6:
  v7 = (std::string *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  v9 = *(void **)(a2 + 112);
  if (v9)
    v9 = _Block_copy(v9);
  v10 = *(NSObject **)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v9;
  *(_QWORD *)(a1 + 120) = v10;
  if (v10)
    dispatch_retain(v10);
}

void sub_1A352E9A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 87) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 63) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 63) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE112c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 120);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 112);
  if (v3)
    _Block_release(v3);
  if (*(char *)(a1 + 111) < 0)
  {
    operator delete(*(void **)(a1 + 88));
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*(char *)(a1 + 63) & 0x80000000) == 0)
        return;
LABEL_11:
      operator delete(*(void **)(a1 + 40));
      return;
    }
  }
  else if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_11;
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_81(_QWORD *a1, uint64_t a2, xpc_object_t *a3, uint64_t a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  NSObject *v9;
  NSObject *v10;
  xpc_object_t value;
  xpc_object_t v12;
  void *v13;
  void *v14;
  xpc_object_t v15;
  int v16;
  NSObject *v17;
  void **v18;
  void **v19;
  void **v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  void *v24;
  NSObject *v25;
  void *v26;
  int v27;
  xpc_object_t v28;
  void **v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  const void *v33;
  void *v34;
  NSObject *v35;
  void *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  void *__p[2];
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void *v47[3];
  void *v48[3];
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint8_t buf[8];
  _BYTE v52[32];
  xpc_object_t object;
  int v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v5 = a1[4];
  v49 = 0;
  v50 = 0;
  v6 = (std::__shared_weak_count *)a1[6];
  if (!v6)
    goto LABEL_83;
  v50 = std::__shared_weak_count::lock(v6);
  if (!v50)
    return;
  v49 = a1[5];
  if (!v49)
    goto LABEL_83;
  v9 = *(NSObject **)(v5 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v9, OS_LOG_TYPE_DEFAULT, "#I Request to get property", buf, 2u);
  }
  v10 = *(NSObject **)(v5 + 112);
  if (v10)
  {
    dispatch_retain(*(dispatch_object_t *)(v5 + 112));
    dispatch_group_enter(v10);
  }
  memset(v48, 170, sizeof(v48));
  value = xpc_dictionary_get_value(*a3, "TraceName");
  *(_QWORD *)buf = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)buf = xpc_null_create();
  xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)buf);
  memset(v47, 170, sizeof(v47));
  v12 = xpc_dictionary_get_value(*a3, "PropertyKey");
  *(_QWORD *)buf = v12;
  if (v12)
    xpc_retain(v12);
  else
    *(_QWORD *)buf = xpc_null_create();
  xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)buf);
  v13 = (void *)HIBYTE(v48[2]);
  if (SHIBYTE(v48[2]) < 0)
    v13 = v48[1];
  if (!v13)
    goto LABEL_34;
  v14 = (void *)HIBYTE(v47[2]);
  if (SHIBYTE(v47[2]) < 0)
    v14 = v47[1];
  if (!v14)
  {
LABEL_34:
    v23 = xpc_null_create();
    if (*(_QWORD *)a4)
      v24 = _Block_copy(*(const void **)a4);
    else
      v24 = 0;
    v25 = *(NSObject **)(a4 + 8);
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)v52 = 1174405120;
    *(_QWORD *)&v52[8] = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke_3;
    *(_QWORD *)&v52[16] = &__block_descriptor_tmp_127;
    if (v24)
    {
      v26 = _Block_copy(v24);
      v54 = -534716414;
      *(_QWORD *)&v52[24] = v26;
      object = v23;
      if (v23)
      {
LABEL_39:
        xpc_retain(v23);
LABEL_42:
        dispatch_async(v25, buf);
        xpc_release(object);
        object = 0;
        if (*(_QWORD *)&v52[24])
          _Block_release(*(const void **)&v52[24]);
        if (v24)
          _Block_release(v24);
        xpc_release(v23);
        goto LABEL_79;
      }
    }
    else
    {
      v54 = -534716414;
      *(_QWORD *)&v52[24] = 0;
      object = v23;
      if (v23)
        goto LABEL_39;
    }
    object = xpc_null_create();
    goto LABEL_42;
  }
  v15 = xpc_null_create();
  v45 = 0xAAAAAAAAAAAAAAAALL;
  v46 = 0xAAAAAAAAAAAAAAAALL;
  abm::BasebandTracingTask::getTrace((char *)v48, v5, &v45);
  if (v45)
  {
    __p[0] = 0;
    __p[1] = 0;
    v44 = 0;
    v16 = (*(uint64_t (**)(unint64_t, void **, void **))(*(_QWORD *)v45 + 144))(v45, v47, __p);
    v17 = *(NSObject **)(v5 + 40);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v18 = v48;
      if (SHIBYTE(v48[2]) < 0)
        v18 = (void **)v48[0];
      v19 = v47;
      if (SHIBYTE(v47[2]) < 0)
        v19 = (void **)v47[0];
      v20 = __p;
      if (v44 < 0)
        v20 = (void **)__p[0];
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v16;
      *(_WORD *)v52 = 2080;
      *(_QWORD *)&v52[2] = v18;
      *(_WORD *)&v52[10] = 2080;
      *(_QWORD *)&v52[12] = v19;
      *(_WORD *)&v52[20] = 2080;
      *(_QWORD *)&v52[22] = v20;
      _os_log_impl(&dword_1A343C000, v17, OS_LOG_TYPE_DEFAULT, "#I Get property; Success=%d Trace=%s Key=%s Value=%s",
        buf,
        0x26u);
    }
    if (v16)
    {
      v21 = xpc_dictionary_create(0, 0, 0);
      if (v21 || (v21 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1A85902BC](v21) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v21);
          v22 = v21;
        }
        else
        {
          v22 = xpc_null_create();
        }
      }
      else
      {
        v22 = xpc_null_create();
        v21 = 0;
      }
      xpc_release(v21);
      v28 = xpc_null_create();
      xpc_release(v15);
      xpc_release(v28);
      if (v44 >= 0)
        v29 = __p;
      else
        v29 = (void **)__p[0];
      v30 = xpc_string_create((const char *)v29);
      if (!v30)
        v30 = xpc_null_create();
      xpc_dictionary_set_value(v22, "PropertyValue", v30);
      v31 = xpc_null_create();
      xpc_release(v30);
      xpc_release(v31);
      v27 = 0;
      v15 = v22;
    }
    else
    {
      v27 = -534716416;
    }
    if (SHIBYTE(v44) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v27 = -534716416;
  }
  if (v15)
  {
    xpc_retain(v15);
    v32 = v15;
    v33 = *(const void **)a4;
    if (*(_QWORD *)a4)
    {
LABEL_61:
      v34 = _Block_copy(v33);
      goto LABEL_64;
    }
  }
  else
  {
    v32 = xpc_null_create();
    v33 = *(const void **)a4;
    if (*(_QWORD *)a4)
      goto LABEL_61;
  }
  v34 = 0;
LABEL_64:
  v35 = *(NSObject **)(a4 + 8);
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)v52 = 1174405120;
  *(_QWORD *)&v52[8] = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke_3;
  *(_QWORD *)&v52[16] = &__block_descriptor_tmp_127;
  if (!v34)
  {
    v54 = v27;
    *(_QWORD *)&v52[24] = 0;
    object = v32;
    if (v32)
      goto LABEL_66;
LABEL_68:
    object = xpc_null_create();
    goto LABEL_69;
  }
  v36 = _Block_copy(v34);
  v54 = v27;
  *(_QWORD *)&v52[24] = v36;
  object = v32;
  if (!v32)
    goto LABEL_68;
LABEL_66:
  xpc_retain(v32);
LABEL_69:
  dispatch_async(v35, buf);
  xpc_release(object);
  object = 0;
  if (*(_QWORD *)&v52[24])
    _Block_release(*(const void **)&v52[24]);
  if (v34)
    _Block_release(v34);
  xpc_release(v32);
  v37 = (std::__shared_weak_count *)v46;
  if (v46)
  {
    v38 = (unint64_t *)(v46 + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  xpc_release(v15);
LABEL_79:
  if (SHIBYTE(v47[2]) < 0)
  {
    operator delete(v47[0]);
    if ((SHIBYTE(v48[2]) & 0x80000000) == 0)
    {
LABEL_81:
      if (!v10)
        goto LABEL_83;
      goto LABEL_82;
    }
  }
  else if ((SHIBYTE(v48[2]) & 0x80000000) == 0)
  {
    goto LABEL_81;
  }
  operator delete(v48[0]);
  if (v10)
  {
LABEL_82:
    dispatch_group_leave(v10);
    dispatch_release(v10);
  }
LABEL_83:
  v40 = v50;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_1A352F094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN3abm19BasebandTracingTask9init_syncEv_block_invoke_83(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  xpc_object_t v11;
  NSObject *v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _QWORD v20[4];
  void *aBlock;
  xpc_object_t object;
  int v23;

  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v5);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_24:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v10 = *(NSObject **)(v7 + 112);
      if (v10)
      {
        dispatch_retain(*(dispatch_object_t *)(v7 + 112));
        dispatch_group_enter(v10);
      }
      v11 = xpc_null_create();
      v12 = *(NSObject **)(v7 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v20[0]) = 0;
        _os_log_impl(&dword_1A343C000, v12, OS_LOG_TYPE_DEFAULT, "#I Still alive", (uint8_t *)v20, 2u);
      }
      if (v11)
      {
        xpc_retain(v11);
        v13 = v11;
        v14 = *(const void **)a4;
        if (*(_QWORD *)a4)
        {
LABEL_10:
          v15 = _Block_copy(v14);
          goto LABEL_13;
        }
      }
      else
      {
        v13 = xpc_null_create();
        v14 = *(const void **)a4;
        if (*(_QWORD *)a4)
          goto LABEL_10;
      }
      v15 = 0;
LABEL_13:
      v16 = *(NSObject **)(a4 + 8);
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 1174405120;
      v20[2] = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke_3;
      v20[3] = &__block_descriptor_tmp_127;
      if (v15)
      {
        v17 = _Block_copy(v15);
        v23 = 0;
        aBlock = v17;
        object = v13;
        if (v13)
        {
LABEL_15:
          xpc_retain(v13);
LABEL_18:
          dispatch_async(v16, v20);
          xpc_release(object);
          object = 0;
          if (aBlock)
            _Block_release(aBlock);
          if (v15)
            _Block_release(v15);
          xpc_release(v13);
          xpc_release(v11);
          if (v10)
          {
            dispatch_group_leave(v10);
            dispatch_release(v10);
          }
          goto LABEL_24;
        }
      }
      else
      {
        v23 = 0;
        aBlock = 0;
        object = v13;
        if (v13)
          goto LABEL_15;
      }
      object = xpc_null_create();
      goto LABEL_18;
    }
  }
}

void abm::BasebandTracingTask::stop_sync(abm::BasebandTracingTask *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  std::string::size_type v15;
  unint64_t v16;
  void *v17;
  _QWORD v18[6];
  std::__shared_weak_count *v19;
  dispatch_group_t group;
  void *v21[2];
  char v22;
  BOOL v23;
  std::string __p;
  void *aBlock[2];
  char v26;
  std::string v27;
  std::string buf;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v23 = 0;
  v22 = 15;
  strcpy((char *)v21, "KeepScratchLogs");
  memset(&__p, 0, sizeof(__p));
  v26 = 7;
  strcpy((char *)aBlock, "BBTrace");
  memset(&buf, 0, sizeof(buf));
  v10 = defaults::get((char *)aBlock, (char *)v21, &buf);
  if (v10)
  {
    prop::file::get<std::string>((const void **)aBlock, (uint64_t)v21, (uint64_t)&buf, &v27);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v27;
  }
  if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v26 & 0x80000000) == 0)
      goto LABEL_15;
LABEL_18:
    operator delete(aBlock[0]);
    if (!v10)
      goto LABEL_20;
    goto LABEL_19;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
  if (v26 < 0)
    goto LABEL_18;
LABEL_15:
  if (v10)
LABEL_19:
    util::convert<BOOL>(&__p, &v23, 0);
LABEL_20:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v22 & 0x80000000) == 0)
      goto LABEL_22;
  }
  else if ((v22 & 0x80000000) == 0)
  {
    goto LABEL_22;
  }
  operator delete(v21[0]);
LABEL_22:
  if (v23)
    v11 = 10000000;
  else
    v11 = 0;
  v12 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1A343C000, v12, OS_LOG_TYPE_DEFAULT, "#I Request to shutdown traces -- from SIGTERM", (uint8_t *)&buf, 2u);
  }
  v13 = *((_QWORD *)this + 14);
  if (v13)
  {
    dispatch_retain(*((dispatch_object_t *)this + 14));
    dispatch_group_enter(v13);
  }
  v14 = *((_QWORD *)this + 37);
  v15 = *((_QWORD *)this + 11);
  if (v15)
    dispatch_retain(*((dispatch_object_t *)this + 11));
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 1174405120;
  v18[2] = ___ZN3abm19BasebandTracingTask9stop_syncEv_block_invoke;
  v18[3] = &__block_descriptor_tmp_92;
  v18[4] = this;
  v18[5] = v3;
  v19 = v5;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  group = v13;
  if (v13)
  {
    dispatch_retain(v13);
    dispatch_group_enter(group);
  }
  v17 = _Block_copy(v18);
  strcpy((char *)&buf, "Shutdown timer");
  *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 7) = 0;
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = 14;
  v27.__r_.__value_.__r.__words[0] = v15;
  aBlock[0] = v17;
  (*(void (**)(uint64_t, std::string *, _QWORD, uint64_t, std::string *, void **))(*(_QWORD *)v14 + 8))(v14, &buf, 0, v11, &v27, aBlock);
  if (aBlock[0])
    _Block_release(aBlock[0]);
  if (v27.__r_.__value_.__r.__words[0])
    dispatch_release((dispatch_object_t)v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  if (v13)
  {
    dispatch_group_leave(v13);
    dispatch_release(v13);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1A352F76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, dispatch_group_t group, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *aBlock,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  std::__shared_weak_count *v36;

  if (a29 < 0)
  {
    operator delete(a24);
    if ((a22 & 0x80000000) == 0)
    {
LABEL_4:
      std::__shared_weak_count::__release_weak(v36);
      _Unwind_Resume(a1);
    }
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(__p);
  goto LABEL_4;
}

void ___ZN3abm19BasebandTracingTask9stop_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  xpc_object_t v6;
  xpc_object_t v7;
  std::__shared_weak_count *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  uint64_t v11;
  uint8_t *v12;
  xpc_object_t v13;
  xpc_object_t v14;
  uint8_t *v15;
  CFTypeID v16;
  uint8_t *v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  void *v22;
  NSObject *v23;
  NSObject *v24;
  void *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  void *v28;
  _QWORD v29[5];
  dispatch_group_t object;
  CFTypeRef cf;
  void *v32;
  _QWORD v33[2];
  NSObject *v34;
  void *v35;
  _QWORD aBlock[5];
  CFTypeRef v37;
  void *v38;
  _QWORD v39[2];
  NSObject *v40;
  _QWORD v41[5];
  dispatch_group_t group;
  CFTypeRef v43;
  xpc_object_t v44;
  _QWORD *v45;
  uint8_t buf[8];
  char v47;
  std::__shared_weak_count *v49;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    return;
  v3 = (_QWORD *)a1[4];
  v4 = std::__shared_weak_count::lock(v2);
  v49 = v4;
  if (!v4)
    return;
  if (!a1[5])
  {
    v8 = v4;
LABEL_69:
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    return;
  }
  v5 = v3[5];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v5, OS_LOG_TYPE_DEFAULT, "#I Shutting down traces", buf, 2u);
  }
  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6 || (v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A85902BC](v6) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v6);
      v7 = v6;
    }
    else
    {
      v7 = xpc_null_create();
    }
  }
  else
  {
    v7 = xpc_null_create();
    v6 = 0;
  }
  xpc_release(v6);
  v9 = xpc_string_create("kShutdownAllTrace");
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v7, "kKeyTraceAction", v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  Timestamp::Timestamp((Timestamp *)&v44);
  Timestamp::asString(v11, 0, 9, buf);
  if (v47 >= 0)
    v12 = buf;
  else
    v12 = *(uint8_t **)buf;
  v13 = xpc_string_create((const char *)v12);
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E0CFB370], v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  if (v47 < 0)
  {
    operator delete(*(void **)buf);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v44, v45);
    v44 = v7;
    if (v7)
      goto LABEL_22;
  }
  else
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v44, v45);
    v44 = v7;
    if (v7)
    {
LABEL_22:
      xpc_retain(v7);
      goto LABEL_25;
    }
  }
  v44 = xpc_null_create();
LABEL_25:
  xpc::bridge();
  v15 = *(uint8_t **)buf;
  if (!*(_QWORD *)buf)
    goto LABEL_31;
  v16 = CFGetTypeID(*(CFTypeRef *)buf);
  if (v16 != CFDictionaryGetTypeID())
  {
    v15 = 0;
    v17 = *(uint8_t **)buf;
    if (!*(_QWORD *)buf)
      goto LABEL_31;
    goto LABEL_30;
  }
  CFRetain(v15);
  v17 = *(uint8_t **)buf;
  if (*(_QWORD *)buf)
LABEL_30:
    CFRelease(v17);
LABEL_31:
  xpc_release(v44);
  v18 = v3[17];
  v19 = MEMORY[0x1E0C809B0];
  v41[0] = MEMORY[0x1E0C809B0];
  v41[1] = 1174405120;
  v41[2] = ___ZN3abm19BasebandTracingTask9stop_syncEv_block_invoke_86;
  v41[3] = &__block_descriptor_tmp_87;
  v20 = a1[7];
  v41[4] = v3;
  group = v20;
  if (v20)
  {
    dispatch_retain(v20);
    dispatch_group_enter(group);
  }
  v43 = v15;
  if (v15)
    CFRetain(v15);
  ctu::SharedSynchronizable<abm::HelperTask>::execute_wrapped(v3 + 9, v18, (uint64_t)v41);
  v21 = a1[7];
  v40 = v21;
  if (v21)
  {
    dispatch_retain(v21);
    dispatch_group_enter(v21);
  }
  v39[0] = 0;
  v39[1] = 0;
  aBlock[0] = v19;
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN3abm19BasebandTracingTask9stop_syncEv_block_invoke_88;
  aBlock[3] = &__block_descriptor_tmp_89;
  aBlock[4] = v3;
  v37 = v15;
  if (v15)
    CFRetain(v15);
  v22 = _Block_copy(aBlock);
  v38 = v22;
  v35 = 0;
  abm::BasebandTracingTask::performWork((uint64_t)v3, &v40, 6, (uint64_t)v39, &v38, &v35);
  if (v22)
    _Block_release(v22);
  if (v21)
  {
    dispatch_group_leave(v21);
    dispatch_release(v21);
  }
  v23 = a1[7];
  v34 = v23;
  if (v23)
  {
    dispatch_retain(v23);
    dispatch_group_enter(v23);
    v24 = a1[7];
  }
  else
  {
    v24 = 0;
  }
  v33[0] = 0;
  v33[1] = 0;
  v29[0] = v19;
  v29[1] = 1174405120;
  v29[2] = ___ZN3abm19BasebandTracingTask9stop_syncEv_block_invoke_90;
  v29[3] = &__block_descriptor_tmp_91;
  v29[4] = v3;
  object = v24;
  if (v24)
  {
    dispatch_retain(v24);
    dispatch_group_enter(v24);
  }
  cf = v15;
  if (v15)
    CFRetain(v15);
  v25 = _Block_copy(v29);
  v32 = v25;
  v28 = 0;
  abm::BasebandTracingTask::performWork((uint64_t)v3, &v34, 6, (uint64_t)v33, &v32, &v28);
  if (v25)
    _Block_release(v25);
  if (v23)
  {
    dispatch_group_leave(v23);
    dispatch_release(v23);
  }
  if (cf)
    CFRelease(cf);
  if (object)
  {
    dispatch_group_leave(object);
    if (object)
      dispatch_release(object);
  }
  if (v37)
    CFRelease(v37);
  if (v43)
    CFRelease(v43);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (v15)
    CFRelease(v15);
  xpc_release(v7);
  v8 = v49;
  if (v49)
    goto LABEL_69;
}

void sub_1A352FDA8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  xpc_release(*(xpc_object_t *)(v2 - 152));
  xpc_release(v1);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v2 - 96);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9stop_syncEv_block_invoke_86(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const void *v4;
  const void *v5;
  NSObject *v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 136);
  v6 = v3;
  if (v3)
    dispatch_retain(v3);
  v4 = *(const void **)(a1 + 48);
  v5 = v4;
  if (v4)
    CFRetain(v4);
  abm::BasebandTracingTask::abortInternal(v2, &v6, &v5);
  if (v4)
    CFRelease(v4);
  if (v3)
    dispatch_release(v3);
}

void sub_1A352FED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  NSObject *v9;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  if (v9)
    dispatch_release(v9);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9stop_syncEv_block_invoke_88(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const void *v4;
  const void *v5;
  NSObject *v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 136);
  v6 = v3;
  if (v3)
    dispatch_retain(v3);
  v4 = *(const void **)(a1 + 40);
  v5 = v4;
  if (v4)
    CFRetain(v4);
  abm::BasebandTracingTask::snapshotInternal(v2, &v6, &v5);
  if (v4)
    CFRelease(v4);
  if (v3)
    dispatch_release(v3);
}

void sub_1A352FF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  NSObject *v9;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  if (v9)
    dispatch_release(v9);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask9stop_syncEv_block_invoke_90(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const void *v4;
  const void *v5;
  NSObject *v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 136);
  v6 = v3;
  if (v3)
    dispatch_retain(v3);
  v4 = *(const void **)(a1 + 48);
  v5 = v4;
  if (v4)
    CFRetain(v4);
  abm::BasebandTracingTask::shutdownInternal(v2, &v6, &v5);
  if (v4)
    CFRelease(v4);
  if (v3)
    dispatch_release(v3);
}

void sub_1A3530040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  NSObject *v9;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  if (v9)
    dispatch_release(v9);
  _Unwind_Resume(a1);
}

void abm::BasebandTracingTask::~BasebandTracingTask(abm::BasebandTracingTask *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  NSObject *v12;
  const void *v13;
  uint64_t v14;
  abm::BasebandTracingTask *v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  std::__shared_weak_count *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  std::__shared_weak_count *v23;
  NSObject *v24;
  abm::BasebandTracingTask *v25;
  NSObject *v26;
  uint8_t v27[16];

  *(_QWORD *)this = off_1E4A0DE70;
  abm::BasebandTracingTask::stopTraceRunLoop_sync(this);
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v27 = 0;
    _os_log_impl(&dword_1A343C000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v27, 2u);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (!v9)
    goto LABEL_17;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_17:
    if ((*((char *)this + 247) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*((char *)this + 247) < 0)
LABEL_18:
    operator delete(*((void **)this + 28));
LABEL_19:
  v12 = *((_QWORD *)this + 27);
  if (v12)
    dispatch_release(v12);
  v13 = (const void *)*((_QWORD *)this + 26);
  if (v13)
    _Block_release(v13);
  if (*((_QWORD *)this + 25))
  {
    v14 = *((_QWORD *)this + 23);
    v15 = (abm::BasebandTracingTask *)*((_QWORD *)this + 24);
    v16 = *(_QWORD *)v15;
    *(_QWORD *)(v16 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v16;
    *((_QWORD *)this + 25) = 0;
    if (v15 != (abm::BasebandTracingTask *)((char *)this + 184))
    {
      do
      {
        v25 = (abm::BasebandTracingTask *)*((_QWORD *)v15 + 1);
        v24 = *((_QWORD *)v15 + 2);
        if (v24)
        {
          dispatch_group_leave(v24);
          v26 = *((_QWORD *)v15 + 2);
          if (v26)
            dispatch_release(v26);
        }
        operator delete(v15);
        v15 = v25;
      }
      while (v25 != (abm::BasebandTracingTask *)((char *)this + 184));
    }
  }
  std::__tree<std::__value_type<std::string const,std::shared_ptr<Trace>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::shared_ptr<Trace>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::shared_ptr<Trace>>>>::destroy(*((_QWORD *)this + 20));
  v17 = *((_QWORD *)this + 18);
  if (v17)
    dispatch_release(v17);
  v18 = *((_QWORD *)this + 17);
  if (v18)
    dispatch_release(v18);
  *(_QWORD *)this = off_1E4A0F3B8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  v20 = *((_QWORD *)this + 14);
  if (v20)
    dispatch_release(v20);
  *(_QWORD *)this = &unk_1E4A06FA8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v21 = *((_QWORD *)this + 12);
  if (v21)
    dispatch_release(v21);
  v22 = *((_QWORD *)this + 11);
  if (v22)
    dispatch_release(v22);
  v23 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v23)
    std::__shared_weak_count::__release_weak(v23);
}

{
  void *v1;

  abm::BasebandTracingTask::~BasebandTracingTask(this);
  operator delete(v1);
}

char *abm::BasebandTracingTask::stateAsString(unsigned int a1)
{
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a1 >= 0xC)
  {
    v2 = GetOsLogContext()[1];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
    {
      v3 = 136315906;
      v4 = "ABM ASSERT";
      v5 = 2080;
      v6 = "state != state";
      v7 = 2080;
      v8 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/ABMHelper/Server/Tas"
           "ks/Wireless/BasebandTracingTask.cpp";
      v9 = 1024;
      v10 = 600;
      _os_log_fault_impl(&dword_1A343C000, v2, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", (uint8_t *)&v3, 0x26u);
    }
    __break(1u);
  }
  return off_1E4A0EAC8[a1];
}

void ___ZN3abm19BasebandTracingTask18setLastCrashReasonENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void **v4;
  char v5;
  __int128 v6;
  void *v7;
  size_t v8;
  xpc_object_t v9;
  const void *v10;
  void *v11;
  NSObject *v12;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  int v16;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 112);
  if (v3)
  {
    dispatch_retain(*(dispatch_object_t *)(v2 + 112));
    dispatch_group_enter(v3);
  }
  v4 = (void **)(v2 + 224);
  if (v2 + 224 != a1 + 40)
  {
    v5 = *(_BYTE *)(a1 + 63);
    if (*(char *)(v2 + 247) < 0)
    {
      if (v5 >= 0)
        v7 = (void *)(a1 + 40);
      else
        v7 = *(void **)(a1 + 40);
      if (v5 >= 0)
        v8 = *(unsigned __int8 *)(a1 + 63);
      else
        v8 = *(_QWORD *)(a1 + 48);
      std::string::__assign_no_alias<false>(v4, v7, v8);
    }
    else if ((*(_BYTE *)(a1 + 63) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v4, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
    }
    else
    {
      v6 = *(_OWORD *)(a1 + 40);
      *(_QWORD *)(v2 + 240) = *(_QWORD *)(a1 + 56);
      *(_OWORD *)v4 = v6;
    }
  }
  if (*(_QWORD *)(a1 + 64) && *(_QWORD *)(a1 + 72))
  {
    v9 = xpc_null_create();
    v10 = *(const void **)(a1 + 64);
    if (v10)
      v11 = _Block_copy(v10);
    else
      v11 = 0;
    v12 = *(NSObject **)(a1 + 72);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke_3;
    block[3] = &__block_descriptor_tmp_127;
    if (v11)
    {
      v16 = 0;
      aBlock = _Block_copy(v11);
      object = v9;
      if (v9)
      {
LABEL_22:
        xpc_retain(v9);
LABEL_25:
        dispatch_async(v12, block);
        xpc_release(object);
        object = 0;
        if (aBlock)
          _Block_release(aBlock);
        if (v11)
          _Block_release(v11);
        xpc_release(v9);
        goto LABEL_30;
      }
    }
    else
    {
      v16 = 0;
      aBlock = 0;
      object = v9;
      if (v9)
        goto LABEL_22;
    }
    object = xpc_null_create();
    goto LABEL_25;
  }
LABEL_30:
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
}

void sub_1A3530544(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  void *v6;
  NSObject *v7;

  v4 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
    v6 = *(void **)(a2 + 64);
    if (!v6)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = *(_OWORD *)(a2 + 40);
  v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
  *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  v6 = *(void **)(a2 + 64);
  if (v6)
LABEL_5:
    v6 = _Block_copy(v6);
LABEL_6:
  v7 = *(NSObject **)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 72) = v7;
  if (v7)
    dispatch_retain(v7);
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 72);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 64);
  if (v3)
    _Block_release(v3);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void abm::BasebandTracingTask::changeState(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  char *v5;
  int v6;
  char *v7;
  __int16 v8;
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = abm::BasebandTracingTask::stateAsString(*(_DWORD *)(a1 + 176));
    v6 = 136315394;
    v7 = v5;
    v8 = 2080;
    v9 = abm::BasebandTracingTask::stateAsString(a2);
    _os_log_impl(&dword_1A343C000, v4, OS_LOG_TYPE_DEFAULT, "#I Change of state from %s to %s", (uint8_t *)&v6, 0x16u);
  }
  *(_DWORD *)(a1 + 176) = a2;
}

BOOL abm::BasebandTracingTask::isStateTransitionValid(uint64_t a1, int a2)
{
  return (a2 - 11) < 0xFFFFFFFE || *(_BYTE *)(a1 + 180) == 0;
}

void ___ZN3abm19BasebandTracingTask11performWorkEN8dispatch13group_sessionENS0_5StateENS1_8callbackIU13block_pointerFviN3xpc4dictEEEENS1_5blockIU13block_pointerFvvEEESD__block_invoke(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t *v10;
  NSObject *v11;
  int v12;
  BOOL v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t v27;
  NSObject *v28;
  void *v29;
  NSObject *v30;
  void *v31;
  NSObject *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  NSObject *v36;
  void *v37;
  NSObject *v38;
  _QWORD v39[5];
  dispatch_object_t v40;
  void *v41;
  void *v42;
  dispatch_group_t v43;
  void *v44;
  dispatch_object_t v45;
  int v46;
  char v47;
  _QWORD block[6];
  std::__shared_weak_count *v49;
  dispatch_group_t group;
  void *v51;
  dispatch_object_t object;
  void *aBlock;
  int v54;
  uint8_t buf[4];
  char *v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(a1 + 80);
  v4 = MEMORY[0x1E0C809B0];
  switch(v3)
  {
    case 2u:
    case 6u:
    case 8u:
      v5 = 0;
      *(_BYTE *)(v2 + 180) = 0;
      goto LABEL_3;
    case 7u:
      v5 = 0;
      *(_BYTE *)(v2 + 180) = 1;
      break;
    default:
      v12 = *(unsigned __int8 *)(v2 + 180);
      v13 = v3 - 9 >= 2 || v12 == 0;
      v5 = !v13;
      if (!v13)
      {
        v14 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          v56 = abm::BasebandTracingTask::stateAsString(v3);
          _os_log_impl(&dword_1A343C000, v14, OS_LOG_TYPE_DEFAULT, "#I State [%s] transition not allowed after entering low-power; deferring work",
            buf,
            0xCu);
        }
        v15 = dispatch_group_create();
        v16 = v15;
        if (v15)
        {
          dispatch_retain(v15);
          dispatch_group_enter(v16);
        }
        v17 = operator new(0x18uLL);
        v17[2] = v16;
        if (v16)
        {
          dispatch_retain(v16);
          dispatch_group_enter(v16);
        }
        v17[1] = v2 + 184;
        v18 = *(_QWORD *)(v2 + 184);
        *v17 = v18;
        *(_QWORD *)(v18 + 8) = v17;
        *(_QWORD *)(v2 + 184) = v17;
        ++*(_QWORD *)(v2 + 200);
        v19 = *(std::__shared_weak_count **)(v2 + 80);
        if (!v19 || (v20 = *(_QWORD *)(v2 + 72), (v21 = std::__shared_weak_count::lock(v19)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v22 = v21;
        p_shared_weak_owners = (unint64_t *)&v21->__shared_weak_owners_;
        do
          v24 = __ldxr(p_shared_weak_owners);
        while (__stxr(v24 + 1, p_shared_weak_owners));
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v22);
        }
        block[0] = v4;
        block[1] = 1174405120;
        block[2] = ___ZN3abm19BasebandTracingTask11performWorkEN8dispatch13group_sessionENS0_5StateENS1_8callbackIU13block_pointerFviN3xpc4dictEEEENS1_5blockIU13block_pointerFvvEEESD__block_invoke_109;
        block[3] = &__block_descriptor_tmp_110;
        block[4] = v2;
        block[5] = v20;
        v49 = v22;
        do
          v27 = __ldxr(p_shared_weak_owners);
        while (__stxr(v27 + 1, p_shared_weak_owners));
        v54 = *(_DWORD *)(a1 + 80);
        v28 = *(NSObject **)(a1 + 40);
        group = v28;
        if (v28)
        {
          dispatch_retain(v28);
          dispatch_group_enter(group);
        }
        v29 = *(void **)(a1 + 48);
        if (v29)
          v29 = _Block_copy(v29);
        v30 = *(NSObject **)(a1 + 56);
        v51 = v29;
        object = v30;
        if (v30)
          dispatch_retain(v30);
        v31 = *(void **)(a1 + 64);
        if (v31)
          v31 = _Block_copy(v31);
        aBlock = v31;
        dispatch_group_notify(v16, *(dispatch_queue_t *)(v2 + 88), block);
        if (aBlock)
          _Block_release(aBlock);
        if (object)
          dispatch_release(object);
        if (v51)
          _Block_release(v51);
        if (group)
        {
          dispatch_group_leave(group);
          if (group)
            dispatch_release(group);
        }
        if (v49)
          std::__shared_weak_count::__release_weak(v49);
        std::__shared_weak_count::__release_weak(v22);
        if (v16)
        {
          dispatch_group_leave(v16);
          dispatch_release(v16);
          dispatch_release(v16);
        }
        v12 = *(unsigned __int8 *)(v2 + 180);
      }
      if (!v12)
      {
LABEL_3:
        if (*(_QWORD *)(v2 + 200))
        {
          v6 = *(_QWORD *)(v2 + 184);
          v7 = *(uint64_t **)(v2 + 192);
          v8 = *v7;
          *(_QWORD *)(v8 + 8) = *(_QWORD *)(v6 + 8);
          **(_QWORD **)(v6 + 8) = v8;
          *(_QWORD *)(v2 + 200) = 0;
          if (v7 != (uint64_t *)(v2 + 184))
          {
            do
            {
              v10 = (uint64_t *)v7[1];
              v9 = v7[2];
              if (v9)
              {
                dispatch_group_leave(v9);
                v11 = v7[2];
                if (v11)
                  dispatch_release(v11);
              }
              operator delete(v7);
              v7 = v10;
            }
            while (v10 != (uint64_t *)(v2 + 184));
          }
        }
      }
      break;
  }
  v32 = *(NSObject **)(v2 + 144);
  if (v32)
  {
    dispatch_retain(*(dispatch_object_t *)(v2 + 144));
    dispatch_suspend(v32);
  }
  v33 = *(NSObject **)(v2 + 136);
  v39[0] = v4;
  v39[1] = 1174405120;
  v39[2] = ___ZN3abm19BasebandTracingTask11performWorkEN8dispatch13group_sessionENS0_5StateENS1_8callbackIU13block_pointerFviN3xpc4dictEEEENS1_5blockIU13block_pointerFvvEEESD__block_invoke_111;
  v39[3] = &__block_descriptor_tmp_114;
  v39[4] = v2;
  v40 = v32;
  if (v32)
  {
    dispatch_retain(v32);
    dispatch_suspend(v32);
  }
  v47 = v5;
  v46 = *(_DWORD *)(a1 + 80);
  v34 = *(void **)(a1 + 64);
  if (v34)
    v34 = _Block_copy(v34);
  v41 = v34;
  v35 = *(void **)(a1 + 72);
  if (v35)
    v35 = _Block_copy(v35);
  v36 = *(NSObject **)(a1 + 40);
  v42 = v35;
  v43 = v36;
  if (v36)
  {
    dispatch_retain(v36);
    dispatch_group_enter(v36);
  }
  v37 = *(void **)(a1 + 48);
  if (v37)
    v37 = _Block_copy(v37);
  v38 = *(NSObject **)(a1 + 56);
  v44 = v37;
  v45 = v38;
  if (v38)
    dispatch_retain(v38);
  ctu::SharedSynchronizable<abm::HelperTask>::execute_wrapped((uint64_t *)(v2 + 72), v33, (uint64_t)v39);
  if (v45)
    dispatch_release(v45);
  if (v44)
    _Block_release(v44);
  if (v43)
  {
    dispatch_group_leave(v43);
    if (v43)
      dispatch_release(v43);
  }
  if (v42)
    _Block_release(v42);
  if (v41)
    _Block_release(v41);
  if (v40)
  {
    dispatch_resume(v40);
    if (v40)
      dispatch_release(v40);
  }
  if (v32)
  {
    dispatch_resume(v32);
    dispatch_release(v32);
  }
}

void sub_1A3530BC8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN3abm19BasebandTracingTask11performWorkEN8dispatch13group_sessionENS0_5StateENS1_8callbackIU13block_pointerFviN3xpc4dictEEEENS1_5blockIU13block_pointerFvvEEESD__block_invoke_109(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  char *v7;
  NSObject *v8;
  uint64_t v9;
  const void *v10;
  void *v11;
  NSObject *v12;
  const void *v13;
  void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  NSObject *v20;
  NSObject *v21;
  std::__shared_weak_count *v23;
  uint8_t buf[4];
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = std::__shared_weak_count::lock(v2);
    v23 = v4;
    if (v4)
    {
      v5 = v4;
      if (!*(_QWORD *)(a1 + 40))
      {
LABEL_24:
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return;
      }
      v6 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v7 = abm::BasebandTracingTask::stateAsString(*(_DWORD *)(a1 + 88));
        *(_DWORD *)buf = 136315138;
        v25 = v7;
        _os_log_impl(&dword_1A343C000, v6, OS_LOG_TYPE_DEFAULT, "#I Executing deferred state [%s] work after exiting low-power", buf, 0xCu);
      }
      v8 = *(NSObject **)(a1 + 56);
      v21 = v8;
      if (v8)
      {
        dispatch_retain(v8);
        dispatch_group_enter(v8);
      }
      v9 = *(unsigned int *)(a1 + 88);
      v10 = *(const void **)(a1 + 64);
      if (v10)
      {
        v11 = _Block_copy(v10);
        v12 = *(NSObject **)(a1 + 72);
        v19 = v11;
        v20 = v12;
        if (!v12)
        {
LABEL_11:
          v13 = *(const void **)(a1 + 80);
          if (v13)
            v14 = _Block_copy(v13);
          else
            v14 = 0;
          v17 = 0;
          v18 = v14;
          abm::BasebandTracingTask::performWork(v3, &v21, v9, &v19, &v18, &v17);
          if (v14)
            _Block_release(v14);
          if (v12)
            dispatch_release(v12);
          if (v11)
            _Block_release(v11);
          if (v8)
          {
            dispatch_group_leave(v8);
            dispatch_release(v8);
          }
          goto LABEL_24;
        }
      }
      else
      {
        v11 = 0;
        v12 = *(NSObject **)(a1 + 72);
        v19 = 0;
        v20 = v12;
        if (!v12)
          goto LABEL_11;
      }
      dispatch_retain(v12);
      goto LABEL_11;
    }
  }
}

void sub_1A3530E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A3530E1C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void *__copy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrIN3abm10HelperTaskEEE56c30_ZTSN8dispatch13group_sessionE64c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE80c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *result;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a2[7];
  a1[7] = v7;
  if (v7)
  {
    dispatch_retain(v7);
    v8 = a1[7];
    if (v8)
      dispatch_group_enter(v8);
  }
  v9 = (void *)a2[8];
  if (v9)
    v9 = _Block_copy(v9);
  v10 = a2[9];
  a1[8] = v9;
  a1[9] = v10;
  if (v10)
    dispatch_retain(v10);
  result = (void *)a2[10];
  if (result)
    result = _Block_copy(result);
  a1[10] = result;
  return result;
}

void __destroy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrIN3abm10HelperTaskEEE56c30_ZTSN8dispatch13group_sessionE64c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE80c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(_QWORD *a1)
{
  const void *v2;
  NSObject *v3;
  const void *v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;

  v2 = (const void *)a1[10];
  if (v2)
    _Block_release(v2);
  v3 = a1[9];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[8];
  if (v4)
    _Block_release(v4);
  v5 = a1[7];
  if (v5)
  {
    dispatch_group_leave(v5);
    v6 = a1[7];
    if (v6)
      dispatch_release(v6);
  }
  v7 = (std::__shared_weak_count *)a1[6];
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void ___ZN3abm19BasebandTracingTask11performWorkEN8dispatch13group_sessionENS0_5StateENS1_8callbackIU13block_pointerFviN3xpc4dictEEEENS1_5blockIU13block_pointerFvvEEESD__block_invoke_111(uint64_t a1)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  NSObject *v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  NSObject *v17;
  NSObject *v18;
  unint64_t v19;
  void *v20;
  NSObject *v21;
  _QWORD v22[5];
  dispatch_object_t v23;
  dispatch_group_t group;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *aBlock;
  dispatch_object_t object;
  char v29;
  uint8_t buf[4];
  char *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(unsigned __int8 *)(a1 + 92);
  if (*(_BYTE *)(a1 + 92))
  {
    v4 = 11;
    v5 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      goto LABEL_4;
    goto LABEL_3;
  }
  v4 = *(_DWORD *)(a1 + 88);
  v5 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
LABEL_3:
    v6 = abm::BasebandTracingTask::stateAsString(*(_DWORD *)(v2 + 176));
    *(_DWORD *)buf = 136315394;
    v31 = v6;
    v32 = 2080;
    v33 = abm::BasebandTracingTask::stateAsString(v4);
    _os_log_impl(&dword_1A343C000, v5, OS_LOG_TYPE_DEFAULT, "#I Change of state from %s to %s", buf, 0x16u);
    v3 = *(unsigned __int8 *)(a1 + 92);
  }
LABEL_4:
  *(_DWORD *)(v2 + 176) = v4;
  if (v3)
  {
    v7 = *(_QWORD *)(a1 + 56);
    if (v7)
    {
      (*(void (**)(void))(v7 + 16))();
    }
    else
    {
      v8 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A343C000, v8, OS_LOG_TYPE_DEFAULT, "#I No deferral action block to execute", buf, 2u);
      }
    }
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  v9 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v9 || (v10 = *(_QWORD *)(v2 + 72), (v11 = std::__shared_weak_count::lock(v9)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v12 = v11;
  p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v12);
  }
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 1174405120;
  v22[2] = ___ZN3abm19BasebandTracingTask11performWorkEN8dispatch13group_sessionENS0_5StateENS1_8callbackIU13block_pointerFviN3xpc4dictEEEENS1_5blockIU13block_pointerFvvEEESD__block_invoke_112;
  v22[3] = &__block_descriptor_tmp_113_0;
  v17 = *(NSObject **)(a1 + 40);
  v22[4] = v2;
  v23 = v17;
  if (v17)
  {
    dispatch_retain(v17);
    dispatch_suspend(v17);
  }
  v18 = *(NSObject **)(a1 + 64);
  group = v18;
  if (v18)
  {
    dispatch_retain(v18);
    dispatch_group_enter(v18);
  }
  v25 = v10;
  v26 = v12;
  do
    v19 = __ldxr(p_shared_weak_owners);
  while (__stxr(v19 + 1, p_shared_weak_owners));
  v20 = *(void **)(a1 + 72);
  if (v20)
    v20 = _Block_copy(v20);
  v21 = *(NSObject **)(a1 + 80);
  aBlock = v20;
  object = v21;
  if (v21)
    dispatch_retain(v21);
  v29 = *(_BYTE *)(a1 + 92);
  dispatch_group_notify(*(dispatch_group_t *)(v2 + 136), *(dispatch_queue_t *)(v2 + 88), v22);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (v23)
  {
    dispatch_resume(v23);
    if (v23)
      dispatch_release(v23);
  }
  std::__shared_weak_count::__release_weak(v12);
}

void sub_1A3531218(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask11performWorkEN8dispatch13group_sessionENS0_5StateENS1_8callbackIU13block_pointerFviN3xpc4dictEEEENS1_5blockIU13block_pointerFvvEEESD__block_invoke_112(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  char *v7;
  xpc_object_t v8;
  const void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _BYTE buf[24];
  void *v16;
  void *aBlock;
  xpc_object_t object;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (*(_QWORD *)(a1 + 56))
      {
        v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          v7 = abm::BasebandTracingTask::stateAsString(*(_DWORD *)(v3 + 176));
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v7;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "Idle";
          _os_log_impl(&dword_1A343C000, v6, OS_LOG_TYPE_DEFAULT, "#I Change of state from %s to %s", buf, 0x16u);
        }
        *(_DWORD *)(v3 + 176) = 1;
        if (*(_QWORD *)(a1 + 72) && *(_QWORD *)(a1 + 80) && !*(_BYTE *)(a1 + 88))
        {
          v8 = xpc_null_create();
          v9 = *(const void **)(a1 + 72);
          if (v9)
            v10 = _Block_copy(v9);
          else
            v10 = 0;
          v11 = *(NSObject **)(a1 + 80);
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 1174405120;
          *(_QWORD *)&buf[16] = ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke_3;
          v16 = &__block_descriptor_tmp_127;
          if (v10)
            v12 = _Block_copy(v10);
          else
            v12 = 0;
          v19 = 0;
          aBlock = v12;
          object = v8;
          if (v8)
            xpc_retain(v8);
          else
            object = xpc_null_create();
          dispatch_async(v11, buf);
          xpc_release(object);
          object = 0;
          if (aBlock)
            _Block_release(aBlock);
          if (v10)
            _Block_release(v10);
          xpc_release(v8);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1A353141C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c32_ZTSN8dispatch15suspend_sessionE48c30_ZTSN8dispatch13group_sessionE56c41_ZTSNSt3__18weak_ptrIN3abm10HelperTaskEEE72c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  NSObject *v12;

  v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = a1[5];
    if (v5)
      dispatch_suspend(v5);
  }
  v6 = a2[6];
  a1[6] = v6;
  if (v6)
  {
    dispatch_retain(v6);
    v7 = a1[6];
    if (v7)
      dispatch_group_enter(v7);
  }
  v8 = a2[8];
  a1[7] = a2[7];
  a1[8] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 16);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (void *)a2[9];
  if (v11)
    v11 = _Block_copy(v11);
  v12 = a2[10];
  a1[9] = v11;
  a1[10] = v12;
  if (v12)
    dispatch_retain(v12);
}

void __destroy_helper_block_e8_40c32_ZTSN8dispatch15suspend_sessionE48c30_ZTSN8dispatch13group_sessionE56c41_ZTSNSt3__18weak_ptrIN3abm10HelperTaskEEE72c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;

  v2 = a1[10];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[9];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[8];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  v5 = a1[6];
  if (v5)
  {
    dispatch_group_leave(v5);
    v6 = a1[6];
    if (v6)
      dispatch_release(v6);
  }
  v7 = a1[5];
  if (v7)
  {
    dispatch_resume(v7);
    v8 = a1[5];
    if (v8)
      dispatch_release(v8);
  }
}

void __copy_helper_block_e8_40c32_ZTSN8dispatch15suspend_sessionE48c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE56c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE64c30_ZTSN8dispatch13group_sessionE72c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;

  v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = a1[5];
    if (v5)
      dispatch_suspend(v5);
  }
  v6 = (void *)a2[6];
  if (v6)
    v6 = _Block_copy(v6);
  a1[6] = v6;
  v7 = (void *)a2[7];
  if (v7)
    v7 = _Block_copy(v7);
  v8 = a2[8];
  a1[7] = v7;
  a1[8] = v8;
  if (v8)
  {
    dispatch_retain(v8);
    v9 = a1[8];
    if (v9)
      dispatch_group_enter(v9);
  }
  v10 = (void *)a2[9];
  if (v10)
    v10 = _Block_copy(v10);
  v11 = a2[10];
  a1[9] = v10;
  a1[10] = v11;
  if (v11)
    dispatch_retain(v11);
}

void __destroy_helper_block_e8_40c32_ZTSN8dispatch15suspend_sessionE48c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE56c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE64c30_ZTSN8dispatch13group_sessionE72c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  NSObject *v4;
  NSObject *v5;
  const void *v6;
  const void *v7;
  NSObject *v8;
  NSObject *v9;

  v2 = a1[10];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[9];
  if (v3)
    _Block_release(v3);
  v4 = a1[8];
  if (v4)
  {
    dispatch_group_leave(v4);
    v5 = a1[8];
    if (v5)
      dispatch_release(v5);
  }
  v6 = (const void *)a1[7];
  if (v6)
    _Block_release(v6);
  v7 = (const void *)a1[6];
  if (v7)
    _Block_release(v7);
  v8 = a1[5];
  if (v8)
  {
    dispatch_resume(v8);
    v9 = a1[5];
    if (v9)
      dispatch_release(v9);
  }
}

void *__copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE64c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE72c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *result;

  v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = a1[5];
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = (void *)a2[6];
  if (v6)
    v6 = _Block_copy(v6);
  v7 = a2[7];
  a1[6] = v6;
  a1[7] = v7;
  if (v7)
    dispatch_retain(v7);
  v8 = (void *)a2[8];
  if (v8)
    v8 = _Block_copy(v8);
  a1[8] = v8;
  result = (void *)a2[9];
  if (result)
    result = _Block_copy(result);
  a1[9] = result;
  return result;
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c57_ZTSN8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEE64c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE72c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  NSObject *v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;

  v2 = (const void *)a1[9];
  if (v2)
    _Block_release(v2);
  v3 = (const void *)a1[8];
  if (v3)
    _Block_release(v3);
  v4 = a1[7];
  if (v4)
    dispatch_release(v4);
  v5 = (const void *)a1[6];
  if (v5)
    _Block_release(v5);
  v6 = a1[5];
  if (v6)
  {
    dispatch_group_leave(v6);
    v7 = a1[5];
    if (v7)
      dispatch_release(v7);
  }
}

void ___ZN3abm19BasebandTracingTask21enterLowPowerInternalEN8dispatch5groupE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  NSObject *v3;
  dispatch_object_t object;

  v2 = *a2;
  v3 = *(NSObject **)(a1 + 32);
  object = v3;
  if (v3)
    dispatch_retain(v3);
  (*(void (**)(uint64_t, dispatch_object_t *))(*(_QWORD *)v2 + 104))(v2, &object);
  if (object)
    dispatch_release(object);
}

void sub_1A353180C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c21_ZTSN8dispatch5groupE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;

  v3 = *(NSObject **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  if (v3)
    dispatch_retain(v3);
}

void __destroy_helper_block_e8_32c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  NSObject *v1;

  v1 = *(NSObject **)(a1 + 32);
  if (v1)
    dispatch_release(v1);
}

void ___ZN3abm19BasebandTracingTask20exitLowPowerInternalEN8dispatch5groupE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  NSObject *v3;
  dispatch_object_t object;

  v2 = *a2;
  v3 = *(NSObject **)(a1 + 32);
  object = v3;
  if (v3)
    dispatch_retain(v3);
  (*(void (**)(uint64_t, dispatch_object_t *))(*(_QWORD *)v2 + 112))(v2, &object);
  if (object)
    dispatch_release(object);
}

void sub_1A35318A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  _Unwind_Resume(exception_object);
}

uint64_t abm::BasebandTracingTask::setPropertyInternal(uint64_t a1, NSObject **a2, char *a3, uint64_t *a4, uint64_t *a5)
{
  unint64_t v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  char *v14;
  uint64_t *v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  dispatch_object_t object;
  unint64_t v22;
  unint64_t v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v22 = 0xAAAAAAAAAAAAAAAALL;
  v23 = 0xAAAAAAAAAAAAAAAALL;
  abm::BasebandTracingTask::getTrace(a3, a1, &v22);
  v10 = v22;
  if (v22)
  {
    v11 = *a2;
    object = v11;
    if (v11)
      dispatch_retain(v11);
    v12 = (*(uint64_t (**)(unint64_t, dispatch_object_t *, uint64_t *, uint64_t *))(*(_QWORD *)v10 + 136))(v10, &object, a4, a5);
    if (object)
      dispatch_release(object);
    v13 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
  }
  else
  {
    v12 = 0;
    v13 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
LABEL_7:
      if (a3[23] >= 0)
        v14 = a3;
      else
        v14 = *(char **)a3;
      if (*((char *)a4 + 23) >= 0)
        v15 = a4;
      else
        v15 = (uint64_t *)*a4;
      if (*((char *)a5 + 23) >= 0)
        v16 = a5;
      else
        v16 = (uint64_t *)*a5;
      *(_DWORD *)buf = 67109890;
      v25 = v12;
      v26 = 2080;
      v27 = v14;
      v28 = 2080;
      v29 = v15;
      v30 = 2080;
      v31 = v16;
      _os_log_impl(&dword_1A343C000, v13, OS_LOG_TYPE_DEFAULT, "#I Set property; Success=%d Trace=%s Key=%s Value=%s",
        buf,
        0x26u);
    }
  }
  v17 = (std::__shared_weak_count *)v23;
  if (v23)
  {
    v18 = (unint64_t *)(v23 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v12;
}

void sub_1A3531A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11)
{
  if (object)
    dispatch_release(object);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask16snapshotInternalEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  NSObject *v4;
  const void *v5;
  CFTypeRef cf;
  dispatch_object_t object;

  v3 = *a2;
  v4 = *(NSObject **)(a1 + 32);
  object = v4;
  if (v4)
    dispatch_retain(v4);
  v5 = *(const void **)(a1 + 40);
  cf = v5;
  if (v5)
    CFRetain(v5);
  (*(void (**)(uint64_t, dispatch_object_t *, CFTypeRef *))(*(_QWORD *)v3 + 120))(v3, &object, &cf);
  if (cf)
    CFRelease(cf);
  if (object)
    dispatch_release(object);
}

void sub_1A3531B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)&a9);
  if (object)
    dispatch_release(object);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c21_ZTSN8dispatch5groupE40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  CFTypeRef result;

  v4 = *(NSObject **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    dispatch_retain(v4);
  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c21_ZTSN8dispatch5groupE40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1)
{
  const void *v2;
  NSObject *v3;

  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
  v3 = *(NSObject **)(a1 + 32);
  if (v3)
    dispatch_release(v3);
}

void ___ZN3abm19BasebandTracingTask14reinitInternalEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  NSObject *v4;
  const void *v5;
  CFTypeRef cf;
  dispatch_object_t object;

  v3 = *a2;
  v4 = *(NSObject **)(a1 + 32);
  object = v4;
  if (v4)
    dispatch_retain(v4);
  v5 = *(const void **)(a1 + 40);
  cf = v5;
  if (v5)
    CFRetain(v5);
  (*(void (**)(uint64_t, dispatch_object_t *, CFTypeRef *))(*(_QWORD *)v3 + 56))(v3, &object, &cf);
  if (cf)
    CFRelease(cf);
  if (object)
    dispatch_release(object);
}

void sub_1A3531C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)&a9);
  if (object)
    dispatch_release(object);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask15prepareInternalEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  NSObject *v4;
  const void *v5;
  CFTypeRef cf;
  dispatch_object_t object;

  v3 = *a2;
  v4 = *(NSObject **)(a1 + 32);
  object = v4;
  if (v4)
    dispatch_retain(v4);
  v5 = *(const void **)(a1 + 40);
  cf = v5;
  if (v5)
    CFRetain(v5);
  (*(void (**)(uint64_t, dispatch_object_t *, CFTypeRef *))(*(_QWORD *)v3 + 64))(v3, &object, &cf);
  if (cf)
    CFRelease(cf);
  if (object)
    dispatch_release(object);
}

void sub_1A3531CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)&a9);
  if (object)
    dispatch_release(object);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask13startInternalEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  NSObject *v4;
  const void *v5;
  CFTypeRef cf;
  dispatch_object_t object;

  v3 = *a2;
  v4 = *(NSObject **)(a1 + 32);
  object = v4;
  if (v4)
    dispatch_retain(v4);
  v5 = *(const void **)(a1 + 40);
  cf = v5;
  if (v5)
    CFRetain(v5);
  (*(void (**)(uint64_t, dispatch_object_t *, CFTypeRef *))(*(_QWORD *)v3 + 72))(v3, &object, &cf);
  if (cf)
    CFRelease(cf);
  if (object)
    dispatch_release(object);
}

void sub_1A3531D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)&a9);
  if (object)
    dispatch_release(object);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask12stopInternalEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  NSObject *v4;
  const void *v5;
  CFTypeRef cf;
  dispatch_object_t object;

  v3 = *a2;
  v4 = *(NSObject **)(a1 + 32);
  object = v4;
  if (v4)
    dispatch_retain(v4);
  v5 = *(const void **)(a1 + 40);
  cf = v5;
  if (v5)
    CFRetain(v5);
  (*(void (**)(uint64_t, dispatch_object_t *, CFTypeRef *))(*(_QWORD *)v3 + 80))(v3, &object, &cf);
  if (cf)
    CFRelease(cf);
  if (object)
    dispatch_release(object);
}

void sub_1A3531E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)&a9);
  if (object)
    dispatch_release(object);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask13abortInternalEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  NSObject *v4;
  const void *v5;
  CFTypeRef cf;
  dispatch_object_t object;

  v3 = *a2;
  v4 = *(NSObject **)(a1 + 32);
  object = v4;
  if (v4)
    dispatch_retain(v4);
  v5 = *(const void **)(a1 + 40);
  cf = v5;
  if (v5)
    CFRetain(v5);
  (*(void (**)(uint64_t, dispatch_object_t *, CFTypeRef *))(*(_QWORD *)v3 + 88))(v3, &object, &cf);
  if (cf)
    CFRelease(cf);
  if (object)
    dispatch_release(object);
}

void sub_1A3531EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)&a9);
  if (object)
    dispatch_release(object);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask16shutdownInternalEN8dispatch5groupEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  NSObject *v4;
  const void *v5;
  CFTypeRef cf;
  dispatch_object_t object;

  v3 = *a2;
  v4 = *(NSObject **)(a1 + 32);
  object = v4;
  if (v4)
    dispatch_retain(v4);
  v5 = *(const void **)(a1 + 40);
  cf = v5;
  if (v5)
    CFRetain(v5);
  (*(void (**)(uint64_t, dispatch_object_t *, CFTypeRef *))(*(_QWORD *)v3 + 96))(v3, &object, &cf);
  if (cf)
    CFRelease(cf);
  if (object)
    dispatch_release(object);
}

void sub_1A3531F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)&a9);
  if (object)
    dispatch_release(object);
  _Unwind_Resume(a1);
}

void abm::BasebandTracingTask::getTrace(char *a1@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  int v6;
  const char *v7;
  const char *v8;
  _QWORD *v9;
  _QWORD *v10;
  std::string::size_type *p_size;
  std::string *v12;
  std::string *p_p;
  std::string *v14;
  const char *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::string __p;

  memset(&__p, 170, sizeof(__p));
  if ((a1[23] & 0x80000000) == 0)
  {
    __p = *(std::string *)a1;
    if (!strcasecmp(a1, abm::trace::kEURCoreDump[0]))
      goto LABEL_20;
LABEL_9:
    if (strcasecmp(a1, "CoreDump"))
    {
      if (strcasecmp(a1, abm::trace::kDIAG[0]))
      {
        v7 = a1;
        if (strcasecmp(a1, "BBTrace"))
          goto LABEL_12;
      }
      goto LABEL_18;
    }
LABEL_20:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      __p.__r_.__value_.__l.__size_ = 8;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      p_size = (std::string::size_type *)(__p.__r_.__value_.__r.__words[0] + 8);
    }
    else
    {
      p_size = &__p.__r_.__value_.__l.__size_;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 8;
      p_p = &__p;
    }
    p_p->__r_.__value_.__r.__words[0] = 0x706D754465726F43;
    goto LABEL_26;
  }
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *((_QWORD *)a1 + 1));
  v6 = a1[23];
  v7 = *(const char **)a1;
  if (v6 >= 0)
    v8 = a1;
  else
    v8 = *(const char **)a1;
  if (!strcasecmp(v8, abm::trace::kEURCoreDump[0]))
    goto LABEL_20;
  if ((v6 & 0x80000000) == 0)
    goto LABEL_9;
  if (!strcasecmp(v7, "CoreDump"))
    goto LABEL_20;
  if (strcasecmp(v7, abm::trace::kDIAG[0]) && strcasecmp(v7, "BBTrace"))
  {
LABEL_12:
    if (strcasecmp(v7, abm::trace::kICETrace[0]))
    {
      *a3 = 0;
      a3[1] = 0;
      v9 = *(_QWORD **)(a2 + 152);
      v10 = (_QWORD *)(a2 + 160);
      if (v9 == (_QWORD *)(a2 + 160))
        goto LABEL_44;
      goto LABEL_27;
    }
  }
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    __p.__r_.__value_.__l.__size_ = 13;
    v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
    p_size = (std::string::size_type *)(__p.__r_.__value_.__r.__words[0] + 13);
  }
  else
  {
    p_size = (std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 5);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 13;
    v12 = &__p;
  }
  qmemcpy(v12, "BasebandTrace", 13);
LABEL_26:
  *(_BYTE *)p_size = 0;
  *a3 = 0;
  a3[1] = 0;
  v9 = *(_QWORD **)(a2 + 152);
  v10 = (_QWORD *)(a2 + 160);
  if (v9 == (_QWORD *)(a2 + 160))
    goto LABEL_44;
LABEL_27:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &__p;
  else
    v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  while (1)
  {
    v15 = (const char *)(v9 + 4);
    if (*((char *)v9 + 55) < 0)
      v15 = *(const char **)v15;
    if (!strcasecmp(v15, (const char *)v14))
      break;
    v16 = (_QWORD *)v9[1];
    if (v16)
    {
      do
      {
        v17 = v16;
        v16 = (_QWORD *)*v16;
      }
      while (v16);
    }
    else
    {
      do
      {
        v17 = (_QWORD *)v9[2];
        v18 = *v17 == (_QWORD)v9;
        v9 = v17;
      }
      while (!v18);
    }
    v9 = v17;
    if (v17 == v10)
      goto LABEL_44;
  }
  v20 = v9[7];
  v19 = v9[8];
  if (v19)
  {
    v21 = (unint64_t *)(v19 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *a3 = v20;
  a3[1] = v19;
LABEL_44:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void abm::BasebandTracingTask::commandResetModem(uint64_t a1, ResetInfo *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  xpc_object_t v6;
  xpc_object_t v7;
  std::__shared_weak_count *v8;
  xpc_object_t v9;
  uint64_t v10;
  const void *v11;
  size_t v12;
  void *v13;
  void **v14;
  xpc_object_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  xpc_object_t v20;
  void *__dst[2];
  unint64_t v22;
  xpc_object_t object;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v3)
    return;
  v5 = std::__shared_weak_count::lock(v3);
  v25 = v5;
  if (!v5)
    return;
  v24 = *(_QWORD *)(a1 + 120);
  if (!v24)
  {
    v8 = v5;
LABEL_26:
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    return;
  }
  object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v6 = xpc_dictionary_create(0, 0, 0);
  v7 = v6;
  if (v6)
  {
    object = v6;
  }
  else
  {
    v7 = xpc_null_create();
    object = v7;
    if (!v7)
    {
      v9 = xpc_null_create();
      v7 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1A85902BC](v7) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v7);
    goto LABEL_13;
  }
  v9 = xpc_null_create();
LABEL_12:
  object = v9;
LABEL_13:
  xpc_release(v7);
  ResetInfo::addToDict(a2, &object);
  v10 = v24;
  v11 = (const void *)*MEMORY[0x1E0CFB4E0];
  v12 = strlen((const char *)*MEMORY[0x1E0CFB4E0]);
  if (v12 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = (void *)v12;
  if (v12 >= 0x17)
  {
    v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v16 = v12 | 7;
    v17 = v16 + 1;
    v14 = (void **)operator new(v16 + 1);
    __dst[1] = v13;
    v22 = v17 | 0x8000000000000000;
    __dst[0] = v14;
LABEL_21:
    memmove(v14, v11, (size_t)v13);
    *((_BYTE *)v13 + (_QWORD)v14) = 0;
    v15 = object;
    v20 = object;
    if (object)
      goto LABEL_17;
    goto LABEL_22;
  }
  HIBYTE(v22) = v12;
  v14 = __dst;
  if (v12)
    goto LABEL_21;
  LOBYTE(__dst[0]) = 0;
  v15 = object;
  v20 = object;
  if (object)
  {
LABEL_17:
    xpc_retain(v15);
    goto LABEL_23;
  }
LABEL_22:
  v15 = xpc_null_create();
  v20 = v15;
LABEL_23:
  abm::HelperServerInternal::sendCommandToBasebandManager(v10, (uint64_t)__dst, &v20, 0);
  xpc_release(v15);
  v20 = 0;
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
  xpc_release(object);
  v8 = v25;
  if (v25)
    goto LABEL_26;
}

void sub_1A353246C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, xpc_object_t object, char a18)
{
  void *v18;

  xpc_release(v18);
  if (a16 < 0)
    operator delete(__p);
  xpc_release(object);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t abm::BasebandTracingTask::getRunLoop(abm::BasebandTracingTask *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *((_QWORD *)this + 15);
  if (v5)
    v6 = *(_QWORD *)(v5 + 168);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void abm::BasebandTracingTask::commandReportStatsAWD(uint64_t a1, xpc_object_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  const void *v6;
  size_t v7;
  void *v8;
  void **v9;
  xpc_object_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  void *__dst[2];
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v19 = 0;
  v20 = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v3)
    goto LABEL_15;
  v20 = std::__shared_weak_count::lock(v3);
  if (!v20)
    return;
  v5 = *(_QWORD *)(a1 + 120);
  v19 = v5;
  if (!v5)
    goto LABEL_15;
  v6 = (const void *)*MEMORY[0x1E0CFB5E0];
  v7 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v11 = v7 | 7;
    v12 = v11 + 1;
    v9 = (void **)operator new(v11 + 1);
    __dst[1] = v8;
    v18 = v12 | 0x8000000000000000;
    __dst[0] = v9;
LABEL_12:
    memmove(v9, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v9) = 0;
    v10 = *a2;
    v16 = v10;
    if (v10)
      goto LABEL_8;
    goto LABEL_13;
  }
  HIBYTE(v18) = v7;
  v9 = __dst;
  if (v7)
    goto LABEL_12;
  LOBYTE(__dst[0]) = 0;
  v10 = *a2;
  v16 = v10;
  if (v10)
  {
LABEL_8:
    xpc_retain(v10);
    goto LABEL_14;
  }
LABEL_13:
  v10 = xpc_null_create();
  v16 = v10;
LABEL_14:
  abm::HelperServerInternal::sendCommandToBasebandManager(v5, (uint64_t)__dst, &v16, 0);
  xpc_release(v10);
  v16 = 0;
  if (SHIBYTE(v18) < 0)
  {
    operator delete(__dst[0]);
    v13 = v20;
    if (!v20)
      return;
    goto LABEL_16;
  }
LABEL_15:
  v13 = v20;
  if (!v20)
    return;
LABEL_16:
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
}

void sub_1A3532708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  xpc_release(v16);
  if (a15 < 0)
  {
    operator delete(__p);
    std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL abm::BasebandTracingTask::traceSupported(uint64_t a1, char *a2)
{
  std::__shared_weak_count *v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;

  v7 = 0xAAAAAAAAAAAAAAAALL;
  v8 = 0xAAAAAAAAAAAAAAAALL;
  abm::BasebandTracingTask::getTrace(a2, a1, &v7);
  v3 = v7;
  v2 = (std::__shared_weak_count *)v8;
  if (!v8)
    return v3 != 0;
  v4 = (unint64_t *)(v8 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return v3 != 0;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v3 != 0;
}

void std::__tree<std::__value_type<std::string const,std::shared_ptr<Trace>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::shared_ptr<Trace>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::shared_ptr<Trace>>>>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    std::__tree<std::__value_type<std::string const,std::shared_ptr<Trace>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::shared_ptr<Trace>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::shared_ptr<Trace>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string const,std::shared_ptr<Trace>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::shared_ptr<Trace>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::shared_ptr<Trace>>>>::destroy(*(_QWORD *)(a1 + 8));
    v2 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_7;
    }
    else
    {
LABEL_6:
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      {
LABEL_7:
        operator delete((void *)a1);
        return;
      }
    }
    operator delete(*(void **)(a1 + 32));
    operator delete((void *)a1);
  }
}

void ctu::SharedSynchronizable<abm::HelperTask>::execute_wrapped(uint64_t *a1, NSObject *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD block[6];
  std::__shared_weak_count *v18;

  v4 = (std::__shared_weak_count *)a1[1];
  if (!v4 || (v7 = *a1, (v8 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  v10 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3abm10HelperTaskEE15execute_wrappedEP16dispatch_group_sU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E4A0E9B8;
  block[5] = v7;
  v18 = v8;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  block[4] = a3;
  dispatch_group_async(a2, v10, block);
  v13 = v18;
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN3abm10HelperTaskEE15execute_wrappedEP16dispatch_group_sU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIKN3abm10HelperTaskEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIKN3abm10HelperTaskEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZNK8dispatch8callbackIU13block_pointerFviN3xpc4dictEEEclIJN12TelephonyXPC3__0ES2_EEEvDpT__block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  xpc_object_t object;

  v1 = *(unsigned int *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  object = v2;
  if (v2)
    xpc_retain(v2);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v3 + 16))(v3, v1, &object);
  xpc_release(object);
}

void sub_1A3532A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN3abm19BasebandTracingTask14doForAllTracesIU13block_pointerFvNSt3__110shared_ptrI5TraceEEEEEvT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a1 + 32);
    v3 = *(std::__shared_weak_count **)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 24);
    v10 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *))(v2 + 16))(v2, &v9);
    v6 = v10;
    if (v10)
    {
      v7 = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1A3532B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<abm::HelperTask>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3abm10HelperTaskEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E4A0EA48;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN3abm10HelperTaskEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void util::strip_non_printable(std::string *this)
{
  std::string *v1;
  std::string::size_type size;
  std::string *v3;
  std::string *v4;
  std::string::size_type v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  std::string::size_type v12;
  int v13;
  std::string *v14;
  char *v15;
  std::string::size_type v16;
  std::string::size_type v17;

  v1 = this;
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v3 = this;
  else
    v3 = (std::string *)this->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  if (size)
  {
    v4 = (std::string *)((char *)v3 + size);
    v5 = size - 1;
    v6 = MEMORY[0x1E0C80978];
    while (1)
    {
      v7 = v3->__r_.__value_.__s.__data_[0];
      if ((v7 & 0x80000000) != 0)
        break;
      v8 = *(_DWORD *)(v6 + 4 * v7 + 60);
      if ((v8 & 0x40000) == 0 || (v8 & 0x4000) != 0)
        goto LABEL_15;
LABEL_8:
      v3 = (std::string *)((char *)v3 + 1);
      --v5;
      if (v3 == v4)
        goto LABEL_28;
    }
    if (__maskrune(v3->__r_.__value_.__s.__data_[0], 0x40000uLL) && !__maskrune(v7, 0x4000uLL))
      goto LABEL_8;
LABEL_15:
    if (v3 != v4 && (std::string *)((char *)&v3->__r_.__value_.__l.__data_ + 1) != v4)
    {
      v9 = 1;
      v4 = v3;
      while (1)
      {
        v10 = v3->__r_.__value_.__s.__data_[v9];
        if ((v10 & 0x80000000) != 0)
        {
          if (!__maskrune(v3->__r_.__value_.__s.__data_[v9], 0x40000uLL) || __maskrune(v10, 0x4000uLL))
            goto LABEL_19;
        }
        else
        {
          v11 = *(_DWORD *)(v6 + 4 * v10 + 60);
          if ((v11 & 0x40000) == 0 || (v11 & 0x4000) != 0)
            goto LABEL_19;
        }
        v4->__r_.__value_.__s.__data_[0] = v3->__r_.__value_.__s.__data_[v9];
        v4 = (std::string *)((char *)v4 + 1);
LABEL_19:
        ++v9;
        if (!--v5)
          goto LABEL_28;
      }
    }
  }
  v4 = v3;
LABEL_28:
  v12 = HIBYTE(v1->__r_.__value_.__r.__words[2]);
  v13 = (char)v12;
  v14 = (std::string *)v1->__r_.__value_.__r.__words[0];
  v15 = (char *)(v1->__r_.__value_.__r.__words[0] + v1->__r_.__value_.__l.__size_);
  if ((v12 & 0x80u) != 0)
  {
    v16 = v1->__r_.__value_.__r.__words[0];
  }
  else
  {
    v15 = (char *)v1 + v12;
    v16 = (std::string::size_type)v1;
  }
  if ((v12 & 0x80u) != 0)
    v12 = v1->__r_.__value_.__l.__size_;
  v17 = (std::string::size_type)v4 - v16;
  if (v12 < (unint64_t)v4 - v16)
    std::string::__throw_out_of_range[abi:ne180100]();
  if (v15 - (char *)v4 == -1)
  {
    if (v13 < 0)
    {
      v1->__r_.__value_.__l.__size_ = v17;
      v1 = v14;
    }
    else
    {
      *((_BYTE *)&v1->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
    v1->__r_.__value_.__s.__data_[v17] = 0;
  }
  else
  {
    std::string::__erase_external_with_move(v1, v17, v15 - (char *)v4);
  }
}

uint64_t util::convert_garbage(uint64_t result)
{
  int v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;

  v1 = *(char *)(result + 23);
  if (v1 >= 0)
    v2 = (_BYTE *)result;
  else
    v2 = *(_BYTE **)result;
  if (v1 >= 0)
    v3 = *(unsigned __int8 *)(result + 23);
  else
    v3 = *(_QWORD *)(result + 8);
  if (v3)
  {
    v4 = MEMORY[0x1E0C80978];
    do
    {
      v5 = (char)*v2;
      if ((v5 & 0x80000000) != 0)
      {
        result = __maskrune((char)*v2, 0x40000uLL);
        if ((_DWORD)result)
          goto LABEL_10;
        result = __maskrune(v5, 0x4000uLL);
        if ((_DWORD)result)
          goto LABEL_10;
      }
      else
      {
        v6 = *(_DWORD *)(v4 + 4 * v5 + 60);
        if ((v6 & 0x40000) != 0)
          goto LABEL_10;
        result = v6 & 0x4000;
        if ((v6 & 0x4000) != 0)
          goto LABEL_10;
      }
      *v2 = 32;
LABEL_10:
      ++v2;
      --v3;
    }
    while (v3);
  }
  return result;
}

void util::strip_pattern(char *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  int v5;
  int v6;
  std::string *v7;
  std::string *v8;
  int64_t v9;
  std::string::size_type v10;
  char *v11;
  uint64_t size;
  std::string::size_type v13;
  std::string::size_type v14;
  int v15;
  std::string *v16;
  int v17;
  char *v18;
  int64_t v19;
  int64_t v20;
  char *v21;
  int v22;
  std::string *v23;
  int64_t v24;
  char *v25;
  char *v26;
  char *v27;
  int v28;
  std::string *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  std::string::size_type v33;
  int v34;
  std::string *v35;
  int v36;
  char *v37;
  int64_t v38;
  int64_t v39;
  char *v40;
  int v41;
  std::string *v42;
  int64_t v43;
  char *v44;
  char *v45;

  memset(a3, 170, sizeof(std::string));
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  v5 = a1[23];
  v6 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
  v7 = (std::string *)a3->__r_.__value_.__r.__words[0];
  if (v6 >= 0)
    v8 = a3;
  else
    v8 = (std::string *)a3->__r_.__value_.__r.__words[0];
  if (v5 >= 0)
    v9 = a1[23];
  else
    v9 = *((_QWORD *)a1 + 1);
  v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if (v5 >= 0)
    v11 = a1;
  else
    v11 = *(char **)a1;
  if (!v9)
  {
    v13 = 0;
    goto LABEL_20;
  }
  if (v6 >= 0)
    size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  else
    size = a3->__r_.__value_.__l.__size_;
  if (size >= v9)
  {
    v27 = (char *)v8 + size;
    v28 = *v11;
    v29 = v8;
    do
    {
      v30 = size - v9;
      if (v30 == -1)
        break;
      v31 = (char *)memchr(v29, v28, v30 + 1);
      if (!v31)
        break;
      v32 = v31;
      if (!memcmp(v31, v11, v9))
      {
        if (v32 != v27)
        {
          v13 = v32 - (char *)v8;
          if (v32 - (char *)v8 != -1)
          {
            if (v9 == -1)
            {
              while (1)
              {
                v33 = a3->__r_.__value_.__l.__size_;
                if ((v10 & 0x80u) == 0)
                  v33 = v10;
                if (v33 < v13)
                  break;
                if ((char)v10 < 0)
                {
                  a3->__r_.__value_.__l.__size_ = v13;
                }
                else
                {
                  *((_BYTE *)&a3->__r_.__value_.__s + 23) = v13 & 0x7F;
                  v7 = a3;
                }
                v7->__r_.__value_.__s.__data_[v13] = 0;
                v34 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
                v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                v7 = (std::string *)a3->__r_.__value_.__r.__words[0];
                if (v34 >= 0)
                  v35 = a3;
                else
                  v35 = (std::string *)a3->__r_.__value_.__r.__words[0];
                v36 = a1[23];
                if (v36 >= 0)
                  v37 = a1;
                else
                  v37 = *(char **)a1;
                if (v36 >= 0)
                  v38 = a1[23];
                else
                  v38 = *((_QWORD *)a1 + 1);
                if (v38)
                {
                  if (v34 >= 0)
                    v39 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                  else
                    v39 = a3->__r_.__value_.__l.__size_;
                  if (v39 < v38)
                    return;
                  v40 = (char *)v35 + v39;
                  v41 = *v37;
                  v42 = v35;
                  while (1)
                  {
                    v43 = v39 - v38;
                    if (v43 == -1)
                      return;
                    v44 = (char *)memchr(v42, v41, v43 + 1);
                    if (!v44)
                      return;
                    v45 = v44;
                    if (!memcmp(v44, v37, v38))
                      break;
                    v42 = (std::string *)(v45 + 1);
                    v39 = v40 - (v45 + 1);
                    if (v39 < v38)
                      return;
                  }
                  if (v45 == v40)
                    return;
                  v13 = v45 - (char *)v35;
                  if (v45 - (char *)v35 == -1)
                    return;
                }
                else
                {
                  v13 = 0;
                }
              }
            }
            else
            {
LABEL_20:
              while (1)
              {
                v14 = (v10 & 0x80u) == 0 ? v10 : a3->__r_.__value_.__l.__size_;
                if (v14 < v13)
                  break;
                std::string::__erase_external_with_move(a3, v13, v9);
                v15 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
                v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                if (v15 >= 0)
                  v16 = a3;
                else
                  v16 = (std::string *)a3->__r_.__value_.__r.__words[0];
                v17 = a1[23];
                if (v17 >= 0)
                  v18 = a1;
                else
                  v18 = *(char **)a1;
                if (v17 >= 0)
                  v19 = a1[23];
                else
                  v19 = *((_QWORD *)a1 + 1);
                if (v19)
                {
                  if (v15 >= 0)
                    v20 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                  else
                    v20 = a3->__r_.__value_.__l.__size_;
                  if (v20 < v19)
                    return;
                  v21 = (char *)v16 + v20;
                  v22 = *v18;
                  v23 = v16;
                  while (1)
                  {
                    v24 = v20 - v19;
                    if (v24 == -1)
                      return;
                    v25 = (char *)memchr(v23, v22, v24 + 1);
                    if (!v25)
                      return;
                    v26 = v25;
                    if (!memcmp(v25, v18, v19))
                      break;
                    v23 = (std::string *)(v26 + 1);
                    v20 = v21 - (v26 + 1);
                    if (v20 < v19)
                      return;
                  }
                  if (v26 == v21)
                    return;
                  v13 = v26 - (char *)v16;
                  if (v26 - (char *)v16 == -1)
                    return;
                }
                else
                {
                  v13 = 0;
                }
              }
            }
            std::string::__throw_out_of_range[abi:ne180100]();
          }
        }
        return;
      }
      v29 = (std::string *)(v32 + 1);
      size = v27 - (v32 + 1);
    }
    while (size >= v9);
  }
}

void sub_1A35331D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *util::strip_leading_trailing@<X0>(_QWORD *result@<X0>, void **a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  void *v10;
  size_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v4 = *((unsigned __int8 *)result + 23);
  v5 = (_QWORD *)*result;
  v6 = result[1];
  if ((v4 & 0x80u) == 0)
    v7 = result;
  else
    v7 = (_QWORD *)*result;
  if ((v4 & 0x80u) == 0)
    v8 = *((unsigned __int8 *)result + 23);
  else
    v8 = result[1];
  v9 = *((char *)a2 + 23);
  if (v9 >= 0)
    v10 = a2;
  else
    v10 = *a2;
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)a2 + 23);
  else
    v11 = (size_t)a2[1];
  if (!v8)
    goto LABEL_26;
  v12 = result;
  v13 = 0;
  if (!v11)
  {
    v14 = v8 - 1;
    if ((v4 & 0x80) == 0)
      goto LABEL_28;
    goto LABEL_24;
  }
  while (1)
  {
    result = memchr(v10, *((char *)v7 + v13), v11);
    if (!result)
      break;
    if (v8 == ++v13)
      goto LABEL_26;
  }
  if (v13 == -1)
  {
LABEL_26:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  do
  {
    if (!v8)
    {
      v14 = -1;
      if ((v4 & 0x80) == 0)
        goto LABEL_28;
LABEL_24:
      if (v6 >= v13)
      {
        v4 = v6;
        v12 = v5;
        goto LABEL_29;
      }
LABEL_41:
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    result = memchr(v10, *((char *)v7 + --v8), v11);
  }
  while (result);
  v14 = v8;
  if ((v4 & 0x80) != 0)
    goto LABEL_24;
LABEL_28:
  if (v13 > v4)
    goto LABEL_41;
LABEL_29:
  v15 = v14 - v13 + 1;
  if (v4 - v13 >= v15)
    v16 = v15;
  else
    v16 = v4 - v13;
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v16 >= 0x17)
  {
    v17 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v17 = v16 | 7;
    v18 = v17 + 1;
    v19 = operator new(v17 + 1);
    a3[1] = v16;
    a3[2] = v18 | 0x8000000000000000;
    *a3 = v19;
    a3 = v19;
    goto LABEL_39;
  }
  *((_BYTE *)a3 + 23) = v16;
  if (v16)
LABEL_39:
    result = memmove(a3, (char *)v12 + v13, v16);
  *((_BYTE *)a3 + v16) = 0;
  return result;
}

uint64_t util::to_upper(uint64_t result)
{
  uint64_t v1;
  int v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;

  v1 = *(unsigned __int8 *)(result + 23);
  v2 = (char)v1;
  v3 = (_BYTE *)(result + v1);
  if (v2 >= 0)
    v4 = v3;
  else
    v4 = (_BYTE *)(*(_QWORD *)result + *(_QWORD *)(result + 8));
  if (v2 >= 0)
    v5 = (_BYTE *)result;
  else
    v5 = *(_BYTE **)result;
  for (; v5 != v4; ++v5)
  {
    result = __toupper((char)*v5);
    *v5 = result;
  }
  return result;
}

BOOL util::equal_nocase(const char *a1, const char *a2)
{
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  return strcasecmp(a1, a2) == 0;
}

void util::strip_non_alpha(std::string *a1)
{
  std::string::size_type size;
  char *v3;
  char *v4;
  std::string::size_type v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  int v11;
  std::string::size_type v12;
  char *v13;
  std::string *v14;
  std::string::size_type v15;

  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v3 = (char *)a1;
  else
    v3 = (char *)a1->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_21;
  v4 = &v3[size];
  v5 = size - 1;
  v6 = MEMORY[0x1E0C80978];
  while (1)
  {
    v7 = *v3;
    if ((v7 & 0x80000000) != 0)
    {
      if (!__maskrune(v7, 0x100uLL))
        break;
      goto LABEL_9;
    }
    if ((*(_DWORD *)(v6 + 4 * v7 + 60) & 0x100) == 0)
      break;
LABEL_9:
    ++v3;
    --v5;
    if (v3 == v4)
      goto LABEL_22;
  }
  if (v3 != v4 && v3 + 1 != v4)
  {
    v8 = 1;
    v4 = v3;
    while (1)
    {
      v9 = v3[v8];
      if ((v9 & 0x80000000) == 0)
        break;
      if (__maskrune(v9, 0x100uLL))
        goto LABEL_16;
LABEL_17:
      ++v8;
      if (!--v5)
        goto LABEL_22;
    }
    if ((*(_DWORD *)(v6 + 4 * v9 + 60) & 0x100) == 0)
      goto LABEL_17;
LABEL_16:
    *v4++ = v3[v8];
    goto LABEL_17;
  }
LABEL_21:
  v4 = v3;
LABEL_22:
  v10 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  v11 = (char)v10;
  v12 = a1->__r_.__value_.__r.__words[0];
  v13 = (char *)(a1->__r_.__value_.__r.__words[0] + a1->__r_.__value_.__l.__size_);
  if ((v10 & 0x80u) != 0)
  {
    v14 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  else
  {
    v13 = (char *)a1 + v10;
    v14 = a1;
  }
  if ((v10 & 0x80u) != 0)
    v10 = a1->__r_.__value_.__l.__size_;
  v15 = v4 - (char *)v14;
  if (v10 < v4 - (char *)v14)
    std::string::__throw_out_of_range[abi:ne180100]();
  if (v13 - v4 == -1)
  {
    if (v11 < 0)
    {
      a1->__r_.__value_.__l.__size_ = v15;
      *(_BYTE *)(v12 + v15) = 0;
    }
    else
    {
      *((_BYTE *)&a1->__r_.__value_.__s + 23) = v15 & 0x7F;
      a1->__r_.__value_.__s.__data_[v15] = 0;
    }
  }
  else
  {
    std::string::__erase_external_with_move(a1, v15, v13 - v4);
  }
}

void util::readPlistToCFDictionary(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v2;
  const __CFAllocator *v4;
  __CFError *v5;
  __CFError *v6;
  uint64_t (*v7)(uint64_t);
  __CFError *v8;
  __CFReadStream *v9;
  uint64_t (*v10)(uint64_t);
  CFPropertyListRef v11;
  unsigned __int8 v12;
  NSObject *v13;
  CFIndex Code;
  void **v15;
  void *__p[2];
  uint64_t v17;
  CFErrorRef error[4];
  uint8_t buf[24];
  void **v20;
  uint64_t v21;

  v2 = (const char *)a1;
  v21 = *MEMORY[0x1E0C80C00];
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (*(char *)(a1 + 23) < 0)
    v2 = *(const char **)a1;
  v5 = (__CFError *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2, 0x8000100u);
  error[3] = v5;
  v6 = CFURLCreateWithFileSystemPath(v4, (CFStringRef)v5, kCFURLPOSIXPathStyle, 0);
  error[2] = v6;
  *a2 = 0;
  v7 = ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get;
  if (!v6)
    v7 = 0;
  if (!v7)
    goto LABEL_18;
  v8 = CFReadStreamCreateWithFile(v4, v6);
  v9 = v8;
  error[1] = v8;
  v10 = ctu::SharedRef<__CFReadStream,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFReadStream>::get;
  if (!v8)
    v10 = 0;
  if (!v10
    || (CFReadStreamOpen(v8),
        error[0] = 0,
        v11 = CFPropertyListCreateWithStream(v4, v9, 0, 1uLL, 0, error),
        *a2 = v11,
        CFReadStreamClose(v9),
        !error[0]))
  {
LABEL_16:
    if (!v9)
      goto LABEL_18;
    goto LABEL_17;
  }
  CFErrorGetDomain(error[0]);
  memset(buf, 0, sizeof(buf));
  ctu::cf::assign();
  *(_OWORD *)__p = *(_OWORD *)buf;
  v17 = *(_QWORD *)&buf[16];
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED114D18 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
  }
  if (GetOsLogContext(void)::onceToken != -1)
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
    v13 = qword_1ED114D18;
    if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
LABEL_26:
    Code = CFErrorGetCode(error[0]);
    v15 = __p;
    if (v17 < 0)
      v15 = (void **)__p[0];
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)&buf[4] = v6;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = Code;
    *(_WORD *)&buf[22] = 2080;
    v20 = v15;
    _os_log_error_impl(&dword_1A343C000, v13, OS_LOG_TYPE_ERROR, "Failed to create %@ PropertyList: %ld: %s", buf, 0x20u);
    goto LABEL_13;
  }
  v13 = qword_1ED114D18;
  if (os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
    goto LABEL_26;
LABEL_13:
  CFRelease(error[0]);
  *a2 = 0;
  if (v11)
    CFRelease(v11);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
    goto LABEL_16;
  operator delete(__p[0]);
  if (v9)
LABEL_17:
    CFRelease(v9);
LABEL_18:
  if (v6)
    CFRelease(v6);
  if (v5)
    CFRelease(v5);
}

void sub_1A353385C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t ctu::SharedRef<__CFReadStream,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFReadStream>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

const void **ctu::cf::CFSharedRef<__CFReadStream>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void util::moveDirContent(const void **a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int filtered_files;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  int v17;
  size_t v18;
  unint64_t v19;
  std::string *p_dst;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  std::string *v24;
  std::string::size_type size;
  std::string *v26;
  __int128 v27;
  int is_directory;
  int v29;
  size_t v30;
  unint64_t v31;
  std::string *v32;
  unsigned __int8 v33;
  NSObject *v34;
  int v35;
  size_t v36;
  unint64_t v37;
  std::string *v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const void *v56;
  std::string *v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  std::string *p_p;
  unsigned __int8 v62;
  NSObject *v63;
  void **v64;
  void **v65;
  char *v66;
  __int128 v67;
  int v68;
  size_t v69;
  unint64_t v70;
  std::string *p_buf;
  uint64_t v72;
  uint64_t v73;
  const void *v74;
  std::string *v75;
  std::string::size_type v76;
  std::string *v77;
  __int128 v78;
  int v79;
  size_t v80;
  unint64_t v81;
  std::string *v82;
  uint64_t v83;
  uint64_t v84;
  const void *v85;
  std::string *v86;
  std::string::size_type v87;
  std::string *v88;
  __int128 v89;
  char v90;
  unsigned __int8 v91;
  NSObject *v92;
  int v93;
  size_t v94;
  unint64_t v95;
  std::string *v96;
  NSObject *v97;
  int v98;
  size_t v99;
  unint64_t v100;
  std::string *v101;
  uint64_t v102;
  uint64_t v103;
  const void *v104;
  std::string *v105;
  std::string::size_type v106;
  std::string *v107;
  __int128 v108;
  std::string *v109;
  std::string *v110;
  uint64_t v111;
  uint64_t v112;
  const void *v113;
  std::string *v114;
  std::string::size_type v115;
  std::string *v116;
  __int128 v117;
  std::string *v118;
  std::string *v119;
  std::string::size_type v120;
  int v121;
  char *v124;
  std::locale v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  uint64_t v130;
  std::string v131;
  void *v132[2];
  std::string::size_type v133;
  std::string __dst;
  std::string __p;
  std::locale v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  char *v142;
  void **v143;
  uint64_t v144;
  uint8_t v145[4];
  std::string *v146;
  __int16 v147;
  std::string *v148;
  std::string buf;
  std::string v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  v142 = 0;
  v143 = 0;
  v144 = 0;
  std::locale::locale(&v136, (const std::locale *)a5);
  v137 = *(_OWORD *)(a5 + 8);
  v138 = *(_OWORD *)(a5 + 24);
  v8 = *(std::__shared_weak_count **)(a5 + 48);
  v139 = *(_QWORD *)(a5 + 40);
  v140 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v141 = *(_QWORD *)(a5 + 56);
  filtered_files = ctu::fs::get_filtered_files();
  v12 = v140;
  if (!v140)
    goto LABEL_8;
  v13 = (unint64_t *)&v140->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    std::locale::~locale(&v136);
    if (filtered_files)
    {
LABEL_9:
      v15 = v142;
      v124 = (char *)v143;
      if (v142 != (char *)v143)
      {
        if (a4)
        {
          while (1)
          {
            memset(&v150, 170, sizeof(v150));
            if (v15[23] < 0)
            {
              std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
            }
            else
            {
              v16 = *(_OWORD *)v15;
              v150.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
              *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v16;
            }
            v17 = *((char *)a1 + 23);
            if (v17 >= 0)
              v18 = *((unsigned __int8 *)a1 + 23);
            else
              v18 = (size_t)a1[1];
            v19 = v18 + 1;
            memset(&__dst, 170, sizeof(__dst));
            if (v18 + 1 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            if (v19 >= 0x17)
            {
              v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v19 | 7) != 0x17)
                v21 = v19 | 7;
              v22 = v21 + 1;
              p_dst = (std::string *)operator new(v21 + 1);
              __dst.__r_.__value_.__l.__size_ = v18 + 1;
              __dst.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            }
            else
            {
              memset(&__dst, 0, sizeof(__dst));
              p_dst = &__dst;
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v18 + 1;
              if (!v18)
                goto LABEL_30;
            }
            if (v17 >= 0)
              v23 = a1;
            else
              v23 = *a1;
            memmove(p_dst, v23, v18);
LABEL_30:
            *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v18) = 47;
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v24 = &v150;
            else
              v24 = (std::string *)v150.__r_.__value_.__r.__words[0];
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v150.__r_.__value_.__r.__words[2]);
            else
              size = v150.__r_.__value_.__l.__size_;
            v26 = std::string::append(&__dst, (const std::string::value_type *)v24, size);
            v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v27;
            v26->__r_.__value_.__l.__size_ = 0;
            v26->__r_.__value_.__r.__words[2] = 0;
            v26->__r_.__value_.__r.__words[0] = 0;
            is_directory = ctu::fs::is_directory();
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__p.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_38:
                if (is_directory)
                  goto LABEL_39;
                goto LABEL_48;
              }
            }
            else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_38;
            }
            operator delete(__dst.__r_.__value_.__l.__data_);
            if (is_directory)
            {
LABEL_39:
              v29 = *((char *)a1 + 23);
              if (v29 >= 0)
                v30 = *((unsigned __int8 *)a1 + 23);
              else
                v30 = (size_t)a1[1];
              v31 = v30 + 1;
              memset(&__dst, 170, sizeof(__dst));
              if (v30 + 1 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              if (v31 >= 0x17)
              {
                v39 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v31 | 7) != 0x17)
                  v39 = v31 | 7;
                v40 = v39 + 1;
                v32 = (std::string *)operator new(v39 + 1);
                __dst.__r_.__value_.__l.__size_ = v30 + 1;
                __dst.__r_.__value_.__r.__words[2] = v40 | 0x8000000000000000;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
              }
              else
              {
                memset(&__dst, 0, sizeof(__dst));
                v32 = &__dst;
                *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v30 + 1;
                if (!v30)
                  goto LABEL_65;
              }
              if (v29 >= 0)
                v41 = a1;
              else
                v41 = *a1;
              memmove(v32, v41, v30);
LABEL_65:
              *(_WORD *)((char *)&v32->__r_.__value_.__l.__data_ + v30) = 47;
              if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v42 = &v150;
              else
                v42 = (std::string *)v150.__r_.__value_.__r.__words[0];
              if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v43 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
              else
                v43 = v150.__r_.__value_.__l.__size_;
              v44 = std::string::append(&__dst, (const std::string::value_type *)v42, v43);
              v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v45;
              v44->__r_.__value_.__l.__size_ = 0;
              v44->__r_.__value_.__r.__words[2] = 0;
              v44->__r_.__value_.__r.__words[0] = 0;
              v46 = std::string::append(&__p, "/", 1uLL);
              v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
              v133 = v46->__r_.__value_.__r.__words[2];
              *(_OWORD *)v132 = v47;
              v46->__r_.__value_.__l.__size_ = 0;
              v46->__r_.__value_.__r.__words[2] = 0;
              v46->__r_.__value_.__r.__words[0] = 0;
              if (*(char *)(a2 + 23) < 0)
                std::string::__init_copy_ctor_external(&v131, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
              else
                v131 = *(std::string *)a2;
              std::locale::locale(&v125, (const std::locale *)a5);
              v126 = *(_OWORD *)(a5 + 8);
              v127 = *(_OWORD *)(a5 + 24);
              v48 = *(std::__shared_weak_count **)(a5 + 48);
              v128 = *(_QWORD *)(a5 + 40);
              v129 = v48;
              if (v48)
              {
                v49 = (unint64_t *)&v48->__shared_owners_;
                do
                  v50 = __ldxr(v49);
                while (__stxr(v50 + 1, v49));
              }
              v130 = *(_QWORD *)(a5 + 56);
              util::moveDirContent(v132, &v131, a3, (a4 - 1), &v125);
              v51 = v129;
              if (!v129)
                goto LABEL_81;
              v52 = (unint64_t *)&v129->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
                std::locale::~locale(&v125);
                if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_82;
              }
              else
              {
LABEL_81:
                std::locale::~locale(&v125);
                if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_82:
                  if ((SHIBYTE(v133) & 0x80000000) == 0)
                    goto LABEL_83;
LABEL_88:
                  operator delete(v132[0]);
                  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_84;
                  goto LABEL_89;
                }
              }
              operator delete(v131.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v133) & 0x80000000) == 0)
              {
LABEL_83:
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_84;
                goto LABEL_89;
              }
              goto LABEL_88;
            }
LABEL_48:
            {
              GetOsLogContext(void)::sOsLogContext = 0;
              qword_1ED114D18 = 0;
              __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
            }
            if (GetOsLogContext(void)::onceToken == -1)
            {
              v34 = qword_1ED114D18;
              if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
                goto LABEL_91;
            }
            else
            {
              dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
              v34 = qword_1ED114D18;
              if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
                goto LABEL_91;
            }
            v35 = *((char *)a1 + 23);
            if (v35 >= 0)
              v36 = *((unsigned __int8 *)a1 + 23);
            else
              v36 = (size_t)a1[1];
            v37 = v36 + 1;
            memset(&__dst, 170, sizeof(__dst));
            if (v36 + 1 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            if (v37 >= 0x17)
            {
              v121 = v35;
              v54 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v37 | 7) != 0x17)
                v54 = v37 | 7;
              v55 = v54 + 1;
              v38 = (std::string *)operator new(v54 + 1);
              __dst.__r_.__value_.__l.__size_ = v36 + 1;
              __dst.__r_.__value_.__r.__words[2] = v55 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
              v35 = v121;
            }
            else
            {
              memset(&__dst, 0, sizeof(__dst));
              v38 = &__dst;
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v36 + 1;
              if (!v36)
                goto LABEL_100;
            }
            if (v35 >= 0)
              v56 = a1;
            else
              v56 = *a1;
            memmove(v38, v56, v36);
LABEL_100:
            *(_WORD *)((char *)&v38->__r_.__value_.__l.__data_ + v36) = 47;
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v57 = &v150;
            else
              v57 = (std::string *)v150.__r_.__value_.__r.__words[0];
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v58 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
            else
              v58 = v150.__r_.__value_.__l.__size_;
            v59 = std::string::append(&__dst, (const std::string::value_type *)v57, v58);
            v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v60;
            v59->__r_.__value_.__l.__size_ = 0;
            v59->__r_.__value_.__r.__words[2] = 0;
            v59->__r_.__value_.__r.__words[0] = 0;
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a4;
            _os_log_error_impl(&dword_1A343C000, v34, OS_LOG_TYPE_ERROR, "%s is not a directory. So, skip to move it with the depth (%d)", (uint8_t *)&buf, 0x12u);
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_84:
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_90;
              goto LABEL_91;
            }
LABEL_89:
            operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_90:
              operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_91:
            if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v150.__r_.__value_.__l.__data_);
            v15 += 24;
            if (v15 == v124)
              goto LABEL_118;
          }
        }
        while (1)
        {
          memset(&v150, 170, sizeof(v150));
          if (v15[23] < 0)
          {
            std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
          }
          else
          {
            v67 = *(_OWORD *)v15;
            v150.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
            *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v67;
          }
          memset(&__p, 170, sizeof(__p));
          v68 = *(char *)(a2 + 23);
          if (v68 >= 0)
            v69 = *(unsigned __int8 *)(a2 + 23);
          else
            v69 = *(_QWORD *)(a2 + 8);
          v70 = v69 + 1;
          memset(&buf, 170, sizeof(buf));
          if (v69 + 1 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v70 >= 0x17)
          {
            v72 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v70 | 7) != 0x17)
              v72 = v70 | 7;
            v73 = v72 + 1;
            p_buf = (std::string *)operator new(v72 + 1);
            buf.__r_.__value_.__l.__size_ = v69 + 1;
            buf.__r_.__value_.__r.__words[2] = v73 | 0x8000000000000000;
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
          }
          else
          {
            memset(&buf, 0, sizeof(buf));
            p_buf = &buf;
            *((_BYTE *)&buf.__r_.__value_.__s + 23) = v69 + 1;
            if (!v69)
              goto LABEL_148;
          }
          if (v68 >= 0)
            v74 = (const void *)a2;
          else
            v74 = *(const void **)a2;
          memmove(p_buf, v74, v69);
LABEL_148:
          *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v69) = 47;
          if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v75 = &v150;
          else
            v75 = (std::string *)v150.__r_.__value_.__r.__words[0];
          if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v76 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
          else
            v76 = v150.__r_.__value_.__l.__size_;
          v77 = std::string::append(&buf, (const std::string::value_type *)v75, v76);
          v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
          __dst.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v78;
          v77->__r_.__value_.__l.__size_ = 0;
          v77->__r_.__value_.__r.__words[2] = 0;
          v77->__r_.__value_.__r.__words[0] = 0;
          ctu::fs::get_unique_filename();
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_156;
          }
          else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_156;
          }
          operator delete(buf.__r_.__value_.__l.__data_);
LABEL_156:
          v79 = *((char *)a1 + 23);
          if (v79 >= 0)
            v80 = *((unsigned __int8 *)a1 + 23);
          else
            v80 = (size_t)a1[1];
          v81 = v80 + 1;
          memset(&buf, 170, sizeof(buf));
          if (v80 + 1 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v81 >= 0x17)
          {
            v83 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v81 | 7) != 0x17)
              v83 = v81 | 7;
            v84 = v83 + 1;
            v82 = (std::string *)operator new(v83 + 1);
            buf.__r_.__value_.__l.__size_ = v80 + 1;
            buf.__r_.__value_.__r.__words[2] = v84 | 0x8000000000000000;
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
          }
          else
          {
            memset(&buf, 0, sizeof(buf));
            v82 = &buf;
            *((_BYTE *)&buf.__r_.__value_.__s + 23) = v80 + 1;
            if (!v80)
              goto LABEL_170;
          }
          if (v79 >= 0)
            v85 = a1;
          else
            v85 = *a1;
          memmove(v82, v85, v80);
LABEL_170:
          *(_WORD *)((char *)&v82->__r_.__value_.__l.__data_ + v80) = 47;
          if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v86 = &v150;
          else
            v86 = (std::string *)v150.__r_.__value_.__r.__words[0];
          if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v87 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
          else
            v87 = v150.__r_.__value_.__l.__size_;
          v88 = std::string::append(&buf, (const std::string::value_type *)v86, v87);
          v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
          __dst.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v89;
          v88->__r_.__value_.__l.__size_ = 0;
          v88->__r_.__value_.__r.__words[2] = 0;
          v88->__r_.__value_.__r.__words[0] = 0;
          v90 = ctu::fs::rename();
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_178:
              if ((v90 & 1) == 0)
                goto LABEL_193;
              goto LABEL_179;
            }
          }
          else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_178;
          }
          operator delete(buf.__r_.__value_.__l.__data_);
          if ((v90 & 1) == 0)
          {
LABEL_193:
            {
              GetOsLogContext(void)::sOsLogContext = 0;
              qword_1ED114D18 = 0;
              __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
            }
            if (GetOsLogContext(void)::onceToken == -1)
            {
              v97 = qword_1ED114D18;
              if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
                goto LABEL_243;
LABEL_196:
              v98 = *((char *)a1 + 23);
              if (v98 >= 0)
                v99 = *((unsigned __int8 *)a1 + 23);
              else
                v99 = (size_t)a1[1];
              v100 = v99 + 1;
              memset(&buf, 170, sizeof(buf));
              if (v99 + 1 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              if (v100 >= 0x17)
              {
                v111 = (v100 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v100 | 7) != 0x17)
                  v111 = v100 | 7;
                v112 = v111 + 1;
                v101 = (std::string *)operator new(v111 + 1);
                buf.__r_.__value_.__l.__size_ = v99 + 1;
                buf.__r_.__value_.__r.__words[2] = v112 | 0x8000000000000000;
                buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v101;
              }
              else
              {
                memset(&buf, 0, sizeof(buf));
                v101 = &buf;
                *((_BYTE *)&buf.__r_.__value_.__s + 23) = v99 + 1;
                if (!v99)
                  goto LABEL_230;
              }
              if (v98 >= 0)
                v113 = a1;
              else
                v113 = *a1;
              memmove(v101, v113, v99);
LABEL_230:
              *(_WORD *)((char *)&v101->__r_.__value_.__l.__data_ + v99) = 47;
              if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v114 = &v150;
              else
                v114 = (std::string *)v150.__r_.__value_.__r.__words[0];
              if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v115 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
              else
                v115 = v150.__r_.__value_.__l.__size_;
              v116 = std::string::append(&buf, (const std::string::value_type *)v114, v115);
              v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
              __dst.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v117;
              v116->__r_.__value_.__l.__size_ = 0;
              v116->__r_.__value_.__r.__words[2] = 0;
              v116->__r_.__value_.__r.__words[0] = 0;
              v118 = &__dst;
              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v118 = (std::string *)__dst.__r_.__value_.__r.__words[0];
              v119 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v119 = (std::string *)__p.__r_.__value_.__r.__words[0];
              *(_DWORD *)v145 = 136315394;
              v146 = v118;
              v147 = 2080;
              v148 = v119;
              _os_log_error_impl(&dword_1A343C000, v97, OS_LOG_TYPE_ERROR, "Failed to move %s -> %s", v145, 0x16u);
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              {
LABEL_241:
                operator delete(__dst.__r_.__value_.__l.__data_);
                if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_243;
                goto LABEL_242;
              }
LABEL_221:
              if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_243;
LABEL_242:
              operator delete(buf.__r_.__value_.__l.__data_);
              goto LABEL_243;
            }
            dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
            v97 = qword_1ED114D18;
            if (os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
              goto LABEL_196;
            goto LABEL_243;
          }
LABEL_179:
          {
            GetOsLogContext(void)::sOsLogContext = 0;
            qword_1ED114D18 = 0;
            __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
          }
          if (GetOsLogContext(void)::onceToken == -1)
          {
            v92 = qword_1ED114D18;
            if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_DEFAULT))
              goto LABEL_243;
LABEL_182:
            v93 = *((char *)a1 + 23);
            if (v93 >= 0)
              v94 = *((unsigned __int8 *)a1 + 23);
            else
              v94 = (size_t)a1[1];
            v95 = v94 + 1;
            memset(&buf, 170, sizeof(buf));
            if (v94 + 1 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            if (v95 >= 0x17)
            {
              v102 = (v95 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v95 | 7) != 0x17)
                v102 = v95 | 7;
              v103 = v102 + 1;
              v96 = (std::string *)operator new(v102 + 1);
              buf.__r_.__value_.__l.__size_ = v94 + 1;
              buf.__r_.__value_.__r.__words[2] = v103 | 0x8000000000000000;
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v96;
            }
            else
            {
              memset(&buf, 0, sizeof(buf));
              v96 = &buf;
              *((_BYTE *)&buf.__r_.__value_.__s + 23) = v94 + 1;
              if (!v94)
                goto LABEL_210;
            }
            if (v93 >= 0)
              v104 = a1;
            else
              v104 = *a1;
            memmove(v96, v104, v94);
LABEL_210:
            *(_WORD *)((char *)&v96->__r_.__value_.__l.__data_ + v94) = 47;
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v105 = &v150;
            else
              v105 = (std::string *)v150.__r_.__value_.__r.__words[0];
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v106 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
            else
              v106 = v150.__r_.__value_.__l.__size_;
            v107 = std::string::append(&buf, (const std::string::value_type *)v105, v106);
            v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
            __dst.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v108;
            v107->__r_.__value_.__l.__size_ = 0;
            v107->__r_.__value_.__r.__words[2] = 0;
            v107->__r_.__value_.__r.__words[0] = 0;
            v109 = &__dst;
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v109 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            v110 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v110 = (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_DWORD *)v145 = 136315394;
            v146 = v109;
            v147 = 2080;
            v148 = v110;
            _os_log_impl(&dword_1A343C000, v92, OS_LOG_TYPE_DEFAULT, "Moved %s -> %s", v145, 0x16u);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_241;
            goto LABEL_221;
          }
          dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
          v92 = qword_1ED114D18;
          if (os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_DEFAULT))
            goto LABEL_182;
LABEL_243:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
LABEL_247:
              operator delete(v150.__r_.__value_.__l.__data_);
          }
          else if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
          {
            goto LABEL_247;
          }
          v15 += 24;
          if (v15 == v124)
            goto LABEL_118;
        }
      }
      goto LABEL_118;
    }
  }
  else
  {
LABEL_8:
    std::locale::~locale(&v136);
    if (filtered_files)
      goto LABEL_9;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED114D18 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v63 = qword_1ED114D18;
    if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
      goto LABEL_118;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
    v63 = qword_1ED114D18;
    if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
      goto LABEL_118;
  }
  v120 = (std::string::size_type)a1;
  if (*((char *)a1 + 23) < 0)
    v120 = (std::string::size_type)*a1;
  LODWORD(v150.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)v150.__r_.__value_.__r.__words + 4) = v120;
  _os_log_error_impl(&dword_1A343C000, v63, OS_LOG_TYPE_ERROR, "Failed to find a content in %s", (uint8_t *)&v150, 0xCu);
LABEL_118:
  if (a3)
    ctu::fs::remove_dir();
  v64 = (void **)v142;
  if (v142)
  {
    v65 = v143;
    v66 = v142;
    if (v143 != (void **)v142)
    {
      do
      {
        if (*((char *)v65 - 1) < 0)
          operator delete(*(v65 - 3));
        v65 -= 3;
      }
      while (v65 != v64);
      v66 = v142;
    }
    v143 = v64;
    operator delete(v66);
  }
}

void sub_1A3534958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,std::locale a58)
{
  uint64_t v58;

  if (a57 < 0)
    operator delete(__p);
  if (*(char *)(v58 - 105) < 0)
    operator delete(*(void **)(v58 - 128));
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v58 - 216));
  _Unwind_Resume(a1);
}

void util::generateSHA256(const char *a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, unsigned __int8 **a4@<X8>)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  __int128 v10;
  const char *v11;
  int v12;
  unint64_t v13;
  ssize_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  const char *v17;
  uint8_t *p_c;
  NSObject *v19;
  uint32_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  int *v23;
  char *v24;
  int v25;
  int v26;
  unsigned __int8 v27;
  NSObject *v28;
  int *v29;
  char *v30;
  int v31;
  int v32;
  CC_SHA256_CTX c;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v8 = (unsigned __int8 *)operator new(0x20uLL);
  a4[1] = v8 + 32;
  a4[2] = v8 + 32;
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *a4 = v8;
  if (!a2)
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED114D18 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v16 = qword_1ED114D18;
      if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
        return;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
      v16 = qword_1ED114D18;
      if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
        return;
    }
    LOWORD(c.count[0]) = 0;
    v17 = "dataIn Buffer is NULL";
    p_c = (uint8_t *)&c;
    v19 = v16;
    v20 = 2;
LABEL_20:
    _os_log_error_impl(&dword_1A343C000, v19, OS_LOG_TYPE_ERROR, v17, p_c, v20);
    return;
  }
  v9 = v8;
  *(_QWORD *)&c.wbuf[14] = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&c.wbuf[6] = v10;
  *(_OWORD *)&c.wbuf[10] = v10;
  *(_OWORD *)&c.hash[6] = v10;
  *(_OWORD *)&c.wbuf[2] = v10;
  *(_OWORD *)c.count = v10;
  *(_OWORD *)&c.hash[2] = v10;
  if (!ctu::fs::get_file_size())
    return;
  CC_SHA256_Init(&c);
  v11 = a1;
  if (a1[23] < 0)
    v11 = *(const char **)a1;
  v12 = open(v11, 0);
  if (v12 >= 1)
  {
    v13 = 0;
    while (1)
    {
      v14 = read(v12, a2, a3);
      if (v14 == -1)
        break;
      CC_SHA256_Update(&c, a2, v14);
      v13 += v14;
      if (v13 >= 0xAAAAAAAAAAAAAAAALL)
        goto LABEL_24;
    }
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED114D18 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v28 = qword_1ED114D18;
      if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
      {
LABEL_24:
        CC_SHA256_Final(v9, &c);
        close(v12);
        return;
      }
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
      v28 = qword_1ED114D18;
      if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
        goto LABEL_24;
    }
    if (a1[23] < 0)
      a1 = *(const char **)a1;
    v29 = __error();
    v30 = strerror(*v29);
    v31 = *__error();
    v32 = *__error();
    *(_DWORD *)buf = 136315906;
    v35 = a1;
    v36 = 2080;
    v37 = v30;
    v38 = 1024;
    v39 = v31;
    v40 = 1024;
    v41 = v32;
    _os_log_error_impl(&dword_1A343C000, v28, OS_LOG_TYPE_ERROR, "Failed to read: %s : %s (%d,0x%x)", buf, 0x22u);
    goto LABEL_24;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED114D18 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v22 = qword_1ED114D18;
    if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
      return;
    goto LABEL_17;
  }
  dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
  v22 = qword_1ED114D18;
  if (os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
  {
LABEL_17:
    if (a1[23] < 0)
      a1 = *(const char **)a1;
    v23 = __error();
    v24 = strerror(*v23);
    v25 = *__error();
    v26 = *__error();
    *(_DWORD *)buf = 136315906;
    v35 = a1;
    v36 = 2080;
    v37 = v24;
    v38 = 1024;
    v39 = v25;
    v40 = 1024;
    v41 = v26;
    v17 = "Failed to open: %s : %s (%d, 0x%x)";
    p_c = buf;
    v19 = v22;
    v20 = 34;
    goto LABEL_20;
  }
}

void sub_1A3534FB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1A3534FC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1A3534FE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1A3534FF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1A3535010(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

BOOL util::markPurgeableFile(uint64_t *a1)
{
  uint64_t *v1;
  int v2;
  int v3;
  int v4;
  unsigned __int8 v5;
  uint64_t v6;
  _BOOL8 result;
  int *v8;
  char *v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  int *v15;
  char *v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t *v19;
  __int16 v20;
  _BYTE v21[14];
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v1 = a1;
  v24 = *MEMORY[0x1E0C80C00];
  v17 = 65541;
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    v2 = open((const char *)a1, 0);
    if ((v2 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_11:
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED114D18 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v14 = qword_1ED114D18;
      result = os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
      v14 = qword_1ED114D18;
      result = os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
    }
    if (*((char *)v1 + 23) < 0)
      v1 = (uint64_t *)*v1;
    v15 = __error();
    v16 = strerror(*v15);
    *(_DWORD *)buf = 136315394;
    v19 = v1;
    v20 = 2080;
    *(_QWORD *)v21 = v16;
    v10 = "Failed to open %s : %s";
    v11 = v14;
    v12 = 22;
    goto LABEL_17;
  }
  v2 = open((const char *)*a1, 0);
  if (v2 < 0)
    goto LABEL_11;
LABEL_3:
  v3 = v2;
  v4 = ffsctl(v2, 0xC0084A44uLL, &v17, 0);
  close(v3);
  if (!v4)
    return 1;
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED114D18 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v6 = qword_1ED114D18;
    result = os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR);
    if (result)
    {
LABEL_7:
      if (*((char *)v1 + 23) < 0)
        v1 = (uint64_t *)*v1;
      v8 = __error();
      v9 = strerror(*v8);
      *(_DWORD *)buf = 136315906;
      v19 = v1;
      v20 = 1024;
      *(_DWORD *)v21 = v4;
      *(_WORD *)&v21[4] = 2080;
      *(_QWORD *)&v21[6] = v9;
      v22 = 2048;
      v23 = v17;
      v10 = "Failed to mark %s as purgeable %d (%s) (flags 0x%llx)";
      v11 = v6;
      v12 = 38;
LABEL_17:
      _os_log_error_impl(&dword_1A343C000, v11, OS_LOG_TYPE_ERROR, v10, buf, v12);
      return 0;
    }
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
    v6 = qword_1ED114D18;
    result = os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR);
    if (result)
      goto LABEL_7;
  }
  return result;
}

BOOL util::checkLogFileAge(uint64_t a1, int64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  std::sub_match<const char *> *v6;
  std::sub_match<std::__wrap_iter<const char *>> *v7;
  int v8;
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  char *v16;
  __int128 *v17;
  _OWORD *v18;
  unint64_t v19;
  __int128 v20;
  _BOOL8 v21;
  void *v22;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  char *v32;
  __int128 *v33;
  _OWORD *v34;
  unint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  char *v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  char *v58;
  __int128 *v59;
  _OWORD *v60;
  unint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  char *v71;
  __int128 *v72;
  _OWORD *v73;
  unint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  char *v84;
  __int128 *v85;
  _OWORD *v86;
  unint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  time_t v92;
  std::string v93;
  _BYTE v94[40];
  __int128 v95;
  uint64_t v96;
  unint64_t v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  tm __p;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v95 = 0xAAAAAAAAAAAAAAAALL;
  v97 = 0xAAAAAAAAAAAAAA00;
  v99 = v4;
  v96 = 0;
  v98 = 0uLL;
  LOBYTE(v99) = 0;
  BYTE8(v99) = 0;
  v100 = 0;
  memset(v94, 0, sizeof(v94));
  v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = (std::sub_match<const char *> *)a1;
  else
    v6 = *(std::sub_match<const char *> **)a1;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 8);
  v7 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v6 + v5);
  v103 = 0xAAAAAAAAAAAAAA00;
  __p.tm_gmtoff = 0xAAAAAAAAAAAAAAAALL;
  v106 = v4;
  __p.tm_zone = 0;
  v102 = 0;
  v104 = 0;
  v105 = 0;
  LOBYTE(v106) = 0;
  BYTE8(v106) = 0;
  v107 = 0;
  memset(&__p, 0, 41);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a3, v6, (std::sub_match<const char *> *)((char *)v6 + v5), (std::vector<std::csub_match> *)&__p, 4160);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)v94, (uint64_t)v6, v7, (uint64_t *)&__p.tm_sec, 0);
  if (*(_QWORD *)&__p.tm_sec)
  {
    *(_QWORD *)&__p.tm_hour = *(_QWORD *)&__p.tm_sec;
    operator delete(*(void **)&__p.tm_sec);
  }
  if ((_BYTE)v99)
    v9 = 0;
  else
    v9 = v8;
  if (v9 != 1)
  {
    v21 = 0;
    v22 = *(void **)v94;
    if (!*(_QWORD *)v94)
      return v21;
LABEL_23:
    *(_QWORD *)&v94[8] = v22;
    operator delete(v22);
    return v21;
  }
  memset(&__p, 0, sizeof(__p));
  v10 = *(_QWORD *)v94;
  if (!*(_BYTE *)(*(_QWORD *)v94 + 40))
  {
    memset(&v93, 0, sizeof(v93));
    goto LABEL_33;
  }
  v12 = *(_QWORD *)(*(_QWORD *)v94 + 24);
  v11 = *(char **)(*(_QWORD *)v94 + 32);
  v13 = (unint64_t)&v11[-v12];
  if ((unint64_t)&v11[-v12] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v13 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v11 - v12;
    v14 = &v93;
    if ((char *)v12 != v11)
      goto LABEL_16;
LABEL_29:
    *v14 = 0;
    goto LABEL_33;
  }
  v24 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17)
    v24 = v13 | 7;
  v25 = v24 + 1;
  v14 = operator new(v24 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v11[-v12];
  v93.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  if ((char *)v12 == v11)
    goto LABEL_29;
LABEL_16:
  if (v13 < 0x20 || (unint64_t)&v14[-v12] < 0x20)
  {
    v15 = v14;
    v16 = (char *)v12;
  }
  else
  {
    v15 = &v14[v13 & 0xFFFFFFFFFFFFFFE0];
    v16 = (char *)(v12 + (v13 & 0xFFFFFFFFFFFFFFE0));
    v17 = (__int128 *)(v12 + 16);
    v18 = v14 + 16;
    v19 = v13 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v20 = *v17;
      *(v18 - 1) = *(v17 - 1);
      *v18 = v20;
      v17 += 2;
      v18 += 2;
      v19 -= 32;
    }
    while (v19);
    if (v13 == (v13 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_32;
  }
  do
  {
    v26 = *v16++;
    *v15++ = v26;
  }
  while (v16 != v11);
LABEL_32:
  *v15 = 0;
LABEL_33:
  util::convert<int>(&v93, &__p.tm_year, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    __p.tm_year -= 1900;
    if (*(_BYTE *)(v10 + 64))
      goto LABEL_35;
LABEL_45:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_53;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  __p.tm_year -= 1900;
  if (!*(_BYTE *)(v10 + 64))
    goto LABEL_45;
LABEL_35:
  v28 = *(_QWORD *)(v10 + 48);
  v27 = *(char **)(v10 + 56);
  v29 = (unint64_t)&v27[-v28];
  if ((unint64_t)&v27[-v28] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v29 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v27 - v28;
    v30 = &v93;
    if ((char *)v28 != v27)
      goto LABEL_38;
LABEL_49:
    *v30 = 0;
    goto LABEL_53;
  }
  v37 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v29 | 7) != 0x17)
    v37 = v29 | 7;
  v38 = v37 + 1;
  v30 = operator new(v37 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v27[-v28];
  v93.__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
  if ((char *)v28 == v27)
    goto LABEL_49;
LABEL_38:
  if (v29 < 0x20 || (unint64_t)&v30[-v28] < 0x20)
  {
    v31 = v30;
    v32 = (char *)v28;
  }
  else
  {
    v31 = &v30[v29 & 0xFFFFFFFFFFFFFFE0];
    v32 = (char *)(v28 + (v29 & 0xFFFFFFFFFFFFFFE0));
    v33 = (__int128 *)(v28 + 16);
    v34 = v30 + 16;
    v35 = v29 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v36 = *v33;
      *(v34 - 1) = *(v33 - 1);
      *v34 = v36;
      v33 += 2;
      v34 += 2;
      v35 -= 32;
    }
    while (v35);
    if (v29 == (v29 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_52;
  }
  do
  {
    v39 = *v32++;
    *v31++ = v39;
  }
  while (v32 != v27);
LABEL_52:
  *v31 = 0;
LABEL_53:
  util::convert<int>(&v93, &__p.tm_mon, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    --__p.tm_mon;
    if (*(_BYTE *)(v10 + 88))
      goto LABEL_55;
LABEL_65:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_73;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  --__p.tm_mon;
  if (!*(_BYTE *)(v10 + 88))
    goto LABEL_65;
LABEL_55:
  v41 = *(_QWORD *)(v10 + 72);
  v40 = *(char **)(v10 + 80);
  v42 = (unint64_t)&v40[-v41];
  if ((unint64_t)&v40[-v41] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v42 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v40 - v41;
    v43 = &v93;
    if ((char *)v41 != v40)
      goto LABEL_58;
LABEL_69:
    *v43 = 0;
    goto LABEL_73;
  }
  v50 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v42 | 7) != 0x17)
    v50 = v42 | 7;
  v51 = v50 + 1;
  v43 = operator new(v50 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v40[-v41];
  v93.__r_.__value_.__r.__words[2] = v51 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
  if ((char *)v41 == v40)
    goto LABEL_69;
LABEL_58:
  if (v42 < 0x20 || (unint64_t)&v43[-v41] < 0x20)
  {
    v44 = v43;
    v45 = (char *)v41;
  }
  else
  {
    v44 = &v43[v42 & 0xFFFFFFFFFFFFFFE0];
    v45 = (char *)(v41 + (v42 & 0xFFFFFFFFFFFFFFE0));
    v46 = (__int128 *)(v41 + 16);
    v47 = v43 + 16;
    v48 = v42 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v49 = *v46;
      *(v47 - 1) = *(v46 - 1);
      *v47 = v49;
      v46 += 2;
      v47 += 2;
      v48 -= 32;
    }
    while (v48);
    if (v42 == (v42 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_72;
  }
  do
  {
    v52 = *v45++;
    *v44++ = v52;
  }
  while (v45 != v40);
LABEL_72:
  *v44 = 0;
LABEL_73:
  util::convert<int>(&v93, (_DWORD *)((unint64_t)&__p | 0xC), 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v10 + 112))
      goto LABEL_75;
LABEL_85:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_93;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(v10 + 112))
    goto LABEL_85;
LABEL_75:
  v54 = *(_QWORD *)(v10 + 96);
  v53 = *(char **)(v10 + 104);
  v55 = (unint64_t)&v53[-v54];
  if ((unint64_t)&v53[-v54] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v55 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v53 - v54;
    v56 = &v93;
    if ((char *)v54 != v53)
      goto LABEL_78;
LABEL_89:
    *v56 = 0;
    goto LABEL_93;
  }
  v63 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17)
    v63 = v55 | 7;
  v64 = v63 + 1;
  v56 = operator new(v63 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v53[-v54];
  v93.__r_.__value_.__r.__words[2] = v64 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if ((char *)v54 == v53)
    goto LABEL_89;
LABEL_78:
  if (v55 < 0x20 || (unint64_t)&v56[-v54] < 0x20)
  {
    v57 = v56;
    v58 = (char *)v54;
  }
  else
  {
    v57 = &v56[v55 & 0xFFFFFFFFFFFFFFE0];
    v58 = (char *)(v54 + (v55 & 0xFFFFFFFFFFFFFFE0));
    v59 = (__int128 *)(v54 + 16);
    v60 = v56 + 16;
    v61 = v55 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v62 = *v59;
      *(v60 - 1) = *(v59 - 1);
      *v60 = v62;
      v59 += 2;
      v60 += 2;
      v61 -= 32;
    }
    while (v61);
    if (v55 == (v55 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_92;
  }
  do
  {
    v65 = *v58++;
    *v57++ = v65;
  }
  while (v58 != v53);
LABEL_92:
  *v57 = 0;
LABEL_93:
  util::convert<int>(&v93, &__p.tm_hour, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v10 + 136))
      goto LABEL_95;
LABEL_105:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_113;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(v10 + 136))
    goto LABEL_105;
LABEL_95:
  v67 = *(_QWORD *)(v10 + 120);
  v66 = *(char **)(v10 + 128);
  v68 = (unint64_t)&v66[-v67];
  if ((unint64_t)&v66[-v67] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v68 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v66 - v67;
    v69 = &v93;
    if ((char *)v67 != v66)
      goto LABEL_98;
LABEL_109:
    *v69 = 0;
    goto LABEL_113;
  }
  v76 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v68 | 7) != 0x17)
    v76 = v68 | 7;
  v77 = v76 + 1;
  v69 = operator new(v76 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v66[-v67];
  v93.__r_.__value_.__r.__words[2] = v77 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
  if ((char *)v67 == v66)
    goto LABEL_109;
LABEL_98:
  if (v68 < 0x20 || (unint64_t)&v69[-v67] < 0x20)
  {
    v70 = v69;
    v71 = (char *)v67;
  }
  else
  {
    v70 = &v69[v68 & 0xFFFFFFFFFFFFFFE0];
    v71 = (char *)(v67 + (v68 & 0xFFFFFFFFFFFFFFE0));
    v72 = (__int128 *)(v67 + 16);
    v73 = v69 + 16;
    v74 = v68 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v75 = *v72;
      *(v73 - 1) = *(v72 - 1);
      *v73 = v75;
      v72 += 2;
      v73 += 2;
      v74 -= 32;
    }
    while (v74);
    if (v68 == (v68 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_112;
  }
  do
  {
    v78 = *v71++;
    *v70++ = v78;
  }
  while (v71 != v66);
LABEL_112:
  *v70 = 0;
LABEL_113:
  util::convert<int>(&v93, &__p.tm_min, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v10 + 160))
      goto LABEL_115;
LABEL_125:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_133;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(v10 + 160))
    goto LABEL_125;
LABEL_115:
  v80 = *(_QWORD *)(v10 + 144);
  v79 = *(char **)(v10 + 152);
  v81 = (unint64_t)&v79[-v80];
  if ((unint64_t)&v79[-v80] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v81 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v79 - v80;
    v82 = &v93;
    if ((char *)v80 != v79)
      goto LABEL_118;
LABEL_129:
    *v82 = 0;
    goto LABEL_133;
  }
  v89 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17)
    v89 = v81 | 7;
  v90 = v89 + 1;
  v82 = operator new(v89 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v79[-v80];
  v93.__r_.__value_.__r.__words[2] = v90 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
  if ((char *)v80 == v79)
    goto LABEL_129;
LABEL_118:
  if (v81 < 0x20 || (unint64_t)&v82[-v80] < 0x20)
  {
    v83 = v82;
    v84 = (char *)v80;
  }
  else
  {
    v83 = &v82[v81 & 0xFFFFFFFFFFFFFFE0];
    v84 = (char *)(v80 + (v81 & 0xFFFFFFFFFFFFFFE0));
    v85 = (__int128 *)(v80 + 16);
    v86 = v82 + 16;
    v87 = v81 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v88 = *v85;
      *(v86 - 1) = *(v85 - 1);
      *v86 = v88;
      v85 += 2;
      v86 += 2;
      v87 -= 32;
    }
    while (v87);
    if (v81 == (v81 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_132;
  }
  do
  {
    v91 = *v84++;
    *v83++ = v91;
  }
  while (v84 != v79);
LABEL_132:
  *v83 = 0;
LABEL_133:
  util::convert<int>(&v93, &__p, 10);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  __p.tm_isdst = -1;
  v92 = mktime(&__p);
  v93.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  v93.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday((timeval *)&v93, 0);
  v21 = (int64_t)(v93.__r_.__value_.__r.__words[0] - v92) > a2;
  v22 = *(void **)v94;
  if (*(_QWORD *)v94)
    goto LABEL_23;
  return v21;
}

void sub_1A3535B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void util::findBasebandLogInfoFile(const void **a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v3;
  __int128 v5;
  int v6;
  size_t v7;
  int v8;
  size_t size;
  unint64_t v10;
  void **v11;
  const void *v12;
  char *v13;
  std::string *v14;
  timespec v15;
  const char *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  DIR *v21;
  DIR *v22;
  dirent *v23;
  _DWORD *v24;
  void **v28;
  void *v29;
  _DWORD *v30;
  char *v34;
  uint64_t v35;
  int v36;
  int v38;
  size_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  std::string *v44;
  _OWORD *v45;
  _OWORD *v46;
  __int128 *v47;
  void *__dst[3];
  std::string v49;
  stat v50;

  *a3 = 0;
  a3[1] = 0;
  v46 = a3;
  a3[2] = 0;
  v3 = *a2;
  v47 = a2[1];
  if (v3 == v47)
    return;
  while (1)
  {
    memset(&v49, 170, sizeof(v49));
    if (*((char *)v3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
    }
    else
    {
      v5 = *v3;
      v49.__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v5;
    }
    v6 = *((char *)a1 + 23);
    if (v6 >= 0)
      v7 = *((unsigned __int8 *)a1 + 23);
    else
      v7 = (size_t)a1[1];
    v8 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    else
      size = v49.__r_.__value_.__l.__size_;
    v10 = size + v7;
    memset(__dst, 170, sizeof(__dst));
    if (size + v7 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v10 <= 0x16)
    {
      memset(__dst, 0, sizeof(__dst));
      v11 = __dst;
      HIBYTE(__dst[2]) = size + v7;
      if (!v7)
        goto LABEL_20;
LABEL_16:
      if (v6 >= 0)
        v12 = a1;
      else
        v12 = *a1;
      memmove(v11, v12, v7);
      goto LABEL_20;
    }
    v18 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v18 = v10 | 7;
    v19 = v18 + 1;
    v11 = (void **)operator new(v18 + 1);
    __dst[1] = (void *)(size + v7);
    __dst[2] = (void *)(v19 | 0x8000000000000000);
    __dst[0] = v11;
    if (v7)
      goto LABEL_16;
LABEL_20:
    v13 = (char *)v11 + v7;
    if (size)
    {
      if (v8 >= 0)
        v14 = &v49;
      else
        v14 = (std::string *)v49.__r_.__value_.__r.__words[0];
      memmove(v13, v14, size);
    }
    v13[size] = 0;
    v15.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v15.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&v50.st_blksize = v15;
    *(timespec *)v50.st_qspare = v15;
    v50.st_birthtimespec = v15;
    *(timespec *)&v50.st_size = v15;
    v50.st_mtimespec = v15;
    v50.st_ctimespec = v15;
    *(timespec *)&v50.st_uid = v15;
    v50.st_atimespec = v15;
    *(timespec *)&v50.st_dev = v15;
    if (SHIBYTE(__dst[2]) >= 0)
      v16 = (const char *)__dst;
    else
      v16 = (const char *)__dst[0];
    if (stat(v16, &v50)
      || (SHIBYTE(__dst[2]) >= 0 ? (v20 = (const char *)__dst) : (v20 = (const char *)__dst[0]),
          v21 = opendir(v20),
          (v22 = v21) == 0))
    {
      v17 = HIBYTE(__dst[2]);
      goto LABEL_30;
    }
    v23 = readdir(v21);
    closedir(v22);
    v17 = HIBYTE(__dst[2]);
    if (v23)
      break;
LABEL_30:
    if (v17 < 0)
    {
      operator delete(__dst[0]);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
LABEL_59:
        operator delete(v49.__r_.__value_.__l.__data_);
    }
    else if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_59;
    }
    v3 = (__int128 *)((char *)v3 + 24);
    if (v3 == v47)
      return;
  }
  if ((HIBYTE(__dst[2]) & 0x80) == 0)
  {
    if (HIBYTE(__dst[2]) <= 4u)
      goto LABEL_99;
    v24 = (_DWORD *)((char *)__dst + HIBYTE(__dst[2]) - 5);
    if (*v24 == 1885626669 && *((_BYTE *)__dst + HIBYTE(__dst[2]) - 1) == 108)
      goto LABEL_79;
    if (*v24 == 1935962413 && *((_BYTE *)__dst + HIBYTE(__dst[2]) - 1) == 115)
      goto LABEL_79;
    if (*v24 == 1634296877 && *((_BYTE *)__dst + HIBYTE(__dst[2]) - 1) == 103)
      goto LABEL_79;
    if (HIBYTE(__dst[2]) < 9u)
      goto LABEL_99;
    v28 = __dst;
    v29 = (void *)HIBYTE(__dst[2]);
    goto LABEL_74;
  }
  v29 = __dst[1];
  if (__dst[1] < (void *)5)
    goto LABEL_99;
  v28 = (void **)__dst[0];
  v30 = (char *)__dst[1] + (unint64_t)__dst[0] - 5;
  if ((*v30 != 1885626669 || *((_BYTE *)__dst[1] + (unint64_t)__dst[0] - 1) != 108)
    && (*v30 != 1935962413 || *((_BYTE *)__dst[1] + (unint64_t)__dst[0] - 1) != 115)
    && (*v30 != 1634296877 || *((_BYTE *)__dst[1] + (unint64_t)__dst[0] - 1) != 103))
  {
    if (__dst[1] < (void *)9)
LABEL_99:
      std::string::__throw_out_of_range[abi:ne180100]();
LABEL_74:
    v34 = (char *)v28 + (_QWORD)v29;
    v35 = *(_QWORD *)(v34 - 9);
    v36 = *(v34 - 1);
    if (v35 == 0x636172742D62622DLL && v36 == 101)
      goto LABEL_79;
    goto LABEL_30;
  }
LABEL_79:
  v38 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  else
    v39 = v49.__r_.__value_.__l.__size_;
  v40 = v39 + 9;
  memset(&v50, 170, 24);
  if (v39 + 9 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v40 >= 0x17)
  {
    v42 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v42 = v40 | 7;
    v43 = v42 + 1;
    v41 = operator new(v42 + 1);
    v50.st_ino = v39 + 9;
    *(_QWORD *)&v50.st_uid = v43 | 0x8000000000000000;
    *(_QWORD *)&v50.st_dev = v41;
  }
  else
  {
    memset(&v50, 0, 24);
    v41 = &v50;
    HIBYTE(v50.st_gid) = v39 + 9;
    if (!v39)
      goto LABEL_93;
  }
  if (v38 >= 0)
    v44 = &v49;
  else
    v44 = (std::string *)v49.__r_.__value_.__r.__words[0];
  memmove(v41, v44, v39);
LABEL_93:
  strcpy((char *)v41 + v39, "/info.txt");
  v45 = v46;
  *v46 = *(_OWORD *)&v50.st_dev;
  *((_QWORD *)v45 + 2) = *(_QWORD *)&v50.st_uid;
  if ((v17 & 0x80) == 0)
  {
    if ((v38 & 0x80) == 0)
      return;
LABEL_97:
    operator delete(v49.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__dst[0]);
  if ((*((_BYTE *)&v49.__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_97;
}

void sub_1A3536068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  _Unwind_Resume(exception_object);
}

BOOL util::isDumpForSysdiagnose(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  int v3;
  size_t v4;
  unint64_t v5;
  const void **v6;
  std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  const void **v12;
  std::string *v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  _BOOL4 FilteredFiles;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _BOOL8 v21;
  void **v22;
  void **v23;
  void *v24;
  int v25;
  size_t size;
  int v27;
  size_t v28;
  unint64_t v29;
  void **v30;
  const void *v31;
  char *v32;
  std::string *v33;
  void **v34;
  uint64_t v35;
  int v36;
  void *v37;
  char *v38;
  void **v39;
  char *v40;
  unsigned __int8 v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  NSObject *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  void **v55;
  void **v56;
  void *v57;
  std::string *v59;
  void *v60;
  void **v61;
  uint64_t v62;
  std::string v63;
  std::locale v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::string v70;
  std::string v71;
  _BYTE v72[48];
  __int128 v73;
  void *v74;
  void **v75;
  uint64_t v76;
  void *__dst[4];
  void *__p[76];

  __p[73] = *(void **)MEMORY[0x1E0C80C00];
  v74 = 0;
  v75 = 0;
  v76 = 0;
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v72[32] = v2;
  v73 = v2;
  *(_OWORD *)v72 = v2;
  *(_OWORD *)&v72[16] = v2;
  v3 = *(char *)(a2 + 23);
  if (v3 >= 0)
    v4 = *(unsigned __int8 *)(a2 + 23);
  else
    v4 = *(_QWORD *)(a2 + 8);
  v5 = v4 + 2;
  memset(&v71, 170, sizeof(v71));
  if (v4 + 2 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (const void **)a2;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v11 = operator new(v9 + 1);
    v71.__r_.__value_.__l.__size_ = v4 + 2;
    v71.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    v71.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    *v11 = 10798;
    v8 = (std::string::value_type *)(v11 + 1);
  }
  else
  {
    v71.__r_.__value_.__r.__words[2] = 0;
    *((_BYTE *)&v71.__r_.__value_.__s + 23) = v4 + 2;
    v8 = &v71.__r_.__value_.__s.__data_[2];
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = 0x2A2EuLL;
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v12 = v6;
  else
    v12 = (const void **)*v6;
  memmove(v8, v12, v4);
LABEL_15:
  v8[v4] = 0;
  v13 = std::string::append(&v71, ".*", 2uLL);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  __p[2] = (void *)v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v72, (uint64_t)__p, 0);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_17;
LABEL_20:
    operator delete(v71.__r_.__value_.__l.__data_);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_21;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_20;
LABEL_17:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
LABEL_18:
    v70 = *(std::string *)a1;
    goto LABEL_22;
  }
LABEL_21:
  std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
LABEL_22:
  std::locale::locale(&v64, (const std::locale *)v72);
  v65 = *(_OWORD *)&v72[8];
  v66 = *(_OWORD *)&v72[24];
  v67 = *(_QWORD *)&v72[40];
  v68 = (std::__shared_weak_count *)v73;
  if ((_QWORD)v73)
  {
    v15 = (unint64_t *)(v73 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v69 = *((_QWORD *)&v73 + 1);
  FilteredFiles = support::fs::getFilteredFiles((const char *)&v70, (uint64_t)&v64, (uint64_t)&v74, 0);
  v18 = v68;
  if (!v68)
    goto LABEL_29;
  p_shared_owners = (unint64_t *)&v68->__shared_owners_;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    std::locale::~locale(&v64);
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_30:
      if (FilteredFiles)
        goto LABEL_31;
LABEL_35:
      v21 = 0;
      goto LABEL_116;
    }
  }
  else
  {
LABEL_29:
    std::locale::~locale(&v64);
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
  }
  operator delete(v70.__r_.__value_.__l.__data_);
  if (!FilteredFiles)
    goto LABEL_35;
LABEL_31:
  memset(&v71, 170, sizeof(v71));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v63 = *(std::string *)a1;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v60, (uint64_t)v74, (uint64_t)v75, 0xAAAAAAAAAAAAAAABLL * (((char *)v75 - (_BYTE *)v74) >> 3));
  util::findBasebandLogInfoFile((const void **)&v63.__r_.__value_.__l.__data_, (__int128 **)&v60, &v71);
  v22 = (void **)v60;
  if (v60)
  {
    v23 = v61;
    v24 = v60;
    if (v61 != v60)
    {
      do
      {
        if (*((char *)v23 - 1) < 0)
          operator delete(*(v23 - 3));
        v23 -= 3;
      }
      while (v23 != v22);
      v24 = v60;
    }
    v61 = v22;
    operator delete(v24);
  }
  if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v25 = SHIBYTE(v71.__r_.__value_.__r.__words[2]);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    else
      size = v71.__r_.__value_.__l.__size_;
    if (size)
      goto LABEL_50;
LABEL_97:
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED114D18 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v47 = qword_1ED114D18;
      if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_DEFAULT))
        goto LABEL_103;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
      v47 = qword_1ED114D18;
      if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_DEFAULT))
        goto LABEL_103;
    }
    if (*((char *)v6 + 23) < 0)
      v6 = (const void **)*v6;
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v6;
    _os_log_impl(&dword_1A343C000, v47, OS_LOG_TYPE_DEFAULT, "No baseband info file found for %s", (uint8_t *)__p, 0xCu);
LABEL_103:
    v21 = 0;
    if ((v25 & 0x80) != 0)
      goto LABEL_115;
    goto LABEL_116;
  }
  operator delete(v63.__r_.__value_.__l.__data_);
  v25 = SHIBYTE(v71.__r_.__value_.__r.__words[2]);
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
  else
    size = v71.__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_97;
LABEL_50:
  memset(__p, 170, 0x240uLL);
  v27 = *(char *)(a1 + 23);
  if (v27 >= 0)
    v28 = *(unsigned __int8 *)(a1 + 23);
  else
    v28 = *(_QWORD *)(a1 + 8);
  v29 = v28 + size;
  memset(__dst, 170, 24);
  if (v28 + size > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v29 <= 0x16)
  {
    memset(__dst, 0, 24);
    v30 = __dst;
    HIBYTE(__dst[2]) = v28 + size;
    if (!v28)
      goto LABEL_60;
    goto LABEL_56;
  }
  v48 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v29 | 7) != 0x17)
    v48 = v29 | 7;
  v49 = v48 + 1;
  v30 = (void **)operator new(v48 + 1);
  __dst[1] = (void *)(v28 + size);
  __dst[2] = (void *)(v49 | 0x8000000000000000);
  __dst[0] = v30;
  if (v28)
  {
LABEL_56:
    if (v27 >= 0)
      v31 = (const void *)a1;
    else
      v31 = *(const void **)a1;
    memmove(v30, v31, v28);
  }
LABEL_60:
  v32 = (char *)v30 + v28;
  if (v25 >= 0)
    v33 = &v71;
  else
    v33 = (std::string *)v71.__r_.__value_.__r.__words[0];
  memmove(v32, v33, size);
  v32[size] = 0;
  std::ifstream::basic_ifstream(__p);
  if (SHIBYTE(__dst[2]) < 0)
  {
    operator delete(__dst[0]);
    if (__p[17])
      goto LABEL_65;
LABEL_110:
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED114D18 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v51 = qword_1ED114D18;
      if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
      {
LABEL_113:
        v21 = 0;
        goto LABEL_114;
      }
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
      v51 = qword_1ED114D18;
      if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
        goto LABEL_113;
    }
    v59 = (std::string *)v71.__r_.__value_.__r.__words[0];
    if (v25 >= 0)
      v59 = &v71;
    LODWORD(__dst[0]) = 136315138;
    *(void **)((char *)__dst + 4) = v59;
    _os_log_error_impl(&dword_1A343C000, v51, OS_LOG_TYPE_ERROR, "Failed to open info file: %s", (uint8_t *)__dst, 0xCu);
    goto LABEL_113;
  }
  if (!__p[17])
    goto LABEL_110;
LABEL_65:
  std::istream::seekg();
  memset(__dst, 170, 24);
  v34 = __dst;
  support::fs::readCurrentLine(__p, __dst);
  v35 = HIBYTE(__dst[2]);
  v36 = SHIBYTE(__dst[2]);
  v37 = __dst[0];
  if (SHIBYTE(__dst[2]) < 0)
  {
    v35 = (uint64_t)__dst[1];
    v34 = (void **)__dst[0];
  }
  v38 = (char *)v34 + v35;
  if (v35 >= 35)
  {
    v39 = v34;
    do
    {
      v40 = (char *)memchr(v39, 98, v35 - 34);
      if (!v40)
        break;
      if (*(_QWORD *)v40 == 0x6320676F6C206262
        && *((_QWORD *)v40 + 1) == 0x6F697463656C6C6FLL
        && *((_QWORD *)v40 + 2) == 0x20726F66202D206ELL
        && *((_QWORD *)v40 + 3) == 0x6E67616964737973
        && *(_QWORD *)(v40 + 27) == 0x65736F6E67616964)
      {
        goto LABEL_85;
      }
      v39 = (void **)(v40 + 1);
      v35 = v38 - (char *)v39;
    }
    while (v38 - (char *)v39 > 34);
  }
  v40 = v38;
LABEL_85:
  v21 = v40 != v38 && v40 - (char *)v34 != -1;
  if (v36 < 0)
    operator delete(v37);
LABEL_114:
  __p[0] = *(void **)MEMORY[0x1E0DE4F40];
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1A858F6F8](&__p[2]);
  std::istream::~istream();
  MEMORY[0x1A858F92C](&__p[53]);
  if ((*((_BYTE *)&v71.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_115:
    operator delete(v71.__r_.__value_.__l.__data_);
LABEL_116:
  v52 = (std::__shared_weak_count *)v73;
  if ((_QWORD)v73)
  {
    v53 = (unint64_t *)(v73 + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  std::locale::~locale((std::locale *)v72);
  v55 = (void **)v74;
  if (v74)
  {
    v56 = v75;
    v57 = v74;
    if (v75 != v74)
    {
      do
      {
        if (*((char *)v56 - 1) < 0)
          operator delete(*(v56 - 3));
        v56 -= 3;
      }
      while (v56 != v55);
      v57 = v74;
    }
    v75 = v55;
    operator delete(v57);
  }
  return v21;
}

void sub_1A353693C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,std::locale a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,char a50)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a31);
  std::vector<std::string>::~vector[abi:ne180100](&a40);
  _Unwind_Resume(a1);
}

void sub_1A353699C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::locale a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  std::vector<std::string>::~vector[abi:ne180100](&a10);
  if (a18 < 0)
    operator delete(a13);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a34);
  std::vector<std::string>::~vector[abi:ne180100](&a43);
  _Unwind_Resume(a1);
}

void sub_1A35369C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::locale a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a17);
  if (a30 < 0)
    JUMPOUT(0x1A35369D8);
  JUMPOUT(0x1A35369DCLL);
}

void sub_1A35369F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a55 < 0)
  {
    operator delete(__p);
    if (a33 < 0)
    {
LABEL_5:
      operator delete(a28);
      std::vector<std::string>::~vector[abi:ne180100](&a43);
      _Unwind_Resume(a1);
    }
  }
  else if (a33 < 0)
  {
    goto LABEL_5;
  }
  std::vector<std::string>::~vector[abi:ne180100](&a43);
  _Unwind_Resume(a1);
}

void sub_1A3536A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
  std::vector<std::string>::~vector[abi:ne180100](&a40);
  _Unwind_Resume(a1);
}

void util::findLastLogDumpTimestamp(util *this@<X0>, const char *__s@<X1>, const char *a3@<X2>, int a4@<W3>, char *a5@<X4>, std::string *a6@<X8>)
{
  unsigned int v8;
  std::string *v10;
  size_t v11;
  size_t v12;
  __int128 *p_dst;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  size_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _BOOL4 FilteredFiles;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  __n128 v31;
  unint64_t v32;
  uint64_t v33;
  const void **v34;
  __int128 v35;
  int64_t size;
  std::string::size_type v37;
  int v38;
  std::string *v39;
  std::string *v40;
  std::string *v41;
  int64_t v42;
  __int128 v43;
  std::string::size_type v44;
  std::sub_match<const char *> *v45;
  int v46;
  std::string::size_type v47;
  std::string *v48;
  _BYTE *p_end_cap;
  std::vector<std::ssub_match>::pointer begin;
  std::__wrap_iter<const char *>::iterator_type i;
  const char **p_i;
  const char *v53;
  unint64_t v54;
  __int128 *v55;
  __int128 *v56;
  const char *v57;
  __int128 *v58;
  _OWORD *v59;
  unint64_t v60;
  __int128 v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  int v65;
  std::sub_match<std::__wrap_iter<const char *>> *v66;
  char *v67;
  int v68;
  std::string *v69;
  int64_t v70;
  char *v71;
  char *v72;
  char *v73;
  int v74;
  std::string *v75;
  int64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  size_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  _BOOL4 isDumpForSysdiagnose;
  unsigned __int8 v88;
  NSObject *v89;
  std::string *v90;
  char v91;
  char v92;
  int64_t v93;
  std::string *v94;
  size_t v95;
  unint64_t *v96;
  unint64_t v97;
  _BOOL4 v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  const void **v108;
  const void **v109;
  const void **v110;
  unsigned int v111;
  char *v113;
  const void **v115;
  std::string *v116;
  BOOL v117;
  std::locale v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  std::string v124;
  std::string v125;
  void *v126[2];
  unint64_t v127;
  std::vector<std::ssub_match> v128[2];
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  std::string v136;
  std::string v137;
  std::locale v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  uint64_t v143;
  void *__p[2];
  unint64_t v145;
  _BYTE v146[48];
  __int128 v147;
  _BYTE v148[48];
  __int128 v149;
  void *v150[3];
  const void **v151;
  const void **v152;
  uint64_t v153;
  __int128 __dst;
  _BYTE v155[32];
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;

  v8 = a3;
  v10 = a6;
  v163 = *MEMORY[0x1E0C80C00];
  a6->__r_.__value_.__r.__words[0] = 0;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
  v151 = 0;
  v152 = 0;
  v153 = 0;
  memset(v150, 170, sizeof(v150));
  v11 = strlen(__s);
  v116 = v10;
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (__int128 *)operator new(v14 + 1);
    *((_QWORD *)&__dst + 1) = v12;
    *(_QWORD *)v155 = v15 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  v155[7] = v11;
  p_dst = &__dst;
  if (v11)
LABEL_8:
    memcpy(p_dst, __s, v12);
  *((_BYTE *)p_dst + v12) = 0;
  v16 = std::string::append((std::string *)&__dst, ".*", 2uLL);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v150[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)v150 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((v155[7] & 0x80000000) != 0)
    operator delete((void *)__dst);
  *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v148[32] = v18;
  v149 = v18;
  *(_OWORD *)v148 = v18;
  *(_OWORD *)&v148[16] = v18;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v148, (uint64_t)v150, 0);
  *(_QWORD *)&v19 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v146[32] = v19;
  v147 = v19;
  *(_OWORD *)v146 = v19;
  *(_OWORD *)&v146[16] = v19;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)v146, "(\\d{4})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{3})", 0);
  v20 = strlen((const char *)this);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = (void *)v20;
  v117 = a5 == 0;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = operator new(v23 + 1);
    v145 = v24 | 0x8000000000000000;
    __p[0] = v22;
    __p[1] = v21;
    goto LABEL_18;
  }
  HIBYTE(v145) = v20;
  v22 = __p;
  if (v20)
LABEL_18:
    memcpy(v22, this, (size_t)v21);
  *((_BYTE *)v21 + (_QWORD)v22) = 0;
  std::locale::locale(&v138, (const std::locale *)v148);
  v139 = *(_OWORD *)&v148[8];
  v140 = *(_OWORD *)&v148[24];
  v141 = *(_QWORD *)&v148[40];
  v142 = (std::__shared_weak_count *)v149;
  if ((_QWORD)v149)
  {
    v25 = (unint64_t *)(v149 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v143 = *((_QWORD *)&v149 + 1);
  FilteredFiles = support::fs::getFilteredFiles((const char *)__p, (uint64_t)&v138, (uint64_t)&v151, 0);
  v28 = v142;
  if (!v142)
    goto LABEL_26;
  p_shared_owners = (unint64_t *)&v142->__shared_owners_;
  do
    v30 = __ldaxr(p_shared_owners);
  while (__stlxr(v30 - 1, p_shared_owners));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    std::locale::~locale(&v138);
    if ((SHIBYTE(v145) & 0x80000000) == 0)
    {
LABEL_27:
      if (!FilteredFiles)
        goto LABEL_176;
      goto LABEL_31;
    }
  }
  else
  {
LABEL_26:
    std::locale::~locale(&v138);
    if ((SHIBYTE(v145) & 0x80000000) == 0)
      goto LABEL_27;
  }
  operator delete(__p[0]);
  if (!FilteredFiles)
    goto LABEL_176;
LABEL_31:
  v32 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v152 - v151));
  if (v152 == v151)
    v33 = 0;
  else
    v33 = v32;
  std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>((uint64_t)v151, v152, v33, 1, v31);
  memset(&v137, 0, sizeof(v137));
  v34 = v151;
  v115 = v152;
  if (v151 == v152)
  {
LABEL_176:
    if (!v8)
      goto LABEL_196;
LABEL_177:
    if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v124, v10->__r_.__value_.__l.__data_, v10->__r_.__value_.__l.__size_);
    else
      v124 = *v10;
    std::locale::locale(&v118, (const std::locale *)v146);
    v119 = *(_OWORD *)&v146[8];
    v120 = *(_OWORD *)&v146[24];
    v121 = *(_QWORD *)&v146[40];
    v122 = (std::__shared_weak_count *)v147;
    if ((_QWORD)v147)
    {
      v96 = (unint64_t *)(v147 + 8);
      do
        v97 = __ldxr(v96);
      while (__stxr(v97 + 1, v96));
    }
    v123 = *((_QWORD *)&v147 + 1);
    v98 = util::checkLogFileAge((uint64_t)&v124, v8, (uint64_t)&v118);
    v99 = v122;
    if (!v122)
      goto LABEL_187;
    v100 = (unint64_t *)&v122->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
      std::locale::~locale(&v118);
      if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_188:
        if (!v98)
          goto LABEL_196;
LABEL_192:
        if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
        {
          *v10->__r_.__value_.__l.__data_ = 0;
          v10->__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          v10->__r_.__value_.__s.__data_[0] = 0;
          *((_BYTE *)&v10->__r_.__value_.__s + 23) = 0;
        }
        goto LABEL_196;
      }
    }
    else
    {
LABEL_187:
      std::locale::~locale(&v118);
      if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_188;
    }
    operator delete(v124.__r_.__value_.__l.__data_);
    if (!v98)
      goto LABEL_196;
    goto LABEL_192;
  }
  v111 = v8;
  v113 = a5;
  while (1)
  {
    memset(&v136, 170, sizeof(v136));
    if (*((char *)v34 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v136, (const std::string::value_type *)*v34, (std::string::size_type)v34[1]);
    }
    else
    {
      v35 = *(_OWORD *)v34;
      v136.__r_.__value_.__r.__words[2] = (std::string::size_type)v34[2];
      *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v35;
    }
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    else
      size = v137.__r_.__value_.__l.__size_;
    v37 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
    v38 = SHIBYTE(v136.__r_.__value_.__r.__words[2]);
    v39 = (std::string *)v136.__r_.__value_.__r.__words[0];
    if (size)
    {
      if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = &v137;
      else
        v40 = (std::string *)v137.__r_.__value_.__r.__words[0];
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = &v136;
      else
        v41 = (std::string *)v136.__r_.__value_.__r.__words[0];
      v42 = v136.__r_.__value_.__l.__size_;
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
      if (v42 >= size)
      {
        v67 = (char *)v41 + v42;
        v68 = v40->__r_.__value_.__s.__data_[0];
        v69 = v41;
        do
        {
          v70 = v42 - size;
          if (v70 == -1)
            break;
          v71 = (char *)memchr(v69, v68, v70 + 1);
          if (!v71)
            break;
          v72 = v71;
          if (!memcmp(v71, v40, size))
          {
            if (v72 == v67 || v72 - (char *)v41 == -1)
              break;
            v65 = 3;
            v10 = v116;
            if ((v38 & 0x80) == 0)
              goto LABEL_155;
            goto LABEL_109;
          }
          v69 = (std::string *)(v72 + 1);
          v42 = v67 - (v72 + 1);
        }
        while (v42 >= size);
      }
    }
    *(_QWORD *)&v43 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v43 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v134 = v43;
    v131 = 0xAAAAAAAAAAAAAA00;
    v128[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
    v129 = 0;
    v130 = 0;
    v132 = 0;
    v133 = 0;
    LOBYTE(v134) = 0;
    BYTE8(v134) = 0;
    v135 = 0;
    memset(v128, 0, 41);
    if (v117)
    {
      v44 = v136.__r_.__value_.__l.__size_;
      v161 = v43;
      v158 = 0xAAAAAAAAAAAAAA00;
      *(_QWORD *)&v155[24] = v43;
      v156 = 0;
      v157 = 0;
      v159 = 0;
      v160 = 0;
      LOBYTE(v161) = 0;
      BYTE8(v161) = 0;
      v162 = 0;
      __dst = 0uLL;
      *(_OWORD *)v155 = 0uLL;
      if (v38 >= 0)
        v45 = (std::sub_match<const char *> *)&v136;
      else
        v45 = (std::sub_match<const char *> *)v39;
      if (v38 >= 0)
        v44 = v37;
      *(_OWORD *)&v155[9] = 0uLL;
      v10 = v116;
      v46 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v146, v45, (std::sub_match<const char *> *)((char *)v45 + v44), (std::vector<std::csub_match> *)&__dst, 0);
      v47 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = &v136;
      else
        v48 = (std::string *)v136.__r_.__value_.__r.__words[0];
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v47 = v136.__r_.__value_.__l.__size_;
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v128, (uint64_t)v48, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v48 + v47), (uint64_t *)&__dst, 0);
      if ((_QWORD)__dst)
      {
        *((_QWORD *)&__dst + 1) = __dst;
        operator delete((void *)__dst);
      }
      if (v46)
      {
        p_end_cap = &v128[1].__end_cap_;
        if (v128[0].__end_ != v128[0].__begin_)
          p_end_cap = &v128[0].__begin_->matched;
        if (!*p_end_cap)
        {
          __dst = 0uLL;
          *(_QWORD *)v155 = 0;
          if ((SHIBYTE(v116->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_119;
          goto LABEL_104;
        }
        begin = (std::vector<std::ssub_match>::pointer)&v128[1];
        if (v128[0].__end_ != v128[0].__begin_)
          begin = v128[0].__begin_;
        i = begin->first.__i_;
        p_i = &v128[0].__begin_->second.__i_;
        if (v128[0].__end_ == v128[0].__begin_)
          p_i = (const char **)&v128[1].__end_;
        v53 = *p_i;
        v54 = *p_i - i;
        if (v54 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v54 > 0x16)
        {
          v79 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v54 | 7) != 0x17)
            v79 = v54 | 7;
          v80 = v79 + 1;
          v55 = (__int128 *)operator new(v79 + 1);
          *((_QWORD *)&__dst + 1) = v54;
          *(_QWORD *)v155 = v80 | 0x8000000000000000;
          *(_QWORD *)&__dst = v55;
          if (i != v53)
          {
LABEL_77:
            if (v54 < 0x20 || (unint64_t)((char *)v55 - i) < 0x20)
            {
              v56 = v55;
              v57 = i;
            }
            else
            {
              v56 = (__int128 *)((char *)v55 + (v54 & 0xFFFFFFFFFFFFFFE0));
              v57 = &i[v54 & 0xFFFFFFFFFFFFFFE0];
              v58 = (__int128 *)(i + 16);
              v59 = v55 + 1;
              v60 = v54 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v61 = *v58;
                *(v59 - 1) = *(v58 - 1);
                *v59 = v61;
                v58 += 2;
                v59 += 2;
                v60 -= 32;
              }
              while (v60);
              if (v54 == (v54 & 0x7FFFFFFFFFFFFFE0))
              {
LABEL_118:
                *(_BYTE *)v56 = 0;
                if ((SHIBYTE(v116->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_119:
                  *(_OWORD *)&v116->__r_.__value_.__l.__data_ = __dst;
                  v116->__r_.__value_.__r.__words[2] = *(_QWORD *)v155;
                  if (!a4)
                    goto LABEL_146;
                  goto LABEL_120;
                }
LABEL_104:
                operator delete(v116->__r_.__value_.__l.__data_);
                *(_OWORD *)&v116->__r_.__value_.__l.__data_ = __dst;
                v116->__r_.__value_.__r.__words[2] = *(_QWORD *)v155;
                if (!a4)
                  goto LABEL_146;
LABEL_120:
                v82 = strlen((const char *)this);
                if (v82 > 0x7FFFFFFFFFFFFFF7)
                  std::string::__throw_length_error[abi:ne180100]();
                v83 = (void *)v82;
                if (v82 >= 0x17)
                {
                  v85 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v82 | 7) != 0x17)
                    v85 = v82 | 7;
                  v86 = v85 + 1;
                  v84 = operator new(v85 + 1);
                  v126[1] = v83;
                  v127 = v86 | 0x8000000000000000;
                  v126[0] = v84;
                }
                else
                {
                  HIBYTE(v127) = v82;
                  v84 = v126;
                  if (!v82)
                  {
                    LOBYTE(v126[0]) = 0;
                    if ((SHIBYTE(v116->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_124:
                      v125 = *v116;
LABEL_130:
                      isDumpForSysdiagnose = util::isDumpForSysdiagnose((uint64_t)v126, (uint64_t)&v125);
                      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(v125.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(v127) & 0x80000000) == 0)
                        {
LABEL_132:
                          if (isDumpForSysdiagnose)
                          {
LABEL_133:
                            if ((v88 & 1) == 0
                            {
                              GetOsLogContext(void)::sOsLogContext = 0;
                              qword_1ED114D18 = 0;
                              __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
                            }
                            if (GetOsLogContext(void)::onceToken == -1)
                            {
                              v89 = qword_1ED114D18;
                              if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_DEFAULT))
                                goto LABEL_140;
                            }
                            else
                            {
                              dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
                              v89 = qword_1ED114D18;
                              if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_DEFAULT))
                                goto LABEL_140;
                            }
                            if ((v116->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v90 = v116;
                            else
                              v90 = (std::string *)v116->__r_.__value_.__r.__words[0];
                            LODWORD(__dst) = 136315138;
                            *(_QWORD *)((char *)&__dst + 4) = v90;
                            _os_log_impl(&dword_1A343C000, v89, OS_LOG_TYPE_DEFAULT, "Ignore dump for sysdiagnose: %s", (uint8_t *)&__dst, 0xCu);
LABEL_140:
                            if (&v137 != v116)
                            {
                              v91 = HIBYTE(v116->__r_.__value_.__r.__words[2]);
                              if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
                              {
                                if (v91 >= 0)
                                  v94 = v116;
                                else
                                  v94 = (std::string *)v116->__r_.__value_.__r.__words[0];
                                if (v91 >= 0)
                                  v95 = HIBYTE(v116->__r_.__value_.__r.__words[2]);
                                else
                                  v95 = v116->__r_.__value_.__l.__size_;
                                std::string::__assign_no_alias<false>((void **)&v137.__r_.__value_.__l.__data_, v94, v95);
                              }
                              else
                              {
                                if ((*((_BYTE *)&v116->__r_.__value_.__s + 23) & 0x80) == 0)
                                {
                                  v137 = *v116;
LABEL_169:
                                  v65 = 0;
                                  v116->__r_.__value_.__s.__data_[0] = 0;
                                  *((_BYTE *)&v116->__r_.__value_.__s + 23) = 0;
                                  goto LABEL_151;
                                }
                                std::string::__assign_no_alias<true>(&v137, v116->__r_.__value_.__l.__data_, v116->__r_.__value_.__l.__size_);
                              }
                            }
                            if (SHIBYTE(v116->__r_.__value_.__r.__words[2]) < 0)
                            {
                              v65 = 0;
                              *v116->__r_.__value_.__l.__data_ = 0;
                              v116->__r_.__value_.__l.__size_ = 0;
                              goto LABEL_151;
                            }
                            goto LABEL_169;
                          }
                          goto LABEL_146;
                        }
                      }
                      else if ((SHIBYTE(v127) & 0x80000000) == 0)
                      {
                        goto LABEL_132;
                      }
                      operator delete(v126[0]);
                      if (isDumpForSysdiagnose)
                        goto LABEL_133;
LABEL_146:
                      v65 = 2;
LABEL_151:
                      v92 = 1;
LABEL_152:
                      v117 = v92;
                      v66 = v128[0].__begin_;
                      if (v128[0].__begin_)
                        goto LABEL_153;
                      goto LABEL_154;
                    }
LABEL_129:
                    std::string::__init_copy_ctor_external(&v125, v116->__r_.__value_.__l.__data_, v116->__r_.__value_.__l.__size_);
                    goto LABEL_130;
                  }
                }
                memcpy(v84, this, (size_t)v83);
                *((_BYTE *)v83 + (_QWORD)v84) = 0;
                if ((SHIBYTE(v116->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_124;
                goto LABEL_129;
              }
            }
            do
            {
              v81 = *v57++;
              *(_BYTE *)v56 = v81;
              v56 = (__int128 *)((char *)v56 + 1);
            }
            while (v57 != v53);
            goto LABEL_118;
          }
        }
        else
        {
          v155[7] = *(_BYTE *)p_i - (_BYTE)i;
          v55 = &__dst;
          if (i != v53)
            goto LABEL_77;
        }
        *(_BYTE *)v55 = 0;
        if ((SHIBYTE(v116->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_119;
        goto LABEL_104;
      }
LABEL_150:
      v65 = 0;
      goto LABEL_151;
    }
    if (v38 >= 0)
      v39 = &v136;
    v62 = strlen(v113);
    v10 = v116;
    if (!v62)
    {
LABEL_149:
      std::string::__assign_external(&v137, v113);
      goto LABEL_150;
    }
    v63 = v62;
    v64 = v136.__r_.__value_.__l.__size_;
    if (v38 >= 0)
      v64 = v37;
    if (v64 >= v62)
    {
      v73 = (char *)v39 + v64;
      v74 = *v113;
      v75 = v39;
      do
      {
        v76 = v64 - v63;
        if (v76 == -1)
          break;
        v77 = (char *)memchr(v75, v74, v76 + 1);
        if (!v77)
          break;
        v78 = v77;
        if (!memcmp(v77, v113, v63))
        {
          v92 = 0;
          if (v78 != v73)
          {
            v93 = v78 - (char *)v39;
            v65 = 0;
            if (v93 == -1)
              goto LABEL_152;
            goto LABEL_149;
          }
          v65 = 0;
          v117 = 0;
          v66 = v128[0].__begin_;
          if (v128[0].__begin_)
            goto LABEL_153;
          goto LABEL_154;
        }
        v75 = (std::string *)(v78 + 1);
        v64 = v73 - (v78 + 1);
      }
      while (v64 >= v63);
    }
    v65 = 0;
    v117 = 0;
    v66 = v128[0].__begin_;
    if (v128[0].__begin_)
    {
LABEL_153:
      v128[0].__end_ = v66;
      operator delete(v66);
    }
LABEL_154:
    if ((*((_BYTE *)&v136.__r_.__value_.__s + 23) & 0x80) != 0)
      break;
LABEL_155:
    if (v65 != 3)
      goto LABEL_156;
LABEL_36:
    v34 += 3;
    if (v34 == v115)
      goto LABEL_175;
  }
LABEL_109:
  operator delete(v136.__r_.__value_.__l.__data_);
  if (v65 == 3)
    goto LABEL_36;
LABEL_156:
  if (!v65)
    goto LABEL_36;
LABEL_175:
  v8 = v111;
  if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_176;
  operator delete(v137.__r_.__value_.__l.__data_);
  if (v111)
    goto LABEL_177;
LABEL_196:
  v102 = (std::__shared_weak_count *)v147;
  if ((_QWORD)v147)
  {
    v103 = (unint64_t *)(v147 + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
      std::locale::~locale((std::locale *)v146);
      v105 = (std::__shared_weak_count *)v149;
      if ((_QWORD)v149)
        goto LABEL_201;
      goto LABEL_204;
    }
  }
  std::locale::~locale((std::locale *)v146);
  v105 = (std::__shared_weak_count *)v149;
  if (!(_QWORD)v149)
    goto LABEL_204;
LABEL_201:
  v106 = (unint64_t *)&v105->__shared_owners_;
  do
    v107 = __ldaxr(v106);
  while (__stlxr(v107 - 1, v106));
  if (v107)
  {
LABEL_204:
    std::locale::~locale((std::locale *)v148);
    if (SHIBYTE(v150[2]) < 0)
      goto LABEL_205;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
    std::__shared_weak_count::__release_weak(v105);
    std::locale::~locale((std::locale *)v148);
    if (SHIBYTE(v150[2]) < 0)
LABEL_205:
      operator delete(v150[0]);
  }
  v108 = v151;
  if (v151)
  {
    v109 = v152;
    v110 = v151;
    if (v152 != v151)
    {
      do
      {
        if (*((char *)v109 - 1) < 0)
          operator delete((void *)*(v109 - 3));
        v109 -= 3;
      }
      while (v109 != v108);
      v110 = v151;
    }
    v152 = v108;
    operator delete(v110);
  }
}

void sub_1A3537740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;

  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&STACK[0x220]);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&STACK[0x260]);
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v24 - 248));
  if (*(char *)(a24 + 23) < 0)
    operator delete(*(void **)a24);
  _Unwind_Resume(a1);
}

uint64_t util::getNumberOfLogDumps(uint64_t a1, const void **a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  int v7;
  size_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  _BYTE *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  __int128 v20;
  int v21;
  size_t v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  _BYTE *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  std::sub_match<const char *> *v39;
  std::sub_match<const char *> *v40;
  __int128 v41;
  const char *second;
  std::sub_match<const char *> *first;
  int v44;
  const char *v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t *v48;
  uint64_t v49;
  char **v50;
  char *v51;
  unint64_t v52;
  _OWORD *v53;
  _BYTE *v54;
  char *v55;
  __int128 *v56;
  _OWORD *v57;
  unint64_t v58;
  __int128 v59;
  void *v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint8x8_t v71;
  unint64_t v72;
  uint64_t **v73;
  uint64_t *v74;
  char v75;
  void *v76;
  void **v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  void *v81;
  const void **v82;
  void **v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  const void **v87;
  void **v88;
  uint64_t v89;
  int v90;
  _QWORD *v91;
  float v92;
  uint64_t v93;
  _QWORD *v94;
  _BOOL8 v95;
  unint64_t v96;
  unint64_t v97;
  size_t prime;
  void *v99;
  void *v100;
  uint64_t v101;
  _QWORD **v102;
  size_t v103;
  size_t v104;
  size_t v105;
  _QWORD *i;
  size_t v107;
  uint64_t v108;
  unint64_t v109;
  uint8x8_t v110;
  uint64_t v111;
  _QWORD *v112;
  void *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  size_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  void **v125;
  void *v126;
  void **v127;
  void **v128;
  void *v129;
  void **v131;
  void *v132;
  char *v133;
  std::sub_match<const char *> *v134;
  void *v135[2];
  int64_t v136;
  std::locale v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  std::string v143;
  std::locale v144[2];
  __int128 v145;
  __int128 v146;
  __int128 v147;
  _BYTE v148[48];
  __int128 v149;
  __int128 v150;
  __int128 v151;
  unint64_t v152;
  void *v153;
  std::sub_match<const char *> *v154;
  uint64_t v155;
  _BYTE __p[48];
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  _BYTE __dst[48];
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v153 = 0;
  v154 = 0;
  v155 = 0;
  v150 = 0u;
  v151 = 0u;
  v152 = 0xAAAAAAAA3F800000;
  v4 = (char *)operator new(0x48uLL);
  v5 = v4;
  strcpy(v4, "[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2,4}-[0-9]{3}");
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v148[32] = v6;
  v149 = v6;
  *(_OWORD *)v148 = v6;
  *(_OWORD *)&v148[16] = v6;
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  v9 = v8 + 64;
  memset(__dst, 170, 24);
  v133 = v4;
  if (v8 + 64 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v9 <= 0x16)
  {
    memset(__dst, 0, 24);
    v10 = __dst;
    __dst[23] = v8 + 64;
LABEL_10:
    if (v7 >= 0)
      v13 = a2;
    else
      v13 = *a2;
    memmove(v10, v13, v8);
    goto LABEL_14;
  }
  v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v9 | 7) != 0x17)
    v11 = v9 | 7;
  v12 = v11 + 1;
  v10 = operator new(v11 + 1);
  *(_QWORD *)&__dst[8] = v8 + 64;
  *(_QWORD *)&__dst[16] = v12 | 0x8000000000000000;
  *(_QWORD *)__dst = v10;
  if (v8)
    goto LABEL_10;
LABEL_14:
  v14 = &v10[v8];
  v15 = *(_OWORD *)v5;
  v16 = *((_OWORD *)v5 + 1);
  v17 = *((_OWORD *)v5 + 3);
  *((_OWORD *)v14 + 2) = *((_OWORD *)v5 + 2);
  *((_OWORD *)v14 + 3) = v17;
  *(_OWORD *)v14 = v15;
  *((_OWORD *)v14 + 1) = v16;
  v14[64] = 0;
  v18 = std::string::append((std::string *)__dst, ".*", 2uLL);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v148, (uint64_t)__p, 0);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_16;
  }
  else if ((__dst[23] & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(*(void **)__dst);
LABEL_16:
  *(_QWORD *)&v20 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v146 = v20;
  v147 = v20;
  v145 = v20;
  *(_OWORD *)&v144[0].__locale_ = v20;
  v21 = *((char *)a2 + 23);
  if (v21 >= 0)
    v22 = *((unsigned __int8 *)a2 + 23);
  else
    v22 = (size_t)a2[1];
  v23 = v22 + 64;
  memset(__dst, 170, 24);
  if (v22 + 64 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v23 <= 0x16)
  {
    memset(__dst, 0, 24);
    v24 = __dst;
    __dst[23] = v22 + 64;
LABEL_25:
    if (v21 >= 0)
      v27 = a2;
    else
      v27 = *a2;
    memmove(v24, v27, v22);
    goto LABEL_29;
  }
  v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v23 | 7) != 0x17)
    v25 = v23 | 7;
  v26 = v25 + 1;
  v24 = operator new(v25 + 1);
  *(_QWORD *)&__dst[8] = v22 + 64;
  *(_QWORD *)&__dst[16] = v26 | 0x8000000000000000;
  *(_QWORD *)__dst = v24;
  if (v22)
    goto LABEL_25;
LABEL_29:
  v28 = &v24[v22];
  v29 = *(_OWORD *)v5;
  v30 = *((_OWORD *)v5 + 1);
  v31 = *((_OWORD *)v5 + 3);
  *((_OWORD *)v28 + 2) = *((_OWORD *)v5 + 2);
  *((_OWORD *)v28 + 3) = v31;
  *(_OWORD *)v28 = v29;
  *((_OWORD *)v28 + 1) = v30;
  v28[64] = 0;
  v32 = std::string::append((std::string *)__dst, "(?=-*)(?!\\.json)", 0x10uLL);
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v32->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v144, (uint64_t)__p, 0);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_31;
LABEL_36:
    operator delete(*(void **)__dst);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_37;
  }
  operator delete(*(void **)__p);
  if ((__dst[23] & 0x80000000) != 0)
    goto LABEL_36;
LABEL_31:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
LABEL_32:
    v143 = *(std::string *)a1;
    goto LABEL_38;
  }
LABEL_37:
  std::string::__init_copy_ctor_external(&v143, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
LABEL_38:
  std::locale::locale(&v137, (const std::locale *)v148);
  v138 = *(_OWORD *)&v148[8];
  v139 = *(_OWORD *)&v148[24];
  v140 = *(_QWORD *)&v148[40];
  v141 = (std::__shared_weak_count *)v149;
  if ((_QWORD)v149)
  {
    v34 = (unint64_t *)(v149 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v142 = *((_QWORD *)&v149 + 1);
  support::fs::getFilteredFiles((const char *)&v143, (uint64_t)&v137, (uint64_t)&v153, 0);
  v36 = v141;
  if (!v141)
    goto LABEL_45;
  p_shared_owners = (unint64_t *)&v141->__shared_owners_;
  do
    v38 = __ldaxr(p_shared_owners);
  while (__stlxr(v38 - 1, p_shared_owners));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
    std::locale::~locale(&v137);
    if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_46:
      v40 = (std::sub_match<const char *> *)v153;
      v39 = v154;
      if (v153 == v154)
        goto LABEL_222;
      goto LABEL_50;
    }
  }
  else
  {
LABEL_45:
    std::locale::~locale(&v137);
    if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_46;
  }
  operator delete(v143.__r_.__value_.__l.__data_);
  v40 = (std::sub_match<const char *> *)v153;
  v39 = v154;
  if (v153 != v154)
  {
LABEL_50:
    v134 = v39;
    while (1)
    {
      *(_QWORD *)&v41 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v41 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v170 = v41;
      v167 = 0xAAAAAAAAAAAAAA00;
      *(_QWORD *)&__dst[40] = 0xAAAAAAAAAAAAAAAALL;
      v165 = 0;
      v166 = 0;
      v168 = 0;
      v169 = 0;
      LOBYTE(v170) = 0;
      BYTE8(v170) = 0;
      v171 = 0;
      memset(__dst, 0, 41);
      v162 = v41;
      v159 = 0xAAAAAAAAAAAAAA00;
      *(_QWORD *)&__p[40] = 0xAAAAAAAAAAAAAAAALL;
      v157 = 0;
      v158 = 0;
      v160 = 0;
      v161 = 0;
      LOBYTE(v162) = 0;
      BYTE8(v162) = 0;
      v163 = 0;
      memset(__p, 0, 41);
      second = (const char *)*((unsigned __int8 *)&v40->matched + 7);
      if ((char)second >= 0)
        first = v40;
      else
        first = (std::sub_match<const char *> *)v40->first;
      if ((char)second < 0)
        second = v40->second;
      v44 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v144, first, (std::sub_match<const char *> *)&second[(_QWORD)first], (std::vector<std::csub_match> *)__p, 0);
      v45 = (const char *)*((unsigned __int8 *)&v40->matched + 7);
      if ((char)v45 >= 0)
        v46 = (uint64_t)v40;
      else
        v46 = (uint64_t)v40->first;
      if ((char)v45 < 0)
        v45 = v40->second;
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__dst, v46, (std::sub_match<std::__wrap_iter<const char *>> *)&v45[v46], (uint64_t *)__p, 0);
      if (*(_QWORD *)__p)
      {
        *(_QWORD *)&__p[8] = *(_QWORD *)__p;
        operator delete(*(void **)__p);
      }
      if (!v44)
        goto LABEL_220;
      v47 = *(_QWORD *)&__dst[8] == *(_QWORD *)__dst ? &__dst[40] : (_BYTE *)(*(_QWORD *)__dst + 16);
      if (*v47)
        break;
      v60 = 0;
      v61 = 0;
      v62 = 0;
      v135[0] = 0;
      v135[1] = 0;
      v136 = 0;
LABEL_90:
      if ((v62 & 0x80u) == 0)
        v66 = (uint64_t *)v135;
      else
        v66 = v61;
      if ((v62 & 0x80u) == 0)
        v67 = v62;
      else
        v67 = (unint64_t)v60;
      v68 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)__p, v66, v67);
      v69 = v68;
      v70 = *((_QWORD *)&v150 + 1);
      if (!*((_QWORD *)&v150 + 1))
      {
        v72 = 0xAAAAAAAAAAAAAAAALL;
LABEL_146:
        *(_QWORD *)&__p[16] = 0xAAAAAAAAAAAAAA01;
        v91 = operator new(0x28uLL);
        *(_QWORD *)__p = v91;
        *(_QWORD *)&__p[8] = &v151;
        *v91 = 0;
        v91[1] = v69;
        *((_OWORD *)v91 + 1) = *(_OWORD *)v135;
        v91[4] = v136;
        v135[0] = 0;
        v135[1] = 0;
        v136 = 0;
        v92 = (float)(unint64_t)(*((_QWORD *)&v151 + 1) + 1);
        if (v70 && (float)(*(float *)&v152 * (float)v70) >= v92)
        {
          v39 = v134;
          v93 = v150;
          v94 = *(_QWORD **)(v150 + 8 * v72);
          if (v94)
            goto LABEL_149;
LABEL_198:
          *v91 = v151;
          *(_QWORD *)&v151 = v91;
          *(_QWORD *)(v93 + 8 * v72) = &v151;
          if (*v91)
          {
            v115 = *(_QWORD *)(*v91 + 8);
            if ((v70 & (v70 - 1)) != 0)
            {
              if (v115 >= v70)
                v115 %= v70;
            }
            else
            {
              v115 &= v70 - 1;
            }
            v94 = (_QWORD *)(v150 + 8 * v115);
LABEL_217:
            *v94 = v91;
          }
          ++*((_QWORD *)&v151 + 1);
          if (v136 < 0)
            goto LABEL_219;
          goto LABEL_220;
        }
        v95 = (v70 & (v70 - 1)) != 0;
        if (v70 < 3)
          v95 = 1;
        v96 = v95 | (2 * v70);
        v97 = vcvtps_u32_f32(v92 / *(float *)&v152);
        if (v96 <= v97)
          prime = v97;
        else
          prime = v96;
        v39 = v134;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v70 = *((_QWORD *)&v150 + 1);
        }
        if (prime <= v70)
        {
          if (prime >= v70)
            goto LABEL_196;
          v109 = vcvtps_u32_f32((float)*((unint64_t *)&v151 + 1) / *(float *)&v152);
          if (v70 < 3 || (v110 = (uint8x8_t)vcnt_s8((int8x8_t)v70), v110.i16[0] = vaddlv_u8(v110), v110.u32[0] > 1uLL))
          {
            v109 = std::__next_prime(v109);
          }
          else
          {
            v111 = 1 << -(char)__clz(v109 - 1);
            if (v109 >= 2)
              v109 = v111;
          }
          if (prime <= v109)
            prime = v109;
          if (prime < v70)
          {
            if (prime)
              goto LABEL_160;
            v113 = (void *)v150;
            *(_QWORD *)&v150 = 0;
            if (v113)
              operator delete(v113);
            v70 = 0;
            *((_QWORD *)&v150 + 1) = 0;
            v114 = -1;
            goto LABEL_197;
          }
          v70 = *((_QWORD *)&v150 + 1);
          v114 = *((_QWORD *)&v150 + 1) - 1;
          if ((*((_QWORD *)&v150 + 1) & (*((_QWORD *)&v150 + 1) - 1)) == 0)
            goto LABEL_197;
          goto LABEL_209;
        }
LABEL_160:
        if (prime >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v99 = operator new(8 * prime);
        v100 = (void *)v150;
        *(_QWORD *)&v150 = v99;
        if (v100)
          operator delete(v100);
        v101 = 0;
        *((_QWORD *)&v150 + 1) = prime;
        do
          *(_QWORD *)(v150 + 8 * v101++) = 0;
        while (prime != v101);
        v102 = (_QWORD **)v151;
        if (!(_QWORD)v151)
        {
LABEL_208:
          v70 = prime;
          v114 = prime - 1;
          if ((prime & (prime - 1)) == 0)
            goto LABEL_197;
          goto LABEL_209;
        }
        v103 = *(_QWORD *)(v151 + 8);
        v104 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v105 = v103 & v104;
          *(_QWORD *)(v150 + 8 * v105) = &v151;
          for (i = *v102; *v102; i = *v102)
          {
            v107 = i[1] & v104;
            if (v107 == v105)
            {
              v102 = (_QWORD **)i;
            }
            else if (*(_QWORD *)(v150 + 8 * v107))
            {
              *v102 = (_QWORD *)*i;
              v108 = 8 * v107;
              *i = **(_QWORD **)(v150 + v108);
              **(_QWORD **)(v150 + v108) = i;
            }
            else
            {
              *(_QWORD *)(v150 + 8 * v107) = v102;
              v102 = (_QWORD **)i;
              v105 = v107;
            }
          }
          goto LABEL_208;
        }
        if (v103 < prime)
        {
          *(_QWORD *)(v150 + 8 * v103) = &v151;
          v112 = *v102;
          if (*v102)
            goto LABEL_203;
LABEL_195:
          v70 = prime;
LABEL_196:
          v114 = v70 - 1;
          if ((v70 & (v70 - 1)) == 0)
          {
LABEL_197:
            v72 = v114 & v69;
            v93 = v150;
            v94 = *(_QWORD **)(v150 + 8 * (v114 & v69));
            if (!v94)
              goto LABEL_198;
LABEL_149:
            *v91 = *v94;
            goto LABEL_217;
          }
LABEL_209:
          if (v69 >= v70)
          {
            v72 = v69 % v70;
            v93 = v150;
            v94 = *(_QWORD **)(v150 + 8 * (v69 % v70));
            if (!v94)
              goto LABEL_198;
          }
          else
          {
            v72 = v69;
            v93 = v150;
            v94 = *(_QWORD **)(v150 + 8 * v69);
            if (!v94)
              goto LABEL_198;
          }
          goto LABEL_149;
        }
        v103 %= prime;
        *(_QWORD *)(v150 + 8 * v103) = &v151;
        v112 = *v102;
        if (!*v102)
          goto LABEL_195;
        while (1)
        {
LABEL_203:
          v117 = v112[1];
          if (v117 >= prime)
            v117 %= prime;
          if (v117 == v103)
            goto LABEL_202;
          if (*(_QWORD *)(v150 + 8 * v117))
            break;
          *(_QWORD *)(v150 + 8 * v117) = v102;
          v102 = (_QWORD **)v112;
          v112 = (_QWORD *)*v112;
          v103 = v117;
          if (!v112)
            goto LABEL_208;
        }
        *v102 = (_QWORD *)*v112;
        v116 = 8 * v117;
        *v112 = **(_QWORD **)(v150 + v116);
        **(_QWORD **)(v150 + v116) = v112;
        v112 = v102;
LABEL_202:
        v102 = (_QWORD **)v112;
        v112 = (_QWORD *)*v112;
        if (!v112)
          goto LABEL_208;
        goto LABEL_203;
      }
      v71 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v150 + 8));
      v71.i16[0] = vaddlv_u8(v71);
      if (v71.u32[0] > 1uLL)
      {
        v72 = v68;
        if (v68 >= *((_QWORD *)&v150 + 1))
          v72 = v68 % *((_QWORD *)&v150 + 1);
      }
      else
      {
        v72 = (*((_QWORD *)&v150 + 1) - 1) & v68;
      }
      v73 = *(uint64_t ***)(v150 + 8 * v72);
      if (!v73)
        goto LABEL_146;
      v74 = *v73;
      if (!*v73)
        goto LABEL_146;
      v75 = HIBYTE(v136);
      if (v136 >= 0)
        v76 = (void *)HIBYTE(v136);
      else
        v76 = v135[1];
      if (v136 >= 0)
        v77 = v135;
      else
        v77 = (void **)v135[0];
      if (v71.u32[0] >= 2uLL)
      {
        while (1)
        {
          v79 = v74[1];
          if (v79 == v69)
          {
            v80 = *((unsigned __int8 *)v74 + 39);
            if ((v80 & 0x80u) == 0)
              v81 = (void *)*((unsigned __int8 *)v74 + 39);
            else
              v81 = (void *)v74[3];
            if (v81 == v76)
            {
              v82 = (const void **)(v74 + 2);
              if ((v80 & 0x80) != 0)
              {
                if (!memcmp(*v82, v77, v74[3]))
                {
LABEL_128:
                  v39 = v134;
                  if (v75 < 0)
                    goto LABEL_219;
                  goto LABEL_220;
                }
              }
              else
              {
                if (!*((_BYTE *)v74 + 39))
                  goto LABEL_128;
                v83 = v77;
                while (*(unsigned __int8 *)v82 == *(unsigned __int8 *)v83)
                {
                  v82 = (const void **)((char *)v82 + 1);
                  v83 = (void **)((char *)v83 + 1);
                  if (!--v80)
                    goto LABEL_128;
                }
              }
            }
          }
          else
          {
            if (v79 >= v70)
              v79 %= v70;
            if (v79 != v72)
              goto LABEL_146;
          }
          v74 = (uint64_t *)*v74;
          if (!v74)
            goto LABEL_146;
        }
      }
      v78 = *((_QWORD *)&v150 + 1) - 1;
      while (1)
      {
        v84 = v74[1];
        if (v84 != v69)
        {
          if ((v84 & v78) != v72)
            goto LABEL_146;
          goto LABEL_131;
        }
        v85 = *((unsigned __int8 *)v74 + 39);
        v86 = (v85 & 0x80u) == 0 ? (void *)*((unsigned __int8 *)v74 + 39) : (void *)v74[3];
        if (v86 == v76)
          break;
LABEL_131:
        v74 = (uint64_t *)*v74;
        if (!v74)
          goto LABEL_146;
      }
      v87 = (const void **)(v74 + 2);
      if ((v85 & 0x80) == 0)
      {
        if (!*((_BYTE *)v74 + 39))
          goto LABEL_144;
        v88 = v77;
        while (*(unsigned __int8 *)v87 == *(unsigned __int8 *)v88)
        {
          v87 = (const void **)((char *)v87 + 1);
          v88 = (void **)((char *)v88 + 1);
          if (!--v85)
            goto LABEL_144;
        }
        goto LABEL_131;
      }
      v132 = v76;
      v89 = v78;
      v90 = memcmp(*v87, v77, v74[3]);
      v78 = v89;
      v76 = v132;
      if (v90)
        goto LABEL_131;
LABEL_144:
      v39 = v134;
      if (v75 < 0)
LABEL_219:
        operator delete(v135[0]);
LABEL_220:
      if (*(_QWORD *)__dst)
      {
        *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
        operator delete(*(void **)__dst);
      }
      if (++v40 == v39)
        goto LABEL_222;
    }
    v48 = (uint64_t *)&__dst[24];
    if (*(_QWORD *)&__dst[8] != *(_QWORD *)__dst)
      v48 = *(uint64_t **)__dst;
    v49 = *v48;
    v50 = (char **)(*(_QWORD *)__dst + 8);
    if (*(_QWORD *)&__dst[8] == *(_QWORD *)__dst)
      v50 = (char **)&__dst[32];
    v51 = *v50;
    v52 = (unint64_t)&(*v50)[-v49];
    if (v52 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v52 > 0x16)
    {
      v63 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v52 | 7) != 0x17)
        v63 = v52 | 7;
      v64 = v63 + 1;
      v53 = operator new(v63 + 1);
      v135[1] = (void *)v52;
      v136 = v64 | 0x8000000000000000;
      v135[0] = v53;
      if ((char *)v49 != v51)
        goto LABEL_76;
    }
    else
    {
      HIBYTE(v136) = *(_BYTE *)v50 - v49;
      v53 = v135;
      if ((char *)v49 != v51)
      {
LABEL_76:
        if (v52 < 0x20 || (unint64_t)v53 - v49 < 0x20)
        {
          v54 = v53;
          v55 = (char *)v49;
        }
        else
        {
          v54 = (char *)v53 + (v52 & 0xFFFFFFFFFFFFFFE0);
          v55 = (char *)(v49 + (v52 & 0xFFFFFFFFFFFFFFE0));
          v56 = (__int128 *)(v49 + 16);
          v57 = v53 + 1;
          v58 = v52 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v59 = *v56;
            *(v57 - 1) = *(v56 - 1);
            *v57 = v59;
            v56 += 2;
            v57 += 2;
            v58 -= 32;
          }
          while (v58);
          if (v52 == (v52 & 0x7FFFFFFFFFFFFFE0))
            goto LABEL_89;
        }
        do
        {
          v65 = *v55++;
          *v54++ = v65;
        }
        while (v55 != v51);
LABEL_89:
        *v54 = 0;
        v62 = HIBYTE(v136);
        v61 = (uint64_t *)v135[0];
        v60 = v135[1];
        goto LABEL_90;
      }
    }
    v54 = v53;
    goto LABEL_89;
  }
LABEL_222:
  v118 = *((_QWORD *)&v151 + 1);
  v119 = (std::__shared_weak_count *)v147;
  if ((_QWORD)v147)
  {
    v120 = (unint64_t *)(v147 + 8);
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  std::locale::~locale(v144);
  v122 = (std::__shared_weak_count *)v149;
  if ((_QWORD)v149)
  {
    v123 = (unint64_t *)(v149 + 8);
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  std::locale::~locale((std::locale *)v148);
  operator delete(v133);
  v125 = (void **)v151;
  if ((_QWORD)v151)
  {
    do
    {
      v131 = (void **)*v125;
      if (*((char *)v125 + 39) < 0)
        operator delete(v125[2]);
      operator delete(v125);
      v125 = v131;
    }
    while (v131);
  }
  v126 = (void *)v150;
  *(_QWORD *)&v150 = 0;
  if (v126)
    operator delete(v126);
  v127 = (void **)v153;
  if (v153)
  {
    v128 = (void **)v154;
    v129 = v153;
    if (v154 != v153)
    {
      do
      {
        if (*((char *)v128 - 1) < 0)
          operator delete(*(v128 - 3));
        v128 -= 3;
      }
      while (v128 != v127);
      v129 = v153;
    }
    v154 = (std::sub_match<const char *> *)v127;
    operator delete(v129);
  }
  return v118;
}

void sub_1A3538898(_Unwind_Exception *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  operator delete(v2);
  std::unordered_set<std::string>::~unordered_set[abi:ne180100](&v3);
  std::vector<std::string>::~vector[abi:ne180100](&v4);
  _Unwind_Resume(a1);
}

void sub_1A35388A0()
{
  __cxa_end_catch();
  JUMPOUT(0x1A35388A8);
}

void sub_1A35388C8(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1A35388D0);
  JUMPOUT(0x1A3538770);
}

uint64_t std::unordered_set<std::string>::~unordered_set[abi:ne180100](uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t util::compareTwoStringsWithPattern(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  std::sub_match<const char *> *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  std::vector<std::ssub_match>::pointer begin;
  std::vector<std::ssub_match>::pointer end;
  __int128 v14;
  std::__wrap_iter<const char *>::iterator_type v15;
  std::__wrap_iter<const char *>::iterator_type i;
  unint64_t v17;
  std::sub_match<const char *> *v18;
  std::sub_match<const char *> *v19;
  _BYTE *v20;
  __int128 *v21;
  BOOL *p_matched;
  unint64_t v23;
  __int128 v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char *v29;
  char *v30;
  char *v31;
  void **v32;
  __int128 v33;
  uint64_t v34;
  std::sub_match<const char *> *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  std::vector<std::ssub_match>::pointer v39;
  std::vector<std::ssub_match>::pointer v40;
  __int128 v41;
  std::__wrap_iter<const char *>::iterator_type v42;
  std::__wrap_iter<const char *>::iterator_type v43;
  unint64_t v44;
  std::sub_match<const char *> *v45;
  std::sub_match<const char *> *v46;
  _BYTE *v47;
  __int128 *v48;
  BOOL *v49;
  unint64_t v50;
  __int128 v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  void **v62;
  char *v63;
  char *v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  char *v70;
  uint64_t v71;
  char *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  void *__p;
  char *v77;
  unint64_t v78;
  void *v79;
  char *v80;
  unint64_t v81;
  std::locale v82[2];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  std::vector<std::ssub_match> v86[2];
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  std::vector<std::csub_match> v94[2];
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;

  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v89 = 0xAAAAAAAAAAAAAA00;
  v86[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
  v92 = v5;
  v87 = 0;
  v88 = 0;
  v90 = 0;
  v91 = 0;
  LOBYTE(v92) = 0;
  BYTE8(v92) = 0;
  v93 = 0;
  memset(v86, 0, 41);
  v84 = v5;
  v85 = v5;
  *(_OWORD *)&v82[0].__locale_ = v5;
  v83 = v5;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v82, a3, 0);
  v79 = 0;
  v80 = 0;
  v81 = 0;
  __p = 0;
  v77 = 0;
  v78 = 0;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v97 = 0xAAAAAAAAAAAAAA00;
  v94[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
  v100 = v6;
  v95 = 0;
  v96 = 0;
  v98 = 0;
  v99 = 0;
  LOBYTE(v100) = 0;
  BYTE8(v100) = 0;
  v101 = 0;
  memset(v94, 0, 32);
  v7 = *(unsigned __int8 *)(a1 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (std::sub_match<const char *> *)a1;
  else
    v8 = *(std::sub_match<const char *> **)a1;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)((char *)&v94[1].__begin_ + 1) = 0uLL;
  v9 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v82, v8, (std::sub_match<const char *> *)((char *)v8 + v7), v94, 0);
  v10 = *(unsigned __int8 *)(a1 + 23);
  if ((v10 & 0x80u) == 0)
    v11 = a1;
  else
    v11 = *(_QWORD *)a1;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a1 + 8);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v86, v11, (std::sub_match<std::__wrap_iter<const char *>> *)(v11 + v10), (uint64_t *)v94, 0);
  if (v94[0].__begin_)
  {
    v94[0].__end_ = v94[0].__begin_;
    operator delete(v94[0].__begin_);
  }
  if (v9)
  {
    end = v86[0].__end_;
    begin = v86[0].__begin_;
    if (v86[0].__begin_ != v86[0].__end_)
    {
      while (1)
      {
        if (!begin->matched)
        {
          memset(v94, 0, 24);
          v25 = v80;
          if ((unint64_t)v80 >= v81)
            goto LABEL_38;
          goto LABEL_16;
        }
        i = begin->first.__i_;
        v15 = begin->second.__i_;
        v17 = v15 - begin->first.__i_;
        if (v17 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v17 > 0x16)
        {
          v26 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17)
            v26 = v17 | 7;
          v27 = v26 + 1;
          v18 = (std::sub_match<const char *> *)operator new(v26 + 1);
          v94[0].__end_ = (std::vector<std::csub_match>::pointer)v17;
          v94[0].__end_cap_.__value_ = (std::sub_match<const char *> *)(v27 | 0x8000000000000000);
          v94[0].__begin_ = v18;
          if (i == v15)
          {
LABEL_33:
            LOBYTE(v18->first) = 0;
            v25 = v80;
            if ((unint64_t)v80 >= v81)
              goto LABEL_38;
            goto LABEL_16;
          }
        }
        else
        {
          HIBYTE(v94[0].__end_cap_.__value_) = (_BYTE)v15 - LOBYTE(begin->first.__i_);
          v18 = (std::sub_match<const char *> *)v94;
          if (i == v15)
            goto LABEL_33;
        }
        if (v17 < 0x20 || (unint64_t)((char *)v18 - i) < 0x20)
          break;
        v19 = (std::sub_match<const char *> *)((char *)v18 + (v17 & 0xFFFFFFFFFFFFFFE0));
        v20 = &i[v17 & 0xFFFFFFFFFFFFFFE0];
        v21 = (__int128 *)(i + 16);
        p_matched = &v18->matched;
        v23 = v17 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v24 = *v21;
          *((_OWORD *)p_matched - 1) = *(v21 - 1);
          *(_OWORD *)p_matched = v24;
          v21 += 2;
          p_matched += 32;
          v23 -= 32;
        }
        while (v23);
        if (v17 != (v17 & 0x7FFFFFFFFFFFFFE0))
          goto LABEL_36;
LABEL_37:
        LOBYTE(v19->first) = 0;
        v25 = v80;
        if ((unint64_t)v80 >= v81)
        {
LABEL_38:
          v80 = std::vector<std::string>::__push_back_slow_path<std::string>(&v79, (uint64_t)v94);
          if (SHIBYTE(v94[0].__end_cap_.__value_) < 0)
            operator delete(v94[0].__begin_);
          goto LABEL_17;
        }
LABEL_16:
        v14 = *(_OWORD *)&v94[0].__begin_;
        *((_QWORD *)v25 + 2) = v94[0].__end_cap_.__value_;
        *(_OWORD *)v25 = v14;
        v80 = v25 + 24;
LABEL_17:
        if (++begin == end)
          goto LABEL_40;
      }
      v19 = v18;
      v20 = i;
      do
      {
LABEL_36:
        v28 = *v20++;
        LOBYTE(v19->first) = v28;
        v19 = (std::sub_match<const char *> *)((char *)v19 + 1);
      }
      while (v20 != v15);
      goto LABEL_37;
    }
LABEL_40:
    v29 = (char *)v79;
    v30 = v80;
    if (v80 - (_BYTE *)v79 != 24)
    {
      if ((char *)v79 + 24 != v80)
      {
        v31 = (char *)v79 + 23;
        do
        {
          v32 = (void **)(v31 - 23);
          if (*v31 < 0)
            operator delete(*v32);
          *(_OWORD *)v32 = *(_OWORD *)(v31 + 1);
          *(_QWORD *)(v31 - 7) = *(_QWORD *)(v31 + 17);
          v31[24] = 0;
          v31 += 24;
          *(v31 - 23) = 0;
          v29 += 24;
        }
        while (v31 + 1 != v30);
        v30 = v80;
      }
      while (v30 != v29)
      {
        if (*(v30 - 1) < 0)
          operator delete(*((void **)v30 - 3));
        v30 -= 24;
      }
      v80 = v29;
    }
    *(_QWORD *)&v33 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v97 = 0xAAAAAAAAAAAAAA00;
    v94[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
    v100 = v33;
    v95 = 0;
    v96 = 0;
    v98 = 0;
    v99 = 0;
    LOBYTE(v100) = 0;
    BYTE8(v100) = 0;
    v101 = 0;
    memset(v94, 0, 32);
    v34 = *(unsigned __int8 *)(a2 + 23);
    if ((v34 & 0x80u) == 0)
      v35 = (std::sub_match<const char *> *)a2;
    else
      v35 = *(std::sub_match<const char *> **)a2;
    if ((v34 & 0x80u) != 0)
      v34 = *(_QWORD *)(a2 + 8);
    *(_OWORD *)((char *)&v94[1].__begin_ + 1) = 0uLL;
    v36 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v82, v35, (std::sub_match<const char *> *)((char *)v35 + v34), v94, 0);
    v37 = *(unsigned __int8 *)(a2 + 23);
    if ((v37 & 0x80u) == 0)
      v38 = a2;
    else
      v38 = *(_QWORD *)a2;
    if ((v37 & 0x80u) != 0)
      v37 = *(_QWORD *)(a2 + 8);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v86, v38, (std::sub_match<std::__wrap_iter<const char *>> *)(v38 + v37), (uint64_t *)v94, 0);
    if (v94[0].__begin_)
    {
      v94[0].__end_ = v94[0].__begin_;
      operator delete(v94[0].__begin_);
    }
    if (v36)
    {
      v40 = v86[0].__end_;
      v39 = v86[0].__begin_;
      if (v86[0].__begin_ != v86[0].__end_)
      {
        while (1)
        {
          if (!v39->matched)
          {
            memset(v94, 0, 24);
            v52 = v77;
            if ((unint64_t)v77 >= v78)
              goto LABEL_89;
            goto LABEL_67;
          }
          v43 = v39->first.__i_;
          v42 = v39->second.__i_;
          v44 = v42 - v39->first.__i_;
          if (v44 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v44 > 0x16)
          {
            v53 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v44 | 7) != 0x17)
              v53 = v44 | 7;
            v54 = v53 + 1;
            v45 = (std::sub_match<const char *> *)operator new(v53 + 1);
            v94[0].__end_ = (std::vector<std::csub_match>::pointer)v44;
            v94[0].__end_cap_.__value_ = (std::sub_match<const char *> *)(v54 | 0x8000000000000000);
            v94[0].__begin_ = v45;
            if (v43 == v42)
            {
LABEL_84:
              LOBYTE(v45->first) = 0;
              v52 = v77;
              if ((unint64_t)v77 >= v78)
                goto LABEL_89;
              goto LABEL_67;
            }
          }
          else
          {
            HIBYTE(v94[0].__end_cap_.__value_) = (_BYTE)v42 - LOBYTE(v39->first.__i_);
            v45 = (std::sub_match<const char *> *)v94;
            if (v43 == v42)
              goto LABEL_84;
          }
          if (v44 < 0x20 || (unint64_t)((char *)v45 - v43) < 0x20)
            break;
          v46 = (std::sub_match<const char *> *)((char *)v45 + (v44 & 0xFFFFFFFFFFFFFFE0));
          v47 = &v43[v44 & 0xFFFFFFFFFFFFFFE0];
          v48 = (__int128 *)(v43 + 16);
          v49 = &v45->matched;
          v50 = v44 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v51 = *v48;
            *((_OWORD *)v49 - 1) = *(v48 - 1);
            *(_OWORD *)v49 = v51;
            v48 += 2;
            v49 += 32;
            v50 -= 32;
          }
          while (v50);
          if (v44 != (v44 & 0x7FFFFFFFFFFFFFE0))
            goto LABEL_87;
LABEL_88:
          LOBYTE(v46->first) = 0;
          v52 = v77;
          if ((unint64_t)v77 >= v78)
          {
LABEL_89:
            v77 = std::vector<std::string>::__push_back_slow_path<std::string>(&__p, (uint64_t)v94);
            if (SHIBYTE(v94[0].__end_cap_.__value_) < 0)
              operator delete(v94[0].__begin_);
            goto LABEL_68;
          }
LABEL_67:
          v41 = *(_OWORD *)&v94[0].__begin_;
          *((_QWORD *)v52 + 2) = v94[0].__end_cap_.__value_;
          *(_OWORD *)v52 = v41;
          v77 = v52 + 24;
LABEL_68:
          if (++v39 == v40)
            goto LABEL_91;
        }
        v46 = v45;
        v47 = v43;
        do
        {
LABEL_87:
          v55 = *v47++;
          LOBYTE(v46->first) = v55;
          v46 = (std::sub_match<const char *> *)((char *)v46 + 1);
        }
        while (v47 != v42);
        goto LABEL_88;
      }
LABEL_91:
      v57 = (char *)__p;
      v56 = v77;
      if (v77 - (_BYTE *)__p == 24)
      {
        v58 = (char *)v79;
        v59 = v80;
        v60 = 1;
        if (v79 != v80)
          goto LABEL_117;
LABEL_105:
        if (v57)
          goto LABEL_106;
LABEL_134:
        v64 = (char *)v79;
        if (v79)
          goto LABEL_135;
        goto LABEL_108;
      }
      if ((char *)__p + 24 != v77)
      {
        v61 = (char *)__p + 23;
        do
        {
          v62 = (void **)(v61 - 23);
          if (*v61 < 0)
            operator delete(*v62);
          *(_OWORD *)v62 = *(_OWORD *)(v61 + 1);
          *(_QWORD *)(v61 - 7) = *(_QWORD *)(v61 + 17);
          v61[24] = 0;
          v61 += 24;
          *(v61 - 23) = 0;
          v57 += 24;
        }
        while (v61 + 1 != v56);
        v56 = v77;
      }
      while (v56 != v57)
      {
        if (*(v56 - 1) < 0)
          operator delete(*((void **)v56 - 3));
        v56 -= 24;
      }
      v77 = v57;
      v57 = (char *)__p;
      v58 = (char *)v79;
      v59 = v80;
      v60 = 1;
      if (v79 == v80)
        goto LABEL_105;
      while (1)
      {
LABEL_117:
        v66 = v58[23];
        if ((v66 & 0x80u) == 0)
          v67 = v58[23];
        else
          v67 = *((_QWORD *)v58 + 1);
        v68 = v57[23];
        v69 = (char)v68;
        if ((v68 & 0x80u) != 0)
          v68 = *((_QWORD *)v57 + 1);
        if (v67 != v68)
          break;
        if (v69 >= 0)
          v70 = v57;
        else
          v70 = *(char **)v57;
        if ((v66 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v58, v70, *((_QWORD *)v58 + 1)))
            break;
        }
        else if (v58[23])
        {
          v71 = 0;
          while (v58[v71] == v70[v71])
          {
            if (v66 == ++v71)
              goto LABEL_116;
          }
          break;
        }
LABEL_116:
        v58 += 24;
        v57 += 24;
        if (v58 == v59)
          goto LABEL_133;
      }
    }
  }
  v60 = 0;
LABEL_133:
  v57 = (char *)__p;
  if (!__p)
    goto LABEL_134;
LABEL_106:
  v63 = v77;
  if (v77 != v57)
  {
    do
    {
      if (*(v63 - 1) < 0)
        operator delete(*((void **)v63 - 3));
      v63 -= 24;
    }
    while (v63 != v57);
    v77 = v57;
    operator delete(__p);
    v64 = (char *)v79;
    if (v79)
      goto LABEL_135;
LABEL_108:
    v65 = (std::__shared_weak_count *)v85;
    if (!(_QWORD)v85)
      goto LABEL_146;
    goto LABEL_142;
  }
  v77 = v57;
  operator delete(v57);
  v64 = (char *)v79;
  if (!v79)
    goto LABEL_108;
LABEL_135:
  v72 = v80;
  if (v80 == v64)
  {
    v80 = v64;
    operator delete(v64);
    v65 = (std::__shared_weak_count *)v85;
    if (!(_QWORD)v85)
      goto LABEL_146;
    goto LABEL_142;
  }
  do
  {
    if (*(v72 - 1) < 0)
      operator delete(*((void **)v72 - 3));
    v72 -= 24;
  }
  while (v72 != v64);
  v80 = v64;
  operator delete(v79);
  v65 = (std::__shared_weak_count *)v85;
  if ((_QWORD)v85)
  {
LABEL_142:
    p_shared_owners = (unint64_t *)&v65->__shared_owners_;
    do
      v74 = __ldaxr(p_shared_owners);
    while (__stlxr(v74 - 1, p_shared_owners));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
LABEL_146:
  std::locale::~locale(v82);
  if (v86[0].__begin_)
  {
    v86[0].__end_ = v86[0].__begin_;
    operator delete(v86[0].__begin_);
  }
  return v60;
}

void sub_1A3539118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  uint64_t v24;
  void *v26;

  v26 = *(void **)(v24 - 192);
  if (v26)
  {
    *(_QWORD *)(v24 - 184) = v26;
    operator delete(v26);
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)&a9);
  std::vector<std::string>::~vector[abi:ne180100](&a12);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a15);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>(uint64_t a1, const void **a2, uint64_t a3, char a4, __n128 result)
{
  unint64_t j;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  int v17;
  const void *v18;
  size_t v19;
  int v20;
  const void *v21;
  size_t v22;
  size_t v23;
  int v24;
  uint64_t v25;
  __n128 v26;
  __n128 *v27;
  size_t v28;
  const void *v29;
  int v30;
  const void *v31;
  size_t v32;
  size_t v33;
  int v34;
  unint64_t v35;
  const void **v36;
  const void **v37;
  const void **v38;
  const void *v39;
  const void **v40;
  size_t v41;
  size_t v42;
  int v43;
  const void *v44;
  const void **v45;
  size_t v46;
  size_t v47;
  int v48;
  const void **v49;
  __int128 v50;
  __int128 v51;
  __n128 *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  const void *v56;
  unint64_t v57;
  size_t v58;
  int v59;
  const void **v60;
  const void *v61;
  const void **v62;
  unint64_t v63;
  size_t v64;
  int v65;
  __n128 *v66;
  __n128 v67;
  __n128 v68;
  BOOL v69;
  __n128 v70;
  const void **v71;
  __n128 *v72;
  size_t v73;
  size_t v74;
  const void *v75;
  const void **v76;
  const void **v77;
  size_t v78;
  size_t v79;
  int v80;
  unint64_t v81;
  uint64_t v82;
  const void *v83;
  size_t v84;
  size_t v85;
  int v86;
  const void **k;
  const void **v88;
  const void **v89;
  size_t v90;
  size_t v91;
  int v92;
  const void *v93;
  __int128 v94;
  __int128 v95;
  __n128 *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  const void *v100;
  unint64_t v101;
  size_t v102;
  int v103;
  const void **v104;
  const void *v105;
  const void **v106;
  const void *v107;
  size_t v108;
  int v109;
  __n128 *v110;
  __n128 v111;
  int v112;
  const void *v113;
  size_t v114;
  size_t v115;
  int v116;
  __n128 *v117;
  int v118;
  const void **v119;
  size_t v120;
  int v121;
  void *v122;
  const void *v123;
  const void *v124;
  size_t v125;
  size_t v126;
  int v127;
  const void *v128;
  uint64_t v129;
  uint64_t v130;
  __n128 *v131;
  __n128 *v132;
  int v133;
  const void *v134;
  size_t v135;
  int v136;
  __n128 *v137;
  size_t v138;
  size_t v139;
  int v140;
  __n128 v141;
  __n128 *v142;
  size_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  const void *v147;
  size_t v148;
  size_t v149;
  int v150;
  int64_t v151;
  int64_t v152;
  const void **v153;
  int64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  const void **v158;
  int v159;
  const void *v160;
  unint64_t v161;
  int v162;
  const void *v163;
  unint64_t v164;
  size_t v165;
  int v166;
  BOOL v167;
  uint64_t v168;
  int v169;
  const void *v170;
  size_t v171;
  int v172;
  const void *v173;
  size_t v174;
  size_t v175;
  int v176;
  BOOL v177;
  __n128 v178;
  __int128 v179;
  unint64_t v180;
  __n128 *v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  const void *v186;
  unint64_t v187;
  int v188;
  const void *v189;
  unint64_t v190;
  size_t v191;
  int v192;
  BOOL v193;
  int v194;
  const void *v195;
  size_t v196;
  size_t v197;
  int v198;
  int64_t v199;
  uint64_t v200;
  uint64_t v201;
  __n128 *v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  const void *v206;
  size_t v207;
  int v208;
  const void *v209;
  size_t v210;
  size_t v211;
  int v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  int v217;
  const void *v218;
  size_t v219;
  int v220;
  __n128 *v221;
  size_t v222;
  size_t v223;
  int v224;
  __n128 v225;
  __n128 *v226;
  size_t v227;
  __n128 v228;
  __int128 v229;
  unint64_t v230;
  uint64_t v231;
  int v232;
  const void *v233;
  size_t v234;
  size_t v235;
  int v236;
  const void *v237;
  const void **v238;
  int v239;
  const void *v240;
  size_t v241;
  int v242;
  const void *v243;
  size_t v244;
  size_t v245;
  int v246;
  __n128 v247;
  __n128 *v248;
  size_t v249;
  uint64_t i;
  int v251;
  const void *v252;
  size_t v253;
  size_t v254;
  int v255;
  const void *v256;
  uint64_t v257;
  const void **v258;
  const void **v259;
  size_t v261;
  const void *v262;
  uint64_t v263;
  __n128 *v264;
  const void *v265;
  const void **v266;
  int64_t v267;
  const void *v268;
  const void **v269;
  const void **v270;
  __n128 v271;
  int64_t v272;

LABEL_1:
  v266 = a2 - 3;
  v269 = a2;
  v258 = a2 - 9;
  v259 = a2 - 6;
  j = a1;
  while (2)
  {
    a1 = j;
    v9 = (uint64_t)a2 - j;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - j) >> 3);
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v117 = (__n128 *)(a2 - 3);
        v118 = *((char *)a2 - 1);
        if (v118 >= 0)
          v119 = a2 - 3;
        else
          v119 = (const void **)*(a2 - 3);
        if (v118 >= 0)
          v120 = *((unsigned __int8 *)a2 - 1);
        else
          v120 = (size_t)*(a2 - 2);
        v121 = *(char *)(a1 + 23);
        v122 = *(void **)a1;
        v123 = *(const void **)(a1 + 8);
        if (v121 >= 0)
          v124 = (const void *)a1;
        else
          v124 = *(const void **)a1;
        if (v121 >= 0)
          v125 = *(unsigned __int8 *)(a1 + 23);
        else
          v125 = *(_QWORD *)(a1 + 8);
        if (v125 >= v120)
          v126 = v120;
        else
          v126 = v125;
        v127 = memcmp(v119, v124, v126);
        if (v127)
        {
          if (v127 < 0)
            return result;
        }
        else if (v120 <= v125)
        {
          return result;
        }
        v256 = *(const void **)(a1 + 16);
        v257 = (uint64_t)*(a2 - 1);
        result = *v117;
        *(__n128 *)a1 = *v117;
        *(_QWORD *)(a1 + 16) = v257;
        *(a2 - 3) = v122;
        *(a2 - 2) = v123;
        *(a2 - 1) = v256;
        return result;
      case 3uLL:
        result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, v266).n128_u64[0];
        return result;
      case 4uLL:
        result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, v266).n128_u64[0];
        return result;
      case 5uLL:
        result.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a1 + 72, v266).n128_u64[0];
        return result;
      default:
        if (v9 <= 575)
        {
          if ((a4 & 1) != 0)
          {
            if ((const void **)a1 == a2)
              return result;
            v128 = (const void *)(a1 + 24);
            if ((const void **)(a1 + 24) == a2)
              return result;
            v129 = 0;
            v130 = a1;
            while (1)
            {
              v132 = (__n128 *)v130;
              v130 = (uint64_t)v128;
              v133 = v132[2].n128_i8[15];
              if (v133 >= 0)
                v134 = v128;
              else
                v134 = (const void *)v132[1].n128_u64[1];
              if (v133 >= 0)
                v135 = v132[2].n128_u8[15];
              else
                v135 = v132[2].n128_u64[0];
              v136 = v132[1].n128_i8[7];
              if (v136 >= 0)
                v137 = v132;
              else
                v137 = (__n128 *)v132->n128_u64[0];
              if (v136 >= 0)
                v138 = v132[1].n128_u8[7];
              else
                v138 = v132->n128_u64[1];
              if (v138 >= v135)
                v139 = v135;
              else
                v139 = v138;
              v140 = memcmp(v134, v137, v139);
              if (v140)
              {
                if (v140 < 0)
                  goto LABEL_259;
              }
              else if (v135 <= v138)
              {
                goto LABEL_259;
              }
              v141 = *(__n128 *)v130;
              v272 = *(_QWORD *)(v130 + 16);
              v271 = v141;
              if (v272 >= 0)
                v142 = &v271;
              else
                v142 = (__n128 *)v141.n128_u64[0];
              if (v272 >= 0)
                v143 = HIBYTE(v272);
              else
                v143 = v141.n128_u64[1];
              *(_QWORD *)(v130 + 16) = v132[1].n128_u64[0];
              *(__n128 *)v130 = *v132;
              v132[1].n128_u8[7] = 0;
              v132->n128_u8[0] = 0;
              v131 = (__n128 *)a1;
              if (v132 != (__n128 *)a1)
              {
                v144 = v129;
                while (1)
                {
                  v145 = a1 + v144;
                  v146 = *(char *)(a1 + v144 - 1);
                  if (v146 >= 0)
                    v147 = (const void *)(a1 + v144 - 24);
                  else
                    v147 = *(const void **)(a1 + v144 - 24);
                  if (v146 >= 0)
                    v148 = *(unsigned __int8 *)(a1 + v144 - 1);
                  else
                    v148 = *(_QWORD *)(a1 + v144 - 16);
                  if (v148 >= v143)
                    v149 = v143;
                  else
                    v149 = v148;
                  v150 = memcmp(v142, v147, v149);
                  if (v150)
                  {
                    if (v150 < 0)
                    {
                      v131 = (__n128 *)(a1 + v144);
                      break;
                    }
                  }
                  else if (v143 <= v148)
                  {
                    v131 = v132;
                    break;
                  }
                  v132 = (__n128 *)((char *)v132 - 24);
                  *(_OWORD *)v145 = *(_OWORD *)(a1 + v144 - 24);
                  *(_QWORD *)(v145 + 16) = *(_QWORD *)(a1 + v144 - 8);
                  *(_BYTE *)(v145 - 1) = 0;
                  *(_BYTE *)(v145 - 24) = 0;
                  v144 -= 24;
                  if (!v144)
                  {
                    v131 = (__n128 *)a1;
                    break;
                  }
                }
              }
              result = v271;
              v131[1].n128_u64[0] = v272;
              *v131 = result;
LABEL_259:
              v128 = (const void *)(v130 + 24);
              v129 += 24;
              if ((const void **)(v130 + 24) == v269)
                return result;
            }
          }
          if ((const void **)a1 == a2)
            return result;
          v237 = (const void *)(a1 + 24);
          if ((const void **)(a1 + 24) == a2)
            return result;
LABEL_471:
          v238 = (const void **)a1;
          a1 = (uint64_t)v237;
          v239 = *((char *)v238 + 47);
          if (v239 >= 0)
            v240 = v237;
          else
            v240 = v238[3];
          if (v239 >= 0)
            v241 = *((unsigned __int8 *)v238 + 47);
          else
            v241 = (size_t)v238[4];
          v242 = *((char *)v238 + 23);
          if (v242 >= 0)
            v243 = v238;
          else
            v243 = *v238;
          if (v242 >= 0)
            v244 = *((unsigned __int8 *)v238 + 23);
          else
            v244 = (size_t)v238[1];
          if (v244 >= v241)
            v245 = v241;
          else
            v245 = v244;
          v246 = memcmp(v240, v243, v245);
          if (v246)
          {
            if (v246 < 0)
              goto LABEL_470;
          }
          else if (v241 <= v244)
          {
            goto LABEL_470;
          }
          v247 = *(__n128 *)a1;
          v272 = *(_QWORD *)(a1 + 16);
          v271 = v247;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          if (v272 >= 0)
            v248 = &v271;
          else
            v248 = (__n128 *)v271.n128_u64[0];
          if (v272 >= 0)
            v249 = HIBYTE(v272);
          else
            v249 = v271.n128_u64[1];
          for (i = a1; ; i -= 24)
          {
            *(_OWORD *)i = *(_OWORD *)(i - 24);
            *(_QWORD *)(i + 16) = *(_QWORD *)(i - 8);
            *(_BYTE *)(i - 1) = 0;
            *(_BYTE *)(i - 24) = 0;
            v251 = *(char *)(i - 25);
            if (v251 >= 0)
              v252 = (const void *)(i - 48);
            else
              v252 = *(const void **)(i - 48);
            if (v251 >= 0)
              v253 = *(unsigned __int8 *)(i - 25);
            else
              v253 = *(_QWORD *)(i - 40);
            if (v253 >= v249)
              v254 = v249;
            else
              v254 = v253;
            v255 = memcmp(v248, v252, v254);
            if (v255)
            {
              if (v255 < 0)
              {
LABEL_469:
                result = v271;
                *(_QWORD *)(i - 8) = v272;
                *(__n128 *)(i - 24) = result;
LABEL_470:
                v237 = (const void *)(a1 + 24);
                if ((const void **)(a1 + 24) == a2)
                  return result;
                goto LABEL_471;
              }
            }
            else if (v249 <= v253)
            {
              goto LABEL_469;
            }
          }
        }
        if (!a3)
        {
          if ((const void **)a1 == a2)
            return result;
          v151 = (v10 - 2) >> 1;
          v152 = v151;
          while (1)
          {
            v154 = v152;
            if (v151 < v152)
              goto LABEL_306;
            v155 = (2 * v152) | 1;
            v156 = a1 + 24 * v155;
            v157 = 2 * v152 + 2;
            if (v157 >= (uint64_t)v10)
              goto LABEL_330;
            v158 = (const void **)(v156 + 24);
            v159 = *(char *)(v156 + 23);
            v160 = v159 >= 0 ? (const void *)(a1 + 24 * v155) : *(const void **)v156;
            v161 = v159 >= 0 ? *(unsigned __int8 *)(v156 + 23) : *(_QWORD *)(v156 + 8);
            v162 = *(char *)(v156 + 47);
            v163 = v162 >= 0 ? (const void *)(v156 + 24) : *(const void **)(v156 + 24);
            v164 = v162 >= 0 ? *(unsigned __int8 *)(v156 + 47) : *(_QWORD *)(v156 + 32);
            v165 = v164 >= v161 ? v161 : v164;
            v166 = memcmp(v160, v163, v165);
            if (v166)
              break;
            v167 = v161 >= v164;
            if (v161 == v164)
            {
              v158 = (const void **)(a1 + 24 * v155);
              v157 = (2 * v154) | 1;
              a2 = v269;
              goto LABEL_331;
            }
            a2 = v269;
            if (!v167)
              goto LABEL_330;
LABEL_331:
            v168 = a1 + 24 * v154;
            v169 = *((char *)v158 + 23);
            if (v169 >= 0)
              v170 = v158;
            else
              v170 = *v158;
            if (v169 >= 0)
              v171 = *((unsigned __int8 *)v158 + 23);
            else
              v171 = (size_t)v158[1];
            v172 = *(char *)(v168 + 23);
            if (v172 >= 0)
              v173 = (const void *)(a1 + 24 * v154);
            else
              v173 = *(const void **)v168;
            if (v172 >= 0)
              v174 = *(unsigned __int8 *)(v168 + 23);
            else
              v174 = *(_QWORD *)(v168 + 8);
            if (v174 >= v171)
              v175 = v171;
            else
              v175 = v174;
            v176 = memcmp(v170, v173, v175);
            if (v176)
            {
              v151 = (v10 - 2) >> 1;
              if (v176 < 0)
                goto LABEL_350;
            }
            else
            {
              v177 = v171 > v174;
              v151 = (v10 - 2) >> 1;
              if (!v177)
              {
LABEL_350:
                v178 = *(__n128 *)v168;
                v272 = *(_QWORD *)(v168 + 16);
                v271 = v178;
                *(_QWORD *)(v168 + 8) = 0;
                *(_QWORD *)(v168 + 16) = 0;
                *(_QWORD *)v168 = 0;
                v179 = *(_OWORD *)v158;
                *(_QWORD *)(v168 + 16) = v158[2];
                *(_OWORD *)v168 = v179;
                *((_BYTE *)v158 + 23) = 0;
                *(_BYTE *)v158 = 0;
                if (v151 >= v157)
                {
                  v180 = HIBYTE(v272);
                  v181 = &v271;
                  if (v272 < 0)
                  {
                    v180 = v271.n128_u64[1];
                    v181 = (__n128 *)v271.n128_u64[0];
                  }
                  v261 = v180;
                  v264 = v181;
                  v267 = v154;
                  while (1)
                  {
                    v183 = (2 * v157) | 1;
                    v184 = a1 + 24 * v183;
                    v157 = 2 * v157 + 2;
                    if (v157 >= (uint64_t)v10)
                      goto LABEL_378;
                    v153 = (const void **)(v184 + 24);
                    v185 = *(char *)(v184 + 23);
                    v186 = v185 >= 0 ? (const void *)(a1 + 24 * v183) : *(const void **)v184;
                    v187 = v185 >= 0 ? *(unsigned __int8 *)(v184 + 23) : *(_QWORD *)(v184 + 8);
                    v188 = *(char *)(v184 + 47);
                    v189 = v188 >= 0 ? (const void *)(v184 + 24) : *(const void **)(v184 + 24);
                    v190 = v188 >= 0 ? *(unsigned __int8 *)(v184 + 47) : *(_QWORD *)(v184 + 32);
                    v191 = v190 >= v187 ? v187 : v190;
                    v192 = memcmp(v186, v189, v191);
                    if (v192)
                      break;
                    v193 = v187 >= v190;
                    if (v187 == v190)
                    {
                      v153 = (const void **)(a1 + 24 * v183);
                      v157 = v183;
                      a2 = v269;
                      v151 = (v10 - 2) >> 1;
                      goto LABEL_379;
                    }
                    a2 = v269;
                    v151 = (v10 - 2) >> 1;
                    if (!v193)
                      goto LABEL_378;
LABEL_379:
                    v194 = *((char *)v153 + 23);
                    if (v194 >= 0)
                      v195 = v153;
                    else
                      v195 = *v153;
                    if (v194 >= 0)
                      v196 = *((unsigned __int8 *)v153 + 23);
                    else
                      v196 = (size_t)v153[1];
                    if (v261 >= v196)
                      v197 = v196;
                    else
                      v197 = v261;
                    v198 = memcmp(v195, v264, v197);
                    if (v198)
                    {
                      v154 = v267;
                      if ((v198 & 0x80000000) == 0)
                        goto LABEL_304;
                    }
                    else
                    {
                      v154 = v267;
                      if (v196 > v261)
                        goto LABEL_304;
                    }
                    v182 = *(_OWORD *)v153;
                    v158[2] = v153[2];
                    *(_OWORD *)v158 = v182;
                    *((_BYTE *)v153 + 23) = 0;
                    *(_BYTE *)v153 = 0;
                    v158 = v153;
                    if (v151 < v157)
                      goto LABEL_305;
                  }
                  a2 = v269;
                  v151 = (v10 - 2) >> 1;
                  if ((v192 & 0x80000000) == 0)
                    goto LABEL_379;
LABEL_378:
                  v153 = (const void **)(a1 + 24 * v183);
                  v157 = v183;
                  goto LABEL_379;
                }
LABEL_304:
                v153 = v158;
LABEL_305:
                result = v271;
                v153[2] = (const void *)v272;
                *(__n128 *)v153 = result;
              }
            }
LABEL_306:
            v152 = v154 - 1;
            if (!v154)
            {
              v199 = v9 / 0x18uLL;
              while (2)
              {
                if (v199 < 2)
                  goto LABEL_393;
                v200 = 0;
                v268 = *(const void **)a1;
                v270 = a2;
                v262 = *(const void **)(a1 + 16);
                v265 = *(const void **)(a1 + 8);
                *(_QWORD *)(a1 + 8) = 0;
                *(_QWORD *)(a1 + 16) = 0;
                v201 = a1;
                *(_QWORD *)a1 = 0;
LABEL_399:
                v203 = v201 + 24 * v200 + 24;
                v204 = (2 * v200) | 1;
                v200 = 2 * v200 + 2;
                if (v200 >= v199)
                  goto LABEL_397;
                v202 = (__n128 *)(v203 + 24);
                v205 = *(char *)(v203 + 23);
                if (v205 >= 0)
                  v206 = (const void *)v203;
                else
                  v206 = *(const void **)v203;
                if (v205 >= 0)
                  v207 = *(unsigned __int8 *)(v203 + 23);
                else
                  v207 = *(_QWORD *)(v203 + 8);
                v208 = *(char *)(v203 + 47);
                if (v208 >= 0)
                  v209 = (const void *)(v203 + 24);
                else
                  v209 = *(const void **)(v203 + 24);
                if (v208 >= 0)
                  v210 = *(unsigned __int8 *)(v203 + 47);
                else
                  v210 = *(_QWORD *)(v203 + 32);
                if (v210 >= v207)
                  v211 = v207;
                else
                  v211 = v210;
                v212 = memcmp(v206, v209, v211);
                if (v212)
                {
                  if ((v212 & 0x80000000) == 0)
                    goto LABEL_417;
LABEL_397:
                  v202 = (__n128 *)v203;
                  v200 = v204;
                  if ((*(char *)(v201 + 23) & 0x80000000) == 0)
                  {
LABEL_398:
                    result = *v202;
                    *(_QWORD *)(v201 + 16) = v202[1].n128_u64[0];
                    *(__n128 *)v201 = result;
                    v202[1].n128_u8[7] = 0;
                    v202->n128_u8[0] = 0;
                    v201 = (uint64_t)v202;
                    if (v200 > (uint64_t)((unint64_t)(v199 - 2) >> 1))
                    {
                      if (v202 == (__n128 *)(a2 - 3))
                      {
                        v202->n128_u64[0] = (unint64_t)v268;
                        v202->n128_u64[1] = (unint64_t)v265;
                        v202[1].n128_u64[0] = (unint64_t)v262;
                      }
                      else
                      {
                        result = *(__n128 *)(a2 - 3);
                        v202[1].n128_u64[0] = (unint64_t)*(a2 - 1);
                        *v202 = result;
                        *(a2 - 3) = v268;
                        *(a2 - 2) = v265;
                        *(a2 - 1) = v262;
                        v213 = (uint64_t)&v202[1].n128_i64[1] - a1;
                        if (v213 >= 25)
                        {
                          v214 = v213 / 0x18uLL - 2;
                          v215 = v214 >> 1;
                          v216 = a1 + 24 * (v214 >> 1);
                          v217 = *(char *)(v216 + 23);
                          if (v217 >= 0)
                            v218 = (const void *)(a1 + 24 * (v214 >> 1));
                          else
                            v218 = *(const void **)v216;
                          if (v217 >= 0)
                            v219 = *(unsigned __int8 *)(v216 + 23);
                          else
                            v219 = *(_QWORD *)(v216 + 8);
                          v220 = v202[1].n128_i8[7];
                          if (v220 >= 0)
                            v221 = v202;
                          else
                            v221 = (__n128 *)v202->n128_u64[0];
                          if (v220 >= 0)
                            v222 = v202[1].n128_u8[7];
                          else
                            v222 = v202->n128_u64[1];
                          if (v222 >= v219)
                            v223 = v219;
                          else
                            v223 = v222;
                          v224 = memcmp(v218, v221, v223);
                          if (v224)
                          {
                            if (v224 < 0)
                              goto LABEL_393;
LABEL_443:
                            v225 = *v202;
                            v272 = v202[1].n128_i64[0];
                            v271 = v225;
                            v202->n128_u64[1] = 0;
                            v202[1].n128_u64[0] = 0;
                            v202->n128_u64[0] = 0;
                            if (v272 >= 0)
                              v226 = &v271;
                            else
                              v226 = (__n128 *)v271.n128_u64[0];
                            if (v272 >= 0)
                              v227 = HIBYTE(v272);
                            else
                              v227 = v271.n128_u64[1];
                            v228 = *(__n128 *)v216;
                            v202[1].n128_u64[0] = *(_QWORD *)(v216 + 16);
                            *v202 = v228;
                            *(_BYTE *)(v216 + 23) = 0;
                            *(_BYTE *)v216 = 0;
                            if (v214 >= 2)
                            {
                              while (1)
                              {
                                v230 = v215 - 1;
                                v215 = (v215 - 1) >> 1;
                                v231 = a1 + 24 * v215;
                                v232 = *(char *)(v231 + 23);
                                if (v232 >= 0)
                                  v233 = (const void *)(a1 + 24 * v215);
                                else
                                  v233 = *(const void **)v231;
                                if (v232 >= 0)
                                  v234 = *(unsigned __int8 *)(v231 + 23);
                                else
                                  v234 = *(_QWORD *)(v231 + 8);
                                if (v227 >= v234)
                                  v235 = v234;
                                else
                                  v235 = v227;
                                v236 = memcmp(v233, v226, v235);
                                if (v236)
                                {
                                  if (v236 < 0)
                                    break;
                                }
                                else if (v234 <= v227)
                                {
                                  break;
                                }
                                v229 = *(_OWORD *)v231;
                                *(_QWORD *)(v216 + 16) = *(_QWORD *)(v231 + 16);
                                *(_OWORD *)v216 = v229;
                                *(_BYTE *)(v231 + 23) = 0;
                                *(_BYTE *)v231 = 0;
                                v216 = a1 + 24 * v215;
                                if (v230 <= 1)
                                  goto LABEL_465;
                              }
                            }
                            v231 = v216;
LABEL_465:
                            result = v271;
                            *(_QWORD *)(v231 + 16) = v272;
                            *(__n128 *)v231 = result;
                            a2 = v270;
                          }
                          else if (v219 > v222)
                          {
                            goto LABEL_443;
                          }
                        }
                      }
LABEL_393:
                      a2 -= 3;
                      v177 = (unint64_t)v199-- > 2;
                      if (!v177)
                        return result;
                      continue;
                    }
                    goto LABEL_399;
                  }
                }
                else
                {
                  if (v207 == v210 || v207 < v210)
                    goto LABEL_397;
LABEL_417:
                  if ((*(char *)(v201 + 23) & 0x80000000) == 0)
                    goto LABEL_398;
                }
                break;
              }
              operator delete(*(void **)v201);
              goto LABEL_398;
            }
          }
          a2 = v269;
          if ((v166 & 0x80000000) == 0)
            goto LABEL_331;
LABEL_330:
          v158 = (const void **)(a1 + 24 * v155);
          v157 = (2 * v154) | 1;
          goto LABEL_331;
        }
        v11 = v10 >> 1;
        v12 = a1 + 24 * (v10 >> 1);
        if ((unint64_t)v9 < 0xC01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(v12, a1, v266);
          v263 = a3 - 1;
          if ((a4 & 1) != 0)
            goto LABEL_26;
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, v12, v266);
          v13 = 24 * v11;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1 + 24, v13 + a1 - 24, v259);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1 + 48, a1 + 24 + v13, v258);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(v13 + a1 - 24, v12, (const void **)(a1 + 24 + v13));
          v14 = *(void **)a1;
          v15 = *(_OWORD *)(a1 + 8);
          v16 = *(_OWORD *)v12;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v12 + 16);
          *(_OWORD *)a1 = v16;
          *(_QWORD *)v12 = v14;
          *(_OWORD *)(v12 + 8) = v15;
          v263 = a3 - 1;
          if ((a4 & 1) != 0)
            goto LABEL_26;
        }
        v17 = *(char *)(a1 - 1);
        if (v17 >= 0)
          v18 = (const void *)(a1 - 24);
        else
          v18 = *(const void **)(a1 - 24);
        if (v17 >= 0)
          v19 = *(unsigned __int8 *)(a1 - 1);
        else
          v19 = *(_QWORD *)(a1 - 16);
        v20 = *(char *)(a1 + 23);
        if (v20 >= 0)
          v21 = (const void *)a1;
        else
          v21 = *(const void **)a1;
        if (v20 >= 0)
          v22 = *(unsigned __int8 *)(a1 + 23);
        else
          v22 = *(_QWORD *)(a1 + 8);
        if (v22 >= v19)
          v23 = v19;
        else
          v23 = v22;
        v24 = memcmp(v18, v21, v23);
        if (v24)
        {
          if ((v24 & 0x80000000) == 0)
            goto LABEL_26;
LABEL_124:
          v70 = *(__n128 *)a1;
          v272 = *(_QWORD *)(a1 + 16);
          v271 = v70;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v71 = a2;
          if (v272 >= 0)
            v72 = &v271;
          else
            v72 = (__n128 *)v271.n128_u64[0];
          if (v272 >= 0)
            v73 = HIBYTE(v272);
          else
            v73 = v271.n128_u64[1];
          v74 = *((unsigned __int8 *)v71 - 1);
          v76 = (const void **)*(v71 - 3);
          v75 = *(v71 - 2);
          if ((v74 & 0x80u) == 0)
            v77 = v266;
          else
            v77 = (const void **)*(v71 - 3);
          if ((v74 & 0x80u) == 0)
            v78 = *((unsigned __int8 *)v71 - 1);
          else
            v78 = (size_t)*(v71 - 2);
          if (v78 >= v73)
            v79 = v73;
          else
            v79 = v78;
          v80 = memcmp(v72, v77, v79);
          if (v80)
          {
            if ((v80 & 0x80000000) == 0)
              goto LABEL_141;
          }
          else if (v73 > v78)
          {
LABEL_141:
            v81 = a1 + 24;
            do
            {
              while (1)
              {
                j = v81;
                v82 = *(unsigned __int8 *)(v81 + 23);
                v83 = (v82 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
                v84 = (v82 & 0x80u) == 0 ? v82 : *(_QWORD *)(j + 8);
                v85 = v84 >= v73 ? v73 : v84;
                v86 = memcmp(v72, v83, v85);
                v81 = j + 24;
                if (v86)
                  break;
                if (v73 > v84)
                  goto LABEL_154;
              }
            }
            while (v86 < 0);
            goto LABEL_154;
          }
          for (j = a1 + 24; j < (unint64_t)v269; j += 24)
          {
            v112 = *(char *)(j + 23);
            if (v112 >= 0)
              v113 = (const void *)j;
            else
              v113 = *(const void **)j;
            if (v112 >= 0)
              v114 = *(unsigned __int8 *)(j + 23);
            else
              v114 = *(_QWORD *)(j + 8);
            if (v114 >= v73)
              v115 = v73;
            else
              v115 = v114;
            v116 = memcmp(v72, v113, v115);
            if (v116)
            {
              if ((v116 & 0x80000000) == 0)
                break;
            }
            else if (v73 > v114)
            {
              break;
            }
          }
LABEL_154:
          k = v269;
          if (j < (unint64_t)v269)
          {
            for (k = v266; ; v75 = k[1])
            {
              if ((v74 & 0x80u) == 0)
                v89 = k;
              else
                v89 = v76;
              if ((v74 & 0x80u) == 0)
                v90 = v74;
              else
                v90 = (size_t)v75;
              if (v90 >= v73)
                v91 = v73;
              else
                v91 = v90;
              v92 = memcmp(v72, v89, v91);
              if (v92)
              {
                if (v92 < 0)
                  break;
              }
              else if (v73 <= v90)
              {
                break;
              }
              v88 = (const void **)*(k - 3);
              k -= 3;
              v76 = v88;
              v74 = *((unsigned __int8 *)k + 23);
            }
          }
          if (j < (unint64_t)k)
          {
            v93 = *(const void **)j;
            do
            {
              v94 = *(_OWORD *)(j + 8);
              v95 = *(_OWORD *)k;
              *(_QWORD *)(j + 16) = k[2];
              *(_OWORD *)j = v95;
              *k = v93;
              *(_OWORD *)(k + 1) = v94;
              if (v272 >= 0)
                v96 = &v271;
              else
                v96 = (__n128 *)v271.n128_u64[0];
              if (v272 >= 0)
                v97 = HIBYTE(v272);
              else
                v97 = v271.n128_u64[1];
              v98 = j + 24;
              do
              {
                while (1)
                {
                  j = v98;
                  v99 = *(unsigned __int8 *)(v98 + 23);
                  v93 = *(const void **)j;
                  v100 = (v99 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
                  v101 = (v99 & 0x80u) == 0 ? v99 : *(_QWORD *)(j + 8);
                  v102 = v101 >= v97 ? v97 : v101;
                  v103 = memcmp(v96, v100, v102);
                  v98 = j + 24;
                  if (v103)
                    break;
                  if (v97 > v101)
                    goto LABEL_191;
                }
              }
              while (v103 < 0);
LABEL_191:
              v104 = k - 3;
              do
              {
                while (1)
                {
                  k = v104;
                  v105 = (const void *)*((unsigned __int8 *)v104 + 23);
                  v106 = (char)v105 >= 0 ? k : (const void **)*k;
                  v107 = (char)v105 >= 0 ? v105 : k[1];
                  v108 = (unint64_t)v107 >= v97 ? v97 : (size_t)v107;
                  v109 = memcmp(v96, v106, v108);
                  v104 = k - 3;
                  if (v109)
                    break;
                  if (v97 <= (unint64_t)v107)
                    goto LABEL_171;
                }
              }
              while ((v109 & 0x80000000) == 0);
LABEL_171:
              ;
            }
            while (j < (unint64_t)k);
          }
          v110 = (__n128 *)(j - 24);
          if (j - 24 == a1)
          {
            a2 = v269;
            a3 = v263;
            if (*(char *)(j - 1) < 0)
              operator delete(*(void **)a1);
          }
          else
          {
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v111 = *v110;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(j - 8);
            *(__n128 *)a1 = v111;
            *(_BYTE *)(j - 1) = 0;
            *(_BYTE *)(j - 24) = 0;
            a2 = v269;
            a3 = v263;
          }
          a4 = 0;
          result = v271;
          *(_QWORD *)(j - 8) = v272;
          *v110 = result;
          continue;
        }
        if (v19 <= v22)
          goto LABEL_124;
LABEL_26:
        v25 = 0;
        v26 = *(__n128 *)a1;
        v272 = *(_QWORD *)(a1 + 16);
        v271 = v26;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        if (v272 >= 0)
          v27 = &v271;
        else
          v27 = (__n128 *)v271.n128_u64[0];
        if (v272 >= 0)
          v28 = HIBYTE(v272);
        else
          v28 = v271.n128_u64[1];
        while (2)
        {
          v29 = *(const void **)(a1 + v25 + 24);
          v30 = *(char *)(a1 + v25 + 47);
          if (v30 >= 0)
            v31 = (const void *)(a1 + v25 + 24);
          else
            v31 = *(const void **)(a1 + v25 + 24);
          if (v30 >= 0)
            v32 = *(unsigned __int8 *)(a1 + v25 + 47);
          else
            v32 = *(_QWORD *)(a1 + v25 + 32);
          if (v28 >= v32)
            v33 = v32;
          else
            v33 = v28;
          v34 = memcmp(v31, v27, v33);
          if (!v34)
          {
            if (v32 <= v28)
              goto LABEL_45;
LABEL_33:
            v25 += 24;
            continue;
          }
          break;
        }
        if ((v34 & 0x80000000) == 0)
          goto LABEL_33;
LABEL_45:
        v35 = a1 + v25 + 24;
        v36 = v266;
        if (v25)
        {
          do
          {
            while (1)
            {
              v37 = v36;
              v44 = (const void *)*((unsigned __int8 *)v36 + 23);
              v45 = (char)v44 >= 0 ? v37 : (const void **)*v37;
              v46 = (size_t)((char)v44 >= 0 ? v44 : v37[1]);
              v47 = v28 >= v46 ? v46 : v28;
              v48 = memcmp(v45, v27, v47);
              v36 = v37 - 3;
              if (v48)
                break;
              if (v46 > v28)
                goto LABEL_76;
            }
          }
          while (v48 < 0);
        }
        else
        {
          v37 = v269;
          if (v35 < (unint64_t)v269)
          {
            v38 = v266;
            do
            {
              while (1)
              {
                v37 = v38;
                v39 = (const void *)*((unsigned __int8 *)v38 + 23);
                v40 = (char)v39 >= 0 ? v37 : (const void **)*v37;
                v41 = (size_t)((char)v39 >= 0 ? v39 : v37[1]);
                v42 = v28 >= v41 ? v41 : v28;
                v43 = memcmp(v40, v27, v42);
                v38 = v37 - 3;
                if (!v43)
                  break;
                if (v35 >= (unint64_t)v37 || (v43 & 0x80000000) == 0)
                  goto LABEL_76;
              }
            }
            while (v35 < (unint64_t)v37 && v41 <= v28);
          }
        }
LABEL_76:
        if (v35 >= (unint64_t)v37)
        {
          j = v35;
        }
        else
        {
          v49 = v37;
          j = v35;
          do
          {
            v50 = *(_OWORD *)(j + 8);
            v51 = *(_OWORD *)v49;
            *(_QWORD *)(j + 16) = v49[2];
            *(_OWORD *)j = v51;
            *v49 = v29;
            *(_OWORD *)(v49 + 1) = v50;
            if (v272 >= 0)
              v52 = &v271;
            else
              v52 = (__n128 *)v271.n128_u64[0];
            if (v272 >= 0)
              v53 = HIBYTE(v272);
            else
              v53 = v271.n128_u64[1];
            v54 = j + 24;
            do
            {
              while (1)
              {
                j = v54;
                v55 = *(unsigned __int8 *)(v54 + 23);
                v29 = *(const void **)j;
                v56 = (v55 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
                v57 = (v55 & 0x80u) == 0 ? v55 : *(_QWORD *)(j + 8);
                v58 = v53 >= v57 ? v57 : v53;
                v59 = memcmp(v56, v52, v58);
                v54 = j + 24;
                if (v59)
                  break;
                if (v57 <= v53)
                  goto LABEL_98;
              }
            }
            while ((v59 & 0x80000000) == 0);
LABEL_98:
            v60 = v49 - 3;
            do
            {
              while (1)
              {
                v49 = v60;
                v61 = (const void *)*((unsigned __int8 *)v60 + 23);
                v62 = (char)v61 >= 0 ? v49 : (const void **)*v49;
                v63 = (unint64_t)((char)v61 >= 0 ? v61 : v49[1]);
                v64 = v53 >= v63 ? v63 : v53;
                v65 = memcmp(v62, v52, v64);
                v60 = v49 - 3;
                if (v65)
                  break;
                if (v63 > v53)
                  goto LABEL_78;
              }
            }
            while (v65 < 0);
LABEL_78:
            ;
          }
          while (j < (unint64_t)v49);
        }
        v66 = (__n128 *)(j - 24);
        if (j - 24 == a1)
        {
          a2 = v269;
          a3 = v263;
          if (*(char *)(j - 1) < 0)
            operator delete(*(void **)a1);
        }
        else
        {
          a2 = v269;
          a3 = v263;
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v67 = *v66;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(j - 8);
          *(__n128 *)a1 = v67;
          *(_BYTE *)(j - 1) = 0;
          *(_BYTE *)(j - 24) = 0;
        }
        v68 = v271;
        *(_QWORD *)(j - 8) = v272;
        *v66 = v68;
        if (v35 < (unint64_t)v37)
        {
LABEL_122:
          std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>(a1, j - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v69 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, (const void **)(j - 24));
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(j, a2))
        {
          if (v69)
            continue;
          goto LABEL_122;
        }
        a2 = (const void **)(j - 24);
        if (!v69)
          goto LABEL_1;
        return result;
    }
  }
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, const void **a3)
{
  int v6;
  const void *v7;
  const void *v8;
  const void *v9;
  size_t v10;
  int v11;
  const void *v12;
  const void *v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;
  int v18;
  const void *v19;
  size_t v20;
  size_t v21;
  int v22;
  const void *v23;
  const void *v24;
  __n128 result;
  int v26;
  const void *v27;
  size_t v28;
  size_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const void *v34;
  size_t v35;
  const void *v36;
  size_t v37;
  size_t v38;
  int v39;
  const void *v40;
  const void *v41;
  int v42;
  const void *v43;
  size_t v44;
  int v45;
  const void *v46;
  uint64_t v47;
  const void *v48;
  size_t v49;
  size_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;

  v6 = *(char *)(a2 + 23);
  v7 = *(const void **)a2;
  v8 = *(const void **)(a2 + 8);
  if (v6 >= 0)
    v9 = (const void *)a2;
  else
    v9 = *(const void **)a2;
  if (v6 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(_QWORD *)(a2 + 8);
  v11 = *(char *)(a1 + 23);
  v13 = *(const void **)a1;
  v12 = *(const void **)(a1 + 8);
  if (v11 >= 0)
    v14 = (const void *)a1;
  else
    v14 = *(const void **)a1;
  if (v11 >= 0)
    v15 = *(unsigned __int8 *)(a1 + 23);
  else
    v15 = *(_QWORD *)(a1 + 8);
  if (v15 >= v10)
    v16 = v10;
  else
    v16 = v15;
  v17 = memcmp(v9, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0)
      goto LABEL_18;
  }
  else if (v10 > v15)
  {
LABEL_18:
    v18 = *((char *)a3 + 23);
    if (v18 >= 0)
      v19 = a3;
    else
      v19 = *a3;
    if (v18 >= 0)
      v20 = *((unsigned __int8 *)a3 + 23);
    else
      v20 = (size_t)a3[1];
    if (v10 >= v20)
      v21 = v20;
    else
      v21 = v10;
    v22 = memcmp(v19, v9, v21);
    if (v22)
    {
      if ((v22 & 0x80000000) == 0)
      {
LABEL_29:
        v23 = *(const void **)(a1 + 16);
        v24 = a3[2];
        result = *(__n128 *)a3;
        *(_OWORD *)a1 = *(_OWORD *)a3;
        *(_QWORD *)(a1 + 16) = v24;
        *a3 = v13;
        a3[1] = v12;
        a3[2] = v23;
        return result;
      }
    }
    else if (v20 > v10)
    {
      goto LABEL_29;
    }
    v31 = *(_QWORD *)(a1 + 16);
    v32 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v32;
    *(_QWORD *)a2 = v13;
    *(_QWORD *)(a2 + 8) = v12;
    *(_QWORD *)(a2 + 16) = v31;
    v33 = *((char *)a3 + 23);
    if (v33 >= 0)
      v34 = a3;
    else
      v34 = *a3;
    if (v33 >= 0)
      v35 = *((unsigned __int8 *)a3 + 23);
    else
      v35 = (size_t)a3[1];
    if (v31 >= 0)
      v36 = (const void *)a2;
    else
      v36 = v13;
    if (v31 >= 0)
      v37 = HIBYTE(v31);
    else
      v37 = (size_t)v12;
    if (v37 >= v35)
      v38 = v35;
    else
      v38 = v37;
    v39 = memcmp(v34, v36, v38);
    if (v39)
    {
      if (v39 < 0)
        return result;
    }
    else if (v35 <= v37)
    {
      return result;
    }
    result = *(__n128 *)a3;
    *(_QWORD *)(a2 + 16) = a3[2];
    *(__n128 *)a2 = result;
    *a3 = v13;
    a3[1] = v12;
    a3[2] = (const void *)v31;
    return result;
  }
  v26 = *((char *)a3 + 23);
  if (v26 >= 0)
    v27 = a3;
  else
    v27 = *a3;
  if (v26 >= 0)
    v28 = *((unsigned __int8 *)a3 + 23);
  else
    v28 = (size_t)a3[1];
  if (v10 >= v28)
    v29 = v28;
  else
    v29 = v10;
  v30 = memcmp(v27, v9, v29);
  if (v30)
  {
    if (v30 < 0)
      return result;
  }
  else if (v28 <= v10)
  {
    return result;
  }
  v40 = *(const void **)(a2 + 16);
  v41 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v41;
  *a3 = v7;
  a3[1] = v8;
  a3[2] = v40;
  v42 = *(char *)(a2 + 23);
  if (v42 >= 0)
    v43 = (const void *)a2;
  else
    v43 = *(const void **)a2;
  if (v42 >= 0)
    v44 = *(unsigned __int8 *)(a2 + 23);
  else
    v44 = *(_QWORD *)(a2 + 8);
  v45 = *(char *)(a1 + 23);
  v46 = *(const void **)a1;
  v47 = *(_QWORD *)(a1 + 8);
  if (v45 >= 0)
    v48 = (const void *)a1;
  else
    v48 = *(const void **)a1;
  if (v45 >= 0)
    v49 = *(unsigned __int8 *)(a1 + 23);
  else
    v49 = *(_QWORD *)(a1 + 8);
  if (v49 >= v44)
    v50 = v44;
  else
    v50 = v49;
  v51 = memcmp(v43, v48, v50);
  if (!v51)
  {
    if (v44 <= v49)
      return result;
    goto LABEL_84;
  }
  if ((v51 & 0x80000000) == 0)
  {
LABEL_84:
    v52 = *(_QWORD *)(a1 + 16);
    v53 = *(_QWORD *)(a2 + 16);
    result = *(__n128 *)a2;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v53;
    *(_QWORD *)a2 = v46;
    *(_QWORD *)(a2 + 8) = v47;
    *(_QWORD *)(a2 + 16) = v52;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, const void **a2)
{
  const void **v2;
  unint64_t v4;
  _BOOL8 result;
  const void **v6;
  int v7;
  const void **v8;
  size_t v9;
  int v10;
  const void *v11;
  const void *v12;
  const void *v13;
  size_t v14;
  size_t v15;
  int v16;
  const void **v17;
  const void **v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  const void *v24;
  size_t v25;
  int v26;
  const void *v27;
  size_t v28;
  size_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  __int128 *v34;
  unint64_t v35;
  int v36;
  const void *v37;
  unint64_t v38;
  size_t v39;
  int v40;
  const void *v41;
  uint64_t v42;
  const void **v43;
  __int128 v44;
  const void *v45;

  v2 = a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 3;
      v7 = *((char *)a2 - 1);
      if (v7 >= 0)
        v8 = a2 - 3;
      else
        v8 = (const void **)*(a2 - 3);
      if (v7 >= 0)
        v9 = *((unsigned __int8 *)a2 - 1);
      else
        v9 = (size_t)*(a2 - 2);
      v10 = *(char *)(a1 + 23);
      v11 = *(const void **)a1;
      v12 = *(const void **)(a1 + 8);
      if (v10 >= 0)
        v13 = (const void *)a1;
      else
        v13 = *(const void **)a1;
      if (v10 >= 0)
        v14 = *(unsigned __int8 *)(a1 + 23);
      else
        v14 = *(_QWORD *)(a1 + 8);
      if (v14 >= v9)
        v15 = v9;
      else
        v15 = v14;
      v16 = memcmp(v8, v13, v15);
      if (v16)
      {
        if (v16 < 0)
          return 1;
      }
      else if (v9 <= v14)
      {
        return 1;
      }
      v41 = *(const void **)(a1 + 16);
      v42 = (uint64_t)*(v2 - 1);
      *(_OWORD *)a1 = *(_OWORD *)v6;
      *(_QWORD *)(a1 + 16) = v42;
      *(v2 - 3) = v11;
      *(v2 - 2) = v12;
      *(v2 - 1) = v41;
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 3);
      return 1;
    default:
      v17 = (const void **)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, (const void **)(a1 + 48));
      v18 = (const void **)(a1 + 72);
      if ((const void **)(a1 + 72) == v2)
        return 1;
      v19 = 0;
      v20 = 0;
      v43 = v2;
      break;
  }
  while (2)
  {
    v23 = *((char *)v18 + 23);
    if (v23 >= 0)
      v24 = v18;
    else
      v24 = *v18;
    if (v23 >= 0)
      v25 = *((unsigned __int8 *)v18 + 23);
    else
      v25 = (size_t)v18[1];
    v26 = *((char *)v17 + 23);
    if (v26 >= 0)
      v27 = v17;
    else
      v27 = *v17;
    if (v26 >= 0)
      v28 = *((unsigned __int8 *)v17 + 23);
    else
      v28 = (size_t)v17[1];
    if (v28 >= v25)
      v29 = v25;
    else
      v29 = v28;
    v30 = memcmp(v24, v27, v29);
    if (v30)
    {
      if (v30 < 0)
        goto LABEL_25;
    }
    else if (v25 <= v28)
    {
      goto LABEL_25;
    }
    v44 = *(_OWORD *)v18;
    v45 = v18[2];
    *(_OWORD *)v18 = *(_OWORD *)v17;
    v18[2] = v17[2];
    *((_BYTE *)v17 + 23) = 0;
    *(_BYTE *)v17 = 0;
    v21 = a1;
    if (v17 == (const void **)a1)
      goto LABEL_24;
    v31 = v19;
    while (1)
    {
      v32 = a1 + v31;
      v33 = (_OWORD *)(a1 + v31 + 24);
      v34 = SHIBYTE(v45) >= 0 ? &v44 : (__int128 *)v44;
      v35 = SHIBYTE(v45) >= 0 ? HIBYTE(v45) : *((_QWORD *)&v44 + 1);
      v36 = *(char *)(v32 + 47);
      v37 = v36 >= 0 ? (const void *)(a1 + v31 + 24) : *(const void **)(a1 + v31 + 24);
      v38 = v36 >= 0 ? *(unsigned __int8 *)(v32 + 47) : *(_QWORD *)(v32 + 32);
      v39 = v38 >= v35 ? v35 : v38;
      v40 = memcmp(v34, v37, v39);
      if (!v40)
        break;
      if (v40 < 0)
      {
        v21 = (uint64_t)v17;
        goto LABEL_23;
      }
LABEL_48:
      v17 -= 3;
      *(_OWORD *)(v32 + 48) = *v33;
      *(_QWORD *)(v32 + 64) = *(_QWORD *)(a1 + v31 + 40);
      *(_BYTE *)(v32 + 47) = 0;
      *(_BYTE *)v33 = 0;
      v31 -= 24;
      if (v31 == -48)
      {
        v21 = a1;
        goto LABEL_23;
      }
    }
    if (v35 > v38)
      goto LABEL_48;
    v21 = a1 + v31 + 48;
LABEL_23:
    v2 = v43;
LABEL_24:
    v22 = v44;
    *(_QWORD *)(v21 + 16) = v45;
    *(_OWORD *)v21 = v22;
    if (++v20 == 8)
      return v18 + 3 == v2;
LABEL_25:
    v17 = v18;
    v19 += 24;
    v18 += 3;
    if (v18 != v2)
      continue;
    return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  int v8;
  const void *v9;
  size_t v10;
  int v11;
  const void *v12;
  const void *v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;
  __n128 result;
  const void *v19;
  const void *v20;
  int v21;
  const void *v22;
  size_t v23;
  int v24;
  const void *v25;
  uint64_t v26;
  const void *v27;
  size_t v28;
  size_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const void *v34;
  size_t v35;
  int v36;
  const void *v37;
  uint64_t v38;
  const void *v39;
  size_t v40;
  size_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a2, (const void **)a3);
  v8 = *((char *)a4 + 23);
  if (v8 >= 0)
    v9 = a4;
  else
    v9 = *a4;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)a4 + 23);
  else
    v10 = (size_t)a4[1];
  v11 = *(char *)(a3 + 23);
  v12 = *(const void **)a3;
  v13 = *(const void **)(a3 + 8);
  if (v11 >= 0)
    v14 = (const void *)a3;
  else
    v14 = *(const void **)a3;
  if (v11 >= 0)
    v15 = *(unsigned __int8 *)(a3 + 23);
  else
    v15 = *(_QWORD *)(a3 + 8);
  if (v15 >= v10)
    v16 = v10;
  else
    v16 = v15;
  v17 = memcmp(v9, v14, v16);
  if (v17)
  {
    if (v17 < 0)
      return result;
  }
  else if (v10 <= v15)
  {
    return result;
  }
  v19 = *(const void **)(a3 + 16);
  v20 = a4[2];
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_QWORD *)(a3 + 16) = v20;
  *a4 = v12;
  a4[1] = v13;
  a4[2] = v19;
  v21 = *(char *)(a3 + 23);
  if (v21 >= 0)
    v22 = (const void *)a3;
  else
    v22 = *(const void **)a3;
  if (v21 >= 0)
    v23 = *(unsigned __int8 *)(a3 + 23);
  else
    v23 = *(_QWORD *)(a3 + 8);
  v24 = *(char *)(a2 + 23);
  v25 = *(const void **)a2;
  v26 = *(_QWORD *)(a2 + 8);
  if (v24 >= 0)
    v27 = (const void *)a2;
  else
    v27 = *(const void **)a2;
  if (v24 >= 0)
    v28 = *(unsigned __int8 *)(a2 + 23);
  else
    v28 = *(_QWORD *)(a2 + 8);
  if (v28 >= v23)
    v29 = v23;
  else
    v29 = v28;
  v30 = memcmp(v22, v27, v29);
  if (v30)
  {
    if (v30 < 0)
      return result;
  }
  else if (v23 <= v28)
  {
    return result;
  }
  v31 = *(_QWORD *)(a2 + 16);
  v32 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v32;
  *(_QWORD *)a3 = v25;
  *(_QWORD *)(a3 + 8) = v26;
  *(_QWORD *)(a3 + 16) = v31;
  v33 = *(char *)(a2 + 23);
  if (v33 >= 0)
    v34 = (const void *)a2;
  else
    v34 = *(const void **)a2;
  if (v33 >= 0)
    v35 = *(unsigned __int8 *)(a2 + 23);
  else
    v35 = *(_QWORD *)(a2 + 8);
  v36 = *(char *)(a1 + 23);
  v37 = *(const void **)a1;
  v38 = *(_QWORD *)(a1 + 8);
  if (v36 >= 0)
    v39 = (const void *)a1;
  else
    v39 = *(const void **)a1;
  if (v36 >= 0)
    v40 = *(unsigned __int8 *)(a1 + 23);
  else
    v40 = *(_QWORD *)(a1 + 8);
  if (v40 >= v35)
    v41 = v35;
  else
    v41 = v40;
  v42 = memcmp(v34, v39, v41);
  if (!v42)
  {
    if (v35 <= v40)
      return result;
LABEL_58:
    v43 = *(_QWORD *)(a1 + 16);
    v44 = *(_QWORD *)(a2 + 16);
    result = *(__n128 *)a2;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v44;
    *(_QWORD *)a2 = v37;
    *(_QWORD *)(a2 + 8) = v38;
    *(_QWORD *)(a2 + 16) = v43;
    return result;
  }
  if ((v42 & 0x80000000) == 0)
    goto LABEL_58;
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5)
{
  int v10;
  const void *v11;
  size_t v12;
  int v13;
  const void *v14;
  const void *v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  __n128 result;
  const void *v21;
  const void *v22;
  int v23;
  const void *v24;
  size_t v25;
  int v26;
  const void *v27;
  uint64_t v28;
  const void *v29;
  size_t v30;
  size_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  const void *v36;
  size_t v37;
  int v38;
  const void *v39;
  uint64_t v40;
  const void *v41;
  size_t v42;
  size_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  const void *v48;
  size_t v49;
  int v50;
  const void *v51;
  uint64_t v52;
  const void *v53;
  size_t v54;
  size_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a2, a3, (const void **)a4);
  v10 = *((char *)a5 + 23);
  if (v10 >= 0)
    v11 = a5;
  else
    v11 = *a5;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  v13 = *(char *)(a4 + 23);
  v14 = *(const void **)a4;
  v15 = *(const void **)(a4 + 8);
  if (v13 >= 0)
    v16 = (const void *)a4;
  else
    v16 = *(const void **)a4;
  if (v13 >= 0)
    v17 = *(unsigned __int8 *)(a4 + 23);
  else
    v17 = *(_QWORD *)(a4 + 8);
  if (v17 >= v12)
    v18 = v12;
  else
    v18 = v17;
  v19 = memcmp(v11, v16, v18);
  if (v19)
  {
    if (v19 < 0)
      return result;
  }
  else if (v12 <= v17)
  {
    return result;
  }
  v21 = *(const void **)(a4 + 16);
  v22 = a5[2];
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(_QWORD *)(a4 + 16) = v22;
  *a5 = v14;
  a5[1] = v15;
  a5[2] = v21;
  v23 = *(char *)(a4 + 23);
  if (v23 >= 0)
    v24 = (const void *)a4;
  else
    v24 = *(const void **)a4;
  if (v23 >= 0)
    v25 = *(unsigned __int8 *)(a4 + 23);
  else
    v25 = *(_QWORD *)(a4 + 8);
  v26 = *(char *)(a3 + 23);
  v27 = *(const void **)a3;
  v28 = *(_QWORD *)(a3 + 8);
  if (v26 >= 0)
    v29 = (const void *)a3;
  else
    v29 = *(const void **)a3;
  if (v26 >= 0)
    v30 = *(unsigned __int8 *)(a3 + 23);
  else
    v30 = *(_QWORD *)(a3 + 8);
  if (v30 >= v25)
    v31 = v25;
  else
    v31 = v30;
  v32 = memcmp(v24, v29, v31);
  if (v32)
  {
    if (v32 < 0)
      return result;
  }
  else if (v25 <= v30)
  {
    return result;
  }
  v33 = *(_QWORD *)(a3 + 16);
  v34 = *(_QWORD *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_QWORD *)(a3 + 16) = v34;
  *(_QWORD *)a4 = v27;
  *(_QWORD *)(a4 + 8) = v28;
  *(_QWORD *)(a4 + 16) = v33;
  v35 = *(char *)(a3 + 23);
  if (v35 >= 0)
    v36 = (const void *)a3;
  else
    v36 = *(const void **)a3;
  if (v35 >= 0)
    v37 = *(unsigned __int8 *)(a3 + 23);
  else
    v37 = *(_QWORD *)(a3 + 8);
  v38 = *(char *)(a2 + 23);
  v39 = *(const void **)a2;
  v40 = *(_QWORD *)(a2 + 8);
  if (v38 >= 0)
    v41 = (const void *)a2;
  else
    v41 = *(const void **)a2;
  if (v38 >= 0)
    v42 = *(unsigned __int8 *)(a2 + 23);
  else
    v42 = *(_QWORD *)(a2 + 8);
  if (v42 >= v37)
    v43 = v37;
  else
    v43 = v42;
  v44 = memcmp(v36, v41, v43);
  if (v44)
  {
    if (v44 < 0)
      return result;
  }
  else if (v37 <= v42)
  {
    return result;
  }
  v45 = *(_QWORD *)(a2 + 16);
  v46 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v46;
  *(_QWORD *)a3 = v39;
  *(_QWORD *)(a3 + 8) = v40;
  *(_QWORD *)(a3 + 16) = v45;
  v47 = *(char *)(a2 + 23);
  if (v47 >= 0)
    v48 = (const void *)a2;
  else
    v48 = *(const void **)a2;
  if (v47 >= 0)
    v49 = *(unsigned __int8 *)(a2 + 23);
  else
    v49 = *(_QWORD *)(a2 + 8);
  v50 = *(char *)(a1 + 23);
  v51 = *(const void **)a1;
  v52 = *(_QWORD *)(a1 + 8);
  if (v50 >= 0)
    v53 = (const void *)a1;
  else
    v53 = *(const void **)a1;
  if (v50 >= 0)
    v54 = *(unsigned __int8 *)(a1 + 23);
  else
    v54 = *(_QWORD *)(a1 + 8);
  if (v54 >= v49)
    v55 = v49;
  else
    v55 = v54;
  v56 = memcmp(v48, v53, v55);
  if (v56)
  {
    if (v56 < 0)
      return result;
  }
  else if (v49 <= v54)
  {
    return result;
  }
  v57 = *(_QWORD *)(a1 + 16);
  v58 = *(_QWORD *)(a2 + 16);
  result = *(__n128 *)a2;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v58;
  *(_QWORD *)a2 = v51;
  *(_QWORD *)(a2 + 8) = v52;
  *(_QWORD *)(a2 + 16) = v57;
  return result;
}

uint64_t *std::unique_ptr<std::__hash_node<std::string,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      v30 = v26 + v28;
      v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      v33 = v23 + v26 + v27 + a3;
      v34 = v33 + v24;
      v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v27 + a3 + v24 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v37 = v25 + v28 + v36;
      v38 = __ROR8__(v37, 44);
      v39 = v37 + v29;
      v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      v42 = *a2;
      v41 = a2 + 4;
      v43 = v42 - 0x4B6D499041670D8DLL * v24;
      v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v45 = *(v41 - 3);
        v46 = v43 + v34 + v30 + v45;
        v47 = v41[2];
        v48 = v41[3];
        v49 = v41[1];
        v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        v50 = v32 + v39;
        v51 = *(v41 - 2);
        v52 = *(v41 - 1);
        v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        v54 = v53 + v39 + v52;
        v55 = v53 + v45 + v51;
        v34 = v55 + v52;
        v56 = __ROR8__(v55, 44) + v53;
        v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        v35 = v56 + __ROR8__(v54 + v57, 21);
        v58 = v43 + v40 + *v41;
        v39 = v49 + v47 + v58 + v48;
        v40 = __ROR8__(v49 + v47 + v58, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        v32 = v57;
        v44 += 64;
      }
      while (v44);
      v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      v9 = a2[2];
      v8 = a2[3];
      v10 = __ROR8__(v7 + v8, 52);
      v11 = v7 + a2[1];
      v12 = __ROR8__(v11, 7);
      v13 = v11 + v9;
      v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    v18 = a2[1];
    v19 = 0xB492B66FBE98F273 * *a2;
    v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

void diag::Service::Internal::create(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, diag::Service::Internal **a4@<X8>)
{
  char *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  NSObject *v14;
  NSObject *initially_inactive;
  NSObject *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t v25;
  unint64_t *p_shared_weak_owners;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  diag::Service::Internal *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  void *aBlock;
  NSObject *object;
  _BYTE v47[16];
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;

  *a4 = (diag::Service::Internal *)0xAAAAAAAAAAAAAAAALL;
  a4[1] = (diag::Service::Internal *)0xAAAAAAAAAAAAAAAALL;
  v8 = (char *)operator new(0x1D0uLL);
  v10 = *a1;
  v9 = (std::__shared_weak_count *)a1[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (*(_QWORD *)a3)
  {
    v13 = _Block_copy(*(const void **)a3);
    v14 = *(NSObject **)(a3 + 8);
    aBlock = v13;
    object = v14;
    if (!v14)
      goto LABEL_7;
    goto LABEL_6;
  }
  v13 = 0;
  v14 = *(NSObject **)(a3 + 8);
  aBlock = 0;
  object = v14;
  if (v14)
LABEL_6:
    dispatch_retain(v14);
LABEL_7:
  *(_QWORD *)v8 = off_1E4A0EB38;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v47, "com.apple.telephony.abm", "trace.diag.svc");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v16 = dispatch_queue_create_with_target_V2("trace.diag.svc", initially_inactive, 0);
  dispatch_set_qos_class_floor(v16, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v16);
  *((_QWORD *)v8 + 9) = 0;
  *((_QWORD *)v8 + 10) = 0;
  *((_QWORD *)v8 + 11) = v16;
  if (v16)
  {
    dispatch_retain(v16);
    *((_QWORD *)v8 + 12) = 0;
    dispatch_release(v16);
  }
  else
  {
    *((_QWORD *)v8 + 12) = 0;
  }
  *(_QWORD *)v8 = off_1E4A0EC48;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v50);
  *((_QWORD *)v8 + 1) = &unk_1E4A06330;
  *((_QWORD *)v8 + 7) = v10;
  *((_QWORD *)v8 + 8) = v9;
  if (v9)
  {
    v17 = (unint64_t *)&v9->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v48);
  *(_QWORD *)v8 = off_1E4A0EC08;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v47);
  *(_QWORD *)v8 = off_1E4A0EB38;
  *((_DWORD *)v8 + 26) = a2;
  *(_WORD *)(v8 + 135) = 0;
  v8[112] = 0;
  *(_OWORD *)(v8 + 183) = 0u;
  *((_QWORD *)v8 + 31) = v10;
  *(_WORD *)(v8 + 159) = 0;
  *(_OWORD *)(v8 + 199) = 0u;
  *(_OWORD *)(v8 + 215) = 0u;
  *(_OWORD *)(v8 + 231) = 0u;
  v8[247] = 0;
  *((_QWORD *)v8 + 32) = v9;
  if (v9)
  {
    v19 = (unint64_t *)&v9->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *(_OWORD *)(v8 + 360) = 0uLL;
  *(_OWORD *)(v8 + 376) = 0uLL;
  *(_OWORD *)(v8 + 328) = 0uLL;
  *(_OWORD *)(v8 + 344) = 0uLL;
  *(_OWORD *)(v8 + 296) = 0uLL;
  *(_OWORD *)(v8 + 312) = 0uLL;
  *(_OWORD *)(v8 + 264) = 0uLL;
  *(_OWORD *)(v8 + 280) = 0uLL;
  if (v13)
    v21 = _Block_copy(v13);
  else
    v21 = 0;
  *((_QWORD *)v8 + 49) = v21;
  *((_QWORD *)v8 + 50) = v14;
  if (v14)
    dispatch_retain(v14);
  *(_WORD *)(v8 + 445) = 0;
  v8[447] = 0;
  v8[456] = 0;
  *((_DWORD *)v8 + 115) = 0;
  *((_QWORD *)v8 + 51) = 0;
  *((_QWORD *)v8 + 52) = 0;
  ctu::LoggerCommonBase::setLogLevel();
  *a4 = (diag::Service::Internal *)v8;
  a4[1] = (diag::Service::Internal *)0xAAAAAAAAAAAAAAAALL;
  v22 = (std::__shared_weak_count *)operator new(0x20uLL);
  v22->__shared_owners_ = 0;
  v23 = (unint64_t *)&v22->__shared_owners_;
  v22->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A0F338;
  v22->__shared_weak_owners_ = 0;
  v22[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  a4[1] = (diag::Service::Internal *)v22;
  v24 = (std::__shared_weak_count *)*((_QWORD *)v8 + 10);
  if (v24)
  {
    if (v24->__shared_owners_ != -1)
      goto LABEL_35;
    do
      v25 = __ldxr(v23);
    while (__stxr(v25 + 1, v23));
    p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
    do
      v27 = __ldxr(p_shared_weak_owners);
    while (__stxr(v27 + 1, p_shared_weak_owners));
    *((_QWORD *)v8 + 9) = v8;
    *((_QWORD *)v8 + 10) = v22;
    std::__shared_weak_count::__release_weak(v24);
  }
  else
  {
    do
      v28 = __ldxr(v23);
    while (__stxr(v28 + 1, v23));
    v29 = (unint64_t *)&v22->__shared_weak_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    *((_QWORD *)v8 + 9) = v8;
    *((_QWORD *)v8 + 10) = v22;
  }
  do
    v31 = __ldaxr(v23);
  while (__stlxr(v31 - 1, v23));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v32 = *a4;
    if (!*((_QWORD *)*a4 + 7))
      goto LABEL_49;
    goto LABEL_36;
  }
LABEL_35:
  v32 = *a4;
  if (!*((_QWORD *)*a4 + 7))
    goto LABEL_49;
LABEL_36:
  v33 = (std::__shared_weak_count *)*((_QWORD *)v32 + 10);
  if (!v33 || (v34 = *((_QWORD *)v32 + 9), (v35 = std::__shared_weak_count::lock(v33)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v36 = v35;
  v50 = v34;
  v51 = v35;
  ctu::LoggerCommonBase::getLogDomain((diag::Service::Internal *)((char *)v32 + 8));
  v48 = v34;
  v49 = v36;
  v50 = 0;
  v51 = 0;
  ctu::TrackedLogger::registerLoggerToServer();
  v37 = v49;
  if (v49)
  {
    v38 = (unint64_t *)&v49->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v51;
  if (v51)
  {
    v41 = (unint64_t *)&v51->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_49:
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v9)
  {
    v43 = (unint64_t *)&v9->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  diag::Service::Internal::init(*a4);
}

void sub_1A353B3DC()
{
  __break(1u);
}

void sub_1A353B440()
{
  __cxa_end_catch();
  JUMPOUT(0x1A353B57CLL);
}

void sub_1A353B450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void **a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void **v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  NSObject *v23;
  NSObject *v24;

  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v21);
  v23 = *(NSObject **)(v16 + 384);
  if (v23)
  {
    dispatch_group_leave(v23);
    v24 = *(NSObject **)(v16 + 384);
    if (v24)
      dispatch_release(v24);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v20);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v18);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](a9);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](a11);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](a12);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](a13);
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef(v19);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v17);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](a14);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](a15);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(a16);
  if (*(char *)(v16 + 207) < 0)
  {
    operator delete(*(void **)(v16 + 184));
    if ((*v22 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((*v22 & 0x80000000) == 0)
  {
LABEL_6:
    if (*(char *)(v16 + 159) < 0)
      goto LABEL_7;
    goto LABEL_11;
  }
  operator delete(*(void **)(v16 + 160));
  if (*(char *)(v16 + 159) < 0)
  {
LABEL_7:
    operator delete(*(void **)(v16 + 136));
    if ((*(char *)(v16 + 135) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_11:
  if ((*(char *)(v16 + 135) & 0x80000000) == 0)
  {
LABEL_13:
    ctu::SharedLoggable<diag::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable((_QWORD *)v16);
    JUMPOUT(0x1A353B580);
  }
LABEL_12:
  operator delete(*(void **)(v16 + 112));
  goto LABEL_13;
}

_QWORD *dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::callback(_QWORD *a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 8);
  *a1 = v4;
  a1[1] = v5;
  if (v5)
    dispatch_retain(v5);
  return a1;
}

void diag::Service::Internal::init(diag::Service::Internal *this)
{
  std::__shared_weak_count *v3;
  char *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  _QWORD *v18;
  _QWORD block[6];

  v5 = *((_QWORD *)this + 9);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  v4 = (char *)this + 72;
  if (!v3 || (v6 = std::__shared_weak_count::lock(v3)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 1174405120;
  v16[2] = ___ZN4diag7Service8Internal4initEv_block_invoke;
  v16[3] = &__block_descriptor_tmp_17_4;
  v16[4] = this;
  v16[5] = v5;
  v17 = v7;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v18 = v16;
  block[0] = v12;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4diag7Service8InternalEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
  block[3] = &__block_descriptor_tmp_18_2;
  block[4] = v4;
  block[5] = &v18;
  v14 = *((_QWORD *)this + 11);
  if (!*((_QWORD *)this + 12))
  {
    dispatch_sync(v14, block);
    v15 = v17;
    if (!v17)
      goto LABEL_14;
    goto LABEL_13;
  }
  dispatch_async_and_wait(v14, block);
  v15 = v17;
  if (v17)
LABEL_13:
    std::__shared_weak_count::__release_weak(v15);
LABEL_14:
  std::__shared_weak_count::__release_weak(v7);
}

_QWORD *diag::Service::Service(_QWORD *a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  NSObject *v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *aBlock;
  dispatch_object_t object;
  uint64_t v25;
  std::__shared_weak_count *v26;
  __int128 v27;

  *a1 = 0;
  a1[1] = 0;
  v7 = a2[1];
  v25 = *a2;
  v26 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(void **)a4;
  if (*(_QWORD *)a4)
    v10 = _Block_copy(v10);
  v11 = *(NSObject **)(a4 + 8);
  aBlock = v10;
  object = v11;
  if (v11)
    dispatch_retain(v11);
  diag::Service::Internal::create(&v25, a3, (uint64_t)&aBlock, (diag::Service::Internal **)&v27);
  v12 = v27;
  v27 = 0uLL;
  v13 = (std::__shared_weak_count *)a1[1];
  *(_OWORD *)a1 = v12;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  v19 = v26;
  if (!v26)
    return a1;
  v20 = (unint64_t *)&v26->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (v21)
    return a1;
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  return a1;
}

void sub_1A353B8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

void diag::Service::init(diag::Service::Internal **this)
{
  diag::Service::Internal::init(*this);
}

void diag::Service::~Service(diag::Service *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void diag::Service::start(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v5;
  void *v6;
  NSObject *v7;
  void *aBlock;
  dispatch_object_t object;

  v5 = *a1;
  v6 = *(void **)a2;
  if (*(_QWORD *)a2)
    v6 = _Block_copy(v6);
  v7 = *(NSObject **)(a2 + 8);
  aBlock = v6;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  diag::Service::Internal::start(v5, (uint64_t)&aBlock, a3);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void diag::Service::Internal::start(uint64_t a1, uint64_t a2, char a3)
{
  void *v5;
  uint64_t *v6;
  NSObject *v7;
  _QWORD v8[5];
  void *aBlock;
  dispatch_object_t object;
  char v11;

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v8[2] = ___ZN4diag7Service8Internal5startEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEb_block_invoke;
  v8[3] = &__block_descriptor_tmp_21_3;
  v8[4] = a1;
  v11 = a3;
  v5 = *(void **)a2;
  if (*(_QWORD *)a2)
    v5 = _Block_copy(v5);
  v6 = (uint64_t *)(a1 + 72);
  v7 = *(NSObject **)(a2 + 8);
  aBlock = v5;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped(v6, (uint64_t)v8);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void diag::Service::stop(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v5;
  void *v6;
  NSObject *v7;
  void *aBlock;
  dispatch_object_t object;

  v5 = *a1;
  v6 = *(void **)a2;
  if (*(_QWORD *)a2)
    v6 = _Block_copy(v6);
  v7 = *(NSObject **)(a2 + 8);
  aBlock = v6;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  diag::Service::Internal::stop(v5, (uint64_t)&aBlock, a3);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void sub_1A353BB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void diag::Service::Internal::stop(uint64_t a1, uint64_t a2, char a3)
{
  std::__shared_weak_count *v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  NSObject *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v20[6];
  std::__shared_weak_count *v21;
  void *aBlock;
  dispatch_object_t object;
  char v24;

  v7 = *(_QWORD *)(a1 + 72);
  v5 = *(std::__shared_weak_count **)(a1 + 80);
  v6 = (uint64_t *)(a1 + 72);
  if (!v5 || (v10 = std::__shared_weak_count::lock(v5)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 1174405120;
  v20[2] = ___ZN4diag7Service8Internal4stopEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEb_block_invoke;
  v20[3] = &__block_descriptor_tmp_54_4;
  v24 = a3;
  v20[4] = a1;
  v20[5] = v7;
  v21 = v10;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v14 = *(void **)a2;
  if (*(_QWORD *)a2)
    v14 = _Block_copy(v14);
  v15 = *(NSObject **)(a2 + 8);
  aBlock = v14;
  object = v15;
  if (v15)
    dispatch_retain(v15);
  ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped(v6, (uint64_t)v20);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  v16 = v21;
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void diag::Service::sleep(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  NSObject *v5;
  void *aBlock;
  dispatch_object_t object;

  v3 = *a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v5;
  if (v5)
    dispatch_retain(v5);
  diag::Service::Internal::sleep(v3, (uint64_t)&aBlock);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void diag::Service::Internal::sleep(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  NSObject *v6;
  _QWORD v7[5];
  void *aBlock;
  dispatch_object_t object;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN4diag7Service8Internal5sleepEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_64_0;
  v7[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = (uint64_t *)(a1 + 72);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped(v5, (uint64_t)v7);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void diag::Service::wake(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  NSObject *v5;
  void *aBlock;
  dispatch_object_t object;

  v3 = *a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v5;
  if (v5)
    dispatch_retain(v5);
  diag::Service::Internal::wake(v3, (uint64_t)&aBlock);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void diag::Service::Internal::wake(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  NSObject *v6;
  _QWORD v7[5];
  void *aBlock;
  dispatch_object_t object;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN4diag7Service8Internal4wakeEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_72_0;
  v7[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = (uint64_t *)(a1 + 72);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped(v5, (uint64_t)v7);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void diag::Service::snapshot(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v8;
  void *v9;
  NSObject *v10;
  void *aBlock;
  dispatch_object_t object;
  std::string v13;
  std::string v14;

  v8 = *a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v14 = *(std::string *)a2;
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      v13 = *(std::string *)a3;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
LABEL_6:
  v9 = *(void **)a5;
  if (*(_QWORD *)a5)
    v9 = _Block_copy(v9);
  v10 = *(NSObject **)(a5 + 8);
  aBlock = v9;
  object = v10;
  if (v10)
    dispatch_retain(v10);
  diag::Service::Internal::snapshot(v8, (uint64_t)&v14, (uint64_t)&v13, a4, (uint64_t)&aBlock);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_18:
    operator delete(v14.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_18;
}

void sub_1A353C02C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a23 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void diag::Service::Internal::snapshot(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  std::__shared_weak_count *v7;
  uint64_t *v8;
  uint64_t v9;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v17;
  NSObject *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD v25[6];
  std::__shared_weak_count *v26;
  std::string v27;
  std::string __p;
  void *aBlock;
  dispatch_object_t object;
  char v31;
  uint64_t v32;
  std::__shared_weak_count *v33;

  v9 = *(_QWORD *)(a1 + 72);
  v7 = *(std::__shared_weak_count **)(a1 + 80);
  v8 = (uint64_t *)(a1 + 72);
  v32 = v9;
  if (!v7 || (v14 = std::__shared_weak_count::lock(v7), (v33 = v14) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 1174405120;
  v25[2] = ___ZN4diag7Service8Internal8snapshotENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_bN8dispatch8callbackIU13block_pointerFvNS0_5StateES8_EEE_block_invoke;
  v25[3] = &__block_descriptor_tmp_83;
  v25[4] = a1;
  v25[5] = v9;
  v26 = v14;
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v27 = *(std::string *)a2;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  v31 = a4;
  v17 = *(void **)a5;
  if (*(_QWORD *)a5)
    v17 = _Block_copy(v17);
  v18 = *(NSObject **)(a5 + 8);
  aBlock = v17;
  object = v18;
  if (v18)
    dispatch_retain(v18);
  ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped(v8, (uint64_t)v25);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_21:
      v19 = v26;
      if (!v26)
        goto LABEL_29;
      goto LABEL_25;
    }
  }
  else if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(v27.__r_.__value_.__l.__data_);
  v19 = v26;
  if (!v26)
    goto LABEL_29;
LABEL_25:
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_29:
  v22 = v33;
  if (v33)
  {
    v23 = (unint64_t *)&v33->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1A353C288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  if (a21 < 0)
  {
    operator delete(__p);
    std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v21);
    std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v22 - 80);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v21);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v22 - 80);
  _Unwind_Resume(a1);
}

void diag::Service::reset(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  NSObject *v5;
  void *aBlock;
  dispatch_object_t object;

  v3 = *a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v5;
  if (v5)
    dispatch_retain(v5);
  diag::Service::Internal::reset(v3, (uint64_t)&aBlock);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void diag::Service::Internal::reset(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  NSObject *v6;
  _QWORD v7[5];
  void *aBlock;
  dispatch_object_t object;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN4diag7Service8Internal5resetEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_87_0;
  v7[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = (uint64_t *)(a1 + 72);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped(v5, (uint64_t)v7);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void diag::Service::abort(uint64_t *a1, char a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  NSObject *v7;
  void *aBlock;
  dispatch_object_t object;

  v5 = *a1;
  v6 = *(void **)a3;
  if (*(_QWORD *)a3)
    v6 = _Block_copy(v6);
  v7 = *(NSObject **)(a3 + 8);
  aBlock = v6;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  diag::Service::Internal::abort(v5, a2, (uint64_t)&aBlock);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void sub_1A353C478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void diag::Service::Internal::abort(uint64_t a1, char a2, uint64_t a3)
{
  NSObject *v6;
  void *v7;
  uint64_t *v8;
  NSObject *v9;
  _QWORD v10[5];
  void *aBlock;
  dispatch_object_t object;
  char v13;
  uint8_t buf[16];

  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v6, OS_LOG_TYPE_DEFAULT, "#I Abort diag service", buf, 2u);
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 232) + 96))(*(_QWORD *)(a1 + 232));
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1174405120;
  v10[2] = ___ZN4diag7Service8Internal5abortEbN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke;
  v10[3] = &__block_descriptor_tmp_88;
  v10[4] = a1;
  v13 = a2;
  v7 = *(void **)a3;
  if (*(_QWORD *)a3)
    v7 = _Block_copy(v7);
  v8 = (uint64_t *)(a1 + 72);
  v9 = *(NSObject **)(a3 + 8);
  aBlock = v7;
  object = v9;
  if (v9)
    dispatch_retain(v9);
  ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped(v8, (uint64_t)v10);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void diag::Service::updateConfig(uint64_t *a1, const void **a2)
{
  uint64_t v2;
  const void *v3;
  CFTypeRef cf;

  v2 = *a1;
  v3 = *a2;
  cf = v3;
  if (v3)
    CFRetain(v3);
  diag::Service::Internal::updateConfig(v2, &cf);
  if (cf)
    CFRelease(cf);
}

void diag::Service::Internal::updateConfig(uint64_t a1, const void **a2)
{
  uint64_t v3;
  const void *v4;
  NSObject *v5;
  CFTypeRef v6;
  _QWORD v7[5];
  CFTypeRef cf;
  _QWORD *v9;
  _QWORD block[6];

  v3 = MEMORY[0x1E0C809B0];
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN4diag7Service8Internal12updateConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_89_0;
  v4 = *a2;
  v7[4] = a1;
  cf = v4;
  if (v4)
    CFRetain(v4);
  v9 = v7;
  block[0] = v3;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4diag7Service8InternalEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
  block[3] = &__block_descriptor_tmp_18_2;
  block[4] = a1 + 72;
  block[5] = &v9;
  v5 = *(NSObject **)(a1 + 88);
  if (!*(_QWORD *)(a1 + 96))
  {
    dispatch_sync(v5, block);
    v6 = cf;
    if (!cf)
      return;
    goto LABEL_7;
  }
  dispatch_async_and_wait(v5, block);
  v6 = cf;
  if (cf)
LABEL_7:
    CFRelease(v6);
}

uint64_t diag::Service::getState(diag::Service *this)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  _QWORD block[6];

  v1 = *(_QWORD *)this;
  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = -1431655766;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK4diag7Service8Internal8getStateEv_block_invoke;
  v5[3] = &unk_1E4A0F308;
  v5[4] = &v6;
  v5[5] = v1;
  v10 = v5;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4diag7Service8InternalEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
  block[3] = &__block_descriptor_tmp_18_2;
  block[4] = v1 + 72;
  block[5] = &v10;
  v2 = *(NSObject **)(v1 + 88);
  if (*(_QWORD *)(v1 + 96))
    dispatch_async_and_wait(v2, block);
  else
    dispatch_sync(v2, block);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

const char *diag::Service::stateAsString(unsigned int a1)
{
  if (a1 > 4)
    return "Unknown";
  else
    return off_1E4A0F378[a1];
}

void diag::Service::pushInfo(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v4;
  std::string v5;
  uint64_t v6;
  int v7;
  std::string __p;

  v4 = *a1;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v5, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    v6 = v4;
    v7 = a2;
    if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v5 = *(std::string *)a3;
    v6 = v4;
    v7 = a2;
    if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      __p = v5;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&__p, v5.__r_.__value_.__l.__data_, v5.__r_.__value_.__l.__size_);
LABEL_6:
  ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped<diag::Service::Internal::pushInfo(abm::trace::TraceInfoState,std::string)::{lambda(void)#1}>((uint64_t *)(v4 + 72), (uint64_t)&v6);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v5.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_10;
}

void sub_1A353C874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void diag::Service::pushInfo(uint64_t *a1, uint64_t a2, void **a3)
{
  uint64_t v4;
  void *v5;
  xpc_object_t object;
  std::string v7;

  v4 = *a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v5 = *a3;
    object = v5;
    if (v5)
      goto LABEL_3;
  }
  else
  {
    v7 = *(std::string *)a2;
    v5 = *a3;
    object = v5;
    if (v5)
    {
LABEL_3:
      xpc_retain(v5);
      goto LABEL_6;
    }
  }
  object = xpc_null_create();
LABEL_6:
  diag::Service::Internal::pushInfo(v4, (uint64_t)&v7, &object);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
}

void sub_1A353C948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void diag::Service::Internal::pushInfo(uint64_t a1, uint64_t a2, void **a3)
{
  void *v5;
  uint64_t v6;
  std::string __p;
  xpc_object_t object;

  v6 = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v5 = *a3;
    object = v5;
    if (v5)
      goto LABEL_3;
  }
  else
  {
    __p = *(std::string *)a2;
    v5 = *a3;
    object = v5;
    if (v5)
    {
LABEL_3:
      xpc_retain(v5);
      goto LABEL_6;
    }
  }
  object = xpc_null_create();
LABEL_6:
  ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped<diag::Service::Internal::pushInfo(std::string,xpc::dict)::{lambda(void)#1}>((uint64_t *)(a1 + 72), (uint64_t)&v6);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void diag::Service::setStallHandler(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  NSObject *v7;
  void *aBlock;
  dispatch_object_t object;

  v5 = *a1;
  v6 = *(void **)a3;
  if (*(_QWORD *)a3)
    v6 = _Block_copy(v6);
  v7 = *(NSObject **)(a3 + 8);
  aBlock = v6;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  diag::Service::Internal::setStallHandler(v5, a2, (uint64_t)&aBlock);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void diag::Service::Internal::setStallHandler(uint64_t a1, int a2, uint64_t a3)
{
  void *v5;
  uint64_t *v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  void *aBlock;
  dispatch_object_t object;

  v8 = a1;
  v9 = a2;
  v5 = *(void **)a3;
  if (*(_QWORD *)a3)
    v5 = _Block_copy(v5);
  v6 = (uint64_t *)(a1 + 72);
  v7 = *(NSObject **)(a3 + 8);
  aBlock = v5;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped<diag::Service::Internal::setStallHandler(abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>)::{lambda(void)#1}>(v6, (uint64_t)&v8);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

_QWORD *ctu::SharedLoggable<diag::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E4A0EC48;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E4A0EC48;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void diag::Service::Internal::~Internal(diag::Service::Internal *this)
{
  void *v1;

  diag::Service::Internal::~Internal(this);
  operator delete(v1);
}

{
  const void *v2;
  const void *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  BasebandTransport *v7;
  BasebandTransport *v8;
  BasebandTransport *v9;
  NSObject *v10;
  const void *v11;
  NSObject *v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  const void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  const void *v45;
  NSObject *v46;
  NSObject *v47;
  std::__shared_weak_count *v48;
  _QWORD *v49;
  _QWORD *v50;
  BOOL v51;

  *(_QWORD *)this = off_1E4A0EB38;
  v2 = (const void *)*((_QWORD *)this + 51);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 52);
  if (v3)
    CFRelease(v3);
  v4 = *((_QWORD *)this + 27);
  if (v4)
  {
    v5 = *(_QWORD **)(v4 + 16);
    v6 = (_QWORD *)(v4 + 24);
    if (v5 != (_QWORD *)(v4 + 24))
    {
      do
      {
        diag::DIAGReader::stop((diag::DIAGReader *)v5[5]);
        v49 = (_QWORD *)v5[1];
        if (v49)
        {
          do
          {
            v50 = v49;
            v49 = (_QWORD *)*v49;
          }
          while (v49);
        }
        else
        {
          do
          {
            v50 = (_QWORD *)v5[2];
            v51 = *v50 == (_QWORD)v5;
            v5 = v50;
          }
          while (!v51);
        }
        v5 = v50;
      }
      while (v50 != v6);
    }
  }
  v7 = (BasebandTransport *)*((_QWORD *)this + 36);
  if (v7)
    BasebandTransport::close(v7);
  v8 = (BasebandTransport *)*((_QWORD *)this + 38);
  if (v8)
    BasebandTransport::close(v8);
  v9 = (BasebandTransport *)*((_QWORD *)this + 40);
  if (v9)
    BasebandTransport::close(v9);
  v10 = *((_QWORD *)this + 50);
  if (v10)
    dispatch_release(v10);
  v11 = (const void *)*((_QWORD *)this + 49);
  if (v11)
    _Block_release(v11);
  v12 = *((_QWORD *)this + 48);
  if (v12)
  {
    dispatch_group_leave(v12);
    v13 = *((_QWORD *)this + 48);
    if (v13)
      dispatch_release(v13);
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 43);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (std::__shared_weak_count *)*((_QWORD *)this + 41);
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      v35 = (const void *)*((_QWORD *)this + 33);
      if (!v35)
        goto LABEL_56;
      goto LABEL_55;
    }
  }
  v35 = (const void *)*((_QWORD *)this + 33);
  if (v35)
LABEL_55:
    CFRelease(v35);
LABEL_56:
  v36 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
  if (!v42)
    goto LABEL_70;
  v43 = (unint64_t *)&v42->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (v44)
  {
LABEL_70:
    v45 = (const void *)*((_QWORD *)this + 26);
    if (!v45)
      goto LABEL_72;
    goto LABEL_71;
  }
  ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
  std::__shared_weak_count::__release_weak(v42);
  v45 = (const void *)*((_QWORD *)this + 26);
  if (v45)
LABEL_71:
    CFRelease(v45);
LABEL_72:
  if (*((char *)this + 207) < 0)
  {
    operator delete(*((void **)this + 23));
    if ((*((char *)this + 183) & 0x80000000) == 0)
    {
LABEL_74:
      if ((*((char *)this + 159) & 0x80000000) == 0)
        goto LABEL_75;
LABEL_92:
      operator delete(*((void **)this + 17));
      if ((*((char *)this + 135) & 0x80000000) == 0)
        goto LABEL_76;
      goto LABEL_93;
    }
  }
  else if ((*((char *)this + 183) & 0x80000000) == 0)
  {
    goto LABEL_74;
  }
  operator delete(*((void **)this + 20));
  if (*((char *)this + 159) < 0)
    goto LABEL_92;
LABEL_75:
  if ((*((char *)this + 135) & 0x80000000) == 0)
    goto LABEL_76;
LABEL_93:
  operator delete(*((void **)this + 14));
LABEL_76:
  *(_QWORD *)this = off_1E4A0EC48;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v46 = *((_QWORD *)this + 12);
  if (v46)
    dispatch_release(v46);
  v47 = *((_QWORD *)this + 11);
  if (v47)
    dispatch_release(v47);
  v48 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v48)
    std::__shared_weak_count::__release_weak(v48);
}

uint64_t ctu::Loggable<diag::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<diag::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 14;
  strcpy(a1, "trace.diag.svc");
}

uint64_t ctu::Loggable<diag::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

void ctu::SharedLoggable<diag::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E4A0EC48;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

_QWORD *ctu::Loggable<diag::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E4A0EC48;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<diag::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E4A0EC48;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ___ZN4diag7Service8Internal4initEv_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t Controller;
  const void *v5;
  CFTypeRef *v6;
  CFTypeRef v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  CommandDriverFactory *v16;
  uint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  capabilities::diag *v31;
  NSObject *v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  capabilities::diag *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  capabilities::abs *v44;
  int v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  CFTypeRef v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  __int128 v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  std::__shared_weak_count *v93;
  unint64_t *p_shared_owners;
  unint64_t v95;
  NSObject *v96;
  __int128 v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  char *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  NSObject *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  __int128 v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  CFTypeRef v133;
  unint64_t *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  __int128 v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t *v156;
  std::__shared_weak_count *v157;
  NSObject *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  const void *v165;
  int v166;
  CFTypeRef v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  int v174;
  CFTypeRef cf;
  uint64_t v176;
  std::__shared_weak_count *v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  int v182;
  CFTypeRef v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  uint64_t v188;
  std::__shared_weak_count *v189;
  int v190;
  CFTypeRef v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  _QWORD aBlock[6];
  std::__shared_weak_count *v199;
  capabilities::diag *v200;
  dispatch_object_t v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  __int128 v204;
  uint8_t buf[56];
  NSObject *v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  __int128 v209;

  v2 = a1[4];
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEFAULT, "#I Init", buf, 2u);
  }
  *(_DWORD *)(v2 + 460) = 0;
  if (!*(_QWORD *)(v2 + 288))
  {
    v93 = *(std::__shared_weak_count **)(v2 + 256);
    v207 = *(_QWORD *)(v2 + 248);
    v208 = v93;
    if (v93)
    {
      p_shared_owners = (unint64_t *)&v93->__shared_owners_;
      do
        v95 = __ldxr(p_shared_owners);
      while (__stxr(v95 + 1, p_shared_owners));
    }
    v96 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
    v206 = dispatch_queue_create("DIAG.reader.queue", v96);
    BasebandTransport::create((capabilities::radio *)&v207, &v206, (uint64_t)buf);
    v97 = *(_OWORD *)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v98 = *(std::__shared_weak_count **)(v2 + 296);
    *(_OWORD *)(v2 + 288) = v97;
    if (v98)
    {
      v99 = (unint64_t *)&v98->__shared_owners_;
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    v101 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v102 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    if (v206)
      dispatch_release(v206);
    v104 = v208;
    if (v208)
    {
      v105 = (unint64_t *)&v208->__shared_owners_;
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
  }
  if (!*(_QWORD *)(v2 + 272))
  {
    v107 = (char *)operator new(0x70uLL);
    *((_QWORD *)v107 + 2) = 0;
    *(_QWORD *)v107 = &unk_1E4A09568;
    *((_QWORD *)v107 + 1) = 0;
    *(_OWORD *)(v107 + 40) = 0u;
    *(_OWORD *)(v107 + 56) = 0u;
    *(_OWORD *)(v107 + 72) = 0u;
    *(_OWORD *)(v107 + 88) = 0u;
    *((_QWORD *)v107 + 13) = 0;
    *(_OWORD *)(v107 + 24) = 0u;
    v108 = *(std::__shared_weak_count **)(v2 + 280);
    *(_QWORD *)(v2 + 272) = v107 + 24;
    *(_QWORD *)(v2 + 280) = v107;
    if (v108)
    {
      v109 = (unint64_t *)&v108->__shared_owners_;
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
        std::__shared_weak_count::__release_weak(v108);
      }
    }
  }
  Controller = TelephonyBasebandCreateController();
  v5 = *(const void **)(v2 + 264);
  *(_QWORD *)(v2 + 264) = Controller;
  if (v5)
    CFRelease(v5);
  v6 = (CFTypeRef *)(v2 + 264);
  memset(&buf[8], 0, 40);
  *(_QWORD *)buf = 0xAAAAAAAA00000005;
  if (&buf[8] != (uint8_t *)(v2 + 264))
  {
    v7 = *v6;
    if (*v6)
    {
      CFRetain(*v6);
      v8 = *(const void **)&buf[8];
      *(_QWORD *)&buf[8] = v7;
      if (v8)
        CFRelease(v8);
    }
  }
  v10 = *(_QWORD *)(v2 + 288);
  v9 = *(_QWORD *)(v2 + 296);
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *(std::__shared_weak_count **)&buf[24];
  *(_QWORD *)&buf[16] = v10;
  *(_QWORD *)&buf[24] = v9;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *(_DWORD *)buf = *(_DWORD *)(v2 + 104);
  v16 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v17 = off_1ED114670;
  if (!off_1ED114670)
  {
    CommandDriverFactory::create_default_global(v16);
    v18 = v209;
    v209 = 0uLL;
    v19 = (std::__shared_weak_count *)*(&off_1ED114670 + 1);
    off_1ED114670 = v18;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v209 + 1);
    if (*((_QWORD *)&v209 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v209 + 1) + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v17 = off_1ED114670;
  }
  v202 = v17;
  v203 = (std::__shared_weak_count *)*(&off_1ED114670 + 1);
  if (*(&off_1ED114670 + 1))
  {
    v25 = (unint64_t *)(*(&off_1ED114670 + 1) + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4diag7Service8Internal4initEv_block_invoke_14;
  aBlock[3] = &__block_descriptor_tmp_25;
  v28 = a1[5];
  v27 = (std::__shared_weak_count *)a1[6];
  aBlock[4] = v2;
  aBlock[5] = v28;
  v199 = v27;
  if (v27)
  {
    p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
    do
      v30 = __ldxr(p_shared_weak_owners);
    while (__stxr(v30 + 1, p_shared_weak_owners));
  }
  v31 = (capabilities::diag *)_Block_copy(aBlock);
  v32 = *(NSObject **)(v2 + 88);
  if (v32)
    dispatch_retain(*(dispatch_object_t *)(v2 + 88));
  v200 = v31;
  v201 = v32;
  (*(void (**)(__int128 *__return_ptr, uint64_t, capabilities::diag **))(*(_QWORD *)v17 + 128))(&v204, v17, &v200);
  v33 = v204;
  v204 = 0uLL;
  v34 = *(std::__shared_weak_count **)&buf[40];
  *(_OWORD *)&buf[32] = v33;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v204 + 1);
  if (*((_QWORD *)&v204 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v201)
    dispatch_release(v201);
  v40 = v200;
  if (v200)
    _Block_release(v200);
  v41 = v203;
  if (v203)
  {
    v42 = (unint64_t *)&v203->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = (capabilities::abs *)capabilities::diag::preferredInterface(v40);
  v45 = *(_DWORD *)(v2 + 104);
  if ((v45 - 1) < 3)
  {
    if (capabilities::abs::supportsBBUSBMux(v44))
    {
      v46 = *(_QWORD *)(v2 + 248);
      v47 = *(std::__shared_weak_count **)(v2 + 256);
      v180 = v46;
      v181 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      v174 = *(_DWORD *)buf;
      cf = *(CFTypeRef *)&buf[8];
      if (*(_QWORD *)&buf[8])
        CFRetain(*(CFTypeRef *)&buf[8]);
      v176 = *(_QWORD *)&buf[16];
      v177 = *(std::__shared_weak_count **)&buf[24];
      if (*(_QWORD *)&buf[24])
      {
        v50 = (unint64_t *)(*(_QWORD *)&buf[24] + 8);
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
      }
      v178 = *(_QWORD *)&buf[32];
      v179 = *(std::__shared_weak_count **)&buf[40];
      if (*(_QWORD *)&buf[40])
      {
        v52 = (unint64_t *)(*(_QWORD *)&buf[40] + 8);
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
      }
      diag::DIAGConfigurer::create<unsigned int>((uint64_t *)&v209, v46, v47, (uint64_t)&v174, v2 + 424);
      v54 = v209;
      v209 = 0uLL;
      v55 = *(std::__shared_weak_count **)(v2 + 240);
      *(_OWORD *)(v2 + 232) = v54;
      if (v55)
      {
        v56 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v58 = (std::__shared_weak_count *)*((_QWORD *)&v209 + 1);
      if (*((_QWORD *)&v209 + 1))
      {
        v59 = (unint64_t *)(*((_QWORD *)&v209 + 1) + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v61 = v179;
      if (!v179)
        goto LABEL_85;
      v62 = (unint64_t *)&v179->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
        v64 = v177;
        if (!v177)
          goto LABEL_89;
      }
      else
      {
LABEL_85:
        v64 = v177;
        if (!v177)
          goto LABEL_89;
      }
      v65 = (unint64_t *)&v64->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
        v67 = cf;
        if (!cf)
          goto LABEL_91;
        goto LABEL_90;
      }
LABEL_89:
      v67 = cf;
      if (!cf)
      {
LABEL_91:
        v68 = v181;
        if (!v181)
          goto LABEL_239;
        v69 = (unint64_t *)&v181->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
LABEL_235:
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
          v157 = v199;
          if (!v199)
            goto LABEL_241;
          goto LABEL_240;
        }
        goto LABEL_239;
      }
LABEL_90:
      CFRelease(v67);
      goto LABEL_91;
    }
    v111 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v209) = 0;
      _os_log_impl(&dword_1A343C000, v111, OS_LOG_TYPE_DEFAULT, "#I configure DIAG PCI for SW Bypass mode", (uint8_t *)&v209, 2u);
    }
    v112 = *(_QWORD *)(v2 + 248);
    v113 = *(std::__shared_weak_count **)(v2 + 256);
    v172 = v112;
    v173 = v113;
    if (v113)
    {
      v114 = (unint64_t *)&v113->__shared_owners_;
      do
        v115 = __ldxr(v114);
      while (__stxr(v115 + 1, v114));
    }
    v166 = *(_DWORD *)buf;
    v167 = *(CFTypeRef *)&buf[8];
    if (*(_QWORD *)&buf[8])
      CFRetain(*(CFTypeRef *)&buf[8]);
    v168 = *(_QWORD *)&buf[16];
    v169 = *(std::__shared_weak_count **)&buf[24];
    if (*(_QWORD *)&buf[24])
    {
      v116 = (unint64_t *)(*(_QWORD *)&buf[24] + 8);
      do
        v117 = __ldxr(v116);
      while (__stxr(v117 + 1, v116));
    }
    v170 = *(_QWORD *)&buf[32];
    v171 = *(std::__shared_weak_count **)&buf[40];
    if (*(_QWORD *)&buf[40])
    {
      v118 = (unint64_t *)(*(_QWORD *)&buf[40] + 8);
      do
        v119 = __ldxr(v118);
      while (__stxr(v119 + 1, v118));
    }
    diag::DIAGConfigurer::create<unsigned long>((uint64_t *)&v209, v112, v113, (uint64_t)&v166, v2 + 424);
    v120 = v209;
    v209 = 0uLL;
    v121 = *(std::__shared_weak_count **)(v2 + 240);
    *(_OWORD *)(v2 + 232) = v120;
    if (v121)
    {
      v122 = (unint64_t *)&v121->__shared_owners_;
      do
        v123 = __ldaxr(v122);
      while (__stlxr(v123 - 1, v122));
      if (!v123)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
    v124 = (std::__shared_weak_count *)*((_QWORD *)&v209 + 1);
    if (*((_QWORD *)&v209 + 1))
    {
      v125 = (unint64_t *)(*((_QWORD *)&v209 + 1) + 8);
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 - 1, v125));
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
        std::__shared_weak_count::__release_weak(v124);
      }
    }
    v127 = v171;
    if (!v171)
      goto LABEL_189;
    v128 = (unint64_t *)&v171->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
      v130 = v169;
      if (!v169)
        goto LABEL_193;
    }
    else
    {
LABEL_189:
      v130 = v169;
      if (!v169)
        goto LABEL_193;
    }
    v131 = (unint64_t *)&v130->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
      v133 = v167;
      if (!v167)
        goto LABEL_195;
      goto LABEL_194;
    }
LABEL_193:
    v133 = v167;
    if (!v167)
    {
LABEL_195:
      v68 = v173;
      if (!v173)
        goto LABEL_239;
      v134 = (unint64_t *)&v173->__shared_owners_;
      do
        v70 = __ldaxr(v134);
      while (__stlxr(v70 - 1, v134));
      goto LABEL_235;
    }
LABEL_194:
    CFRelease(v133);
    goto LABEL_195;
  }
  if (v45 && v45 != 4)
    goto LABEL_239;
  switch((_DWORD)v44)
  {
    case 2:
      goto LABEL_100;
    case 8:
      v135 = *(_QWORD *)(v2 + 248);
      v136 = *(std::__shared_weak_count **)(v2 + 256);
      v188 = v135;
      v189 = v136;
      if (v136)
      {
        v137 = (unint64_t *)&v136->__shared_owners_;
        do
          v138 = __ldxr(v137);
        while (__stxr(v138 + 1, v137));
      }
      v182 = *(_DWORD *)buf;
      v183 = *(CFTypeRef *)&buf[8];
      if (*(_QWORD *)&buf[8])
        CFRetain(*(CFTypeRef *)&buf[8]);
      v184 = *(_QWORD *)&buf[16];
      v185 = *(std::__shared_weak_count **)&buf[24];
      if (*(_QWORD *)&buf[24])
      {
        v139 = (unint64_t *)(*(_QWORD *)&buf[24] + 8);
        do
          v140 = __ldxr(v139);
        while (__stxr(v140 + 1, v139));
      }
      v186 = *(_QWORD *)&buf[32];
      v187 = *(std::__shared_weak_count **)&buf[40];
      if (*(_QWORD *)&buf[40])
      {
        v141 = (unint64_t *)(*(_QWORD *)&buf[40] + 8);
        do
          v142 = __ldxr(v141);
        while (__stxr(v142 + 1, v141));
      }
      diag::DIAGConfigurer::create<unsigned long>((uint64_t *)&v209, v135, v136, (uint64_t)&v182, v2 + 424);
      v143 = v209;
      v209 = 0uLL;
      v144 = *(std::__shared_weak_count **)(v2 + 240);
      *(_OWORD *)(v2 + 232) = v143;
      if (v144)
      {
        v145 = (unint64_t *)&v144->__shared_owners_;
        do
          v146 = __ldaxr(v145);
        while (__stlxr(v146 - 1, v145));
        if (!v146)
        {
          ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
          std::__shared_weak_count::__release_weak(v144);
        }
      }
      v147 = (std::__shared_weak_count *)*((_QWORD *)&v209 + 1);
      if (*((_QWORD *)&v209 + 1))
      {
        v148 = (unint64_t *)(*((_QWORD *)&v209 + 1) + 8);
        do
          v149 = __ldaxr(v148);
        while (__stlxr(v149 - 1, v148));
        if (!v149)
        {
          ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
          std::__shared_weak_count::__release_weak(v147);
        }
      }
      v150 = v187;
      if (v187)
      {
        v151 = (unint64_t *)&v187->__shared_owners_;
        do
          v152 = __ldaxr(v151);
        while (__stlxr(v152 - 1, v151));
        if (!v152)
        {
          ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
          std::__shared_weak_count::__release_weak(v150);
        }
      }
      v153 = v185;
      if (v185)
      {
        v154 = (unint64_t *)&v185->__shared_owners_;
        do
          v155 = __ldaxr(v154);
        while (__stlxr(v155 - 1, v154));
        if (!v155)
        {
          ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
          std::__shared_weak_count::__release_weak(v153);
        }
      }
      if (v183)
        CFRelease(v183);
      v68 = v189;
      if (!v189)
        goto LABEL_239;
      v156 = (unint64_t *)&v189->__shared_owners_;
      do
        v70 = __ldaxr(v156);
      while (__stlxr(v70 - 1, v156));
      goto LABEL_235;
    case 4:
LABEL_100:
      v71 = *(_QWORD *)(v2 + 248);
      v72 = *(std::__shared_weak_count **)(v2 + 256);
      v196 = v71;
      v197 = v72;
      if (v72)
      {
        v73 = (unint64_t *)&v72->__shared_owners_;
        do
          v74 = __ldxr(v73);
        while (__stxr(v74 + 1, v73));
      }
      v190 = *(_DWORD *)buf;
      v191 = *(CFTypeRef *)&buf[8];
      if (*(_QWORD *)&buf[8])
        CFRetain(*(CFTypeRef *)&buf[8]);
      v192 = *(_QWORD *)&buf[16];
      v193 = *(std::__shared_weak_count **)&buf[24];
      if (*(_QWORD *)&buf[24])
      {
        v75 = (unint64_t *)(*(_QWORD *)&buf[24] + 8);
        do
          v76 = __ldxr(v75);
        while (__stxr(v76 + 1, v75));
      }
      v194 = *(_QWORD *)&buf[32];
      v195 = *(std::__shared_weak_count **)&buf[40];
      if (*(_QWORD *)&buf[40])
      {
        v77 = (unint64_t *)(*(_QWORD *)&buf[40] + 8);
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }
      diag::DIAGConfigurer::create<unsigned int>((uint64_t *)&v209, v71, v72, (uint64_t)&v190, v2 + 424);
      v79 = v209;
      v209 = 0uLL;
      v80 = *(std::__shared_weak_count **)(v2 + 240);
      *(_OWORD *)(v2 + 232) = v79;
      if (v80)
      {
        v81 = (unint64_t *)&v80->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v83 = (std::__shared_weak_count *)*((_QWORD *)&v209 + 1);
      if (*((_QWORD *)&v209 + 1))
      {
        v84 = (unint64_t *)(*((_QWORD *)&v209 + 1) + 8);
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v86 = v195;
      if (v195)
      {
        v87 = (unint64_t *)&v195->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      v89 = v193;
      if (v193)
      {
        v90 = (unint64_t *)&v193->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      if (v191)
        CFRelease(v191);
      v68 = v197;
      if (!v197)
        goto LABEL_239;
      v92 = (unint64_t *)&v197->__shared_owners_;
      do
        v70 = __ldaxr(v92);
      while (__stlxr(v70 - 1, v92));
      goto LABEL_235;
  }
  v158 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v158, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v209) = 0;
    _os_log_error_impl(&dword_1A343C000, v158, OS_LOG_TYPE_ERROR, "Failed to get preferred interface!", (uint8_t *)&v209, 2u);
    v157 = v199;
    if (!v199)
      goto LABEL_241;
    goto LABEL_240;
  }
LABEL_239:
  v157 = v199;
  if (v199)
LABEL_240:
    std::__shared_weak_count::__release_weak(v157);
LABEL_241:
  v159 = *(std::__shared_weak_count **)&buf[40];
  if (!*(_QWORD *)&buf[40])
    goto LABEL_245;
  v160 = (unint64_t *)(*(_QWORD *)&buf[40] + 8);
  do
    v161 = __ldaxr(v160);
  while (__stlxr(v161 - 1, v160));
  if (!v161)
  {
    ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
    std::__shared_weak_count::__release_weak(v159);
    v162 = *(std::__shared_weak_count **)&buf[24];
    if (!*(_QWORD *)&buf[24])
      goto LABEL_249;
  }
  else
  {
LABEL_245:
    v162 = *(std::__shared_weak_count **)&buf[24];
    if (!*(_QWORD *)&buf[24])
      goto LABEL_249;
  }
  v163 = (unint64_t *)&v162->__shared_owners_;
  do
    v164 = __ldaxr(v163);
  while (__stlxr(v164 - 1, v163));
  if (v164)
  {
LABEL_249:
    v165 = *(const void **)&buf[8];
    if (!*(_QWORD *)&buf[8])
      return;
    goto LABEL_250;
  }
  ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
  std::__shared_weak_count::__release_weak(v162);
  v165 = *(const void **)&buf[8];
  if (*(_QWORD *)&buf[8])
LABEL_250:
    CFRelease(v165);
}

void sub_1A353DE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  std::__shared_weak_count *v34;

  diag::DIAGConfigurer::Parameters_t::~Parameters_t((diag::DIAGConfigurer::Parameters_t *)&a26);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  v34 = *(std::__shared_weak_count **)(v32 - 200);
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
  diag::DIAGConfigurer::Parameters_t::~Parameters_t((diag::DIAGConfigurer::Parameters_t *)(v32 - 144));
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal4initEv_block_invoke_14(_QWORD *a1, uint64_t a2, NSObject **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  NSObject *v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      if (a1[5] && (*(_DWORD *)(v6 + 460) | 2) == 3)
      {
        v9 = *a3;
        if (v9)
        {
          dispatch_retain(v9);
          dispatch_group_enter(v9);
        }
        v10 = *(NSObject **)(v6 + 384);
        *(_QWORD *)(v6 + 384) = v9;
        if (v10)
        {
          dispatch_group_leave(v10);
          dispatch_release(v10);
        }
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_40c47_ZTSNSt3__18weak_ptrIN4diag7Service8InternalEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c47_ZTSNSt3__18weak_ptrIN4diag7Service8InternalEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t dispatch::callback<void({block_pointer})(diag::CommandDriver::Event,dispatch::group_session)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t diag::DIAGConfigurer::create<unsigned int>(uint64_t *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5)
{
  void *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  const void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  CFTypeRef v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  int v43;
  CFTypeRef cf;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  unint64_t v52;

  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  v10 = operator new(0xB8uLL);
  v49 = a2;
  v50 = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v43 = *(_DWORD *)a4;
  v13 = *(const void **)(a4 + 8);
  cf = v13;
  if (v13)
    CFRetain(v13);
  v14 = *(std::__shared_weak_count **)(a4 + 24);
  v45 = *(_QWORD *)(a4 + 16);
  v46 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *(std::__shared_weak_count **)(a4 + 40);
  v47 = *(_QWORD *)(a4 + 32);
  v48 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  diag::DIAGConfigurerUSB::DIAGConfigurerUSB((uint64_t)v10, &v49, &v43, a5);
  v51 = (uint64_t)v10;
  v52 = 0xAAAAAAAAAAAAAAAALL;
  v20 = (std::__shared_weak_count *)operator new(0x20uLL);
  v20->__shared_owners_ = 0;
  v21 = (unint64_t *)&v20->__shared_owners_;
  v20->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A0ED08;
  v20->__shared_weak_owners_ = 0;
  v20[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
  v52 = (unint64_t)v20;
  v22 = (std::__shared_weak_count *)*((_QWORD *)v10 + 10);
  if (v22)
  {
    if (v22->__shared_owners_ != -1)
      goto LABEL_25;
    do
      v23 = __ldxr(v21);
    while (__stxr(v23 + 1, v21));
    p_shared_weak_owners = (unint64_t *)&v20->__shared_weak_owners_;
    do
      v25 = __ldxr(p_shared_weak_owners);
    while (__stxr(v25 + 1, p_shared_weak_owners));
    *((_QWORD *)v10 + 9) = v10;
    *((_QWORD *)v10 + 10) = v20;
    std::__shared_weak_count::__release_weak(v22);
  }
  else
  {
    do
      v26 = __ldxr(v21);
    while (__stxr(v26 + 1, v21));
    v27 = (unint64_t *)&v20->__shared_weak_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    *((_QWORD *)v10 + 9) = v10;
    *((_QWORD *)v10 + 10) = v20;
  }
  do
    v29 = __ldaxr(v21);
  while (__stlxr(v29 - 1, v21));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
LABEL_25:
  v30 = v51;
  ctu::Loggable<diag::DIAGConfigurer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v51);
  v31 = v52;
  *a1 = v30;
  a1[1] = v31;
  v51 = 0;
  v52 = 0;
  v32 = v48;
  if (!v48)
    goto LABEL_29;
  v33 = (unint64_t *)&v48->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    v35 = v46;
    if (!v46)
      goto LABEL_33;
  }
  else
  {
LABEL_29:
    v35 = v46;
    if (!v46)
      goto LABEL_33;
  }
  v36 = (unint64_t *)&v35->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
    v38 = cf;
    if (!cf)
      goto LABEL_35;
    goto LABEL_34;
  }
LABEL_33:
  v38 = cf;
  if (cf)
LABEL_34:
    CFRelease(v38);
LABEL_35:
  v39 = v50;
  if (v50)
  {
    v40 = (unint64_t *)&v50->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 48))(*a1);
}

void sub_1A353E374(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1A353E388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  diag::DIAGConfigurer::Parameters_t::~Parameters_t((diag::DIAGConfigurer::Parameters_t *)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t diag::DIAGConfigurer::create<unsigned long>(uint64_t *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5)
{
  std::__shared_weak_count_vtbl *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  const void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  CFTypeRef v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  int v43;
  CFTypeRef cf;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count_vtbl *v51;
  unint64_t v52;

  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  v10 = (std::__shared_weak_count_vtbl *)operator new(0xC0uLL);
  v49 = a2;
  v50 = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v43 = *(_DWORD *)a4;
  v13 = *(const void **)(a4 + 8);
  cf = v13;
  if (v13)
    CFRetain(v13);
  v14 = *(std::__shared_weak_count **)(a4 + 24);
  v45 = *(_QWORD *)(a4 + 16);
  v46 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *(std::__shared_weak_count **)(a4 + 40);
  v47 = *(_QWORD *)(a4 + 32);
  v48 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  diag::DIAGConfigurerPCI::DIAGConfigurerPCI(v10, &v49, &v43, a5);
  v51 = v10;
  v52 = 0xAAAAAAAAAAAAAAAALL;
  v20 = (std::__shared_weak_count *)operator new(0x20uLL);
  v20->__shared_owners_ = 0;
  v21 = (unint64_t *)&v20->__shared_owners_;
  v20->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A0ED58;
  v20->__shared_weak_owners_ = 0;
  v20[1].__vftable = v10;
  v52 = (unint64_t)v20;
  v22 = (std::__shared_weak_count *)v10[2].~__shared_weak_count;
  if (v22)
  {
    if (v22->__shared_owners_ != -1)
      goto LABEL_25;
    do
      v23 = __ldxr(v21);
    while (__stxr(v23 + 1, v21));
    p_shared_weak_owners = (unint64_t *)&v20->__shared_weak_owners_;
    do
      v25 = __ldxr(p_shared_weak_owners);
    while (__stxr(v25 + 1, p_shared_weak_owners));
    v10[1].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
    v10[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v20;
    std::__shared_weak_count::__release_weak(v22);
  }
  else
  {
    do
      v26 = __ldxr(v21);
    while (__stxr(v26 + 1, v21));
    v27 = (unint64_t *)&v20->__shared_weak_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    v10[1].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
    v10[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v20;
  }
  do
    v29 = __ldaxr(v21);
  while (__stlxr(v29 - 1, v21));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
LABEL_25:
  v30 = (uint64_t)v51;
  ctu::Loggable<diag::DIAGConfigurer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)v51);
  v31 = v52;
  *a1 = v30;
  a1[1] = v31;
  v51 = 0;
  v52 = 0;
  v32 = v48;
  if (!v48)
    goto LABEL_29;
  v33 = (unint64_t *)&v48->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    v35 = v46;
    if (!v46)
      goto LABEL_33;
  }
  else
  {
LABEL_29:
    v35 = v46;
    if (!v46)
      goto LABEL_33;
  }
  v36 = (unint64_t *)&v35->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
    v38 = cf;
    if (!cf)
      goto LABEL_35;
    goto LABEL_34;
  }
LABEL_33:
  v38 = cf;
  if (cf)
LABEL_34:
    CFRelease(v38);
LABEL_35:
  v39 = v50;
  if (v50)
  {
    v40 = (unint64_t *)&v50->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 48))(*a1);
}

void sub_1A353E6A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1A353E6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  diag::DIAGConfigurer::Parameters_t::~Parameters_t((diag::DIAGConfigurer::Parameters_t *)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void ctu::Loggable<diag::DIAGConfigurer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1A353E834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1A353E850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<diag::DIAGConfigurerUSB *,std::shared_ptr<diag::DIAGConfigurerUSB> ctu::SharedSynchronizable<diag::DIAGConfigurer>::make_shared_ptr<diag::DIAGConfigurerUSB>(diag::DIAGConfigurerUSB*)::{lambda(diag::DIAGConfigurerUSB *)#1},std::allocator<diag::DIAGConfigurerUSB>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<diag::DIAGConfigurerUSB *,std::shared_ptr<diag::DIAGConfigurerUSB> ctu::SharedSynchronizable<diag::DIAGConfigurer>::make_shared_ptr<diag::DIAGConfigurerUSB>(diag::DIAGConfigurerUSB*)::{lambda(diag::DIAGConfigurerUSB *)#1},std::allocator<diag::DIAGConfigurerUSB>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<diag::DIAGConfigurerUSB> ctu::SharedSynchronizable<diag::DIAGConfigurer>::make_shared_ptr<diag::DIAGConfigurerUSB>(diag::DIAGConfigurerUSB*)::{lambda(diag::DIAGConfigurerUSB*)#1}::operator() const(diag::DIAGConfigurerUSB*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<diag::DIAGConfigurerUSB *,std::shared_ptr<diag::DIAGConfigurerUSB> ctu::SharedSynchronizable<diag::DIAGConfigurer>::make_shared_ptr<diag::DIAGConfigurerUSB>(diag::DIAGConfigurerUSB*)::{lambda(diag::DIAGConfigurerUSB *)#1},std::allocator<diag::DIAGConfigurerUSB>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4diag14DIAGConfigurerEE15make_shared_ptrINS1_17DIAGConfigurerUSBEEENS"
                     "t3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4diag14DIAGConfigurerEE15make_shared_ptrINS1_17DIAGConfigu"
                                "rerUSBEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4diag14DIAGConfigurerEE15make_shared_ptrINS1_17DIAGConfigurerUSBEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4diag14DIAGConfigurerEE15make_shared_ptrINS1_17DIAGConfigurerUSBEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<diag::DIAGConfigurerUSB> ctu::SharedSynchronizable<diag::DIAGConfigurer>::make_shared_ptr<diag::DIAGConfigurerUSB>(diag::DIAGConfigurerUSB*)::{lambda(diag::DIAGConfigurerUSB*)#1}::operator() const(diag::DIAGConfigurerUSB*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<diag::DIAGConfigurerPCI *,std::shared_ptr<diag::DIAGConfigurerPCI> ctu::SharedSynchronizable<diag::DIAGConfigurer>::make_shared_ptr<diag::DIAGConfigurerPCI>(diag::DIAGConfigurerPCI*)::{lambda(diag::DIAGConfigurerPCI *)#1},std::allocator<diag::DIAGConfigurerPCI>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<diag::DIAGConfigurerPCI *,std::shared_ptr<diag::DIAGConfigurerPCI> ctu::SharedSynchronizable<diag::DIAGConfigurer>::make_shared_ptr<diag::DIAGConfigurerPCI>(diag::DIAGConfigurerPCI*)::{lambda(diag::DIAGConfigurerPCI *)#1},std::allocator<diag::DIAGConfigurerPCI>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<diag::DIAGConfigurerPCI> ctu::SharedSynchronizable<diag::DIAGConfigurer>::make_shared_ptr<diag::DIAGConfigurerPCI>(diag::DIAGConfigurerPCI*)::{lambda(diag::DIAGConfigurerPCI*)#1}::operator() const(diag::DIAGConfigurerPCI*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<diag::DIAGConfigurerPCI *,std::shared_ptr<diag::DIAGConfigurerPCI> ctu::SharedSynchronizable<diag::DIAGConfigurer>::make_shared_ptr<diag::DIAGConfigurerPCI>(diag::DIAGConfigurerPCI*)::{lambda(diag::DIAGConfigurerPCI *)#1},std::allocator<diag::DIAGConfigurerPCI>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4diag14DIAGConfigurerEE15make_shared_ptrINS1_17DIAGConfigurerPCIEEENS"
                     "t3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4diag14DIAGConfigurerEE15make_shared_ptrINS1_17DIAGConfigu"
                                "rerPCIEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4diag14DIAGConfigurerEE15make_shared_ptrINS1_17DIAGConfigurerPCIEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4diag14DIAGConfigurerEE15make_shared_ptrINS1_17DIAGConfigurerPCIEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<diag::DIAGConfigurerPCI> ctu::SharedSynchronizable<diag::DIAGConfigurer>::make_shared_ptr<diag::DIAGConfigurerPCI>(diag::DIAGConfigurerPCI*)::{lambda(diag::DIAGConfigurerPCI*)#1}::operator() const(diag::DIAGConfigurerPCI*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t ___ZN4diag7Service8Internal5startEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEb_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  config::hw *v4;
  int v5;
  const char *v6;
  size_t v7;
  capabilities::radio *v8;
  config::hw *v9;
  const char *v10;
  size_t v11;
  std::string::size_type v12;
  std::string *p_buf;
  uint64_t v14;
  uint64_t v15;
  int Int;
  std::string *v17;
  capabilities::trace *v18;
  char Bool;
  capabilities::trace *v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  NSObject *v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *size;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int16 v36;
  ctu::cf::MakeCFString *v37;
  unsigned __int16 v38;
  ctu::cf::MakeCFString *v39;
  unsigned int v40;
  int v41;
  int v42;
  void *v43;
  void *v44;
  NSObject *v45;
  int v46;
  uint64_t v47;
  const void *v48;
  void *v49;
  NSObject *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  NSObject *v54;
  __int128 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unsigned int v65;
  void *v66;
  std::string *v68;
  uint64_t v69;
  size_t v70;
  std::string *v71;
  unsigned __int8 *v72;
  uint64_t v73;
  capabilities::diag *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  char *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  int v85;
  NSObject *v86;
  NSObject *v87;
  config::hw *v88;
  int v89;
  capabilities::trace *v90;
  int v91;
  capabilities::trace *v92;
  int v93;
  NSObject *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unsigned __int8 v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  __int128 v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  dispatch_object_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  NSObject *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unsigned __int8 v136;
  uint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  __int128 v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  dispatch_object_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  NSObject *v164;
  const char *v165;
  NSObject *v166;
  _BOOL8 v167;
  uint64_t v168;
  capabilities::abs *shouldUseMinBasebandTransportIOReadSize;
  int v170;
  int v171;
  int v172;
  uint64_t v173;
  NSObject *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  unsigned __int8 v181;
  uint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  __int128 v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t *v203;
  unint64_t v204;
  dispatch_object_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  char *v209;
  NSObject *v210;
  NSObject *v211;
  std::string *v212;
  dispatch_object_t *v213;
  std::string::size_type v214;
  std::string *v215;
  NSObject *v216;
  char v217;
  NSObject *v218;
  const void *v219;
  NSObject *v220;
  uint64_t DMC;
  NSObject *v222;
  std::string *v223;
  char v224;
  uint64_t v225;
  int v226;
  size_t v227;
  size_t v228;
  std::string *v229;
  unsigned __int8 *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  std::string::size_type v234;
  const void **v235;
  std::string *v236;
  uint64_t v237;
  uint64_t v238;
  std::string::size_type v239;
  const void **v240;
  std::string *v241;
  dispatch_object_t *v242;
  _OWORD *v243;
  std::string *v244;
  size_t v245;
  _OWORD *v246;
  std::string *v247;
  size_t v248;
  const void *v249;
  NSObject *v250;
  NSObject *v251;
  std::string::size_type v252;
  int v253;
  size_t v254;
  unint64_t v255;
  _BYTE *v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  const void *v260;
  std::string *v261;
  __int128 v262;
  int v263;
  const std::string::value_type *v264;
  std::string::size_type v265;
  std::string *v266;
  __int128 v267;
  std::string *v268;
  __int128 v269;
  int v270;
  const std::string::value_type *v271;
  std::string::size_type v272;
  std::string *v273;
  std::string::value_type *v274;
  std::string::size_type v275;
  int v276;
  void *v277;
  std::string v278;
  std::string v279;
  std::string v280;
  std::string v281;
  void *v282;
  dispatch_object_t v283;
  void *v284;
  char v285;
  void *aBlock;
  NSObject *v287;
  dispatch_object_t v288;
  uint64_t v289;
  std::__shared_weak_count *v290;
  dispatch_object_t object;
  uint64_t v292;
  std::__shared_weak_count *v293;
  std::string v294;
  std::string __p[2];
  std::string v296;
  _QWORD v297[2];
  uint8_t v298[16];
  void *v299;
  dispatch_object_t v300;
  uint64_t v301;
  std::__shared_weak_count *v302;
  uint64_t v303;
  std::__shared_weak_count *v304;
  __int128 v305;
  void *v306;
  dispatch_object_t v307;
  __int128 v308;
  uint64_t v309;
  std::__shared_weak_count *v310;
  uint64_t v311;
  std::__shared_weak_count *v312;
  __int128 v313;
  _QWORD v314[2];
  _QWORD v315[2];
  dispatch_object_t v316[3];
  void *v317;
  std::string v318;
  uint64_t v319;
  char v320;
  _BYTE v321[48];
  void *v322;
  void *v323;
  _BYTE *v324;
  uint64_t v325;
  std::string buf;
  void *v327;
  __int128 *v328;
  _QWORD *v329;
  uint64_t v330;

  v330 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEFAULT, "#I Start", (uint8_t *)&buf, 2u);
  }
  v297[0] = 0xAAAAAAAAAAAAAAAALL;
  v297[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = (config::hw *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v297, *(const __CFDictionary **)(v2 + 208));
  memset(&v296, 170, sizeof(v296));
  v5 = config::hw::watch(v4);
  if (v5)
    v6 = "Lite";
  else
    v6 = "Default";
  if (v5)
    v7 = 4;
  else
    v7 = 7;
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = v7;
  memcpy(&buf, v6, v7);
  *(_BYTE *)((unint64_t)&buf | v7) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v321[32], "File");
  ctu::cf::map_adapter::getString();
  v8 = (capabilities::radio *)MEMORY[0x1A858F29C](&v321[32]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  memset(&__p[1], 170, sizeof(std::string));
  v9 = (config::hw *)capabilities::radio::ice(v8);
  if ((_DWORD)v9)
  {
    if (config::hw::watch(v9))
      v10 = "Lite";
    else
      v10 = "Default";
  }
  else
  {
    v10 = "None";
  }
  v11 = strlen(v10);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_buf = (std::string *)operator new(v14 + 1);
    buf.__r_.__value_.__l.__size_ = v12;
    buf.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    goto LABEL_23;
  }
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = v11;
  p_buf = &buf;
  if (v11)
LABEL_23:
    memcpy(p_buf, v10, v12);
  p_buf->__r_.__value_.__s.__data_[v12] = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v321[32], "File_Secondary");
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A858F29C](&v321[32]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  memset(__p, 170, 24);
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&buf, "None");
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v321[32], diag::config::kExtraDMCFileKey[0]);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A858F29C](&v321[32]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  memset(&v294, 170, sizeof(v294));
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&buf, "Sleep");
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v321[32], "File_Sleep");
  ctu::cf::map_adapter::getString();
  MEMORY[0x1A858F29C](&v321[32]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&buf, diag::config::kEnabledDuringSleepKey[0]);
  Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v297, (const __CFString *)buf.__r_.__value_.__l.__data_);
  v17 = (std::string *)MEMORY[0x1A858F29C](&buf);
  if (!Int)
    v17 = std::string::__assign_external(&v294, diag::config::kNoneDMCFile);
  v18 = (capabilities::trace *)capabilities::diag::supportsQDSS((capabilities::diag *)v17);
  if ((_DWORD)v18)
  {
    capabilities::trace::supportsHighTPutByDefault(v18);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&buf, "High_Tput");
    Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v297, (const __CFString *)buf.__r_.__value_.__l.__data_);
    v18 = (capabilities::trace *)MEMORY[0x1A858F29C](&buf);
  }
  else
  {
    Bool = 0;
  }
  *(_BYTE *)(v2 + 446) = Bool;
  v20 = (capabilities::trace *)capabilities::diag::supportsADPL(v18);
  if ((_DWORD)v20)
  {
    capabilities::trace::supportsDataLoggingByDefault(v20);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&buf, "Data_Logging");
    v21 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v297, (const __CFString *)buf.__r_.__value_.__l.__data_);
    MEMORY[0x1A858F29C](&buf);
    *(_BYTE *)(v2 + 445) = v21;
    if (v21 && !*(_QWORD *)(v2 + 304))
    {
      v22 = *(std::__shared_weak_count **)(v2 + 256);
      v292 = *(_QWORD *)(v2 + 248);
      v293 = v22;
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(p_shared_owners);
        while (__stxr(v24 + 1, p_shared_owners));
      }
      v25 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
      object = dispatch_queue_create("ADPL.reader.queue", v25);
      BasebandTransport::create((capabilities::radio *)&v292, &object, (uint64_t)&buf);
      v26 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
      v27 = *(std::__shared_weak_count **)(v2 + 312);
      *(_OWORD *)(v2 + 304) = v26;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_)
      {
        v31 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if (object)
        dispatch_release(object);
      v33 = v293;
      if (v293)
      {
        v34 = (unint64_t *)&v293->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
    }
  }
  else
  {
    *(_BYTE *)(v2 + 445) = 0;
  }
  if (*(_BYTE *)(v2 + 446) && !*(_QWORD *)(v2 + 320))
  {
    v51 = *(std::__shared_weak_count **)(v2 + 256);
    v289 = *(_QWORD *)(v2 + 248);
    v290 = v51;
    if (v51)
    {
      v52 = (unint64_t *)&v51->__shared_owners_;
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }
    v54 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
    v288 = dispatch_queue_create("QDSS.reader.queue", v54);
    BasebandTransport::create((capabilities::radio *)&v289, &v288, (uint64_t)&buf);
    v55 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
    v56 = *(std::__shared_weak_count **)(v2 + 328);
    *(_OWORD *)(v2 + 320) = v55;
    if (v56)
    {
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    v59 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_)
    {
      v60 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    if (v288)
      dispatch_release(v288);
    v62 = v290;
    if (v290)
    {
      v63 = (unint64_t *)&v290->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&buf, diag::config::kHighWatermarkKey[0]);
  v36 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v297, (const __CFString *)buf.__r_.__value_.__l.__data_);
  v37 = (ctu::cf::MakeCFString *)MEMORY[0x1A858F29C](&buf);
  *(_WORD *)(v2 + 452) = v36;
  ctu::cf::MakeCFString::MakeCFString(v37, diag::config::kLowWatermarkKey[0]);
  v38 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v297, (const __CFString *)buf.__r_.__value_.__l.__data_);
  v39 = (ctu::cf::MakeCFString *)MEMORY[0x1A858F29C](&buf);
  *(_WORD *)(v2 + 454) = v38;
  v40 = *(unsigned __int16 *)(v2 + 452);
  if (v40 >= 0x65)
  {
    v40 = 95;
    *(_WORD *)(v2 + 452) = 95;
  }
  if (v40 < v38)
    *(_WORD *)(v2 + 454) = 1;
  ctu::cf::MakeCFString::MakeCFString(v39, diag::config::kUseThresholdKey[0]);
  v41 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v297, (const __CFString *)buf.__r_.__value_.__l.__data_);
  MEMORY[0x1A858F29C](&buf);
  if (v41)
    v42 = 2;
  else
    v42 = 4;
  *(_DWORD *)(v2 + 448) = v42;
  *(_BYTE *)(v2 + 447) = *(_BYTE *)(a1 + 56);
  v43 = *(void **)(a1 + 40);
  if (v43)
  {
    v43 = _Block_copy(v43);
    v44 = v43;
    v45 = *(NSObject **)(a1 + 48);
    aBlock = v43;
    v287 = v45;
    if (!v45)
      goto LABEL_71;
    goto LABEL_70;
  }
  v44 = 0;
  v45 = *(NSObject **)(a1 + 48);
  aBlock = 0;
  v287 = v45;
  if (v45)
LABEL_70:
    dispatch_retain(v45);
LABEL_71:
  if (*(_DWORD *)(v2 + 104))
  {
LABEL_75:
    v46 = 1;
    goto LABEL_76;
  }
  if (!capabilities::diag::supportsQShrink4((capabilities::diag *)v43) || **(_BYTE **)(v2 + 272))
  {
LABEL_74:
    if (*(_QWORD *)(v2 + 216))
      goto LABEL_75;
    v74 = (capabilities::diag *)operator new(0x40uLL);
    v75 = (std::__shared_weak_count *)v74;
    *((_QWORD *)v74 + 1) = 0;
    v76 = (unint64_t *)((char *)v74 + 8);
    *((_QWORD *)v74 + 2) = 0;
    *(_QWORD *)v74 = off_1E4A0CA58;
    v77 = (char *)v74 + 24;
    *((_QWORD *)v74 + 7) = 0;
    *((_QWORD *)v74 + 6) = 0;
    *((_QWORD *)v74 + 5) = (char *)v74 + 48;
    do
      v78 = __ldxr(v76);
    while (__stxr(v78 + 1, v76));
    v79 = (unint64_t *)((char *)v74 + 16);
    do
      v80 = __ldxr(v79);
    while (__stxr(v80 + 1, v79));
    *((_QWORD *)v74 + 3) = (char *)v74 + 24;
    *((_QWORD *)v74 + 4) = v74;
    do
      v81 = __ldaxr(v76);
    while (__stlxr(v81 - 1, v76));
    if (!v81)
    {
      (*(void (**)(capabilities::diag *))(*(_QWORD *)v74 + 16))(v74);
      std::__shared_weak_count::__release_weak(v75);
    }
    v82 = *(std::__shared_weak_count **)(v2 + 224);
    *(_QWORD *)(v2 + 216) = v77;
    *(_QWORD *)(v2 + 224) = v75;
    if (v82)
    {
      v83 = (unint64_t *)&v82->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v85 = capabilities::diag::preferredInterface(v74);
    v316[1] = 0;
    v316[0] = 0;
    if (v85 == 8)
    {
      *(_QWORD *)&v321[32] = MEMORY[0x1E0C809B0];
      *(_QWORD *)&v321[40] = 0x40000000;
      v322 = ___ZN4diag7Service8Internal10setup_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke;
      v323 = &__block_descriptor_tmp_26_2;
      v324 = (_BYTE *)v2;
      v86 = _Block_copy(&v321[32]);
      v87 = *(NSObject **)(v2 + 88);
      if (v87)
        dispatch_retain(*(dispatch_object_t *)(v2 + 88));
      v316[0] = v86;
      v316[1] = v87;
    }
    v314[0] = 0xAAAAAAAAAAAAAAAALL;
    v314[1] = 0xAAAAAAAAAAAAAAAALL;
    v88 = (config::hw *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v314, *(const __CFDictionary **)(v2 + 208));
    config::hw::watch(v88);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&buf, "History");
    v89 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v314, (const __CFString *)buf.__r_.__value_.__l.__data_);
    v90 = (capabilities::trace *)MEMORY[0x1A858F29C](&buf);
    capabilities::trace::defaultMemoryFileMaxCount(v90);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&buf, "MaxMemoryFileCount");
    v91 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v314, (const __CFString *)buf.__r_.__value_.__l.__data_);
    v92 = (capabilities::trace *)MEMORY[0x1A858F29C](&buf);
    capabilities::trace::defaultFileSizeBytes(v92);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&buf, "FileSize");
    v93 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v314, (const __CFString *)buf.__r_.__value_.__l.__data_);
    MEMORY[0x1A858F29C](&buf);
    v94 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109632;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v89;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v91;
      HIWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
      LODWORD(buf.__r_.__value_.__r.__words[2]) = v93;
      _os_log_impl(&dword_1A343C000, v94, OS_LOG_TYPE_DEFAULT, "#I Initialize DIAG reader configuration: history: %d, maxFileCount: %u, fileSize: %u", (uint8_t *)&buf, 0x14u);
    }
    if (!*(_BYTE *)(v2 + 445))
    {
LABEL_243:
      if (*(_BYTE *)(v2 + 446))
      {
        v130 = *(std::__shared_weak_count **)(v2 + 328);
        v303 = *(_QWORD *)(v2 + 320);
        v304 = v130;
        if (v130)
        {
          v131 = (unint64_t *)&v130->__shared_owners_;
          do
            v132 = __ldxr(v131);
          while (__stxr(v132 + 1, v131));
        }
        v133 = *(std::__shared_weak_count **)(v2 + 280);
        v301 = *(_QWORD *)(v2 + 272);
        v302 = v133;
        if (v133)
        {
          v134 = (unint64_t *)&v133->__shared_owners_;
          do
            v135 = __ldxr(v134);
          while (__stxr(v135 + 1, v134));
        }
        {
          __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1A343C000);
        }
        buf.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
        buf.__r_.__value_.__l.__size_ = 0x40000000;
        buf.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
        v327 = &__block_descriptor_tmp_13_6;
        v328 = &GetABMLogServer(void)::sLogServer;
        if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
        {
          v137 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = GetABMLogServer(void)::sLogServer;
          if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
            goto LABEL_253;
        }
        else
        {
          dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &buf);
          v137 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = GetABMLogServer(void)::sLogServer;
          if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
          {
LABEL_253:
            v138 = (unint64_t *)(v137 + 8);
            do
              v139 = __ldxr(v138);
            while (__stxr(v139 + 1, v138));
          }
        }
        diag::DIAGReader::Parameters::create(15, &v303, &v301, (uint64_t *)&buf, v89, 0, v91, v93, &v305);
        v140 = v305;
        v305 = 0uLL;
        v141 = *(std::__shared_weak_count **)(v2 + 376);
        *(_OWORD *)(v2 + 368) = v140;
        if (v141)
        {
          v142 = (unint64_t *)&v141->__shared_owners_;
          do
            v143 = __ldaxr(v142);
          while (__stlxr(v143 - 1, v142));
          if (!v143)
          {
            ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
            std::__shared_weak_count::__release_weak(v141);
          }
        }
        v144 = (std::__shared_weak_count *)*((_QWORD *)&v305 + 1);
        if (*((_QWORD *)&v305 + 1))
        {
          v145 = (unint64_t *)(*((_QWORD *)&v305 + 1) + 8);
          do
            v146 = __ldaxr(v145);
          while (__stlxr(v146 - 1, v145));
          if (!v146)
          {
            ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
            std::__shared_weak_count::__release_weak(v144);
          }
        }
        v147 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
        if (buf.__r_.__value_.__l.__size_)
        {
          v148 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
          do
            v149 = __ldaxr(v148);
          while (__stlxr(v149 - 1, v148));
          if (!v149)
          {
            ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
            std::__shared_weak_count::__release_weak(v147);
          }
        }
        v150 = v302;
        if (v302)
        {
          v151 = (unint64_t *)&v302->__shared_owners_;
          do
            v152 = __ldaxr(v151);
          while (__stlxr(v152 - 1, v151));
          if (!v152)
          {
            ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
            std::__shared_weak_count::__release_weak(v150);
          }
        }
        v153 = v304;
        if (v304)
        {
          v154 = (unint64_t *)&v304->__shared_owners_;
          do
            v155 = __ldaxr(v154);
          while (__stlxr(v155 - 1, v154));
          if (!v155)
          {
            ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
            std::__shared_weak_count::__release_weak(v153);
          }
        }
        v156 = *(_QWORD *)(v2 + 216);
        v157 = *(_QWORD *)(v2 + 376);
        *(_QWORD *)&v305 = *(_QWORD *)(v2 + 368);
        *((_QWORD *)&v305 + 1) = v157;
        if (v157)
        {
          v158 = (unint64_t *)(v157 + 8);
          do
            v159 = __ldxr(v158);
          while (__stxr(v159 + 1, v158));
        }
        v160 = v316[0];
        if (v316[0])
          v160 = (dispatch_object_t)_Block_copy(v316[0]);
        v299 = v160;
        v300 = v316[1];
        if (v316[1])
          dispatch_retain(v316[1]);
        diag::DIAGReaderManager::addReader(v156, 2u, (uint64_t *)&v305, (uint64_t)&v299);
        if (v300)
          dispatch_release(v300);
        if (v299)
          _Block_release(v299);
        v161 = (std::__shared_weak_count *)*((_QWORD *)&v305 + 1);
        if (*((_QWORD *)&v305 + 1))
        {
          v162 = (unint64_t *)(*((_QWORD *)&v305 + 1) + 8);
          do
            v163 = __ldaxr(v162);
          while (__stlxr(v163 - 1, v162));
          if (!v163)
          {
            ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
            std::__shared_weak_count::__release_weak(v161);
          }
        }
        v164 = *(NSObject **)(v2 + 40);
        if (!os_log_type_enabled(v164, OS_LOG_TYPE_DEFAULT))
          goto LABEL_382;
        *(_WORD *)v298 = 0;
        v165 = "#I QDSS Reader has been added";
LABEL_381:
        _os_log_impl(&dword_1A343C000, v164, OS_LOG_TYPE_DEFAULT, v165, v298, 2u);
LABEL_382:
        *(_BYTE *)(v2 + 444) = 1;
        MEMORY[0x1A858F2D8](v314);
        if (v316[1])
          dispatch_release(v316[1]);
        if (v316[0])
          _Block_release(v316[0]);
        v46 = 1;
        v45 = v287;
        goto LABEL_76;
      }
      v175 = *(std::__shared_weak_count **)(v2 + 296);
      v303 = *(_QWORD *)(v2 + 288);
      v304 = v175;
      if (v175)
      {
        v176 = (unint64_t *)&v175->__shared_owners_;
        do
          v177 = __ldxr(v176);
        while (__stxr(v177 + 1, v176));
      }
      v178 = *(std::__shared_weak_count **)(v2 + 280);
      v301 = *(_QWORD *)(v2 + 272);
      v302 = v178;
      if (v178)
      {
        v179 = (unint64_t *)&v178->__shared_owners_;
        do
          v180 = __ldxr(v179);
        while (__stxr(v180 + 1, v179));
      }
      {
        __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1A343C000);
      }
      buf.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
      buf.__r_.__value_.__l.__size_ = 0x40000000;
      buf.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
      v327 = &__block_descriptor_tmp_13_6;
      v328 = &GetABMLogServer(void)::sLogServer;
      if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
      {
        v182 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = GetABMLogServer(void)::sLogServer;
        if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
          goto LABEL_336;
      }
      else
      {
        dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &buf);
        v182 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = GetABMLogServer(void)::sLogServer;
        if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
        {
LABEL_336:
          v183 = (unint64_t *)(v182 + 8);
          do
            v184 = __ldxr(v183);
          while (__stxr(v184 + 1, v183));
        }
      }
      diag::DIAGReader::Parameters::create(2, &v303, &v301, (uint64_t *)&buf, v89, 0, v91, v93, &v305);
      v185 = v305;
      v305 = 0uLL;
      v186 = *(std::__shared_weak_count **)(v2 + 344);
      *(_OWORD *)(v2 + 336) = v185;
      if (v186)
      {
        v187 = (unint64_t *)&v186->__shared_owners_;
        do
          v188 = __ldaxr(v187);
        while (__stlxr(v188 - 1, v187));
        if (!v188)
        {
          ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
          std::__shared_weak_count::__release_weak(v186);
        }
      }
      v189 = (std::__shared_weak_count *)*((_QWORD *)&v305 + 1);
      if (*((_QWORD *)&v305 + 1))
      {
        v190 = (unint64_t *)(*((_QWORD *)&v305 + 1) + 8);
        do
          v191 = __ldaxr(v190);
        while (__stlxr(v191 - 1, v190));
        if (!v191)
        {
          ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
          std::__shared_weak_count::__release_weak(v189);
        }
      }
      v192 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_)
      {
        v193 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
        do
          v194 = __ldaxr(v193);
        while (__stlxr(v194 - 1, v193));
        if (!v194)
        {
          ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
          std::__shared_weak_count::__release_weak(v192);
        }
      }
      v195 = v302;
      if (v302)
      {
        v196 = (unint64_t *)&v302->__shared_owners_;
        do
          v197 = __ldaxr(v196);
        while (__stlxr(v197 - 1, v196));
        if (!v197)
        {
          ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
          std::__shared_weak_count::__release_weak(v195);
        }
      }
      v198 = v304;
      if (v304)
      {
        v199 = (unint64_t *)&v304->__shared_owners_;
        do
          v200 = __ldaxr(v199);
        while (__stlxr(v200 - 1, v199));
        if (!v200)
        {
          ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
          std::__shared_weak_count::__release_weak(v198);
        }
      }
      v201 = *(_QWORD *)(v2 + 216);
      v202 = *(_QWORD *)(v2 + 344);
      *(_QWORD *)&v305 = *(_QWORD *)(v2 + 336);
      *((_QWORD *)&v305 + 1) = v202;
      if (v202)
      {
        v203 = (unint64_t *)(v202 + 8);
        do
          v204 = __ldxr(v203);
        while (__stxr(v204 + 1, v203));
      }
      v205 = v316[0];
      if (v316[0])
        v205 = (dispatch_object_t)_Block_copy(v316[0]);
      v299 = v205;
      v300 = v316[1];
      if (v316[1])
        dispatch_retain(v316[1]);
      diag::DIAGReaderManager::addReader(v201, 0, (uint64_t *)&v305, (uint64_t)&v299);
      if (v300)
        dispatch_release(v300);
      if (v299)
        _Block_release(v299);
      v206 = (std::__shared_weak_count *)*((_QWORD *)&v305 + 1);
      if (*((_QWORD *)&v305 + 1))
      {
        v207 = (unint64_t *)(*((_QWORD *)&v305 + 1) + 8);
        do
          v208 = __ldaxr(v207);
        while (__stlxr(v208 - 1, v207));
        if (!v208)
        {
          ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
          std::__shared_weak_count::__release_weak(v206);
        }
      }
      v164 = *(NSObject **)(v2 + 40);
      if (!os_log_type_enabled(v164, OS_LOG_TYPE_DEFAULT))
        goto LABEL_382;
      *(_WORD *)v298 = 0;
      v165 = "#I DIAG Reader has been added";
      goto LABEL_381;
    }
    v95 = *(std::__shared_weak_count **)(v2 + 312);
    v311 = *(_QWORD *)(v2 + 304);
    v312 = v95;
    if (v95)
    {
      v96 = (unint64_t *)&v95->__shared_owners_;
      do
        v97 = __ldxr(v96);
      while (__stxr(v97 + 1, v96));
    }
    v98 = *(std::__shared_weak_count **)(v2 + 280);
    v309 = *(_QWORD *)(v2 + 272);
    v310 = v98;
    if (v98)
    {
      v99 = (unint64_t *)&v98->__shared_owners_;
      do
        v100 = __ldxr(v99);
      while (__stxr(v100 + 1, v99));
    }
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1A343C000);
    }
    buf.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
    buf.__r_.__value_.__l.__size_ = 0x40000000;
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
    v327 = &__block_descriptor_tmp_13_6;
    v328 = &GetABMLogServer(void)::sLogServer;
    if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
    {
      v102 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
      v308 = GetABMLogServer(void)::sLogServer;
      if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
        goto LABEL_198;
    }
    else
    {
      dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &buf);
      v102 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
      v308 = GetABMLogServer(void)::sLogServer;
      if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      {
LABEL_198:
        v103 = (unint64_t *)(v102 + 8);
        do
          v104 = __ldxr(v103);
        while (__stxr(v104 + 1, v103));
      }
    }
    diag::DIAGReader::Parameters::create(11, &v311, &v309, (uint64_t *)&v308, v89, 0, v91, v93, &v313);
    v105 = v313;
    v313 = 0uLL;
    v106 = *(std::__shared_weak_count **)(v2 + 360);
    *(_OWORD *)(v2 + 352) = v105;
    if (v106)
    {
      v107 = (unint64_t *)&v106->__shared_owners_;
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
    }
    v109 = (std::__shared_weak_count *)*((_QWORD *)&v313 + 1);
    if (*((_QWORD *)&v313 + 1))
    {
      v110 = (unint64_t *)(*((_QWORD *)&v313 + 1) + 8);
      do
        v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
    v112 = (std::__shared_weak_count *)*((_QWORD *)&v308 + 1);
    if (*((_QWORD *)&v308 + 1))
    {
      v113 = (unint64_t *)(*((_QWORD *)&v308 + 1) + 8);
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
    }
    v115 = v310;
    if (v310)
    {
      v116 = (unint64_t *)&v310->__shared_owners_;
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
    v118 = v312;
    if (v312)
    {
      v119 = (unint64_t *)&v312->__shared_owners_;
      do
        v120 = __ldaxr(v119);
      while (__stlxr(v120 - 1, v119));
      if (!v120)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }
    }
    v121 = *(_QWORD *)(v2 + 216);
    v122 = *(_QWORD *)(v2 + 360);
    *(_QWORD *)&v313 = *(_QWORD *)(v2 + 352);
    *((_QWORD *)&v313 + 1) = v122;
    if (v122)
    {
      v123 = (unint64_t *)(v122 + 8);
      do
        v124 = __ldxr(v123);
      while (__stxr(v124 + 1, v123));
    }
    v125 = v316[0];
    if (v316[0])
      v125 = (dispatch_object_t)_Block_copy(v316[0]);
    v306 = v125;
    v307 = v316[1];
    if (v316[1])
      dispatch_retain(v316[1]);
    diag::DIAGReaderManager::addReader(v121, 1u, (uint64_t *)&v313, (uint64_t)&v306);
    if (v307)
      dispatch_release(v307);
    if (v306)
      _Block_release(v306);
    v126 = (std::__shared_weak_count *)*((_QWORD *)&v313 + 1);
    if (*((_QWORD *)&v313 + 1))
    {
      v127 = (unint64_t *)(*((_QWORD *)&v313 + 1) + 8);
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
      }
    }
    v129 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1A343C000, v129, OS_LOG_TYPE_DEFAULT, "#I ADPL Reader has been added", (uint8_t *)&buf, 2u);
    }
    goto LABEL_243;
  }
  v166 = *(NSObject **)(v2 + 40);
  v167 = os_log_type_enabled(v166, OS_LOG_TYPE_DEFAULT);
  if (v167)
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1A343C000, v166, OS_LOG_TYPE_DEFAULT, "#I Fetching GUID", (uint8_t *)&buf, 2u);
  }
  v168 = *(_QWORD *)(v2 + 288);
  LODWORD(v318.__r_.__value_.__l.__data_) = 2;
  v318.__r_.__value_.__s.__data_[4] = 0;
  v318.__r_.__value_.__l.__size_ = 10;
  shouldUseMinBasebandTransportIOReadSize = (capabilities::abs *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)v167);
  if ((_DWORD)shouldUseMinBasebandTransportIOReadSize)
    v170 = 0x4000;
  else
    v170 = 0x8000;
  LODWORD(v318.__r_.__value_.__r.__words[2]) = v170;
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadCount(shouldUseMinBasebandTransportIOReadSize))
    v171 = 4;
  else
    v171 = 16;
  HIDWORD(v318.__r_.__value_.__r.__words[2]) = v171;
  v319 = 0;
  v320 = 0;
  v317 = 0;
  v172 = (*(uint64_t (**)(uint64_t, std::string *, void **))(*(_QWORD *)v168 + 48))(v168, &v318, &v317);
  if (v317)
    _Block_release(v317);
  if (!v172)
  {
    v209 = (char *)operator new(0x30uLL);
    strcpy(v209, "Failed to open DIAG transport to get GUID info");
    v210 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v210, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v209;
      _os_log_error_impl(&dword_1A343C000, v210, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
      if (!v44)
        goto LABEL_390;
    }
    else if (!v44)
    {
LABEL_390:
      *(_QWORD *)&v321[32] = v44;
      *(_QWORD *)&v321[40] = v45;
      if (v45)
        dispatch_retain(v45);
      std::string::__init_copy_ctor_external(&buf, v209, 0x2EuLL);
      diag::Service::Internal::changeStateAndNotify_sync(v2, 4u, (uint64_t)&v321[32], (uint64_t)&buf);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      if (v45)
        dispatch_release(v45);
      if (v44)
        _Block_release(v44);
      operator delete(v209);
      v46 = 0;
      goto LABEL_76;
    }
    v44 = _Block_copy(v44);
    goto LABEL_390;
  }
  memset(v316, 0, sizeof(v316));
  v173 = *(_QWORD *)(v2 + 288);
  *(_QWORD *)v321 = 0;
  *(_QWORD *)&v321[8] = v321;
  *(_QWORD *)&v321[16] = 0x2000000000;
  *(_QWORD *)&v321[24] = 0;
  *(_QWORD *)&v321[32] = MEMORY[0x1E0C809B0];
  *(_QWORD *)&v321[40] = 0x40000000;
  v322 = ___ZN17BasebandTransportdeEv_block_invoke;
  v323 = &unk_1E4A0A0E8;
  v324 = v321;
  v325 = v173;
  v315[0] = &v321[32];
  buf.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
  buf.__r_.__value_.__l.__size_ = 0x40000000;
  buf.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v327 = &__block_descriptor_tmp_77;
  v328 = (__int128 *)(v173 + 72);
  v329 = v315;
  v174 = *(NSObject **)(v173 + 88);
  if (*(_QWORD *)(v173 + 96))
    dispatch_async_and_wait(v174, &buf);
  else
    dispatch_sync(v174, &buf);
  _Block_object_dispose(v321, 8);
  v46 = ETLDIAGGetGUID();
  if (v46)
  {
    v211 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v211, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1A343C000, v211, OS_LOG_TYPE_DEFAULT, "#I Fetching GUID success", (uint8_t *)&buf, 2u);
    }
    goto LABEL_486;
  }
  v212 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&buf, "Failed to get GUID info: ");
  if (SHIBYTE(v316[2]) >= 0)
    v213 = v316;
  else
    v213 = (dispatch_object_t *)v316[0];
  if (SHIBYTE(v316[2]) >= 0)
    v214 = HIBYTE(v316[2]);
  else
    v214 = (std::string::size_type)v316[1];
  v215 = std::string::append(v212, (const std::string::value_type *)v213, v214);
  v216 = v215->__r_.__value_.__r.__words[0];
  *(_QWORD *)&v321[32] = v215->__r_.__value_.__l.__size_;
  *(_QWORD *)&v321[39] = *(std::string::size_type *)((char *)&v215->__r_.__value_.__r.__words[1] + 7);
  v217 = HIBYTE(v215->__r_.__value_.__r.__words[2]);
  v215->__r_.__value_.__l.__size_ = 0;
  v215->__r_.__value_.__r.__words[2] = 0;
  v215->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v316[2]) < 0)
    operator delete(v316[0]);
  v316[0] = v216;
  v316[1] = *(dispatch_object_t *)&v321[32];
  *(dispatch_object_t *)((char *)&v316[1] + 7) = *(dispatch_object_t *)&v321[39];
  HIBYTE(v316[2]) = v217;
  if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v218 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v218, OS_LOG_TYPE_ERROR))
      goto LABEL_422;
LABEL_479:
    v242 = v316;
    if (SHIBYTE(v316[2]) < 0)
      v242 = (dispatch_object_t *)v316[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v242;
    _os_log_error_impl(&dword_1A343C000, v218, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
    dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::callback(v315, (uint64_t)&aBlock);
    if ((SHIBYTE(v316[2]) & 0x80000000) == 0)
      goto LABEL_423;
LABEL_482:
    std::string::__init_copy_ctor_external((std::string *)v321, (const std::string::value_type *)v316[0], (std::string::size_type)v316[1]);
    goto LABEL_483;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
  v218 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v218, OS_LOG_TYPE_ERROR))
    goto LABEL_479;
LABEL_422:
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::callback(v315, (uint64_t)&aBlock);
  if (SHIBYTE(v316[2]) < 0)
    goto LABEL_482;
LABEL_423:
  *(_OWORD *)v321 = *(_OWORD *)v316;
  *(dispatch_object_t *)&v321[16] = v316[2];
LABEL_483:
  diag::Service::Internal::changeStateAndNotify_sync(v2, 4u, (uint64_t)v315, (uint64_t)v321);
  if ((v321[23] & 0x80000000) != 0)
    operator delete(*(void **)v321);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)v315);
LABEL_486:
  BasebandTransport::close(*(BasebandTransport **)(v2 + 288));
  if (SHIBYTE(v316[2]) < 0)
    operator delete(v316[0]);
  if (v46)
    goto LABEL_74;
LABEL_76:
  if (v45)
    dispatch_release(v45);
  if (aBlock)
    _Block_release(aBlock);
  if (v46)
  {
    v47 = *(_QWORD *)(v2 + 216);
    if (v47 && (v285 = 0, LOBYTE(v284) = 0, diag::DIAGReaderManager::pushInfo(v47, 4, (uint64_t)&v284), v285 < 0))
    {
      operator delete(v284);
      v48 = *(const void **)(a1 + 40);
      if (v48)
      {
LABEL_84:
        v49 = _Block_copy(v48);
        v50 = *(NSObject **)(a1 + 48);
        v282 = v49;
        v283 = v50;
        if (!v50)
          goto LABEL_86;
        goto LABEL_85;
      }
    }
    else
    {
      v48 = *(const void **)(a1 + 40);
      if (v48)
        goto LABEL_84;
    }
    v49 = 0;
    v50 = *(NSObject **)(a1 + 48);
    v282 = 0;
    v283 = v50;
    if (!v50)
    {
LABEL_86:
      if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v281, v296.__r_.__value_.__l.__data_, v296.__r_.__value_.__l.__size_);
      else
        v281 = v296;
      if (SHIBYTE(__p[1].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v280, __p[1].__r_.__value_.__l.__data_, __p[1].__r_.__value_.__l.__size_);
      else
        v280 = __p[1];
      if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v279, v294.__r_.__value_.__l.__data_, v294.__r_.__value_.__l.__size_);
      else
        v279 = v294;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v278, __p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__l.__size_);
      else
        v278 = __p[0];
      v65 = *(_DWORD *)(v2 + 460);
      if (v65)
      {
        if (v49)
        {
          v66 = _Block_copy(v49);
          *(_QWORD *)&v321[32] = v66;
          *(_QWORD *)&v321[40] = v50;
          if (!v50)
            goto LABEL_124;
        }
        else
        {
          v66 = 0;
          *(_QWORD *)&v321[32] = 0;
          *(_QWORD *)&v321[40] = v50;
          if (!v50)
          {
LABEL_124:
            *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
            buf.__r_.__value_.__s.__data_[0] = 0;
            diag::Service::Internal::changeStateAndNotify_sync(v2, v65, (uint64_t)&v321[32], (uint64_t)&buf);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
            if (v50)
              dispatch_release(v50);
            if (v66)
LABEL_129:
              _Block_release(v66);
LABEL_130:
            if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v278.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v279.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_132:
                if ((SHIBYTE(v280.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_133;
                goto LABEL_166;
              }
            }
            else if ((SHIBYTE(v279.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_132;
            }
            operator delete(v279.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v280.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_133:
              if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_134;
              goto LABEL_167;
            }
LABEL_166:
            operator delete(v280.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_134:
              if (!v50)
                goto LABEL_136;
              goto LABEL_135;
            }
LABEL_167:
            operator delete(v281.__r_.__value_.__l.__data_);
            if (!v50)
            {
LABEL_136:
              if (v49)
                _Block_release(v49);
              goto LABEL_138;
            }
LABEL_135:
            dispatch_release(v50);
            goto LABEL_136;
          }
        }
        dispatch_retain(v50);
        goto LABEL_124;
      }
      *(_DWORD *)(v2 + 460) = 3;
      if ((*(_DWORD *)(v2 + 104) | 4) == 4)
      {
        v68 = (std::string *)(v2 + 160);
        if (*(char *)(v2 + 183) >= 0)
          v69 = *(unsigned __int8 *)(v2 + 183);
        else
          v69 = *(_QWORD *)(v2 + 168);
        if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v70 = HIBYTE(v279.__r_.__value_.__r.__words[2]);
        else
          v70 = v279.__r_.__value_.__l.__size_;
        if (v69 == v70)
        {
          if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v71 = &v279;
          else
            v71 = (std::string *)v279.__r_.__value_.__r.__words[0];
          if ((*(_BYTE *)(v2 + 183) & 0x80) != 0)
          {
            if (memcmp(v68->__r_.__value_.__l.__data_, v71, *(_QWORD *)(v2 + 168)))
            {
              if (v68 == &v279)
              {
LABEL_425:
                v219 = *(const void **)(v2 + 416);
                if (v219)
                {
                  CFRelease(v219);
                  v220 = *(NSObject **)(v2 + 40);
                  if (os_log_type_enabled(v220, OS_LOG_TYPE_DEBUG))
                  {
                    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                    _os_log_debug_impl(&dword_1A343C000, v220, OS_LOG_TYPE_DEBUG, "#D Released sleep DMC", (uint8_t *)&buf, 2u);
                  }
                }
                DMC = diag::loadDMC(v2 + 160);
                *(_QWORD *)(v2 + 416) = DMC;
                if (DMC)
                {
                  v222 = *(NSObject **)(v2 + 40);
                  if (os_log_type_enabled(v222, OS_LOG_TYPE_DEBUG))
                  {
                    if (*(char *)(v2 + 183) < 0)
                      v68 = (std::string *)v68->__r_.__value_.__r.__words[0];
                    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v68;
                    _os_log_debug_impl(&dword_1A343C000, v222, OS_LOG_TYPE_DEBUG, "#D Loaded %s DMC File", (uint8_t *)&buf, 0xCu);
                  }
                }
                goto LABEL_430;
              }
LABEL_407:
              std::string::__assign_no_alias<false>((void **)(v2 + 160), v71, v70);
              goto LABEL_425;
            }
          }
          else if (*(_BYTE *)(v2 + 183))
          {
            v72 = (unsigned __int8 *)(v2 + 160);
            v73 = *(unsigned __int8 *)(v2 + 183);
            while (*v72 == v71->__r_.__value_.__s.__data_[0])
            {
              ++v72;
              v71 = (std::string *)((char *)v71 + 1);
              if (!--v73)
                goto LABEL_430;
            }
            goto LABEL_303;
          }
LABEL_430:
          v223 = (std::string *)(v2 + 112);
          v224 = *(_BYTE *)(v2 + 135);
          if (v224 >= 0)
            v225 = *(unsigned __int8 *)(v2 + 135);
          else
            v225 = *(_QWORD *)(v2 + 120);
          v226 = SHIBYTE(v281.__r_.__value_.__r.__words[2]);
          v227 = v281.__r_.__value_.__l.__size_;
          if ((v281.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v228 = HIBYTE(v281.__r_.__value_.__r.__words[2]);
          else
            v228 = v281.__r_.__value_.__l.__size_;
          if (v225 == v228)
          {
            v229 = (v281.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                 ? &v281
                 : (std::string *)v281.__r_.__value_.__r.__words[0];
            if ((*(_BYTE *)(v2 + 135) & 0x80) != 0)
            {
              if (memcmp(v223->__r_.__value_.__l.__data_, v229, *(_QWORD *)(v2 + 120)))
              {
                if (v223 == &v281)
                  goto LABEL_505;
                goto LABEL_503;
              }
            }
            else if (*(_BYTE *)(v2 + 135))
            {
              v230 = (unsigned __int8 *)(v2 + 112);
              v231 = *(unsigned __int8 *)(v2 + 135);
              while (*v230 == v229->__r_.__value_.__s.__data_[0])
              {
                ++v230;
                v229 = (std::string *)((char *)v229 + 1);
                if (!--v231)
                  goto LABEL_449;
              }
              goto LABEL_496;
            }
LABEL_449:
            v232 = *(unsigned __int8 *)(v2 + 159);
            if ((v232 & 0x80u) == 0)
              v233 = *(unsigned __int8 *)(v2 + 159);
            else
              v233 = *(_QWORD *)(v2 + 144);
            v234 = HIBYTE(v280.__r_.__value_.__r.__words[2]);
            if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v234 = v280.__r_.__value_.__l.__size_;
            if (v233 == v234)
            {
              v235 = (const void **)(v2 + 136);
              if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v236 = &v280;
              else
                v236 = (std::string *)v280.__r_.__value_.__r.__words[0];
              if ((v232 & 0x80) == 0)
              {
                if (*(_BYTE *)(v2 + 159))
                {
                  while (*(unsigned __int8 *)v235 == v236->__r_.__value_.__s.__data_[0])
                  {
                    v235 = (const void **)((char *)v235 + 1);
                    v236 = (std::string *)((char *)v236 + 1);
                    if (!--v232)
                      goto LABEL_464;
                  }
                  goto LABEL_496;
                }
LABEL_464:
                v237 = *(unsigned __int8 *)(v2 + 207);
                if ((v237 & 0x80u) == 0)
                  v238 = *(unsigned __int8 *)(v2 + 207);
                else
                  v238 = *(_QWORD *)(v2 + 192);
                v239 = HIBYTE(v278.__r_.__value_.__r.__words[2]);
                if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v239 = v278.__r_.__value_.__l.__size_;
                if (v238 == v239)
                {
                  v240 = (const void **)(v2 + 184);
                  if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v241 = &v278;
                  else
                    v241 = (std::string *)v278.__r_.__value_.__r.__words[0];
                  if ((v237 & 0x80) != 0)
                  {
                    if (!memcmp(*v240, v241, *(_QWORD *)(v2 + 192)))
                      goto LABEL_533;
                  }
                  else
                  {
                    if (!*(_BYTE *)(v2 + 207))
                      goto LABEL_533;
                    while (*(unsigned __int8 *)v240 == v241->__r_.__value_.__s.__data_[0])
                    {
                      v240 = (const void **)((char *)v240 + 1);
                      v241 = (std::string *)((char *)v241 + 1);
                      if (!--v237)
                        goto LABEL_533;
                    }
                  }
                }
                goto LABEL_496;
              }
              if (!memcmp(*v235, v236, *(_QWORD *)(v2 + 144)))
                goto LABEL_464;
            }
          }
LABEL_496:
          if (v223 == &v281)
            goto LABEL_505;
          if ((v224 & 0x80) == 0)
          {
            if (v226 < 0)
            {
              std::string::__assign_no_alias<true>((_QWORD *)(v2 + 112), v281.__r_.__value_.__l.__data_, v227);
            }
            else
            {
              *(_OWORD *)&v223->__r_.__value_.__l.__data_ = *(_OWORD *)&v281.__r_.__value_.__l.__data_;
              *(_QWORD *)(v2 + 128) = *((_QWORD *)&v281.__r_.__value_.__l + 2);
            }
LABEL_505:
            v243 = (_OWORD *)(v2 + 136);
            if ((std::string *)(v2 + 136) != &v280)
            {
              if (*(char *)(v2 + 159) < 0)
              {
                if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v244 = &v280;
                else
                  v244 = (std::string *)v280.__r_.__value_.__r.__words[0];
                if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v245 = HIBYTE(v280.__r_.__value_.__r.__words[2]);
                else
                  v245 = v280.__r_.__value_.__l.__size_;
                std::string::__assign_no_alias<false>((void **)(v2 + 136), v244, v245);
              }
              else if ((*((_BYTE *)&v280.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                std::string::__assign_no_alias<true>((_QWORD *)(v2 + 136), v280.__r_.__value_.__l.__data_, v280.__r_.__value_.__l.__size_);
              }
              else
              {
                *v243 = *(_OWORD *)&v280.__r_.__value_.__l.__data_;
                *(_QWORD *)(v2 + 152) = *((_QWORD *)&v280.__r_.__value_.__l + 2);
              }
            }
            v246 = (_OWORD *)(v2 + 184);
            if ((std::string *)(v2 + 184) != &v278)
            {
              if (*(char *)(v2 + 207) < 0)
              {
                if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v247 = &v278;
                else
                  v247 = (std::string *)v278.__r_.__value_.__r.__words[0];
                if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v248 = HIBYTE(v278.__r_.__value_.__r.__words[2]);
                else
                  v248 = v278.__r_.__value_.__l.__size_;
                std::string::__assign_no_alias<false>((void **)(v2 + 184), v247, v248);
              }
              else if ((*((_BYTE *)&v278.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                std::string::__assign_no_alias<true>((_QWORD *)(v2 + 184), v278.__r_.__value_.__l.__data_, v278.__r_.__value_.__l.__size_);
              }
              else
              {
                *v246 = *(_OWORD *)&v278.__r_.__value_.__l.__data_;
                *(_QWORD *)(v2 + 200) = *((_QWORD *)&v278.__r_.__value_.__l + 2);
              }
            }
            v249 = *(const void **)(v2 + 408);
            if (v249)
            {
              CFRelease(v249);
              v250 = *(NSObject **)(v2 + 40);
              if (os_log_type_enabled(v250, OS_LOG_TYPE_DEBUG))
              {
                LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                _os_log_debug_impl(&dword_1A343C000, v250, OS_LOG_TYPE_DEBUG, "#D Released merged DMC", (uint8_t *)&buf, 2u);
              }
            }
            *(_QWORD *)(v2 + 408) = diag::mergeDMC(v2 + 112, v2 + 136, v2 + 184, *(unsigned __int8 *)(v2 + 445));
            v251 = *(NSObject **)(v2 + 40);
            if (!os_log_type_enabled(v251, OS_LOG_TYPE_DEBUG))
            {
LABEL_533:
              if (*(_QWORD *)(v2 + 408))
                goto LABEL_534;
              goto LABEL_548;
            }
            v252 = v2 + 112;
            if (*(char *)(v2 + 135) < 0)
            {
              v252 = v223->__r_.__value_.__r.__words[0];
              if ((*(char *)(v2 + 159) & 0x80000000) == 0)
                goto LABEL_545;
            }
            else if ((*(char *)(v2 + 159) & 0x80000000) == 0)
            {
LABEL_545:
              if ((*(char *)(v2 + 207) & 0x80000000) == 0)
                goto LABEL_547;
              goto LABEL_546;
            }
            v243 = *(_OWORD **)v243;
            if ((*(char *)(v2 + 207) & 0x80000000) == 0)
            {
LABEL_547:
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v252;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v243;
              HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
              v327 = v246;
              _os_log_debug_impl(&dword_1A343C000, v251, OS_LOG_TYPE_DEBUG, "#D Merged %s, %s, and %s DMC files", (uint8_t *)&buf, 0x20u);
              if (*(_QWORD *)(v2 + 408))
              {
LABEL_534:
                if (v49)
                {
                  v66 = _Block_copy(v49);
                  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
                  buf.__r_.__value_.__l.__size_ = (std::string::size_type)v50;
                  if (!v50)
                    goto LABEL_537;
                }
                else
                {
                  v66 = 0;
                  buf.__r_.__value_.__r.__words[0] = 0;
                  buf.__r_.__value_.__l.__size_ = (std::string::size_type)v50;
                  if (!v50)
                  {
LABEL_537:
                    diag::Service::Internal::start_sync((_QWORD *)v2, (uint64_t)&buf);
                    if (v50)
                      dispatch_release(v50);
                    if (v66)
                      goto LABEL_129;
                    goto LABEL_130;
                  }
                }
                dispatch_retain(v50);
                goto LABEL_537;
              }
LABEL_548:
              memset(v316, 170, 7);
              v253 = *(char *)(v2 + 135);
              if (v253 >= 0)
                v254 = *(unsigned __int8 *)(v2 + 135);
              else
                v254 = *(_QWORD *)(v2 + 120);
              v255 = v254 + 45;
              memset(v321, 170, 24);
              if (v254 + 45 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              if (v255 > 0x16)
              {
                v257 = (v255 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v255 | 7) != 0x17)
                  v257 = v255 | 7;
                v258 = v257 + 1;
                v259 = (char *)operator new(v257 + 1);
                *(_QWORD *)&v321[8] = v254 + 45;
                *(_QWORD *)&v321[16] = v258 | 0x8000000000000000;
                *(_QWORD *)v321 = v259;
                v256 = v259 + 45;
                qmemcpy(v259, "DIAG can not start without a valid DMC file: ", 45);
                if (!v254)
                {
LABEL_561:
                  v256[v254] = 0;
                  v261 = std::string::append((std::string *)v321, ", ", 2uLL);
                  v262 = *(_OWORD *)&v261->__r_.__value_.__l.__data_;
                  v318.__r_.__value_.__r.__words[2] = v261->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v318.__r_.__value_.__l.__data_ = v262;
                  v261->__r_.__value_.__l.__size_ = 0;
                  v261->__r_.__value_.__r.__words[2] = 0;
                  v261->__r_.__value_.__r.__words[0] = 0;
                  v263 = *(char *)(v2 + 159);
                  if (v263 >= 0)
                    v264 = (const std::string::value_type *)(v2 + 136);
                  else
                    v264 = *(const std::string::value_type **)(v2 + 136);
                  if (v263 >= 0)
                    v265 = *(unsigned __int8 *)(v2 + 159);
                  else
                    v265 = *(_QWORD *)(v2 + 144);
                  v266 = std::string::append(&v318, v264, v265);
                  v267 = *(_OWORD *)&v266->__r_.__value_.__l.__data_;
                  v322 = (void *)v266->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v321[32] = v267;
                  v266->__r_.__value_.__l.__size_ = 0;
                  v266->__r_.__value_.__r.__words[2] = 0;
                  v266->__r_.__value_.__r.__words[0] = 0;
                  v268 = std::string::append((std::string *)&v321[32], ",and ", 5uLL);
                  v269 = *(_OWORD *)&v268->__r_.__value_.__l.__data_;
                  buf.__r_.__value_.__r.__words[2] = v268->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v269;
                  v268->__r_.__value_.__l.__size_ = 0;
                  v268->__r_.__value_.__r.__words[2] = 0;
                  v268->__r_.__value_.__r.__words[0] = 0;
                  v270 = *(char *)(v2 + 207);
                  if (v270 >= 0)
                    v271 = (const std::string::value_type *)(v2 + 184);
                  else
                    v271 = *(const std::string::value_type **)(v2 + 184);
                  if (v270 >= 0)
                    v272 = *(unsigned __int8 *)(v2 + 207);
                  else
                    v272 = *(_QWORD *)(v2 + 192);
                  v273 = std::string::append(&buf, v271, v272);
                  v274 = (std::string::value_type *)v273->__r_.__value_.__r.__words[0];
                  v275 = v273->__r_.__value_.__l.__size_;
                  LODWORD(v316[0]) = v273->__r_.__value_.__r.__words[2];
                  *(_DWORD *)((char *)v316 + 3) = *(_DWORD *)((char *)&v273->__r_.__value_.__r.__words[2] + 3);
                  v276 = SHIBYTE(v273->__r_.__value_.__r.__words[2]);
                  v273->__r_.__value_.__l.__size_ = 0;
                  v273->__r_.__value_.__r.__words[2] = 0;
                  v273->__r_.__value_.__r.__words[0] = 0;
                  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(buf.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v322) & 0x80000000) == 0)
                    {
LABEL_575:
                      if ((SHIBYTE(v318.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_576;
                      goto LABEL_581;
                    }
                  }
                  else if ((SHIBYTE(v322) & 0x80000000) == 0)
                  {
                    goto LABEL_575;
                  }
                  operator delete(*(void **)&v321[32]);
                  if ((SHIBYTE(v318.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_576:
                    if ((v321[23] & 0x80000000) == 0)
                      goto LABEL_577;
                    goto LABEL_582;
                  }
LABEL_581:
                  operator delete(v318.__r_.__value_.__l.__data_);
                  if ((v321[23] & 0x80000000) == 0)
                  {
LABEL_577:
                    v49 = v282;
                    if (v282)
                    {
LABEL_578:
                      v277 = _Block_copy(v49);
LABEL_584:
                      v50 = v283;
                      *(_QWORD *)&v321[32] = v277;
                      *(_QWORD *)&v321[40] = v283;
                      if (v283)
                        dispatch_retain(v283);
                      if (v276 < 0)
                      {
                        std::string::__init_copy_ctor_external(&buf, v274, v275);
                      }
                      else
                      {
                        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v274;
                        buf.__r_.__value_.__l.__size_ = v275;
                        LODWORD(buf.__r_.__value_.__r.__words[2]) = v316[0];
                        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v316 + 3);
                        *((_BYTE *)&buf.__r_.__value_.__s + 23) = v276;
                      }
                      diag::Service::Internal::changeStateAndNotify_sync(v2, 0, (uint64_t)&v321[32], (uint64_t)&buf);
                      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(buf.__r_.__value_.__l.__data_);
                      if (*(_QWORD *)&v321[40])
                        dispatch_release(*(dispatch_object_t *)&v321[40]);
                      if (*(_QWORD *)&v321[32])
                        _Block_release(*(const void **)&v321[32]);
                      if (v276 < 0)
                        operator delete(v274);
                      goto LABEL_130;
                    }
LABEL_583:
                    v277 = 0;
                    goto LABEL_584;
                  }
LABEL_582:
                  operator delete(*(void **)v321);
                  v49 = v282;
                  if (v282)
                    goto LABEL_578;
                  goto LABEL_583;
                }
              }
              else
              {
                v256 = &v321[45];
                qmemcpy(v321, "DIAG can not start without a valid DMC file: ", 45);
              }
              if (v253 >= 0)
                v260 = (const void *)(v2 + 112);
              else
                v260 = (const void *)v223->__r_.__value_.__r.__words[0];
              memmove(v256, v260, v254);
              goto LABEL_561;
            }
LABEL_546:
            v246 = *(_OWORD **)v246;
            goto LABEL_547;
          }
          if (v226 >= 0)
            v229 = &v281;
          else
            v229 = (std::string *)v281.__r_.__value_.__r.__words[0];
LABEL_503:
          std::string::__assign_no_alias<false>((void **)(v2 + 112), v229, v228);
          goto LABEL_505;
        }
LABEL_303:
        if (v68 == &v279)
          goto LABEL_425;
        if ((*(_BYTE *)(v2 + 183) & 0x80) == 0)
        {
          if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__assign_no_alias<true>((_QWORD *)(v2 + 160), v279.__r_.__value_.__l.__data_, v279.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&v68->__r_.__value_.__l.__data_ = *(_OWORD *)&v279.__r_.__value_.__l.__data_;
            *(_QWORD *)(v2 + 176) = *((_QWORD *)&v279.__r_.__value_.__l + 2);
          }
          goto LABEL_425;
        }
        if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v71 = &v279;
        else
          v71 = (std::string *)v279.__r_.__value_.__r.__words[0];
        goto LABEL_407;
      }
      if (v49)
      {
        v66 = _Block_copy(v49);
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
        buf.__r_.__value_.__l.__size_ = (std::string::size_type)v50;
        if (!v50)
          goto LABEL_323;
      }
      else
      {
        v66 = 0;
        buf.__r_.__value_.__r.__words[0] = 0;
        buf.__r_.__value_.__l.__size_ = (std::string::size_type)v50;
        if (!v50)
        {
LABEL_323:
          diag::Service::Internal::start_sync((_QWORD *)v2, (uint64_t)&buf);
          if (v50)
            dispatch_release(v50);
          if (v66)
            goto LABEL_129;
          goto LABEL_130;
        }
      }
      dispatch_retain(v50);
      goto LABEL_323;
    }
LABEL_85:
    dispatch_retain(v50);
    goto LABEL_86;
  }
LABEL_138:
  if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v294.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_140:
      if ((SHIBYTE(__p[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_141;
LABEL_145:
      operator delete(__p[1].__r_.__value_.__l.__data_);
      if ((SHIBYTE(v296.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return MEMORY[0x1A858F2D8](v297);
LABEL_146:
      operator delete(v296.__r_.__value_.__l.__data_);
      return MEMORY[0x1A858F2D8](v297);
    }
  }
  else if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_140;
  }
  operator delete(__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(__p[1].__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_145;
LABEL_141:
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_146;
  return MEMORY[0x1A858F2D8](v297);
}

void sub_1A3540D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,dispatch_object_t a31,uint64_t a32,uint64_t a33,dispatch_object_t object,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61)
{
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&STACK[0x200]);
  if (SLOBYTE(STACK[0x227]) < 0)
    operator delete((void *)STACK[0x210]);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a29);
  if (a42 < 0)
    operator delete(a37);
  if (a48 < 0)
    operator delete(a43);
  if (a54 < 0)
    operator delete(a49);
  if (a60 < 0)
    operator delete(a55);
  MEMORY[0x1A858F2D8](&a61);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c130_ZTSN8dispatch8callbackIU13block_pointerFvN4diag7Service5StateENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c130_ZTSN8dispatch8callbackIU13block_pointerFvN4diag7Service5StateENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4diag7Service8InternalEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E4A0EDD0;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4diag7Service8InternalEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c51_ZTSNSt3__110shared_ptrIKN4diag7Service8InternalEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c51_ZTSNSt3__110shared_ptrIKN4diag7Service8InternalEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void diag::Service::Internal::changeStateAndNotify_sync(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  size_t v12;
  std::string::size_type v13;
  std::string *p_dst;
  size_t v15;
  std::string::size_type v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  int v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  std::string::size_type v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  uint64_t v36;
  const char *v37;
  size_t v38;
  size_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  int v49;
  const std::string::value_type *v50;
  std::string::size_type v51;
  std::string *v52;
  std::string::size_type v53;
  char v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  std::string::size_type v58;
  BasebandTransport *v59;
  uint64_t *v60;
  BasebandTransport *v61;
  uint64_t *v62;
  BasebandTransport *v63;
  uint64_t *v64;
  NSObject *v65;
  std::string *p_p;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  BOOL v71;
  const void *v72;
  int v73;
  void *v74;
  NSObject *v75;
  const void *v76;
  std::string v77;
  void *v78;
  size_t v79;
  int64_t v80;
  std::string v81;
  std::string __dst;
  std::string v83;
  std::string __p;
  std::string v85;
  _QWORD v86[2];
  std::string block;
  void *v88;
  void *v89;
  std::string v90;
  int v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  __p.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  __p.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAALL;
  __p.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAA00;
  if (a2 != 1)
  {
    v8 = *(NSObject **)(a1 + 384);
    *(_QWORD *)(a1 + 384) = 0;
    if (v8)
    {
      dispatch_group_leave(v8);
      dispatch_release(v8);
    }
  }
  v9 = *(int *)(a1 + 460);
  if ((_DWORD)v9 == a2)
  {
    if (a2 > 4)
      v10 = "Unknown";
    else
      v10 = off_1E4A0F378[a2];
    v12 = strlen(v10);
    if (v12 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v13 = v12;
    if (v12 >= 0x17)
    {
      v18 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v18 = v12 | 7;
      v19 = v18 + 1;
      p_dst = (std::string *)operator new(v18 + 1);
      __dst.__r_.__value_.__l.__size_ = v13;
      __dst.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v12;
      p_dst = &__dst;
      if (!v12)
      {
LABEL_23:
        p_dst->__r_.__value_.__s.__data_[v13] = 0;
        v20 = std::string::insert(&__dst, 0, "State not changed: ", 0x13uLL);
        v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        v83.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        v22 = std::string::append(&v83, ". ", 2uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        block.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&block.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        v24 = *(char *)(a4 + 23);
        if (v24 >= 0)
          v25 = (const std::string::value_type *)a4;
        else
          v25 = *(const std::string::value_type **)a4;
        if (v24 >= 0)
          v26 = *(unsigned __int8 *)(a4 + 23);
        else
          v26 = *(_QWORD *)(a4 + 8);
        v27 = std::string::append(&block, v25, v26);
        v28 = v27->__r_.__value_.__r.__words[0];
        v85.__r_.__value_.__r.__words[0] = v27->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v85.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v27->__r_.__value_.__r.__words[1] + 7);
        v29 = HIBYTE(v27->__r_.__value_.__r.__words[2]);
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __p.__r_.__value_.__r.__words[0] = v28;
        __p.__r_.__value_.__l.__size_ = v85.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v85.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v29;
        if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(block.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_33:
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_89;
LABEL_74:
            operator delete(__dst.__r_.__value_.__l.__data_);
            goto LABEL_89;
          }
        }
        else if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_33;
        }
        operator delete(v83.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_89;
        goto LABEL_74;
      }
    }
    memcpy(p_dst, v10, v13);
    goto LABEL_23;
  }
  *(_DWORD *)(a1 + 460) = a2;
  if (v9 > 4)
    v11 = "Unknown";
  else
    v11 = off_1E4A0F378[v9];
  v15 = strlen(v11);
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v16 = v15;
  if (v15 >= 0x17)
  {
    v30 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v30 = v15 | 7;
    v31 = v30 + 1;
    v17 = operator new(v30 + 1);
    v81.__r_.__value_.__l.__size_ = v16;
    v81.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
    v81.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    goto LABEL_38;
  }
  *((_BYTE *)&v81.__r_.__value_.__s + 23) = v15;
  v17 = &v81;
  if (v15)
LABEL_38:
    memcpy(v17, v11, v16);
  *((_BYTE *)v17 + v16) = 0;
  v32 = std::string::insert(&v81, 0, "State changed from: ", 0x14uLL);
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v85.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  v34 = std::string::append(&v85, " to: ", 5uLL);
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  v36 = *(int *)(a1 + 460);
  if (v36 > 4)
    v37 = "Unknown";
  else
    v37 = off_1E4A0F378[v36];
  v38 = strlen(v37);
  if (v38 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v39 = v38;
  if (v38 >= 0x17)
  {
    v41 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17)
      v41 = v38 | 7;
    v42 = v41 + 1;
    v40 = operator new(v41 + 1);
    v79 = v39;
    v80 = v42 | 0x8000000000000000;
    v78 = v40;
    goto LABEL_49;
  }
  HIBYTE(v80) = v38;
  v40 = &v78;
  if (v38)
LABEL_49:
    memcpy(v40, v37, v39);
  *((_BYTE *)v40 + v39) = 0;
  if (v80 >= 0)
    v43 = (const std::string::value_type *)&v78;
  else
    v43 = (const std::string::value_type *)v78;
  if (v80 >= 0)
    v44 = HIBYTE(v80);
  else
    v44 = v79;
  v45 = std::string::append(&__dst, v43, v44);
  v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
  v83.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v46;
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  v47 = std::string::append(&v83, ". ", 2uLL);
  v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  block.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
  *(_OWORD *)&block.__r_.__value_.__l.__data_ = v48;
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  v49 = *(char *)(a4 + 23);
  if (v49 >= 0)
    v50 = (const std::string::value_type *)a4;
  else
    v50 = *(const std::string::value_type **)a4;
  if (v49 >= 0)
    v51 = *(unsigned __int8 *)(a4 + 23);
  else
    v51 = *(_QWORD *)(a4 + 8);
  v52 = std::string::append(&block, v50, v51);
  v53 = v52->__r_.__value_.__r.__words[0];
  v86[0] = v52->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v86 + 7) = *(std::string::size_type *)((char *)&v52->__r_.__value_.__r.__words[1] + 7);
  v54 = HIBYTE(v52->__r_.__value_.__r.__words[2]);
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = v53;
  __p.__r_.__value_.__l.__size_ = v86[0];
  *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v86 + 7);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v54;
  if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(block.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_66:
      if ((SHIBYTE(v80) & 0x80000000) == 0)
        goto LABEL_67;
      goto LABEL_77;
    }
  }
  else if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_66;
  }
  operator delete(v83.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v80) & 0x80000000) == 0)
  {
LABEL_67:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_68;
    goto LABEL_78;
  }
LABEL_77:
  operator delete(v78);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_68:
    if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_69;
    goto LABEL_79;
  }
LABEL_78:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_69:
    if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_70;
    goto LABEL_80;
  }
LABEL_79:
  operator delete(v85.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_70:
    if (*(_DWORD *)(a1 + 460) != 4)
      goto LABEL_89;
    goto LABEL_81;
  }
LABEL_80:
  operator delete(v81.__r_.__value_.__l.__data_);
  if (*(_DWORD *)(a1 + 460) != 4)
    goto LABEL_89;
LABEL_81:
  v55 = *(_QWORD *)(a1 + 216);
  if (v55)
  {
    v56 = *(_QWORD **)(v55 + 16);
    v57 = (_QWORD *)(v55 + 24);
    if (v56 != (_QWORD *)(v55 + 24))
    {
      do
      {
        diag::DIAGReader::stop((diag::DIAGReader *)v56[5]);
        v69 = (_QWORD *)v56[1];
        if (v69)
        {
          do
          {
            v70 = v69;
            v69 = (_QWORD *)*v69;
          }
          while (v69);
        }
        else
        {
          do
          {
            v70 = (_QWORD *)v56[2];
            v71 = *v70 == (_QWORD)v56;
            v56 = v70;
          }
          while (!v71);
        }
        v56 = v70;
      }
      while (v70 != v57);
    }
  }
  v58 = MEMORY[0x1E0C809B0];
  v59 = *(BasebandTransport **)(a1 + 288);
  if (v59)
  {
    BasebandTransport::close(v59);
    v60 = *(uint64_t **)(a1 + 288);
    block.__r_.__value_.__r.__words[0] = v58;
    block.__r_.__value_.__l.__size_ = 0x40000000;
    block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN17BasebandTransport9dumpStateEb_block_invoke;
    v88 = &__block_descriptor_tmp_70;
    v89 = v60;
    v90.__r_.__value_.__s.__data_[0] = 0;
    ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v60 + 9, (uint64_t)&block);
  }
  v61 = *(BasebandTransport **)(a1 + 304);
  if (v61)
  {
    BasebandTransport::close(v61);
    v62 = *(uint64_t **)(a1 + 304);
    block.__r_.__value_.__r.__words[0] = v58;
    block.__r_.__value_.__l.__size_ = 0x40000000;
    block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN17BasebandTransport9dumpStateEb_block_invoke;
    v88 = &__block_descriptor_tmp_70;
    v89 = v62;
    v90.__r_.__value_.__s.__data_[0] = 0;
    ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v62 + 9, (uint64_t)&block);
  }
  v63 = *(BasebandTransport **)(a1 + 320);
  if (v63)
  {
    BasebandTransport::close(v63);
    v64 = *(uint64_t **)(a1 + 320);
    block.__r_.__value_.__r.__words[0] = v58;
    block.__r_.__value_.__l.__size_ = 0x40000000;
    block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN17BasebandTransport9dumpStateEb_block_invoke;
    v88 = &__block_descriptor_tmp_70;
    v89 = v64;
    v90.__r_.__value_.__s.__data_[0] = 0;
    ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v64 + 9, (uint64_t)&block);
  }
LABEL_89:
  v65 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    LODWORD(block.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)block.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
    _os_log_impl(&dword_1A343C000, v65, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&block, 0xCu);
  }
  v67 = *(_QWORD *)(a1 + 216);
  if (v67)
  {
    v68 = 7;
    switch(*(_DWORD *)(a1 + 460))
    {
      case 0:
        goto LABEL_107;
      case 1:
        v68 = 5;
        goto LABEL_107;
      case 2:
        v68 = 8;
        goto LABEL_107;
      case 4:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&block, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        else
          block = __p;
        diag::DIAGReaderManager::pushInfo(v67, 0, (uint64_t)&block);
        goto LABEL_108;
      default:
        v68 = 16;
LABEL_107:
        *((_BYTE *)&block.__r_.__value_.__s + 23) = 0;
        block.__r_.__value_.__s.__data_[0] = 0;
        diag::DIAGReaderManager::pushInfo(v67, v68, (uint64_t)&block);
LABEL_108:
        if ((SHIBYTE(block.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          break;
        operator delete(block.__r_.__value_.__l.__data_);
        v72 = *(const void **)a3;
        if (!*(_QWORD *)a3)
          goto LABEL_130;
        goto LABEL_110;
    }
  }
  v72 = *(const void **)a3;
  if (!*(_QWORD *)a3)
  {
LABEL_130:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_131;
  }
LABEL_110:
  if (!*(_QWORD *)(a3 + 8))
    goto LABEL_130;
  v73 = *(_DWORD *)(a1 + 460);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v77 = __p;
LABEL_116:
    v74 = _Block_copy(v72);
    goto LABEL_117;
  }
  std::string::__init_copy_ctor_external(&v77, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  v72 = *(const void **)a3;
  if (*(_QWORD *)a3)
    goto LABEL_116;
  v74 = 0;
LABEL_117:
  v75 = *(NSObject **)(a3 + 8);
  block.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
  block.__r_.__value_.__l.__size_ = 1174405120;
  block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN4diag7Service5StateENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEclIJS3_SA_EEEvDpT__block_invoke;
  v88 = &__block_descriptor_tmp_31_1;
  if (v74)
  {
    v89 = _Block_copy(v74);
    v91 = v73;
    if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_119:
      v90 = v77;
      goto LABEL_122;
    }
  }
  else
  {
    v89 = 0;
    v91 = v73;
    if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_119;
  }
  std::string::__init_copy_ctor_external(&v90, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
LABEL_122:
  dispatch_async(v75, &block);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v90.__r_.__value_.__l.__data_);
    v76 = v89;
    if (!v89)
      goto LABEL_127;
    goto LABEL_126;
  }
  v76 = v89;
  if (v89)
LABEL_126:
    _Block_release(v76);
LABEL_127:
  if (v74)
    _Block_release(v74);
  if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_130;
  operator delete(v77.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_131:
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1A3541D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (*(char *)(v52 - 153) < 0)
    operator delete(*(void **)(v52 - 176));
  if (a46 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN4diag7Service8Internal10setup_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  std::string v8;
  _QWORD block[4];
  void *aBlock;
  std::string __p;
  int v12;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(const void **)(v2 + 392);
  if (!v3 || !*(_QWORD *)(v2 + 400))
    return;
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    v8 = *(std::string *)a2;
LABEL_6:
    v4 = _Block_copy(v3);
    goto LABEL_7;
  }
  std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  v3 = *(const void **)(v2 + 392);
  if (v3)
    goto LABEL_6;
  v4 = 0;
LABEL_7:
  v5 = *(NSObject **)(v2 + 400);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN4diag7Service5StateENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEclIJS3_SA_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_31_1;
  if (v4)
    v6 = _Block_copy(v4);
  else
    v6 = 0;
  aBlock = v6;
  v12 = 4;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
  else
    __p = v8;
  dispatch_async(v5, block);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v7 = aBlock;
    if (!aBlock)
      goto LABEL_18;
    goto LABEL_17;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  v7 = aBlock;
  if (aBlock)
LABEL_17:
    _Block_release(v7);
LABEL_18:
  if (v4)
    _Block_release(v4);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_1A354209C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *aBlock)
{
  const void *v19;

  if (aBlock)
    _Block_release(aBlock);
  if (v19)
    _Block_release(v19);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN4diag7Service5StateENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEclIJS3_SA_EEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::string __p;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned int *)(a1 + 64);
  if (*(char *)(a1 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
  else
    __p = *(std::string *)(a1 + 40);
  (*(void (**)(uint64_t, uint64_t, std::string *))(v1 + 16))(v1, v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1A3542170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c127_ZTSN8dispatch5blockIU13block_pointerFvN4diag7Service5StateENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEE40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  std::string *v5;
  __int128 v6;

  v4 = *(void **)(a2 + 32);
  if (v4)
    v4 = _Block_copy(v4);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1A35421F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 32);
  if (v3)
    _Block_release(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c127_ZTSN8dispatch5blockIU13block_pointerFvN4diag7Service5StateENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEE40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  const void *v2;

  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    v2 = *(const void **)(a1 + 32);
    if (!v2)
      return;
    goto LABEL_5;
  }
  v2 = *(const void **)(a1 + 32);
  if (v2)
LABEL_5:
    _Block_release(v2);
}

void diag::Service::Internal::start_sync(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD aBlock[6];
  std::__shared_weak_count *v21;
  void *v22;
  dispatch_object_t v23;
  void *v24;
  dispatch_object_t object;
  uint64_t v26;
  std::__shared_weak_count *v27;

  v4 = a1[9];
  v3 = (std::__shared_weak_count *)a1[10];
  v26 = v4;
  if (!v3 || (v6 = std::__shared_weak_count::lock(v3), (v27 = v6) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = a1[29];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4diag7Service8Internal10start_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_43_0;
  aBlock[4] = a1;
  aBlock[5] = v4;
  v21 = v6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = *(void **)a2;
  if (*(_QWORD *)a2)
    v10 = _Block_copy(v10);
  v11 = *(NSObject **)(a2 + 8);
  v22 = v10;
  v23 = v11;
  if (v11)
    dispatch_retain(v11);
  v12 = _Block_copy(aBlock);
  v13 = a1[11];
  if (v13)
    dispatch_retain(v13);
  v24 = v12;
  object = v13;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 64))(v7, &v24);
  if (object)
    dispatch_release(object);
  if (v24)
    _Block_release(v24);
  if (v23)
    dispatch_release(v23);
  if (v22)
    _Block_release(v22);
  v14 = v21;
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v27;
  if (v27)
  {
    v18 = (unint64_t *)&v27->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1A3542420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;

  va_start(va, a11);
  dispatch::callback<void({block_pointer})(BOOL)>::~callback((uint64_t)va);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v12);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v13 - 64);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal10start_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke(capabilities::diag *a1, int a2)
{
  _QWORD *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  const void *v16;
  void *v17;
  NSObject *v18;
  const void *v19;
  void *v20;
  NSObject *v21;
  void *__p;
  __int128 v23;
  void *v24;
  NSObject *v25;
  void *v26;
  NSObject *v27;
  _QWORD aBlock[6];
  std::__shared_weak_count *v29;
  void *v30;
  dispatch_object_t object;
  const void *v32;
  dispatch_object_t v33;

  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (a2)
  {
    if (v3[52] && capabilities::diag::supportsMultipleMasks(a1))
    {
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[2] = ___ZN4diag7Service8Internal10start_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke_2;
      aBlock[3] = &__block_descriptor_tmp_41_0;
      v5 = *((_QWORD *)a1 + 5);
      v4 = (std::__shared_weak_count *)*((_QWORD *)a1 + 6);
      aBlock[4] = v3;
      aBlock[5] = v5;
      v6 = v3[29];
      aBlock[1] = 1174405120;
      v29 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      v9 = (void *)*((_QWORD *)a1 + 7);
      if (v9)
        v9 = _Block_copy(v9);
      v10 = *((_QWORD *)a1 + 8);
      v30 = v9;
      object = v10;
      if (v10)
        dispatch_retain(v10);
      v11 = _Block_copy(aBlock);
      v12 = v3[11];
      if (v12)
        dispatch_retain(v12);
      v32 = v11;
      v33 = v12;
      (*(void (**)(uint64_t, uint64_t, const void **))(*(_QWORD *)v6 + 136))(v6, 2, &v32);
      if (v33)
        dispatch_release(v33);
      if (v32)
        _Block_release(v32);
      if (object)
        dispatch_release(object);
      if (v30)
        _Block_release(v30);
      v13 = v29;
      if (v29)
      {
        v14 = (unint64_t *)&v29->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      return;
    }
    v19 = (const void *)*((_QWORD *)a1 + 7);
    if (v19)
    {
      v20 = _Block_copy(v19);
      v21 = *((_QWORD *)a1 + 8);
      v26 = v20;
      v27 = v21;
      if (!v21)
      {
LABEL_38:
        diag::Service::Internal::finishStart_sync((uint64_t)v3, (uint64_t)&v26, 0);
        if (v21)
          dispatch_release(v21);
        if (v20)
          _Block_release(v20);
        return;
      }
    }
    else
    {
      v20 = 0;
      v21 = *((_QWORD *)a1 + 8);
      v26 = 0;
      v27 = v21;
      if (!v21)
        goto LABEL_38;
    }
    dispatch_retain(v21);
    goto LABEL_38;
  }
  v16 = (const void *)*((_QWORD *)a1 + 7);
  if (!v16)
  {
    v17 = 0;
    v18 = *((_QWORD *)a1 + 8);
    v24 = 0;
    v25 = v18;
    if (!v18)
      goto LABEL_29;
    goto LABEL_28;
  }
  v17 = _Block_copy(v16);
  v18 = *((_QWORD *)a1 + 8);
  v24 = v17;
  v25 = v18;
  if (v18)
LABEL_28:
    dispatch_retain(v18);
LABEL_29:
  __p = operator new(0x30uLL);
  v23 = xmmword_1A3584420;
  strcpy((char *)__p, "Error configuring interface while starting");
  diag::Service::Internal::changeStateAndNotify_sync((uint64_t)v3, 4u, (uint64_t)&v24, (uint64_t)&__p);
  if (SHIBYTE(v23) < 0)
    operator delete(__p);
  if (v18)
    dispatch_release(v18);
  if (v17)
    _Block_release(v17);
}

void sub_1A35426F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v3 - 64);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v2);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1A3542728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A354273C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal10start_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke_2(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  const void *v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *v18;
  NSObject *v19;
  void *v20;
  NSObject *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  const void *v25;
  void *v26;
  NSObject *v27;
  void *__p;
  __int128 v29;
  void *v30;
  NSObject *v31;
  std::string v32;
  void *v33;
  NSObject *v34;
  _QWORD aBlock[6];
  std::__shared_weak_count *v36;
  void *v37;
  dispatch_object_t v38;
  void *v39;
  dispatch_object_t object;
  std::string v41;
  _QWORD v42[6];
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD block[6];

  v3 = a1[4];
  if (a2)
  {
    v41.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
    v41.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAALL;
    v41.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAA00;
    v4 = *(_QWORD *)(v3 + 288);
    v43 = 0;
    v44 = &v43;
    v45 = 0x2000000000;
    v46 = 0;
    v5 = MEMORY[0x1E0C809B0];
    v42[0] = MEMORY[0x1E0C809B0];
    v42[1] = 0x40000000;
    v42[2] = ___ZN17BasebandTransportdeEv_block_invoke;
    v42[3] = &unk_1E4A0A0E8;
    v42[4] = &v43;
    v42[5] = v4;
    v47 = v42;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    block[3] = &__block_descriptor_tmp_77;
    block[4] = v4 + 72;
    block[5] = &v47;
    v6 = *(NSObject **)(v4 + 88);
    if (*(_QWORD *)(v4 + 96))
      dispatch_async_and_wait(v6, block);
    else
      dispatch_sync(v6, block);
    v10 = v44[3];
    _Block_object_dispose(&v43, 8);
    v11 = *(_QWORD *)(v3 + 416);
    *(_QWORD *)(v3 + 424) = v10;
    *(_QWORD *)(v3 + 432) = v11;
    *(_DWORD *)(v3 + 440) = 2;
    if (ETLDIAGLoggingConfigure())
    {
      v12 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(block[0]) = 0;
        _os_log_impl(&dword_1A343C000, v12, OS_LOG_TYPE_DEFAULT, "#I Sleep DMC configured", (uint8_t *)block, 2u);
      }
      v13 = *(_QWORD *)(v3 + 232);
      aBlock[0] = v5;
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN4diag7Service8Internal10start_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke_36;
      aBlock[3] = &__block_descriptor_tmp_39_1;
      v15 = a1[5];
      v14 = (std::__shared_weak_count *)a1[6];
      aBlock[4] = v3;
      aBlock[5] = v15;
      v36 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      v18 = (void *)a1[7];
      if (v18)
        v18 = _Block_copy(v18);
      v19 = a1[8];
      v37 = v18;
      v38 = v19;
      if (v19)
        dispatch_retain(v19);
      v20 = _Block_copy(aBlock);
      v21 = *(NSObject **)(v3 + 88);
      if (v21)
        dispatch_retain(v21);
      v39 = v20;
      object = v21;
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v13 + 136))(v13, 1, &v39);
      if (object)
        dispatch_release(object);
      if (v39)
        _Block_release(v39);
      if (v38)
        dispatch_release(v38);
      if (v37)
        _Block_release(v37);
      v22 = v36;
      if (v36)
      {
        v23 = (unint64_t *)&v36->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
LABEL_56:
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      return;
    }
    v25 = (const void *)a1[7];
    if (v25)
    {
      v26 = _Block_copy(v25);
      v27 = a1[8];
      v33 = v26;
      v34 = v27;
      if (!v27)
      {
LABEL_43:
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v32, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
        else
          v32 = v41;
        diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v33, (uint64_t)&v32);
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v32.__r_.__value_.__l.__data_);
        if (v27)
          dispatch_release(v27);
        if (v26)
          _Block_release(v26);
        goto LABEL_56;
      }
    }
    else
    {
      v26 = 0;
      v27 = a1[8];
      v33 = 0;
      v34 = v27;
      if (!v27)
        goto LABEL_43;
    }
    dispatch_retain(v27);
    goto LABEL_43;
  }
  v7 = (const void *)a1[7];
  if (!v7)
  {
    v8 = 0;
    v9 = a1[8];
    v30 = 0;
    v31 = v9;
    if (!v9)
      goto LABEL_7;
    goto LABEL_6;
  }
  v8 = _Block_copy(v7);
  v9 = a1[8];
  v30 = v8;
  v31 = v9;
  if (v9)
LABEL_6:
    dispatch_retain(v9);
LABEL_7:
  __p = operator new(0x28uLL);
  v29 = xmmword_1A35802F0;
  strcpy((char *)__p, "Error switching to sleep logging mask");
  diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v30, (uint64_t)&__p);
  if (SHIBYTE(v29) < 0)
    operator delete(__p);
  if (v9)
    dispatch_release(v9);
  if (v8)
    _Block_release(v8);
}

void sub_1A3542B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a24);
  if (a42 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal10start_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke_36(_QWORD *a1, int a2)
{
  uint64_t v3;
  const void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *__p;
  __int128 v10;
  void *v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;

  v3 = a1[4];
  v4 = (const void *)a1[7];
  if (a2)
  {
    if (v4)
    {
      v5 = _Block_copy(v4);
      v6 = a1[8];
      v13 = v5;
      v14 = v6;
      if (!v6)
      {
LABEL_5:
        diag::Service::Internal::finishStart_sync(v3, (uint64_t)&v13, 1);
        if (v6)
          dispatch_release(v6);
        if (v5)
          _Block_release(v5);
        return;
      }
    }
    else
    {
      v5 = 0;
      v6 = a1[8];
      v13 = 0;
      v14 = v6;
      if (!v6)
        goto LABEL_5;
    }
    dispatch_retain(v6);
    goto LABEL_5;
  }
  if (!v4)
  {
    v7 = 0;
    v8 = a1[8];
    v11 = 0;
    v12 = v8;
    if (!v8)
      goto LABEL_12;
    goto LABEL_11;
  }
  v7 = _Block_copy(v4);
  v8 = a1[8];
  v11 = v7;
  v12 = v8;
  if (v8)
LABEL_11:
    dispatch_retain(v8);
LABEL_12:
  __p = operator new(0x28uLL);
  v10 = xmmword_1A3581DD0;
  strcpy((char *)__p, "Error switching to merged logging mask");
  diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v11, (uint64_t)&__p);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  if (v8)
    dispatch_release(v8);
  if (v7)
    _Block_release(v7);
}

void sub_1A3542D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1A3542D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A3542D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void diag::Service::Internal::finishStart_sync(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  void *v22;
  NSObject *v23;
  void *v24;
  NSObject *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD aBlock[6];
  std::__shared_weak_count *v33;
  void *v34;
  dispatch_object_t v35;
  void *v36;
  dispatch_object_t object;
  std::string v38;
  void *v39;
  NSObject *v40;
  std::string __p;
  _QWORD v42[6];
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t block;
  uint64_t v49;
  _QWORD *(*v50)(uint64_t);
  void *v51;
  uint64_t v52;
  _QWORD *v53;

  v5 = MEMORY[0x1E0C809B0];
  if (!*(_QWORD *)(a1 + 408))
    goto LABEL_26;
  __p.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  __p.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAALL;
  __p.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAA00;
  v7 = *(_QWORD *)(a1 + 288);
  v43 = 0;
  v44 = &v43;
  v45 = 0x2000000000;
  v42[0] = MEMORY[0x1E0C809B0];
  v42[1] = 0x40000000;
  v42[2] = ___ZN17BasebandTransportdeEv_block_invoke;
  v42[3] = &unk_1E4A0A0E8;
  v42[4] = &v43;
  v42[5] = v7;
  v46 = 0;
  v47 = v42;
  block = MEMORY[0x1E0C809B0];
  v49 = 0x40000000;
  v50 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v51 = &__block_descriptor_tmp_77;
  v52 = v7 + 72;
  v53 = &v47;
  v8 = *(NSObject **)(v7 + 88);
  if (*(_QWORD *)(v7 + 96))
    dispatch_async_and_wait(v8, &block);
  else
    dispatch_sync(v8, &block);
  v9 = v44[3];
  _Block_object_dispose(&v43, 8);
  v10 = *(_QWORD *)(a1 + 408);
  *(_QWORD *)(a1 + 424) = v9;
  *(_QWORD *)(a1 + 432) = v10;
  *(_DWORD *)(a1 + 440) = a3;
  v11 = ETLDIAGLoggingConfigure();
  v12 = v11;
  if (v11)
  {
    v13 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(block) = 0;
      _os_log_impl(&dword_1A343C000, v13, OS_LOG_TYPE_DEFAULT, "#I Merged DMC configured", (uint8_t *)&block, 2u);
    }
    goto LABEL_22;
  }
  if (!*(_QWORD *)a2)
  {
    v14 = 0;
    v15 = *(NSObject **)(a2 + 8);
    v39 = 0;
    v40 = v15;
    if (!v15)
      goto LABEL_11;
    goto LABEL_10;
  }
  v14 = _Block_copy(*(const void **)a2);
  v15 = *(NSObject **)(a2 + 8);
  v39 = v14;
  v40 = v15;
  if (v15)
LABEL_10:
    dispatch_retain(v15);
LABEL_11:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v38, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v38 = __p;
  diag::Service::Internal::changeStateAndNotify_sync(a1, 4u, (uint64_t)&v39, (uint64_t)&v38);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (v15)
    dispatch_release(v15);
  if (v14)
    _Block_release(v14);
LABEL_22:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v12 & 1) == 0)
      return;
  }
  else if ((v12 & 1) == 0)
  {
    return;
  }
LABEL_26:
  v17 = *(_QWORD *)(a1 + 72);
  v16 = *(std::__shared_weak_count **)(a1 + 80);
  block = v17;
  if (!v16 || (v18 = std::__shared_weak_count::lock(v16), (v49 = (uint64_t)v18) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = *(_QWORD *)(a1 + 232);
  aBlock[0] = v5;
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4diag7Service8Internal16finishStart_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE20ETLDIAGLoggingMaskID_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_50_0;
  aBlock[4] = a1;
  aBlock[5] = v17;
  v33 = v18;
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v21 = __ldxr(p_shared_owners);
  while (__stxr(v21 + 1, p_shared_owners));
  v22 = *(void **)a2;
  if (*(_QWORD *)a2)
    v22 = _Block_copy(v22);
  v23 = *(NSObject **)(a2 + 8);
  v34 = v22;
  v35 = v23;
  if (v23)
    dispatch_retain(v23);
  v24 = _Block_copy(aBlock);
  v25 = *(NSObject **)(a1 + 88);
  if (v25)
    dispatch_retain(v25);
  v36 = v24;
  object = v25;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v19 + 72))(v19, &v36);
  if (object)
    dispatch_release(object);
  if (v36)
    _Block_release(v36);
  if (v35)
    dispatch_release(v35);
  if (v34)
    _Block_release(v34);
  v26 = v33;
  if (v33)
  {
    v27 = (unint64_t *)&v33->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)v49;
  if (v49)
  {
    v30 = (unint64_t *)(v49 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_1A3543114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a28);
  if (a35 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIN4diag7Service8InternalEEE56c130_ZTSN8dispatch8callbackIU13block_pointerFvN4diag7Service5StateENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  NSObject *v8;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[7];
  if (v7)
    v7 = _Block_copy(v7);
  v8 = a2[8];
  a1[7] = v7;
  a1[8] = v8;
  if (v8)
    dispatch_retain(v8);
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIN4diag7Service8InternalEEE56c130_ZTSN8dispatch8callbackIU13block_pointerFvN4diag7Service5StateENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void ___ZN4diag7Service8Internal16finishStart_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE20ETLDIAGLoggingMaskID_block_invoke(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  capabilities::diag *v7;
  int Bool;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *v15;
  NSObject *v16;
  void *v17;
  NSObject *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  const void *v25;
  void *v26;
  NSObject *v27;
  const void *v28;
  void *v29;
  NSObject *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  void *v36;
  NSObject *v37;
  void *v38;
  NSObject *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  char __p[23];
  char v44;
  void *v45;
  NSObject *v46;
  _QWORD v47[6];
  std::__shared_weak_count *v48;
  void *v49;
  dispatch_object_t v50;
  void *v51;
  dispatch_object_t v52;
  void *v53;
  char v54;
  void *v55;
  NSObject *v56;
  _QWORD aBlock[6];
  std::__shared_weak_count *v58;
  void *v59;
  dispatch_object_t object;
  const void *v61;
  dispatch_object_t v62;
  _QWORD v63[2];
  const __CFString *v64;

  v3 = a1[4];
  if (a2)
  {
    v4 = *(_QWORD *)(v3 + 216);
    if (v4)
    {
      v5 = *(_QWORD **)(v4 + 16);
      v6 = (_QWORD *)(v4 + 24);
      if (v5 != (_QWORD *)(v4 + 24))
      {
        do
        {
          diag::DIAGReader::start((diag::DIAGReader *)v5[5]);
          v22 = (_QWORD *)v5[1];
          if (v22)
          {
            do
            {
              v23 = v22;
              v22 = (_QWORD *)*v22;
            }
            while (v22);
          }
          else
          {
            do
            {
              v23 = (_QWORD *)v5[2];
              v24 = *v23 == (_QWORD)v5;
              v5 = v23;
            }
            while (!v24);
          }
          v5 = v23;
        }
        while (v23 != v6);
      }
    }
    v63[0] = 0xAAAAAAAAAAAAAAAALL;
    v63[1] = 0xAAAAAAAAAAAAAAAALL;
    v7 = (capabilities::diag *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v63, *(const __CFDictionary **)(v3 + 208));
    if (capabilities::diag::supportsBuffering(v7))
    {
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v64, diag::config::kBufferingOnAPAwake[0]);
      Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v63, v64);
      MEMORY[0x1A858F29C](&v64);
      if (Bool)
      {
        v9 = *(_QWORD *)(v3 + 232);
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[2] = ___ZN4diag7Service8Internal16finishStart_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE20ETLDIAGLoggingMaskID_block_invoke_2;
        aBlock[3] = &__block_descriptor_tmp_45_1;
        v11 = a1[5];
        v10 = (std::__shared_weak_count *)a1[6];
        aBlock[4] = v3;
        aBlock[5] = v11;
        v12 = *(_QWORD *)(v3 + 448);
        aBlock[1] = 1174405120;
        v58 = v10;
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        v15 = (void *)a1[7];
        if (v15)
          v15 = _Block_copy(v15);
        v16 = a1[8];
        v59 = v15;
        object = v16;
        if (v16)
          dispatch_retain(v16);
        v17 = _Block_copy(aBlock);
        v18 = *(NSObject **)(v3 + 88);
        if (v18)
          dispatch_retain(*(dispatch_object_t *)(v3 + 88));
        v61 = v17;
        v62 = v18;
        (*(void (**)(uint64_t, uint64_t, const void **))(*(_QWORD *)v9 + 128))(v9, v12, &v61);
        if (v62)
          dispatch_release(v62);
        if (v61)
          _Block_release(v61);
        if (object)
          dispatch_release(object);
        if (v59)
          _Block_release(v59);
        v19 = v58;
        if (v58)
        {
          v20 = (unint64_t *)&v58->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
LABEL_53:
        if (*(_BYTE *)(v3 + 446))
        {
          v47[0] = MEMORY[0x1E0C809B0];
          v47[2] = ___ZN4diag7Service8Internal16finishStart_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE20ETLDIAGLoggingMaskID_block_invoke_46;
          v47[3] = &__block_descriptor_tmp_48_2;
          v32 = a1[5];
          v31 = (std::__shared_weak_count *)a1[6];
          v47[4] = v3;
          v47[5] = v32;
          v33 = *(_QWORD *)(v3 + 232);
          v47[1] = 1174405120;
          v48 = v31;
          if (v31)
          {
            v34 = (unint64_t *)&v31->__shared_owners_;
            do
              v35 = __ldxr(v34);
            while (__stxr(v35 + 1, v34));
          }
          v36 = (void *)a1[7];
          if (v36)
            v36 = _Block_copy(v36);
          v37 = a1[8];
          v49 = v36;
          v50 = v37;
          if (v37)
            dispatch_retain(v37);
          v38 = _Block_copy(v47);
          v39 = *(NSObject **)(v3 + 88);
          if (v39)
            dispatch_retain(v39);
          v51 = v38;
          v52 = v39;
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v33 + 88))(v33, &v51);
          if (v52)
            dispatch_release(v52);
          if (v51)
            _Block_release(v51);
          if (v50)
            dispatch_release(v50);
          if (v49)
            _Block_release(v49);
          v40 = v48;
          if (v48)
          {
            v41 = (unint64_t *)&v48->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
          }
        }
        MEMORY[0x1A858F2D8](v63);
        return;
      }
    }
    v28 = (const void *)a1[7];
    if (v28)
    {
      v29 = _Block_copy(v28);
      v30 = a1[8];
      v55 = v29;
      v56 = v30;
      if (!v30)
      {
LABEL_47:
        v54 = 0;
        LOBYTE(v53) = 0;
        diag::Service::Internal::changeStateAndNotify_sync(v3, 1u, (uint64_t)&v55, (uint64_t)&v53);
        if (v54 < 0)
          operator delete(v53);
        if (v30)
          dispatch_release(v30);
        if (v29)
          _Block_release(v29);
        goto LABEL_53;
      }
    }
    else
    {
      v29 = 0;
      v30 = a1[8];
      v55 = 0;
      v56 = v30;
      if (!v30)
        goto LABEL_47;
    }
    dispatch_retain(v30);
    goto LABEL_47;
  }
  v25 = (const void *)a1[7];
  if (!v25)
  {
    v26 = 0;
    v27 = a1[8];
    v45 = 0;
    v46 = v27;
    if (!v27)
      goto LABEL_38;
    goto LABEL_37;
  }
  v26 = _Block_copy(v25);
  v27 = a1[8];
  v45 = v26;
  v46 = v27;
  if (v27)
LABEL_37:
    dispatch_retain(v27);
LABEL_38:
  strcpy(__p, "Error completing start");
  v44 = 22;
  diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v45, (uint64_t)__p);
  if (v44 < 0)
    operator delete(*(void **)__p);
  if (v27)
    dispatch_release(v27);
  if (v26)
    _Block_release(v26);
}

void sub_1A35436F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v3 - 120);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v2);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1);
  MEMORY[0x1A858F2D8](v3 - 104);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal16finishStart_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE20ETLDIAGLoggingMaskID_block_invoke_2(_QWORD *a1, int a2)
{
  uint64_t v3;
  NSObject *v4;
  const void *v5;
  void *v6;
  NSObject *v7;
  const void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  __int128 v12;
  void *v13;
  NSObject *v14;
  void *__p;
  char v16;
  void *v17;
  NSObject *v18;
  uint8_t buf[16];

  v3 = a1[4];
  if (a2)
  {
    v4 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A343C000, v4, OS_LOG_TYPE_DEFAULT, "#I Buffering on AP awake is enabled", buf, 2u);
    }
    *(_BYTE *)(v3 + 456) = 1;
    v5 = (const void *)a1[7];
    if (v5)
    {
      v6 = _Block_copy(v5);
      v7 = a1[8];
      v17 = v6;
      v18 = v7;
      if (!v7)
      {
LABEL_7:
        v16 = 0;
        LOBYTE(__p) = 0;
        diag::Service::Internal::changeStateAndNotify_sync(v3, 1u, (uint64_t)&v17, (uint64_t)&__p);
        if (v16 < 0)
          operator delete(__p);
        if (v7)
          dispatch_release(v7);
        if (v6)
          _Block_release(v6);
        return;
      }
    }
    else
    {
      v6 = 0;
      v7 = a1[8];
      v17 = 0;
      v18 = v7;
      if (!v7)
        goto LABEL_7;
    }
    dispatch_retain(v7);
    goto LABEL_7;
  }
  *(_BYTE *)(v3 + 456) = 0;
  v8 = (const void *)a1[7];
  if (!v8)
  {
    v9 = 0;
    v10 = a1[8];
    v13 = 0;
    v14 = v10;
    if (!v10)
      goto LABEL_16;
    goto LABEL_15;
  }
  v9 = _Block_copy(v8);
  v10 = a1[8];
  v13 = v9;
  v14 = v10;
  if (v10)
LABEL_15:
    dispatch_retain(v10);
LABEL_16:
  v11 = operator new(0x30uLL);
  v12 = xmmword_1A3584420;
  strcpy((char *)v11, "Buffering on AP awake could not be enabled");
  diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v13, (uint64_t)&v11);
  if (SHIBYTE(v12) < 0)
    operator delete(v11);
  if (v10)
    dispatch_release(v10);
  if (v9)
    _Block_release(v9);
}

void sub_1A35439A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1A35439CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
    operator delete(__p);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal16finishStart_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE20ETLDIAGLoggingMaskID_block_invoke_46(_QWORD *a1, int a2)
{
  uint64_t v2;
  NSObject *v3;
  const void *v5;
  void *v6;
  NSObject *v7;
  void *__p;
  __int128 v9;
  void *v10;
  NSObject *v11;
  uint8_t buf[16];

  v2 = a1[4];
  if (a2)
  {
    v3 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEFAULT, "#I Stopped DIAG transport because QDSS is active", buf, 2u);
    }
    return;
  }
  v5 = (const void *)a1[7];
  if (!v5)
  {
    v6 = 0;
    v7 = a1[8];
    v10 = 0;
    v11 = v7;
    if (!v7)
      goto LABEL_7;
    goto LABEL_6;
  }
  v6 = _Block_copy(v5);
  v7 = a1[8];
  v10 = v6;
  v11 = v7;
  if (v7)
LABEL_6:
    dispatch_retain(v7);
LABEL_7:
  __p = operator new(0x20uLL);
  v9 = xmmword_1A357F950;
  strcpy((char *)__p, "Error stopping configurer");
  diag::Service::Internal::changeStateAndNotify_sync(v2, 4u, (uint64_t)&v10, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0)
    operator delete(__p);
  if (v7)
    dispatch_release(v7);
  if (v6)
    _Block_release(v6);
}

void sub_1A3543B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4diag7Service8Internal4stopEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEb_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int Bool;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  const void *v18;
  void *v19;
  NSObject *v20;
  void *v22;
  NSObject *v23;
  _QWORD aBlock[6];
  std::__shared_weak_count *v25;
  void *v26;
  dispatch_object_t v27;
  char v28;
  void *v29;
  dispatch_object_t object;
  uint8_t buf[16];
  void *v32;
  char v33;
  const __CFString *v34;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEFAULT, "#I Stop", buf, 2u);
  }
  v4 = *(_QWORD *)(v2 + 216);
  if (v4)
  {
    v33 = 0;
    LOBYTE(v32) = 0;
    diag::DIAGReaderManager::pushInfo(v4, 6, (uint64_t)&v32);
    if (v33 < 0)
      operator delete(v32);
  }
  *(_BYTE *)(v2 + 444) = 0;
  *(_BYTE *)(v2 + 447) = *(_BYTE *)(a1 + 72);
  memset(buf, 170, sizeof(buf));
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, *(const __CFDictionary **)(v2 + 208));
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v34, "Enabled");
  Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)buf, v34);
  MEMORY[0x1A858F29C](&v34);
  if (*(_BYTE *)(v2 + 456))
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[2] = ___ZN4diag7Service8Internal4stopEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEb_block_invoke_51;
    aBlock[3] = &__block_descriptor_tmp_53_2;
    v7 = *(_QWORD *)(a1 + 40);
    v6 = *(std::__shared_weak_count **)(a1 + 48);
    aBlock[4] = v2;
    aBlock[5] = v7;
    v8 = *(_QWORD *)(v2 + 232);
    aBlock[1] = 1174405120;
    v25 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    v11 = *(void **)(a1 + 56);
    if (v11)
      v11 = _Block_copy(v11);
    v12 = *(NSObject **)(a1 + 64);
    v26 = v11;
    v27 = v12;
    if (v12)
      dispatch_retain(v12);
    v28 = Bool;
    v13 = _Block_copy(aBlock);
    v14 = *(NSObject **)(v2 + 88);
    if (v14)
      dispatch_retain(v14);
    v29 = v13;
    object = v14;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 120))(v8, &v29);
    if (object)
      dispatch_release(object);
    if (v29)
      _Block_release(v29);
    if (v27)
      dispatch_release(v27);
    if (v26)
      _Block_release(v26);
    v15 = v25;
    if (v25)
    {
      v16 = (unint64_t *)&v25->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    return MEMORY[0x1A858F2D8](buf);
  }
  v18 = *(const void **)(a1 + 56);
  if (!v18)
  {
    v19 = 0;
    v20 = *(NSObject **)(a1 + 64);
    v22 = 0;
    v23 = v20;
    if (!v20)
      goto LABEL_32;
    goto LABEL_31;
  }
  v19 = _Block_copy(v18);
  v20 = *(NSObject **)(a1 + 64);
  v22 = v19;
  v23 = v20;
  if (v20)
LABEL_31:
    dispatch_retain(v20);
LABEL_32:
  diag::Service::Internal::prepareStop_sync(v2, (uint64_t)&v22, Bool ^ 1);
  if (v20)
    dispatch_release(v20);
  if (v19)
    _Block_release(v19);
  return MEMORY[0x1A858F2D8](buf);
}

void sub_1A3543DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a9);
  MEMORY[0x1A858F2D8](v9 - 96);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal4stopEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEb_block_invoke_51(uint64_t a1, int a2)
{
  uint64_t v3;
  NSObject *v4;
  const void *v5;
  void *v6;
  NSObject *v7;
  const void *v8;
  void *v9;
  NSObject *v10;
  void *__p;
  __int128 v12;
  void *v13;
  NSObject *v14;
  void *v15;
  NSObject *v16;
  uint8_t buf[16];

  v3 = *(_QWORD *)(a1 + 32);
  if (a2)
  {
    *(_BYTE *)(v3 + 456) = 0;
    v4 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A343C000, v4, OS_LOG_TYPE_DEFAULT, "#I Buffering was disabled for stopping", buf, 2u);
    }
    v5 = *(const void **)(a1 + 56);
    if (v5)
    {
      v6 = _Block_copy(v5);
      v7 = *(NSObject **)(a1 + 64);
      v15 = v6;
      v16 = v7;
      if (!v7)
      {
LABEL_7:
        diag::Service::Internal::prepareStop_sync(v3, (uint64_t)&v15, *(_BYTE *)(a1 + 72) == 0);
        if (v7)
          dispatch_release(v7);
        if (v6)
          _Block_release(v6);
        return;
      }
    }
    else
    {
      v6 = 0;
      v7 = *(NSObject **)(a1 + 64);
      v15 = 0;
      v16 = v7;
      if (!v7)
        goto LABEL_7;
    }
    dispatch_retain(v7);
    goto LABEL_7;
  }
  v8 = *(const void **)(a1 + 56);
  if (!v8)
  {
    v9 = 0;
    v10 = *(NSObject **)(a1 + 64);
    v13 = 0;
    v14 = v10;
    if (!v10)
      goto LABEL_14;
    goto LABEL_13;
  }
  v9 = _Block_copy(v8);
  v10 = *(NSObject **)(a1 + 64);
  v13 = v9;
  v14 = v10;
  if (v10)
LABEL_13:
    dispatch_retain(v10);
LABEL_14:
  __p = operator new(0x28uLL);
  v12 = xmmword_1A3580C30;
  strcpy((char *)__p, "Can not stop with buffering enabled");
  diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v13, (uint64_t)&__p);
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
  if (v10)
    dispatch_release(v10);
  if (v9)
    _Block_release(v9);
}

void sub_1A3544004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1A3544028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A354403C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void diag::Service::Internal::prepareStop_sync(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v5;
  uint64_t v6;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  void *v15;
  NSObject *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  NSObject *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  NSObject *v34;
  void *v35;
  NSObject *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  void *__p;
  char v48;
  void *v49;
  NSObject *v50;
  _QWORD aBlock[6];
  std::__shared_weak_count *v52;
  void *v53;
  dispatch_object_t object;
  const void *v55;
  dispatch_object_t v56;
  uint8_t buf[8];
  std::__shared_weak_count *v58;

  v5 = *(_DWORD *)(a1 + 460);
  if (v5 == 1)
  {
    *(_DWORD *)(a1 + 460) = 3;
    v6 = *(_QWORD *)(a1 + 216);
    if (!v6)
      goto LABEL_33;
    v8 = *(_QWORD **)(v6 + 16);
    v9 = (_QWORD *)(v6 + 24);
    if (v8 != (_QWORD *)(v6 + 24))
    {
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8[5] + 16) + 24) + 336);
        usleep(0x7A120u);
        v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8[5] + 16) + 24) + 336);
        if (v10 != v11)
        {
          usleep(0x7A120u);
          if (v11 != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8[5] + 16) + 24) + 336))
            usleep(0x7A120u);
        }
        v12 = (_QWORD *)v8[1];
        if (v12)
        {
          do
          {
            v13 = v12;
            v12 = (_QWORD *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (_QWORD *)v8[2];
            v14 = *v13 == (_QWORD)v8;
            v8 = v13;
          }
          while (!v14);
        }
        v8 = v13;
      }
      while (v13 != v9);
      v17 = *(_QWORD *)(a1 + 216);
      v18 = *(_QWORD **)(v17 + 16);
      v19 = (_QWORD *)(v17 + 24);
      if (v18 != (_QWORD *)(v17 + 24))
      {
        do
        {
          diag::DIAGReader::stop((diag::DIAGReader *)v18[5]);
          v43 = (_QWORD *)v18[1];
          if (v43)
          {
            do
            {
              v44 = v43;
              v43 = (_QWORD *)*v43;
            }
            while (v43);
          }
          else
          {
            do
            {
              v44 = (_QWORD *)v18[2];
              v14 = *v44 == (_QWORD)v18;
              v18 = v44;
            }
            while (!v14);
          }
          v18 = v44;
        }
        while (v44 != v19);
      }
    }
    if (!a3)
      goto LABEL_33;
    v20 = *(_QWORD *)(a1 + 216);
    v21 = *(_QWORD **)(v20 + 16);
    v22 = (_QWORD *)(v20 + 24);
    if (v21 != (_QWORD *)(v20 + 24))
    {
      do
      {
        diag::DIAGReader::shutdown((diag::DIAGReader *)v21[5]);
        v45 = (_QWORD *)v21[1];
        if (v45)
        {
          do
          {
            v46 = v45;
            v45 = (_QWORD *)*v45;
          }
          while (v45);
        }
        else
        {
          do
          {
            v46 = (_QWORD *)v21[2];
            v14 = *v46 == (_QWORD)v21;
            v21 = v46;
          }
          while (!v14);
        }
        v21 = v46;
      }
      while (v46 != v22);
    }
    v23 = *(std::__shared_weak_count **)(a1 + 224);
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1A343C000, v26, OS_LOG_TYPE_DEBUG, "#D Reader released", buf, 2u);
      v28 = *(_QWORD *)(a1 + 72);
      v27 = *(std::__shared_weak_count **)(a1 + 80);
      *(_QWORD *)buf = v28;
      if (!v27)
        goto LABEL_79;
    }
    else
    {
LABEL_33:
      v28 = *(_QWORD *)(a1 + 72);
      v27 = *(std::__shared_weak_count **)(a1 + 80);
      *(_QWORD *)buf = v28;
      if (!v27)
        goto LABEL_79;
    }
    v29 = std::__shared_weak_count::lock(v27);
    v58 = v29;
    if (v29)
    {
      v30 = *(_QWORD *)(a1 + 232);
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN4diag7Service8Internal16prepareStop_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEb_block_invoke;
      aBlock[3] = &__block_descriptor_tmp_59_2;
      aBlock[4] = a1;
      aBlock[5] = v28;
      v52 = v29;
      v31 = (unint64_t *)&v29->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      v33 = *(void **)a2;
      if (*(_QWORD *)a2)
        v33 = _Block_copy(v33);
      v34 = *(NSObject **)(a2 + 8);
      v53 = v33;
      object = v34;
      if (v34)
        dispatch_retain(v34);
      v35 = _Block_copy(aBlock);
      v36 = *(NSObject **)(a1 + 88);
      if (v36)
        dispatch_retain(v36);
      v55 = v35;
      v56 = v36;
      (*(void (**)(uint64_t, const void **))(*(_QWORD *)v30 + 80))(v30, &v55);
      if (v56)
        dispatch_release(v56);
      if (v55)
        _Block_release(v55);
      if (object)
        dispatch_release(object);
      if (v53)
        _Block_release(v53);
      v37 = v52;
      if (v52)
      {
        v38 = (unint64_t *)&v52->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = v58;
      if (v58)
      {
        v41 = (unint64_t *)&v58->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      return;
    }
LABEL_79:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  if (!*(_QWORD *)a2)
  {
    v15 = 0;
    v16 = *(NSObject **)(a2 + 8);
    v49 = 0;
    v50 = v16;
    if (!v16)
      goto LABEL_18;
    goto LABEL_17;
  }
  v15 = _Block_copy(*(const void **)a2);
  v16 = *(NSObject **)(a2 + 8);
  v49 = v15;
  v50 = v16;
  if (v16)
LABEL_17:
    dispatch_retain(v16);
LABEL_18:
  v48 = 0;
  LOBYTE(__p) = 0;
  diag::Service::Internal::changeStateAndNotify_sync(a1, v5, (uint64_t)&v49, (uint64_t)&__p);
  if (v48 < 0)
    operator delete(__p);
  if (v16)
    dispatch_release(v16);
  if (v15)
    _Block_release(v15);
}

void sub_1A35444A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v3 - 96);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v1);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v3 - 80);
  _Unwind_Resume(a1);
}

void sub_1A35444D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal16prepareStop_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEb_block_invoke(capabilities::diag *a1, int a2)
{
  _QWORD *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  const void *v16;
  void *v17;
  NSObject *v18;
  const void *v19;
  void *v20;
  NSObject *v21;
  void *__p[2];
  char v23;
  void *v24;
  NSObject *v25;
  void *v26;
  NSObject *v27;
  _QWORD aBlock[6];
  std::__shared_weak_count *v29;
  void *v30;
  dispatch_object_t object;
  const void *v32;
  dispatch_object_t v33;

  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (a2)
  {
    if (v3[52] && capabilities::diag::supportsMultipleMasks(a1))
    {
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[2] = ___ZN4diag7Service8Internal16prepareStop_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEb_block_invoke_2;
      aBlock[3] = &__block_descriptor_tmp_57_3;
      v5 = *((_QWORD *)a1 + 5);
      v4 = (std::__shared_weak_count *)*((_QWORD *)a1 + 6);
      aBlock[4] = v3;
      aBlock[5] = v5;
      v6 = v3[29];
      aBlock[1] = 1174405120;
      v29 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      v9 = (void *)*((_QWORD *)a1 + 7);
      if (v9)
        v9 = _Block_copy(v9);
      v10 = *((_QWORD *)a1 + 8);
      v30 = v9;
      object = v10;
      if (v10)
        dispatch_retain(v10);
      v11 = _Block_copy(aBlock);
      v12 = v3[11];
      if (v12)
        dispatch_retain(v12);
      v32 = v11;
      v33 = v12;
      (*(void (**)(uint64_t, uint64_t, const void **))(*(_QWORD *)v6 + 136))(v6, 2, &v32);
      if (v33)
        dispatch_release(v33);
      if (v32)
        _Block_release(v32);
      if (object)
        dispatch_release(object);
      if (v30)
        _Block_release(v30);
      v13 = v29;
      if (v29)
      {
        v14 = (unint64_t *)&v29->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      return;
    }
    v19 = (const void *)*((_QWORD *)a1 + 7);
    if (v19)
    {
      v20 = _Block_copy(v19);
      v21 = *((_QWORD *)a1 + 8);
      v26 = v20;
      v27 = v21;
      if (!v21)
      {
LABEL_38:
        diag::Service::Internal::finishStop_sync((uint64_t)v3, (uint64_t)&v26, 0);
        if (v21)
          dispatch_release(v21);
        if (v20)
          _Block_release(v20);
        return;
      }
    }
    else
    {
      v20 = 0;
      v21 = *((_QWORD *)a1 + 8);
      v26 = 0;
      v27 = v21;
      if (!v21)
        goto LABEL_38;
    }
    dispatch_retain(v21);
    goto LABEL_38;
  }
  v16 = (const void *)*((_QWORD *)a1 + 7);
  if (!v16)
  {
    v17 = 0;
    v18 = *((_QWORD *)a1 + 8);
    v24 = 0;
    v25 = v18;
    if (!v18)
      goto LABEL_29;
    goto LABEL_28;
  }
  v17 = _Block_copy(v16);
  v18 = *((_QWORD *)a1 + 8);
  v24 = v17;
  v25 = v18;
  if (v18)
LABEL_28:
    dispatch_retain(v18);
LABEL_29:
  v23 = 14;
  strcpy((char *)__p, "Error stopping");
  diag::Service::Internal::changeStateAndNotify_sync((uint64_t)v3, 4u, (uint64_t)&v24, (uint64_t)__p);
  if (v23 < 0)
    operator delete(__p[0]);
  if (v18)
    dispatch_release(v18);
  if (v17)
    _Block_release(v17);
}

void sub_1A354478C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v3 - 64);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v2);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1A35447C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A35447D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal16prepareStop_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEb_block_invoke_2(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  const void *v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *v18;
  NSObject *v19;
  void *v20;
  NSObject *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  const void *v25;
  void *v26;
  NSObject *v27;
  void *__p;
  __int128 v29;
  void *v30;
  NSObject *v31;
  std::string v32;
  void *v33;
  NSObject *v34;
  _QWORD aBlock[6];
  std::__shared_weak_count *v36;
  void *v37;
  dispatch_object_t v38;
  void *v39;
  dispatch_object_t object;
  std::string v41;
  _QWORD v42[6];
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD block[6];

  v3 = a1[4];
  if (a2)
  {
    v41.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
    v41.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAALL;
    v41.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAA00;
    v4 = *(_QWORD *)(v3 + 288);
    v43 = 0;
    v44 = &v43;
    v45 = 0x2000000000;
    v46 = 0;
    v5 = MEMORY[0x1E0C809B0];
    v42[0] = MEMORY[0x1E0C809B0];
    v42[1] = 0x40000000;
    v42[2] = ___ZN17BasebandTransportdeEv_block_invoke;
    v42[3] = &unk_1E4A0A0E8;
    v42[4] = &v43;
    v42[5] = v4;
    v47 = v42;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    block[3] = &__block_descriptor_tmp_77;
    block[4] = v4 + 72;
    block[5] = &v47;
    v6 = *(NSObject **)(v4 + 88);
    if (*(_QWORD *)(v4 + 96))
      dispatch_async_and_wait(v6, block);
    else
      dispatch_sync(v6, block);
    v10 = v44[3];
    _Block_object_dispose(&v43, 8);
    v11 = *(_QWORD *)(v3 + 416);
    *(_QWORD *)(v3 + 424) = v10;
    *(_QWORD *)(v3 + 432) = v11;
    *(_DWORD *)(v3 + 440) = 2;
    if (ETLDIAGLoggingUnconfigure())
    {
      v12 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(block[0]) = 0;
        _os_log_debug_impl(&dword_1A343C000, v12, OS_LOG_TYPE_DEBUG, "#D Sleep DMC un-configured", (uint8_t *)block, 2u);
      }
      v13 = *(_QWORD *)(v3 + 232);
      aBlock[0] = v5;
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN4diag7Service8Internal16prepareStop_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEb_block_invoke_55;
      aBlock[3] = &__block_descriptor_tmp_56_4;
      v15 = a1[5];
      v14 = (std::__shared_weak_count *)a1[6];
      aBlock[4] = v3;
      aBlock[5] = v15;
      v36 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      v18 = (void *)a1[7];
      if (v18)
        v18 = _Block_copy(v18);
      v19 = a1[8];
      v37 = v18;
      v38 = v19;
      if (v19)
        dispatch_retain(v19);
      v20 = _Block_copy(aBlock);
      v21 = *(NSObject **)(v3 + 88);
      if (v21)
        dispatch_retain(v21);
      v39 = v20;
      object = v21;
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v13 + 136))(v13, 1, &v39);
      if (object)
        dispatch_release(object);
      if (v39)
        _Block_release(v39);
      if (v38)
        dispatch_release(v38);
      if (v37)
        _Block_release(v37);
      v22 = v36;
      if (v36)
      {
        v23 = (unint64_t *)&v36->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
LABEL_56:
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      return;
    }
    v25 = (const void *)a1[7];
    if (v25)
    {
      v26 = _Block_copy(v25);
      v27 = a1[8];
      v33 = v26;
      v34 = v27;
      if (!v27)
      {
LABEL_43:
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v32, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
        else
          v32 = v41;
        diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v33, (uint64_t)&v32);
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v32.__r_.__value_.__l.__data_);
        if (v27)
          dispatch_release(v27);
        if (v26)
          _Block_release(v26);
        goto LABEL_56;
      }
    }
    else
    {
      v26 = 0;
      v27 = a1[8];
      v33 = 0;
      v34 = v27;
      if (!v27)
        goto LABEL_43;
    }
    dispatch_retain(v27);
    goto LABEL_43;
  }
  v7 = (const void *)a1[7];
  if (!v7)
  {
    v8 = 0;
    v9 = a1[8];
    v30 = 0;
    v31 = v9;
    if (!v9)
      goto LABEL_7;
    goto LABEL_6;
  }
  v8 = _Block_copy(v7);
  v9 = a1[8];
  v30 = v8;
  v31 = v9;
  if (v9)
LABEL_6:
    dispatch_retain(v9);
LABEL_7:
  __p = operator new(0x28uLL);
  v29 = xmmword_1A35802F0;
  strcpy((char *)__p, "Error switching to sleep logging mask");
  diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v30, (uint64_t)&__p);
  if (SHIBYTE(v29) < 0)
    operator delete(__p);
  if (v9)
    dispatch_release(v9);
  if (v8)
    _Block_release(v8);
}

void sub_1A3544BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a24);
  if (a42 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal16prepareStop_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEb_block_invoke_55(_QWORD *a1, int a2)
{
  uint64_t v3;
  const void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *__p;
  __int128 v10;
  void *v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;

  v3 = a1[4];
  v4 = (const void *)a1[7];
  if (a2)
  {
    if (v4)
    {
      v5 = _Block_copy(v4);
      v6 = a1[8];
      v13 = v5;
      v14 = v6;
      if (!v6)
      {
LABEL_5:
        diag::Service::Internal::finishStop_sync(v3, (uint64_t)&v13, 1);
        if (v6)
          dispatch_release(v6);
        if (v5)
          _Block_release(v5);
        return;
      }
    }
    else
    {
      v5 = 0;
      v6 = a1[8];
      v13 = 0;
      v14 = v6;
      if (!v6)
        goto LABEL_5;
    }
    dispatch_retain(v6);
    goto LABEL_5;
  }
  if (!v4)
  {
    v7 = 0;
    v8 = a1[8];
    v11 = 0;
    v12 = v8;
    if (!v8)
      goto LABEL_12;
    goto LABEL_11;
  }
  v7 = _Block_copy(v4);
  v8 = a1[8];
  v11 = v7;
  v12 = v8;
  if (v8)
LABEL_11:
    dispatch_retain(v8);
LABEL_12:
  __p = operator new(0x28uLL);
  v10 = xmmword_1A3581DD0;
  strcpy((char *)__p, "Error switching to merged logging mask");
  diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v11, (uint64_t)&__p);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  if (v8)
    dispatch_release(v8);
  if (v7)
    _Block_release(v7);
}

void sub_1A3544DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1A3544DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A3544E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void diag::Service::Internal::finishStop_sync(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  void *v22;
  NSObject *v23;
  void *v24;
  NSObject *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD aBlock[6];
  std::__shared_weak_count *v33;
  void *v34;
  dispatch_object_t v35;
  void *v36;
  dispatch_object_t object;
  std::string v38;
  void *v39;
  NSObject *v40;
  std::string __p;
  _QWORD v42[6];
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t block;
  uint64_t v49;
  _QWORD *(*v50)(uint64_t);
  void *v51;
  uint64_t v52;
  _QWORD *v53;

  v5 = MEMORY[0x1E0C809B0];
  if (!*(_QWORD *)(a1 + 408))
    goto LABEL_26;
  __p.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  __p.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAALL;
  __p.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAA00;
  v7 = *(_QWORD *)(a1 + 288);
  v43 = 0;
  v44 = &v43;
  v45 = 0x2000000000;
  v42[0] = MEMORY[0x1E0C809B0];
  v42[1] = 0x40000000;
  v42[2] = ___ZN17BasebandTransportdeEv_block_invoke;
  v42[3] = &unk_1E4A0A0E8;
  v42[4] = &v43;
  v42[5] = v7;
  v46 = 0;
  v47 = v42;
  block = MEMORY[0x1E0C809B0];
  v49 = 0x40000000;
  v50 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v51 = &__block_descriptor_tmp_77;
  v52 = v7 + 72;
  v53 = &v47;
  v8 = *(NSObject **)(v7 + 88);
  if (*(_QWORD *)(v7 + 96))
    dispatch_async_and_wait(v8, &block);
  else
    dispatch_sync(v8, &block);
  v9 = v44[3];
  _Block_object_dispose(&v43, 8);
  v10 = *(_QWORD *)(a1 + 408);
  *(_QWORD *)(a1 + 424) = v9;
  *(_QWORD *)(a1 + 432) = v10;
  *(_DWORD *)(a1 + 440) = a3;
  v11 = ETLDIAGLoggingUnconfigure();
  v12 = v11;
  if (v11)
  {
    v13 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(block) = 0;
      _os_log_debug_impl(&dword_1A343C000, v13, OS_LOG_TYPE_DEBUG, "#D Merged DMC un-configured", (uint8_t *)&block, 2u);
    }
    goto LABEL_22;
  }
  if (!*(_QWORD *)a2)
  {
    v14 = 0;
    v15 = *(NSObject **)(a2 + 8);
    v39 = 0;
    v40 = v15;
    if (!v15)
      goto LABEL_11;
    goto LABEL_10;
  }
  v14 = _Block_copy(*(const void **)a2);
  v15 = *(NSObject **)(a2 + 8);
  v39 = v14;
  v40 = v15;
  if (v15)
LABEL_10:
    dispatch_retain(v15);
LABEL_11:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v38, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v38 = __p;
  diag::Service::Internal::changeStateAndNotify_sync(a1, 4u, (uint64_t)&v39, (uint64_t)&v38);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (v15)
    dispatch_release(v15);
  if (v14)
    _Block_release(v14);
LABEL_22:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v12 & 1) == 0)
      return;
  }
  else if ((v12 & 1) == 0)
  {
    return;
  }
LABEL_26:
  v17 = *(_QWORD *)(a1 + 72);
  v16 = *(std::__shared_weak_count **)(a1 + 80);
  block = v17;
  if (!v16 || (v18 = std::__shared_weak_count::lock(v16), (v49 = (uint64_t)v18) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = *(_QWORD *)(a1 + 232);
  aBlock[0] = v5;
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4diag7Service8Internal15finishStop_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE20ETLDIAGLoggingMaskID_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_61_0;
  aBlock[4] = a1;
  aBlock[5] = v17;
  v33 = v18;
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v21 = __ldxr(p_shared_owners);
  while (__stxr(v21 + 1, p_shared_owners));
  v22 = *(void **)a2;
  if (*(_QWORD *)a2)
    v22 = _Block_copy(v22);
  v23 = *(NSObject **)(a2 + 8);
  v34 = v22;
  v35 = v23;
  if (v23)
    dispatch_retain(v23);
  v24 = _Block_copy(aBlock);
  v25 = *(NSObject **)(a1 + 88);
  if (v25)
    dispatch_retain(v25);
  v36 = v24;
  object = v25;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v19 + 88))(v19, &v36);
  if (object)
    dispatch_release(object);
  if (v36)
    _Block_release(v36);
  if (v35)
    dispatch_release(v35);
  if (v34)
    _Block_release(v34);
  v26 = v33;
  if (v33)
  {
    v27 = (unint64_t *)&v33->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)v49;
  if (v49)
  {
    v30 = (unint64_t *)(v49 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_1A35451A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a28);
  if (a35 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal15finishStop_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE20ETLDIAGLoggingMaskID_block_invoke(_QWORD *a1, int a2)
{
  uint64_t v3;
  const void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9[3];
  void *v10;
  NSObject *v11;
  void *__p;
  char v13;
  void *v14;
  NSObject *v15;

  v3 = a1[4];
  v4 = (const void *)a1[7];
  if (a2)
  {
    if (v4)
    {
      v5 = _Block_copy(v4);
      v6 = a1[8];
      v14 = v5;
      v15 = v6;
      if (!v6)
      {
LABEL_5:
        v13 = 0;
        LOBYTE(__p) = 0;
        diag::Service::Internal::changeStateAndNotify_sync(v3, 0, (uint64_t)&v14, (uint64_t)&__p);
        if (v13 < 0)
          operator delete(__p);
        if (v6)
          dispatch_release(v6);
        if (v5)
          _Block_release(v5);
        return;
      }
    }
    else
    {
      v5 = 0;
      v6 = a1[8];
      v14 = 0;
      v15 = v6;
      if (!v6)
        goto LABEL_5;
    }
    dispatch_retain(v6);
    goto LABEL_5;
  }
  if (!v4)
  {
    v7 = 0;
    v8 = a1[8];
    v10 = 0;
    v11 = v8;
    if (!v8)
      goto LABEL_14;
    goto LABEL_13;
  }
  v7 = _Block_copy(v4);
  v8 = a1[8];
  v10 = v7;
  v11 = v8;
  if (v8)
LABEL_13:
    dispatch_retain(v8);
LABEL_14:
  HIBYTE(v9[2]) = 21;
  strcpy((char *)v9, "Error completing stop");
  diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v10, (uint64_t)v9);
  if (SHIBYTE(v9[2]) < 0)
    operator delete(v9[0]);
  if (v8)
    dispatch_release(v8);
  if (v7)
    _Block_release(v7);
}

void sub_1A3545380(_Unwind_Exception *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, ...)
{
  va_list va;

  va_start(va, a7);
  if (a7 < 0)
    operator delete(a2);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal5sleepEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  _BOOL8 v4;
  int Int;
  capabilities::diag *v6;
  int v7;
  void *v8;
  void *v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *v19;
  const void *v20;
  void *v21;
  NSObject *v22;
  const void *v23;
  void *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  NSObject *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void *__p;
  __int128 v36;
  void *v37;
  NSObject *v38;
  void *aBlock;
  NSObject *v40;
  void *v41;
  __int128 v42;
  void *v43;
  NSObject *v44;
  _QWORD v45[2];
  uint8_t buf[8];
  uint64_t v47;
  void (*v48)(uint64_t, int);
  void *v49;
  uint64_t v50;
  void *v51;
  std::__shared_weak_count *v52;
  void *v53;
  dispatch_object_t object;
  uint64_t v55;
  BOOL v56;
  const void *v57;
  dispatch_object_t v58;
  void *v59;
  std::__shared_weak_count *v60;

  v2 = a1[4];
  v3 = *(NSObject **)(v2 + 40);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEFAULT, "#I Sleep", buf, 2u);
  }
  if (capabilities::diag::supportedDuringAPSleep((capabilities::diag *)v4))
  {
    v45[0] = 0xAAAAAAAAAAAAAAAALL;
    v45[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v45, *(const __CFDictionary **)(v2 + 208));
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)buf, diag::config::kEnabledDuringSleepKey[0]);
    Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v45, *(const __CFString **)buf);
    v6 = (capabilities::diag *)MEMORY[0x1A858F29C](buf);
    if (Int)
    {
      v7 = capabilities::diag::preferredInterface(v6);
      v8 = (void *)a1[5];
      if (v8)
      {
        v8 = _Block_copy(v8);
        v9 = v8;
        v10 = a1[6];
        aBlock = v8;
        v40 = v10;
        if (!v10)
          goto LABEL_8;
      }
      else
      {
        v9 = 0;
        v10 = a1[6];
        aBlock = 0;
        v40 = v10;
        if (!v10)
        {
LABEL_8:
          v11 = *(_DWORD *)(v2 + 460);
          if (v11 == 1)
          {
            v12 = *(_QWORD *)(v2 + 448);
            *(_DWORD *)(v2 + 460) = 3;
            if (Int != 1
              && *(_QWORD *)(v2 + 416)
              && capabilities::diag::supportsMultipleMasks((capabilities::diag *)v8))
            {
              v14 = *(void **)(v2 + 72);
              v13 = *(std::__shared_weak_count **)(v2 + 80);
              v59 = v14;
              if (!v13 || (v15 = std::__shared_weak_count::lock(v13), (v60 = v15) == 0))
                std::__throw_bad_weak_ptr[abi:ne180100]();
              v16 = *(_QWORD *)(v2 + 232);
              *(_QWORD *)buf = MEMORY[0x1E0C809B0];
              v47 = 1174405120;
              v48 = ___ZN4diag7Service8Internal17prepareSleep_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEbbN12capabilities4diag15BufferingParamsE_block_invoke;
              v49 = &__block_descriptor_tmp_65_2;
              v50 = v2;
              v51 = v14;
              v52 = v15;
              p_shared_owners = (unint64_t *)&v15->__shared_owners_;
              do
                v18 = __ldxr(p_shared_owners);
              while (__stxr(v18 + 1, p_shared_owners));
              if (v9)
                v19 = _Block_copy(v9);
              else
                v19 = 0;
              v53 = v19;
              object = v10;
              if (v10)
                dispatch_retain(v10);
              v56 = v7 != 8;
              v55 = v12;
              v27 = _Block_copy(buf);
              v28 = *(NSObject **)(v2 + 88);
              if (v28)
                dispatch_retain(v28);
              v57 = v27;
              v58 = v28;
              (*(void (**)(uint64_t, uint64_t, const void **))(*(_QWORD *)v16 + 136))(v16, 2, &v57);
              if (v58)
                dispatch_release(v58);
              if (v57)
                _Block_release(v57);
              if (object)
                dispatch_release(object);
              if (v53)
                _Block_release(v53);
              v29 = v52;
              if (v52)
              {
                v30 = (unint64_t *)&v52->__shared_owners_;
                do
                  v31 = __ldaxr(v30);
                while (__stlxr(v31 - 1, v30));
                if (!v31)
                {
                  ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                  std::__shared_weak_count::__release_weak(v29);
                }
              }
              v32 = v60;
              if (v60)
              {
                v33 = (unint64_t *)&v60->__shared_owners_;
                do
                  v34 = __ldaxr(v33);
                while (__stlxr(v34 - 1, v33));
                if (!v34)
                {
                  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                  std::__shared_weak_count::__release_weak(v32);
                }
              }
              v10 = v40;
              if (!v40)
                goto LABEL_59;
LABEL_58:
              dispatch_release(v10);
LABEL_59:
              if (aBlock)
                _Block_release(aBlock);
LABEL_61:
              MEMORY[0x1A858F2D8](v45);
              return;
            }
            if (v9)
              v9 = _Block_copy(v9);
            *(_QWORD *)buf = v9;
            v47 = (uint64_t)v10;
            if (v10)
              dispatch_retain(v10);
            diag::Service::Internal::sleep_sync(v2, (uint64_t)buf, v7 != 8, v12);
            if (v10)
              dispatch_release(v10);
            if (v9)
              _Block_release(v9);
LABEL_57:
            if (!v10)
              goto LABEL_59;
            goto LABEL_58;
          }
          if (v9)
          {
            v26 = _Block_copy(v9);
            v59 = v26;
            v60 = (std::__shared_weak_count *)v10;
            if (!v10)
            {
LABEL_41:
              HIBYTE(v48) = 0;
              buf[0] = 0;
              diag::Service::Internal::changeStateAndNotify_sync(v2, v11, (uint64_t)&v59, (uint64_t)buf);
              if (SHIBYTE(v48) < 0)
                operator delete(*(void **)buf);
              if (v10)
                dispatch_release(v10);
              if (v26)
                _Block_release(v26);
              goto LABEL_57;
            }
          }
          else
          {
            v26 = 0;
            v59 = 0;
            v60 = (std::__shared_weak_count *)v10;
            if (!v10)
              goto LABEL_41;
          }
          dispatch_retain(v10);
          goto LABEL_41;
        }
      }
      dispatch_retain(v10);
      goto LABEL_8;
    }
    v23 = (const void *)a1[5];
    if (v23)
    {
      v24 = _Block_copy(v23);
      v25 = a1[6];
      v43 = v24;
      v44 = v25;
      if (!v25)
      {
LABEL_32:
        v41 = operator new(0x20uLL);
        v42 = xmmword_1A357F820;
        strcpy((char *)v41, "DIAG During AP Sleep is OFF");
        diag::Service::Internal::changeStateAndNotify_sync(v2, 4u, (uint64_t)&v43, (uint64_t)&v41);
        if (SHIBYTE(v42) < 0)
          operator delete(v41);
        if (v25)
          dispatch_release(v25);
        if (v24)
          _Block_release(v24);
        goto LABEL_61;
      }
    }
    else
    {
      v24 = 0;
      v25 = a1[6];
      v43 = 0;
      v44 = v25;
      if (!v25)
        goto LABEL_32;
    }
    dispatch_retain(v25);
    goto LABEL_32;
  }
  v20 = (const void *)a1[5];
  if (!v20)
  {
    v21 = 0;
    v22 = a1[6];
    v37 = 0;
    v38 = v22;
    if (!v22)
      goto LABEL_21;
    goto LABEL_20;
  }
  v21 = _Block_copy(v20);
  v22 = a1[6];
  v37 = v21;
  v38 = v22;
  if (v22)
LABEL_20:
    dispatch_retain(v22);
LABEL_21:
  __p = operator new(0x28uLL);
  v36 = xmmword_1A35802F0;
  strcpy((char *)__p, "DIAG During AP Sleep is NOT supported");
  diag::Service::Internal::changeStateAndNotify_sync(v2, 4u, (uint64_t)&v37, (uint64_t)&__p);
  if (SHIBYTE(v36) < 0)
    operator delete(__p);
  if (v22)
    dispatch_release(v22);
  if (v21)
    _Block_release(v21);
}

void sub_1A35458EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v30 - 112);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v28);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v29);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v30 - 96);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a14);
  MEMORY[0x1A858F2D8](&a21);
  _Unwind_Resume(a1);
}

void sub_1A3545978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24)
{
  if (a21 < 0)
  {
    operator delete(__p);
    dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a22);
    MEMORY[0x1A858F2D8](&a24);
    _Unwind_Resume(a1);
  }
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a22);
  MEMORY[0x1A858F2D8](&a24);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal17prepareSleep_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEbbN12capabilities4diag15BufferingParamsE_block_invoke(uint64_t a1, int a2)
{
  uint64_t v3;
  const void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *__p;
  __int128 v10;
  void *v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(const void **)(a1 + 56);
  if (a2)
  {
    if (v4)
    {
      v5 = _Block_copy(v4);
      v6 = *(NSObject **)(a1 + 64);
      v13 = v5;
      v14 = v6;
      if (!v6)
      {
LABEL_5:
        diag::Service::Internal::sleep_sync(v3, (uint64_t)&v13, *(_BYTE *)(a1 + 80), *(_QWORD *)(a1 + 72));
        if (v6)
          dispatch_release(v6);
        if (v5)
          _Block_release(v5);
        return;
      }
    }
    else
    {
      v5 = 0;
      v6 = *(NSObject **)(a1 + 64);
      v13 = 0;
      v14 = v6;
      if (!v6)
        goto LABEL_5;
    }
    dispatch_retain(v6);
    goto LABEL_5;
  }
  if (!v4)
  {
    v7 = 0;
    v8 = *(NSObject **)(a1 + 64);
    v11 = 0;
    v12 = v8;
    if (!v8)
      goto LABEL_12;
    goto LABEL_11;
  }
  v7 = _Block_copy(v4);
  v8 = *(NSObject **)(a1 + 64);
  v11 = v7;
  v12 = v8;
  if (v8)
LABEL_11:
    dispatch_retain(v8);
LABEL_12:
  __p = operator new(0x28uLL);
  v10 = xmmword_1A35802F0;
  strcpy((char *)__p, "Error switching to sleep logging mask");
  diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v11, (uint64_t)&__p);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  if (v8)
    dispatch_release(v8);
  if (v7)
    _Block_release(v7);
}

void sub_1A3545B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1A3545BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A3545BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void diag::Service::Internal::sleep_sync(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  std::string::size_type v8;
  NSObject *v9;
  _BOOL8 v10;
  uint64_t v11;
  capabilities::abs *shouldUseMinBasebandTransportIOReadSize;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  NSObject *v17;
  char *v18;
  NSObject *v19;
  const void *v20;
  void *v21;
  NSObject *v22;
  char *v23;
  NSObject *v24;
  std::string *p_p;
  std::string::size_type size;
  std::string *v27;
  std::string::size_type v28;
  char v29;
  NSObject *v30;
  const void *v31;
  void *v32;
  NSObject *v33;
  std::string *v34;
  std::__shared_weak_count *v35;
  std::string::size_type v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  void *v41;
  NSObject *v42;
  void *v43;
  NSObject *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD v51[6];
  std::__shared_weak_count *v52;
  void *v53;
  dispatch_object_t v54;
  char v55;
  void *v56;
  dispatch_object_t object;
  std::string v58;
  void *v59;
  NSObject *v60;
  std::string v61;
  void *v62;
  NSObject *v63;
  std::string __p;
  void *aBlock;
  int v66;
  char v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  char v72;
  _QWORD v73[4];
  __int128 *v74;
  __int128 v75;
  uint64_t (*v76)(uint64_t);
  void *v77;
  _QWORD *v78;
  uint64_t v79;
  std::string buf;
  void *v81;
  uint64_t v82;
  __int128 **v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v8 = MEMORY[0x1E0C809B0];
  if (!*(_BYTE *)(a1 + 445))
    goto LABEL_63;
  v9 = *(NSObject **)(a1 + 40);
  v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1A343C000, v9, OS_LOG_TYPE_DEFAULT, "#I Unconfiguring ADPL", (uint8_t *)&buf, 2u);
  }
  v11 = *(_QWORD *)(a1 + 288);
  v66 = 2;
  v67 = 0;
  v68 = 10;
  shouldUseMinBasebandTransportIOReadSize = (capabilities::abs *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)v10);
  if ((_DWORD)shouldUseMinBasebandTransportIOReadSize)
    v13 = 0x4000;
  else
    v13 = 0x8000;
  v69 = v13;
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadCount(shouldUseMinBasebandTransportIOReadSize))
    v14 = 4;
  else
    v14 = 16;
  v70 = v14;
  v71 = 0;
  v72 = 0;
  aBlock = 0;
  v15 = (*(uint64_t (**)(uint64_t, int *, void **))(*(_QWORD *)v11 + 48))(v11, &v66, &aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (!v15)
  {
    v18 = (char *)operator new(0x38uLL);
    strcpy(v18, "Failed to open DIAG transport to unconfigure ADPL");
    v19 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
      _os_log_error_impl(&dword_1A343C000, v19, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
      v20 = *(const void **)a2;
      if (*(_QWORD *)a2)
      {
LABEL_17:
        v21 = _Block_copy(v20);
        v22 = *(NSObject **)(a2 + 8);
        v59 = v21;
        v60 = v22;
        if (!v22)
        {
LABEL_19:
          std::string::__init_copy_ctor_external(&v58, v18, 0x31uLL);
          diag::Service::Internal::changeStateAndNotify_sync(a1, 4u, (uint64_t)&v59, (uint64_t)&v58);
          if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v58.__r_.__value_.__l.__data_);
          if (v22)
            dispatch_release(v22);
          if (v21)
            _Block_release(v21);
          v23 = v18;
          goto LABEL_62;
        }
LABEL_18:
        dispatch_retain(v22);
        goto LABEL_19;
      }
    }
    else
    {
      v20 = *(const void **)a2;
      if (*(_QWORD *)a2)
        goto LABEL_17;
    }
    v21 = 0;
    v22 = *(NSObject **)(a2 + 8);
    v59 = 0;
    v60 = v22;
    if (!v22)
      goto LABEL_19;
    goto LABEL_18;
  }
  memset(&__p, 0, sizeof(__p));
  v16 = *(_QWORD *)(a1 + 288);
  v73[0] = 0;
  v73[1] = v73;
  v73[2] = 0x2000000000;
  *(_QWORD *)&v75 = v8;
  *((_QWORD *)&v75 + 1) = 0x40000000;
  v76 = ___ZN17BasebandTransportdeEv_block_invoke;
  v77 = &unk_1E4A0A0E8;
  v78 = v73;
  v79 = v16;
  v73[3] = 0;
  v74 = &v75;
  buf.__r_.__value_.__r.__words[0] = v8;
  buf.__r_.__value_.__l.__size_ = 0x40000000;
  buf.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v81 = &__block_descriptor_tmp_77;
  v82 = v16 + 72;
  v83 = &v74;
  v17 = *(NSObject **)(v16 + 88);
  if (*(_QWORD *)(v16 + 96))
    dispatch_async_and_wait(v17, &buf);
  else
    dispatch_sync(v17, &buf);
  _Block_object_dispose(v73, 8);
  if (ETLADPLLoggingEnable())
  {
    v24 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1A343C000, v24, OS_LOG_TYPE_DEFAULT, "#I Success unconfiguring ADPL", (uint8_t *)&buf, 2u);
    }
    goto LABEL_58;
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = xmmword_1A357F830;
  strcpy(buf.__r_.__value_.__l.__data_, "Failed to unconfigure ADPL: ");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v27 = std::string::append(&buf, (const std::string::value_type *)p_p, size);
  v28 = v27->__r_.__value_.__r.__words[0];
  *(_QWORD *)&v75 = v27->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)&v75 + 7) = *(std::string::size_type *)((char *)&v27->__r_.__value_.__r.__words[1] + 7);
  v29 = HIBYTE(v27->__r_.__value_.__r.__words[2]);
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = v28;
  __p.__r_.__value_.__l.__size_ = v75;
  *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v75 + 7);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v29;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    v30 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
LABEL_40:
      v31 = *(const void **)a2;
      if (*(_QWORD *)a2)
        goto LABEL_41;
LABEL_49:
      v32 = 0;
      v33 = *(NSObject **)(a2 + 8);
      v62 = 0;
      v63 = v33;
      if (!v33)
        goto LABEL_43;
      goto LABEL_42;
    }
  }
  else
  {
    v30 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      goto LABEL_40;
  }
  v34 = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
  _os_log_error_impl(&dword_1A343C000, v30, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
  v31 = *(const void **)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_49;
LABEL_41:
  v32 = _Block_copy(v31);
  v33 = *(NSObject **)(a2 + 8);
  v62 = v32;
  v63 = v33;
  if (v33)
LABEL_42:
    dispatch_retain(v33);
LABEL_43:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v61, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v61 = __p;
  diag::Service::Internal::changeStateAndNotify_sync(a1, 4u, (uint64_t)&v62, (uint64_t)&v61);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (v33)
    dispatch_release(v33);
  if (v32)
    _Block_release(v32);
LABEL_58:
  if (*(_BYTE *)(a1 + 446))
    BasebandTransport::close(*(BasebandTransport **)(a1 + 288));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v23 = (char *)__p.__r_.__value_.__r.__words[0];
LABEL_62:
    operator delete(v23);
  }
LABEL_63:
  v36 = *(_QWORD *)(a1 + 72);
  v35 = *(std::__shared_weak_count **)(a1 + 80);
  buf.__r_.__value_.__r.__words[0] = v36;
  if (!v35
    || (v37 = std::__shared_weak_count::lock(v35), (buf.__r_.__value_.__l.__size_ = (std::string::size_type)v37) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v38 = *(_QWORD *)(a1 + 232);
  v51[0] = v8;
  v51[1] = 1174405120;
  v51[2] = ___ZN4diag7Service8Internal10sleep_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEbN12capabilities4diag15BufferingParamsE_block_invoke;
  v51[3] = &__block_descriptor_tmp_71_1;
  v51[4] = a1;
  v51[5] = v36;
  v52 = v37;
  p_shared_owners = (unint64_t *)&v37->__shared_owners_;
  do
    v40 = __ldxr(p_shared_owners);
  while (__stxr(v40 + 1, p_shared_owners));
  v55 = a3;
  v41 = *(void **)a2;
  if (*(_QWORD *)a2)
    v41 = _Block_copy(v41);
  v42 = *(NSObject **)(a2 + 8);
  v53 = v41;
  v54 = v42;
  if (v42)
    dispatch_retain(v42);
  v43 = _Block_copy(v51);
  v44 = *(NSObject **)(a1 + 88);
  if (v44)
    dispatch_retain(v44);
  v56 = v43;
  object = v44;
  (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v38 + 128))(v38, a4, &v56);
  if (object)
    dispatch_release(object);
  if (v56)
    _Block_release(v56);
  if (v54)
    dispatch_release(v54);
  if (v53)
    _Block_release(v53);
  v45 = v52;
  if (v52)
  {
    v46 = (unint64_t *)&v52->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (buf.__r_.__value_.__l.__size_)
  {
    v49 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
}

void sub_1A3546294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *aBlock)
{
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a37);
  if (a44 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal10sleep_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEbN12capabilities4diag15BufferingParamsE_block_invoke(uint64_t a1, int a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  const void *v16;
  void *v17;
  NSObject *v18;
  void *__p;
  __int128 v20;
  void *v21;
  NSObject *v22;
  _QWORD aBlock[6];
  std::__shared_weak_count *v24;
  void *v25;
  dispatch_object_t object;
  char v27;
  const void *v28;
  dispatch_object_t v29;

  v3 = *(_QWORD *)(a1 + 32);
  if (a2)
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[2] = ___ZN4diag7Service8Internal10sleep_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEbN12capabilities4diag15BufferingParamsE_block_invoke_2;
    aBlock[3] = &__block_descriptor_tmp_69_0;
    v5 = *(_QWORD *)(a1 + 40);
    v4 = *(std::__shared_weak_count **)(a1 + 48);
    aBlock[4] = v3;
    aBlock[5] = v5;
    v6 = *(_QWORD *)(v3 + 232);
    aBlock[1] = 1174405120;
    v24 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v27 = *(_BYTE *)(a1 + 72);
    v9 = *(void **)(a1 + 56);
    if (v9)
      v9 = _Block_copy(v9);
    v10 = *(NSObject **)(a1 + 64);
    v25 = v9;
    object = v10;
    if (v10)
      dispatch_retain(v10);
    v11 = _Block_copy(aBlock);
    v12 = *(NSObject **)(v3 + 88);
    if (v12)
      dispatch_retain(v12);
    v28 = v11;
    v29 = v12;
    (*(void (**)(uint64_t, const void **))(*(_QWORD *)v6 + 104))(v6, &v28);
    if (v29)
      dispatch_release(v29);
    if (v28)
      _Block_release(v28);
    if (object)
      dispatch_release(object);
    if (v25)
      _Block_release(v25);
    v13 = v24;
    if (v24)
    {
      v14 = (unint64_t *)&v24->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    return;
  }
  v16 = *(const void **)(a1 + 56);
  if (!v16)
  {
    v17 = 0;
    v18 = *(NSObject **)(a1 + 64);
    v21 = 0;
    v22 = v18;
    if (!v18)
      goto LABEL_27;
    goto LABEL_26;
  }
  v17 = _Block_copy(v16);
  v18 = *(NSObject **)(a1 + 64);
  v21 = v17;
  v22 = v18;
  if (v18)
LABEL_26:
    dispatch_retain(v18);
LABEL_27:
  __p = operator new(0x20uLL);
  v20 = xmmword_1A357F050;
  strcpy((char *)__p, "Error enabling buffering");
  diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v21, (uint64_t)&__p);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  if (v18)
    dispatch_release(v18);
  if (v17)
    _Block_release(v17);
}

void sub_1A35465F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1A354662C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v3 - 64);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v2);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal10sleep_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEbN12capabilities4diag15BufferingParamsE_block_invoke_2(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  const void *v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  _QWORD *v22;
  _QWORD *v23;
  const void *v24;
  void *v25;
  NSObject *v26;
  void *v27;
  __int128 v28;
  void *v29;
  NSObject *v30;
  void *__p;
  char v32;
  void *v33;
  NSObject *v34;

  v3 = *(_QWORD *)(a1 + 32);
  if (a2)
  {
    v4 = *(_QWORD *)(v3 + 216);
    if (!v4)
      return;
    v5 = *(_QWORD **)(v4 + 16);
    v6 = (_QWORD *)(v4 + 24);
    if (v5 != (_QWORD *)(v4 + 24))
    {
      do
      {
        v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[5] + 16) + 24) + 336);
        usleep(0x7A120u);
        v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[5] + 16) + 24) + 336);
        if (v13 != v14)
        {
          usleep(0x7A120u);
          v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[5] + 16) + 24) + 336);
          if (v14 != v15)
          {
            usleep(0x7A120u);
            v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[5] + 16) + 24) + 336);
            if (v15 != v16)
            {
              usleep(0x7A120u);
              v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[5] + 16) + 24) + 336);
              if (v16 != v17)
              {
                usleep(0x7A120u);
                v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[5] + 16) + 24) + 336);
                if (v17 != v18)
                {
                  usleep(0x7A120u);
                  if (v18 != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[5] + 16) + 24) + 336))
                    usleep(0x7A120u);
                }
              }
            }
          }
        }
        v19 = (_QWORD *)v5[1];
        if (v19)
        {
          do
          {
            v20 = v19;
            v19 = (_QWORD *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v20 = (_QWORD *)v5[2];
            v21 = *v20 == (_QWORD)v5;
            v5 = v20;
          }
          while (!v21);
        }
        v5 = v20;
      }
      while (v20 != v6);
    }
    if (*(_BYTE *)(a1 + 72))
    {
      v7 = *(_QWORD *)(v3 + 216);
      v8 = *(_QWORD **)(v7 + 16);
      v9 = (_QWORD *)(v7 + 24);
      if (v8 != (_QWORD *)(v7 + 24))
      {
        do
        {
          diag::DIAGReader::stop((diag::DIAGReader *)v8[5]);
          v22 = (_QWORD *)v8[1];
          if (v22)
          {
            do
            {
              v23 = v22;
              v22 = (_QWORD *)*v22;
            }
            while (v22);
          }
          else
          {
            do
            {
              v23 = (_QWORD *)v8[2];
              v21 = *v23 == (_QWORD)v8;
              v8 = v23;
            }
            while (!v21);
          }
          v8 = v23;
        }
        while (v23 != v9);
      }
    }
    v10 = *(const void **)(a1 + 56);
    if (v10)
    {
      v11 = _Block_copy(v10);
      v12 = *(NSObject **)(a1 + 64);
      v33 = v11;
      v34 = v12;
      if (!v12)
      {
LABEL_9:
        v32 = 0;
        LOBYTE(__p) = 0;
        diag::Service::Internal::changeStateAndNotify_sync(v3, 2u, (uint64_t)&v33, (uint64_t)&__p);
        if (v32 < 0)
          operator delete(__p);
        if (v12)
          dispatch_release(v12);
        if (v11)
          _Block_release(v11);
        return;
      }
    }
    else
    {
      v11 = 0;
      v12 = *(NSObject **)(a1 + 64);
      v33 = 0;
      v34 = v12;
      if (!v12)
        goto LABEL_9;
    }
    dispatch_retain(v12);
    goto LABEL_9;
  }
  v24 = *(const void **)(a1 + 56);
  if (!v24)
  {
    v25 = 0;
    v26 = *(NSObject **)(a1 + 64);
    v29 = 0;
    v30 = v26;
    if (!v26)
      goto LABEL_39;
    goto LABEL_38;
  }
  v25 = _Block_copy(v24);
  v26 = *(NSObject **)(a1 + 64);
  v29 = v25;
  v30 = v26;
  if (v26)
LABEL_38:
    dispatch_retain(v26);
LABEL_39:
  v27 = operator new(0x28uLL);
  v28 = xmmword_1A3584430;
  strcpy((char *)v27, "Error requesting drain of buffer");
  diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v29, (uint64_t)&v27);
  if (SHIBYTE(v28) < 0)
    operator delete(v27);
  if (v26)
    dispatch_release(v26);
  if (v25)
    _Block_release(v25);
}

void sub_1A3546964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
    operator delete(__p);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_1A354698C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal4wakeEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  const void *v4;
  void *v5;
  NSObject *v6;
  unsigned int v7;
  std::__shared_weak_count *v8;
  void *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  NSObject *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22;
  void *v23;
  dispatch_object_t v24;
  uint8_t buf[8];
  uint64_t v26;
  void (*v27)(_QWORD *, int);
  void *v28;
  uint64_t v29;
  void *v30;
  std::__shared_weak_count *v31;
  void *aBlock;
  dispatch_object_t object;
  const void *v34;
  dispatch_object_t v35;
  void *v36;
  std::__shared_weak_count *v37;

  v2 = a1[4];
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEFAULT, "#I Wake", buf, 2u);
  }
  v4 = (const void *)a1[5];
  if (v4)
  {
    v5 = _Block_copy(v4);
    v6 = a1[6];
    v23 = v5;
    v24 = v6;
    if (!v6)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 0;
  v6 = a1[6];
  v23 = 0;
  v24 = v6;
  if (v6)
LABEL_5:
    dispatch_retain(v6);
LABEL_6:
  v7 = *(_DWORD *)(v2 + 460);
  if (v7 == 2)
  {
    *(_DWORD *)(v2 + 460) = 3;
    v9 = *(void **)(v2 + 72);
    v8 = *(std::__shared_weak_count **)(v2 + 80);
    v36 = v9;
    if (!v8 || (v10 = std::__shared_weak_count::lock(v8), (v37 = v10) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v11 = *(_QWORD *)(v2 + 232);
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    v26 = 1174405120;
    v27 = ___ZN4diag7Service8Internal16prepareWake_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke;
    v28 = &__block_descriptor_tmp_74_1;
    v29 = v2;
    v30 = v9;
    v31 = v10;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    if (v5)
    {
      aBlock = _Block_copy(v5);
      object = v6;
      if (!v6)
      {
LABEL_14:
        v14 = _Block_copy(buf);
        v15 = *(NSObject **)(v2 + 88);
        if (v15)
          dispatch_retain(v15);
        v34 = v14;
        v35 = v15;
        (*(void (**)(uint64_t, const void **))(*(_QWORD *)v11 + 120))(v11, &v34);
        if (v35)
          dispatch_release(v35);
        if (v34)
          _Block_release(v34);
        if (object)
          dispatch_release(object);
        if (aBlock)
          _Block_release(aBlock);
        v16 = v31;
        if (v31)
        {
          v17 = (unint64_t *)&v31->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v19 = v37;
        if (v37)
        {
          v20 = (unint64_t *)&v37->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v6 = v24;
        goto LABEL_44;
      }
    }
    else
    {
      aBlock = 0;
      object = v6;
      if (!v6)
        goto LABEL_14;
    }
    dispatch_retain(v6);
    goto LABEL_14;
  }
  if (!v5)
  {
    v22 = 0;
    v36 = 0;
    v37 = (std::__shared_weak_count *)v6;
    if (!v6)
      goto LABEL_38;
    goto LABEL_37;
  }
  v22 = _Block_copy(v5);
  v36 = v22;
  v37 = (std::__shared_weak_count *)v6;
  if (v6)
LABEL_37:
    dispatch_retain(v6);
LABEL_38:
  HIBYTE(v27) = 0;
  buf[0] = 0;
  diag::Service::Internal::changeStateAndNotify_sync(v2, v7, (uint64_t)&v36, (uint64_t)buf);
  if (SHIBYTE(v27) < 0)
    operator delete(*(void **)buf);
  if (v6)
    dispatch_release(v6);
  if (v22)
    _Block_release(v22);
LABEL_44:
  if (v6)
    dispatch_release(v6);
  if (v23)
    _Block_release(v23);
}

void sub_1A3546CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v11 - 80);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v9);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v10);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v11 - 64);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1A3546CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (a16 < 0)
    operator delete(__p);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v16 - 64);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1A3546D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal16prepareWake_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke(_QWORD *a1, int a2)
{
  uint64_t v3;
  const void *v4;
  void *v5;
  NSObject *v6;
  std::string::size_type v7;
  NSObject *v8;
  _BOOL8 v9;
  uint64_t v10;
  capabilities::abs *shouldUseMinBasebandTransportIOReadSize;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  NSObject *v18;
  char *v19;
  NSObject *v20;
  void *v21;
  char *v22;
  NSObject *v23;
  std::string *v24;
  std::string::size_type size;
  std::string *v26;
  std::string::size_type v27;
  char v28;
  NSObject *v29;
  void *v30;
  std::string *v31;
  std::__shared_weak_count *v32;
  std::string::size_type v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void *v38;
  NSObject *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  void *__p;
  __int128 v47;
  void *v48;
  NSObject *v49;
  void *v50;
  dispatch_object_t v51;
  void *v52;
  dispatch_object_t object;
  std::string v54;
  void *aBlock;
  int v56;
  char v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  char v62;
  void *v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  std::string buf;
  void *v68;
  uint64_t v69;
  void **v70;
  std::__shared_weak_count *v71;
  void *v72;
  dispatch_object_t v73;
  std::string v74;
  void *v75;
  void **v76;
  uint64_t v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  v4 = (const void *)a1[7];
  if (a2)
  {
    if (v4)
    {
      v5 = _Block_copy(v4);
      v6 = a1[8];
      v50 = v5;
      v51 = v6;
      if (!v6)
        goto LABEL_5;
    }
    else
    {
      v5 = 0;
      v6 = a1[8];
      v50 = 0;
      v51 = v6;
      if (!v6)
      {
LABEL_5:
        v7 = MEMORY[0x1E0C809B0];
        if (!*(_BYTE *)(v3 + 445))
          goto LABEL_80;
        v8 = *(NSObject **)(v3 + 40);
        v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
        if (v9)
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1A343C000, v8, OS_LOG_TYPE_DEFAULT, "#I Configuring ADPL", (uint8_t *)&buf, 2u);
        }
        v10 = *(_QWORD *)(v3 + 288);
        v56 = 2;
        v57 = 0;
        v58 = 10;
        shouldUseMinBasebandTransportIOReadSize = (capabilities::abs *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)v9);
        if ((_DWORD)shouldUseMinBasebandTransportIOReadSize)
          v12 = 0x4000;
        else
          v12 = 0x8000;
        v59 = v12;
        if (capabilities::abs::shouldUseMinBasebandTransportIOReadCount(shouldUseMinBasebandTransportIOReadSize))
          v13 = 4;
        else
          v13 = 16;
        v60 = v13;
        v61 = 0;
        v62 = 0;
        aBlock = 0;
        v14 = (*(uint64_t (**)(uint64_t, int *, void **))(*(_QWORD *)v10 + 48))(v10, &v56, &aBlock);
        if (aBlock)
          _Block_release(aBlock);
        if (v14)
        {
          memset(&v54, 0, sizeof(v54));
          v15 = *(_QWORD *)(v3 + 288);
          v63 = 0;
          v64 = &v63;
          v65 = 0x2000000000;
          v66 = 0;
          buf.__r_.__value_.__r.__words[0] = v7;
          v74.__r_.__value_.__r.__words[0] = v7;
          v74.__r_.__value_.__l.__size_ = 0x40000000;
          v74.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN17BasebandTransportdeEv_block_invoke;
          v75 = &unk_1E4A0A0E8;
          v76 = &v63;
          v77 = v15;
          v52 = &v74;
          buf.__r_.__value_.__l.__size_ = 0x40000000;
          buf.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
          v68 = &__block_descriptor_tmp_77;
          v69 = v15 + 72;
          v70 = &v52;
          v16 = *(NSObject **)(v15 + 88);
          if (*(_QWORD *)(v15 + 96))
            dispatch_async_and_wait(v16, &buf);
          else
            dispatch_sync(v16, &buf);
          _Block_object_dispose(&v63, 8);
          if (ETLADPLLoggingEnable())
          {
            v23 = *(NSObject **)(v3 + 40);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(buf.__r_.__value_.__l.__data_) = 0;
              _os_log_impl(&dword_1A343C000, v23, OS_LOG_TYPE_DEFAULT, "#I Success configuring ADPL", (uint8_t *)&buf, 2u);
            }
            goto LABEL_75;
          }
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
          *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = xmmword_1A3580300;
          strcpy(buf.__r_.__value_.__l.__data_, "Failed to configure ADPL: ");
          if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v24 = &v54;
          else
            v24 = (std::string *)v54.__r_.__value_.__r.__words[0];
          if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
          else
            size = v54.__r_.__value_.__l.__size_;
          v26 = std::string::append(&buf, (const std::string::value_type *)v24, size);
          v27 = v26->__r_.__value_.__r.__words[0];
          v74.__r_.__value_.__r.__words[0] = v26->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v74.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v26->__r_.__value_.__r.__words[1] + 7);
          v28 = HIBYTE(v26->__r_.__value_.__r.__words[2]);
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          v26->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v54.__r_.__value_.__l.__data_);
          v54.__r_.__value_.__r.__words[0] = v27;
          v54.__r_.__value_.__l.__size_ = v74.__r_.__value_.__r.__words[0];
          *(std::string::size_type *)((char *)&v54.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v74.__r_.__value_.__r.__words + 7);
          *((_BYTE *)&v54.__r_.__value_.__s + 23) = v28;
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(buf.__r_.__value_.__l.__data_);
            v29 = *(NSObject **)(v3 + 40);
            if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            {
LABEL_57:
              if (v5)
                goto LABEL_58;
              goto LABEL_66;
            }
          }
          else
          {
            v29 = *(NSObject **)(v3 + 40);
            if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
              goto LABEL_57;
          }
          v31 = &v54;
          if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v31 = (std::string *)v54.__r_.__value_.__r.__words[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v31;
          _os_log_error_impl(&dword_1A343C000, v29, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
          if (v5)
          {
LABEL_58:
            v30 = _Block_copy(v5);
            v63 = v30;
            v64 = v6;
            if (!v6)
            {
LABEL_60:
              if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v74, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
              else
                v74 = v54;
              diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v63, (uint64_t)&v74);
              if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v74.__r_.__value_.__l.__data_);
              if (v6)
                dispatch_release(v6);
              if (v30)
                _Block_release(v30);
LABEL_75:
              if (*(_BYTE *)(v3 + 446))
                BasebandTransport::close(*(BasebandTransport **)(v3 + 288));
              if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
              {
                v22 = (char *)v54.__r_.__value_.__r.__words[0];
LABEL_79:
                operator delete(v22);
              }
LABEL_80:
              v33 = *(_QWORD *)(v3 + 72);
              v32 = *(std::__shared_weak_count **)(v3 + 80);
              v54.__r_.__value_.__r.__words[0] = v33;
              if (!v32
                || (v34 = std::__shared_weak_count::lock(v32),
                    (v54.__r_.__value_.__l.__size_ = (std::string::size_type)v34) == 0))
              {
                std::__throw_bad_weak_ptr[abi:ne180100]();
              }
              v35 = *(_QWORD *)(v3 + 232);
              buf.__r_.__value_.__r.__words[0] = v7;
              buf.__r_.__value_.__l.__size_ = 1174405120;
              buf.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN4diag7Service8Internal15finishWake_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke;
              v68 = &__block_descriptor_tmp_80_0;
              v69 = v3;
              v70 = (void **)v33;
              v71 = v34;
              p_shared_owners = (unint64_t *)&v34->__shared_owners_;
              do
                v37 = __ldxr(p_shared_owners);
              while (__stxr(v37 + 1, p_shared_owners));
              if (v5)
              {
                v72 = _Block_copy(v5);
                v73 = v6;
                if (!v6)
                {
LABEL_87:
                  v38 = _Block_copy(&buf);
                  v39 = *(NSObject **)(v3 + 88);
                  if (v39)
                    dispatch_retain(v39);
                  v52 = v38;
                  object = v39;
                  (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v35 + 136))(v35, 1, &v52);
                  if (object)
                    dispatch_release(object);
                  if (v52)
                    _Block_release(v52);
                  if (v73)
                    dispatch_release(v73);
                  if (v72)
                    _Block_release(v72);
                  v40 = v71;
                  if (v71)
                  {
                    v41 = (unint64_t *)&v71->__shared_owners_;
                    do
                      v42 = __ldaxr(v41);
                    while (__stlxr(v42 - 1, v41));
                    if (!v42)
                    {
                      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                      std::__shared_weak_count::__release_weak(v40);
                    }
                  }
                  v43 = (std::__shared_weak_count *)v54.__r_.__value_.__l.__size_;
                  if (v54.__r_.__value_.__l.__size_)
                  {
                    v44 = (unint64_t *)(v54.__r_.__value_.__l.__size_ + 8);
                    do
                      v45 = __ldaxr(v44);
                    while (__stlxr(v45 - 1, v44));
                    if (!v45)
                    {
                      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                      std::__shared_weak_count::__release_weak(v43);
                    }
                  }
                  if (v51)
                    dispatch_release(v51);
                  if (v50)
                    _Block_release(v50);
                  return;
                }
              }
              else
              {
                v72 = 0;
                v73 = v6;
                if (!v6)
                  goto LABEL_87;
              }
              dispatch_retain(v6);
              goto LABEL_87;
            }
LABEL_59:
            dispatch_retain(v6);
            goto LABEL_60;
          }
LABEL_66:
          v30 = 0;
          v63 = 0;
          v64 = v6;
          if (!v6)
            goto LABEL_60;
          goto LABEL_59;
        }
        v19 = (char *)operator new(0x30uLL);
        strcpy(v19, "Failed to open DIAG transport to configure ADPL");
        v20 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
          _os_log_error_impl(&dword_1A343C000, v20, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
          if (v5)
          {
LABEL_34:
            v21 = _Block_copy(v5);
            v63 = v21;
            v64 = v6;
            if (!v6)
            {
LABEL_36:
              std::string::__init_copy_ctor_external(&v74, v19, 0x2FuLL);
              diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v63, (uint64_t)&v74);
              if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v74.__r_.__value_.__l.__data_);
              if (v6)
                dispatch_release(v6);
              if (v21)
                _Block_release(v21);
              v22 = v19;
              goto LABEL_79;
            }
LABEL_35:
            dispatch_retain(v6);
            goto LABEL_36;
          }
        }
        else if (v5)
        {
          goto LABEL_34;
        }
        v21 = 0;
        v63 = 0;
        v64 = v6;
        if (!v6)
          goto LABEL_36;
        goto LABEL_35;
      }
    }
    dispatch_retain(v6);
    goto LABEL_5;
  }
  if (!v4)
  {
    v17 = 0;
    v18 = a1[8];
    v48 = 0;
    v49 = v18;
    if (!v18)
      goto LABEL_22;
    goto LABEL_21;
  }
  v17 = _Block_copy(v4);
  v18 = a1[8];
  v48 = v17;
  v49 = v18;
  if (v18)
LABEL_21:
    dispatch_retain(v18);
LABEL_22:
  __p = operator new(0x20uLL);
  v47 = xmmword_1A357F950;
  strcpy((char *)__p, "Error disabling buffering");
  diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v48, (uint64_t)&__p);
  if (SHIBYTE(v47) < 0)
    operator delete(__p);
  if (v18)
    dispatch_release(v18);
  if (v17)
    _Block_release(v17);
}

void sub_1A35474A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *aBlock,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a33);
  if (a26 < 0)
    operator delete(__p);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal15finishWake_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke(_QWORD *a1, int a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  const void *v16;
  void *v17;
  NSObject *v18;
  void *__p;
  __int128 v20;
  void *v21;
  NSObject *v22;
  _QWORD aBlock[6];
  std::__shared_weak_count *v24;
  void *v25;
  dispatch_object_t object;
  const void *v27;
  dispatch_object_t v28;

  v3 = a1[4];
  if (a2)
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[2] = ___ZN4diag7Service8Internal15finishWake_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke_2;
    aBlock[3] = &__block_descriptor_tmp_78_2;
    v5 = a1[5];
    v4 = (std::__shared_weak_count *)a1[6];
    aBlock[4] = v3;
    aBlock[5] = v5;
    v6 = *(_QWORD *)(v3 + 232);
    aBlock[1] = 1174405120;
    v24 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = (void *)a1[7];
    if (v9)
      v9 = _Block_copy(v9);
    v10 = a1[8];
    v25 = v9;
    object = v10;
    if (v10)
      dispatch_retain(v10);
    v11 = _Block_copy(aBlock);
    v12 = *(NSObject **)(v3 + 88);
    if (v12)
      dispatch_retain(v12);
    v27 = v11;
    v28 = v12;
    (*(void (**)(uint64_t, const void **))(*(_QWORD *)v6 + 72))(v6, &v27);
    if (v28)
      dispatch_release(v28);
    if (v27)
      _Block_release(v27);
    if (object)
      dispatch_release(object);
    if (v25)
      _Block_release(v25);
    v13 = v24;
    if (v24)
    {
      v14 = (unint64_t *)&v24->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    return;
  }
  v16 = (const void *)a1[7];
  if (!v16)
  {
    v17 = 0;
    v18 = a1[8];
    v21 = 0;
    v22 = v18;
    if (!v18)
      goto LABEL_27;
    goto LABEL_26;
  }
  v17 = _Block_copy(v16);
  v18 = a1[8];
  v21 = v17;
  v22 = v18;
  if (v18)
LABEL_26:
    dispatch_retain(v18);
LABEL_27:
  __p = operator new(0x28uLL);
  v20 = xmmword_1A35802A0;
  strcpy((char *)__p, "Error switching to merged logging masks");
  diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v21, (uint64_t)&__p);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  if (v18)
    dispatch_release(v18);
  if (v17)
    _Block_release(v17);
}

void sub_1A3547820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1A3547858(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v3 - 64);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v2);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal15finishWake_syncEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke_2(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  const void *v7;
  void *v8;
  NSObject *v9;
  diag::DIAGReader *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  const void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  __int128 v19;
  void *v20;
  NSObject *v21;
  void *__p;
  char v23;
  void *v24;
  NSObject *v25;

  v3 = a1[4];
  if (a2)
  {
    v4 = *(_QWORD *)(v3 + 216);
    if (v4)
    {
      v5 = *(_QWORD **)(v4 + 16);
      v6 = (_QWORD *)(v4 + 24);
      if (v5 != (_QWORD *)(v4 + 24))
      {
        do
        {
          v10 = (diag::DIAGReader *)v5[5];
          v11 = *(_QWORD *)(*((_QWORD *)v10 + 2) + 24);
          if (!*(_BYTE *)(v11 + 332) || *(_DWORD *)(v11 + 328) != 1)
            diag::DIAGReader::start(v10);
          v12 = (_QWORD *)v5[1];
          if (v12)
          {
            do
            {
              v13 = v12;
              v12 = (_QWORD *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              v13 = (_QWORD *)v5[2];
              v14 = *v13 == (_QWORD)v5;
              v5 = v13;
            }
            while (!v14);
          }
          v5 = v13;
        }
        while (v13 != v6);
      }
    }
    v7 = (const void *)a1[7];
    if (v7)
    {
      v8 = _Block_copy(v7);
      v9 = a1[8];
      v24 = v8;
      v25 = v9;
      if (!v9)
      {
LABEL_7:
        v23 = 0;
        LOBYTE(__p) = 0;
        diag::Service::Internal::changeStateAndNotify_sync(v3, 1u, (uint64_t)&v24, (uint64_t)&__p);
        if (v23 < 0)
          operator delete(__p);
        if (v9)
          dispatch_release(v9);
        if (v8)
          _Block_release(v8);
        return;
      }
    }
    else
    {
      v8 = 0;
      v9 = a1[8];
      v24 = 0;
      v25 = v9;
      if (!v9)
        goto LABEL_7;
    }
    dispatch_retain(v9);
    goto LABEL_7;
  }
  v15 = (const void *)a1[7];
  if (!v15)
  {
    v16 = 0;
    v17 = a1[8];
    v20 = 0;
    v21 = v17;
    if (!v17)
      goto LABEL_26;
    goto LABEL_25;
  }
  v16 = _Block_copy(v15);
  v17 = a1[8];
  v20 = v16;
  v21 = v17;
  if (v17)
LABEL_25:
    dispatch_retain(v17);
LABEL_26:
  v18 = operator new(0x20uLL);
  v19 = xmmword_1A357F050;
  strcpy((char *)v18, "Error completing wake up");
  diag::Service::Internal::changeStateAndNotify_sync(v3, 4u, (uint64_t)&v20, (uint64_t)&v18);
  if (SHIBYTE(v19) < 0)
    operator delete(v18);
  if (v17)
    dispatch_release(v17);
  if (v16)
    _Block_release(v16);
}

void sub_1A3547A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1A3547A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (a19 < 0)
    operator delete(__p);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v19 - 48);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal8snapshotENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_bN8dispatch8callbackIU13block_pointerFvNS0_5StateES8_EEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  const void *v11;
  void *v12;
  NSObject *v13;
  const void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  const void *v25;
  void *v26;
  NSObject *v27;
  void *v28;
  char v29;
  void *v30;
  NSObject *v31;
  void *__p;
  char v33;
  void *v34;
  NSObject *v35;
  void *v36;
  NSObject *v37;
  std::string v38;
  std::string v39;
  _QWORD aBlock[6];
  std::__shared_weak_count *v41;
  std::string v42;
  std::string v43;
  void *v44;
  dispatch_object_t object;
  char v46;
  const void *v47;
  dispatch_object_t v48;
  uint8_t buf[16];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEFAULT, "#I Snapshot", buf, 2u);
  }
  v4 = *(_DWORD *)(v2 + 460);
  if (v4 <= 4 && ((1 << v4) & 0x13) != 0)
  {
    if (*(_QWORD *)(v2 + 216))
    {
      if (*(_BYTE *)(v2 + 456))
      {
        v6 = *(_QWORD *)(v2 + 232);
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN4diag7Service8Internal8snapshotENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_bN8dispatch8callbackIU13block_pointerFvNS0_5StateES8_EEE_block_invoke_81;
        aBlock[3] = &__block_descriptor_tmp_82_0;
        v8 = *(_QWORD *)(a1 + 40);
        v7 = *(std::__shared_weak_count **)(a1 + 48);
        aBlock[4] = v2;
        aBlock[5] = v8;
        v41 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        if (*(char *)(a1 + 79) < 0)
          std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)(a1 + 56), *(_QWORD *)(a1 + 64));
        else
          v42 = *(std::string *)(a1 + 56);
        if (*(char *)(a1 + 103) < 0)
          std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)(a1 + 80), *(_QWORD *)(a1 + 88));
        else
          v43 = *(std::string *)(a1 + 80);
        v46 = *(_BYTE *)(a1 + 120);
        v17 = *(void **)(a1 + 104);
        if (v17)
          v17 = _Block_copy(v17);
        v18 = *(NSObject **)(a1 + 112);
        v44 = v17;
        object = v18;
        if (v18)
          dispatch_retain(v18);
        v19 = _Block_copy(aBlock);
        v20 = *(NSObject **)(v2 + 88);
        if (v20)
          dispatch_retain(v20);
        v47 = v19;
        v48 = v20;
        (*(void (**)(uint64_t, const void **))(*(_QWORD *)v6 + 104))(v6, &v47);
        if (v48)
          dispatch_release(v48);
        if (v47)
          _Block_release(v47);
        if (object)
          dispatch_release(object);
        if (v44)
          _Block_release(v44);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v43.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_56:
            v21 = v41;
            if (!v41)
              return;
            goto LABEL_60;
          }
        }
        else if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_56;
        }
        operator delete(v42.__r_.__value_.__l.__data_);
        v21 = v41;
        if (!v41)
          return;
LABEL_60:
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
        return;
      }
      if (*(char *)(a1 + 79) < 0)
      {
        std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)(a1 + 56), *(_QWORD *)(a1 + 64));
        if ((*(char *)(a1 + 103) & 0x80000000) == 0)
          goto LABEL_35;
      }
      else
      {
        v39 = *(std::string *)(a1 + 56);
        if ((*(char *)(a1 + 103) & 0x80000000) == 0)
        {
LABEL_35:
          v38 = *(std::string *)(a1 + 80);
          goto LABEL_70;
        }
      }
      std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)(a1 + 80), *(_QWORD *)(a1 + 88));
LABEL_70:
      v24 = *(unsigned __int8 *)(a1 + 120);
      v25 = *(const void **)(a1 + 104);
      if (v25)
      {
        v26 = _Block_copy(v25);
        v27 = *(NSObject **)(a1 + 112);
        v36 = v26;
        v37 = v27;
        if (!v27)
        {
LABEL_73:
          diag::Service::Internal::finishSnapshot_sync(v2, (uint64_t)&v39, (uint64_t)&v38, v24 != 0, (uint64_t)&v36);
          if (v27)
            dispatch_release(v27);
          if (v26)
            _Block_release(v26);
          if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v38.__r_.__value_.__l.__data_);
          if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v39.__r_.__value_.__l.__data_);
          return;
        }
      }
      else
      {
        v26 = 0;
        v27 = *(NSObject **)(a1 + 112);
        v36 = 0;
        v37 = v27;
        if (!v27)
          goto LABEL_73;
      }
      dispatch_retain(v27);
      goto LABEL_73;
    }
    v11 = *(const void **)(a1 + 104);
    if (v11)
    {
      v12 = _Block_copy(v11);
      v13 = *(NSObject **)(a1 + 112);
      v34 = v12;
      v35 = v13;
      if (!v13)
      {
LABEL_17:
        v33 = 0;
        LOBYTE(__p) = 0;
        diag::Service::Internal::changeStateAndNotify_sync(v2, v4, (uint64_t)&v34, (uint64_t)&__p);
        if (v33 < 0)
          operator delete(__p);
        if (v13)
          dispatch_release(v13);
        if (v12)
          _Block_release(v12);
        return;
      }
    }
    else
    {
      v12 = 0;
      v13 = *(NSObject **)(a1 + 112);
      v34 = 0;
      v35 = v13;
      if (!v13)
        goto LABEL_17;
    }
    dispatch_retain(v13);
    goto LABEL_17;
  }
  v14 = *(const void **)(a1 + 104);
  if (!v14)
  {
    v15 = 0;
    v16 = *(NSObject **)(a1 + 112);
    v30 = 0;
    v31 = v16;
    if (!v16)
      goto LABEL_27;
    goto LABEL_26;
  }
  v15 = _Block_copy(v14);
  v16 = *(NSObject **)(a1 + 112);
  v30 = v15;
  v31 = v16;
  if (v16)
LABEL_26:
    dispatch_retain(v16);
LABEL_27:
  v29 = 0;
  LOBYTE(v28) = 0;
  diag::Service::Internal::changeStateAndNotify_sync(v2, v4, (uint64_t)&v30, (uint64_t)&v28);
  if (v29 < 0)
    operator delete(v28);
  if (v16)
    dispatch_release(v16);
  if (v15)
    _Block_release(v15);
}

void sub_1A3547F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a39 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A3547FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v49 - 80);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback(v47);
  if (a47 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v48 + 40);
      _Unwind_Resume(a1);
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v48 + 40);
  _Unwind_Resume(a1);
}

void ___ZN4diag7Service8Internal8snapshotENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_bN8dispatch8callbackIU13block_pointerFvNS0_5StateES8_EEE_block_invoke_81(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  NSObject *v16;
  int v17;
  const void *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  std::string v23;
  std::string v24;
  uint8_t buf[16];

  v3 = *(_QWORD *)(a1 + 32);
  if (a2)
  {
    v4 = *(_QWORD *)(v3 + 216);
    v5 = *(_QWORD **)(v4 + 16);
    v6 = (_QWORD *)(v4 + 24);
    if (v5 != (_QWORD *)(v4 + 24))
    {
      do
      {
        v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[5] + 16) + 24) + 336);
        usleep(0x7A120u);
        v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[5] + 16) + 24) + 336);
        if (v7 != v8)
        {
          usleep(0x7A120u);
          v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[5] + 16) + 24) + 336);
          if (v8 != v9)
          {
            usleep(0x7A120u);
            v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[5] + 16) + 24) + 336);
            if (v9 != v10)
            {
              usleep(0x7A120u);
              v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[5] + 16) + 24) + 336);
              if (v10 != v11)
              {
                usleep(0x7A120u);
                v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[5] + 16) + 24) + 336);
                if (v11 != v12)
                {
                  usleep(0x7A120u);
                  if (v12 != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[5] + 16) + 24) + 336))
                    usleep(0x7A120u);
                }
              }
            }
          }
        }
        v13 = (_QWORD *)v5[1];
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (_QWORD *)v5[2];
            v15 = *v14 == (_QWORD)v5;
            v5 = v14;
          }
          while (!v15);
        }
        v5 = v14;
      }
      while (v14 != v6);
    }
  }
  else
  {
    v16 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A343C000, v16, OS_LOG_TYPE_DEFAULT, "#I Requested to drain of buffer failed, continuing with snapshot", buf, 2u);
    }
  }
  if (*(char *)(a1 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(a1 + 56), *(_QWORD *)(a1 + 64));
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
      goto LABEL_22;
  }
  else
  {
    v24 = *(std::string *)(a1 + 56);
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
LABEL_22:
      v23 = *(std::string *)(a1 + 80);
      goto LABEL_25;
    }
  }
  std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)(a1 + 80), *(_QWORD *)(a1 + 88));
LABEL_25:
  v17 = *(unsigned __int8 *)(a1 + 120);
  v18 = *(const void **)(a1 + 104);
  if (v18)
  {
    v19 = _Block_copy(v18);
    v20 = *(NSObject **)(a1 + 112);
    v21 = v19;
    v22 = v20;
    if (!v20)
      goto LABEL_28;
    goto LABEL_27;
  }
  v19 = 0;
  v20 = *(NSObject **)(a1 + 112);
  v21 = 0;
  v22 = v20;
  if (v20)
LABEL_27:
    dispatch_retain(v20);
LABEL_28:
  diag::Service::Internal::finishSnapshot_sync(v3, (uint64_t)&v24, (uint64_t)&v23, v17 != 0, (uint64_t)&v21);
  if (v20)
    dispatch_release(v20);
  if (v19)
    _Block_release(v19);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_38:
    operator delete(v24.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_38;
}

void sub_1A3548310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a23 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void diag::Service::Internal::finishSnapshot_sync(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  std::string::size_type v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  size_t v18;
  unint64_t v19;
  std::string *p_dst;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  const std::string::value_type *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  uint64_t *v42;
  uint64_t v43;
  std::string *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  BOOL v50;
  uint64_t *v51;
  NSObject *v52;
  _BOOL4 v53;
  int v54;
  BOOL v55;
  std::string *v56;
  _BOOL4 v57;
  int v58;
  size_t v59;
  unint64_t v60;
  std::string *v61;
  int v62;
  size_t v63;
  unint64_t v64;
  std::string *v65;
  uint64_t v66;
  uint64_t v67;
  const void *v68;
  int v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  BOOL v77;
  uint64_t *v78;
  NSObject *v79;
  _BOOL4 v80;
  int v81;
  _BOOL4 v82;
  std::string *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  const void *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  void *v92;
  NSObject *v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _BOOL4 v99;
  std::string *v100;
  _BOOL4 v101;
  uint64_t v102;
  NSObject *v103;
  int v104;
  int v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  unsigned int v109;
  void *v110;
  NSObject *v111;
  _QWORD *v112;
  _QWORD *v113;
  void *v114;
  char v115;
  void *v116;
  NSObject *v117;
  std::string v118;
  std::string v119;
  std::string v120;
  std::string v121;
  std::string v122;
  std::string v123;
  std::string v124;
  std::string v125;
  std::string v126;
  void *__p;
  char v128;
  void *v129;
  NSObject *v130;
  std::string v131;
  std::string v132;
  std::string v133;
  std::string v134;
  std::string v135;
  std::string v136;
  std::string v137;
  void *v138;
  __int128 *p_buf;
  uint64_t v140;
  std::string *v141;
  std::string __dst;
  void *v143;
  uint64_t v144;
  std::string **v145;
  __int128 buf;
  uint64_t v147;
  char v148;
  uint64_t v149;

  v149 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 445))
  {
    diag::copyDMC(a1 + 112, (const void **)(*(_QWORD *)(a1 + 352) + 168));
    diag::copyDMC(a1 + 136, (const void **)(*(_QWORD *)(a1 + 352) + 168));
    diag::copyDMC(a1 + 184, (const void **)(*(_QWORD *)(a1 + 352) + 168));
    diag::copyDMC(a1 + 160, (const void **)(*(_QWORD *)(a1 + 352) + 168));
  }
  if (*(_BYTE *)(a1 + 446))
    v10 = 368;
  else
    v10 = 336;
  diag::copyDMC(a1 + 112, (const void **)(*(_QWORD *)(a1 + v10) + 168));
  diag::copyDMC(a1 + 136, (const void **)(*(_QWORD *)(a1 + v10) + 168));
  diag::copyDMC(a1 + 184, (const void **)(*(_QWORD *)(a1 + v10) + 168));
  diag::copyDMC(a1 + 160, (const void **)(*(_QWORD *)(a1 + v10) + 168));
  v11 = MEMORY[0x1E0C809B0];
  v12 = *(_QWORD *)(a1 + 288);
  if (v12)
  {
    __dst.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
    __dst.__r_.__value_.__l.__size_ = 0x40000000;
    __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN17BasebandTransport9dumpStateEb_block_invoke;
    v143 = &__block_descriptor_tmp_70;
    v144 = v12;
    LOBYTE(v145) = 0;
    ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped((uint64_t *)(v12 + 72), (uint64_t)&__dst);
  }
  v13 = *(_QWORD *)(a1 + 304);
  if (v13)
  {
    __dst.__r_.__value_.__r.__words[0] = v11;
    __dst.__r_.__value_.__l.__size_ = 0x40000000;
    __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN17BasebandTransport9dumpStateEb_block_invoke;
    v143 = &__block_descriptor_tmp_70;
    v144 = v13;
    LOBYTE(v145) = 0;
    ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped((uint64_t *)(v13 + 72), (uint64_t)&__dst);
  }
  v14 = *(_QWORD *)(a1 + 320);
  if (v14)
  {
    __dst.__r_.__value_.__r.__words[0] = v11;
    __dst.__r_.__value_.__l.__size_ = 0x40000000;
    __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN17BasebandTransport9dumpStateEb_block_invoke;
    v143 = &__block_descriptor_tmp_70;
    v144 = v14;
    LOBYTE(v145) = 0;
    ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped((uint64_t *)(v14 + 72), (uint64_t)&__dst);
  }
  v15 = *(_QWORD *)(a1 + 216);
  if (v15 && (v16 = *(_QWORD **)(v15 + 16), v16 != (_QWORD *)(v15 + 24)))
  {
    do
    {
      diag::DIAGReader::stop((diag::DIAGReader *)v16[5]);
      v21 = (_QWORD *)v16[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v16[2];
          v32 = *v22 == (_QWORD)v16;
          v16 = v22;
        }
        while (!v32);
      }
      v16 = v22;
    }
    while (v22 != (_QWORD *)(v15 + 24));
    v15 = *(_QWORD *)(a1 + 216);
    if ((a4 & 1) != 0)
    {
LABEL_15:
      if (!v15)
        goto LABEL_244;
      if (!*(_BYTE *)(a1 + 445))
        goto LABEL_122;
      v17 = *(char *)(a2 + 23);
      if (v17 >= 0)
        v18 = *(unsigned __int8 *)(a2 + 23);
      else
        v18 = *(_QWORD *)(a2 + 8);
      v19 = v18 + 5;
      memset(&__dst, 170, sizeof(__dst));
      if (v18 + 5 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v19 >= 0x17)
      {
        v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v19 | 7) != 0x17)
          v23 = v19 | 7;
        v24 = v23 + 1;
        p_dst = (std::string *)operator new(v23 + 1);
        __dst.__r_.__value_.__l.__size_ = v18 + 5;
        __dst.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v18 + 5;
        if (!v18)
          goto LABEL_43;
      }
      if (v17 >= 0)
        v25 = (const std::string::value_type *)a2;
      else
        v25 = *(const std::string::value_type **)a2;
      memmove(p_dst, v25, v18);
LABEL_43:
      strcpy((char *)p_dst + v18, "-adpl");
      memset(&v137, 170, sizeof(v137));
      v26 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v126, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        v126 = __dst;
      support::fs::createUniquePath((const char *)&v126, &v137);
      if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v126.__r_.__value_.__l.__data_);
        v43 = *(_QWORD *)(a1 + 216);
        if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_91;
      }
      else
      {
        v43 = *(_QWORD *)(a1 + 216);
        if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_91:
          v125 = v137;
          goto LABEL_96;
        }
      }
      std::string::__init_copy_ctor_external(&v125, v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
LABEL_96:
      if (*(char *)(a3 + 23) < 0)
        std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      else
        v124 = *(std::string *)a3;
      v47 = *(_QWORD *)(v43 + 24);
      v46 = v43 + 24;
      v45 = v47;
      if (v47)
      {
        v48 = v46;
        do
        {
          v49 = *(_DWORD *)(v45 + 32);
          v50 = v49 == 0;
          if (v49)
            v51 = (uint64_t *)v45;
          else
            v51 = (uint64_t *)(v45 + 8);
          if (!v50)
            v48 = v45;
          v45 = *v51;
        }
        while (*v51);
        if (v48 != v46 && *(_DWORD *)(v48 + 32) <= 1u)
          diag::DIAGReader::snapshot(*(_QWORD *)(v48 + 40), (uint64_t)&v125);
      }
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v124.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_112:
          v52 = *(NSObject **)(a1 + 40);
          v53 = os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT);
          v54 = SHIBYTE(v137.__r_.__value_.__r.__words[2]);
          if (v53)
            goto LABEL_113;
          goto LABEL_120;
        }
      }
      else if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_112;
      }
      operator delete(v125.__r_.__value_.__l.__data_);
      v52 = *(NSObject **)(a1 + 40);
      v57 = os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT);
      v54 = SHIBYTE(v137.__r_.__value_.__r.__words[2]);
      if (v57)
      {
LABEL_113:
        v55 = v54 < 0;
        v56 = &v137;
        if (v55)
          v56 = (std::string *)v137.__r_.__value_.__r.__words[0];
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v56;
        _os_log_impl(&dword_1A343C000, v52, OS_LOG_TYPE_DEFAULT, "#I Saved ADPL trace: %s", (uint8_t *)&buf, 0xCu);
        if ((*((_BYTE *)&v137.__r_.__value_.__s + 23) & 0x80) != 0)
        {
LABEL_116:
          operator delete(v137.__r_.__value_.__l.__data_);
          if ((v26 & 0x80000000) == 0)
            goto LABEL_122;
          goto LABEL_117;
        }
        goto LABEL_121;
      }
LABEL_120:
      if ((v54 & 0x80) != 0)
        goto LABEL_116;
LABEL_121:
      if (v26 < 0)
LABEL_117:
        operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_122:
      if (*(_BYTE *)(a1 + 446))
      {
        v58 = *(char *)(a2 + 23);
        if (v58 >= 0)
          v59 = *(unsigned __int8 *)(a2 + 23);
        else
          v59 = *(_QWORD *)(a2 + 8);
        v60 = v59 + 5;
        memset(&__dst, 170, sizeof(__dst));
        if (v59 + 5 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v60 >= 0x17)
        {
          v66 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v60 | 7) != 0x17)
            v66 = v60 | 7;
          v67 = v66 + 1;
          v61 = (std::string *)operator new(v66 + 1);
          __dst.__r_.__value_.__l.__size_ = v59 + 5;
          __dst.__r_.__value_.__r.__words[2] = v67 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
        }
        else
        {
          memset(&__dst, 0, sizeof(__dst));
          v61 = &__dst;
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v59 + 5;
          if (!v59)
            goto LABEL_144;
        }
        if (v58 >= 0)
          v68 = (const void *)a2;
        else
          v68 = *(const void **)a2;
        memmove(v61, v68, v59);
LABEL_144:
        strcpy((char *)v61 + v59, "-qdss");
        memset(&v137, 170, sizeof(v137));
        v69 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
        v70 = (_QWORD *)&unk_1A357E000;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v123, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          v123 = __dst;
        support::fs::createUniquePath((const char *)&v123, &v137);
        if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v123.__r_.__value_.__l.__data_);
          v71 = *(_QWORD *)(a1 + 216);
          if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_149;
        }
        else
        {
          v71 = *(_QWORD *)(a1 + 216);
          if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_149:
            v122 = v137;
            goto LABEL_152;
          }
        }
        std::string::__init_copy_ctor_external(&v122, v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
LABEL_152:
        if (*(char *)(a3 + 23) < 0)
          std::string::__init_copy_ctor_external(&v121, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
        else
          v121 = *(std::string *)a3;
        v74 = *(_QWORD *)(v71 + 24);
        v73 = v71 + 24;
        v72 = v74;
        if (v74)
        {
          v75 = v73;
          do
          {
            v76 = *(_DWORD *)(v72 + 32);
            v77 = v76 >= 2;
            if (v76 >= 2)
              v78 = (uint64_t *)v72;
            else
              v78 = (uint64_t *)(v72 + 8);
            if (v77)
              v75 = v72;
            v72 = *v78;
          }
          while (*v78);
          if (v75 != v73 && *(_DWORD *)(v75 + 32) <= 2u)
            diag::DIAGReader::snapshot(*(_QWORD *)(v75 + 40), (uint64_t)&v122);
        }
        if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v121.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v122.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_169:
            v79 = *(NSObject **)(a1 + 40);
            v80 = os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT);
            v81 = SHIBYTE(v137.__r_.__value_.__r.__words[2]);
            if (!v80)
            {
LABEL_236:
              if ((v81 & 0x80) == 0)
              {
LABEL_237:
                if ((v69 & 0x80000000) == 0)
                {
LABEL_238:
                  if (*(_DWORD *)(a1 + 460) != 1)
                    goto LABEL_244;
LABEL_239:
                  v102 = *(_QWORD *)(a1 + 232);
                  *(_QWORD *)&buf = 0;
                  *((_QWORD *)&buf + 1) = &buf;
                  v147 = 0x2000000000;
                  v148 = 0;
                  v137.__r_.__value_.__r.__words[0] = v11;
                  v137.__r_.__value_.__l.__size_ = v70[168];
                  v137.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN4diag14DIAGConfigurer9isAbortedEv_block_invoke;
                  v138 = &unk_1E4A061F0;
                  p_buf = &buf;
                  v140 = v102;
                  v141 = &v137;
                  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = __PAIR128__(v137.__r_.__value_.__l.__size_, v11);
                  __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK3ctu20SharedSynchronizableIN4diag14DIAGConfigurerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
                  v143 = &__block_descriptor_tmp_23;
                  v144 = v102 + 72;
                  v145 = &v141;
                  v103 = *(NSObject **)(v102 + 88);
                  if (*(_QWORD *)(v102 + 96))
                  {
                    dispatch_async_and_wait(v103, &__dst);
                    v104 = *(unsigned __int8 *)(*((_QWORD *)&buf + 1) + 24);
                    _Block_object_dispose(&buf, 8);
                    if (v104)
                      goto LABEL_244;
                  }
                  else
                  {
                    dispatch_sync(v103, &__dst);
                    v105 = *(unsigned __int8 *)(*((_QWORD *)&buf + 1) + 24);
                    _Block_object_dispose(&buf, 8);
                    if (v105)
                      goto LABEL_244;
                  }
                  v106 = *(_QWORD *)(a1 + 216);
                  v107 = *(_QWORD **)(v106 + 16);
                  v108 = (_QWORD *)(v106 + 24);
                  if (v107 != (_QWORD *)(v106 + 24))
                  {
                    do
                    {
                      diag::DIAGReader::start((diag::DIAGReader *)v107[5]);
                      v112 = (_QWORD *)v107[1];
                      if (v112)
                      {
                        do
                        {
                          v113 = v112;
                          v112 = (_QWORD *)*v112;
                        }
                        while (v112);
                      }
                      else
                      {
                        do
                        {
                          v113 = (_QWORD *)v107[2];
                          v32 = *v113 == (_QWORD)v107;
                          v107 = v113;
                        }
                        while (!v32);
                      }
                      v107 = v113;
                    }
                    while (v113 != v108);
                  }
LABEL_244:
                  v109 = *(_DWORD *)(a1 + 460);
                  if (*(_QWORD *)a5)
                  {
                    v110 = _Block_copy(*(const void **)a5);
                    v111 = *(NSObject **)(a5 + 8);
                    v116 = v110;
                    v117 = v111;
                    if (!v111)
                    {
LABEL_247:
                      v115 = 0;
                      LOBYTE(v114) = 0;
                      diag::Service::Internal::changeStateAndNotify_sync(a1, v109, (uint64_t)&v116, (uint64_t)&v114);
                      if (v115 < 0)
                        operator delete(v114);
                      if (v111)
                        dispatch_release(v111);
                      if (v110)
                        _Block_release(v110);
                      return;
                    }
                  }
                  else
                  {
                    v110 = 0;
                    v111 = *(NSObject **)(a5 + 8);
                    v116 = 0;
                    v117 = v111;
                    if (!v111)
                      goto LABEL_247;
                  }
                  dispatch_retain(v111);
                  goto LABEL_247;
                }
LABEL_232:
                operator delete(__dst.__r_.__value_.__l.__data_);
                if (*(_DWORD *)(a1 + 460) != 1)
                  goto LABEL_244;
                goto LABEL_239;
              }
LABEL_231:
              operator delete(v137.__r_.__value_.__l.__data_);
              if ((v69 & 0x80000000) == 0)
                goto LABEL_238;
              goto LABEL_232;
            }
            goto LABEL_173;
          }
        }
        else if ((SHIBYTE(v122.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_169;
        }
        operator delete(v122.__r_.__value_.__l.__data_);
        v79 = *(NSObject **)(a1 + 40);
        v82 = os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT);
        v81 = SHIBYTE(v137.__r_.__value_.__r.__words[2]);
        if (!v82)
          goto LABEL_236;
LABEL_173:
        v55 = v81 < 0;
        v83 = &v137;
        if (v55)
          v83 = (std::string *)v137.__r_.__value_.__r.__words[0];
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v83;
        v84 = "#I Saved QDSS trace: %s";
        goto LABEL_230;
      }
      v62 = *(char *)(a2 + 23);
      if (v62 >= 0)
        v63 = *(unsigned __int8 *)(a2 + 23);
      else
        v63 = *(_QWORD *)(a2 + 8);
      v64 = v63 + 5;
      memset(&__dst, 170, sizeof(__dst));
      if (v63 + 5 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v64 >= 0x17)
      {
        v85 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v64 | 7) != 0x17)
          v85 = v64 | 7;
        v86 = v85 + 1;
        v65 = (std::string *)operator new(v85 + 1);
        __dst.__r_.__value_.__l.__size_ = v63 + 5;
        __dst.__r_.__value_.__r.__words[2] = v86 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v65;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        v65 = &__dst;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v63 + 5;
        if (!v63)
          goto LABEL_183;
      }
      if (v62 >= 0)
        v87 = (const void *)a2;
      else
        v87 = *(const void **)a2;
      memmove(v65, v87, v63);
LABEL_183:
      strcpy((char *)v65 + v63, "-diag");
      memset(&v137, 170, sizeof(v137));
      v69 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
      v70 = &unk_1A357E000;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v120, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        v120 = __dst;
      support::fs::createUniquePath((const char *)&v120, &v137);
      if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v120.__r_.__value_.__l.__data_);
      v94 = *(_QWORD *)(a1 + 216);
      if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v119, v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
      else
        v119 = v137;
      if (*(char *)(a3 + 23) < 0)
        std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      else
        v118 = *(std::string *)a3;
      v97 = *(_QWORD **)(v94 + 24);
      v96 = (_QWORD *)(v94 + 24);
      v95 = v97;
      if (v97)
      {
        do
        {
          v98 = v95;
          v95 = (_QWORD *)*v95;
        }
        while (v95);
        if (v98 != v96 && !*((_DWORD *)v98 + 8))
          diag::DIAGReader::snapshot(v98[5], (uint64_t)&v119);
      }
      if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v118.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_226:
          v79 = *(NSObject **)(a1 + 40);
          v99 = os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT);
          v81 = SHIBYTE(v137.__r_.__value_.__r.__words[2]);
          if (!v99)
            goto LABEL_236;
LABEL_227:
          v55 = v81 < 0;
          v100 = &v137;
          if (v55)
            v100 = (std::string *)v137.__r_.__value_.__r.__words[0];
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v100;
          v84 = "#I Saved DIAG trace: %s";
LABEL_230:
          _os_log_impl(&dword_1A343C000, v79, OS_LOG_TYPE_DEFAULT, v84, (uint8_t *)&buf, 0xCu);
          if ((*((_BYTE *)&v137.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_237;
          goto LABEL_231;
        }
      }
      else if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_226;
      }
      operator delete(v119.__r_.__value_.__l.__data_);
      v79 = *(NSObject **)(a1 + 40);
      v101 = os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT);
      v81 = SHIBYTE(v137.__r_.__value_.__r.__words[2]);
      if (!v101)
        goto LABEL_236;
      goto LABEL_227;
    }
  }
  else if ((a4 & 1) != 0)
  {
    goto LABEL_15;
  }
  if (!v15)
    goto LABEL_199;
  if (!*(_BYTE *)(a1 + 445))
    goto LABEL_62;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v136, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v136 = *(std::string *)a2;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v135, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v135 = *(std::string *)a3;
  v29 = *(_QWORD *)(v15 + 24);
  v28 = v15 + 24;
  v27 = v29;
  if (v29)
  {
    v30 = v28;
    do
    {
      v31 = *(_DWORD *)(v27 + 32);
      v32 = v31 == 0;
      if (v31)
        v33 = (uint64_t *)v27;
      else
        v33 = (uint64_t *)(v27 + 8);
      if (!v32)
        v30 = v27;
      v27 = *v33;
    }
    while (*v33);
    if (v30 != v28 && *(_DWORD *)(v30 + 32) <= 1u)
      diag::DIAGReader::snapshot(*(_QWORD *)(v30 + 40), (uint64_t)&v136);
  }
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v135.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_62:
      v34 = *(_QWORD *)(a1 + 216);
      v35 = *(char *)(a2 + 23);
      if (*(_BYTE *)(a1 + 446))
      {
LABEL_63:
        if (v35 < 0)
          std::string::__init_copy_ctor_external(&v134, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          v134 = *(std::string *)a2;
        if (*(char *)(a3 + 23) < 0)
          std::string::__init_copy_ctor_external(&v133, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
        else
          v133 = *(std::string *)a3;
        v38 = *(_QWORD *)(v34 + 24);
        v37 = v34 + 24;
        v36 = v38;
        if (v38)
        {
          v39 = v37;
          do
          {
            v40 = *(_DWORD *)(v36 + 32);
            v41 = v40 >= 2;
            if (v40 >= 2)
              v42 = (uint64_t *)v36;
            else
              v42 = (uint64_t *)(v36 + 8);
            if (v41)
              v39 = v36;
            v36 = *v42;
          }
          while (*v42);
          if (v39 != v37 && *(_DWORD *)(v39 + 32) <= 2u)
            diag::DIAGReader::snapshot(*(_QWORD *)(v39 + 40), (uint64_t)&v134);
        }
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v133.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_199;
        }
        else if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_199;
        }
        v44 = &v134;
        goto LABEL_198;
      }
      goto LABEL_70;
    }
  }
  else if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_62;
  }
  operator delete(v136.__r_.__value_.__l.__data_);
  v34 = *(_QWORD *)(a1 + 216);
  v35 = *(char *)(a2 + 23);
  if (*(_BYTE *)(a1 + 446))
    goto LABEL_63;
LABEL_70:
  if (v35 < 0)
    std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v132 = *(std::string *)a2;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v131, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v131 = *(std::string *)a3;
  v90 = *(_QWORD **)(v34 + 24);
  v89 = (_QWORD *)(v34 + 24);
  v88 = v90;
  if (v90)
  {
    do
    {
      v91 = v88;
      v88 = (_QWORD *)*v88;
    }
    while (v88);
    if (v91 != v89 && !*((_DWORD *)v91 + 8))
      diag::DIAGReader::snapshot(v91[5], (uint64_t)&v132);
  }
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v131.__r_.__value_.__l.__data_);
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
  {
    v44 = &v132;
LABEL_198:
    operator delete(v44->__r_.__value_.__l.__data_);
  }
LABEL_199:
  if (!*(_QWORD *)a5)
  {
    v92 = 0;
    v93 = *(NSObject **)(a5 + 8);
    v129 = 0;
    v130 = v93;
    if (!v93)
      goto LABEL_202;
    goto LABEL_201;
  }
  v92 = _Block_copy(*(const void **)a5);
  v93 = *(NSObject **)(a5 + 8);
  v129 = v92;
  v130 = v93;
  if (v93)
LABEL_201:
    dispatch_retain(v93);
LABEL_202:
  v128 = 0;
  LOBYTE(__p) = 0;
  diag::Service::Internal::changeStateAndNotify_sync(a1, 0, (uint64_t)&v129, (uint64_t)&__p);
  if (v128 < 0)
    operator delete(__p);
  if (v93)
    dispatch_release(v93);
  if (v92)
    _Block_release(v92);
}

void sub_1A3549198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  int v27;
  uint64_t v28;

  if (a20 < 0)
  {
    operator delete(__p);
    if (a27 < 0)
    {
LABEL_5:
      operator delete(a22);
      if ((*(char *)(v28 - 225) & 0x80000000) == 0)
      {
LABEL_9:
        if (v27 < 0)
        {
          operator delete(*(void **)(v28 - 192));
          _Unwind_Resume(a1);
        }
        _Unwind_Resume(a1);
      }
LABEL_8:
      operator delete(*(void **)(v28 - 248));
      goto LABEL_9;
    }
  }
  else if (a27 < 0)
  {
    goto LABEL_5;
  }
  if ((*(char *)(v28 - 225) & 0x80000000) == 0)
    goto LABEL_9;
  goto LABEL_8;
}

void __copy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIN4diag7Service8InternalEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE104c130_ZTSN8dispatch8callbackIU13block_pointerFvN4diag7Service5StateENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  void *v10;
  NSObject *v11;

  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v7;
  }
  v8 = (std::string *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 80), *(_QWORD *)(a2 + 88));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  v10 = *(void **)(a2 + 104);
  if (v10)
    v10 = _Block_copy(v10);
  v11 = *(NSObject **)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v10;
  *(_QWORD *)(a1 + 112) = v11;
  if (v11)
    dispatch_retain(v11);
}

void sub_1A3549564(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v1 + 79) < 0)
  {
    operator delete(*v3);
    std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v2);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIN4diag7Service8InternalEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE104c130_ZTSN8dispatch8callbackIU13block_pointerFvN4diag7Service5StateENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(NSObject **)(a1 + 112);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 104);
  if (v3)
    _Block_release(v3);
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
      goto LABEL_7;
LABEL_10:
    operator delete(*(void **)(a1 + 56));
    v4 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v4)
      return;
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    goto LABEL_10;
LABEL_7:
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v4)
    return;
LABEL_11:
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZN4diag7Service8Internal5resetEN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  const void *v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  const void *v11;
  void *v12;
  NSObject *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  void *__p;
  char v18;
  void *v19;
  NSObject *v20;
  void *v21;
  char v22;
  void *v23;
  NSObject *v24;
  void *v25;
  char v26;
  uint8_t buf[16];

  v2 = a1[4];
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEFAULT, "#I Reset", buf, 2u);
  }
  v4 = *(_QWORD *)(v2 + 216);
  if (v4 && (v26 = 0, LOBYTE(v25) = 0, diag::DIAGReaderManager::pushInfo(v4, 2, (uint64_t)&v25), v26 < 0))
  {
    operator delete(v25);
    if (*(_DWORD *)(v2 + 460) == 3)
    {
LABEL_6:
      v5 = (const void *)a1[5];
      if (v5)
      {
        v6 = _Block_copy(v5);
        v7 = a1[6];
        v19 = v6;
        v20 = v7;
        if (!v7)
        {
LABEL_9:
          v18 = 0;
          LOBYTE(__p) = 0;
          diag::Service::Internal::changeStateAndNotify_sync(v2, 3u, (uint64_t)&v19, (uint64_t)&__p);
          if (v18 < 0)
            operator delete(__p);
          if (v7)
            dispatch_release(v7);
          if (v6)
            _Block_release(v6);
          return;
        }
      }
      else
      {
        v6 = 0;
        v7 = a1[6];
        v19 = 0;
        v20 = v7;
        if (!v7)
          goto LABEL_9;
      }
      dispatch_retain(v7);
      goto LABEL_9;
    }
  }
  else if (*(_DWORD *)(v2 + 460) == 3)
  {
    goto LABEL_6;
  }
  *(_DWORD *)(v2 + 460) = 3;
  *(_BYTE *)(v2 + 444) = 0;
  v8 = *(_QWORD *)(v2 + 216);
  if (v8)
  {
    v9 = *(_QWORD **)(v8 + 16);
    v10 = (_QWORD *)(v8 + 24);
    if (v9 != (_QWORD *)(v8 + 24))
    {
      do
      {
        diag::DIAGReader::stop((diag::DIAGReader *)v9[5]);
        v14 = (_QWORD *)v9[1];
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (_QWORD *)v9[2];
            v16 = *v15 == (_QWORD)v9;
            v9 = v15;
          }
          while (!v16);
        }
        v9 = v15;
      }
      while (v15 != v10);
    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 232) + 56))(*(_QWORD *)(v2 + 232));
  v11 = (const void *)a1[5];
  if (!v11)
  {
    v12 = 0;
    v13 = a1[6];
    v23 = 0;
    v24 = v13;
    if (!v13)
      goto LABEL_21;
    goto LABEL_20;
  }
  v12 = _Block_copy(v11);
  v13 = a1[6];
  v23 = v12;
  v24 = v13;
  if (v13)
LABEL_20:
    dispatch_retain(v13);
LABEL_21:
  v22 = 0;
  LOBYTE(v21) = 0;
  diag::Service::Internal::changeStateAndNotify_sync(v2, 0, (uint64_t)&v23, (uint64_t)&v21);
  if (v22 < 0)
    operator delete(v21);
  if (v13)
    dispatch_release(v13);
  if (v12)
    _Block_release(v12);
}

void sub_1A3549880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0)
    operator delete(__p);
  dispatch::callback<void({block_pointer})(diag::Service::State,std::string)>::~callback((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_1A35498C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 49) < 0)
    operator delete(*(void **)(v1 - 72));
  _Unwind_Resume(exception_object);
}

void ___ZN4diag7Service8Internal5abortEbN8dispatch8callbackIU13block_pointerFvNS0_5StateENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  TraceFileCollection *v12;
  _QWORD *v13;
  _QWORD *v14;
  const void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  char v19;
  void *v20;
  NSObject *v21;
  void *__p;
  char v23;

  v2 = a1[4];
  v3 = *(_QWORD *)(v2 + 216);
  if (v3)
  {
    v4 = *(_QWORD **)(v3 + 16);
    v5 = (_QWORD *)(v3 + 24);
    if (v4 != (_QWORD *)(v3 + 24))
    {
      do
      {
        diag::DIAGReader::stop((diag::DIAGReader *)v4[5]);
        v6 = (_QWORD *)v4[1];
        if (v6)
        {
          do
          {
            v7 = v6;
            v6 = (_QWORD *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (_QWORD *)v4[2];
            v8 = *v7 == (_QWORD)v4;
            v4 = v7;
          }
          while (!v8);
        }
        v4 = v7;
      }
      while (v7 != v5);
      v3 = *(_QWORD *)(v2 + 216);
    }
    v23 = 0;
    LOBYTE(__p) = 0;
    diag::DIAGReaderManager::pushInfo(v3, 1, (uint64_t)&__p);
    if (v23 < 0)
      operator delete(__p);
    v9 = *(_QWORD *)(v2 + 216);
    v10 = *(_QWORD **)(v9 + 16);
    v11 = (_QWORD *)(v9 + 24);
    if (v10 != (_QWORD *)(v9 + 24))
    {
      do
      {
        v12 = *(TraceFileCollection **)(v10[5] + 32);
        if (v12)
          TraceFileCollection::archive(v12);
        v13 = (_QWORD *)v10[1];
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (_QWORD *)v10[2];
            v8 = *v14 == (_QWORD)v10;
            v10 = v14;
          }
          while (!v8);
        }
        v10 = v14;
      }
      while (v14 != v11);
    }
  }
  v15 = (const void *)a1[5];
  if (v15)
  {
    v16 = _Block_copy(v15);
    v17 = a1[6];
    v20 = v16;
    v21 = v17;
    if (!v17)
      goto LABEL_28;
    goto LABEL_27;
  }
  v16 = 0;
  v17 = a1[6];
  v20 = 0;
  v21 = v17;
  if (v17)
LABEL_27:
    dispatch_retain(v17);
LABEL_28:
  v19 = 0;
  LOBYTE(v18) = 0;
  diag::Service::Internal::changeStateAndNotify_sync(v2, 0, (uint64_t)&v20, (uint64_t)&v18);
  if (v19 < 0)
    operator delete(v18);
  if (v17)
    dispatch_release(v17);
  if (v16)
    _Block_release(v16);
}

void sub_1A3549A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN4diag7Service8Internal12updateConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  CFTypeRef *v4;
  const __CFDictionary **v5;
  const __CFDictionary *v6;
  const __CFDictionary *v7;
  config::hw *v8;
  capabilities::trace *v9;
  capabilities::trace *v10;
  const __CFDictionary *v11;
  uint64_t (*v12)(uint64_t);
  NSObject *v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t *v22;
  TraceFileCollection *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t *v28;
  TraceFileCollection *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  uint64_t *v34;
  TraceFileCollection *v35;
  _QWORD v37[2];
  _BYTE buf[24];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v37[0]) = 0;
    _os_log_impl(&dword_1A343C000, v3, OS_LOG_TYPE_DEFAULT, "#I Update", (uint8_t *)v37, 2u);
  }
  v4 = (CFTypeRef *)(a1 + 40);
  v5 = (const __CFDictionary **)(v2 + 208);
  if (v2 + 208 != a1 + 40)
  {
    v6 = (const __CFDictionary *)*v4;
    if (*v4)
      CFRetain(*v4);
    v7 = *v5;
    *v5 = v6;
    if (v7)
      CFRelease(v7);
  }
  v37[0] = 0xAAAAAAAAAAAAAAAALL;
  v37[1] = 0xAAAAAAAAAAAAAAAALL;
  v8 = (config::hw *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v37, *v5);
  config::hw::watch(v8);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)buf, "History");
  ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v37, *(const __CFString **)buf);
  v9 = (capabilities::trace *)MEMORY[0x1A858F29C](buf);
  capabilities::trace::defaultMemoryFileMaxCount(v9);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)buf, "MaxMemoryFileCount");
  ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v37, *(const __CFString **)buf);
  v10 = (capabilities::trace *)MEMORY[0x1A858F29C](buf);
  capabilities::trace::defaultFileSizeBytes(v10);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)buf, "FileSize");
  ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v37, *(const __CFString **)buf);
  MEMORY[0x1A858F29C](buf);
  v11 = *v5;
  v12 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!*v5)
    v12 = 0;
  if (v12)
  {
    v13 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v11;
      _os_log_impl(&dword_1A343C000, v13, OS_LOG_TYPE_DEFAULT, "#I Updated configuration dictionary: %@", buf, 0xCu);
    }
  }
  v14 = *(_QWORD *)(v2 + 216);
  if (v14)
  {
    v15 = *(_BYTE *)(v2 + 446) ? 2 : *(_BYTE *)(v2 + 445);
    v16 = *(_QWORD *)(v14 + 24);
    if (v16)
    {
      v17 = v15;
      v18 = v14 + 24;
      v19 = *(_QWORD *)(v14 + 24);
      do
      {
        v20 = *(_DWORD *)(v19 + 32);
        v21 = v20 >= v17;
        if (v20 >= v17)
          v22 = (uint64_t *)v19;
        else
          v22 = (uint64_t *)(v19 + 8);
        if (v21)
          v18 = v19;
        v19 = *v22;
      }
      while (*v22);
      if (v18 != v14 + 24 && *(_DWORD *)(v18 + 32) <= v17)
      {
        v23 = *(TraceFileCollection **)(*(_QWORD *)(v18 + 40) + 32);
        if (v23)
        {
          TraceFileCollection::setHistory(v23);
          v14 = *(_QWORD *)(v2 + 216);
          v16 = *(_QWORD *)(v14 + 24);
        }
      }
      if (v16)
      {
        v24 = v14 + 24;
        v25 = v16;
        do
        {
          v26 = *(_DWORD *)(v25 + 32);
          v27 = v26 >= v17;
          if (v26 >= v17)
            v28 = (uint64_t *)v25;
          else
            v28 = (uint64_t *)(v25 + 8);
          if (v27)
            v24 = v25;
          v25 = *v28;
        }
        while (*v28);
        if (v24 != v14 + 24 && *(_DWORD *)(v24 + 32) <= v17)
        {
          v29 = *(TraceFileCollection **)(*(_QWORD *)(v24 + 40) + 32);
          if (v29)
          {
            TraceFileCollection::setMaxMemoryFileCount(v29);
            v14 = *(_QWORD *)(v2 + 216);
            v16 = *(_QWORD *)(v14 + 24);
          }
        }
        if (v16)
        {
          v30 = v14 + 24;
          v31 = v14 + 24;
          do
          {
            v32 = *(_DWORD *)(v16 + 32);
            v33 = v32 >= v17;
            if (v32 >= v17)
              v34 = (uint64_t *)v16;
            else
              v34 = (uint64_t *)(v16 + 8);
            if (v33)
              v31 = v16;
            v16 = *v34;
          }
          while (*v34);
          if (v31 != v30 && *(_DWORD *)(v31 + 32) <= v17)
          {
            v35 = *(TraceFileCollection **)(*(_QWORD *)(v31 + 40) + 32);
            if (v35)
              TraceFileCollection::setFileSize(v35);
          }
        }
      }
    }
  }
  return MEMORY[0x1A858F2D8](v37);
}

uint64_t ___ZNK4diag7Service8Internal8getStateEv_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 40) + 460);
  return result;
}

void ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped<diag::Service::Internal::pushInfo(abm::trace::TraceInfoState,std::string)::{lambda(void)#1}>(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::string *v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = (char *)operator new(0x28uLL);
  *(_QWORD *)v8 = *(_QWORD *)a2;
  *((_DWORD *)v8 + 2) = *(_DWORD *)(a2 + 8);
  v9 = (std::string *)(v8 + 16);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v8 + 4) = *(_QWORD *)(a2 + 32);
  }
  v10 = a1[2];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = operator new(0x18uLL);
  *v13 = v8;
  v13[1] = v5;
  v13[2] = v7;
  dispatch_async_f(v10, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped<diag::Service::Internal::pushInfo(abm::trace::TraceInfoState,std::string)::{lambda(void)#1}>(diag::Service::Internal::pushInfo(abm::trace::TraceInfoState,std::string)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<diag::Service::Internal::pushInfo(abm::trace::TraceInfoState,std::string)::{lambda(void)#1},std::default_delete<diag::Service::Internal::pushInfo(abm::trace::TraceInfoState,std::string)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped<diag::Service::Internal::pushInfo(abm::trace::TraceInfoState,std::string)::{lambda(void)#1}>(diag::Service::Internal::pushInfo(abm::trace::TraceInfoState,std::string)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<diag::Service::Internal::pushInfo(abm::trace::TraceInfoState,std::string)::{lambda(void)#1},std::default_delete<diag::Service::Internal::pushInfo(abm::trace::TraceInfoState,std::string)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::string v8;

  v2 = *a1;
  v3 = *(_QWORD *)(*(_QWORD *)*a1 + 216);
  if (v3)
  {
    v4 = *(unsigned int *)(v2 + 8);
    if (*(char *)(v2 + 39) < 0)
      std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(v2 + 16), *(_QWORD *)(v2 + 24));
    else
      v8 = *(std::string *)(v2 + 16);
    diag::DIAGReaderManager::pushInfo(v3, v4, (uint64_t)&v8);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v8.__r_.__value_.__l.__data_);
      if ((*(char *)(v2 + 39) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  if (*(char *)(v2 + 39) < 0)
LABEL_7:
    operator delete(*(void **)(v2 + 16));
LABEL_8:
  operator delete((void *)v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    goto LABEL_12;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_12:
    operator delete(a1);
  }
}

void sub_1A354A0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _QWORD *v16;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  std::unique_ptr<diag::Service::Internal::pushInfo(abm::trace::TraceInfoState,std::string)::{lambda(void)#1},std::default_delete<diag::Service::Internal::pushInfo(abm::trace::TraceInfoState,std::string)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&a10);
  v18 = (std::__shared_weak_count *)v16[2];
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<diag::Service::Internal::pushInfo(abm::trace::TraceInfoState,std::string)::{lambda(void)#1},std::default_delete<diag::Service::Internal::pushInfo(abm::trace::TraceInfoState,std::string)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

void ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped<diag::Service::Internal::pushInfo(std::string,xpc::dict)::{lambda(void)#1}>(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  std::string *v9;
  void *v10;
  NSObject *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x28uLL);
  *v8 = *(_QWORD *)a2;
  v9 = (std::string *)(v8 + 1);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 8);
    v8[3] = *(_QWORD *)(a2 + 24);
  }
  v10 = *(void **)(a2 + 32);
  v8[4] = v10;
  if (v10)
    xpc_retain(v10);
  else
    v8[4] = xpc_null_create();
  v11 = a1[2];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v14 = operator new(0x18uLL);
  *v14 = v8;
  v14[1] = v5;
  v14[2] = v7;
  dispatch_async_f(v11, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped<diag::Service::Internal::pushInfo(std::string,xpc::dict)::{lambda(void)#1}>(diag::Service::Internal::pushInfo(std::string,xpc::dict)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<diag::Service::Internal::pushInfo(std::string,xpc::dict)::{lambda(void)#1},std::default_delete<diag::Service::Internal::pushInfo(std::string,xpc::dict)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped<diag::Service::Internal::pushInfo(std::string,xpc::dict)::{lambda(void)#1}>(diag::Service::Internal::pushInfo(std::string,xpc::dict)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<diag::Service::Internal::pushInfo(std::string,xpc::dict)::{lambda(void)#1},std::default_delete<diag::Service::Internal::pushInfo(std::string,xpc::dict)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  xpc_object_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  xpc_object_t v9;
  std::string v10;

  v2 = *a1;
  v3 = *(_QWORD *)(*(_QWORD *)*a1 + 216);
  if (v3)
  {
    if (*(char *)(v2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)(v2 + 8), *(_QWORD *)(v2 + 16));
    }
    else
    {
      v4 = *(_OWORD *)(v2 + 8);
      v10.__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 24);
      *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v4;
    }
    v5 = *(xpc_object_t *)(v2 + 32);
    v9 = v5;
    if (v5)
    {
      xpc_retain(v5);
    }
    else
    {
      v5 = xpc_null_create();
      v9 = v5;
    }
    diag::DIAGReaderManager::pushInfo(v3, (uint64_t)&v10, &v9);
    xpc_release(v5);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
  }
  xpc_release(*(xpc_object_t *)(v2 + 32));
  *(_QWORD *)(v2 + 32) = 0;
  if (*(char *)(v2 + 31) < 0)
    operator delete(*(void **)(v2 + 8));
  operator delete((void *)v2);
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(a1);
}

void sub_1A354A3B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _QWORD *v16;
  uint64_t v17;
  void **v18;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  xpc_release(*(xpc_object_t *)(v17 + 32));
  *(_QWORD *)(v17 + 32) = 0;
  if (*(char *)(v17 + 31) < 0)
    operator delete(*v18);
  operator delete((void *)v17);
  v20 = (std::__shared_weak_count *)v16[2];
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped<diag::Service::Internal::setStallHandler(abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>)::{lambda(void)#1}>(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _DWORD *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x20uLL);
  *(_QWORD *)v8 = *(_QWORD *)a2;
  v8[2] = *(_DWORD *)(a2 + 8);
  *((_OWORD *)v8 + 1) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v9 = a1[2];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v9, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped<diag::Service::Internal::setStallHandler(abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>)::{lambda(void)#1}>(diag::Service::Internal::setStallHandler(abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<diag::Service::Internal::setStallHandler(abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>)::{lambda(void)#1},dispatch_queue_s *::default_delete<diag::Service::Internal::setStallHandler(abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<diag::Service::Internal>::execute_wrapped<diag::Service::Internal::setStallHandler(abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>)::{lambda(void)#1}>(diag::Service::Internal::setStallHandler(abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<diag::Service::Internal::setStallHandler(abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>)::{lambda(void)#1},dispatch_queue_s *::default_delete<diag::Service::Internal::setStallHandler(abm::trace::TraceInfoState,dispatch::callback<void({block_pointer})(abm::trace::TraceInfoEntry)>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  const void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *aBlock;
  dispatch_object_t object;

  v2 = *a1;
  v3 = *(_QWORD *)(*(_QWORD *)*a1 + 216);
  if (v3)
  {
    v4 = *(unsigned int *)(v2 + 8);
    v5 = *(void **)(v2 + 16);
    if (v5)
      v5 = _Block_copy(v5);
    v6 = *(NSObject **)(v2 + 24);
    aBlock = v5;
    object = v6;
    if (v6)
      dispatch_retain(v6);
    diag::DIAGReaderManager::setStallHandler(v3, v4, (uint64_t)&aBlock);
    if (object)
      dispatch_release(object);
    if (aBlock)
      _Block_release(aBlock);
  }
  v7 = *(NSObject **)(v2 + 24);
  if (v7)
    dispatch_release(v7);
  v8 = *(const void **)(v2 + 16);
  if (v8)
    _Block_release(v8);
  operator delete((void *)v2);
  v9 = (std::__shared_weak_count *)a1[2];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(a1);
}

void sub_1A354A648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object)
{
  _QWORD *v10;
  _QWORD *v11;
  NSObject *v13;
  const void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  v13 = v11[3];
  if (v13)
    dispatch_release(v13);
  v14 = (const void *)v11[2];
  if (v14)
    _Block_release(v14);
  operator delete(v11);
  v15 = (std::__shared_weak_count *)v10[2];
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<diag::Service::Internal *,std::shared_ptr<diag::Service::Internal> ctu::SharedSynchronizable<diag::Service::Internal>::make_shared_ptr<diag::Service::Internal>(diag::Service::Internal*)::{lambda(diag::Service::Internal *)#1},std::allocator<diag::Service::Internal>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<diag::Service::Internal *,std::shared_ptr<diag::Service::Internal> ctu::SharedSynchronizable<diag::Service::Internal>::make_shared_ptr<diag::Service::Internal>(diag::Service::Internal*)::{lambda(diag::Service::Internal *)#1},std::allocator<diag::Service::Internal>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<diag::Service::Internal> ctu::SharedSynchronizable<diag::Service::Internal>::make_shared_ptr<diag::Service::Internal>(diag::Service::Internal*)::{lambda(diag::Service::Internal*)#1}::operator() const(diag::Service::Internal*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<diag::Service::Internal *,std::shared_ptr<diag::Service::Internal> ctu::SharedSynchronizable<diag::Service::Internal>::make_shared_ptr<diag::Service::Internal>(diag::Service::Internal*)::{lambda(diag::Service::Internal *)#1},std::allocator<diag::Service::Internal>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4diag7Service8InternalEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4diag7Service8InternalEE15make_shared_ptrIS3_EENSt3__110sh"
                                "ared_ptrIT_EEPS8_EUlPS3_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4diag7Service8InternalEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4diag7Service8InternalEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<diag::Service::Internal> ctu::SharedSynchronizable<diag::Service::Internal>::make_shared_ptr<diag::Service::Internal>(diag::Service::Internal*)::{lambda(diag::Service::Internal*)#1}::operator() const(diag::Service::Internal*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t __cxx_global_var_init_8()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1A343C000);
  }
  return result;
}

uint64_t _GLOBAL__sub_I_CellularDIAGService_cpp()
{
  uint64_t result;

  result = ETLDIAGLoggingGetDefaultView();
  dword_1ED114C24 = result;
  return result;
}

BOOL diag::DIAGProtocolHDLC::scanForFlag(diag::DIAGProtocolHDLC *this, const unsigned __int8 *a2, _DWORD *a3, unsigned int *a4)
{
  uint64_t v4;
  _BOOL8 v5;

  *a3 = 0;
  if (!(_DWORD)a2)
    return 0;
  v4 = 0;
  do
  {
    v5 = *((unsigned __int8 *)this + v4) == 126;
    if (*((_BYTE *)this + v4) == 126)
      break;
    *a3 = ++v4;
  }
  while ((_DWORD)a2 != (_DWORD)v4);
  return v5;
}

uint64_t diag::DIAGProtocolHDLC::consumeFlagIfNeeded(TraceFileCollection **this, const unsigned __int8 **a2, unsigned int *a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v10;

  v3 = *a3;
  if (!*a3)
    return 0;
  v7 = 0;
  do
  {
    v8 = (uint64_t)*a2;
    if (**a2 != 126)
      break;
    *a3 = v3 - 1;
    *a2 = (const unsigned __int8 *)(v8 + 1);
    v10 = 126;
    v7 = TraceFileCollection::handleReadData(this[1], &v10) + v7;
    v3 = *a3;
  }
  while (*a3);
  return v7;
}

uint64_t diag::DIAGProtocolHDLC::handleReadData(diag::DIAGProtocolHDLC *this, const unsigned __int8 *a2, uint64_t a3)
{
  uint64_t Data;
  const unsigned __int8 *v4;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  const unsigned __int8 *v19;
  int v20;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;

  Data = a3;
  v4 = a2;
  if (*(_DWORD *)this == 1)
  {
    v7 = 0;
    if (!*((_BYTE *)this + 4))
      goto LABEL_11;
    goto LABEL_9;
  }
  if (!*(_DWORD *)this)
  {
    if (!(_DWORD)a3)
      return Data;
    v6 = 0;
    while (a2[v6] != 126)
    {
      if ((_DWORD)a3 == (_DWORD)++v6)
        return a3;
    }
    v17 = a3 - 1;
    v23 = 126;
    TraceFileCollection::handleReadData(*((TraceFileCollection **)this + 1), &v23);
    *(_DWORD *)this = 1;
    if (v17 == (_DWORD)v6)
      return v6 + 1;
    v20 = 0;
    LODWORD(Data) = v17 - v6;
    v4 += v6 + 1;
    do
    {
      if (*v4 != 126)
        break;
      LODWORD(Data) = Data - 1;
      ++v4;
      v24 = 126;
      v20 += TraceFileCollection::handleReadData(*((TraceFileCollection **)this + 1), &v24);
    }
    while ((_DWORD)Data);
    v7 = v20 + v6 + 1;
    if (!*((_BYTE *)this + 4))
      goto LABEL_11;
LABEL_9:
    *((_BYTE *)this + 4) = 0;
    if (*v4 != 126)
    {
      v22 = 126;
      TraceFileCollection::handleReadData(*((TraceFileCollection **)this + 1), &v22);
    }
LABEL_11:
    v8 = TraceFileCollection::getInMemoryRemaining(*((TraceFileCollection **)this + 1));
    if (Data >= v8)
      v9 = v8;
    else
      v9 = Data;
    if (v8 <= 0x2000)
    {
      v10 = 0;
      if (v9)
      {
        while (*v4 == 126)
        {
          --v9;
          ++v4;
          v25 = 126;
          v10 += TraceFileCollection::handleReadData(*((TraceFileCollection **)this + 1), &v25);
          if (!v9)
            goto LABEL_18;
        }
        v18 = 0;
        Data = (v10 + v7);
        *((_BYTE *)this + 4) = 1;
        v19 = v4;
        while (1)
        {
          ++v18;
          if (*v19 == 126)
            break;
          ++v19;
          if (v9 == v18)
            goto LABEL_52;
        }
        Data = TraceFileCollection::handleReadData(*((TraceFileCollection **)this + 1), v4)
             + Data;
      }
      else
      {
LABEL_18:
        Data = (v10 + v7);
        *((_BYTE *)this + 4) = 1;
      }
LABEL_52:
      TraceFileCollection::archive(*((TraceFileCollection **)this + 1));
      return Data;
    }
    if (v8 - 0x2000 < v9)
      v9 = v8 - 0x2000;
    Data = TraceFileCollection::handleReadData(*((TraceFileCollection **)this + 1), v4) + v7;
    if (v4[v9 - 1] != 126)
    {
      v15 = 2;
LABEL_38:
      *(_DWORD *)this = v15;
      return Data;
    }
    return Data;
  }
  v11 = TraceFileCollection::getInMemoryRemaining(*((TraceFileCollection **)this + 1));
  if (v11 >= Data)
    v12 = Data;
  else
    v12 = v11;
  if (v11 <= 0x2000)
  {
    if (v12)
    {
      v13 = 0;
      v14 = v11;
      if (v11 >= (unint64_t)Data)
        v14 = Data;
      while (v4[v13] != 126)
      {
        if (v14 == (_DWORD)++v13)
          goto LABEL_28;
      }
      *(_DWORD *)this = 1;
      *((_BYTE *)this + 4) = 1;
      Data = TraceFileCollection::handleReadData(*((TraceFileCollection **)this + 1), v4);
    }
    else
    {
LABEL_28:
      Data = 0;
    }
    goto LABEL_52;
  }
  if (v11 - 0x2000 >= v12)
    v16 = v12;
  else
    v16 = v11 - 0x2000;
  Data = TraceFileCollection::handleReadData(*((TraceFileCollection **)this + 1), v4);
  if (v4[v16 - 1] == 126)
  {
    v15 = 1;
    goto LABEL_38;
  }
  return Data;
}

uint64_t diag::DIAGProtocolHDLC::reset(uint64_t this)
{
  *(_DWORD *)this = 0;
  *(_BYTE *)(this + 4) = 0;
  return this;
}

uint64_t abm::HelperTask::HelperTask(uint64_t a1, int a2, _QWORD *a3, _QWORD *a4)
{
  int v8;
  size_t v9;
  unint64_t v10;
  std::string *p_dst;
  unsigned int v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  size_t v17;
  std::string *v18;
  __int128 v19;
  void **v20;
  const char *v21;
  void **v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p[2];
  char v34;
  _BYTE v35[16];
  void *v36[2];
  unsigned __int8 v37;
  std::string __dst;
  void *v39[2];
  int64_t v40;
  _BYTE v41[16];
  _BYTE v42[16];

  abm::helper::getLoggingDomain(a2, v36);
  v8 = (char)v37;
  if ((v37 & 0x80u) == 0)
    v9 = v37;
  else
    v9 = (size_t)v36[1];
  v10 = v9 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v9 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v10 >= 0x17)
  {
    v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v14 = v10 | 7;
    v15 = v14 + 1;
    p_dst = (std::string *)operator new(v14 + 1);
    __dst.__r_.__value_.__l.__size_ = v9 + 1;
    __dst.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_12:
    if (v8 >= 0)
      v16 = v36;
    else
      v16 = (void **)v36[0];
    memmove(p_dst, v16, v9);
    *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v9) = 46;
    v12 = a2 - 1;
    if ((a2 - 1) <= 9)
      goto LABEL_8;
    goto LABEL_16;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v9 + 1;
  if (v9)
    goto LABEL_12;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 46;
  v12 = a2 - 1;
  if ((a2 - 1) <= 9)
  {
LABEL_8:
    v13 = off_1E4A0F540[v12];
    goto LABEL_17;
  }
LABEL_16:
  v13 = "invalid";
LABEL_17:
  v17 = strlen(v13);
  v18 = std::string::append(&__dst, v13, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v40 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)v39 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0)
    v20 = v39;
  else
    v20 = (void **)v39[0];
  abm::helper::getLoggingDomain(a2, __p);
  if (v12 > 9)
    v21 = "invalid";
  else
    v21 = off_1E4A0F540[v12];
  if (v34 >= 0)
    v22 = __p;
  else
    v22 = (void **)__p[0];
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v35, (const char *)v22, v21);
  v23 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  v24 = dispatch_queue_create((const char *)v20, v23);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v24;
  if (v24)
  {
    v25 = v24;
    dispatch_retain(v24);
    *(_QWORD *)(a1 + 96) = 0;
    dispatch_release(v25);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_QWORD *)a1 = &unk_1E4A06FA8;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v42);
  *(_QWORD *)(a1 + 8) = &unk_1E4A06330;
  *(_QWORD *)(a1 + 56) = *a3;
  v26 = a3[1];
  *(_QWORD *)(a1 + 64) = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v41);
  *(_QWORD *)a1 = off_1E4A0F4F0;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v35);
  if (v34 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v40) & 0x80000000) == 0)
    {
LABEL_34:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_35;
LABEL_42:
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (((char)v37 & 0x80000000) == 0)
        goto LABEL_36;
      goto LABEL_43;
    }
  }
  else if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    goto LABEL_34;
  }
  operator delete(v39[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_42;
LABEL_35:
  if (((char)v37 & 0x80000000) == 0)
    goto LABEL_36;
LABEL_43:
  operator delete(v36[0]);
LABEL_36:
  *(_QWORD *)a1 = off_1E4A0F3B8;
  *(_DWORD *)(a1 + 104) = a2;
  *(_QWORD *)(a1 + 112) = dispatch_group_create();
  *(_QWORD *)(a1 + 120) = *a4;
  v29 = a4[1];
  *(_QWORD *)(a1 + 128) = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 16);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  return a1;
}

void sub_1A354AECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  _QWORD *v35;
  uint64_t v36;

  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v36 - 96));
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v36 - 112));
  ctu::SharedSynchronizable<diag::DIAGConfigurer>::~SharedSynchronizable(v35);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a16);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a35 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a29 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a35 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a30);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a23 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a24);
  if ((a23 & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(a1);
LABEL_9:
  operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t abm::HelperTask::getID(abm::HelperTask *this)
{
  return *((unsigned int *)this + 26);
}

_QWORD *abm::HelperTask::getName(abm::HelperTask *this)
{
  unsigned __int8 v1;
  unsigned int v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_22);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&_MergedGlobals_22))
    return qword_1ED114C30;
  v4 = *((_DWORD *)this + 26) - 1;
  if (v4 > 9)
    v5 = "invalid";
  else
    v5 = off_1E4A0F540[v4];
  std::string::basic_string[abi:ne180100]<0>(qword_1ED114C30, v5);
  __cxa_atexit(MEMORY[0x1E0DE44D0], qword_1ED114C30, &dword_1A343C000);
  __cxa_guard_release(&_MergedGlobals_22);
  return qword_1ED114C30;
}

void sub_1A354B048(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&_MergedGlobals_22);
  _Unwind_Resume(a1);
}

void abm::HelperTask::init(abm::HelperTask *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN3abm10HelperTask4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_26;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3abm10HelperTaskEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_9_5;
  block[4] = (char *)this + 72;
  block[5] = &v4;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void ___ZN3abm10HelperTask4initEv_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD **)(a1 + 32);
  (*(void (**)(_QWORD *))(*v1 + 56))(v1);
  v2 = v1[5];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v3 = 136315138;
    v4 = "Init";
    _os_log_debug_impl(&dword_1A343C000, v2, OS_LOG_TYPE_DEBUG, "#D %s", (uint8_t *)&v3, 0xCu);
  }
}

void abm::HelperTask::start(abm::HelperTask *this)
{
  NSObject *v1;
  NSObject *v2;
  _QWORD block[5];

  v1 = *((_QWORD *)this + 14);
  v2 = *((_QWORD *)this + 11);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3abm10HelperTask5startEv_block_invoke;
  block[3] = &__block_descriptor_tmp_5_5;
  block[4] = this;
  dispatch_group_notify(v1, v2, block);
}

void ___ZN3abm10HelperTask5startEv_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD **)(a1 + 32);
  (*(void (**)(_QWORD *))(*v1 + 64))(v1);
  v2 = v1[5];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v3 = 136315138;
    v4 = "Started";
    _os_log_debug_impl(&dword_1A343C000, v2, OS_LOG_TYPE_DEBUG, "#D %s", (uint8_t *)&v3, 0xCu);
  }
}

void abm::HelperTask::stop(abm::HelperTask *this@<X0>, NSObject **a2@<X8>)
{
  NSObject *v4;
  char *v5;
  NSObject *v6;
  _QWORD v7[5];
  _QWORD *v8;
  _QWORD block[6];

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZN3abm10HelperTask4stopEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_7_9;
  v7[4] = this;
  v8 = v7;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3abm10HelperTaskEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_9_5;
  block[4] = (char *)this + 72;
  block[5] = &v8;
  v5 = (char *)this + 88;
  v4 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v5 + 1))
  {
    dispatch_async_and_wait(v4, block);
    v6 = *((_QWORD *)this + 14);
    *a2 = v6;
    if (!v6)
      return;
  }
  else
  {
    dispatch_sync(v4, block);
    v6 = *((_QWORD *)this + 14);
    *a2 = v6;
    if (!v6)
      return;
  }
  dispatch_retain(v6);
}

void ___ZN3abm10HelperTask4stopEv_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD **)(a1 + 32);
  (*(void (**)(_QWORD *))(*v1 + 72))(v1);
  v2 = v1[5];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v3 = 136315138;
    v4 = "Stopped";
    _os_log_debug_impl(&dword_1A343C000, v2, OS_LOG_TYPE_DEBUG, "#D %s", (uint8_t *)&v3, 0xCu);
  }
}

BOOL abm::HelperTask::isBusy(abm::HelperTask *this)
{
  NSObject *v1;
  dispatch_time_t v2;

  v1 = *((_QWORD *)this + 14);
  if (!v1)
    return 0;
  v2 = dispatch_time(0, 5000000);
  return dispatch_group_wait(v1, v2) != 0;
}

_QWORD *ctu::SharedLoggable<abm::HelperTask,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1E4A06FA8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<abm::HelperTask,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1E4A06FA8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

_QWORD *BasebandTransportMAV::BasebandTransportMAV(_QWORD *a1, uint64_t *a2, NSObject **a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  dispatch_object_t object;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v4 = (std::__shared_weak_count *)a2[1];
  v13 = *a2;
  v14 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *a3;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  BasebandTransport::BasebandTransport((uint64_t)a1, &v13, &object);
  if (object)
    dispatch_release(object);
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *a1 = off_1E4A0F5A0;
  return a1;
}

void sub_1A354B63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11)
{
  if (object)
    dispatch_release(object);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void BasebandTransportMAV::~BasebandTransportMAV(BasebandTransportMAV *this)
{
  void *v1;

  BasebandTransport::~BasebandTransport(this);
  operator delete(v1);
}

uint64_t BasebandTransportMAV::switchDIAG_sync(BasebandTransportMAV *this)
{
  NSObject *v2;
  CommandDriverFactory *v3;
  uint64_t v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  NSObject *v20;
  unint64_t v21;
  void *v22;
  dispatch_time_t v23;
  std::__shared_weak_count *v24;
  dispatch_time_t v25;
  unint64_t *v26;
  unint64_t v27;
  NSObject *v28;
  uint64_t v29;
  _QWORD v31[5];
  dispatch_group_t group;
  void *v33;
  dispatch_object_t v34;
  _QWORD aBlock[5];
  void *v36;
  dispatch_object_t object;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  char v45;
  uint8_t buf[16];

  v42 = 0;
  v43 = &v42;
  v44 = 0x2000000000;
  v45 = 1;
  if (*((_DWORD *)this + 26) != 2)
    goto LABEL_51;
  v2 = dispatch_queue_create("internal diag queue", 0);
  v40 = 0xAAAAAAAAAAAAAAAALL;
  v41 = 0xAAAAAAAAAAAAAAAALL;
  v3 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v4 = off_1ED114670;
  if (!off_1ED114670)
  {
    CommandDriverFactory::create_default_global(v3);
    v5 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v6 = (std::__shared_weak_count *)*(&off_1ED114670 + 1);
    off_1ED114670 = v5;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v10 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v4 = off_1ED114670;
  }
  v12 = (std::__shared_weak_count *)*(&off_1ED114670 + 1);
  v38 = v4;
  v39 = *(&off_1ED114670 + 1);
  if (*(&off_1ED114670 + 1))
  {
    v13 = (unint64_t *)(*(&off_1ED114670 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v15 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN20BasebandTransportMAV15switchDIAG_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_27;
  aBlock[4] = this;
  v16 = _Block_copy(aBlock);
  if (v2)
    dispatch_retain(v2);
  v36 = v16;
  object = v2;
  (*(void (**)(unint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v4 + 128))(&v40, v4, &v36);
  if (object)
    dispatch_release(object);
  if (v36)
    _Block_release(v36);
  if (v12)
  {
    v17 = (unint64_t *)&v12->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v19 = dispatch_group_create();
  v20 = v19;
  if (v19)
  {
    dispatch_retain(v19);
    dispatch_group_enter(v20);
  }
  v21 = v40;
  v31[0] = v15;
  v31[1] = 1174405120;
  v31[2] = ___ZN20BasebandTransportMAV15switchDIAG_syncEv_block_invoke_3;
  v31[3] = &unk_1E4A0F620;
  group = v20;
  if (v20)
  {
    dispatch_retain(v20);
    dispatch_group_enter(group);
  }
  v31[4] = &v42;
  v22 = _Block_copy(v31);
  if (v2)
    dispatch_retain(v2);
  v33 = v22;
  v34 = v2;
  (*(void (**)(unint64_t, uint64_t, unint64_t, unint64_t, void **))(*(_QWORD *)v21 + 48))(v21, 1, 0xAAAAAAAA00000004, 0xAAAAAAAAAAAAAAAALL, &v33);
  if (v34)
    dispatch_release(v34);
  if (v33)
    _Block_release(v33);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (!v20)
  {
    v25 = dispatch_time(0, 6000000000);
    dispatch_group_wait(0, v25);
    v24 = (std::__shared_weak_count *)v41;
    if (!v41)
      goto LABEL_49;
LABEL_45:
    v26 = (unint64_t *)&v24->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    goto LABEL_49;
  }
  dispatch_group_leave(v20);
  dispatch_release(v20);
  v23 = dispatch_time(0, 6000000000);
  dispatch_group_wait(v20, v23);
  dispatch_release(v20);
  v24 = (std::__shared_weak_count *)v41;
  if (v41)
    goto LABEL_45;
LABEL_49:
  if (v2)
    dispatch_release(v2);
LABEL_51:
  v28 = *((_QWORD *)this + 5);
  if (*((_BYTE *)v43 + 24))
  {
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A343C000, v28, OS_LOG_TYPE_DEFAULT, "#I Switch succeeded", buf, 2u);
    }
  }
  else if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1A343C000, v28, OS_LOG_TYPE_ERROR, "Switch failed", buf, 2u);
  }
  v29 = *((unsigned __int8 *)v43 + 24);
  _Block_object_dispose(&v42, 8);
  return v29;
}

void sub_1A354BA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_group_t group, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  NSObject *v25;
  uint64_t v26;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  if (v25)
    dispatch_release(v25);
  _Block_object_dispose((const void *)(v26 - 112), 8);
  _Unwind_Resume(a1);
}

void ___ZN20BasebandTransportMAV15switchDIAG_syncEv_block_invoke(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[16];
  uint64_t v6;
  uint64_t v7;

  if (a2 == 1)
  {
    v6 = v2;
    v7 = v3;
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v5 = 0;
      _os_log_debug_impl(&dword_1A343C000, v4, OS_LOG_TYPE_DEBUG, "#D Diag driver is started", v5, 2u);
    }
  }
}

uint64_t ___ZN20BasebandTransportMAV15switchDIAG_syncEv_block_invoke_3(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

uint64_t __cxx_global_var_init_6()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1A343C000);
  }
  return result;
}

void ServerLogging::~ServerLogging(ServerLogging *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 9));
    *((_QWORD *)this + 9) = 0;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_8:
      if ((*((char *)this + 47) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else
  {
LABEL_7:
    if ((*((char *)this + 71) & 0x80000000) == 0)
      goto LABEL_8;
  }
  operator delete(*((void **)this + 6));
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_9:
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v6)
      return;
    goto LABEL_10;
  }
LABEL_14:
  operator delete(*((void **)this + 3));
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (!v6)
    return;
LABEL_10:
  std::__shared_weak_count::__release_weak(v6);
}

uint64_t ServerLogging::ServerLogging(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  os_unfair_lock_s *v7;
  _QWORD *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  size_t v19;
  void *v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::string __p;
  void *__dst[2];
  int64_t v31;
  os_unfair_lock_s *v32;
  std::__shared_weak_count *v33;
  std::string v34;
  std::string v35;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 24) = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 48) = v6;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v7 = (os_unfair_lock_s *)off_1ED114620;
  if (!off_1ED114620)
  {
    v8 = operator new(0x30uLL);
    MEMORY[0x1A858F2E4](v8, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x1E0C9B260]);
    v8[3] = 0;
    v8[4] = 0;
    *((_DWORD *)v8 + 10) = 0;
    std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(&v35, (uint64_t)v8);
    v9 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = 0uLL;
    v10 = (std::__shared_weak_count *)*(&off_1ED114620 + 1);
    off_1ED114620 = v9;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    size = (std::__shared_weak_count *)v35.__r_.__value_.__l.__size_;
    if (v35.__r_.__value_.__l.__size_)
    {
      v14 = (unint64_t *)(v35.__r_.__value_.__l.__size_ + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v7 = (os_unfair_lock_s *)off_1ED114620;
  }
  v32 = v7;
  v33 = (std::__shared_weak_count *)*(&off_1ED114620 + 1);
  if (*(&off_1ED114620 + 1))
  {
    v16 = (unint64_t *)(*(&off_1ED114620 + 1) + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v18 = abm::trace::kCurrentSnapshotFolder[0];
  v19 = strlen(abm::trace::kCurrentSnapshotFolder[0]);
  if (v19 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v20 = (void *)v19;
  if (v19 >= 0x17)
  {
    v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v22 = v19 | 7;
    v23 = v22 + 1;
    v21 = (void **)operator new(v22 + 1);
    __dst[1] = v20;
    v31 = v23 | 0x8000000000000000;
    __dst[0] = v21;
LABEL_30:
    memmove(v21, v18, (size_t)v20);
    *((_BYTE *)v20 + (_QWORD)v21) = 0;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_31;
  }
  HIBYTE(v31) = v19;
  v21 = __dst;
  if (v19)
    goto LABEL_30;
  LOBYTE(__dst[0]) = 0;
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
LABEL_26:
    __p = *(std::string *)a3;
    goto LABEL_32;
  }
LABEL_31:
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
LABEL_32:
  os_unfair_lock_lock(v7 + 10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v34, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v34 = __p;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v35, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
  else
    v35 = v34;
  if (v31 >= 0)
    v24 = (char *)__dst;
  else
    v24 = (char *)__dst[0];
  ctu::cf::plist_adapter::set<std::string>((int)v7, (uint64_t)&v35, v24);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v35.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_43:
      os_unfair_lock_unlock(v7 + 10);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_44;
      goto LABEL_49;
    }
  }
  else if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_43;
  }
  operator delete(v34.__r_.__value_.__l.__data_);
  os_unfair_lock_unlock(v7 + 10);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_44:
    if ((SHIBYTE(v31) & 0x80000000) == 0)
      goto LABEL_45;
LABEL_50:
    operator delete(__dst[0]);
    v25 = v33;
    if (!v33)
      return a1;
    goto LABEL_51;
  }
LABEL_49:
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31) < 0)
    goto LABEL_50;
LABEL_45:
  v25 = v33;
  if (!v33)
    return a1;
LABEL_51:
  v26 = (unint64_t *)&v25->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  return a1;
}

void sub_1A354C0EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a25 < 0)
    operator delete(__p);
  __clang_call_terminate(a1);
}

void sub_1A354C188()
{
  JUMPOUT(0x1A354C19CLL);
}

void ServerLogging::init(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  NSObject *v3;
  ctu::LogServer *v4;

  v2 = this + 4;
  os_unfair_lock_lock(this + 4);
  v3 = ServerLogging::monitorSnapshotPath_sync((ServerLogging *)this);
  *(_QWORD *)&this[18]._os_unfair_lock_opaque = v3;
  ServerLogging::clearScratchFolders_sync((ServerLogging *)v3);
  v4 = *(ctu::LogServer **)&this[20]._os_unfair_lock_opaque;
  if (v4)
    ctu::LogServer::setEnabled(v4);
  os_unfair_lock_unlock(v2);
}

NSObject *ServerLogging::monitorSnapshotPath_sync(ServerLogging *this)
{
  const char *v2;
  const char *v3;
  timespec v4;
  const char *v5;
  unsigned __int8 v6;
  NSObject *v7;
  const char *v8;
  unsigned int v9;
  NSObject *global_queue;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD v15[4];
  unsigned int v16;
  _QWORD handler[5];
  unsigned int v18;
  stat v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = (char *)this + 48;
  v2 = (const char *)*((_QWORD *)this + 6);
  v4.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v19.st_blksize = v4;
  *(timespec *)v19.st_qspare = v4;
  v19.st_birthtimespec = v4;
  *(timespec *)&v19.st_size = v4;
  v19.st_mtimespec = v4;
  v19.st_ctimespec = v4;
  *(timespec *)&v19.st_uid = v4;
  v19.st_atimespec = v4;
  *(timespec *)&v19.st_dev = v4;
  if (*((char *)this + 71) >= 0)
    v5 = (char *)this + 48;
  else
    v5 = v2;
  if (stat(v5, &v19))
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED114D18 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v7 = qword_1ED114D18;
      if (os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_DEFAULT))
      {
LABEL_8:
        v8 = v3;
        if (*((char *)this + 71) < 0)
          v8 = *(const char **)v3;
        v19.st_dev = 136315138;
        *(_QWORD *)&v19.st_mode = v8;
        _os_log_impl(&dword_1A343C000, v7, OS_LOG_TYPE_DEFAULT, "Snapshot path [%s] was not found, so recreating it\n", (uint8_t *)&v19, 0xCu);
      }
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
      v7 = qword_1ED114D18;
      if (os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_DEFAULT))
        goto LABEL_8;
    }
    support::fs::createDir(v3, 0x1EDu, 1);
  }
  if (*((char *)this + 71) < 0)
    v3 = *(const char **)v3;
  v9 = open(v3, 0x8000);
  if ((v9 & 0x80000000) != 0)
    return 0;
  global_queue = dispatch_get_global_queue(17, 0);
  v11 = dispatch_source_create(MEMORY[0x1E0C80DE8], v9, 0x21uLL, global_queue);
  if (!v11)
  {
    close(v9);
    return 0;
  }
  v12 = v11;
  v13 = MEMORY[0x1E0C809B0];
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 0x40000000;
  handler[2] = ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke;
  handler[3] = &__block_descriptor_tmp_7_10;
  handler[4] = this;
  v18 = v9;
  dispatch_source_set_event_handler(v11, handler);
  v15[0] = v13;
  v15[1] = 0x40000000;
  v15[2] = ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke_8;
  v15[3] = &__block_descriptor_tmp_9_6;
  v16 = v9;
  dispatch_source_set_cancel_handler(v12, v15);
  dispatch_activate(v12);
  return v12;
}

void ServerLogging::clearScratchFolders_sync(ServerLogging *this)
{
  char *v1;
  size_t v2;
  void *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *global_queue;
  capabilities::abs *v8;
  void *__dst[2];
  unint64_t v10;

  v1 = abm::trace::kTrashFolder[0];
  v2 = strlen(abm::trace::kTrashFolder[0]);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v3 = (void *)v2;
  if (v2 >= 0x17)
  {
    v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v5 = v2 | 7;
    v6 = v5 + 1;
    v4 = (void **)operator new(v5 + 1);
    __dst[1] = v3;
    v10 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_8;
  }
  HIBYTE(v10) = v2;
  v4 = __dst;
  if (v2)
LABEL_8:
    memmove(v4, v1, (size_t)v3);
  *((_BYTE *)v3 + (_QWORD)v4) = 0;
  support::fs::createDir((const char *)__dst, 0x1EDu, 1);
  if (SHIBYTE(v10) < 0)
    operator delete(__dst[0]);
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_async(global_queue, &__block_literal_global_2);
  capabilities::abs::logScratchPath(v8);
  support::fs::createDir((const char *)__dst, 0x1EDu, 1);
  if (SHIBYTE(v10) < 0)
    operator delete(__dst[0]);
}

void sub_1A354C5E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

ctu::LogServer *ServerLogging::init_sync(ServerLogging *this)
{
  ctu::LogServer *result;

  result = (ctu::LogServer *)*((_QWORD *)this + 10);
  if (result)
    return (ctu::LogServer *)ctu::LogServer::setEnabled(result);
  return result;
}

void ServerLogging::registerLogServer(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  ctu::LogServer *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  os_unfair_lock_s *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v4 = *(ctu::LogServer **)a2;
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = (os_unfair_lock_s *)(a1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(std::__shared_weak_count **)(a1 + 88);
    *(_QWORD *)(a1 + 80) = v4;
    *(_QWORD *)(a1 + 88) = v3;
    if (!v9)
    {
LABEL_7:
      if (!v4)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else
  {
    v7 = (os_unfair_lock_s *)(a1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    v9 = *(std::__shared_weak_count **)(a1 + 88);
    *(_QWORD *)(a1 + 80) = v4;
    *(_QWORD *)(a1 + 88) = 0;
    if (!v9)
      goto LABEL_7;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v4 = *(ctu::LogServer **)(a1 + 80);
    if (!v4)
      goto LABEL_17;
    goto LABEL_16;
  }
  v4 = *(ctu::LogServer **)(a1 + 80);
  if (v4)
LABEL_16:
    ctu::LogServer::setEnabled(v4);
LABEL_17:
  os_unfair_lock_unlock(v7);
  if (v3)
  {
    v12 = (unint64_t *)&v3->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ServerLogging::snapshot(os_unfair_lock_s *a1, CFTypeRef *a2)
{
  CFTypeRef v3;
  os_unfair_lock_s *v4;

  v3 = *a2;
  if (*a2)
  {
    CFRetain(*a2);
    v4 = a1 + 4;
    os_unfair_lock_lock(v4);
    CFRetain(v3);
    CFRelease(v3);
    os_unfair_lock_unlock(v4);
    CFRelease(v3);
  }
  else
  {
    os_unfair_lock_lock(a1 + 4);
    os_unfair_lock_unlock(a1 + 4);
  }
}

void ___ZN13ServerLogging24clearScratchFolders_syncEv_block_invoke()
{
  char *v0;
  size_t v1;
  void *v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  void *__dst[2];
  unint64_t v7;

  v0 = abm::trace::kTrashFolder[0];
  v1 = strlen(abm::trace::kTrashFolder[0]);
  if (v1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v2 = (void *)v1;
  if (v1 >= 0x17)
  {
    v4 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1 | 7) != 0x17)
      v4 = v1 | 7;
    v5 = v4 + 1;
    v3 = (void **)operator new(v4 + 1);
    __dst[1] = v2;
    v7 = v5 | 0x8000000000000000;
    __dst[0] = v3;
    goto LABEL_8;
  }
  HIBYTE(v7) = v1;
  v3 = __dst;
  if (v1)
LABEL_8:
    memmove(v3, v0, (size_t)v2);
  *((_BYTE *)v2 + (_QWORD)v3) = 0;
  support::fs::removeDirContents((const char *)__dst, 0);
  if (SHIBYTE(v7) < 0)
    operator delete(__dst[0]);
}

void sub_1A354C8B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ServerLogging::backupFolders_sync(capabilities::abs *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string::size_type *v7;
  timespec v8;
  std::string *p_p;
  DIR *v10;
  std::string *v11;
  DIR *v12;
  dirent *v13;
  int v14;
  size_t v15;
  unint64_t v16;
  std::string *v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  void **v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  int v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  std::string::size_type v29;
  char v30;
  int st_gid_high;
  capabilities::abs *v32;
  void *v33;
  char v34;
  _BYTE v35[8];
  _QWORD *v36;
  void *v37[2];
  unsigned __int8 v38;
  std::string __p;
  stat v40;

  *(_QWORD *)(a4 + 8) = 0;
  v7 = (std::string::size_type *)(a4 + 8);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 16) = 0;
  capabilities::abs::logScratchPath(a1);
  v8.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v8.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v40.st_blksize = v8;
  *(timespec *)v40.st_qspare = v8;
  v40.st_birthtimespec = v8;
  *(timespec *)&v40.st_size = v8;
  v40.st_mtimespec = v8;
  v40.st_ctimespec = v8;
  *(timespec *)&v40.st_uid = v8;
  v40.st_atimespec = v8;
  *(timespec *)&v40.st_dev = v8;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (stat((const char *)p_p, &v40))
  {
    LODWORD(v10) = 0;
  }
  else
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &__p;
    else
      v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v12 = opendir((const char *)v11);
    v10 = v12;
    if (v12)
    {
      v13 = readdir(v12);
      closedir(v10);
      LODWORD(v10) = v13 != 0;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!(_DWORD)v10)
      return;
  }
  else if (!(_DWORD)v10)
  {
    return;
  }
  v14 = *((char *)a2 + 23);
  if (v14 >= 0)
    v15 = *((unsigned __int8 *)a2 + 23);
  else
    v15 = (size_t)a2[1];
  v16 = v15 + 7;
  memset(&__p, 170, sizeof(__p));
  if (v15 + 7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v16 >= 0x17)
  {
    v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v18 = v16 | 7;
    v19 = v18 + 1;
    v17 = (std::string *)operator new(v18 + 1);
    __p.__r_.__value_.__l.__size_ = v15 + 7;
    __p.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
  }
  else
  {
    memset(&__p, 0, sizeof(__p));
    v17 = &__p;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v15 + 7;
    if (!v15)
      goto LABEL_29;
  }
  if (v14 >= 0)
    v20 = a2;
  else
    v20 = *a2;
  memmove(v17, v20, v15);
LABEL_29:
  strcpy((char *)v17 + v15, "log-bb-");
  Timestamp::Timestamp((Timestamp *)v35);
  Timestamp::asString((uint64_t)v35, 0, 9, v37);
  if ((v38 & 0x80u) == 0)
    v21 = v37;
  else
    v21 = (void **)v37[0];
  if ((v38 & 0x80u) == 0)
    v22 = v38;
  else
    v22 = (std::string::size_type)v37[1];
  v23 = std::string::append(&__p, (const std::string::value_type *)v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  *(_QWORD *)&v40.st_uid = *((_QWORD *)&v23->__r_.__value_.__l + 2);
  *(_OWORD *)&v40.st_dev = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = *(char *)(a3 + 23);
  if (v25 >= 0)
    v26 = (const std::string::value_type *)a3;
  else
    v26 = *(const std::string::value_type **)a3;
  if (v25 >= 0)
    v27 = *(unsigned __int8 *)(a3 + 23);
  else
    v27 = *(_QWORD *)(a3 + 8);
  v28 = std::string::append((std::string *)&v40, v26, v27);
  v29 = v28->__r_.__value_.__r.__words[0];
  *v7 = v28->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v7 + 7) = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1]
                                                                          + 7);
  v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  st_gid_high = SHIBYTE(v40.st_gid);
  *(_QWORD *)a4 = v29;
  *(_BYTE *)(a4 + 23) = v30;
  if ((st_gid_high & 0x80000000) == 0)
  {
    if (((char)v38 & 0x80000000) == 0)
      goto LABEL_43;
LABEL_48:
    operator delete(v37[0]);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v35, v36);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_49;
  }
  operator delete(*(void **)&v40.st_dev);
  if ((char)v38 < 0)
    goto LABEL_48;
LABEL_43:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v35, v36);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_44;
LABEL_49:
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_44:
  capabilities::abs::logScratchPath(v32);
  support::fs::moveDirUnique((const char *)&v40, a4, (uint64_t)&v33);
  if ((v34 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v40.st_gid) & 0x80000000) == 0)
      return;
LABEL_51:
    operator delete(*(void **)&v40.st_dev);
    return;
  }
  operator delete(v33);
  if (SHIBYTE(v40.st_gid) < 0)
    goto LABEL_51;
}

void sub_1A354CBD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  int v33;

  if (a32 < 0)
    operator delete(__p);
  if (v33 < 0)
    operator delete(v32);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  NSObject *v4;
  _QWORD *v5;
  uint64_t result;
  int v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED114D18 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v4 = qword_1ED114D18;
    if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
    v4 = qword_1ED114D18;
    if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
  }
  v5 = (_QWORD *)(v2 + 48);
  if (*(char *)(v2 + 71) < 0)
    v5 = (_QWORD *)*v5;
  v7 = 136315138;
  v8 = v5;
  _os_log_impl(&dword_1A343C000, v4, OS_LOG_TYPE_DEFAULT, "Snapshot path [%s] was removed\n", (uint8_t *)&v7, 0xCu);
LABEL_7:
  dispatch_release(*(dispatch_object_t *)(v2 + 72));
  *(_QWORD *)(v2 + 72) = 0;
  close(*(_DWORD *)(a1 + 40));
  result = ServerLogging::monitorSnapshotPath_sync((ServerLogging *)v2);
  *(_QWORD *)(v2 + 72) = result;
  return result;
}

uint64_t ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke_8(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

void GetABMLogServer(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD block[5];

  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1A343C000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_6;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v3 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    *a1 = GetABMLogServer(void)::sLogServer;
    a1[1] = v3;
    if (!v3)
      return;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v3 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    *a1 = GetABMLogServer(void)::sLogServer;
    a1[1] = v3;
    if (!v3)
      return;
  }
  v4 = (unint64_t *)(v3 + 8);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
}

uint64_t ctu::PthreadMutexGuardPolicy<ServerLogging>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *size;
  unint64_t *v8;
  unint64_t v9;
  capabilities::abs *v10;
  uint64_t v11;
  size_t v12;
  std::string *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  NSObject *v26;
  ctu::LogServer *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  _QWORD v51[2];
  std::string v52;
  ServerLogging *v53;
  std::string __p;
  void *v55;
  uint64_t *v56;

  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1A3581DE0;
  strcpy(__p.__r_.__value_.__l.__data_, "AppleBasebandManagerServerLog");
  ctu::LogServer::create();
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = 0uLL;
  v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)v2 = v3;
  if (!v4)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (!v52.__r_.__value_.__l.__size_)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (!v52.__r_.__value_.__l.__size_)
      goto LABEL_9;
  }
  v8 = (unint64_t *)&size->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
  {
LABEL_9:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
  std::__shared_weak_count::__release_weak(size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_10:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_11:
  ctu::LogServer::start(**(ctu::LogServer ***)(a1 + 32));
  v10 = (capabilities::abs *)pthread_mutex_lock(&ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance);
  v11 = qword_1ED114710;
  if (qword_1ED114710)
    goto LABEL_46;
  capabilities::abs::logScratchPath(v10);
  v12 = strlen((const char *)kDaemonLogScratchDir);
  v13 = std::string::append(&v52, (const std::string::value_type *)kDaemonLogScratchDir, v12);
  __p = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  memset(&v52, 170, sizeof(v52));
  capabilities::abs::logSnapshotPath((capabilities::abs *)v13);
  v14 = operator new(0x60uLL);
  ServerLogging::ServerLogging((uint64_t)v14, (__int128 *)&__p, (__int128 *)&v52);
  v53 = (ServerLogging *)v14;
  v15 = (std::__shared_weak_count *)operator new(0x20uLL);
  v15->__shared_owners_ = 0;
  v16 = (unint64_t *)&v15->__shared_owners_;
  v15->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A0F740;
  v15->__shared_weak_owners_ = 0;
  v15[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
  v53 = 0;
  v17 = (std::__shared_weak_count *)*((_QWORD *)v14 + 1);
  if (v17)
  {
    if (v17->__shared_owners_ != -1)
      goto LABEL_27;
    do
      v18 = __ldxr(v16);
    while (__stxr(v18 + 1, v16));
    p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v20 = __ldxr(p_shared_weak_owners);
    while (__stxr(v20 + 1, p_shared_weak_owners));
    *(_QWORD *)v14 = v14;
    *((_QWORD *)v14 + 1) = v15;
    std::__shared_weak_count::__release_weak(v17);
  }
  else
  {
    do
      v21 = __ldxr(v16);
    while (__stxr(v21 + 1, v16));
    v22 = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    *(_QWORD *)v14 = v14;
    *((_QWORD *)v14 + 1) = v15;
  }
  do
    v24 = __ldaxr(v16);
  while (__stlxr(v24 - 1, v16));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_27:
  if (v53)
  {
    ServerLogging::~ServerLogging(v53);
    operator delete(v25);
  }
  os_unfair_lock_lock((os_unfair_lock_t)v14 + 4);
  v26 = ServerLogging::monitorSnapshotPath_sync((ServerLogging *)v14);
  *((_QWORD *)v14 + 9) = v26;
  ServerLogging::clearScratchFolders_sync((ServerLogging *)v26);
  v27 = (ctu::LogServer *)*((_QWORD *)v14 + 10);
  if (v27)
    ctu::LogServer::setEnabled(v27);
  os_unfair_lock_unlock((os_unfair_lock_t)v14 + 4);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v52.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_33:
      v28 = (std::__shared_weak_count *)off_1ED114718;
      qword_1ED114710 = (uint64_t)v14;
      off_1ED114718 = v15;
      if (!v28)
        goto LABEL_45;
LABEL_41:
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
      goto LABEL_45;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  v28 = (std::__shared_weak_count *)off_1ED114718;
  qword_1ED114710 = (uint64_t)v14;
  off_1ED114718 = v15;
  if (v28)
    goto LABEL_41;
LABEL_45:
  v11 = qword_1ED114710;
LABEL_46:
  v31 = (std::__shared_weak_count *)off_1ED114718;
  if (off_1ED114718)
  {
    v32 = (unint64_t *)((char *)off_1ED114718 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  pthread_mutex_unlock(&ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance);
  v34 = *(_QWORD **)(a1 + 32);
  v35 = (std::__shared_weak_count *)v34[1];
  v51[0] = *v34;
  v51[1] = v35;
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
    ServerLogging::registerLogServer(v11, (uint64_t)v51);
    do
      v38 = __ldaxr(v36);
    while (__stlxr(v38 - 1, v36));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  else
  {
    ServerLogging::registerLogServer(v11, (uint64_t)v51);
  }
  if (v31)
  {
    v39 = (unint64_t *)&v31->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v41 = *(uint64_t **)(a1 + 32);
  v43 = *v41;
  v42 = (std::__shared_weak_count *)v41[1];
  v49 = v43;
  v50 = v42;
  if (v42)
  {
    v44 = (unint64_t *)&v42->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  __p.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
  __p.__r_.__value_.__l.__size_ = 0x40000000;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v55 = &__block_descriptor_tmp_1;
  v56 = &v49;
  if (abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v46 = v50;
    if (!v50)
      return;
  }
  else
  {
    dispatch_once(&abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &__p);
    v46 = v50;
    if (!v50)
      return;
  }
  v47 = (unint64_t *)&v46->__shared_owners_;
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
}

void sub_1A354D464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, ServerLogging *a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::unique_ptr<ServerLogging>::~unique_ptr[abi:ne180100](&a19);
  if (a18 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  pthread_mutex_unlock(&ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance);
  _Unwind_Resume(a1);
}

ServerLogging **std::unique_ptr<ServerLogging>::~unique_ptr[abi:ne180100](ServerLogging **a1)
{
  ServerLogging *v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    ServerLogging::~ServerLogging(v2);
    operator delete(v3);
  }
  return a1;
}

void std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::__on_zero_shared(uint64_t a1)
{
  ServerLogging *v1;
  void *v2;

  v1 = *(ServerLogging **)(a1 + 24);
  if (v1)
  {
    ServerLogging::~ServerLogging(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001A35845B0)
    return a1 + 24;
  if (((v3 & 0x80000001A35845B0 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001A35845B0))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001A35845B0 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t ctu::cf::plist_adapter::set<std::string>(int a1, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v6;
  std::string v7;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v7 = *(std::string *)a2;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v6, a3);
  v4 = ctu::cf::plist_adapter::set<std::string>();
  MEMORY[0x1A858F29C](&v6);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return v4;
}

uint64_t ctu::cf::plist_adapter::set<std::string>()
{
  ctu::cf::convert_copy();
  return 0;
}

void sub_1A354D79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_1()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1A343C000);
  }
  return result;
}

uint64_t __cxx_global_var_init_10()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ServerLogging>::~PthreadMutexGuardPolicy, &ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance, &dword_1A343C000);
  }
  return result;
}

uint64_t sCanHostHelperServer(capabilities::radio *a1)
{
  return capabilities::radio::radioUnknown(a1) ^ 1;
}

void logs::convertToTraceProperties(std::string::size_type a1@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  uint64_t v8;
  uint64_t v9;
  xpc_object_t value;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 v13;
  NSObject *v14;
  xpc_object_t v15;
  xpc_object_t v16;
  int v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  std::string *p_p;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  unsigned int v27;
  int v28;
  unsigned __int8 v29;
  NSObject *v30;
  xpc_object_t v31;
  char v32;
  capabilities::abs *v33;
  config::hw *v34;
  unint64_t v35;
  unsigned __int8 v36;
  NSObject *v37;
  xpc_object_t v38;
  int v39;
  int v40;
  unsigned __int8 v41;
  NSObject *v42;
  xpc_object_t v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  xpc_object_t v47;
  xpc_object_t v48;
  xpc_object_t v49;
  uint64_t v50;
  xpc_object_t v51;
  xpc_object_t v52;
  xpc_object_t v53;
  xpc_object_t v54;
  xpc_object_t v55;
  xpc_object_t v56;
  xpc_object_t v57;
  xpc_object_t v58;
  xpc_object_t v59;
  xpc_object_t v60;
  xpc_object_t v61;
  xpc_object_t v62;
  xpc_object_t v63;
  xpc_object_t v64;
  xpc_object_t v65;
  xpc_object_t v66;
  xpc_object_t v67;
  xpc_object_t v68;
  std::string *v69;
  xpc_object_t v70;
  xpc_object_t v71;
  xpc_object_t v72;
  xpc_object_t v73;
  xpc_object_t v74;
  xpc_object_t v75;
  xpc_object_t v76;
  xpc_object_t v77;
  xpc_object_t v78;
  const char *v79;
  xpc_object_t v80;
  xpc_object_t v81;
  xpc_object_t v82;
  xpc_object_t v83;
  xpc_object_t v84;
  xpc_object_t v85;
  xpc_object_t v86;
  xpc_object_t v87;
  xpc_object_t v88;
  std::string *v89;
  xpc_object_t v90;
  xpc_object_t v91;
  capabilities::diag *v92;
  capabilities::diag *v93;
  xpc_object_t v94;
  xpc_object_t v95;
  xpc_object_t v96;
  xpc_object_t v97;
  xpc_object_t v98;
  xpc_object_t v99;
  xpc_object_t v100;
  std::string *v101;
  xpc_object_t v102;
  xpc_object_t v103;
  xpc_object_t v104;
  xpc_object_t v105;
  xpc_object_t v106;
  xpc_object_t v107;
  xpc_object_t v108;
  xpc_object_t v109;
  xpc_object_t v110;
  std::string *v111;
  xpc_object_t v112;
  xpc_object_t v113;
  xpc_object_t v114;
  xpc_object_t v115;
  xpc_object_t v116;
  xpc_object_t v117;
  xpc_object_t v118;
  xpc_object_t v119;
  xpc_object_t v120;
  std::string *v121;
  xpc_object_t v122;
  xpc_object_t v123;
  xpc_object_t v124;
  xpc_object_t v125;
  xpc_object_t v126;
  xpc_object_t v127;
  xpc_object_t v128;
  xpc_object_t v129;
  std::string *v130;
  xpc_object_t v131;
  xpc_object_t v132;
  std::string __p;
  xpc_object_t xdict;
  std::string object;
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  v4 = xpc_null_create();
  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v5 = xpc_array_create(0, 0);
  v6 = v5;
  if (v5)
  {
    *a2 = v5;
  }
  else
  {
    v6 = xpc_null_create();
    *a2 = v6;
    if (!v6)
    {
      v7 = xpc_null_create();
      v6 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A85902BC](v6) == MEMORY[0x1E0C812C8])
  {
    xpc_retain(v6);
    goto LABEL_9;
  }
  v7 = xpc_null_create();
LABEL_8:
  *a2 = v7;
LABEL_9:
  xpc_release(v6);
  xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  object.__r_.__value_.__r.__words[0] = a1;
  object.__r_.__value_.__l.__size_ = (std::string::size_type)"EnableBasebandLogging";
  xpc::dict::object_proxy::operator xpc::dict((uint64_t)&object, &xdict);
  v8 = MEMORY[0x1A85902BC](xdict);
  v9 = MEMORY[0x1E0C812F8];
  if (v8 != MEMORY[0x1E0C812F8])
    goto LABEL_227;
  value = xpc_dictionary_get_value(xdict, "Exclude");
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value)
    xpc_retain(value);
  else
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  v11 = xpc::dyn_cast_or_default();
  xpc_release(object.__r_.__value_.__l.__data_);
  if (v11 > 3
    || ((v11 & 1) == 0 || (v12 = capabilities::radio::maverick((capabilities::radio *)v12), (v12 & 1) == 0))
    && ((v11 & 2) == 0 || !capabilities::radio::ice((capabilities::radio *)v12)))
  {
    v17 = 1;
    goto LABEL_41;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED114D18 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v14 = qword_1ED114D18;
    if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_DEFAULT))
      goto LABEL_22;
    goto LABEL_21;
  }
  dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
  v14 = qword_1ED114D18;
  if (os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_DEFAULT))
  {
LABEL_21:
    LODWORD(object.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(object.__r_.__value_.__r.__words[0]) = v11;
    _os_log_impl(&dword_1A343C000, v14, OS_LOG_TYPE_DEFAULT, "Not enabling baseband logging for this vendor: %d", (uint8_t *)&object, 8u);
  }
LABEL_22:
  v15 = xpc_dictionary_create(0, 0, 0);
  if (v15 || (v15 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A85902BC](v15) == v9)
    {
      xpc_retain(v15);
      v16 = v15;
    }
    else
    {
      v16 = xpc_null_create();
    }
  }
  else
  {
    v16 = xpc_null_create();
    v15 = 0;
  }
  xpc_release(v15);
  v18 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v18);
  v19 = xpc_string_create("BasebandTrace");
  if (!v19)
    v19 = xpc_null_create();
  xpc_dictionary_set_value(v16, "kKeyTraceName", v19);
  v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  v21 = xpc_string_create((const char *)*MEMORY[0x1E0CFAF68]);
  if (!v21)
    v21 = xpc_null_create();
  xpc_dictionary_set_value(v16, "kKeyTracePropertyName", v21);
  v22 = xpc_null_create();
  xpc_release(v21);
  xpc_release(v22);
  std::to_string(&object, 0);
  __p = object;
  if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v24 = xpc_string_create((const char *)p_p);
  if (!v24)
    v24 = xpc_null_create();
  xpc_dictionary_set_value(v16, "kKeyTracePropertyValue", v24);
  v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  xpc_array_append_value(*a2, v16);
  v17 = 0;
  v4 = v16;
LABEL_41:
  v26 = xpc_dictionary_get_value(xdict, "Profile");
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
  if (v26)
    xpc_retain(v26);
  else
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  v27 = xpc::dyn_cast_or_default();
  xpc_release(object.__r_.__value_.__l.__data_);
  if (v27 > 0x11)
    v28 = v17;
  else
    v28 = 0;
  if (v28 == 1)
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED114D18 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v30 = qword_1ED114D18;
      if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
      {
LABEL_51:
        v17 = 0;
        goto LABEL_52;
      }
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
      v30 = qword_1ED114D18;
      if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
        goto LABEL_51;
    }
    LODWORD(object.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(object.__r_.__value_.__r.__words[0]) = v27;
    _os_log_error_impl(&dword_1A343C000, v30, OS_LOG_TYPE_ERROR, "Invalid profile index: %d", (uint8_t *)&object, 8u);
    goto LABEL_51;
  }
LABEL_52:
  v31 = xpc_dictionary_get_value(xdict, "History");
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
  if (v31)
    xpc_retain(v31);
  else
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  v32 = xpc::dyn_cast_or_default();
  xpc_release(object.__r_.__value_.__l.__data_);
  v34 = (config::hw *)capabilities::abs::profileBasebandHistoryMB(v33);
  v35 = (1 << (v32 + (config::hw::watch(v34) ^ 1)));
  if ((unint64_t)v34 > v35)
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED114D18 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v37 = qword_1ED114D18;
      if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_DEFAULT))
      {
LABEL_60:
        LODWORD(v35) = (_DWORD)v34;
        goto LABEL_61;
      }
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
      v37 = qword_1ED114D18;
      if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_DEFAULT))
        goto LABEL_60;
    }
    LODWORD(object.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
    _os_log_impl(&dword_1A343C000, v37, OS_LOG_TYPE_DEFAULT, "Setting to minimum history size %lu", (uint8_t *)&object, 0xCu);
    goto LABEL_60;
  }
LABEL_61:
  v38 = xpc_dictionary_get_value(xdict, "Sleep");
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
  if (v38)
    xpc_retain(v38);
  else
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  v39 = xpc::dyn_cast_or_default();
  xpc_release(object.__r_.__value_.__l.__data_);
  if (v39 > 2)
    v40 = v17;
  else
    v40 = 0;
  if (v40 == 1)
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED114D18 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
    }
    if (GetOsLogContext(void)::onceToken != -1)
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
      v42 = qword_1ED114D18;
      if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
        goto LABEL_227;
      goto LABEL_71;
    }
    v42 = qword_1ED114D18;
    if (os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
    {
LABEL_71:
      LODWORD(object.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(object.__r_.__value_.__r.__words[0]) = v39;
      _os_log_error_impl(&dword_1A343C000, v42, OS_LOG_TYPE_ERROR, "Invalid sleep index: %d", (uint8_t *)&object, 8u);
    }
LABEL_227:
    v105 = v4;
    goto LABEL_228;
  }
  if (!v17)
    goto LABEL_227;
  v43 = xpc_dictionary_create(0, 0, 0);
  if (v43 || (v43 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A85902BC](v43) == v9)
    {
      xpc_retain(v43);
      v44 = v43;
    }
    else
    {
      v44 = xpc_null_create();
    }
  }
  else
  {
    v44 = xpc_null_create();
    v43 = 0;
  }
  xpc_release(v43);
  v45 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v45);
  v46 = xpc_string_create("BasebandTrace");
  if (!v46)
    v46 = xpc_null_create();
  xpc_dictionary_set_value(v44, "kKeyTraceName", v46);
  v47 = xpc_null_create();
  xpc_release(v46);
  xpc_release(v47);
  v48 = xpc_string_create("File");
  if (!v48)
    v48 = xpc_null_create();
  xpc_dictionary_set_value(v44, "kKeyTracePropertyName", v48);
  v49 = xpc_null_create();
  xpc_release(v48);
  xpc_release(v49);
  v50 = v27;
  v51 = xpc_string_create(logs::sProfileLoggingMasks[2 * v27]);
  if (!v51)
    v51 = xpc_null_create();
  xpc_dictionary_set_value(v44, "kKeyTracePropertyValue", v51);
  v52 = xpc_null_create();
  xpc_release(v51);
  xpc_release(v52);
  xpc_array_append_value(*a2, v44);
  v53 = xpc_dictionary_create(0, 0, 0);
  if (v53 || (v53 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A85902BC](v53) == v9)
    {
      xpc_retain(v53);
      v54 = v53;
    }
    else
    {
      v54 = xpc_null_create();
    }
  }
  else
  {
    v54 = xpc_null_create();
    v53 = 0;
  }
  xpc_release(v53);
  v55 = xpc_null_create();
  xpc_release(v44);
  xpc_release(v55);
  v56 = xpc_string_create("BasebandTrace");
  if (!v56)
    v56 = xpc_null_create();
  xpc_dictionary_set_value(v54, "kKeyTraceName", v56);
  v57 = xpc_null_create();
  xpc_release(v56);
  xpc_release(v57);
  v58 = xpc_string_create("File_Secondary");
  if (!v58)
    v58 = xpc_null_create();
  xpc_dictionary_set_value(v54, "kKeyTracePropertyName", v58);
  v59 = xpc_null_create();
  xpc_release(v58);
  xpc_release(v59);
  v60 = xpc_string_create(logs::sProfileLoggingMasks[2 * v50 + 1]);
  if (!v60)
    v60 = xpc_null_create();
  xpc_dictionary_set_value(v54, "kKeyTracePropertyValue", v60);
  v61 = xpc_null_create();
  xpc_release(v60);
  xpc_release(v61);
  xpc_array_append_value(*a2, v54);
  v62 = xpc_dictionary_create(0, 0, 0);
  if (v62 || (v62 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A85902BC](v62) == v9)
    {
      xpc_retain(v62);
      v63 = v62;
    }
    else
    {
      v63 = xpc_null_create();
    }
  }
  else
  {
    v63 = xpc_null_create();
    v62 = 0;
  }
  xpc_release(v62);
  v64 = xpc_null_create();
  xpc_release(v54);
  xpc_release(v64);
  v65 = xpc_string_create("BasebandTrace");
  if (!v65)
    v65 = xpc_null_create();
  xpc_dictionary_set_value(v63, "kKeyTraceName", v65);
  v66 = xpc_null_create();
  xpc_release(v65);
  xpc_release(v66);
  v67 = xpc_string_create("History");
  if (!v67)
    v67 = xpc_null_create();
  xpc_dictionary_set_value(v63, "kKeyTracePropertyName", v67);
  v68 = xpc_null_create();
  xpc_release(v67);
  xpc_release(v68);
  memset(&__p, 0, sizeof(__p));
  std::to_string(&object, v35);
  __p = object;
  if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v69 = &__p;
  else
    v69 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v70 = xpc_string_create((const char *)v69);
  if (!v70)
    v70 = xpc_null_create();
  xpc_dictionary_set_value(v63, "kKeyTracePropertyValue", v70);
  v71 = xpc_null_create();
  xpc_release(v70);
  xpc_release(v71);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  xpc_array_append_value(*a2, v63);
  v72 = xpc_dictionary_create(0, 0, 0);
  if (v72 || (v72 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A85902BC](v72) == v9)
    {
      xpc_retain(v72);
      v73 = v72;
    }
    else
    {
      v73 = xpc_null_create();
    }
  }
  else
  {
    v73 = xpc_null_create();
    v72 = 0;
  }
  xpc_release(v72);
  v74 = xpc_null_create();
  xpc_release(v63);
  xpc_release(v74);
  v75 = xpc_string_create("BasebandTrace");
  if (!v75)
    v75 = xpc_null_create();
  xpc_dictionary_set_value(v73, "kKeyTraceName", v75);
  v76 = xpc_null_create();
  xpc_release(v75);
  xpc_release(v76);
  v77 = xpc_string_create(diag::config::kEnabledDuringSleepKey[0]);
  if (!v77)
    v77 = xpc_null_create();
  xpc_dictionary_set_value(v73, "kKeyTracePropertyName", v77);
  v78 = xpc_null_create();
  xpc_release(v77);
  xpc_release(v78);
  if (v39 > 2)
    v79 = "Unknown";
  else
    v79 = off_1E4A0F8A0[v39];
  v80 = xpc_string_create(v79);
  if (!v80)
    v80 = xpc_null_create();
  xpc_dictionary_set_value(v73, "kKeyTracePropertyValue", v80);
  v81 = xpc_null_create();
  xpc_release(v80);
  xpc_release(v81);
  xpc_array_append_value(*a2, v73);
  v82 = xpc_dictionary_create(0, 0, 0);
  if (v82 || (v82 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A85902BC](v82) == v9)
    {
      xpc_retain(v82);
      v83 = v82;
    }
    else
    {
      v83 = xpc_null_create();
    }
  }
  else
  {
    v83 = xpc_null_create();
    v82 = 0;
  }
  xpc_release(v82);
  v84 = xpc_null_create();
  xpc_release(v73);
  xpc_release(v84);
  v85 = xpc_string_create("BasebandTrace");
  if (!v85)
    v85 = xpc_null_create();
  xpc_dictionary_set_value(v83, "kKeyTraceName", v85);
  v86 = xpc_null_create();
  xpc_release(v85);
  xpc_release(v86);
  v87 = xpc_string_create((const char *)*MEMORY[0x1E0CFAF68]);
  if (!v87)
    v87 = xpc_null_create();
  xpc_dictionary_set_value(v83, "kKeyTracePropertyName", v87);
  v88 = xpc_null_create();
  xpc_release(v87);
  xpc_release(v88);
  memset(&__p, 0, sizeof(__p));
  std::to_string(&object, 1);
  __p = object;
  if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v89 = &__p;
  else
    v89 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v90 = xpc_string_create((const char *)v89);
  if (!v90)
    v90 = xpc_null_create();
  xpc_dictionary_set_value(v83, "kKeyTracePropertyValue", v90);
  v91 = xpc_null_create();
  xpc_release(v90);
  xpc_release(v91);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  xpc_array_append_value(*a2, v83);
  v93 = (capabilities::diag *)capabilities::diag::supportsQDSS(v92);
  if ((_DWORD)v93)
  {
    v94 = xpc_dictionary_create(0, 0, 0);
    if (v94 || (v94 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1A85902BC](v94) == v9)
      {
        xpc_retain(v94);
        v95 = v94;
      }
      else
      {
        v95 = xpc_null_create();
      }
    }
    else
    {
      v95 = xpc_null_create();
      v94 = 0;
    }
    xpc_release(v94);
    v96 = xpc_null_create();
    xpc_release(v83);
    xpc_release(v96);
    v97 = xpc_string_create("BasebandTrace");
    if (!v97)
      v97 = xpc_null_create();
    xpc_dictionary_set_value(v95, "kKeyTraceName", v97);
    v98 = xpc_null_create();
    xpc_release(v97);
    xpc_release(v98);
    v99 = xpc_string_create("High_Tput");
    if (!v99)
      v99 = xpc_null_create();
    xpc_dictionary_set_value(v95, "kKeyTracePropertyName", v99);
    v100 = xpc_null_create();
    xpc_release(v99);
    xpc_release(v100);
    memset(&__p, 0, sizeof(__p));
    std::to_string(&object, 1);
    __p = object;
    if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v101 = &__p;
    else
      v101 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v102 = xpc_string_create((const char *)v101);
    if (!v102)
      v102 = xpc_null_create();
    xpc_dictionary_set_value(v95, "kKeyTracePropertyValue", v102);
    v103 = xpc_null_create();
    xpc_release(v102);
    xpc_release(v103);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    xpc_array_append_value(*a2, v95);
  }
  else
  {
    v95 = v83;
  }
  if (capabilities::diag::supportsADPL(v93))
  {
    v104 = xpc_dictionary_create(0, 0, 0);
    if (v104 || (v104 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1A85902BC](v104) == v9)
      {
        xpc_retain(v104);
        v105 = v104;
      }
      else
      {
        v105 = xpc_null_create();
      }
    }
    else
    {
      v105 = xpc_null_create();
      v104 = 0;
    }
    xpc_release(v104);
    v106 = xpc_null_create();
    xpc_release(v95);
    xpc_release(v106);
    v107 = xpc_string_create("BasebandTrace");
    if (!v107)
      v107 = xpc_null_create();
    xpc_dictionary_set_value(v105, "kKeyTraceName", v107);
    v108 = xpc_null_create();
    xpc_release(v107);
    xpc_release(v108);
    v109 = xpc_string_create("Data_Logging");
    if (!v109)
      v109 = xpc_null_create();
    xpc_dictionary_set_value(v105, "kKeyTracePropertyName", v109);
    v110 = xpc_null_create();
    xpc_release(v109);
    xpc_release(v110);
    memset(&__p, 0, sizeof(__p));
    std::to_string(&object, 1);
    __p = object;
    if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v111 = &__p;
    else
      v111 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v112 = xpc_string_create((const char *)v111);
    if (!v112)
      v112 = xpc_null_create();
    xpc_dictionary_set_value(v105, "kKeyTracePropertyValue", v112);
    v113 = xpc_null_create();
    xpc_release(v112);
    xpc_release(v113);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    xpc_array_append_value(*a2, v105);
  }
  else
  {
    v105 = v95;
  }
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && (TelephonyUtilIsCarrierBuild() & 1) == 0)
  {
    v114 = xpc_dictionary_create(0, 0, 0);
    if (v114 || (v114 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1A85902BC](v114) == v9)
      {
        xpc_retain(v114);
        v115 = v114;
      }
      else
      {
        v115 = xpc_null_create();
      }
    }
    else
    {
      v115 = xpc_null_create();
      v114 = 0;
    }
    xpc_release(v114);
    v116 = xpc_null_create();
    xpc_release(v105);
    xpc_release(v116);
    v117 = xpc_string_create("SystemLogs");
    if (!v117)
      v117 = xpc_null_create();
    xpc_dictionary_set_value(v115, "kKeyTraceName", v117);
    v118 = xpc_null_create();
    xpc_release(v117);
    xpc_release(v118);
    v119 = xpc_string_create("Mode");
    if (!v119)
      v119 = xpc_null_create();
    xpc_dictionary_set_value(v115, "kKeyTracePropertyName", v119);
    v120 = xpc_null_create();
    xpc_release(v119);
    xpc_release(v120);
    memset(&__p, 0, sizeof(__p));
    std::to_string(&object, 1);
    __p = object;
    if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v121 = &__p;
    else
      v121 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v122 = xpc_string_create((const char *)v121);
    if (!v122)
      v122 = xpc_null_create();
    xpc_dictionary_set_value(v115, "kKeyTracePropertyValue", v122);
    v123 = xpc_null_create();
    xpc_release(v122);
    xpc_release(v123);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    xpc_array_append_value(*a2, v115);
    v124 = xpc_dictionary_create(0, 0, 0);
    if (v124 || (v124 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1A85902BC](v124) == v9)
      {
        xpc_retain(v124);
        v105 = v124;
      }
      else
      {
        v105 = xpc_null_create();
      }
    }
    else
    {
      v105 = xpc_null_create();
      v124 = 0;
    }
    xpc_release(v124);
    v125 = xpc_null_create();
    xpc_release(v115);
    xpc_release(v125);
    v126 = xpc_string_create("Compression");
    if (!v126)
      v126 = xpc_null_create();
    xpc_dictionary_set_value(v105, "kKeyTraceName", v126);
    v127 = xpc_null_create();
    xpc_release(v126);
    xpc_release(v127);
    v128 = xpc_string_create("Mode");
    if (!v128)
      v128 = xpc_null_create();
    xpc_dictionary_set_value(v105, "kKeyTracePropertyName", v128);
    v129 = xpc_null_create();
    xpc_release(v128);
    xpc_release(v129);
    memset(&__p, 0, sizeof(__p));
    std::to_string(&object, 2);
    __p = object;
    if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v130 = &__p;
    else
      v130 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v131 = xpc_string_create((const char *)v130);
    if (!v131)
      v131 = xpc_null_create();
    xpc_dictionary_set_value(v105, "kKeyTracePropertyValue", v131);
    v132 = xpc_null_create();
    xpc_release(v131);
    xpc_release(v132);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_228:
  xpc_release(xdict);
  xpc_release(v105);
}

void sub_1A354EE5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t object, xpc_object_t a16)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void logs::getDefaultTraceProperties(xpc_object_t *a1@<X8>)
{
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  capabilities::trace *v13;
  int v14;
  std::string *p_p;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  capabilities::trace *v25;
  int v26;
  std::string *v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  capabilities::trace *v37;
  int v38;
  std::string *v39;
  xpc_object_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  xpc_object_t v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  xpc_object_t v47;
  xpc_object_t v48;
  config::hw *v49;
  const char *v50;
  xpc_object_t v51;
  xpc_object_t v52;
  xpc_object_t v53;
  xpc_object_t v54;
  xpc_object_t v55;
  xpc_object_t v56;
  xpc_object_t v57;
  xpc_object_t v58;
  xpc_object_t v59;
  capabilities::radio *v60;
  config::hw *v61;
  const char *v62;
  xpc_object_t v63;
  xpc_object_t v64;
  xpc_object_t v65;
  xpc_object_t v66;
  xpc_object_t v67;
  xpc_object_t v68;
  xpc_object_t v69;
  xpc_object_t v70;
  xpc_object_t v71;
  capabilities::trace *v72;
  int v73;
  std::string *v74;
  xpc_object_t v75;
  xpc_object_t v76;
  xpc_object_t v77;
  xpc_object_t v78;
  xpc_object_t v79;
  xpc_object_t v80;
  xpc_object_t v81;
  xpc_object_t v82;
  xpc_object_t v83;
  xpc_object_t v84;
  xpc_object_t v85;
  xpc_object_t v86;
  xpc_object_t v87;
  xpc_object_t v88;
  xpc_object_t v89;
  xpc_object_t v90;
  xpc_object_t v91;
  xpc_object_t v92;
  int IsCarrierBuild;
  std::string *v94;
  xpc_object_t v95;
  xpc_object_t v96;
  xpc_object_t v97;
  xpc_object_t v98;
  xpc_object_t v99;
  xpc_object_t v100;
  xpc_object_t v101;
  xpc_object_t v102;
  uint64_t IsInternalBuild;
  int CompressionMode;
  std::string *v105;
  xpc_object_t v106;
  xpc_object_t v107;
  std::string __p;
  std::string v109;

  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v3 = xpc_array_create(0, 0);
  v4 = v3;
  if (v3)
  {
    *a1 = v3;
  }
  else
  {
    v4 = xpc_null_create();
    *a1 = v4;
    if (!v4)
    {
      v5 = xpc_null_create();
      v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A85902BC](v4) != MEMORY[0x1E0C812C8])
  {
    v5 = xpc_null_create();
LABEL_8:
    *a1 = v5;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
  v6 = xpc_dictionary_create(0, 0, 0);
  v7 = MEMORY[0x1E0C812F8];
  if (v6 || (v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A85902BC](v6) == v7)
    {
      xpc_retain(v6);
      v8 = v6;
    }
    else
    {
      v8 = xpc_null_create();
    }
  }
  else
  {
    v8 = xpc_null_create();
    v6 = 0;
  }
  xpc_release(v6);
  v9 = xpc_string_create("BasebandTrace");
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kKeyTraceName", v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = xpc_string_create((const char *)*MEMORY[0x1E0CFAF68]);
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kKeyTracePropertyName", v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  v14 = capabilities::trace::enabledByDefault(v13);
  std::to_string(&v109, v14);
  __p = v109;
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v16 = xpc_string_create((const char *)p_p);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kKeyTracePropertyValue", v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  xpc_array_append_value(*a1, v8);
  v18 = xpc_dictionary_create(0, 0, 0);
  if (v18 || (v18 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A85902BC](v18) == v7)
    {
      xpc_retain(v18);
      v19 = v18;
    }
    else
    {
      v19 = xpc_null_create();
    }
  }
  else
  {
    v19 = xpc_null_create();
    v18 = 0;
  }
  xpc_release(v18);
  v20 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v20);
  v21 = xpc_string_create("BasebandTrace");
  if (!v21)
    v21 = xpc_null_create();
  xpc_dictionary_set_value(v19, "kKeyTraceName", v21);
  v22 = xpc_null_create();
  xpc_release(v21);
  xpc_release(v22);
  v23 = xpc_string_create("High_Tput");
  if (!v23)
    v23 = xpc_null_create();
  xpc_dictionary_set_value(v19, "kKeyTracePropertyName", v23);
  v24 = xpc_null_create();
  xpc_release(v23);
  xpc_release(v24);
  v26 = capabilities::trace::supportsHighTPutByDefault(v25);
  memset(&__p, 0, sizeof(__p));
  std::to_string(&v109, v26);
  __p = v109;
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = &__p;
  else
    v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v28 = xpc_string_create((const char *)v27);
  if (!v28)
    v28 = xpc_null_create();
  xpc_dictionary_set_value(v19, "kKeyTracePropertyValue", v28);
  v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  xpc_array_append_value(*a1, v19);
  v30 = xpc_dictionary_create(0, 0, 0);
  if (v30 || (v30 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A85902BC](v30) == v7)
    {
      xpc_retain(v30);
      v31 = v30;
    }
    else
    {
      v31 = xpc_null_create();
    }
  }
  else
  {
    v31 = xpc_null_create();
    v30 = 0;
  }
  xpc_release(v30);
  v32 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v32);
  v33 = xpc_string_create("BasebandTrace");
  if (!v33)
    v33 = xpc_null_create();
  xpc_dictionary_set_value(v31, "kKeyTraceName", v33);
  v34 = xpc_null_create();
  xpc_release(v33);
  xpc_release(v34);
  v35 = xpc_string_create("Data_Logging");
  if (!v35)
    v35 = xpc_null_create();
  xpc_dictionary_set_value(v31, "kKeyTracePropertyName", v35);
  v36 = xpc_null_create();
  xpc_release(v35);
  xpc_release(v36);
  v38 = capabilities::trace::supportsDataLoggingByDefault(v37);
  memset(&__p, 0, sizeof(__p));
  std::to_string(&v109, v38);
  __p = v109;
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = &__p;
  else
    v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v40 = xpc_string_create((const char *)v39);
  if (!v40)
    v40 = xpc_null_create();
  xpc_dictionary_set_value(v31, "kKeyTracePropertyValue", v40);
  v41 = xpc_null_create();
  xpc_release(v40);
  xpc_release(v41);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  xpc_array_append_value(*a1, v31);
  v42 = xpc_dictionary_create(0, 0, 0);
  if (v42 || (v42 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A85902BC](v42) == v7)
    {
      xpc_retain(v42);
      v43 = v42;
    }
    else
    {
      v43 = xpc_null_create();
    }
  }
  else
  {
    v43 = xpc_null_create();
    v42 = 0;
  }
  xpc_release(v42);
  v44 = xpc_null_create();
  xpc_release(v31);
  xpc_release(v44);
  v45 = xpc_string_create("BasebandTrace");
  if (!v45)
    v45 = xpc_null_create();
  xpc_dictionary_set_value(v43, "kKeyTraceName", v45);
  v46 = xpc_null_create();
  xpc_release(v45);
  xpc_release(v46);
  v47 = xpc_string_create("File");
  if (!v47)
    v47 = xpc_null_create();
  xpc_dictionary_set_value(v43, "kKeyTracePropertyName", v47);
  v48 = xpc_null_create();
  xpc_release(v47);
  xpc_release(v48);
  if (config::hw::watch(v49))
    v50 = "Lite";
  else
    v50 = "Default";
  v51 = xpc_string_create(v50);
  if (!v51)
    v51 = xpc_null_create();
  xpc_dictionary_set_value(v43, "kKeyTracePropertyValue", v51);
  v52 = xpc_null_create();
  xpc_release(v51);
  xpc_release(v52);
  xpc_array_append_value(*a1, v43);
  v53 = xpc_dictionary_create(0, 0, 0);
  if (v53 || (v53 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A85902BC](v53) == v7)
    {
      xpc_retain(v53);
      v54 = v53;
    }
    else
    {
      v54 = xpc_null_create();
    }
  }
  else
  {
    v54 = xpc_null_create();
    v53 = 0;
  }
  xpc_release(v53);
  v55 = xpc_null_create();
  xpc_release(v43);
  xpc_release(v55);
  v56 = xpc_string_create("BasebandTrace");
  if (!v56)
    v56 = xpc_null_create();
  xpc_dictionary_set_value(v54, "kKeyTraceName", v56);
  v57 = xpc_null_create();
  xpc_release(v56);
  xpc_release(v57);
  v58 = xpc_string_create("File_Secondary");
  if (!v58)
    v58 = xpc_null_create();
  xpc_dictionary_set_value(v54, "kKeyTracePropertyName", v58);
  v59 = xpc_null_create();
  xpc_release(v58);
  xpc_release(v59);
  v61 = (config::hw *)capabilities::radio::ice(v60);
  if ((_DWORD)v61)
  {
    if (config::hw::watch(v61))
      v62 = "Lite";
    else
      v62 = "Default";
  }
  else
  {
    v62 = "None";
  }
  v63 = xpc_string_create(v62);
  if (!v63)
    v63 = xpc_null_create();
  xpc_dictionary_set_value(v54, "kKeyTracePropertyValue", v63);
  v64 = xpc_null_create();
  xpc_release(v63);
  xpc_release(v64);
  xpc_array_append_value(*a1, v54);
  v65 = xpc_dictionary_create(0, 0, 0);
  if (v65 || (v65 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A85902BC](v65) == v7)
    {
      xpc_retain(v65);
      v66 = v65;
    }
    else
    {
      v66 = xpc_null_create();
    }
  }
  else
  {
    v66 = xpc_null_create();
    v65 = 0;
  }
  xpc_release(v65);
  v67 = xpc_null_create();
  xpc_release(v54);
  xpc_release(v67);
  v68 = xpc_string_create("BasebandTrace");
  if (!v68)
    v68 = xpc_null_create();
  xpc_dictionary_set_value(v66, "kKeyTraceName", v68);
  v69 = xpc_null_create();
  xpc_release(v68);
  xpc_release(v69);
  v70 = xpc_string_create("History");
  if (!v70)
    v70 = xpc_null_create();
  xpc_dictionary_set_value(v66, "kKeyTracePropertyName", v70);
  v71 = xpc_null_create();
  xpc_release(v70);
  xpc_release(v71);
  v73 = capabilities::trace::defaultHistorySizeMB(v72);
  std::to_string(&v109, v73);
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v74 = &v109;
  else
    v74 = (std::string *)v109.__r_.__value_.__r.__words[0];
  v75 = xpc_string_create((const char *)v74);
  if (!v75)
    v75 = xpc_null_create();
  xpc_dictionary_set_value(v66, "kKeyTracePropertyValue", v75);
  v76 = xpc_null_create();
  xpc_release(v75);
  xpc_release(v76);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  xpc_array_append_value(*a1, v66);
  v77 = xpc_dictionary_create(0, 0, 0);
  if (v77 || (v77 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A85902BC](v77) == v7)
    {
      xpc_retain(v77);
      v78 = v77;
    }
    else
    {
      v78 = xpc_null_create();
    }
  }
  else
  {
    v78 = xpc_null_create();
    v77 = 0;
  }
  xpc_release(v77);
  v79 = xpc_null_create();
  xpc_release(v66);
  xpc_release(v79);
  v80 = xpc_string_create("BasebandTrace");
  if (!v80)
    v80 = xpc_null_create();
  xpc_dictionary_set_value(v78, "kKeyTraceName", v80);
  v81 = xpc_null_create();
  xpc_release(v80);
  xpc_release(v81);
  v82 = xpc_string_create(diag::config::kEnabledDuringSleepKey[0]);
  if (!v82)
    v82 = xpc_null_create();
  xpc_dictionary_set_value(v78, "kKeyTracePropertyName", v82);
  v83 = xpc_null_create();
  xpc_release(v82);
  xpc_release(v83);
  v84 = xpc_string_create("Off");
  if (!v84)
    v84 = xpc_null_create();
  xpc_dictionary_set_value(v78, "kKeyTracePropertyValue", v84);
  v85 = xpc_null_create();
  xpc_release(v84);
  xpc_release(v85);
  xpc_array_append_value(*a1, v78);
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && (TelephonyUtilIsCarrierBuild() & 1) == 0)
  {
    v86 = xpc_dictionary_create(0, 0, 0);
    if (v86 || (v86 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1A85902BC](v86) == v7)
      {
        xpc_retain(v86);
        v87 = v86;
      }
      else
      {
        v87 = xpc_null_create();
      }
    }
    else
    {
      v87 = xpc_null_create();
      v86 = 0;
    }
    xpc_release(v86);
    v88 = xpc_null_create();
    xpc_release(v78);
    xpc_release(v88);
    v89 = xpc_string_create("SystemLogs");
    if (!v89)
      v89 = xpc_null_create();
    xpc_dictionary_set_value(v87, "kKeyTraceName", v89);
    v90 = xpc_null_create();
    xpc_release(v89);
    xpc_release(v90);
    v91 = xpc_string_create("Mode");
    if (!v91)
      v91 = xpc_null_create();
    xpc_dictionary_set_value(v87, "kKeyTracePropertyName", v91);
    v92 = xpc_null_create();
    xpc_release(v91);
    xpc_release(v92);
    if ((TelephonyUtilIsInternalBuild() & 1) != 0)
      IsCarrierBuild = 1;
    else
      IsCarrierBuild = TelephonyUtilIsCarrierBuild();
    memset(&__p, 0, sizeof(__p));
    std::to_string(&v109, IsCarrierBuild);
    __p = v109;
    if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v94 = &__p;
    else
      v94 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v95 = xpc_string_create((const char *)v94);
    if (!v95)
      v95 = xpc_null_create();
    xpc_dictionary_set_value(v87, "kKeyTracePropertyValue", v95);
    v96 = xpc_null_create();
    xpc_release(v95);
    xpc_release(v96);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    xpc_array_append_value(*a1, v87);
    v97 = xpc_dictionary_create(0, 0, 0);
    if (v97 || (v97 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1A85902BC](v97) == v7)
      {
        xpc_retain(v97);
        v78 = v97;
      }
      else
      {
        v78 = xpc_null_create();
      }
    }
    else
    {
      v78 = xpc_null_create();
      v97 = 0;
    }
    xpc_release(v97);
    v98 = xpc_null_create();
    xpc_release(v87);
    xpc_release(v98);
    v99 = xpc_string_create("Compression");
    if (!v99)
      v99 = xpc_null_create();
    xpc_dictionary_set_value(v78, "kKeyTraceName", v99);
    v100 = xpc_null_create();
    xpc_release(v99);
    xpc_release(v100);
    v101 = xpc_string_create("Mode");
    if (!v101)
      v101 = xpc_null_create();
    xpc_dictionary_set_value(v78, "kKeyTracePropertyName", v101);
    v102 = xpc_null_create();
    xpc_release(v101);
    xpc_release(v102);
    IsInternalBuild = TelephonyUtilIsInternalBuild();
    if ((IsInternalBuild & 1) != 0 || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
      CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
    else
      CompressionMode = 2;
    memset(&__p, 0, sizeof(__p));
    std::to_string(&v109, CompressionMode);
    __p = v109;
    if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v105 = &__p;
    else
      v105 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v106 = xpc_string_create((const char *)v105);
    if (!v106)
      v106 = xpc_null_create();
    xpc_dictionary_set_value(v78, "kKeyTracePropertyValue", v106);
    v107 = xpc_null_create();
    xpc_release(v106);
    xpc_release(v107);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    xpc_array_append_value(*a1, v78);
  }
  xpc_release(v78);
}

void sub_1A35503E0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1A3550314);
}

void sub_1A35503EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  xpc_object_t *v14;
  void *v15;

  if (a14 < 0)
    operator delete(__p);
  xpc_release(v15);
  xpc::array::~array(v14);
  _Unwind_Resume(a1);
}

BOOL prop::get(char *a1, char *a2, uint64_t a3)
{
  const char *v6;
  NSObject *v7;
  _BOOL8 v8;
  _BOOL8 v10;
  char *v11;
  char *v12;
  _BYTE __p[12];
  __int16 v14;
  char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a1[23] < 0)
  {
    v6 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, "BasebandTrace")
      && strcasecmp(v6, "BBTrace")
      && strcasecmp(v6, abm::trace::kICETrace[0])
      && strcasecmp(v6, abm::trace::kDIAG[0]))
    {
      if (strcasecmp(v6, "CoreDump"))
      {
        if (strcasecmp(v6, "IPC") && strcasecmp(v6, "KernelPCI"))
        {
          if (strcasecmp(v6, "BasebandIPC"))
          {
            if (strcasecmp(v6, "Compression"))
            {
              if (strcasecmp(v6, "TTR"))
              {
                if (strcasecmp(v6, "LogFilter"))
                {
                  if (strcasecmp(v6, "SystemLogs"))
                  {
                    if (strcasecmp(v6, "Profile"))
                    {
                      if (strcasecmp(v6, "Tailspin"))
                        goto LABEL_16;
                      return prop::tailspin::get(a2, a3);
                    }
                    return prop::profile::get(a2, a3);
                  }
                  return prop::systemlogs::get(a2, a3);
                }
                return prop::logfilter::get(a2, a3);
              }
              return prop::ttr::get(a2, a3);
            }
            return prop::compression::get(a2, a3);
          }
          return prop::bbipc::get(a2, a3);
        }
        goto LABEL_38;
      }
LABEL_39:
      HIBYTE(v16) = 8;
      strcpy(__p, "CoreDump");
      v10 = prop::get_from_file(__p, a2, a3);
LABEL_35:
      v8 = v10;
      if (SHIBYTE(v16) < 0)
        operator delete(*(void **)__p);
      return v8;
    }
LABEL_34:
    HIBYTE(v16) = 7;
    strcpy(__p, "BBTrace");
    v10 = prop::get_from_file(__p, a2, a3);
    goto LABEL_35;
  }
  if (!strcasecmp(a1, "BasebandTrace")
    || !strcasecmp(a1, "BBTrace")
    || !strcasecmp(a1, abm::trace::kICETrace[0])
    || !strcasecmp(a1, abm::trace::kDIAG[0]))
  {
    goto LABEL_34;
  }
  if (!strcasecmp(a1, "CoreDump"))
    goto LABEL_39;
  if (!strcasecmp(a1, "IPC") || !strcasecmp(a1, "KernelPCI"))
  {
LABEL_38:
    HIBYTE(v16) = 3;
    *(_WORD *)__p = *(_WORD *)"IPC";
    *(_WORD *)&__p[2] = str_41[2];
    v10 = prop::get_from_file(__p, a2, a3);
    goto LABEL_35;
  }
  if (!strcasecmp(a1, "BasebandIPC"))
    return prop::bbipc::get(a2, a3);
  if (!strcasecmp(a1, "Compression"))
    return prop::compression::get(a2, a3);
  if (!strcasecmp(a1, "TTR"))
    return prop::ttr::get(a2, a3);
  if (!strcasecmp(a1, "LogFilter"))
    return prop::logfilter::get(a2, a3);
  if (!strcasecmp(a1, "SystemLogs"))
    return prop::systemlogs::get(a2, a3);
  if (!strcasecmp(a1, "Profile"))
    return prop::profile::get(a2, a3);
  v6 = a1;
  if (!strcasecmp(a1, "Tailspin"))
    return prop::tailspin::get(a2, a3);
LABEL_16:
  if (strcasecmp(v6, "Settings"))
  {
    v7 = GetOsLogContext()[1];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      if (a1[23] >= 0)
        v11 = a1;
      else
        v11 = *(char **)a1;
      if (a2[23] >= 0)
        v12 = a2;
      else
        v12 = *(char **)a2;
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = "prop";
      v14 = 2080;
      v15 = v11;
      v16 = 2080;
      v17 = v12;
      _os_log_error_impl(&dword_1A343C000, v7, OS_LOG_TYPE_ERROR, "%s: get: Invalid domain; domain='%s' key='%s'",
        __p,
        0x20u);
    }
    return 0;
  }
  return prop::tracesettings::get(a2, a3);
}

void sub_1A3550DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::bbtrace::get(char *a1, uint64_t a2)
{
  _BOOL8 result;
  _BOOL8 v3;
  void *__p[2];
  char v5;

  v5 = 7;
  strcpy((char *)__p, "BBTrace");
  result = prop::get_from_file((char *)__p, a1, a2);
  v3 = result;
  if (v5 < 0)
  {
    operator delete(__p[0]);
    return v3;
  }
  return result;
}

void sub_1A3550E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::coredump::get(char *a1, uint64_t a2)
{
  _BOOL8 result;
  _BOOL8 v3;
  void *__p[2];
  char v5;

  v5 = 8;
  strcpy((char *)__p, "CoreDump");
  result = prop::get_from_file((char *)__p, a1, a2);
  v3 = result;
  if (v5 < 0)
  {
    operator delete(__p[0]);
    return v3;
  }
  return result;
}

void sub_1A3550EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::ipc::get(char *a1, uint64_t a2)
{
  _BOOL8 result;
  _BOOL8 v3;
  void *__p;
  char v5;

  v5 = 3;
  LOWORD(__p) = *(_WORD *)"IPC";
  WORD1(__p) = str_41[2];
  result = prop::get_from_file((char *)&__p, a1, a2);
  v3 = result;
  if (v5 < 0)
  {
    operator delete(__p);
    return v3;
  }
  return result;
}

void sub_1A3550F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::bbipc::get(char *a1, uint64_t a2)
{
  _BOOL8 result;
  _BOOL8 v3;
  void *__p[2];
  char v5;

  v5 = 11;
  strcpy((char *)__p, "BasebandIPC");
  result = prop::get_from_file((char *)__p, a1, a2);
  v3 = result;
  if (v5 < 0)
  {
    operator delete(__p[0]);
    return v3;
  }
  return result;
}

void sub_1A3551024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::compression::get(char *a1, uint64_t a2)
{
  _BOOL8 result;
  _BOOL8 v3;
  void *__p[2];
  char v5;

  v5 = 11;
  strcpy((char *)__p, "Compression");
  result = prop::get_from_file((char *)__p, a1, a2);
  v3 = result;
  if (v5 < 0)
  {
    operator delete(__p[0]);
    return v3;
  }
  return result;
}

void sub_1A35510C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::ttr::get(char *a1, uint64_t a2)
{
  _BOOL8 result;
  _BOOL8 v3;
  void *__p;
  char v5;

  v5 = 3;
  LOWORD(__p) = *(_WORD *)"TTR";
  WORD1(__p) = str_45[2];
  result = prop::get_from_file((char *)&__p, a1, a2);
  v3 = result;
  if (v5 < 0)
  {
    operator delete(__p);
    return v3;
  }
  return result;
}

void sub_1A355115C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::logfilter::get(char *a1, uint64_t a2)
{
  _BOOL8 result;
  _BOOL8 v3;
  void *__p[2];
  char v5;

  v5 = 9;
  strcpy((char *)__p, "LogFilter");
  result = prop::get_from_file((char *)__p, a1, a2);
  v3 = result;
  if (v5 < 0)
  {
    operator delete(__p[0]);
    return v3;
  }
  return result;
}

void sub_1A35511F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::systemlogs::get(char *a1, uint64_t a2)
{
  _BOOL8 result;
  _BOOL8 v3;
  void *__p[2];
  char v5;

  v5 = 10;
  strcpy((char *)__p, "SystemLogs");
  result = prop::get_from_file((char *)__p, a1, a2);
  v3 = result;
  if (v5 < 0)
  {
    operator delete(__p[0]);
    return v3;
  }
  return result;
}

void sub_1A3551294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::profile::get(char *a1, uint64_t a2)
{
  _BOOL8 result;
  _BOOL8 v3;
  void *__p[2];
  char v5;

  v5 = 7;
  strcpy((char *)__p, "Profile");
  result = prop::get_from_file((char *)__p, a1, a2);
  v3 = result;
  if (v5 < 0)
  {
    operator delete(__p[0]);
    return v3;
  }
  return result;
}

void sub_1A3551330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::tailspin::get(char *a1, uint64_t a2)
{
  _BOOL8 result;
  _BOOL8 v3;
  void *__p[2];
  char v5;

  v5 = 8;
  strcpy((char *)__p, "Tailspin");
  result = prop::get_from_file((char *)__p, a1, a2);
  v3 = result;
  if (v5 < 0)
  {
    operator delete(__p[0]);
    return v3;
  }
  return result;
}

void sub_1A35513C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::tracesettings::get(char *a1, uint64_t a2)
{
  _BOOL8 result;
  _BOOL8 v3;
  void *__p[2];
  char v5;

  v5 = 8;
  strcpy((char *)__p, "Settings");
  result = prop::get_from_file((char *)__p, a1, a2);
  v3 = result;
  if (v5 < 0)
  {
    operator delete(__p[0]);
    return v3;
  }
  return result;
}

void sub_1A3551460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t prop::set(char *a1, char *a2, char *a3)
{
  const char *v6;
  NSObject *v7;
  char *v9;
  char *v10;
  char *v11;
  int v12;
  const char *v13;
  __int16 v14;
  char *v15;
  __int16 v16;
  char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, "BasebandTrace")
      && strcasecmp(a1, "BBTrace")
      && strcasecmp(a1, abm::trace::kICETrace[0])
      && strcasecmp(a1, abm::trace::kDIAG[0]))
    {
      if (strcasecmp(a1, "CoreDump"))
      {
        if (strcasecmp(a1, "IPC") && strcasecmp(a1, "KernelPCI"))
        {
          if (strcasecmp(a1, "BasebandIPC"))
          {
            if (strcasecmp(a1, "Compression"))
            {
              if (strcasecmp(a1, "TTR"))
              {
                if (strcasecmp(a1, "LogFilter"))
                {
                  if (strcasecmp(a1, "SystemLogs"))
                  {
                    if (strcasecmp(a1, "Profile"))
                    {
                      v6 = a1;
                      if (strcasecmp(a1, "Tailspin"))
                        goto LABEL_16;
                      return prop::tailspin::set((uint64_t)a2, a3);
                    }
                    return prop::profile::set(a2, a3);
                  }
                  return prop::systemlogs::set(a2, a3);
                }
                return prop::logfilter::set(a2, a3);
              }
              return prop::ttr::set(a2, a3);
            }
            return prop::compression::set(a2, a3);
          }
          return prop::bbipc::set(a2, a3);
        }
        return prop::ipc::set(a2, a3);
      }
      return prop::coredump::set((uint64_t)a2, a3);
    }
    return prop::bbtrace::set(a2, a3);
  }
  v6 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, "BasebandTrace")
    || !strcasecmp(v6, "BBTrace")
    || !strcasecmp(v6, abm::trace::kICETrace[0])
    || !strcasecmp(v6, abm::trace::kDIAG[0]))
  {
    return prop::bbtrace::set(a2, a3);
  }
  if (!strcasecmp(v6, "CoreDump"))
    return prop::coredump::set((uint64_t)a2, a3);
  if (!strcasecmp(v6, "IPC") || !strcasecmp(v6, "KernelPCI"))
    return prop::ipc::set(a2, a3);
  if (!strcasecmp(v6, "BasebandIPC"))
    return prop::bbipc::set(a2, a3);
  if (!strcasecmp(v6, "Compression"))
    return prop::compression::set(a2, a3);
  if (!strcasecmp(v6, "TTR"))
    return prop::ttr::set(a2, a3);
  if (!strcasecmp(v6, "LogFilter"))
    return prop::logfilter::set(a2, a3);
  if (!strcasecmp(v6, "SystemLogs"))
    return prop::systemlogs::set(a2, a3);
  if (!strcasecmp(v6, "Profile"))
    return prop::profile::set(a2, a3);
  if (!strcasecmp(v6, "Tailspin"))
    return prop::tailspin::set((uint64_t)a2, a3);
LABEL_16:
  if (!strcasecmp(v6, "Settings"))
    return prop::tracesettings::set(a2, (uint64_t)a3);
  v7 = GetOsLogContext()[1];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] >= 0)
      v9 = a1;
    else
      v9 = *(char **)a1;
    if (a2[23] >= 0)
      v10 = a2;
    else
      v10 = *(char **)a2;
    if (a3[23] >= 0)
      v11 = a3;
    else
      v11 = *(char **)a3;
    v12 = 136315906;
    v13 = "prop";
    v14 = 2080;
    v15 = v9;
    v16 = 2080;
    v17 = v10;
    v18 = 2080;
    v19 = v11;
    _os_log_error_impl(&dword_1A343C000, v7, OS_LOG_TYPE_ERROR, "%s: set: Invalid domain; domain='%s' key='%s' value='%s'",
      (uint8_t *)&v12,
      0x2Au);
  }
  return 0;
}

uint64_t prop::bbtrace::set(char *a1, const char *a2)
{
  const char *v2;
  int v4;
  const char *v5;
  capabilities::radio *v6;
  const char *v7;
  const char *v8;
  capabilities::radio *v9;
  capabilities::trace *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  capabilities::radio *v14;
  int v15;
  capabilities::radio *v16;
  char v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  const char *v24;
  capabilities::radio *v25;
  const char *v26;
  capabilities::radio *v27;
  const char *v28;
  capabilities::radio *v29;
  const char *v30;
  capabilities::radio *v31;
  const char *v32;
  capabilities::radio *v33;
  const char *v34;
  capabilities::radio *v35;
  const char *v36;
  capabilities::radio *v37;
  const char *v38;
  capabilities::radio *v39;
  const char *v40;
  capabilities::radio *v41;
  int v42;
  int v43;
  const char *v44;
  const char *v45;
  capabilities::radio *v46;
  int v47;
  int v48;
  const char *v49;
  capabilities::radio *v50;
  const char *v51;
  NSObject *v52;
  char *v53;
  std::string *v54;
  const char *v55;
  NSObject *v56;
  uint32_t v57;
  capabilities::radio *v58;
  unsigned int v59;
  capabilities::abs *v60;
  capabilities::radio *shouldUseMinBasebandTransportIOReadSize;
  unsigned int v62;
  capabilities::abs *v63;
  unsigned int v64;
  int v65;
  NSObject *v66;
  std::string v67;
  int __val;
  int data;
  std::string v70;
  _BYTE __p[12];
  __int16 v72;
  const char *v73;
  __int16 v74;
  char *v75;
  __int16 v76;
  std::string *v77;
  uint64_t v78;

  v2 = a2;
  v78 = *MEMORY[0x1E0C80C00];
  memset(&v70, 170, sizeof(v70));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(const char **)v2;
    if (strcmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v70 = *(std::string *)a2;
    if (strcmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::bbtrace::get(a1, (std::string::size_type *)&v70))
    goto LABEL_213;
LABEL_8:
  v4 = a1[23];
  if ((v4 & 0x80000000) == 0)
  {
    if (strcasecmp(a1, "Enabled"))
    {
      if (strcasecmp(a1, "High_Tput"))
      {
        if (strcasecmp(a1, "Data_Logging"))
        {
          if (strcasecmp(a1, "Mode"))
          {
            if (strcasecmp(a1, "BootSessionUUID"))
            {
              if (strcasecmp(a1, "TraceOwnership"))
              {
                v5 = a1;
                if (strcasecmp(a1, "History"))
                  goto LABEL_16;
                goto LABEL_31;
              }
LABEL_55:
              *(_DWORD *)__p = -1431655766;
              if (!util::convert<int>(&v70, __p, 0))
                goto LABEL_213;
              v19 = *(_DWORD *)__p;
              std::string::basic_string[abi:ne180100]<0>(__p, "BBTrace");
              LODWORD(v67.__r_.__value_.__l.__data_) = v19;
              v20 = prop::file::set<unsigned int>((const void **)__p, (uint64_t)a1, (unsigned int *)&v67);
              goto LABEL_57;
            }
            goto LABEL_50;
          }
          goto LABEL_44;
        }
        goto LABEL_42;
      }
      goto LABEL_40;
    }
LABEL_38:
    v67.__r_.__value_.__s.__data_[0] = -86;
    if (!util::convert<BOOL>(&v70, (BOOL *)&v67, 0))
      goto LABEL_213;
LABEL_43:
    HIBYTE(v74) = 7;
    strcpy(__p, "BBTrace");
    v13 = prop::file::set<BOOL>((const void **)__p, (uint64_t)a1, (unsigned __int8 *)&v67);
    goto LABEL_63;
  }
  v5 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, "Enabled"))
    goto LABEL_38;
  if (!strcasecmp(v5, "High_Tput"))
  {
LABEL_40:
    v67.__r_.__value_.__s.__data_[0] = -86;
    if (!util::convert<BOOL>(&v70, (BOOL *)&v67, 0))
      goto LABEL_213;
    goto LABEL_43;
  }
  if (!strcasecmp(v5, "Data_Logging"))
  {
LABEL_42:
    v67.__r_.__value_.__s.__data_[0] = -86;
    if (!util::convert<BOOL>(&v70, (BOOL *)&v67, 0))
      goto LABEL_213;
    goto LABEL_43;
  }
  if (!strcasecmp(v5, "Mode"))
  {
LABEL_44:
    LODWORD(v67.__r_.__value_.__l.__data_) = -1431655766;
    v14 = (capabilities::radio *)util::convert<int>(&v70, &v67, 0);
    v15 = (int)v14;
    v16 = (capabilities::radio *)capabilities::radio::maverick(v14);
    if ((_DWORD)v16)
    {
      if (LODWORD(v67.__r_.__value_.__l.__data_) < 5)
        v17 = v15;
      else
        v17 = 0;
      if ((v17 & 1) == 0)
        goto LABEL_213;
    }
    else
    {
      v18 = capabilities::radio::ice(v16);
      if ((v18 & v15) == 1)
      {
        v11 = 0;
        if (LODWORD(v67.__r_.__value_.__l.__data_) > 6 || ((1 << v67.__r_.__value_.__s.__data_[0]) & 0x45) == 0)
          goto LABEL_64;
      }
      else if ((v15 & ~v18) != 1)
      {
        goto LABEL_213;
      }
    }
    HIBYTE(v74) = 7;
    strcpy(__p, "BBTrace");
    v13 = prop::file::set<int>((const void **)__p, (uint64_t)a1, (int *)&v67);
LABEL_63:
    v11 = v13;
    goto LABEL_64;
  }
  if (!strcasecmp(v5, "BootSessionUUID"))
  {
LABEL_50:
    HIBYTE(v74) = 7;
    strcpy(__p, "BBTrace");
    v13 = prop::file::set<std::string>((const void **)__p, (uint64_t)a1, (uint64_t)&v70);
    goto LABEL_63;
  }
  if (!strcasecmp(v5, "TraceOwnership"))
    goto LABEL_55;
  if (!strcasecmp(v5, "History"))
  {
LABEL_31:
    LODWORD(v67.__r_.__value_.__l.__data_) = -1431655766;
    v10 = (capabilities::trace *)util::convert<int>(&v70, &v67, 0);
    v11 = (uint64_t)v10;
    if (SLODWORD(v67.__r_.__value_.__l.__data_) < 0)
      v12 = (int)v10;
    else
      v12 = 0;
    if (v12 == 1)
      LODWORD(v67.__r_.__value_.__l.__data_) = capabilities::trace::defaultHistorySizeMB(v10);
    if ((_DWORD)v11)
    {
LABEL_156:
      std::string::basic_string[abi:ne180100]<0>(__p, "BBTrace");
      v20 = prop::file::set<int>((const void **)__p, (uint64_t)a1, (int *)&v67);
      goto LABEL_57;
    }
LABEL_64:
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v11;
LABEL_214:
    operator delete(v70.__r_.__value_.__l.__data_);
    return v11;
  }
LABEL_16:
  v6 = (capabilities::radio *)strcasecmp(v5, diag::config::kEnabledDuringSleepKey[0]);
  if (!(_DWORD)v6)
  {
    v22 = capabilities::radio::maverick(v6);
    if ((v22 & 1) != 0 || (capabilities::radio::ice((capabilities::radio *)v22) & 1) != 0)
    {
      *(_DWORD *)__p = -1431655766;
      if ((util::convert<int>(&v70, __p, 0) & 1) == 0)
        goto LABEL_213;
      v23 = *(_DWORD *)__p;
      if (*(_DWORD *)__p > 2u)
        goto LABEL_213;
      std::string::basic_string[abi:ne180100]<0>(__p, "BBTrace");
      LODWORD(v67.__r_.__value_.__l.__data_) = v23;
      v20 = prop::file::set<unsigned int>((const void **)__p, (uint64_t)a1, (unsigned int *)&v67);
LABEL_57:
      v11 = v20;
      goto LABEL_58;
    }
    LOBYTE(v4) = a1[23];
  }
  v7 = *(const char **)a1;
  if ((v4 & 0x80u) == 0)
    v8 = a1;
  else
    v8 = *(const char **)a1;
  v9 = (capabilities::radio *)strcasecmp(v8, diag::config::kBufferingOnAPAwake[0]);
  if (!(_DWORD)v9)
  {
    if ((capabilities::radio::maverick(v9) & 1) != 0)
    {
      v67.__r_.__value_.__s.__data_[0] = -86;
      if (util::convert<BOOL>(&v70, (BOOL *)&v67, 0))
        goto LABEL_211;
      goto LABEL_213;
    }
    LOBYTE(v4) = a1[23];
    v7 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0)
    v24 = a1;
  else
    v24 = v7;
  v25 = (capabilities::radio *)strcasecmp(v24, diag::config::kStallDetectionKey[0]);
  if (!(_DWORD)v25)
  {
    if ((capabilities::radio::maverick(v25) & 1) != 0)
    {
      v67.__r_.__value_.__s.__data_[0] = -86;
      if (util::convert<BOOL>(&v70, (BOOL *)&v67, 0))
        goto LABEL_211;
      goto LABEL_213;
    }
    LOBYTE(v4) = a1[23];
    v7 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0)
    v26 = a1;
  else
    v26 = v7;
  v27 = (capabilities::radio *)strcasecmp(v26, diag::config::kStallDetectionRetriesKey[0]);
  if (!(_DWORD)v27)
  {
    if ((capabilities::radio::maverick(v27) & 1) != 0)
    {
      LODWORD(v67.__r_.__value_.__l.__data_) = -1431655766;
      if (!util::convert<unsigned int>(&v70, &v67, 0))
        goto LABEL_213;
      std::string::basic_string[abi:ne180100]<0>(__p, "BBTrace");
      v20 = prop::file::set<unsigned int>((const void **)__p, (uint64_t)a1, (unsigned int *)&v67);
      goto LABEL_57;
    }
    LOBYTE(v4) = a1[23];
    v7 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0)
    v28 = a1;
  else
    v28 = v7;
  v29 = (capabilities::radio *)strcasecmp(v28, diag::config::kStallDetectionRecoveryKey[0]);
  if (!(_DWORD)v29)
  {
    if ((capabilities::radio::maverick(v29) & 1) != 0)
    {
      LODWORD(v67.__r_.__value_.__l.__data_) = -1431655766;
      if (!diag::config::asEnum((uint64_t)&v70, &v67))
        goto LABEL_213;
      std::string::basic_string[abi:ne180100]<0>(__p, "BBTrace");
      data = (int)v67.__r_.__value_.__l.__data_;
      v20 = prop::file::set<unsigned int>((const void **)__p, (uint64_t)a1, (unsigned int *)&data);
      goto LABEL_57;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    v30 = a1;
    if (strcasecmp(a1, diag::config::kKeepScratchLogsKey[0]))
      goto LABEL_99;
LABEL_103:
    v67.__r_.__value_.__s.__data_[0] = -86;
    if (util::convert<BOOL>(&v70, (BOOL *)&v67, 0))
      goto LABEL_211;
    goto LABEL_213;
  }
  v30 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, diag::config::kKeepScratchLogsKey[0]))
    goto LABEL_103;
LABEL_99:
  v31 = (capabilities::radio *)strcasecmp(v30, "File");
  if (!(_DWORD)v31)
  {
    if ((capabilities::radio::maverick(v31) & 1) != 0)
    {
LABEL_187:
      std::string::basic_string[abi:ne180100]<0>(__p, "BBTrace");
      v20 = prop::file::set<std::string>((const void **)__p, (uint64_t)a1, (uint64_t)&v70);
      goto LABEL_57;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) != 0)
  {
    v32 = *(const char **)a1;
    if (!strcasecmp(*(const char **)a1, "File_Secondary"))
      goto LABEL_187;
  }
  else
  {
    v32 = a1;
    if (!strcasecmp(a1, "File_Secondary"))
      goto LABEL_187;
  }
  v33 = (capabilities::radio *)strcasecmp(v32, diag::config::kExtraDMCFileKey[0]);
  if (!(_DWORD)v33)
  {
    if ((capabilities::radio::maverick(v33) & 1) != 0)
      goto LABEL_187;
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80u) == 0)
    v34 = a1;
  else
    v34 = *(const char **)a1;
  v35 = (capabilities::radio *)strcasecmp(v34, "File_Sleep");
  if (!(_DWORD)v35)
  {
    if ((capabilities::radio::maverick(v35) & 1) != 0)
      goto LABEL_187;
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) != 0)
  {
    v36 = *(const char **)a1;
    if (!strcasecmp(*(const char **)a1, "MaxMemoryFileCount"))
      goto LABEL_187;
  }
  else
  {
    v36 = a1;
    if (!strcasecmp(a1, "MaxMemoryFileCount"))
      goto LABEL_187;
  }
  v37 = (capabilities::radio *)strcasecmp(v36, "File");
  if (!(_DWORD)v37)
  {
    if ((capabilities::radio::ice(v37) & 1) != 0)
      goto LABEL_187;
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80u) == 0)
    v38 = a1;
  else
    v38 = *(const char **)a1;
  v39 = (capabilities::radio *)strcasecmp(v38, "File_Sleep");
  if (!(_DWORD)v39)
  {
    if ((capabilities::radio::ice(v39) & 1) != 0)
      goto LABEL_187;
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    v40 = a1;
    if (strcasecmp(a1, "BackgroundMode"))
      goto LABEL_136;
LABEL_144:
    v67.__r_.__value_.__s.__data_[0] = -86;
    if (util::convert<BOOL>(&v70, (BOOL *)&v67, 0))
      goto LABEL_211;
    goto LABEL_213;
  }
  v40 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, "BackgroundMode"))
    goto LABEL_144;
LABEL_136:
  v41 = (capabilities::radio *)strcasecmp(v40, "High_Watermark");
  if (!(_DWORD)v41)
  {
    if ((capabilities::radio::ice(v41) & 1) != 0)
    {
      LODWORD(v67.__r_.__value_.__l.__data_) = -1431655766;
      v42 = util::convert<int>(&v70, &v67, 0);
      if (LODWORD(v67.__r_.__value_.__l.__data_) < 0x65)
        v43 = v42;
      else
        v43 = 0;
      if (v43 != 1)
        goto LABEL_213;
      goto LABEL_156;
    }
    LOBYTE(v4) = a1[23];
  }
  v44 = *(const char **)a1;
  if ((v4 & 0x80u) == 0)
    v45 = a1;
  else
    v45 = *(const char **)a1;
  v46 = (capabilities::radio *)strcasecmp(v45, "Low_Watermark");
  if (!(_DWORD)v46)
  {
    if ((capabilities::radio::ice(v46) & 1) != 0)
    {
      LODWORD(v67.__r_.__value_.__l.__data_) = -1431655766;
      v47 = util::convert<int>(&v70, &v67, 0);
      if (LODWORD(v67.__r_.__value_.__l.__data_) < 0x65)
        v48 = v47;
      else
        v48 = 0;
      if (v48 != 1)
        goto LABEL_213;
      goto LABEL_156;
    }
    LOBYTE(v4) = a1[23];
    v44 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0)
    v49 = a1;
  else
    v49 = v44;
  v50 = (capabilities::radio *)strcasecmp(v49, "ETBFile");
  if (!(_DWORD)v50)
  {
    if ((capabilities::radio::ice(v50) & 1) != 0)
      goto LABEL_187;
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    if (strcasecmp(a1, "CellularLoggingAllowed"))
    {
      if (!strcasecmp(a1, "CarrierName1") || !strcasecmp(a1, "CarrierName2"))
        goto LABEL_187;
      if (strcasecmp(a1, "FileSize"))
      {
        if (!strcasecmp(a1, "SizeIO"))
          goto LABEL_187;
        v51 = a1;
        if (!strcasecmp(a1, "NumberOfReadIO"))
          goto LABEL_187;
        goto LABEL_172;
      }
      goto LABEL_192;
    }
LABEL_188:
    v67.__r_.__value_.__s.__data_[0] = 0;
    if (util::convert<BOOL>(&v70, (BOOL *)&v67, 0))
      goto LABEL_211;
    goto LABEL_213;
  }
  v51 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, "CellularLoggingAllowed"))
    goto LABEL_188;
  if (!strcasecmp(v51, "CarrierName1") || !strcasecmp(v51, "CarrierName2"))
    goto LABEL_187;
  if (strcasecmp(v51, "FileSize"))
  {
    if (!strcasecmp(v51, "SizeIO") || !strcasecmp(v51, "NumberOfReadIO"))
      goto LABEL_187;
LABEL_172:
    if (!strcasecmp(v51, "Retain_Previous_Trace"))
    {
      v67.__r_.__value_.__s.__data_[0] = -86;
      if (util::convert<BOOL>(&v70, (BOOL *)&v67, 0))
      {
LABEL_211:
        std::string::basic_string[abi:ne180100]<0>(__p, "BBTrace");
        v20 = prop::file::set<BOOL>((const void **)__p, (uint64_t)a1, (unsigned __int8 *)&v67);
        goto LABEL_57;
      }
LABEL_213:
      v11 = 0;
      if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return v11;
      goto LABEL_214;
    }
    v52 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      goto LABEL_213;
    if (a1[23] >= 0)
      v53 = a1;
    else
      v53 = *(char **)a1;
    v54 = &v70;
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v54 = (std::string *)v70.__r_.__value_.__r.__words[0];
    *(_DWORD *)__p = 136315906;
    *(_QWORD *)&__p[4] = "prop";
    v72 = 2080;
    v73 = "BBTrace";
    v74 = 2080;
    v75 = v53;
    v76 = 2080;
    v77 = v54;
    v55 = "%s: [bbtrace] set: Invalid key; domain='%s' key='%s' value='%s'";
    v56 = v52;
    v57 = 42;
LABEL_180:
    _os_log_error_impl(&dword_1A343C000, v56, OS_LOG_TYPE_ERROR, v55, __p, v57);
    goto LABEL_213;
  }
LABEL_192:
  data = -1431655766;
  v58 = (capabilities::radio *)util::convert<unsigned int>(&v70, &data, 0);
  if ((_DWORD)v58)
  {
    v59 = data;
    v60 = (capabilities::abs *)capabilities::radio::vendor(v58);
    shouldUseMinBasebandTransportIOReadSize = (capabilities::radio *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v60);
    if ((_DWORD)shouldUseMinBasebandTransportIOReadSize)
      v62 = 0x4000;
    else
      v62 = 0x8000;
    if (v59 >= v62)
    {
      v64 = data;
      if (!data)
      {
        v66 = GetOsLogContext()[1];
        if (!os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
          goto LABEL_213;
        *(_WORD *)__p = 0;
        v55 = "file size cannot be 0";
        v56 = v66;
        v57 = 2;
        goto LABEL_180;
      }
    }
    else
    {
      v63 = (capabilities::abs *)capabilities::radio::vendor(shouldUseMinBasebandTransportIOReadSize);
      if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v63))
        v64 = 0x4000;
      else
        v64 = 0x8000;
    }
    data = 1 << (__clz(v64) ^ 0x1F);
    std::string::basic_string[abi:ne180100]<0>(__p, "BBTrace");
    v58 = (capabilities::radio *)prop::file::set<unsigned int>((const void **)__p, (uint64_t)a1, (unsigned int *)&data);
    v65 = (int)v58;
    if (SHIBYTE(v74) < 0)
      operator delete(*(void **)__p);
  }
  else
  {
    v65 = 0;
  }
  __val = capabilities::trace::defaultHistorySizeMB(v58);
  std::string::basic_string[abi:ne180100]<0>(__p, "History");
  prop::bbtrace::get<int>(__p, &__val);
  if (SHIBYTE(v74) < 0)
    operator delete(*(void **)__p);
  if (!v65)
    goto LABEL_213;
  std::string::basic_string[abi:ne180100]<0>(__p, "History");
  std::to_string(&v67, __val);
  v11 = prop::bbtrace::set(__p, &v67);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
LABEL_58:
  if ((SHIBYTE(v74) & 0x80000000) == 0)
    goto LABEL_64;
  operator delete(*(void **)__p);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_214;
  return v11;
}

void sub_1A35529CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::coredump::set(uint64_t a1, char *a2)
{
  char *v2;
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  const char *v7;
  std::string *v8;
  uint64_t v9;
  char v11;
  std::string v12;
  _BYTE buf[12];
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  std::string *v19;
  uint64_t v20;

  v2 = a2;
  v20 = *MEMORY[0x1E0C80C00];
  memset(&v12, 170, sizeof(v12));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v12 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::coredump::get((const char *)a1, (uint64_t)&v12))
    goto LABEL_25;
LABEL_8:
  if (*(char *)(a1 + 23) >= 0)
    v4 = (const char *)a1;
  else
    v4 = *(const char **)a1;
  if (!strcasecmp(v4, "Enabled"))
  {
    v11 = -86;
    if (util::convert<BOOL>(&v12, (BOOL *)&v11, 0))
    {
      HIBYTE(v16) = 8;
      strcpy(buf, "CoreDump");
      v9 = prop::file::set<BOOL>((const void **)buf, a1, (unsigned __int8 *)&v11);
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_26;
      return v9;
    }
  }
  else
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED114D18 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v6 = qword_1ED114D18;
      if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
        goto LABEL_25;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
      v6 = qword_1ED114D18;
      if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
        goto LABEL_25;
    }
    if (*(char *)(a1 + 23) >= 0)
      v7 = (const char *)a1;
    else
      v7 = *(const char **)a1;
    v8 = &v12;
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v8 = (std::string *)v12.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "prop";
    v14 = 2080;
    v15 = "CoreDump";
    v16 = 2080;
    v17 = v7;
    v18 = 2080;
    v19 = v8;
    _os_log_error_impl(&dword_1A343C000, v6, OS_LOG_TYPE_ERROR, "%s: [coredump] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
  }
LABEL_25:
  v9 = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
LABEL_26:
    operator delete(v12.__r_.__value_.__l.__data_);
  return v9;
}

void sub_1A3552DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::ipc::set(char *a1, char *a2)
{
  char *v2;
  const char *v4;
  capabilities::ipc *v5;
  unsigned __int8 v6;
  NSObject *v7;
  char *v8;
  std::string *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  std::string v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  char *v22;
  __int16 v23;
  std::string *v24;
  uint64_t v25;

  v2 = a2;
  v25 = *MEMORY[0x1E0C80C00];
  memset(&v16, 170, sizeof(v16));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v16 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::ipc::get(a1, (uint64_t)&v16))
    goto LABEL_34;
LABEL_8:
  if (a1[23] < 0)
  {
    v4 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, "Enabled"))
    {
      if (strcasecmp(v4, "History"))
        goto LABEL_11;
      goto LABEL_24;
    }
LABEL_29:
    LOBYTE(v15) = -86;
    if (!util::convert<BOOL>(&v16, (BOOL *)&v15, 0))
      goto LABEL_34;
    HIBYTE(v21) = 3;
    strcpy((char *)buf, "IPC");
    v12 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v15);
    goto LABEL_31;
  }
  if (!strcasecmp(a1, "Enabled"))
    goto LABEL_29;
  v4 = a1;
  if (!strcasecmp(a1, "History"))
  {
LABEL_24:
    v15 = -1431655766;
    v10 = util::convert<int>(&v16, &v15, 0);
    if (v15 >= 0)
      v11 = v10;
    else
      v11 = 0;
    if (v11 != 1)
      goto LABEL_34;
    HIBYTE(v21) = 3;
    strcpy((char *)buf, "IPC");
    v12 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v15);
LABEL_31:
    v13 = v12;
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_35;
    return v13;
  }
LABEL_11:
  v5 = (capabilities::ipc *)strcasecmp(v4, "BufferCount");
  if ((_DWORD)v5 || (capabilities::ipc::supportsPCI(v5) & 1) == 0)
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED114D18 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v7 = qword_1ED114D18;
      if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
        goto LABEL_34;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
      v7 = qword_1ED114D18;
      if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
        goto LABEL_34;
    }
    if (a1[23] >= 0)
      v8 = a1;
    else
      v8 = *(char **)a1;
    v9 = &v16;
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v16.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    v18 = "prop";
    v19 = 2080;
    v20 = "IPC";
    v21 = 2080;
    v22 = v8;
    v23 = 2080;
    v24 = v9;
    _os_log_error_impl(&dword_1A343C000, v7, OS_LOG_TYPE_ERROR, "%s: [ipc] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
  }
LABEL_34:
  v13 = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
LABEL_35:
    operator delete(v16.__r_.__value_.__l.__data_);
  return v13;
}

void sub_1A355317C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::bbipc::set(char *a1, char *a2)
{
  char *v2;
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  char *v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  std::string v13;
  uint8_t buf[12];
  __int16 v15;
  const char *v16;
  __int16 v17;
  char *v18;
  __int16 v19;
  std::string *v20;
  uint64_t v21;

  v2 = a2;
  v21 = *MEMORY[0x1E0C80C00];
  memset(&v13, 170, sizeof(v13));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v13 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::bbipc::get(a1, (uint64_t)&v13))
    goto LABEL_32;
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, "Enabled"))
    {
      v4 = a1;
      if (strcasecmp(a1, "LogLevel"))
        goto LABEL_11;
LABEL_23:
      v12 = -1431655766;
      if (!util::convert<int>(&v13, &v12, 0))
        goto LABEL_32;
      HIBYTE(v17) = 11;
      strcpy((char *)buf, "BasebandIPC");
      v9 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v12);
      goto LABEL_29;
    }
LABEL_25:
    LOBYTE(v12) = -86;
    if (!util::convert<BOOL>(&v13, (BOOL *)&v12, 0))
      goto LABEL_32;
    HIBYTE(v17) = 11;
    strcpy((char *)buf, "BasebandIPC");
    v9 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v12);
    goto LABEL_29;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, "Enabled"))
    goto LABEL_25;
  if (!strcasecmp(v4, "LogLevel"))
    goto LABEL_23;
LABEL_11:
  if (!strcasecmp(v4, "PayloadSize"))
  {
    v12 = -1431655766;
    if (!util::convert<unsigned int>(&v13, &v12, 0))
      goto LABEL_32;
    HIBYTE(v17) = 11;
    strcpy((char *)buf, "BasebandIPC");
    v9 = prop::file::set<unsigned int>((const void **)buf, (uint64_t)a1, (unsigned int *)&v12);
LABEL_29:
    v10 = v9;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_33;
    return v10;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED114D18 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v6 = qword_1ED114D18;
    if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
      goto LABEL_32;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
    v6 = qword_1ED114D18;
    if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
      goto LABEL_32;
  }
  if (a1[23] >= 0)
    v7 = a1;
  else
    v7 = *(char **)a1;
  v8 = &v13;
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = (std::string *)v13.__r_.__value_.__r.__words[0];
  *(_DWORD *)buf = 136315906;
  *(_QWORD *)&buf[4] = "prop";
  v15 = 2080;
  v16 = "BasebandIPC";
  v17 = 2080;
  v18 = v7;
  v19 = 2080;
  v20 = v8;
  _os_log_error_impl(&dword_1A343C000, v6, OS_LOG_TYPE_ERROR, "%s: [bbipc] set: Invalid key; domain='%s' key='%s' value='%s'",
    buf,
    0x2Au);
LABEL_32:
  v10 = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
LABEL_33:
    operator delete(v13.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1A3553548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::compression::set(char *a1, char *a2)
{
  char *v2;
  int v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  unsigned __int8 v9;
  NSObject *v10;
  char *v11;
  std::string *v12;
  int v14;
  std::string v15;
  uint8_t buf[12];
  __int16 v17;
  const char *v18;
  __int16 v19;
  char *v20;
  __int16 v21;
  std::string *v22;
  uint64_t v23;

  v2 = a2;
  v23 = *MEMORY[0x1E0C80C00];
  memset(&v15, 170, sizeof(v15));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v15 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::compression::get(a1, (uint64_t)&v15))
  {
LABEL_32:
    v7 = 0;
    goto LABEL_33;
  }
LABEL_8:
  v4 = a1[23];
  v5 = *(const char **)a1;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *(const char **)a1;
  if (!strcasecmp(v6, "Mode"))
  {
    v14 = 0;
    if (util::convert<int>(&v15, &v14, 0))
    {
      HIBYTE(v19) = 11;
      strcpy((char *)buf, "Compression");
      v7 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v14);
    }
    else
    {
      v7 = 0;
    }
    LOBYTE(v4) = a1[23];
    v5 = *(const char **)a1;
  }
  else
  {
    v7 = 0;
  }
  if ((v4 & 0x80u) == 0)
    v8 = a1;
  else
    v8 = v5;
  if (!strcasecmp(v8, "SplitArchive"))
  {
    LOBYTE(v14) = 1;
    if (util::convert<BOOL>(&v15, (BOOL *)&v14, 0))
    {
      HIBYTE(v19) = 11;
      strcpy((char *)buf, "Compression");
      v7 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v14);
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED114D18 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v10 = qword_1ED114D18;
    if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
      goto LABEL_33;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
    v10 = qword_1ED114D18;
    if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
      goto LABEL_33;
  }
  if (a1[23] >= 0)
    v11 = a1;
  else
    v11 = *(char **)a1;
  v12 = &v15;
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v12 = (std::string *)v15.__r_.__value_.__r.__words[0];
  *(_DWORD *)buf = 136315906;
  *(_QWORD *)&buf[4] = "prop";
  v17 = 2080;
  v18 = "Compression";
  v19 = 2080;
  v20 = v11;
  v21 = 2080;
  v22 = v12;
  _os_log_error_impl(&dword_1A343C000, v10, OS_LOG_TYPE_ERROR, "%s: [compression] set: Invalid key; domain='%s' key='%s' value='%s'",
    buf,
    0x2Au);
LABEL_33:
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v7;
}

void sub_1A35538BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::ttr::set(char *a1, char *a2)
{
  char *v2;
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  char *v7;
  std::string *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v15;
  std::string v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  char *v22;
  __int16 v23;
  std::string *v24;
  uint64_t v25;

  v2 = a2;
  v25 = *MEMORY[0x1E0C80C00];
  memset(&v16, 170, sizeof(v16));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v16 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::ttr::get(a1, (uint64_t)&v16))
    goto LABEL_33;
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    v4 = a1;
    if (strcasecmp(a1, "Mode"))
      goto LABEL_10;
LABEL_21:
    v15 = -1431655766;
    v9 = util::convert<unsigned int>(&v16, &v15, 0);
    if (v15 < 4)
      v10 = v9;
    else
      v10 = 0;
    if (v10 != 1)
      goto LABEL_33;
LABEL_30:
    HIBYTE(v21) = 3;
    strcpy((char *)buf, "TTR");
    v13 = prop::file::set<unsigned int>((const void **)buf, (uint64_t)a1, &v15);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_34;
    return v13;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, "Mode"))
    goto LABEL_21;
LABEL_10:
  if (!strcasecmp(v4, "AgeLimit"))
  {
    v15 = -1431655766;
    v11 = util::convert<unsigned int>(&v16, &v15, 0);
    if (v15)
      v12 = v11;
    else
      v12 = 0;
    if (v12 != 1)
      goto LABEL_33;
    goto LABEL_30;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED114D18 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v6 = qword_1ED114D18;
    if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
      goto LABEL_33;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
    v6 = qword_1ED114D18;
    if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
      goto LABEL_33;
  }
  if (a1[23] >= 0)
    v7 = a1;
  else
    v7 = *(char **)a1;
  v8 = &v16;
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = (std::string *)v16.__r_.__value_.__r.__words[0];
  *(_DWORD *)buf = 136315906;
  v18 = "prop";
  v19 = 2080;
  v20 = "TTR";
  v21 = 2080;
  v22 = v7;
  v23 = 2080;
  v24 = v8;
  _os_log_error_impl(&dword_1A343C000, v6, OS_LOG_TYPE_ERROR, "%s: [ttr] set: Invalid key; domain='%s' key='%s' value='%s'",
    buf,
    0x2Au);
LABEL_33:
  v13 = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
LABEL_34:
    operator delete(v16.__r_.__value_.__l.__data_);
  return v13;
}

void sub_1A3553C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::logfilter::set(char *a1, char *a2)
{
  char *v2;
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  char *v7;
  std::string *v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v16;
  std::string v17;
  _BYTE buf[12];
  __int16 v19;
  const char *v20;
  __int16 v21;
  char *v22;
  __int16 v23;
  std::string *v24;
  uint64_t v25;

  v2 = a2;
  v25 = *MEMORY[0x1E0C80C00];
  memset(&v17, 170, sizeof(v17));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v17 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::logfilter::get(a1, (uint64_t)&v17))
    goto LABEL_38;
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, "FreeSpace"))
    {
      v4 = a1;
      if (strcasecmp(a1, "MaxLogLimit"))
        goto LABEL_11;
      goto LABEL_23;
    }
LABEL_28:
    v16 = -1431655766;
    v12 = util::convert<int>(&v17, &v16, 0);
    if (v16 > -2)
      v13 = v12;
    else
      v13 = 0;
    if (v13 != 1)
      goto LABEL_38;
    goto LABEL_27;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, "FreeSpace"))
    goto LABEL_28;
  if (!strcasecmp(v4, "MaxLogLimit"))
  {
LABEL_23:
    v16 = -1431655766;
    v9 = util::convert<int>(&v17, &v16, 0);
    if (v16 > -2)
      v10 = v9;
    else
      v10 = 0;
    if (v10 != 1)
      goto LABEL_38;
LABEL_27:
    HIBYTE(v21) = 9;
    strcpy(buf, "LogFilter");
    v11 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v16);
    goto LABEL_35;
  }
LABEL_11:
  if (!strcasecmp(v4, "DuplicateSignatureDetection"))
  {
    LOBYTE(v16) = 1;
    if (!util::convert<BOOL>(&v17, (BOOL *)&v16, 0))
      goto LABEL_38;
    HIBYTE(v21) = 9;
    strcpy(buf, "LogFilter");
    v11 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v16);
LABEL_35:
    v14 = v11;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_39;
    return v14;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED114D18 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v6 = qword_1ED114D18;
    if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
      goto LABEL_38;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
    v6 = qword_1ED114D18;
    if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
      goto LABEL_38;
  }
  if (a1[23] >= 0)
    v7 = a1;
  else
    v7 = *(char **)a1;
  v8 = &v17;
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = (std::string *)v17.__r_.__value_.__r.__words[0];
  *(_DWORD *)buf = 136315906;
  *(_QWORD *)&buf[4] = "prop";
  v19 = 2080;
  v20 = "LogFilter";
  v21 = 2080;
  v22 = v7;
  v23 = 2080;
  v24 = v8;
  _os_log_error_impl(&dword_1A343C000, v6, OS_LOG_TYPE_ERROR, "%s: [logfilter] set: Invalid key; domain='%s' key='%s' value='%s'",
    buf,
    0x2Au);
LABEL_38:
  v14 = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
LABEL_39:
    operator delete(v17.__r_.__value_.__l.__data_);
  return v14;
}

void sub_1A3554010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::systemlogs::set(char *a1, char *a2)
{
  char *v2;
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  char *v7;
  std::string *v8;
  int v9;
  int v10;
  uint64_t v11;
  int IsCarrierBuild;
  unsigned int v13;
  uint64_t v14;
  unsigned int v16;
  std::string v17;
  _BYTE buf[12];
  __int16 v19;
  const char *v20;
  __int16 v21;
  char *v22;
  __int16 v23;
  std::string *v24;
  uint64_t v25;

  v2 = a2;
  v25 = *MEMORY[0x1E0C80C00];
  memset(&v17, 170, sizeof(v17));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v17 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::systemlogs::get(a1, (uint64_t)&v17))
    goto LABEL_42;
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, "Mode"))
    {
      v4 = a1;
      if (strcasecmp(a1, "History"))
        goto LABEL_11;
      goto LABEL_23;
    }
LABEL_28:
    v16 = -1431655766;
    if ((TelephonyUtilIsInternalBuild() & 1) != 0)
      IsCarrierBuild = 1;
    else
      IsCarrierBuild = TelephonyUtilIsCarrierBuild();
    if (!util::convert<unsigned int>(&v17, &v16, 0))
      goto LABEL_42;
    v13 = IsCarrierBuild ? 3 : 2;
    if (v16 >= v13)
      goto LABEL_42;
    HIBYTE(v21) = 10;
    strcpy(buf, "SystemLogs");
    v11 = prop::file::set<unsigned int>((const void **)buf, (uint64_t)a1, &v16);
LABEL_39:
    v14 = v11;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_43;
    return v14;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, "Mode"))
    goto LABEL_28;
  if (!strcasecmp(v4, "History"))
  {
LABEL_23:
    v16 = -1431655766;
    v9 = util::convert<int>(&v17, &v16, 0);
    if ((int)v16 > 0)
      v10 = v9;
    else
      v10 = 0;
    if (v10 != 1)
      goto LABEL_42;
    HIBYTE(v21) = 10;
    strcpy(buf, "SystemLogs");
    v11 = prop::file::set<int>((const void **)buf, (uint64_t)a1, (int *)&v16);
    goto LABEL_39;
  }
LABEL_11:
  if (!strcasecmp(v4, "UserConfirmation"))
  {
    LOBYTE(v16) = -86;
    if (!util::convert<BOOL>(&v17, (BOOL *)&v16, 0))
      goto LABEL_42;
    HIBYTE(v21) = 10;
    strcpy(buf, "SystemLogs");
    v11 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v16);
    goto LABEL_39;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED114D18 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v6 = qword_1ED114D18;
    if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
      goto LABEL_42;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
    v6 = qword_1ED114D18;
    if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
      goto LABEL_42;
  }
  if (a1[23] >= 0)
    v7 = a1;
  else
    v7 = *(char **)a1;
  v8 = &v17;
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = (std::string *)v17.__r_.__value_.__r.__words[0];
  *(_DWORD *)buf = 136315906;
  *(_QWORD *)&buf[4] = "prop";
  v19 = 2080;
  v20 = "SystemLogs";
  v21 = 2080;
  v22 = v7;
  v23 = 2080;
  v24 = v8;
  _os_log_error_impl(&dword_1A343C000, v6, OS_LOG_TYPE_ERROR, "%s: [systemlogs] set: Invalid key; domain='%s' key='%s' value='%s'",
    buf,
    0x2Au);
LABEL_42:
  v14 = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
LABEL_43:
    operator delete(v17.__r_.__value_.__l.__data_);
  return v14;
}

void sub_1A3554420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t prop::profile::set(char *a1, char *a2)
{
  char *v2;
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  char *v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  std::string v13;
  _BYTE buf[12];
  __int16 v15;
  const char *v16;
  __int16 v17;
  char *v18;
  __int16 v19;
  std::string *v20;
  uint64_t v21;

  v2 = a2;
  v21 = *MEMORY[0x1E0C80C00];
  memset(&v13, 170, sizeof(v13));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v13 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::profile::get(a1, (uint64_t)&v13))
    goto LABEL_28;
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    v4 = a1;
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFAF68]))
      goto LABEL_10;
LABEL_21:
    LOBYTE(v12) = -86;
    if (!util::convert<BOOL>(&v13, (BOOL *)&v12, 0))
      goto LABEL_28;
    HIBYTE(v17) = 7;
    strcpy(buf, "Profile");
    v9 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v12);
    goto LABEL_25;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFAF68]))
    goto LABEL_21;
LABEL_10:
  if (!strcasecmp(v4, "InstalledCarrierProfileVersion"))
  {
    v12 = -1431655766;
    if (!util::convert<int>(&v13, &v12, 0))
      goto LABEL_28;
    HIBYTE(v17) = 7;
    strcpy(buf, "Profile");
    v9 = prop::file::set<std::string>((const void **)buf, (uint64_t)a1, (uint64_t)&v13);
LABEL_25:
    v10 = v9;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_29;
    return v10;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED114D18 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v6 = qword_1ED114D18;
    if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
      goto LABEL_28;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
    v6 = qword_1ED114D18;
    if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
      goto LABEL_28;
  }
  if (a1[23] >= 0)
    v7 = a1;
  else
    v7 = *(char **)a1;
  v8 = &v13;
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = (std::string *)v13.__r_.__value_.__r.__words[0];
  *(_DWORD *)buf = 136315906;
  *(_QWORD *)&buf[4] = "prop";
  v15 = 2080;
  v16 = "Profile";
  v17 = 2080;
  v18 = v7;
  v19 = 2080;
  v20 = v8;
  _os_log_error_impl(&dword_1A343C000, v6, OS_LOG_TYPE_ERROR, "%s: [profile] set: Invalid key; domain='%s' key='%s' value='%s'",
    buf,
    0x2Au);
LABEL_28:
  v10 = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
LABEL_29:
    operator delete(v13.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1A355476C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::tailspin::set(uint64_t a1, char *a2)
{
  char *v2;
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  const char *v7;
  std::string *v8;
  uint64_t v9;
  char v11;
  std::string v12;
  _BYTE buf[12];
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  std::string *v19;
  uint64_t v20;

  v2 = a2;
  v20 = *MEMORY[0x1E0C80C00];
  memset(&v12, 170, sizeof(v12));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v12 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::tailspin::get((const char *)a1, (uint64_t)&v12))
    goto LABEL_25;
LABEL_8:
  if (*(char *)(a1 + 23) >= 0)
    v4 = (const char *)a1;
  else
    v4 = *(const char **)a1;
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E0CFAF68]))
  {
    v11 = -86;
    if (util::convert<BOOL>(&v12, (BOOL *)&v11, 0))
    {
      HIBYTE(v16) = 8;
      strcpy(buf, "Tailspin");
      v9 = prop::file::set<BOOL>((const void **)buf, a1, (unsigned __int8 *)&v11);
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_26;
      return v9;
    }
  }
  else
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED114D18 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v6 = qword_1ED114D18;
      if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
        goto LABEL_25;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
      v6 = qword_1ED114D18;
      if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
        goto LABEL_25;
    }
    if (*(char *)(a1 + 23) >= 0)
      v7 = (const char *)a1;
    else
      v7 = *(const char **)a1;
    v8 = &v12;
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v8 = (std::string *)v12.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "prop";
    v14 = 2080;
    v15 = "Tailspin";
    v16 = 2080;
    v17 = v7;
    v18 = 2080;
    v19 = v8;
    _os_log_error_impl(&dword_1A343C000, v6, OS_LOG_TYPE_ERROR, "%s: [tailspin] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
  }
LABEL_25:
  v9 = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
LABEL_26:
    operator delete(v12.__r_.__value_.__l.__data_);
  return v9;
}

void sub_1A3554A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::tracesettings::set(char *a1, uint64_t a2)
{
  const char *v3;
  unsigned __int8 v4;
  NSObject *v5;
  char *v6;
  std::string *v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  std::string v12;
  _BYTE buf[12];
  __int16 v14;
  const char *v15;
  __int16 v16;
  char *v17;
  __int16 v18;
  std::string *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  memset(&v12, 170, sizeof(v12));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v12 = *(std::string *)a2;
  if (a1[23] < 0)
  {
    v3 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, "SettingsVersion"))
    {
      if (strcasecmp(v3, "SettingsSelected") && strcasecmp(v3, "Time"))
        goto LABEL_8;
      goto LABEL_24;
    }
LABEL_22:
    v11 = -1431655766;
    if (!util::convert<int>(&v12, &v11, 0))
      goto LABEL_31;
LABEL_23:
    HIBYTE(v16) = 8;
    strcpy(buf, "Settings");
    v8 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v11);
    goto LABEL_25;
  }
  if (!strcasecmp(a1, "SettingsVersion"))
    goto LABEL_22;
  if (strcasecmp(a1, "SettingsSelected"))
  {
    v3 = a1;
    if (strcasecmp(a1, "Time"))
    {
LABEL_8:
      if (strcasecmp(v3, "SettingsDevice"))
      {
        {
          GetOsLogContext(void)::sOsLogContext = 0;
          qword_1ED114D18 = 0;
          __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
        }
        if (GetOsLogContext(void)::onceToken == -1)
        {
          v5 = qword_1ED114D18;
          if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
            goto LABEL_31;
        }
        else
        {
          dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
          v5 = qword_1ED114D18;
          if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
            goto LABEL_31;
        }
        if (a1[23] >= 0)
          v6 = a1;
        else
          v6 = *(char **)a1;
        v7 = &v12;
        if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v7 = (std::string *)v12.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "prop";
        v14 = 2080;
        v15 = "Settings";
        v16 = 2080;
        v17 = v6;
        v18 = 2080;
        v19 = v7;
        _os_log_error_impl(&dword_1A343C000, v5, OS_LOG_TYPE_ERROR, "%s: [tracesettings] set: Invalid key; domain='%s' key='%s' value='%s'",
          buf,
          0x2Au);
LABEL_31:
        v9 = 0;
        if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return v9;
        goto LABEL_26;
      }
      v11 = -1431655766;
      if (!util::convert<int>(&v12, &v11, 0))
        goto LABEL_31;
      goto LABEL_23;
    }
  }
LABEL_24:
  HIBYTE(v16) = 8;
  strcpy(buf, "Settings");
  v8 = prop::file::set<std::string>((const void **)buf, (uint64_t)a1, (uint64_t)&v12);
LABEL_25:
  v9 = v8;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
LABEL_26:
    operator delete(v12.__r_.__value_.__l.__data_);
  return v9;
}

void sub_1A3554DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::get_from_file(char *a1, char *a2, uint64_t a3)
{
  _BOOL8 v6;
  std::string v8;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v6 = defaults::get(a1, a2, &__p);
  if (v6)
  {
    prop::file::get<std::string>((const void **)a1, (uint64_t)a2, (uint64_t)&__p, &v8);
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(std::string *)a3 = v8;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1A3554ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t prop::file::set<BOOL>(const void **a1, uint64_t a2, unsigned __int8 *a3)
{
  int v3;
  size_t v4;
  unint64_t v5;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  void **v19;
  __int128 v20;
  std::string::size_type v21;
  _QWORD *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::string v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *__p[4];
  std::string __dst;

  memset(__p, 170, 24);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = (size_t)a1[1];
  v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v12 = a1;
  else
    v12 = *a1;
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)a2;
  else
    v14 = *(const std::string::value_type **)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = std::string::append(&__dst, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  __p[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p[2]) >= 0)
    v18 = (void **)((char *)__p + HIBYTE(__p[2]));
  else
    v18 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  if (SHIBYTE(__p[2]) >= 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  for (; v19 != v18; v19 = (void **)((char *)v19 + 1))
    *(_BYTE *)v19 = __tolower(*(char *)v19);
  std::to_string(&__dst, *a3);
  v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  v21 = __dst.__r_.__value_.__r.__words[2];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (qword_1ED1147D8)
  {
LABEL_32:
    LODWORD(v23) = qword_1ED1147D8;
    v22 = off_1ED1147E0;
    v36 = qword_1ED1147D8;
    v37 = (std::__shared_weak_count *)off_1ED1147E0;
    if (!off_1ED1147E0)
      goto LABEL_42;
    goto LABEL_40;
  }
  v23 = operator new(0x18uLL);
  MEMORY[0x1A858F2E4](v23, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
  v22 = operator new(0x20uLL);
  *v22 = &unk_1E4A09890;
  v22[1] = 0;
  v22[2] = 0;
  v22[3] = v23;
  v24 = (std::__shared_weak_count *)off_1ED1147E0;
  qword_1ED1147D8 = (uint64_t)v23;
  off_1ED1147E0 = v22;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    goto LABEL_32;
  }
  v36 = (uint64_t)v23;
  v37 = (std::__shared_weak_count *)v22;
LABEL_40:
  v27 = v22 + 1;
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
LABEL_42:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if ((v21 & 0x8000000000000000) == 0)
  {
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v20;
    v35.__r_.__value_.__r.__words[2] = v21;
LABEL_45:
    __dst = v35;
    goto LABEL_46;
  }
  std::string::__init_copy_ctor_external(&v35, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_45;
  std::string::__init_copy_ctor_external(&__dst, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
LABEL_46:
  if (SHIBYTE(__p[2]) >= 0)
    v29 = (char *)__p;
  else
    v29 = (char *)__p[0];
  v30 = ctu::cf::plist_adapter::set<std::string>((int)v23, (uint64_t)&__dst, v29);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_51;
LABEL_54:
    operator delete(v35.__r_.__value_.__l.__data_);
    v31 = v37;
    if (!v37)
      goto LABEL_58;
    goto LABEL_55;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_54;
LABEL_51:
  v31 = v37;
  if (!v37)
    goto LABEL_58;
LABEL_55:
  v32 = (unint64_t *)&v31->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (v33)
  {
LABEL_58:
    if ((v21 & 0x8000000000000000) == 0)
      goto LABEL_59;
LABEL_62:
    operator delete((void *)v20);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return v30;
LABEL_63:
    operator delete(__p[0]);
    return v30;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  if ((v21 & 0x8000000000000000) != 0)
    goto LABEL_62;
LABEL_59:
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_63;
  return v30;
}

void sub_1A3555254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  uint64_t v31;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (v31 < 0)
    operator delete(v30);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t prop::file::set<int>(const void **a1, uint64_t a2, int *a3)
{
  int v3;
  size_t v4;
  unint64_t v5;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  void **v19;
  __int128 v20;
  std::string::size_type v21;
  _QWORD *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::string v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *__p[4];
  std::string __dst;

  memset(__p, 170, 24);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = (size_t)a1[1];
  v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v12 = a1;
  else
    v12 = *a1;
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)a2;
  else
    v14 = *(const std::string::value_type **)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = std::string::append(&__dst, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  __p[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p[2]) >= 0)
    v18 = (void **)((char *)__p + HIBYTE(__p[2]));
  else
    v18 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  if (SHIBYTE(__p[2]) >= 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  for (; v19 != v18; v19 = (void **)((char *)v19 + 1))
    *(_BYTE *)v19 = __tolower(*(char *)v19);
  std::to_string(&__dst, *a3);
  v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  v21 = __dst.__r_.__value_.__r.__words[2];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (qword_1ED1147D8)
  {
LABEL_32:
    LODWORD(v23) = qword_1ED1147D8;
    v22 = off_1ED1147E0;
    v36 = qword_1ED1147D8;
    v37 = (std::__shared_weak_count *)off_1ED1147E0;
    if (!off_1ED1147E0)
      goto LABEL_42;
    goto LABEL_40;
  }
  v23 = operator new(0x18uLL);
  MEMORY[0x1A858F2E4](v23, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
  v22 = operator new(0x20uLL);
  *v22 = &unk_1E4A09890;
  v22[1] = 0;
  v22[2] = 0;
  v22[3] = v23;
  v24 = (std::__shared_weak_count *)off_1ED1147E0;
  qword_1ED1147D8 = (uint64_t)v23;
  off_1ED1147E0 = v22;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    goto LABEL_32;
  }
  v36 = (uint64_t)v23;
  v37 = (std::__shared_weak_count *)v22;
LABEL_40:
  v27 = v22 + 1;
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
LABEL_42:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if ((v21 & 0x8000000000000000) == 0)
  {
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v20;
    v35.__r_.__value_.__r.__words[2] = v21;
LABEL_45:
    __dst = v35;
    goto LABEL_46;
  }
  std::string::__init_copy_ctor_external(&v35, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_45;
  std::string::__init_copy_ctor_external(&__dst, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
LABEL_46:
  if (SHIBYTE(__p[2]) >= 0)
    v29 = (char *)__p;
  else
    v29 = (char *)__p[0];
  v30 = ctu::cf::plist_adapter::set<std::string>((int)v23, (uint64_t)&__dst, v29);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_51;
LABEL_54:
    operator delete(v35.__r_.__value_.__l.__data_);
    v31 = v37;
    if (!v37)
      goto LABEL_58;
    goto LABEL_55;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_54;
LABEL_51:
  v31 = v37;
  if (!v37)
    goto LABEL_58;
LABEL_55:
  v32 = (unint64_t *)&v31->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (v33)
  {
LABEL_58:
    if ((v21 & 0x8000000000000000) == 0)
      goto LABEL_59;
LABEL_62:
    operator delete((void *)v20);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return v30;
LABEL_63:
    operator delete(__p[0]);
    return v30;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  if ((v21 & 0x8000000000000000) != 0)
    goto LABEL_62;
LABEL_59:
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_63;
  return v30;
}

void sub_1A3555698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  uint64_t v31;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (v31 < 0)
    operator delete(v30);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t prop::file::set<std::string>(const void **a1, uint64_t a2, uint64_t a3)
{
  int v3;
  size_t v4;
  unint64_t v5;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  void **v19;
  _QWORD *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::string __p;
  uint64_t v34;
  std::__shared_weak_count *v35;
  void *v36[4];
  std::string __dst;

  memset(v36, 170, 24);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = (size_t)a1[1];
  v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v12 = a1;
  else
    v12 = *a1;
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)a2;
  else
    v14 = *(const std::string::value_type **)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = std::string::append(&__dst, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)v36 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36[2]) >= 0)
    v18 = (void **)((char *)v36 + HIBYTE(v36[2]));
  else
    v18 = (void **)((char *)v36[0] + (unint64_t)v36[1]);
  if (SHIBYTE(v36[2]) >= 0)
    v19 = v36;
  else
    v19 = (void **)v36[0];
  for (; v19 != v18; v19 = (void **)((char *)v19 + 1))
    *(_BYTE *)v19 = __tolower(*(char *)v19);
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1ED1147D8)
  {
    v21 = operator new(0x18uLL);
    MEMORY[0x1A858F2E4](v21, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
    v20 = operator new(0x20uLL);
    *v20 = &unk_1E4A09890;
    v20[1] = 0;
    v20[2] = 0;
    v20[3] = v21;
    v22 = (std::__shared_weak_count *)off_1ED1147E0;
    qword_1ED1147D8 = (uint64_t)v21;
    off_1ED1147E0 = v20;
    if (!v22)
    {
      v34 = (uint64_t)v21;
      v35 = (std::__shared_weak_count *)v20;
LABEL_40:
      v25 = v20 + 1;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      goto LABEL_42;
    }
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  LODWORD(v21) = qword_1ED1147D8;
  v20 = off_1ED1147E0;
  v34 = qword_1ED1147D8;
  v35 = (std::__shared_weak_count *)off_1ED1147E0;
  if (off_1ED1147E0)
    goto LABEL_40;
LABEL_42:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    __dst = __p;
  if (SHIBYTE(v36[2]) >= 0)
    v27 = (char *)v36;
  else
    v27 = (char *)v36[0];
  v28 = ctu::cf::plist_adapter::set<std::string>((int)v21, (uint64_t)&__dst, v27);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_53:
      v29 = v35;
      if (!v35)
        goto LABEL_60;
      goto LABEL_57;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_53;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  v29 = v35;
  if (!v35)
    goto LABEL_60;
LABEL_57:
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    if ((SHIBYTE(v36[2]) & 0x80000000) == 0)
      return v28;
    goto LABEL_61;
  }
LABEL_60:
  if (SHIBYTE(v36[2]) < 0)
LABEL_61:
    operator delete(v36[0]);
  return v28;
}

void sub_1A3555AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t prop::file::set<unsigned int>(const void **a1, uint64_t a2, unsigned int *a3)
{
  int v3;
  size_t v4;
  unint64_t v5;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  void **v19;
  __int128 v20;
  std::string::size_type v21;
  _QWORD *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::string v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *__p[4];
  std::string __dst;

  memset(__p, 170, 24);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = (size_t)a1[1];
  v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v12 = a1;
  else
    v12 = *a1;
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)a2;
  else
    v14 = *(const std::string::value_type **)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = std::string::append(&__dst, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  __p[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p[2]) >= 0)
    v18 = (void **)((char *)__p + HIBYTE(__p[2]));
  else
    v18 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  if (SHIBYTE(__p[2]) >= 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  for (; v19 != v18; v19 = (void **)((char *)v19 + 1))
    *(_BYTE *)v19 = __tolower(*(char *)v19);
  std::to_string(&__dst, *a3);
  v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  v21 = __dst.__r_.__value_.__r.__words[2];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (qword_1ED1147D8)
  {
LABEL_32:
    LODWORD(v23) = qword_1ED1147D8;
    v22 = off_1ED1147E0;
    v36 = qword_1ED1147D8;
    v37 = (std::__shared_weak_count *)off_1ED1147E0;
    if (!off_1ED1147E0)
      goto LABEL_42;
    goto LABEL_40;
  }
  v23 = operator new(0x18uLL);
  MEMORY[0x1A858F2E4](v23, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
  v22 = operator new(0x20uLL);
  *v22 = &unk_1E4A09890;
  v22[1] = 0;
  v22[2] = 0;
  v22[3] = v23;
  v24 = (std::__shared_weak_count *)off_1ED1147E0;
  qword_1ED1147D8 = (uint64_t)v23;
  off_1ED1147E0 = v22;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    goto LABEL_32;
  }
  v36 = (uint64_t)v23;
  v37 = (std::__shared_weak_count *)v22;
LABEL_40:
  v27 = v22 + 1;
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
LABEL_42:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if ((v21 & 0x8000000000000000) == 0)
  {
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v20;
    v35.__r_.__value_.__r.__words[2] = v21;
LABEL_45:
    __dst = v35;
    goto LABEL_46;
  }
  std::string::__init_copy_ctor_external(&v35, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_45;
  std::string::__init_copy_ctor_external(&__dst, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
LABEL_46:
  if (SHIBYTE(__p[2]) >= 0)
    v29 = (char *)__p;
  else
    v29 = (char *)__p[0];
  v30 = ctu::cf::plist_adapter::set<std::string>((int)v23, (uint64_t)&__dst, v29);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_51;
LABEL_54:
    operator delete(v35.__r_.__value_.__l.__data_);
    v31 = v37;
    if (!v37)
      goto LABEL_58;
    goto LABEL_55;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_54;
LABEL_51:
  v31 = v37;
  if (!v37)
    goto LABEL_58;
LABEL_55:
  v32 = (unint64_t *)&v31->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (v33)
  {
LABEL_58:
    if ((v21 & 0x8000000000000000) == 0)
      goto LABEL_59;
LABEL_62:
    operator delete((void *)v20);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return v30;
LABEL_63:
    operator delete(__p[0]);
    return v30;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  if ((v21 & 0x8000000000000000) != 0)
    goto LABEL_62;
LABEL_59:
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_63;
  return v30;
}

void sub_1A3555ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  uint64_t v31;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (v31 < 0)
    operator delete(v30);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t prop::tracesettings::enabled(prop::tracesettings *this, const char *a2)
{
  size_t v3;
  size_t v4;
  __int128 *p_dst;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v11[2];
  char v12;
  __int128 __dst;
  unint64_t v14;
  BOOL v15;
  int v16;
  std::string __p;

  v15 = 0;
  if (this != (prop::tracesettings *)"SystemLogs")
  {
    v3 = strlen((const char *)this);
    if (v3 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v4 = v3;
    if (v3 >= 0x17)
    {
      v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v8 = v3 | 7;
      v9 = v8 + 1;
      p_dst = (__int128 *)operator new(v8 + 1);
      *((_QWORD *)&__dst + 1) = v4;
      v14 = v9 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v14) = v3;
      p_dst = &__dst;
      if (!v3)
      {
LABEL_16:
        *((_BYTE *)p_dst + v4) = 0;
        v12 = 7;
        strcpy((char *)v11, "Enabled");
        memset(&__p, 0, sizeof(__p));
        if (prop::get((char *)&__dst, (char *)v11, (uint64_t)&__p))
          util::convert<BOOL>(&__p, &v15, 0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((v12 & 0x80000000) == 0)
          {
LABEL_20:
            if ((SHIBYTE(v14) & 0x80000000) == 0)
              return v15;
LABEL_24:
            operator delete((void *)__dst);
            return v15;
          }
        }
        else if ((v12 & 0x80000000) == 0)
        {
          goto LABEL_20;
        }
        operator delete(v11[0]);
        if ((SHIBYTE(v14) & 0x80000000) == 0)
          return v15;
        goto LABEL_24;
      }
    }
    memcpy(p_dst, this, v4);
    goto LABEL_16;
  }
  HIBYTE(v14) = 10;
  strcpy((char *)&__dst, "SystemLogs");
  v12 = 4;
  strcpy((char *)v11, "Mode");
  memset(&__p, 0, sizeof(__p));
  v6 = -1431655766;
  if (!prop::get((char *)&__dst, (char *)v11, (uint64_t)&__p))
  {
    v7 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_26;
  }
  v16 = -1431655766;
  v7 = util::convert<int>(&__p, &v16, 0);
  if (v7)
    v6 = v16;
  else
    v6 = -1431655766;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_26:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_27:
  if (v12 < 0)
  {
    operator delete(v11[0]);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
      goto LABEL_29;
  }
  else if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    goto LABEL_29;
  }
  operator delete((void *)__dst);
LABEL_29:
  if (v6)
    return v7;
  else
    return 0;
}

void sub_1A35561EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a20 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t prop::tracesettings::anyEnabled(prop::tracesettings *this, const char *a2)
{
  const char *v2;
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;

  if ((prop::tracesettings::enabled((prop::tracesettings *)"BasebandTrace", a2) & 1) != 0
    || (prop::tracesettings::enabled((prop::tracesettings *)"SystemLogs", v2) & 1) != 0
    || (prop::tracesettings::enabled((prop::tracesettings *)"CoreDump", v3) & 1) != 0
    || (prop::tracesettings::enabled((prop::tracesettings *)"IPC", v4) & 1) != 0
    || (prop::tracesettings::enabled((prop::tracesettings *)"KernelPCI", v5) & 1) != 0
    || (prop::tracesettings::enabled((prop::tracesettings *)"BasebandIPC", v6) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return prop::tracesettings::enabled((prop::tracesettings *)"Tailspin", v7);
  }
}

uint64_t prop::tracesettings::isContinuous(prop::tracesettings *this, const char *a2)
{
  const char *v2;
  const char *v3;

  if ((prop::tracesettings::enabled((prop::tracesettings *)"BasebandTrace", a2) & 1) != 0
    || (prop::tracesettings::enabled((prop::tracesettings *)"IPC", v2) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return prop::tracesettings::enabled((prop::tracesettings *)"KernelPCI", v3);
  }
}

uint64_t prop::tracesettings::mobileBasebandServicesEnabled(prop::tracesettings *this, const char *a2)
{
  const char *v2;
  const char *v3;

  if ((prop::tracesettings::enabled((prop::tracesettings *)"BasebandTrace", a2) & 1) != 0
    || (prop::tracesettings::enabled((prop::tracesettings *)"IPC", v2) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return prop::tracesettings::enabled((prop::tracesettings *)"KernelPCI", v3);
  }
}

void prop::file::get<std::string>(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  int v5;
  size_t v6;
  unint64_t v7;
  void **p_dst;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  char *v20;
  char *v21;
  _QWORD *v22;
  void **v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  const char *v29;
  const void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void **__dst;
  std::__shared_weak_count *v35;
  _QWORD v36[4];
  uint64_t v37;

  memset(v36, 170, sizeof(v36));
  v5 = *((char *)a1 + 23);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)a1 + 23);
  else
    v6 = (size_t)a1[1];
  v7 = v6 + 1;
  __dst = (void **)0xAAAAAAAAAAAAAAAALL;
  v35 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  if (v6 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    p_dst = (void **)operator new(v12 + 1);
    v35 = (std::__shared_weak_count *)(v6 + 1);
    v36[0] = v13 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    v35 = 0;
    v36[0] = 0;
    __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v36[0]) = v6 + 1;
    if (!v6)
      goto LABEL_15;
  }
  if (v5 >= 0)
    v14 = a1;
  else
    v14 = *a1;
  memmove(p_dst, v14, v6);
LABEL_15:
  *(_WORD *)((char *)p_dst + v6) = 46;
  v15 = *(char *)(a2 + 23);
  if (v15 >= 0)
    v16 = (const std::string::value_type *)a2;
  else
    v16 = *(const std::string::value_type **)a2;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a2 + 23);
  else
    v17 = *(_QWORD *)(a2 + 8);
  v18 = std::string::append((std::string *)&__dst, v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v36[3] = *((_QWORD *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)&v36[1] = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v36[0]) < 0)
    operator delete(__dst);
  if (v36[3] >= 0)
    v20 = (char *)&v36[1] + HIBYTE(v36[3]);
  else
    v20 = (char *)(v36[1] + v36[2]);
  if (v36[3] >= 0)
    v21 = (char *)&v36[1];
  else
    v21 = (char *)v36[1];
  for (; v21 != v20; ++v21)
    *v21 = __tolower(*v21);
  memset(a4, 170, sizeof(std::string));
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1ED1147D8)
  {
    v23 = (void **)operator new(0x18uLL);
    MEMORY[0x1A858F2E4](v23, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
    v22 = operator new(0x20uLL);
    *v22 = &unk_1E4A09890;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
    v24 = (std::__shared_weak_count *)off_1ED1147E0;
    qword_1ED1147D8 = (uint64_t)v23;
    off_1ED1147E0 = v22;
    if (!v24)
    {
      __dst = v23;
      v35 = (std::__shared_weak_count *)v22;
LABEL_43:
      v27 = v22 + 1;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      goto LABEL_45;
    }
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v23 = (void **)qword_1ED1147D8;
  v22 = off_1ED1147E0;
  __dst = (void **)qword_1ED1147D8;
  v35 = (std::__shared_weak_count *)off_1ED1147E0;
  if (off_1ED1147E0)
    goto LABEL_43;
LABEL_45:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (v36[3] >= 0)
    v29 = (const char *)&v36[1];
  else
    v29 = (const char *)v36[1];
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v37, v29);
  v30 = (const void *)(*(uint64_t (**)(void **, uint64_t))*v23)(v23, v37);
  if (v30)
  {
    ctu::cf::assign();
    CFRelease(v30);
  }
  MEMORY[0x1A858F29C](&v37);
  v31 = v35;
  if (!v35)
    goto LABEL_54;
  v32 = (unint64_t *)&v35->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (v33)
  {
LABEL_54:
    if ((SHIBYTE(v36[3]) & 0x80000000) == 0)
      return;
    goto LABEL_55;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  if (SHIBYTE(v36[3]) < 0)
LABEL_55:
    operator delete((void *)v36[1]);
}

uint64_t __cxx_global_var_init_2()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_1A343C000);
  }
  return result;
}

void **std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 9) < 0)
          operator delete(*(v3 - 4));
        v3 -= 4;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void ResetInfo::ResetInfo(ResetInfo *this)
{
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
}

{
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
}

uint64_t ResetInfo::ResetInfo(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, int a6, __int128 *a7)
{
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string __p;
  __int128 v17;
  uint64_t v18;

  v18 = 0;
  ctu::cf::assign();
  *(_OWORD *)a1 = 0uLL;
  *(_QWORD *)(a1 + 16) = v18;
  v17 = 0uLL;
  v18 = 0;
  ctu::cf::assign();
  *(_OWORD *)(a1 + 24) = 0uLL;
  *(_QWORD *)(a1 + 40) = v18;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v12 = *a4;
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 48) = v12;
  }
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    __p = *(std::string *)a5;
  *(_QWORD *)(a1 + 72) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    *(_DWORD *)(a1 + 80) = a6;
    v13 = (std::string *)(a1 + 88);
    if ((*((char *)a7 + 23) & 0x80000000) == 0)
      goto LABEL_9;
LABEL_11:
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a7, *((_QWORD *)a7 + 1));
    return a1;
  }
  *(_DWORD *)(a1 + 80) = a6;
  v13 = (std::string *)(a1 + 88);
  if (*((char *)a7 + 23) < 0)
    goto LABEL_11;
LABEL_9:
  v14 = *a7;
  v13->__r_.__value_.__r.__words[2] = *((_QWORD *)a7 + 2);
  *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  return a1;
}

void sub_1A355694C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  void **v21;

  if (*(char *)(v20 + 47) < 0)
    operator delete(*v21);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

void ResetInfo::ResetInfo(std::string *this, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t a5, int a6, __int128 *a7)
{
  __int128 v13;
  std::string *v14;
  __int128 v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string __p;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v14 = this + 1;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v13 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v13;
    v14 = this + 1;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      v15 = *a3;
      v14->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
LABEL_6:
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v16 = *a4;
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v16;
  }
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    __p = *(std::string *)a5;
  this[3].__r_.__value_.__r.__words[0] = (std::string::size_type)Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    LODWORD(this[3].__r_.__value_.__r.__words[1]) = a6;
    v17 = (std::string *)((char *)this + 88);
    if ((*((char *)a7 + 23) & 0x80000000) == 0)
      goto LABEL_14;
  }
  else
  {
    LODWORD(this[3].__r_.__value_.__r.__words[1]) = a6;
    v17 = (std::string *)((char *)this + 88);
    if ((*((char *)a7 + 23) & 0x80000000) == 0)
    {
LABEL_14:
      v18 = *a7;
      v17->__r_.__value_.__r.__words[2] = *((_QWORD *)a7 + 2);
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
      return;
    }
  }
  std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a7, *((_QWORD *)a7 + 1));
}

void sub_1A3556B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;

  if (*(char *)(v14 + 47) < 0)
  {
    operator delete(*v15);
    if ((*(char *)(v14 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v14 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v14);
  _Unwind_Resume(exception_object);
}

void ResetInfo::~ResetInfo(void **this)
{
  if (*((char *)this + 111) < 0)
  {
    operator delete(this[11]);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 47) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[6]);
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 23) & 0x80000000) == 0)
      return;
LABEL_9:
    operator delete(*this);
    return;
  }
LABEL_8:
  operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    goto LABEL_9;
}

{
  if (*((char *)this + 111) < 0)
  {
    operator delete(this[11]);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 47) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[6]);
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 23) & 0x80000000) == 0)
      return;
LABEL_9:
    operator delete(*this);
    return;
  }
LABEL_8:
  operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    goto LABEL_9;
}

void ResetInfo::getType(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

void ResetInfo::getSubType(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
  }
}

void ResetInfo::getReason(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 6), *((_QWORD *)this + 7));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 3);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 8);
  }
}

void ResetInfo::getTime(ResetInfo *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  _QWORD *v6[2];

  v3 = *((_QWORD *)this + 9);
  v4 = operator new(0x38uLL);
  v4[8] = 0;
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = v6;
  v5 = v4;
  v6[0] = v4;
  *((_BYTE *)v4 + 24) = 1;
  v6[1] = (_QWORD *)1;
  *((_QWORD *)v4 + 5) = v3;
  *((_QWORD *)v4 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v5, 0, 9, a2);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v5, v6[0]);
}

void sub_1A3556E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t ResetInfo::getChronoTime(ResetInfo *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t ResetInfo::getRadar(ResetInfo *this)
{
  return *((unsigned int *)this + 20);
}

void ResetInfo::getCrashReason(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 111) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 11), *((_QWORD *)this + 12));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 88);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 13);
  }
}

void ResetInfo::setType(ResetInfo *this, const __CFString *a2)
{
  ctu::cf::assign();
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)((char *)this + 15) = 0;
  *((_BYTE *)this + 23) = 0;
}

void sub_1A3556F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ResetInfo::setSubType(ResetInfo *this, const __CFString *a2)
{
  ctu::cf::assign();
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)((char *)this + 39) = 0;
  *((_BYTE *)this + 47) = 0;
}

void sub_1A3556FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void **ResetInfo::setReason(uint64_t a1, void **a2)
{
  void **result;
  __int128 v4;
  size_t v5;
  size_t v6;

  result = (void **)(a1 + 48);
  if (result != a2)
  {
    if (*(char *)(a1 + 71) < 0)
    {
      v5 = (size_t)a2[1];
      if (*((char *)a2 + 23) >= 0)
      {
        v6 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (void **)*a2;
        v6 = v5;
      }
      return std::string::__assign_no_alias<false>(result, a2, v6);
    }
    else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
    {
      return (void **)std::string::__assign_no_alias<true>(result, *a2, (size_t)a2[1]);
    }
    else
    {
      v4 = *(_OWORD *)a2;
      result[2] = a2[2];
      *(_OWORD *)result = v4;
    }
  }
  return result;
}

void ResetInfo::setTime(uint64_t a1, uint64_t a2)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  *(_QWORD *)(a1 + 72) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1A35570B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ResetInfo::setRadar(uint64_t result, int a2)
{
  *(_DWORD *)(result + 80) = a2;
  return result;
}

void **ResetInfo::setCrashReason(uint64_t a1, void **a2)
{
  void **result;
  __int128 v4;
  size_t v5;
  size_t v6;

  result = (void **)(a1 + 88);
  if (result != a2)
  {
    if (*(char *)(a1 + 111) < 0)
    {
      v5 = (size_t)a2[1];
      if (*((char *)a2 + 23) >= 0)
      {
        v6 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (void **)*a2;
        v6 = v5;
      }
      return std::string::__assign_no_alias<false>(result, a2, v6);
    }
    else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
    {
      return (void **)std::string::__assign_no_alias<true>(result, *a2, (size_t)a2[1]);
    }
    else
    {
      v4 = *(_OWORD *)a2;
      result[2] = a2[2];
      *(_OWORD *)result = v4;
    }
  }
  return result;
}

uint64_t ResetInfo::asString@<X0>(ResetInfo *this@<X0>, _BYTE *a2@<X8>)
{
  __int128 v4;
  _QWORD *v5;
  int v6;
  ResetInfo *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  void **v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  char *v23;
  int v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  char v34;
  size_t v35;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  void *__p[2];
  unsigned __int8 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  void *v50[2];
  __int128 v51;
  __int128 v52;
  _OWORD v53[9];
  unint64_t v54;
  _QWORD **v55;
  _QWORD *v56;
  uint64_t v57;

  if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1)
    dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global_3);
  v54 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v53[7] = v4;
  v53[8] = v4;
  v53[5] = v4;
  v53[6] = v4;
  v53[3] = v4;
  v53[4] = v4;
  v53[1] = v4;
  v53[2] = v4;
  v52 = v4;
  v53[0] = v4;
  *(_OWORD *)v50 = v4;
  v51 = v4;
  v48 = v4;
  v49 = v4;
  v46 = v4;
  v47 = v4;
  v45 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v45);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"ResetInfo { Type='", 18);
  v6 = *((char *)this + 23);
  if (v6 >= 0)
    v7 = this;
  else
    v7 = *(ResetInfo **)this;
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)this + 23);
  else
    v8 = *((_QWORD *)this + 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, v8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"' SubType='", 11);
  v11 = *((char *)this + 47);
  if (v11 >= 0)
    v12 = (char *)this + 24;
  else
    v12 = (char *)*((_QWORD *)this + 3);
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)this + 47);
  else
    v13 = *((_QWORD *)this + 4);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, v13);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"' Time='", 8);
  v16 = *((_QWORD *)this + 9);
  v56 = 0;
  v57 = 0;
  v55 = &v56;
  v17 = operator new(0x38uLL);
  v17[8] = 0;
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = &v56;
  v55 = (_QWORD **)v17;
  v56 = v17;
  *((_BYTE *)v17 + 24) = 1;
  v57 = 1;
  *((_QWORD *)v17 + 5) = v16;
  *((_QWORD *)v17 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v55, 0, 9, __p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v55, v56);
  if ((v44 & 0x80u) == 0)
    v18 = __p;
  else
    v18 = (void **)__p[0];
  if ((v44 & 0x80u) == 0)
    v19 = v44;
  else
    v19 = (uint64_t)__p[1];
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v18, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"' Radar='", 9);
  v21 = (_QWORD *)std::ostream::operator<<();
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"' Reason='", 10);
  v23 = (char *)this + 48;
  v24 = *((char *)this + 71);
  if (v24 >= 0)
    v25 = (char *)this + 48;
  else
    v25 = (char *)*((_QWORD *)this + 6);
  if (v24 >= 0)
    v26 = *((unsigned __int8 *)this + 71);
  else
    v26 = *((_QWORD *)this + 7);
  v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v25, v26);
  v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"' MTBF='", 8);
  *(_DWORD *)((char *)v28 + *(_QWORD *)(*v28 - 24) + 8) |= 1u;
  ResetInfo::isMTBF((ResetInfo **)this);
  v29 = (_QWORD *)std::ostream::operator<<();
  v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"' SCD='", 7);
  *(_DWORD *)((char *)v30 + *(_QWORD *)(*v30 - 24) + 8) |= 1u;
  ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)v23, (__int128 **)&ResetInfo::sPatternMasks);
  v31 = (_QWORD *)std::ostream::operator<<();
  v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"' COF='", 7);
  *(_DWORD *)((char *)v32 + *(_QWORD *)(*v32 - 24) + 8) |= 1u;
  ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)v23, (__int128 **)&ResetInfo::sPatternMasks);
  v33 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"' }", 3);
  if (((char)v44 & 0x80000000) == 0)
  {
    v34 = BYTE8(v52);
    if ((BYTE8(v52) & 0x10) == 0)
      goto LABEL_29;
LABEL_32:
    v36 = v52;
    if ((unint64_t)v52 < *((_QWORD *)&v49 + 1))
    {
      *(_QWORD *)&v52 = *((_QWORD *)&v49 + 1);
      v36 = *((_QWORD *)&v49 + 1);
    }
    v37 = (const void *)v49;
    v35 = v36 - v49;
    if ((unint64_t)(v36 - v49) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_46;
    goto LABEL_35;
  }
  operator delete(__p[0]);
  v34 = BYTE8(v52);
  if ((BYTE8(v52) & 0x10) != 0)
    goto LABEL_32;
LABEL_29:
  if ((v34 & 8) == 0)
  {
    v35 = 0;
    a2[23] = 0;
    goto LABEL_42;
  }
  v37 = (const void *)*((_QWORD *)&v47 + 1);
  v35 = *((_QWORD *)&v48 + 1) - *((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v48 + 1) - *((_QWORD *)&v47 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_46:
    std::string::__throw_length_error[abi:ne180100]();
LABEL_35:
  if (v35 >= 0x17)
  {
    v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v38 = v35 | 7;
    v39 = v38 + 1;
    v40 = operator new(v38 + 1);
    *((_QWORD *)a2 + 1) = v35;
    *((_QWORD *)a2 + 2) = v39 | 0x8000000000000000;
    *(_QWORD *)a2 = v40;
    a2 = v40;
    goto LABEL_41;
  }
  a2[23] = v35;
  if (v35)
LABEL_41:
    memmove(a2, v37, v35);
LABEL_42:
  a2[v35] = 0;
  *(_QWORD *)&v45 = *MEMORY[0x1E0DE4F50];
  v41 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&v45 + *(_QWORD *)(v45 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v46 = v41;
  *((_QWORD *)&v46 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v51) < 0)
    operator delete(v50[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A858F92C](v53);
}

void sub_1A3557548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v5 - 72, *(_QWORD **)(v5 - 64));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A3557568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A355757C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A3557590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void ResetInfo::readResetReasonPatterns(ResetInfo *this)
{
  if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1)
    dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global_3);
}

uint64_t ResetInfo::isMTBF(ResetInfo **this)
{
  char *v2;
  int64_t v3;
  ResetInfo *v4;
  int64_t v5;
  int64_t v6;
  uint64_t result;
  char *v8;
  int v9;
  ResetInfo *v10;
  uint64_t v11;

  v2 = (char *)*MEMORY[0x1E0CFB590];
  if (*((char *)this + 23) < 0)
  {
    v4 = *this;
    v3 = (int64_t)this[1];
    v5 = strlen((const char *)*MEMORY[0x1E0CFB590]);
    if (!v5)
      return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(1, (uint64_t)(this + 6), (__int128 **)&ResetInfo::sPatternMasks) ^ 1;
  }
  else
  {
    v3 = *((unsigned __int8 *)this + 23);
    v4 = (ResetInfo *)this;
    v5 = strlen((const char *)*MEMORY[0x1E0CFB590]);
    if (!v5)
      return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(1, (uint64_t)(this + 6), (__int128 **)&ResetInfo::sPatternMasks) ^ 1;
  }
  v6 = v5;
  if (v3 < v5)
    return 0;
  v8 = (char *)v4 + v3;
  v9 = *v2;
  v10 = v4;
  while (1)
  {
    if (v3 - v6 == -1)
      return 0;
    result = (uint64_t)memchr(v10, v9, v3 - v6 + 1);
    if (!result)
      return result;
    v11 = result;
    result = memcmp((const void *)result, v2, v6);
    if (!(_DWORD)result)
      break;
    v10 = (ResetInfo *)(v11 + 1);
    v3 = (int64_t)&v8[-v11 - 1];
    if (v3 < v6)
      return 0;
  }
  if ((char *)v11 != v8 && v11 - (_QWORD)v4 != -1)
    return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(1, (uint64_t)(this + 6), (__int128 **)&ResetInfo::sPatternMasks) ^ 1;
  return result;
}

uint64_t ResetInfo::shouldSetSCD(ResetInfo *this)
{
  return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)this + 48, (__int128 **)&ResetInfo::sPatternMasks);
}

uint64_t ResetInfo::shouldSetCOF(ResetInfo *this)
{
  return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)this + 48, (__int128 **)&ResetInfo::sPatternMasks);
}

uint64_t ResetInfo::addToDict(uint64_t result, __CFDictionary **a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  uint64_t (*v5)(uint64_t);
  uint64_t v7;
  const __CFAllocator *v8;
  __CFDictionary *v9;
  const __CFString **v10;
  const __CFAllocator *v11;
  __CFDictionary *v12;
  const __CFString **v13;
  const __CFAllocator *v14;
  _OWORD *v15;
  __CFDictionary *v16;
  const __CFString **v17;
  uint64_t v18;
  _DWORD *v19;
  const __CFAllocator *v20;
  __CFDictionary *v21;
  const __CFAllocator *v22;
  int isMTBF;
  const __CFAllocator *v24;
  int v25;
  const __CFAllocator *v26;
  int v27;
  const __CFAllocator *v28;
  std::string __p;
  std::string v30;

  if (*a2)
    v5 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  else
    v5 = 0;
  if (v5)
  {
    v7 = result;
    if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1)
      dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global_3);
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v9 = *a2;
    v10 = (const __CFString **)*MEMORY[0x1E0CFB538];
    if (*(char *)(v7 + 23) < 0)
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
    else
      v30 = *(std::string *)v7;
    ctu::cf::update<char const*,std::string>(v9, v10, (uint64_t)&v30, (uint64_t)v8, a5);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      v12 = *a2;
      v13 = (const __CFString **)*MEMORY[0x1E0CFB8D0];
      if ((*(char *)(v7 + 47) & 0x80000000) == 0)
        goto LABEL_12;
    }
    else
    {
      v12 = *a2;
      v13 = (const __CFString **)*MEMORY[0x1E0CFB8D0];
      if ((*(char *)(v7 + 47) & 0x80000000) == 0)
      {
LABEL_12:
        v30 = *(std::string *)(v7 + 24);
        goto LABEL_15;
      }
    }
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v7 + 24), *(_QWORD *)(v7 + 32));
LABEL_15:
    ctu::cf::update<char const*,std::string>(v12, v13, (uint64_t)&v30, (uint64_t)v8, v11);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    v15 = (_OWORD *)(v7 + 48);
    v16 = *a2;
    v17 = (const __CFString **)*MEMORY[0x1E0CFB788];
    if (*(char *)(v7 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v7 + 48), *(_QWORD *)(v7 + 56));
    }
    else
    {
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *v15;
      v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 64);
    }
    ctu::cf::update<char const*,std::string>(v16, v17, (uint64_t)&v30, (uint64_t)v8, v14);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    v18 = *(_QWORD *)(v7 + 72);
    v19 = operator new(0x38uLL);
    v19[8] = 0;
    *(_QWORD *)v19 = 0;
    *((_QWORD *)v19 + 1) = 0;
    *((_QWORD *)v19 + 2) = &v30.__r_.__value_.__l.__size_;
    v30.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
    v30.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
    *((_BYTE *)v19 + 24) = 1;
    v30.__r_.__value_.__r.__words[2] = 1;
    *((_QWORD *)v19 + 5) = v18;
    *((_QWORD *)v19 + 6) = 0xAAAAAAAA00000000;
    Timestamp::asString((uint64_t)&v30, 0, 9, &__p);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v30, (_QWORD *)v30.__r_.__value_.__l.__size_);
    v21 = *a2;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v30, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v30 = __p;
    ctu::cf::update<char const*,std::string>(v21, (const __CFString **)*MEMORY[0x1E0CFB370], (uint64_t)&v30, (uint64_t)v8, v20);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_27;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_27:
      ctu::cf::update<char const*,unsigned int>(*a2, (const __CFString **)"RadarType", *(_DWORD *)(v7 + 80), v8, v22);
      isMTBF = ResetInfo::isMTBF((ResetInfo **)v7);
      ctu::cf::update<char const*,BOOL>(*a2, (const __CFString **)*MEMORY[0x1E0CFB780], isMTBF, (uint64_t)v8, v24);
      v25 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)v15, (__int128 **)&ResetInfo::sPatternMasks);
      ctu::cf::update<char const*,BOOL>(*a2, (const __CFString **)*MEMORY[0x1E0CFB798], v25, (uint64_t)v8, v26);
      v27 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)v15, (__int128 **)&ResetInfo::sPatternMasks);
      return ctu::cf::update<char const*,BOOL>(*a2, (const __CFString **)*MEMORY[0x1E0CFB790], v27, (uint64_t)v8, v28);
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_27;
  }
  return result;
}

void sub_1A3557A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ResetInfo::addToDict(ResetInfo *this, xpc_object_t *a2)
{
  const char *v4;
  xpc_object_t v5;
  xpc_object_t v6;
  const char *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  const char **v10;
  const char *v11;
  xpc_object_t v12;
  xpc_object_t v13;
  uint64_t v14;
  _DWORD *v15;
  void **v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  char isMTBF;
  xpc_object_t v22;
  xpc_object_t v23;
  char v24;
  xpc_object_t v25;
  xpc_object_t v26;
  char v27;
  xpc_object_t v28;
  xpc_object_t v29;
  void *__p[2];
  char v31;
  _DWORD *v32;
  _QWORD *v33[2];

  if (MEMORY[0x1A85902BC](*a2) != MEMORY[0x1E0C812F8])
    return;
  if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1)
  {
    dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global_3);
    v4 = (const char *)this;
    if ((*((char *)this + 23) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  v4 = (const char *)this;
  if (*((char *)this + 23) < 0)
LABEL_4:
    v4 = *(const char **)this;
LABEL_5:
  v5 = xpc_string_create(v4);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB538], v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v7 = (char *)this + 24;
  if (*((char *)this + 47) < 0)
    v7 = *(const char **)v7;
  v8 = xpc_string_create(v7);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB8D0], v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  v10 = (const char **)((char *)this + 48);
  v11 = (char *)this + 48;
  if (*((char *)this + 71) < 0)
    v11 = *v10;
  v12 = xpc_string_create(v11);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB788], v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  v14 = *((_QWORD *)this + 9);
  v15 = operator new(0x38uLL);
  v15[8] = 0;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = v33;
  v32 = v15;
  v33[0] = v15;
  *((_BYTE *)v15 + 24) = 1;
  v33[1] = (_QWORD *)1;
  *((_QWORD *)v15 + 5) = v14;
  *((_QWORD *)v15 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v32, 0, 9, __p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v32, v33[0]);
  if (v31 >= 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  v17 = xpc_string_create((const char *)v16);
  if (!v17)
    v17 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB370], v17);
  v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  if (v31 < 0)
    operator delete(__p[0]);
  v19 = xpc_int64_create(*((unsigned int *)this + 20));
  if (!v19)
    v19 = xpc_null_create();
  xpc_dictionary_set_value(*a2, "RadarType", v19);
  v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  isMTBF = ResetInfo::isMTBF((ResetInfo **)this);
  v22 = xpc_BOOL_create(isMTBF);
  if (!v22)
    v22 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB780], v22);
  v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  v24 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)v10, (__int128 **)&ResetInfo::sPatternMasks);
  v25 = xpc_BOOL_create(v24);
  if (!v25)
    v25 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB798], v25);
  v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
  v27 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)v10, (__int128 **)&ResetInfo::sPatternMasks);
  v28 = xpc_BOOL_create(v27);
  if (!v28)
    v28 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB790], v28);
  v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
}

void sub_1A3557EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void ResetInfo::fetchFromDict(void **this, xpc_object_t *a2)
{
  xpc_object_t value;
  xpc_object_t v5;
  void **v6;
  xpc_object_t v7;
  void **v8;
  xpc_object_t v9;
  xpc_object_t v10;
  void *v11;
  char v12;
  xpc_object_t object;
  __int128 v14;
  void *v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;

  if (MEMORY[0x1A85902BC](*a2) != MEMORY[0x1E0C812F8])
    return;
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB538]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  __p = 0;
  v17 = 0;
  v18 = 0;
  xpc::dyn_cast_or_default();
  if (*((char *)this + 23) < 0)
    operator delete(*this);
  *(_OWORD *)this = v14;
  this[2] = v15;
  HIBYTE(v15) = 0;
  LOBYTE(v14) = 0;
  xpc_release(object);
  v5 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB8D0]);
  object = v5;
  if (v5)
    xpc_retain(v5);
  else
    object = xpc_null_create();
  __p = 0;
  v17 = 0;
  v18 = 0;
  xpc::dyn_cast_or_default();
  v6 = this + 3;
  if (*((char *)this + 47) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v14;
  this[5] = v15;
  HIBYTE(v15) = 0;
  LOBYTE(v14) = 0;
  xpc_release(object);
  v7 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB788]);
  object = v7;
  if (v7)
    xpc_retain(v7);
  else
    object = xpc_null_create();
  __p = 0;
  v17 = 0;
  v18 = 0;
  xpc::dyn_cast_or_default();
  v8 = this + 6;
  if (*((char *)this + 71) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v14;
  this[8] = v15;
  HIBYTE(v15) = 0;
  LOBYTE(v14) = 0;
  xpc_release(object);
  v9 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB370]);
  object = v9;
  if (v9)
    xpc_retain(v9);
  else
    object = xpc_null_create();
  Timestamp::Timestamp((Timestamp *)&v14);
  Timestamp::asString((uint64_t)&v14, 0, 9, &__p);
  xpc::dyn_cast_or_default();
  this[9] = Timestamp::convert((uint64_t)&v11);
  if (v12 < 0)
  {
    operator delete(v11);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
      goto LABEL_22;
LABEL_25:
    operator delete(__p);
    goto LABEL_22;
  }
  if (SHIBYTE(v18) < 0)
    goto LABEL_25;
LABEL_22:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v14, *((_QWORD **)&v14 + 1));
  xpc_release(object);
  v10 = xpc_dictionary_get_value(*a2, "RadarType");
  __p = v10;
  if (v10)
    xpc_retain(v10);
  else
    __p = xpc_null_create();
  *((_DWORD *)this + 20) = xpc::dyn_cast_or_default();
  xpc_release(__p);
}

void sub_1A3558210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t a15, char a16, uint64_t a17, uint64_t a18, xpc_object_t object, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t ResetInfo::reasonMatchesAtLeastOneApplicablePattern(int a1, uint64_t a2, __int128 **a3)
{
  __int128 *v3;
  int v4;
  __int128 v5;
  __int128 v6;
  int v7;
  __int128 v8;
  std::string::size_type size;
  std::string *v10;
  uint64_t v11;
  std::sub_match<const char *> *v12;
  char *v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  std::sub_match<const char *> *begin;
  std::vector<std::csub_match>::pointer end;
  unint64_t v25;
  std::vector<std::csub_match> *v26;
  _QWORD *p_end;
  _BYTE *p_end_cap;
  int v29;
  int v30;
  int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 *v37;
  std::locale v39[2];
  _BYTE v40[48];
  std::string v41;
  _BYTE v42[32];
  _BYTE v43[48];
  char *v44;
  char *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  char *v50;
  std::vector<std::csub_match> v51[2];
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v3 = *a3;
  v37 = a3[1];
  if (*a3 != v37)
  {
    v4 = 0;
    while (1)
    {
      *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)v42 = v5;
      *(_OWORD *)&v42[16] = v5;
      if (*((char *)v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v42, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
      }
      else
      {
        v6 = *v3;
        *(_QWORD *)&v42[16] = *((_QWORD *)v3 + 2);
        *(_OWORD *)v42 = v6;
      }
      *(_DWORD *)&v42[24] = *((_DWORD *)v3 + 6);
      if ((*(_DWORD *)&v42[24] & a1) != 0)
      {
        memset(&v41, 170, sizeof(v41));
        if ((v42[23] & 0x80000000) != 0)
          std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)v42, *(std::string::size_type *)&v42[8]);
        else
          v41 = *(std::string *)v42;
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v40[16] = v8;
        *(_OWORD *)&v40[32] = v8;
        *(_OWORD *)&v39[0].__locale_ = v8;
        *(_OWORD *)v40 = v8;
        MEMORY[0x1A858F8F0](v39);
        v39[1].__locale_ = (std::locale::__imp *)std::locale::use_facet(v39, MEMORY[0x1E0DE4A90]);
        *(_QWORD *)v40 = std::locale::use_facet(v39, MEMORY[0x1E0DE4C08]);
        memset(&v40[8], 0, 40);
        size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
        if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &v41;
        else
          v10 = (std::string *)v41.__r_.__value_.__r.__words[0];
        if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v41.__r_.__value_.__l.__size_;
        if ((char *)v10 + size != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>((uint64_t)v39, (char *)v10, (char *)v10 + size))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
        v11 = *(unsigned __int8 *)(a2 + 23);
        if ((v11 & 0x80u) == 0)
          v12 = (std::sub_match<const char *> *)a2;
        else
          v12 = *(std::sub_match<const char *> **)a2;
        if ((v11 & 0x80u) != 0)
          v11 = *(_QWORD *)(a2 + 8);
        v13 = (char *)v12 + v11;
        *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v49 = v14;
        v46 = 0xAAAAAAAAAAAAAA00;
        *(_QWORD *)&v43[40] = 0xAAAAAAAAAAAAAAAALL;
        v44 = 0;
        v45 = 0;
        v47 = 0;
        v48 = 0;
        LOBYTE(v49) = 0;
        BYTE8(v49) = 0;
        v50 = 0;
        memset(v43, 0, 41);
        v57 = v14;
        v54 = 0xAAAAAAAAAAAAAA00;
        v51[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
        v52 = 0;
        v53 = 0;
        v55 = 0;
        v56 = 0;
        LOBYTE(v57) = 0;
        BYTE8(v57) = 0;
        v58 = 0;
        memset(v51, 0, 41);
        v15 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v39, v12, (std::sub_match<const char *> *)((char *)v12 + v11), v51, 4160);
        v16 = v52;
        v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v51[0].__end_ - (char *)v51[0].__begin_) >> 3);
        v19 = *(_QWORD *)&v43[8];
        v18 = *(char **)v43;
        v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v43[8] - *(_QWORD *)v43) >> 3);
        if (v17 <= v20)
        {
          if (v17 < v20)
          {
            v19 = *(_QWORD *)v43 + 8 * (((char *)v51[0].__end_ - (char *)v51[0].__begin_) >> 3);
            *(_QWORD *)&v43[8] = v19;
          }
        }
        else
        {
          std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append((std::vector<std::ssub_match> *)v43, v17 - v20);
          v19 = *(_QWORD *)&v43[8];
          v18 = *(char **)v43;
        }
        if ((char *)v19 == v18)
        {
          begin = v51[0].__begin_;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          end = v51[0].__end_;
          begin = v51[0].__begin_;
          do
          {
            v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3);
            v26 = (std::vector<std::csub_match> *)&begin[v21];
            if (v25 <= v22)
              v26 = &v51[1];
            *(_QWORD *)&v18[v21 * 24] = (char *)v12 + (unint64_t)v26->__begin_ - v16;
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v51[0].__end_ - (char *)v51[0].__begin_) >> 3) <= v22)
              p_end = &v51[1].__end_;
            else
              p_end = &v51[0].__begin_[v21].second;
            *(_QWORD *)(*(_QWORD *)v43 + v21 * 24 + 8) = (char *)v12 + *p_end - v16;
            end = v51[0].__end_;
            begin = v51[0].__begin_;
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v51[0].__end_ - (char *)v51[0].__begin_) >> 3) <= v22)
              p_end_cap = &v51[1].__end_cap_;
            else
              p_end_cap = &v51[0].__begin_[v21].matched;
            v18 = *(char **)v43;
            *(_BYTE *)(*(_QWORD *)v43 + v21 * 24 + 16) = *p_end_cap;
            ++v22;
            ++v21;
          }
          while (v22 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v43[8] - (_QWORD)v18) >> 3));
        }
        *(_QWORD *)&v43[24] = v13;
        *(_QWORD *)&v43[32] = v13;
        v44 = (char *)v12 + v52 - v16;
        v45 = (char *)v12 + v53 - v16;
        LOBYTE(v46) = v54;
        v43[40] = 0;
        v47 = (char *)v12 + v55 - v16;
        v48 = (char *)v12 + v56 - v16;
        v29 = v57;
        LOBYTE(v49) = v57;
        v50 = v44;
        BYTE8(v49) = BYTE8(v57);
        if (begin)
        {
          v51[0].__end_ = begin;
          operator delete(begin);
          v29 = v49;
          v18 = *(char **)v43;
        }
        if (v29)
          v30 = v15 ^ 1;
        else
          v30 = 1;
        if (v18)
        {
          *(_QWORD *)&v43[8] = v18;
          operator delete(v18);
        }
        v31 = v15 & v30;
        if (v31)
          v7 = 2;
        else
          v7 = 0;
        v32 = *(std::__shared_weak_count **)&v40[32];
        if (!*(_QWORD *)&v40[32])
          goto LABEL_55;
        v33 = (unint64_t *)(*(_QWORD *)&v40[32] + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
          std::locale::~locale(v39);
          if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_62:
            operator delete(v41.__r_.__value_.__l.__data_);
            v4 |= v31;
            if ((v42[23] & 0x80000000) == 0)
              goto LABEL_58;
LABEL_57:
            operator delete(*(void **)v42);
            goto LABEL_58;
          }
        }
        else
        {
LABEL_55:
          std::locale::~locale(v39);
          if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_62;
        }
        v4 |= v31;
        if ((v42[23] & 0x80000000) != 0)
          goto LABEL_57;
      }
      else
      {
        v7 = 3;
        if ((v42[23] & 0x80000000) != 0)
          goto LABEL_57;
      }
LABEL_58:
      if (v7 == 3 || !v7)
      {
        v3 += 2;
        if (v3 != v37)
          continue;
      }
      return v4 & 1;
    }
  }
  LOBYTE(v4) = 0;
  return v4 & 1;
}

void sub_1A35587F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A3558804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::locale a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,__int128 a52)
{
  uint64_t v52;
  NSObject *v55;
  void **p_p;

  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::locale::~locale(&a19);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    v55 = GetOsLogContext()[1];
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      p_p = (void **)&__p;
      if (a32 < 0)
        p_p = __p;
      *(_DWORD *)(v52 - 224) = 136315138;
      *(_QWORD *)((char *)&a52 + 4) = p_p;
      _os_log_error_impl(&dword_1A343C000, v55, OS_LOG_TYPE_ERROR, "Exception with %s", (uint8_t *)(v52 - 224), 0xCu);
    }
    __cxa_rethrow();
  }
  if (a32 < 0)
    operator delete(__p);
  if (SHIBYTE(a36) < 0)
  {
    operator delete(a34);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1A355891CLL);
}

void sub_1A35588E0()
{
  __cxa_end_catch();
  JUMPOUT(0x1A35588ECLL);
}

void sub_1A3558914(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1A355891CLL);
  __clang_call_terminate(a1);
}

void ___ZN9ResetInfo23readResetReasonPatternsEv_block_invoke()
{
  unsigned __int8 v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  size_t v15;
  uint64_t v16;
  __int128 *v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  void *v21;
  size_t v22;
  uint64_t v23;
  __int128 *v24;
  char v25;
  __int128 v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  void **v31;
  unint64_t v32;
  __int128 v33;
  std::string *v34;
  __int128 *v35;
  void **v36;
  uint64_t v37;
  __int128 v38;
  std::string *v39;
  __int128 *v40;
  uint64_t v41;
  __int16 v42[8];

  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED114D18 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v1 = qword_1ED114D18;
    if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_DEBUG))
      goto LABEL_4;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
    v1 = qword_1ED114D18;
    if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_DEBUG))
      goto LABEL_4;
  }
  v42[0] = 0;
  _os_log_debug_impl(&dword_1A343C000, v1, OS_LOG_TYPE_DEBUG, "Default pattern masks will be used", (uint8_t *)v42, 2u);
LABEL_4:
  v3 = kDefaultPatternMasks;
  v2 = qword_1ED114DB8;
  v4 = qword_1ED114DB8 - kDefaultPatternMasks;
  v5 = (qword_1ED114DB8 - kDefaultPatternMasks) >> 5;
  v6 = qword_1ED114D00;
  v7 = ResetInfo::sPatternMasks;
  if (v5 > (qword_1ED114D00 - ResetInfo::sPatternMasks) >> 5)
  {
    if (ResetInfo::sPatternMasks)
    {
      v8 = qword_1ED114CF8;
      v9 = (void *)ResetInfo::sPatternMasks;
      if (qword_1ED114CF8 != ResetInfo::sPatternMasks)
      {
        do
        {
          if (*(char *)(v8 - 9) < 0)
            operator delete(*(void **)(v8 - 32));
          v8 -= 32;
        }
        while (v8 != v7);
        v9 = (void *)ResetInfo::sPatternMasks;
      }
      qword_1ED114CF8 = v7;
      operator delete(v9);
      v6 = 0;
      ResetInfo::sPatternMasks = 0;
      qword_1ED114CF8 = 0;
      qword_1ED114D00 = 0;
    }
    if (v4 < 0)
      goto LABEL_79;
    v27 = v6 >> 4;
    if (v6 >> 4 <= v5)
      v27 = v5;
    v28 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0;
    v29 = 0x7FFFFFFFFFFFFFFLL;
    if (!v28)
      v29 = v27;
    if (v29 >> 59)
LABEL_79:
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    v30 = 4 * v29;
    v31 = (void **)operator new(32 * v29);
    ResetInfo::sPatternMasks = (uint64_t)v31;
    qword_1ED114CF8 = (uint64_t)v31;
    qword_1ED114D00 = (uint64_t)&v31[v30];
    if (v3 != v2)
    {
      v32 = 0;
      do
      {
        v34 = (std::string *)&v31[v32 / 8];
        v35 = (__int128 *)(v3 + v32);
        if (*(char *)(v3 + v32 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v34, *(const std::string::value_type **)v35, *((_QWORD *)v35 + 1));
        }
        else
        {
          v33 = *v35;
          v34->__r_.__value_.__r.__words[2] = *((_QWORD *)v35 + 2);
          *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v33;
        }
        LODWORD(v31[v32 / 8 + 3]) = *(_DWORD *)(v3 + v32 + 24);
        v32 += 32;
      }
      while (v3 + v32 != v2);
      v31 = (void **)((char *)v31 + v32);
    }
    goto LABEL_74;
  }
  v10 = (qword_1ED114CF8 - ResetInfo::sPatternMasks) >> 5;
  if (v10 < v5)
  {
    v11 = kDefaultPatternMasks + 32 * v10;
    if (qword_1ED114CF8 != ResetInfo::sPatternMasks)
    {
      v12 = 0;
      v13 = 32 * v10;
      do
      {
        v16 = v7 + v12;
        v17 = (__int128 *)(v3 + v12);
        if (v3 != v7)
        {
          v18 = *((_BYTE *)v17 + 23);
          if (*(char *)(v16 + 23) < 0)
          {
            if (v18 >= 0)
              v14 = (void *)(v3 + v12);
            else
              v14 = *(void **)(v3 + v12);
            if (v18 >= 0)
              v15 = *((unsigned __int8 *)v17 + 23);
            else
              v15 = *(_QWORD *)(v3 + v12 + 8);
            std::string::__assign_no_alias<false>((void **)(v7 + v12), v14, v15);
          }
          else if ((*((_BYTE *)v17 + 23) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>((_QWORD *)(v7 + v12), *(void **)(v3 + v12), *(_QWORD *)(v3 + v12 + 8));
          }
          else
          {
            v19 = *v17;
            *(_QWORD *)(v16 + 16) = *((_QWORD *)v17 + 2);
            *(_OWORD *)v16 = v19;
          }
        }
        *(_DWORD *)(v16 + 24) = *((_DWORD *)v17 + 6);
        v12 += 32;
      }
      while (v13 != v12);
      v7 = qword_1ED114CF8;
    }
    v36 = (void **)v7;
    if (v11 != v2)
    {
      v37 = 0;
      do
      {
        v39 = (std::string *)(v7 + v37);
        v40 = (__int128 *)(v11 + v37);
        if (*(char *)(v11 + v37 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v39, *(const std::string::value_type **)v40, *((_QWORD *)v40 + 1));
        }
        else
        {
          v38 = *v40;
          v39->__r_.__value_.__r.__words[2] = *((_QWORD *)v40 + 2);
          *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v38;
        }
        *(_DWORD *)(v7 + v37 + 24) = *(_DWORD *)(v11 + v37 + 24);
        v37 += 32;
      }
      while (v11 + v37 != v2);
      v36 = (void **)(v7 + v37);
    }
    v31 = v36;
    goto LABEL_74;
  }
  if (kDefaultPatternMasks == qword_1ED114DB8)
  {
    v41 = ResetInfo::sPatternMasks;
    v31 = (void **)qword_1ED114CF8;
    if (qword_1ED114CF8 == ResetInfo::sPatternMasks)
      goto LABEL_74;
    goto LABEL_71;
  }
  v20 = 0;
  do
  {
    v23 = v7 + v20;
    v24 = (__int128 *)(v3 + v20);
    if (v3 != v7)
    {
      v25 = *((_BYTE *)v24 + 23);
      if (*(char *)(v23 + 23) < 0)
      {
        if (v25 >= 0)
          v21 = (void *)(v3 + v20);
        else
          v21 = *(void **)(v3 + v20);
        if (v25 >= 0)
          v22 = *((unsigned __int8 *)v24 + 23);
        else
          v22 = *(_QWORD *)(v3 + v20 + 8);
        std::string::__assign_no_alias<false>((void **)(v7 + v20), v21, v22);
      }
      else if ((*((_BYTE *)v24 + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>((_QWORD *)(v7 + v20), *(void **)(v3 + v20), *(_QWORD *)(v3 + v20 + 8));
      }
      else
      {
        v26 = *v24;
        *(_QWORD *)(v23 + 16) = *((_QWORD *)v24 + 2);
        *(_OWORD *)v23 = v26;
      }
    }
    *(_DWORD *)(v23 + 24) = *((_DWORD *)v24 + 6);
    v20 += 32;
  }
  while (v3 + v20 != v2);
  v41 = v7 + v20;
  v31 = (void **)qword_1ED114CF8;
  if (qword_1ED114CF8 != v41)
  {
    do
    {
LABEL_71:
      if (*((char *)v31 - 9) < 0)
        operator delete(*(v31 - 4));
      v31 -= 4;
    }
    while (v31 != (void **)v41);
    v31 = (void **)v41;
  }
LABEL_74:
  qword_1ED114CF8 = (uint64_t)v31;
}

void ***std::__exception_guard_exceptions<std::vector<ResetInfo::RegexPatternAndReasonMask>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 9) < 0)
            operator delete(*(v4 - 4));
          v4 -= 4;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t _GLOBAL__sub_I_ResetInfo_cpp()
{
  char *v0;
  unint64_t v1;
  std::string *v2;
  void **v3;
  void *v5[2];
  char v6;
  _DWORD v7[2];
  void *v8[2];
  char v9;
  int v10;
  void *v11;
  __int128 v12;
  int v13;
  void *v14;
  __int128 v15;
  int v16;
  void *v17;
  __int128 v18;
  int v19;
  void *v20;
  __int128 v21;
  int v22;
  void *v23;
  __int128 v24;
  int v25;
  void *v26;
  __int128 v27;
  int v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  void *v61[3];
  int v62;
  void *v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  void *v67[2];
  char v68;
  int v69;
  void *__p;
  uint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  __cxa_atexit((void (*)(void *))std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100], &ResetInfo::sPatternMasks, &dword_1A343C000);
  v6 = 15;
  strcpy((char *)v5, ".*\\[abmtool\\].*");
  v7[0] = 1;
  v9 = 14;
  strcpy((char *)v8, ".*\\[bbutil\\].*");
  v10 = 1;
  v11 = operator new(0x50uLL);
  v12 = xmmword_1A3584600;
  strcpy((char *)v11, ".*AP forced coredump via SPMI - Please analyze reason from AP perspective.*");
  v13 = 1;
  v14 = operator new(0x19uLL);
  v15 = xmmword_1A357F840;
  strcpy((char *)v14, ".*(after OTASP/OTAPA).*");
  v16 = 1;
  v17 = operator new(0x38uLL);
  v18 = xmmword_1A3584610;
  strcpy((char *)v17, ".*Carrier bundle updated settings that require reset");
  v19 = 1;
  v20 = operator new(0x28uLL);
  v21 = xmmword_1A35802D0;
  strcpy((char *)v20, ".*Manually Triggering BB Core Dump");
  v22 = 1;
  v23 = operator new(0x28uLL);
  v24 = xmmword_1A357F480;
  strcpy((char *)v23, ".*modem manager triggered reset.*");
  v25 = 1;
  v26 = operator new(0x38uLL);
  v27 = xmmword_1A3581A80;
  strcpy((char *)v26, ".*User requested to change Baseband field test config");
  v28 = 1;
  v29 = operator new(0x28uLL);
  v30 = 33;
  v31 = 0x8000000000000028;
  strcpy((char *)v29, ".*applebbproxy setup AT interface");
  v32 = 1;
  v33 = operator new(0x28uLL);
  v34 = 36;
  v35 = 0x8000000000000028;
  strcpy((char *)v33, ".*Resetting Baseband after restore.*");
  v36 = 1;
  v37 = operator new(0x30uLL);
  v38 = 42;
  v39 = 0x8000000000000030;
  strcpy((char *)v37, ".*Resetting baseband after pushing files.*");
  v40 = 1;
  v41 = operator new(0x40uLL);
  v42 = 59;
  v43 = 0x8000000000000040;
  strcpy((char *)v41, ".*Resetting Baseband after successful restore of carrier NV");
  v44 = 1;
  v45 = operator new(0x30uLL);
  v46 = 41;
  v47 = 0x8000000000000030;
  strcpy((char *)v45, ".*Resetting modem from WirelessAutomation");
  v48 = 1;
  v49 = operator new(0x20uLL);
  v50 = 25;
  v51 = 0x8000000000000020;
  strcpy((char *)v49, ".*Requesting Soft Reset.*");
  v52 = 1;
  v53 = operator new(0x30uLL);
  v54 = 42;
  v55 = 0x8000000000000030;
  strcpy((char *)v53, ".*AP-triggered((?!: locationd PDS).*|(.*))");
  v56 = 1;
  v59 = 0x8000000000000038;
  v57 = operator new(0x38uLL);
  v58 = 50;
  strcpy((char *)v57, ".*User ((requested state)|(Triggered Core))dump.*");
  v60 = 1;
  HIBYTE(v61[2]) = 19;
  strcpy((char *)v61, ".*SIM APNs change.*");
  v62 = 1;
  v63 = operator new(0x28uLL);
  v65 = 0x8000000000000028;
  v64 = 34;
  strcpy((char *)v63, ".*AttachAPN Push to force detach.*");
  v66 = 1;
  v68 = 14;
  strcpy((char *)v67, ".*CSIM reset.*");
  v69 = 1;
  __p = operator new(0x20uLL);
  v72 = 0x8000000000000020;
  v71 = 25;
  strcpy((char *)__p, ".*com\\.apple\\.symptomsd.*");
  v73 = 1;
  qword_1ED114DB8 = 0;
  qword_1ED114DC0 = 0;
  kDefaultPatternMasks = 0;
  v0 = (char *)operator new(0x280uLL);
  v1 = 0;
  kDefaultPatternMasks = (uint64_t)v0;
  qword_1ED114DB8 = (uint64_t)v0;
  qword_1ED114DC0 = (uint64_t)(v0 + 640);
  do
  {
    v2 = (std::string *)&v0[v1 * 4];
    v3 = &v5[v1 / 2];
    if (*(&v6 + v1 * 4) < 0)
    {
      std::string::__init_copy_ctor_external(v2, (const std::string::value_type *)*v3, (std::string::size_type)v3[1]);
    }
    else
    {
      *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)v3;
      v2->__r_.__value_.__r.__words[2] = (std::string::size_type)v3[2];
    }
    *(_DWORD *)&v0[v1 * 4 + 24] = v7[v1];
    v1 += 8;
  }
  while (v1 != 160);
  qword_1ED114DB8 = (uint64_t)(v0 + 640);
  if (SHIBYTE(v72) < 0)
  {
    operator delete(__p);
    if ((v68 & 0x80000000) == 0)
    {
LABEL_8:
      if ((SHIBYTE(v65) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_29;
    }
  }
  else if ((v68 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(v67[0]);
  if ((SHIBYTE(v65) & 0x80000000) == 0)
  {
LABEL_9:
    if ((SHIBYTE(v61[2]) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v63);
  if ((SHIBYTE(v61[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v59) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  operator delete(v61[0]);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_11:
    if ((SHIBYTE(v55) & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v57);
  if ((SHIBYTE(v55) & 0x80000000) == 0)
  {
LABEL_12:
    if ((SHIBYTE(v51) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  operator delete(v53);
  if ((SHIBYTE(v51) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v47) & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v49);
  if ((SHIBYTE(v47) & 0x80000000) == 0)
  {
LABEL_14:
    if ((SHIBYTE(v43) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v45);
  if ((SHIBYTE(v43) & 0x80000000) == 0)
  {
LABEL_15:
    if ((SHIBYTE(v39) & 0x80000000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  operator delete(v41);
  if ((SHIBYTE(v39) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v35) & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  operator delete(v37);
  if ((SHIBYTE(v35) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v31) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v33);
  if ((SHIBYTE(v31) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v27) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v29);
  if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v24) & 0x80000000) == 0)
      goto LABEL_20;
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v26);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
LABEL_20:
    if ((SHIBYTE(v21) & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v23);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
LABEL_21:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v20);
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_22:
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v17);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_23:
    if ((SHIBYTE(v12) & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v14);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
LABEL_24:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_25;
LABEL_45:
    operator delete(v8[0]);
    if ((v6 & 0x80000000) == 0)
      return __cxa_atexit((void (*)(void *))std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100], &kDefaultPatternMasks, &dword_1A343C000);
LABEL_46:
    operator delete(v5[0]);
    return __cxa_atexit((void (*)(void *))std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100], &kDefaultPatternMasks, &dword_1A343C000);
  }
LABEL_44:
  operator delete(v11);
  if (v9 < 0)
    goto LABEL_45;
LABEL_25:
  if (v6 < 0)
    goto LABEL_46;
  return __cxa_atexit((void (*)(void *))std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100], &kDefaultPatternMasks, &dword_1A343C000);
}

void sub_1A3559648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a68;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *a79;
  char a80;
  void *a81;
  char a82;
  void *a83;
  char a84;
  void *a85;

  std::__exception_guard_exceptions<std::vector<ResetInfo::RegexPatternAndReasonMask>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a10);
  if (SLOBYTE(STACK[0x28F]) < 0)
  {
    operator delete((void *)STACK[0x278]);
    if ((SLOBYTE(STACK[0x26F]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x24F]) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((SLOBYTE(STACK[0x26F]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete((void *)STACK[0x258]);
  if ((SLOBYTE(STACK[0x24F]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((SLOBYTE(STACK[0x22F]) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  operator delete((void *)STACK[0x238]);
  if ((SLOBYTE(STACK[0x22F]) & 0x80000000) == 0)
  {
LABEL_5:
    if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x218]);
  if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0)
  {
LABEL_6:
    if ((a84 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  operator delete(a85);
  if ((a84 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a82 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  operator delete(a83);
  if ((a82 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a80 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  operator delete(a81);
  if ((a80 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a78 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  operator delete(a79);
  if ((a78 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a76 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  operator delete(a77);
  if ((a76 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a74 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  operator delete(a75);
  if ((a74 & 0x80000000) == 0)
  {
LABEL_12:
    if ((a72 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  operator delete(a73);
  if ((a72 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a66 & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  operator delete(a68);
  if ((a66 & 0x80000000) == 0)
  {
LABEL_14:
    if ((a59 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(a61);
  if ((a59 & 0x80000000) == 0)
  {
LABEL_15:
    if ((a52 & 0x80000000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  operator delete(a54);
  if ((a52 & 0x80000000) == 0)
  {
LABEL_16:
    if ((a45 & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  operator delete(a47);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_17:
    if ((a38 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  operator delete(a40);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_18:
    if ((a31 & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_39;
  }
LABEL_38:
  operator delete(a33);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_19:
    if ((a24 & 0x80000000) == 0)
      goto LABEL_20;
    goto LABEL_40;
  }
LABEL_39:
  operator delete(a26);
  if ((a24 & 0x80000000) == 0)
  {
LABEL_20:
    if ((a17 & 0x80000000) == 0)
LABEL_42:
      _Unwind_Resume(a1);
LABEL_41:
    operator delete(a12);
    _Unwind_Resume(a1);
  }
LABEL_40:
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
    goto LABEL_42;
  goto LABEL_41;
}

char *ssctl::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, void **a3)
{
  tlv *v5;
  unsigned int v6;

  v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  v6 = *(unsigned __int8 *)v5;
  v5 = (tlv *)((char *)v5 + 1);
  tlv::throwIfNotEnoughBytes(v5, a2, (const unsigned __int8 *)v6);
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, (uint64_t)v5, (char *)v5 + v6, v6);
  return (char *)v5 + v6;
}

{
  tlv *v5;
  unsigned int v6;

  v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  v6 = *(unsigned __int16 *)v5;
  v5 = (tlv *)((char *)v5 + 2);
  tlv::throwIfNotEnoughBytes(v5, a2, (const unsigned __int8 *)v6);
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, (uint64_t)v5, (char *)v5 + v6, v6);
  return (char *)v5 + v6;
}

_BYTE *ssctl::tlv::abm::writeField(_BYTE *a1, _BYTE *a2)
{
  _BYTE *v2;
  uint64_t v3;
  _BYTE *v4;
  size_t v5;
  size_t v6;
  uint64_t v7;

  v2 = a2;
  LOBYTE(v3) = a2[23];
  if ((v3 & 0x80u) != 0)
    v3 = *((_QWORD *)a2 + 1);
  *a1 = v3;
  v4 = a1 + 1;
  v5 = *((_QWORD *)a2 + 1);
  if ((char)a2[23] >= 0)
  {
    v6 = a2[23];
  }
  else
  {
    a2 = *(_BYTE **)a2;
    v6 = v5;
  }
  memcpy(a1 + 1, a2, v6);
  v7 = v2[23];
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)v2 + 1);
  return &v4[v7];
}

uint64_t ssctl::tlv::abm::getFieldSize(uint64_t a1)
{
  uint64_t v1;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  return v1 + 1;
}

{
  uint64_t v1;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  return v1 + 2;
}

void tlv::parseV<ssctl::tlv::abm::ErrorMessage>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unsigned int v7;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  v7 = *(unsigned __int8 *)v5;
  v5 = (tlv *)((char *)v5 + 1);
  tlv::throwIfNotEnoughBytes(v5, v6, (const unsigned __int8 *)v7);
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>((void **)a3, (uint64_t)v5, (char *)v5 + v7, v7);
  *a1 = (tlv *)((char *)v5 + v7);
}

void sub_1A3559A0C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A35599F8);
}

void sub_1A3559A1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<ssctl::tlv::abm::ErrorMessage>(uint64_t a1)
{
  uint64_t v1;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  return v1 + 4;
}

void *tlv::writeV<ssctl::tlv::abm::ErrorMessage>(_BYTE **a1, _BYTE *a2)
{
  _BYTE *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  size_t v7;
  size_t v8;
  void *result;
  uint64_t v10;

  v2 = a2;
  v4 = *a1;
  LOBYTE(v5) = a2[23];
  if ((v5 & 0x80u) != 0)
    v5 = *((_QWORD *)a2 + 1);
  *v4 = v5;
  v6 = v4 + 1;
  v7 = *((_QWORD *)a2 + 1);
  if ((char)a2[23] >= 0)
  {
    v8 = a2[23];
  }
  else
  {
    a2 = *(_BYTE **)a2;
    v8 = v7;
  }
  result = memcpy(v6, a2, v8);
  v10 = v2[23];
  if ((v10 & 0x80u) != 0)
    v10 = *((_QWORD *)v2 + 1);
  *a1 = &v6[v10];
  return result;
}

char *ssctl::tlv::abm::writeField(_WORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _WORD *v4;
  size_t v5;
  size_t v6;
  uint64_t v7;

  v2 = a2;
  LOWORD(v3) = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = a2[1];
  *a1 = v3;
  v4 = a1 + 1;
  v5 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v6 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (_QWORD *)*a2;
    v6 = v5;
  }
  memcpy(a1 + 1, a2, v6);
  v7 = *((unsigned __int8 *)v2 + 23);
  if ((v7 & 0x80u) != 0)
    v7 = v2[1];
  return (char *)v4 + v7;
}

void tlv::parseV<ssctl::tlv::abm::ExtendedErrorMessage>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unsigned int v7;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)2);
  v7 = *(unsigned __int16 *)v5;
  v5 = (tlv *)((char *)v5 + 2);
  tlv::throwIfNotEnoughBytes(v5, v6, (const unsigned __int8 *)v7);
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>((void **)a3, (uint64_t)v5, (char *)v5 + v7, v7);
  *a1 = (tlv *)((char *)v5 + v7);
}

void sub_1A3559C44(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A3559C30);
}

void sub_1A3559C54(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<ssctl::tlv::abm::ExtendedErrorMessage>(uint64_t a1)
{
  uint64_t v1;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  return v1 + 5;
}

void *tlv::writeV<ssctl::tlv::abm::ExtendedErrorMessage>(_WORD **a1, _QWORD *a2)
{
  _QWORD *v2;
  _WORD *v4;
  uint64_t v5;
  char *v6;
  size_t v7;
  size_t v8;
  void *result;
  uint64_t v10;

  v2 = a2;
  v4 = *a1;
  LOWORD(v5) = *((unsigned __int8 *)a2 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = a2[1];
  *v4 = v5;
  v6 = (char *)(v4 + 1);
  v7 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v8 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (_QWORD *)*a2;
    v8 = v7;
  }
  result = memcpy(v6, a2, v8);
  v10 = *((unsigned __int8 *)v2 + 23);
  if ((v10 & 0x80u) != 0)
    v10 = v2[1];
  *a1 = &v6[v10];
  return result;
}

tlv *ssctl::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, uint64_t a3)
{
  tlv *v3;
  _QWORD *v6;
  void **v7;
  tlv *v8;
  unsigned int v9;
  tlv *v10;
  _QWORD *v11;

  v3 = a1;
  if (a1 >= (tlv *)a2)
    return a1;
  do
  {
    v11 = *(_QWORD **)(a3 + 8);
    if ((unint64_t)v11 >= *(_QWORD *)(a3 + 16))
    {
      v6 = std::vector<ssctl::tlv::abm::ErrorMessage>::__emplace_back_slow_path<>((void **)a3);
    }
    else
    {
      *v11 = 0;
      v11[1] = 0;
      v6 = v11 + 3;
      v11[2] = 0;
    }
    *(_QWORD *)(a3 + 8) = v6;
    v7 = (void **)(v6 - 3);
    tlv::throwIfNotEnoughBytes(v3, a2, (const unsigned __int8 *)1);
    v9 = *(unsigned __int8 *)v3;
    v8 = (tlv *)((char *)v3 + 1);
    tlv::throwIfNotEnoughBytes(v8, a2, (const unsigned __int8 *)v9);
    std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(v7, (uint64_t)v8, (char *)v8 + v9, v9);
    v3 = (tlv *)((char *)v8 + v9);
    v10 = v3;
  }
  while (v3 < (tlv *)a2);
  return v10;
}

{
  tlv *v3;
  _QWORD *v6;
  void **v7;
  tlv *v8;
  unsigned int v9;
  tlv *v10;
  _QWORD *v11;

  v3 = a1;
  if (a1 >= (tlv *)a2)
    return a1;
  do
  {
    v11 = *(_QWORD **)(a3 + 8);
    if ((unint64_t)v11 >= *(_QWORD *)(a3 + 16))
    {
      v6 = std::vector<ssctl::tlv::abm::ErrorMessage>::__emplace_back_slow_path<>((void **)a3);
    }
    else
    {
      *v11 = 0;
      v11[1] = 0;
      v6 = v11 + 3;
      v11[2] = 0;
    }
    *(_QWORD *)(a3 + 8) = v6;
    v7 = (void **)(v6 - 3);
    tlv::throwIfNotEnoughBytes(v3, a2, (const unsigned __int8 *)2);
    v9 = *(unsigned __int16 *)v3;
    v8 = (tlv *)((char *)v3 + 2);
    tlv::throwIfNotEnoughBytes(v8, a2, (const unsigned __int8 *)v9);
    std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(v7, (uint64_t)v8, (char *)v8 + v9, v9);
    v3 = (tlv *)((char *)v8 + v9);
    v10 = v3;
  }
  while (v3 < (tlv *)a2);
  return v10;
}

char *ssctl::tlv::abm::writeField(char *a1, const void ***a2)
{
  const void **v3;
  const void **v4;
  const void *v5;
  char *v6;
  int v7;
  const void *v8;
  size_t v9;
  char *v10;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      LOBYTE(v5) = *((_BYTE *)v3 + 23);
      if ((char)v5 < 0)
        v5 = v3[1];
      *a1 = (char)v5;
      v6 = a1 + 1;
      v7 = *((char *)v3 + 23);
      if (v7 >= 0)
        v8 = v3;
      else
        v8 = *v3;
      if (v7 >= 0)
        v9 = *((unsigned __int8 *)v3 + 23);
      else
        v9 = (size_t)v3[1];
      memcpy(v6, v8, v9);
      v10 = (char *)*((unsigned __int8 *)v3 + 23);
      if ((char)v10 < 0)
        v10 = (char *)v3[1];
      a1 = &v10[(_QWORD)v6];
      v3 += 3;
    }
    while (v3 != v4);
  }
  return a1;
}

{
  const void **v3;
  const void **v4;
  const void *v5;
  char *v6;
  int v7;
  const void *v8;
  size_t v9;
  char *v10;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      LOWORD(v5) = *((unsigned __int8 *)v3 + 23);
      if ((char)v5 < 0)
        v5 = v3[1];
      *(_WORD *)a1 = (_WORD)v5;
      v6 = a1 + 2;
      v7 = *((char *)v3 + 23);
      if (v7 >= 0)
        v8 = v3;
      else
        v8 = *v3;
      if (v7 >= 0)
        v9 = *((unsigned __int8 *)v3 + 23);
      else
        v9 = (size_t)v3[1];
      memcpy(v6, v8, v9);
      v10 = (char *)*((unsigned __int8 *)v3 + 23);
      if ((char)v10 < 0)
        v10 = (char *)v3[1];
      a1 = &v10[(_QWORD)v6];
      v3 += 3;
    }
    while (v3 != v4);
  }
  return a1;
}

uint64_t ssctl::tlv::abm::getFieldSize(uint64_t *a1, double a2, double a3, double a4, int64x2_t a5, double a6, int8x16_t a7)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  int64x2_t v16;
  int8x16_t v17;
  int64x2_t v18;
  int32x2_t v19;
  int8x16_t v20;
  int8x16_t v21;
  const double *v22;
  const double *v23;
  unsigned __int128 v24;
  unsigned __int128 v25;
  int32x2_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint64_t v29;

  v8 = *a1;
  v7 = a1[1];
  if (*a1 == v7)
    return 0;
  v9 = v7 - v8 - 24;
  if (v9 >= 0x60)
  {
    v12 = v9 / 0x18 + 1;
    v13 = v12 & 3;
    if ((v12 & 3) == 0)
      v13 = 4;
    v14 = v12 - v13;
    v11 = v8 + 24 * v14;
    v15 = (unsigned __int8 *)(v8 + 47);
    v16 = 0uLL;
    v17.i64[0] = 255;
    v17.i64[1] = 255;
    v18 = 0uLL;
    do
    {
      a5.i8[0] = *(v15 - 24);
      a5.i8[4] = *v15;
      a7.i8[0] = v15[24];
      a7.i8[4] = v15[48];
      v19 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a5.i8, 0x18uLL), 0x18uLL));
      v20.i64[0] = v19.i32[0];
      v20.i64[1] = v19.i32[1];
      v21 = v20;
      v22 = (const double *)(v15 - 39);
      v23 = (const double *)(v15 + 9);
      v24 = (unsigned __int128)vld3q_f64(v22);
      v25 = (unsigned __int128)vld3q_f64(v23);
      v26 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a7.i8, 0x18uLL), 0x18uLL));
      v20.i64[0] = v26.i32[0];
      v20.i64[1] = v26.i32[1];
      v27 = v20;
      v20.i64[0] = a5.u32[0];
      v20.i64[1] = a5.u32[1];
      v28 = vbicq_s8(v20, v21);
      v20.i64[0] = a7.u32[0];
      v20.i64[1] = a7.u32[1];
      a5 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)v24, v21), vandq_s8(v28, v17));
      a7 = vandq_s8((int8x16_t)v25, v27);
      v16 = vsubq_s64(a5, (int64x2_t)vmvnq_s8((int8x16_t)v16));
      v18 = vsubq_s64((int64x2_t)vorrq_s8(a7, vandq_s8(vbicq_s8(v20, v27), v17)), (int64x2_t)vmvnq_s8((int8x16_t)v18));
      v15 += 96;
      v14 -= 4;
    }
    while (v14);
    result = vaddvq_s64(vaddq_s64(v18, v16));
  }
  else
  {
    result = 0;
    v11 = v8;
  }
  do
  {
    v29 = *(unsigned __int8 *)(v11 + 23);
    if ((v29 & 0x80u) != 0)
      v29 = *(_QWORD *)(v11 + 8);
    result += v29 + 1;
    v11 += 24;
  }
  while (v11 != v7);
  return result;
}

void tlv::parseV<ssctl::tlv::abm::ErrorMessages>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v4;
  const unsigned __int8 *v6;
  _QWORD *v7;
  void **v8;
  tlv *v9;
  unsigned int v10;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = *a1;
  if (a2 < 1)
  {
    *a1 = v4;
  }
  else
  {
    v6 = (const unsigned __int8 *)v4 + a2;
    do
    {
      v7 = *(_QWORD **)(a3 + 8);
      if ((unint64_t)v7 >= *(_QWORD *)(a3 + 16))
      {
        v8 = (void **)std::vector<ssctl::tlv::abm::ErrorMessage>::__emplace_back_slow_path<>((void **)a3);
      }
      else
      {
        *v7 = 0;
        v7[1] = 0;
        v8 = (void **)(v7 + 3);
        v7[2] = 0;
      }
      *(_QWORD *)(a3 + 8) = v8;
      tlv::throwIfNotEnoughBytes(v4, v6, (const unsigned __int8 *)1);
      v10 = *(unsigned __int8 *)v4;
      v9 = (tlv *)((char *)v4 + 1);
      tlv::throwIfNotEnoughBytes(v9, v6, (const unsigned __int8 *)v10);
      std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(v8 - 3, (uint64_t)v9, (char *)v9 + v10, v10);
      v4 = (tlv *)((char *)v9 + v10);
    }
    while (v4 < (tlv *)v6);
    *a1 = v4;
  }
}

void sub_1A355A064(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A355A038);
}

void sub_1A355A074(_Unwind_Exception *a1)
{
  void **v1;

  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t tlv::size<ssctl::tlv::abm::ErrorMessages>(uint64_t *a1, double a2, double a3, double a4, int64x2_t a5, double a6, int8x16_t a7)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  int64x2_t v17;
  int8x16_t v18;
  int64x2_t v19;
  int32x2_t v20;
  int8x16_t v21;
  int8x16_t v22;
  const double *v23;
  const double *v24;
  unsigned __int128 v25;
  unsigned __int128 v26;
  int32x2_t v27;
  int8x16_t v28;
  int8x16_t v29;
  uint64_t v30;

  v8 = *a1;
  v7 = a1[1];
  if (*a1 == v7)
    return 3;
  v9 = v7 - v8 - 24;
  if (v9 >= 0x60)
  {
    v13 = v9 / 0x18 + 1;
    v14 = v13 & 3;
    if ((v13 & 3) == 0)
      v14 = 4;
    v15 = v13 - v14;
    v11 = v8 + 24 * v15;
    v16 = (unsigned __int8 *)(v8 + 47);
    v17 = 0uLL;
    v18.i64[0] = 255;
    v18.i64[1] = 255;
    v19 = 0uLL;
    do
    {
      a5.i8[0] = *(v16 - 24);
      a5.i8[4] = *v16;
      a7.i8[0] = v16[24];
      a7.i8[4] = v16[48];
      v20 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a5.i8, 0x18uLL), 0x18uLL));
      v21.i64[0] = v20.i32[0];
      v21.i64[1] = v20.i32[1];
      v22 = v21;
      v23 = (const double *)(v16 - 39);
      v24 = (const double *)(v16 + 9);
      v25 = (unsigned __int128)vld3q_f64(v23);
      v26 = (unsigned __int128)vld3q_f64(v24);
      v27 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a7.i8, 0x18uLL), 0x18uLL));
      v21.i64[0] = v27.i32[0];
      v21.i64[1] = v27.i32[1];
      v28 = v21;
      v21.i64[0] = a5.u32[0];
      v21.i64[1] = a5.u32[1];
      v29 = vbicq_s8(v21, v22);
      v21.i64[0] = a7.u32[0];
      v21.i64[1] = a7.u32[1];
      a5 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)v25, v22), vandq_s8(v29, v18));
      a7 = vandq_s8((int8x16_t)v26, v28);
      v17 = vsubq_s64(a5, (int64x2_t)vmvnq_s8((int8x16_t)v17));
      v19 = vsubq_s64((int64x2_t)vorrq_s8(a7, vandq_s8(vbicq_s8(v21, v28), v18)), (int64x2_t)vmvnq_s8((int8x16_t)v19));
      v16 += 96;
      v15 -= 4;
    }
    while (v15);
    v10 = vaddvq_s64(vaddq_s64(v19, v17));
  }
  else
  {
    v10 = 0;
    v11 = *a1;
  }
  do
  {
    v30 = *(unsigned __int8 *)(v11 + 23);
    if ((v30 & 0x80u) != 0)
      v30 = *(_QWORD *)(v11 + 8);
    v10 += v30 + 1;
    v11 += 24;
  }
  while (v11 != v7);
  return v10 + 3;
}

char **tlv::writeV<ssctl::tlv::abm::ErrorMessages>(char **result, const void ***a2)
{
  char **v2;
  char *v3;
  const void **v4;
  const void **v5;
  const void *v6;
  char *v7;
  int v8;
  const void *v9;
  size_t v10;
  char *v11;

  v2 = result;
  v3 = *result;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      LOBYTE(v6) = *((_BYTE *)v4 + 23);
      if ((char)v6 < 0)
        v6 = v4[1];
      *v3 = (char)v6;
      v7 = v3 + 1;
      v8 = *((char *)v4 + 23);
      if (v8 >= 0)
        v9 = v4;
      else
        v9 = *v4;
      if (v8 >= 0)
        v10 = *((unsigned __int8 *)v4 + 23);
      else
        v10 = (size_t)v4[1];
      result = (char **)memcpy(v7, v9, v10);
      v11 = (char *)*((unsigned __int8 *)v4 + 23);
      if ((char)v11 < 0)
        v11 = (char *)v4[1];
      v3 = &v11[(_QWORD)v7];
      v4 += 3;
    }
    while (v4 != v5);
  }
  *v2 = v3;
  return result;
}

uint64_t ssctl::tlv::abm::getFieldSize(uint64_t *a1, double a2, double a3, double a4, double a5, int64x2_t a6, double a7, int8x16_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  int64x2_t v17;
  int8x16_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int32x2_t v21;
  int8x16_t v22;
  int8x16_t v23;
  const double *v24;
  const double *v25;
  unsigned __int128 v26;
  unsigned __int128 v27;
  int32x2_t v28;
  int8x16_t v29;
  int8x16_t v30;
  uint64_t v31;

  v9 = *a1;
  v8 = a1[1];
  if (*a1 == v8)
    return 0;
  v10 = v8 - v9 - 24;
  if (v10 >= 0x60)
  {
    v13 = v10 / 0x18 + 1;
    v14 = v13 & 3;
    if ((v13 & 3) == 0)
      v14 = 4;
    v15 = v13 - v14;
    v12 = v9 + 24 * v15;
    v16 = (unsigned __int8 *)(v9 + 47);
    v17 = 0uLL;
    v18.i64[0] = 255;
    v18.i64[1] = 255;
    v19 = vdupq_n_s64(2uLL);
    v20 = 0uLL;
    do
    {
      a6.i8[0] = *(v16 - 24);
      a6.i8[4] = *v16;
      a8.i8[0] = v16[24];
      a8.i8[4] = v16[48];
      v21 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a6.i8, 0x18uLL), 0x18uLL));
      v22.i64[0] = v21.i32[0];
      v22.i64[1] = v21.i32[1];
      v23 = v22;
      v24 = (const double *)(v16 - 39);
      v25 = (const double *)(v16 + 9);
      v26 = (unsigned __int128)vld3q_f64(v24);
      v27 = (unsigned __int128)vld3q_f64(v25);
      v28 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a8.i8, 0x18uLL), 0x18uLL));
      v22.i64[0] = v28.i32[0];
      v22.i64[1] = v28.i32[1];
      v29 = v22;
      v22.i64[0] = a6.u32[0];
      v22.i64[1] = a6.u32[1];
      v30 = vbicq_s8(v22, v23);
      v22.i64[0] = a8.u32[0];
      v22.i64[1] = a8.u32[1];
      a6 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)v26, v23), vandq_s8(v30, v18));
      a8 = vandq_s8((int8x16_t)v27, v29);
      v17 = vaddq_s64(vaddq_s64(v17, v19), a6);
      v20 = vaddq_s64(vaddq_s64(v20, v19), (int64x2_t)vorrq_s8(a8, vandq_s8(vbicq_s8(v22, v29), v18)));
      v16 += 96;
      v15 -= 4;
    }
    while (v15);
    result = vaddvq_s64(vaddq_s64(v20, v17));
  }
  else
  {
    result = 0;
    v12 = v9;
  }
  do
  {
    v31 = *(unsigned __int8 *)(v12 + 23);
    if ((v31 & 0x80u) != 0)
      v31 = *(_QWORD *)(v12 + 8);
    result += v31 + 2;
    v12 += 24;
  }
  while (v12 != v8);
  return result;
}

void tlv::parseV<ssctl::tlv::abm::ExtendedErrorMessages>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v4;
  const unsigned __int8 *v6;
  _QWORD *v7;
  void **v8;
  tlv *v9;
  unsigned int v10;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = *a1;
  if (a2 < 1)
  {
    *a1 = v4;
  }
  else
  {
    v6 = (const unsigned __int8 *)v4 + a2;
    do
    {
      v7 = *(_QWORD **)(a3 + 8);
      if ((unint64_t)v7 >= *(_QWORD *)(a3 + 16))
      {
        v8 = (void **)std::vector<ssctl::tlv::abm::ErrorMessage>::__emplace_back_slow_path<>((void **)a3);
      }
      else
      {
        *v7 = 0;
        v7[1] = 0;
        v8 = (void **)(v7 + 3);
        v7[2] = 0;
      }
      *(_QWORD *)(a3 + 8) = v8;
      tlv::throwIfNotEnoughBytes(v4, v6, (const unsigned __int8 *)2);
      v10 = *(unsigned __int16 *)v4;
      v9 = (tlv *)((char *)v4 + 2);
      tlv::throwIfNotEnoughBytes(v9, v6, (const unsigned __int8 *)v10);
      std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(v8 - 3, (uint64_t)v9, (char *)v9 + v10, v10);
      v4 = (tlv *)((char *)v9 + v10);
    }
    while (v4 < (tlv *)v6);
    *a1 = v4;
  }
}

void sub_1A355A5B4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A355A588);
}

void sub_1A355A5C4(_Unwind_Exception *a1)
{
  void **v1;

  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t tlv::size<ssctl::tlv::abm::ExtendedErrorMessages>(uint64_t *a1, double a2, double a3, double a4, double a5, int64x2_t a6, double a7, int8x16_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  int64x2_t v18;
  int8x16_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int32x2_t v22;
  int8x16_t v23;
  int8x16_t v24;
  const double *v25;
  const double *v26;
  unsigned __int128 v27;
  unsigned __int128 v28;
  int32x2_t v29;
  int8x16_t v30;
  int8x16_t v31;
  uint64_t v32;

  v9 = *a1;
  v8 = a1[1];
  if (*a1 == v8)
    return 3;
  v10 = v8 - v9 - 24;
  if (v10 >= 0x60)
  {
    v14 = v10 / 0x18 + 1;
    v15 = v14 & 3;
    if ((v14 & 3) == 0)
      v15 = 4;
    v16 = v14 - v15;
    v12 = v9 + 24 * v16;
    v17 = (unsigned __int8 *)(v9 + 47);
    v18 = 0uLL;
    v19.i64[0] = 255;
    v19.i64[1] = 255;
    v20 = vdupq_n_s64(2uLL);
    v21 = 0uLL;
    do
    {
      a6.i8[0] = *(v17 - 24);
      a6.i8[4] = *v17;
      a8.i8[0] = v17[24];
      a8.i8[4] = v17[48];
      v22 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a6.i8, 0x18uLL), 0x18uLL));
      v23.i64[0] = v22.i32[0];
      v23.i64[1] = v22.i32[1];
      v24 = v23;
      v25 = (const double *)(v17 - 39);
      v26 = (const double *)(v17 + 9);
      v27 = (unsigned __int128)vld3q_f64(v25);
      v28 = (unsigned __int128)vld3q_f64(v26);
      v29 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a8.i8, 0x18uLL), 0x18uLL));
      v23.i64[0] = v29.i32[0];
      v23.i64[1] = v29.i32[1];
      v30 = v23;
      v23.i64[0] = a6.u32[0];
      v23.i64[1] = a6.u32[1];
      v31 = vbicq_s8(v23, v24);
      v23.i64[0] = a8.u32[0];
      v23.i64[1] = a8.u32[1];
      a6 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)v27, v24), vandq_s8(v31, v19));
      a8 = vandq_s8((int8x16_t)v28, v30);
      v18 = vaddq_s64(vaddq_s64(v18, v20), a6);
      v21 = vaddq_s64(vaddq_s64(v21, v20), (int64x2_t)vorrq_s8(a8, vandq_s8(vbicq_s8(v23, v30), v19)));
      v17 += 96;
      v16 -= 4;
    }
    while (v16);
    v11 = vaddvq_s64(vaddq_s64(v21, v18));
  }
  else
  {
    v11 = 0;
    v12 = *a1;
  }
  do
  {
    v32 = *(unsigned __int8 *)(v12 + 23);
    if ((v32 & 0x80u) != 0)
      v32 = *(_QWORD *)(v12 + 8);
    v11 += v32 + 2;
    v12 += 24;
  }
  while (v12 != v8);
  return v11 + 3;
}

char **tlv::writeV<ssctl::tlv::abm::ExtendedErrorMessages>(char **result, const void ***a2)
{
  char **v2;
  char *v3;
  const void **v4;
  const void **v5;
  const void *v6;
  char *v7;
  int v8;
  const void *v9;
  size_t v10;
  char *v11;

  v2 = result;
  v3 = *result;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      LOWORD(v6) = *((unsigned __int8 *)v4 + 23);
      if ((char)v6 < 0)
        v6 = v4[1];
      *(_WORD *)v3 = (_WORD)v6;
      v7 = v3 + 2;
      v8 = *((char *)v4 + 23);
      if (v8 >= 0)
        v9 = v4;
      else
        v9 = *v4;
      if (v8 >= 0)
        v10 = *((unsigned __int8 *)v4 + 23);
      else
        v10 = (size_t)v4[1];
      result = (char **)memcpy(v7, v9, v10);
      v11 = (char *)*((unsigned __int8 *)v4 + 23);
      if ((char)v11 < 0)
        v11 = (char *)v4[1];
      v3 = &v11[(_QWORD)v7];
      v4 += 3;
    }
    while (v4 != v5);
  }
  *v2 = v3;
  return result;
}

void std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(void **a1, uint64_t a2, char *a3, unint64_t a4)
{
  char *v8;
  unint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 *v18;
  _OWORD *v19;
  unint64_t v20;
  __int128 v21;
  char v22;

  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    v8 = (char *)a1;
    if (a4 <= 0x16)
      goto LABEL_17;
    v9 = 22;
    v10 = a1;
    goto LABEL_7;
  }
  v11 = (unint64_t)a1[2];
  v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (a4 > v9)
  {
    if (0x7FFFFFFFFFFFFFF8 - (v11 & 0x7FFFFFFFFFFFFFFFLL) < a4 - v9)
      std::string::__throw_length_error[abi:ne180100]();
    v10 = *a1;
LABEL_7:
    v12 = 2 * v9;
    if (a4 > 2 * v9)
      v12 = a4;
    v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v13 = v12 | 7;
    if (v12 >= 0x17)
      v14 = v13 + 1;
    else
      v14 = 23;
    v8 = (char *)operator new(v14);
    if (v9 != 22)
      operator delete(v10);
    a1[1] = 0;
    a1[2] = (void *)(v14 | 0x8000000000000000);
    *a1 = v8;
    goto LABEL_17;
  }
  v8 = (char *)a1;
  if ((v11 & 0x8000000000000000) != 0)
    v8 = (char *)*a1;
LABEL_17:
  if ((char *)a2 == a3)
  {
    v16 = v8;
  }
  else
  {
    v15 = (unint64_t)&a3[-a2];
    if ((unint64_t)&a3[-a2] < 0x20 || (unint64_t)&v8[-a2] < 0x20)
    {
      v16 = v8;
      v17 = (char *)a2;
    }
    else
    {
      v16 = &v8[v15 & 0xFFFFFFFFFFFFFFE0];
      v17 = (char *)(a2 + (v15 & 0xFFFFFFFFFFFFFFE0));
      v18 = (__int128 *)(a2 + 16);
      v19 = v8 + 16;
      v20 = v15 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v21 = *v18;
        *(v19 - 1) = *(v18 - 1);
        *v19 = v21;
        v18 += 2;
        v19 += 2;
        v20 -= 32;
      }
      while (v20);
      if (v15 == (v15 & 0xFFFFFFFFFFFFFFE0))
        goto LABEL_27;
    }
    do
    {
      v22 = *v17++;
      *v16++ = v22;
    }
    while (v17 != a3);
  }
LABEL_27:
  *v16 = 0;
  if (*((char *)a1 + 23) < 0)
    a1[1] = (void *)a4;
  else
    *((_BYTE *)a1 + 23) = a4 & 0x7F;
}

_QWORD *std::vector<ssctl::tlv::abm::ErrorMessage>::__emplace_back_slow_path<>(void **a1)
{
  void **v1;
  void **v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  __int128 v11;
  void **v12;

  v2 = (void **)*a1;
  v1 = (void **)a1[1];
  v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1 - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)v2) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)v2) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)v2) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  v10 = v8 + 24;
  if (v1 == v2)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v11 = *(_OWORD *)(v1 - 3);
      *((_QWORD *)v8 - 1) = *(v1 - 1);
      *(_OWORD *)(v8 - 24) = v11;
      v8 -= 24;
      *(v1 - 2) = 0;
      *(v1 - 1) = 0;
      *(v1 - 3) = 0;
      v1 -= 3;
    }
    while (v1 != v2);
    v1 = (void **)*a1;
    v12 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v12 != v1)
    {
      if (*((char *)v12 - 1) < 0)
        operator delete(*(v12 - 3));
      v12 -= 3;
    }
  }
  if (v1)
    operator delete(v1);
  return v10;
}

char *bsp::parseField(tlv *a1, const unsigned __int8 *a2, _DWORD *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

_DWORD *bsp::writeField(_DWORD *a1, int a2)
{
  *a1 = a2;
  return a1 + 1;
}

uint64_t bsp::getFieldSize()
{
  return 4;
}

__n128 tlv::parseV<bsp::tlv::abm::CapabilitiesItem>@<Q0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  __n128 result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), v6, (const unsigned __int8 *)0x10);
  result = *(__n128 *)((char *)v5 + 4);
  *(__n128 *)(a3 + 4) = result;
  *a1 = (tlv *)((char *)v5 + 20);
  return result;
}

void sub_1A355ABC8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::CapabilitiesItem>()
{
  return 23;
}

__n128 tlv::writeV<bsp::tlv::abm::CapabilitiesItem>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;

  v2 = *a1;
  *(_DWORD *)v2 = *(_DWORD *)a2;
  result = *(__n128 *)(a2 + 4);
  *(__n128 *)(v2 + 4) = result;
  *a1 = v2 + 20;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TxAntennaConfig>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1A355AC8C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TxAntennaConfig>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::TxAntennaConfig>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t bsp::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, _WORD *a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)2);
  a3[3] = *(_WORD *)(a1 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)2);
  a3[4] = *(_WORD *)(a1 + 8);
  return a1 + 10;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  return a1 + 6;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  return a1 + 6;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)2);
  a3[3] = *(_WORD *)(a1 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)2);
  a3[4] = *(_WORD *)(a1 + 8);
  return a1 + 10;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  return a1 + 6;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  return a1 + 6;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)2);
  a3[3] = *(_WORD *)(a1 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)2);
  a3[4] = *(_WORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 10), a2, (const unsigned __int8 *)2);
  a3[5] = *(_WORD *)(a1 + 10);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)2);
  a3[6] = *(_WORD *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 14), a2, (const unsigned __int8 *)2);
  a3[7] = *(_WORD *)(a1 + 14);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)2);
  a3[8] = *(_WORD *)(a1 + 16);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 18), a2, (const unsigned __int8 *)2);
  a3[9] = *(_WORD *)(a1 + 18);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 20), a2, (const unsigned __int8 *)2);
  a3[10] = *(_WORD *)(a1 + 20);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 22), a2, (const unsigned __int8 *)2);
  a3[11] = *(_WORD *)(a1 + 22);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 24), a2, (const unsigned __int8 *)2);
  a3[12] = *(_WORD *)(a1 + 24);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 26), a2, (const unsigned __int8 *)2);
  a3[13] = *(_WORD *)(a1 + 26);
  return a1 + 28;
}

unint64_t tlv::parseV<bsp::tlv::abm::ARTD>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  v6 = *((unsigned __int16 *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)2);
  v7 = *((unsigned __int16 *)v3 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 6), v4, (const unsigned __int8 *)2);
  v8 = *((unsigned __int16 *)v3 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)2);
  *a1 = (tlv *)((char *)v3 + 10);
  return (v7 << 32) | (v8 << 48) | ((unint64_t)v6 << 16) | v5;
}

void sub_1A355AE84(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A355AE54);
}

uint64_t tlv::size<bsp::tlv::abm::ARTD>()
{
  return 13;
}

_WORD **tlv::writeV<bsp::tlv::abm::ARTD>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  v2[4] = a2[4];
  *result = v2 + 5;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ARTDV2>(uint64_t *a1, int a2)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 2863267840;
  *a1 = bsp::tlv::abm::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), (uint64_t)v3);
  return v3[0];
}

uint64_t sub_1A355B0B8(void *a1)
{
  _QWORD *v1;
  uint64_t v3;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v3;
}

uint64_t tlv::size<bsp::tlv::abm::ARTDV2>()
{
  return 17;
}

uint64_t *tlv::writeV<bsp::tlv::abm::ARTDV2>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_BYTE *)v2 = *(_BYTE *)a2;
  *(_BYTE *)(v2 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(v2 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(v2 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(v2 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(v2 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(v2 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(v2 + 7) = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(v2 + 9) = *(_BYTE *)(a2 + 9);
  *(_DWORD *)(v2 + 10) = *(_DWORD *)(a2 + 12);
  *result = v2 + 14;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ARFCNLock>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  uint64_t result;

  *(_DWORD *)a3 = -1431699456;
  *(_QWORD *)(a3 + 4) = 0;
  *(_QWORD *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 20) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)2);
  *(_WORD *)a3 = *(_WORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 2), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)((char *)v5 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 6), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)((char *)v5 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 10), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)((char *)v5 + 10);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 14), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)((char *)v5 + 14);
  result = tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 18), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)((char *)v5 + 18);
  *a1 = (tlv *)((char *)v5 + 22);
  return result;
}

void sub_1A355B328(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::ARFCNLock>()
{
  return 25;
}

uint64_t *tlv::writeV<bsp::tlv::abm::ARFCNLock>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_WORD *)v2 = *(_WORD *)a2;
  *(_DWORD *)(v2 + 2) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 6) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 10) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(v2 + 14) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(v2 + 18) = *(_DWORD *)(a2 + 20);
  *result = v2 + 22;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::CarrierAgreggation>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  v6 = *((unsigned __int16 *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)2);
  v7 = *((unsigned __int16 *)v3 + 2);
  *a1 = (tlv *)((char *)v3 + 6);
  return (v6 << 16) | (v7 << 32) | v5;
}

void sub_1A355B4B8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A355B494);
}

uint64_t tlv::size<bsp::tlv::abm::CarrierAgreggation>()
{
  return 9;
}

_WORD **tlv::writeV<bsp::tlv::abm::CarrierAgreggation>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  *result = v2 + 3;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::WakeReason>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1A355B57C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::WakeReason>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::WakeReason>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ChannelID>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1A355B634(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::ChannelID>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::ChannelID>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::WakeBufferLength>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1A355B6EC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::WakeBufferLength>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::WakeBufferLength>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

char *bsp::tlv::abm::parseField(char *__src, char *a2, _QWORD *a3)
{
  std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(a3, __src, a2, a2 - __src);
  return a2;
}

char *bsp::tlv::abm::writeField(char *a1, uint64_t a2)
{
  memcpy(a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  return &a1[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  return &a1[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  return &a1[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  return &a1[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  return &a1[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
}

uint64_t bsp::tlv::abm::getFieldSize(_QWORD *a1)
{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

_QWORD *tlv::parseV<bsp::tlv::abm::WakeBuffer>@<X0>(char **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;
  _QWORD *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = &(*a1)[a2];
  result = std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1A355B7F0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A355B7E0);
}

void sub_1A355B800(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::WakeBuffer>(_QWORD *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::WakeBuffer>(void **a1, uint64_t a2)
{
  char *v4;
  void *result;

  v4 = (char *)*a1;
  result = memcpy(*a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  *a1 = &v4[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
  return result;
}

uint64_t bsp::tlv::abm::parseField(bsp::tlv::abm *this, const unsigned __int8 *a2, unsigned __int8 *a3, Size *a4)
{
  tlv::throwIfNotEnoughBytes(this, a2, (const unsigned __int8 *)2);
  *(_WORD *)a3 = *(_WORD *)this;
  return (uint64_t)this + 2;
}

uint64_t bsp::tlv::abm::writeField(bsp::tlv::abm *this, unsigned __int8 *a2, const Size *a3)
{
  *(_WORD *)this = *(_WORD *)a2;
  return (uint64_t)this + 2;
}

uint64_t bsp::tlv::abm::getFieldSize(bsp::tlv::abm *this, const Size *a2)
{
  return 2;
}

uint64_t tlv::parseV<bsp::tlv::abm::Size>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1A355B8FC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::Size>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::Size>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

_QWORD *tlv::parseV<bsp::tlv::abm::LogData>@<X0>(char **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;
  _QWORD *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = &(*a1)[a2];
  result = std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1A355BA00(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A355B9F0);
}

void sub_1A355BA10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::LogData>(_QWORD *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::LogData>(void **a1, uint64_t a2)
{
  char *v4;
  void *result;

  v4 = (char *)*a1;
  result = memcpy(*a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  *a1 = &v4[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
  return result;
}

char *bsp::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, BOOL *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1 != 0;
  return (char *)a1 + 1;
}

BOOL tlv::parseV<bsp::tlv::abm::Enable>(tlv **a1, int a2)
{
  tlv *v3;
  _BOOL8 result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1A355BB1C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::Enable>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::Enable>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::Port>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1A355BBD4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::Port>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::Port>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

_QWORD *tlv::parseV<bsp::tlv::abm::PayloadRFFE>@<X0>(char **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;
  _QWORD *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = &(*a1)[a2];
  result = std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1A355BCD8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A355BCC8);
}

void sub_1A355BCE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::PayloadRFFE>(_QWORD *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::PayloadRFFE>(void **a1, uint64_t a2)
{
  char *v4;
  void *result;

  v4 = (char *)*a1;
  result = memcpy(*a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  *a1 = &v4[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::RxDiversityConfig>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  v6 = *((unsigned __int16 *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)2);
  v7 = *((unsigned __int16 *)v3 + 2);
  *a1 = (tlv *)((char *)v3 + 6);
  return (v6 << 16) | (v7 << 32) | v5;
}

void sub_1A355BE90(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A355BE6CLL);
}

uint64_t tlv::size<bsp::tlv::abm::RxDiversityConfig>()
{
  return 9;
}

_WORD **tlv::writeV<bsp::tlv::abm::RxDiversityConfig>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  *result = v2 + 3;
  return result;
}

unint64_t tlv::parseV<bsp::tlv::abm::ARTDConfig>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  v6 = *((unsigned __int16 *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)2);
  v7 = *((unsigned __int16 *)v3 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 6), v4, (const unsigned __int8 *)2);
  v8 = *((unsigned __int16 *)v3 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)2);
  *a1 = (tlv *)((char *)v3 + 10);
  return (v7 << 32) | (v8 << 48) | ((unint64_t)v6 << 16) | v5;
}

void sub_1A355C094(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A355C064);
}

uint64_t tlv::size<bsp::tlv::abm::ARTDConfig>()
{
  return 13;
}

_WORD **tlv::writeV<bsp::tlv::abm::ARTDConfig>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  v2[4] = a2[4];
  *result = v2 + 5;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::UARFCNLockConfig>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1A355C168(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::UARFCNLockConfig>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::UARFCNLockConfig>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::EARFCNLockConfig>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1A355C220(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::EARFCNLockConfig>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::EARFCNLockConfig>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::CarrierAgreggationConfig>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  v6 = *((unsigned __int16 *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)2);
  v7 = *((unsigned __int16 *)v3 + 2);
  *a1 = (tlv *)((char *)v3 + 6);
  return (v6 << 16) | (v7 << 32) | v5;
}

void sub_1A355C384(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A355C360);
}

uint64_t tlv::size<bsp::tlv::abm::CarrierAgreggationConfig>()
{
  return 9;
}

_WORD **tlv::writeV<bsp::tlv::abm::CarrierAgreggationConfig>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  *result = v2 + 3;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::RxDiversityConfigV2>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  v6 = *((unsigned __int16 *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)2);
  v7 = *((unsigned __int16 *)v3 + 2);
  *a1 = (tlv *)((char *)v3 + 6);
  return (v6 << 16) | (v7 << 32) | v5;
}

void sub_1A355C4F4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A355C4D0);
}

uint64_t tlv::size<bsp::tlv::abm::RxDiversityConfigV2>()
{
  return 9;
}

_WORD **tlv::writeV<bsp::tlv::abm::RxDiversityConfigV2>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  *result = v2 + 3;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ARTDConfigV2>(uint64_t *a1, int a2)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 2863267840;
  *a1 = bsp::tlv::abm::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), (uint64_t)v3);
  return v3[0];
}

uint64_t sub_1A355C5EC(void *a1)
{
  _QWORD *v1;
  uint64_t v3;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v3;
}

uint64_t tlv::size<bsp::tlv::abm::ARTDConfigV2>()
{
  return 17;
}

uint64_t *tlv::writeV<bsp::tlv::abm::ARTDConfigV2>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_BYTE *)v2 = *(_BYTE *)a2;
  *(_BYTE *)(v2 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(v2 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(v2 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(v2 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(v2 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(v2 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(v2 + 7) = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(v2 + 9) = *(_BYTE *)(a2 + 9);
  *(_DWORD *)(v2 + 10) = *(_DWORD *)(a2 + 12);
  *result = v2 + 14;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ARFCNLockConfig>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  uint64_t result;

  *(_DWORD *)a3 = -1431699456;
  *(_QWORD *)(a3 + 4) = 0;
  *(_QWORD *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 20) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)2);
  *(_WORD *)a3 = *(_WORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 2), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)((char *)v5 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 6), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)((char *)v5 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 10), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)((char *)v5 + 10);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 14), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)((char *)v5 + 14);
  result = tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 18), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)((char *)v5 + 18);
  *a1 = (tlv *)((char *)v5 + 22);
  return result;
}

void sub_1A355C85C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::ARFCNLockConfig>()
{
  return 25;
}

uint64_t *tlv::writeV<bsp::tlv::abm::ARFCNLockConfig>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_WORD *)v2 = *(_WORD *)a2;
  *(_DWORD *)(v2 + 2) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 6) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 10) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(v2 + 14) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(v2 + 18) = *(_DWORD *)(a2 + 20);
  *result = v2 + 22;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::SleepConfig>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1A355C940(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::SleepConfig>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::SleepConfig>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::FieldTestConfig>@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = bsp::tlv::abm::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), (_WORD *)a3);
  *a1 = result;
  return result;
}

void sub_1A355CBAC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::FieldTestConfig>()
{
  return 31;
}

_WORD **tlv::writeV<bsp::tlv::abm::FieldTestConfig>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  v2[4] = a2[4];
  v2[5] = a2[5];
  v2[6] = a2[6];
  v2[7] = a2[7];
  v2[8] = a2[8];
  v2[9] = a2[9];
  v2[10] = a2[10];
  v2[11] = a2[11];
  v2[12] = a2[12];
  v2[13] = a2[13];
  *result = v2 + 14;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::FieldTestConfigV2>@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v4;
  uint64_t v5;
  uint64_t result;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)(a3 + 4) = v4;
  *(_OWORD *)(a3 + 20) = v4;
  *(_OWORD *)(a3 + 36) = v4;
  *(_DWORD *)(a3 + 52) = -1431655766;
  *(_DWORD *)a3 = 0;
  *(_WORD *)(a3 + 4) = 0;
  *(_DWORD *)(a3 + 20) = 0;
  *(_WORD *)(a3 + 24) = 0;
  *(_WORD *)(a3 + 28) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  v5 = *a1;
  *(_QWORD *)(a3 + 46) = 0;
  result = bsp::tlv::abm::parseField(v5, (const unsigned __int8 *)(v5 + a2), a3);
  *a1 = result;
  return result;
}

void sub_1A355CEB4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::FieldTestConfigV2>()
{
  return 49;
}

uint64_t *tlv::writeV<bsp::tlv::abm::FieldTestConfigV2>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_WORD *)v2 = *(_WORD *)a2;
  *(_WORD *)(v2 + 2) = *(_WORD *)(a2 + 2);
  *(_WORD *)(v2 + 4) = *(_WORD *)(a2 + 4);
  *(_BYTE *)(v2 + 6) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(v2 + 7) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(v2 + 9) = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(v2 + 10) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(v2 + 11) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(v2 + 12) = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(v2 + 13) = *(_BYTE *)(a2 + 15);
  *(_BYTE *)(v2 + 14) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(v2 + 15) = *(_BYTE *)(a2 + 17);
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(a2 + 20);
  *(_WORD *)(v2 + 20) = *(_WORD *)(a2 + 24);
  *(_WORD *)(v2 + 22) = *(_WORD *)(a2 + 28);
  *(_DWORD *)(v2 + 24) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(v2 + 28) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(v2 + 32) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v2 + 36) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(v2 + 40) = *(_DWORD *)(a2 + 48);
  *(_WORD *)(v2 + 44) = *(_WORD *)(a2 + 52);
  *result = v2 + 46;
  return result;
}

uint64_t bsp::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, _BYTE *a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)1);
  a3[1] = *(_BYTE *)(a1 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)1);
  a3[2] = *(_BYTE *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 3), a2, (const unsigned __int8 *)1);
  a3[3] = *(_BYTE *)(a1 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)1);
  a3[4] = *(_BYTE *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 5), a2, (const unsigned __int8 *)1);
  a3[5] = *(_BYTE *)(a1 + 5);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)1);
  a3[6] = *(_BYTE *)(a1 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 7), a2, (const unsigned __int8 *)1);
  a3[7] = *(_BYTE *)(a1 + 7);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)1);
  a3[8] = *(_BYTE *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 9), a2, (const unsigned __int8 *)1);
  a3[9] = *(_BYTE *)(a1 + 9);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 10), a2, (const unsigned __int8 *)1);
  a3[10] = *(_BYTE *)(a1 + 10);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 11), a2, (const unsigned __int8 *)1);
  a3[11] = *(_BYTE *)(a1 + 11);
  return a1 + 12;
}

uint64_t tlv::parseV<bsp::tlv::abm::ReadStatus>(uint64_t *a1, int a2)
{
  uint64_t v3;
  int v4;

  v4 = 0;
  v3 = 0;
  *a1 = bsp::tlv::abm::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), &v3);
  return v3;
}

uint64_t sub_1A355D194(void *a1)
{
  _QWORD *v1;
  uint64_t v3;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v3;
}

uint64_t tlv::size<bsp::tlv::abm::ReadStatus>()
{
  return 15;
}

_BYTE **tlv::writeV<bsp::tlv::abm::ReadStatus>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  v2[4] = a2[4];
  v2[5] = a2[5];
  v2[6] = a2[6];
  v2[7] = a2[7];
  v2[8] = a2[8];
  v2[9] = a2[9];
  v2[10] = a2[10];
  v2[11] = a2[11];
  *result = v2 + 12;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::MeasureType>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1A355D2B0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::MeasureType>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::MeasureType>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TestType>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1A355D368(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TestType>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::TestType>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TriggerError>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1A355D420(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TriggerError>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::TriggerError>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TestTimeout>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1A355D4D8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TestTimeout>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::TestTimeout>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

_QWORD *tlv::parseV<bsp::tlv::abm::RFSelfTestNonce>@<X0>(char **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;
  _QWORD *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = &(*a1)[a2];
  result = std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1A355D5DC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A355D5CCLL);
}

void sub_1A355D5EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::RFSelfTestNonce>(_QWORD *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::RFSelfTestNonce>(void **a1, uint64_t a2)
{
  char *v4;
  void *result;

  v4 = (char *)*a1;
  result = memcpy(*a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  *a1 = &v4[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::SecurityStatus>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1A355D6E8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::SecurityStatus>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::SecurityStatus>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

_QWORD *tlv::parseV<bsp::tlv::abm::RFSelfTestTicket>@<X0>(char **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;
  _QWORD *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = &(*a1)[a2];
  result = std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1A355D7EC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A355D7DCLL);
}

void sub_1A355D7FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::RFSelfTestTicket>(_QWORD *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::RFSelfTestTicket>(void **a1, uint64_t a2)
{
  char *v4;
  void *result;

  v4 = (char *)*a1;
  result = memcpy(*a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  *a1 = &v4[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::WakeChannel>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1A355D8F8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::WakeChannel>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::WakeChannel>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::CommandCode>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1A355D9B0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::CommandCode>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::CommandCode>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::RegionIndex>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1A355DA68(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::RegionIndex>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::RegionIndex>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::BlockIndex>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1A355DB20(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::BlockIndex>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::BlockIndex>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

char *bsp::tlv::abm::parseField(bsp::tlv::abm *this, const unsigned __int8 *a2, unsigned __int8 *a3, Capabilities *a4)
{
  unint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;

  tlv::throwIfNotEnoughBytes(this, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)this;
  tlv::throwIfNotEnoughBytes((bsp::tlv::abm *)((char *)this + 4), a2, (const unsigned __int8 *)1);
  v7 = *((unsigned __int8 *)this + 4);
  v9 = (char *)*((_QWORD *)a3 + 1);
  v8 = (char *)*((_QWORD *)a3 + 2);
  v10 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v9) >> 2);
  v11 = v7 - v10;
  if (v7 <= v10)
  {
    if (v7 < v10)
    {
      v8 = &v9[20 * *((unsigned __int8 *)this + 4)];
      *((_QWORD *)a3 + 2) = v8;
    }
    v21 = (char *)this + 5;
  }
  else
  {
    v12 = *((_QWORD *)a3 + 3);
    if (0xCCCCCCCCCCCCCCCDLL * ((v12 - (uint64_t)v8) >> 2) >= v11)
    {
      bzero(*((void **)a3 + 2), 20 * ((20 * v11 - 20) / 0x14) + 20);
      v19 = &v8[20 * ((20 * v11 - 20) / 0x14) + 20];
      *((_QWORD *)a3 + 2) = v19;
    }
    else
    {
      v13 = 0xCCCCCCCCCCCCCCCDLL * ((v12 - (uint64_t)v9) >> 2);
      v14 = 0x999999999999999ALL * ((v12 - (uint64_t)v9) >> 2);
      if (v14 > v7)
        v7 = v14;
      if (v13 >= 0x666666666666666)
        v7 = 0xCCCCCCCCCCCCCCCLL;
      if (v7 > 0xCCCCCCCCCCCCCCCLL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = 20 * v7;
      v16 = (char *)operator new(20 * v7);
      v17 = &v16[4 * ((v8 - v9) >> 2)];
      v18 = &v16[v15];
      bzero(v17, 20 * ((20 * v11 - 20) / 0x14) + 20);
      v19 = &v17[20 * ((20 * v11 - 20) / 0x14) + 20];
      if (v8 != v9)
      {
        do
        {
          v20 = *(_OWORD *)(v8 - 20);
          *((_DWORD *)v17 - 1) = *((_DWORD *)v8 - 1);
          *(_OWORD *)(v17 - 20) = v20;
          v17 -= 20;
          v8 -= 20;
        }
        while (v8 != v9);
        v8 = (char *)*((_QWORD *)a3 + 1);
      }
      *((_QWORD *)a3 + 1) = v17;
      *((_QWORD *)a3 + 2) = v19;
      *((_QWORD *)a3 + 3) = v18;
      if (v8)
      {
        operator delete(v8);
        v19 = (char *)*((_QWORD *)a3 + 2);
      }
    }
    v9 = (char *)*((_QWORD *)a3 + 1);
    v8 = v19;
    v21 = (char *)this + 5;
  }
  while (v9 != v8)
  {
    tlv::throwIfNotEnoughBytes((tlv *)v21, a2, (const unsigned __int8 *)4);
    *(_DWORD *)v9 = *(_DWORD *)v21;
    tlv::throwIfNotEnoughBytes((tlv *)(v21 + 4), a2, (const unsigned __int8 *)0x10);
    *(_OWORD *)(v9 + 4) = *(_OWORD *)(v21 + 4);
    v21 += 20;
    v9 += 20;
  }
  return v21;
}

uint64_t bsp::tlv::abm::writeField(bsp::tlv::abm *this, unsigned __int8 *a2, const Capabilities *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t i;

  *(_DWORD *)this = *(_DWORD *)a2;
  result = (uint64_t)this + 5;
  *((_BYTE *)this + 4) = -51 * ((*((_DWORD *)a2 + 4) - *((_DWORD *)a2 + 2)) >> 2);
  v5 = *((_QWORD *)a2 + 1);
  for (i = *((_QWORD *)a2 + 2); v5 != i; v5 += 20)
  {
    *(_DWORD *)result = *(_DWORD *)v5;
    *(_OWORD *)(result + 4) = *(_OWORD *)(v5 + 4);
    result += 20;
  }
  return result;
}

unint64_t bsp::tlv::abm::getFieldSize(bsp::tlv::abm *this, const Capabilities *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  if (v2 == v3)
    return 5;
  else
    return 20 * ((v3 - v2 - 20) / 0x14uLL) + 25;
}

char *tlv::parseV<bsp::tlv::abm::Capabilities>@<X0>(bsp::tlv::abm **a1@<X0>, int a2@<W1>, Capabilities *a3@<X3>, uint64_t a4@<X8>)
{
  char *result;

  *(_QWORD *)a4 = 0xAAAAAAAA00000000;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  result = bsp::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (unsigned __int8 *)a4, a3);
  *a1 = (bsp::tlv::abm *)result;
  return result;
}

void sub_1A355DE5C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1A355DE4CLL);
}

void sub_1A355DE6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<bsp::tlv::abm::Capabilities>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v1 == v2)
    return 8;
  else
    return 20 * ((v2 - v1 - 20) / 0x14uLL) + 28;
}

uint64_t *tlv::writeV<bsp::tlv::abm::Capabilities>(uint64_t *result, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;

  v2 = *result;
  *(_DWORD *)v2 = *a2;
  v3 = v2 + 5;
  *(_BYTE *)(v2 + 4) = -51 * ((a2[4] - a2[2]) >> 2);
  v4 = *((_QWORD *)a2 + 1);
  for (i = *((_QWORD *)a2 + 2); v4 != i; v4 += 20)
  {
    *(_DWORD *)v3 = *(_DWORD *)v4;
    *(_OWORD *)(v3 + 4) = *(_OWORD *)(v4 + 4);
    v3 += 20;
  }
  *result = v3;
  return result;
}

BOOL defaults::get(char *a1, char *a2, std::string *a3)
{
  const char *v6;
  NSObject *v7;
  char *v9;
  uint64_t *v10;
  int v11;
  const char *v12;
  __int16 v13;
  char *v14;
  __int16 v15;
  uint64_t *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, "BasebandTrace")
      && strcasecmp(a1, "BBTrace")
      && strcasecmp(a1, abm::trace::kICETrace[0])
      && strcasecmp(a1, abm::trace::kDIAG[0]))
    {
      if (strcasecmp(a1, "CoreDump"))
      {
        if (strcasecmp(a1, "IPC") && strcasecmp(a1, "KernelPCI"))
        {
          if (strcasecmp(a1, "BasebandIPC"))
          {
            if (strcasecmp(a1, "Compression"))
            {
              if (strcasecmp(a1, "TTR"))
              {
                if (strcasecmp(a1, "LogFilter"))
                {
                  if (strcasecmp(a1, "SystemLogs"))
                  {
                    if (strcasecmp(a1, "Profile"))
                    {
                      v6 = a1;
                      if (strcasecmp(a1, "Tailspin"))
                        goto LABEL_16;
                      return defaults::tailspin::get(a2, (uint64_t)a3);
                    }
                    return defaults::profile::get(a2, (uint64_t)a3);
                  }
                  return defaults::systemlogs::get(a2, (uint64_t)a3);
                }
                return defaults::logfilter::get(a2, (uint64_t)a3);
              }
              return defaults::ttr::get(a2, (uint64_t)a3);
            }
            return defaults::compression::get(a2, (uint64_t)a3);
          }
          return defaults::bbipc::get(a2, (uint64_t)a3);
        }
        return defaults::ipc::get(a2, (uint64_t)a3);
      }
      return defaults::coredump::get(a2, (uint64_t)a3);
    }
    return defaults::bbtrace::get(a2, (std::string::size_type *)a3);
  }
  v6 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, "BasebandTrace")
    || !strcasecmp(v6, "BBTrace")
    || !strcasecmp(v6, abm::trace::kICETrace[0])
    || !strcasecmp(v6, abm::trace::kDIAG[0]))
  {
    return defaults::bbtrace::get(a2, (std::string::size_type *)a3);
  }
  if (!strcasecmp(v6, "CoreDump"))
    return defaults::coredump::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, "IPC") || !strcasecmp(v6, "KernelPCI"))
    return defaults::ipc::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, "BasebandIPC"))
    return defaults::bbipc::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, "Compression"))
    return defaults::compression::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, "TTR"))
    return defaults::ttr::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, "LogFilter"))
    return defaults::logfilter::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, "SystemLogs"))
    return defaults::systemlogs::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, "Profile"))
    return defaults::profile::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, "Tailspin"))
    return defaults::tailspin::get(a2, (uint64_t)a3);
LABEL_16:
  if (!strcasecmp(v6, "Settings"))
    return defaults::tracesettings::get(a2, a3);
  v7 = GetOsLogContext()[1];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] >= 0)
      v9 = a1;
    else
      v9 = *(char **)a1;
    if (a2[23] >= 0)
      v10 = (uint64_t *)a2;
    else
      v10 = *(uint64_t **)a2;
    v11 = 136315650;
    v12 = "prop.default";
    v13 = 2080;
    v14 = v9;
    v15 = 2080;
    v16 = v10;
    _os_log_error_impl(&dword_1A343C000, v7, OS_LOG_TYPE_ERROR, "%s: Invalid domain; domain='%s' key='%s'",
      (uint8_t *)&v11,
      0x20u);
  }
  return 0;
}

BOOL defaults::bbtrace::get(char *a1, std::string::size_type *a2)
{
  int v4;
  capabilities::trace *v5;
  capabilities::trace *v6;
  capabilities::trace *v7;
  capabilities::trace *v8;
  const char *v9;
  capabilities::radio *v10;
  const char *v11;
  const char *v12;
  capabilities::radio *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  std::string::size_type v18;
  char v19;
  std::string::size_type v20;
  _BOOL8 result;
  uint64_t v22;
  const char *v23;
  capabilities::radio *v24;
  const char *v25;
  capabilities::radio *v26;
  const char *v27;
  capabilities::radio *v28;
  const char *v29;
  capabilities::radio *v30;
  uint64_t v31;
  capabilities::radio *v32;
  const char *v33;
  capabilities::radio *v34;
  const std::string::value_type *v35;
  const char *v36;
  capabilities::radio *v37;
  capabilities::trace *v38;
  const char *v39;
  capabilities::radio *v40;
  unsigned int v41;
  const char *v42;
  const char *v43;
  capabilities::radio *v44;
  uint64_t v45;
  int v46;
  const char *v47;
  capabilities::radio *v48;
  uint64_t v49;
  const char *v50;
  capabilities::radio *v51;
  const char *v52;
  capabilities::radio *v53;
  const char *v54;
  capabilities::radio *v55;
  const char *v56;
  capabilities::radio *v57;
  const char *v58;
  capabilities::radio *v59;
  capabilities::trace *v60;
  capabilities::radio *v61;
  defaults::bbtrace *v62;
  const char *v63;
  NSObject *v64;
  char *v65;
  unsigned int count;
  unsigned int v67;
  capabilities::abs *v68;
  unsigned int v69;
  std::string v70;
  char *v71;
  _QWORD v72[3];

  v72[2] = *MEMORY[0x1E0C80C00];
  v4 = a1[23];
  if ((v4 & 0x80000000) == 0)
  {
    v5 = (capabilities::trace *)strcasecmp(a1, "Enabled");
    if ((_DWORD)v5)
    {
      v6 = (capabilities::trace *)strcasecmp(a1, "High_Tput");
      if ((_DWORD)v6)
      {
        v7 = (capabilities::trace *)strcasecmp(a1, "Data_Logging");
        if ((_DWORD)v7)
        {
          if (strcasecmp(a1, "Mode"))
          {
            if (!strcasecmp(a1, "BootSessionUUID"))
              goto LABEL_183;
            if (strcasecmp(a1, "TraceOwnership"))
            {
              v8 = (capabilities::trace *)strcasecmp(a1, "History");
              v9 = a1;
              if ((_DWORD)v8)
                goto LABEL_9;
              goto LABEL_23;
            }
          }
LABEL_27:
          *(_QWORD *)((char *)v72 + 7) = 0;
          v72[0] = 0;
          std::to_string(&v70, 0);
          goto LABEL_28;
        }
LABEL_26:
        v17 = capabilities::trace::supportsDataLoggingByDefault(v7);
        v72[0] = 0;
        *(_QWORD *)((char *)v72 + 7) = 0;
        std::to_string(&v70, v17);
        goto LABEL_28;
      }
LABEL_25:
      v16 = capabilities::trace::supportsHighTPutByDefault(v6);
      v72[0] = 0;
      *(_QWORD *)((char *)v72 + 7) = 0;
      std::to_string(&v70, v16);
      goto LABEL_28;
    }
LABEL_24:
    v15 = capabilities::trace::enabledByDefault(v5);
    v72[0] = 0;
    *(_QWORD *)((char *)v72 + 7) = 0;
    std::to_string(&v70, v15);
    goto LABEL_28;
  }
  v9 = *(const char **)a1;
  v5 = (capabilities::trace *)strcasecmp(*(const char **)a1, "Enabled");
  if (!(_DWORD)v5)
    goto LABEL_24;
  v6 = (capabilities::trace *)strcasecmp(v9, "High_Tput");
  if (!(_DWORD)v6)
    goto LABEL_25;
  v7 = (capabilities::trace *)strcasecmp(v9, "Data_Logging");
  if (!(_DWORD)v7)
    goto LABEL_26;
  if (!strcasecmp(v9, "Mode"))
    goto LABEL_27;
  if (!strcasecmp(v9, "BootSessionUUID"))
    goto LABEL_183;
  if (!strcasecmp(v9, "TraceOwnership"))
    goto LABEL_27;
  v8 = (capabilities::trace *)strcasecmp(v9, "History");
  if (!(_DWORD)v8)
  {
LABEL_23:
    v14 = capabilities::trace::defaultHistorySizeMB(v8);
    v72[0] = 0;
    *(_QWORD *)((char *)v72 + 7) = 0;
    std::to_string(&v70, v14);
LABEL_28:
    v72[0] = v70.__r_.__value_.__l.__size_;
    v18 = v70.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v72 + 7) = *(std::string::size_type *)((char *)&v70.__r_.__value_.__r.__words[1] + 7);
    v19 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
    if (*((char *)a2 + 23) < 0)
      operator delete((void *)*a2);
    v20 = v72[0];
    *a2 = v18;
    a2[1] = v20;
    *(std::string::size_type *)((char *)a2 + 15) = *(_QWORD *)((char *)v72 + 7);
    *((_BYTE *)a2 + 23) = v19;
    return 1;
  }
LABEL_9:
  v10 = (capabilities::radio *)strcasecmp(v9, diag::config::kEnabledDuringSleepKey[0]);
  if (!(_DWORD)v10)
  {
    v22 = capabilities::radio::maverick(v10);
    if ((v22 & 1) != 0 || (capabilities::radio::ice((capabilities::radio *)v22) & 1) != 0)
    {
      util::to_str<diag::config::DuringAPSleep>(&v70);
LABEL_71:
      if (*((char *)a2 + 23) < 0)
        operator delete((void *)*a2);
      *(std::string *)a2 = v70;
      return 1;
    }
    LOBYTE(v4) = a1[23];
  }
  v11 = *(const char **)a1;
  if ((v4 & 0x80u) == 0)
    v12 = a1;
  else
    v12 = *(const char **)a1;
  v13 = (capabilities::radio *)strcasecmp(v12, diag::config::kBufferingOnAPAwake[0]);
  if (!(_DWORD)v13)
  {
    if ((capabilities::radio::maverick(v13) & 1) != 0)
      goto LABEL_70;
    LOBYTE(v4) = a1[23];
    v11 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0)
    v23 = a1;
  else
    v23 = v11;
  v24 = (capabilities::radio *)strcasecmp(v23, diag::config::kStallDetectionKey[0]);
  if (!(_DWORD)v24)
  {
    if ((capabilities::radio::maverick(v24) & 1) != 0)
      goto LABEL_70;
    LOBYTE(v4) = a1[23];
    v11 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0)
    v25 = a1;
  else
    v25 = v11;
  v26 = (capabilities::radio *)strcasecmp(v25, diag::config::kStallDetectionRetriesKey[0]);
  if (!(_DWORD)v26)
  {
    if ((capabilities::radio::maverick(v26) & 1) != 0)
    {
      util::to_str<unsigned int>(3u, &v70);
      goto LABEL_71;
    }
    LOBYTE(v4) = a1[23];
    v11 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0)
    v27 = a1;
  else
    v27 = v11;
  v28 = (capabilities::radio *)strcasecmp(v27, diag::config::kStallDetectionRecoveryKey[0]);
  if (!(_DWORD)v28)
  {
    if ((capabilities::radio::maverick(v28) & 1) != 0)
    {
      util::to_str<diag::config::Recovery>(&v70);
      goto LABEL_71;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    v29 = a1;
    if (strcasecmp(a1, diag::config::kKeepScratchLogsKey[0]))
      goto LABEL_60;
LABEL_70:
    util::to_str<BOOL>(0, &v70);
    goto LABEL_71;
  }
  v29 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, diag::config::kKeepScratchLogsKey[0]))
    goto LABEL_70;
LABEL_60:
  v30 = (capabilities::radio *)strcasecmp(v29, "File");
  if (!(_DWORD)v30)
  {
    v31 = capabilities::radio::maverick(v30);
    if ((v31 & 1) != 0)
      goto LABEL_76;
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    v32 = (capabilities::radio *)strcasecmp(a1, "File_Secondary");
    v33 = a1;
    if ((_DWORD)v32)
      goto LABEL_65;
LABEL_75:
    v31 = capabilities::radio::ice(v32);
    if (!(_DWORD)v31)
    {
      v35 = "None";
LABEL_80:
      std::string::__assign_external((std::string *)a2, v35);
      return 1;
    }
LABEL_76:
    if (config::hw::watch((config::hw *)v31))
      v35 = "Lite";
    else
      v35 = "Default";
    goto LABEL_80;
  }
  v33 = *(const char **)a1;
  v32 = (capabilities::radio *)strcasecmp(*(const char **)a1, "File_Secondary");
  if (!(_DWORD)v32)
    goto LABEL_75;
LABEL_65:
  v34 = (capabilities::radio *)strcasecmp(v33, diag::config::kExtraDMCFileKey[0]);
  if (!(_DWORD)v34)
  {
    if ((capabilities::radio::maverick(v34) & 1) != 0)
    {
      if (*((char *)a2 + 23) < 0)
      {
        a2[1] = 4;
        a2 = (std::string::size_type *)*a2;
      }
      else
      {
        *((_BYTE *)a2 + 23) = 4;
      }
      strcpy((char *)a2, "None");
      return 1;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80u) == 0)
    v36 = a1;
  else
    v36 = *(const char **)a1;
  v37 = (capabilities::radio *)strcasecmp(v36, "File_Sleep");
  if (!(_DWORD)v37)
  {
    if ((capabilities::radio::maverick(v37) & 1) != 0)
    {
LABEL_87:
      if (*((char *)a2 + 23) < 0)
      {
        a2[1] = 5;
        a2 = (std::string::size_type *)*a2;
      }
      else
      {
        *((_BYTE *)a2 + 23) = 5;
      }
      strcpy((char *)a2, "Sleep");
      return 1;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    if (strcasecmp(a1, "kKeyTraceConfigPath"))
    {
      v38 = (capabilities::trace *)strcasecmp(a1, "MaxMemoryFileCount");
      v39 = a1;
      if ((_DWORD)v38)
        goto LABEL_93;
LABEL_98:
      v41 = capabilities::trace::defaultMemoryFileMaxCount(v38);
      util::to_str<unsigned int>(v41, &v70);
      goto LABEL_71;
    }
LABEL_99:
    if (*((char *)a2 + 23) < 0)
    {
      a2[1] = 17;
      a2 = (std::string::size_type *)*a2;
    }
    else
    {
      *((_BYTE *)a2 + 23) = 17;
    }
    strcpy((char *)a2, "/usr/lib/bbmasks/");
    return 1;
  }
  v39 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, "kKeyTraceConfigPath"))
    goto LABEL_99;
  v38 = (capabilities::trace *)strcasecmp(v39, "MaxMemoryFileCount");
  if (!(_DWORD)v38)
    goto LABEL_98;
LABEL_93:
  v40 = (capabilities::radio *)strcasecmp(v39, "BackgroundMode");
  if (!(_DWORD)v40)
  {
    if ((capabilities::radio::ice(v40) & 1) != 0)
      goto LABEL_70;
    LOBYTE(v4) = a1[23];
  }
  v42 = *(const char **)a1;
  if ((v4 & 0x80u) == 0)
    v43 = a1;
  else
    v43 = *(const char **)a1;
  v44 = (capabilities::radio *)strcasecmp(v43, "High_Watermark");
  if (!(_DWORD)v44)
  {
    v45 = capabilities::radio::ice(v44);
    if ((v45 & 1) != 0)
    {
      if (capabilities::radio::ice((capabilities::radio *)v45))
        v46 = 80;
      else
        v46 = -1;
LABEL_116:
      util::to_str<BOOL>(v46, &v70);
      goto LABEL_71;
    }
    LOBYTE(v4) = a1[23];
    v42 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0)
    v47 = a1;
  else
    v47 = v42;
  v48 = (capabilities::radio *)strcasecmp(v47, "Low_Watermark");
  if (!(_DWORD)v48)
  {
    v49 = capabilities::radio::ice(v48);
    if ((v49 & 1) != 0)
    {
      if (capabilities::radio::ice((capabilities::radio *)v49))
        v46 = 1;
      else
        v46 = -1;
      goto LABEL_116;
    }
    LOBYTE(v4) = a1[23];
    v42 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0)
    v50 = a1;
  else
    v50 = v42;
  v51 = (capabilities::radio *)strcasecmp(v50, "ETBFile");
  if (!(_DWORD)v51)
  {
    if ((capabilities::radio::ice(v51) & 1) != 0)
    {
      if (*((char *)a2 + 23) < 0)
      {
        a2[1] = 8;
        a2 = (std::string::size_type *)*a2;
      }
      else
      {
        *((_BYTE *)a2 + 23) = 8;
      }
      strcpy((char *)a2, "Disabled");
      return 1;
    }
    LOBYTE(v4) = a1[23];
    v42 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0)
    v52 = a1;
  else
    v52 = v42;
  v53 = (capabilities::radio *)strcasecmp(v52, "File");
  if (!(_DWORD)v53)
  {
    if ((capabilities::radio::ice(v53) & 1) != 0)
    {
      if (*((char *)a2 + 23) < 0)
      {
        a2[1] = 7;
        a2 = (std::string::size_type *)*a2;
      }
      else
      {
        *((_BYTE *)a2 + 23) = 7;
      }
      strcpy((char *)a2, "Default");
      return 1;
    }
    LOBYTE(v4) = a1[23];
    v42 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0)
    v54 = a1;
  else
    v54 = v42;
  v55 = (capabilities::radio *)strcasecmp(v54, "File_Sleep");
  if (!(_DWORD)v55)
  {
    if ((capabilities::radio::ice(v55) & 1) != 0)
      goto LABEL_87;
    LOBYTE(v4) = a1[23];
    v42 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0)
    v56 = a1;
  else
    v56 = v42;
  v57 = (capabilities::radio *)strcasecmp(v56, "High_Watermark");
  if (!(_DWORD)v57)
  {
    if ((capabilities::radio::ice(v57) & 1) != 0)
    {
      util::to_str<BOOL>(80, &v70);
      goto LABEL_71;
    }
    LOBYTE(v4) = a1[23];
    v42 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0)
    v58 = a1;
  else
    v58 = v42;
  v59 = (capabilities::radio *)strcasecmp(v58, "Low_Watermark");
  if (!(_DWORD)v59)
  {
    if ((capabilities::radio::ice(v59) & 1) != 0)
    {
LABEL_161:
      util::to_str<BOOL>(1, &v70);
      goto LABEL_71;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    if (!strcasecmp(a1, "CellularLoggingAllowed"))
      goto LABEL_70;
    if (strcasecmp(a1, "CarrierName1") && strcasecmp(a1, "CarrierName2"))
    {
      v60 = (capabilities::trace *)strcasecmp(a1, "FileSize");
      if ((_DWORD)v60)
      {
        v61 = (capabilities::radio *)strcasecmp(a1, "SizeIO");
        if ((_DWORD)v61)
        {
          v62 = (defaults::bbtrace *)strcasecmp(a1, "NumberOfReadIO");
          v63 = a1;
          if ((_DWORD)v62)
            goto LABEL_170;
LABEL_182:
          count = defaults::bbtrace::transport_read_count(v62);
          util::to_str<unsigned int>(count, &v70);
          goto LABEL_71;
        }
LABEL_193:
        v68 = (capabilities::abs *)capabilities::radio::vendor(v61);
        if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v68))
          v69 = 0x4000;
        else
          v69 = 0x8000;
        util::to_str<unsigned int>(v69, &v70);
        goto LABEL_71;
      }
LABEL_192:
      v67 = capabilities::trace::defaultFileSizeBytes(v60);
      util::to_str<unsigned int>(v67, &v70);
      goto LABEL_71;
    }
LABEL_183:
    if (*((char *)a2 + 23) < 0)
    {
      a2[1] = 0;
      a2 = (std::string::size_type *)*a2;
    }
    else
    {
      *((_BYTE *)a2 + 23) = 0;
    }
    *(_BYTE *)a2 = 0;
    return 1;
  }
  v63 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, "CellularLoggingAllowed"))
    goto LABEL_70;
  if (!strcasecmp(v63, "CarrierName1") || !strcasecmp(v63, "CarrierName2"))
    goto LABEL_183;
  v60 = (capabilities::trace *)strcasecmp(v63, "FileSize");
  if (!(_DWORD)v60)
    goto LABEL_192;
  v61 = (capabilities::radio *)strcasecmp(v63, "SizeIO");
  if (!(_DWORD)v61)
    goto LABEL_193;
  v62 = (defaults::bbtrace *)strcasecmp(v63, "NumberOfReadIO");
  if (!(_DWORD)v62)
    goto LABEL_182;
LABEL_170:
  if (!strcasecmp(v63, "Retain_Previous_Trace"))
    goto LABEL_161;
  v64 = GetOsLogContext()[1];
  result = os_log_type_enabled(v64, OS_LOG_TYPE_ERROR);
  if (result)
  {
    if (a1[23] >= 0)
      v65 = a1;
    else
      v65 = *(char **)a1;
    LODWORD(v70.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
    WORD2(v70.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v70.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"BBTrace";
    HIWORD(v70.__r_.__value_.__r.__words[2]) = 2080;
    v71 = v65;
    _os_log_error_impl(&dword_1A343C000, v64, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
      (uint8_t *)&v70,
      0x20u);
    return 0;
  }
  return result;
}

void sub_1A355EEFC(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x1A355E71CLL);
    JUMPOUT(0x1A355E724);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::coredump::get(const char *a1, uint64_t a2)
{
  uint64_t *v3;
  capabilities::trace *v4;
  int v5;
  unsigned __int8 v6;
  NSObject *v7;
  uint64_t *v8;
  int v9;
  std::string::size_type v10;
  char v11;
  uint64_t v12;
  std::string v14;
  uint64_t *v15;
  _QWORD v16[3];

  v3 = (uint64_t *)a1;
  v16[2] = *MEMORY[0x1E0C80C00];
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v4 = (capabilities::trace *)strcasecmp(a1, "Enabled");
  v5 = (int)v4;
  if ((_DWORD)v4)
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED114D18 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v7 = qword_1ED114D18;
      if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
        return v5 == 0;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
      v7 = qword_1ED114D18;
      if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
        return v5 == 0;
    }
    if (*((char *)v3 + 23) >= 0)
      v8 = v3;
    else
      v8 = (uint64_t *)*v3;
    LODWORD(v14.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v14.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
    WORD2(v14.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v14.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"CoreDump";
    HIWORD(v14.__r_.__value_.__r.__words[2]) = 2080;
    v15 = v8;
    _os_log_error_impl(&dword_1A343C000, v7, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
      (uint8_t *)&v14,
      0x20u);
  }
  else
  {
    v9 = capabilities::trace::allowed(v4);
    v16[0] = 0;
    *(_QWORD *)((char *)v16 + 7) = 0;
    std::to_string(&v14, v9);
    v16[0] = v14.__r_.__value_.__l.__size_;
    v10 = v14.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v16 + 7) = *(std::string::size_type *)((char *)&v14.__r_.__value_.__r.__words[1] + 7);
    v11 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v12 = v16[0];
    *(_QWORD *)a2 = v10;
    *(_QWORD *)(a2 + 8) = v12;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v16 + 7);
    *(_BYTE *)(a2 + 23) = v11;
  }
  return v5 == 0;
}

void sub_1A355F158(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x1A355F094);
    JUMPOUT(0x1A355F09CLL);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::ipc::get(char *a1, uint64_t a2)
{
  capabilities::ipc *v4;
  capabilities::ipc *v5;
  const char *v6;
  capabilities::ipc *v7;
  int v8;
  capabilities::trace *v9;
  std::string::size_type v10;
  char v11;
  uint64_t v12;
  _BOOL8 result;
  unsigned __int8 v14;
  NSObject *v15;
  char *v16;
  std::string v17;
  char *v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  if (a1[23] < 0)
  {
    v6 = *(const char **)a1;
    v4 = (capabilities::ipc *)strcasecmp(*(const char **)a1, "Enabled");
    if ((_DWORD)v4)
    {
      v5 = (capabilities::ipc *)strcasecmp(v6, "History");
      if ((_DWORD)v5)
        goto LABEL_4;
LABEL_9:
      v8 = capabilities::ipc::defaultPCIBinaryTraceHistorySizeMB(v5);
      memset(v19, 0, 15);
      std::to_string(&v17, v8);
      goto LABEL_13;
    }
LABEL_10:
    v9 = (capabilities::trace *)capabilities::ipc::supportsPCI(v4);
    if ((_DWORD)v9)
      LODWORD(v9) = capabilities::trace::enabledByDefault(v9);
    memset(v19, 0, 15);
    std::to_string(&v17, (int)v9);
    goto LABEL_13;
  }
  v4 = (capabilities::ipc *)strcasecmp(a1, "Enabled");
  if (!(_DWORD)v4)
    goto LABEL_10;
  v5 = (capabilities::ipc *)strcasecmp(a1, "History");
  v6 = a1;
  if (!(_DWORD)v5)
    goto LABEL_9;
LABEL_4:
  v7 = (capabilities::ipc *)strcasecmp(v6, "BufferCount");
  if (!(_DWORD)v7 && capabilities::ipc::supportsPCI(v7))
  {
    memset(v19, 0, 15);
    std::to_string(&v17, 4uLL);
LABEL_13:
    v19[0] = v17.__r_.__value_.__l.__size_;
    v10 = v17.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v19 + 7) = *(std::string::size_type *)((char *)&v17.__r_.__value_.__r.__words[1] + 7);
    v11 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v12 = v19[0];
    *(_QWORD *)a2 = v10;
    *(_QWORD *)(a2 + 8) = v12;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v19 + 7);
    *(_BYTE *)(a2 + 23) = v11;
    return 1;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED114D18 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v15 = qword_1ED114D18;
    result = os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
    v15 = qword_1ED114D18;
    result = os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  if (a1[23] >= 0)
    v16 = a1;
  else
    v16 = *(char **)a1;
  LODWORD(v17.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)v17.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
  WORD2(v17.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v17.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"IPC";
  HIWORD(v17.__r_.__value_.__r.__words[2]) = 2080;
  v18 = v16;
  _os_log_error_impl(&dword_1A343C000, v15, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
    (uint8_t *)&v17,
    0x20u);
  return 0;
}

void sub_1A355F420(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x1A355F28CLL);
    JUMPOUT(0x1A355F294);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::bbipc::get(char *a1, uint64_t a2)
{
  capabilities::trace *v4;
  capabilities::ipc *v5;
  const char *v6;
  capabilities::ipc *v7;
  unsigned __int8 v8;
  NSObject *v9;
  _BOOL8 result;
  char *v11;
  int v12;
  int v13;
  int v14;
  std::string::size_type v15;
  char v16;
  uint64_t v17;
  std::string v18;
  char *v19;
  _QWORD v20[3];

  v20[2] = *MEMORY[0x1E0C80C00];
  if ((a1[23] & 0x80000000) == 0)
  {
    v4 = (capabilities::trace *)strcasecmp(a1, "Enabled");
    if ((_DWORD)v4)
    {
      v5 = (capabilities::ipc *)strcasecmp(a1, "LogLevel");
      v6 = a1;
      if ((_DWORD)v5)
        goto LABEL_4;
      goto LABEL_14;
    }
LABEL_15:
    v13 = capabilities::trace::enabledByDefault(v4);
    v20[0] = 0;
    *(_QWORD *)((char *)v20 + 7) = 0;
    std::to_string(&v18, v13);
    goto LABEL_17;
  }
  v6 = *(const char **)a1;
  v4 = (capabilities::trace *)strcasecmp(*(const char **)a1, "Enabled");
  if (!(_DWORD)v4)
    goto LABEL_15;
  v5 = (capabilities::ipc *)strcasecmp(v6, "LogLevel");
  if (!(_DWORD)v5)
  {
LABEL_14:
    v12 = capabilities::ipc::defaultLogLevel(v5);
    v20[0] = 0;
    *(_QWORD *)((char *)v20 + 7) = 0;
    std::to_string(&v18, v12);
LABEL_17:
    v20[0] = v18.__r_.__value_.__l.__size_;
    v15 = v18.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v20 + 7) = *(std::string::size_type *)((char *)&v18.__r_.__value_.__r.__words[1] + 7);
    v16 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v17 = v20[0];
    *(_QWORD *)a2 = v15;
    *(_QWORD *)(a2 + 8) = v17;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v20 + 7);
    *(_BYTE *)(a2 + 23) = v16;
    return 1;
  }
LABEL_4:
  v7 = (capabilities::ipc *)strcasecmp(v6, "PayloadSize");
  if (!(_DWORD)v7)
  {
    v14 = capabilities::ipc::defaultMHIConfigPayloadSizeBytes(v7);
    v20[0] = 0;
    *(_QWORD *)((char *)v20 + 7) = 0;
    std::to_string(&v18, v14);
    goto LABEL_17;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED114D18 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v9 = qword_1ED114D18;
    result = os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
    v9 = qword_1ED114D18;
    result = os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  if (a1[23] >= 0)
    v11 = a1;
  else
    v11 = *(char **)a1;
  LODWORD(v18.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)v18.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
  WORD2(v18.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v18.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"BasebandIPC";
  HIWORD(v18.__r_.__value_.__r.__words[2]) = 2080;
  v19 = v11;
  _os_log_error_impl(&dword_1A343C000, v9, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
    (uint8_t *)&v18,
    0x20u);
  return 0;
}

void sub_1A355F6CC(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x1A355F60CLL);
    JUMPOUT(0x1A355F614);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::compression::get(char *a1, uint64_t a2)
{
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  _BOOL8 result;
  char *v8;
  uint64_t IsInternalBuild;
  int CompressionMode;
  std::string v11;
  char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((a1[23] & 0x80000000) == 0)
  {
    v4 = a1;
    if (strcasecmp(a1, "Mode"))
      goto LABEL_3;
LABEL_12:
    IsInternalBuild = TelephonyUtilIsInternalBuild();
    if ((IsInternalBuild & 1) != 0 || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
      CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
    else
      CompressionMode = 2;
    std::to_string(&v11, CompressionMode);
    goto LABEL_18;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, "Mode"))
    goto LABEL_12;
LABEL_3:
  if (!strcasecmp(v4, "SplitArchive"))
  {
    std::to_string(&v11, 0);
LABEL_18:
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(std::string *)a2 = v11;
    return 1;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED114D18 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v6 = qword_1ED114D18;
    result = os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
    v6 = qword_1ED114D18;
    result = os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  if (a1[23] >= 0)
    v8 = a1;
  else
    v8 = *(char **)a1;
  LODWORD(v11.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)v11.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
  WORD2(v11.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v11.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"Compression";
  HIWORD(v11.__r_.__value_.__r.__words[2]) = 2080;
  v12 = v8;
  _os_log_error_impl(&dword_1A343C000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
    (uint8_t *)&v11,
    0x20u);
  return 0;
}

BOOL defaults::ttr::get(char *a1, uint64_t a2)
{
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  _BOOL8 result;
  char *v8;
  int IsCarrierBuild;
  std::string::size_type v10;
  char v11;
  uint64_t v12;
  std::string v13;
  char *v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  if ((a1[23] & 0x80000000) == 0)
  {
    v4 = a1;
    if (strcasecmp(a1, "Mode"))
      goto LABEL_3;
LABEL_12:
    if ((TelephonyUtilIsInternalBuild() & 1) != 0)
      IsCarrierBuild = 1;
    else
      IsCarrierBuild = TelephonyUtilIsCarrierBuild();
    memset(v15, 0, 15);
    std::to_string(&v13, IsCarrierBuild);
    goto LABEL_17;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, "Mode"))
    goto LABEL_12;
LABEL_3:
  if (!strcasecmp(v4, "AgeLimit"))
  {
    memset(v15, 0, 15);
    std::to_string(&v13, 43200);
LABEL_17:
    v15[0] = v13.__r_.__value_.__l.__size_;
    v10 = v13.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v15 + 7) = *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 7);
    v11 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v12 = v15[0];
    *(_QWORD *)a2 = v10;
    *(_QWORD *)(a2 + 8) = v12;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v15 + 7);
    *(_BYTE *)(a2 + 23) = v11;
    return 1;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED114D18 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v6 = qword_1ED114D18;
    result = os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
    v6 = qword_1ED114D18;
    result = os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  if (a1[23] >= 0)
    v8 = a1;
  else
    v8 = *(char **)a1;
  LODWORD(v13.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)v13.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
  WORD2(v13.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"TTR";
  HIWORD(v13.__r_.__value_.__r.__words[2]) = 2080;
  v14 = v8;
  _os_log_error_impl(&dword_1A343C000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
    (uint8_t *)&v13,
    0x20u);
  return 0;
}

void sub_1A355FB60(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x1A355FAA0);
    JUMPOUT(0x1A355FAA8);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::logfilter::get(char *a1, uint64_t a2)
{
  const char *v4;
  capabilities::trace *v5;
  unsigned __int8 v6;
  NSObject *v7;
  _BOOL8 result;
  char *v9;
  int v10;
  std::string::size_type v11;
  char v12;
  uint64_t v13;
  std::string v14;
  char *v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, "FreeSpace"))
    {
      v4 = a1;
      if (strcasecmp(a1, "MaxLogLimit"))
        goto LABEL_4;
      goto LABEL_14;
    }
LABEL_15:
    memset(v16, 0, 15);
    std::to_string(&v14, 512);
    goto LABEL_17;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, "FreeSpace"))
    goto LABEL_15;
  if (!strcasecmp(v4, "MaxLogLimit"))
  {
LABEL_14:
    memset(v16, 0, 15);
    std::to_string(&v14, -1);
LABEL_17:
    v16[0] = v14.__r_.__value_.__l.__size_;
    v11 = v14.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v16 + 7) = *(std::string::size_type *)((char *)&v14.__r_.__value_.__r.__words[1] + 7);
    v12 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v13 = v16[0];
    *(_QWORD *)a2 = v11;
    *(_QWORD *)(a2 + 8) = v13;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v16 + 7);
    *(_BYTE *)(a2 + 23) = v12;
    return 1;
  }
LABEL_4:
  v5 = (capabilities::trace *)strcasecmp(v4, "DuplicateSignatureDetection");
  if (!(_DWORD)v5)
  {
    v10 = capabilities::trace::supportsDuplicateSignatureDetection(v5);
    memset(v16, 0, 15);
    std::to_string(&v14, v10);
    goto LABEL_17;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED114D18 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v7 = qword_1ED114D18;
    result = os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
    v7 = qword_1ED114D18;
    result = os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  if (a1[23] >= 0)
    v9 = a1;
  else
    v9 = *(char **)a1;
  LODWORD(v14.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)v14.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
  WORD2(v14.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v14.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"LogFilter";
  HIWORD(v14.__r_.__value_.__r.__words[2]) = 2080;
  v15 = v9;
  _os_log_error_impl(&dword_1A343C000, v7, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
    (uint8_t *)&v14,
    0x20u);
  return 0;
}

void sub_1A355FDFC(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x1A355FD3CLL);
    JUMPOUT(0x1A355FD44);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::systemlogs::get(char *a1, uint64_t a2)
{
  capabilities::abs *v4;
  const char *v5;
  unsigned __int8 v6;
  NSObject *v7;
  _BOOL8 result;
  char *v9;
  int v10;
  int IsCarrierBuild;
  std::string::size_type v12;
  char v13;
  uint64_t v14;
  std::string v15;
  char *v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, "Mode"))
    {
      v4 = (capabilities::abs *)strcasecmp(a1, "History");
      v5 = a1;
      if ((_DWORD)v4)
        goto LABEL_4;
LABEL_14:
      v10 = capabilities::abs::defaultSystemLogsHistory(v4);
      v17[0] = 0;
      *(_QWORD *)((char *)v17 + 7) = 0;
      std::to_string(&v15, v10);
LABEL_20:
      v17[0] = v15.__r_.__value_.__l.__size_;
      v12 = v15.__r_.__value_.__r.__words[0];
      *(_QWORD *)((char *)v17 + 7) = *(std::string::size_type *)((char *)&v15.__r_.__value_.__r.__words[1] + 7);
      v13 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      v14 = v17[0];
      *(_QWORD *)a2 = v12;
      *(_QWORD *)(a2 + 8) = v14;
      *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v17 + 7);
      *(_BYTE *)(a2 + 23) = v13;
      return 1;
    }
LABEL_15:
    if ((TelephonyUtilIsInternalBuild() & 1) != 0)
      IsCarrierBuild = 1;
    else
      IsCarrierBuild = TelephonyUtilIsCarrierBuild();
    *(_QWORD *)((char *)v17 + 7) = 0;
    v17[0] = 0;
    std::to_string(&v15, IsCarrierBuild);
    goto LABEL_20;
  }
  v5 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, "Mode"))
    goto LABEL_15;
  v4 = (capabilities::abs *)strcasecmp(v5, "History");
  if (!(_DWORD)v4)
    goto LABEL_14;
LABEL_4:
  if (!strcasecmp(v5, "UserConfirmation"))
  {
    *(_QWORD *)((char *)v17 + 7) = 0;
    v17[0] = 0;
    std::to_string(&v15, 1);
    goto LABEL_20;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED114D18 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v7 = qword_1ED114D18;
    result = os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
    v7 = qword_1ED114D18;
    result = os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  if (a1[23] >= 0)
    v9 = a1;
  else
    v9 = *(char **)a1;
  LODWORD(v15.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)v15.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
  WORD2(v15.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v15.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"SystemLogs";
  HIWORD(v15.__r_.__value_.__r.__words[2]) = 2080;
  v16 = v9;
  _os_log_error_impl(&dword_1A343C000, v7, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
    (uint8_t *)&v15,
    0x20u);
  return 0;
}

void sub_1A35600B8(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x1A355FFF8);
    JUMPOUT(0x1A3560000);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::profile::get(char *a1, uint64_t a2)
{
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  _BOOL8 result;
  char *v8;
  std::string::size_type v9;
  char v10;
  uint64_t v11;
  std::string v12;
  char *v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  if (a1[23] < 0)
  {
    v4 = *(const char **)a1;
    if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFAF68]))
      goto LABEL_12;
  }
  else
  {
    v4 = a1;
    if (!strcasecmp(a1, (const char *)*MEMORY[0x1E0CFAF68]))
    {
LABEL_12:
      memset(v14, 0, 15);
      std::to_string(&v12, 0);
      v14[0] = v12.__r_.__value_.__l.__size_;
      v9 = v12.__r_.__value_.__r.__words[0];
      *(_QWORD *)((char *)v14 + 7) = *(std::string::size_type *)((char *)&v12.__r_.__value_.__r.__words[1] + 7);
      v10 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      v11 = v14[0];
      *(_QWORD *)a2 = v9;
      *(_QWORD *)(a2 + 8) = v11;
      *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v14 + 7);
      *(_BYTE *)(a2 + 23) = v10;
      return 1;
    }
  }
  if (!strcasecmp(v4, "InstalledCarrierProfileVersion"))
    goto LABEL_12;
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED114D18 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v6 = qword_1ED114D18;
    result = os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
    v6 = qword_1ED114D18;
    result = os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  if (a1[23] >= 0)
    v8 = a1;
  else
    v8 = *(char **)a1;
  LODWORD(v12.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)v12.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
  WORD2(v12.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v12.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"Profile";
  HIWORD(v12.__r_.__value_.__r.__words[2]) = 2080;
  v13 = v8;
  _os_log_error_impl(&dword_1A343C000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
    (uint8_t *)&v12,
    0x20u);
  return 0;
}

void sub_1A3560328(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x1A3560268);
    JUMPOUT(0x1A3560270);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::tailspin::get(const char *a1, uint64_t a2)
{
  uint64_t *v3;
  int v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t *v7;
  std::string::size_type v8;
  char v9;
  uint64_t v10;
  std::string v12;
  uint64_t *v13;
  _QWORD v14[3];

  v3 = (uint64_t *)a1;
  v14[2] = *MEMORY[0x1E0C80C00];
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v4 = strcasecmp(a1, (const char *)*MEMORY[0x1E0CFAF68]);
  if (v4)
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED114D18 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v6 = qword_1ED114D18;
      if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
        return v4 == 0;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
      v6 = qword_1ED114D18;
      if (!os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR))
        return v4 == 0;
    }
    if (*((char *)v3 + 23) >= 0)
      v7 = v3;
    else
      v7 = (uint64_t *)*v3;
    LODWORD(v12.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v12.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
    WORD2(v12.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v12.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"Tailspin";
    HIWORD(v12.__r_.__value_.__r.__words[2]) = 2080;
    v13 = v7;
    _os_log_error_impl(&dword_1A343C000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
      (uint8_t *)&v12,
      0x20u);
  }
  else
  {
    memset(v14, 0, 15);
    std::to_string(&v12, 0);
    v14[0] = v12.__r_.__value_.__l.__size_;
    v8 = v12.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v14 + 7) = *(std::string::size_type *)((char *)&v12.__r_.__value_.__r.__words[1] + 7);
    v9 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v10 = v14[0];
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v10;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v14 + 7);
    *(_BYTE *)(a2 + 23) = v9;
  }
  return v4 == 0;
}

void sub_1A3560544(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x1A3560480);
    JUMPOUT(0x1A3560488);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::tracesettings::get(char *a1, std::string *a2)
{
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  _BOOL8 result;
  char *v8;
  const std::string::value_type *v9;
  int v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if ((a1[23] & 0x80000000) == 0)
  {
    if (!strcasecmp(a1, "SettingsVersion"))
    {
LABEL_19:
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      {
        a2->__r_.__value_.__l.__size_ = 1;
        a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&a2->__r_.__value_.__s + 23) = 1;
      }
      LOWORD(a2->__r_.__value_.__l.__data_) = 48;
      return 1;
    }
    if (strcasecmp(a1, "SettingsSelected"))
    {
      v4 = a1;
      if (strcasecmp(a1, "Time"))
        goto LABEL_5;
LABEL_16:
      if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
        v9 = "1";
      else
        v9 = "3";
      std::string::__assign_external(a2, v9);
      return 1;
    }
LABEL_21:
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      operator delete(a2->__r_.__value_.__l.__data_);
    strcpy((char *)a2, "Default");
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = 7;
    return 1;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, "SettingsVersion"))
    goto LABEL_19;
  if (!strcasecmp(v4, "SettingsSelected"))
    goto LABEL_21;
  if (!strcasecmp(v4, "Time"))
    goto LABEL_16;
LABEL_5:
  if (!strcasecmp(v4, "SettingsDevice"))
    goto LABEL_19;
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED114D18 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1A343C000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v6 = qword_1ED114D18;
    result = os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
    v6 = qword_1ED114D18;
    result = os_log_type_enabled((os_log_t)qword_1ED114D18, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  if (a1[23] >= 0)
    v8 = a1;
  else
    v8 = *(char **)a1;
  v10 = 136315650;
  v11 = "prop.default";
  v12 = 2080;
  v13 = "Settings";
  v14 = 2080;
  v15 = v8;
  _os_log_error_impl(&dword_1A343C000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
    (uint8_t *)&v10,
    0x20u);
  return 0;
}

uint64_t defaults::bbtrace::mode(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::history(defaults::bbtrace *this)
{
  return capabilities::trace::defaultHistorySizeMB(this);
}

double util::to_str<diag::config::DuringAPSleep>(std::string *a1)
{
  double result;
  std::string v3;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v3, 0);
  result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_1A356087C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1A356086CLL);
}

void sub_1A3560888(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::enabled_during_sleep(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::buffering_on_ap_wake(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::stall_detection(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::stall_retries(defaults::bbtrace *this)
{
  return 3;
}

double util::to_str<diag::config::Recovery>(std::string *a1)
{
  double result;
  std::string v3;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v3, 0);
  result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_1A356090C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1A35608FCLL);
}

void sub_1A3560918(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::stall_recovery(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::keep_scratch_logs(defaults::bbtrace *this)
{
  return 0;
}

const char *defaults::bbtrace::primary_dmc(defaults::bbtrace *this)
{
  if (config::hw::watch(this))
    return "Lite";
  else
    return "Default";
}

const char *defaults::bbtrace::secondary_dmc(defaults::bbtrace *this)
{
  config::hw *v1;

  v1 = (config::hw *)capabilities::radio::ice(this);
  if (!(_DWORD)v1)
    return "None";
  if (config::hw::watch(v1))
    return "Lite";
  return "Default";
}

const char *defaults::bbtrace::extra_dmc(defaults::bbtrace *this)
{
  return "None";
}

const char *defaults::bbtrace::sleep_dmc(defaults::bbtrace *this)
{
  return "Sleep";
}

uint64_t defaults::bbtrace::max_memory_file_count(defaults::bbtrace *this)
{
  return capabilities::trace::defaultMemoryFileMaxCount(this);
}

uint64_t defaults::bbtrace::high_water_mark(defaults::bbtrace *this)
{
  if (capabilities::radio::ice(this))
    return 80;
  else
    return 0xFFFFFFFFLL;
}

uint64_t defaults::bbtrace::low_water_mark(defaults::bbtrace *this)
{
  if (capabilities::radio::ice(this))
    return 1;
  else
    return 0xFFFFFFFFLL;
}

uint64_t defaults::bbtrace::carrier_logging_allowed(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::file_size(defaults::bbtrace *this)
{
  return capabilities::trace::defaultFileSizeBytes(this);
}

uint64_t defaults::bbtrace::transport_read_size(defaults::bbtrace *this)
{
  capabilities::abs *v1;

  v1 = (capabilities::abs *)capabilities::radio::vendor(this);
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v1))
    return 0x4000;
  else
    return 0x8000;
}

uint64_t defaults::bbtrace::transport_read_count(defaults::bbtrace *this)
{
  capabilities::abs *v1;
  int v2;
  char shouldUseMinBasebandTransportIOReadCount;
  int v4;
  int v5;
  unsigned int v6;

  v1 = (capabilities::abs *)capabilities::radio::vendor(this);
  if (((_DWORD)v1 - 1) > 2)
    v2 = 23;
  else
    v2 = dword_1A3584620[(int)v1 - 1];
  shouldUseMinBasebandTransportIOReadCount = capabilities::abs::shouldUseMinBasebandTransportIOReadCount(v1);
  if (v2 == 15)
    v4 = 36;
  else
    v4 = 4;
  if (v2 == 16)
    v5 = 36;
  else
    v5 = v4;
  if (v2 == 2)
    v6 = 16;
  else
    v6 = v5;
  if ((shouldUseMinBasebandTransportIOReadCount & 1) != 0)
    return 4;
  else
    return v6;
}

uint64_t defaults::bbtrace::privacyLevel(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::error_handling(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::live_filter(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::min_file_size(defaults::bbtrace *this)
{
  capabilities::abs *v1;

  v1 = (capabilities::abs *)capabilities::radio::vendor(this);
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v1))
    return 0x4000;
  else
    return 0x8000;
}

capabilities::trace *defaults::ipc::enabled(defaults::ipc *this)
{
  capabilities::trace *result;

  result = (capabilities::trace *)capabilities::ipc::supportsPCI(this);
  if ((_DWORD)result)
    return (capabilities::trace *)capabilities::trace::enabledByDefault(result);
  return result;
}

uint64_t defaults::ipc::history(defaults::ipc *this)
{
  return capabilities::ipc::defaultPCIBinaryTraceHistorySizeMB(this);
}

uint64_t defaults::ipc::buffer_count(defaults::ipc *this)
{
  return 4;
}

uint64_t defaults::bbipc::mhiConfigPayloadSize(defaults::bbipc *this)
{
  return capabilities::ipc::defaultMHIConfigPayloadSizeBytes(this);
}

uint64_t defaults::logfilter::free_space_limit(defaults::logfilter *this)
{
  return 512;
}

uint64_t defaults::logfilter::max_log_limit(defaults::logfilter *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t defaults::helper::supported(defaults::helper *this)
{
  return 1;
}

uint64_t defaults::compression::mode(defaults::compression *this)
{
  uint64_t IsInternalBuild;

  IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0)
    return capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  IsInternalBuild = TelephonyUtilIsCarrierBuild();
  if ((_DWORD)IsInternalBuild)
    return capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  else
    return 2;
}

uint64_t defaults::compression::splitArchive(defaults::compression *this)
{
  return 0;
}

uint64_t defaults::compression::supported(defaults::compression *this)
{
  return 1;
}

uint64_t defaults::ttr::mode(defaults::ttr *this)
{
  if ((TelephonyUtilIsInternalBuild() & 1) != 0)
    return 1;
  else
    return TelephonyUtilIsCarrierBuild();
}

uint64_t defaults::ttr::agelimit(defaults::ttr *this)
{
  return 43200;
}

uint64_t defaults::ttr::supported(defaults::ttr *this)
{
  if ((TelephonyUtilIsInternalBuild() & 1) != 0)
    return 1;
  else
    return TelephonyUtilIsCarrierBuild();
}

uint64_t defaults::systemlogs::mode(defaults::systemlogs *this)
{
  if ((TelephonyUtilIsInternalBuild() & 1) != 0)
    return 1;
  else
    return TelephonyUtilIsCarrierBuild();
}

uint64_t defaults::systemlogs::history(defaults::systemlogs *this)
{
  return capabilities::abs::defaultSystemLogsHistory(this);
}

uint64_t defaults::systemlogs::userConfirmationRequired(defaults::systemlogs *this)
{
  return 1;
}

uint64_t defaults::systemlogs::supported(defaults::systemlogs *this)
{
  return 1;
}

uint64_t defaults::profile::enabled(defaults::profile *this)
{
  return 0;
}

uint64_t defaults::profile::version(defaults::profile *this)
{
  return 0;
}

uint64_t defaults::tailspin::enabled(defaults::tailspin *this)
{
  return 0;
}

void defaults::tracesettings::config(char *a1@<X8>)
{
  a1[23] = 7;
  strcpy(a1, "Default");
}

_QWORD *support::log::delegate::context::create@<X0>(support::log::delegate::context *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v5;
  _QWORD *result;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v5 = operator new(0x10uLL);
  *v5 = off_1E4A0F908;
  v5[1] = this;
  *a2 = v5;
  result = operator new(0x20uLL);
  *result = off_1E4A0FB30;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[1] = result;
  return result;
}

void sub_1A3560D1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *support::log::delegate::context::context(_QWORD *this, void *a2)
{
  *this = off_1E4A0F908;
  this[1] = a2;
  return this;
}

{
  *this = off_1E4A0F908;
  this[1] = a2;
  return this;
}

uint64_t support::log::delegate::delegate(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a2;
  v2 = a2[1];
  *(_QWORD *)result = &unk_1E4A0F928;
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(result + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(result + 24) = 1;
  return result;
}

uint64_t support::log::delegate::get_context@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (*(_BYTE *)(this + 24))
  {
    v2 = *(_QWORD *)(this + 16);
    *(_QWORD *)a2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(a2 + 8) = v2;
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 16);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 1, v3));
    }
    *(_BYTE *)(a2 + 16) = 1;
  }
  return this;
}

uint64_t support::log::manager::parameters::parameters(uint64_t result, char a2)
{
  *(_QWORD *)result = &off_1E4A0F958;
  *(_BYTE *)(result + 8) = a2;
  return result;
}

{
  *(_QWORD *)result = &off_1E4A0F958;
  *(_BYTE *)(result + 8) = a2;
  return result;
}

uint64_t support::log::manager::parameters::parameters(uint64_t this)
{
  *(_QWORD *)this = &off_1E4A0F958;
  *(_BYTE *)(this + 8) = 3;
  return this;
}

{
  *(_QWORD *)this = &off_1E4A0F958;
  *(_BYTE *)(this + 8) = 3;
  return this;
}

uint64_t support::log::manager::parameters::set_defaults(uint64_t this)
{
  *(_BYTE *)(this + 8) = 3;
  return this;
}

uint64_t support::log::manager::manager(uint64_t a1, std::string *a2, uint64_t a3, _QWORD *a4)
{
  std::string *v7;
  const char *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string::value_type __s[23];
  char v17;
  std::string v18;

  *(_QWORD *)a1 = off_1E4A0F970;
  *(_QWORD *)(a1 + 8) = 850045863;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  v18 = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  v17 = 12;
  strcpy(__s, ".log_manager");
  v7 = std::string::append(&v18, __s, 0xCuLL);
  v8 = (const char *)(a1 + 72);
  v9 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)&v7->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 72) = v9;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if ((v17 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_8:
    operator delete(v18.__r_.__value_.__l.__data_);
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
      goto LABEL_4;
    goto LABEL_9;
  }
  operator delete(*(void **)__s);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
LABEL_3:
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    goto LABEL_4;
LABEL_9:
  v8 = *(const char **)v8;
LABEL_4:
  *(_QWORD *)(a1 + 96) = os_log_create("com.apple.telephony.basebandservices", v8);
  *(_QWORD *)(a1 + 104) = &off_1E4A0F958;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a3 + 8);
  *(_QWORD *)(a1 + 120) = a1 + 120;
  *(_QWORD *)(a1 + 128) = a1 + 120;
  *(_QWORD *)(a1 + 136) = 0;
  v10 = a4[2];
  if (v10)
  {
    v12 = *a4;
    v11 = (uint64_t *)a4[1];
    v13 = *v11;
    *(_QWORD *)(v13 + 8) = *(_QWORD *)(*a4 + 8);
    **(_QWORD **)(v12 + 8) = v13;
    v14 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(v14 + 8) = v11;
    *v11 = v14;
    *(_QWORD *)(a1 + 120) = v12;
    *(_QWORD *)(v12 + 8) = a1 + 120;
    *(_QWORD *)(a1 + 136) = v10;
    a4[2] = 0;
  }
  return a1;
}

void sub_1A3560FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::mutex *v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      std::mutex::~mutex(v21);
      _Unwind_Resume(a1);
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  std::mutex::~mutex(v21);
  _Unwind_Resume(a1);
}

uint64_t support::log::manager::manager(uint64_t a1, std::string *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::string __p;

  __p = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  v15 = (uint64_t)&v15;
  v16 = &v15;
  v17 = 0;
  support::log::manager::manager(a1, &__p, a3, &v15);
  if (v17)
  {
    v6 = v15;
    v7 = v16;
    v8 = *v16;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v15 + 8);
    **(_QWORD **)(v6 + 8) = v8;
    v17 = 0;
    if (v7 != &v15)
    {
      do
      {
        v10 = (uint64_t *)v7[1];
        v9 = v7[2];
        v7[2] = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != &v15);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*a4)
      return a1;
    goto LABEL_10;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (*a4)
  {
LABEL_10:
    std::mutex::lock((std::mutex *)(a1 + 8));
    v11 = operator new(0x18uLL);
    v12 = *a4;
    *a4 = 0;
    v13 = *(_QWORD *)(a1 + 120);
    v11[1] = a1 + 120;
    v11[2] = v12;
    *v11 = v13;
    *(_QWORD *)(v13 + 8) = v11;
    *(_QWORD *)(a1 + 120) = v11;
    ++*(_QWORD *)(a1 + 136);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
  return a1;
}

{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::string __p;

  __p = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  v15 = (uint64_t)&v15;
  v16 = &v15;
  v17 = 0;
  support::log::manager::manager(a1, &__p, a3, &v15);
  if (v17)
  {
    v6 = v15;
    v7 = v16;
    v8 = *v16;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v15 + 8);
    **(_QWORD **)(v6 + 8) = v8;
    v17 = 0;
    if (v7 != &v15)
    {
      do
      {
        v10 = (uint64_t *)v7[1];
        v9 = v7[2];
        v7[2] = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != &v15);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*a4)
      return a1;
    goto LABEL_10;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (*a4)
  {
LABEL_10:
    std::mutex::lock((std::mutex *)(a1 + 8));
    v11 = operator new(0x18uLL);
    v12 = *a4;
    *a4 = 0;
    v13 = *(_QWORD *)(a1 + 120);
    v11[1] = a1 + 120;
    v11[2] = v12;
    *v11 = v13;
    *(_QWORD *)(v13 + 8) = v11;
    *(_QWORD *)(a1 + 120) = v11;
    ++*(_QWORD *)(a1 + 136);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
  return a1;
}

void sub_1A356112C(_Unwind_Exception *a1)
{
  support::log::manager *v1;
  std::mutex *v2;

  std::mutex::unlock(v2);
  support::log::manager::~manager(v1);
  _Unwind_Resume(a1);
}

void sub_1A3561150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::list<std::unique_ptr<support::log::delegate>>::~list(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *std::list<std::unique_ptr<support::log::delegate>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v7 = (uint64_t *)v3[1];
        v6 = v3[2];
        v3[2] = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v3);
        v3 = v7;
      }
      while (v7 != a1);
    }
  }
  return a1;
}

void support::log::manager::add_delegate(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  std::mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (_QWORD *)a1;
  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5 = operator new(0x18uLL);
  v6 = *a2;
  *a2 = 0;
  v7 = v3[15];
  v3 += 15;
  v5[1] = v3;
  v5[2] = v6;
  *v5 = v7;
  *(_QWORD *)(v7 + 8) = v5;
  *v3 = v5;
  ++v3[2];
  std::mutex::unlock(v4);
}

void sub_1A3561260(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void support::log::manager::~manager(support::log::manager *this)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_1E4A0F970;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_1E4A0F970;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_1E4A0F970;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  operator delete(this);
}

void sub_1A3561458(_Unwind_Exception *a1)
{
  support::log::manager *v1;
  std::mutex *v2;

  std::mutex::unlock(v2);
  support::log::manager::~manager(v1);
  _Unwind_Resume(a1);
}

void sub_1A356147C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::list<std::unique_ptr<support::log::delegate>>::~list(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void support::log::manager::create(std::string *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8;
  _QWORD *v9;
  std::string __p;

  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  v8 = operator new(0x90uLL);
  __p = *a1;
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  support::log::manager::manager((uint64_t)v8, &__p, a2, a3);
  *a4 = v8;
  v9 = operator new(0x20uLL);
  *v9 = off_1E4A0FC18;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v8;
  a4[1] = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1A356160C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void support::log::manager::create(std::string *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8;
  _QWORD *v9;
  std::string __p;

  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  v8 = operator new(0x90uLL);
  __p = *a1;
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  support::log::manager::manager((uint64_t)v8, &__p, a2, a3);
  *a4 = v8;
  v9 = operator new(0x20uLL);
  *v9 = off_1E4A0FC18;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v8;
  a4[1] = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1A3561720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t support::log::manager::get_level(support::log::manager *this)
{
  return *((unsigned __int8 *)this + 112);
}

void support::log::manager::set_level(uint64_t a1, unsigned int a2)
{
  std::mutex *v4;
  NSObject *v5;
  unint64_t v6;
  const char *v7;
  const char *v8;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5 = *(NSObject **)(a1 + 96);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(unsigned __int8 *)(a1 + 112);
    if (v6 > 6)
    {
      v7 = "???";
      if (a2 > 6)
        goto LABEL_4;
    }
    else
    {
      if (a2 > 6)
      {
LABEL_4:
        v8 = "???";
LABEL_7:
        v9 = 136315394;
        v10 = v7;
        v11 = 2080;
        v12 = v8;
        _os_log_impl(&dword_1A343C000, v5, OS_LOG_TYPE_DEFAULT, "setting log level %s -> %s", (uint8_t *)&v9, 0x16u);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  *(_BYTE *)(a1 + 112) = a2;
  std::mutex::unlock(v4);
}

uint64_t support::log::buffer::borrow(support::log::buffer *this)
{
  char *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v24;

  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (qword_1EE6C0648)
    goto LABEL_2;
  v1 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v1 + 1) = 0;
  *((_QWORD *)v1 + 2) = 0;
  *(_QWORD *)v1 = off_1E4A0FB80;
  *((_QWORD *)v1 + 3) = off_1E4A0FBD0;
  v2 = (uint64_t)(v1 + 24);
  *((_QWORD *)v1 + 4) = 850045863;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *((_QWORD *)v1 + 14) = 0;
  *((_QWORD *)v1 + 13) = 0;
  *((_QWORD *)v1 + 11) = 0;
  *((_QWORD *)v1 + 12) = v1 + 104;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  v3 = (std::__shared_weak_count *)off_1EE6C0650;
  qword_1EE6C0648 = (uint64_t)(v1 + 24);
  off_1EE6C0650 = v1;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
LABEL_2:
    v2 = qword_1EE6C0648;
    v1 = (char *)off_1EE6C0650;
    v24 = (std::__shared_weak_count *)off_1EE6C0650;
    if (!off_1EE6C0650)
      goto LABEL_12;
    goto LABEL_10;
  }
  v24 = (std::__shared_weak_count *)v1;
LABEL_10:
  v6 = (unint64_t *)(v1 + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
LABEL_12:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  std::mutex::lock((std::mutex *)(v2 + 8));
  v8 = *(_QWORD *)(v2 + 136);
  if (v8)
  {
    v9 = (_QWORD *)(v2 + 128);
    v10 = *(void ***)(v2 + 104);
    v11 = (*(_QWORD **)((char *)v10 + ((*(_QWORD *)(v2 + 128) >> 6) & 0x3FFFFFFFFFFFFF8)))[*(_QWORD *)(v2 + 128) & 0x1FFLL];
    v12 = *(_QWORD *)(v2 + 128) + 1;
    *(_QWORD *)(v2 + 128) = v12;
    *(_QWORD *)(v2 + 136) = v8 - 1;
    if (v12 >= 0x400)
    {
      operator delete(*v10);
      *(_QWORD *)(v2 + 104) += 8;
      v13 = -512;
LABEL_26:
      *v9 += v13;
    }
  }
  else
  {
    v14 = malloc_type_malloc(0x400uLL, 0x45F1E4C6uLL);
    v11 = (uint64_t)v14;
    if (v14)
    {
      v16 = (uint64_t **)(v2 + 80);
      v15 = *(uint64_t **)(v2 + 80);
      if (!v15)
      {
        v17 = (uint64_t **)(v2 + 80);
LABEL_23:
        v19 = (uint64_t *)operator new(0x28uLL);
        v19[4] = v11;
        *v19 = 0;
        v19[1] = 0;
        v19[2] = (uint64_t)v17;
        *v16 = v19;
        v20 = **(_QWORD **)(v2 + 72);
        if (v20)
        {
          *(_QWORD *)(v2 + 72) = v20;
          v19 = *v16;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 80), v19);
        v9 = (_QWORD *)(v2 + 88);
        v13 = 1;
        goto LABEL_26;
      }
      while (1)
      {
        while (1)
        {
          v17 = (uint64_t **)v15;
          v18 = v15[4];
          if ((unint64_t)v14 >= v18)
            break;
          v15 = *v17;
          v16 = v17;
          if (!*v17)
            goto LABEL_23;
        }
        if (v18 >= (unint64_t)v14)
          break;
        v15 = v17[1];
        if (!v15)
        {
          v16 = v17 + 1;
          goto LABEL_23;
        }
      }
    }
  }
  std::mutex::unlock((std::mutex *)(v2 + 8));
  if (v24)
  {
    v21 = (unint64_t *)&v24->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return v11;
}

void sub_1A3561AF4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1A3561B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::mutex::unlock(v9);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1A3561B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void support::log::manager::release_log_buffer(support::log::manager *this, char *a2)
{
  char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::mutex *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  int64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  void *v58;
  void *v59;
  unint64_t v60;
  char *v61;
  void *v62;
  char *v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  BOOL v69;
  int64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  unint64_t v74;
  char *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  unint64_t v82;
  char *v83;
  char *v84;
  unint64_t v85;
  int64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 *v93;
  char *v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  unint64_t v105;
  uint64_t v106;
  __int128 *v107;
  _OWORD *v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  size_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  __int128 *v126;
  _OWORD *v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  int64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  __int128 *v146;
  _OWORD *v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  std::runtime_error *exception;
  void *v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count *v154;

  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (!qword_1EE6C0648)
  {
    v3 = (char *)operator new(0xA8uLL);
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    *(_QWORD *)v3 = off_1E4A0FB80;
    *((_QWORD *)v3 + 3) = off_1E4A0FBD0;
    v4 = (uint64_t)(v3 + 24);
    *((_QWORD *)v3 + 4) = 850045863;
    *(_OWORD *)(v3 + 40) = 0u;
    *(_OWORD *)(v3 + 56) = 0u;
    *(_OWORD *)(v3 + 72) = 0u;
    *((_QWORD *)v3 + 14) = 0;
    *((_QWORD *)v3 + 13) = 0;
    *((_QWORD *)v3 + 11) = 0;
    *((_QWORD *)v3 + 12) = v3 + 104;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    v5 = (std::__shared_weak_count *)off_1EE6C0650;
    qword_1EE6C0648 = (uint64_t)(v3 + 24);
    off_1EE6C0650 = v3;
    if (!v5)
    {
LABEL_9:
      v8 = (unint64_t *)(v3 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      goto LABEL_11;
    }
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v4 = qword_1EE6C0648;
  v3 = (char *)off_1EE6C0650;
  if (off_1EE6C0650)
    goto LABEL_9;
LABEL_11:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  v12 = *(_QWORD **)(v4 + 80);
  v11 = v4 + 80;
  v10 = v12;
  if (!v12)
    goto LABEL_22;
  v13 = (_QWORD *)v11;
  do
  {
    v14 = v10[4];
    v15 = v14 >= (unint64_t)a2;
    if (v14 >= (unint64_t)a2)
      v16 = v10;
    else
      v16 = v10 + 1;
    if (v15)
      v13 = v10;
    v10 = (_QWORD *)*v16;
  }
  while (*v16);
  if (v13 == (_QWORD *)v11 || v13[4] > (unint64_t)a2)
LABEL_22:
    v13 = (_QWORD *)v11;
  if (!v3)
    goto LABEL_27;
  v17 = (unint64_t *)(v3 + 8);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_27:
    if (v13 != (_QWORD *)v11)
      goto LABEL_28;
LABEL_32:
    free(a2);
    return;
  }
  (*(void (**)(char *))(*(_QWORD *)v3 + 16))(v3);
  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v3);
  if (v13 == (_QWORD *)v11)
    goto LABEL_32;
LABEL_28:
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (qword_1EE6C0648)
    goto LABEL_29;
  v19 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v19 + 1) = 0;
  *((_QWORD *)v19 + 2) = 0;
  *(_QWORD *)v19 = off_1E4A0FB80;
  *((_QWORD *)v19 + 3) = off_1E4A0FBD0;
  *((_QWORD *)v19 + 4) = 850045863;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_OWORD *)(v19 + 72) = 0u;
  *((_QWORD *)v19 + 14) = 0;
  *((_QWORD *)v19 + 13) = 0;
  *((_QWORD *)v19 + 11) = 0;
  *((_QWORD *)v19 + 12) = v19 + 104;
  *(_OWORD *)(v19 + 120) = 0u;
  *(_OWORD *)(v19 + 136) = 0u;
  *(_OWORD *)(v19 + 152) = 0u;
  v20 = (std::__shared_weak_count *)off_1EE6C0650;
  qword_1EE6C0648 = (uint64_t)(v19 + 24);
  off_1EE6C0650 = v19;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
LABEL_29:
    v19 = (char *)off_1EE6C0650;
    v153 = (std::__shared_weak_count *)off_1EE6C0650;
    if (!off_1EE6C0650)
      goto LABEL_41;
    goto LABEL_39;
  }
  v153 = (std::__shared_weak_count *)v19;
LABEL_39:
  v23 = (unint64_t *)(v19 + 8);
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
LABEL_41:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (!qword_1EE6C0648)
  {
    v25 = (char *)operator new(0xA8uLL);
    *((_QWORD *)v25 + 1) = 0;
    *((_QWORD *)v25 + 2) = 0;
    *(_QWORD *)v25 = off_1E4A0FB80;
    *((_QWORD *)v25 + 3) = off_1E4A0FBD0;
    v26 = (uint64_t)(v25 + 24);
    *((_QWORD *)v25 + 4) = 850045863;
    *(_OWORD *)(v25 + 40) = 0u;
    *(_OWORD *)(v25 + 56) = 0u;
    *(_OWORD *)(v25 + 72) = 0u;
    *((_QWORD *)v25 + 14) = 0;
    *((_QWORD *)v25 + 13) = 0;
    *((_QWORD *)v25 + 11) = 0;
    *((_QWORD *)v25 + 12) = v25 + 104;
    *(_OWORD *)(v25 + 120) = 0u;
    *(_OWORD *)(v25 + 136) = 0u;
    *(_OWORD *)(v25 + 152) = 0u;
    v27 = (std::__shared_weak_count *)off_1EE6C0650;
    qword_1EE6C0648 = (uint64_t)(v25 + 24);
    off_1EE6C0650 = v25;
    if (!v27)
    {
      v154 = (std::__shared_weak_count *)v25;
LABEL_50:
      v30 = (unint64_t *)(v25 + 8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      goto LABEL_52;
    }
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v26 = qword_1EE6C0648;
  v25 = (char *)off_1EE6C0650;
  v154 = (std::__shared_weak_count *)off_1EE6C0650;
  if (off_1EE6C0650)
    goto LABEL_50;
LABEL_52:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  v32 = (std::mutex *)(v26 + 8);
  std::mutex::lock((std::mutex *)(v26 + 8));
  v33 = *(_QWORD **)(v26 + 80);
  if (!v33)
    goto LABEL_186;
  v34 = v26 + 80;
  do
  {
    v35 = v33[4];
    v36 = v35 >= (unint64_t)a2;
    if (v35 >= (unint64_t)a2)
      v37 = v33;
    else
      v37 = v33 + 1;
    if (v36)
      v34 = (uint64_t)v33;
    v33 = (_QWORD *)*v37;
  }
  while (*v37);
  if (v34 == v26 + 80 || *(_QWORD *)(v34 + 32) > (unint64_t)a2)
  {
LABEL_186:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "attempting to put back a buffer the instance does not own");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v38 = *(char **)(v26 + 112);
  v39 = *(char **)(v26 + 104);
  v40 = v38 - v39;
  if (v38 == v39)
    v41 = 0;
  else
    v41 = ((v38 - v39) << 6) - 1;
  v43 = *(_QWORD *)(v26 + 128);
  v42 = *(_QWORD *)(v26 + 136);
  v44 = v42 + v43;
  if (v41 == v42 + v43)
  {
    if (v43 >= 0x200)
    {
      *(_QWORD *)(v26 + 128) = v43 - 512;
      v45 = v39 + 8;
      v46 = *(_QWORD *)v39;
      *(_QWORD *)(v26 + 104) = v39 + 8;
      if (v38 != *(char **)(v26 + 120))
      {
LABEL_157:
        *(_QWORD *)v38 = v46;
        goto LABEL_158;
      }
      v47 = *(char **)(v26 + 96);
      if (v45 > v47)
      {
        v48 = (v45 - v47) >> 3;
        if (v48 >= -1)
          v49 = v48 + 1;
        else
          v49 = v48 + 2;
        v50 = v49 >> 1;
        v51 = -v50;
        v52 = &v45[-8 * v50];
        v53 = v38 - v45;
        if (v38 != v45)
        {
          memmove(&v45[-8 * v50], v45, v38 - v45);
          v38 = *(char **)(v26 + 104);
        }
        v54 = &v38[8 * v51];
        v38 = &v52[v53];
        *(_QWORD *)(v26 + 104) = v54;
        *(_QWORD *)(v26 + 112) = &v52[v53];
        goto LABEL_157;
      }
      if (v38 == v47)
        v66 = 1;
      else
        v66 = (v38 - v47) >> 2;
      if (!(v66 >> 61))
      {
        v67 = (char *)operator new(8 * v66);
        v68 = &v67[8 * (v66 >> 2)];
        v70 = v38 - v45;
        v69 = v38 == v45;
        v38 = v68;
        if (v69)
          goto LABEL_155;
        v38 = &v68[v70 & 0xFFFFFFFFFFFFFFF8];
        v71 = v70 - 8;
        if (v71 >= 0x38)
        {
          v123 = &v67[8 * (v66 >> 2)];
          v72 = v123;
          if ((unint64_t)(v123 - v45) >= 0x20)
          {
            v124 = (v71 >> 3) + 1;
            v125 = 8 * (v124 & 0x3FFFFFFFFFFFFFFCLL);
            v72 = &v68[v125];
            v45 += v125;
            v126 = (__int128 *)(v39 + 24);
            v127 = v123 + 16;
            v128 = v124 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v129 = *v126;
              *(v127 - 1) = *(v126 - 1);
              *v127 = v129;
              v126 += 2;
              v127 += 2;
              v128 -= 4;
            }
            while (v128);
            if (v124 == (v124 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_155:
              *(_QWORD *)(v26 + 96) = v67;
              *(_QWORD *)(v26 + 104) = v68;
              *(_QWORD *)(v26 + 112) = v38;
              *(_QWORD *)(v26 + 120) = &v67[8 * v66];
              if (v47)
              {
                operator delete(v47);
                v38 = *(char **)(v26 + 112);
              }
              goto LABEL_157;
            }
          }
        }
        else
        {
          v72 = &v67[8 * (v66 >> 2)];
        }
        do
        {
          v130 = *(_QWORD *)v45;
          v45 += 8;
          *(_QWORD *)v72 = v130;
          v72 += 8;
        }
        while (v72 != v38);
        goto LABEL_155;
      }
LABEL_188:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    v55 = v40 >> 3;
    v56 = *(char **)(v26 + 120);
    v57 = *(char **)(v26 + 96);
    if (v40 >> 3 >= (unint64_t)((v56 - v57) >> 3))
    {
      if (v56 == v57)
        v60 = 1;
      else
        v60 = (v56 - v57) >> 2;
      if (!(v60 >> 61))
      {
        v61 = (char *)operator new(8 * v60);
        v62 = operator new(0x1000uLL);
        v63 = &v61[8 * v55];
        v64 = &v61[8 * v60];
        if (v55 == v60)
        {
          v152 = v62;
          if (v40 < 1)
          {
            if (v38 == v39)
              v74 = 1;
            else
              v74 = v40 >> 2;
            if (v74 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v63 = (char *)operator new(8 * v74);
            v64 = &v63[8 * v74];
            operator delete(v61);
            v39 = *(char **)(v26 + 104);
            v38 = *(char **)(v26 + 112);
            v61 = v63;
          }
          else
          {
            v65 = v55 + 2;
            if (v55 >= -1)
              v65 = v55 + 1;
            v63 -= 8 * (v65 >> 1);
          }
          v62 = v152;
        }
        *(_QWORD *)v63 = v62;
        v75 = v63 + 8;
        if (v38 != v39)
        {
          do
          {
            if (v63 == v61)
            {
              if (v75 >= v64)
              {
                if (v64 == v61)
                  v82 = 1;
                else
                  v82 = (v64 - v61) >> 2;
                if (v82 >> 61)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v83 = (char *)operator new(8 * v82);
                v84 = v83;
                v85 = (v82 + 3) >> 2;
                v63 = &v83[8 * v85];
                v86 = v75 - v61;
                v69 = v75 == v61;
                v75 = v63;
                if (!v69)
                {
                  v75 = &v63[v86 & 0xFFFFFFFFFFFFFFF8];
                  v87 = v86 - 8;
                  v88 = &v83[8 * v85];
                  v89 = v61;
                  if (v87 < 0x38)
                    goto LABEL_192;
                  v90 = 8 * v85;
                  v88 = &v83[8 * v85];
                  v89 = v61;
                  if ((unint64_t)(v88 - v61) < 0x20)
                    goto LABEL_192;
                  v91 = (v87 >> 3) + 1;
                  v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
                  v88 = &v63[v92];
                  v89 = &v61[v92];
                  v93 = (__int128 *)(v61 + 16);
                  v94 = &v83[v90 + 16];
                  v95 = v91 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v96 = *v93;
                    *((_OWORD *)v94 - 1) = *(v93 - 1);
                    *(_OWORD *)v94 = v96;
                    v93 += 2;
                    v94 += 32;
                    v95 -= 4;
                  }
                  while (v95);
                  if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_192:
                    do
                    {
                      v97 = *(_QWORD *)v89;
                      v89 += 8;
                      *(_QWORD *)v88 = v97;
                      v88 += 8;
                    }
                    while (v88 != v75);
                  }
                }
                v64 = &v83[8 * v82];
                operator delete(v61);
                v61 = v84;
              }
              else
              {
                v78 = (v64 - v75) >> 3;
                if (v78 >= -1)
                  v79 = v78 + 1;
                else
                  v79 = v78 + 2;
                v80 = v79 >> 1;
                v63 = &v61[8 * (v79 >> 1)];
                v81 = v61;
                if (v75 != v61)
                {
                  memmove(v63, v61, v75 - v61);
                  v81 = v75;
                }
                v75 = (char *)v81 + 8 * v80;
              }
            }
            v77 = *((_QWORD *)v38 - 1);
            v38 -= 8;
            *((_QWORD *)v63 - 1) = v77;
            v63 -= 8;
          }
          while (v38 != *(char **)(v26 + 104));
        }
        v76 = *(void **)(v26 + 96);
        *(_QWORD *)(v26 + 96) = v61;
        *(_QWORD *)(v26 + 104) = v63;
        *(_QWORD *)(v26 + 112) = v75;
        *(_QWORD *)(v26 + 120) = v64;
        v32 = (std::mutex *)(v26 + 8);
        if (v76)
          operator delete(v76);
        goto LABEL_159;
      }
      goto LABEL_188;
    }
    v58 = operator new(0x1000uLL);
    v59 = v58;
    if (v56 != v38)
    {
      *(_QWORD *)v38 = v58;
LABEL_158:
      *(_QWORD *)(v26 + 112) += 8;
LABEL_159:
      v39 = *(char **)(v26 + 104);
      v42 = *(_QWORD *)(v26 + 136);
      v44 = *(_QWORD *)(v26 + 128) + v42;
      goto LABEL_160;
    }
    if (v39 == v57)
    {
      if (v38 == v39)
        v98 = 1;
      else
        v98 = (v56 - v39) >> 2;
      if (v98 >> 61)
        goto LABEL_188;
      v99 = (char *)operator new(8 * v98);
      v100 = (v98 + 3) >> 2;
      v73 = &v99[8 * v100];
      v101 = v73;
      if (v38 != v39)
      {
        v101 = &v73[8 * v55];
        v102 = &v99[8 * v100];
        v103 = v39;
        if ((unint64_t)(v40 - 8) < 0x38)
          goto LABEL_193;
        v104 = &v99[8 * v100];
        v102 = v104;
        v103 = v39;
        if ((unint64_t)(v104 - v39) < 0x20)
          goto LABEL_193;
        v105 = ((unint64_t)(v40 - 8) >> 3) + 1;
        v106 = 8 * (v105 & 0x3FFFFFFFFFFFFFFCLL);
        v102 = &v73[v106];
        v103 = &v39[v106];
        v107 = (__int128 *)(v39 + 16);
        v108 = v104 + 16;
        v109 = v105 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v110 = *v107;
          *(v108 - 1) = *(v107 - 1);
          *v108 = v110;
          v107 += 2;
          v108 += 2;
          v109 -= 4;
        }
        while (v109);
        if (v105 != (v105 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_193:
          do
          {
            v111 = *(_QWORD *)v103;
            v103 += 8;
            *(_QWORD *)v102 = v111;
            v102 += 8;
          }
          while (v102 != v101);
        }
      }
      *(_QWORD *)(v26 + 96) = v99;
      *(_QWORD *)(v26 + 104) = v73;
      *(_QWORD *)(v26 + 112) = v101;
      *(_QWORD *)(v26 + 120) = &v99[8 * v98];
      if (v39)
      {
        operator delete(v39);
        v73 = *(char **)(v26 + 104);
      }
    }
    else
    {
      v73 = v39;
    }
    *((_QWORD *)v73 - 1) = v59;
    v112 = *(char **)(v26 + 104);
    v113 = *(char **)(v26 + 112);
    *(_QWORD *)(v26 + 104) = v112 - 8;
    v114 = *((_QWORD *)v112 - 1);
    *(_QWORD *)(v26 + 104) = v112;
    if (v113 != *(char **)(v26 + 120))
    {
LABEL_142:
      *(_QWORD *)v113 = v114;
      goto LABEL_158;
    }
    v115 = *(char **)(v26 + 96);
    if (v112 > v115)
    {
      v116 = (v112 - v115) >> 3;
      if (v116 >= -1)
        v117 = v116 + 1;
      else
        v117 = v116 + 2;
      v118 = v117 >> 1;
      v119 = -v118;
      v120 = &v112[-8 * v118];
      v121 = v113 - v112;
      if (v121)
      {
        memmove(&v112[-8 * v118], v112, v121);
        v112 = *(char **)(v26 + 104);
      }
      v122 = &v120[v121];
      *(_QWORD *)(v26 + 104) = &v112[8 * v119];
      *(_QWORD *)(v26 + 112) = v122;
      *(_QWORD *)v122 = v114;
      goto LABEL_158;
    }
    if (v113 == v115)
      v136 = 1;
    else
      v136 = (v113 - v115) >> 2;
    if (v136 >> 61)
      goto LABEL_188;
    v137 = (char *)operator new(8 * v136);
    v138 = &v137[8 * (v136 >> 2)];
    v139 = v113 - v112;
    v69 = v113 == v112;
    v113 = v138;
    if (!v69)
    {
      v113 = &v138[v139 & 0xFFFFFFFFFFFFFFF8];
      v140 = v139 - 8;
      if (v140 < 0x38)
      {
        v141 = &v137[8 * (v136 >> 2)];
        do
        {
LABEL_183:
          v150 = *(_QWORD *)v112;
          v112 += 8;
          *(_QWORD *)v141 = v150;
          v141 += 8;
        }
        while (v141 != v113);
        goto LABEL_184;
      }
      v142 = &v137[8 * (v136 >> 2)];
      v141 = v142;
      if ((unint64_t)(v142 - v112) < 0x20)
        goto LABEL_183;
      v143 = (v140 >> 3) + 1;
      v144 = 8 * (v143 & 0x3FFFFFFFFFFFFFFCLL);
      v141 = &v138[v144];
      v145 = &v112[v144];
      v146 = (__int128 *)(v112 + 16);
      v147 = v142 + 16;
      v148 = v143 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v149 = *v146;
        *(v147 - 1) = *(v146 - 1);
        *v147 = v149;
        v146 += 2;
        v147 += 2;
        v148 -= 4;
      }
      while (v148);
      v112 = v145;
      if (v143 != (v143 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_183;
    }
LABEL_184:
    *(_QWORD *)(v26 + 96) = v137;
    *(_QWORD *)(v26 + 104) = v138;
    *(_QWORD *)(v26 + 112) = v113;
    *(_QWORD *)(v26 + 120) = &v137[8 * v136];
    if (v115)
    {
      operator delete(v115);
      v113 = *(char **)(v26 + 112);
    }
    goto LABEL_142;
  }
LABEL_160:
  *(_QWORD *)(*(_QWORD *)&v39[(v44 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v44 & 0x1FF)) = a2;
  *(_QWORD *)(v26 + 136) = v42 + 1;
  std::mutex::unlock(v32);
  if (!v154)
    goto LABEL_164;
  v131 = (unint64_t *)&v154->__shared_owners_;
  do
    v132 = __ldaxr(v131);
  while (__stlxr(v132 - 1, v131));
  if (!v132)
  {
    ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
    std::__shared_weak_count::__release_weak(v154);
    v133 = v153;
    if (!v153)
      return;
  }
  else
  {
LABEL_164:
    v133 = v153;
    if (!v153)
      return;
  }
  v134 = (unint64_t *)&v133->__shared_owners_;
  do
    v135 = __ldaxr(v134);
  while (__stlxr(v135 - 1, v134));
  if (!v135)
  {
    ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
    std::__shared_weak_count::__release_weak(v133);
  }
}

void sub_1A356266C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, std::mutex *a10, char a11, uint64_t a12, char a13)
{
  void *v13;

  operator delete(__p);
  operator delete(v13);
  std::mutex::unlock(a10);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<ctu::LogMessage>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void support::log::manager::add_delegates(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::mutex *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 != a2)
  {
    v5 = (std::mutex *)(a1 + 8);
    v6 = a1 + 120;
    do
    {
      std::mutex::lock(v5);
      v7 = operator new(0x18uLL);
      v8 = *(_QWORD *)(v2 + 16);
      *(_QWORD *)(v2 + 16) = 0;
      v7[1] = v6;
      v7[2] = v8;
      v9 = *(_QWORD *)(a1 + 120);
      *v7 = v9;
      *(_QWORD *)(v9 + 8) = v7;
      *(_QWORD *)(a1 + 120) = v7;
      ++*(_QWORD *)(a1 + 136);
      std::mutex::unlock(v5);
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2 != a2);
  }
}

void sub_1A35627D8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void support::log::manager::set_defaults(support::log::manager *this)
{
  std::mutex *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *((_BYTE *)this + 112) = 3;
  if (*((_QWORD *)this + 17))
  {
    v3 = (char *)this + 120;
    v4 = *((_QWORD *)this + 15);
    v5 = (char *)*((_QWORD *)this + 16);
    v6 = *(_QWORD *)v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v6;
    *((_QWORD *)this + 17) = 0;
    if (v5 != (char *)this + 120)
    {
      do
      {
        v8 = (char *)*((_QWORD *)v5 + 1);
        v7 = *((_QWORD *)v5 + 2);
        *((_QWORD *)v5 + 2) = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v3);
    }
  }
  std::mutex::unlock(v2);
}

void support::log::manager::message_delegates(support::log::manager *this, const support::log::details *a2, char *a3)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)this + 120;
  v5 = *((_QWORD *)this + 16);
  if ((support::log::manager *)v5 != (support::log::manager *)((char *)this + 120))
  {
    do
    {
      this = (support::log::manager *)(***(uint64_t (****)(_QWORD, const support::log::details *, char *))(v5 + 16))(*(_QWORD *)(v5 + 16), a2, a3);
      v5 = *(_QWORD *)(v5 + 8);
    }
    while ((char *)v5 != v4);
  }
  support::log::manager::release_log_buffer(this, a3);
}

void support::log::stdout_delegate::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0x20uLL);
  v5 = v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    v4[1] = v6;
    v4[2] = v7;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    *((_BYTE *)v4 + 24) = 1;
    std::__shared_weak_count::__release_weak(v7);
    *v5 = &off_1E4A0F9A0;
    std::__shared_weak_count::__release_weak(v7);
    *a2 = v5;
  }
  else
  {
    v4[1] = v6;
    v4[2] = 0;
    *((_BYTE *)v4 + 24) = 1;
    *v4 = &off_1E4A0F9A0;
    *a2 = v4;
  }
}

uint64_t support::log::stdout_delegate::stdout_delegate(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = &unk_1E4A0F928;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v3;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_BYTE *)(a1 + 24) = 1;
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_QWORD *)a1 = &off_1E4A0F9A0;
  return a1;
}

{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = &unk_1E4A0F928;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v3;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_BYTE *)(a1 + 24) = 1;
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_QWORD *)a1 = &off_1E4A0F9A0;
  return a1;
}

double support::log::stdout_delegate::create@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v3;
  double result;

  *a1 = 0xAAAAAAAAAAAAAAAALL;
  v3 = operator new(0x20uLL);
  result = 0.0;
  *v3 = 0u;
  v3[1] = 0u;
  *(_QWORD *)v3 = &off_1E4A0F9A0;
  *a1 = v3;
  return result;
}

void support::log::stdout_delegate::message(support::log::stdout_delegate *this, const support::log::details *a2, const char *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v8[3];

  if (a3)
  {
    memset(v8, 170, sizeof(v8));
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)this + 24))(v8);
    if (LOBYTE(v8[2]))
    {
      if (!v8[1])
        return;
      v4 = std::__shared_weak_count::lock((std::__shared_weak_count *)v8[1]);
      if (v4)
      {
        v5 = v4;
        if (v8[0])
          fprintf((FILE *)*MEMORY[0x1E0C80C20], "%s\n", a3);
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C20], "%s\n", a3);
    }
    if (LOBYTE(v8[2]))
    {
      if (v8[1])
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8[1]);
    }
  }
}

support::log::manager_global *support::log::manager_global::manager_global(support::log::manager_global *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t (**v11)(support::log::manager::parameters *__hidden);
  char v12;
  std::string __p;

  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&__p, "global");
  v10 = 0;
  v11 = &off_1E4A0F958;
  v12 = 3;
  v8 = (uint64_t)&v8;
  v9 = &v8;
  support::log::manager::manager((uint64_t)this, &__p, (uint64_t)&v11, &v8);
  if (v10)
  {
    v2 = v8;
    v3 = v9;
    v4 = *v9;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v8 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    v10 = 0;
    if (v3 != &v8)
    {
      do
      {
        v7 = (uint64_t *)v3[1];
        v6 = v3[2];
        v3[2] = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v3);
        v3 = v7;
      }
      while (v7 != &v8);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)this = off_1E4A0F9D0;
  return this;
}

void sub_1A3562CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::list<std::unique_ptr<support::log::delegate>>::~list(&a9);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *support::log::client::descriptor::descriptor(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t descriptor_instance;

  *a1 = off_1E4A0FA00;
  descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance(a2, a3);
  a1[1] = descriptor_instance;
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance + 8;
  a1[4] = descriptor_instance + 32;
  a1[5] = descriptor_instance + 56;
  return a1;
}

{
  uint64_t descriptor_instance;

  *a1 = off_1E4A0FA00;
  descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance(a2, a3);
  a1[1] = descriptor_instance;
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance + 8;
  a1[4] = descriptor_instance + 32;
  a1[5] = descriptor_instance + 56;
  return a1;
}

uint64_t support::log::global_client_descriptor_manager::get_descriptor_instance(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string *p_dst;
  uint64_t v9;
  uint64_t v10;
  const std::string::value_type *v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  char *v17;
  const char *v18;
  const char *v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint64_t **v27;
  uint64_t *v28;
  void *v29;
  void **v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  const void **v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const void **v39;
  void **v40;
  char *v41;
  std::string *v42;
  float v43;
  _QWORD *v44;
  _QWORD *v45;
  _BOOL8 v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t prime;
  void *v50;
  void *v51;
  uint64_t v52;
  _QWORD **v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *i;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint8x8_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  void *v71;
  std::string v72;
  std::string v73;
  void *__p[3];
  std::string __dst;

  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_23);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_23))
  {
    *(_OWORD *)&qword_1ED114C60 = 0u;
    *(_OWORD *)&qword_1ED114C50 = 0u;
    dword_1ED114C70 = 1065353216;
    __cxa_guard_release(&_MergedGlobals_23);
  }
  std::mutex::lock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
  memset(__p, 170, sizeof(__p));
  v5 = *(char *)(a1 + 23);
  if (v5 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_QWORD *)(a1 + 8);
  v7 = v6 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v6 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v7 >= 0x17)
  {
    v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v9 = v7 | 7;
    v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v6 + 1;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v6 + 1;
    if (!v6)
      goto LABEL_16;
  }
  if (v5 >= 0)
    v11 = (const std::string::value_type *)a1;
  else
    v11 = *(const std::string::value_type **)a1;
  memmove(p_dst, v11, v6);
LABEL_16:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v6) = 44;
  v12 = *(char *)(a2 + 23);
  if (v12 >= 0)
    v13 = (const std::string::value_type *)a2;
  else
    v13 = *(const std::string::value_type **)a2;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a2 + 23);
  else
    v14 = *(_QWORD *)(a2 + 8);
  v15 = std::string::append(&__dst, v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  __p[2] = (void *)v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p))
      goto LABEL_156;
  }
  else if (std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p))
  {
    goto LABEL_156;
  }
  v17 = (char *)operator new(0x40uLL);
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v73 = *(std::string *)a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v72 = *(std::string *)a2;
  *(_QWORD *)v17 = off_1E4A0FB00;
  v18 = v17 + 8;
  *(std::string *)(v17 + 8) = v73;
  memset(&v73, 0, sizeof(v73));
  *(std::string *)(v17 + 32) = v72;
  memset(&v72, 0, sizeof(v72));
  if (v17[31] < 0)
  {
    v18 = *(const char **)v18;
    v19 = v17 + 32;
    if ((v17[55] & 0x80000000) == 0)
      goto LABEL_34;
  }
  else
  {
    v19 = v17 + 32;
    if ((v17[55] & 0x80000000) == 0)
      goto LABEL_34;
  }
  v19 = *(const char **)v19;
LABEL_34:
  *((_QWORD *)v17 + 7) = os_log_create(v18, v19);
  if (SHIBYTE(__p[2]) >= 0)
    v20 = (uint64_t *)__p;
  else
    v20 = (uint64_t *)__p[0];
  if (SHIBYTE(__p[2]) >= 0)
    v21 = HIBYTE(__p[2]);
  else
    v21 = (unint64_t)__p[1];
  v22 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&__dst, v20, v21);
  v23 = v22;
  v24 = qword_1ED114C58;
  if (qword_1ED114C58)
  {
    v25 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1ED114C58);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      v26 = v22;
      if (v22 >= qword_1ED114C58)
        v26 = v22 % qword_1ED114C58;
    }
    else
    {
      v26 = (qword_1ED114C58 - 1) & v22;
    }
    v27 = *(uint64_t ***)(qword_1ED114C50 + 8 * v26);
    if (v27)
    {
      v28 = *v27;
      if (*v27)
      {
        if (SHIBYTE(__p[2]) >= 0)
          v29 = (void *)HIBYTE(__p[2]);
        else
          v29 = __p[1];
        if (SHIBYTE(__p[2]) >= 0)
          v30 = __p;
        else
          v30 = (void **)__p[0];
        if (v25.u32[0] < 2uLL)
        {
          while (1)
          {
            v36 = v28[1];
            if (v36 == v23)
            {
              v37 = *((unsigned __int8 *)v28 + 39);
              if ((v37 & 0x80u) == 0)
                v38 = (void *)*((unsigned __int8 *)v28 + 39);
              else
                v38 = (void *)v28[3];
              if (v38 == v29)
              {
                v39 = (const void **)(v28 + 2);
                if ((v37 & 0x80) != 0)
                {
                  if (!memcmp(*v39, v30, v28[3]))
                    goto LABEL_154;
                }
                else
                {
                  if (!*((_BYTE *)v28 + 39))
                    goto LABEL_154;
                  v40 = v30;
                  while (*(unsigned __int8 *)v39 == *(unsigned __int8 *)v40)
                  {
                    v39 = (const void **)((char *)v39 + 1);
                    v40 = (void **)((char *)v40 + 1);
                    if (!--v37)
                      goto LABEL_154;
                  }
                }
              }
            }
            else if ((v36 & (v24 - 1)) != v26)
            {
              goto LABEL_90;
            }
            v28 = (uint64_t *)*v28;
            if (!v28)
              goto LABEL_90;
          }
        }
        do
        {
          v31 = v28[1];
          if (v31 == v23)
          {
            v32 = *((unsigned __int8 *)v28 + 39);
            if ((v32 & 0x80u) == 0)
              v33 = (void *)*((unsigned __int8 *)v28 + 39);
            else
              v33 = (void *)v28[3];
            if (v33 == v29)
            {
              v34 = (const void **)(v28 + 2);
              if ((v32 & 0x80) != 0)
              {
                if (!memcmp(*v34, v30, v28[3]))
                  goto LABEL_154;
              }
              else
              {
                if (!*((_BYTE *)v28 + 39))
                  goto LABEL_154;
                v35 = v30;
                while (*(unsigned __int8 *)v34 == *(unsigned __int8 *)v35)
                {
                  v34 = (const void **)((char *)v34 + 1);
                  v35 = (void **)((char *)v35 + 1);
                  if (!--v32)
                    goto LABEL_154;
                }
              }
            }
          }
          else
          {
            if (v31 >= v24)
              v31 %= v24;
            if (v31 != v26)
              break;
          }
          v28 = (uint64_t *)*v28;
        }
        while (v28);
      }
    }
  }
  else
  {
    v26 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_90:
  __dst.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAA00;
  v41 = (char *)operator new(0x30uLL);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&qword_1ED114C60;
  *(_QWORD *)v41 = 0;
  *((_QWORD *)v41 + 1) = v23;
  v42 = (std::string *)(v41 + 16);
  if (SHIBYTE(__p[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v42, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&v42->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((void **)v41 + 4) = __p[2];
  }
  *((_QWORD *)v41 + 5) = v17;
  __dst.__r_.__value_.__s.__data_[16] = 1;
  v43 = (float)(unint64_t)(qword_1ED114C68 + 1);
  if (!v24 || (float)(*(float *)&dword_1ED114C70 * (float)v24) < v43)
  {
    v46 = 1;
    if (v24 >= 3)
      v46 = (v24 & (v24 - 1)) != 0;
    v47 = v46 | (2 * v24);
    v48 = vcvtps_u32_f32(v43 / *(float *)&dword_1ED114C70);
    if (v47 <= v48)
      prime = v48;
    else
      prime = v47;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v24 = qword_1ED114C58;
    if (prime > qword_1ED114C58)
      goto LABEL_107;
    if (prime >= qword_1ED114C58)
      goto LABEL_140;
    v60 = vcvtps_u32_f32((float)(unint64_t)qword_1ED114C68 / *(float *)&dword_1ED114C70);
    if ((unint64_t)qword_1ED114C58 < 3
      || (v61 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1ED114C58), v61.i16[0] = vaddlv_u8(v61), v61.u32[0] > 1uLL))
    {
      v60 = std::__next_prime(v60);
    }
    else
    {
      v62 = 1 << -(char)__clz(v60 - 1);
      if (v60 >= 2)
        v60 = v62;
    }
    if (prime <= v60)
      prime = v60;
    if (prime >= v24)
    {
      v24 = qword_1ED114C58;
    }
    else
    {
      if (prime)
      {
LABEL_107:
        if (prime >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v50 = operator new(8 * prime);
        v51 = (void *)qword_1ED114C50;
        qword_1ED114C50 = (uint64_t)v50;
        if (v51)
          operator delete(v51);
        v52 = 0;
        qword_1ED114C58 = prime;
        do
          *(_QWORD *)(qword_1ED114C50 + 8 * v52++) = 0;
        while (prime != v52);
        v53 = (_QWORD **)qword_1ED114C60;
        if (!qword_1ED114C60)
          goto LABEL_139;
        v54 = *(_QWORD *)(qword_1ED114C60 + 8);
        v55 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v56 = v54 & v55;
          *(_QWORD *)(qword_1ED114C50 + 8 * v56) = &qword_1ED114C60;
          for (i = *v53; *v53; i = *v53)
          {
            v58 = i[1] & v55;
            if (v58 == v56)
            {
              v53 = (_QWORD **)i;
            }
            else if (*(_QWORD *)(qword_1ED114C50 + 8 * v58))
            {
              *v53 = (_QWORD *)*i;
              v59 = 8 * v58;
              *i = **(_QWORD **)(qword_1ED114C50 + v59);
              **(_QWORD **)(qword_1ED114C50 + v59) = i;
            }
            else
            {
              *(_QWORD *)(qword_1ED114C50 + 8 * v58) = v53;
              v53 = (_QWORD **)i;
              v56 = v58;
            }
          }
LABEL_139:
          v24 = prime;
          goto LABEL_140;
        }
        if (v54 >= prime)
          v54 %= prime;
        *(_QWORD *)(qword_1ED114C50 + 8 * v54) = &qword_1ED114C60;
        v63 = *v53;
        if (!*v53)
          goto LABEL_139;
        while (1)
        {
          v65 = v63[1];
          if (v65 >= prime)
            v65 %= prime;
          if (v65 == v54)
            goto LABEL_133;
          if (*(_QWORD *)(qword_1ED114C50 + 8 * v65))
          {
            *v53 = (_QWORD *)*v63;
            v64 = 8 * v65;
            *v63 = **(_QWORD **)(qword_1ED114C50 + v64);
            **(_QWORD **)(qword_1ED114C50 + v64) = v63;
            v63 = v53;
LABEL_133:
            v53 = (_QWORD **)v63;
            v63 = (_QWORD *)*v63;
            if (!v63)
              goto LABEL_139;
          }
          else
          {
            *(_QWORD *)(qword_1ED114C50 + 8 * v65) = v53;
            v53 = (_QWORD **)v63;
            v63 = (_QWORD *)*v63;
            v54 = v65;
            if (!v63)
              goto LABEL_139;
          }
        }
      }
      v71 = (void *)qword_1ED114C50;
      qword_1ED114C50 = 0;
      if (v71)
        operator delete(v71);
      v24 = 0;
      qword_1ED114C58 = 0;
    }
LABEL_140:
    v66 = v24 - 1;
    if ((v24 & (v24 - 1)) != 0)
    {
      if (v23 >= v24)
      {
        v26 = v23 % v24;
        v44 = *(_QWORD **)(qword_1ED114C50 + 8 * (v23 % v24));
        v45 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
        if (v44)
          goto LABEL_96;
      }
      else
      {
        v26 = v23;
        v44 = *(_QWORD **)(qword_1ED114C50 + 8 * v23);
        v45 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
        if (v44)
          goto LABEL_96;
      }
    }
    else
    {
      v26 = v66 & v23;
      v44 = *(_QWORD **)(qword_1ED114C50 + 8 * (v66 & v23));
      v45 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
      if (v44)
        goto LABEL_96;
    }
LABEL_142:
    *v45 = qword_1ED114C60;
    qword_1ED114C60 = __dst.__r_.__value_.__r.__words[0];
    *(_QWORD *)(qword_1ED114C50 + 8 * v26) = &qword_1ED114C60;
    if (*(_QWORD *)__dst.__r_.__value_.__l.__data_)
    {
      v67 = *(_QWORD *)(*(_QWORD *)__dst.__r_.__value_.__l.__data_ + 8);
      if ((v24 & (v24 - 1)) != 0)
      {
        if (v67 >= v24)
          v67 %= v24;
      }
      else
      {
        v67 &= v24 - 1;
      }
      *(_QWORD *)(qword_1ED114C50 + 8 * v67) = __dst.__r_.__value_.__r.__words[0];
    }
    goto LABEL_153;
  }
  v44 = *(_QWORD **)(qword_1ED114C50 + 8 * v26);
  v45 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
  if (!v44)
    goto LABEL_142;
LABEL_96:
  *v45 = *v44;
  *v44 = __dst.__r_.__value_.__r.__words[0];
LABEL_153:
  ++qword_1ED114C68;
LABEL_154:
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v72.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_156:
      v68 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p);
      if (v68)
        goto LABEL_157;
LABEL_162:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
  }
  else if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_156;
  }
  operator delete(v73.__r_.__value_.__l.__data_);
  v68 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p);
  if (!v68)
    goto LABEL_162;
LABEL_157:
  v69 = v68[5];
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  std::mutex::unlock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
  return v69;
}

void sub_1A3563614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)&a29);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a21 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a28 & 0x80000000) == 0)
    {
LABEL_8:
      std::mutex::unlock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
      _Unwind_Resume(a1);
    }
LABEL_7:
    operator delete(a23);
    std::mutex::unlock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
    _Unwind_Resume(a1);
  }
  operator delete(a16);
  if ((a28 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL support::log::client::descriptor::operator==(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

_QWORD *support::log::client::client(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t descriptor_instance;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *__p[2];
  uint64_t v15;
  void *v16[2];
  uint64_t v17;

  *a1 = &unk_1E4A09998;
  *(_OWORD *)v16 = *(_OWORD *)a2;
  v17 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v15 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  a1[1] = off_1E4A0FA00;
  descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance((uint64_t)v16, (uint64_t)__p);
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance;
  a1[4] = descriptor_instance + 8;
  a1[5] = descriptor_instance + 32;
  a1[6] = descriptor_instance + 56;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v17) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(v16[0]);
    if (a4)
      goto LABEL_4;
LABEL_7:
    pthread_mutex_lock(&ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance);
    if (!qword_1EE6C0698)
    {
      v7 = operator new(0xA8uLL);
      v7[1] = 0;
      v7[2] = 0;
      *v7 = off_1E4A0FC68;
      a4 = (uint64_t)(v7 + 3);
      support::log::manager_global::manager_global((support::log::manager_global *)(v7 + 3));
      v8 = (std::__shared_weak_count *)off_1EE6C06A0;
      qword_1EE6C0698 = (uint64_t)(v7 + 3);
      off_1EE6C06A0 = v7;
      if (!v8)
        goto LABEL_15;
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    a4 = qword_1EE6C0698;
    v7 = off_1EE6C06A0;
    if (!off_1EE6C06A0)
    {
LABEL_17:
      pthread_mutex_unlock(&ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance);
      a1[7] = a4;
      a1[8] = v7;
      goto LABEL_18;
    }
LABEL_15:
    v11 = v7 + 1;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    goto LABEL_17;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v17) < 0)
    goto LABEL_6;
LABEL_3:
  if (!a4)
    goto LABEL_7;
LABEL_4:
  a1[7] = 0;
  a1[8] = 0;
LABEL_18:
  a1[9] = a4;
  return a1;
}

void sub_1A356390C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__shared_weak_count *v21;
  void *v23;

  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v23);
  pthread_mutex_unlock(&ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance);
  _Unwind_Resume(a1);
}

_QWORD *support::log::client::client(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t descriptor_instance;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v10;
  unint64_t v11;
  void *__p[2];
  uint64_t v13;
  void *v14[2];
  uint64_t v15;

  *a1 = &unk_1E4A09998;
  *(_OWORD *)v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v13 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  a1[1] = off_1E4A0FA00;
  descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance((uint64_t)v14, (uint64_t)__p);
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance;
  a1[4] = descriptor_instance + 8;
  a1[5] = descriptor_instance + 32;
  a1[6] = descriptor_instance + 56;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(v14[0]);
    v7 = *a4;
    v8 = a4[1];
    a1[7] = *a4;
    a1[8] = v8;
    if (!v8)
      goto LABEL_4;
    goto LABEL_7;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15) < 0)
    goto LABEL_6;
LABEL_3:
  v7 = *a4;
  v8 = a4[1];
  a1[7] = *a4;
  a1[8] = v8;
  if (!v8)
  {
LABEL_4:
    a1[9] = v7;
    return a1;
  }
LABEL_7:
  v10 = (unint64_t *)(v8 + 8);
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  a1[9] = a1[7];
  return a1;
}

void sub_1A3563A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

_QWORD *support::log::client::client(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *__p[2];
  uint64_t v6;
  void *v7[2];
  uint64_t v8;

  *(_OWORD *)v7 = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v6 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  support::log::client::client(a1, (uint64_t)v7, (uint64_t)__p, 0);
  if (SHIBYTE(v6) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v8) & 0x80000000) == 0)
      return a1;
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v7[0]);
  return a1;
}

{
  void *__p[2];
  uint64_t v6;
  void *v7[2];
  uint64_t v8;

  *(_OWORD *)v7 = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v6 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  support::log::client::client(a1, (uint64_t)v7, (uint64_t)__p, 0);
  if (SHIBYTE(v6) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v8) & 0x80000000) == 0)
      return a1;
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v7[0]);
  return a1;
}

void sub_1A3563B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1A3563C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t support::log::client::get_manager(support::log::client *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t support::log::client::get_descriptor(support::log::client *this)
{
  return (uint64_t)this + 8;
}

void support::log::stdout_delegate::~stdout_delegate(support::log::stdout_delegate *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &unk_1E4A0F928;
  if (*((_BYTE *)this + 24))
  {
    v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (v1)
      std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &unk_1E4A0F928;
  if (*((_BYTE *)this + 24))
  {
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (v2)
      std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(this);
}

BOOL support::log::manager::should_log(uint64_t a1, unsigned int a2, os_log_t oslog)
{
  return *(unsigned __int8 *)(a1 + 112) >= a2 || os_log_type_enabled(oslog, support::log::sOSLogLevel[a2]);
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::buffer>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::manager_global>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void support::log::manager_global::~manager_global(support::log::manager_global *this)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_1E4A0F970;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_1E4A0F970;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  operator delete(this);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(_QWORD *a1)
{
  _BYTE *v1;
  int v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t *result;
  uint64_t **v11;
  uint64_t *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v1 = a1;
  v2 = *((char *)a1 + 23);
  if (v2 >= 0)
    v3 = a1;
  else
    v3 = (uint64_t *)*a1;
  if (v2 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  v5 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v24, v3, v4);
  v6 = qword_1ED114C58;
  if (!qword_1ED114C58)
    return 0;
  v7 = v5;
  v8 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1ED114C58);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = v5;
    if (v5 >= qword_1ED114C58)
      v9 = v5 % qword_1ED114C58;
  }
  else
  {
    v9 = (qword_1ED114C58 - 1) & v5;
  }
  v11 = *(uint64_t ***)(qword_1ED114C50 + 8 * v9);
  if (v11)
  {
    v12 = *v11;
    if (*v11)
    {
      v13 = v1[23];
      if (v13 >= 0)
        v14 = v1[23];
      else
        v14 = *((_QWORD *)v1 + 1);
      if (v13 < 0)
        v1 = *(_BYTE **)v1;
      if (v8.u32[0] < 2uLL)
      {
        v15 = qword_1ED114C58 - 1;
        while (1)
        {
          v20 = v12[1];
          if (v20 == v7)
          {
            v21 = *((unsigned __int8 *)v12 + 39);
            if ((v21 & 0x80u) == 0)
              v22 = *((unsigned __int8 *)v12 + 39);
            else
              v22 = v12[3];
            if (v22 == v14)
            {
              if ((v21 & 0x80) != 0)
              {
                if (!memcmp((const void *)v12[2], v1, v12[3]))
                  return v12;
              }
              else
              {
                if (!*((_BYTE *)v12 + 39))
                  return v12;
                v23 = 0;
                while (*((unsigned __int8 *)v12 + v23 + 16) == v1[v23])
                {
                  if (v21 == ++v23)
                    return v12;
                }
              }
            }
          }
          else if ((v20 & v15) != v9)
          {
            return 0;
          }
          result = 0;
          v12 = (uint64_t *)*v12;
          if (!v12)
            return result;
        }
      }
      while (1)
      {
        v16 = v12[1];
        if (v16 == v7)
        {
          v17 = *((unsigned __int8 *)v12 + 39);
          if ((v17 & 0x80u) == 0)
            v18 = *((unsigned __int8 *)v12 + 39);
          else
            v18 = v12[3];
          if (v18 == v14)
          {
            if ((v17 & 0x80) != 0)
            {
              if (!memcmp((const void *)v12[2], v1, v12[3]))
                return v12;
            }
            else
            {
              if (!*((_BYTE *)v12 + 39))
                return v12;
              v19 = 0;
              while (*((unsigned __int8 *)v12 + v19 + 16) == v1[v19])
              {
                if (v17 == ++v19)
                  return v12;
              }
            }
          }
        }
        else
        {
          if (v16 >= v6)
            v16 %= v6;
          if (v16 != v9)
            return 0;
        }
        result = 0;
        v12 = (uint64_t *)*v12;
        if (!v12)
          return result;
      }
    }
  }
  return 0;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void support::log::global_client_descriptor::~global_client_descriptor(void **this)
{
  *this = off_1E4A0FB00;
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if ((*((char *)this + 31) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(this[1]);
    return;
  }
  operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    goto LABEL_5;
}

{
  *this = off_1E4A0FB00;
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    if ((*((char *)this + 31) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(this[1]);
    operator delete(this);
    return;
  }
  if (*((char *)this + 31) < 0)
    goto LABEL_6;
LABEL_3:
  operator delete(this);
}

void std::__shared_ptr_pointer<support::log::delegate::context *,std::shared_ptr<support::log::delegate::context>::__shared_ptr_default_delete<support::log::delegate::context,support::log::delegate::context>,std::allocator<support::log::delegate::context>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<support::log::delegate::context *,std::shared_ptr<support::log::delegate::context>::__shared_ptr_default_delete<support::log::delegate::context,support::log::delegate::context>,std::allocator<support::log::delegate::context>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<support::log::delegate::context *,std::shared_ptr<support::log::delegate::context>::__shared_ptr_default_delete<support::log::delegate::context,support::log::delegate::context>,std::allocator<support::log::delegate::context>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001A3584812)
    return a1 + 24;
  if (((v3 & 0x80000001A3584812 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001A3584812))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001A3584812 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__shared_ptr_emplace<support::log::buffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A0FB80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<support::log::buffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A0FB80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<support::log::buffer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void support::log::buffer::~buffer(support::log::buffer *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;

  *(_QWORD *)this = off_1E4A0FBD0;
  v2 = (char *)*((_QWORD *)this + 9);
  v3 = (char *)this + 80;
  if (v2 != (char *)this + 80)
  {
    do
    {
      free(*((void **)v2 + 4));
      v4 = (char *)*((_QWORD *)v2 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (char *)*((_QWORD *)v2 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  std::deque<char *>::~deque[abi:ne180100]((uint64_t)this + 96);
  std::__tree<KernelPCITrace::BuffContext *>::destroy(*((_QWORD **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;

  *(_QWORD *)this = off_1E4A0FBD0;
  v2 = (char *)*((_QWORD *)this + 9);
  v3 = (char *)this + 80;
  if (v2 != (char *)this + 80)
  {
    do
    {
      free(*((void **)v2 + 4));
      v4 = (char *)*((_QWORD *)v2 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (char *)*((_QWORD *)v2 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  std::deque<char *>::~deque[abi:ne180100]((uint64_t)this + 96);
  std::__tree<KernelPCITrace::BuffContext *>::destroy(*((_QWORD **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  operator delete(this);
}

uint64_t std::deque<char *>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__shared_ptr_pointer<support::log::manager *,std::shared_ptr<support::log::manager>::__shared_ptr_default_delete<support::log::manager,support::log::manager>,std::allocator<support::log::manager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<support::log::manager *,std::shared_ptr<support::log::manager>::__shared_ptr_default_delete<support::log::manager,support::log::manager>,std::allocator<support::log::manager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<support::log::manager *,std::shared_ptr<support::log::manager>::__shared_ptr_default_delete<support::log::manager,support::log::manager>,std::allocator<support::log::manager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001A358499ELL)
    return a1 + 24;
  if (((v3 & 0x80000001A358499ELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001A358499ELL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001A358499ELL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__shared_ptr_emplace<support::log::manager_global>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A0FC68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<support::log::manager_global>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E4A0FC68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<support::log::manager_global>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t __cxx_global_var_init_3()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_1A343C000);
  }
  return result;
}

uint64_t __cxx_global_var_init_4_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::buffer>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance, &dword_1A343C000);
  }
  return result;
}

uint64_t __cxx_global_var_init_5()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::manager_global>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance, &dword_1A343C000);
  }
  return result;
}

uint64_t BBUpdaterExecCommand()
{
  return MEMORY[0x1E0DDF170]();
}

uint64_t BBUpdaterExtremeCreate()
{
  return MEMORY[0x1E0DDF178]();
}

uint64_t BBUpdaterRegisterGlobalLogSink()
{
  return MEMORY[0x1E0DDF180]();
}

uint64_t BBUpdaterSetOptions()
{
  return MEMORY[0x1E0DDF188]();
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80370](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80378](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C80380](c, data, *(_QWORD *)&len);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

CFStringRef CFBundleCopyLocalizedString(CFBundleRef bundle, CFStringRef key, CFStringRef value, CFStringRef tableName)
{
  return (CFStringRef)MEMORY[0x1E0C98050](bundle, key, value, tableName);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x1E0C980D0](allocator, bundleURL);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1E0C98418]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98508](theDict, applier, context);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x1E0C98660](err);
}

CFErrorDomain CFErrorGetDomain(CFErrorRef err)
{
  return (CFErrorDomain)MEMORY[0x1E0C98670](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x1E0C988E0](center, name, object, userInfo, deliverImmediately);
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
  MEMORY[0x1E0C98900](center, observer, name, object);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  MEMORY[0x1E0C98A90](key, value, applicationID, userName, hostName);
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1E0C98A98](applicationID, userName, hostName);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AE0](allocator, stream, streamLength, options, format, error);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
  MEMORY[0x1E0C98B10](stream);
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x1E0C98B48](alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x1E0C98B80](stream);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98BF8](rl, source, mode);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C30]();
}

void CFRunLoopPerformBlock(CFRunLoopRef rl, CFTypeRef mode, void *block)
{
  MEMORY[0x1E0C98C80](rl, mode, block);
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98C90](rl, source, mode);
}

CFRunLoopRunResult CFRunLoopRunInMode(CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled)
{
  return MEMORY[0x1E0C98CB0](mode, returnAfterSourceHandled, seconds);
}

CFRunLoopSourceRef CFRunLoopSourceCreate(CFAllocatorRef allocator, CFIndex order, CFRunLoopSourceContext *context)
{
  return (CFRunLoopSourceRef)MEMORY[0x1E0C98CC8](allocator, order, context);
}

void CFRunLoopStop(CFRunLoopRef rl)
{
  MEMORY[0x1E0C98D00](rl);
}

void CFRunLoopWakeUp(CFRunLoopRef rl)
{
  MEMORY[0x1E0C98D68](rl);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1E0C99018](alloc, formatOptions, format);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C99420](allocator, filePath, pathStyle, isDirectory);
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return (CFUserNotificationRef)MEMORY[0x1E0C995A8](allocator, flags, error, dictionary, timeout);
}

SInt32 CFUserNotificationDisplayAlert(CFTimeInterval timeout, CFOptionFlags flags, CFURLRef iconURL, CFURLRef soundURL, CFURLRef localizationURL, CFStringRef alertHeader, CFStringRef alertMessage, CFStringRef defaultButtonTitle, CFStringRef alternateButtonTitle, CFStringRef otherButtonTitle, CFOptionFlags *responseFlags)
{
  return MEMORY[0x1E0C995C8](flags, iconURL, soundURL, localizationURL, alertHeader, alertMessage, defaultButtonTitle, alternateButtonTitle, timeout);
}

SInt32 CFUserNotificationReceiveResponse(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags *responseFlags)
{
  return MEMORY[0x1E0C995E8](userNotification, responseFlags, timeout);
}

uint64_t CacheDeleteRegisterInfoCallbacks()
{
  return MEMORY[0x1E0D09B98]();
}

uint64_t ETLBBSimulateCrashExt()
{
  return MEMORY[0x1E0DE0008]();
}

uint64_t ETLDMCCreateViewFromFile()
{
  return MEMORY[0x1E0DDFFE0]();
}

uint64_t ETLDMCGetMatchingFileNameAndType()
{
  return MEMORY[0x1E0DDFFE8]();
}

uint64_t ETLDMCLogFilter()
{
  return MEMORY[0x1E0DDFFF0]();
}

uint64_t ETLDMCLogGetDefaultFilters()
{
  return MEMORY[0x1E0DDFFF8]();
}

uint64_t ETLDMCMerge()
{
  return MEMORY[0x1E0DE0000]();
}

uint64_t ETLDebugRegisterDelegate()
{
  return MEMORY[0x1E0DE0018]();
}

uint64_t ETLEFSDUmpCopyCrashLocationDetails()
{
  return MEMORY[0x1E0DE0080]();
}

uint64_t ETLEFSDumpInfoFree()
{
  return MEMORY[0x1E0DE0088]();
}

uint64_t ETLEFSDumpInterpret()
{
  return MEMORY[0x1E0DE0090]();
}

uint64_t ETLEFSearchBasebandCrashReasonM20()
{
  return MEMORY[0x1E0DE0098]();
}

uint64_t KTLCloseChannel()
{
  return MEMORY[0x1E0DE0398]();
}

uint64_t KTLDebugRegisterDelegate()
{
  return MEMORY[0x1E0DE03A0]();
}

uint64_t KTLDebugSetFlags()
{
  return MEMORY[0x1E0DE03A8]();
}

uint64_t KTLInitOptions()
{
  return MEMORY[0x1E0DE03B0]();
}

uint64_t KTLOpenChannel()
{
  return MEMORY[0x1E0DE03B8]();
}

uint64_t KTLSahGetCrashReport()
{
  return MEMORY[0x1E0DE03C0]();
}

uint64_t OSLogCreateArchiveWithDictionary()
{
  return MEMORY[0x1E0D446B8]();
}

uint64_t TelephonyBasebandCrashModemWithSPMI()
{
  return MEMORY[0x1E0DE2F30]();
}

uint64_t TelephonyBasebandCrashModemWithSPMIWithReason()
{
  return MEMORY[0x1E0DE2F38]();
}

uint64_t TelephonyBasebandCreateController()
{
  return MEMORY[0x1E0DE2F40]();
}

uint64_t TelephonyBasebandEnableModemMux()
{
  return MEMORY[0x1E0DE2F48]();
}

uint64_t TelephonyBasebandEnableModemVBUS()
{
  return MEMORY[0x1E0DE2F50]();
}

uint64_t TelephonyBasebandGetReset()
{
  return MEMORY[0x1E0DE2F70]();
}

uint64_t TelephonyBasebandPCITransportCreate()
{
  return MEMORY[0x1E0DE2CD8]();
}

uint64_t TelephonyBasebandPCITransportInitParameters()
{
  return MEMORY[0x1E0DE2CE0]();
}

uint64_t TelephonyBasebandRegisterForReset()
{
  return MEMORY[0x1E0DE2F90]();
}

uint64_t TelephonyBasebandSetModemCoredumpGPIO()
{
  return MEMORY[0x1E0DE2FD0]();
}

uint64_t TelephonyUtilDebugRegisterDelegate()
{
  return MEMORY[0x1E0DE3688]();
}

uint64_t TelephonyUtilDebugSetFlags()
{
  return MEMORY[0x1E0DE3690]();
}

uint64_t TelephonyUtilGetSystemTime()
{
  return MEMORY[0x1E0DE36A8]();
}

uint64_t TelephonyUtilIsCarrierBuild()
{
  return MEMORY[0x1E0DE36B0]();
}

uint64_t TelephonyUtilIsInternalBuild()
{
  return MEMORY[0x1E0DE36B8]();
}

uint64_t TelephonyUtilIsVendorBuild()
{
  return MEMORY[0x1E0DE36C0]();
}

uint64_t TelephonyUtilTransportCreateWithFD()
{
  return MEMORY[0x1E0DE3700]();
}

uint64_t TelephonyUtilTransportFree()
{
  return MEMORY[0x1E0DE3708]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

uint64_t GetBBIPCLogs()
{
  return MEMORY[0x1E0DE03C8]();
}

uint64_t ETLDIAGGetGUID()
{
  return MEMORY[0x1E0DDFFA8]();
}

uint64_t ICE_FILER_read()
{
  return MEMORY[0x1E0DE03D0]();
}

uint64_t KTLGetETBFilename(const char *a1)
{
  return MEMORY[0x1E0DE03D8](a1);
}

uint64_t KTLGetKDMFilename(const char *a1)
{
  return MEMORY[0x1E0DE03E0](a1);
}

uint64_t ETLADPLLoggingEnable()
{
  return MEMORY[0x1E0DDFFB0]();
}

uint64_t KTLGetKDMProductName(void)
{
  return MEMORY[0x1E0DE03E8]();
}

uint64_t ETLDIAGLoggingConfigure()
{
  return MEMORY[0x1E0DDFFB8]();
}

uint64_t ETLDIAGLoggingUnconfigure()
{
  return MEMORY[0x1E0DDFFC0]();
}

uint64_t KTLGetTraceConfigFilename(const char *a1)
{
  return MEMORY[0x1E0DE03F0](a1);
}

uint64_t ETLDIAGLoggingGetGUIDString()
{
  return MEMORY[0x1E0DDFFC8]();
}

uint64_t KTLGetMaskFileExtensionName()
{
  return MEMORY[0x1E0DE03F8]();
}

uint64_t ETLDIAGLoggingGetDefaultView(void)
{
  return MEMORY[0x1E0DDFFD0]();
}

uint64_t ETLDIAGLoggingGetAvailableDMCNames(void)
{
  return MEMORY[0x1E0DDFFD8]();
}

uint64_t TelephonyXPC::ServerClientState::isClientEntitled()
{
  return MEMORY[0x1E0DBD8B0]();
}

uint64_t TelephonyXPC::ServerClientState::ServerClientState()
{
  return MEMORY[0x1E0DBD8B8]();
}

uint64_t TelephonyXPC::Client::create()
{
  return MEMORY[0x1E0DBD860]();
}

uint64_t TelephonyXPC::Client::perform()
{
  return MEMORY[0x1E0DBD870]();
}

uint64_t TelephonyXPC::Server::setCommandHandler()
{
  return MEMORY[0x1E0DBD8E0]();
}

uint64_t TelephonyXPC::Server::start(TelephonyXPC::Server *this)
{
  return MEMORY[0x1E0DBD8E8](this);
}

uint64_t TelephonyXPC::Server::create()
{
  return MEMORY[0x1E0DBD8F0]();
}

uint64_t TelephonyXPC::Server::asString()
{
  return MEMORY[0x1E0DBD8F8]();
}

uint64_t capabilities::abs::supportsETB(capabilities::abs *this)
{
  return MEMORY[0x1E0DE2FE8](this);
}

uint64_t capabilities::abs::TUDebugFlags(capabilities::abs *this)
{
  return MEMORY[0x1E0DE2FF0](this);
}

uint64_t capabilities::abs::logScratchPath(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3008](this);
}

uint64_t capabilities::abs::logSnapshotPath(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3010](this);
}

uint64_t capabilities::abs::radarComponentID(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3030](this);
}

uint64_t capabilities::abs::supportsBBUSBMux(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3040](this);
}

uint64_t capabilities::abs::radarComponentName(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3060](this);
}

uint64_t capabilities::abs::supportsETSProtocol(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3078](this);
}

uint64_t capabilities::abs::radarComponentVersion(capabilities::abs *this)
{
  return MEMORY[0x1E0DE30B0](this);
}

uint64_t capabilities::abs::supportsCMHandDetection(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3108](this);
}

uint64_t capabilities::abs::supportsCellularLogging(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3110](this);
}

uint64_t capabilities::abs::defaultSystemLogsHistory(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3128](this);
}

uint64_t capabilities::abs::profileBasebandHistoryMB(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3130](this);
}

uint64_t capabilities::abs::supportsTraceBackgroundMode(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3188](this);
}

uint64_t capabilities::abs::traceTransportTimeoutScalingFactor(capabilities::abs *this)
{
  return MEMORY[0x1E0DE31F0](this);
}

uint64_t capabilities::abs::shouldUseMinBasebandTransportIOReadSize(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3210](this);
}

uint64_t capabilities::abs::shouldUseMinBasebandTransportIOReadCount(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3218](this);
}

uint64_t capabilities::ipc::supportsPCI(capabilities::ipc *this)
{
  return MEMORY[0x1E0DE3250](this);
}

uint64_t capabilities::ipc::defaultLogLevel(capabilities::ipc *this)
{
  return MEMORY[0x1E0DE3258](this);
}

uint64_t capabilities::ipc::defaultMHIConfigPayloadSizeBytes(capabilities::ipc *this)
{
  return MEMORY[0x1E0DE3278](this);
}

uint64_t capabilities::ipc::defaultPCIBinaryTraceHistorySizeMB(capabilities::ipc *this)
{
  return MEMORY[0x1E0DE3280](this);
}

uint64_t capabilities::diag::diagVersion(capabilities::diag *this)
{
  return MEMORY[0x1E0DE3290](this);
}

uint64_t capabilities::diag::supportsADPL(capabilities::diag *this)
{
  return MEMORY[0x1E0DE3298](this);
}

uint64_t capabilities::diag::supportsQDSS(capabilities::diag *this)
{
  return MEMORY[0x1E0DE32A0](this);
}

uint64_t capabilities::diag::supportsQShrink4(capabilities::diag *this)
{
  return MEMORY[0x1E0DE32A8](this);
}

uint64_t capabilities::diag::supportsBuffering(capabilities::diag *this)
{
  return MEMORY[0x1E0DE32B0](this);
}

uint64_t capabilities::diag::interfaceAfterBoot(capabilities::diag *this)
{
  return MEMORY[0x1E0DE32B8](this);
}

uint64_t capabilities::diag::preferredInterface(capabilities::diag *this)
{
  return MEMORY[0x1E0DE32C0](this);
}

uint64_t capabilities::diag::supportedInterfaces(capabilities::diag *this)
{
  return MEMORY[0x1E0DE32C8](this);
}

uint64_t capabilities::diag::supportsMultipleMasks(capabilities::diag *this)
{
  return MEMORY[0x1E0DE32D0](this);
}

uint64_t capabilities::diag::supportedDuringAPSleep(capabilities::diag *this)
{
  return MEMORY[0x1E0DE32D8](this);
}

uint64_t capabilities::diag::asString()
{
  return MEMORY[0x1E0DE32E8]();
}

uint64_t capabilities::debug::environment(capabilities::debug *this)
{
  return MEMORY[0x1E0DE32F0](this);
}

uint64_t capabilities::debug::operator&()
{
  return MEMORY[0x1E0DE32F8]();
}

uint64_t capabilities::radio::radioUnknown(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3300](this);
}

uint64_t capabilities::radio::firmwarePrefix(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3320](this);
}

uint64_t capabilities::radio::personalizedFirmwarePath(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3350](this);
}

uint64_t capabilities::radio::ice(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3398](this);
}

uint64_t capabilities::radio::vendor(capabilities::radio *this)
{
  return MEMORY[0x1E0DE33A0](this);
}

uint64_t capabilities::radio::maverick(capabilities::radio *this)
{
  return MEMORY[0x1E0DE33B0](this);
}

uint64_t capabilities::radio::mav20Plus(capabilities::radio *this)
{
  return MEMORY[0x1E0DE33C0](this);
}

uint64_t capabilities::trace::enabledByDefault(capabilities::trace *this)
{
  return MEMORY[0x1E0DE33D8](this);
}

uint64_t capabilities::trace::getCompressionMode(capabilities::trace *this)
{
  return MEMORY[0x1E0DE33E0](this);
}

uint64_t capabilities::trace::defaultFileSizeBytes(capabilities::trace *this)
{
  return MEMORY[0x1E0DE33E8](this);
}

uint64_t capabilities::trace::defaultHistorySizeMB(capabilities::trace *this)
{
  return MEMORY[0x1E0DE33F0](this);
}

uint64_t capabilities::trace::defaultSleepTraceMode(capabilities::trace *this)
{
  return MEMORY[0x1E0DE33F8](this);
}

uint64_t capabilities::trace::supportsCoreDumpStatus(capabilities::trace *this)
{
  return MEMORY[0x1E0DE3400](this);
}

uint64_t capabilities::trace::supportsKernelPCITrace(capabilities::trace *this)
{
  return MEMORY[0x1E0DE3408](this);
}

uint64_t capabilities::trace::supportsBasebandIPCTrace(capabilities::trace *this)
{
  return MEMORY[0x1E0DE3410](this);
}

uint64_t capabilities::trace::defaultMemoryFileMaxCount(capabilities::trace *this)
{
  return MEMORY[0x1E0DE3418](this);
}

uint64_t capabilities::trace::supportsHighTPutByDefault(capabilities::trace *this)
{
  return MEMORY[0x1E0DE3428](this);
}

uint64_t capabilities::trace::supportsDataLoggingByDefault(capabilities::trace *this)
{
  return MEMORY[0x1E0DE3430](this);
}

uint64_t capabilities::trace::supportsKernelPCIBinaryTrace(capabilities::trace *this)
{
  return MEMORY[0x1E0DE3438](this);
}

uint64_t capabilities::trace::supportsDuplicateSignatureDetection(capabilities::trace *this)
{
  return MEMORY[0x1E0DE3440](this);
}

uint64_t capabilities::trace::supportsCoredumpCrashReasonOnCustomerBuild(capabilities::trace *this)
{
  return MEMORY[0x1E0DE3448](this);
}

uint64_t capabilities::trace::allowed(capabilities::trace *this)
{
  return MEMORY[0x1E0DE3450](this);
}

uint64_t capabilities::trace::asString()
{
  return MEMORY[0x1E0DE3458]();
}

uint64_t capabilities::coredump::getPersonality(capabilities::coredump *this)
{
  return MEMORY[0x1E0DE34D8](this);
}

uint64_t capabilities::coredump::coredumpAttemptCount(capabilities::coredump *this)
{
  return MEMORY[0x1E0DE34E0](this);
}

uint64_t capabilities::coredump::supportsGPIOSignalling(capabilities::coredump *this)
{
  return MEMORY[0x1E0DE34E8](this);
}

uint64_t capabilities::coredump::supportsSPMISignalling(capabilities::coredump *this)
{
  return MEMORY[0x1E0DE34F0](this);
}

uint64_t TraceFileCollection::setHistory(TraceFileCollection *this)
{
  return MEMORY[0x1E0D01978](this);
}

uint64_t TraceFileCollection::setFileSize(TraceFileCollection *this)
{
  return MEMORY[0x1E0D01980](this);
}

uint64_t TraceFileCollection::handleReadData(TraceFileCollection *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1E0D01988](this, a2);
}

uint64_t TraceFileCollection::setMaxMemoryFileCount(TraceFileCollection *this)
{
  return MEMORY[0x1E0D01990](this);
}

uint64_t TraceFileCollection::clear()
{
  return MEMORY[0x1E0D01998]();
}

uint64_t TraceFileCollection::create()
{
  return MEMORY[0x1E0D019A0]();
}

uint64_t TraceFileCollection::archive(TraceFileCollection *this)
{
  return MEMORY[0x1E0D019A8](this);
}

uint64_t TraceFileCollection::snapshot()
{
  return MEMORY[0x1E0D019B0]();
}

uint64_t CommandDriverFactory::create_default_global(CommandDriverFactory *this)
{
  return MEMORY[0x1E0DDF1B0](this);
}

uint64_t Bsp::BspCommandDriver::SwTrap()
{
  return MEMORY[0x1E0DE0400]();
}

uint64_t Bsp::BspCommandDriver::BspCommandDriver()
{
  return MEMORY[0x1E0DE0408]();
}

uint64_t abm::trace::TraceReader::clearFiles(abm::trace::TraceReader *this)
{
  return MEMORY[0x1E0D019B8](this);
}

uint64_t abm::trace::TraceReader::updateFileSize(abm::trace::TraceReader *this)
{
  return MEMORY[0x1E0D019C0](this);
}

uint64_t abm::trace::TraceReader::getCurrentIndex(abm::trace::TraceReader *this)
{
  return MEMORY[0x1E0D019C8](this);
}

uint64_t abm::trace::TraceReader::updateHistorySize(abm::trace::TraceReader *this)
{
  return MEMORY[0x1E0D019D0](this);
}

uint64_t abm::trace::TraceReader::updateMaxMemoryFileCount(abm::trace::TraceReader *this)
{
  return MEMORY[0x1E0D019D8](this);
}

uint64_t abm::trace::TraceReader::notifyCellularLoggingPortNumber(abm::trace::TraceReader *this)
{
  return MEMORY[0x1E0D019E0](this);
}

uint64_t abm::trace::TraceReader::stop(abm::trace::TraceReader *this)
{
  return MEMORY[0x1E0D019E8](this);
}

uint64_t abm::trace::TraceReader::start()
{
  return MEMORY[0x1E0D019F0]();
}

uint64_t abm::trace::TraceReader::create()
{
  return MEMORY[0x1E0D019F8]();
}

uint64_t abm::trace::TraceReader::snapshot()
{
  return MEMORY[0x1E0D01A00]();
}

uint64_t abm::trace::TraceInfo::setHandler()
{
  return MEMORY[0x1E0D01A88]();
}

uint64_t abm::trace::TraceInfo::push()
{
  return MEMORY[0x1E0D01A90]();
}

{
  return MEMORY[0x1E0D01A98]();
}

uint64_t abm::trace::TraceInfo::create()
{
  return MEMORY[0x1E0D01AA0]();
}

uint64_t abm::client::CreateManager()
{
  return MEMORY[0x1E0CFC128]();
}

uint64_t abm::client::PerformCommand()
{
  return MEMORY[0x1E0CFC130]();
}

{
  return MEMORY[0x1E0CFC138]();
}

uint64_t abm::client::GetTraceProperty()
{
  return MEMORY[0x1E0CFC148]();
}

uint64_t abm::client::SetTraceProperty()
{
  return MEMORY[0x1E0CFC150]();
}

uint64_t abm::client::CollectTelephonyLogs()
{
  return MEMORY[0x1E0CFC158]();
}

uint64_t ctu::LogMessage::LogMessage()
{
  return MEMORY[0x1E0DE3718]();
}

uint64_t ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase()
{
  return MEMORY[0x1E0DE3720]();
}

uint64_t ctu::OsLogLogger::OsLogLogger(ctu::OsLogLogger *this, const char *a2, const char *a3)
{
  return MEMORY[0x1E0DE3730](this, a2, a3);
}

uint64_t ctu::OsLogLogger::OsLogLogger()
{
  return MEMORY[0x1E0DE3738]();
}

uint64_t ctu::OsLogLogger::OsLogLogger(ctu::OsLogLogger *this, const ctu::OsLogLogger *a2)
{
  return MEMORY[0x1E0DE3740](this, a2);
}

void ctu::OsLogLogger::~OsLogLogger(ctu::OsLogLogger *this)
{
  MEMORY[0x1E0DE3748](this);
}

uint64_t ctu::OsLogContext::OsLogContext()
{
  return MEMORY[0x1E0DE3750]();
}

uint64_t ctu::OsLogContext::OsLogContext(ctu::OsLogContext *this, const char *a2, const char *a3)
{
  return MEMORY[0x1E0DE3758](this, a2, a3);
}

uint64_t ctu::OsLogContext::OsLogContext(ctu::OsLogContext *this, const ctu::OsLogContext *a2)
{
  return MEMORY[0x1E0DE3760](this, a2);
}

void ctu::OsLogContext::~OsLogContext(ctu::OsLogContext *this)
{
  MEMORY[0x1E0DE3768](this);
}

uint64_t ctu::OsLogContext::operator=()
{
  return MEMORY[0x1E0DE3770]();
}

uint64_t ctu::StaticLogger::StaticLogger()
{
  return MEMORY[0x1E0DE3778]();
}

uint64_t ctu::StaticLogger::StaticLogger(ctu::StaticLogger *this)
{
  return MEMORY[0x1E0DE3780](this);
}

void ctu::StaticLogger::~StaticLogger(ctu::StaticLogger *this)
{
  MEMORY[0x1E0DE3788](this);
}

uint64_t ctu::TrackedLogger::registerLoggerToServer()
{
  return MEMORY[0x1E0DE3790]();
}

uint64_t ctu::LogMessageBuffer::takeString(ctu::LogMessageBuffer *this)
{
  return MEMORY[0x1E0DE37D8](this);
}

uint64_t ctu::LogMessageBuffer::takeMetadata(ctu::LogMessageBuffer *this)
{
  return MEMORY[0x1E0DE37E0](this);
}

uint64_t ctu::LogMessageBuffer::vprintf(ctu::LogMessageBuffer *this, const char *a2, char *a3)
{
  return MEMORY[0x1E0DE37F0](this, a2, a3);
}

uint64_t ctu::LogMessageBuffer::LogMessageBuffer(ctu::LogMessageBuffer *this)
{
  return MEMORY[0x1E0DE37F8](this);
}

void ctu::LogMessageBuffer::~LogMessageBuffer(ctu::LogMessageBuffer *this)
{
  MEMORY[0x1E0DE3800](this);
}

uint64_t ctu::LoggerCommonBase::setLogLevel()
{
  return MEMORY[0x1E0DE3810]();
}

uint64_t ctu::LoggerCommonBase::setInheritedLogLevel()
{
  return MEMORY[0x1E0DE3818]();
}

uint64_t ctu::LoggerCommonBase::LoggerCommonBase()
{
  return MEMORY[0x1E0DE3820]();
}

{
  return MEMORY[0x1E0DE3828]();
}

uint64_t ctu::LoggerCommonBase::operator=()
{
  return MEMORY[0x1E0DE3830]();
}

uint64_t ctu::isProcessRunning()
{
  return MEMORY[0x1E0DE3838]();
}

uint64_t ctu::XpcJetsamAssertion::createActivity()
{
  return MEMORY[0x1E0DE3840]();
}

uint64_t ctu::XpcJetsamAssertion::create_default_global(ctu::XpcJetsamAssertion *this)
{
  return MEMORY[0x1E0DE3848](this);
}

uint64_t ctu::DispatchTimerService::create()
{
  return MEMORY[0x1E0DE3850]();
}

uint64_t ctu::cf::MakeCFString::MakeCFString(ctu::cf::MakeCFString *this, const char *a2)
{
  return MEMORY[0x1E0DE3858](this, a2);
}

void ctu::cf::MakeCFString::~MakeCFString(ctu::cf::MakeCFString *this)
{
  MEMORY[0x1E0DE3860](this);
}

uint64_t ctu::cf::convert_copy(ctu::cf *this, const __CFString **a2, const char *a3, uint64_t a4, const __CFAllocator *a5)
{
  return MEMORY[0x1E0DE3868](this, a2, a3, a4, a5);
}

uint64_t ctu::cf::convert_copy()
{
  return MEMORY[0x1E0DE3870]();
}

uint64_t ctu::cf::dict_adapter::dict_adapter(ctu::cf::dict_adapter *this, const __CFDictionary *a2)
{
  return MEMORY[0x1E0DE3880](this, a2);
}

uint64_t ctu::cf::dict_adapter::dict_adapter(ctu::cf::dict_adapter *this, const ctu::cf::dict_adapter *a2)
{
  return MEMORY[0x1E0DE3888](this, a2);
}

void ctu::cf::dict_adapter::~dict_adapter(ctu::cf::dict_adapter *this)
{
  MEMORY[0x1E0DE3890](this);
}

uint64_t ctu::cf::plist_adapter::plist_adapter(ctu::cf::plist_adapter *this, const __CFString *a2, const __CFString *a3)
{
  return MEMORY[0x1E0DE3898](this, a2, a3);
}

void ctu::cf::plist_adapter::~plist_adapter(ctu::cf::plist_adapter *this)
{
  MEMORY[0x1E0DE38A0](this);
}

uint64_t ctu::cf::assign()
{
  return MEMORY[0x1E0DE38B8]();
}

{
  return MEMORY[0x1E0DE38C0]();
}

uint64_t ctu::cf::assign(ctu::cf *this, BOOL *a2, const __CFBoolean *a3)
{
  return MEMORY[0x1E0DE38D8](this, a2, a3);
}

uint64_t ctu::fs::remove_dir()
{
  return MEMORY[0x1E0DE3920]();
}

uint64_t ctu::fs::file_exists()
{
  return MEMORY[0x1E0DE3928]();
}

uint64_t ctu::fs::read_folder()
{
  return MEMORY[0x1E0DE3930]();
}

uint64_t ctu::fs::is_directory()
{
  return MEMORY[0x1E0DE3938]();
}

uint64_t ctu::fs::get_file_size()
{
  return MEMORY[0x1E0DE3940]();
}

uint64_t ctu::fs::create_directory()
{
  return MEMORY[0x1E0DE3948]();
}

uint64_t ctu::fs::get_filtered_files()
{
  return MEMORY[0x1E0DE3950]();
}

uint64_t ctu::fs::get_unique_filename()
{
  return MEMORY[0x1E0DE3958]();
}

uint64_t ctu::fs::get_unique_pathname()
{
  return MEMORY[0x1E0DE3960]();
}

uint64_t ctu::fs::chmod()
{
  return MEMORY[0x1E0DE3968]();
}

uint64_t ctu::fs::rename()
{
  return MEMORY[0x1E0DE3970]();
}

uint64_t ctu::fs::load_file()
{
  return MEMORY[0x1E0DE3978]();
}

uint64_t ctu::Clock::now_in_nanoseconds(ctu::Clock *this)
{
  return MEMORY[0x1E0DE39A8](this);
}

uint64_t ctu::asChar()
{
  return MEMORY[0x1E0DE39B0]();
}

uint64_t ctu::assign()
{
  return MEMORY[0x1E0DE39B8]();
}

uint64_t ctu::Gestalt::create_default_global(ctu::Gestalt *this)
{
  return MEMORY[0x1E0DE39C0](this);
}

uint64_t ctu::tokenize()
{
  return MEMORY[0x1E0DE39C8]();
}

uint64_t ctu::LogServer::setEnabled(ctu::LogServer *this)
{
  return MEMORY[0x1E0DE39D0](this);
}

uint64_t ctu::LogServer::updateConfig()
{
  return MEMORY[0x1E0DE39D8]();
}

uint64_t ctu::LogServer::log()
{
  return MEMORY[0x1E0DE39E0]();
}

uint64_t ctu::LogServer::start(ctu::LogServer *this)
{
  return MEMORY[0x1E0DE39E8](this);
}

uint64_t ctu::LogServer::create()
{
  return MEMORY[0x1E0DE39F0]();
}

uint64_t ctu::LogServer::addWriter()
{
  return MEMORY[0x1E0DE39F8]();
}

uint64_t ctu::cf_to_xpc(ctu *this, const void *a2)
{
  return MEMORY[0x1E0DE3A40](this, a2);
}

uint64_t ctu::xpc_to_cf(ctu *this, void *a2)
{
  return MEMORY[0x1E0DE3A48](this, a2);
}

uint64_t ctu::operator<<()
{
  return MEMORY[0x1E0DE3A50]();
}

{
  return MEMORY[0x1E0DE3A58]();
}

{
  return MEMORY[0x1E0DE3A60]();
}

{
  return MEMORY[0x1E0DE3A68]();
}

uint64_t pci::transport::kernelTrace::create(pci::transport::kernelTrace *this)
{
  return MEMORY[0x1E0DE2CF0](this);
}

uint64_t pci::transport::kernelControl::create(pci::transport::kernelControl *this)
{
  return MEMORY[0x1E0DE2CF8](this);
}

uint64_t tlv::throwIfNotEnoughBytes(tlv *this, const unsigned __int8 *a2, const unsigned __int8 *a3)
{
  return MEMORY[0x1E0DE2DE0](this, a2, a3);
}

uint64_t xpc::dyn_cast_or_default()
{
  return MEMORY[0x1E0DE3A78]();
}

{
  return MEMORY[0x1E0DE3A80]();
}

{
  return MEMORY[0x1E0DE3A90]();
}

{
  return MEMORY[0x1E0DE3AA0]();
}

{
  return MEMORY[0x1E0DE3AA8]();
}

{
  return MEMORY[0x1E0DE3AB8]();
}

uint64_t xpc::bridge()
{
  return MEMORY[0x1E0DE3AC8]();
}

uint64_t AriMsg::GetBufCtx(AriMsg *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1E0DDCB38](this, a2);
}

uint64_t AriHost::StartStream()
{
  return MEMORY[0x1E0DDCE30]();
}

uint64_t AriHost::RegisterClient(AriHost *this, const char *a2, int *a3, dispatch_queue_s *a4)
{
  return MEMORY[0x1E0DDCE38](this, a2, a3, a4);
}

{
  return MEMORY[0x1E0DDCE40](this, a2, a3, a4);
}

uint64_t AriHost::DeregisterClient(AriHost *this)
{
  return MEMORY[0x1E0DDCE48](this);
}

uint64_t AriHost::ReRegisterClient()
{
  return MEMORY[0x1E0DDCE50]();
}

uint64_t AriHost::SetRTEventHandler()
{
  return MEMORY[0x1E0DDCE58]();
}

uint64_t AriHost::Init(AriHost *this)
{
  return MEMORY[0x1E0DDCE60](this);
}

uint64_t AriHost::Send()
{
  return MEMORY[0x1E0DDCE68]();
}

uint64_t AriHost::EndStream(AriHost *this)
{
  return MEMORY[0x1E0DDCE70](this);
}

uint64_t TelephonyXPC::ServerClientState::getName(TelephonyXPC::ServerClientState *this)
{
  return MEMORY[0x1E0DBD900](this);
}

uint64_t TraceFileCollection::getNewestFileNumber(TraceFileCollection *this)
{
  return MEMORY[0x1E0D01AF8](this);
}

uint64_t TraceFileCollection::getInMemoryRemaining(TraceFileCollection *this)
{
  return MEMORY[0x1E0D01B00](this);
}

uint64_t ctu::LoggerCommonBase::getLogDomain(ctu::LoggerCommonBase *this)
{
  return MEMORY[0x1E0DE3AD8](this);
}

uint64_t ctu::LoggerCommonBase::getLocalLogLevel(ctu::LoggerCommonBase *this)
{
  return MEMORY[0x1E0DE3AE0](this);
}

uint64_t ctu::cf::map_adapter::getInt(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x1E0DE3B08](this, a2);
}

uint64_t ctu::cf::map_adapter::getBool(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x1E0DE3B10](this, a2);
}

uint64_t ctu::cf::map_adapter::getString()
{
  return MEMORY[0x1E0DE3B20]();
}

uint64_t ctu::llvm::StringRef::find_last_not_of()
{
  return MEMORY[0x1E0DE3B28]();
}

uint64_t ctu::llvm::StringRef::find_first_not_of()
{
  return MEMORY[0x1E0DE3B30]();
}

uint64_t ctu::LogServer::getConfig(ctu::LogServer *this)
{
  return MEMORY[0x1E0DE3B38](this);
}

uint64_t xpc::object::to_string(xpc::object *this)
{
  return MEMORY[0x1E0DE3B48](this);
}

std::string *__cdecl std::error_code::message(std::string *__return_ptr retstr, const std::error_code *this)
{
  return (std::string *)MEMORY[0x1E0DE41A0](retstr, this);
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x1E0DE4240](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

uint64_t std::time_get<char,std::istreambuf_iterator<char>>::get()
{
  return MEMORY[0x1E0DE4260]();
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4308](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x1E0DE4320](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4330](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
  MEMORY[0x1E0DE4340](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x1E0DE43B0](this, *(_QWORD *)&__ecode);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1E0DE4438](this, __n, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4470](this, __pos, __s, __n);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x1E0DE44B8](this, __c);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1E0DE44D8](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x1E0DE4590]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x1E0DE4598]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1E0DE45A8]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1E0DE45B0]();
}

uint64_t std::istream::peek()
{
  return MEMORY[0x1E0DE45C8]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x1E0DE45D0]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x1E0DE45E8]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x1E0DE45F0]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x1E0DE4608]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x1E0DE4628]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1E0DE4698]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1E0DE46A0]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x1E0DE46A8]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1E0DE46B0]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1E0DE46B8]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1E0DE46C8]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE46E0]();
}

{
  return MEMORY[0x1E0DE46E8]();
}

{
  return MEMORY[0x1E0DE4700]();
}

{
  return MEMORY[0x1E0DE4708]();
}

{
  return MEMORY[0x1E0DE4710]();
}

{
  return MEMORY[0x1E0DE4718]();
}

{
  return MEMORY[0x1E0DE4730]();
}

{
  return MEMORY[0x1E0DE4738]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1E0DE47A8]();
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x1E0DE47C8](__s, __icase);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1E0DE47E0]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1E0DE47E8]();
}

const std::error_category *std::system_category(void)
{
  return (const std::error_category *)MEMORY[0x1E0DE4848]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1E0DE48F8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x1E0DE4910](retstr, __s);
}

uintmax_t std::__fs::filesystem::__remove_all(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return MEMORY[0x1E0DE4980](a1, __ec);
}

void std::__fs::filesystem::__permissions(const std::__fs::filesystem::path *a1, std::__fs::filesystem::perms a2, std::__fs::filesystem::perm_options a3, std::error_code *a4)
{
  MEMORY[0x1E0DE4988](a1, *(_QWORD *)&a2, a3, a4);
}

void std::__fs::filesystem::__copy(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::__fs::filesystem::copy_options __opt, std::error_code *__ec)
{
  MEMORY[0x1E0DE4A28](__from, __to, __opt, __ec);
}

int std::stoi(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1E0DE4A78](__str, __idx, *(_QWORD *)&__base);
}

uint64_t std::stol(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1E0DE4A80](__str, __idx, *(_QWORD *)&__base);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA0](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA8](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x1E0DE4AB8](this);
}

unint64_t std::stoul(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1E0DE4AC8](__str, __idx, *(_QWORD *)&__base);
}

uint64_t std::__sort<std::__less<char,char> &,char *>()
{
  return MEMORY[0x1E0DE4AD8]();
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x1E0DE4B48]();
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x1E0DE4B88](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x1E0DE4B90](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x1E0DE4C50](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x1E0DE4C68](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1E0DE4D28]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D58](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D60](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x1E0DE4D70](retstr, __val);
}

{
  return (std::string *)MEMORY[0x1E0DE4D80](retstr, __val);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE4DD8](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

void operator delete[](void *__p)
{
  off_1E4A057C8(__p);
}

void operator delete(void *__p)
{
  off_1E4A057D0(__p);
}

void *__cdecl operator new[](size_t __sz)
{
  return (void *)off_1E4A057D8(__sz);
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E4A057E0(__sz);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1E0C80A98](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE50D0]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1E0DE50E0](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C70](*(_QWORD *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C78](*(_QWORD *)&a1);
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x1E0C80FC0](dso, description, activity, *(_QWORD *)&flags);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _os_log_send_and_compose_impl()
{
  return MEMORY[0x1E0C81068]();
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t archive_entry_copy_stat()
{
  return MEMORY[0x1E0DE3DB8]();
}

uint64_t archive_entry_free()
{
  return MEMORY[0x1E0DE3DC8]();
}

uint64_t archive_entry_new()
{
  return MEMORY[0x1E0DE3DD0]();
}

uint64_t archive_entry_pathname()
{
  return MEMORY[0x1E0DE3DD8]();
}

uint64_t archive_entry_set_pathname()
{
  return MEMORY[0x1E0DE3E18]();
}

uint64_t archive_errno()
{
  return MEMORY[0x1E0DE3E58]();
}

uint64_t archive_read_free()
{
  return MEMORY[0x1E0DE3EF8]();
}

uint64_t archive_read_new()
{
  return MEMORY[0x1E0DE3F00]();
}

uint64_t archive_read_next_header()
{
  return MEMORY[0x1E0DE3F08]();
}

uint64_t archive_read_open_filename()
{
  return MEMORY[0x1E0DE3F28]();
}

uint64_t archive_read_support_filter_all()
{
  return MEMORY[0x1E0DE3F48]();
}

uint64_t archive_read_support_format_tar()
{
  return MEMORY[0x1E0DE3F88]();
}

uint64_t archive_write_add_filter_gzip()
{
  return MEMORY[0x1E0DE3FB0]();
}

uint64_t archive_write_data()
{
  return MEMORY[0x1E0DE3FC8]();
}

uint64_t archive_write_free()
{
  return MEMORY[0x1E0DE4000]();
}

uint64_t archive_write_header()
{
  return MEMORY[0x1E0DE4008]();
}

uint64_t archive_write_new()
{
  return MEMORY[0x1E0DE4010]();
}

uint64_t archive_write_open_filename()
{
  return MEMORY[0x1E0DE4028]();
}

uint64_t archive_write_set_format_ustar()
{
  return MEMORY[0x1E0DE4060]();
}

int atoi(const char *a1)
{
  return MEMORY[0x1E0C81668](a1);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

int chmod(const char *a1, mode_t a2)
{
  return MEMORY[0x1E0C82638](a1, a2);
}

int chown(const char *a1, uid_t a2, gid_t a3)
{
  return MEMORY[0x1E0C82640](a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x1E0C82698](a1);
}

double difftime(time_t a1, time_t a2)
{
  double result;

  MEMORY[0x1E0C82B98](a1, a2);
  return result;
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x1E0C82BC0](object);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C08](queue, block);
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82C18](queue, context, work);
}

void dispatch_barrier_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82C40](queue, context, work);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D10](group, queue, block);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D38](group, queue, block);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E20](attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E50](label, attr, target);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x1E0C82E98](object);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

void dispatch_retain(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA8](object);
}

void dispatch_set_qos_class_floor(dispatch_object_t object, dispatch_qos_class_t qos_class, int relative_priority)
{
  MEMORY[0x1E0C82F00](object, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F48](source, handler);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

void dispatch_suspend(dispatch_object_t object)
{
  MEMORY[0x1E0C82F88](object);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

int dlclose(void *__handle)
{
  return MEMORY[0x1E0C83030](__handle);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

int fchmod(int a1, mode_t a2)
{
  return MEMORY[0x1E0C832D0](*(_QWORD *)&a1, a2);
}

int fchown(int a1, uid_t a2, gid_t a3)
{
  return MEMORY[0x1E0C832E0](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1E0C83300](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1E0C83370](a1);
}

int ffsctl(int a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x1E0C83378](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C834A0](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x1E0C83530](a1, a2, *(_QWORD *)&a3);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1E0C83560](*(_QWORD *)&a1, a2);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x1E0C83580](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x1E0C83778]();
}

passwd *__cdecl getpwnam(const char *a1)
{
  return (passwd *)MEMORY[0x1E0C83790](a1);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1E0C83820](a1, a2);
}

uid_t getuid(void)
{
  return MEMORY[0x1E0C83828]();
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1E0C83BB0](a1, a2);
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C83C40](a1, a2);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1E0C83C50]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1E0C83DB8](info);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1E0C84160](a1, a2);
}

time_t mktime(tm *a1)
{
  return MEMORY[0x1E0C841C8](a1);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x1E0C844C0](a1);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
  MEMORY[0x1E0C84510](activity, state);
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
  MEMORY[0x1E0C84518](state);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

void os_release(void *object)
{
  MEMORY[0x1E0C84910](object);
}

void *__cdecl os_retain(void *object)
{
  return (void *)MEMORY[0x1E0C84918](object);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1E0C84928](log);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1E0C84D50](a1, a2, a3, a4);
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x1E0C84DD8](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x1E0C84F08](a1);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1E0C85000](*(_QWORD *)&a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x1E0C85008](a1);
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x1E0C850B8](__p, __ec);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
  MEMORY[0x1E0C85100](__from, __to, __ec);
}

void rewind(FILE *a1)
{
  MEMORY[0x1E0C85120](a1);
}

uint64_t sandbox_extension_issue_file()
{
  return MEMORY[0x1E0C851A8]();
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85460](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C854D8](a1, a2);
}

int statvfs(const char *a1, statvfs *a2)
{
  return MEMORY[0x1E0C854E8](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x1E0C85500](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x1E0C85558](a1, a2, a3, a4);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85570](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x1E0C85590](a1, a2, a3);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

char *__cdecl strptime(const char *a1, const char *a2, tm *a3)
{
  return (char *)MEMORY[0x1E0C855D8](a1, a2, a3);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85658](__str, __endptr, *(_QWORD *)&__base);
}

int symlink(const char *a1, const char *a2)
{
  return MEMORY[0x1E0C85718](a1, a2);
}

void sync(void)
{
  MEMORY[0x1E0C85758]();
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1E0C857A0](a1, a2, a3, a4, a5);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1E0C85950](a1);
}

mode_t umask(mode_t a1)
{
  return MEMORY[0x1E0C85998](a1);
}

int unlink(const char *a1)
{
  return MEMORY[0x1E0C859B8](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1E0C859E0](*(_QWORD *)&a1);
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x1E0C85CB8](__s, *(_QWORD *)&__c, __n);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1E0C85D40](*(_QWORD *)&__fd, __buf, __nbyte);
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
  MEMORY[0x1E0C85DE0](xarray, value);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C85E00](objects, count);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1E0C85E30](xarray);
}

xpc_object_t xpc_array_get_value(xpc_object_t xarray, size_t index)
{
  return (xpc_object_t)MEMORY[0x1E0C85E90](xarray, index);
}

xpc_object_t xpc_BOOL_create(BOOL value)
{
  return (xpc_object_t)MEMORY[0x1E0C85EF0](value);
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1E0C86108](object);
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x1E0C86178](bytes, length);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C86208](keys, values, count);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1E0C862C8](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1E0C862E0](xdict, key);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
  MEMORY[0x1E0C863B8](xdict, key, value);
}

BOOL xpc_equal(xpc_object_t object1, xpc_object_t object2)
{
  return MEMORY[0x1E0C86420](object1, object2);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1E0C86520](object);
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return (xpc_object_t)MEMORY[0x1E0C86568](value);
}

xpc_object_t xpc_null_create(void)
{
  return (xpc_object_t)MEMORY[0x1E0C86628]();
}

void xpc_release(xpc_object_t object)
{
  MEMORY[0x1E0C86658](object);
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x1E0C86660](object);
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
  MEMORY[0x1E0C866E8](stream, targetq, handler);
}

xpc_object_t xpc_string_create(const char *string)
{
  return (xpc_object_t)MEMORY[0x1E0C86720](string);
}

