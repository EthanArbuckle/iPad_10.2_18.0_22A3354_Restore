uint64_t APSEventRecorderResetEvent(uint64_t result, int a2)
{
  if (result && (a2 & 0xFFFF000) == *(_DWORD *)(result + 16) && (a2 & 0xFFFu) < *(_DWORD *)(result + 104))
    *(_QWORD *)(*(_QWORD *)(result + 112) + 16 * (a2 & 0xFFF)) = 0;
  return result;
}

uint64_t APSDispatchSyncTaskCallback(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
  **(_DWORD **)a1 = result;
  return result;
}

uint64_t APSSettingsGetBooleanIfPresent(const __CFString *a1, BOOL *a2)
{
  uint64_t result;
  uint64_t v4;

  v4 = 0;
  result = APSSettingsGetInt64IfPresent(a1, &v4);
  if ((_DWORD)result)
    *a2 = v4 != 0;
  return result;
}

uint64_t APSSettingsGetInt64IfPresent(const __CFString *a1, uint64_t *a2)
{
  const void *v3;
  const void *v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  int v9;

  v9 = 0;
  v3 = APSSettingsCopyValueEx(a1, 0, &v9);
  v4 = v3;
  if (v9)
    v5 = 1;
  else
    v5 = v3 == 0;
  if (v5)
  {
    v7 = 0;
    if (!v3)
      return v7;
  }
  else
  {
    v6 = CFGetInt64();
    if (v9)
    {
      v7 = 0;
    }
    else
    {
      *a2 = v6;
      v7 = 1;
    }
  }
  CFRelease(v4);
  return v7;
}

uint64_t APSEventRecorderRecordEventWithFlags(uint64_t a1, int a2, char a3)
{
  double Current;

  Current = CFAbsoluteTimeGetCurrent();
  return APSEventRecorderRecordEventWithFlagsAtTime(a1, a2, a3, Current);
}

void APSDispatchAsyncFHelper(NSObject *a1, uint64_t a2, const void *a3, size_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;

  if (a1)
  {
    if (a2)
    {
      v8 = malloc_type_malloc(a4 + 16, 0x8F3D1E9EuLL);
      if (v8)
      {
        v9 = v8;
        v10 = v8 + 2;
        if (a3 != 0 && a4 != 0)
          v11 = v10;
        else
          v11 = 0;
        *v9 = v11;
        v9[1] = a2;
        if (a3 != 0 && a4 != 0)
          memcpy(v10, a3, a4);
        dispatch_async_f(a1, v9, (dispatch_function_t)APSDeferredCallback);
      }
    }
  }
}

uint64_t APSDispatchSyncTask(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[3];
  unsigned int v6;

  v6 = 0;
  v5[0] = &v6;
  v5[1] = a3;
  v5[2] = a2;
  v3 = 4294960591;
  if (a1 && a2)
  {
    dispatch_sync_f(a1, v5, (dispatch_function_t)APSDispatchSyncTaskCallback);
    return v6;
  }
  return v3;
}

const void *APSSettingsGetInt64(const __CFString *a1, int *a2)
{
  const void *result;
  const void *v3;
  uint64_t v4;

  result = APSSettingsCopyValueEx(a1, 0, a2);
  if (result)
  {
    v3 = result;
    v4 = CFGetInt64();
    CFRelease(v3);
    return (const void *)v4;
  }
  return result;
}

const void *APSSettingsCopyValueEx(const __CFString *a1, uint64_t a2, int *a3)
{
  const __CFString *v6;
  CFPropertyListRef v7;
  const void *v8;
  int v9;

  if (CFEqual(a1, CFSTR("wirelessdisplay_enable_timestamps_diagnostic")))
    v6 = CFSTR("com.apple.coremedia");
  else
    v6 = CFSTR("com.apple.airplay");
  v7 = CFPreferencesCopyAppValue(a1, v6);
  v8 = v7;
  if (!v7)
  {
    v9 = -6727;
    if (!a3)
      return v8;
    goto LABEL_10;
  }
  if (!a2 || CFGetTypeID(v7) == a2)
  {
    v9 = 0;
    if (!a3)
      return v8;
    goto LABEL_10;
  }
  CFRelease(v8);
  v8 = 0;
  v9 = -6756;
  if (a3)
LABEL_10:
    *a3 = v9;
  return v8;
}

uint64_t APSIsAPMSpeaker()
{
  if (APSIsAPMSpeaker_sCheckOnce != -1)
    dispatch_once(&APSIsAPMSpeaker_sCheckOnce, &__block_literal_global_9);
  return APSIsAPMSpeaker_sIsAPMSpeaker;
}

uint64_t APSIsVirtualMachine()
{
  if (APSIsVirtualMachine_sCheckOnceForVM != -1)
    dispatch_once(&APSIsVirtualMachine_sCheckOnceForVM, &__block_literal_global_233);
  return APSIsVirtualMachine_sIsVirtualMachine;
}

uint64_t APSIsDemoModeEnabled()
{
  if (APSIsDemoModeEnabled_once != -1)
    dispatch_once(&APSIsDemoModeEnabled_once, &__block_literal_global_229);
  return APSIsDemoModeEnabled_enabled;
}

void APSDeferredCallback(void (**a1)(_QWORD))
{
  if (a1)
  {
    a1[1](*a1);
    free(a1);
  }
}

uint64_t APSIsProximitySenderEnabled()
{
  if (APSIsProximitySenderEnabled_sOnce != -1)
    dispatch_once(&APSIsProximitySenderEnabled_sOnce, &__block_literal_global_48_1313);
  return APSIsProximitySenderEnabled_sProximitySenderEnabled;
}

uint64_t APSLogErrorAt(uint64_t result)
{
  if ((_DWORD)result)
  {
    if (gLogCategory_APSLogUtils <= 90)
    {
      if (gLogCategory_APSLogUtils != -1)
        return LogPrintF();
      result = _LogCategory_Initialize();
      if ((_DWORD)result)
        return LogPrintF();
    }
  }
  else if (gLogCategory_APSLogUtils <= 90)
  {
    if (gLogCategory_APSLogUtils != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

void APSRotatingKeyMapperClear(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  FigSimpleMutexDestroy();
  *(_QWORD *)(a1 + 8) = 0;
  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v5 = *(const void **)(a1 + 40);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 40) = 0;
  }
  v6 = *(const void **)(a1 + 48);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 48) = 0;
  }
  *(_BYTE *)a1 = 0;
}

uint64_t APSRegisterReceiverAppLauncher()
{
  const void *Int64;
  BOOL v1;
  char v2;
  uint64_t v3;
  _QWORD handler[5];
  int v6;

  if (launcher_getReceiverLauncherShared_once != -1)
    dispatch_once(&launcher_getReceiverLauncherShared_once, &__block_literal_global);
  pthread_mutex_lock((pthread_mutex_t *)qword_1ED52E210);
  if (dword_1ED52E228 == -1)
  {
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 3221225472;
    handler[2] = __APSRegisterReceiverAppLauncher_block_invoke;
    handler[3] = &__block_descriptor_40_e8_v12__0i8l;
    handler[4] = &launcher_getReceiverLauncherShared_launcher;
    notify_register_dispatch("com.apple.airplay.prefsChanged", &dword_1ED52E228, (dispatch_queue_t)qword_1ED52E208, handler);
  }
  v6 = 0;
  Int64 = APSSettingsGetInt64(CFSTR("alternateSenderListenerEnable"), &v6);
  if (v6)
    v1 = 1;
  else
    v1 = Int64 == 0;
  v2 = !v1;
  byte_1ED52E22D = v2;
  if (gLogCategory_APSReceiverAppLauncher <= 50
    && (gLogCategory_APSReceiverAppLauncher != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v3 = launcher_start((uint64_t)&launcher_getReceiverLauncherShared_launcher);
  pthread_mutex_unlock((pthread_mutex_t *)qword_1ED52E210);
  return v3;
}

uint64_t launcher_start(uint64_t a1)
{
  id v2;
  _QWORD v4[5];
  char v5;

  if (!*(_BYTE *)(a1 + 53) || *(_QWORD *)a1)
    return 0;
  if (gLogCategory_APSReceiverAppLauncher <= 50
    && (gLogCategory_APSReceiverAppLauncher != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = objc_alloc_init(MEMORY[0x1E0C97758]);
  *(_QWORD *)a1 = v2;
  if (v2)
  {
    objc_msgSend(v2, "setDispatchQueue:", *(_QWORD *)(a1 + 16));
    objc_msgSend(*(id *)a1, "setDiscoveryFlags:", objc_msgSend(*(id *)a1, "discoveryFlags") | 0x4000000000);
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 3221225472;
    v4[2] = __launcher_start_block_invoke;
    v4[3] = &__block_descriptor_41_e18_v16__0__CBDevice_8l;
    v5 = 1;
    v4[4] = a1;
    objc_msgSend(*(id *)a1, "setDeviceFoundHandler:", v4);
    objc_msgSend(*(id *)a1, "activateWithCompletion:", &__block_literal_global_31);
    return 0;
  }
  APSLogErrorAt(0);
  if (gLogCategory_APSReceiverAppLauncher <= 90
    && (gLogCategory_APSReceiverAppLauncher != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  launcher_stop((id *)a1);
  return 4294960568;
}

uint64_t __launcher_start_block_invoke(uint64_t a1, void *a2)
{
  uint64_t result;

  result = objc_msgSend(a2, "airplaySourceFlags");
  if ((result & 0x80) == 0)
  {
    result = APSShouldStartAdvertistingForAirPlaySourceBeacon(a2, *(unsigned __int8 *)(a1 + 40), *(_DWORD *)(*(_QWORD *)(a1 + 32) + 8) == 2);
    if ((_DWORD)result)
      return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 32))();
  }
  return result;
}

void launcher_stop(id *a1)
{
  if (*a1)
  {
    if (gLogCategory_APSReceiverAppLauncher <= 50
      && (gLogCategory_APSReceiverAppLauncher != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    objc_msgSend(*a1, "invalidate");

    *a1 = 0;
  }
}

void __launcher_start_block_invoke_2(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (gLogCategory_APSReceiverAppLauncher <= 90
      && (gLogCategory_APSReceiverAppLauncher != -1 || _LogCategory_Initialize()))
    {
LABEL_7:
      LogPrintF();
    }
  }
  else if (gLogCategory_APSReceiverAppLauncher <= 50
         && (gLogCategory_APSReceiverAppLauncher != -1 || _LogCategory_Initialize()))
  {
    goto LABEL_7;
  }
}

uint64_t __launcher_getReceiverLauncherShared_block_invoke()
{
  uint64_t result;
  uint64_t v1;

  qword_1ED52E210 = FigSimpleMutexCreate();
  qword_1ED52E208 = (uint64_t)dispatch_queue_create("APSReceiverAppLauncherQueue", 0);
  dword_1ED52E228 = -1;
  qword_1ED52E218 = (uint64_t)launcher_senderDeviceFound;
  qword_1ED52E220 = (uint64_t)CFSTR("com.apple.airplayreceiver");
  byte_1ED52E22C = 1;
  result = IsAppleInternalBuild();
  if ((_DWORD)result)
  {
    result = (uint64_t)APSSettingsCopyValueEx(CFSTR("alternateSenderListenerAppID"), 0, 0);
    if (result)
    {
      v1 = result;
      result = CFEqual((CFTypeRef)result, (CFTypeRef)qword_1ED52E220);
      if (!(_DWORD)result)
      {
        qword_1ED52E220 = v1;
        byte_1ED52E22C = 0;
      }
    }
  }
  return result;
}

void launcher_senderDeviceFound(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  void *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[6];

  if (*(_BYTE *)(a1 + 53))
  {
    v1 = a1;
    if (gLogCategory_APSReceiverAppLauncher <= 50)
    {
      if (gLogCategory_APSReceiverAppLauncher != -1 || (a1 = _LogCategory_Initialize(), (_DWORD)a1))
        a1 = LogPrintF();
    }
    v2 = *(_QWORD *)(v1 + 40);
    if (v2)
    {
      v3 = *(unsigned __int8 *)(v1 + 52);
      v4 = (void *)MEMORY[0x1CAA430BC](a1);
      if (gLogCategory_APSReceiverAppLauncher <= 50
        && (gLogCategory_APSReceiverAppLauncher != -1 || _LogCategory_Initialize()))
      {
        v11 = v2;
        LogPrintF();
      }
      v5 = dispatch_semaphore_create(0);
      v6 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v7 = v6;
      if (v3)
      {
        objc_msgSend(v6, "setObject:forKey:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D22D00]);
        v8 = objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", CFSTR("airplayreceiver-private://start"));
        objc_msgSend(v7, "setObject:forKey:", v8, *MEMORY[0x1E0D22D78]);
      }
      v9 = (void *)objc_msgSend(MEMORY[0x1E0D23170], "serviceWithDefaultShellEndpoint", v11);
      v10 = objc_msgSend(MEMORY[0x1E0D23158], "optionsWithDictionary:", v7);
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 3221225472;
      v12[2] = __launchReceiverApp_block_invoke;
      v12[3] = &unk_1E82880F8;
      v12[4] = v5;
      v12[5] = v2;
      objc_msgSend(v9, "openApplication:withOptions:completion:", v2, v10, v12);
      dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(v5);
      objc_autoreleasePoolPop(v4);
    }
    else
    {
      APSLogErrorAt(0);
    }
  }
}

intptr_t __launchReceiverApp_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if (gLogCategory_APSReceiverAppLauncher <= 90
      && (gLogCategory_APSReceiverAppLauncher != -1 || _LogCategory_Initialize()))
    {
LABEL_7:
      LogPrintF();
    }
  }
  else if (gLogCategory_APSReceiverAppLauncher <= 50
         && (gLogCategory_APSReceiverAppLauncher != -1 || _LogCategory_Initialize()))
  {
    goto LABEL_7;
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t APSUnregisterReceiverAppLauncher()
{
  if (launcher_getReceiverLauncherShared_once != -1)
    dispatch_once(&launcher_getReceiverLauncherShared_once, &__block_literal_global);
  pthread_mutex_lock((pthread_mutex_t *)qword_1ED52E210);
  if (dword_1ED52E228 != -1)
  {
    notify_cancel(dword_1ED52E228);
    dword_1ED52E228 = -1;
  }
  launcher_stop(launcher_getReceiverLauncherShared_launcher);
  return pthread_mutex_unlock((pthread_mutex_t *)qword_1ED52E210);
}

char *APSPacketLossConcealerSaveData(char *__dst, char *a2, size_t a3)
{
  char *v3;
  unint64_t v4;
  size_t v5;
  char *v6;
  char *v7;

  if (__dst && a2 && a3)
  {
    v3 = __dst;
    __dst = (char *)*((_QWORD *)__dst + 2048);
    v4 = v3 - __dst + 0x4000;
    v5 = a3 - v4;
    if (a3 <= v4)
    {
      v6 = 0;
      v7 = 0;
      v5 = 0;
      *((_QWORD *)v3 + 2048) = &__dst[a3];
      *((_QWORD *)v3 + 2049) = &__dst[a3];
    }
    else
    {
      v6 = &a2[v4];
      *((_QWORD *)v3 + 2048) = &v3[v5];
      *((_QWORD *)v3 + 2049) = &v3[v5];
      v7 = v3;
      a3 = v3 - __dst + 0x4000;
      if (v3 - __dst == -16384)
      {
        if (!v5)
        {
LABEL_8:
          *((_DWORD *)v3 + 4103) = 0;
          return __dst;
        }
LABEL_7:
        __dst = (char *)memcpy(v7, v6, v5);
        goto LABEL_8;
      }
    }
    __dst = (char *)memcpy(__dst, a2, a3);
    if (!v5)
      goto LABEL_8;
    goto LABEL_7;
  }
  return __dst;
}

void APSPacketLossConcealerReset(_QWORD *a1, int a2, char a3, char a4)
{
  _QWORD *v8;

  if (a1)
  {
    v8 = a1 + 2050;
    bzero(a1, 0x4000uLL);
    a1[2048] = a1;
    a1[2049] = a1;
    *(_BYTE *)v8 = a4;
    *((_BYTE *)v8 + 8) = a3;
    *((_DWORD *)v8 + 1) = a2;
  }
}

uint64_t APSPacketLossConcealerConceal(char *__src, size_t __n, int a3, char *__dst)
{
  uint64_t result;
  char *v6;
  int64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  size_t v12;
  char *v13;
  _BYTE *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  char *v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;

  result = 0;
  if (__n)
  {
    if (__src)
    {
      v6 = __dst;
      if (__dst)
      {
        v7 = __n;
        v8 = __src + 0x3FFF;
        switch(a3)
        {
          case 0:
          case 3:
            v9 = *((_QWORD *)__src + 2048);
            v10 = (_BYTE *)(v9 - __n);
            if (v9 - v7 >= (unint64_t)__src)
            {
              v13 = 0;
              __src = 0;
              v12 = 0;
              v11 = (char *)v7;
            }
            else
            {
              v11 = (char *)(__src - v10);
              v12 = v9 - (_QWORD)__src;
              v13 = &__dst[__src - v10];
              if (__src == v10)
                goto LABEL_19;
              v10 += 0x4000;
            }
            memcpy(__dst, v10, (size_t)v11);
LABEL_19:
            if (v12)
              memcpy(v13, __src, v12);
            v19 = v8[17];
            if ((v19 - 40) >= 0xFFFFFFE0 && v7 >= 1)
            {
              v20 = v19 >> 3;
              v21 = *(_DWORD *)(v8 + 21) * v8[25];
              v22 = &v6[v7];
              v23 = v21 / 0x3E8;
              while (2)
              {
                v24 = *(_DWORD *)(v8 + 29);
                if (v24 + 1 < v21)
                  v25 = v24 + 1;
                else
                  v25 = v21;
                *(_DWORD *)(v8 + 29) = v25;
                v26 = 20 * (255 * v25 / v21);
                if (v26 >= 0xFF)
                  v26 = 255;
                v27 = v26 ^ 0xFF;
                switch((int)v20)
                {
                  case 1:
                    if (v25 >= v23)
                    {
                      v32 = *v6 * v27 + ((-32639 * (__int16)(*v6 * (_WORD)v27)) >> 16);
                      v28 = ((__int16)v32 >> 7) + ((unsigned __int16)(v32 & 0x8000) >> 15);
                    }
                    else
                    {
                      LOBYTE(v28) = 0;
                    }
                    *v6 = v28;
                    goto LABEL_46;
                  case 2:
                    if (v25 >= v23)
                    {
                      v33 = (unint64_t)(2155905153 * v27 * *(__int16 *)v6) >> 32;
                      v29 = (v33 >> 7) + (v33 >> 31);
                    }
                    else
                    {
                      LOWORD(v29) = 0;
                    }
                    *(_WORD *)v6 = v29;
                    goto LABEL_46;
                  case 3:
                    if (v25 >= v23)
                      v30 = (*(_DWORD *)v6 & 0xFFFFFFu) * v27 / 0xFF;
                    else
                      v30 = 0;
                    *(_WORD *)v6 = v30;
                    v6[2] = BYTE2(v30);
                    goto LABEL_46;
                  case 4:
                    if (v25 >= v23)
                      v31 = *(_DWORD *)v6 * v27 / 255;
                    else
                      v31 = 0;
                    *(_DWORD *)v6 = v31;
LABEL_46:
                    v6 += v20;
                    if (v6 >= v22)
                      return 3;
                    continue;
                  default:
                    return 3;
                }
              }
            }
            return 3;
          case 2:
            v14 = (_BYTE *)*((_QWORD *)__src + 2049);
            v15 = (char *)(__src - v14 + 0x4000);
            v16 = v7 - (_QWORD)v15;
            if (v7 <= (unint64_t)v15)
            {
              v17 = 0;
              v16 = 0;
              *((_QWORD *)__src + 2049) = &v14[v7];
              __src = 0;
            }
            else
            {
              v17 = &v15[(_QWORD)__dst];
              *((_QWORD *)__src + 2049) = &__src[v16];
              v7 = __src - v14 + 0x4000;
              if (__src - v14 == -16384)
                goto LABEL_50;
            }
            memcpy(__dst, v14, v7);
LABEL_50:
            if (v16)
              memcpy(v17, __src, v16);
            result = 2;
            break;
          case 4:
            v18 = (char *)*((_QWORD *)__src + 2049);
            do
            {
              *v6++ = *v18;
              v18 = (char *)(*((_QWORD *)__src + 2049) - 1);
              if (v18 < __src)
                v18 = __src + 0x3FFF;
              *((_QWORD *)__src + 2049) = v18;
              --v7;
            }
            while (v7);
            return 4;
          default:
            bzero(__dst, __n);
            return 1;
        }
      }
    }
  }
  return result;
}

uint64_t APSVideoFormatDescriptionCopyAsBlockBuffer(const opaqueCMFormatDescription *a1, CMBlockBufferRef *a2)
{
  const __CFAllocator *v4;
  CFStringEncoding SystemEncoding;

  if (useLegacySerialization_onceToken != -1)
    dispatch_once(&useLegacySerialization_onceToken, &__block_literal_global_15);
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (useLegacySerialization_useLegacy)
    return FigRemote_CreateSerializedAtomDataBlockBufferForFormatDescription();
  SystemEncoding = CFStringGetSystemEncoding();
  return CMVideoFormatDescriptionCopyAsBigEndianImageDescriptionBlockBuffer(v4, a1, SystemEncoding, 0, a2);
}

uint64_t __useLegacySerialization_block_invoke()
{
  uint64_t result;

  result = APSSettingsGetIntWithOverrideAndDefault(CFSTR("useLegacyFormatDescriptionSerialization"), 0, 0);
  useLegacySerialization_useLegacy = (_DWORD)result != 0;
  return result;
}

uint64_t APSVideoFormatDescriptionCreateFromBlockBuffer(OpaqueCMBlockBuffer *a1, CMVideoFormatDescriptionRef *a2)
{
  const __CFAllocator *v4;
  CFStringEncoding SystemEncoding;

  if (useLegacySerialization_onceToken != -1)
    dispatch_once(&useLegacySerialization_onceToken, &__block_literal_global_15);
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (useLegacySerialization_useLegacy)
    return FigRemote_CreateFormatDescriptionFromSerializedAtomDataBlockBuffer();
  SystemEncoding = CFStringGetSystemEncoding();
  return CMVideoFormatDescriptionCreateFromBigEndianImageDescriptionBlockBuffer(v4, a1, SystemEncoding, 0, a2);
}

uint64_t APSWirelessCoexManagerGetClassID()
{
  if (APSWirelessCoexManagerGetClassID_sAPSWirelessCoexManagerClassIDOnce != -1)
    dispatch_once_f(&APSWirelessCoexManagerGetClassID_sAPSWirelessCoexManagerClassIDOnce, &APSWirelessCoexManagerGetClassID_sAPSWirelessCoexManagerClassID, (dispatch_function_t)coexManager_RegisterClass);
  return APSWirelessCoexManagerGetClassID_sAPSWirelessCoexManagerClassID;
}

uint64_t coexManager_RegisterClass()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFStringRef coexManager_CopyFormattingDescription(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<APSWirelessCoexManager %p>"), a1);
}

uint64_t APSWirelessCoexManagerGetTypeID()
{
  if (APSWirelessCoexManagerGetClassID_sAPSWirelessCoexManagerClassIDOnce != -1)
    dispatch_once_f(&APSWirelessCoexManagerGetClassID_sAPSWirelessCoexManagerClassIDOnce, &APSWirelessCoexManagerGetClassID_sAPSWirelessCoexManagerClassID, (dispatch_function_t)coexManager_RegisterClass);
  return CMBaseClassGetCFTypeID();
}

uint64_t APSWirelessCoexManagerCreateWithOptions(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t DerivedStorage;
  char *v7;
  uint64_t v8;
  char __source[2];
  void *value;
  CFTypeRef cf;

  value = 0;
  cf = 0;
  strcpy(__source, " ");
  if (!FigGetCFPreferenceNumberWithDefault())
    return 0;
  if (APSWirelessCoexManagerGetClassID_sAPSWirelessCoexManagerClassIDOnce != -1)
    dispatch_once_f(&APSWirelessCoexManagerGetClassID_sAPSWirelessCoexManagerClassIDOnce, &APSWirelessCoexManagerGetClassID_sAPSWirelessCoexManagerClassID, (dispatch_function_t)coexManager_RegisterClass);
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
  {
    v8 = v5;
    APSLogErrorAt(v5);
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_BYTE *)(DerivedStorage + 8) = 0;
    v7 = (char *)(DerivedStorage + 8);
    if (a2)
    {
      if (CFDictionaryGetValueIfPresent(a2, CFSTR("loggingID"), (const void **)&value))
      {
        CFStringGetCString((CFStringRef)value, v7, 10, 0x600u);
        strlcat(v7, __source, 0xAuLL);
        if (gLogCategory_APSWirelessCoexManager <= 30
          && (gLogCategory_APSWirelessCoexManager != -1 || _LogCategory_Initialize()))
        {
          if (cf)
            CMBaseObjectGetDerivedStorage();
          LogPrintF();
        }
      }
    }
    *(_DWORD *)(DerivedStorage + 4) = FigGetCFPreferenceNumberWithDefault();
    if (gLogCategory_APSWirelessCoexManager <= 50
      && (gLogCategory_APSWirelessCoexManager != -1 || _LogCategory_Initialize()))
    {
      if (cf)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
    v8 = 0;
    *a3 = cf;
  }
  return v8;
}

uint64_t coexManager_Finalize(uint64_t result)
{
  uint64_t v1;

  if (gLogCategory_APSWirelessCoexManager <= 50)
  {
    v1 = result;
    if (gLogCategory_APSWirelessCoexManager != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
    {
      if (v1)
        CMBaseObjectGetDerivedStorage();
      return LogPrintF();
    }
  }
  return result;
}

CFStringRef coexManager_CopyDebugDescription(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<APSWirelessCoexManager %p>"), a1);
}

uint64_t APSWirelessCoexManagerNotifyCriticalBuffering(uint64_t a1, int a2)
{
  _BYTE *DerivedStorage;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage != a2)
  {
    *DerivedStorage = a2;
    if (gLogCategory_APSWirelessCoexManager <= 50
      && (gLogCategory_APSWirelessCoexManager != -1 || _LogCategory_Initialize()))
    {
      if (a1)
        CMBaseObjectGetDerivedStorage();
      LogPrintF();
    }
  }
  return 0;
}

uint64_t APSRealTimeReadableRingBufferGetTypeID()
{
  if (gAPSRealTimeReadableRingBufferInitOnce != -1)
    dispatch_once_f(&gAPSRealTimeReadableRingBufferInitOnce, 0, (dispatch_function_t)_APSRealTimeReadableRingBufferGetTypeID);
  return gAPSRealTimeReadableRingBufferTypeID;
}

uint64_t _APSRealTimeReadableRingBufferGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSRealTimeReadableRingBufferTypeID = result;
  return result;
}

void _APSRealTimeReadableRingBufferFinalize(_QWORD *a1)
{
  void *v2;
  unint64_t v3;
  unsigned __int128 *v4;
  unsigned __int128 v5;
  void (*v6)(void);

  v2 = (void *)a1[10];
  if (v2)
  {
    if (a1[2])
    {
      v3 = 0;
      do
      {
        v4 = (unsigned __int128 *)(a1[10] + 16 * v3);
        do
          v5 = __ldaxp(v4);
        while (__stxp(v5, v4));
        if ((BYTE8(v5) & 3) != 0)
        {
          v6 = (void (*)(void))a1[4];
          if (v6)
            v6();
        }
        ++v3;
      }
      while (v3 < a1[2]);
      v2 = (void *)a1[10];
    }
    free(v2);
  }
}

uint64_t APSRealTimeReadableRingBufferCreate(size_t a1, size_t a2, size_t a3, CFTypeRef *a4)
{
  uint64_t v4;
  _OWORD *Instance;
  _QWORD *v10;
  size_t *v11;
  unsigned __int128 *v12;
  void *v13;
  size_t v14;
  unsigned __int128 *v15;

  v4 = 4294960591;
  if (a1 && a4)
  {
    if (gAPSRealTimeReadableRingBufferInitOnce != -1)
      dispatch_once_f(&gAPSRealTimeReadableRingBufferInitOnce, 0, (dispatch_function_t)_APSRealTimeReadableRingBufferGetTypeID);
    Instance = (_OWORD *)_CFRuntimeCreateInstance();
    if (Instance)
    {
      v10 = Instance;
      Instance[1] = 0u;
      v11 = (size_t *)(Instance + 1);
      Instance[4] = 0u;
      Instance[5] = 0u;
      Instance[2] = 0u;
      Instance[3] = 0u;
      v12 = Instance + 3;
      RandomBytes();
      *v11 = a1;
      v11[1] = a2;
      v11[2] = a3;
      do
        __ldaxp(v12);
      while (__stlxp(0, v12));
      v10[8] = 0;
      v10[9] = 0;
      v13 = malloc_type_calloc(a1, 0x10uLL, 0x1000040451B5BE8uLL);
      v10[10] = v13;
      if (v13)
      {
        if (*v11)
        {
          v14 = 0;
          do
          {
            v15 = (unsigned __int128 *)(v10[10] + 16 * v14);
            do
              __ldaxp(v15);
            while (__stlxp(0, v15));
            ++v14;
          }
          while (v14 < *v11);
        }
        v4 = 0;
        *a4 = CFRetain(v10);
      }
      else
      {
        v4 = 4294960568;
      }
      CFRelease(v10);
    }
    else
    {
      return 4294960568;
    }
  }
  return v4;
}

uint64_t APSRealTimeReadableRingBufferRead(_QWORD *a1, void (*a2)(uint64_t, uint64_t, unint64_t), uint64_t a3)
{
  uint64_t result;
  unsigned __int128 *v5;
  unint64_t v6;
  unsigned __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int128 *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int128 *v19;
  unsigned __int128 v20;
  unsigned __int128 *v21;
  unsigned __int128 v22;
  int v23;
  unsigned __int128 *v25;
  unint64_t v26;
  uint64_t v27;

  result = 4294960591;
  if (a1 && a2)
  {
    v5 = (unsigned __int128 *)(a1 + 6);
    do
    {
      v7 = __ldxp(v5);
      v6 = *((_QWORD *)&v7 + 1);
    }
    while (__stxp(v7, v5));
    v8 = (v7 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v9 = a1[8];
    if (v9 == v8 && (v10 = a1[9], v10 >= *((_QWORD *)&v7 + 1))
      || v9 == (_QWORD)v7 && (v10 = a1[9], v10 < *((_QWORD *)&v7 + 1)))
    {
      v8 = a1[8];
      v6 = v10;
    }
    v11 = (unsigned __int128 *)(a1[10] + 16 * v6);
    do
    {
      v14 = __ldxp(v11);
      v12 = *((_QWORD *)&v14 + 1);
      v13 = v14;
    }
    while (__stxp(v14, v11));
    do
    {
      if (v8 == v12 >> 2)
      {
        v15 = v13;
        v16 = v12;
      }
      else
      {
        v17 = a1[2];
        v18 = a1[10];
        do
        {
          v6 = (v6 + 1) % v17;
          if (!v6)
            v8 = (v8 + 1) & 0x3FFFFFFFFFFFFFFFLL;
          v19 = (unsigned __int128 *)(v18 + 16 * v6);
          do
          {
            v20 = __ldxp(v19);
            v16 = *((_QWORD *)&v20 + 1);
            v15 = v20;
          }
          while (__stxp(v20, v19));
        }
        while (v8 != *((_QWORD *)&v20 + 1) >> 2);
      }
      if ((v16 & 3) != 1)
      {
        a2(a3, 0, 0);
        return 0;
      }
      v21 = (unsigned __int128 *)(a1[10] + 16 * v6);
      do
      {
        while (1)
        {
          v22 = __ldaxp(v21);
          v12 = *((_QWORD *)&v22 + 1);
          v13 = v22;
          v23 = (_QWORD)v22 != v15;
          if (*((_QWORD *)&v22 + 1) != v16)
            ++v23;
          if (!v23)
            break;
          if (!__stxp(v22, v21))
            goto LABEL_28;
        }
      }
      while (__stxp(__PAIR128__(v16 & 0xFFFFFFFFFFFFFFFCLL | 2, v15), v21));
LABEL_28:
      ;
    }
    while (*((_QWORD *)&v22 + 1) != v16 || (_QWORD)v22 != v15);
    a2(a3, 1, v15);
    v25 = (unsigned __int128 *)(a1[10] + 16 * v6);
    do
      __ldxp(v25);
    while (__stxp(__PAIR128__(v16 | 3, v15), v25));
    result = 0;
    v26 = (v6 + 1) % a1[2];
    v27 = (v8 + 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v26)
      v27 = v8;
    a1[8] = v27;
    a1[9] = v26;
  }
  return result;
}

uint64_t APSRealTimeReadableRingBufferReadWithBlock(_QWORD *a1, uint64_t a2)
{
  if (a1 && a2)
    return APSRealTimeReadableRingBufferRead(a1, (void (*)(uint64_t, uint64_t, unint64_t))rtRing_invokeBlock, a2);
  else
    return 4294960591;
}

uint64_t rtRing_invokeBlock(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t APSRealTimeReadableRingBufferWrite(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned __int128 *v5;
  unsigned __int128 v6;
  uint64_t (*v7)(uint64_t);
  unsigned __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int128 v11;
  uint64_t v12;
  unsigned __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int128 v16;
  unsigned __int128 *v17;
  unsigned __int128 v18;
  int v19;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(void);

  result = 4294960591;
  if (a1)
  {
    v4 = a2;
    if (a2)
    {
      v5 = (unsigned __int128 *)(a1 + 6);
      do
        v6 = __ldxp(v5);
      while (__stxp(v6, v5));
      v7 = (uint64_t (*)(uint64_t))a1[3];
      if (v7)
        v4 = v7(a2);
      v8 = (unsigned __int128 *)(a1[10] + 16 * *((_QWORD *)&v6 + 1));
      do
      {
        v11 = __ldxp(v8);
        v9 = *((_QWORD *)&v11 + 1);
        v10 = v11;
      }
      while (__stxp(v11, v8));
      do
      {
        if ((v9 & 3) == 2)
        {
          do
          {
            pthread_yield_np();
            v12 = a1[10];
            v13 = (unsigned __int128 *)(v12 + 16 * *((_QWORD *)&v6 + 1));
            do
            {
              v16 = __ldxp(v13);
              v15 = *((_QWORD *)&v16 + 1);
              v14 = v16;
            }
            while (__stxp(v16, v13));
          }
          while ((BYTE8(v16) & 3) == 2);
        }
        else
        {
          v12 = a1[10];
          v14 = v10;
          v15 = v9;
        }
        v17 = (unsigned __int128 *)(v12 + 16 * *((_QWORD *)&v6 + 1));
        do
        {
          while (1)
          {
            v18 = __ldxp(v17);
            v9 = *((_QWORD *)&v18 + 1);
            v10 = v18;
            v19 = (_QWORD)v18 != v14;
            if (*((_QWORD *)&v18 + 1) != v15)
              ++v19;
            if (!v19)
              break;
            if (!__stlxp(v18, v17))
              goto LABEL_22;
          }
        }
        while (__stlxp(__PAIR128__((4 * v6) | 1, v4), v17));
LABEL_22:
        ;
      }
      while (*((_QWORD *)&v18 + 1) != v15 || (_QWORD)v18 != v14);
      v21 = (unint64_t)(*((_QWORD *)&v6 + 1) + 1) % a1[2];
      v22 = (v6 + 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v21)
        v22 = v6;
      do
        __ldxp(v5);
      while (__stxp(__PAIR128__(v21, v22), v5));
      if ((v15 & 3) != 0)
      {
        v23 = (void (*)(void))a1[4];
        if (v23)
          v23();
      }
      return 0;
    }
  }
  return result;
}

uint64_t APSRTPPacketProcessorProcessPacket(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, char *), unsigned int (*a8)(uint64_t), uint64_t a9)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, unint64_t *, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, unint64_t *);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, unint64_t *, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, unint64_t *);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  int v30;
  size_t v31;
  uint64_t **v32;
  char v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  char v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;

  if (a2 <= 0xB)
  {
    APSLogErrorAt(0);
    if (gLogCategory_APSReceiverAudioSessionRealtimePacketProcessor <= 10
      && (gLogCategory_APSReceiverAudioSessionRealtimePacketProcessor != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 4294960553;
  }
  v11 = a1;
  v12 = a2 - 12;
  v13 = *(_QWORD *)(a1 + 24);
  *(_WORD *)(v13 + 2) = bswap32(*(unsigned __int16 *)(v13 + 2)) >> 16;
  *(int8x8_t *)(v13 + 4) = vrev32_s8(*(int8x8_t *)(v13 + 4));
  if ((*(_BYTE *)(v13 + 1) & 0x7F) == 0x61)
  {
    v55 = 0;
    v56 = a2 - 12;
    v54 = 0;
    v53 = 1;
    if ((_DWORD)a3)
      *(_DWORD *)(a1 + 36) |= 1u;
    v14 = 0;
    v15 = 0;
    while (*(char *)(v13 + v14 + 12) < 0)
    {
      v14 += 4;
      ++v15;
      if (v14 > v12)
        goto LABEL_65;
    }
    v20 = v14 | 1;
    if ((v14 | 1) > v12)
      goto LABEL_65;
    v21 = a7(a1, a3, v15, a9, &v53);
    if ((_DWORD)v21)
    {
      v46 = v21;
      goto LABEL_57;
    }
    if (!v53)
      goto LABEL_28;
    v22 = a6;
    if (a5)
    {
      v54 = bswap64(*(unsigned int *)(v13 + 8) | ((unint64_t)*(unsigned int *)(v13 + 4) << 32));
      v23 = *(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v23)
      {
        v24 = v23(a5, &v54, 8, v13 + v20 + 12, a2 - v14 - 13, v13 + v20 + 12, a2 - v14 - 13, &v56);
        if (!(_DWORD)v24)
        {
          v25 = v56;
          v22 = a6;
LABEL_30:
          *(_QWORD *)v11 = v13;
          *(_QWORD *)(v11 + 8) = v13 + v20 + 12;
          *(_QWORD *)(v11 + 16) = v25;
          *(_DWORD *)(v11 + 32) = *(_DWORD *)(v13 + 4);
          if (v15)
          {
            v26 = 0;
            v27 = v15;
            v28 = v14 | 1;
            v49 = v14 | 1;
            while (1)
            {
              v29 = (_BYTE *)(*(_QWORD *)v11 + v26);
              v30 = v29[14];
              v31 = v29[15] | ((v30 & 3) << 8);
              if (v28 + v31 > v56 + v20)
                break;
              v32 = (uint64_t **)v11;
              v33 = v29[12];
              v34 = v29[13];
              v21 = APSRTPPassThroughJitterBufferAcquireRelinquishedNode(v22, &v55);
              if ((_DWORD)v21)
              {
                v46 = v21;
                goto LABEL_57;
              }
              v35 = (v34 << 16) | (v30 << 8);
              v36 = v55;
              v37 = v35 >> 10;
              *(_DWORD *)(v55 + 36) |= 2u;
              *(_DWORD *)(v36 + 40) = (v35 >> 10) / a4;
              if (gLogCategory_APSReceiverAudioSessionRealtimePacketProcessor <= 30)
              {
                if (gLogCategory_APSReceiverAudioSessionRealtimePacketProcessor != -1
                  || (v38 = _LogCategory_Initialize(), v36 = v55, v38))
                {
                  LogPrintF();
                  v36 = v55;
                }
              }
              v39 = *(_QWORD *)(v36 + 24);
              v40 = *((_DWORD *)*v32 + 2);
              v41 = **v32;
              *(_QWORD *)v39 = v41;
              *(_BYTE *)(v39 + 1) = BYTE1(v41) & 0x80 | v33 & 0x7F;
              v42 = *(_DWORD *)(v39 + 4) - v37;
              *(_DWORD *)(v39 + 4) = v42;
              *(_DWORD *)(v39 + 8) = v40;
              memcpy((void *)(v39 + 12), (char *)*v32 + v28 + 12, v31);
              *(_QWORD *)v36 = v39;
              v43 = v55;
              *(_QWORD *)(v55 + 8) = v39 + 12;
              *(_QWORD *)(v43 + 16) = v31;
              *(_DWORD *)(v43 + 32) = v42;
              v22 = a6;
              if (a8(a6))
              {
                APSRTPPassThroughJitterBufferRelinquishNode(a6, v55);
                v11 = (uint64_t)v32;
                v20 = v49;
              }
              else
              {
                v11 = (uint64_t)v32;
                v20 = v49;
                if (gLogCategory_APSReceiverAudioSessionRealtimePacketProcessor <= 10
                  && (gLogCategory_APSReceiverAudioSessionRealtimePacketProcessor != -1
                   || _LogCategory_Initialize()))
                {
                  LogPrintF();
                }
              }
              v26 += 4;
              --v27;
              v28 += v31;
              if (!v27)
              {
                v13 = *(_QWORD *)v11;
                v25 = v56;
                goto LABEL_48;
              }
            }
LABEL_65:
            APSLogErrorAt(0);
            v46 = 4294960553;
            goto LABEL_58;
          }
          v28 = v14 | 1;
LABEL_48:
          v44 = *(_QWORD *)(v11 + 24);
          *(_BYTE *)(v44 + 1) = *(_BYTE *)(v44 + 1) & 0x80 | *(_BYTE *)(v13 + 4 * v15 + 12) & 0x7F;
          v45 = v20 - v28 + v25;
          *(_QWORD *)(v11 + 8) = v44 + 12;
          *(_QWORD *)(v11 + 16) = v45;
          memmove((void *)(v44 + 12), (const void *)(v44 + 12 + v28), v45);
          v21 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a8)(v22, v11, a9);
          if (!(_DWORD)v21)
          {
            if (gLogCategory_APSReceiverAudioSessionRealtimePacketProcessor > 10
              || gLogCategory_APSReceiverAudioSessionRealtimePacketProcessor == -1
              && !_LogCategory_Initialize())
            {
              return 0;
            }
            goto LABEL_51;
          }
          v46 = v21;
LABEL_57:
          APSLogErrorAt(v21);
LABEL_58:
          v47 = v46;
          goto LABEL_59;
        }
        v46 = v24;
      }
      else
      {
        v46 = 4294954514;
      }
      v21 = v46;
      goto LABEL_57;
    }
    v25 = a2 - v14 - 13;
    v56 = v25;
    goto LABEL_30;
  }
  v55 = a2 - 12;
  v56 = 0;
  LOBYTE(v54) = 1;
  if ((_DWORD)a3)
    *(_DWORD *)(a1 + 36) |= 1u;
  v16 = a7(a1, a3, 0, a9, (char *)&v54);
  if ((_DWORD)v16)
  {
    v46 = v16;
  }
  else
  {
    if (!(_BYTE)v54)
    {
LABEL_28:
      APSRTPPassThroughJitterBufferRelinquishNode(a6, v11);
      return 0;
    }
    v17 = a6;
    if (!a5)
      goto LABEL_17;
    v56 = bswap64(*(unsigned int *)(v13 + 8) | ((unint64_t)*(unsigned int *)(v13 + 4) << 32));
    v18 = *(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v18)
    {
      v19 = v18(a5, &v56, 8, v13 + 12, a2 - 12, v13 + 12, a2 - 12, &v55);
      if (!(_DWORD)v19)
      {
        v12 = v55;
        v17 = a6;
LABEL_17:
        *(_QWORD *)v11 = v13;
        *(_QWORD *)(v11 + 8) = v13 + 12;
        *(_QWORD *)(v11 + 16) = v12;
        *(_DWORD *)(v11 + 32) = *(_DWORD *)(v13 + 4);
        v16 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a8)(v17, v11, a9);
        if (!(_DWORD)v16)
        {
          if (gLogCategory_APSReceiverAudioSessionRealtimePacketProcessor > 10
            || gLogCategory_APSReceiverAudioSessionRealtimePacketProcessor == -1
            && !_LogCategory_Initialize())
          {
            return 0;
          }
LABEL_51:
          LogPrintF();
          return 0;
        }
        v46 = v16;
        goto LABEL_54;
      }
      v46 = v19;
    }
    else
    {
      v46 = 4294954514;
    }
    v16 = v46;
  }
LABEL_54:
  APSLogErrorAt(v16);
  v47 = v46;
LABEL_59:
  APSLogErrorAt(v47);
  return v46;
}

uint64_t APSAtomicMessageQueueCreate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t Instance;
  uint64_t v6;
  uint64_t result;

  if (a2 && a3)
  {
    if (APSAtomicMessageQueueGetTypeID::sRegisterAPSAtomicMessageQueueOnce != -1)
      dispatch_once_f(&APSAtomicMessageQueueGetTypeID::sRegisterAPSAtomicMessageQueueOnce, 0, (dispatch_function_t)registerAPSAtomicMessageQueue);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v6 = Instance;
      result = 0;
      *(_QWORD *)(v6 + 24) = a2;
      *a3 = v6;
    }
    else
    {
      APSLogErrorAt(0);
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  return result;
}

uint64_t registerAPSAtomicMessageQueue(void *a1)
{
  uint64_t result;

  sAPSAtomicMessageQueueClass = 0;
  unk_1ED52E4E0 = "APSAtomicMessageQueue";
  qword_1ED52E4E8 = (uint64_t)APSAtomicMessageQueueInit;
  unk_1ED52E4F0 = 0;
  qword_1ED52E4F8 = (uint64_t)APSAtomicMessageQueueFinalize;
  unk_1ED52E500 = 0;
  qword_1ED52E508 = 0;
  unk_1ED52E510 = 0;
  qword_1ED52E518 = (uint64_t)APSAtomicMessageQueueCopyDebugDesc;
  result = _CFRuntimeRegisterClass();
  sAPSAtomicMessageQueueID = result;
  return result;
}

uint64_t APSAtomicMessageQueueInit(_QWORD *a1)
{
  uint64_t result;

  a1[12] = 0;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  result = MEMORY[0x1CAA42B10]();
  if (*MEMORY[0x1E0DDB4F0])
  {
    a1[2] = *MEMORY[0x1E0DDB4F0];
    a1[4] = 0;
    a1[12] = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t APSAtomicMessageQueueFinalize(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;

  v1 = result;
  v2 = (unint64_t *)(result + 32);
  while (1)
  {
    v3 = *(unint64_t **)(v1 + 96);
    if (v3)
      goto LABEL_8;
    do
      v4 = (unint64_t *)__ldaxr(v2);
    while (__stxr(0, v2));
    if (!v4)
      return result;
    v3 = 0;
    do
    {
      v5 = (unint64_t)v3;
      v3 = v4;
      v4 = (unint64_t *)atomic_load(v4);
      atomic_store(v5, v3);
    }
    while (v4);
    *(_QWORD *)(v1 + 96) = v3;
LABEL_8:
    v6 = atomic_load(v3);
    *(_QWORD *)(v1 + 96) = v6;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 16) + 24))(*(_QWORD *)(v1 + 16));
  }
}

__CFString *APSAtomicMessageQueueCopyDebugDesc(const void *a1)
{
  const __CFAllocator *v1;
  __CFString *Mutable;

  v1 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v1, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("APSAtomicMessageQueue"));
  return Mutable;
}

uint64_t APSAtomicMessageQueueGetTypeID()
{
  if (APSAtomicMessageQueueGetTypeID::sRegisterAPSAtomicMessageQueueOnce != -1)
    dispatch_once_f(&APSAtomicMessageQueueGetTypeID::sRegisterAPSAtomicMessageQueueOnce, 0, (dispatch_function_t)registerAPSAtomicMessageQueue);
  return sAPSAtomicMessageQueueID;
}

uint64_t APSAtomicMessageQueueSendMessage(uint64_t a1, const void *a2)
{
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;

  v4 = (unint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24) + 16, 8);
  *v4 = 0;
  v4[1] = (unint64_t)(v4 + 2);
  memcpy(v4 + 2, a2, *(_QWORD *)(a1 + 24));
  v5 = (unint64_t *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 32);
  atomic_store(v6, v4);
  v7 = __ldaxr((unint64_t *)(a1 + 32));
  if (v7 != v6)
  {
    __clrex();
LABEL_5:
    while (1)
    {
      atomic_store(v7, v4);
      v8 = __ldaxr(v5);
      if (v8 != v7)
        break;
      if (__stlxr((unint64_t)v4, v5))
        goto LABEL_9;
      v9 = 1;
LABEL_10:
      v7 = v8;
      if (v9)
        return 1;
    }
    __clrex();
LABEL_9:
    v9 = 0;
    goto LABEL_10;
  }
  if (__stlxr((unint64_t)v4, v5))
    goto LABEL_5;
  return 1;
}

uint64_t APSAtomicMessageQueueReadMessage(uint64_t a1, void *__dst)
{
  unint64_t *v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;

  v3 = *(unint64_t **)(a1 + 96);
  if (v3)
    goto LABEL_8;
  v4 = (unint64_t *)(a1 + 32);
  do
    v5 = (unint64_t *)__ldaxr(v4);
  while (__stxr(0, v4));
  if (v5)
  {
    v3 = 0;
    do
    {
      v6 = (unint64_t)v3;
      v3 = v5;
      v5 = (unint64_t *)atomic_load(v5);
      atomic_store(v6, v3);
    }
    while (v5);
    *(_QWORD *)(a1 + 96) = v3;
LABEL_8:
    v7 = atomic_load(v3);
    *(_QWORD *)(a1 + 96) = v7;
    memcpy(__dst, (const void *)v3[1], *(_QWORD *)(a1 + 24));
    (*(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), v3, *(_QWORD *)(a1 + 24) + 16, 8);
    return 1;
  }
  return 0;
}

uint64_t APSRingBufferGetTypeID()
{
  if (gAPSRingBufferInitOnce != -1)
    dispatch_once_f(&gAPSRingBufferInitOnce, 0, (dispatch_function_t)_APSRingBufferGetTypeID);
  return gAPSRingBufferTypeID;
}

uint64_t _APSRingBufferGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSRingBufferTypeID = result;
  return result;
}

uint64_t _APSRingBufferFinalize()
{
  uint64_t result;

  result = MirroredRingBufferFree();
  if (gLogCategory_APSRingBuffer <= 50)
  {
    if (gLogCategory_APSRingBuffer != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

uint64_t APSRingBufferCreate(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t Instance;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a3)
  {
    if (gAPSRingBufferInitOnce != -1)
      dispatch_once_f(&gAPSRingBufferInitOnce, 0, (dispatch_function_t)_APSRingBufferGetTypeID);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v6 = (_BYTE *)Instance;
      *(_OWORD *)(Instance + 16) = 0u;
      v7 = Instance + 16;
      *(_QWORD *)(v7 + 32) = 0;
      *(_OWORD *)(v7 + 16) = 0u;
      v8 = MirroredRingBufferInit();
      if ((_DWORD)v8)
      {
        v9 = v8;
        APSLogErrorAt(v8);
        CFRelease(v6);
      }
      else
      {
        v6[48] = a2;
        if (gLogCategory_APSRingBuffer <= 50
          && (gLogCategory_APSRingBuffer != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v9 = 0;
        *a3 = v6;
      }
    }
    else
    {
      APSLogErrorAt(0);
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  return v9;
}

uint64_t APSRingBufferEnqueueBytes(uint64_t a1, size_t __n, void *__src)
{
  int v3;
  size_t v5;
  unsigned int v6;
  int v7;
  size_t v8;
  uint64_t result;

  if (!a1 || !__src)
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  v3 = __n;
  if (!*(_BYTE *)(a1 + 48))
  {
    v6 = *(_DWORD *)(a1 + 44);
    if (*(_DWORD *)(a1 + 32) - v6 + *(_DWORD *)(a1 + 40) >= __n)
      goto LABEL_8;
LABEL_16:
    APSLogErrorAt(0);
    return 4294960545;
  }
  v5 = *(unsigned int *)(a1 + 32);
  if (v5 < __n)
    goto LABEL_16;
  v7 = *(_DWORD *)(a1 + 40);
  v6 = *(_DWORD *)(a1 + 44);
  v8 = v7 - v6 + v5;
  if (v8 < __n)
    *(_DWORD *)(a1 + 40) = v7 + __n - v8;
LABEL_8:
  memcpy((void *)(*(_QWORD *)(a1 + 16) + (*(_DWORD *)(a1 + 36) & v6)), __src, __n);
  *(_DWORD *)(a1 + 44) += v3;
  if (gLogCategory_APSRingBuffer > 30)
    return 0;
  if (gLogCategory_APSRingBuffer != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
  {
    LogPrintF();
    return 0;
  }
  return result;
}

uint64_t APSRingBufferDequeueBytes(uint64_t a1, size_t __n, void *__dst)
{
  int v3;
  unsigned int v5;
  uint64_t result;

  if (!a1)
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  v3 = __n;
  if (!__n)
    return 0;
  v5 = *(_DWORD *)(a1 + 40);
  if (*(_DWORD *)(a1 + 44) - v5 < __n)
  {
    APSLogErrorAt(0);
    if (gLogCategory_APSRingBuffer <= 90
      && (gLogCategory_APSRingBuffer != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 4294960550;
  }
  else
  {
    if (__dst)
    {
      memcpy(__dst, (const void *)(*(_QWORD *)(a1 + 16) + (*(_DWORD *)(a1 + 36) & v5)), __n);
      v5 = *(_DWORD *)(a1 + 40);
    }
    *(_DWORD *)(a1 + 40) = v5 + v3;
    if (gLogCategory_APSRingBuffer > 30)
      return 0;
    if (gLogCategory_APSRingBuffer != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
    {
      LogPrintF();
      return 0;
    }
  }
  return result;
}

uint64_t APSRingBufferReset(uint64_t a1)
{
  uint64_t result;

  if (!a1)
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 44);
  if (gLogCategory_APSRingBuffer > 30)
    return 0;
  if (gLogCategory_APSRingBuffer != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
  {
    LogPrintF();
    return 0;
  }
  return result;
}

uint64_t APSRingBufferGetBytesFree(_DWORD *a1)
{
  return (a1[8] - a1[11] + a1[10]);
}

uint64_t APSRingBufferGetBytesUsed(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 44) - *(_DWORD *)(a1 + 40));
}

uint64_t APSDispatchSyncBatchAssignment(NSObject *a1, uint64_t a2, unint64_t a3)
{
  _QWORD v4[2];
  __int128 v5;

  v4[0] = 0;
  v4[1] = a2;
  v5 = a3;
  if (!a1)
    return 4294960556;
  if (!a3)
    return 4294960591;
  dispatch_sync_f(a1, v4, (dispatch_function_t)APSDispatchBatchSyncAssignmentCallback);
  return 0;
}

_QWORD *APSDispatchBatchSyncAssignmentCallback(_QWORD *result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t *v3;
  xpc_object_t *v4;
  unint64_t v5;
  dispatch_object_t *v6;
  void *v7;
  unint64_t v8;

  if (result[2])
  {
    v1 = result;
    v2 = 0;
    v3 = (unint64_t *)(result[1] + 16);
    do
    {
      v4 = (xpc_object_t *)*(v3 - 1);
      v5 = *v3;
      if (*v3 == -4)
      {
        if (*v4)
          xpc_release(*v4);
      }
      else if (v5 == -2)
      {
        dispatch_retain((dispatch_object_t)*v4);
      }
      else if (v5 == -1)
      {
        if (*v4)
          CFRetain(*v4);
      }
      v6 = (dispatch_object_t *)*(v3 - 2);
      v7 = (void *)*(v3 - 1);
      v8 = *v3;
      v3 += 3;
      result = APSDispatchAssigment(v6, v7, v8);
      ++v2;
    }
    while (v2 < v1[2]);
  }
  return result;
}

void *APSDispatchAssigment(dispatch_object_t *__dst, void *__src, unint64_t a3)
{
  dispatch_object_t v6;
  dispatch_object_t v7;
  size_t v9;

  switch(a3)
  {
    case 0xFFFFFFFFFFFFFFFCLL:
      v7 = *__dst;
      if (*__dst)
        xpc_release(v7);
      break;
    case 0xFFFFFFFFFFFFFFFELL:
      dispatch_release(*__dst);
      break;
    case 0xFFFFFFFFFFFFFFFFLL:
      v6 = *__dst;
      if (*__dst)
        CFRelease(v6);
      break;
  }
  if (a3 == -4 || a3 > 0xFFFFFFFFFFFFFFFDLL)
    v9 = 8;
  else
    v9 = a3;
  return memcpy(__dst, __src, v9);
}

uint64_t APSDispatchAsyncBatchAssignment(NSObject *a1, const void *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  _DWORD *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  xpc_object_t *v19;
  uint64_t v20;
  size_t v22;

  if (!a1)
    return 4294960556;
  result = 4294960591;
  if (a2)
  {
    v7 = a4;
    if (a4)
    {
      v9 = a3 + 6;
      v10 = a4;
      v11 = 32 * a4 + 32;
      do
      {
        if (!*v9)
        {
          v12 = *((_QWORD *)v9 - 1);
          if ((unint64_t)(v12 + 4) <= 3 && v12 != -3)
            v12 = 8;
          v11 += v12;
        }
        v9 += 8;
        --v10;
      }
      while (v10);
      v14 = (char *)malloc_type_malloc(v11, 0x72701D23uLL);
      if (v14)
      {
        v15 = v14;
        v16 = v14 + 32;
        memcpy(v14 + 32, a3, 32 * v7);
        *v15 = a2;
        v15[1] = v16;
        v15[2] = v7;
        *((_BYTE *)v15 + 24) = 1;
        CFRetain(a2);
        v17 = (char *)&v15[4 * v7 + 4];
        v18 = (char *)(v15 + 5);
        do
        {
          if (!*((_DWORD *)v18 + 4))
          {
            v19 = *(xpc_object_t **)v18;
            v20 = *((_QWORD *)v18 + 1);
            if ((unint64_t)(v20 + 4) > 3 || v20 == -3)
              v22 = *((_QWORD *)v18 + 1);
            else
              v22 = 8;
            switch(v20)
            {
              case -4:
                if (*v19)
                  xpc_release(*v19);
                break;
              case -2:
                dispatch_retain((dispatch_object_t)*v19);
                break;
              case -1:
                if (*v19)
                  CFRetain(*v19);
                break;
            }
            memcpy(v17, *(const void **)v18, v22);
            *(_QWORD *)v18 = v17;
            v17 += v22;
          }
          v18 += 32;
          --v7;
        }
        while (v7);
        dispatch_async_f(a1, v15, (dispatch_function_t)APSDispatchBatchAsyncAssignmentCallback);
        return 0;
      }
      else
      {
        return 4294960568;
      }
    }
  }
  return result;
}

void APSDispatchBatchAsyncAssignmentCallback(CFTypeRef *a1)
{
  unint64_t v2;
  uint64_t v3;
  xpc_object_t *v4;
  unint64_t v5;
  dispatch_object_t *v6;
  void *v7;
  unint64_t v8;

  if (a1[2])
  {
    v2 = 0;
    v3 = (uint64_t)a1[1] + 16;
    do
    {
      if (*(_DWORD *)(v3 + 8) == 1)
      {
        v4 = *(xpc_object_t **)(v3 - 8);
        v5 = *(_QWORD *)v3;
        if (*(_QWORD *)v3 == -4)
        {
          if (*v4)
            xpc_release(*v4);
        }
        else if (v5 == -2)
        {
          dispatch_retain((dispatch_object_t)*v4);
        }
        else if (v5 == -1 && *v4)
        {
          CFRetain(*v4);
        }
      }
      v6 = *(dispatch_object_t **)(v3 - 16);
      v7 = *(void **)(v3 - 8);
      v8 = *(_QWORD *)v3;
      v3 += 32;
      APSDispatchAssigment(v6, v7, v8);
      ++v2;
    }
    while (v2 < (unint64_t)a1[2]);
  }
  if (*a1)
    CFRelease(*a1);
  free(a1);
}

void APSDispatchSyncFlush(NSObject *a1)
{
  dispatch_sync_f(a1, 0, (dispatch_function_t)APSNOOPCallback);
}

void APSRealTimeSignalGuts::~APSRealTimeSignalGuts(APSRealTimeSignalGuts *this)
{
  APSRealTimeSignalGuts::~APSRealTimeSignalGuts(this);
  JUMPOUT(0x1CAA42B64);
}

{
  if (*((_QWORD *)this + 9))
  {
    caulk::concurrent::messenger::drain((APSRealTimeSignalGuts *)((char *)this + 24));
    dispatch_sync_f(*((dispatch_queue_t *)this + 6), *((void **)this + 7), *((dispatch_function_t *)this + 9));
  }
  dispatch_release(*((dispatch_object_t *)this + 6));
  MEMORY[0x1CAA42B04]((char *)this + 24);
  caulk::concurrent::message::~message(this);
}

uint64_t APSRealTimeSignalGuts::perform(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 40);
  while (1)
  {
    v2 = __ldaxr(v1);
    if (v2 != 2)
      break;
    if (!__stxr(1u, v1))
      return (*(uint64_t (**)(_QWORD))(this + 64))(*(_QWORD *)(this + 56));
  }
  __clrex();
  return this;
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t APSRealTimeSignalGetTypeID()
{
  if (gAPSRealTimeSignalInitOnce != -1)
    dispatch_once_f(&gAPSRealTimeSignalInitOnce, 0, (dispatch_function_t)_APSRealTimeSignalGetTypeID);
  return gAPSRealTimeSignalTypeID;
}

uint64_t _APSRealTimeSignalGetTypeID(void *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSRealTimeSignalTypeID = result;
  return result;
}

void _APSRealTimeSignalFinalize(_QWORD *a1)
{
  uint64_t v1;
  _QWORD block[5];

  v1 = a1[2];
  if (v1)
  {
    if (rtSignal_getFinalizerQueue(void)::sAPSRealTimeSignalFinalizerQueueOnce != -1)
      dispatch_once(&rtSignal_getFinalizerQueue(void)::sAPSRealTimeSignalFinalizerQueueOnce, &__block_literal_global_59);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZL26_APSRealTimeSignalFinalizePKv_block_invoke;
    block[3] = &__block_descriptor_tmp_60;
    block[4] = v1;
    dispatch_async((dispatch_queue_t)rtSignal_getFinalizerQueue(void)::sAPSRealTimeSignalFinalizerQueue, block);
  }
}

dispatch_queue_t ___ZL26rtSignal_getFinalizerQueuev_block_invoke()
{
  dispatch_queue_t result;

  result = dispatch_queue_create("com.apple.airplay.APSRealTimeSignal.finalizer", 0);
  rtSignal_getFinalizerQueue(void)::sAPSRealTimeSignalFinalizerQueue = (uint64_t)result;
  return result;
}

uint64_t APSRealTimeSignalCreate(NSObject *a1, void *a2, uint64_t a3, void (__cdecl *a4)(void *), uint64_t *a5)
{
  NSObject *v8;
  uint64_t Instance;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  dispatch_object_t object;

  if (!a1)
  {
    APSLogErrorAt(0);
    if (!a4)
      return 4294960591;
    if (rtSignal_getFinalizerQueue(void)::sAPSRealTimeSignalFinalizerQueueOnce != -1)
      dispatch_once(&rtSignal_getFinalizerQueue(void)::sAPSRealTimeSignalFinalizerQueueOnce, &__block_literal_global_59);
    v8 = rtSignal_getFinalizerQueue(void)::sAPSRealTimeSignalFinalizerQueue;
    v13 = 4294960591;
LABEL_18:
    dispatch_async_f(v8, a2, a4);
    return v13;
  }
  v8 = a1;
  if (!a3 || !a5)
  {
    APSLogErrorAt(0);
    v13 = 4294960591;
    goto LABEL_17;
  }
  if (gAPSRealTimeSignalInitOnce != -1)
    dispatch_once_f(&gAPSRealTimeSignalInitOnce, 0, (dispatch_function_t)_APSRealTimeSignalGetTypeID);
  Instance = _CFRuntimeCreateInstance();
  v11 = Instance;
  if (!Instance)
  {
    APSLogErrorAt(0);
    v13 = 4294960568;
LABEL_17:
    if (!a4)
      return v13;
    goto LABEL_18;
  }
  *(_QWORD *)(Instance + 16) = 0;
  v12 = operator new();
  *(_DWORD *)(v12 + 16) = 0;
  *(_QWORD *)v12 = &off_1E8288300;
  *(_QWORD *)(v12 + 8) = 0;
  dispatch_retain(v8);
  object = v8;
  MEMORY[0x1CAA42AF8](v12 + 24, &object);
  if (object)
    dispatch_release(object);
  *(_DWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = v8;
  *(_QWORD *)(v12 + 56) = a2;
  *(_QWORD *)(v12 + 64) = a3;
  *(_QWORD *)(v12 + 72) = a4;
  dispatch_retain(v8);
  v13 = 0;
  *(_QWORD *)(v11 + 16) = v12;
  *a5 = v11;
  return v13;
}

void sub_1C96718F8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  caulk::concurrent::message *v10;
  uint64_t v13;
  void *v14;

  if (object)
    dispatch_release(object);
  caulk::concurrent::message::~message(v10);
  MEMORY[0x1CAA42B64]();
  if (a2 == 3)
  {
    __cxa_get_exception_ptr(a1);
    object = (dispatch_object_t)(MEMORY[0x1E0DE5058] + 16);
    __cxa_begin_catch(a1);
    std::bad_alloc::~bad_alloc((std::bad_alloc *)&object);
    __cxa_end_catch();
    v13 = 4294960568;
  }
  else
  {
    v14 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      (*(void (**)(void *))(*(_QWORD *)v14 + 16))(v14);
      v13 = 4294960534;
      APSSignalErrorAt(4294960534);
      __cxa_end_catch();
    }
    else
    {
      __cxa_end_catch();
      v13 = 4294960596;
    }
  }
  APSLogErrorAt(v13);
  JUMPOUT(0x1C96718B4);
}

uint64_t APSRealTimeSignalRaise(uint64_t result)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = *(unsigned int **)(result + 16);
  v2 = v1 + 10;
  while (1)
  {
    v3 = __ldxr(v2);
    if (v3 != 1)
      break;
    if (!__stlxr(2u, v2))
      return caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(v1 + 6), (caulk::concurrent::message *)v1);
  }
  __clrex();
  return result;
}

uint64_t APSRealTimeSignalInvalidate(uint64_t result)
{
  atomic_store(0, (unsigned int *)(*(_QWORD *)(result + 16) + 40));
  return result;
}

uint64_t APSAudioLatencyForAVMs()
{
  uint64_t IntWithOverrideAndDefault;
  uint64_t v1;

  IntWithOverrideAndDefault = APSSettingsGetIntWithOverrideAndDefault(CFSTR("audioLatencyMs"), 0, 0);
  if (!(_DWORD)IntWithOverrideAndDefault)
    return 2000;
  v1 = IntWithOverrideAndDefault;
  if (gLogCategory_APSLatency <= 50 && (gLogCategory_APSLatency != -1 || _LogCategory_Initialize()))
    LogPrintF();
  return v1;
}

uint64_t APSAudioLatencyForSystemAudioMs()
{
  int v0;
  unsigned int v1;
  uint64_t v2;
  uint64_t IntWithOverrideAndDefault;
  uint64_t v4;

  v0 = APSGetPersistentGroupModel();
  if (v0 == 2)
    v1 = 116;
  else
    v1 = 110;
  if (v0 == 1)
    v2 = 122;
  else
    v2 = v1;
  IntWithOverrideAndDefault = APSSettingsGetIntWithOverrideAndDefault(CFSTR("audioLatencySystemMs"), 0, 0);
  if (!(_DWORD)IntWithOverrideAndDefault)
    return v2;
  v4 = IntWithOverrideAndDefault;
  if (gLogCategory_APSLatency <= 50 && (gLogCategory_APSLatency != -1 || _LogCategory_Initialize()))
    LogPrintF();
  return v4;
}

uint64_t APSAudioLatencyForScreenMs(int a1, int a2)
{
  uint64_t IntWithOverrideAndDefault;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  IntWithOverrideAndDefault = APSSettingsGetIntWithOverrideAndDefault(CFSTR("audioLatencyScreenMs"), 0, 0xFFFFFFFFLL);
  if ((_DWORD)IntWithOverrideAndDefault != -1)
  {
    v5 = IntWithOverrideAndDefault;
    if (gLogCategory_APSLatency <= 50 && (gLogCategory_APSLatency != -1 || _LogCategory_Initialize()))
      LogPrintF();
    return v5;
  }
  if (a1)
    return 200;
  if (a2 == -1)
  {
    v5 = 50;
    v8 = APSSettingsGetIntWithOverrideAndDefault(CFSTR("audioLatencyScreenLowMs"), 0, 50);
    if ((_DWORD)v8 == 50)
      return v5;
    v7 = v8;
    if (gLogCategory_APSLatency > 50 || gLogCategory_APSLatency == -1 && !_LogCategory_Initialize())
      return v7;
LABEL_18:
    LogPrintF();
    return v7;
  }
  if (a2 != 1)
    return 85;
  v5 = 170;
  v6 = APSSettingsGetIntWithOverrideAndDefault(CFSTR("audioLatencyScreenHighMs"), 0, 170);
  if ((_DWORD)v6 != 170)
  {
    v7 = v6;
    if (gLogCategory_APSLatency > 50 || gLogCategory_APSLatency == -1 && !_LogCategory_Initialize())
      return v7;
    goto LABEL_18;
  }
  return v5;
}

uint64_t APSAudioLatencyAdjustForAVMs()
{
  uint64_t IntWithOverrideAndDefault;
  uint64_t v1;

  IntWithOverrideAndDefault = APSSettingsGetIntWithOverrideAndDefault(CFSTR("audioLatencyAdjustMs"), 0, 0);
  if (!(_DWORD)IntWithOverrideAndDefault)
    return 4294967046;
  v1 = IntWithOverrideAndDefault;
  if (gLogCategory_APSLatency <= 50 && (gLogCategory_APSLatency != -1 || _LogCategory_Initialize()))
    LogPrintF();
  return v1;
}

uint64_t APSAudioLatencyAdjustForSystemAudioMs()
{
  uint64_t IntWithOverrideAndDefault;

  IntWithOverrideAndDefault = APSSettingsGetIntWithOverrideAndDefault(CFSTR("audioLatencyAdjustSystemMs"), 0, 0);
  if ((_DWORD)IntWithOverrideAndDefault
    && gLogCategory_APSLatency <= 50
    && (gLogCategory_APSLatency != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return IntWithOverrideAndDefault;
}

uint64_t APSAudioLatencyAdjustForScreenMs()
{
  uint64_t IntWithOverrideAndDefault;

  IntWithOverrideAndDefault = APSSettingsGetIntWithOverrideAndDefault(CFSTR("audioLatencyAdjustScreenMs"), 0, 0);
  if ((_DWORD)IntWithOverrideAndDefault
    && gLogCategory_APSLatency <= 50
    && (gLogCategory_APSLatency != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return IntWithOverrideAndDefault;
}

uint64_t APSAudioLatencyOffsetForAVMs()
{
  uint64_t IntWithOverrideAndDefault;

  IntWithOverrideAndDefault = APSSettingsGetIntWithOverrideAndDefault(CFSTR("audioLatencyOffsetMs"), 0, 0);
  if ((_DWORD)IntWithOverrideAndDefault
    && gLogCategory_APSLatency <= 50
    && (gLogCategory_APSLatency != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return IntWithOverrideAndDefault;
}

uint64_t APSAudioLatencyOffsetForSystemAudioMs()
{
  uint64_t IntWithOverrideAndDefault;

  IntWithOverrideAndDefault = APSSettingsGetIntWithOverrideAndDefault(CFSTR("audioLatencyOffsetSystemMs"), 0, 0);
  if ((_DWORD)IntWithOverrideAndDefault
    && gLogCategory_APSLatency <= 50
    && (gLogCategory_APSLatency != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return IntWithOverrideAndDefault;
}

uint64_t APSAudioLatencyOffsetForScreenMs(int a1, int a2, uint64_t a3, int a4)
{
  int IntWithOverrideAndDefault;
  int v8;

  IntWithOverrideAndDefault = APSSettingsGetIntWithOverrideAndDefault(CFSTR("audioLatencyMinScreenMs"), 0, 0);
  if (a1)
    v8 = APSCarPlayScreenLatencyMs(a2);
  else
    v8 = APSScreenLatencyMs(a4);
  return (IntWithOverrideAndDefault - v8);
}

uint64_t APSCarPlayScreenLatencyMs(int a1)
{
  if (a1)
    return APSSettingsGetIntWithOverrideAndDefault(CFSTR("screenLatencyCarPlayUSBMs"), 0, 25);
  else
    return APSSettingsGetIntWithOverrideAndDefault(CFSTR("screenLatencyMs"), 0, 75);
}

uint64_t APSScreenLatencyMs(int a1)
{
  uint64_t Int32;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t IntWithOverrideAndDefault;

  Int32 = APSSettingsGetInt32(CFSTR("screenLatencyMs"), 0);
  if ((int)Int32 >= 1)
  {
    v3 = Int32;
    if (gLogCategory_APSLatency <= 50 && (gLogCategory_APSLatency != -1 || _LogCategory_Initialize()))
      LogPrintF();
    return v3;
  }
  if (a1 == -1)
  {
    v3 = 40;
    IntWithOverrideAndDefault = APSSettingsGetIntWithOverrideAndDefault(CFSTR("screenLatencyForLowLatencyConnectionMs"), 0, 40);
    if ((_DWORD)IntWithOverrideAndDefault == 40)
      return v3;
    v5 = IntWithOverrideAndDefault;
    if (gLogCategory_APSLatency > 50 || gLogCategory_APSLatency == -1 && !_LogCategory_Initialize())
      return v5;
LABEL_14:
    LogPrintF();
    return v5;
  }
  if (a1 != 1)
    return 75;
  v3 = 100;
  v4 = APSSettingsGetIntWithOverrideAndDefault(CFSTR("screenLatencyForHighLatencyConnectionMs"), 0, 100);
  if ((_DWORD)v4 != 100)
  {
    v5 = v4;
    if (gLogCategory_APSLatency > 50 || gLogCategory_APSLatency == -1 && !_LogCategory_Initialize())
      return v5;
    goto LABEL_14;
  }
  return v3;
}

uint64_t APSAudioLatencyMinForScreenMs()
{
  return APSSettingsGetIntWithOverrideAndDefault(CFSTR("audioLatencyMinScreenMs"), 0, 0);
}

uint64_t APSScreenMediaPresentationLatencyMs()
{
  return APSSettingsGetIntWithOverrideAndDefault(CFSTR("mediaPresentationLatencyMs"), 0, 300);
}

uint64_t APSScreenMediaPresentationUDPLatencyMs()
{
  return APSSettingsGetIntWithOverrideAndDefault(CFSTR("mediaPresentationLatencyUDPMs"), 0, 120);
}

uint64_t APSAudioLatencyMinForAVMs()
{
  if ((int)APSAudioLatencyForAVMs() > 249)
    return 250;
  else
    return APSAudioLatencyForAVMs();
}

uint64_t APSAudioLatencyMinForSystemAudioMs()
{
  return 0;
}

uint64_t APSHDMIAudioLatencyMs()
{
  return 67;
}

uint64_t APSHDMIVideoLatencyMs()
{
  return 67;
}

uint64_t APSRandomLatencyMs(const void *a1)
{
  CFTypeID v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;

  v16 = 0;
  v17 = &v16;
  v18 = 0x2000000000;
  v19 = 0;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  v15 = 0;
  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  v6[0] = 0;
  v6[1] = v6;
  v6[2] = 0x2000000000;
  v7 = 0;
  if (a1)
  {
    v2 = CFGetTypeID(a1);
    if (v2 == CFDictionaryGetTypeID())
    {
      if (CFDictionaryGetCount((CFDictionaryRef)a1) >= 1)
      {
        CFDictionaryApplyBlock();
        v3 = *((unsigned int *)v17 + 6);
        if ((_DWORD)v3)
        {
          APSLogErrorAt(v3);
        }
        else if (*((_DWORD *)v9 + 6))
        {
          arc4random();
          CFDictionaryApplyBlock();
        }
      }
    }
    else
    {
      APSLogErrorAt(0);
      *((_DWORD *)v17 + 6) = -6705;
    }
  }
  v4 = *((unsigned int *)v13 + 6);
  _Block_object_dispose(v6, 8);
  _Block_object_dispose(&v8, 8);
  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(&v16, 8);
  return v4;
}

uint64_t APSSharedRingBuffer_CreateWithBufferAndState(void *a1, void *a2, _QWORD *a3)
{
  _OWORD *Instance;
  _OWORD *v7;
  size_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  void *v16;
  void *region;

  v16 = 0;
  region = 0;
  if (gAPSSharedRingBufferInitOnce != -1)
    dispatch_once_f(&gAPSSharedRingBufferInitOnce, 0, (dispatch_function_t)_APSSharedRingBufferGetTypeID);
  Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (Instance)
  {
    v7 = Instance;
    Instance[3] = 0u;
    Instance[4] = 0u;
    Instance[1] = 0u;
    Instance[2] = 0u;
    v8 = xpc_shmem_map(a1, &region);
    v9 = v8;
    if (region && v8)
    {
      v10 = xpc_shmem_map(a2, &v16);
      v11 = v10;
      v12 = v16;
      if (v16 && v10 > 0x4F)
      {
        *((_DWORD *)v7 + 16) = v9 >> 1;
        *((_DWORD *)v7 + 17) = (v9 >> 1) - 1;
        v13 = (char *)region + (v9 >> 1);
        *((_QWORD *)v7 + 4) = region;
        *((_QWORD *)v7 + 5) = v13;
        *((_QWORD *)v7 + 6) = v12;
        *((_QWORD *)v7 + 7) = v12;
        *((_QWORD *)v7 + 3) = FigXPCRetain();
        v14 = 0;
        *((_QWORD *)v7 + 2) = FigXPCRetain();
        *((_DWORD *)v7 + 18) = v9;
        *((_DWORD *)v7 + 19) = v11;
        *a3 = v7;
        return v14;
      }
      APSLogErrorAt(0);
      v14 = FigSignalErrorAt();
    }
    else
    {
      APSLogErrorAt(0);
      v14 = FigSignalErrorAt();
      v11 = 0;
    }
  }
  else
  {
    APSLogErrorAt(0);
    v9 = 0;
    v11 = 0;
    v14 = 4294960568;
  }
  if (region)
    munmap(region, v9);
  if (v16)
    munmap(v16, v11);
  return v14;
}

uint64_t _APSSharedRingBufferGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSSharedRingBufferTypeID = result;
  return result;
}

double _APSSharedRingBufferFinalize(uint64_t a1)
{
  void *v2;
  _OWORD *v3;
  void *v4;
  double result;

  v3 = (_OWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 32);
  if (v2)
    munmap(v2, *(unsigned int *)(a1 + 72));
  v4 = *(void **)(a1 + 48);
  if (v4)
    munmap(v4, *(unsigned int *)(a1 + 76));
  FigXPCRelease();
  FigXPCRelease();
  *(_QWORD *)(a1 + 72) = 0;
  result = 0.0;
  *v3 = 0u;
  v3[1] = 0u;
  return result;
}

uint64_t APSSharedRingBuffer_Create(uint64_t a1, _QWORD *a2)
{
  _OWORD *Instance;
  _OWORD *v4;
  vm_map_t v5;
  unsigned int v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  mach_vm_size_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  int *v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  vm_prot_t cur_protection[2];
  mach_vm_address_t target_address;

  if (gAPSSharedRingBufferInitOnce != -1)
    dispatch_once_f(&gAPSSharedRingBufferInitOnce, 0, (dispatch_function_t)_APSSharedRingBufferGetTypeID);
  *(_QWORD *)cur_protection = 0;
  target_address = 0;
  Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (!Instance)
  {
    APSLogErrorAt(0);
    v10 = 0;
LABEL_25:
    v15 = 0;
    v11 = 0;
    v16 = 0;
    v13 = 4294960568;
    goto LABEL_18;
  }
  v4 = Instance;
  Instance[3] = 0u;
  Instance[4] = 0u;
  Instance[1] = 0u;
  Instance[2] = 0u;
  v5 = *MEMORY[0x1E0C83DA0];
  v6 = iceil2();
  v7 = (_DWORD *)MEMORY[0x1E0C85AC0];
  v8 = *MEMORY[0x1E0C85AC0] + v6;
  v9 = ~*MEMORY[0x1E0C85AC0];
  v10 = v9 & v8;
  if ((v9 & v8) != (((v9 & v8) + *MEMORY[0x1E0C85AC0]) & v9))
  {
    APSLogErrorAt(0);
    goto LABEL_25;
  }
  if (gLogCategory_APSSharedRingBuffer <= 30
    && (gLogCategory_APSSharedRingBuffer != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v11 = (char *)mmap(0, 2 * v10, 3, 4097, -1, 0);
  if (v11 == (char *)-1)
  {
    v12 = __error();
    v13 = *v12;
    if ((_DWORD)v13)
    {
      v14 = *v12;
LABEL_28:
      APSLogErrorAt(v14);
      v15 = 0;
      goto LABEL_17;
    }
  }
  target_address = (mach_vm_address_t)&v11[v10];
  v14 = mach_vm_remap(v5, &target_address, v10, 0, 0x4000, v5, (mach_vm_address_t)v11, 0, &cur_protection[1], cur_protection, 1u);
  if ((_DWORD)v14)
  {
    v13 = v14;
    goto LABEL_28;
  }
  v15 = ~*v7 & (unint64_t)(*(_QWORD *)v7 + 80);
  v16 = (uint64_t)mmap(0, v15, 3, 4097, -1, 0);
  if (v16 == -1 && (v17 = __error(), v13 = *v17, (_DWORD)v13))
  {
    APSLogErrorAt(*v17);
    v16 = -1;
  }
  else
  {
    v18 = xpc_shmem_create(v11, 2 * v10);
    if (v18)
    {
      v19 = xpc_shmem_create((void *)v16, v15);
      if (v19)
      {
        v20 = v19;
        bzero((void *)v16, v15);
        v13 = 0;
        *((_DWORD *)v4 + 16) = v10;
        *((_DWORD *)v4 + 17) = v10 - 1;
        *((_QWORD *)v4 + 4) = v11;
        *((_QWORD *)v4 + 5) = &v11[v10];
        *((_QWORD *)v4 + 6) = v16;
        *((_QWORD *)v4 + 7) = v16;
        *((_QWORD *)v4 + 2) = v20;
        *((_QWORD *)v4 + 3) = v18;
        *((_DWORD *)v4 + 18) = 2 * v10;
        *((_DWORD *)v4 + 19) = v15;
        *a2 = v4;
        v11 = 0;
LABEL_17:
        v16 = 0;
        goto LABEL_18;
      }
    }
    APSLogErrorAt(0);
    v13 = FigSignalErrorAt();
  }
LABEL_18:
  FigXPCRelease();
  FigXPCRelease();
  if (v11)
    munmap(v11, 2 * v10);
  if (v16)
    munmap((void *)v16, v15);
  return v13;
}

uint64_t APSSharedRingBuffer_GetSharedMemoryState(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t APSSharedRingBuffer_GetSharedMemoryBuffer(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

BOOL APSSharedRingBuffer_IsSpaceAvailable(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(a1 + 64) - *(_DWORD *)(*(_QWORD *)(a1 + 56) + 28) + *(_DWORD *)(*(_QWORD *)(a1 + 56) + 24) >= a2;
}

uint64_t APSSharedRingBuffer_GetWritePointer(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 32)
         + (*(_DWORD *)(result + 68) & *(_DWORD *)(*(_QWORD *)(result + 56) + 28));
  return result;
}

uint64_t APSSharedRingBuffer_UpdateWriteState(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  if (a1)
  {
    if (*(_DWORD *)(a1 + 64) - *(_DWORD *)(*(_QWORD *)(a1 + 56) + 28) + *(_DWORD *)(*(_QWORD *)(a1 + 56) + 24) < a2
      && gLogCategory_APSSharedRingBuffer <= 60
      && (gLogCategory_APSSharedRingBuffer != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    result = 0;
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + 28) += a2;
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  return result;
}

uint64_t APSSharedRingBuffer_WriteData(uint64_t a1, const void *a2, size_t __n)
{
  int v3;
  unsigned int v5;
  uint64_t result;

  if ((_DWORD)__n)
  {
    v3 = __n;
    v5 = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 28);
    if (*(_DWORD *)(a1 + 64) - v5 + *(_DWORD *)(*(_QWORD *)(a1 + 56) + 24) <= __n)
    {
      APSLogErrorAt(0);
      return 4294960533;
    }
    else
    {
      memcpy((void *)(*(_QWORD *)(a1 + 32) + (*(_DWORD *)(a1 + 68) & v5)), a2, __n);
      result = 0;
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + 28) += v3;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 0;
  }
  return result;
}

BOOL APSSharedRingBuffer_IsDataAvailable(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(*(_QWORD *)(a1 + 56) + 28) - *(_DWORD *)(*(_QWORD *)(a1 + 56) + 24) >= a2;
}

uint64_t APSSharedRingBuffer_ReadData(uint64_t a1, void *__dst, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v6 = *(_QWORD *)(a1 + 56);
    v7 = *(_DWORD *)(v6 + 24);
    v8 = *(_DWORD *)(v6 + 28) - v7;
    if (v8 >= *a3)
      v9 = *a3;
    else
      v9 = v8;
    if ((_DWORD)v9)
    {
      memcpy(__dst, (const void *)(v3 + (*(_DWORD *)(a1 + 68) & v7)), v9);
      result = 0;
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + 24) += v9;
      *a3 = v9;
    }
    else
    {
      APSLogErrorAt(0);
      return 4294960569;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 0;
  }
  return result;
}

uint64_t APSSharedRingBuffer_ReadDataWithEndiannessConversion(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 56);
    v6 = *(_DWORD *)(v5 + 24);
    v7 = *(_DWORD *)(v5 + 28) - v6;
    if (v7 >= *a4)
      v7 = *a4;
    if (v7)
    {
      if (v7 % a2)
      {
        APSLogErrorAt(0);
        return 4294960591;
      }
      else
      {
        if (a2 - 1 < v7)
        {
          v8 = 0;
          v9 = v4 + (*(_DWORD *)(a1 + 68) & v6);
          v10 = -1;
          v11 = a2;
          do
          {
            v12 = v8;
            v13 = a2;
            do
              *(_BYTE *)(a3 + v12++) = *(_BYTE *)(v9 + (v10 + v13--));
            while (v13);
            v11 += a2;
            v8 += a2;
            v10 += a2;
          }
          while (v11 - 1 < v7);
          v5 = *(_QWORD *)(a1 + 56);
          v6 = *(_DWORD *)(v5 + 24);
        }
        result = 0;
        *(_DWORD *)(v5 + 24) = v6 + v7;
        *a4 = v7;
      }
    }
    else
    {
      APSLogErrorAt(0);
      return 4294960569;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 0;
  }
  return result;
}

void APSSharedRingBuffer_ClearDataInBuffer(uint64_t a1)
{
  bzero(*(void **)(a1 + 32), *(unsigned int *)(a1 + 72));
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + 24) = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 28);
}

void APSNetworkClockLogCurrentNetworkTime(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD *);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  CFTypeRef v12;

  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v2 = mach_absolute_time();
  if (!a1)
  {
    APSLogErrorAt(0);
    goto LABEL_15;
  }
  v3 = v2;
  if (v2 <= APSNetworkClockLogCurrentNetworkTime_nextTicks)
    goto LABEL_21;
  APSNetworkClockLogCurrentNetworkTime_nextTicks = v2 + 10 * UpTicksPerSecond();
  v4 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (v4)
  {
    v5 = v4(a1, CFSTR("NetworkClock_Type"), *MEMORY[0x1E0C9AE00], &v12);
    if (!(_DWORD)v5)
    {
      v6 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v6)
      {
        v7 = v6(a1, v3, v11);
        if (!(_DWORD)v7)
        {
          if (gLogCategory_APSNetworkClockLog > 50
            || gLogCategory_APSNetworkClockLog == -1 && !_LogCategory_Initialize())
          {
            goto LABEL_21;
          }
          goto LABEL_17;
        }
        v10 = v7;
      }
      else
      {
        v10 = 4294954514;
      }
      v9 = v10;
      goto LABEL_14;
    }
    v8 = v5;
  }
  else
  {
    v8 = 4294954514;
  }
  v9 = v8;
LABEL_14:
  APSLogErrorAt(v9);
LABEL_15:
  if (gLogCategory_APSNetworkClockCommon > 90
    || gLogCategory_APSNetworkClockCommon == -1 && !_LogCategory_Initialize())
  {
    goto LABEL_21;
  }
LABEL_17:
  LogPrintF();
LABEL_21:
  if (v12)
    CFRelease(v12);
}

uint64_t APSNetworkClockGetClassID()
{
  if (APSNetworkClockGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APSNetworkClockGetClassID_sRegisterOnce, &APSNetworkClockGetClassID_sClassID, (dispatch_function_t)networkClock_registerBaseClass);
  return APSNetworkClockGetClassID_sClassID;
}

uint64_t networkClock_registerBaseClass()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFStringRef networkClock_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[APSNetworkClock %p]"), a1);
}

uint64_t APSNetworkClockGetTypeID()
{
  if (APSNetworkClockGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APSNetworkClockGetClassID_sRegisterOnce, &APSNetworkClockGetClassID_sClassID, (dispatch_function_t)networkClock_registerBaseClass);
  return CMBaseClassGetCFTypeID();
}

uint64_t APSNetworkClockPeerDictionaryIDEqual(const __CFDictionary *a1, const __CFDictionary *a2)
{
  const void *Value;
  const void *v5;

  if (!((unint64_t)a1 | (unint64_t)a2))
    return 1;
  if ((a1 != 0) != (a2 != 0))
    return 0;
  Value = CFDictionaryGetValue(a1, CFSTR("ID"));
  v5 = CFDictionaryGetValue(a2, CFSTR("ID"));
  return CFEqual(Value, v5);
}

const __CFDictionary *APSNetworkClockPeerDictionaryIsHTClusterExclusive(const __CFDictionary *result)
{
  const __CFArray *Value;

  if (result)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(result, CFSTR("Addresses"));
    return (const __CFDictionary *)(!Value || !CFArrayGetCount(Value));
  }
  return result;
}

uint64_t APSNetworkClockCreateSerializableRepresentationOfPeerList(const __CFArray *a1, int a2, __CFArray **a3)
{
  CFMutableArrayRef Mutable;
  __CFArray *v7;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  uint64_t v10;
  uint64_t v11;
  void *value;
  CFRange v14;

  if (!a1)
  {
    v11 = 4294895325;
LABEL_19:
    APSLogErrorAt(0);
    return v11;
  }
  if (!a3)
  {
    v11 = 4294895325;
    goto LABEL_19;
  }
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    APSLogErrorAt(0);
    return 4294895326;
  }
  v7 = Mutable;
  for (i = 0; ; ++i)
  {
    if (i >= CFArrayGetCount(a1))
    {
      v11 = 0;
      *a3 = v7;
      return v11;
    }
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, i);
    if (!a2)
      break;
    value = 0;
    v10 = APSNetworkClockCopyPeerAsSerializablePeerDictionary(ValueAtIndex, (__CFDictionary **)&value);
    if ((_DWORD)v10)
    {
      v11 = v10;
      goto LABEL_16;
    }
    CFArrayAppendValue(v7, value);
LABEL_11:
    CFRelease(value);
  }
  value = 0;
  v10 = APSNetworkClockCopyPeerAsSerializableAddresses(ValueAtIndex, &value);
  if (!(_DWORD)v10)
  {
    v14.length = CFArrayGetCount((CFArrayRef)value);
    v14.location = 0;
    CFArrayAppendArray(v7, (CFArrayRef)value, v14);
    goto LABEL_11;
  }
  v11 = v10;
LABEL_16:
  APSLogErrorAt(v10);
  CFRelease(v7);
  return v11;
}

uint64_t APSNetworkClockCopyPeerAsSerializablePeerDictionary(CFDictionaryRef theDict, __CFDictionary **a2)
{
  __CFDictionary *MutableCopy;
  const __CFArray *v5;
  uint64_t StringRepresentationsForNetworkAddresses;
  const void *v7;
  uint64_t v8;
  CFTypeRef cf;
  void *value;

  value = 0;
  if (!theDict)
  {
    v8 = 4294895325;
    APSLogErrorAt(0);
    return v8;
  }
  if (!a2)
  {
    v8 = 4294895325;
    APSLogErrorAt(0);
    goto LABEL_11;
  }
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theDict);
  if (!MutableCopy)
  {
    APSLogErrorAt(0);
    v8 = 4294895326;
    goto LABEL_12;
  }
  v5 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("Addresses"));
  if (v5)
  {
    StringRepresentationsForNetworkAddresses = clock_createStringRepresentationsForNetworkAddresses(v5, (__CFArray **)&value);
    if ((_DWORD)StringRepresentationsForNetworkAddresses)
    {
      v8 = StringRepresentationsForNetworkAddresses;
      goto LABEL_22;
    }
    CFDictionarySetValue(MutableCopy, CFSTR("Addresses"), value);
  }
  CFDictionaryRemoveValue(MutableCopy, CFSTR("InterfaceName"));
  CFDictionaryRemoveValue(MutableCopy, CFSTR("PreferredAddress"));
  CFDictionaryRemoveValue(MutableCopy, CFSTR("IsEnabled"));
  CFDictionaryRemoveValue(MutableCopy, CFSTR("IsOverridden"));
  if (CFDictionaryContainsKey(theDict, CFSTR("HTAddress")))
  {
    v7 = CFDictionaryGetValue(theDict, CFSTR("HTAddress"));
    cf = 0;
    StringRepresentationsForNetworkAddresses = APSNetworkAddressCopyStringRepresentationWithFlags((uint64_t)v7, 2, (CFStringRef *)&cf);
    if (!(_DWORD)StringRepresentationsForNetworkAddresses)
    {
      CFDictionarySetValue(MutableCopy, CFSTR("HTAddress"), cf);
      CFRelease(cf);
      goto LABEL_10;
    }
    v8 = StringRepresentationsForNetworkAddresses;
LABEL_22:
    APSLogErrorAt(StringRepresentationsForNetworkAddresses);
    goto LABEL_12;
  }
LABEL_10:
  v8 = 0;
  *a2 = MutableCopy;
LABEL_11:
  MutableCopy = 0;
LABEL_12:
  if (value)
    CFRelease(value);
  if (MutableCopy)
    CFRelease(MutableCopy);
  return v8;
}

uint64_t APSNetworkClockCopyPeerAsSerializableAddresses(const __CFDictionary *a1, _QWORD *a2)
{
  const __CFArray *Value;
  uint64_t StringRepresentationsForNetworkAddresses;
  void *v5;
  uint64_t v6;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
  {
    v6 = 4294895325;
LABEL_11:
    APSLogErrorAt(0);
    return v6;
  }
  if (!a2)
  {
    v6 = 4294895325;
    goto LABEL_11;
  }
  Value = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("Addresses"));
  if (!Value)
  {
    v5 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B378]);
    if (!v5)
    {
      APSLogErrorAt(0);
      return 4294895326;
    }
    goto LABEL_7;
  }
  StringRepresentationsForNetworkAddresses = clock_createStringRepresentationsForNetworkAddresses(Value, (__CFArray **)&cf);
  if (!(_DWORD)StringRepresentationsForNetworkAddresses)
  {
    v5 = (void *)cf;
LABEL_7:
    v6 = 0;
    *a2 = v5;
    return v6;
  }
  v6 = StringRepresentationsForNetworkAddresses;
  APSLogErrorAt(StringRepresentationsForNetworkAddresses);
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t clock_createStringRepresentationsForNetworkAddresses(const __CFArray *a1, __CFArray **a2)
{
  CFMutableArrayRef Mutable;
  __CFArray *v5;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v8;
  uint64_t v9;
  void *value;

  if (CFArrayGetCount(a1) <= 0)
  {
    v9 = 4294895325;
LABEL_22:
    APSLogErrorAt(0);
    return v9;
  }
  if (!a2)
  {
    v9 = 4294895325;
    goto LABEL_22;
  }
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v5 = Mutable;
    for (i = 0; ; ++i)
    {
      if (i >= CFArrayGetCount(a1))
      {
        v9 = 0;
        *a2 = v5;
        return v9;
      }
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      value = 0;
      v8 = APSNetworkAddressCopyStringRepresentationWithFlags((uint64_t)ValueAtIndex, 2, (CFStringRef *)&value);
      v9 = v8;
      if ((_DWORD)v8)
        APSLogErrorAt(v8);
      else
        CFArrayAppendValue(v5, value);
      if (value)
        CFRelease(value);
      if ((_DWORD)v9)
        break;
    }
    APSLogErrorAt(v9);
    if (gLogCategory_APSNetworkClockCommon <= 90
      && (gLogCategory_APSNetworkClockCommon != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFRelease(v5);
  }
  else
  {
    APSLogErrorAt(0);
    return 4294895326;
  }
  return v9;
}

uint64_t APSNetworkClockAddOrUpdatePeerFromSerializablePeerDictionary(uint64_t a1, const __CFString *a2, const __CFString *a3, CFDictionaryRef theDict, uint64_t a5, uint64_t a6)
{
  uint64_t PeerDictFromSerializablePeerDictionary;
  CFTypeRef v10;
  uint64_t (*v11)(uint64_t, CFTypeRef, uint64_t, uint64_t);
  uint64_t v12;
  CFTypeRef cf;

  cf = 0;
  PeerDictFromSerializablePeerDictionary = clock_createPeerDictFromSerializablePeerDictionary(theDict, a2, a3, (__CFDictionary **)&cf);
  if ((_DWORD)PeerDictFromSerializablePeerDictionary)
  {
    v12 = PeerDictFromSerializablePeerDictionary;
  }
  else
  {
    v10 = cf;
    v11 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 32);
    if (v11)
    {
      v12 = v11(a1, v10, a5, a6);
      if (!(_DWORD)v12)
        goto LABEL_8;
    }
    else
    {
      v12 = 4294954514;
    }
    PeerDictFromSerializablePeerDictionary = v12;
  }
  APSLogErrorAt(PeerDictFromSerializablePeerDictionary);
LABEL_8:
  if (cf)
    CFRelease(cf);
  return v12;
}

uint64_t clock_createPeerDictFromSerializablePeerDictionary(CFDictionaryRef theDict, const __CFString *a2, const __CFString *a3, __CFDictionary **a4)
{
  __CFDictionary **v4;
  const __CFAllocator *v8;
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *v10;
  uint64_t v11;
  const __CFString *v12;
  uint64_t TypedValue;
  const __CFArray *v14;
  __CFArray *Mutable;
  CFIndex i;
  const __CFString *ValueAtIndex;
  void *v18;
  uint64_t v19;
  CFTypeRef v20;
  const __CFString *v21;
  CFTypeRef v22;
  uint64_t v23;
  __CFDictionary **v25;
  CFTypeRef v26;
  CFTypeRef cf;
  void *value;
  void *v29;

  cf = 0;
  value = 0;
  v26 = 0;
  if (!a2 || (v4 = a4) == 0)
  {
    APSLogErrorAt(0);
    v23 = 4294895325;
    goto LABEL_36;
  }
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theDict);
  if (!MutableCopy)
  {
    v23 = 4294895326;
    APSLogErrorAt(0);
    goto LABEL_36;
  }
  v10 = MutableCopy;
  v11 = clock_copyUsableInterface(a2, &value);
  if ((_DWORD)v11)
  {
    v23 = v11;
    APSLogErrorAt(v11);
    Mutable = 0;
    v12 = (const __CFString *)value;
    goto LABEL_30;
  }
  v12 = (const __CFString *)value;
  CFDictionarySetValue(v10, CFSTR("InterfaceName"), value);
  CFArrayGetTypeID();
  TypedValue = CFDictionaryGetTypedValue();
  if (!TypedValue)
  {
    Mutable = 0;
    if (!a3)
      goto LABEL_26;
    goto LABEL_21;
  }
  v14 = (const __CFArray *)TypedValue;
  Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    v23 = 4294895326;
    APSLogErrorAt(0);
    v19 = 4294895326;
    goto LABEL_47;
  }
  v25 = v4;
  for (i = 0; i < CFArrayGetCount(v14); ++i)
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v14, i);
    v29 = 0;
    if (ValueAtIndex && !APSNetworkAddressCreateWithString((uint64_t)v8, ValueAtIndex, &v29))
    {
      v18 = v29;
      CFArrayAppendValue(Mutable, v29);
      if (v18)
        CFRelease(v18);
    }
    else if (gLogCategory_APSNetworkClockCommon <= 90
           && (gLogCategory_APSNetworkClockCommon != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  CFDictionarySetValue(v10, CFSTR("Addresses"), Mutable);
  v4 = v25;
  if (a3)
  {
LABEL_21:
    if (v12 == a2 || v12 && CFEqual(a2, v12))
    {
      v19 = APSNetworkAddressCreateWithString((uint64_t)v8, a3, &cf);
      if ((_DWORD)v19)
      {
        v23 = v19;
        goto LABEL_47;
      }
      v20 = cf;
      SockAddrSetPort();
      CFDictionarySetValue(v10, CFSTR("PreferredAddress"), v20);
    }
  }
LABEL_26:
  if (CFDictionaryContainsKey(theDict, CFSTR("HTAddress")))
  {
    v21 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("HTAddress"));
    v19 = APSNetworkAddressCreateWithString((uint64_t)v8, v21, &v26);
    if (!(_DWORD)v19)
    {
      v22 = v26;
      SockAddrSetPort();
      CFDictionarySetValue(v10, CFSTR("HTAddress"), v22);
      goto LABEL_29;
    }
    v23 = v19;
LABEL_47:
    APSLogErrorAt(v19);
    goto LABEL_30;
  }
LABEL_29:
  v23 = 0;
  *v4 = v10;
  v10 = 0;
LABEL_30:
  if (v12)
    CFRelease(v12);
  if (v10)
    CFRelease(v10);
  if (Mutable)
    CFRelease(Mutable);
LABEL_36:
  if (cf)
    CFRelease(cf);
  if (v26)
    CFRelease(v26);
  return v23;
}

uint64_t clock_copyUsableInterface(const __CFString *a1, _QWORD *a2)
{
  CFTypeRef v4;
  uint64_t v5;
  uint64_t UsableInterfaceList;

  if (a1)
  {
    CFStringHasPrefix(a1, CFSTR("en"));
    v4 = CFRetain(a1);
  }
  else
  {
    UsableInterfaceList = CreateUsableInterfaceList();
    if ((_DWORD)UsableInterfaceList)
    {
      v5 = UsableInterfaceList;
      APSLogErrorAt(UsableInterfaceList);
      return v5;
    }
    v4 = 0;
  }
  if (v4)
  {
    v5 = 0;
    *a2 = v4;
  }
  else
  {
    APSLogErrorAt(0);
    return 4294895322;
  }
  return v5;
}

uint64_t APSNetworkClockAddOrUpdatePeerWithAddressAndInterfaceNameStrings(uint64_t a1, const void *a2, const __CFString *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  __CFDictionary *v9;
  uint64_t (*v10)(uint64_t, __CFDictionary *, uint64_t, uint64_t);
  uint64_t v11;
  __CFDictionary *v13;

  v13 = 0;
  v8 = clock_createPeerDictFromStringRepresentation(a2, a3, &v13);
  if ((_DWORD)v8)
  {
    v11 = v8;
    APSLogErrorAt(v8);
    v9 = v13;
    if (!v13)
      return v11;
    goto LABEL_8;
  }
  v9 = v13;
  v10 = *(uint64_t (**)(uint64_t, __CFDictionary *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 32);
  if (v10)
  {
    v11 = v10(a1, v9, a4, a5);
    if (!(_DWORD)v11)
      goto LABEL_7;
  }
  else
  {
    v11 = 4294954514;
  }
  APSLogErrorAt(v11);
LABEL_7:
  if (v9)
LABEL_8:
    CFRelease(v9);
  return v11;
}

uint64_t clock_createPeerDictFromStringRepresentation(const void *a1, const __CFString *a2, __CFDictionary **a3)
{
  const __CFAllocator *v6;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v8;
  uint64_t v9;
  __CFArray *v10;
  __CFArray *v11;
  void *v12;
  uint64_t v13;
  void *value;

  value = 0;
  if (!a1)
  {
    v13 = 4294895325;
LABEL_13:
    APSLogErrorAt(0);
    return v13;
  }
  if (!a2)
  {
    v13 = 4294895325;
    goto LABEL_13;
  }
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt(0);
    return 4294895326;
  }
  v8 = Mutable;
  v9 = APSNetworkAddressCreateWithString((uint64_t)v6, a2, &value);
  if ((_DWORD)v9)
  {
    v13 = v9;
    APSLogErrorAt(v9);
  }
  else
  {
    v10 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E0C9B378]);
    if (v10)
    {
      v11 = v10;
      v12 = value;
      CFArrayAppendValue(v10, value);
      CFDictionarySetValue(v8, CFSTR("ID"), a2);
      CFDictionarySetValue(v8, CFSTR("InterfaceName"), a1);
      CFDictionarySetValue(v8, CFSTR("Addresses"), v11);
      CFDictionarySetValue(v8, CFSTR("PreferredAddress"), v12);
      v13 = 0;
      *a3 = v8;
      if (!v12)
        goto LABEL_8;
      goto LABEL_7;
    }
    APSLogErrorAt(0);
    v13 = 4294895326;
  }
  CFRelease(v8);
  v11 = 0;
  v12 = value;
  if (value)
LABEL_7:
    CFRelease(v12);
LABEL_8:
  if (v11)
    CFRelease(v11);
  return v13;
}

uint64_t APSNetworkClockSetPeersFromSetPeersMessagePayload(uint64_t a1, const __CFString *a2, const __CFArray *a3, int a4, uint64_t a5, uint64_t a6)
{
  CFMutableArrayRef Mutable;
  __CFArray *v13;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  uint64_t PeerDictFromSerializablePeerDictionary;
  uint64_t v17;
  void (*v18)(uint64_t, __CFArray *, uint64_t, uint64_t);
  void *value;

  if (!a3)
  {
    v17 = 4294895325;
    APSLogErrorAt(0);
    return v17;
  }
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    APSLogErrorAt(0);
    return 4294895326;
  }
  v13 = Mutable;
  for (i = 0; i < CFArrayGetCount(a3); ++i)
  {
    value = 0;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, i);
    if (a4)
    {
      if (ValueAtIndex)
      {
        PeerDictFromSerializablePeerDictionary = clock_createPeerDictFromSerializablePeerDictionary(ValueAtIndex, a2, 0, (__CFDictionary **)&value);
        if (!(_DWORD)PeerDictFromSerializablePeerDictionary)
          goto LABEL_11;
        v17 = PeerDictFromSerializablePeerDictionary;
      }
      else
      {
        v17 = 4294895325;
        PeerDictFromSerializablePeerDictionary = 0;
      }
    }
    else if (ValueAtIndex)
    {
      PeerDictFromSerializablePeerDictionary = clock_createPeerDictFromStringRepresentation(a2, (const __CFString *)ValueAtIndex, (__CFDictionary **)&value);
      if (!(_DWORD)PeerDictFromSerializablePeerDictionary)
      {
LABEL_11:
        CFArrayAppendValue(v13, value);
        v17 = 0;
        goto LABEL_12;
      }
      v17 = PeerDictFromSerializablePeerDictionary;
    }
    else
    {
      v17 = 4294895325;
      PeerDictFromSerializablePeerDictionary = 0;
    }
    APSLogErrorAt(PeerDictFromSerializablePeerDictionary);
LABEL_12:
    if (value)
    {
      CFRelease(value);
      value = 0;
    }
    if ((_DWORD)v17)
    {
      APSLogErrorAt(v17);
      goto LABEL_23;
    }
  }
  v18 = *(void (**)(uint64_t, __CFArray *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v18)
    v18(a1, v13, a5, a6);
  v17 = 0;
LABEL_23:
  CFRelease(v13);
  return v17;
}

uint64_t APSNetworkClockRemoveAllPeers(uint64_t a1)
{
  CFMutableArrayRef Mutable;
  uint64_t (*v3)(uint64_t, CFMutableArrayRef, _QWORD, _QWORD);
  uint64_t v4;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = *(uint64_t (**)(uint64_t, CFMutableArrayRef, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 48);
  if (!v3)
  {
    v4 = 4294954514;
    if (!Mutable)
      return v4;
    goto LABEL_3;
  }
  v4 = v3(a1, Mutable, 0, 0);
  if (Mutable)
LABEL_3:
    CFRelease(Mutable);
  return v4;
}

uint64_t APSNetworkClockDetermineAndSetOrUpdateLocalPeerInfo(uint64_t a1, int a2, const __CFString *a3, __int128 *a4)
{
  const __CFAllocator *v8;
  __CFDictionary *Mutable;
  __CFDictionary *v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  CFTypeRef v14;
  CFTypeRef v15;
  __CFArray *v16;
  uint64_t UsableInterfaceList;
  __CFArray *v18;
  _QWORD *v19;
  CFTypeRef v20;
  const void *v21;
  uint64_t v22;
  __CFArray *v23;
  __CFArray *v24;
  uint64_t (*v25)(uint64_t, __CFDictionary *);
  uint64_t v26;
  CFTypeRef cf1;
  unsigned int v29;
  CFTypeRef v30;
  BOOL v31;
  CFTypeRef v32;
  CFTypeRef cf;
  void *value;
  __int128 v35[2];
  __int128 v36[2];
  CFTypeRef v37;
  void *v38;
  _QWORD *v39;

  cf = 0;
  value = 0;
  v32 = 0;
  v31 = 0;
  v30 = 0;
  v29 = 0;
  cf1 = 0;
  APSCopyBootUUID((CFStringRef *)&value);
  if (value)
  {
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v10 = Mutable;
      CFDictionarySetValue(Mutable, CFSTR("ID"), value);
      v11 = (const void *)*MEMORY[0x1E0C9AE50];
      CFDictionarySetValue(v10, CFSTR("SupportsClockPortMatchingOverride"), (const void *)*MEMORY[0x1E0C9AE50]);
      APSCopyTightSyncInfo(&cf, &v31, 0, 0, 0);
      if (cf)
      {
        CFDictionarySetValue(v10, CFSTR("TightSyncUUID"), cf);
        if (v31)
          v12 = v11;
        else
          v12 = (const void *)*MEMORY[0x1E0C9AE40];
        CFDictionarySetValue(v10, CFSTR("IsTightSyncGroupLeader"), v12);
      }
      APSCopyPersistentGroupInfo((const __CFString **)&v30, &v29, 0, 0, 0, 0, 0, 0);
      if (v30 && v29 == 1)
        CFDictionarySetValue(v10, CFSTR("HTGroupUUID"), v30);
      if (APSIsAPMSpeaker_sCheckOnce != -1)
        dispatch_once(&APSIsAPMSpeaker_sCheckOnce, &__block_literal_global_9);
      if (!APSIsAPMSpeaker_sIsAPMSpeaker)
        IsAppleTV();
      CFDictionarySetInt64();
      v13 = clock_copyUsableInterface(a3, &cf1);
      if ((_DWORD)v13)
      {
        v22 = v13;
      }
      else
      {
        v14 = cf1;
        if (cf1 != a3)
        {
          v15 = 0;
          if (!a3 || !cf1)
          {
LABEL_22:
            if (a2)
            {
LABEL_23:
              if (!v15)
              {
                APSLogErrorAt(0);
                v16 = 0;
                v22 = 4294895325;
                goto LABEL_61;
              }
              CFDictionarySetValue(v10, CFSTR("HTAddress"), v15);
              v16 = 0;
              goto LABEL_55;
            }
LABEL_26:
            v38 = 0;
            v39 = 0;
            v37 = 0;
            UsableInterfaceList = CFStringCopyUTF8CString();
            if ((_DWORD)UsableInterfaceList)
            {
              v22 = UsableInterfaceList;
            }
            else
            {
              UsableInterfaceList = CreateUsableInterfaceList();
              if (!(_DWORD)UsableInterfaceList)
              {
                v18 = CFArrayCreateMutable(v8, 0, MEMORY[0x1E0C9B378]);
                v16 = v18;
                if (v18)
                {
                  if (v15)
                    CFArrayAppendValue(v18, v15);
                  v19 = v39;
                  if (v39)
                  {
                    while (1)
                    {
                      memset(v36, 0, 28);
                      SockAddrCopy();
                      v35[0] = v36[0];
                      *(__int128 *)((char *)v35 + 12) = *(__int128 *)((char *)v36 + 12);
                      v18 = (__CFArray *)APSNetworkAddressCreateWithSocketAddr((uint64_t)v8, v35, &v37);
                      if ((_DWORD)v18)
                      {
                        v22 = (uint64_t)v18;
                        goto LABEL_76;
                      }
                      v20 = v37;
                      SockAddrSetPort();
                      v21 = v15;
                      if (v20 != v15)
                      {
                        v21 = v20;
                        if (v15 && v20 && CFEqual(v20, v15))
                        {
LABEL_39:
                          CFRelease(v21);
                          v37 = 0;
                          goto LABEL_40;
                        }
                        CFArrayAppendValue(v16, v20);
                      }
                      if (v21)
                        goto LABEL_39;
LABEL_40:
                      v19 = (_QWORD *)*v19;
                      if (!v19)
                      {
                        v22 = 0;
                        v23 = v16;
                        goto LABEL_42;
                      }
                    }
                  }
                  v24 = 0;
                  v22 = 0;
LABEL_47:
                  if (v38)
                    free(v38);
                  if (v37)
                    CFRelease(v37);
                  if (v24)
                    CFRelease(v24);
                  if ((_DWORD)v22)
                  {
                    v26 = v22;
                    goto LABEL_60;
                  }
                  CFDictionarySetValue(v10, CFSTR("Addresses"), v16);
                  CFDictionarySetValue(v10, CFSTR("InterfaceName"), v14);
LABEL_55:
                  v25 = *(uint64_t (**)(uint64_t, __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 72);
                  if (v25)
                  {
                    v22 = v25(a1, v10);
                    if (!(_DWORD)v22)
                    {
LABEL_61:
                      CFRelease(v10);
                      goto LABEL_62;
                    }
                  }
                  else
                  {
                    v22 = 4294954514;
                  }
                  v26 = v22;
LABEL_60:
                  APSLogErrorAt(v26);
                  goto LABEL_61;
                }
                v22 = 4294895326;
LABEL_76:
                APSLogErrorAt((uint64_t)v18);
                v23 = 0;
LABEL_43:
                if (v39)
                  ReleaseUsableInterfaceList();
                v24 = v16;
                v16 = v23;
                goto LABEL_47;
              }
              v22 = UsableInterfaceList;
            }
            APSLogErrorAt(UsableInterfaceList);
            v23 = 0;
LABEL_42:
            v16 = 0;
            goto LABEL_43;
          }
          if (!CFEqual(cf1, a3))
          {
            v15 = 0;
            if (a2)
              goto LABEL_23;
            goto LABEL_26;
          }
        }
        v36[0] = *a4;
        *(__int128 *)((char *)v36 + 12) = *(__int128 *)((char *)a4 + 12);
        v13 = APSNetworkAddressCreateWithSocketAddr((uint64_t)v8, v36, &v32);
        if (!(_DWORD)v13)
        {
          v15 = v32;
          SockAddrSetPort();
          goto LABEL_22;
        }
        v22 = v13;
      }
      APSLogErrorAt(v13);
      v16 = 0;
      goto LABEL_61;
    }
    v22 = 4294895326;
    APSLogErrorAt(0);
    v16 = 0;
  }
  else
  {
    APSLogErrorAt(0);
    v16 = 0;
    v22 = 4294895322;
  }
LABEL_62:
  if (value)
    CFRelease(value);
  if (cf)
    CFRelease(cf);
  if (v30)
    CFRelease(v30);
  if (v32)
    CFRelease(v32);
  if (cf1)
    CFRelease(cf1);
  if (v16)
    CFRelease(v16);
  return v22;
}

CFMutableDictionaryRef APSNetworkTimeCopyAsDictionary()
{
  CFMutableDictionaryRef Mutable;
  uint64_t v1;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v1 = FigCFDictionarySetInt32();
    if ((_DWORD)v1
      || (v1 = FigCFDictionarySetInt64(), (_DWORD)v1)
      || (v1 = FigCFDictionarySetInt64(), (_DWORD)v1)
      || (v1 = FigCFDictionarySetInt32(), (_DWORD)v1))
    {
      APSLogErrorAt(v1);
      CFRelease(Mutable);
      return 0;
    }
  }
  return Mutable;
}

__n128 APSNetworkTimeMakeFromDictionary@<Q0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeID v3;
  __n128 result;

  *(_QWORD *)(a2 + 16) = 0x100000000;
  *(_OWORD *)a2 = kAPSNetworkTimeInvalid;
  if (!a1
    || (v3 = CFGetTypeID(a1), v3 != CFDictionaryGetTypeID())
    || !FigCFDictionaryGetInt32IfPresent()
    || !FigCFDictionaryGetInt64IfPresent()
    || !FigCFDictionaryGetInt64IfPresent()
    || !FigCFDictionaryGetInt32IfPresent())
  {
    APSLogErrorAt(0);
    *(_QWORD *)(a2 + 16) = 0x100000000;
    result = (__n128)kAPSNetworkTimeInvalid;
    *(_OWORD *)a2 = kAPSNetworkTimeInvalid;
  }
  return result;
}

uint64_t APSNetworkClockReportRTCMetrics(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  int v3;
  CFTypeRef v4;
  uint64_t v5;
  CFTypeRef cf;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  cf = 0;
  v2 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (v2)
  {
    v3 = v2(a1, CFSTR("Metrics"), *MEMORY[0x1E0C9AE00], &cf);
    *((_DWORD *)v9 + 6) = v3;
    v4 = cf;
    if (!v3)
    {
      CFDictionaryApplyBlock();
      v4 = cf;
    }
    if (v4)
      CFRelease(v4);
  }
  else
  {
    *((_DWORD *)v9 + 6) = -12782;
  }
  v5 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v5;
}

uint64_t APSEndpointStreamAudioHoseSBARMockCreate(uint64_t a1, const void *a2, const __CFDictionary *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t DerivedStorage;
  int v9;
  const void *Value;
  const void *v11;
  uint64_t SInt32;
  BOOL v13;
  uint64_t v14;
  char label[64];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a4)
  {
    APSLogErrorAt(0);
    return 4294894965;
  }
  if (hoseSBARMock_getClassID_sRegisterOnce != -1)
    dispatch_once_f(&hoseSBARMock_getClassID_sRegisterOnce, &hoseSBARMock_getClassID_sClassID, (dispatch_function_t)hoseSBARMock_registerBaseClass);
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
  {
    v14 = v7;
LABEL_29:
    APSLogErrorAt(v7);
    return v14;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  SNPrintF();
  v7 = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(DerivedStorage + 48) = v7;
  if (!v7)
  {
    v14 = 4294894966;
    goto LABEL_29;
  }
  SNPrintF();
  v7 = (uint64_t)dispatch_queue_create(label, 0);
  *(_QWORD *)(DerivedStorage + 8) = v7;
  if (!v7)
  {
    v14 = 4294894966;
    goto LABEL_29;
  }
  if (a3)
  {
    v9 = CFDictionaryContainsKey(a3, CFSTR("StreamID"));
    Value = a2;
    if (v9)
      Value = CFDictionaryGetValue(a3, CFSTR("StreamID"));
    *(_QWORD *)(DerivedStorage + 24) = CFRetain(Value);
    if (CFDictionaryContainsKey(a3, CFSTR("ClusterType")))
    {
      v11 = CFDictionaryGetValue(a3, CFSTR("ClusterType"));
      SInt32 = (uint64_t)CFRetain(v11);
    }
    else
    {
      SInt32 = FigCFNumberCreateSInt32();
    }
    *(_QWORD *)(DerivedStorage + 32) = SInt32;
    if (CFDictionaryContainsKey(a3, CFSTR("ReceiverShouldDetermineAnchor")))
      v13 = CFDictionaryGetInt64() != 0;
    else
      v13 = 0;
    *(_BYTE *)(DerivedStorage + 40) = v13;
  }
  *(_QWORD *)(DerivedStorage + 16) = a2;
  if (a2)
    CFRetain(a2);
  *a4 = 0;
  return 0;
}

uint64_t hoseSBARMock_registerBaseClass()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t hoseSBARMock_Invalidate(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    v3 = *(NSObject **)(DerivedStorage + 48);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __hoseSBARMock_Invalidate_block_invoke;
    block[3] = &__block_descriptor_tmp_185;
    block[4] = a1;
    dispatch_sync(v3, block);
  }
  return 0;
}

void hoseSBARMock_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  hoseSBARMock_invalidateInternal();
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
    CFRelease(v1);
}

__CFString *hoseSBARMock_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APSEndpointStreamAudioHoseSBARMock %p '%@'>"), a1, *(_QWORD *)(DerivedStorage + 16));
  return Mutable;
}

uint64_t hoseSBARMock_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFNumberRef *a4)
{
  uint64_t DerivedStorage;
  CFNumberRef v8;
  uint64_t v9;
  CFTypeRef v10;
  CFTypeRef *v11;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt(0);
    return 4294894964;
  }
  if (!a2)
  {
    v9 = 4294894965;
LABEL_35:
    APSLogErrorAt(0);
    return v9;
  }
  if (!a4)
  {
    v9 = 4294894965;
    goto LABEL_35;
  }
  if (CFEqual(a2, CFSTR("APSEndpointStreamAudioHoseProtocolProperty_AudioBufferSize")))
  {
    valuePtr = 51200;
    v8 = CFNumberCreate(a3, kCFNumberSInt32Type, &valuePtr);
    *a4 = v8;
    if (v8)
      return 0;
    APSLogErrorAt(0);
    return 4294894966;
  }
  if (CFEqual(a2, CFSTR("APSEndpointStreamAudioHoseProtocolProperty_Name")))
  {
    v10 = *(CFTypeRef *)(DerivedStorage + 16);
    if (!v10)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4788]))
  {
    v10 = *(CFTypeRef *)(DerivedStorage + 24);
    if (!v10)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (CFEqual(a2, CFSTR("ClusterType")))
  {
    v10 = *(CFTypeRef *)(DerivedStorage + 32);
    if (!v10)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (CFEqual(a2, CFSTR("APSEndpointStreamAudioHoseProtocolProperty_SupportsReceiverChoosesAnchor")))
  {
    v11 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if (!*(_BYTE *)(DerivedStorage + 40))
      v11 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    v10 = *v11;
LABEL_24:
    v10 = CFRetain(v10);
LABEL_25:
    v9 = 0;
    *a4 = (CFNumberRef)v10;
    return v9;
  }
  if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return 4294954512;
}

uint64_t hoseSBARMock_SetProperty()
{
  _BYTE *DerivedStorage;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*DerivedStorage)
  {
    APSLogErrorAt(0);
    return 4294894964;
  }
  else
  {
    if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 30
      && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 4294954512;
  }
}

uint64_t hoseSBARMock_audioHoseSendAudio(const void *a1, int a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFTypeRef v7;
  CFTypeRef v8;
  _QWORD v10[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2 == 1734700576)
  {
    if (a1)
      v7 = CFRetain(a1);
    else
      v7 = 0;
    v10[0] = v7;
    if (a3)
      v8 = CFRetain(a3);
    else
      v8 = 0;
    v10[1] = v8;
    APSDispatchAsyncFHelper(*(NSObject **)(DerivedStorage + 48), (uint64_t)hoseSBARMock_hoseSendAudioDataDispatchInternal, v10, 0x10uLL);
    return 0;
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960561;
  }
}

uint64_t hoseSBARMock_audioHoseTimeAnnounce(const void *a1, int a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef v10;
  uint64_t v11;
  CFTypeRef v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = 0;
  if (a1)
    v7 = CFRetain(a1);
  else
    v7 = 0;
  v10 = v7;
  LODWORD(v11) = a2;
  if (a3)
    v8 = CFRetain(a3);
  else
    v8 = 0;
  v12 = v8;
  APSDispatchAsyncFHelper(*(NSObject **)(DerivedStorage + 48), (uint64_t)hoseSBARMock_audioHoseTimeAnnounceDispatchInternal, &v10, 0x18uLL);
  return 0;
}

uint64_t hoseSBARMock_audioHoseFlush(const void *a1, int a2, _OWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  CFTypeRef v11;
  CFTypeRef v13;
  int v14;
  _BYTE v15[28];
  uint64_t v16;
  uint64_t v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
    v11 = CFRetain(a1);
  else
    v11 = 0;
  v13 = v11;
  v14 = a2;
  *(_OWORD *)v15 = *a3;
  *(_OWORD *)&v15[12] = *(_OWORD *)((char *)a3 + 12);
  v16 = a4;
  v17 = a5;
  if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APSDispatchAsyncFHelper(*(NSObject **)(DerivedStorage + 48), (uint64_t)hoseSBARMock_audioHoseFlushCallbackDispatchInternal, &v13, 0x38uLL);
  return 0;
}

uint64_t hoseSBARMock_audioHoseFlushWithinSampleRange(const void *a1, int a2, _OWORD *a3, int a4, _OWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t DerivedStorage;
  CFTypeRef v16;
  int v17;
  _BYTE v18[28];
  int v19;
  _BYTE v20[28];
  uint64_t v21;
  uint64_t v22;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16 = CFRetain(a1);
  v17 = a2;
  *(_OWORD *)v18 = *a3;
  *(_OWORD *)&v18[12] = *(_OWORD *)((char *)a3 + 12);
  v19 = a4;
  *(_OWORD *)v20 = *a5;
  *(_OWORD *)&v20[12] = *(_OWORD *)((char *)a5 + 12);
  v21 = a6;
  v22 = a7;
  if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APSDispatchAsyncFHelper(*(NSObject **)(DerivedStorage + 48), (uint64_t)hoseSBARMock_audioHoseFlushWithinSampleRangeDispatchInternal, &v16, 0x58uLL);
  return 0;
}

uint64_t hoseSBARMock_audioHoseNotifyAudioAvailable(const void *a1)
{
  uint64_t DerivedStorage;
  CFTypeRef v3;
  CFTypeRef v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
    v3 = CFRetain(a1);
  else
    v3 = 0;
  v5 = v3;
  APSDispatchAsyncFHelper(*(NSObject **)(DerivedStorage + 48), (uint64_t)hoseSBARMock_notifyAudioDataAvailableEngineCallbackDispatchInternal, &v5, 8uLL);
  return 0;
}

uint64_t hoseSBARMock_audioHoseSetRateAndAnchorTime(const void *a1, int a2, _OWORD *a3, uint64_t a4, _OWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t DerivedStorage;
  CFTypeRef v15;
  CFTypeRef v17;
  int v18;
  _DWORD v19[11];
  uint64_t v20;
  _BYTE v21[32];
  uint64_t v22;
  uint64_t v23;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)&v21[24] = 0;
  if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a1)
    v15 = CFRetain(a1);
  else
    v15 = 0;
  v17 = v15;
  v18 = a2;
  *(_OWORD *)v19 = *a3;
  *(_OWORD *)&v19[3] = *(_OWORD *)((char *)a3 + 12);
  *(_OWORD *)&v19[7] = *(_OWORD *)a4;
  v20 = *(_QWORD *)(a4 + 16);
  *(_OWORD *)v21 = *a5;
  *(_OWORD *)&v21[12] = *(_OWORD *)((char *)a5 + 12);
  v22 = a6;
  v23 = a7;
  APSDispatchAsyncFHelper(*(NSObject **)(DerivedStorage + 48), (uint64_t)hoseSBARMock_audioHoseSetRateAndAnchorTimeCallbackDispatchInternal, &v17, 0x70uLL);
  return 0;
}

uint64_t hoseSBARMock_audioHoseSetCallbacks(const void *a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  _QWORD v9[8];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  if (a3)
    CFRetain(a3);
  v7 = *(NSObject **)(DerivedStorage + 48);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = __hoseSBARMock_audioHoseSetCallbacks_block_invoke;
  v9[3] = &__block_descriptor_tmp_38;
  v9[4] = DerivedStorage;
  v9[5] = a2;
  v9[6] = a3;
  v9[7] = a1;
  dispatch_async(v7, v9);
  return 0;
}

uint64_t hoseSBARMock_audioHoseApplyVolumeFade(uint64_t a1, unsigned int a2, CMTime *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  CMTime time2;
  uint64_t v12;
  unsigned int v13;
  __int128 v14;
  _BYTE v15[12];
  CMTime time1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)&v15[4] = 0;
  if (a2 >= 3)
  {
    v9 = 4294894965;
LABEL_13:
    APSLogErrorAt(0);
    return v9;
  }
  v7 = DerivedStorage;
  time1 = *a3;
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (CMTimeCompare(&time1, &time2) <= 0)
  {
    v9 = 4294894965;
    goto LABEL_13;
  }
  if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
  {
    time1 = *a3;
    CMTimeGetSeconds(&time1);
    LogPrintF();
  }
  v12 = a1;
  v13 = a2;
  v14 = *(_OWORD *)&a3->value;
  *(_QWORD *)v15 = a3->epoch;
  v8 = *(NSObject **)(v7 + 48);
  LODWORD(time2.value) = 0;
  time1.value = (CMTimeValue)&time2;
  *(_QWORD *)&time1.timescale = &v12;
  time1.epoch = (CMTimeEpoch)hoseSBARMock_audioHoseApplyVolumeFadeCallbackDispatchInternal;
  if (!v8)
    return 4294960591;
  dispatch_sync_f(v8, &time1, (dispatch_function_t)APSDispatchSyncTaskCallback);
  return LODWORD(time2.value);
}

uint64_t hoseSBARMock_audioHoseSetRate(const void *a1, int a2, _OWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  CFTypeRef v11;
  CFTypeRef v13;
  int v14;
  _BYTE v15[28];
  uint64_t v16;
  uint64_t v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a1)
    v11 = CFRetain(a1);
  else
    v11 = 0;
  v13 = v11;
  v14 = a2;
  *(_OWORD *)v15 = *a3;
  *(_OWORD *)&v15[12] = *(_OWORD *)((char *)a3 + 12);
  v16 = a4;
  v17 = a5;
  APSDispatchAsyncFHelper(*(NSObject **)(DerivedStorage + 48), (uint64_t)hoseSBARMock_audioHoseSetRateCallbackDispatchInternal, &v13, 0x38uLL);
  return 0;
}

uint64_t hoseSBARMock_audioHoseGetAnchor(const void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  CFTypeRef v9;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = 0;
  if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a1)
    v9 = CFRetain(a1);
  else
    v9 = 0;
  v11 = v9;
  LODWORD(v12) = a2;
  v13 = a3;
  v14 = a4;
  APSDispatchAsyncFHelper(*(NSObject **)(DerivedStorage + 48), (uint64_t)hoseSBARMock_audioHoseGetAnchorCallbackDispatchInternal, &v11, 0x38uLL);
  return 0;
}

uint64_t hoseSBARMock_audioHoseSetCryptor(const void *a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  CFTypeRef v11;
  CFTypeRef v12;
  _QWORD v14[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a1)
    v11 = CFRetain(a1);
  else
    v11 = 0;
  v14[0] = v11;
  v14[1] = a2;
  if (a3)
    v12 = CFRetain(a3);
  else
    v12 = 0;
  v14[2] = v12;
  v14[3] = a4;
  v14[4] = a5;
  APSDispatchAsyncFHelper(*(NSObject **)(DerivedStorage + 48), (uint64_t)hoseSBARMock_audioHoseSetCryptorCallbackDispatchInternal, v14, 0x28uLL);
  return 0;
}

uint64_t hoseSBARMock_audioHoseSetMagicCookie(const void *a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  CFTypeRef v11;
  CFTypeRef v12;
  _QWORD v14[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a1)
    v11 = CFRetain(a1);
  else
    v11 = 0;
  v14[0] = v11;
  v14[1] = a2;
  if (a3)
    v12 = CFRetain(a3);
  else
    v12 = 0;
  v14[2] = v12;
  v14[3] = a4;
  v14[4] = a5;
  APSDispatchAsyncFHelper(*(NSObject **)(DerivedStorage + 48), (uint64_t)hoseSBARMock_audioHoseSetMagicCookieCallbackDispatchInternal, v14, 0x28uLL);
  return 0;
}

void hoseSBARMock_audioHoseSetMagicCookieCallbackDispatchInternal(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD, _QWORD, _QWORD);
  const void *v3;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))a1[3];
  if (v2)
    v2(*a1, a1[1], 0, a1[4]);
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v3 = (const void *)a1[2];
  if (v3)
    CFRelease(v3);
}

void hoseSBARMock_audioHoseSetCryptorCallbackDispatchInternal(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD, _QWORD, _QWORD);
  const void *v3;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))a1[3];
  if (v2)
    v2(*a1, a1[1], 0, a1[4]);
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v3 = (const void *)a1[2];
  if (v3)
    CFRelease(v3);
}

void hoseSBARMock_audioHoseGetAnchorCallbackDispatchInternal(uint64_t a1)
{
  int v2;
  int v3;
  BOOL v4;
  char v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  void (*v11)(CFTypeRef, _BYTE *, __int128 *, uint64_t, uint64_t);
  CFTypeRef v12;
  uint64_t v13;
  _BYTE v14[28];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v18 = 0;
  v17 = 0;
  v2 = *(_DWORD *)(a1 + 8);
  CMBaseObjectGetDerivedStorage();
  if (v2 == 1)
  {
    CMTimeMake((CMTime *)v14, 0, 1000);
    v3 = *(_DWORD *)&v14[12];
    v4 = (v14[12] & 0x1D) == 1 && *(_QWORD *)&v14[16] == 0;
    v5 = v4;
    if (v4)
    {
      *(_QWORD *)&v15 = *(_QWORD *)v14;
      DWORD2(v15) = *(_DWORD *)&v14[8];
      if ((v14[12] & 0x1D) == 1)
        v6 = v5;
      else
        v6 = 0;
      if ((v6 & 1) != 0)
      {
        v7 = 0;
        v17 = v15;
        v18 = DWORD2(v15);
        v8 = xmmword_1C96DA7D0;
        v9 = 0;
        v10 = 2;
        goto LABEL_17;
      }
    }
    else
    {
      DWORD2(v15) = 0;
      *(_QWORD *)&v15 = 0;
    }
    v7 = 4294894965;
  }
  else
  {
    v7 = 4294894965;
  }
  APSLogErrorAt(0);
  v10 = 0;
  v3 = 0;
  v9 = 0x100000000;
  v8 = 0uLL;
LABEL_17:
  v11 = *(void (**)(CFTypeRef, _BYTE *, __int128 *, uint64_t, uint64_t))(a1 + 16);
  if (v11)
  {
    v12 = *(CFTypeRef *)a1;
    v13 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)v14 = v10;
    *(_QWORD *)&v14[4] = v17;
    *(_DWORD *)&v14[12] = v18;
    *(_DWORD *)&v14[16] = v3;
    *(_QWORD *)&v14[20] = 0;
    v15 = v8;
    v16 = v9;
    v11(v12, v14, &v15, v7, v13);
  }
  CFRelease(*(CFTypeRef *)a1);
}

void hoseSBARMock_audioHoseSetRateCallbackDispatchInternal(uint64_t a1)
{
  int v2;
  uint64_t v3;
  void (*v4)(CFTypeRef, _QWORD *, __int128 *, uint64_t, uint64_t);
  CFTypeRef v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v9[3];
  int v10;

  v2 = *(_DWORD *)(a1 + 8);
  CMBaseObjectGetDerivedStorage();
  if (v2 == 1)
  {
    v3 = 0;
  }
  else
  {
    APSLogErrorAt(0);
    v3 = 4294894965;
  }
  v4 = *(void (**)(CFTypeRef, _QWORD *, __int128 *, uint64_t, uint64_t))(a1 + 40);
  if (v4)
  {
    v5 = *(CFTypeRef *)a1;
    v6 = *(_QWORD *)(a1 + 48);
    memset(v9, 0, sizeof(v9));
    v10 = 0;
    v7 = kAPSNetworkTimeInvalid;
    v8 = 0x100000000;
    v4(v5, v9, &v7, v3, v6);
  }
  CFRelease(*(CFTypeRef *)a1);
}

uint64_t hoseSBARMock_audioHoseApplyVolumeFadeCallbackDispatchInternal()
{
  CMBaseObjectGetDerivedStorage();
  return 0;
}

void __hoseSBARMock_audioHoseSetCallbacks_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  *(_QWORD *)(a1[4] + 56) = a1[5];
  v2 = a1[4];
  v3 = *(const void **)(v2 + 64);
  v4 = (const void *)a1[6];
  *(_QWORD *)(v2 + 64) = v4;
  if (v4)
    CFRetain(v4);
  if (v3)
    CFRelease(v3);
  v5 = (const void *)a1[7];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[6];
  if (v6)
    CFRelease(v6);
}

void hoseSBARMock_audioHoseSetRateAndAnchorTimeCallbackDispatchInternal(uint64_t a1)
{
  int v2;
  CFTypeRef v3;
  CFTypeRef v4;
  uint64_t v5;
  void (*v6)(CFTypeRef, uint64_t, _BYTE *, _BYTE *, _OWORD *, uint64_t, uint64_t);
  CFTypeRef v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[28];
  _OWORD v11[2];
  _OWORD v12[2];
  _BYTE v13[28];

  memset(v12, 0, 28);
  v2 = *(_DWORD *)(a1 + 8);
  v11[0] = *(_OWORD *)(a1 + 12);
  *(_OWORD *)((char *)v11 + 12) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)v10 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v10[12] = *(_OWORD *)(a1 + 76);
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
  {
    APSLogErrorAt(0);
    v5 = 4294894964;
  }
  else if (v2)
  {
    *(_OWORD *)v13 = v11[0];
    *(_OWORD *)&v13[12] = *(_OWORD *)((char *)v11 + 12);
    CMBaseObjectGetDerivedStorage();
    v3 = APSAudioTransportTimeCopyDebugDesc((uint64_t)v13);
    *(_OWORD *)v13 = *(_OWORD *)v10;
    *(_OWORD *)&v13[12] = *(_OWORD *)&v10[12];
    v4 = APSAudioTransportTimeCopyDebugDesc((uint64_t)v13);
    if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50
      && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (v3)
      CFRelease(v3);
    if (v4)
      CFRelease(v4);
    v5 = 0;
  }
  else
  {
    CMBaseObjectGetDerivedStorage();
    if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50
      && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v5 = 0;
    memset(v12, 0, 28);
  }
  v6 = *(void (**)(CFTypeRef, uint64_t, _BYTE *, _BYTE *, _OWORD *, uint64_t, uint64_t))(a1 + 96);
  if (v6)
  {
    v7 = *(CFTypeRef *)a1;
    v8 = *(unsigned int *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 104);
    *(_OWORD *)v13 = *(_OWORD *)(a1 + 12);
    *(_OWORD *)&v13[12] = *(_OWORD *)(a1 + 24);
    *(_OWORD *)v10 = *(_OWORD *)(a1 + 40);
    *(_QWORD *)&v10[16] = *(_QWORD *)(a1 + 56);
    v11[0] = v12[0];
    *(_OWORD *)((char *)v11 + 12) = *(_OWORD *)((char *)v12 + 12);
    v6(v7, v8, v13, v10, v11, v5, v9);
  }
  CFRelease(*(CFTypeRef *)a1);
}

void hoseSBARMock_notifyAudioDataAvailableEngineCallbackDispatchInternal(CFTypeRef *a1)
{
  _BYTE *DerivedStorage;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!*DerivedStorage)
    DerivedStorage[72] = 1;
  CFRelease(*a1);
}

void hoseSBARMock_audioHoseFlushWithinSampleRangeDispatchInternal(uint64_t a1)
{
  CFTypeRef v2;
  int v3;
  int v4;
  uint64_t v5;
  _BYTE *DerivedStorage;
  CFTypeRef v7;
  CFTypeRef v8;
  _DWORD *v9;
  _DWORD *v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[28];
  _BYTE v16[28];
  _BYTE v17[48];
  int v18;
  _BYTE v19[28];
  uint64_t v20;
  uint64_t v21;

  if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(CFTypeRef *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)v16 = *(_OWORD *)(a1 + 12);
  *(_OWORD *)&v16[12] = *(_OWORD *)(a1 + 24);
  *(_OWORD *)v15 = *(_OWORD *)(a1 + 44);
  *(_OWORD *)&v15[12] = *(_OWORD *)(a1 + 56);
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  *(_OWORD *)v17 = *(_OWORD *)v16;
  *(_OWORD *)&v17[12] = *(_OWORD *)&v16[12];
  v7 = APSAudioTransportTimeCopyDebugDesc((uint64_t)v17);
  *(_OWORD *)v17 = *(_OWORD *)v15;
  *(_OWORD *)&v17[12] = *(_OWORD *)&v15[12];
  v8 = APSAudioTransportTimeCopyDebugDesc((uint64_t)v17);
  if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*DerivedStorage)
  {
    v11 = -72332;
    APSLogErrorAt(0);
    v10 = 0;
  }
  else
  {
    v9 = malloc_type_calloc(1uLL, 0x78uLL, 0x10A004079E0F624uLL);
    v10 = v9;
    if (v9)
    {
      v9[8] = 0;
      v11 = 0;
      *(_QWORD *)v9 = CFRetain(v2);
      *(_OWORD *)(v10 + 13) = *(_OWORD *)v16;
      *((_OWORD *)v10 + 4) = *(_OWORD *)&v16[12];
      *(_OWORD *)(v10 + 21) = *(_OWORD *)v15;
      *((_OWORD *)v10 + 6) = *(_OWORD *)&v15[12];
      v12 = *MEMORY[0x1E0CA2E18];
      *((_QWORD *)v10 + 3) = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      v10[12] = v3;
      v10[20] = v4;
      *(_OWORD *)(v10 + 2) = v12;
      *((_QWORD *)v10 + 5) = v5;
      *((_QWORD *)v10 + 14) = v14;
    }
    else
    {
      APSLogErrorAt(0);
      v11 = -72330;
    }
  }
  if (v7)
    CFRelease(v7);
  if (v8)
    CFRelease(v8);
  if (v5)
  {
    v13 = CMBaseObjectGetDerivedStorage();
    v20 = 0;
    if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50
      && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_QWORD *)v17 = CFRetain(v2);
    *(_QWORD *)&v17[8] = v5;
    *(_DWORD *)&v17[16] = v3;
    *(_OWORD *)&v17[20] = *(_OWORD *)v16;
    *(_OWORD *)&v17[32] = *(_OWORD *)&v16[12];
    v18 = v4;
    *(_OWORD *)v19 = *(_OWORD *)v15;
    *(_OWORD *)&v19[12] = *(_OWORD *)&v15[12];
    LODWORD(v20) = v11;
    v21 = v14;
    APSDispatchAsyncFHelper(*(NSObject **)(v13 + 8), (uint64_t)hoseSBARMock_callAudioEngineFlushWithinSampleRangeCompletionHandlerCaller, v17, 0x60uLL);
  }
  if (v10)
  {
    if (*(_QWORD *)v10)
      CFRelease(*(CFTypeRef *)v10);
    free(v10);
  }
  CFRelease(*(CFTypeRef *)a1);
}

void hoseSBARMock_callAudioEngineFlushWithinSampleRangeCompletionHandlerCaller(uint64_t a1)
{
  CFTypeRef v2;
  void (*v3)(CFTypeRef, uint64_t, _OWORD *, uint64_t, _OWORD *, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD v8[2];
  _OWORD v9[2];

  if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(CFTypeRef *)a1;
  v3 = *(void (**)(CFTypeRef, uint64_t, _OWORD *, uint64_t, _OWORD *, uint64_t, uint64_t))(a1 + 8);
  v4 = *(unsigned int *)(a1 + 16);
  v5 = *(unsigned int *)(a1 + 48);
  v6 = *(unsigned int *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 88);
  v9[0] = *(_OWORD *)(a1 + 20);
  *(_OWORD *)((char *)v9 + 12) = *(_OWORD *)(a1 + 32);
  v8[0] = *(_OWORD *)(a1 + 52);
  *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)(a1 + 64);
  v3(v2, v4, v9, v5, v8, v6, v7);
  CFRelease(*(CFTypeRef *)a1);
}

void hoseSBARMock_audioHoseFlushCallbackDispatchInternal(uint64_t a1)
{
  CFTypeRef v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *DerivedStorage;
  int v7;
  uint64_t v8;
  _BYTE v9[28];
  _QWORD v10[2];
  int v11;
  _BYTE v12[28];
  uint64_t v13;
  uint64_t v14;

  if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(CFTypeRef *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)v9 = *(_OWORD *)(a1 + 12);
  *(_OWORD *)&v9[12] = *(_OWORD *)(a1 + 24);
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*DerivedStorage)
  {
    APSLogErrorAt(0);
    v7 = -72332;
    if (!v5)
      goto LABEL_16;
  }
  else
  {
    v7 = 0;
    if (!v5)
      goto LABEL_16;
  }
  v8 = CMBaseObjectGetDerivedStorage();
  v13 = 0;
  if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v10[0] = CFRetain(v2);
  v10[1] = v5;
  v11 = v3;
  *(_OWORD *)v12 = *(_OWORD *)v9;
  *(_OWORD *)&v12[12] = *(_OWORD *)&v9[12];
  LODWORD(v13) = v7;
  v14 = v4;
  APSDispatchAsyncFHelper(*(NSObject **)(v8 + 8), (uint64_t)hoseSBARMock_callAudioHoseFlushCompletionHandlerCaller, v10, 0x40uLL);
LABEL_16:
  CFRelease(*(CFTypeRef *)a1);
}

void hoseSBARMock_callAudioHoseFlushCompletionHandlerCaller(uint64_t a1)
{
  CFTypeRef v2;
  void (*v3)(CFTypeRef, uint64_t, _OWORD *, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD v7[2];

  if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(CFTypeRef *)a1;
  v3 = *(void (**)(CFTypeRef, uint64_t, _OWORD *, uint64_t, uint64_t))(a1 + 8);
  v4 = *(unsigned int *)(a1 + 16);
  v5 = *(unsigned int *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7[0] = *(_OWORD *)(a1 + 20);
  *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)(a1 + 32);
  v3(v2, v4, v7, v5, v6);
  CFRelease(*(CFTypeRef *)a1);
}

void hoseSBARMock_audioHoseTimeAnnounceDispatchInternal(uint64_t a1)
{
  const void *v2;

  CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
}

void hoseSBARMock_hoseSendAudioDataDispatchInternal(uint64_t a1)
{
  const void *v2;
  CFTypeRef v3;
  uint64_t DerivedStorage;
  const void *v5;
  _QWORD v6[2];

  if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v3 = *(CFTypeRef *)a1;
  v2 = *(const void **)(a1 + 8);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6[0] = v3;
  v6[1] = v2;
  if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!*(_BYTE *)DerivedStorage)
  {
    CFRetain(v3);
    CFRetain(v2);
    APSDispatchAsyncFHelper(*(NSObject **)(DerivedStorage + 48), (uint64_t)hoseSBARMock_sbarEnqueueSingleAudioBBuffDispatchFunction, v6, 0x10uLL);
  }
  CFRelease(*(CFTypeRef *)a1);
  v5 = *(const void **)(a1 + 8);
  if (v5)
    CFRelease(v5);
}

void hoseSBARMock_sbarEnqueueSingleAudioBBuffDispatchFunction(uint64_t a1)
{
  const void *v2;

  if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  else if (!a1)
  {
    APSLogErrorAt(0);
    return;
  }
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
}

__CFString *hoseSBARMock_audioHoseProtocolCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("APSEndpointStreamAudioHoseSBARMock <APSEndpointStreamAudioHoseProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t hoseSBARMock_invalidateInternal()
{
  uint64_t result;
  _BYTE *v1;

  result = CMBaseObjectGetDerivedStorage();
  v1 = (_BYTE *)result;
  if (gLogCategory_APSEndpointStreamAudioHoseSBARMock <= 50)
  {
    if (gLogCategory_APSEndpointStreamAudioHoseSBARMock != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
      result = LogPrintF();
  }
  *v1 = 1;
  return result;
}

uint64_t APSEndpointStreamAudioHoseSBARMockInvalidate(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);

  if (!a1)
    return 4294954516;
  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
  if (v2)
    return v2(a1);
  else
    return 4294954514;
}

uint64_t APSPowerAssertionGetTypeID()
{
  if (APSPowerAssertionGetTypeID_once != -1)
    dispatch_once(&APSPowerAssertionGetTypeID_once, &__block_literal_global_188);
  return APSPowerAssertionGetTypeID_typeID;
}

void _PowerAssertionFinalize(uint64_t a1)
{
  IOPMAssertionID v2;
  IOPMAssertionID v3;
  NSObject *v4;
  const void *v5;
  const void *v6;

  v2 = *(_DWORD *)(a1 + 48);
  if (v2)
    IOPMAssertionRelease(v2);
  v3 = *(_DWORD *)(a1 + 56);
  if (v3)
    IOPMAssertionRelease(v3);
  v4 = *(NSObject **)(a1 + 16);
  if (v4)
    dispatch_release(v4);
  v5 = *(const void **)(a1 + 40);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 64);
  if (v6)
    CFRelease(v6);
}

uint64_t APSPowerAssertionCreate(const __CFAllocator *a1, const void *a2, double a3)
{
  uint64_t Instance;
  uint64_t v6;
  uint64_t *v7;
  uint64_t SInt32;
  uint64_t v9;
  uint64_t Float64;
  CFTypeRef v11;
  __CFDictionary *Mutable;
  __CFDictionary *v13;
  uint64_t v14;
  const void *v15;
  const void *v16;

  if (a3 < 1.0)
  {
    APSLogErrorAt(0);
    return 0;
  }
  if (APSPowerAssertionGetTypeID_once != -1)
    dispatch_once(&APSPowerAssertionGetTypeID_once, &__block_literal_global_188);
  Instance = _CFRuntimeCreateInstance();
  v6 = Instance;
  if (!Instance)
  {
    APSLogErrorAt(0);
    return v6;
  }
  *(_OWORD *)(Instance + 16) = 0u;
  v7 = (uint64_t *)(Instance + 16);
  *(_OWORD *)(Instance + 48) = 0u;
  *(_QWORD *)(Instance + 64) = 0;
  *(_OWORD *)(Instance + 32) = 0u;
  SInt32 = FigCFNumberCreateSInt32();
  *(_QWORD *)(v6 + 24) = SInt32;
  if (!SInt32
    || (v9 = FigCFNumberCreateSInt32(), (*(_QWORD *)(v6 + 32) = v9) == 0)
    || (Float64 = FigCFNumberCreateFloat64(), (*(_QWORD *)(v6 + 40) = Float64) == 0)
    || (!a2 ? (v11 = 0) : (v11 = CFRetain(a2)),
        *(_QWORD *)(v6 + 64) = v11,
        (Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0))
  {
    APSLogErrorAt(0);
    CFRelease((CFTypeRef)v6);
    return 0;
  }
  v13 = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("AssertType"), CFSTR("PreventUserIdleSystemSleep"));
  CFDictionarySetInt64();
  v14 = (uint64_t)CFStringCreateWithFormat(a1, 0, CFSTR("%@.counted"), a2);
  if (!v14)
    goto LABEL_23;
  v15 = (const void *)v14;
  CFDictionarySetValue(v13, CFSTR("AssertName"), (const void *)v14);
  CFRelease(v15);
  v14 = IOPMAssertionCreateWithProperties(v13, (IOPMAssertionID *)(v6 + 56));
  if ((_DWORD)v14)
    goto LABEL_23;
  v14 = (uint64_t)CFStringCreateWithFormat(a1, 0, CFSTR("%@.timed"), a2);
  if (!v14)
    goto LABEL_23;
  v16 = (const void *)v14;
  CFDictionarySetValue(v13, CFSTR("AssertName"), (const void *)v14);
  CFRelease(v16);
  CFDictionarySetValue(v13, CFSTR("TimeoutSeconds"), *(const void **)(v6 + 40));
  CFDictionarySetValue(v13, CFSTR("TimeoutAction"), CFSTR("TimeoutActionTurnOff"));
  v14 = IOPMAssertionCreateWithProperties(v13, (IOPMAssertionID *)(v6 + 48));
  if ((_DWORD)v14 || (v14 = (uint64_t)dispatch_semaphore_create(1), (*v7 = v14) == 0))
  {
LABEL_23:
    APSLogErrorAt(v14);
    CFRelease((CFTypeRef)v6);
    v6 = 0;
  }
  CFRelease(v13);
  return v6;
}

intptr_t APSPowerAssertionRaiseTemporary(uint64_t a1)
{
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL);
  if (gLogCategory_APSPowerAssertion <= 50
    && (gLogCategory_APSPowerAssertion != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  IOPMAssertionSetProperty(*(_DWORD *)(a1 + 48), CFSTR("TimeoutSeconds"), *(CFTypeRef *)(a1 + 40));
  IOPMAssertionSetProperty(*(_DWORD *)(a1 + 48), CFSTR("AssertLevel"), *(CFTypeRef *)(a1 + 24));
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 16));
}

intptr_t APSPowerAssertionRaise(uint64_t a1)
{
  int v2;

  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL);
  v2 = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(a1 + 52) = v2 + 1;
  if (v2)
  {
    if (gLogCategory_APSPowerAssertion <= 50
      && (gLogCategory_APSPowerAssertion != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  else
  {
    if (gLogCategory_APSPowerAssertion <= 50
      && (gLogCategory_APSPowerAssertion != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    IOPMAssertionSetProperty(*(_DWORD *)(a1 + 56), CFSTR("AssertLevel"), *(CFTypeRef *)(a1 + 24));
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 16));
}

intptr_t APSPowerAssertionRelease(uint64_t a1)
{
  int v2;

  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL);
  v2 = *(_DWORD *)(a1 + 52);
  if (v2 >= 1 && (*(_DWORD *)(a1 + 52) = v2 - 1, v2 == 1))
  {
    if (gLogCategory_APSPowerAssertion <= 50
      && (gLogCategory_APSPowerAssertion != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    IOPMAssertionSetProperty(*(_DWORD *)(a1 + 56), CFSTR("AssertLevel"), *(CFTypeRef *)(a1 + 32));
  }
  else if (gLogCategory_APSPowerAssertion <= 50
         && (gLogCategory_APSPowerAssertion != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 16));
}

uint64_t APCompressionTypeGetBufferSize(int a1, uint64_t a2)
{
  switch(a1)
  {
    case 1:
    case 4:
    case 8:
      return a2;
    case 2:
      a2 = iceil2();
      break;
    default:
      a2 = 0;
      break;
  }
  return a2;
}

uint64_t APCompressionTypeFillStreamDescription(int a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t result;

  switch(a1)
  {
    case 2:
      *(double *)a2 = (double)a3;
      *(_DWORD *)(a2 + 8) = 1634492771;
      if (a4 == 24)
        v7 = 3;
      else
        v7 = 0;
      if (a4 == 20)
        v8 = 2;
      else
        v8 = v7;
      if (a4 == 16)
        v5 = 1;
      else
        v5 = v8;
      v6 = 352;
      goto LABEL_16;
    case 8:
      v5 = 0;
      *(double *)a2 = (double)a3;
      *(_DWORD *)(a2 + 8) = 1633772389;
      v6 = 480;
      goto LABEL_16;
    case 4:
      v5 = 0;
      *(double *)a2 = (double)a3;
      *(_DWORD *)(a2 + 8) = 1633772320;
      v6 = 1024;
LABEL_16:
      result = 0;
      *(_DWORD *)(a2 + 12) = v5;
      *(_DWORD *)(a2 + 16) = 0;
      *(_DWORD *)(a2 + 20) = v6;
      *(_DWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_DWORD *)(a2 + 28) = a5;
      return result;
  }
  return 4294960561;
}

uint64_t APSAPAPExtensionConvertSbufTracerDictToBBuf(uint64_t a1, _QWORD *a2)
{
  _DWORD *v3;
  CFTypeRef v4;
  CMBlockBufferRef v5;
  int v7;
  CMBlockBufferRef blockBufferOut;
  unsigned int v9;

  v9 = 0;
  blockBufferOut = 0;
  if (!a2)
  {
    APSLogErrorAt(0);
    v3 = 0;
    v7 = -6705;
LABEL_13:
    v9 = v7;
    goto LABEL_10;
  }
  v3 = malloc_type_malloc(0x14uLL, 0x1000040A86A77D5uLL);
  if (!v3)
  {
    v7 = -6728;
    goto LABEL_13;
  }
  *v3 = CFDictionaryGetInt64Ranged();
  if (!v9)
  {
    CFDictionaryGetCString();
    v9 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3, 0x14uLL, (CFAllocatorRef)*MEMORY[0x1E0C9AE10], 0, 0, 0x14uLL, 0, &blockBufferOut);
    if (blockBufferOut)
    {
      v4 = CFRetain(blockBufferOut);
      v5 = blockBufferOut;
      *a2 = v4;
      if (v5)
        CFRelease(v5);
      v3 = 0;
    }
    else
    {
      v3 = 0;
      *a2 = 0;
    }
  }
LABEL_10:
  free(v3);
  return v9;
}

uint64_t APSAPAPExtensionConvertSbufTracerBBufToSbufTracerDict(OpaqueCMBlockBuffer *a1, CFTypeRef *a2)
{
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  uint64_t UInt32;
  const __CFString *v8;
  CFStringRef v9;
  CFStringRef v10;
  CFStringRef v11;
  char *dataPointerOut;

  dataPointerOut = 0;
  if (a2 && (CMBlockBufferGetDataPointer(a1, 0, 0, 0, &dataPointerOut), CMBlockBufferGetDataLength(a1) == 20))
  {
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v6 = Mutable;
      UInt32 = FigCFNumberCreateUInt32();
      if (UInt32)
      {
        v8 = (const __CFString *)UInt32;
        v9 = CFStringCreateWithCString(v4, dataPointerOut + 4, 0x8000100u);
        if (v9)
        {
          v10 = v9;
          CFDictionarySetValue(v6, (const void *)*MEMORY[0x1E0CC4148], v8);
          CFDictionarySetValue(v6, (const void *)*MEMORY[0x1E0CC4140], v10);
          *a2 = CFRetain(v6);
          CFRelease(v8);
          v11 = v10;
        }
        else
        {
          APSLogErrorAt(0);
          v11 = v8;
        }
        CFRelease(v11);
      }
      else
      {
        APSLogErrorAt(0);
      }
      CFRelease(v6);
      return 0;
    }
    else
    {
      APSLogErrorAt(0);
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
}

uint64_t APSRTCReportingGetTypeID()
{
  if (gAPSRTCReportingInitOnce != -1)
    dispatch_once_f(&gAPSRTCReportingInitOnce, 0, (dispatch_function_t)_APSRTCReportingGetTypeID);
  return gAPSRTCReportingTypeID;
}

uint64_t _APSRTCReportingGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSRTCReportingTypeID = result;
  return result;
}

void _APSRTCReportingFinalize(_QWORD *a1)
{
  const void *v2;
  NSObject *v3;
  const void *v4;

  if (gLogCategory_APSRTCReporting <= 50
    && (gLogCategory_APSRTCReporting != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = (const void *)a1[3];
  if (v2)
  {
    CFRelease(v2);
    a1[3] = 0;
  }
  v3 = a1[2];
  if (v3)
  {
    dispatch_release(v3);
    a1[2] = 0;
  }
  v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0;
  }
  if (a1[4])
  {
    if (apsrr_getWeakRefTable_once != -1)
      dispatch_once(&apsrr_getWeakRefTable_once, &__block_literal_global_221);
    FigCFWeakReferenceTableRemoveValue();
  }
}

uint64_t __apsrr_getWeakRefTable_block_invoke()
{
  uint64_t result;

  result = FigCFWeakReferenceTableCreate();
  if ((_DWORD)result)
  {
    if (gLogCategory_APSRTCReporting <= 90)
    {
      if (gLogCategory_APSRTCReporting != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
        result = LogPrintF();
    }
    __break(1u);
  }
  return result;
}

uint64_t APSRTCReportingCreateOrCopy(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4, _DWORD *a5)
{
  uint64_t v10;
  CFStringRef v11;
  uint64_t v12;
  CFTypeRef v13;
  uint64_t v14;
  const void *v16;
  uint32_t v17;
  CFTypeRef cf;
  _QWORD block[10];
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;

  cf = 0;
  v17 = 0;
  if (!a4)
  {
    APSLogErrorAt(0);
    return 72301;
  }
  if (FigCFDictionaryGetCount()
    || CFPreferencesGetAppBooleanValue(CFSTR("useDynamicRTCSessionIDs"), CFSTR("com.apple.airplay"), 0))
  {
    v10 = APSRTCReportingCreate(a1, a2, a3, &cf, &v17);
    if (!(_DWORD)v10)
    {
      if (gLogCategory_APSRTCReporting <= 50
        && (gLogCategory_APSRTCReporting != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_16;
    }
    v14 = v10;
    APSLogErrorAt(v10);
    v13 = cf;
    if (!cf)
      return v14;
LABEL_21:
    CFRelease(v13);
    return v14;
  }
  v28 = 0;
  v29 = &v28;
  v30 = 0x2020000000;
  v31 = 0;
  v24 = 0;
  v25 = &v24;
  v26 = 0x2020000000;
  v27 = 0;
  v20 = 0;
  v21 = &v20;
  v22 = 0x2020000000;
  v23 = 0;
  v11 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@.%@"), a1, a2);
  if (apsrr_initializeReporterStash_onceToken != -1)
    dispatch_once(&apsrr_initializeReporterStash_onceToken, &__block_literal_global_63);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __apsrr_copyOrCreateSharedReporterForClientAndService_block_invoke;
  block[3] = &unk_1E8288820;
  block[4] = &v20;
  block[5] = &v24;
  block[8] = a1;
  block[9] = a2;
  block[6] = &v28;
  block[7] = v11;
  dispatch_sync((dispatch_queue_t)gAPReporting_SharedAgentStashQueue, block);
  v12 = *((unsigned int *)v29 + 6);
  if (!(_DWORD)v12)
  {
    v13 = (CFTypeRef)v21[3];
    cf = v13;
    v21[3] = 0;
    v17 = *((_DWORD *)v25 + 6);
    if (!v11)
      goto LABEL_15;
    goto LABEL_14;
  }
  APSLogErrorAt(v12);
  v16 = (const void *)v21[3];
  if (v16)
    CFRelease(v16);
  v13 = 0;
  if (v11)
LABEL_14:
    CFRelease(v11);
LABEL_15:
  v14 = *((unsigned int *)v29 + 6);
  _Block_object_dispose(&v20, 8);
  _Block_object_dispose(&v24, 8);
  _Block_object_dispose(&v28, 8);
  if ((_DWORD)v14)
  {
    APSLogErrorAt(v14);
    if (!v13)
      return v14;
    goto LABEL_21;
  }
LABEL_16:
  *a4 = cf;
  v14 = 0;
  if (a5)
    *a5 = v17;
  return v14;
}

void sub_1C9678770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 128), 8);
  _Block_object_dispose((const void *)(v27 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t APSRTCReportingCreate(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4, uint32_t *a5)
{
  uint32_t v7;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v9;
  CFTypeRef v10;
  uint64_t MutableCopy;
  const void *v12;
  CFTypeRef v13;
  uint64_t Instance;
  _QWORD *v15;
  uint64_t Key;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  dispatch_time_t v20;
  NSObject *v21;
  uint64_t v22;
  _QWORD block[5];
  _QWORD v25[6];
  _QWORD v26[6];
  uint64_t v27;
  char label[64];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (CFPreferencesGetAppBooleanValue(CFSTR("useDynamicRTCSessionIDs"), CFSTR("com.apple.airplay"), 0))
    v7 = arc4random();
  else
    v7 = 1234;
  v27 = 0;
  pthread_once(&gAPReportingInitOnce, (void (*)(void))apsrr_RTCReportingInitOnce);
  if (!sRTCreportingFrameworkIsValid)
  {
    APSLogErrorAt(0);
    return 72302;
  }
  if (!a4)
  {
    APSLogErrorAt(0);
    return 72301;
  }
  if (!objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier"))
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3898], "processInfo"), "processName");
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v22 = 72300;
    APSLogErrorAt(0);
    APSLogErrorAt(72300);
    return v22;
  }
  v9 = Mutable;
  FigCFDictionarySetValue();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  v10 = CFRetain(v9);
  CFRelease(v9);
  MutableCopy = FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
  {
    v22 = 72300;
    APSLogErrorAt(0);
    APSLogErrorAt(72300);
    v13 = 0;
    goto LABEL_26;
  }
  v12 = (const void *)MutableCopy;
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  v13 = CFRetain(v12);
  CFRelease(v12);
  if (!v13)
  {
    v22 = 72300;
    APSLogErrorAt(0);
    goto LABEL_26;
  }
  if (gAPSRTCReportingInitOnce != -1)
    dispatch_once_f(&gAPSRTCReportingInitOnce, 0, (dispatch_function_t)_APSRTCReportingGetTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    APSLogErrorAt(0);
    v22 = 4294960568;
    goto LABEL_26;
  }
  v15 = (_QWORD *)Instance;
  *(_QWORD *)(Instance + 48) = 0;
  *(_OWORD *)(Instance + 16) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  SNPrintF();
  Key = (uint64_t)dispatch_queue_create(label, 0);
  v15[2] = Key;
  if (Key)
  {
    Key = (uint64_t)CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v15[5] = Key;
    if (Key)
    {
      if (apsrr_getWeakRefTable_once != -1)
        dispatch_once(&apsrr_getWeakRefTable_once, &__block_literal_global_221);
      Key = FigCFWeakReferenceTableAddValueAndGetKey();
      if (!(_DWORD)Key)
      {
        v15[4] = v27;
        v17 = sRTCReportingAPI_InitWithSessionInfoDict(v10, v13, gFrameworkList, &__block_literal_global_12);
        v15[3] = v17;
        if (v17)
        {
          v18 = MEMORY[0x1E0C809B0];
          v26[0] = MEMORY[0x1E0C809B0];
          v26[1] = 3221225472;
          v26[2] = __APSRTCReportingCreate_block_invoke_2;
          v26[3] = &__block_descriptor_48_e21_v16__0____CFString__8l;
          v26[4] = v15;
          v26[5] = 0;
          sRTCReportingAPI_SetMessageBlock(v17, v26);
          v19 = v15[3];
          v25[0] = v18;
          v25[1] = 3221225472;
          v25[2] = __APSRTCReportingCreate_block_invoke_3;
          v25[3] = &__block_descriptor_48_e20_v16__0____CFArray__8l;
          v25[4] = v27;
          v25[5] = v15;
          sRTCReportingAPI_StartConfiguration(v19, v25);
          CFRetain(v15);
          v20 = dispatch_time(0, 5000000000);
          v21 = v15[2];
          block[0] = v18;
          block[1] = 3221225472;
          block[2] = __APSRTCReportingCreate_block_invoke_4;
          block[3] = &__block_descriptor_40_e5_v8__0l;
          block[4] = v15;
          dispatch_after(v20, v21, block);
          if (gLogCategory_APSRTCReporting <= 40
            && (gLogCategory_APSRTCReporting != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          v22 = 0;
          *a4 = CFRetain(v15);
          *a5 = v7;
        }
        else
        {
          APSLogErrorAt(0);
          v22 = 0;
        }
        goto LABEL_25;
      }
      v22 = Key;
    }
    else
    {
      v22 = 72300;
    }
  }
  else
  {
    v22 = 72300;
  }
  APSLogErrorAt(Key);
LABEL_25:
  CFRelease(v15);
LABEL_26:
  if (v10)
    CFRelease(v10);
  if (v13)
    CFRelease(v13);
  return v22;
}

void __apsrr_copyOrCreateSharedReporterForClientAndService_block_invoke(_QWORD *a1)
{
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  NSObject *v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  const void *v14;
  int v15;
  int v16;
  CFTypeRef block[6];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;

  v2 = (const void *)a1[7];
  v3 = *(_QWORD *)(a1[4] + 8);
  v18 = 0;
  v19 = &v18;
  v20 = 0x2020000000;
  v21 = 0;
  if (!CFDictionaryGetValue((CFDictionaryRef)gAPReporting_SharedAgentWeakReferences, v2))
    goto LABEL_12;
  v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  v5 = (const void *)v4;
  if (!v4)
    goto LABEL_12;
  v6 = *(NSObject **)(v4 + 16);
  block[0] = (CFTypeRef)MEMORY[0x1E0C809B0];
  block[1] = (CFTypeRef)3221225472;
  block[2] = __apsrr_copySharedReportingForClientAndServiceInternal_block_invoke;
  block[3] = &unk_1E8288868;
  block[4] = &v18;
  block[5] = v5;
  dispatch_sync(v6, block);
  if (*((_BYTE *)v19 + 24))
  {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)gAPReporting_SharedAgentWeakReferences, v2);
    if (gLogCategory_APSRTCReporting <= 90
      && (gLogCategory_APSRTCReporting != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFRelease(v5);
LABEL_12:
    _Block_object_dispose(&v18, 8);
    v8 = (const void *)a1[7];
    v7 = a1[8];
    v9 = a1[9];
    v10 = *(_QWORD *)(a1[4] + 8);
    v11 = *(_QWORD *)(a1[5] + 8);
    block[0] = 0;
    LODWORD(v18) = 0;
    v12 = APSRTCReportingCreate(v7, v9, 0, block, (uint32_t *)&v18);
    if ((_DWORD)v12)
    {
      v16 = v12;
      APSLogErrorAt(v12);
    }
    else
    {
      v13 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
      if (v13)
      {
        v14 = v13;
        CFDictionarySetValue((CFMutableDictionaryRef)gAPReporting_SharedAgentWeakReferences, v8, v13);
        v15 = v18;
        FigCFDictionarySetInt32();
        *(CFTypeRef *)(v10 + 24) = block[0];
        block[0] = 0;
        *(_DWORD *)(v11 + 24) = v15;
        CFRelease(v14);
        v16 = 0;
      }
      else
      {
        v16 = 72300;
        APSLogErrorAt(0);
        APSSignalErrorAt(72300);
      }
    }
    if (block[0])
      CFRelease(block[0]);
    *(_DWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = v16;
    if (gLogCategory_APSRTCReporting <= 50
      && (gLogCategory_APSRTCReporting != -1 || _LogCategory_Initialize()))
    {
      goto LABEL_19;
    }
    return;
  }
  *(_QWORD *)(v3 + 24) = v5;
  FigCFDictionaryGetInt32IfPresent();
  _Block_object_dispose(&v18, 8);
  if (gLogCategory_APSRTCReporting <= 30
    && (gLogCategory_APSRTCReporting != -1 || _LogCategory_Initialize()))
  {
LABEL_19:
    LogPrintF();
  }
}

void sub_1C96790F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __apsrr_copySharedReportingForClientAndServiceInternal_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 40) + 49);
  return result;
}

CFMutableDictionaryRef __apsrr_initializeReporterStash_block_invoke()
{
  const __CFAllocator *v0;
  const CFDictionaryKeyCallBacks *v1;
  const CFDictionaryValueCallBacks *v2;
  CFMutableDictionaryRef result;

  gAPReporting_SharedAgentStashQueue = (uint64_t)dispatch_queue_create("APSRTCReportingStashQueue", 0);
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v2 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  gAPReporting_SharedAgentWeakReferences = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  result = CFDictionaryCreateMutable(v0, 0, v1, v2);
  gAPReporting_SharedAgentSessionIDs = (uint64_t)result;
  return result;
}

_QWORD *apsrr_RTCReportingInitOnce()
{
  _QWORD *result;
  void *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  char v47;

  result = dlopen("/System/Library/PrivateFrameworks/RTCReporting.framework/RTCReporting", 1);
  if (result)
  {
    v1 = result;
    gFrameworkList = (uint64_t)CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&apsrr_RTCReportingInitOnce_frameworkList, 1, 0);
    sRTCReportingAPI_InitWithSessionInfo = (uint64_t)dlsym(v1, "RTCReportingInitWithSessionInfo");
    sRTCReportingAPI_InitWithSessionInfoDict = dlsym(v1, "RTCReportingInitWithSessionInfoDict");
    sRTCReportingAPI_StartConfiguration = dlsym(v1, "RTCReportingStartConfiguration");
    sRTCReportingAPI_FetchStatesWithUserInfo = (uint64_t)dlsym(v1, "RTCReportingFetchStatesWithUserInfo");
    sRTCReportingAPI_SetMessageBlock = dlsym(v1, "RTCReportingSetMessageBlock");
    sRTCReportingAPI_SendMessageWithError = dlsym(v1, "RTCReportingSendMessageWithError");
    sRTCReportingAPI_SendMessageWithDictionary = (uint64_t)dlsym(v1, "RTCReportingSendMessageWithDictionary");
    sRTCReportingAPI_UploadLogWithArray = (uint64_t)dlsym(v1, "RTCReportingUploadLogWithArray");
    v2 = (uint64_t *)dlsym(v1, "kRTCReportingSessionInfoClientBundleID");
    if (v2)
      v3 = *v2;
    else
      v3 = 0;
    sRTCReportingConfigParams_0 = v3;
    v4 = (uint64_t *)dlsym(v1, "kRTCReportingSessionInfoClientType");
    if (v4)
      v5 = *v4;
    else
      v5 = 0;
    sRTCReportingConfigParams_1 = v5;
    v6 = (uint64_t *)dlsym(v1, "kRTCReportingSessionInfoClientVersion");
    if (v6)
      v7 = *v6;
    else
      v7 = 0;
    sRTCReportingConfigParams_2 = v7;
    v8 = (uint64_t *)dlsym(v1, "kRTCReportingSessionInfoSessionID");
    if (v8)
      v9 = *v8;
    else
      v9 = 0;
    sRTCReportingConfigParams_3 = v9;
    v10 = (uint64_t *)dlsym(v1, "kRTCReportingSessionInfoBatchEvent");
    if (v10)
      v11 = *v10;
    else
      v11 = 0;
    sRTCReportingConfigParams_4 = v11;
    v12 = (uint64_t *)dlsym(v1, "kRTCReportingSessionInfoRequireUserInfo");
    if (v12)
      v13 = *v12;
    else
      v13 = 0;
    sRTCReportingConfigParams_5 = v13;
    v14 = (uint64_t *)dlsym(v1, "kRTCReportingSessionInfoHierarchyToken");
    if (v14)
      v15 = *v14;
    else
      v15 = 0;
    sRTCReportingConfigParams_6 = v15;
    v16 = (uint64_t *)dlsym(v1, "kRTCReportingUserInfoClientName");
    if (v16)
      v17 = *v16;
    else
      v17 = 0;
    sRTCReportingConfigParams_7 = v17;
    v18 = (uint64_t *)dlsym(v1, "kRTCReportingUserInfoServiceName");
    if (v18)
      v19 = *v18;
    else
      v19 = 0;
    sRTCReportingConfigParams_8 = v19;
    v20 = (uint64_t *)dlsym(v1, "kRTCReportingMessageParametersCategory");
    if (v20)
      v21 = *v20;
    else
      v21 = 0;
    sRTCReportingConfigParams_9 = v21;
    v22 = (uint64_t *)dlsym(v1, "kRTCReportingMessageParametersFlag");
    if (v22)
      v23 = *v22;
    else
      v23 = 0;
    sRTCReportingConfigParams_10 = v23;
    v24 = (uint64_t *)dlsym(v1, "kRTCReportingMessageParametersPayload");
    if (v24)
      v25 = *v24;
    else
      v25 = 0;
    sRTCReportingConfigParams_12 = v25;
    result = dlsym(v1, "kRTCReportingMessageParametersType");
    if (result)
      v26 = *result;
    else
      v26 = 0;
    sRTCReportingConfigParams_11 = v26;
    if (sRTCReportingAPI_InitWithSessionInfo)
      v27 = sRTCReportingAPI_InitWithSessionInfoDict == 0;
    else
      v27 = 1;
    v47 = !v27
       && sRTCReportingAPI_StartConfiguration != 0
       && sRTCReportingAPI_FetchStatesWithUserInfo != 0
       && sRTCReportingAPI_SetMessageBlock != 0
       && sRTCReportingAPI_SendMessageWithError != 0
       && sRTCReportingAPI_SendMessageWithDictionary != 0
       && sRTCReportingAPI_UploadLogWithArray != 0
       && sRTCReportingConfigParams_0 != 0
       && sRTCReportingConfigParams_1 != 0
       && sRTCReportingConfigParams_2 != 0
       && sRTCReportingConfigParams_3 != 0
       && sRTCReportingConfigParams_4 != 0
       && sRTCReportingConfigParams_5 != 0
       && sRTCReportingConfigParams_6 != 0
       && sRTCReportingConfigParams_8 != 0
       && sRTCReportingConfigParams_7 != 0
       && sRTCReportingConfigParams_9 != 0
       && sRTCReportingConfigParams_10 != 0
       && sRTCReportingConfigParams_12 != 0
       && v26 != 0;
    sRTCreportingFrameworkIsValid = v47;
    if (gLogCategory_APSRTCReporting <= 40)
    {
      if (gLogCategory_APSRTCReporting != -1)
        return (_QWORD *)LogPrintF();
      result = (_QWORD *)_LogCategory_Initialize();
      if ((_DWORD)result)
        return (_QWORD *)LogPrintF();
    }
  }
  else if (gLogCategory_APSRTCReporting <= 90)
  {
    if (gLogCategory_APSRTCReporting != -1)
      return (_QWORD *)LogPrintF();
    result = (_QWORD *)_LogCategory_Initialize();
    if ((_DWORD)result)
      return (_QWORD *)LogPrintF();
  }
  return result;
}

void apsrr_setReportingToDead(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 49) && !*(_BYTE *)(a1 + 48))
  {
    *(_BYTE *)(a1 + 49) = 1;
    if (gLogCategory_APSRTCReporting <= 90
      && (gLogCategory_APSRTCReporting != -1 || _LogCategory_Initialize()))
    {
      CFArrayGetCount(*(CFArrayRef *)(a1 + 40));
      LogPrintF();
    }
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 40));
  }
}

void __apsrr_setIsSetupToSendMsg_block_invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 49))
  {
    if (gLogCategory_APSRTCReporting <= 60
      && (gLogCategory_APSRTCReporting != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  else
  {
    *(_BYTE *)(v1 + 48) = 1;
    CFArrayGetCount(*(CFArrayRef *)(v1 + 40));
    CFArrayApplyBlock();
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v1 + 40));
  }
}

void __apsrr_sendCachedMsgs_block_invoke(uint64_t a1, const __CFDictionary *a2)
{
  __int16 Int64;
  __int16 v5;
  const void *Value;

  Int64 = CFDictionaryGetInt64();
  v5 = CFDictionaryGetInt64();
  Value = CFDictionaryGetValue(a2, CFSTR("MsgPayload"));
  apsrr_sendOneMsg(*(_QWORD **)(a1 + 32), Int64, v5, Value);
}

void apsrr_sendOneMsg(_QWORD *a1, __int16 a2, __int16 a3, CFTypeRef cf)
{
  NSObject *v8;
  _QWORD block[6];
  __int16 v10;
  __int16 v11;

  if (a1 && sRTCreportingFrameworkIsValid && cf)
  {
    CFRetain(cf);
    CFRetain(a1);
    v8 = a1[2];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __apsrr_sendOneMsg_block_invoke;
    block[3] = &__block_descriptor_52_e5_v8__0l;
    v10 = a2;
    v11 = a3;
    block[4] = a1;
    block[5] = cf;
    dispatch_async(v8, block);
  }
  else
  {
    APSLogErrorAt(0);
  }
}

void __apsrr_sendOneMsg_block_invoke(uint64_t a1)
{
  uint64_t v2;
  char v3;
  const void *v4;
  char v5;
  int v6;
  const void *v7;

  v7 = 0;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  if (v2)
  {
    v3 = sRTCReportingAPI_SendMessageWithError(v2, *(unsigned __int16 *)(a1 + 48), *(unsigned __int16 *)(a1 + 50), *(_QWORD *)(a1 + 40), &v7);
    if (gLogCategory_APSRTCReporting <= 40
      && (gLogCategory_APSRTCReporting != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v4 = v7;
    if (v7)
      v5 = v3;
    else
      v5 = 1;
    if ((v5 & 1) == 0)
    {
      if (gLogCategory_APSRTCReporting > 90)
      {
LABEL_15:
        CFRelease(v4);
        goto LABEL_16;
      }
      if (gLogCategory_APSRTCReporting != -1 || (v6 = _LogCategory_Initialize(), v4 = v7, v6))
      {
        LogPrintF();
        v4 = v7;
      }
    }
    if (v4)
      goto LABEL_15;
  }
LABEL_16:
  CFRelease(*(CFTypeRef *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t APSRTCReportingSendMsg(uint64_t a1, __int16 a2, __int16 a3, uint64_t a4)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD block[6];
  __int16 v8;
  __int16 v9;

  if (a1)
  {
    if (sRTCreportingFrameworkIsValid)
    {
      if (a4)
      {
        v4 = *(NSObject **)(a1 + 16);
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = __APSRTCReportingSendMsg_block_invoke;
        block[3] = &__block_descriptor_52_e5_v8__0l;
        v8 = a2;
        v9 = a3;
        block[4] = a1;
        block[5] = a4;
        dispatch_sync(v4, block);
        return 0;
      }
      else
      {
        APSLogErrorAt(0);
        return 72303;
      }
    }
    else
    {
      APSLogErrorAt(0);
      return 72302;
    }
  }
  else
  {
    v5 = 72301;
    APSLogErrorAt(0);
  }
  return v5;
}

uint64_t APSCryptorGetNull()
{
  if (APSCryptorGetNull_sAPSCryptorNullOnce != -1)
    dispatch_once_f(&APSCryptorGetNull_sAPSCryptorNullOnce, &APSCryptorGetNull_sAPSCryptorNull, (dispatch_function_t)nullCryptor_create);
  return APSCryptorGetNull_sAPSCryptorNull;
}

void nullCryptor_create(CFTypeRef *a1)
{
  uint64_t v2;

  if (APSCryptorGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APSCryptorGetClassID_sRegisterOnce, &APSCryptorGetClassID_sClassID, (dispatch_function_t)cryptor_registerBaseClass);
  v2 = CMDerivedObjectCreate();
  if ((_DWORD)v2)
    APSLogErrorAt(v2);
  else
    *a1 = CFRetain(0);
}

uint64_t nullCryptor_GetEncryptionOverheadLength()
{
  return 0;
}

uint64_t nullCryptor_EncryptMessage(int a1, int a2, int a3, void *__src, size_t __len, void *__dst, size_t a7)
{
  if (a7 < __len)
  {
    APSLogErrorAt(0);
    return 4294895585;
  }
  else
  {
    if (__dst != __src)
      memmove(__dst, __src, __len);
    return 0;
  }
}

uint64_t nullCryptor_DecryptMessage(int a1, int a2, int a3, void *__src, size_t __len, void *__dst, size_t a7, _QWORD *a8)
{
  uint64_t result;

  if (a7 < __len)
  {
    APSLogErrorAt(0);
    return 4294895585;
  }
  else
  {
    if (__dst != __src)
      memmove(__dst, __src, __len);
    result = 0;
    if (a8)
      *a8 = __len;
  }
  return result;
}

__CFString *nullCryptor_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APSCryptorNull %p>"), a1);
  return Mutable;
}

uint64_t APSIOReporterGetTypeID()
{
  if (gAPSIOReporterInitOnce != -1)
    dispatch_once_f(&gAPSIOReporterInitOnce, 0, (dispatch_function_t)_APSIOReporterGetTypeID);
  return gAPSIOReporterTypeID;
}

uint64_t _APSIOReporterGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSIOReporterTypeID = result;
  return result;
}

void _APSIOReporterFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 24);
  if (v3)
    CFRelease(v3);
  if (gLogCategory_APSIOReporter <= 50 && (gLogCategory_APSIOReporter != -1 || _LogCategory_Initialize()))
    LogPrintF();
}

uint64_t APSIOReporterCreate(_QWORD *a1)
{
  uint64_t Instance;
  _QWORD *v3;
  CFMutableDictionaryRef v4;
  CFMutableDictionaryRef v5;
  const void *v6;
  uint64_t Subscription;
  uint64_t v8;

  if (!a1)
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  if (gAPSIOReporterInitOnce != -1)
    dispatch_once_f(&gAPSIOReporterInitOnce, 0, (dispatch_function_t)_APSIOReporterGetTypeID);
  Instance = _CFRuntimeCreateInstance();
  v3 = (_QWORD *)Instance;
  if (Instance)
  {
    *(_QWORD *)(Instance + 16) = 0;
    *(_QWORD *)(Instance + 24) = 0;
    v4 = IOServiceNameMatching("CCLogPipe");
    if (!v4)
    {
      APSLogErrorAt(0);
      if (gLogCategory_APSIOReporter <= 90
        && (gLogCategory_APSIOReporter != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v5 = 0;
      v6 = 0;
      goto LABEL_33;
    }
    v5 = v4;
    v6 = (const void *)IOReportCopyChannelsForDrivers();
    if (v6)
    {
      Subscription = IOReportCreateSubscription();
      v3[2] = Subscription;
      if (Subscription)
      {
        if (gLogCategory_APSIOReporter <= 50
          && (gLogCategory_APSIOReporter != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v8 = 0;
        *a1 = v3;
        v3 = 0;
        goto LABEL_13;
      }
      APSLogErrorAt(0);
      if (gLogCategory_APSIOReporter > 90
        || gLogCategory_APSIOReporter == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_33;
      }
    }
    else
    {
      APSLogErrorAt(0);
      if (gLogCategory_APSIOReporter > 90
        || gLogCategory_APSIOReporter == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_33;
      }
    }
    LogPrintF();
LABEL_33:
    v8 = 4294960534;
    goto LABEL_13;
  }
  APSLogErrorAt(0);
  v5 = 0;
  v6 = 0;
  v8 = 4294960568;
LABEL_13:
  if (v3)
    CFRelease(v3);
  if (v5)
    CFRelease(v5);
  if (v6)
    CFRelease(v6);
  return v8;
}

uint64_t APSIOReporterGetCoreCaptureCount(uint64_t a1, _QWORD *a2)
{
  const void *Samples;
  BOOL v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  CFTypeRef v11;

  v11 = 0;
  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  if (!a1 || !a2)
  {
    APSLogErrorAt(0);
    Samples = 0;
    v5 = 4294960591;
    goto LABEL_11;
  }
  Samples = (const void *)IOReportCreateSamples();
  if (Samples)
    v4 = v11 == 0;
  else
    v4 = 0;
  if (v4)
  {
    if ((IOReportSelectChannelsInGroup() & 1) == 0 && !v11)
    {
      IOReportIterate();
      v5 = 0;
      *a2 = v8[3];
      goto LABEL_11;
    }
    APSLogErrorAt(0);
    if (gLogCategory_APSIOReporter > 90 || gLogCategory_APSIOReporter == -1 && !_LogCategory_Initialize())
      goto LABEL_26;
  }
  else
  {
    APSLogErrorAt(0);
    if (gLogCategory_APSIOReporter > 90 || gLogCategory_APSIOReporter == -1 && !_LogCategory_Initialize())
      goto LABEL_26;
  }
  LogPrintF();
LABEL_26:
  v5 = 4294960534;
LABEL_11:
  if (v11)
    CFRelease(v11);
  if (Samples)
    CFRelease(Samples);
  _Block_object_dispose(&v7, 8);
  return v5;
}

double APSDataSetStatisticsInit(uint64_t a1, int a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = a2;
  return result;
}

double APSDataSetStatisticsAddValue(uint64_t a1, unsigned int *a2, double result)
{
  unsigned int v3;
  double v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  double v9;
  double v10;
  double v11;
  int v12;
  double v13;

  switch(*(_DWORD *)a1)
  {
    case 0:
      v3 = *a2;
      *(_DWORD *)(a1 + 8) = *a2;
      if (v3 > *(_DWORD *)(a1 + 16))
        *(_DWORD *)(a1 + 16) = v3;
      if (v3 < *(_DWORD *)(a1 + 24))
        *(_DWORD *)(a1 + 24) = v3;
      v4 = (double)v3;
      goto LABEL_22;
    case 1:
      v5 = *a2;
      *(_DWORD *)(a1 + 8) = *a2;
      if (v5 > *(_DWORD *)(a1 + 16))
        *(_DWORD *)(a1 + 16) = v5;
      if (v5 < *(_DWORD *)(a1 + 24))
        *(_DWORD *)(a1 + 24) = v5;
      v4 = (double)v5;
      goto LABEL_22;
    case 2:
      v6 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a2;
      if (v6 > *(_QWORD *)(a1 + 16))
        *(_QWORD *)(a1 + 16) = v6;
      if (v6 < *(_QWORD *)(a1 + 24))
        *(_QWORD *)(a1 + 24) = v6;
      v4 = (double)v6;
      goto LABEL_22;
    case 3:
      v7 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a2;
      if (v7 > *(_QWORD *)(a1 + 16))
        *(_QWORD *)(a1 + 16) = v7;
      if (v7 < *(_QWORD *)(a1 + 24))
        *(_QWORD *)(a1 + 24) = v7;
      v4 = (double)v7;
LABEL_22:
      v8 = *(_DWORD *)(a1 + 56) + 1;
      v9 = *(double *)(a1 + 40);
      v10 = (double)v8;
      v11 = *(double *)(a1 + 32) + (v4 - *(double *)(a1 + 32)) / (double)v8;
      *(_DWORD *)(a1 + 56) = v8;
      goto LABEL_28;
    case 4:
      v4 = *(double *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a2;
      if (v4 > *(double *)(a1 + 16))
        *(double *)(a1 + 16) = v4;
      if (v4 < *(double *)(a1 + 24))
        *(double *)(a1 + 24) = v4;
      v12 = *(_DWORD *)(a1 + 56) + 1;
      *(_DWORD *)(a1 + 56) = v12;
      v9 = *(double *)(a1 + 40);
      v10 = (double)v12;
      v11 = *(double *)(a1 + 32) + (v4 - *(double *)(a1 + 32)) / (double)v12;
LABEL_28:
      v13 = v9 + (v4 - v11) * (v4 - v11);
      *(double *)(a1 + 32) = v11;
      *(double *)(a1 + 40) = v13;
      result = sqrt(v13 / v10);
      *(double *)(a1 + 48) = result;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t APSBadgingFormatInfoCopyBadgeType(const opaqueCMFormatDescription *a1, const opaqueCMFormatDescription *a2, _QWORD *a3)
{
  uint64_t v4;
  const AudioChannelLayout *ChannelLayout;
  const AudioChannelLayout *v8;
  int mFormatID;
  int v10;
  int v11;
  int v12;
  const __CFString *v13;
  int mChannelLayoutTag;
  int v15;
  CFTypeRef v16;
  size_t v18;
  size_t sizeOut;
  const AudioChannelLayout *v20;
  const AudioChannelLayout *v21;
  const AudioStreamBasicDescription *v22;
  const AudioStreamBasicDescription *StreamBasicDescription;

  v22 = 0;
  StreamBasicDescription = 0;
  v20 = 0;
  v21 = 0;
  v18 = 0;
  sizeOut = 0;
  if (!a3)
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  v4 = 0;
  if (a1 && a2)
  {
    if (CMAudioFormatDescriptionGetRichestDecodableFormatAndChannelLayout())
    {
      StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(a1);
      ChannelLayout = CMAudioFormatDescriptionGetChannelLayout(a1, &sizeOut);
      v21 = ChannelLayout;
    }
    else
    {
      ChannelLayout = v21;
    }
    v4 = 0;
    if (ChannelLayout && StreamBasicDescription)
    {
      if (CMAudioFormatDescriptionGetRichestDecodableFormatAndChannelLayout())
      {
        v22 = CMAudioFormatDescriptionGetStreamBasicDescription(a2);
        v8 = CMAudioFormatDescriptionGetChannelLayout(a2, &v18);
        v20 = v8;
      }
      else
      {
        v8 = v20;
      }
      v4 = 0;
      if (v8)
      {
        if (v22)
        {
          mFormatID = StreamBasicDescription->mFormatID;
          if (mFormatID > 1885547314)
          {
            if (mFormatID > 1902469938)
            {
              if (mFormatID <= 2053319474)
              {
                v12 = 1902469939;
                goto LABEL_28;
              }
              if (mFormatID == 2053464883)
                goto LABEL_37;
              v11 = 2053319475;
            }
            else
            {
              if (mFormatID <= 1902207794)
              {
                if (mFormatID != 1885547315)
                {
                  v10 = 1885692723;
                  goto LABEL_36;
                }
                goto LABEL_42;
              }
              if (mFormatID == 1902207795)
                goto LABEL_37;
              v11 = 1902324531;
            }
          }
          else if (mFormatID > 1667575090)
          {
            if (mFormatID > 1700998450)
            {
              if (mFormatID == 1700998451)
                goto LABEL_37;
              v10 = 1885430579;
              goto LABEL_36;
            }
            if (mFormatID == 1667575091)
              goto LABEL_37;
            v11 = 1700997939;
          }
          else
          {
            if (mFormatID <= 1667326770)
            {
              if (mFormatID != 1633889587)
              {
                v10 = 1667312947;
                goto LABEL_36;
              }
LABEL_37:
              if (v22->mChannelsPerFrame > 2)
              {
                v13 = CFSTR("DolbyAudio");
LABEL_51:
                v16 = CFRetain(v13);
                v4 = 0;
                *a3 = v16;
                return v4;
              }
LABEL_47:
              if (StreamBasicDescription->mChannelsPerFrame < 3 || v22->mChannelsPerFrame <= 2)
                v13 = CFSTR("Stereo");
              else
                v13 = CFSTR("Surround");
              goto LABEL_51;
            }
            if (mFormatID == 1667326771)
              goto LABEL_37;
            v11 = 1667574579;
          }
          if (mFormatID != v11)
            goto LABEL_47;
LABEL_42:
          if (v22->mChannelsPerFrame >= 3)
          {
            mChannelLayoutTag = v8->mChannelLayoutTag;
            v13 = CFSTR("DolbyAtmos");
            if (mChannelLayoutTag <= 12713991)
            {
              if (mChannelLayoutTag == 12582924)
                goto LABEL_51;
              v15 = 12648464;
            }
            else
            {
              if (mChannelLayoutTag == 12713992 || mChannelLayoutTag == 12779530)
                goto LABEL_51;
              v15 = 12845066;
            }
            if (mChannelLayoutTag == v15)
              goto LABEL_51;
          }
          if (mFormatID <= 1885692722)
          {
            if (mFormatID > 1700998450)
            {
              v10 = 1885547315;
            }
            else
            {
              if (mFormatID == 1667574579)
                goto LABEL_37;
              v10 = 1700997939;
            }
LABEL_36:
            if (mFormatID != v10)
              goto LABEL_47;
            goto LABEL_37;
          }
          if (mFormatID <= 1902469938)
          {
            v10 = 1902324531;
            goto LABEL_36;
          }
          v12 = 2053319475;
LABEL_28:
          if (mFormatID == v12)
            goto LABEL_37;
          v10 = 2053202739;
          goto LABEL_36;
        }
      }
    }
  }
  return v4;
}

uint64_t APSBadgingConvertAPSourceFormatToMATSourceFormat(uint64_t result, uint64_t *a2)
{
  uint64_t SInt32;

  if (result)
  {
    if (a2)
    {
      SInt32 = FigCFNumberCreateSInt32();
      result = 0;
      *a2 = SInt32;
    }
    else
    {
      APSLogErrorAt(0);
      return 4294960591;
    }
  }
  return result;
}

uint64_t APSBadgingFormatInfoTypeGetString(int a1, const __CFString **a2)
{
  uint64_t v2;
  const __CFString *v3;

  if (a2)
  {
    *a2 = 0;
    v2 = 4294960561;
    switch(a1)
    {
      case 1:
        v2 = 0;
        v3 = CFSTR("Stereo");
        goto LABEL_8;
      case 2:
        v2 = 0;
        v3 = CFSTR("Surround");
        goto LABEL_8;
      case 3:
        v2 = 0;
        v3 = CFSTR("AppleSpatialAudio");
        goto LABEL_8;
      case 5:
        v2 = 0;
        v3 = CFSTR("DolbyAudio");
        goto LABEL_8;
      case 6:
        v2 = 0;
        v3 = CFSTR("DolbyAtmos");
LABEL_8:
        *a2 = v3;
        break;
      default:
        return v2;
    }
  }
  else
  {
    v2 = 4294960591;
    APSLogErrorAt(4294960591);
  }
  return v2;
}

uint64_t APSBadgingFormatInfoTypeGetEnum(const void *a1, int *a2)
{
  uint64_t v4;
  int v5;

  if (!a1)
  {
    v4 = 4294960591;
LABEL_18:
    APSLogErrorAt(4294960591);
    return v4;
  }
  if (!a2)
  {
    v4 = 4294960591;
    goto LABEL_18;
  }
  *a2 = 0;
  if (CFEqual(a1, CFSTR("DolbyAtmos")))
  {
    v4 = 0;
    v5 = 6;
  }
  else if (CFEqual(a1, CFSTR("DolbyAudio")))
  {
    v4 = 0;
    v5 = 5;
  }
  else if (CFEqual(a1, CFSTR("AppleSpatialAudio")))
  {
    v4 = 0;
    v5 = 3;
  }
  else if (CFEqual(a1, CFSTR("Surround")))
  {
    v4 = 0;
    v5 = 2;
  }
  else
  {
    if (!CFEqual(a1, CFSTR("Stereo")))
      return 4294960561;
    v4 = 0;
    v5 = 1;
  }
  *a2 = v5;
  return v4;
}

uint64_t APSBadgingFormatInfoTypeResolve(uint64_t result, int a2)
{
  if ((result - 5) < 2 && a2 == 0)
    return 3;
  else
    return result;
}

uint64_t APSAPAPEncodeUIntV(unint64_t a1, uint64_t (*a2)(uint64_t *))
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  v8 = 0;
  if (!a2)
    return 4294960591;
  v4 = ilog2_64();
  v6 = (v4 * (unsigned __int128)0x2492492492492493uLL) >> 64;
  do
  {
    *((_BYTE *)&v8 + v6) = a1 | 0x80;
    a1 >>= 7;
    --v6;
  }
  while (v6 != -1);
  v5 = ((((v4 - ((unsigned __int16)(37 * v4) >> 8)) >> 1) + ((37 * v4) >> 8)) >> 2) + 1;
  *((_BYTE *)&v8 + v5 - 1) &= ~0x80u;
  return a2(&v8);
}

uint64_t APSAPAPGetEncodeSizeUIntV(uint64_t a1, _QWORD *a2)
{
  int v3;
  uint64_t result;

  if (!a2)
    return 4294960591;
  v3 = ilog2_64();
  result = 0;
  *a2 = ((((v3 - ((unsigned __int16)(37 * v3) >> 8)) >> 1) + ((37 * v3) >> 8)) >> 2) + 1;
  return result;
}

uint64_t APSAPAPDecodeUIntV(uint64_t (*a1)(char *, uint64_t, uint64_t), uint64_t a2, unint64_t *a3)
{
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  char v9;

  v9 = 0;
  if (!a1)
    return 4294960591;
  v6 = 0;
  while (1)
  {
    result = a1(&v9, 1, a2);
    if ((_DWORD)result)
      break;
    v8 = v9 & 0x7F | (v6 << 7);
    if (v8 < v6)
      return 4294960586;
    v6 = v9 & 0x7F | (v6 << 7);
    if ((v9 & 0x80000000) == 0)
    {
      result = 0;
      if (a3)
        *a3 = v8;
      return result;
    }
  }
  return result;
}

uint64_t APSAPAPEncodeHeader(uint64_t a1, unsigned int a2, uint64_t (*a3)(unint64_t *, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  int v6;
  unint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;

  result = 4294960591;
  if (a3 && !HIBYTE(a2) && (*(_DWORD *)(a1 + 12) & 0x1D) == 1)
  {
    v7 = bswap64(*(_QWORD *)a1);
    v6 = *(_DWORD *)(a1 + 8);
    v8 = HIBYTE(v6);
    v9 = BYTE2(v6);
    v10 = BYTE1(v6);
    v11 = v6;
    v12 = BYTE2(a2);
    v13 = BYTE1(a2);
    v14 = a2;
    return a3(&v7, 15, a4);
  }
  return result;
}

uint64_t APSAPAPDecodeHeader(uint64_t (*a1)(unint64_t *, uint64_t, uint64_t), uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t result;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTime v9;
  unint64_t v10[2];
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  memset(v10, 0, 15);
  if (!a1)
    return 4294960591;
  result = a1(v10, 15, a2);
  if (!(_DWORD)result)
  {
    CMTimeMake(&v9, bswap64(v10[0]), bswap32(v10[1]));
    value = v9.value;
    flags = v9.flags;
    timescale = v9.timescale;
    if ((v9.flags & 1) != 0)
    {
      if (a3)
      {
        epoch = v9.epoch;
        *(_QWORD *)a3 = value;
        *(_DWORD *)(a3 + 8) = timescale;
        *(_DWORD *)(a3 + 12) = flags;
        *(_QWORD *)(a3 + 16) = epoch;
      }
      result = 0;
      if (a4)
        *a4 = (BYTE4(v10[1]) << 16) | (BYTE5(v10[1]) << 8) | BYTE6(v10[1]);
    }
    else
    {
      return 4294960559;
    }
  }
  return result;
}

uint64_t APSAPAPEncodeExtension(uint64_t (*a1)(uint64_t (*)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4), _QWORD *, uint64_t), uint64_t a2, uint64_t (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t result;
  _QWORD v7[2];
  _QWORD v8[3];

  v8[0] = 0;
  v8[1] = a3;
  v8[2] = a4;
  v7[0] = _APSAPAPProtectedWriteCallback;
  v7[1] = v8;
  result = 4294960591;
  if (a1)
  {
    if (a3)
    {
      result = a1(_APSAPAPEncodeExtensionItemCallback, v7, a2);
      if (!(_DWORD)result)
      {
        result = LODWORD(v8[0]);
        if (!LODWORD(v8[0]))
          return APSAPAPEncodeUIntV(0, a3);
      }
    }
  }
  return result;
}

uint64_t _APSAPAPProtectedWriteCallback(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t))
{
  uint64_t result;

  result = *(unsigned int *)a3;
  if (a2)
  {
    if (!(_DWORD)result)
    {
      result = a3[1](a1);
      *(_DWORD *)a3 = result;
    }
  }
  return result;
}

uint64_t _APSAPAPEncodeExtensionItemCallback(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (!a1)
    return 4294960591;
  result = APSAPAPEncodeUIntV(a1, *(uint64_t (**)(uint64_t *))a4);
  if (!(_DWORD)result)
  {
    result = APSAPAPEncodeUIntV(a2, *(uint64_t (**)(uint64_t *))a4);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))a4)(a3, a2, *(_QWORD *)(a4 + 8));
  }
  return result;
}

uint64_t APSAPAPDecodeExtension(uint64_t (*a1)(char *, uint64_t, uint64_t), uint64_t a2, uint64_t (*a3)(unint64_t))
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v13;
  char v14;

  result = 4294960591;
  if (a1 && a3)
  {
LABEL_3:
    v7 = 0;
    v14 = 0;
    while (1)
    {
      result = a1(&v14, 1, a2);
      if ((_DWORD)result)
        break;
      v8 = v14 & 0x7F | (v7 << 7);
      if (v8 < v7)
        return 4294960586;
      v7 = v14 & 0x7F | (v7 << 7);
      if ((v14 & 0x80000000) == 0)
      {
        if (!v8)
          return 0;
        v9 = 0;
        v14 = 0;
        while (1)
        {
          result = a1(&v14, 1, a2);
          if ((_DWORD)result)
            return result;
          v10 = v14 & 0x7F | (v9 << 7);
          if (v10 < v9)
            return 4294960586;
          v9 = v14 & 0x7F | (v9 << 7);
          if ((v14 & 0x80000000) == 0)
          {
            v13 = v10;
            result = a3(v8);
            if ((_DWORD)result)
              return result;
            if (v13)
            {
              result = a1(0, v13, a2);
              if ((_DWORD)result)
                return result;
            }
            goto LABEL_3;
          }
        }
      }
    }
  }
  return result;
}

uint64_t _APSAPAPProtectedReadCallback(uint64_t a1, unint64_t a2, unsigned int *a3)
{
  uint64_t result;

  result = *a3;
  if (a2 && !(_DWORD)result)
  {
    if (*((_QWORD *)a3 + 3) < a2)
    {
      result = 4294960546;
      *a3 = -6750;
    }
    else
    {
      result = (*((uint64_t (**)(uint64_t, unint64_t, _QWORD))a3 + 1))(a1, a2, *((_QWORD *)a3 + 2));
      *a3 = result;
      if (!(_DWORD)result)
        *((_QWORD *)a3 + 3) -= a2;
    }
  }
  return result;
}

uint64_t APSAPAPGetEncodeSizeExtension(uint64_t (*a1)(_QWORD, uint64_t *, uint64_t), uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  result = 4294960591;
  if (a1)
  {
    if (a3)
    {
      result = a1(_APSAPAPGetEncodeSizeExtensionItemCallback, &v6, a2);
      if (!(_DWORD)result)
      {
        result = v6;
        if (!(_DWORD)v6)
          *a3 = v7 + 1;
      }
    }
  }
  return result;
}

uint64_t _APSAPAPGetEncodeSizeExtensionItemCallback(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  int v6;
  unsigned int v7;
  int v8;

  v3 = *a3;
  if (!(_DWORD)v3)
  {
    v6 = ilog2_64();
    v7 = (((v6 - ((unsigned __int16)(37 * v6) >> 8)) >> 1) + ((37 * v6) >> 8)) >> 2;
    *a3 = 0;
    v8 = ilog2_64();
    *a3 = 0;
    *((_QWORD *)a3 + 1) += a2
                         + v7
                         + ((((v8 - ((unsigned __int16)(37 * v8) >> 8)) >> 1)
                           + ((37 * v8) >> 8)) >> 2)
                         + 2;
  }
  return v3;
}

uint64_t APSAPAPEncode(__int128 *a1, unsigned int a2, uint64_t (*a3)(uint64_t (*)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4), _QWORD *, uint64_t), uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD *, uint64_t), uint64_t a6, uint64_t (*a7)(unint64_t *, uint64_t, uint64_t), uint64_t a8)
{
  uint64_t result;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[3];

  v18[0] = 0;
  v18[1] = a7;
  v18[2] = a8;
  result = 4294960591;
  if (a7)
  {
    if (a5)
    {
      if (a3)
      {
        if (!HIBYTE(a2) && (*((_DWORD *)a1 + 3) & 0x1D) == 1)
        {
          v16 = *a1;
          v17 = *((_QWORD *)a1 + 2);
          result = APSAPAPEncodeHeader((uint64_t)&v16, a2, a7, a8);
          if (!(_DWORD)result)
          {
            result = APSAPAPEncodeExtension(a3, a4, (uint64_t (*)(uint64_t *))a7, a8);
            if (!(_DWORD)result)
            {
              LODWORD(result) = a5(_APSAPAPProtectedWriteCallback, v18, a6);
              if ((_DWORD)result)
                return result;
              else
                return LODWORD(v18[0]);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t APSAPAPDecode(unint64_t a1, uint64_t (*a2)(_QWORD, unint64_t, uint64_t), uint64_t a3, uint64_t a4, int *a5, uint64_t (*a6)(unint64_t), uint64_t a7, uint64_t (*a8)(unint64_t, uint64_t (*)(uint64_t a1, unint64_t a2, unsigned int *a3), uint64_t *, uint64_t), uint64_t a9)
{
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD, unint64_t, uint64_t);
  uint64_t v15;
  unint64_t v16;

  v13 = 0;
  v14 = a2;
  v15 = a3;
  v16 = a1;
  if (a1 < 0x10)
    return 4294960553;
  result = 4294960591;
  if (a2)
  {
    if (a6)
    {
      if (a8)
      {
        result = APSAPAPDecodeHeader((uint64_t (*)(unint64_t *, uint64_t, uint64_t))_APSAPAPProtectedReadCallback, (uint64_t)&v13, a4, a5);
        if (!(_DWORD)result)
        {
          result = APSAPAPDecodeExtension((uint64_t (*)(char *, uint64_t, uint64_t))_APSAPAPProtectedReadCallback, (uint64_t)&v13, a6);
          if (!(_DWORD)result)
          {
            result = a8(v16, _APSAPAPProtectedReadCallback, &v13, a9);
            if (!(_DWORD)result)
            {
              result = v13;
              if (!(_DWORD)v13)
              {
                v12 = v16;
                if (v16)
                {
                  result = v14(0, v16, v15);
                  if ((_DWORD)result)
                    return result;
                  if (v16 != v12)
                    return 4294960587;
                }
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t APSAPAPGetEncodeSize(uint64_t (*a1)(_QWORD, uint64_t *, uint64_t), uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  if (!a1)
    return 4294960591;
  result = a1(_APSAPAPGetEncodeSizeExtensionItemCallback, &v7, a2);
  if (!(_DWORD)result)
  {
    result = v7;
    if (!(_DWORD)v7)
      *a4 = a3 + v8 + 16;
  }
  return result;
}

uint64_t APSCFRealTimeReadableGetTypeID()
{
  if (gAPSCFRealTimeReadableInitOnce != -1)
    dispatch_once_f(&gAPSCFRealTimeReadableInitOnce, 0, (dispatch_function_t)_APSCFRealTimeReadableGetTypeID);
  return gAPSCFRealTimeReadableTypeID;
}

uint64_t _APSCFRealTimeReadableGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSCFRealTimeReadableTypeID = result;
  return result;
}

void _APSCFRealTimeReadableFinalize(uint64_t a1)
{
  unsigned __int128 *v1;
  unsigned __int128 v2;

  v1 = (unsigned __int128 *)(a1 + 16);
  do
    v2 = __ldaxp(v1);
  while (__stxp(v2, v1));
  if ((_QWORD)v2)
    CFRelease((CFTypeRef)v2);
}

uint64_t APSCFRealTimeReadableCreate(const void *a1, CFTypeRef *a2)
{
  uint64_t Instance;
  _QWORD *v5;
  CFTypeRef v6;

  if (a2)
  {
    if (gAPSCFRealTimeReadableInitOnce != -1)
      dispatch_once_f(&gAPSCFRealTimeReadableInitOnce, 0, (dispatch_function_t)_APSCFRealTimeReadableGetTypeID);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v5 = (_QWORD *)Instance;
      *(_QWORD *)(Instance + 16) = 0;
      *(_QWORD *)(Instance + 24) = 0;
      if (a1)
        v6 = CFRetain(a1);
      else
        v6 = 0;
      v5[2] = v6;
      v5[3] = 0;
      *a2 = CFRetain(v5);
      CFRelease(v5);
      return 0;
    }
    else
    {
      APSLogErrorAt(0);
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
}

uint64_t APSCFRealTimeReadableCopyValue(uint64_t a1, _QWORD *a2)
{
  unsigned __int128 *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int128 v6;
  unint64_t v7;
  unsigned __int128 v8;
  int v9;
  CFTypeRef v10;
  uint64_t v11;

  if (a1 && a2)
  {
    v3 = (unsigned __int128 *)(a1 + 16);
    do
    {
      v6 = __ldxp(v3);
      v4 = *((_QWORD *)&v6 + 1);
      v5 = v6;
    }
    while (__stxp(v6, v3));
    do
    {
      if (v4)
      {
        APSLogErrorAt(0);
        v11 = 4294960537;
        APSSignalErrorAt(4294960537);
        return v11;
      }
      v7 = v5;
      do
      {
        while (1)
        {
          v8 = __ldaxp(v3);
          v4 = *((_QWORD *)&v8 + 1);
          v5 = v8;
          v9 = (_QWORD)v8 != v7;
          if (*((_QWORD *)&v8 + 1))
            ++v9;
          if (!v9)
            break;
          if (!__stxp(v8, v3))
            goto LABEL_13;
        }
      }
      while (__stxp(__PAIR128__(1, v7), v3));
LABEL_13:
      ;
    }
    while ((unint64_t)v8 ^ v7 | *((_QWORD *)&v8 + 1));
    if (v7)
      v10 = CFRetain((CFTypeRef)v7);
    else
      v10 = 0;
    do
      __ldxp(v3);
    while (__stxp(v7, v3));
    v11 = 0;
    *a2 = v10;
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  return v11;
}

uint64_t APSCFRealTimeReadableSetValue(uint64_t a1, CFTypeRef cf)
{
  unsigned __int128 *v2;
  unint64_t v3;
  unsigned __int128 v4;
  CFTypeRef v5;
  unsigned __int128 v6;
  int v7;

  if (!a1)
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  v2 = (unsigned __int128 *)(a1 + 16);
  do
  {
    v4 = __ldxp(v2);
    v3 = v4;
  }
  while (__stxp(v4, v2));
  if (cf)
    v5 = CFRetain(cf);
  else
    v5 = 0;
  while (1)
  {
    do
    {
      while (1)
      {
        v6 = __ldxp(v2);
        v7 = (_QWORD)v6 != v3;
        if (*((_QWORD *)&v6 + 1))
          ++v7;
        if (v7)
          break;
        if (!__stlxp((unint64_t)v5, v2))
          goto LABEL_14;
      }
    }
    while (__stlxp(v6, v2));
LABEL_14:
    if (!((unint64_t)v6 ^ v3 | *((_QWORD *)&v6 + 1)))
      break;
    v3 = v6;
    pthread_yield_np();
  }
  if (v3)
    CFRelease((CFTypeRef)v3);
  return 0;
}

uint64_t APSSignalErrorAt(uint64_t a1)
{
  if (gLogCategory_APSLogUtils <= 90 && (gLogCategory_APSLogUtils != -1 || _LogCategory_Initialize()))
    LogPrintF();
  return a1;
}

char *APSSGetGasGaugeStringForPercent(int a1)
{
  uint64_t v1;

  LODWORD(v1) = (int)(((double)a1 / -100.0 + 1.0) * 50.0) & ~((int)(((double)a1 / -100.0 + 1.0) * 50.0) >> 31);
  if (v1 >= 0x32)
    v1 = 50;
  else
    v1 = v1;
  return &asc_1C96DFB4B[v1];
}

void *APSLogUtilsGetAsyncCnxLogCategory()
{
  return &APSLogUtilsGetAsyncCnxLogCategory_gLogCategory_AsyncCnx;
}

void *APSLogUtilsGetHTTPClientCoreLogCategory()
{
  return &APSLogUtilsGetHTTPClientCoreLogCategory_gLogCategory_HTTPClientCore;
}

uint64_t APSDispatchDataCreateWithBlockBuffer(OpaqueCMBlockBuffer *a1, const __CFAllocator *a2, NSObject **a3)
{
  uint64_t v3;
  size_t DataLength;
  size_t v8;
  void *v9;
  void *v10;
  NSObject *v11;
  size_t v12;
  NSObject *v13;
  uint64_t DataPointer;
  dispatch_data_t v15;
  dispatch_data_t concat;
  dispatch_data_t v17;
  _QWORD destructor[5];
  _QWORD v20[6];
  char *dataPointerOut;
  size_t lengthAtOffsetOut;

  dataPointerOut = 0;
  lengthAtOffsetOut = 0;
  v3 = 4294960591;
  if (a1 && a3)
  {
    DataLength = CMBlockBufferGetDataLength(a1);
    if (DataLength)
    {
      v8 = DataLength;
      if (CMBlockBufferIsRangeContiguous(a1, 0, DataLength) || (const __CFAllocator *)*MEMORY[0x1E0C9AE20] == a2)
      {
        v12 = 0;
        v13 = 0;
        destructor[0] = MEMORY[0x1E0C809B0];
        destructor[1] = 0x40000000;
        destructor[2] = __APSDispatchDataCreateWithBlockBuffer_block_invoke_2;
        destructor[3] = &__block_descriptor_tmp_1;
        destructor[4] = a1;
        while (1)
        {
          DataPointer = CMBlockBufferGetDataPointer(a1, v12, &lengthAtOffsetOut, 0, &dataPointerOut);
          if ((_DWORD)DataPointer)
            break;
          v15 = dispatch_data_create(dataPointerOut, lengthAtOffsetOut, 0, destructor);
          if (!v15)
          {
            v3 = 4294960568;
            if (!v13)
              return v3;
LABEL_18:
            dispatch_release(v13);
            return v3;
          }
          v11 = v15;
          CFRetain(a1);
          if (v13)
          {
            concat = dispatch_data_create_concat(v13, v11);
            dispatch_release(v13);
            dispatch_release(v11);
            v11 = concat;
            if (!concat)
              return 4294960568;
          }
          v12 += lengthAtOffsetOut;
          v13 = v11;
          if (v12 >= v8)
            goto LABEL_22;
        }
        v3 = DataPointer;
        if (!v13)
          return v3;
        goto LABEL_18;
      }
      v9 = CFAllocatorAllocate(a2, v8, 0);
      if (!v9)
        return 4294960568;
      v10 = v9;
      v3 = CMBlockBufferCopyDataBytes(a1, 0, v8, v9);
      if ((_DWORD)v3)
        goto LABEL_8;
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 0x40000000;
      v20[2] = __APSDispatchDataCreateWithBlockBuffer_block_invoke;
      v20[3] = &__block_descriptor_tmp_324;
      v20[4] = a2;
      v20[5] = v10;
      v17 = dispatch_data_create(v10, v8, 0, v20);
      if (!v17)
      {
        v3 = 4294960568;
LABEL_8:
        CFAllocatorDeallocate(a2, v10);
        return v3;
      }
      v11 = v17;
      if (a2)
        CFRetain(a2);
    }
    else
    {
      v11 = MEMORY[0x1E0C80D00];
      dispatch_retain(MEMORY[0x1E0C80D00]);
    }
LABEL_22:
    dispatch_retain(v11);
    *a3 = v11;
    dispatch_release(v11);
    return 0;
  }
  return v3;
}

uint64_t APSDispatchDataCopyBytes(NSObject *a1, size_t a2, size_t a3, uint64_t a4)
{
  uint64_t v4;
  size_t size;
  _QWORD v11[8];
  _QWORD v12[4];

  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x2000000000;
  v12[3] = 0;
  v4 = 4294960591;
  if (a1)
  {
    if (a4)
    {
      size = dispatch_data_get_size(a1);
      if (size >= a3 && size - a3 >= a2)
      {
        if (a3)
        {
          v11[0] = MEMORY[0x1E0C809B0];
          v11[1] = 0x40000000;
          v11[2] = __APSDispatchDataCopyBytes_block_invoke;
          v11[3] = &unk_1E8288A78;
          v11[4] = v12;
          v11[5] = a2;
          v11[6] = a3;
          v11[7] = a4;
          dispatch_data_apply(a1, v11);
        }
        v4 = 0;
      }
    }
  }
  _Block_object_dispose(v12, 8);
  return v4;
}

uint64_t APSEndpointStreamAudioHoseRegistrarProtocolGetProtocolID()
{
  pthread_once(&APSEndpointStreamAudioHoseRegistrarProtocolGetProtocolID_sRegisterAPSEndpointStreamAudioHoseRegistrarProtocolTypeOnce, (void (*)(void))registerAPSEndpointStreamAudioHoseRegistrarProtocolType);
  return sAPSEndpointStreamAudioHoseRegistrarProtocolID;
}

uint64_t registerAPSEndpointStreamAudioHoseRegistrarProtocolType()
{
  return FigBaseProtocolRegisterProtocol();
}

uint64_t APSEndpointStreamAudioHoseProtocolGetProtocolID()
{
  pthread_once(&APSEndpointStreamAudioHoseProtocolGetProtocolID_sRegisterAPSEndpointStreamAudioHoseProtocolTypeOnce, (void (*)(void))registerAPSEndpointStreamAudioHoseProtocolType);
  return sAPSEndpointStreamAudioHoseProtocolID;
}

uint64_t registerAPSEndpointStreamAudioHoseProtocolType()
{
  return FigBaseProtocolRegisterProtocol();
}

uint64_t APSEndpointStreamAudioHoseSendAudioBatchSlow(uint64_t a1, uint64_t a2, CFArrayRef theArray)
{
  uint64_t result;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  const void *ValueAtIndex;
  const void *v11;
  CFTypeID v12;
  uint64_t ProtocolVTable;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, const void *);

  result = 4294894965;
  if (a1 && theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      v8 = Count;
      v9 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, v9);
        if (!ValueAtIndex)
          break;
        v11 = ValueAtIndex;
        v12 = CFGetTypeID(ValueAtIndex);
        if (v12 != CMBlockBufferGetTypeID())
          break;
        pthread_once(&APSEndpointStreamAudioHoseProtocolGetProtocolID_sRegisterAPSEndpointStreamAudioHoseProtocolTypeOnce, (void (*)(void))registerAPSEndpointStreamAudioHoseProtocolType);
        ProtocolVTable = CMBaseObjectGetProtocolVTable();
        if (!ProtocolVTable)
          return 4294954508;
        v14 = *(_QWORD *)(ProtocolVTable + 16);
        if (!v14)
          return 4294954508;
        v15 = *(uint64_t (**)(uint64_t, uint64_t, const void *))(v14 + 8);
        if (!v15)
          return 4294954514;
        result = v15(a1, a2, v11);
        if ((_DWORD)result)
          return result;
        if (v8 == ++v9)
          return 0;
      }
      return 4294894965;
    }
  }
  return result;
}

uint64_t APSThreadSafeSetGetTypeID()
{
  if (gAPSThreadSafeSetInitOnce != -1)
    dispatch_once_f(&gAPSThreadSafeSetInitOnce, 0, (dispatch_function_t)_APSThreadSafeSetGetTypeID);
  return gAPSThreadSafeSetTypeID;
}

uint64_t _APSThreadSafeSetGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSThreadSafeSetTypeID = result;
  return result;
}

uint64_t _APSThreadSafeSetFinalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 24) = 0;
  }
  return FigSimpleMutexDestroy();
}

uint64_t APSThreadSafeSetCreate(CFTypeRef *a1)
{
  uint64_t Instance;
  _QWORD *v3;
  uint64_t v4;
  CFMutableSetRef Mutable;
  uint64_t v6;

  if (!a1)
    return 4294960591;
  if (gAPSThreadSafeSetInitOnce != -1)
    dispatch_once_f(&gAPSThreadSafeSetInitOnce, 0, (dispatch_function_t)_APSThreadSafeSetGetTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294960568;
  v3 = (_QWORD *)Instance;
  *(_QWORD *)(Instance + 16) = 0;
  *(_QWORD *)(Instance + 24) = 0;
  v4 = FigSimpleMutexCreate();
  v3[2] = v4;
  if (v4)
  {
    Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
    v3[3] = Mutable;
    if (Mutable)
    {
      v6 = 0;
      *a1 = CFRetain(v3);
    }
    else
    {
      v6 = 4294954510;
    }
  }
  else
  {
    v6 = 4294960568;
  }
  CFRelease(v3);
  return v6;
}

uint64_t APSThreadSafeSetSetValue(uint64_t a1, const void *a2)
{
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  CFSetSetValue(*(CFMutableSetRef *)(a1 + 24), a2);
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
}

uint64_t APSThreadSafeSetRemoveValue(uint64_t a1, const void *a2)
{
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 24), a2);
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
}

CFIndex APSThreadSafeSetGetCount(uint64_t a1)
{
  CFIndex Count;

  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  Count = CFSetGetCount(*(CFSetRef *)(a1 + 24));
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
  return Count;
}

uint64_t APSRingBufferFlushControllerInit(unint64_t *a1)
{
  uint64_t result;

  if (!a1)
    return 4294960591;
  result = 0;
  atomic_store(0, a1);
  return result;
}

uint64_t APSRingBufferFlushControllerPrepareForFlush(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  if (!a1)
    return 4294960591;
  result = 0;
  *a1 = *(unsigned int *)(a2 + 28) | 0x100000000;
  return result;
}

uint64_t APSRingBufferFlushControllerFlush(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t result;

  if (!a1)
    return 4294960591;
  do
    v2 = __ldxr(a1);
  while (__stxr(0, a1));
  if ((v2 & 0xFF00000000) == 0)
    LODWORD(v2) = *(_DWORD *)(a2 + 28);
  result = 0;
  *(_DWORD *)(a2 + 24) = v2;
  return result;
}

uint64_t APSNetworkClockNTPServerCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef v6;
  CFTypeRef cf;

  cf = 0;
  v4 = ntpClock_createCommon(a1, a2, &cf);
  v5 = v4;
  if ((_DWORD)v4)
  {
    APSLogErrorAt(v4);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    v6 = cf;
    *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 24) = 1;
    NTPClockSetListenPort();
    *a3 = v6;
  }
  return v5;
}

uint64_t ntpClock_createCommon(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t Mutable;
  _QWORD *DerivedStorage;
  uint64_t v6;

  if (APSNetworkClockGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APSNetworkClockGetClassID_sRegisterOnce, &APSNetworkClockGetClassID_sClassID, (dispatch_function_t)networkClock_registerBaseClass);
  Mutable = CMDerivedObjectCreate();
  if ((_DWORD)Mutable)
  {
    v6 = Mutable;
LABEL_18:
    APSLogErrorAt(Mutable);
    return v6;
  }
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  Mutable = FigSimpleMutexCreate();
  *DerivedStorage = Mutable;
  if (!Mutable)
  {
    v6 = 4294895326;
    goto LABEL_18;
  }
  Mutable = (uint64_t)CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  DerivedStorage[2] = Mutable;
  if (!Mutable)
  {
    v6 = 4294895326;
    goto LABEL_18;
  }
  Mutable = NTPClockCreate();
  if ((_DWORD)Mutable)
  {
    v6 = Mutable;
    goto LABEL_18;
  }
  if ((int)SNPrintF() <= 0)
  {
    APSLogErrorAt(0);
    return 4294895322;
  }
  else
  {
    NTPClockSetEpoch();
    NTPClockSetP2P();
    NTPClockSetThreadName();
    NTPClockSetThreadPriority();
    if (gLogCategory_APSNetworkClockNTP <= 50
      && (gLogCategory_APSNetworkClockNTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v6 = 0;
    *a3 = 0;
  }
  return v6;
}

uint64_t ntpClock_GetSynchronizedNetworkTime(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  _BOOL8 isStarted;
  uint64_t SynchronizedNTPTime;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)DerivedStorage);
  isStarted = ntpClock_isStarted();
  if (isStarted)
  {
    if (*(_BYTE *)(DerivedStorage + 24))
    {
      mach_absolute_time();
      SynchronizedNTPTime = UpTicksToNTP();
    }
    else
    {
      SynchronizedNTPTime = NTPClockGetSynchronizedNTPTime();
    }
    v6 = 0;
    *a2 = 0;
    a2[1] = SynchronizedNTPTime << 32;
    a2[2] = HIDWORD(SynchronizedNTPTime);
  }
  else
  {
    APSLogErrorAt(isStarted);
    v6 = 4294895323;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)DerivedStorage);
  return v6;
}

uint64_t ntpClock_ConvertUpTicksToNetworkTime(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  _BOOL8 isStarted;
  uint64_t SynchronizedNTPTimeNearUpTicks;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)DerivedStorage);
  isStarted = ntpClock_isStarted();
  if (isStarted)
  {
    if (*(_BYTE *)(DerivedStorage + 24))
      SynchronizedNTPTimeNearUpTicks = UpTicksToNTP();
    else
      SynchronizedNTPTimeNearUpTicks = NTPClockGetSynchronizedNTPTimeNearUpTicks();
    v7 = 0;
    *a3 = 0;
    a3[1] = SynchronizedNTPTimeNearUpTicks << 32;
    a3[2] = HIDWORD(SynchronizedNTPTimeNearUpTicks);
  }
  else
  {
    APSLogErrorAt(isStarted);
    v7 = 4294895323;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)DerivedStorage);
  return v7;
}

uint64_t ntpClock_ConvertNetworkTimeToUpTicks(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t DerivedStorage;
  _BOOL8 isStarted;
  uint64_t UpTicksNearSynchronizedNTPTime;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)DerivedStorage);
  isStarted = ntpClock_isStarted();
  if (isStarted)
  {
    if (*(_BYTE *)(DerivedStorage + 24))
      UpTicksNearSynchronizedNTPTime = NTPtoUpTicks();
    else
      UpTicksNearSynchronizedNTPTime = NTPClockGetUpTicksNearSynchronizedNTPTime();
    v7 = 0;
    *a3 = UpTicksNearSynchronizedNTPTime;
  }
  else
  {
    APSLogErrorAt(isStarted);
    v7 = 4294895323;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)DerivedStorage);
  return v7;
}

uint64_t ntpClock_AddOrUpdatePeer()
{
  return 0;
}

uint64_t ntpClock_RemovePeer()
{
  return 0;
}

uint64_t ntpClock_SetPeers()
{
  return 0;
}

uint64_t ntpClock_CopySerializablePeerListForPeer()
{
  return 0;
}

uint64_t ntpClock_CopyInitialSerializablePeerList()
{
  return 0;
}

uint64_t ntpClock_SetOrUpdateLocalPeerInfo()
{
  return 0;
}

uint64_t ntpClock_StartForClient(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t started;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)DerivedStorage);
  if (!a2)
  {
    APSLogErrorAt(0);
    v4 = 4294895325;
    goto LABEL_22;
  }
  if (CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 16), a2))
    goto LABEL_12;
  if (!CFSetGetCount(*(CFSetRef *)(DerivedStorage + 16)))
  {
    v4 = *(unsigned int *)(DerivedStorage + 28);
    if ((_DWORD)v4)
    {
      if (gLogCategory_APSNetworkClockNTP <= 60
        && (gLogCategory_APSNetworkClockNTP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else
    {
      if (*(_BYTE *)(DerivedStorage + 24))
        started = NTPClockStartServer();
      else
        started = NTPClockStartClient();
      v4 = started;
      if (!(_DWORD)started)
      {
        if (gLogCategory_APSNetworkClockNTP <= 50
          && (gLogCategory_APSNetworkClockNTP != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        goto LABEL_4;
      }
    }
    APSLogErrorAt(v4);
    goto LABEL_22;
  }
LABEL_4:
  CFSetAddValue(*(CFMutableSetRef *)(DerivedStorage + 16), a2);
  if (gLogCategory_APSNetworkClockNTP <= 50
    && (gLogCategory_APSNetworkClockNTP != -1 || _LogCategory_Initialize()))
  {
    CFSetGetCount(*(CFSetRef *)(DerivedStorage + 16));
    LogPrintF();
  }
LABEL_12:
  v4 = 0;
LABEL_22:
  pthread_mutex_unlock(*(pthread_mutex_t **)DerivedStorage);
  return v4;
}

uint64_t ntpClock_StopForClient(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  CFIndex Count;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)DerivedStorage);
  if (ntpClock_isStarted())
  {
    if (!a2)
    {
      APSLogErrorAt(0);
      v5 = 4294895325;
      goto LABEL_14;
    }
    if (CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 16), a2))
    {
      Count = CFSetGetCount(*(CFSetRef *)(DerivedStorage + 16));
      CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 16), a2);
      if (gLogCategory_APSNetworkClockNTP <= 50
        && (gLogCategory_APSNetworkClockNTP != -1 || _LogCategory_Initialize()))
      {
        CFSetGetCount(*(CFSetRef *)(DerivedStorage + 16));
        LogPrintF();
      }
      if (Count == 1)
      {
        NTPClockStop();
        if (gLogCategory_APSNetworkClockNTP <= 50
          && (gLogCategory_APSNetworkClockNTP != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
    }
  }
  v5 = 0;
LABEL_14:
  pthread_mutex_unlock(*(pthread_mutex_t **)DerivedStorage);
  return v5;
}

uint64_t ntpClock_ClearLocalPeerInfo()
{
  return 0;
}

BOOL ntpClock_isStarted()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigSimpleMutexCheckIsLockedOnThisThread();
  return CFSetGetCount(*(CFSetRef *)(DerivedStorage + 16)) != 0;
}

uint64_t ntpClock_Finalize()
{
  uint64_t DerivedStorage;
  const __CFSet *v1;
  const void *v2;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSNetworkClockNTP <= 50
    && (gLogCategory_APSNetworkClockNTP != -1 || _LogCategory_Initialize()))
  {
    v1 = *(const __CFSet **)(DerivedStorage + 16);
    if (v1)
      CFSetGetCount(v1);
    LogPrintF();
  }
  v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 8))
  {
    NTPClockStop();
    CFRelease(*(CFTypeRef *)(DerivedStorage + 8));
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  result = FigSimpleMutexDestroy();
  *(_QWORD *)DerivedStorage = 0;
  return result;
}

__CFString *ntpClock_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APSNTPClock %p>"), a1);
  return Mutable;
}

uint64_t ntpClock_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  CMClockRef HostTimeClock;
  uint64_t v9;
  _BOOL4 isStarted;
  CFTypeRef *v11;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, CFSTR("NetworkClock_Type")))
  {
    if (CFEqual(a2, CFSTR("PortLocal")))
    {
      pthread_mutex_lock(*(pthread_mutex_t **)DerivedStorage);
      if (!*(_BYTE *)(DerivedStorage + 24)
        && gLogCategory_APSNetworkClockNTP <= 50
        && (gLogCategory_APSNetworkClockNTP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      valuePtr = NTPClockGetListenPort();
      *a4 = CFNumberCreate(a3, kCFNumberSInt32Type, &valuePtr);
      pthread_mutex_unlock(*(pthread_mutex_t **)DerivedStorage);
      if (!*a4)
      {
        APSLogErrorAt(0);
        return 4294895326;
      }
    }
    else
    {
      if (CFEqual(a2, CFSTR("SourceClock")))
      {
        HostTimeClock = CMClockGetHostTimeClock();
        goto LABEL_3;
      }
      if (!CFEqual(a2, CFSTR("IsStarted")))
      {
        if (!CFEqual(a2, CFSTR("IsLocked")))
        {
          v9 = 4294954509;
          APSLogErrorAt(4294954509);
          return v9;
        }
        HostTimeClock = (CMClockRef)*MEMORY[0x1E0C9AE50];
        goto LABEL_3;
      }
      pthread_mutex_lock(*(pthread_mutex_t **)DerivedStorage);
      isStarted = ntpClock_isStarted();
      v11 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      if (!isStarted)
        v11 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
      *a4 = CFRetain(*v11);
      pthread_mutex_unlock(*(pthread_mutex_t **)DerivedStorage);
    }
    return 0;
  }
  HostTimeClock = (CMClockRef)CFSTR("NetworkClockType_NTP");
LABEL_3:
  v9 = 0;
  *a4 = CFRetain(HostTimeClock);
  return v9;
}

uint64_t ntpClock_SetProperty(uint64_t a1, __CFString *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 == CFSTR("APSNetworkClock::SimulatedStartError")
    || a2 && CFEqual(a2, CFSTR("APSNetworkClock::SimulatedStartError")))
  {
    pthread_mutex_lock(*(pthread_mutex_t **)DerivedStorage);
    *(_DWORD *)(DerivedStorage + 28) = CFGetInt64();
    pthread_mutex_unlock(*(pthread_mutex_t **)DerivedStorage);
    return 0;
  }
  else
  {
    v4 = 4294954509;
    APSLogErrorAt(4294954509);
  }
  return v4;
}

uint64_t APSNetworkClockNTPClientCreate(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v8;
  uint64_t v9;
  CFTypeRef v10;
  CFTypeRef cf;

  cf = 0;
  v8 = ntpClock_createCommon(a1, a3, &cf);
  v9 = v8;
  if ((_DWORD)v8)
  {
    APSLogErrorAt(v8);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    v10 = cf;
    *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 24) = 0;
    if (a2)
      NTPClockSetQoSDisabled();
    NTPClockSetRTCP();
    NTPClockSetPeer();
    *a6 = v10;
  }
  return v9;
}

uint64_t APSNetworkClockNTPConvertUpTicksToNTP(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t DerivedStorage;
  _BOOL8 isStarted;
  uint64_t SynchronizedNTPTimeNearUpTicks;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)DerivedStorage);
  isStarted = ntpClock_isStarted();
  if (isStarted)
  {
    if (*(_BYTE *)(DerivedStorage + 24))
      SynchronizedNTPTimeNearUpTicks = UpTicksToNTP();
    else
      SynchronizedNTPTimeNearUpTicks = NTPClockGetSynchronizedNTPTimeNearUpTicks();
    v7 = 0;
    *a3 = SynchronizedNTPTimeNearUpTicks;
  }
  else
  {
    APSLogErrorAt(isStarted);
    v7 = 4294895323;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)DerivedStorage);
  return v7;
}

uint64_t APSNetworkClockNTPConvertNTPToUpTicks(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t DerivedStorage;
  _BOOL8 isStarted;
  uint64_t UpTicksNearSynchronizedNTPTime;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)DerivedStorage);
  isStarted = ntpClock_isStarted();
  if (isStarted)
  {
    if (*(_BYTE *)(DerivedStorage + 24))
      UpTicksNearSynchronizedNTPTime = NTPtoUpTicks();
    else
      UpTicksNearSynchronizedNTPTime = NTPClockGetUpTicksNearSynchronizedNTPTime();
    v7 = 0;
    *a3 = UpTicksNearSynchronizedNTPTime;
  }
  else
  {
    APSLogErrorAt(isStarted);
    v7 = 4294895323;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)DerivedStorage);
  return v7;
}

uint64_t APSOasisCPUFloorRaiserGetTypeID()
{
  if (gAPSOasisCPUFloorRaiserInitOnce != -1)
    dispatch_once_f(&gAPSOasisCPUFloorRaiserInitOnce, 0, (dispatch_function_t)_APSOasisCPUFloorRaiserGetTypeID);
  return gAPSOasisCPUFloorRaiserTypeID;
}

uint64_t _APSOasisCPUFloorRaiserGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSOasisCPUFloorRaiserTypeID = result;
  return result;
}

uint64_t _APSOasisCPUFloorRaiserFinalize(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
  {
    if (gLogCategory_APSOasisCPUFloorRaiser <= 50
      && (gLogCategory_APSOasisCPUFloorRaiser != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    APSOasisCPUFloorRaiserReleaseAssertion(a1);
  }
  return FigSimpleMutexDestroy();
}

uint64_t APSOasisCPUFloorRaiserReleaseAssertion(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  if (!*(_BYTE *)(a1 + 32))
  {
    APSLogErrorAt(0);
    v4 = 4294960587;
    goto LABEL_19;
  }
  if (gLogCategory_APSOasisCPUFloorRaiser <= 50
    && (gLogCategory_APSOasisCPUFloorRaiser != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (apsSingletonFloorRaiserIsAllowed_onceToken != -1)
    dispatch_once(&apsSingletonFloorRaiserIsAllowed_onceToken, &__block_literal_global_386);
  if (apsSingletonFloorRaiserIsAllowed_isAllowed)
  {
    v2 = apsSingletonFloorRaiserInit();
    if ((_DWORD)v2)
    {
      v4 = v2;
      APSLogErrorAt(v2);
    }
    else
    {
      pthread_mutex_lock((pthread_mutex_t *)gSingletonFloorRaiser);
      v3 = dword_1EF9205C8 - 1;
      if (dword_1EF9205C8 >= 1)
      {
        --dword_1EF9205C8;
        if (!v3)
        {
          if (gLogCategory_APSOasisCPUFloorRaiser <= 50
            && (gLogCategory_APSOasisCPUFloorRaiser != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          notify_set_state(dword_1EF9205CC, 0);
          notify_post("com.apple.airplay.oasis");
        }
        pthread_mutex_unlock((pthread_mutex_t *)gSingletonFloorRaiser);
        goto LABEL_18;
      }
      APSLogErrorAt(0);
      pthread_mutex_unlock((pthread_mutex_t *)gSingletonFloorRaiser);
      v4 = 4294960587;
    }
    APSLogErrorAt(v4);
    goto LABEL_19;
  }
LABEL_18:
  v4 = 0;
  *(_BYTE *)(a1 + 32) = 0;
LABEL_19:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
  return v4;
}

uint64_t apsSingletonFloorRaiserInit()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD block[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2000000000;
  v7 = 0;
  if (apsSingletonFloorRaiserIsAllowed_onceToken != -1)
    dispatch_once(&apsSingletonFloorRaiserIsAllowed_onceToken, &__block_literal_global_386);
  if (apsSingletonFloorRaiserIsAllowed_isAllowed)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __apsSingletonFloorRaiserInit_block_invoke;
    block[3] = &unk_1E8288D00;
    block[4] = &v4;
    if (apsSingletonFloorRaiserInit_onceToken != -1)
      dispatch_once(&apsSingletonFloorRaiserInit_onceToken, block);
    v0 = *((unsigned int *)v5 + 6);
    if ((_DWORD)v0)
    {
      APSLogErrorAt(v0);
    }
    else if (!gSingletonFloorRaiser || !dword_1EF9205CC)
    {
      APSLogErrorAt(0);
      *((_DWORD *)v5 + 6) = -6728;
    }
  }
  v1 = *((unsigned int *)v5 + 6);
  _Block_object_dispose(&v4, 8);
  return v1;
}

uint64_t __apsSingletonFloorRaiserInit_block_invoke(uint64_t a1)
{
  uint64_t result;

  gSingletonFloorRaiser = FigSimpleMutexCreate();
  dword_1EF9205C8 = 0;
  result = notify_register_check("com.apple.airplay.oasis", &dword_1EF9205CC);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t __apsSingletonFloorRaiserIsAllowed_block_invoke()
{
  uint64_t result;

  result = FigGetCFPreferenceNumberWithDefault();
  apsSingletonFloorRaiserIsAllowed_isAllowed = result == 0;
  if (gLogCategory_APSOasisCPUFloorRaiser <= 50)
  {
    if (gLogCategory_APSOasisCPUFloorRaiser != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

uint64_t APSOasisCPUFloorRaiserCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *Instance;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  if (a3)
  {
    if (gAPSOasisCPUFloorRaiserInitOnce != -1)
      dispatch_once_f(&gAPSOasisCPUFloorRaiserInitOnce, 0, (dispatch_function_t)_APSOasisCPUFloorRaiserGetTypeID);
    Instance = (_QWORD *)_CFRuntimeCreateInstance();
    if (Instance)
    {
      v6 = Instance;
      Instance[2] = 0;
      Instance[3] = 0;
      Instance[4] = 0;
      v7 = FigSimpleMutexCreate();
      v6[2] = v7;
      if (v7)
      {
        result = 0;
        v6[3] = a2;
        *a3 = v6;
        return result;
      }
      APSLogErrorAt(0);
      CFRelease(v6);
    }
    else
    {
      APSLogErrorAt(0);
    }
    return 4294960568;
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
}

uint64_t APSOasisCPUFloorRaiserRetainAssertion(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  if (*(_BYTE *)(a1 + 32))
  {
    APSLogErrorAt(0);
    v4 = 4294960587;
  }
  else
  {
    if (gLogCategory_APSOasisCPUFloorRaiser <= 50
      && (gLogCategory_APSOasisCPUFloorRaiser != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (apsSingletonFloorRaiserIsAllowed_onceToken != -1)
      dispatch_once(&apsSingletonFloorRaiserIsAllowed_onceToken, &__block_literal_global_386);
    if (apsSingletonFloorRaiserIsAllowed_isAllowed)
    {
      v2 = apsSingletonFloorRaiserInit();
      if ((_DWORD)v2)
      {
        v4 = v2;
        APSLogErrorAt(v2);
        APSLogErrorAt(v4);
        goto LABEL_18;
      }
      pthread_mutex_lock((pthread_mutex_t *)gSingletonFloorRaiser);
      v3 = dword_1EF9205C8;
      if (!dword_1EF9205C8)
      {
        if (gLogCategory_APSOasisCPUFloorRaiser <= 50
          && (gLogCategory_APSOasisCPUFloorRaiser != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        notify_set_state(dword_1EF9205CC, 1uLL);
        notify_post("com.apple.airplay.oasis");
        v3 = dword_1EF9205C8;
      }
      dword_1EF9205C8 = v3 + 1;
      pthread_mutex_unlock((pthread_mutex_t *)gSingletonFloorRaiser);
    }
    v4 = 0;
    *(_BYTE *)(a1 + 32) = 1;
  }
LABEL_18:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
  return v4;
}

uint64_t APSCryptorCTRCreate(uint64_t a1, const __CFData *a2, const __CFData *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;

  if (!a2)
  {
    v8 = 4294895585;
    APSLogErrorAt(0);
    return v8;
  }
  if (!a3)
  {
    v8 = 4294895585;
    v7 = 0;
LABEL_17:
    APSLogErrorAt(v7);
    return v8;
  }
  if (APSCryptorGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APSCryptorGetClassID_sRegisterOnce, &APSCryptorGetClassID_sClassID, (dispatch_function_t)cryptor_registerBaseClass);
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
  {
    v8 = v7;
    goto LABEL_17;
  }
  CMBaseObjectGetDerivedStorage();
  CFDataGetBytePtr(a2);
  CFDataGetBytePtr(a3);
  v7 = AES_CTR_Init();
  if ((_DWORD)v7)
  {
    v8 = v7;
    goto LABEL_17;
  }
  if (gLogCategory_APSCryptorCTR <= 30 && (gLogCategory_APSCryptorCTR != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v8 = 0;
  *a4 = 0;
  return v8;
}

uint64_t ctrCryptor_GetEncryptionOverheadLength()
{
  return 0;
}

uint64_t ctrCryptor_EncryptMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v9;
  uint64_t v10;

  CMBaseObjectGetDerivedStorage();
  if (a7 < a5)
  {
    APSLogErrorAt(0);
    return 4294895585;
  }
  else
  {
    v9 = AES_CTR_Update();
    v10 = v9;
    if ((_DWORD)v9)
      APSLogErrorAt(v9);
  }
  return v10;
}

uint64_t ctrCryptor_Finalize()
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSCryptorCTR <= 30 && (gLogCategory_APSCryptorCTR != -1 || _LogCategory_Initialize()))
    LogPrintF();
  return AES_CTR_Final();
}

__CFString *ctrCryptor_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APSCryptorCTR %p>"), a1);
  return Mutable;
}

uint64_t APSNetworkClockPTPCreate(const __CFAllocator *a1, _QWORD *a2)
{
  uint64_t Mutable;
  uint64_t DerivedStorage;
  const __CFAllocator *v6;
  uint64_t v7;
  char label[16];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  *(_OWORD *)label = 0u;
  v10 = 0u;
  if (APSNetworkClockGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APSNetworkClockGetClassID_sRegisterOnce, &APSNetworkClockGetClassID_sClassID, (dispatch_function_t)networkClock_registerBaseClass);
  Mutable = CMDerivedObjectCreate();
  if ((_DWORD)Mutable)
  {
    v7 = Mutable;
LABEL_27:
    APSLogErrorAt(Mutable);
    return v7;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 24) = Mutable;
  if (!Mutable)
  {
    v7 = 4294895326;
    goto LABEL_27;
  }
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(DerivedStorage + 32) = Mutable;
  if (!Mutable)
  {
    v7 = 4294895326;
    goto LABEL_27;
  }
  Mutable = (uint64_t)CFArrayCreateMutable(v6, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 40) = Mutable;
  if (!Mutable)
  {
    v7 = 4294895326;
    goto LABEL_27;
  }
  Mutable = (uint64_t)CFSetCreateMutable(a1, 0, MEMORY[0x1E0C9B3B0]);
  *(_QWORD *)(DerivedStorage + 80) = Mutable;
  if (!Mutable)
  {
    v7 = 4294895326;
    goto LABEL_27;
  }
  if ((int)SNPrintF() <= 0)
  {
    APSLogErrorAt(0);
    return 4294895322;
  }
  Mutable = (uint64_t)dispatch_queue_create(label, 0);
  *(_QWORD *)DerivedStorage = Mutable;
  if (!Mutable)
  {
    v7 = 4294895326;
    goto LABEL_27;
  }
  if (gLogCategory_APSNetworkClockPTP <= 50
    && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_BYTE *)(DerivedStorage + 20) = APSSettingsGetInt64(CFSTR("ptpForceFullMesh"), 0) != 0;
  *(_DWORD *)(DerivedStorage + 16) = APSSettingsGetIntWithOverrideAndDefault(CFSTR("ptpGMStableTimerMs"), 0, 2000);
  *(_BYTE *)(DerivedStorage + 21) = APSSettingsIsFeatureEnabled(CFSTR("AirPlayPerf_PTPNoExtraHub"));
  *(_BYTE *)(DerivedStorage + 22) = APSSettingsGetInt64(CFSTR("ptpDisablePeerConfiguration"), 0) != 0;
  if (gLogCategory_APSNetworkClockPTP <= 50
    && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v7 = 0;
  *a2 = 0;
  return v7;
}

uint64_t ptpClock_GetSynchronizedNetworkTime(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  OpaqueCMClock *HostTimeClock;
  double Seconds;
  uint64_t v6;
  CMTime time;
  uint64_t v9;
  CMTime v10;
  CMTime v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v10, 0, sizeof(v10));
  HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime(&v10, HostTimeClock);
  v9 = 0;
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 24));
  v11 = v10;
  ptpClock_getClockTimeForHostTime((uint64_t)&time);
  v11.value = time.value;
  v11.timescale = time.timescale;
  if ((time.flags & 0x1D) == 1)
  {
    time.value = v11.value;
    time.timescale = v11.timescale;
    Seconds = CMTimeGetSeconds(&time);
    v6 = 0;
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = vcvtd_n_u64_f64(Seconds - floor(Seconds), 0x40uLL);
    *(_DWORD *)(a2 + 16) = vcvtmd_s64_f64(Seconds);
    *(_DWORD *)(a2 + 20) = 0;
  }
  else
  {
    APSLogErrorAt(0);
    v6 = 4294895322;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 24));
  return v6;
}

uint64_t ptpClock_ConvertUpTicksToNetworkTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  double Seconds;
  uint64_t v7;
  CMTime time;
  CMTime v10;
  uint64_t v11;
  CMTime v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = 0;
  memset(&v10, 0, sizeof(v10));
  CMClockMakeHostTimeFromSystemUnits(&v10, a2);
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 24));
  v12 = v10;
  ptpClock_getClockTimeForHostTime((uint64_t)&time);
  v12.value = time.value;
  v12.timescale = time.timescale;
  if ((time.flags & 0x1D) == 1)
  {
    time.value = v12.value;
    time.timescale = v12.timescale;
    Seconds = CMTimeGetSeconds(&time);
    v7 = 0;
    *(_QWORD *)a3 = v11;
    *(_QWORD *)(a3 + 8) = vcvtd_n_u64_f64(Seconds - floor(Seconds), 0x40uLL);
    *(_DWORD *)(a3 + 16) = vcvtmd_s64_f64(Seconds);
    *(_DWORD *)(a3 + 20) = 0;
  }
  else
  {
    APSLogErrorAt(0);
    v7 = 4294895322;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 24));
  return v7;
}

uint64_t ptpClock_ConvertNetworkTimeToUpTicks(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  CMTime v9;
  __int128 v10;
  CMTimeEpoch v11;
  uint64_t v12;
  CMTime hostTime;
  CMTimeValue v14;
  CMTimeScale v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  CMTimeMake(&v9, 1000000000 * *(int *)(a2 + 16) + ((1000000000 * (unint64_t)*(unsigned int *)(a2 + 12)) >> 32), 1000000000);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = *MEMORY[0x1E0CA2E18];
  v11 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  if (*(_QWORD *)(DerivedStorage + 88))
  {
    hostTime = v9;
    CM8021ASClockGetHostTimeForClockTime();
    v6 = v12;
  }
  else
  {
    APSLogErrorAt(0);
    v6 = 0;
  }
  v14 = v10;
  v15 = DWORD2(v10);
  v7 = 4294895322;
  if (v6 && (BYTE12(v10) & 1) != 0 && (BYTE12(v10) & 0x1D) == 1)
  {
    if (v6 == *(_QWORD *)a2)
    {
      hostTime.value = v14;
      hostTime.timescale = v15;
      hostTime.flags = HIDWORD(v10);
      hostTime.epoch = v11;
      v7 = 0;
      *a3 = CMClockConvertHostTimeToSystemUnits(&hostTime);
      return v7;
    }
    v7 = 4294895320;
  }
  APSLogErrorAt(0);
  if (gLogCategory_APSNetworkClockPTP <= 90
    && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v7;
}

uint64_t ptpClock_AddOrUpdatePeer(uint64_t a1, const __CFDictionary *a2, __CFDictionary **a3, unsigned __int8 *a4)
{
  uint64_t DerivedStorage;
  uint64_t isClockPortMatrixComplete;
  int v10;
  uint64_t v11;
  unsigned __int8 v13;
  __int16 v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v14 = 0;
  v13 = 0;
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 24));
  if (!*(_BYTE *)(DerivedStorage + 22))
  {
    if (!*(_QWORD *)(DerivedStorage + 48))
    {
      APSLogErrorAt(0);
      v11 = 4294895323;
      goto LABEL_15;
    }
    isClockPortMatrixComplete = ptpClock_isClockPortMatrixComplete(a1, (char *)&v14 + 1);
    if ((_DWORD)isClockPortMatrixComplete)
    {
      v11 = isClockPortMatrixComplete;
    }
    else
    {
      isClockPortMatrixComplete = ptpClock_addOrUpdatePeerInternal(a1, a2, a3, (char *)&v13);
      if ((_DWORD)isClockPortMatrixComplete)
      {
        v11 = isClockPortMatrixComplete;
      }
      else
      {
        if (HIBYTE(v14)
          || (isClockPortMatrixComplete = ptpClock_isClockPortMatrixComplete(a1, (char *)&v14),
              !(_DWORD)isClockPortMatrixComplete))
        {
          v10 = v13;
          if (a4)
            *a4 = v13;
          if (v10 | v14)
          {
            if (*(_BYTE *)(DerivedStorage + 21))
              ptpClock_enablePortsBasedOnTightSyncAndGMConfig();
            else
              ptpClock_updateGMIDAndHubPeerAndEnablePortsIfNeeded(a1, 0);
            ptpClock_firePeersChangedNotification();
          }
          goto LABEL_14;
        }
        v11 = isClockPortMatrixComplete;
      }
    }
    APSLogErrorAt(isClockPortMatrixComplete);
    goto LABEL_15;
  }
LABEL_14:
  v11 = 0;
LABEL_15:
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 24));
  return v11;
}

uint64_t ptpClock_RemovePeer(uint64_t a1, const void *a2, __CFDictionary **a3, _BYTE *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 24));
  if (*(_BYTE *)(DerivedStorage + 22))
  {
LABEL_9:
    v10 = 0;
    goto LABEL_10;
  }
  v9 = ptpClock_removePeerInternal(a1, a2);
  v10 = v9;
  if ((_DWORD)v9 != -72291)
  {
    if (!(_DWORD)v9)
    {
      if (!a3
        || (v9 = APSNetworkClockCopyPeerAsSerializablePeerDictionary(*(CFDictionaryRef *)(DerivedStorage + 48), a3),
            !(_DWORD)v9))
      {
        if (a4)
          *a4 = 1;
        ptpClock_enablePortsBasedOnTightSyncAndGMConfig();
        ptpClock_firePeersChangedNotification();
        goto LABEL_9;
      }
      v10 = v9;
    }
    APSLogErrorAt(v9);
  }
LABEL_10:
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 24));
  return v10;
}

uint64_t ptpClock_SetPeers(uint64_t a1, const __CFArray *a2, CFTypeRef *a3, char *a4)
{
  uint64_t DerivedStorage;
  char *v9;
  const __CFArray *v10;
  CFIndex v11;
  char v12;
  const __CFDictionary *ValueAtIndex;
  const void *TypedValue;
  uint64_t updated;
  CFIndex i;
  const __CFDictionary *v17;
  CFTypeRef *v19;
  char v20;
  CFTypeRef cf;
  unsigned int v22;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v22 = 0;
  cf = 0;
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 24));
  if (a2)
  {
    if (*(_BYTE *)(DerivedStorage + 22))
    {
      v10 = 0;
      v12 = 0;
    }
    else
    {
      if (gLogCategory_APSNetworkClockPTP <= 50
        && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
      {
        CFArrayGetCount(a2);
        if (gLogCategory_APSNetworkClockPTP == -1)
          _LogCategory_Initialize();
        LogPrintF();
      }
      v19 = a3;
      v9 = a4;
      v10 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
      v11 = 0;
      v12 = 0;
      while (v11 < CFArrayGetCount(v10))
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, v11);
        CFStringGetTypeID();
        TypedValue = (const void *)CFDictionaryGetTypedValue();
        if (ptpClock_findPeerInArray(ValueAtIndex, a2) == -1)
        {
          updated = ptpClock_removePeerInternal(a1, TypedValue);
          v22 = updated;
          if ((_DWORD)updated)
            goto LABEL_40;
          v12 = 1;
        }
        ++v11;
      }
      for (i = 0; i < CFArrayGetCount(a2); ++i)
      {
        v17 = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, i);
        v20 = 0;
        updated = ptpClock_addOrUpdatePeerInternal(a1, v17, 0, &v20);
        v22 = updated;
        if ((_DWORD)updated)
          goto LABEL_40;
        if (v20)
          v12 = 1;
      }
      updated = APSNetworkClockCopyPeerAsSerializablePeerDictionary(*(CFDictionaryRef *)(DerivedStorage + 48), (__CFDictionary **)&cf);
      v22 = updated;
      if ((_DWORD)updated)
      {
LABEL_40:
        APSLogErrorAt(updated);
        a4 = v9;
        goto LABEL_30;
      }
      a4 = v9;
      if (v12
        && gLogCategory_APSNetworkClockPTP <= 50
        && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      ptpClock_enablePortsBasedOnTightSyncAndGMConfig();
      ptpClock_firePeersChangedNotification();
LABEL_30:
      a3 = v19;
    }
  }
  else
  {
    APSLogErrorAt(0);
    v10 = 0;
    v12 = 0;
    v22 = -71971;
  }
  if (a3)
  {
    *a3 = cf;
    cf = 0;
  }
  if (a4)
    *a4 = v12;
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 24));
  if (v10)
    CFRelease(v10);
  if (cf)
    CFRelease(cf);
  return v22;
}

uint64_t ptpClock_CopySerializablePeerListForPeer(uint64_t a1, const void *a2, int a3, CFTypeRef *a4)
{
  uint64_t v8;
  uint64_t DerivedStorage;
  const __CFDictionary *Value;
  uint64_t v11;
  const __CFArray *v12;
  uint64_t SerializableRepresentationOfPeerList;
  CFTypeRef cf;
  const __CFArray *v16;

  v8 = 4294895005;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v16 = 0;
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 24));
  if (!a2)
  {
    v8 = 4294895325;
    goto LABEL_12;
  }
  Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 32), a2);
  if (!Value)
  {
LABEL_12:
    APSLogErrorAt(0);
    pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 24));
    goto LABEL_8;
  }
  v11 = ptpClock_copyPeerListForPeerInternal(a1, Value, (CFTypeRef *)&v16);
  if ((_DWORD)v11)
  {
    v8 = v11;
    APSLogErrorAt(v11);
    v12 = v16;
  }
  else
  {
    v12 = v16;
    SerializableRepresentationOfPeerList = APSNetworkClockCreateSerializableRepresentationOfPeerList(v16, a3, (__CFArray **)&cf);
    v8 = SerializableRepresentationOfPeerList;
    if ((_DWORD)SerializableRepresentationOfPeerList)
    {
      APSLogErrorAt(SerializableRepresentationOfPeerList);
    }
    else
    {
      *a4 = cf;
      cf = 0;
    }
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 24));
  if (v12)
    CFRelease(v12);
LABEL_8:
  if (cf)
    CFRelease(cf);
  return v8;
}

uint64_t ptpClock_CopyInitialSerializablePeerList(uint64_t a1, int a2, CFTypeRef *a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const __CFDictionary *Copy;
  CFTypeRef v14;
  uint64_t SerializableRepresentationOfPeerList;
  CFTypeRef v17;
  CFTypeRef cf;
  CFTypeRef v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17 = 0;
  cf = 0;
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 24));
  v9 = CMBaseObjectGetDerivedStorage();
  v19 = 0;
  if (!*(_QWORD *)(v9 + 48))
  {
    APSLogErrorAt(0);
    v12 = 4294895323;
LABEL_26:
    if (v19)
      CFRelease(v19);
    APSLogErrorAt(v12);
    pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 24));
    Copy = 0;
    goto LABEL_13;
  }
  v10 = v9;
  if (a2)
  {
    v11 = ptpClock_copyPeerListForHTBuddyPeer(a1, (__CFArray **)&v19);
    if ((_DWORD)v11)
    {
      v12 = v11;
LABEL_25:
      APSLogErrorAt(v11);
      goto LABEL_26;
    }
  }
  else
  {
    v11 = ptpClock_copyPeerListForRegularPeer(a1, 0, (__CFArray **)&v19);
    if ((_DWORD)v11)
    {
      v12 = v11;
      goto LABEL_25;
    }
  }
  Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFDictionaryRef *)(v10 + 48));
  v14 = v19;
  SerializableRepresentationOfPeerList = APSNetworkClockCreateSerializableRepresentationOfPeerList((const __CFArray *)v19, 1, (__CFArray **)&cf);
  if ((_DWORD)SerializableRepresentationOfPeerList)
  {
    v12 = SerializableRepresentationOfPeerList;
  }
  else
  {
    if (!a4)
    {
LABEL_10:
      v12 = 0;
      *a3 = cf;
      cf = 0;
      goto LABEL_11;
    }
    SerializableRepresentationOfPeerList = APSNetworkClockCopyPeerAsSerializablePeerDictionary(Copy, (__CFDictionary **)&v17);
    if (!(_DWORD)SerializableRepresentationOfPeerList)
    {
      *a4 = v17;
      v17 = 0;
      goto LABEL_10;
    }
    v12 = SerializableRepresentationOfPeerList;
  }
  APSLogErrorAt(SerializableRepresentationOfPeerList);
LABEL_11:
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 24));
  if (v14)
    CFRelease(v14);
LABEL_13:
  if (cf)
    CFRelease(cf);
  if (Copy)
    CFRelease(Copy);
  if (v17)
    CFRelease(v17);
  return v12;
}

uint64_t ptpClock_SetOrUpdateLocalPeerInfo(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage;
  const void *Value;
  const void *v5;
  const void *TypedValue;
  __CFDictionary *v7;
  const __CFString *v8;
  const void *v9;
  const void *v10;
  unsigned int v12;

  v12 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 24));
  if (!a2)
    goto LABEL_20;
  if (*(_QWORD *)(DerivedStorage + 48))
  {
    if (CFDictionaryContainsKey(a2, CFSTR("HTAddress")))
    {
      Value = CFDictionaryGetValue(a2, CFSTR("HTAddress"));
      if (Value)
      {
        v5 = Value;
        CFStringGetTypeID();
        TypedValue = (const void *)CFDictionaryGetTypedValue();
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 48), CFSTR("HTAddress"), v5);
        v7 = *(__CFDictionary **)(DerivedStorage + 48);
        v8 = CFSTR("HTGroupUUID");
LABEL_12:
        CFDictionarySetValue(v7, v8, TypedValue);
        if (gLogCategory_APSNetworkClockPTP <= 50
          && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        goto LABEL_19;
      }
    }
    else
    {
      v9 = CFDictionaryGetValue(a2, CFSTR("Addresses"));
      v10 = CFDictionaryGetValue(a2, CFSTR("InterfaceName"));
      if (v9)
      {
        TypedValue = v10;
        if (v10)
        {
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 48), CFSTR("Addresses"), v9);
          v7 = *(__CFDictionary **)(DerivedStorage + 48);
          v8 = CFSTR("InterfaceName");
          goto LABEL_12;
        }
      }
    }
LABEL_20:
    APSLogErrorAt(0);
    v12 = -71971;
    goto LABEL_19;
  }
  if (gLogCategory_APSNetworkClockPTP <= 50
    && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_QWORD *)(DerivedStorage + 48) = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a2);
LABEL_19:
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 24));
  return v12;
}

uint64_t ptpClock_StartForClient(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const void *Int64;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _BOOL4 v10;
  uint64_t v11;
  int v12;
  int64_t v13;
  uint64_t v14;
  CMTime v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Int64 = (const void *)CFNumberCreateInt64();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 24));
  if (a2)
  {
    if (CFSetGetCount(*(CFSetRef *)(DerivedStorage + 80)))
    {
LABEL_36:
      CFSetAddValue(*(CFMutableSetRef *)(DerivedStorage + 80), Int64);
      v14 = 0;
      goto LABEL_37;
    }
    v6 = CMBaseObjectGetDerivedStorage();
    v7 = (uint64_t)APSSettingsGetInt64(CFSTR("ptpUpdateRateMs"), 0);
    v8 = MGGetSInt32Answer();
    v10 = v8 != 4 && v8 != 7;
    if (*(_BYTE *)(v6 + 104)
      && gLogCategory_APSNetworkClockPTP <= 60
      && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (!*(_QWORD *)(v6 + 88) && (v11 = CM8021ASClockCreate(), (_DWORD)v11))
    {
      v14 = v11;
    }
    else
    {
      if (v7)
        v12 = 1;
      else
        v12 = v10;
      if (v12 == 1)
      {
        v13 = v7 ? v7 : 2000;
        memset(&v16, 0, sizeof(v16));
        CMTimeMake(&v16, v13, 1000);
        atomic_store(1u, gAPSNetworkClockPTPIsAllPortSyncIntervalSet);
        CM8021ASClockSetAllPortRemoteSyncMessageIntervals();
        if (gLogCategory_APSNetworkClockPTP <= 50
          && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
      if (!*(_BYTE *)(v6 + 21)
        && (CMNotificationCenterGetDefaultLocalCenter(), v11 = FigNotificationCenterAddWeakListener(), (_DWORD)v11))
      {
        v14 = v11;
      }
      else
      {
        CMNotificationCenterGetDefaultLocalCenter();
        v11 = FigNotificationCenterAddWeakListener();
        if ((_DWORD)v11)
        {
          v14 = v11;
        }
        else
        {
          if (*(_QWORD *)(v6 + 96) || (v11 = CMTimeSyncClockCreateForSystemDomainClockIdentifier(), !(_DWORD)v11))
          {
            ptpClock_updateGMIDAndHubPeerAndEnablePortsIfNeeded(a1, 0);
            *(_BYTE *)(v6 + 104) = 1;
            if (gLogCategory_APSNetworkClockPTP <= 50
              && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            goto LABEL_36;
          }
          v14 = v11;
        }
      }
    }
    APSLogErrorAt(v11);
    APSLogErrorAt(v14);
  }
  else
  {
    APSLogErrorAt(0);
    v14 = 4294895325;
  }
LABEL_37:
  if (Int64)
    CFRelease(Int64);
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 24));
  return v14;
}

uint64_t ptpClock_StopForClient(void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const void *Int64;
  CFIndex Count;
  CFIndex v7;
  uint64_t v9;
  const void *v10;
  const void *v11;
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Int64 = (const void *)CFNumberCreateInt64();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 24));
  if (a2)
  {
    Count = CFSetGetCount(*(CFSetRef *)(DerivedStorage + 80));
    CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 80), Int64);
    v7 = CFSetGetCount(*(CFSetRef *)(DerivedStorage + 80));
    if (Count < 1 || v7 > 0)
    {
LABEL_21:
      v12 = 0;
      goto LABEL_22;
    }
    v9 = CMBaseObjectGetDerivedStorage();
    if (!*(_BYTE *)(v9 + 104)
      && gLogCategory_APSNetworkClockPTP <= 60
      && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (*(_QWORD *)(v9 + 88))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CFRetain(a1);
      dispatch_async_f(*(dispatch_queue_t *)v9, a1, (dispatch_function_t)ptpClock_deferredForgetGMStabilizationTimer);
      v10 = *(const void **)(v9 + 88);
      if (v10)
      {
        CFRelease(v10);
        *(_QWORD *)(v9 + 88) = 0;
      }
      v11 = *(const void **)(v9 + 96);
      if (v11)
      {
        CFRelease(v11);
        *(_QWORD *)(v9 + 96) = 0;
      }
      v12 = 0;
      *(_BYTE *)(v9 + 104) = 0;
      if (gLogCategory_APSNetworkClockPTP <= 50)
      {
        if (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize())
          LogPrintF();
        goto LABEL_21;
      }
    }
    else
    {
      v12 = 4294895323;
      APSLogErrorAt(0);
    }
  }
  else
  {
    APSLogErrorAt(0);
    v12 = 4294895325;
  }
LABEL_22:
  if (Int64)
    CFRelease(Int64);
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 24));
  return v12;
}

uint64_t ptpClock_ClearLocalPeerInfo()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 32));
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 24));
  v1 = *(const void **)(DerivedStorage + 48);
  if (v1)
  {
    if (gLogCategory_APSNetworkClockPTP >= 51)
    {
      *(_QWORD *)(DerivedStorage + 56) = 0;
LABEL_8:
      CFRelease(v1);
      *(_QWORD *)(DerivedStorage + 48) = 0;
      goto LABEL_9;
    }
    if (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize())
      LogPrintF();
    v1 = *(const void **)(DerivedStorage + 48);
    *(_QWORD *)(DerivedStorage + 56) = 0;
    if (v1)
      goto LABEL_8;
  }
LABEL_9:
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 24));
  return 0;
}

uint64_t ptpClock_GMChanged(uint64_t a1, void *a2, const void *a3)
{
  dispatch_queue_t *DerivedStorage;
  uint64_t result;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  result = CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0CA1FE8]);
  if ((_DWORD)result)
  {
    dispatch_sync_f(*DerivedStorage, a2, (dispatch_function_t)ptpClock_startGMStabilizationTimer);
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
  return result;
}

uint64_t ptpClock_LockStateChanged(int a1, int a2, CFTypeRef cf1)
{
  uint64_t result;

  result = CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0CA1FF0]);
  if ((_DWORD)result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
  return result;
}

void ptpClock_deferredForgetGMStabilizationTimer(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(NSObject **)(DerivedStorage + 8);
  if (v3)
  {
    v4 = DerivedStorage;
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 8));
    dispatch_release(v3);
    *(_QWORD *)(v4 + 8) = 0;
  }
  CFRelease(a1);
}

void ptpClock_startGMStabilizationTimer(void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  NSObject *v4;
  dispatch_source_t v5;
  NSObject *v6;
  dispatch_time_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  v4 = *(NSObject **)(DerivedStorage + 8);
  if (v4)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 8));
    dispatch_release(v4);
    *(_QWORD *)(v3 + 8) = 0;
  }
  v5 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)v3);
  *(_QWORD *)(v3 + 8) = v5;
  if (v5)
  {
    CFRetain(a1);
    dispatch_set_context(*(dispatch_object_t *)(v3 + 8), a1);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v3 + 8), (dispatch_function_t)ptpClock_gmDidStabilize);
    dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(v3 + 8), (dispatch_function_t)ptpClock_gmStabilizationTimerCancelled);
    v6 = *(NSObject **)(v3 + 8);
    v7 = dispatch_time(0, 1000000 * *(unsigned int *)(v3 + 16));
    dispatch_source_set_timer(v6, v7, 0xFFFFFFFFFFFFFFFFLL, 0x5F5E100uLL);
    dispatch_resume(*(dispatch_object_t *)(v3 + 8));
    if (gLogCategory_APSNetworkClockPTP <= 50
      && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
}

uint64_t ptpClock_gmDidStabilize(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  BOOL v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = 0;
  if (gLogCategory_APSNetworkClockPTP <= 50
    && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v3 = *(NSObject **)(DerivedStorage + 8);
  if (v3)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 8));
    dispatch_release(v3);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 24));
  ptpClock_updateGMIDAndHubPeerAndEnablePortsIfNeeded(a1, &v5);
  if (v5)
    ptpClock_firePeersChangedNotification();
  return pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 24));
}

void ptpClock_gmStabilizationTimerCancelled(CFTypeRef cf)
{
  if (gLogCategory_APSNetworkClockPTP <= 50
    && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRelease(cf);
}

void ptpClock_updateGMIDAndHubPeerAndEnablePortsIfNeeded(uint64_t a1, BOOL *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  OpaqueCMClock *HostTimeClock;
  CFIndex v7;
  const __CFDictionary *ValueAtIndex;
  CMTime v9;
  _BYTE v10[24];
  __CFArray *v11;
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = 0;
  v12 = 0;
  if (!*(_BYTE *)(DerivedStorage + 21))
  {
    v5 = DerivedStorage;
    HostTimeClock = CMClockGetHostTimeClock();
    CMClockGetTime(&v9, HostTimeClock);
    ptpClock_getClockTimeForHostTime((uint64_t)v10);
    if ((v10[12] & 0x1D) == 1 && !ptpClock_copyFullPeerList(a1, &v11))
    {
      v7 = 0;
      *(_QWORD *)(v5 + 72) = v12;
      while (v7 < CFArrayGetCount(v11))
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v11, v7++);
        if (ptpClock_isPeerGM())
        {
          CFDictionaryGetValue(ValueAtIndex, CFSTR("ID"));
          goto LABEL_9;
        }
      }
      ValueAtIndex = 0;
LABEL_9:
      if (gLogCategory_APSNetworkClockPTP <= 50
        && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      ptpClock_updateHubPeer(a1, ValueAtIndex, a2);
      ptpClock_enablePortsBasedOnTightSyncAndGMConfig();
    }
    if (v11)
      CFRelease(v11);
  }
}

uint64_t ptpClock_firePeersChangedNotification()
{
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  return FigDispatchAsyncPostNotification();
}

uint64_t ptpClock_getClockTimeForHostTime(uint64_t a1)
{
  uint64_t DerivedStorage;
  _OWORD *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (_OWORD *)MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  *(_OWORD *)a1 = *v3;
  if (*(_QWORD *)(DerivedStorage + 88))
    return CM8021ASClockGetClockTimeForHostTime();
  else
    return APSLogErrorAt(0);
}

uint64_t ptpClock_copyFullPeerList(uint64_t a1, __CFArray **a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  const __CFArray *v5;
  const __CFArray *v6;
  __CFArray *MutableCopy;
  __CFArray *v8;
  const void *v9;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = DerivedStorage;
    v5 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
    if (v5)
    {
      v6 = v5;
      MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v5);
      if (MutableCopy)
      {
        v8 = MutableCopy;
        v9 = *(const void **)(v4 + 48);
        if (v9)
          CFArrayAppendValue(MutableCopy, v9);
        v10 = 0;
        *a2 = v8;
      }
      else
      {
        v10 = 4294895326;
        APSLogErrorAt(0);
      }
      CFRelease(v6);
    }
    else
    {
      v10 = 4294895326;
      APSLogErrorAt(0);
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294895325;
  }
  return v10;
}

uint64_t ptpClock_isPeerGM()
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = CFDictionaryGetInt64();
  if (result)
    return result == *(_QWORD *)(DerivedStorage + 72);
  return result;
}

void ptpClock_updateHubPeer(uint64_t a1, const void *a2, BOOL *a3)
{
  uint64_t DerivedStorage;
  const void *v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  const void *v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(const void **)(DerivedStorage + 64);
  if (v6 == a2 || (v7 = DerivedStorage, a2) && v6 && CFEqual(a2, v6))
  {
    if (gLogCategory_APSNetworkClockPTP <= 30
      && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
LABEL_26:
    v9 = 0;
    if (!a3)
      return;
    goto LABEL_20;
  }
  if (APSNetworkClockPeerDictionaryIsHTClusterExclusive((const __CFDictionary *)a2))
    goto LABEL_26;
  v8 = APSNetworkClockPeerDictionaryIDEqual((const __CFDictionary *)a2, *(const __CFDictionary **)(v7 + 64));
  v9 = v8 == 0;
  if (gLogCategory_APSNetworkClockPTP <= 30
    && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v10 = *(const void **)(v7 + 64);
  if (a2)
    CFRetain(a2);
  *(_QWORD *)(v7 + 64) = a2;
  if (v10)
    CFRelease(v10);
  if (gLogCategory_APSNetworkClockPTP <= 50
    && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
    if (!a3)
      return;
  }
  else if (!a3)
  {
    return;
  }
LABEL_20:
  *a3 = v9;
}

uint64_t ptpClock_enablePortsBasedOnTightSyncAndGMConfig()
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t TypedValue;
  uint64_t v3;
  CFIndex Count;
  uint64_t v5;
  const __CFArray *v6;
  CFIndex v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = *(_QWORD *)(DerivedStorage + 48);
  if (result)
  {
    result = CFDictionaryContainsKey((CFDictionaryRef)result, CFSTR("ClockPorts"));
    if ((_DWORD)result)
    {
      result = CFDictionaryContainsKey(*(CFDictionaryRef *)(DerivedStorage + 48), CFSTR("HTAddress"));
      if (!(_DWORD)result)
      {
        CFStringGetTypeID();
        TypedValue = CFDictionaryGetTypedValue();
        v3 = CMBaseObjectGetDerivedStorage();
        Count = CFDictionaryGetCount(*(CFDictionaryRef *)(v3 + 32));
        if (!TypedValue)
          goto LABEL_13;
        v5 = Count;
        v6 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
        if (v5 < 1)
        {
LABEL_9:
          if (!v6)
            goto LABEL_13;
        }
        else
        {
          v7 = 0;
          while (1)
          {
            CFArrayGetValueAtIndex(v6, v7);
            CFStringGetTypeID();
            CFDictionaryGetTypedValue();
            if (FigCFEqual())
              break;
            if (v5 == ++v7)
              goto LABEL_9;
          }
          if (!v6)
            goto LABEL_13;
        }
        CFRelease(v6);
LABEL_13:
        CFDictionaryGetInt64();
        ptpClock_isPeerGM();
        return CFDictionaryApplyBlock();
      }
    }
  }
  return result;
}

void __ptpClock_enablePortsBasedOnTightSyncAndGMConfig_block_invoke(uint64_t a1, const void *a2, const __CFDictionary *a3)
{
  uint64_t v5;
  uint64_t DerivedStorage;
  uint64_t v7;
  const __CFDictionary *TypedValue;
  _BOOL4 v9;
  __CFDictionary *MutableCopy;
  __CFDictionary *v11;
  const void **v12;

  v5 = *(_QWORD *)(a1 + 40);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 88))
    goto LABEL_29;
  v7 = DerivedStorage;
  CFDictionaryGetTypeID();
  TypedValue = (const __CFDictionary *)CFDictionaryGetTypedValue();
  if (!CFDictionaryContainsKey(TypedValue, a2))
    return;
  CFDictionaryGetInt64Ranged();
  CFStringGetTypeID();
  CFDictionaryGetTypedValue();
  if (v5)
    v9 = FigCFEqual() != 0;
  else
    v9 = 1;
  if (*(_BYTE *)(v7 + 21) && v9 != (CFDictionaryGetInt64() == 0))
  {
    if (gLogCategory_APSNetworkClockPTP <= 30
      && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  else
  {
    if (v9)
    {
      if (gLogCategory_APSNetworkClockPTP <= 50
        && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CM8021ASClockEnablePort();
    }
    else
    {
      if (gLogCategory_APSNetworkClockPTP <= 50
        && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CM8021ASClockDisablePort();
    }
    if (*(_BYTE *)(v7 + 21))
    {
      MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a3);
      if (MutableCopy)
      {
        v11 = MutableCopy;
        v12 = (const void **)MEMORY[0x1E0C9AE50];
        if (!v9)
          v12 = (const void **)MEMORY[0x1E0C9AE40];
        CFDictionarySetValue(MutableCopy, CFSTR("IsEnabled"), *v12);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(v7 + 32), a2, v11);
        CFRelease(v11);
        return;
      }
LABEL_29:
      APSLogErrorAt(0);
    }
  }
}

uint64_t ptpClock_copyPeerListForHTBuddyPeer(uint64_t a1, __CFArray **a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  __CFArray *Mutable;
  __CFArray *v6;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 48))
  {
    v4 = DerivedStorage;
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v6 = Mutable;
      CFArrayAppendValue(Mutable, *(const void **)(v4 + 48));
      v7 = 0;
      *a2 = v6;
    }
    else
    {
      APSLogErrorAt(0);
      return 4294895326;
    }
  }
  else
  {
    v7 = 4294895323;
    APSLogErrorAt(0);
  }
  return v7;
}

uint64_t ptpClock_copyPeerListForRegularPeer(uint64_t a1, const __CFDictionary *a2, __CFArray **a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  CFMutableArrayRef Mutable;
  __CFArray *v8;
  BOOL v9;
  BOOL v10;
  uint64_t Count;
  int v12;
  uint64_t v13;
  const void *Value;
  const void *v16;
  CFRange v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 48))
  {
    v13 = 4294895323;
    APSLogErrorAt(0);
    return v13;
  }
  v6 = DerivedStorage;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    APSLogErrorAt(0);
    return 4294895326;
  }
  v8 = Mutable;
  if (a2)
  {
    v9 = APSNetworkClockPeerDictionaryIDEqual(a2, *(const __CFDictionary **)(v6 + 64)) != 0;
    v10 = CFDictionaryGetInt64() == 0;
    if (v9)
      goto LABEL_9;
  }
  else
  {
    v10 = 0;
  }
  if (!v10 && !*(_BYTE *)(v6 + 20))
  {
    Count = CFArrayGetCount(*(CFArrayRef *)(v6 + 40));
    if (Count <= 0)
      v12 = 30;
    else
      v12 = 50;
    if (v12 >= gLogCategory_APSNetworkClockPTP
      && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v17.location = 0;
    v17.length = Count;
    CFArrayAppendArray(v8, *(CFArrayRef *)(v6 + 40), v17);
    if (*(_QWORD *)(v6 + 64))
    {
      if (gLogCategory_APSNetworkClockPTP <= 50
        && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CFArrayAppendValue(v8, *(const void **)(v6 + 64));
    }
    if (!a2)
      goto LABEL_20;
    Value = CFDictionaryGetValue(a2, CFSTR("TightSyncUUID"));
    v16 = CFDictionaryGetValue(a2, CFSTR("HTGroupUUID"));
    if (!Value || v16)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_9:
  if (gLogCategory_APSNetworkClockPTP <= 50
    && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_19:
  CFDictionaryApplyBlock();
LABEL_20:
  CFArrayAppendValue(v8, *(const void **)(v6 + 48));
  v13 = 0;
  *a3 = v8;
  return v13;
}

void __ptpClock_copyPeerListForRegularPeer_block_invoke(uint64_t a1, uint64_t a2, const void *a3)
{
  if (!APSNetworkClockPeerDictionaryIsHTClusterExclusive((const __CFDictionary *)a3)
    && !APSNetworkClockPeerDictionaryIDEqual(*(const __CFDictionary **)(a1 + 32), (const __CFDictionary *)a3))
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), a3);
  }
}

void __ptpClock_copyPeerListForRegularPeer_block_invoke_2(uint64_t a1, uint64_t a2, const void *a3)
{
  CFStringGetTypeID();
  CFDictionaryGetTypedValue();
  if (FigCFEqual()
    && !APSNetworkClockPeerDictionaryIDEqual(*(const __CFDictionary **)(a1 + 40), (const __CFDictionary *)a3)&& !APSNetworkClockPeerDictionaryIDEqual(*(const __CFDictionary **)(*(_QWORD *)(a1 + 48) + 64), (const __CFDictionary *)a3))
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), a3);
  }
}

uint64_t ptpClock_copyPeerListForPeerInternal(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  const __CFDictionary *v6;
  uint64_t v7;
  uint64_t v8;
  CFTypeRef cf;

  cf = 0;
  v6 = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 48);
  if (v6)
  {
    if (APSNetworkClockPeerDictionaryIDEqual(a2, v6))
    {
      cf = (CFTypeRef)FigCFDictionaryCopyArrayOfValues();
LABEL_8:
      v8 = 0;
      *a3 = cf;
      return v8;
    }
    if (ptpClock_isPeerHTBuddy(a1, a2))
    {
      v7 = ptpClock_copyPeerListForHTBuddyPeer(a1, (__CFArray **)&cf);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v8 = v7;
    }
    else
    {
      v7 = ptpClock_copyPeerListForRegularPeer(a1, a2, (__CFArray **)&cf);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v8 = v7;
    }
    APSLogErrorAt(v7);
  }
  else
  {
    APSLogErrorAt(0);
    v8 = 4294895323;
  }
  if (cf)
    CFRelease(cf);
  return v8;
}

const __CFDictionary *ptpClock_isPeerHTBuddy(uint64_t a1, const __CFDictionary *a2)
{
  const __CFDictionary *result;
  const void *v4;
  const void *Value;

  result = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 48);
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("HTGroupUUID"));
    if (result)
    {
      v4 = result;
      if (result == CFDictionaryGetValue(a2, CFSTR("HTGroupUUID")))
      {
        return (const __CFDictionary *)1;
      }
      else
      {
        result = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("HTGroupUUID"));
        if (result)
        {
          Value = CFDictionaryGetValue(a2, CFSTR("HTGroupUUID"));
          return (const __CFDictionary *)(CFEqual(v4, Value) != 0);
        }
      }
    }
  }
  return result;
}

CFIndex ptpClock_findPeerInArray(const __CFDictionary *a1, CFArrayRef theArray)
{
  CFIndex i;
  const __CFDictionary *ValueAtIndex;

  for (i = 0; i < CFArrayGetCount(theArray); ++i)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, i);
    if (APSNetworkClockPeerDictionaryIDEqual(a1, ValueAtIndex))
      return i;
  }
  return -1;
}

uint64_t ptpClock_removePeerInternal(uint64_t a1, const void *a2)
{
  uint64_t v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  const void *Value;
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  CFIndex PeerInArray;
  CFIndex v11;
  uint64_t v12;
  const __CFArray *v13;
  CFIndex v14;
  const __CFAllocator *v15;
  const void *ValueAtIndex;
  const __CFDictionary *TypedValue;
  const __CFDictionary *v18;
  CFMutableDictionaryRef MutableCopy;
  CFMutableDictionaryRef v20;
  CFMutableDictionaryRef v21;
  __CFDictionary *v22;
  const __CFDictionary *v23;
  __CFDictionary *v24;
  __CFDictionary *v25;
  const __CFDictionary *cf;

  v4 = 4294895005;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    v4 = 4294895325;
    goto LABEL_7;
  }
  v6 = DerivedStorage;
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 32), a2);
  if (!Value || (v8 = (const __CFDictionary *)CFRetain(Value)) == 0)
  {
LABEL_7:
    APSLogErrorAt(0);
    if (gLogCategory_APSNetworkClockPTP <= 90
      && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return v4;
  }
  v9 = v8;
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v6 + 32), a2);
  if (gLogCategory_APSNetworkClockPTP <= 50
    && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (ptpClock_isPeerHTBuddy(a1, v9))
    --*(_QWORD *)(v6 + 56);
  if (APSNetworkClockPeerDictionaryIDEqual(v9, *(const __CFDictionary **)(v6 + 64)))
    ptpClock_updateHubPeer(a1, 0, 0);
  ptpClock_closeClockPortsForPeer(a1, v9);
  PeerInArray = ptpClock_findPeerInArray(v9, *(CFArrayRef *)(v6 + 40));
  if (PeerInArray != -1)
  {
    v11 = PeerInArray;
    if (gLogCategory_APSNetworkClockPTP <= 30
      && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v6 + 40), v11);
  }
  cf = v9;
  v12 = CMBaseObjectGetDerivedStorage();
  v13 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  v14 = 0;
  v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (v14 < CFArrayGetCount(v13))
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v13, v14);
    CFDictionaryGetTypeID();
    TypedValue = (const __CFDictionary *)CFDictionaryGetTypedValue();
    if (CFDictionaryGetInt64())
    {
      CFDictionaryGetTypeID();
      v18 = (const __CFDictionary *)CFDictionaryGetTypedValue();
      if (v18)
      {
        MutableCopy = CFDictionaryCreateMutableCopy(v15, 0, v18);
        if (!MutableCopy)
        {
          APSLogErrorAt(0);
          goto LABEL_41;
        }
        v20 = MutableCopy;
        v21 = CFDictionaryCreateMutableCopy(v15, 0, TypedValue);
        if (!v21)
        {
          APSLogErrorAt(0);
          CFRelease(v20);
LABEL_41:
          APSLogErrorAt(4294895326);
LABEL_42:
          v25 = 0;
          goto LABEL_43;
        }
        v22 = v21;
        CFDictionaryRemoveValue(v20, a2);
        CFDictionarySetValue(v22, CFSTR("ClockPorts"), v20);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(v12 + 32), ValueAtIndex, v22);
        CFRelease(v20);
        CFRelease(v22);
      }
      else
      {
        APSLogErrorAt(0);
        if (gLogCategory_APSNetworkClockPTP <= 90
          && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
    }
    ++v14;
  }
  CFDictionaryGetTypeID();
  v23 = (const __CFDictionary *)CFDictionaryGetTypedValue();
  if (!v23)
    goto LABEL_42;
  v24 = CFDictionaryCreateMutableCopy(v15, 0, v23);
  v25 = v24;
  if (v24)
  {
    CFDictionaryRemoveValue(v24, a2);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v12 + 48), CFSTR("ClockPorts"), v25);
  }
  else
  {
    APSLogErrorAt(0);
  }
LABEL_43:
  if (v13)
    CFRelease(v13);
  if (v25)
    CFRelease(v25);
  CFRelease(cf);
  return 0;
}

uint64_t ptpClock_addOrUpdatePeerInternal(uint64_t a1, const __CFDictionary *a2, __CFDictionary **a3, char *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  const __CFDictionary *v10;
  const void *Value;
  const void *v12;
  const void *v13;
  const void *v14;
  const __CFAllocator *v15;
  const __CFDictionary *v16;
  CFMutableDictionaryRef v17;
  __CFDictionary *v18;
  int v19;
  uint64_t v20;
  CMTimeFlags v21;
  CMTimeEpoch v22;
  unsigned __int8 v23;
  uint64_t v24;
  CFIndex i;
  int v26;
  uint64_t Identity;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const __CFDictionary *TypedValue;
  const __CFAllocator *v32;
  CFMutableDictionaryRef MutableCopy;
  CFMutableDictionaryRef v34;
  uint64_t v35;
  const __CFDictionary *v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  const void *v40;
  const void *v41;
  const __CFDictionary *v42;
  const __CFDictionary *v43;
  const __CFDictionary *v44;
  const __CFNumber *v45;
  const void *v46;
  __CFDictionary *v47;
  __CFDictionary *v48;
  uint64_t v49;
  __CFDictionary *v50;
  int v53;
  const __CFAllocator *allocator;
  char *v55;
  char v56;
  __CFDictionary **v57;
  __CFDictionary *v58;
  uint64_t v59;
  int v60[2];
  unsigned int v61;
  CMTime time;
  CMTime valuePtr;
  uint64_t v64;
  __int16 v65;
  const __CFArray *v66;
  CMTimeValue v67;
  CMTimeScale v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v61 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    goto LABEL_121;
  v9 = DerivedStorage;
  v10 = *(const __CFDictionary **)(DerivedStorage + 48);
  if (!v10)
  {
    APSLogErrorAt(0);
    return -71973;
  }
  if (APSNetworkClockPeerDictionaryIDEqual(a2, v10))
    return v61;
  v53 = -71973;
  Value = CFDictionaryGetValue(a2, CFSTR("ID"));
  if (!Value)
  {
LABEL_121:
    APSLogErrorAt(0);
    return -71971;
  }
  v12 = Value;
  if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(v9 + 32), Value))
  {
    v57 = a3;
    v59 = a1;
    v20 = CMBaseObjectGetDerivedStorage();
    v66 = 0;
    v65 = 0;
    v64 = 0;
    v67 = *MEMORY[0x1E0CA2E18];
    v21 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
    v68 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
    v22 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    if (APSSettingsIsFeatureEnabled(CFSTR("AirPlayPerf_PTPNonTightSyncRate")))
    {
      v23 = atomic_load(gAPSNetworkClockPTPIsAllPortSyncIntervalSet);
      if ((v23 & 1) == 0 && !CFDictionaryContainsKey(a2, CFSTR("TightSyncUUID")))
      {
        if (ptpClock_getPerPortRateForPeer_sNonTightSyncRateOnce != -1)
          dispatch_once(&ptpClock_getPerPortRateForPeer_sNonTightSyncRateOnce, &__block_literal_global_461);
        v67 = ptpClock_getPerPortRateForPeer_sNonTightSyncRate;
        v21 = HIDWORD(ptpClock_getPerPortRateForPeer_sNonTightSyncRate);
        v68 = DWORD2(ptpClock_getPerPortRateForPeer_sNonTightSyncRate);
        v22 = qword_1EF9205F8;
      }
    }
    if (gLogCategory_APSNetworkClockPTP <= 50
      && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (*(_QWORD *)(v20 + 88))
    {
      if (CFDictionaryGetValue(a2, CFSTR("InterfaceName")))
      {
        v24 = ptpClock_copyRelevantPortAddressesFromPeer(v59, a2, &v66);
        if ((_DWORD)v24)
        {
          v28 = v24;
          APSLogErrorAt(v24);
          v30 = v59;
        }
        else
        {
          v55 = a4;
          for (i = 0; i < CFArrayGetCount(v66); ++i)
          {
            v26 = *((unsigned __int8 *)CFArrayGetValueAtIndex(v66, i) + 17);
            if (v26 == 30)
            {
              Identity = CM8021ASClockAddIPv6PortAndGetIdentity();
            }
            else
            {
              if (v26 != 2)
              {
                v28 = 4294895325;
LABEL_43:
                v29 = v28;
                goto LABEL_44;
              }
              Identity = CM8021ASClockAddIPv4PortAndGetIdentity();
            }
            v28 = Identity;
            if ((_DWORD)Identity)
              goto LABEL_43;
            if ((v21 & 1) != 0)
            {
              if (gLogCategory_APSNetworkClockPTP <= 50
                && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
              {
                time.value = v67;
                time.timescale = v68;
                time.flags = v21;
                time.epoch = v22;
                CMTimeConvertScale(&valuePtr, &time, 1000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
                LogPrintF();
              }
              time.value = v67;
              time.timescale = v68;
              time.flags = v21;
              time.epoch = v22;
              CM8021ASClockSetPortRemoteSyncMessageIntervals();
            }
          }
          v29 = CFDictionarySetInt64();
          v28 = v29;
          if (!(_DWORD)v29)
          {
            a3 = v57;
            v30 = v59;
            a4 = v55;
            goto LABEL_64;
          }
LABEL_44:
          APSLogErrorAt(v29);
          v30 = v59;
          a4 = v55;
        }
        a3 = v57;
        goto LABEL_46;
      }
      APSLogErrorAt(0);
      v28 = 4294895325;
    }
    else
    {
      APSLogErrorAt(0);
      v28 = 4294895323;
    }
    a3 = v57;
    v30 = v59;
LABEL_46:
    if (gLogCategory_APSNetworkClockPTP <= 90
      && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    ptpClock_closeClockPortsForPeer(v30, a2);
LABEL_64:
    if (v66)
      CFRelease(v66);
    v61 = v28;
    if ((_DWORD)v28)
    {
      APSLogErrorAt(v28);
      return v61;
    }
    CFStringGetTypeID();
    CFDictionaryGetTypedValue();
    CFDictionaryGetTypeID();
    TypedValue = (const __CFDictionary *)CFDictionaryGetTypedValue();
    v32 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (TypedValue)
      MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, TypedValue);
    else
      MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v34 = MutableCopy;
    if (MutableCopy)
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v9 + 32), v12, a2);
      if (!CFDictionaryGetInt64())
      {
        if (gLogCategory_APSNetworkClockPTP <= 30
          && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        CFArrayAppendValue(*(CFMutableArrayRef *)(v9 + 40), a2);
      }
      if (ptpClock_isPeerHTBuddy(v30, a2))
        ++*(_QWORD *)(v9 + 56);
      v35 = CFDictionarySetInt64();
      v61 = v35;
      if ((_DWORD)v35)
      {
        APSLogErrorAt(v35);
LABEL_119:
        CFRelease(v34);
        return v61;
      }
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v9 + 48), CFSTR("ClockPorts"), v34);
      *(_QWORD *)v60 = v34;
      allocator = v32;
      if (APSNetworkClockPeerDictionaryIDEqual(*(const __CFDictionary **)(v9 + 48), *(const __CFDictionary **)(v9 + 64))&& gLogCategory_APSNetworkClockPTP <= 30&& (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v58 = 0;
      goto LABEL_86;
    }
    APSLogErrorAt(0);
    return -12747;
  }
  v13 = CFDictionaryGetValue(a2, CFSTR("ClockPorts"));
  v14 = CFDictionaryGetValue(a2, CFSTR("ClockID"));
  v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v16 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 32), v12);
  allocator = v15;
  v17 = CFDictionaryCreateMutableCopy(v15, 0, v16);
  if (!v17)
  {
    APSLogErrorAt(0);
    return -71970;
  }
  v18 = v17;
  v19 = gLogCategory_APSNetworkClockPTP;
  if (gLogCategory_APSNetworkClockPTP <= 50)
  {
    if (gLogCategory_APSNetworkClockPTP != -1)
    {
LABEL_9:
      if (v19 == -1)
        _LogCategory_Initialize();
      LogPrintF();
      goto LABEL_51;
    }
    if (_LogCategory_Initialize())
    {
      v19 = gLogCategory_APSNetworkClockPTP;
      goto LABEL_9;
    }
  }
LABEL_51:
  if (v13)
    CFDictionarySetValue(v18, CFSTR("ClockPorts"), v13);
  if (v14)
    CFDictionarySetValue(v18, CFSTR("ClockID"), v14);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(v9 + 32), v12, v18);
  v58 = v18;
  if (!APSNetworkClockPeerDictionaryIDEqual(a2, *(const __CFDictionary **)(v9 + 64)))
  {
    *(_QWORD *)v60 = 0;
    v56 = 0;
    goto LABEL_87;
  }
  if (gLogCategory_APSNetworkClockPTP <= 50
    && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_QWORD *)v60 = 0;
LABEL_86:
  v56 = 1;
LABEL_87:
  CFDictionaryGetTypeID();
  v36 = (const __CFDictionary *)CFDictionaryGetTypedValue();
  v37 = CMBaseObjectGetDerivedStorage();
  valuePtr.value = 0;
  if (!v36)
  {
    v53 = -71971;
    goto LABEL_145;
  }
  v38 = v37;
  if (!*(_QWORD *)(v37 + 88))
  {
LABEL_145:
    APSLogErrorAt(0);
    v50 = v58;
    v34 = *(CFMutableDictionaryRef *)v60;
    if (gLogCategory_APSNetworkClockPTP <= 90
      && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v61 = v53;
    v49 = 0;
    goto LABEL_150;
  }
  v39 = CFDictionaryGetValue(v36, CFSTR("ID"));
  if (!v39)
  {
    v53 = -71971;
    goto LABEL_145;
  }
  if (*(_BYTE *)(v38 + 21) && CFDictionaryGetInt64())
  {
    if (gLogCategory_APSNetworkClockPTP > 30
      || gLogCategory_APSNetworkClockPTP == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_110;
    }
LABEL_103:
    LogPrintF();
    goto LABEL_110;
  }
  v40 = CFDictionaryGetValue(*(CFDictionaryRef *)(v38 + 48), CFSTR("ID"));
  if (!v40)
    goto LABEL_145;
  v41 = v40;
  v42 = (const __CFDictionary *)CFDictionaryGetValue(v36, CFSTR("ClockPorts"));
  if (!v42 || !CFDictionaryGetValue(v42, v41))
  {
    if (gLogCategory_APSNetworkClockPTP > 60
      || gLogCategory_APSNetworkClockPTP == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_110;
    }
    goto LABEL_103;
  }
  v43 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v38 + 48), CFSTR("ClockPorts"));
  if (!v43)
    goto LABEL_145;
  v44 = v43;
  v45 = (const __CFNumber *)CFDictionaryGetValue(v36, CFSTR("ClockID"));
  v46 = CFDictionaryGetValue(v44, v39);
  if (!v45 || !v46)
    goto LABEL_145;
  CFNumberGetValue(v45, kCFNumberSInt64Type, &valuePtr);
  CFGetInt64Ranged();
  CFGetInt64Ranged();
  if (gLogCategory_APSNetworkClockPTP <= 50
    && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CM8021ASClockOverridePortReceiveMatching();
  if (*(_BYTE *)(v38 + 21))
  {
    v47 = CFDictionaryCreateMutableCopy(allocator, 0, v36);
    if (v47)
    {
      v48 = v47;
      CFDictionarySetValue(v47, CFSTR("IsOverridden"), (const void *)*MEMORY[0x1E0C9AE50]);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v38 + 32), v39, v48);
      CFRelease(v48);
      goto LABEL_110;
    }
    v53 = -71970;
    goto LABEL_145;
  }
LABEL_110:
  v61 = 0;
  if (!a3)
  {
    v50 = v58;
    v34 = *(CFMutableDictionaryRef *)v60;
    if (!a4)
      goto LABEL_116;
    goto LABEL_115;
  }
  v49 = APSNetworkClockCopyPeerAsSerializablePeerDictionary(*(CFDictionaryRef *)(v9 + 48), a3);
  v61 = v49;
  v50 = v58;
  v34 = *(CFMutableDictionaryRef *)v60;
  if ((_DWORD)v49)
  {
LABEL_150:
    APSLogErrorAt(v49);
    goto LABEL_116;
  }
  if (a4)
LABEL_115:
    *a4 = v56;
LABEL_116:
  if (v50)
    CFRelease(v50);
  if (v34)
    goto LABEL_119;
  return v61;
}

uint64_t ptpClock_copyRelevantPortAddressesFromPeer(uint64_t a1, CFDictionaryRef theDict, _QWORD *a3)
{
  const __CFArray *Value;
  const void *ValueAtIndex;
  CFTypeRef v8;
  uint64_t v9;
  __CFArray *Mutable;

  Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("Addresses"));
  if (CFDictionaryGetInt64())
  {
    ValueAtIndex = CFDictionaryGetValue(theDict, CFSTR("PreferredAddress"));
    if (ValueAtIndex)
      goto LABEL_15;
    if (ptpClock_isPeerHTBuddy(a1, theDict))
    {
      ValueAtIndex = CFDictionaryGetValue(theDict, CFSTR("HTAddress"));
      if (ValueAtIndex)
        goto LABEL_14;
    }
    else
    {
      ValueAtIndex = 0;
    }
    if (Value)
    {
      if (CFArrayGetCount(Value) < 1)
        goto LABEL_19;
      ValueAtIndex = CFArrayGetValueAtIndex(Value, 0);
    }
LABEL_14:
    if (ValueAtIndex)
    {
LABEL_15:
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B378]);
      if (!Mutable)
      {
        APSLogErrorAt(0);
        return 4294895326;
      }
      v8 = Mutable;
      CFArrayAppendValue(Mutable, ValueAtIndex);
      if (a3)
        goto LABEL_17;
      goto LABEL_7;
    }
LABEL_19:
    v9 = 4294895325;
    APSLogErrorAt(0);
    return v9;
  }
  v8 = CFRetain(Value);
  if (a3)
  {
LABEL_17:
    v9 = 0;
    *a3 = v8;
    return v9;
  }
LABEL_7:
  if (v8)
    CFRelease(v8);
  return 0;
}

void ptpClock_closeClockPortsForPeer(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v4;
  CFIndex i;
  int v6;
  CFArrayRef theArray;

  theArray = 0;
  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 88))
  {
    v4 = 0;
LABEL_12:
    APSLogErrorAt(v4);
    goto LABEL_13;
  }
  if (!CFDictionaryGetValue(a2, CFSTR("InterfaceName")))
    goto LABEL_13;
  v4 = ptpClock_copyRelevantPortAddressesFromPeer(a1, a2, &theArray);
  if ((_DWORD)v4)
    goto LABEL_12;
  for (i = 0; i < CFArrayGetCount(theArray); ++i)
  {
    v6 = *((unsigned __int8 *)CFArrayGetValueAtIndex(theArray, i) + 17);
    if (v6 == 30)
    {
      CM8021ASClockRemoveIPv6Port();
    }
    else if (v6 == 2)
    {
      CM8021ASClockRemoveIPv4Port();
    }
  }
LABEL_13:
  if (theArray)
    CFRelease(theArray);
}

double __ptpClock_getPerPortRateForPeer_block_invoke()
{
  int IntWithOverrideAndDefault;
  double result;
  CMTime v2;

  IntWithOverrideAndDefault = APSSettingsGetIntWithOverrideAndDefault(CFSTR("ptpNonTightSyncRateMs"), 0, 2000);
  CMTimeMake(&v2, IntWithOverrideAndDefault, 1000);
  result = *(double *)&v2.value;
  *(CMTime *)ptpClock_getPerPortRateForPeer_sNonTightSyncRate = v2;
  return result;
}

uint64_t ptpClock_isClockPortMatrixComplete(uint64_t a1, char *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  CFArrayRef v8;
  CFIndex Count;
  const __CFDictionary *TypedValue;
  char v11;
  uint64_t v12;
  CFArrayRef theArray;
  CFArrayRef v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  theArray = 0;
  if (!a2)
  {
    APSLogErrorAt(0);
    return 4294895325;
  }
  if (*(_QWORD *)(DerivedStorage + 48))
  {
    v5 = ptpClock_copyFullPeerList(a1, &theArray);
    if (!(_DWORD)v5)
    {
      for (i = 0; i < CFArrayGetCount(theArray); ++i)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, i);
        if (CFDictionaryGetInt64())
        {
          CMBaseObjectGetDerivedStorage();
          v15 = 0;
          ptpClock_copyPeerListForPeerInternal(a1, ValueAtIndex, (CFTypeRef *)&v15);
          v8 = v15;
          if (v15)
          {
            Count = CFArrayGetCount(v15);
            CFRelease(v8);
          }
          else
          {
            Count = 0;
          }
          CFDictionaryGetTypeID();
          TypedValue = (const __CFDictionary *)CFDictionaryGetTypedValue();
          if (!TypedValue || CFDictionaryGetCount(TypedValue) < Count)
          {
            if (gLogCategory_APSNetworkClockPTP <= 30
              && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            v11 = 0;
            goto LABEL_23;
          }
        }
      }
      if (gLogCategory_APSNetworkClockPTP <= 30
        && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v11 = 1;
LABEL_23:
      v12 = 0;
      *a2 = v11;
      goto LABEL_24;
    }
    v12 = v5;
  }
  else
  {
    v12 = 4294895323;
    v5 = 0;
  }
  APSLogErrorAt(v5);
LABEL_24:
  if (theArray)
    CFRelease(theArray);
  return v12;
}

void ptpClock_Finalize()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSNetworkClockPTP <= 50
    && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v1 = *(NSObject **)(DerivedStorage + 8);
  if (v1)
  {
    dispatch_release(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  FigSimpleMutexDestroy();
  if (*(_QWORD *)(DerivedStorage + 88) || *(_QWORD *)(DerivedStorage + 96))
  {
    if (gLogCategory_APSNetworkClockPTP <= 90
      && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v2 = *(const void **)(DerivedStorage + 88);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(DerivedStorage + 88) = 0;
    }
    v3 = *(const void **)(DerivedStorage + 96);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(DerivedStorage + 96) = 0;
    }
  }
  v4 = *(const void **)(DerivedStorage + 64);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 32);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 40);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 48);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 80);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
}

__CFString *ptpClock_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APNetworkPTPClock %p>"), a1);
  return Mutable;
}

uint64_t ptpClock_CopyProperty(int a1, CFTypeRef cf1, uint64_t a3, CFTypeRef *a4)
{
  const __CFString *v6;
  uint64_t v7;
  uint64_t DerivedStorage;
  const void *v10;
  const void **v11;
  int IsLocked;

  if (!CFEqual(cf1, CFSTR("NetworkClock_Type")))
  {
    if (CFEqual(cf1, CFSTR("PortLocal")))
    {
      v6 = (const __CFString *)*MEMORY[0x1E0C9B208];
      goto LABEL_5;
    }
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 24));
    if (CFEqual(cf1, CFSTR("SourceClock")))
    {
      v10 = *(const void **)(DerivedStorage + 96);
      if (!v10)
      {
        v7 = 4294895323;
LABEL_27:
        APSLogErrorAt((uint64_t)v10);
        pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 24));
        return v7;
      }
      goto LABEL_14;
    }
    if (CFEqual(cf1, CFSTR("IsStarted")))
    {
      v11 = (const void **)MEMORY[0x1E0C9AE50];
      if (!*(_BYTE *)(DerivedStorage + 104))
        v11 = (const void **)MEMORY[0x1E0C9AE40];
LABEL_13:
      v10 = *v11;
LABEL_14:
      *a4 = CFRetain(v10);
      goto LABEL_15;
    }
    if (CFEqual(cf1, CFSTR("IsLocked")))
    {
      if (*(_QWORD *)(DerivedStorage + 88))
      {
        IsLocked = CM8021ASClockIsLocked();
        v11 = (const void **)MEMORY[0x1E0C9AE40];
        if (IsLocked)
          v11 = (const void **)MEMORY[0x1E0C9AE50];
        goto LABEL_13;
      }
      goto LABEL_25;
    }
    if (CFEqual(cf1, CFSTR("DiagnosticString")))
    {
      if (!*(_QWORD *)(DerivedStorage + 88))
      {
LABEL_25:
        v7 = 4294895323;
LABEL_26:
        v10 = (const void *)v7;
        goto LABEL_27;
      }
      v10 = (const void *)CM8021ASClockCopyProperty();
      if ((_DWORD)v10)
      {
        v7 = (uint64_t)v10;
        goto LABEL_27;
      }
    }
    else
    {
      if (!CFEqual(cf1, CFSTR("Metrics")))
      {
        if (gLogCategory_APSNetworkClockPTP <= 90
          && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v7 = 4294954509;
        goto LABEL_26;
      }
      v10 = (const void *)ptpClock_copyClockMetrics();
      if ((_DWORD)v10)
      {
        v7 = (uint64_t)v10;
        goto LABEL_27;
      }
    }
LABEL_15:
    pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 24));
    return 0;
  }
  v6 = CFSTR("NetworkClockType_PTP");
LABEL_5:
  v7 = 0;
  *a4 = CFRetain(v6);
  return v7;
}

uint64_t ptpClock_SetProperty(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 24));
  if (a2)
  {
    if (gLogCategory_APSNetworkClockPTP <= 90
      && (gLogCategory_APSNetworkClockPTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v4 = 4294954509;
  }
  else
  {
    APSLogErrorAt(0);
    v4 = 4294895325;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 24));
  return v4;
}

uint64_t ptpClock_copyClockMetrics()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 88))
  {
    v3 = v6;
    v4 = -6709;
    goto LABEL_7;
  }
  v0 = CM8021ASClockCopyProperty();
  *((_DWORD *)v6 + 6) = v0;
  if (!(_DWORD)v0)
  {
    APSLogErrorAt(0);
    v3 = v6;
    v4 = -71974;
LABEL_7:
    *((_DWORD *)v3 + 6) = v4;
    goto LABEL_4;
  }
  APSLogErrorAt(v0);
LABEL_4:
  v1 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v1;
}

void __ptpClock_copyClockMetrics_block_invoke(uint64_t a1, const void *a2)
{
  CFMutableDictionaryRef Mutable;

  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (*(_QWORD *)(a1 + 40))
    {
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), a2, Mutable);
      if (!Mutable)
        return;
      goto LABEL_4;
    }
    APSLogErrorAt(0);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -71970;
    if (Mutable)
LABEL_4:
      CFRelease(Mutable);
  }
}

const __CFData *CreateBinaryTXTRecordFromTXTRecordBytes(void *txtRecord, uint16_t txtLen, int *a3)
{
  unsigned int Count;
  __CFData *Mutable;
  const __CFData *v8;
  CFMutableDictionaryRef v9;
  CFMutableDictionaryRef v10;
  uint16_t v11;
  void *v12;
  uint64_t appended;
  const __CFData *v14;
  __CFDictionary *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char v19;
  char *v20;
  uint64_t v21;
  UInt8 *v22;
  unsigned int v23;
  CFIndex v24;
  int v25;
  int *v27;
  unsigned int v28;
  CFIndex v29;
  UInt8 bytes;
  uint8_t valueLen;
  void *value;
  __int16 v33;
  unsigned __int8 v34;
  char key[16];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  UInt8 *v51;
  UInt8 *v52;
  UInt8 *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  Count = TXTRecordGetCount(txtLen, txtRecord);
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  *(_OWORD *)key = 0u;
  v36 = 0u;
  value = 0;
  valueLen = 0;
  bytes = 1;
  v29 = 0;
  Mutable = CFDataCreateMutable(0, 0);
  v8 = Mutable;
  if (!Mutable)
  {
    APSLogErrorAt(0);
    v25 = -6728;
    goto LABEL_44;
  }
  CFDataAppendBytes(Mutable, &bytes, 1);
  v9 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v9)
  {
    APSLogErrorAt(0);
    v25 = -6728;
    goto LABEL_61;
  }
  v10 = v9;
  v27 = a3;
  _LogNewBytes(v8, 0, &v29);
  if (!Count)
  {
LABEL_43:
    CFRelease(v10);
    v25 = 0;
    a3 = v27;
    goto LABEL_44;
  }
  v11 = 0;
  v28 = Count;
  while (1)
  {
    if (TXTRecordGetItemAtIndex(txtLen, txtRecord, v11, 0x100u, key, &valueLen, (const void **)&value))
    {
      APSLogErrorAt(0);
      goto LABEL_58;
    }
    v12 = value;
    if (*(_DWORD *)key == 6580583)
      break;
    appended = _AppendKeyInfoByName(v8, (int)v10, key, (UInt8 *)value, valueLen);
    if ((_DWORD)appended)
    {
      v25 = appended;
      APSLogErrorAt(appended);
      goto LABEL_59;
    }
LABEL_8:
    _LogNewBytes(v8, (uint64_t)key, &v29);
    if (Count <= ++v11)
      goto LABEL_43;
  }
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v34 = 0;
  v33 = 0;
  if (valueLen)
  {
    v14 = v8;
    v15 = v10;
    v16 = 0;
    v17 = (char *)value + valueLen;
    do
    {
      v18 = (char *)memchr(v12, 43, ((_BYTE)v17 - (_BYTE)v12));
      if (v18 && v16 == 2)
      {
        if (gLogCategory_APSBinaryTXTRecord <= 60
          && (gLogCategory_APSBinaryTXTRecord != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v18 = 0;
      }
      (&v51)[v16] = (UInt8 *)v12;
      if (v18)
        v19 = (char)v18;
      else
        v19 = (char)v17;
      if (v18)
        v20 = v18 + 1;
      else
        v20 = v17;
      *((_BYTE *)&v33 + v16) = v19 - (_BYTE)v12;
      if (v16 > 1)
        break;
      ++v16;
      v12 = v20;
    }
    while (v20 < v17);
    v10 = v15;
    v8 = v14;
    Count = v28;
    if (v51)
    {
      if ((_BYTE)v33)
      {
        v21 = _AppendKeyInfoByName(v8, (int)v10, "gid", v51, v33);
        if ((_DWORD)v21)
        {
          v25 = v21;
        }
        else
        {
          v22 = v52;
          if (!v52)
            goto LABEL_8;
          v23 = HIBYTE(v33);
          if (HIBYTE(v33) > 3u)
          {
            v24 = HIBYTE(v33);
            goto LABEL_37;
          }
          v21 = _AppendKeyInfoByName(v8, (int)v10, "bin_grp_cmid", v52, HIBYTE(v33));
          if ((_DWORD)v21)
          {
            v25 = v21;
          }
          else
          {
            v22 = v53;
            if (!v53)
              goto LABEL_8;
            v24 = v34;
            if (!v34)
              goto LABEL_40;
LABEL_37:
            v21 = _AppendKeyInfoByName(v8, (int)v10, "bin_grp_rcid", v22, v24);
            if (!(_DWORD)v21)
            {
              if (v23 < 4 || !v53)
                goto LABEL_8;
LABEL_40:
              if (gLogCategory_APSBinaryTXTRecord <= 90)
              {
                a3 = v27;
                if (gLogCategory_APSBinaryTXTRecord == -1 && !_LogCategory_Initialize())
                  goto LABEL_51;
LABEL_49:
                LogPrintF();
                goto LABEL_51;
              }
LABEL_58:
              v25 = -6705;
LABEL_59:
              a3 = v27;
              goto LABEL_60;
            }
            v25 = v21;
          }
        }
        APSLogErrorAt(v21);
        a3 = v27;
        goto LABEL_52;
      }
    }
  }
  if (gLogCategory_APSBinaryTXTRecord > 90)
    goto LABEL_58;
  a3 = v27;
  if (gLogCategory_APSBinaryTXTRecord != -1 || _LogCategory_Initialize())
    goto LABEL_49;
LABEL_51:
  v25 = -6705;
LABEL_52:
  if (gLogCategory_APSBinaryTXTRecord <= 90
    && (gLogCategory_APSBinaryTXTRecord != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_60:
  CFRelease(v10);
LABEL_61:
  CFRelease(v8);
  v8 = 0;
LABEL_44:
  if (a3)
    *a3 = v25;
  return v8;
}

CFIndex _LogNewBytes(const __CFData *a1, uint64_t a2, CFIndex *a3)
{
  CFIndex result;
  CFIndex v7;

  result = CFDataGetLength(a1);
  if (result == *a3)
  {
    if (a2)
    {
      if (gLogCategory_APSBinaryTXTRecord <= 30)
      {
        if (gLogCategory_APSBinaryTXTRecord != -1)
          return LogPrintF();
        result = _LogCategory_Initialize();
        if ((_DWORD)result)
          return LogPrintF();
      }
    }
  }
  else
  {
    v7 = result;
    if (gLogCategory_APSBinaryTXTRecord <= 30)
    {
      if (gLogCategory_APSBinaryTXTRecord != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
      {
        CFDataGetBytePtr(a1);
        result = LogPrintF();
      }
    }
    *a3 = v7;
  }
  return result;
}

uint64_t _AppendKeyInfoByName(__CFData *a1, int a2, char *__s2, UInt8 *a4, CFIndex a5)
{
  uint64_t KeyInfo;
  const UInt8 *v9;
  int v10;
  char *v11;
  char *v12;
  __CFData *TextData;
  const char *v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  _BOOL8 v20;
  uint64_t v21;
  unsigned int v22;
  CFDataRef v23;
  char v24;
  int v25;
  char Int64Ranged;
  const UInt8 *p_endptr;
  int v28;
  CFIndex v29;
  UInt8 v30;
  char v31;
  uint64_t v32;
  CFStringRef v33;
  const __CFString *v34;
  CFMutableDataRef Mutable;
  const __CFData *v36;
  const __CFData *v37;
  CFMutableDataRef MutableCopy;
  const __CFData *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  CFDataRef v44;
  uint64_t v45;
  const UInt8 *BytePtr;
  CFIndex v47;
  const __CFString *cf;
  unsigned int length;
  unsigned int length_4;
  UInt8 buffer;
  char v53;
  unsigned int v54;
  char *__endptr;
  UInt8 bytes;
  CFRange v57;

  length_4 = 0;
  KeyInfo = _GetKeyInfo(0, __s2, (int *)&length_4);
  if (length_4)
  {
    if (gLogCategory_APSBinaryTXTRecord > 90
      || gLogCategory_APSBinaryTXTRecord == -1 && !_LogCategory_Initialize())
    {
      return length_4;
    }
LABEL_86:
    LogPrintF();
    return length_4;
  }
  v9 = (const UInt8 *)KeyInfo;
  if (!KeyInfo)
  {
    length_4 = -6762;
    if (gLogCategory_APSBinaryTXTRecord > 90
      || gLogCategory_APSBinaryTXTRecord == -1 && !_LogCategory_Initialize())
    {
      return length_4;
    }
    goto LABEL_86;
  }
  buffer = 0;
  v10 = *(_DWORD *)(KeyInfo + 16);
  if (v10 == 1)
    return 0;
  v54 = 0;
  v53 = 0;
  switch(v10)
  {
    case 2:
      TextData = _CreateTextData(a4, a5, (int *)&v54);
      v32 = v54;
      if (!v54)
        goto LABEL_41;
      length = a5;
      goto LABEL_65;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      __endptr = 0;
      v11 = strndup((const char *)a4, a5);
      if (v11)
      {
        v12 = v11;
        if (!(_DWORD)a5)
        {
          TextData = 0;
LABEL_40:
          free(v12);
          goto LABEL_41;
        }
        length = a5;
        TextData = 0;
        v14 = v11;
        while (1)
        {
          v15 = strtoul(v14, &__endptr, 0);
          if (v15 == -1)
            break;
          if (__endptr == v14)
            break;
          v16 = v15;
          if (HIDWORD(v15))
            break;
          v17 = *__endptr;
          if (*__endptr)
          {
            if (v17 != 44)
              break;
            v14 = __endptr + 1;
          }
          else if (!v15)
          {
            goto LABEL_40;
          }
          v18 = 0;
          do
          {
            bytes = v16;
            if (!TextData)
            {
              TextData = CFDataCreateMutable(0, 0);
              if (!TextData)
              {
                APSLogErrorAt(0);
                free(v12);
                v45 = 4294960568;
                goto LABEL_107;
              }
            }
            CFDataAppendBytes(TextData, &bytes, 1);
            v16 >>= 8;
            v20 = v18++ < 3;
            if (!v17)
              v20 = v16;
          }
          while (v20);
          if (!v17)
            goto LABEL_40;
        }
        APSLogErrorAt(0);
        free(v12);
        if (TextData)
          CFRelease(TextData);
        v45 = 4294960591;
      }
      else
      {
        length = a5;
        APSLogErrorAt(0);
        v45 = 4294960568;
      }
LABEL_107:
      v53 = 1;
      v54 = v45;
LABEL_108:
      APSLogErrorAt(v45);
      TextData = 0;
LABEL_34:
      v21 = v54;
      if (!v54)
        goto LABEL_41;
LABEL_35:
      if (!v53)
        goto LABEL_82;
      LODWORD(__endptr) = 0;
      v23 = _CreateTextData(a4, length, (int *)&__endptr);
      TextData = v23;
      if (!(_DWORD)__endptr)
      {
        v24 = 0;
        if (v23)
          goto LABEL_42;
        return 0;
      }
      v21 = v54;
      if (!v54)
        goto LABEL_41;
LABEL_82:
      APSLogErrorAt(v21);
      if (!TextData)
        goto LABEL_84;
      goto LABEL_83;
    case 8:
      TextData = _CreateMACAddressData((uint64_t)a4, a5, &v53, (int *)&v54);
      v32 = v54;
      if (!v54)
        goto LABEL_41;
      length = a5;
LABEL_65:
      APSLogErrorAt(v32);
      goto LABEL_34;
    case 9:
    case 10:
      TextData = _CreateUUIDData((uint64_t)a4, a5, &v53, (int *)&v54);
      v21 = v54;
      if (!v54)
        goto LABEL_41;
      length = a5;
      if (gLogCategory_APSBinaryTXTRecord > 50)
        goto LABEL_35;
      if (gLogCategory_APSBinaryTXTRecord != -1 || _LogCategory_Initialize())
LABEL_123:
        LogPrintF();
      goto LABEL_34;
    case 11:
    case 12:
      length = a5;
      TextData = _CreateUUIDData((uint64_t)a4, a5, &v53, (int *)&v54);
      v22 = v54;
      if (v54 && v53)
      {
        v53 = 0;
        TextData = _CreateMACAddressData((uint64_t)a4, a5, &v53, (int *)&v54);
        v22 = v54;
      }
      if (v22
        && gLogCategory_APSBinaryTXTRecord <= 50
        && (gLogCategory_APSBinaryTXTRecord != -1 || _LogCategory_Initialize()))
      {
        goto LABEL_123;
      }
      goto LABEL_34;
    case 13:
      LODWORD(__endptr) = 0;
      length = a5;
      v33 = CFStringCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a4, a5, 0x8000100u, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
      if (!v33)
      {
        APSLogErrorAt(0);
LABEL_127:
        v53 = 1;
        v45 = 4294960568;
        v54 = -6728;
        goto LABEL_108;
      }
      v34 = v33;
      Mutable = CFDataCreateMutable(0, 0);
      if (!Mutable)
      {
        APSLogErrorAt(0);
        CFRelease(v34);
        goto LABEL_127;
      }
      TextData = Mutable;
      v36 = (const __CFData *)APSFeaturesCreateFromStringRepresentation(v34, (int *)&__endptr);
      cf = v34;
      if ((_DWORD)__endptr)
      {
        v37 = v36;
        APSLogErrorAt(__endptr);
      }
      else
      {
        v37 = v36;
        MutableCopy = CFDataCreateMutableCopy(0, 0, v36);
        if (MutableCopy)
        {
          v39 = MutableCopy;
          v40 = 0;
          while (!APSFeaturesIsEmpty(v39))
          {
            v41 = 0;
            bytes = 0;
            do
            {
              if (APSFeaturesHasFeature(v39, v40 + v41))
              {
                bytes |= 1 << v41;
                APSFeaturesClearFeature(v39, v40 + v41);
              }
              ++v41;
            }
            while (v41 != 8);
            CFDataAppendBytes(TextData, &bytes, 1);
            v40 += 8;
          }
          CFRelease(v39);
        }
        else
        {
          APSLogErrorAt(0);
          LODWORD(__endptr) = -6728;
        }
      }
      if (v37)
        CFRelease(v37);
      CFRelease(cf);
      if ((_DWORD)__endptr)
      {
        CFRelease(TextData);
        v45 = __endptr;
        v53 = 1;
        v54 = __endptr;
        if ((_DWORD)__endptr)
          goto LABEL_108;
        TextData = 0;
      }
LABEL_41:
      v24 = 1;
      if (!TextData)
        return 0;
LABEL_42:
      CFDataAppendBytes(a1, v9, 1);
      if ((*(char *)v9 & 0x80000000) == 0 && ((v25 = *((_DWORD *)v9 + 4), (v25 - 8) < 5) || v25 == 2))
      {
        LOBYTE(__endptr) = 0;
        Int64Ranged = CFDictionaryGetInt64Ranged();
        if (Int64Ranged)
        {
          LOBYTE(__endptr) = Int64Ranged | 0x80;
          p_endptr = (const UInt8 *)&__endptr;
LABEL_57:
          CFDataAppendBytes(a1, p_endptr, 1);
LABEL_98:
          CFRelease(TextData);
          return 0;
        }
        v28 = 1;
      }
      else
      {
        v28 = 0;
      }
      v29 = CFDataGetLength(TextData);
      if (v29 < 121)
      {
        v30 = v29;
        if ((v24 & 1) != 0)
        {
          if (v29 == 1)
            v31 = v28;
          else
            v31 = 1;
          if ((v31 & 1) == 0)
          {
            v57.location = 0;
            v57.length = 1;
            CFDataGetBytes(TextData, v57, &buffer);
            if (((char)buffer & 0x80000000) == 0)
            {
              buffer |= 0x80u;
              p_endptr = &buffer;
              goto LABEL_57;
            }
          }
        }
        else
        {
          LOBYTE(__endptr) = 127;
          CFDataAppendBytes(a1, (const UInt8 *)&__endptr, 1);
          if (gLogCategory_APSBinaryTXTRecord <= 50
            && (gLogCategory_APSBinaryTXTRecord != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
        buffer = v30;
        CFDataAppendBytes(a1, &buffer, 1);
        BytePtr = CFDataGetBytePtr(TextData);
        v47 = CFDataGetLength(TextData);
        CFDataAppendBytes(a1, BytePtr, v47);
        if (v28)
          CFDictionarySetInt64();
        goto LABEL_98;
      }
      APSLogErrorAt(0);
      LODWORD(v21) = -6705;
LABEL_83:
      CFRelease(TextData);
LABEL_84:
      length_4 = v21;
      if (gLogCategory_APSBinaryTXTRecord <= 90
        && (gLogCategory_APSBinaryTXTRecord != -1 || _LogCategory_Initialize()))
      {
        goto LABEL_86;
      }
      return length_4;
    case 14:
      length = a5;
      v42 = APSNANServiceTypeMakeWithString((uint64_t)a4);
      v43 = 4294960591;
      if (!v42)
        goto LABEL_131;
      if (v42 == 1)
        goto LABEL_132;
      LOBYTE(__endptr) = v42;
      v44 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)&__endptr, 1);
      if (v44)
      {
        TextData = v44;
        goto LABEL_41;
      }
      v43 = 4294960568;
LABEL_131:
      APSLogErrorAt(0);
LABEL_132:
      v54 = v43;
      v45 = v43;
      goto LABEL_108;
    default:
      v21 = 4294960591;
      APSLogErrorAt(4294960591);
      TextData = 0;
      goto LABEL_82;
  }
}

uint64_t _GetKeyInfo(int a1, char *__s2, int *a3)
{
  uint64_t i;
  int v7;
  uint64_t result;

  if (a1 || __s2)
  {
    for (i = 0; i != 38; ++i)
    {
      while (1)
      {
        if (a1 && *((unsigned __int8 *)&allKeys + 24 * i) == a1)
        {
LABEL_14:
          v7 = 0;
          result = (uint64_t)&allKeys + 24 * i;
          if (a3)
            goto LABEL_21;
          return result;
        }
        if (__s2)
          break;
        if (++i == 38)
        {
          if (gLogCategory_APSBinaryTXTRecord <= 40
            && (gLogCategory_APSBinaryTXTRecord != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          goto LABEL_24;
        }
      }
      if (!strcmp(*((const char **)&allKeys + 3 * i + 1), __s2))
        goto LABEL_14;
    }
    if (gLogCategory_APSBinaryTXTRecord <= 90
      && (gLogCategory_APSBinaryTXTRecord != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    result = 0;
    v7 = -6705;
    if (!a3)
      return result;
    goto LABEL_21;
  }
  APSLogErrorAt(0);
LABEL_24:
  v7 = 0;
  result = 0;
  if (a3)
LABEL_21:
    *a3 = v7;
  return result;
}

CFDataRef _CreateTextData(UInt8 *bytes, CFIndex length, int *a3)
{
  CFDataRef v4;
  int v5;

  v4 = CFDataCreate(0, bytes, length);
  if (!v4)
  {
    APSLogErrorAt(0);
    v5 = -6728;
    if (!a3)
      return v4;
    goto LABEL_3;
  }
  v5 = 0;
  if (a3)
LABEL_3:
    *a3 = v5;
  return v4;
}

CFDataRef _CreateMACAddressData(uint64_t a1, uint64_t a2, _BYTE *a3, int *a4)
{
  uint64_t v6;
  CFDataRef result;
  int v8;
  UInt8 bytes[4];
  __int16 v10;

  v10 = 0;
  *(_DWORD *)bytes = 0;
  v6 = TextToHardwareAddress();
  if ((_DWORD)v6)
  {
    v8 = v6;
    APSLogErrorAt(v6);
  }
  else
  {
    result = CFDataCreate(0, bytes, 6);
    if (result)
    {
      v8 = 0;
      goto LABEL_4;
    }
    APSLogErrorAt(0);
    v8 = -6728;
  }
  result = 0;
  if (a3)
    *a3 = 1;
LABEL_4:
  if (a4)
    *a4 = v8;
  return result;
}

CFDataRef _CreateUUIDData(uint64_t a1, uint64_t a2, _BYTE *a3, int *a4)
{
  int v6;
  CFDataRef v7;
  CFDataRef v8;
  UInt8 bytes[16];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = StringToUUID();
  if (!v6)
  {
    v7 = CFDataCreate(0, bytes, 16);
    if (v7)
    {
      v8 = v7;
      v6 = 0;
      goto LABEL_4;
    }
    APSLogErrorAt(0);
    v6 = -6728;
  }
  v8 = 0;
  if (a3)
    *a3 = 1;
LABEL_4:
  if (a4)
    *a4 = v6;
  return v8;
}

_BYTE *CreateTXTRecordFromBinaryTXTRecord(const __CFData *a1, _DWORD *a2)
{
  CFIndex Length;
  CFIndex v5;
  _BYTE *BytePtr;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *KeyInfo;
  uint64_t v12;
  int v13;
  int v14;
  CFIndex v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  CFIndex v21;
  TXTRecordRef *v22;
  int v23;
  TXTRecordRef *v24;
  uint64_t v25;
  const void *BytesPtr;
  unsigned int v27;
  const void *ValuePtr;
  const void *v29;
  const void *v30;
  uint64_t v31;
  size_t v32;
  size_t v33;
  const void *v34;
  char *v35;
  char *v36;
  _DWORD *v38;
  uint8_t valueLen[4];
  uint8_t v40[2];
  char buffer[512];
  _QWORD v42[256];
  TXTRecordRef txtRecord;
  __int128 value;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[31];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  txtRecord = 0uLL;
  bzero(v42, 0x800uLL);
  if (!a1)
  {
    APSLogErrorAt(0);
LABEL_141:
    BytePtr = 0;
    goto LABEL_142;
  }
  Length = CFDataGetLength(a1);
  if (!Length)
  {
    if (gLogCategory_APSBinaryTXTRecord <= 90
      && (gLogCategory_APSBinaryTXTRecord != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_141;
  }
  v5 = Length;
  BytePtr = CFDataGetBytePtr(a1);
  if (!BytePtr)
  {
    APSLogErrorAt(0);
LABEL_142:
    LODWORD(v25) = -6705;
    goto LABEL_125;
  }
  if (gLogCategory_APSBinaryTXTRecord <= 30)
  {
    if (gLogCategory_APSBinaryTXTRecord != -1 || _LogCategory_Initialize())
      LogPrintF();
    if (gLogCategory_APSBinaryTXTRecord <= 30
      && (gLogCategory_APSBinaryTXTRecord != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  if (*BytePtr != 1)
  {
    LODWORD(v25) = -72420;
    if (gLogCategory_APSBinaryTXTRecord <= 40
      && (gLogCategory_APSBinaryTXTRecord != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    BytePtr = 0;
    goto LABEL_125;
  }
  v38 = a2;
  TXTRecordCreate(&txtRecord, 0x200u, buffer);
  v7 = 0;
  v8 = 1;
  while (v8 < v5 && !v7)
  {
    *(_DWORD *)valueLen = 0;
    value = 0uLL;
    *(_QWORD *)&v45 = 0;
    v9 = v8 + 1;
    v10 = BytePtr[v8];
    if (BytePtr[v8])
    {
      KeyInfo = (char *)_GetKeyInfo(BytePtr[v8], 0, (int *)valueLen);
      v12 = *(unsigned int *)valueLen;
      if (*(_DWORD *)valueLen)
        goto LABEL_99;
      if (KeyInfo)
      {
        if (v9 >= v5)
        {
          *(_DWORD *)valueLen = -6705;
          if (gLogCategory_APSBinaryTXTRecord > 90)
            goto LABEL_128;
          if (gLogCategory_APSBinaryTXTRecord == -1 && !_LogCategory_Initialize())
            goto LABEL_52;
        }
        else
        {
          v13 = (char)BytePtr[v9];
          v9 = v8 + 2;
          if (v13 < 0)
          {
            v17 = v13 & 0x7F;
            v40[1] = v13 & 0x7F;
            if (*KeyInfo < 0
              || ((v18 = *((_DWORD *)KeyInfo + 4), (v18 - 8) >= 5) ? (v19 = v18 == 2) : (v19 = 1), !v19))
            {
              if (gLogCategory_APSBinaryTXTRecord <= 30
                && (gLogCategory_APSBinaryTXTRecord != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              v12 = _ProcessKeyData(&txtRecord, (uint64_t)KeyInfo, &v40[1], 1u);
              *(_DWORD *)valueLen = v12;
              if ((_DWORD)v12)
                goto LABEL_99;
              goto LABEL_52;
            }
            if (gLogCategory_APSBinaryTXTRecord <= 30
              && (gLogCategory_APSBinaryTXTRecord != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            v22 = (TXTRecordRef *)&v42[2 * v17];
            if (v22->PrivateData[8])
            {
              v12 = _ProcessKeyData(&txtRecord, (uint64_t)KeyInfo, &BytePtr[v42[2 * v17]], v22->PrivateData[8]);
              *(_DWORD *)valueLen = v12;
              if ((_DWORD)v12)
                goto LABEL_99;
              goto LABEL_52;
            }
            *(_DWORD *)valueLen = -6705;
            if (gLogCategory_APSBinaryTXTRecord > 90
              || gLogCategory_APSBinaryTXTRecord == -1 && !_LogCategory_Initialize())
            {
              goto LABEL_52;
            }
          }
          else
          {
            v14 = v13;
            if (v13 < 0x79u)
            {
              v20 = 1;
              LODWORD(v15) = v13;
              goto LABEL_57;
            }
            if (v9 >= v5)
            {
              *(_DWORD *)valueLen = -6705;
              if (gLogCategory_APSBinaryTXTRecord > 90)
              {
LABEL_128:
                v25 = 4294960591;
LABEL_129:
                APSLogErrorAt(v25);
                BytePtr = 0;
                goto LABEL_125;
              }
              if (gLogCategory_APSBinaryTXTRecord == -1 && !_LogCategory_Initialize())
                goto LABEL_52;
            }
            else
            {
              v15 = BytePtr[v9];
              v9 = v8 + 3;
              v16 = gLogCategory_APSBinaryTXTRecord;
              if (v14 == 127)
              {
                if (gLogCategory_APSBinaryTXTRecord <= 30
                  && (gLogCategory_APSBinaryTXTRecord != -1 || _LogCategory_Initialize()))
                {
                  LogPrintF();
                }
                *(_QWORD *)&v45 = *((_QWORD *)KeyInfo + 2);
                value = *(_OWORD *)KeyInfo;
                LODWORD(v45) = 2;
                v20 = 1;
                KeyInfo = (char *)&value;
                goto LABEL_57;
              }
              if (gLogCategory_APSBinaryTXTRecord > 30)
              {
                if (v5 - v9 >= v15)
                {
                  v21 = v15;
LABEL_72:
                  v7 = 0;
                  v9 += v21;
                  goto LABEL_73;
                }
              }
              else
              {
                if (gLogCategory_APSBinaryTXTRecord != -1 || _LogCategory_Initialize())
                  LogPrintF();
                v20 = 0;
LABEL_57:
                if (gLogCategory_APSBinaryTXTRecord <= 30
                  && (gLogCategory_APSBinaryTXTRecord != -1 || _LogCategory_Initialize()))
                {
                  LogPrintF();
                }
                if (v5 - v9 >= v15)
                {
                  v21 = v15;
                  if (!v20)
                    goto LABEL_72;
                  v12 = _ProcessKeyData(&txtRecord, (uint64_t)KeyInfo, &BytePtr[v9], v15);
                  *(_DWORD *)valueLen = v12;
                  if (!(_DWORD)v12)
                  {
                    if ((*KeyInfo & 0x80000000) == 0)
                    {
                      v23 = *((_DWORD *)KeyInfo + 4);
                      if ((v23 - 8) < 5 || v23 == 2)
                      {
                        v24 = (TXTRecordRef *)&v42[2 * v10];
                        v24->ForceNaturalAlignment = (char *)v9;
                        v24->PrivateData[8] = v15;
                        if (gLogCategory_APSBinaryTXTRecord <= 30
                          && (gLogCategory_APSBinaryTXTRecord != -1 || _LogCategory_Initialize()))
                        {
                          LogPrintF();
                        }
                      }
                    }
                    goto LABEL_72;
                  }
LABEL_99:
                  APSLogErrorAt(v12);
LABEL_52:
                  v7 = 0;
                  goto LABEL_73;
                }
                v16 = gLogCategory_APSBinaryTXTRecord;
              }
              *(_DWORD *)valueLen = -6705;
              if (v16 > 90)
                goto LABEL_128;
              if (v16 == -1 && !_LogCategory_Initialize())
                goto LABEL_52;
            }
          }
        }
      }
      else if (gLogCategory_APSBinaryTXTRecord > 30
             || gLogCategory_APSBinaryTXTRecord == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_52;
      }
      LogPrintF();
      goto LABEL_52;
    }
    v7 = 1;
LABEL_73:
    v25 = *(unsigned int *)valueLen;
    v8 = v9;
    if (*(_DWORD *)valueLen)
      goto LABEL_129;
  }
  BytesPtr = TXTRecordGetBytesPtr(&txtRecord);
  v27 = TXTRecordGetLength(&txtRecord);
  v57 = 0u;
  memset(v58, 0, sizeof(v58));
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  value = 0u;
  valueLen[0] = 0;
  *(_WORD *)v40 = 0;
  if (TXTRecordContainsKey(v27, BytesPtr, "bin_grp_cmid") == 1
    || TXTRecordContainsKey(v27, BytesPtr, "bin_grp_rcid") == 1)
  {
    ValuePtr = TXTRecordGetValuePtr(v27, BytesPtr, "gid", valueLen);
    v29 = TXTRecordGetValuePtr(v27, BytesPtr, "bin_grp_cmid", &v40[1]);
    v30 = TXTRecordGetValuePtr(v27, BytesPtr, "bin_grp_rcid", v40);
    v31 = valueLen[0];
    v32 = v40[1];
    v33 = v40[0];
    if (valueLen[0] + (unint64_t)v40[1] + v40[0] + 2 < 0x100)
    {
      if (ValuePtr)
      {
        v34 = v30;
        __memcpy_chk();
        v35 = (char *)&value + v31;
        if (v29)
        {
          *v35 = 43;
          v36 = v35 + 1;
          memcpy(v36, v29, v32);
          v35 = &v36[v32];
        }
        a2 = v38;
        if (v34)
        {
          *v35++ = 43;
          memcpy(v35, v34, v33);
          LOBYTE(v35) = (_BYTE)v35 + v33;
        }
        TXTRecordSetValue(&txtRecord, "gid", (_BYTE)v35 - &value, &value);
      }
      else
      {
        a2 = v38;
        if (gLogCategory_APSBinaryTXTRecord <= 90
          && (gLogCategory_APSBinaryTXTRecord != -1 || _LogCategory_Initialize()))
        {
LABEL_118:
          LogPrintF();
        }
      }
    }
    else
    {
      a2 = v38;
      if (gLogCategory_APSBinaryTXTRecord <= 90
        && (gLogCategory_APSBinaryTXTRecord != -1 || _LogCategory_Initialize()))
      {
        goto LABEL_118;
      }
    }
    TXTRecordRemoveValue(&txtRecord, "bin_grp_cmid");
    TXTRecordRemoveValue(&txtRecord, "bin_grp_rcid");
    BytesPtr = TXTRecordGetBytesPtr(&txtRecord);
    v27 = TXTRecordGetLength(&txtRecord);
  }
  BytePtr = CFDataCreate(0, (const UInt8 *)BytesPtr, v27);
  if (BytePtr)
  {
    LODWORD(v25) = 0;
  }
  else
  {
    APSLogErrorAt(0);
    LODWORD(v25) = -6728;
  }
LABEL_125:
  if (a2)
    *a2 = v25;
  TXTRecordDeallocate(&txtRecord);
  return BytePtr;
}

uint64_t _ProcessKeyData(TXTRecordRef *txtRecord, uint64_t a2, unsigned __int8 *value, unsigned int valueSize)
{
  int v4;
  unsigned __int8 v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  uint8_t v17;
  uint64_t v18;
  const char *v20;
  __CFData *Mutable;
  __CFData *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  CFStringRef v28;
  uint64_t CString;
  uint8_t v30;
  uint64_t v31;
  const char *v32;
  int v33;
  const __CFString *v34;
  const __CFString *v35;
  const char *CStringPtrAndBufferToFree;
  const char *v37;
  uint8_t v38;
  uint64_t v39;
  const char *v40;
  CFStringRef theString;
  char __s[8];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a2 + 16);
  switch(v4)
  {
    case 2:
      return TXTRecordSetValue(txtRecord, *(const char **)(a2 + 8), valueSize, value);
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      v40 = *(const char **)(a2 + 8);
      __s[0] = 0;
      if (!valueSize)
        goto LABEL_16;
      v9 = 0;
      v10 = v4 - 5;
      while (2)
      {
        if ((v9 + 4) >= valueSize)
          v11 = valueSize;
        else
          v11 = (v9 + 4);
        if (v11 > v9)
        {
          v12 = 0;
          v13 = 0;
          v14 = v11 - v9;
          v15 = &value[v9];
          do
          {
            v16 = *v15++;
            v13 |= v16 << v12;
            v12 += 8;
            --v14;
          }
          while (v14);
          v9 = v11;
        }
        if (v10 >= 0xFFFFFFFE)
        {
          strlen(__s);
          goto LABEL_15;
        }
        if (valueSize == v9)
        {
LABEL_15:
          SNPrintF();
          if (valueSize <= v9)
          {
LABEL_16:
            v17 = strlen(__s);
            return TXTRecordSetValue(txtRecord, v40, v17, __s);
          }
          continue;
        }
        break;
      }
      APSLogErrorAt(0);
      return 4294960591;
    case 8:
      return _ProcessMACAddressData(txtRecord, *(const char **)(a2 + 8), (uint64_t)value, valueSize);
    case 9:
    case 10:
      return _ProcessUUIDData(txtRecord, *(const char **)(a2 + 8), (uint64_t)value, valueSize, v4 == 10);
    case 11:
    case 12:
      if (!_ProcessUUIDData(txtRecord, *(const char **)(a2 + 8), (uint64_t)value, valueSize, v4 == 12))
        return 0;
      return _ProcessMACAddressData(txtRecord, *(const char **)(a2 + 8), (uint64_t)value, valueSize);
    case 13:
      v20 = *(const char **)(a2 + 8);
      theString = 0;
      Mutable = APSFeaturesCreateMutable(0);
      if (Mutable)
      {
        v22 = Mutable;
        if (valueSize)
        {
          v23 = 0;
          v24 = 0;
          do
          {
            v25 = 0;
            v26 = value[v24];
            do
            {
              if ((v26 & 1) != 0)
                APSFeaturesSetFeature(v22, v23 + v25);
              v26 >>= 1;
              ++v25;
            }
            while (v25 != 8);
            ++v24;
            v23 += 8;
          }
          while (v24 != valueSize);
        }
        v27 = APSFeaturesCopyStringRepresentation((const UInt8 *)v22, &theString);
        if ((_DWORD)v27)
        {
          v18 = v27;
          APSLogErrorAt(v27);
          v28 = theString;
        }
        else
        {
          __s[0] = 0;
          v28 = theString;
          CString = CFStringGetCString(theString, __s, 256, 0x8000100u);
          if ((_DWORD)CString)
          {
            v30 = strlen(__s);
            v31 = TXTRecordSetValue(txtRecord, v20, v30, __s);
            v18 = v31;
            if ((_DWORD)v31)
              APSLogErrorAt(v31);
          }
          else
          {
            APSLogErrorAt(CString);
            v18 = 4294960591;
          }
        }
        if (v28)
          CFRelease(v28);
        CFRelease(v22);
      }
      else
      {
        APSLogErrorAt(0);
        return 4294960568;
      }
      return v18;
    case 14:
      v32 = *(const char **)(a2 + 8);
      *(_QWORD *)__s = 0;
      if (valueSize != 1)
      {
        if (gLogCategory_APSBinaryTXTRecord > 60
          || gLogCategory_APSBinaryTXTRecord == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_63;
        }
LABEL_57:
        LogPrintF();
LABEL_63:
        v18 = 0;
        goto LABEL_47;
      }
      v33 = *value;
      v34 = CFSTR("ll");
      if (v33 != 2)
        v34 = 0;
      if (v33 == 1)
        v35 = CFSTR("ap");
      else
        v35 = v34;
      if (!v35)
      {
        if (gLogCategory_APSBinaryTXTRecord > 60
          || gLogCategory_APSBinaryTXTRecord == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_63;
        }
        goto LABEL_57;
      }
      CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
      if (CStringPtrAndBufferToFree)
      {
        v37 = CStringPtrAndBufferToFree;
        v38 = strlen(CStringPtrAndBufferToFree);
        v39 = TXTRecordSetValue(txtRecord, v32, v38, v37);
        v18 = v39;
        if ((_DWORD)v39)
          APSLogErrorAt(v39);
      }
      else
      {
        APSLogErrorAt(0);
        v18 = 4294960534;
      }
LABEL_47:
      free(*(void **)__s);
      return v18;
    default:
      return 0;
  }
}

uint64_t _ProcessMACAddressData(TXTRecordRef *a1, const char *a2, uint64_t a3, int a4)
{
  uint8_t v6;
  char __s[256];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a4 == 6)
  {
    HardwareAddressToCString();
    v6 = strlen(__s);
    return TXTRecordSetValue(a1, a2, v6, __s);
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
}

uint64_t _ProcessUUIDData(TXTRecordRef *a1, const char *a2, uint64_t a3, int a4, int a5)
{
  char v8;
  unint64_t v9;
  char *v10;
  uint8_t v11;
  char __s[38];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a4 == 16)
  {
    UUIDtoCStringFlags();
    if (!a5)
    {
      v8 = __s[0];
      if (__s[0])
      {
        v9 = 0;
        do
        {
          v10 = &__s[v9];
          __s[v9] = __toupper(v8);
          if (v9 > 0x24)
            break;
          ++v9;
          v8 = v10[1];
        }
        while (v8);
      }
    }
    v11 = strlen(__s);
    return TXTRecordSetValue(a1, a2, v11, __s);
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
}

uint64_t APSSettingsSetUseXPCHelper(int a1)
{
  uint64_t v1;

  if (!a1)
    return 0;
  v1 = 4294960561;
  APSLogErrorAt(4294960561);
  return v1;
}

__CFArray *APSSettingsCopyKeys(int *a1)
{
  __CFArray *Mutable;
  const __CFString *v3;
  const __CFString *v4;
  const __CFArray *v5;
  const __CFArray *v6;
  const __CFArray *v7;
  const __CFArray *v8;
  int v9;
  CFRange v11;
  CFRange v12;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    APSLogErrorAt(0);
    v9 = -6728;
    if (!a1)
      return Mutable;
    goto LABEL_7;
  }
  v3 = (const __CFString *)*MEMORY[0x1E0C9B260];
  v4 = (const __CFString *)*MEMORY[0x1E0C9B230];
  v5 = CFPreferencesCopyKeyList(CFSTR("com.apple.airplay"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (v5)
  {
    v6 = v5;
    v11.length = CFArrayGetCount(v5);
    v11.location = 0;
    CFArrayAppendArray(Mutable, v6, v11);
    CFRelease(v6);
  }
  v7 = CFPreferencesCopyKeyList(CFSTR("com.apple.coremedia"), v3, v4);
  if (v7)
  {
    v8 = v7;
    v12.length = CFArrayGetCount(v7);
    v12.location = 0;
    CFArrayAppendArray(Mutable, v8, v12);
    CFRelease(v8);
  }
  v9 = 0;
  if (a1)
LABEL_7:
    *a1 = v9;
  return Mutable;
}

const void *APSSettingsCopyValue(const __CFString *a1, int *a2)
{
  return APSSettingsCopyValueEx(a1, 0, a2);
}

uint64_t APSSettingsIsFeatureEnabled(const __CFString *a1)
{
  const __CFBoolean *Value;
  uint64_t IsFeatureEnabledInDomain;
  const void **v4;
  uint64_t v6;

  if (APSSettingsIsFeatureEnabled_sFeatureCacheOnce != -1)
    dispatch_once(&APSSettingsIsFeatureEnabled_sFeatureCacheOnce, &__block_literal_global_568);
  pthread_mutex_lock((pthread_mutex_t *)APSSettingsIsFeatureEnabled_sFeatureCacheMutex);
  Value = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)APSSettingsIsFeatureEnabled_sFeatureCache, a1);
  if (Value)
  {
    IsFeatureEnabledInDomain = CFBooleanGetValue(Value);
  }
  else
  {
    v6 = 0;
    if (APSSettingsGetInt64IfPresent(a1, &v6))
      IsFeatureEnabledInDomain = v6 != 0;
    else
      IsFeatureEnabledInDomain = APSSettingsIsFeatureEnabledInDomain();
    v4 = (const void **)MEMORY[0x1E0C9AE50];
    if (!(_DWORD)IsFeatureEnabledInDomain)
      v4 = (const void **)MEMORY[0x1E0C9AE40];
    CFDictionarySetValue((CFMutableDictionaryRef)APSSettingsIsFeatureEnabled_sFeatureCache, a1, *v4);
  }
  pthread_mutex_unlock((pthread_mutex_t *)APSSettingsIsFeatureEnabled_sFeatureCacheMutex);
  return IsFeatureEnabledInDomain;
}

uint64_t APSSettingsIsFeatureEnabledInDomain()
{
  uint64_t v0;

  v0 = CFStringGetOrCopyCStringUTF8();
  if (!(_DWORD)v0)
  {
    v0 = CFStringGetOrCopyCStringUTF8();
    if (!(_DWORD)v0)
      return _os_feature_enabled_impl();
  }
  APSLogErrorAt(v0);
  return 0;
}

const void *APSSettingsGetCString(const __CFString *a1, uint64_t a2, uint64_t a3, int *a4)
{
  const void *result;
  const void *v5;
  uint64_t v6;

  result = APSSettingsCopyValueEx(a1, 0, a4);
  if (result)
  {
    v5 = result;
    v6 = CFGetCString();
    CFRelease(v5);
    return (const void *)v6;
  }
  return result;
}

void APSSettingsGetDouble(const __CFString *a1, int *a2)
{
  const void *v2;
  const void *v3;

  v2 = APSSettingsCopyValueEx(a1, 0, a2);
  if (v2)
  {
    v3 = v2;
    CFGetDouble();
    CFRelease(v3);
  }
}

uint64_t APSSettingsGetInt8(const __CFString *a1, int *a2)
{
  const void *v2;
  const void *v3;
  char v4;

  v2 = APSSettingsCopyValueEx(a1, 0, a2);
  if (v2)
  {
    v3 = v2;
    v4 = CFGetInt64Ranged();
    CFRelease(v3);
  }
  else
  {
    return 0;
  }
  return v4;
}

uint64_t APSSettingsGetUInt8(const __CFString *a1, int *a2)
{
  const void *v2;
  const void *v3;
  unsigned __int8 v4;

  v2 = APSSettingsCopyValueEx(a1, 0, a2);
  if (v2)
  {
    v3 = v2;
    v4 = CFGetInt64Ranged();
    CFRelease(v3);
  }
  else
  {
    return 0;
  }
  return v4;
}

uint64_t APSSettingsGetInt16(const __CFString *a1, int *a2)
{
  const void *v2;
  const void *v3;
  __int16 v4;

  v2 = APSSettingsCopyValueEx(a1, 0, a2);
  if (v2)
  {
    v3 = v2;
    v4 = CFGetInt64Ranged();
    CFRelease(v3);
  }
  else
  {
    return 0;
  }
  return v4;
}

uint64_t APSSettingsGetUInt16(const __CFString *a1, int *a2)
{
  const void *v2;
  const void *v3;
  unsigned __int16 v4;

  v2 = APSSettingsCopyValueEx(a1, 0, a2);
  if (v2)
  {
    v3 = v2;
    v4 = CFGetInt64Ranged();
    CFRelease(v3);
  }
  else
  {
    return 0;
  }
  return v4;
}

uint64_t APSSettingsGetInt32(const __CFString *a1, int *a2)
{
  const void *v2;
  const void *v3;
  uint64_t v4;

  v2 = APSSettingsCopyValueEx(a1, 0, a2);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = CFGetInt64Ranged();
  CFRelease(v3);
  return v4;
}

uint64_t APSSettingsGetUInt32(const __CFString *a1, int *a2)
{
  const void *v2;
  const void *v3;
  uint64_t v4;

  v2 = APSSettingsCopyValueEx(a1, 0, a2);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = CFGetInt64Ranged();
  CFRelease(v3);
  return v4;
}

const void *APSSettingsGetUInt64(const __CFString *a1, int *a2)
{
  const void *result;
  const void *v3;
  uint64_t v4;

  result = APSSettingsCopyValueEx(a1, 0, a2);
  if (result)
  {
    v3 = result;
    v4 = CFGetInt64();
    CFRelease(v3);
    return (const void *)v4;
  }
  return result;
}

uint64_t APSSettingsGetIntWithDefault(const __CFString *a1, uint64_t a2)
{
  return APSSettingsGetIntWithOverrideAndDefault(a1, 0, a2);
}

uint64_t APSSettingsGetIntWithOverrideAndDefault(const __CFString *key, CFDictionaryRef theDict, uint64_t a3)
{
  const void *Value;
  const void *v6;
  const void *v7;
  BOOL v8;
  unsigned int v9;
  int v11;

  v11 = 0;
  if (theDict && (Value = CFDictionaryGetValue(theDict, key)) != 0)
  {
    v6 = Value;
    CFRetain(Value);
  }
  else
  {
    v7 = APSSettingsCopyValueEx(key, 0, &v11);
    v6 = v7;
    if (v11)
      v8 = 1;
    else
      v8 = v7 == 0;
    if (v8)
    {
      if (!v7)
        return a3;
      goto LABEL_11;
    }
  }
  v9 = CFGetInt64();
  if (v11)
    a3 = a3;
  else
    a3 = v9;
LABEL_11:
  CFRelease(v6);
  return a3;
}

uint64_t APSSettingsGetInt8IfPresent(const __CFString *a1, _BYTE *a2)
{
  const void *v3;
  const void *v4;
  BOOL v5;
  char v6;
  uint64_t v7;
  int v9;

  v9 = 0;
  v3 = APSSettingsCopyValueEx(a1, 0, &v9);
  v4 = v3;
  if (v9)
    v5 = 1;
  else
    v5 = v3 == 0;
  if (v5)
  {
    v7 = 0;
    if (!v3)
      return v7;
  }
  else
  {
    v6 = CFGetInt64Ranged();
    if (v9)
    {
      v7 = 0;
    }
    else
    {
      *a2 = v6;
      v7 = 1;
    }
  }
  CFRelease(v4);
  return v7;
}

uint64_t APSSettingsGetUInt8IfPresent(const __CFString *a1, _BYTE *a2)
{
  const void *v3;
  const void *v4;
  BOOL v5;
  char v6;
  uint64_t v7;
  int v9;

  v9 = 0;
  v3 = APSSettingsCopyValueEx(a1, 0, &v9);
  v4 = v3;
  if (v9)
    v5 = 1;
  else
    v5 = v3 == 0;
  if (v5)
  {
    v7 = 0;
    if (!v3)
      return v7;
  }
  else
  {
    v6 = CFGetInt64Ranged();
    if (v9)
    {
      v7 = 0;
    }
    else
    {
      *a2 = v6;
      v7 = 1;
    }
  }
  CFRelease(v4);
  return v7;
}

uint64_t APSSettingsGetInt16IfPresent(const __CFString *a1, _WORD *a2)
{
  const void *v3;
  const void *v4;
  BOOL v5;
  __int16 v6;
  uint64_t v7;
  int v9;

  v9 = 0;
  v3 = APSSettingsCopyValueEx(a1, 0, &v9);
  v4 = v3;
  if (v9)
    v5 = 1;
  else
    v5 = v3 == 0;
  if (v5)
  {
    v7 = 0;
    if (!v3)
      return v7;
  }
  else
  {
    v6 = CFGetInt64Ranged();
    if (v9)
    {
      v7 = 0;
    }
    else
    {
      *a2 = v6;
      v7 = 1;
    }
  }
  CFRelease(v4);
  return v7;
}

uint64_t APSSettingsGetUInt16IfPresent(const __CFString *a1, _WORD *a2)
{
  const void *v3;
  const void *v4;
  BOOL v5;
  __int16 v6;
  uint64_t v7;
  int v9;

  v9 = 0;
  v3 = APSSettingsCopyValueEx(a1, 0, &v9);
  v4 = v3;
  if (v9)
    v5 = 1;
  else
    v5 = v3 == 0;
  if (v5)
  {
    v7 = 0;
    if (!v3)
      return v7;
  }
  else
  {
    v6 = CFGetInt64Ranged();
    if (v9)
    {
      v7 = 0;
    }
    else
    {
      *a2 = v6;
      v7 = 1;
    }
  }
  CFRelease(v4);
  return v7;
}

uint64_t APSSettingsGetInt32IfPresent(const __CFString *a1, _DWORD *a2)
{
  const void *v3;
  const void *v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  int v9;

  v9 = 0;
  v3 = APSSettingsCopyValueEx(a1, 0, &v9);
  v4 = v3;
  if (v9)
    v5 = 1;
  else
    v5 = v3 == 0;
  if (v5)
  {
    v7 = 0;
    if (!v3)
      return v7;
  }
  else
  {
    v6 = CFGetInt64Ranged();
    if (v9)
    {
      v7 = 0;
    }
    else
    {
      *a2 = v6;
      v7 = 1;
    }
  }
  CFRelease(v4);
  return v7;
}

uint64_t APSSettingsGetUInt32IfPresent(const __CFString *a1, _DWORD *a2)
{
  const void *v3;
  const void *v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  int v9;

  v9 = 0;
  v3 = APSSettingsCopyValueEx(a1, 0, &v9);
  v4 = v3;
  if (v9)
    v5 = 1;
  else
    v5 = v3 == 0;
  if (v5)
  {
    v7 = 0;
    if (!v3)
      return v7;
  }
  else
  {
    v6 = CFGetInt64Ranged();
    if (v9)
    {
      v7 = 0;
    }
    else
    {
      *a2 = v6;
      v7 = 1;
    }
  }
  CFRelease(v4);
  return v7;
}

uint64_t APSSettingsGetUInt64IfPresent(const __CFString *a1, uint64_t *a2)
{
  const void *v3;
  const void *v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  int v9;

  v9 = 0;
  v3 = APSSettingsCopyValueEx(a1, 0, &v9);
  v4 = v3;
  if (v9)
    v5 = 1;
  else
    v5 = v3 == 0;
  if (v5)
  {
    v7 = 0;
    if (!v3)
      return v7;
  }
  else
  {
    v6 = CFGetInt64();
    if (v9)
    {
      v7 = 0;
    }
    else
    {
      *a2 = v6;
      v7 = 1;
    }
  }
  CFRelease(v4);
  return v7;
}

uint64_t APSSettingsSetCString(const __CFString *a1, const char *a2, CFIndex a3)
{
  CFStringRef v4;
  CFStringRef v5;
  const __CFString *v6;

  if (a3 == -1)
    v4 = CFStringCreateWithCString(0, a2, 0x8000100u);
  else
    v4 = CFStringCreateWithBytes(0, (const UInt8 *)a2, a3, 0x8000100u, 0);
  v5 = v4;
  if (v4)
  {
    if (CFEqual(a1, CFSTR("wirelessdisplay_enable_timestamps_diagnostic")))
      v6 = CFSTR("com.apple.coremedia");
    else
      v6 = CFSTR("com.apple.airplay");
    CFPreferencesSetAppValue(a1, v5, v6);
    CFRelease(v5);
    return 0;
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960579;
  }
}

uint64_t APSSettingsSetValue(const __CFString *a1, const void *a2)
{
  const __CFString *v4;

  if (CFEqual(a1, CFSTR("wirelessdisplay_enable_timestamps_diagnostic")))
    v4 = CFSTR("com.apple.coremedia");
  else
    v4 = CFSTR("com.apple.airplay");
  CFPreferencesSetAppValue(a1, a2, v4);
  return 0;
}

uint64_t APSSettingsSetDouble(const __CFString *a1, double a2)
{
  double v3;

  v3 = a2;
  return APSSettingsSetNumber(a1, kCFNumberDoubleType, &v3);
}

uint64_t APSSettingsSetNumber(const __CFString *a1, CFNumberType a2, const void *a3)
{
  CFNumberRef v4;
  CFNumberRef v5;
  const __CFString *v6;

  v4 = CFNumberCreate(0, a2, a3);
  if (v4)
  {
    v5 = v4;
    if (CFEqual(a1, CFSTR("wirelessdisplay_enable_timestamps_diagnostic")))
      v6 = CFSTR("com.apple.coremedia");
    else
      v6 = CFSTR("com.apple.airplay");
    CFPreferencesSetAppValue(a1, v5, v6);
    CFRelease(v5);
    return 0;
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960596;
  }
}

uint64_t APSSettingsSetInt64(const __CFString *a1)
{
  uint64_t Int64;
  const void *v3;
  const __CFString *v4;

  Int64 = CFNumberCreateInt64();
  if (Int64)
  {
    v3 = (const void *)Int64;
    if (CFEqual(a1, CFSTR("wirelessdisplay_enable_timestamps_diagnostic")))
      v4 = CFSTR("com.apple.coremedia");
    else
      v4 = CFSTR("com.apple.airplay");
    CFPreferencesSetAppValue(a1, v3, v4);
    CFRelease(v3);
    return 0;
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960596;
  }
}

uint64_t APSSettingsRemoveValue(const __CFString *a1)
{
  const __CFString *v2;

  if (CFEqual(a1, CFSTR("wirelessdisplay_enable_timestamps_diagnostic")))
    v2 = CFSTR("com.apple.coremedia");
  else
    v2 = CFSTR("com.apple.airplay");
  CFPreferencesSetAppValue(a1, 0, v2);
  return 0;
}

uint64_t APSSettingsSynchronize()
{
  CFPreferencesAppSynchronize(CFSTR("com.apple.airplay"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.coremedia"));
}

uint64_t APSAudioFormatDescriptionListCreateWithASBDArray(const __CFAllocator *a1, CFDataRef theData, CFTypeRef *a3)
{
  unint64_t Length;
  unint64_t v7;
  const UInt8 *BytePtr;
  uint64_t appended;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  CFTypeRef cf;

  v13 = 0;
  cf = 0;
  if (a3 && (Length = CFDataGetLength(theData), Length > 0x27))
  {
    v7 = Length;
    BytePtr = CFDataGetBytePtr(theData);
    appended = APSAudioFormatDescriptionListCreate(a1, &cf);
    if ((_DWORD)appended)
    {
      v11 = appended;
    }
    else
    {
      if (v7 / 0x28 <= 1)
        v10 = 1;
      else
        v10 = v7 / 0x28;
      while (1)
      {
        appended = ASBDToAPAudioFormatIndex((uint64_t)BytePtr, -65536, &v13);
        if ((_DWORD)appended)
        {
          v11 = appended;
          goto LABEL_14;
        }
        appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(v13, (uint64_t)cf, 0);
        if ((_DWORD)appended)
          break;
        BytePtr += 40;
        if (!--v10)
        {
          v11 = 0;
          *a3 = cf;
          return v11;
        }
      }
      v11 = appended;
    }
LABEL_14:
    APSLogErrorAt(appended);
  }
  else
  {
    APSLogErrorAt(0);
    v11 = 4294954516;
  }
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  CFTypeRef cf;

  cf = 0;
  v5 = APSAudioFormatDescriptionCreateWithAudioFormatIndex(*MEMORY[0x1E0C9AE00], a1, 0, &cf);
  if ((_DWORD)v5)
  {
    v6 = v5;
  }
  else
  {
    v5 = APSAudioFormatDescriptionListAddFormat(a2, (uint64_t)cf);
    if ((_DWORD)v5)
    {
      v6 = v5;
    }
    else
    {
      if (!a3)
      {
        v6 = 0;
        goto LABEL_7;
      }
      v5 = APSAudioFormatDescriptionListSetDefaultFormat(a2, cf);
      v6 = v5;
      if (!(_DWORD)v5)
        goto LABEL_7;
    }
  }
  APSLogErrorAt(v5);
LABEL_7:
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t APSAudioFormatDescriptionListCreateASBDArray(const __CFAllocator *a1, uint64_t a2, const __CFData **a3)
{
  uint64_t v5;
  CFIndex Count;
  __CFData *Mutable;
  const __CFData *v8;
  const UInt8 *BytePtr;
  UInt8 *v10;
  CFIndex v11;
  _OWORD *ValueAtIndex;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t result;
  CFArrayRef theArray;

  theArray = 0;
  if (!a3)
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  v5 = APSAudioFormatDescriptionListCopyAudioFormatDescriptionsArray(a2, (uint64_t *)&theArray);
  if ((_DWORD)v5)
  {
    v15 = v5;
    APSLogErrorAt(v5);
    goto LABEL_9;
  }
  Count = CFArrayGetCount(theArray);
  Mutable = CFDataCreateMutable(a1, 40 * Count);
  if (!Mutable)
  {
    APSLogErrorAt(0);
    v15 = 4294954510;
LABEL_9:
    if (theArray)
      CFRelease(theArray);
    return v15;
  }
  v8 = Mutable;
  CFDataSetLength(Mutable, 40 * Count);
  BytePtr = CFDataGetBytePtr(v8);
  if (Count < 1)
  {
LABEL_8:
    v15 = 0;
    *a3 = v8;
    goto LABEL_9;
  }
  v10 = (UInt8 *)BytePtr;
  v11 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v11);
    if (!ValueAtIndex)
      break;
    v13 = ValueAtIndex[1];
    v14 = ValueAtIndex[2];
    *((_QWORD *)v10 + 4) = *((_QWORD *)ValueAtIndex + 6);
    *(_OWORD *)v10 = v13;
    *((_OWORD *)v10 + 1) = v14;
    v10 += 40;
    if (Count == ++v11)
      goto LABEL_8;
  }
  result = APSLogErrorAt(0);
  __break(1u);
  return result;
}

uint64_t APSAudioFormatDescriptionListCreateASRDArrayPCM(const __CFAllocator *a1, uint64_t a2, const __CFData **a3)
{
  _DWORD *v6;
  uint64_t v7;
  CFIndex Count;
  __CFData *Mutable;
  const __CFData *v10;
  const UInt8 *BytePtr;
  UInt8 *v12;
  CFIndex v13;
  _QWORD *ValueAtIndex;
  _QWORD *v15;
  char *v16;
  int BitsPerChannel;
  int v18;
  int v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t result;
  CFArrayRef theArray;

  theArray = 0;
  if (!a3)
  {
    APSLogErrorAt(0);
    v6 = 0;
    v23 = 4294954516;
LABEL_18:
    free(v6);
    return v23;
  }
  v6 = malloc_type_calloc(0x28uLL, 1uLL, 0x3727BC7BuLL);
  if (!v6)
    goto LABEL_22;
  v7 = APSAudioFormatDescriptionListCopyAudioFormatDescriptionsArray(a2, (uint64_t *)&theArray);
  if ((_DWORD)v7)
  {
    v23 = v7;
    APSLogErrorAt(v7);
    goto LABEL_16;
  }
  Count = CFArrayGetCount(theArray);
  Mutable = CFDataCreateMutable(a1, 56 * Count);
  if (!Mutable)
  {
LABEL_22:
    APSLogErrorAt(0);
    v23 = 4294954510;
LABEL_16:
    if (theArray)
      CFRelease(theArray);
    goto LABEL_18;
  }
  v10 = Mutable;
  CFDataSetLength(Mutable, 56 * Count);
  BytePtr = CFDataGetBytePtr(v10);
  if (Count < 1)
  {
LABEL_15:
    v23 = 0;
    *a3 = v10;
    goto LABEL_16;
  }
  v12 = (UInt8 *)BytePtr;
  v13 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v13);
    if (!ValueAtIndex)
      break;
    v15 = ValueAtIndex;
    if (*((_DWORD *)ValueAtIndex + 6) == 1819304813)
    {
      v16 = (char *)(ValueAtIndex + 2);
    }
    else
    {
      BitsPerChannel = APAudioFormatIndexGetBitsPerChannel(ValueAtIndex[12]);
      *(_QWORD *)v6 = v15[2];
      if (BitsPerChannel == ((BitsPerChannel + 7) & 0x38))
        v18 = 12;
      else
        v18 = 20;
      v6[2] = 1819304813;
      v6[3] = v18;
      v19 = *((_DWORD *)v15 + 11);
      v20 = v19 * ((BitsPerChannel + 7) >> 3);
      v6[4] = v20;
      v6[5] = 1;
      v6[6] = v20;
      v6[7] = v19;
      v6[8] = BitsPerChannel;
      v6[9] = 0;
      v16 = (char *)v6;
    }
    v22 = *(_OWORD *)v16;
    v21 = *((_OWORD *)v16 + 1);
    *((_QWORD *)v12 + 4) = *((_QWORD *)v16 + 4);
    *(_OWORD *)v12 = v22;
    *((_OWORD *)v12 + 1) = v21;
    *(_QWORD *)&v21 = *(_QWORD *)v12;
    *((_QWORD *)v12 + 5) = *(_QWORD *)v12;
    *((_QWORD *)v12 + 6) = v21;
    ++v13;
    v12 += 56;
    if (Count == v13)
      goto LABEL_15;
  }
  result = APSLogErrorAt(0);
  __break(1u);
  return result;
}

uint64_t APSAudioFormatDescriptionListCreateAdvertisementArray(const __CFAllocator *a1, uint64_t a2, CFMutableArrayRef *a3)
{
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v6;
  uint64_t v7;
  CFIndex i;
  CFIndex Count;
  uint64_t v10;
  CFArrayRef theArray;

  theArray = 0;
  if (a3)
  {
    Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v6 = Mutable;
      v7 = APSAudioFormatDescriptionListCopyAudioFormatDescriptionsArray(a2, (uint64_t *)&theArray);
      if ((_DWORD)v7)
      {
        v10 = v7;
        APSLogErrorAt(v7);
        CFRelease(v6);
      }
      else
      {
        for (i = 0; ; ++i)
        {
          Count = (CFIndex)theArray;
          if (theArray)
            Count = CFArrayGetCount(theArray);
          if (i >= Count)
            break;
          CFArrayGetValueAtIndex(theArray, i);
          FigCFArrayAppendInt64();
        }
        v10 = 0;
        *a3 = v6;
      }
    }
    else
    {
      APSLogErrorAt(0);
      v10 = 4294954510;
    }
    if (theArray)
      CFRelease(theArray);
  }
  else
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  return v10;
}

uint64_t APSAudioFormatDescriptionCreateAndAppendAudioFormatToArray(uint64_t a1, __CFArray *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *value;

  value = 0;
  if (a2)
  {
    v3 = APSAudioFormatDescriptionCreateWithAudioFormatIndex(*MEMORY[0x1E0C9AE00], a1, 0, &value);
    v4 = v3;
    if ((_DWORD)v3)
      APSLogErrorAt(v3);
    else
      CFArrayAppendValue(a2, value);
    if (value)
      CFRelease(value);
  }
  else
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  return v4;
}

uint64_t APSAudioFormatDescriptionListCreateWithAdvertisementArray(const __CFAllocator *a1, const __CFArray *a2, CFTypeRef *a3)
{
  CFMutableArrayRef Mutable;
  __CFArray *v7;
  CFIndex v8;
  CFIndex i;
  uint64_t UInt64;
  uint64_t appended;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef cf;

  cf = 0;
  if (a3)
  {
    Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v7 = Mutable;
      v8 = 0;
      if (!a2)
        goto LABEL_5;
LABEL_4:
      for (i = CFArrayGetCount(a2); v8 < i; i = 0)
      {
        CFArrayGetValueAtIndex(a2, v8);
        UInt64 = FigCFNumberGetUInt64();
        appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToArray(UInt64, v7);
        if ((_DWORD)appended == -6735)
        {
          if (gLogCategory_APSAudioFormatDescriptionUtils <= 50
            && (gLogCategory_APSAudioFormatDescriptionUtils != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
        else
        {
          v12 = appended;
          if ((_DWORD)appended)
          {
            APSLogErrorAt(appended);
            goto LABEL_18;
          }
        }
        ++v8;
        if (a2)
          goto LABEL_4;
LABEL_5:
        ;
      }
      v13 = APSAudioFormatDescriptionListCreateWithAudioFormatDescriptionArray(a1, v7, &cf);
      v12 = v13;
      if ((_DWORD)v13)
      {
        APSLogErrorAt(v13);
        if (cf)
          CFRelease(cf);
      }
      else
      {
        *a3 = cf;
        cf = 0;
      }
LABEL_18:
      CFRelease(v7);
    }
    else
    {
      APSLogErrorAt(0);
      return 4294954510;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  return v12;
}

uint64_t APSAudioFormatDescriptionListCreateWithLegacyAudioFormatMask(const __CFAllocator *a1, unint64_t a2, CFTypeRef *a3)
{
  CFMutableArrayRef Mutable;
  __CFArray *v7;
  uint64_t i;
  uint64_t appended;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef cf;

  cf = 0;
  if (a3)
  {
    Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v7 = Mutable;
      for (i = 0; i != 64; ++i)
      {
        if (((a2 >> i) & 1) != 0)
        {
          appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToArray(i, v7);
          if ((_DWORD)appended == -6735)
          {
            if (gLogCategory_APSAudioFormatDescriptionUtils <= 50
              && (gLogCategory_APSAudioFormatDescriptionUtils != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
          }
          else
          {
            v10 = appended;
            if ((_DWORD)appended)
            {
              APSLogErrorAt(appended);
              goto LABEL_16;
            }
          }
        }
      }
      v11 = APSAudioFormatDescriptionListCreateWithAudioFormatDescriptionArray(a1, v7, &cf);
      v10 = v11;
      if ((_DWORD)v11)
      {
        APSLogErrorAt(v11);
        if (cf)
          CFRelease(cf);
      }
      else
      {
        *a3 = cf;
        cf = 0;
      }
LABEL_16:
      CFRelease(v7);
    }
    else
    {
      APSLogErrorAt(0);
      return 4294954510;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  return v10;
}

uint64_t APSAudioFormatDescriptionListCopyRichestFormatAsFigEndpointStreamAudioFormatDescription(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t v6;
  CFTypeRef v8;
  CFTypeRef cf;

  v8 = 0;
  cf = 0;
  v5 = APSAudioFormatDescriptionListCopyRichestFormat(a2, &cf);
  if ((_DWORD)v5)
  {
    v6 = v5;
  }
  else
  {
    v5 = APSAudioFormatDescriptionCopyFigEndpointStreamAudioFormatDescription(a1, (uint64_t)cf, (uint64_t)&v8);
    v6 = v5;
    if (!(_DWORD)v5)
    {
      *a3 = v8;
      v8 = 0;
      goto LABEL_4;
    }
  }
  APSLogErrorAt(v5);
LABEL_4:
  if (cf)
    CFRelease(cf);
  if (v8)
    CFRelease(v8);
  return v6;
}

uint64_t APSAudioFormatDescriptionListCreateFigEndpointStreamAudioFormatDescriptionArray(const __CFAllocator *a1, uint64_t a2, __CFArray **a3)
{
  CFMutableArrayRef Mutable;
  __CFArray *v7;
  uint64_t v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  const void *ValueAtIndex;
  uint64_t v13;
  void *value;
  CFArrayRef theArray;

  value = 0;
  theArray = 0;
  if (a3)
  {
    Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v7 = Mutable;
      v8 = APSAudioFormatDescriptionListCopyAudioFormatDescriptionsArray(a2, (uint64_t *)&theArray);
      if ((_DWORD)v8)
      {
        v13 = v8;
      }
      else
      {
        if (!theArray || (Count = CFArrayGetCount(theArray), Count < 1))
        {
LABEL_11:
          v13 = 0;
          *a3 = v7;
          goto LABEL_12;
        }
        v10 = Count;
        v11 = 0;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, v11);
          v8 = APSAudioFormatDescriptionCopyFigEndpointStreamAudioFormatDescription((uint64_t)a1, (uint64_t)ValueAtIndex, (uint64_t)&value);
          if ((_DWORD)v8)
            break;
          CFArrayAppendValue(v7, value);
          if (value)
          {
            CFRelease(value);
            value = 0;
          }
          if (v10 == ++v11)
            goto LABEL_11;
        }
        v13 = v8;
      }
      APSLogErrorAt(v8);
      CFRelease(v7);
      if (value)
        CFRelease(value);
    }
    else
    {
      APSLogErrorAt(0);
      v13 = 4294954510;
    }
  }
  else
  {
    APSLogErrorAt(0);
    v13 = 4294954516;
  }
LABEL_12:
  if (theArray)
    CFRelease(theArray);
  return v13;
}

uint64_t APSAudioFormatDescriptionListCreateWithFigEndpointStreamAudioFormatDescriptionArray(const __CFAllocator *a1, const __CFArray *a2, CFTypeRef *a3)
{
  uint64_t v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  const void *ValueAtIndex;
  uint64_t v11;
  CFTypeRef v13;
  CFTypeRef cf;

  v13 = 0;
  cf = 0;
  if (a3)
  {
    v6 = APSAudioFormatDescriptionListCreate(a1, &v13);
    if ((_DWORD)v6)
    {
      v11 = v6;
    }
    else
    {
      if (!a2 || (Count = CFArrayGetCount(a2), Count < 1))
      {
LABEL_11:
        v11 = 0;
        *a3 = v13;
        v13 = 0;
        goto LABEL_12;
      }
      v8 = Count;
      v9 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a2, v9);
        v6 = APSAudioFormatDescriptionCreateWithFigEndpointStreamAudioFormatDescription(a1, (uint64_t)ValueAtIndex, &cf);
        if ((_DWORD)v6)
        {
          v11 = v6;
          goto LABEL_19;
        }
        v6 = APSAudioFormatDescriptionListAddFormat((uint64_t)v13, (uint64_t)cf);
        if ((_DWORD)v6)
          break;
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        if (v8 == ++v9)
          goto LABEL_11;
      }
      v11 = v6;
    }
LABEL_19:
    APSLogErrorAt(v6);
  }
  else
  {
    APSLogErrorAt(0);
    v11 = 4294954516;
  }
LABEL_12:
  if (cf)
    CFRelease(cf);
  if (v13)
    CFRelease(v13);
  return v11;
}

void APSAudioFormatDescriptionListCopyFilterFormatsForCurrentBufferedSenderWithEndpointStreamsInfo(const __CFAllocator *a1, const void *a2, int a3, int a4, int a5, CFTypeRef *a6)
{
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t appended;
  CFTypeRef v16;
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeRef cf;

  v19 = 0;
  cf = 0;
  v12 = IsAppleInternalBuild();
  if (!APSSettingsGetIntWithOverrideAndDefault(CFSTR("bufferedAPACSurround"), 0, v12))
  {
    v13 = APSSettingsIsFeatureEnabled(CFSTR("BufferedAPAC")) != 0;
    if (a6)
      goto LABEL_3;
LABEL_32:
    appended = 0;
LABEL_33:
    APSLogErrorAt(appended);
    goto LABEL_60;
  }
  v13 = 1;
  if (!a6)
    goto LABEL_32;
LABEL_3:
  v14 = MGGetProductType();
  if (!IsAppleTV() || v14 == 1110205732)
  {
    if (APSIsAPMSpeaker_sCheckOnce != -1)
      dispatch_once(&APSIsAPMSpeaker_sCheckOnce, &__block_literal_global_9);
    if (APSIsAPMSpeaker_sIsAPMSpeaker)
    {
      if (!a5)
      {
        appended = APSAudioFormatDescriptionListCreate(a1, &cf);
        if ((_DWORD)appended)
          goto LABEL_33;
        appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(22, (uint64_t)cf, 0);
        if ((_DWORD)appended)
          goto LABEL_33;
        appended = APSAudioFormatDescriptionListCreateIntersectionList((uint64_t)a2, (uint64_t)cf, &v19);
        if ((_DWORD)appended)
          goto LABEL_33;
        goto LABEL_59;
      }
      if (!FigGetCFPreferenceNumberWithDefault())
      {
        appended = APSAudioFormatDescriptionListCreate(a1, &cf);
        if ((_DWORD)appended)
          goto LABEL_33;
        appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(22, (uint64_t)cf, 0);
        if ((_DWORD)appended)
          goto LABEL_33;
        appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(23, (uint64_t)cf, 0);
        if ((_DWORD)appended)
          goto LABEL_33;
        appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(39, (uint64_t)cf, 0);
        if ((_DWORD)appended)
          goto LABEL_33;
        appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(40, (uint64_t)cf, 0);
        if ((_DWORD)appended)
          goto LABEL_33;
        appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(20, (uint64_t)cf, 0);
        if ((_DWORD)appended)
          goto LABEL_33;
        appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(86, (uint64_t)cf, 0);
        if ((_DWORD)appended)
          goto LABEL_33;
        appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(21, (uint64_t)cf, 0);
        if ((_DWORD)appended)
          goto LABEL_33;
        if (v13)
        {
          appended = APSAudioFormatDescriptionListAddSupportedFormatsForAPACToList((uint64_t)cf);
          if ((_DWORD)appended)
            goto LABEL_33;
        }
        v16 = cf;
        if (APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender_initOnce != -1)
          dispatch_once(&APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender_initOnce, &__block_literal_global_94);
        appended = APSAudioFormatDescriptionListAddSupportedFormatsForPassthrough((uint64_t)v16, 0, APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender_atmosAllowed);
        if ((_DWORD)appended)
          goto LABEL_33;
        appended = APSAudioFormatDescriptionListCreateIntersectionList((uint64_t)a2, (uint64_t)cf, &v19);
        if ((_DWORD)appended)
          goto LABEL_33;
        goto LABEL_59;
      }
    }
    else
    {
      if (APSIsIPhone_onceToken != -1)
        dispatch_once(&APSIsIPhone_onceToken, &__block_literal_global_18);
      if ((APSIsIPhone_sIsiPhone & 1) == 0 && APSIsIPad_onceToken != -1)
        dispatch_once(&APSIsIPad_onceToken, &__block_literal_global_19);
    }
LABEL_55:
    if (a2)
      v18 = CFRetain(a2);
    else
      v18 = 0;
    v19 = v18;
    goto LABEL_59;
  }
  if (a3 == 2)
    goto LABEL_55;
  if (!APSSettingsGetIntWithOverrideAndDefault(CFSTR("DisableATVWHASurround"), 0, 0))
  {
    if (a4)
    {
      appended = APSAudioFormatDescriptionListCreate(a1, &cf);
      if ((_DWORD)appended)
        goto LABEL_33;
      appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(22, (uint64_t)cf, 0);
      if ((_DWORD)appended)
        goto LABEL_33;
      appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(20, (uint64_t)cf, 0);
      if ((_DWORD)appended)
        goto LABEL_33;
      appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(86, (uint64_t)cf, 0);
      if ((_DWORD)appended)
        goto LABEL_33;
      appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(21, (uint64_t)cf, 0);
      if ((_DWORD)appended)
        goto LABEL_33;
      if (v13)
      {
        appended = APSAudioFormatDescriptionListAddSupportedFormatsForAPACToList((uint64_t)cf);
        if ((_DWORD)appended)
          goto LABEL_33;
      }
      v17 = cf;
      if (APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender_initOnce != -1)
        dispatch_once(&APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender_initOnce, &__block_literal_global_94);
      appended = APSAudioFormatDescriptionListAddSupportedFormatsForPassthrough((uint64_t)v17, 0, APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender_atmosAllowed);
      if ((_DWORD)appended)
        goto LABEL_33;
      APSAudioFormatDescriptionListCreateIntersectionList((uint64_t)a2, (uint64_t)cf, &v19);
      goto LABEL_59;
    }
    goto LABEL_55;
  }
  appended = APSAudioFormatDescriptionListCreate(a1, &cf);
  if ((_DWORD)appended)
    goto LABEL_33;
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(22, (uint64_t)cf, 0);
  if ((_DWORD)appended)
    goto LABEL_33;
  appended = APSAudioFormatDescriptionListCreateIntersectionList((uint64_t)a2, (uint64_t)cf, &v19);
  if ((_DWORD)appended)
    goto LABEL_33;
LABEL_59:
  *a6 = v19;
  v19 = 0;
LABEL_60:
  if (cf)
    CFRelease(cf);
  if (v19)
    CFRelease(v19);
}

uint64_t APSAudioFormatDescriptionListAddSupportedFormatsForAPACToList(uint64_t a1)
{
  uint64_t appended;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (APSSettingsGetIntWithOverrideAndDefault(CFSTR("bufferedAPACStereo"), 0, 0))
  {
    appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(64, a1, 0);
    if ((_DWORD)appended)
    {
      v3 = appended;
      goto LABEL_17;
    }
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(65, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
LABEL_17:
    APSLogErrorAt(appended);
    return v3;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(66, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_17;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(67, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_17;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(76, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_17;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(77, a1, 0);
  v3 = appended;
  if ((_DWORD)appended)
    goto LABEL_17;
  v4 = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(68, a1, 0);
  if ((_DWORD)v4)
  {
    v6 = v4;
    APSLogErrorAt(v4);
    return v6;
  }
  return v3;
}

uint64_t APSAudioFormatDescriptionListAddSupportedFormatsForPassthrough(uint64_t a1, int a2, int a3)
{
  BOOL v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  if (APSAudioFormatDescriptionListAddSupportedFormatsForPassthrough_initOnce != -1)
    dispatch_once(&APSAudioFormatDescriptionListAddSupportedFormatsForPassthrough_initOnce, &__block_literal_global_589);
  if (IsAppleTV())
  {
    if (!(APSAudioFormatDescriptionListAddSupportedFormatsForPassthrough_sPassthroughEnabled | a2))
      return 0;
  }
  else
  {
    if (APSIsAPMSpeaker_sCheckOnce != -1)
      dispatch_once(&APSIsAPMSpeaker_sCheckOnce, &__block_literal_global_9);
    if (APSIsAPMSpeaker_sIsAPMSpeaker)
      v6 = APSAudioFormatDescriptionListAddSupportedFormatsForPassthrough_sPassthroughEnabled == 0;
    else
      v6 = 1;
    v7 = !v6;
    if (!a2 && (v7 & 1) == 0)
      return 0;
  }
  v8 = APSAudioFormatDescriptionListAddSupportedFormatsForAACToList(a1);
  if ((_DWORD)v8)
  {
    v9 = v8;
LABEL_37:
    APSLogErrorAt(v8);
    return v9;
  }
  v8 = APSAudioFormatDescriptionListAddSupportedFormatsForALACToList(a1);
  if ((_DWORD)v8)
  {
    v9 = v8;
    goto LABEL_37;
  }
  if (a3)
  {
    if (APSAudioFormatDescriptionListAddSupportedFormatsForPassthrough_sPassthroughDDPAtmosEnabled)
    {
      v8 = APSAudioFormatDescriptionListAddSupportedDDPFormatsForPassthrough(a1);
      if ((_DWORD)v8)
      {
        v9 = v8;
        goto LABEL_37;
      }
    }
  }
  if (!APSAudioFormatDescriptionListAddSupportedFormatsForPassthrough_sPassthroughEncryptedEnabled)
    goto LABEL_27;
  v8 = APSAudioFormatDescriptionListAddSupportedEncryptedAACFormatsForPassthrough(a1);
  if ((_DWORD)v8)
  {
    v9 = v8;
    goto LABEL_37;
  }
  v8 = APSAudioFormatDescriptionListAddSupportedEncryptedALACFormatsForPassthrough(a1);
  if ((_DWORD)v8)
  {
    v9 = v8;
    goto LABEL_37;
  }
  if (a3)
  {
    if (APSAudioFormatDescriptionListAddSupportedFormatsForPassthrough_sPassthroughDDPAtmosEnabled)
    {
      v8 = APSAudioFormatDescriptionListAddSupportedEncryptedDDPFormatsForPassthrough(a1);
      if ((_DWORD)v8)
      {
        v9 = v8;
        goto LABEL_37;
      }
    }
  }
LABEL_27:
  v8 = APSAudioFormatDescriptionListAddSupportedMP3FormatsForPassthrough(a1);
  v9 = v8;
  if ((_DWORD)v8)
    goto LABEL_37;
  return v9;
}

uint64_t APSAudioFormatDescriptionListAddSupportedFormatsForAACToList(uint64_t a1)
{
  uint64_t appended;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!a1)
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(22, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_11;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(23, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_11;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(39, a1, 0);
  v3 = appended;
  if ((_DWORD)appended)
  {
LABEL_11:
    APSLogErrorAt(appended);
    return v3;
  }
  v4 = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(40, a1, 0);
  if ((_DWORD)v4)
  {
    v6 = v4;
    APSLogErrorAt(v4);
    return v6;
  }
  return v3;
}

uint64_t APSAudioFormatDescriptionListAddSupportedFormatsForALACToList(uint64_t a1)
{
  uint64_t appended;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!a1)
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  if (APSAudioFormatDescriptionIsBufferedLossless16bitSupported_initOnce != -1)
    dispatch_once(&APSAudioFormatDescriptionIsBufferedLossless16bitSupported_initOnce, &__block_literal_global_44);
  if (APSAudioFormatDescriptionIsBufferedLossless16bitSupported_lossless16bitSupported == 1)
  {
    appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(18, a1, 0);
    v3 = appended;
    if (!(_DWORD)appended)
    {
      v4 = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(20, a1, 0);
      if ((_DWORD)v4)
      {
        v5 = v4;
LABEL_20:
        APSLogErrorAt(v4);
        return v5;
      }
      return v3;
    }
LABEL_18:
    APSLogErrorAt(appended);
    return v3;
  }
  if (APSAudioFormatDescriptionIsBufferedLossless20bitSupported_initOnce != -1)
    dispatch_once(&APSAudioFormatDescriptionIsBufferedLossless20bitSupported_initOnce, &__block_literal_global_48);
  if (APSAudioFormatDescriptionIsBufferedLossless20bitSupported_lossless20bitSupported != 1)
  {
    appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(19, a1, 0);
    v3 = appended;
    if (!(_DWORD)appended)
    {
      v4 = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(21, a1, 0);
      if ((_DWORD)v4)
      {
        v5 = v4;
        goto LABEL_20;
      }
      return v3;
    }
    goto LABEL_18;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(85, a1, 0);
  v3 = appended;
  if ((_DWORD)appended)
    goto LABEL_18;
  v4 = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(86, a1, 0);
  if ((_DWORD)v4)
  {
    v5 = v4;
    goto LABEL_20;
  }
  return v3;
}

uint64_t APSAudioFormatDescriptionListAddSupportedDDPFormatsForPassthrough(uint64_t a1)
{
  uint64_t appended;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!a1)
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(49, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_13;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(50, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_13;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(51, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_13;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(52, a1, 0);
  v3 = appended;
  if ((_DWORD)appended)
  {
LABEL_13:
    APSLogErrorAt(appended);
    return v3;
  }
  v4 = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(53, a1, 0);
  if ((_DWORD)v4)
  {
    v6 = v4;
    APSLogErrorAt(v4);
    return v6;
  }
  return v3;
}

uint64_t APSAudioFormatDescriptionListAddSupportedEncryptedAACFormatsForPassthrough(uint64_t a1)
{
  uint64_t appended;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!a1)
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(70, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_21;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(54, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_21;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(55, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_21;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(56, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_21;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(71, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_21;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(72, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_21;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(57, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_21;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(58, a1, 0);
  v3 = appended;
  if ((_DWORD)appended)
  {
LABEL_21:
    APSLogErrorAt(appended);
    return v3;
  }
  v4 = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(60, a1, 0);
  if ((_DWORD)v4)
  {
    v6 = v4;
    APSLogErrorAt(v4);
    return v6;
  }
  return v3;
}

uint64_t APSAudioFormatDescriptionListAddSupportedEncryptedALACFormatsForPassthrough(uint64_t a1)
{
  uint64_t result;
  uint64_t appended;
  uint64_t v4;

  if (!a1)
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  if (APSAudioFormatDescriptionIsBufferedLossless16bitSupported_initOnce != -1)
    dispatch_once(&APSAudioFormatDescriptionIsBufferedLossless16bitSupported_initOnce, &__block_literal_global_44);
  if ((APSAudioFormatDescriptionIsBufferedLossless16bitSupported_lossless16bitSupported & 1) != 0)
    return 0;
  if (APSAudioFormatDescriptionIsBufferedLossless20bitSupported_initOnce != -1)
    dispatch_once(&APSAudioFormatDescriptionIsBufferedLossless20bitSupported_initOnce, &__block_literal_global_48);
  if ((APSAudioFormatDescriptionIsBufferedLossless20bitSupported_lossless20bitSupported & 1) != 0)
    return 0;
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(73, a1, 0);
  if ((_DWORD)appended)
  {
    v4 = appended;
LABEL_15:
    APSLogErrorAt(appended);
    return v4;
  }
  v4 = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(61, a1, 0);
  result = 0;
  if ((_DWORD)v4)
  {
    appended = v4;
    goto LABEL_15;
  }
  return result;
}

uint64_t APSAudioFormatDescriptionListAddSupportedEncryptedDDPFormatsForPassthrough(uint64_t a1)
{
  uint64_t appended;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!a1)
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(62, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_13;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(63, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_13;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(33, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_13;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(34, a1, 0);
  v3 = appended;
  if ((_DWORD)appended)
  {
LABEL_13:
    APSLogErrorAt(appended);
    return v3;
  }
  v4 = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(35, a1, 0);
  if ((_DWORD)v4)
  {
    v6 = v4;
    APSLogErrorAt(v4);
    return v6;
  }
  return v3;
}

uint64_t APSAudioFormatDescriptionListAddSupportedMP3FormatsForPassthrough(uint64_t a1)
{
  uint64_t appended;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (a1)
  {
    appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(74, a1, 0);
    v3 = appended;
    if ((_DWORD)appended)
    {
      APSLogErrorAt(appended);
    }
    else
    {
      v4 = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(75, a1, 0);
      if ((_DWORD)v4)
      {
        v6 = v4;
        APSLogErrorAt(v4);
        return v6;
      }
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  return v3;
}

uint64_t APSAudioFormatDescriptionListCopyTransportFormatDescriptionForSourceFormatDescription(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v6;
  _BOOL4 v7;
  _BOOL4 v8;
  int ChannelLayoutTag;
  uint64_t ASBD;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  CFTypeRef v16;
  uint64_t v17;
  uint64_t v18;
  CFTypeRef v20;
  CFTypeRef cf;

  v20 = 0;
  if (!a3)
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  cf = 0;
  v6 = IsAppleInternalBuild();
  if (APSSettingsGetIntWithOverrideAndDefault(CFSTR("bufferedAPACSurround"), 0, v6))
    v7 = 1;
  else
    v7 = APSSettingsIsFeatureEnabled(CFSTR("BufferedAPAC")) != 0;
  if (APSSettingsGetIntWithOverrideAndDefault(CFSTR("bufferedAPACStereo"), 0, 0))
    v8 = v7;
  else
    v8 = 0;
  if (a1)
  {
    ChannelLayoutTag = FigEndpointStreamAudioFormatDescriptionGetChannelLayoutTag();
    ASBD = FigEndpointStreamAudioFormatDescriptionGetASBD();
    if (gLogCategory_APSAudioFormatDescriptionUtils <= 50
      && (gLogCategory_APSAudioFormatDescriptionUtils != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    switch(*(_DWORD *)(ASBD + 28))
    {
      case 1:
      case 2:
        goto LABEL_14;
      case 6:
        v13 = *MEMORY[0x1E0C9AE00];
        goto LABEL_31;
      case 8:
        goto LABEL_109;
      case 0xA:
        if (v7)
          goto LABEL_40;
        goto LABEL_109;
      case 0xC:
      case 0x10:
        if (!v7)
          goto LABEL_109;
        v12 = APSAudioFormatDescriptionCreateWithAudioFormatIndex(*MEMORY[0x1E0C9AE00], 68, 0, &cf);
        if ((_DWORD)v12)
          goto LABEL_203;
        if (APSAudioFormatDescriptionListContainsFormat(a2, (uint64_t)cf))
          goto LABEL_177;
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        if (gLogCategory_APSAudioFormatDescriptionUtils <= 50
          && (gLogCategory_APSAudioFormatDescriptionUtils != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
LABEL_40:
        if (ChannelLayoutTag == 13238284 || ChannelLayoutTag == 12582924)
        {
          v14 = *MEMORY[0x1E0C9AE00];
          v12 = APSAudioFormatDescriptionCreateWithAudioFormatIndex(*MEMORY[0x1E0C9AE00], 77, 0, &cf);
          if ((_DWORD)v12)
            goto LABEL_203;
          if (APSAudioFormatDescriptionListContainsFormat(a2, (uint64_t)cf))
            goto LABEL_177;
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
          if (gLogCategory_APSAudioFormatDescriptionUtils <= 50
            && (gLogCategory_APSAudioFormatDescriptionUtils != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          v12 = APSAudioFormatDescriptionCreateWithAudioFormatIndex(v14, 76, 0, &cf);
          if ((_DWORD)v12)
            goto LABEL_203;
        }
        else
        {
          v13 = *MEMORY[0x1E0C9AE00];
          if (ChannelLayoutTag == 12845066)
          {
            v12 = APSAudioFormatDescriptionCreateWithAudioFormatIndex(*MEMORY[0x1E0C9AE00], 77, 0, &cf);
            if ((_DWORD)v12)
              goto LABEL_203;
            if (APSAudioFormatDescriptionListContainsFormat(a2, (uint64_t)cf))
              goto LABEL_177;
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
            if (gLogCategory_APSAudioFormatDescriptionUtils > 50
              || gLogCategory_APSAudioFormatDescriptionUtils == -1 && !_LogCategory_Initialize())
            {
              goto LABEL_114;
            }
            goto LABEL_107;
          }
          v12 = APSAudioFormatDescriptionCreateWithAudioFormatIndex(*MEMORY[0x1E0C9AE00], 76, 0, &cf);
          if ((_DWORD)v12)
            goto LABEL_203;
        }
        if (APSAudioFormatDescriptionListContainsFormat(a2, (uint64_t)cf))
          goto LABEL_177;
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        if (gLogCategory_APSAudioFormatDescriptionUtils > 50
          || gLogCategory_APSAudioFormatDescriptionUtils == -1 && !_LogCategory_Initialize())
        {
LABEL_109:
          if (ChannelLayoutTag == 13238284 || ChannelLayoutTag == 12582924)
          {
            v13 = *MEMORY[0x1E0C9AE00];
            goto LABEL_113;
          }
          v13 = *MEMORY[0x1E0C9AE00];
          if (ChannelLayoutTag == 12845066)
          {
LABEL_113:
            if (!v7)
            {
LABEL_149:
              v12 = APSAudioFormatDescriptionCreateWithAudioFormatIndex(v13, 40, 0, &cf);
              if ((_DWORD)v12)
                goto LABEL_203;
              if (APSAudioFormatDescriptionListContainsFormat(a2, (uint64_t)cf))
                goto LABEL_177;
              if (cf)
              {
                CFRelease(cf);
                cf = 0;
              }
              v12 = APSAudioFormatDescriptionCreateWithAudioFormatIndex(v13, 42, 0, &cf);
              if ((_DWORD)v12)
                goto LABEL_203;
              goto LABEL_154;
            }
LABEL_114:
            v12 = APSAudioFormatDescriptionCreateWithAudioFormatIndex(v13, 67, 0, &cf);
            if ((_DWORD)v12)
              goto LABEL_203;
            if (APSAudioFormatDescriptionListContainsFormat(a2, (uint64_t)cf))
              goto LABEL_177;
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
            if (gLogCategory_APSAudioFormatDescriptionUtils <= 50
              && (gLogCategory_APSAudioFormatDescriptionUtils != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            v12 = APSAudioFormatDescriptionCreateWithAudioFormatIndex(v13, 66, 0, &cf);
            if ((_DWORD)v12)
              goto LABEL_203;
            if (APSAudioFormatDescriptionListContainsFormat(a2, (uint64_t)cf))
              goto LABEL_177;
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
            if (gLogCategory_APSAudioFormatDescriptionUtils <= 50
              && (gLogCategory_APSAudioFormatDescriptionUtils != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            goto LABEL_149;
          }
          if (APAudioFormatIsAudioChannelLayoutTag7_1(ChannelLayoutTag))
            v15 = v7;
          else
            v15 = 0;
          if (v15)
          {
            v12 = APSAudioFormatDescriptionCreateWithAudioFormatIndex(v13, 67, 0, &cf);
            if ((_DWORD)v12)
              goto LABEL_203;
            if (APSAudioFormatDescriptionListContainsFormat(a2, (uint64_t)cf))
              goto LABEL_177;
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
            if (gLogCategory_APSAudioFormatDescriptionUtils <= 50
              && (gLogCategory_APSAudioFormatDescriptionUtils != -1 || _LogCategory_Initialize()))
            {
              goto LABEL_159;
            }
            goto LABEL_31;
          }
          if (v7)
          {
            v12 = APSAudioFormatDescriptionCreateWithAudioFormatIndex(v13, 66, 0, &cf);
            if ((_DWORD)v12)
              goto LABEL_203;
            if (APSAudioFormatDescriptionListContainsFormat(a2, (uint64_t)cf))
              goto LABEL_177;
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
            if (gLogCategory_APSAudioFormatDescriptionUtils <= 50
              && (gLogCategory_APSAudioFormatDescriptionUtils != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
          }
          v12 = APSAudioFormatDescriptionCreateWithAudioFormatIndex(v13, 40, 0, &cf);
          if ((_DWORD)v12)
            goto LABEL_203;
          if (APSAudioFormatDescriptionListContainsFormat(a2, (uint64_t)cf))
            goto LABEL_177;
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
          v12 = APSAudioFormatDescriptionCreateWithAudioFormatIndex(v13, 42, 0, &cf);
          if ((_DWORD)v12)
            goto LABEL_203;
LABEL_154:
          if (APSAudioFormatDescriptionListContainsFormat(a2, (uint64_t)cf))
            goto LABEL_177;
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
          if (gLogCategory_APSAudioFormatDescriptionUtils <= 50
            && (gLogCategory_APSAudioFormatDescriptionUtils != -1 || _LogCategory_Initialize()))
          {
LABEL_159:
            LogPrintF();
          }
LABEL_31:
          if (v7)
          {
            v12 = APSAudioFormatDescriptionCreateWithAudioFormatIndex(v13, 65, 0, &cf);
            if ((_DWORD)v12)
              goto LABEL_203;
            if (APSAudioFormatDescriptionListContainsFormat(a2, (uint64_t)cf))
              goto LABEL_177;
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
            if (gLogCategory_APSAudioFormatDescriptionUtils <= 50
              && (gLogCategory_APSAudioFormatDescriptionUtils != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
          }
          v12 = APSAudioFormatDescriptionCreateWithAudioFormatIndex(v13, 39, 0, &cf);
          if ((_DWORD)v12)
            goto LABEL_203;
          if (!APSAudioFormatDescriptionListContainsFormat(a2, (uint64_t)cf))
          {
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
            v12 = APSAudioFormatDescriptionCreateWithAudioFormatIndex(v13, 41, 0, &cf);
            if ((_DWORD)v12)
              goto LABEL_203;
            if (APSAudioFormatDescriptionListContainsFormat(a2, (uint64_t)cf))
              goto LABEL_177;
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
            if (gLogCategory_APSAudioFormatDescriptionUtils <= 50
              && (gLogCategory_APSAudioFormatDescriptionUtils != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
LABEL_14:
            v11 = *MEMORY[0x1E0C9AE00];
            if (v8)
            {
              v12 = APSAudioFormatDescriptionCreateWithAudioFormatIndex(*MEMORY[0x1E0C9AE00], 64, 0, &cf);
              if ((_DWORD)v12)
                goto LABEL_203;
              if (APSAudioFormatDescriptionListContainsFormat(a2, (uint64_t)cf))
                goto LABEL_177;
              if (cf)
              {
                CFRelease(cf);
                cf = 0;
              }
              if (gLogCategory_APSAudioFormatDescriptionUtils <= 50
                && (gLogCategory_APSAudioFormatDescriptionUtils != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
            }
            v12 = APSAudioFormatDescriptionCreateWithAudioFormatIndex(v11, 20, 0, &cf);
            if ((_DWORD)v12)
              goto LABEL_203;
            if (!APSAudioFormatDescriptionListContainsFormat(a2, (uint64_t)cf)
              || !audioFormatDescriptionUtils_contentFormatDescriptionWarrantsLosslessTransport())
            {
              if (cf)
              {
                CFRelease(cf);
                cf = 0;
              }
              v12 = APSAudioFormatDescriptionCreateWithAudioFormatIndex(v11, 86, 0, &cf);
              if (!(_DWORD)v12)
              {
                if (APSAudioFormatDescriptionListContainsFormat(a2, (uint64_t)cf)
                  && audioFormatDescriptionUtils_contentFormatDescriptionWarrantsLosslessTransport())
                {
                  goto LABEL_177;
                }
                if (cf)
                {
                  CFRelease(cf);
                  cf = 0;
                }
                v12 = APSAudioFormatDescriptionCreateWithAudioFormatIndex(v11, 21, 0, &cf);
                if (!(_DWORD)v12)
                {
                  if (APSAudioFormatDescriptionListContainsFormat(a2, (uint64_t)cf)
                    && audioFormatDescriptionUtils_contentFormatDescriptionWarrantsLosslessTransport())
                  {
                    goto LABEL_177;
                  }
                  if (cf)
                  {
                    CFRelease(cf);
                    cf = 0;
                  }
                  v12 = APSAudioFormatDescriptionCreateWithAudioFormatIndex(v11, 23, 0, &cf);
                  if (!(_DWORD)v12)
                  {
                    if (APSAudioFormatDescriptionListContainsFormat(a2, (uint64_t)cf))
                      goto LABEL_177;
                    if (cf)
                    {
                      CFRelease(cf);
                      cf = 0;
                    }
                    v12 = APSAudioFormatDescriptionCreateWithAudioFormatIndex(v11, 22, 0, &cf);
                    if (!(_DWORD)v12)
                    {
                      if (!APSAudioFormatDescriptionListContainsFormat(a2, (uint64_t)cf))
                      {
                        if (cf)
                        {
                          CFRelease(cf);
                          cf = 0;
                        }
                        if (gLogCategory_APSAudioFormatDescriptionUtils <= 50)
                        {
                          if (gLogCategory_APSAudioFormatDescriptionUtils != -1
                            || _LogCategory_Initialize())
                          {
                            LogPrintF();
                          }
LABEL_169:
                          if (gLogCategory_APSAudioFormatDescriptionUtils <= 50
                            && (gLogCategory_APSAudioFormatDescriptionUtils != -1
                             || _LogCategory_Initialize()))
                          {
                            LogPrintF();
                          }
                        }
                      }
                      goto LABEL_177;
                    }
                  }
                }
              }
              goto LABEL_203;
            }
          }
          goto LABEL_177;
        }
LABEL_107:
        LogPrintF();
        goto LABEL_109;
      default:
        goto LABEL_169;
    }
  }
  v12 = 0;
LABEL_203:
  APSLogErrorAt(v12);
LABEL_177:
  v16 = cf;
  if (cf)
  {
    v17 = APSAudioFormatDescriptionCopyFigEndpointStreamAudioFormatDescription(*MEMORY[0x1E0C9AE00], (uint64_t)cf, (uint64_t)&v20);
    v18 = v17;
    if ((_DWORD)v17)
    {
      APSLogErrorAt(v17);
    }
    else
    {
      cf = 0;
      APSAudioFormatDescriptionCopyDebugString((uint64_t)v16, (CFStringRef *)&cf);
      if (gLogCategory_APSAudioFormatDescriptionUtils <= 50
        && (gLogCategory_APSAudioFormatDescriptionUtils != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (cf)
        CFRelease(cf);
      *a3 = v20;
      v20 = 0;
    }
    CFRelease(v16);
  }
  else
  {
    cf = 0;
    APSAudioFormatDescriptionListCopyDebugString(a2, &cf);
    if (gLogCategory_APSAudioFormatDescriptionUtils <= 90
      && (gLogCategory_APSAudioFormatDescriptionUtils != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (cf)
      CFRelease(cf);
    v18 = 4294960561;
  }
  if (v20)
    CFRelease(v20);
  return v18;
}

uint64_t audioFormatDescriptionUtils_contentFormatDescriptionWarrantsLosslessTransport()
{
  uint64_t ASBD;
  int v1;
  uint64_t result;
  BOOL v3;
  int v4;
  BOOL v5;

  ASBD = FigEndpointStreamAudioFormatDescriptionGetASBD();
  v1 = *(_DWORD *)(ASBD + 8);
  result = 1;
  if (v1 > 1902928226)
  {
    v3 = v1 == 1902928227;
    v4 = 2053923171;
  }
  else
  {
    v3 = v1 == 1634492771;
    v4 = 1668047203;
  }
  v5 = v3 || v1 == v4;
  if (!v5 && *(double *)ASBD <= 48000.0)
    return 0;
  return result;
}

uint64_t APSAudioFormatDescriptionListGetForBufferedSender()
{
  if (APSAudioFormatDescriptionListGetForBufferedSender_sOnce != -1)
    dispatch_once_f(&APSAudioFormatDescriptionListGetForBufferedSender_sOnce, &APSAudioFormatDescriptionListGetForBufferedSender_sList, (dispatch_function_t)audioFormatDescriptionUtils_CreateAudioFormatDescriptionListForBufferedSender);
  return APSAudioFormatDescriptionListGetForBufferedSender_sList;
}

uint64_t audioFormatDescriptionUtils_CreateAudioFormatDescriptionListForBufferedSender(_QWORD *a1)
{
  uint64_t v2;
  _BOOL4 v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  v2 = IsAppleInternalBuild();
  if (APSSettingsGetIntWithOverrideAndDefault(CFSTR("bufferedAPACSurround"), 0, v2))
    v3 = 1;
  else
    v3 = APSSettingsIsFeatureEnabled(CFSTR("BufferedAPAC")) != 0;
  result = APSAudioFormatDescriptionListCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], &v6);
  if ((_DWORD)result)
    goto LABEL_31;
  result = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(22, v6, 1);
  if ((_DWORD)result)
    goto LABEL_31;
  result = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(23, v6, 0);
  if ((_DWORD)result)
    goto LABEL_31;
  if (APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender_initOnce != -1)
    dispatch_once(&APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender_initOnce, &__block_literal_global_94);
  if (APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender_atmosAllowed == 1)
  {
    result = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(39, v6, 0);
    if ((_DWORD)result)
      goto LABEL_31;
    result = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(40, v6, 0);
    if ((_DWORD)result)
      goto LABEL_31;
  }
  if (APSAudioFormatDescriptionIsBufferedLosslessAllowed_initOnce != -1)
    dispatch_once(&APSAudioFormatDescriptionIsBufferedLosslessAllowed_initOnce, &__block_literal_global_40);
  if (APSAudioFormatDescriptionIsBufferedLosslessAllowed_losslessAllowed == 1)
  {
    result = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(21, v6, 1);
    if ((_DWORD)result)
      goto LABEL_31;
    if (APSAudioFormatDescriptionIsBufferedLossless16bitSupported_initOnce != -1)
      dispatch_once(&APSAudioFormatDescriptionIsBufferedLossless16bitSupported_initOnce, &__block_literal_global_44);
    if (APSAudioFormatDescriptionIsBufferedLossless16bitSupported_lossless16bitSupported == 1)
    {
      result = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(20, v6, 1);
      if ((_DWORD)result)
        goto LABEL_31;
    }
    if (APSAudioFormatDescriptionIsBufferedLossless20bitSupported_initOnce != -1)
      dispatch_once(&APSAudioFormatDescriptionIsBufferedLossless20bitSupported_initOnce, &__block_literal_global_48);
    if (APSAudioFormatDescriptionIsBufferedLossless20bitSupported_lossless20bitSupported == 1)
    {
      result = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(86, v6, 1);
      if ((_DWORD)result)
        goto LABEL_31;
    }
  }
  if (v3 && APAudioFormatAPACIsAllowedForCurrentDeviceAsSender())
  {
    result = APSAudioFormatDescriptionListAddSupportedFormatsForAPACToList(v6);
    if ((_DWORD)result)
      goto LABEL_31;
  }
  v5 = v6;
  if (APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender_initOnce != -1)
    dispatch_once(&APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender_initOnce, &__block_literal_global_94);
  result = APSAudioFormatDescriptionListAddSupportedFormatsForPassthrough(v5, 0, APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender_atmosAllowed);
  if ((_DWORD)result)
LABEL_31:
    result = APSLogErrorAt(result);
  *a1 = v6;
  return result;
}

uint64_t APSAudioFormatDescriptionListCreateForBufferedReceiverWithAudioCapabilities(const __CFArray *a1, uint64_t a2, char *a3)
{
  int IsFeatureEnabled;
  uint64_t appended;
  uint64_t v7;
  CFIndex v8;
  char v9;
  CFIndex i;
  int UInt32;
  uint64_t v13;

  v13 = 0;
  IsFeatureEnabled = APSSettingsIsFeatureEnabled(CFSTR("BufferedAPAC"));
  appended = APSAudioFormatDescriptionListCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], &v13);
  if ((_DWORD)appended)
    goto LABEL_48;
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(22, v13, 0);
  if ((_DWORD)appended)
    goto LABEL_48;
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(23, v13, 1);
  if ((_DWORD)appended)
    goto LABEL_48;
  if (APSAudioFormatDescriptionIsBufferedLossless16bitSupported_initOnce != -1)
    dispatch_once(&APSAudioFormatDescriptionIsBufferedLossless16bitSupported_initOnce, &__block_literal_global_44);
  if (APSAudioFormatDescriptionIsBufferedLossless16bitSupported_lossless16bitSupported == 1)
  {
    appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(20, v13, 0);
    if ((_DWORD)appended)
      goto LABEL_48;
  }
  if (APSAudioFormatDescriptionIsBufferedLossless20bitSupported_initOnce != -1)
    dispatch_once(&APSAudioFormatDescriptionIsBufferedLossless20bitSupported_initOnce, &__block_literal_global_48);
  if (APSAudioFormatDescriptionIsBufferedLossless20bitSupported_lossless20bitSupported == 1)
  {
    appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(86, v13, 0);
    if ((_DWORD)appended)
      goto LABEL_48;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(21, v13, 0);
  if ((_DWORD)appended)
    goto LABEL_48;
  if (APAudioFormatAtmosIsAllowedForCurrentDeviceAsReceiver_initOnce != -1)
    dispatch_once(&APAudioFormatAtmosIsAllowedForCurrentDeviceAsReceiver_initOnce, &__block_literal_global_98);
  v7 = v13;
  if (APAudioFormatAtmosIsAllowedForCurrentDeviceAsReceiver_atmosAllowed == 1)
  {
    appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(39, v13, 0);
    if ((_DWORD)appended)
      goto LABEL_48;
    appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(40, v13, 0);
    if ((_DWORD)appended)
      goto LABEL_48;
    v7 = v13;
    if (APAudioFormatAtmosIsAllowedForCurrentDeviceAsReceiver_initOnce != -1)
      dispatch_once(&APAudioFormatAtmosIsAllowedForCurrentDeviceAsReceiver_initOnce, &__block_literal_global_98);
  }
  appended = APSAudioFormatDescriptionListAddSupportedFormatsForPassthrough(v7, 0, APAudioFormatAtmosIsAllowedForCurrentDeviceAsReceiver_atmosAllowed);
  if ((_DWORD)appended)
  {
LABEL_48:
    APSLogErrorAt(appended);
    return v13;
  }
  if (IsFeatureEnabled)
  {
    if (APAudioFormatAtmosIsAllowedForCurrentDeviceAsReceiver_initOnce != -1)
      dispatch_once(&APAudioFormatAtmosIsAllowedForCurrentDeviceAsReceiver_initOnce, &__block_literal_global_98);
    if (APAudioFormatAtmosIsAllowedForCurrentDeviceAsReceiver_atmosAllowed == 1)
    {
      appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(65, v13, 0);
      if (!(_DWORD)appended)
      {
        appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(66, v13, 0);
        if (!(_DWORD)appended)
        {
          v8 = 0;
          v9 = 0;
          if (!a1)
            goto LABEL_29;
LABEL_28:
          for (i = CFArrayGetCount(a1); v8 < i; i = 0)
          {
            CFArrayGetValueAtIndex(a1, v8);
            UInt32 = FigCFNumberGetUInt32();
            if (UInt32 == 1819304813)
            {
              if (FigCFNumberGetUInt32() >= 8)
              {
                appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(67, v13, 0);
                if ((_DWORD)appended)
                  goto LABEL_48;
              }
              if (FigCFNumberGetUInt32() >= 6)
              {
                appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(65, v13, 0);
                if ((_DWORD)appended)
                  goto LABEL_48;
              }
            }
            else if (UInt32 == 1836343851)
            {
              appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(76, v13, 0);
              if ((_DWORD)appended)
                goto LABEL_48;
              appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(67, v13, 0);
              if ((_DWORD)appended)
                goto LABEL_48;
              appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(77, v13, 0);
              if ((_DWORD)appended)
                goto LABEL_48;
              appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(68, v13, 0);
              if ((_DWORD)appended)
                goto LABEL_48;
              v9 = 1;
            }
            ++v8;
            if (a1)
              goto LABEL_28;
LABEL_29:
            ;
          }
          goto LABEL_45;
        }
      }
      goto LABEL_48;
    }
  }
  v9 = 0;
LABEL_45:
  if (a3)
    *a3 = v9;
  return v13;
}

CFTypeRef APSAudioFormatDescriptionListCreateForBufferedLocalReceiverEchoCancellationReference()
{
  uint64_t v0;
  const void *v1;
  uint64_t v2;
  CFTypeRef cf;
  CFTypeRef v5;

  cf = 0;
  v5 = 0;
  v0 = APSAudioFormatDescriptionListCreateForBufferedReceiverWithAudioCapabilities(0, 0, 0);
  if (v0)
  {
    v1 = (const void *)v0;
    v2 = APSAudioFormatDescriptionListCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], &cf);
    if ((_DWORD)v2
      || (v2 = APSAudioFormatDescriptionListAddStereoFormatsToList((uint64_t)cf), (_DWORD)v2)
      || (v2 = APSAudioFormatDescriptionListAdd6ChannelsFormatsToList((uint64_t)cf), (_DWORD)v2)
      || (v2 = APSAudioFormatDescriptionListAdd8ChannelsFormatsToList((uint64_t)cf), (_DWORD)v2))
    {
      APSLogErrorAt(v2);
    }
    else
    {
      APSAudioFormatDescriptionListCreateIntersectionList((uint64_t)v1, (uint64_t)cf, &v5);
    }
    if (cf)
      CFRelease(cf);
    CFRelease(v1);
    return v5;
  }
  else
  {
    APSLogErrorAt(0);
    return 0;
  }
}

uint64_t APSAudioFormatDescriptionListAddStereoFormatsToList(uint64_t a1)
{
  uint64_t appended;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!a1)
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(3, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_61;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(5, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_61;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(7, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_61;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(9, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_61;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(11, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_61;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(13, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_61;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(15, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_61;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(17, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_61;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(46, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_61;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(18, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_61;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(19, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_61;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(20, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_61;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(86, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_61;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(21, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_61;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(22, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_61;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(23, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_61;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(24, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_61;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(25, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_61;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(49, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_61;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(70, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_61;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(54, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_61;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(71, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_61;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(72, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_61;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(57, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_61;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(73, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_61;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(61, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_61;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(62, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_61;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(74, a1, 0);
  v3 = appended;
  if ((_DWORD)appended)
  {
LABEL_61:
    APSLogErrorAt(appended);
    return v3;
  }
  v4 = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(75, a1, 0);
  if ((_DWORD)v4)
  {
    v6 = v4;
    APSLogErrorAt(v4);
    return v6;
  }
  return v3;
}

uint64_t APSAudioFormatDescriptionListAdd6ChannelsFormatsToList(uint64_t a1)
{
  uint64_t appended;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!a1)
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(44, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_19;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(47, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_19;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(41, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_19;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(39, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_19;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(50, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_19;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(55, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_19;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(58, a1, 0);
  v3 = appended;
  if ((_DWORD)appended)
  {
LABEL_19:
    APSLogErrorAt(appended);
    return v3;
  }
  v4 = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(63, a1, 0);
  if ((_DWORD)v4)
  {
    v6 = v4;
    APSLogErrorAt(v4);
    return v6;
  }
  return v3;
}

uint64_t APSAudioFormatDescriptionListAdd8ChannelsFormatsToList(uint64_t a1)
{
  uint64_t appended;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!a1)
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(38, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_19;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(48, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_19;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(40, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_19;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(42, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_19;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(51, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_19;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(56, a1, 0);
  if ((_DWORD)appended)
  {
    v3 = appended;
    goto LABEL_19;
  }
  appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(60, a1, 0);
  v3 = appended;
  if ((_DWORD)appended)
  {
LABEL_19:
    APSLogErrorAt(appended);
    return v3;
  }
  v4 = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(33, a1, 0);
  if ((_DWORD)v4)
  {
    v6 = v4;
    APSLogErrorAt(v4);
    return v6;
  }
  return v3;
}

uint64_t APSAudioFormatDescriptionListCreateForRealTimeSender(int a1)
{
  uint64_t appended;
  uint64_t v4;

  v4 = 0;
  appended = APSAudioFormatDescriptionListCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], &v4);
  if ((_DWORD)appended
    || a1
    && ((appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(22, v4, 0), (_DWORD)appended)
     || (appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(24, v4, 0), (_DWORD)appended))
    || (appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(18, v4, 1), (_DWORD)appended)
    || (appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(11, v4, 0), (_DWORD)appended))
  {
    APSLogErrorAt(appended);
  }
  return v4;
}

uint64_t APSAudioFormatDescriptionListCreateForRealTimeReceiver()
{
  uint64_t appended;
  uint64_t v2;

  v2 = 0;
  appended = APSAudioFormatDescriptionListCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], &v2);
  if ((_DWORD)appended
    || (appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(22, v2, 0), (_DWORD)appended)
    || (appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(24, v2, 0), (_DWORD)appended)
    || (appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(18, v2, 1), (_DWORD)appended)
    || (appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(11, v2, 0), (_DWORD)appended))
  {
    APSLogErrorAt(appended);
  }
  return v2;
}

uint64_t APSAudioFormatDescriptionListCreateForRealTimeLocalReceiver()
{
  uint64_t appended;
  uint64_t v2;

  v2 = 0;
  appended = APSAudioFormatDescriptionListCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], &v2);
  if ((_DWORD)appended
    || (appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(22, v2, 0), (_DWORD)appended)
    || (appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(24, v2, 0), (_DWORD)appended)
    || (appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(18, v2, 1), (_DWORD)appended)
    || (appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(11, v2, 0), (_DWORD)appended))
  {
    APSLogErrorAt(appended);
  }
  return v2;
}

uint64_t APSAudioFormatDescriptionListCreateForLowLatencySender()
{
  uint64_t appended;
  _BOOL8 v1;
  uint64_t v3;

  v3 = 0;
  appended = APSAudioFormatDescriptionListCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], &v3);
  if ((_DWORD)appended
    || (appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(25, v3, 1), (_DWORD)appended)
    || (v1 = (APSGetPersistentGroupModel() & 0xFFFFFFFD) == 0,
        APSSettingsGetIntWithOverrideAndDefault(CFSTR("lowLatencyAudioSurroundSender"), 0, v1))
    && (appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(42, v3, 0), (_DWORD)appended))
  {
    APSLogErrorAt(appended);
  }
  return v3;
}

uint64_t APSAudioFormatDescriptionListCreateForLowLatencyReceiver()
{
  uint64_t appended;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  appended = APSAudioFormatDescriptionListCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], &v4);
  if ((_DWORD)appended
    || (appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(25, v4, 1), (_DWORD)appended)
    || ((v1 = MGGetProductType(), v1 != 1540760353) && v1 != 4240173202 && v1 != 2702125347
      ? (v2 = 0)
      : (v2 = 1),
        APSSettingsGetIntWithOverrideAndDefault(CFSTR("lowLatencyAudioSurroundReceiver"), 0, v2)
     && (appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(42, v4, 0), (_DWORD)appended)))
  {
    APSLogErrorAt(appended);
  }
  return v4;
}

uint64_t APSAudioFormatDescriptionListCreateForScreenReceiver()
{
  uint64_t appended;
  uint64_t v2;

  v2 = 0;
  appended = APSAudioFormatDescriptionListCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], &v2);
  if ((_DWORD)appended
    || (appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(22, v2, 1), (_DWORD)appended)
    || (appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(24, v2, 0), (_DWORD)appended)
    || (appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(18, v2, 0), (_DWORD)appended)
    || (appended = APSAudioFormatDescriptionCreateAndAppendAudioFormatToList(11, v2, 0), (_DWORD)appended))
  {
    APSLogErrorAt(appended);
  }
  return v2;
}

uint64_t APSAudioFormatDescriptionListAddSupportedTranscodeFormats(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (!a1)
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  v2 = APSAudioFormatDescriptionListAddSupportedFormatsForAACToList(a1);
  if ((_DWORD)v2)
  {
    v3 = v2;
    goto LABEL_9;
  }
  v2 = APSAudioFormatDescriptionListAddSupportedFormatsForALACToList(a1);
  if ((_DWORD)v2)
  {
    v3 = v2;
    goto LABEL_9;
  }
  v2 = APSAudioFormatDescriptionListAddSupportedFormatsForAPACToList(a1);
  v3 = v2;
  if ((_DWORD)v2)
LABEL_9:
    APSLogErrorAt(v2);
  return v3;
}

uint64_t APSAudioFormatDescriptionListCreateFilteredListWithTranscodeFormats(uint64_t a1, CFTypeRef *a2)
{
  const __CFAllocator *v4;
  uint64_t v5;
  uint64_t v6;
  CFTypeRef cf;
  CFTypeRef v9;

  cf = 0;
  v9 = 0;
  if (!a2)
  {
    APSLogErrorAt(0);
    v6 = 4294954516;
    goto LABEL_11;
  }
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (!a1)
  {
    v5 = APSAudioFormatDescriptionListCreate(v4, &v9);
    if ((_DWORD)v5)
    {
      v6 = v5;
      goto LABEL_18;
    }
    goto LABEL_8;
  }
  v5 = APSAudioFormatDescriptionListCreate(v4, &cf);
  if ((_DWORD)v5)
  {
    v6 = v5;
    goto LABEL_18;
  }
  v5 = APSAudioFormatDescriptionListAddSupportedTranscodeFormats((uint64_t)cf);
  if ((_DWORD)v5)
  {
    v6 = v5;
    goto LABEL_18;
  }
  v5 = APSAudioFormatDescriptionListCreateIntersectionList(a1, (uint64_t)cf, &v9);
  if (!(_DWORD)v5)
  {
LABEL_8:
    v6 = 0;
    *a2 = v9;
    v9 = 0;
    goto LABEL_9;
  }
  v6 = v5;
LABEL_18:
  APSLogErrorAt(v5);
LABEL_9:
  if (cf)
    CFRelease(cf);
LABEL_11:
  if (v9)
    CFRelease(v9);
  return v6;
}

uint64_t APSEndpointStreamAudioHoseSBARCreate(uint64_t a1, const __CFString *a2, const void *a3, const void *a4, const void *a5, int a6, const void *a7, int a8, const __CFDictionary *a9, _QWORD *a10)
{
  uint64_t v17;
  uint64_t DerivedStorage;
  dispatch_queue_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const __CFAllocator **v23;
  int v24;
  const void *Value;
  const void *v26;
  const void *v27;
  CFTypeRef v28;
  const void *v29;
  const void *v30;
  CFTypeRef v31;
  const __CFDictionary *v32;
  uint64_t v33;
  CMTime *v34;
  uint64_t ASBDArray;
  unint64_t Length;
  unint64_t v37;
  __int128 *BytePtr;
  double v39;
  double v40;
  double v41;
  int AudioBytesPerSec;
  int v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  CMTimeEpoch epoch;
  int CFPreferenceNumberWithDefault;
  int v53;
  BOOL v54;
  uint64_t v55;
  NSObject *v56;
  CFTypeRef *v57;
  CMTimeValue *v58;
  uint64_t v59;
  const __CFAllocator *v60;
  __CFDictionary *Mutable;
  uint64_t RemoteWithOptions;
  uint64_t v63;
  const __CFString *v64;
  CMTimeValue v65;
  void (*v66)(CMTimeValue, _QWORD, _QWORD);
  uint64_t v67;
  void (*v68)(uint64_t, _QWORD, _QWORD);
  CFTypeRef v69;
  uint64_t (*v70)(CFTypeRef, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  void *v75;
  uint64_t v76;
  CFTypeRef v77;
  CMTimeValue v78;
  uint64_t (*v79)(CFTypeRef, CMTimeValue);
  uint64_t v80;
  NSObject *v81;
  dispatch_queue_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  const CMBufferCallbacks *v91;
  char v92;
  _OWORD *v93;
  char v94;
  unsigned int v95;
  CMTimeEpoch v96;
  uint64_t v97;
  CMTimeValue v98;
  uint64_t (*v99)(CMTimeValue, _QWORD, uint64_t);
  uint64_t v100;
  CFMutableBagRef v101;
  CFMutableDictionaryRef v102;
  CFMutableDictionaryRef v103;
  CFMutableDictionaryRef v104;
  CFMutableDictionaryRef v105;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  CFTypeRef cf1;
  const __CFString *v114;
  __int128 v115;
  CMTime v116;
  CMTime theData;
  CMTime time;
  void *v119;
  uint64_t v120;
  CMTimeValue v121;
  BOOL v122;
  CFTypeRef cf;
  CFTypeRef v124;
  char label[64];
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  if (!a4)
  {
    v33 = 4294894965;
    APSLogErrorAt(0);
    return v33;
  }
  if (!a5)
  {
    v33 = 4294894965;
    v17 = 0;
    goto LABEL_167;
  }
  if (!a3)
  {
    v33 = 4294894965;
    v17 = 0;
    goto LABEL_167;
  }
  if (a8 <= 0)
  {
    v33 = 4294894965;
    v17 = 0;
    goto LABEL_167;
  }
  if (!a10)
  {
    v33 = 4294894965;
    v17 = 0;
    goto LABEL_167;
  }
  if (hoseSBAR_getClassID_sRegisterOnce != -1)
    dispatch_once_f(&hoseSBAR_getClassID_sRegisterOnce, &hoseSBAR_getClassID_sClassID, (dispatch_function_t)hoseSBAR_registerBaseClass);
  v17 = CMDerivedObjectCreate();
  if ((_DWORD)v17)
  {
    v33 = v17;
    goto LABEL_167;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  SNPrintF();
  v19 = dispatch_queue_create(label, 0);
  *(_QWORD *)(DerivedStorage + 8) = v19;
  if (!v19)
    goto LABEL_199;
  SNPrintF();
  v20 = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(DerivedStorage + 280) = v20;
  if (!v20)
    goto LABEL_199;
  SNPrintF();
  v21 = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(DerivedStorage + 288) = v21;
  if (!v21)
    goto LABEL_199;
  *(_QWORD *)(DerivedStorage + 248) = FigSimpleMutexCreate();
  *(_DWORD *)(DerivedStorage + 268) = 36;
  *(_QWORD *)(DerivedStorage + 16) = a2;
  if (a2)
    CFRetain(a2);
  *(_QWORD *)(DerivedStorage + 32) = a3;
  CFRetain(a3);
  *(_QWORD *)(DerivedStorage + 64) = a4;
  CFRetain(a4);
  *(_QWORD *)(DerivedStorage + 72) = a7;
  if (a7)
    CFRetain(a7);
  *(_BYTE *)(DerivedStorage + 240) = FigGetCFPreferenceNumberWithDefault();
  *(_BYTE *)(DerivedStorage + 242) = FigGetCFPreferenceNumberWithDefault();
  *(_BYTE *)(DerivedStorage + 243) = FigGetCFPreferenceNumberWithDefault();
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)(DerivedStorage + 242))
    v22 = 1;
  else
    v22 = in_audio_mx_server_process() ^ 1;
  *(_BYTE *)(DerivedStorage + 128) = APSSettingsGetIntWithOverrideAndDefault(CFSTR("isHoseSBARSynchronizerTimeMediaTime"), 0, v22) != 0;
  *(_QWORD *)(DerivedStorage + 80) = CFRetain(a5);
  *(_QWORD *)(DerivedStorage + 592) = CFRetain(a5);
  CMTimeMake(&time, a8, 1);
  *(CMTime *)(DerivedStorage + 192) = time;
  v23 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (a9)
  {
    v24 = CFDictionaryContainsKey(a9, CFSTR("StreamID"));
    Value = a2;
    if (v24)
      Value = CFDictionaryGetValue(a9, CFSTR("StreamID"));
    *(_QWORD *)(DerivedStorage + 24) = CFRetain(Value);
    if (CFDictionaryContainsKey(a9, CFSTR("ClusterInfo")))
    {
      v26 = CFDictionaryGetValue(a9, CFSTR("ClusterInfo"));
      *(_QWORD *)(DerivedStorage + 40) = CFRetain(v26);
    }
    if (CFDictionaryContainsKey(a9, CFSTR("ClientPID")))
    {
      v27 = CFDictionaryGetValue(a9, CFSTR("ClientPID"));
      v28 = CFRetain(v27);
    }
    else
    {
      v28 = 0;
    }
    *(_QWORD *)(DerivedStorage + 48) = v28;
    v29 = CFDictionaryGetValue(a9, CFSTR("FigAudioSession"));
    if (v29)
      v29 = CFRetain(v29);
    *(_QWORD *)(DerivedStorage + 232) = v29;
    *(_BYTE *)(DerivedStorage + 241) = CFDictionaryGetInt64() != 0;
    if (CFDictionaryContainsKey(a9, CFSTR("AudioSessionID")))
    {
      v30 = CFDictionaryGetValue(a9, CFSTR("AudioSessionID"));
      v31 = CFRetain(v30);
    }
    else
    {
      v31 = 0;
    }
    *(_QWORD *)(DerivedStorage + 256) = v31;
    if (CFDictionaryGetInt64())
      *(_DWORD *)(DerivedStorage + 132) = APSSettingsGetIntWithOverrideAndDefault(CFSTR("hoseSBARAudioIOAssertionDurationSecs"), 0, 120);
    v32 = CFDictionaryContainsKey(a9, CFSTR("VBRBitRates"))
        ? (const __CFDictionary *)CFDictionaryGetValue(a9, CFSTR("VBRBitRates"))
        : 0;
    if (CFDictionaryContainsKey(a9, CFSTR("SupportedAudioFormats")))
    {
      v33 = (uint64_t)CFDictionaryGetValue(a9, CFSTR("SupportedAudioFormats"));
      time.value = 0;
      APSAudioFormatDescriptionListCopyDebugString(v33, &time);
      if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
        && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (time.value)
        CFRelease((CFTypeRef)time.value);
    }
    else
    {
      v33 = 0;
    }
    v34 = (CMTime *)CMBaseObjectGetDerivedStorage();
    theData.value = 0;
    if (v33)
    {
      ASBDArray = APSAudioFormatDescriptionListCreateASBDArray(*v23, v33, (const __CFData **)&theData);
      if ((_DWORD)ASBDArray)
      {
        v33 = ASBDArray;
        APSLogErrorAt(ASBDArray);
        AudioBytesPerSec = 0;
      }
      else
      {
        Length = CFDataGetLength((CFDataRef)theData.value);
        if (Length <= 0x27)
        {
          APSLogErrorAt(0);
          AudioBytesPerSec = hoseSBAR_getAudioBytesPerSec(0, v32, v110, v111, v112);
          v33 = 0;
        }
        else
        {
          v37 = Length / 0x28;
          BytePtr = (__int128 *)CFDataGetBytePtr((CFDataRef)theData.value);
          AudioBytesPerSec = 0;
          do
          {
            v43 = hoseSBAR_getAudioBytesPerSec(BytePtr, v32, v39, v40, v41);
            if (v43 > AudioBytesPerSec)
              AudioBytesPerSec = v43;
            BytePtr = (__int128 *)((char *)BytePtr + 40);
            --v37;
          }
          while (v37);
          v33 = 0;
          v23 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
        }
      }
    }
    else
    {
      APSLogErrorAt(0);
      AudioBytesPerSec = hoseSBAR_getAudioBytesPerSec(0, v32, v107, v108, v109);
    }
    time = v34[8];
    v34[2].timescale = (int)(CMTimeGetSeconds(&time) * (double)AudioBytesPerSec);
    if (theData.value)
      CFRelease((CFTypeRef)theData.value);
    if ((_DWORD)v33)
    {
      v17 = v33;
      goto LABEL_167;
    }
  }
  *(_QWORD *)(DerivedStorage + 600) = 0;
  *(_QWORD *)(DerivedStorage + 608) = DerivedStorage + 600;
  v44 = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    if (a6 != 1381257248)
    {
      if (a6 == 1095778640)
      {
        v45 = &hoseSBAR_initializeTransportContext_sTransportContext_233;
        goto LABEL_69;
      }
LABEL_105:
      v33 = 4294894965;
      APSSignalErrorAt(4294894965);
      v17 = 4294894965;
LABEL_167:
      APSLogErrorAt(v17);
      return v33;
    }
    v45 = &hoseSBAR_initializeTransportContext_sTransportContext;
  }
  else
  {
    if (!FigCFEqual() || a6 != 1381257248)
      goto LABEL_105;
    v45 = &hoseSBAR_initializeTransportContext_sTransportContext_235;
  }
LABEL_69:
  *(_QWORD *)(v44 + 96) = v45;
  if (**(_DWORD **)(DerivedStorage + 96) == 2)
  {
    *(_DWORD *)(DerivedStorage + 88) = 0;
  }
  else
  {
    v46 = *(_QWORD *)(DerivedStorage + 80);
    if (v46)
    {
      v47 = *(double *)(v46 + 16);
    }
    else
    {
      APSLogErrorAt(0);
      v47 = 0.0;
    }
    *(_DWORD *)(DerivedStorage + 88) = v47;
    if (!v47)
    {
      v33 = 4294894965;
      v17 = 0;
      goto LABEL_167;
    }
  }
  v48 = CMBaseObjectGetDerivedStorage();
  v114 = a2;
  if (FigCFEqual())
  {
    v49 = MEMORY[0x1E0CA2E68];
    v50 = *MEMORY[0x1E0CA2E68];
    *(_OWORD *)(v48 + 144) = *MEMORY[0x1E0CA2E68];
    epoch = *(_QWORD *)(v49 + 16);
    *(_QWORD *)(v48 + 160) = epoch;
    *(_OWORD *)(v48 + 168) = v50;
LABEL_78:
    *(_QWORD *)(v48 + 184) = epoch;
    goto LABEL_79;
  }
  if (FigCFEqual())
  {
    CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
    CMTimeMake(&theData, CFPreferenceNumberWithDefault, 1000);
    CMTimeConvertScale(&time, &theData, *(_DWORD *)(v48 + 88), kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    *(CMTime *)(v48 + 144) = time;
    v53 = FigGetCFPreferenceNumberWithDefault();
    CMTimeMake(&v116, v53, 1000);
    CMTimeConvertScale(&time, &v116, *(_DWORD *)(v48 + 88), kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    *(_OWORD *)(v48 + 168) = *(_OWORD *)&time.value;
    epoch = time.epoch;
    goto LABEL_78;
  }
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 90
    && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_79:
  v54 = CFDictionaryGetInt64() != 0;
  cf1 = (CFTypeRef)FigCFDictionaryGetValue();
  v55 = CMBaseObjectGetDerivedStorage();
  v56 = *(NSObject **)(v55 + 280);
  v57 = (CFTypeRef *)(v55 + 112);
  v58 = (CMTimeValue *)(v55 + 104);
  v59 = CMBaseObjectGetDerivedStorage();
  theData.value = 0;
  v116.value = 0;
  v124 = 0;
  cf = 0;
  v60 = *v23;
  Mutable = CFDictionaryCreateMutable(*v23, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt(0);
    v33 = 4294894966;
LABEL_235:
    v64 = v114;
    goto LABEL_113;
  }
  if (APSIsAPMSpeaker_sCheckOnce != -1)
    dispatch_once(&APSIsAPMSpeaker_sCheckOnce, &__block_literal_global_9);
  if ((APSIsAPMSpeaker_sIsAPMSpeaker || IsAppleTV())
    && APSSettingsIsFeatureEnabled(CFSTR("BufferedPassthroughDDP")))
  {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC5CE0], (const void *)*MEMORY[0x1E0C9AE50]);
  }
  if (*(_BYTE *)(v59 + 243))
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC5CE8], (const void *)*MEMORY[0x1E0C9AE50]);
  if (FigServer_IsAirplayd()
    || !FigIsAirplaydEnabled() && in_audio_mx_server_process())
  {
    CFDictionarySetInt64();
    CFDictionarySetInt64();
    RemoteWithOptions = FigSampleBufferAudioRendererCreateWithOptions();
    if ((_DWORD)RemoteWithOptions)
    {
      v33 = RemoteWithOptions;
    }
    else
    {
      RemoteWithOptions = FigSampleBufferAudioRendererCentralCreateWithOptions();
      if ((_DWORD)RemoteWithOptions)
      {
        v33 = RemoteWithOptions;
      }
      else
      {
        CFRetain(0);
        CFRetain((CFTypeRef)theData.value);
        time.value = MEMORY[0x1E0C809B0];
        *(_QWORD *)&time.timescale = 0x40000000;
        time.epoch = (CMTimeEpoch)__hoseSBAR_createSynchronizerAndRenderer_embedded_block_invoke;
        v119 = &__block_descriptor_tmp_247;
        v120 = 0;
        v121 = theData.value;
        v122 = v54;
        dispatch_async(v56, &time);
        *v58 = theData.value;
        theData.value = 0;
        RemoteWithOptions = FigSampleBufferRenderSynchronizerCreateWithOptions();
        if (!(_DWORD)RemoteWithOptions)
        {
          v63 = FigSampleBufferRenderSynchronizerCentralCreate();
          v64 = v114;
          if (!(_DWORD)v63)
          {
            *v57 = cf;
            cf = 0;
            if (gLogCategory_APSEndpointStreamAudioHoseSBAR > 50
              || gLogCategory_APSEndpointStreamAudioHoseSBAR == -1 && !_LogCategory_Initialize())
            {
              goto LABEL_112;
            }
            goto LABEL_104;
          }
          v33 = v63;
          goto LABEL_237;
        }
        v33 = RemoteWithOptions;
      }
    }
    goto LABEL_234;
  }
  RemoteWithOptions = FigSampleBufferAudioRendererCreateRemoteWithOptions();
  if ((_DWORD)RemoteWithOptions)
  {
    v33 = RemoteWithOptions;
LABEL_234:
    APSLogErrorAt(RemoteWithOptions);
    goto LABEL_235;
  }
  v65 = *v58;
  v66 = *(void (**)(CMTimeValue, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  v64 = v114;
  if (v66)
    v66(v65, *MEMORY[0x1E0CC5D78], *MEMORY[0x1E0C9AE40]);
  v63 = FigSampleBufferRenderSynchronizerCreateRemoteWithOptions();
  if (!(_DWORD)v63)
  {
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR > 50
      || gLogCategory_APSEndpointStreamAudioHoseSBAR == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_112;
    }
LABEL_104:
    LogPrintF();
LABEL_112:
    v33 = 0;
    goto LABEL_113;
  }
  v33 = v63;
LABEL_237:
  APSLogErrorAt(v63);
LABEL_113:
  if (v116.value)
    CFRelease((CFTypeRef)v116.value);
  if (theData.value)
    CFRelease((CFTypeRef)theData.value);
  if (v124)
    CFRelease(v124);
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  if ((_DWORD)v33)
  {
    v84 = v33;
    goto LABEL_165;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  v67 = *(_QWORD *)(v55 + 104);
  v68 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v68)
    v68(v67, *MEMORY[0x1E0CC5D80], *MEMORY[0x1E0C9AE50]);
  if (!*(_BYTE *)(v55 + 243))
  {
    if (cf1)
    {
      if (CFEqual(cf1, CFSTR("LowQualityZeroLatency")))
      {
        v83 = (uint64_t *)MEMORY[0x1E0CC5DE0];
        goto LABEL_159;
      }
      if (CFEqual(cf1, CFSTR("TimeDomain")))
      {
        v83 = (uint64_t *)MEMORY[0x1E0CC5DF0];
        goto LABEL_159;
      }
      if (CFEqual(cf1, CFSTR("Spectral")))
      {
        v83 = (uint64_t *)MEMORY[0x1E0CC5DE8];
LABEL_159:
        v97 = *v83;
        if (!*v83)
          goto LABEL_127;
        v98 = *v58;
        v99 = *(uint64_t (**)(CMTimeValue, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (v99)
        {
          v100 = v99(v98, *MEMORY[0x1E0CC5D70], v97);
          if (!(_DWORD)v100)
            goto LABEL_127;
          v33 = v100;
        }
        else
        {
          v33 = 4294954514;
        }
        v84 = v33;
        goto LABEL_165;
      }
      if (!CFEqual(cf1, CFSTR("Varispeed")))
      {
        v33 = 4294894965;
        if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 90
          && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        goto LABEL_166;
      }
    }
    else if (!APSSettingsGetIntWithOverrideAndDefault(CFSTR("hoseSBARPrefersVarispeedTimePitchAlgorithm"), 0, 1))
    {
      goto LABEL_127;
    }
    v83 = (uint64_t *)MEMORY[0x1E0CC5DF8];
    goto LABEL_159;
  }
LABEL_127:
  v69 = *v57;
  v70 = *(uint64_t (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v70)
  {
    v33 = 4294954514;
LABEL_142:
    v84 = v33;
LABEL_165:
    APSLogErrorAt(v84);
LABEL_166:
    v17 = v33;
    goto LABEL_167;
  }
  v71 = v70(v69, v55 + 120);
  if ((_DWORD)v71)
  {
    v33 = v71;
    goto LABEL_142;
  }
  v72 = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(v72 + 120))
  {
    v33 = 4294894965;
    APSLogErrorAt(0);
LABEL_217:
    v84 = v33;
    goto LABEL_165;
  }
  v73 = v72;
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  v74 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(v73 + 280));
  v75 = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!v75)
  {
    APSLogErrorAt(0);
    v33 = 4294894966;
    goto LABEL_215;
  }
  dispatch_set_context(v74, v75);
  dispatch_source_set_event_handler_f(v74, (dispatch_function_t)hoseSBAR_purgeTimerFired);
  dispatch_source_set_cancel_handler_f(v74, (dispatch_function_t)hoseSBAR_purgeTimerCancelled);
  dispatch_resume(v74);
  v76 = CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(v73 + 120), v74);
  if ((_DWORD)v76)
  {
    v33 = v76;
    APSLogErrorAt(v76);
LABEL_215:
    if (v74)
    {
      dispatch_source_cancel(v74);
      dispatch_release(v74);
    }
    goto LABEL_217;
  }
  *(_QWORD *)(v73 + 544) = v74;
  CMBaseObjectGetDerivedStorage();
  v77 = *v57;
  v78 = *v58;
  v79 = *(uint64_t (**)(CFTypeRef, CMTimeValue))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v79)
  {
    v33 = 4294954514;
LABEL_144:
    v84 = v33;
    goto LABEL_165;
  }
  v80 = v79(v77, v78);
  if ((_DWORD)v80)
  {
    v33 = v80;
    goto LABEL_144;
  }
  if (!*(_DWORD *)(DerivedStorage + 132))
    goto LABEL_149;
  SNPrintF();
  v81 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  v82 = dispatch_queue_create(label, v81);
  *(_QWORD *)(DerivedStorage + 296) = v82;
  if (!v82)
  {
LABEL_199:
    APSLogErrorAt(0);
    return 4294894966;
  }
  v17 = APSAudioIOAssertionTimingControllerCreate(v64, (CFTypeRef *)(DerivedStorage + 136));
  if ((_DWORD)v17)
  {
    v33 = v17;
    goto LABEL_167;
  }
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 296), 0, (dispatch_function_t)hoseSBAR_renewAudioIOAssertionDispatch);
LABEL_149:
  v85 = MEMORY[0x1E0CA2E18];
  v86 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)(DerivedStorage + 304) = *MEMORY[0x1E0CA2E18];
  v87 = *(_QWORD *)(v85 + 16);
  *(_QWORD *)(DerivedStorage + 320) = v87;
  *(_OWORD *)(DerivedStorage + 328) = v86;
  *(_QWORD *)(DerivedStorage + 344) = v87;
  *(_QWORD *)(DerivedStorage + 440) = 0x100000000;
  *(_OWORD *)(DerivedStorage + 424) = kAPSNetworkTimeInvalid;
  *(_QWORD *)(DerivedStorage + 464) = v87;
  *(_OWORD *)(DerivedStorage + 448) = v86;
  *(_QWORD *)(DerivedStorage + 488) = v87;
  *(_OWORD *)(DerivedStorage + 472) = v86;
  *(_QWORD *)(DerivedStorage + 512) = v87;
  *(_OWORD *)(DerivedStorage + 496) = v86;
  *(_QWORD *)(DerivedStorage + 416) = v87;
  v115 = v86;
  *(_OWORD *)(DerivedStorage + 400) = v86;
  v88 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  v89 = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)(DerivedStorage + 708) = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *(_OWORD *)(DerivedStorage + 724) = v88;
  *(_OWORD *)(DerivedStorage + 692) = v89;
  *(_DWORD *)(DerivedStorage + 640) = FigGetCFPreferenceNumberWithDefault();
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  v17 = CMBufferQueueCreate(v60, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(DerivedStorage + 552));
  if ((_DWORD)v17)
  {
    v33 = v17;
    goto LABEL_167;
  }
  v91 = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  v17 = CMBufferQueueCreate(v60, 0, v91, (CMBufferQueueRef *)(DerivedStorage + 560));
  if ((_DWORD)v17)
  {
    v33 = v17;
    goto LABEL_167;
  }
  v92 = FigGetCFPreferenceNumberWithDefault();
  v17 = APSCMSampleBufferMergerCreate(v92, (CFTypeRef *)(DerivedStorage + 576));
  if ((_DWORD)v17)
  {
    v33 = v17;
    goto LABEL_167;
  }
  v93 = (_OWORD *)(DerivedStorage + 744);
  *(_OWORD *)(DerivedStorage + 744) = v115;
  *(_QWORD *)(DerivedStorage + 760) = v87;
  v94 = FigGetCFPreferenceNumberWithDefault();
  *(_BYTE *)(DerivedStorage + 740) = v94;
  if (v94)
  {
    v95 = FigGetCFPreferenceNumberWithDefault();
    CMTimeMake(&time, v95, 1000);
    *v93 = *(_OWORD *)&time.value;
    v96 = time.epoch;
    *(_QWORD *)(DerivedStorage + 760) = time.epoch;
    *(_OWORD *)&time.value = *v93;
    time.epoch = v96;
    if (hoseSBAR_setVolumeFadeInCurve(0, MEMORY[0x1E0CA2E68], &time))
    {
      if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 90
        && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
  }
  *(_BYTE *)(DerivedStorage + 816) = 0;
  *(_QWORD *)(DerivedStorage + 784) = 0;
  v101 = CFBagCreateMutable(v60, 0, MEMORY[0x1E0C9B388]);
  *(_QWORD *)(DerivedStorage + 768) = v101;
  if (!v101)
    goto LABEL_199;
  v102 = CFDictionaryCreateMutable(v60, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(DerivedStorage + 776) = v102;
  if (!v102)
    goto LABEL_199;
  v103 = CFDictionaryCreateMutable(v60, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(DerivedStorage + 792) = v103;
  if (!v103)
    goto LABEL_199;
  v104 = CFDictionaryCreateMutable(v60, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(DerivedStorage + 800) = v104;
  if (!v104)
    goto LABEL_199;
  v105 = CFDictionaryCreateMutable(v60, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(DerivedStorage + 808) = v105;
  if (!v105)
    goto LABEL_199;
  v17 = APSTimedInfoManagerCreate((CFTypeRef *)(DerivedStorage + 840));
  if ((_DWORD)v17)
  {
    v33 = v17;
    goto LABEL_167;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  v17 = FigNotificationCenterAddWeakListener();
  if ((_DWORD)v17)
  {
    v33 = v17;
    goto LABEL_167;
  }
  v17 = APSTimedInfoManagerResume(*(_QWORD *)(DerivedStorage + 840), *(const void **)(DerivedStorage + 120));
  if ((_DWORD)v17)
  {
    v33 = v17;
    goto LABEL_167;
  }
  *(_DWORD *)(DerivedStorage + 216) = -1;
  if (notify_register_check("com.apple.mediaexperience.fadeinappliedforplaybackhandoff", (int *)(DerivedStorage + 216))
    || (*(_DWORD *)(DerivedStorage + 220) = -1,
        notify_register_check("com.apple.mediaexperience.fadeoutappliedforplaybackhandoff", (int *)(DerivedStorage + 220))))
  {
    APSLogErrorAt(0);
    return 4294960560;
  }
  else
  {
    time.value = 0;
    APSAudioFormatDescriptionCopyDebugString(*(_QWORD *)(DerivedStorage + 80), (CFStringRef *)&time);
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
      && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (time.value)
      CFRelease((CFTypeRef)time.value);
    v33 = 0;
    *a10 = 0;
  }
  return v33;
}

uint64_t hoseSBAR_registerBaseClass()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t hoseSBAR_getAudioBytesPerSec(__int128 *a1, const __CFDictionary *a2, double a3, double a4, double a5)
{
  __int128 *v6;
  int v7;
  int v8;
  double v9;
  double v10;
  uint64_t v11;
  CFNumberRef v12;
  const __CFNumber *Value;
  int v14;
  uint64_t v15;
  uint64_t valuePtr;
  int v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v6 = a1;
  v22 = 0;
  v20 = 0u;
  v21 = 0u;
  v19 = 0;
  v18 = 0;
  valuePtr = 0;
  if (!a1)
  {
    HIDWORD(v21) = 2;
    v6 = &v20;
  }
  v7 = *((_DWORD *)v6 + 2);
  if (v7 == 1819304813)
  {
    LODWORD(a4) = *((_DWORD *)v6 + 7);
    LODWORD(a5) = *((_DWORD *)v6 + 8);
    v10 = *(double *)v6 * (double)*(unint64_t *)&a4 * (double)*(unint64_t *)&a5;
    return (int)(v10 * 0.125);
  }
  if (v7 == 1634492771)
  {
    v8 = *((_DWORD *)v6 + 3);
    if ((v8 - 1) >= 3)
    {
      v9 = 0.0;
      if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 90
        && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else
    {
      v9 = dbl_1C96DA170[v8 - 1];
    }
    LODWORD(a4) = *((_DWORD *)v6 + 7);
    v10 = v9 * (*(double *)v6 * (double)*(unint64_t *)&a4);
    return (int)(v10 * 0.125);
  }
  if (!a2)
  {
    v12 = 0;
    goto LABEL_17;
  }
  ASBDToAPAudioFormat((uint64_t)v6, (unint64_t *)&v19);
  if ((unint64_t)v19 < 2)
  {
    v11 = 0;
    goto LABEL_11;
  }
  if (v19 > 0x3FFFFFFF)
  {
    if (v19 <= 0x7FFFFFFFFFFFLL)
    {
      if (v19 > 0xFFFFFFFFFFLL)
      {
        if (v19 <= 0x7FFFFFFFFFFLL)
        {
          switch(v19)
          {
            case 0x10000000000:
              v11 = 40;
              goto LABEL_11;
            case 0x20000000000:
              v11 = 41;
              goto LABEL_11;
            case 0x40000000000:
              v11 = 42;
              goto LABEL_11;
          }
        }
        else if (v19 > 0x1FFFFFFFFFFFLL)
        {
          if (v19 == 0x200000000000)
          {
            v11 = 45;
            goto LABEL_11;
          }
          if (v19 == 0x400000000000)
          {
            v11 = 46;
            goto LABEL_11;
          }
        }
        else
        {
          if (v19 == 0x80000000000)
          {
            v11 = 43;
            goto LABEL_11;
          }
          if (v19 == 0x100000000000)
          {
            v11 = 44;
            goto LABEL_11;
          }
        }
      }
      else if (v19 <= 0x1FFFFFFFFLL)
      {
        switch(v19)
        {
          case 0x40000000:
            v11 = 30;
            goto LABEL_11;
          case 0x80000000:
            v11 = 31;
            goto LABEL_11;
          case 0x100000000:
            v11 = 32;
            goto LABEL_11;
        }
      }
      else if (v19 > 0x3FFFFFFFFFLL)
      {
        if (v19 == 0x4000000000)
        {
          v11 = 38;
          goto LABEL_11;
        }
        if (v19 == 0x8000000000)
        {
          v11 = 39;
          goto LABEL_11;
        }
      }
      else
      {
        if (v19 == 0x200000000)
        {
          v11 = 33;
          goto LABEL_11;
        }
        if (v19 == 0x400000000)
        {
          v11 = 34;
          goto LABEL_11;
        }
      }
    }
    else if (v19 <= 0x3FFFFFFFFFFFFFLL)
    {
      if (v19 <= 0x3FFFFFFFFFFFFLL)
      {
        switch(v19)
        {
          case 0x800000000000:
            v11 = 47;
            goto LABEL_11;
          case 0x1000000000000:
            v11 = 48;
            goto LABEL_11;
          case 0x2000000000000:
            v11 = 49;
            goto LABEL_11;
        }
      }
      else if (v19 > 0xFFFFFFFFFFFFFLL)
      {
        if (v19 == 0x10000000000000)
        {
          v11 = 52;
          goto LABEL_11;
        }
        if (v19 == 0x20000000000000)
        {
          v11 = 53;
          goto LABEL_11;
        }
      }
      else
      {
        if (v19 == 0x4000000000000)
        {
          v11 = 50;
          goto LABEL_11;
        }
        if (v19 == 0x8000000000000)
        {
          v11 = 51;
          goto LABEL_11;
        }
      }
    }
    else if (v19 > 0x3FFFFFFFFFFFFFFLL)
    {
      if (v19 > 0x1FFFFFFFFFFFFFFFLL)
      {
        if (v19 == 0x2000000000000000)
        {
          v11 = 61;
          goto LABEL_11;
        }
        if (v19 == 0x4000000000000000)
        {
          v11 = 62;
          goto LABEL_11;
        }
      }
      else
      {
        if (v19 == 0x400000000000000)
        {
          v11 = 58;
          goto LABEL_11;
        }
        if (v19 == 0x1000000000000000)
        {
          v11 = 60;
          goto LABEL_11;
        }
      }
    }
    else if (v19 > 0xFFFFFFFFFFFFFFLL)
    {
      if (v19 == 0x100000000000000)
      {
        v11 = 56;
        goto LABEL_11;
      }
      if (v19 == 0x200000000000000)
      {
        v11 = 57;
        goto LABEL_11;
      }
    }
    else
    {
      if (v19 == 0x40000000000000)
      {
        v11 = 54;
        goto LABEL_11;
      }
      if (v19 == 0x80000000000000)
      {
        v11 = 55;
        goto LABEL_11;
      }
    }
  }
  else if (v19 < 0x8000)
  {
    if (v19 > 255)
    {
      if (v19 <= 2047)
      {
        switch(v19)
        {
          case 256:
            v11 = 8;
            goto LABEL_11;
          case 512:
            v11 = 9;
            goto LABEL_11;
          case 1024:
            v11 = 10;
            goto LABEL_11;
        }
      }
      else if (v19 >= 0x2000)
      {
        if (v19 == 0x2000)
        {
          v11 = 13;
          goto LABEL_11;
        }
        if (v19 == 0x4000)
        {
          v11 = 14;
          goto LABEL_11;
        }
      }
      else
      {
        if (v19 == 2048)
        {
          v11 = 11;
          goto LABEL_11;
        }
        if (v19 == 4096)
        {
          v11 = 12;
          goto LABEL_11;
        }
      }
    }
    else if (v19 <= 7)
    {
      switch(v19)
      {
        case 0x8000000000000000:
          v11 = 63;
          goto LABEL_11;
        case 2:
          v11 = 1;
          goto LABEL_11;
        case 4:
          v11 = 2;
          goto LABEL_11;
      }
    }
    else if (v19 > 31)
    {
      if (v19 == 32)
      {
        v11 = 5;
        goto LABEL_11;
      }
      if (v19 == 128)
      {
        v11 = 7;
        goto LABEL_11;
      }
    }
    else
    {
      if (v19 == 8)
      {
        v11 = 3;
        goto LABEL_11;
      }
      if (v19 == 16)
      {
        v11 = 4;
        goto LABEL_11;
      }
    }
  }
  else if (v19 < 0x400000)
  {
    if (v19 < 0x40000)
    {
      switch(v19)
      {
        case 0x8000:
          v11 = 15;
          goto LABEL_11;
        case 0x10000:
          v11 = 16;
          goto LABEL_11;
        case 0x20000:
          v11 = 17;
          goto LABEL_11;
      }
    }
    else if (v19 >= 0x100000)
    {
      if (v19 == 0x100000)
      {
        v11 = 20;
        goto LABEL_11;
      }
      if (v19 == 0x200000)
      {
        v11 = 21;
        goto LABEL_11;
      }
    }
    else
    {
      if (v19 == 0x40000)
      {
        v11 = 18;
        goto LABEL_11;
      }
      if (v19 == 0x80000)
      {
        v11 = 19;
        goto LABEL_11;
      }
    }
  }
  else if (v19 > 0x3FFFFFF)
  {
    if (v19 > 0xFFFFFFF)
    {
      if (v19 == 0x10000000)
      {
        v11 = 28;
        goto LABEL_11;
      }
      if (v19 == 0x20000000)
      {
        v11 = 29;
        goto LABEL_11;
      }
    }
    else
    {
      if (v19 == 0x4000000)
      {
        v11 = 26;
        goto LABEL_11;
      }
      if (v19 == 0x8000000)
      {
        v11 = 27;
        goto LABEL_11;
      }
    }
  }
  else if (v19 > 0xFFFFFF)
  {
    if (v19 == 0x1000000)
    {
      v11 = 24;
      goto LABEL_11;
    }
    if (v19 == 0x2000000)
    {
      v11 = 25;
      goto LABEL_11;
    }
  }
  else
  {
    if (v19 == 0x400000)
    {
      v11 = 22;
      goto LABEL_11;
    }
    if (v19 == 0x800000)
    {
      v11 = 23;
      goto LABEL_11;
    }
  }
  v11 = 35;
  if (v19 != 0x800000000)
    v11 = 0;
LABEL_11:
  valuePtr = v11;
  v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
  Value = (const __CFNumber *)CFDictionaryGetValue(a2, v12);
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberSInt32Type, &v18);
    v14 = v18 / 8;
    goto LABEL_18;
  }
LABEL_17:
  v18 = 409600;
  v14 = 51200;
LABEL_18:
  v15 = ((*((_DWORD *)v6 + 7) + 1) >> 1) * v14;
  if (v12)
    CFRelease(v12);
  return v15;
}

void __hoseSBAR_createSynchronizerAndRenderer_embedded_block_invoke(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t DerivedStorage;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t UsingAuxiliaryAVAudioSession;
  const void *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, _QWORD, const void *);
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, _QWORD, _QWORD);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, _QWORD, _QWORD);
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, _QWORD, const void *);
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, _QWORD, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, _QWORD, uint64_t);
  uint64_t (*v28)(uint64_t, _QWORD, uint64_t);
  const void *v29;
  int valuePtr;
  int v31;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(unsigned __int8 *)(a1 + 48);
  v31 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = (_QWORD *)DerivedStorage;
  valuePtr = 0;
  if (!v3 && !*(_BYTE *)(DerivedStorage + 240))
  {
    v9 = *(_QWORD *)(DerivedStorage + 232);
    FigCFEqual();
    v8 = (const void *)CFStringCreateF();
    v10 = 0;
    if (!v9)
      goto LABEL_34;
LABEL_5:
    v11 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (v11)
    {
      v12 = *(uint64_t (**)(uint64_t, _QWORD, const void *))(v11 + 56);
      if (v12)
      {
        v13 = v12(v9, *MEMORY[0x1E0D495D8], v8);
        v31 = v13;
        if ((_DWORD)v13)
          goto LABEL_36;
        v14 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
        if (v14)
        {
          v15 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v14 + 56);
          if (v15)
          {
            v13 = v15(v9, *MEMORY[0x1E0D498B0], *MEMORY[0x1E0C9AE40]);
            v31 = v13;
            if ((_DWORD)v13)
              goto LABEL_36;
            v16 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
            if (v16)
            {
              v17 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v16 + 56);
              if (v17)
              {
                v13 = v17(v9, *MEMORY[0x1E0D494F8], *MEMORY[0x1E0D48F00]);
                v31 = v13;
                if (!(_DWORD)v13)
                {
                  valuePtr = 16;
                  v18 = (uint64_t)CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
                  v19 = (const void *)v18;
                  if (!v18)
                    goto LABEL_60;
                  v20 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
                  if (v20)
                  {
                    v21 = *(uint64_t (**)(uint64_t, _QWORD, const void *))(v20 + 56);
                    if (v21)
                    {
                      v18 = v21(v9, *MEMORY[0x1E0D49878], v19);
                      v31 = v18;
                      if ((_DWORD)v18)
                        goto LABEL_60;
                      if (!v10)
                        goto LABEL_27;
                      v22 = v5[6];
                      if (v22)
                      {
                        v23 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
                        if (v23)
                        {
                          v24 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v23 + 56);
                          if (v24)
                          {
                            v18 = v24(v9, *MEMORY[0x1E0D495E8], v22);
                            v31 = v18;
                            if ((_DWORD)v18)
                              goto LABEL_60;
                            goto LABEL_23;
                          }
                          v18 = 4294948071;
                        }
                        else
                        {
                          v18 = 4294948075;
                        }
                        v31 = v18;
                        goto LABEL_60;
                      }
LABEL_23:
                      v25 = v5[32];
                      if (v25)
                      {
                        v26 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
                        if (v26)
                        {
                          v27 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v26 + 56);
                          if (v27)
                          {
                            v18 = v27(v9, *MEMORY[0x1E0D49C40], v25);
                            v31 = v18;
                            if ((_DWORD)v18)
                              goto LABEL_60;
                            goto LABEL_27;
                          }
                          v18 = 4294948071;
                        }
                        else
                        {
                          v18 = 4294948075;
                        }
                        v31 = v18;
                        goto LABEL_60;
                      }
LABEL_27:
                      v28 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 56);
                      if (v28)
                      {
                        v18 = v28(v2, *MEMORY[0x1E0CC5D90], v9);
                        v31 = v18;
                        if (!(_DWORD)v18)
                        {
                          if (gLogCategory_APSEndpointStreamAudioHoseSBAR > 50)
                            goto LABEL_44;
                          if (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1
                            || _LogCategory_Initialize())
                          {
                            LogPrintF();
                          }
LABEL_37:
                          if (!v31)
                            goto LABEL_44;
                          goto LABEL_38;
                        }
                      }
                      else
                      {
                        v18 = 4294954514;
                        v31 = -12782;
                      }
LABEL_60:
                      APSLogErrorAt(v18);
                      goto LABEL_37;
                    }
                    v18 = 4294948071;
                  }
                  else
                  {
                    v18 = 4294948075;
                  }
                  v31 = v18;
                  goto LABEL_60;
                }
LABEL_36:
                APSLogErrorAt(v13);
                v19 = 0;
                goto LABEL_37;
              }
              v13 = 4294948071;
            }
            else
            {
              v13 = 4294948075;
            }
            v31 = v13;
            goto LABEL_36;
          }
          v13 = 4294948071;
        }
        else
        {
          v13 = 4294948075;
        }
        v31 = v13;
        goto LABEL_36;
      }
      v13 = 4294948071;
LABEL_35:
      v31 = v13;
      goto LABEL_36;
    }
LABEL_34:
    v13 = 4294948075;
    goto LABEL_35;
  }
  v6 = (uint64_t *)(DerivedStorage + 224);
  UsingAuxiliaryAVAudioSession = FigAudioSessionCreateUsingAuxiliaryAVAudioSession();
  v31 = UsingAuxiliaryAVAudioSession;
  if (!(_DWORD)UsingAuxiliaryAVAudioSession)
  {
    FigCFEqual();
    v8 = (const void *)CFStringCreateF();
    v9 = *v6;
    v10 = 1;
    if (!*v6)
      goto LABEL_34;
    goto LABEL_5;
  }
  APSLogErrorAt(UsingAuxiliaryAVAudioSession);
  v19 = 0;
  v8 = 0;
LABEL_38:
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 90
    && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v29 = (const void *)v5[28];
  if (v29)
  {
    CFRelease(v29);
    v5[28] = 0;
  }
LABEL_44:
  if (v8)
    CFRelease(v8);
  if (v19)
    CFRelease(v19);
  CFRelease(*(CFTypeRef *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

_BYTE *hoseSBAR_handleSBARLowWaterNotification(uint64_t a1, uint64_t a2)
{
  _BYTE *result;

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*result)
    return (_BYTE *)hoseSBAR_fillSBARToHighWater(a2);
  return result;
}

uint64_t hoseSBAR_handleSBARWasFlushedAutomaticallyAndRebuildCouldBenefitFidelityNotification(uint64_t a1, void *a2)
{
  uint64_t result;
  uint64_t v4;
  const void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);

  result = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)result)
  {
    v4 = result;
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
      && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v5 = *(const void **)(v4 + 824);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(v4 + 824) = 0;
    }
    v6 = *(const void **)(v4 + 832);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(v4 + 832) = 0;
    }
    v7 = *(_QWORD *)(v4 + 104);
    v8 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v8)
    {
      result = v8(v7);
      if (!(_DWORD)result)
      {
        *(_BYTE *)(v4 + 568) = 0;
        result = hoseSBAR_transferStashedSBufsIntoBuffersForSBAR(a2);
        if (!(_DWORD)result)
          return result;
      }
    }
    else
    {
      result = 4294954514;
    }
    return APSLogErrorAt(result);
  }
  return result;
}

void hoseSBAR_handleSBARUnderrunNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  CFTypeID v10;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 104) != a4
    || !a5
    || (v9 = DerivedStorage, v10 = CFGetTypeID(a5), v10 != CFDictionaryGetTypeID()))
  {
LABEL_11:
    APSLogErrorAt(0);
    return;
  }
  if (FigCFEqual())
  {
    if ((*(_BYTE *)(v9 + 656) & 1) == 0)
    {
      FigCFDictionaryGetCMTimeIfPresent();
      hoseSBAR_beginUnderrunIfNeeded(a2);
      return;
    }
    goto LABEL_11;
  }
  if (FigCFEqual())
  {
    if ((*(_BYTE *)(v9 + 656) & 1) != 0)
    {
      v11 = MEMORY[0x1E0CA2E18];
      *(_OWORD *)(v9 + 644) = *MEMORY[0x1E0CA2E18];
      *(_QWORD *)(v9 + 660) = *(_QWORD *)(v11 + 16);
      FigCFDictionaryGetCMTimeRangeIfPresent();
      hoseSBAR_endUnderrun();
      return;
    }
    goto LABEL_11;
  }
}

void hoseSBAR_handleSynchronizerTimebaseRateChangedNotification()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    v1 = DerivedStorage;
    if (CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 120)) != 0.0)
      CMTimebaseSetTimerDispatchSourceToFireImmediately(*(CMTimebaseRef *)(v1 + 120), *(dispatch_source_t *)(v1 + 544));
  }
}

void hoseSBAR_purgeTimerFired()
{
  CMTimeEpoch v0;
  uint64_t v1;
  void *v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, __int128 *);
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, CMTime *, uint64_t *);
  CMClockRef HostTimeClock;
  const void *v11;
  CMClockRef v12;
  const void *TimeOfDayClock;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  opaqueCMBufferQueue *v18;
  opaqueCMBufferQueue *v19;
  CMTimeFlags v20;
  CMTimeEpoch v21;
  void *v22;
  void *v23;
  OpaqueCMTimebase *v24;
  NSObject *v25;
  int64_t Count;
  size_t v27;
  uint64_t i;
  __int128 v29;
  CMTime rhs;
  CMTime v31;
  CMTime v32;
  CMTime v33;
  CMTime v34[2];
  CMTime lhs;
  __int128 v36;
  CMTimeEpoch v37;
  uint64_t hostTime;
  CMTime v39;
  CMTime v40;
  CMTime v41;
  CMTime v42;
  CMTime time2;
  CMTime time;
  CMTimeValue v45;
  CMTimeScale v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  memset(v34, 0, sizeof(v34));
  memset(&v33, 0, sizeof(v33));
  v29 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v32.value = *MEMORY[0x1E0CA2E18];
  v0 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v32.epoch = v0;
  v45 = *MEMORY[0x1E0CA2E18];
  v46 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v1 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v1)
  {
    v2 = (void *)v1;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v4 = CMBaseObjectGetDerivedStorage();
    *(_OWORD *)&time2.value = v29;
    time2.epoch = v0;
    *(_OWORD *)&v42.value = v29;
    v42.epoch = v0;
    *(_OWORD *)&v41.value = v29;
    v41.epoch = v0;
    *(_OWORD *)&v40.value = v29;
    v40.epoch = v0;
    *(_OWORD *)&v39.value = v29;
    v39.epoch = v0;
    v37 = 0;
    hostTime = 0;
    v36 = 0uLL;
    v5 = *(_QWORD *)(v4 + 64);
    v6 = *(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v6)
    {
      v7 = v6(v5, &v36);
      if (!(_DWORD)v7)
      {
        *((_QWORD *)&v36 + 1) = 0;
        v8 = *(_QWORD *)(v4 + 64);
        *(_OWORD *)&lhs.value = (unint64_t)v36;
        lhs.epoch = v37;
        v9 = *(uint64_t (**)(uint64_t, CMTime *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (v9)
        {
          time = lhs;
          v7 = v9(v8, &time, &hostTime);
          if (!(_DWORD)v7)
          {
            CMClockMakeHostTimeFromSystemUnits(&v42, hostTime);
            HostTimeClock = CMClockGetHostTimeClock();
            v11 = *(const void **)(v4 + 120);
            time = v42;
            CMSyncConvertTime(&v41, &time, HostTimeClock, v11);
            v12 = CMClockGetHostTimeClock();
            TimeOfDayClock = (const void *)FigGetTimeOfDayClock();
            time = v42;
            CMSyncConvertTime(&v39, &time, v12, TimeOfDayClock);
            time = v41;
            hoseSBAR_getMediaTimeForSynchronizerTime(&v40, (uint64_t)v2, &time);
            CMTimeMakeWithSeconds(&time, (double)(int)v37 + (double)*((unint64_t *)&v36 + 1) * 5.42101086e-20, 1000);
            lhs = v39;
            CMTimeSubtract(&time2, &lhs, &time);
            if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
              && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
            {
              lhs = v41;
              CMTimeGetSeconds(&lhs);
              lhs = v40;
              CMTimeGetSeconds(&lhs);
              lhs = v39;
              CMTimeGetSeconds(&lhs);
              lhs = time2;
              CMTimeGetSeconds(&lhs);
              LogPrintF();
            }
LABEL_13:
            CMTimebaseGetTimeWithLogging();
            CMBufferQueueGetDuration(&v31, *(CMBufferQueueRef *)(DerivedStorage + 552));
            CMTimeGetSeconds(&v31);
            if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
              && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
            {
              CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 120));
              time = v34[1];
              CMTimeGetSeconds(&time);
              LogPrintF();
            }
            hoseSBAR_maybeTriggerPullAudioBBuffs(v2);
            if (CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 120)) == 0.0)
            {
              APSLogErrorAt(0);
              v22 = 0;
            }
            else
            {
              v34[0] = v34[1];
              time2 = v34[1];
              hoseSBAR_getMediaTimeForSynchronizerTime(&time, (uint64_t)v2, &time2);
              value = time.value;
              timescale = time.timescale;
              flags = time.flags;
              epoch = time.epoch;
              CMTimeMake(&rhs, 1, 1);
              time = v34[0];
              CMTimeAdd(&v33, &time, &rhs);
              if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 30
                && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
              {
                time = v34[1];
                CMTimeGetSeconds(&time);
                CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 120));
                time = v34[0];
                CMTimeGetSeconds(&time);
                time = v33;
                CMTimeGetSeconds(&time);
                LogPrintF();
              }
              if ((flags & 1) == 0)
                goto LABEL_25;
              v18 = *(opaqueCMBufferQueue **)(DerivedStorage + 552);
              time.value = value;
              time.timescale = timescale;
              time.flags = flags;
              time.epoch = epoch;
              hoseSBAR_pruneBufferQueueToTimestamp((uint64_t)v2, (uint64_t)&time, v18);
              v19 = *(opaqueCMBufferQueue **)(DerivedStorage + 560);
              time.value = value;
              time.timescale = timescale;
              time.flags = flags;
              time.epoch = epoch;
              hoseSBAR_pruneBufferQueueToTimestamp((uint64_t)v2, (uint64_t)&time, v19);
              CMBufferQueueGetEndPresentationTimeStamp(&time, *(CMBufferQueueRef *)(DerivedStorage + 560));
              v45 = time.value;
              v20 = time.flags;
              v46 = time.timescale;
              if ((time.flags & 1) == 0)
                goto LABEL_25;
              v21 = time.epoch;
              time.value = value;
              time.timescale = timescale;
              time.flags = flags;
              time.epoch = epoch;
              time2.value = v45;
              time2.timescale = v46;
              time2.flags = v20;
              time2.epoch = v21;
              if ((CMTimeCompare(&time, &time2) & 0x80000000) == 0
                || (Count = CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 792)), Count < 1))
              {
LABEL_25:
                v22 = 0;
                v23 = 0;
LABEL_26:
                hoseSBAR_updateBufferingPriority(v2);
                v24 = *(OpaqueCMTimebase **)(DerivedStorage + 120);
                v25 = *(NSObject **)(DerivedStorage + 544);
                time = v33;
                CMTimebaseSetTimerDispatchSourceNextFireTime(v24, v25, &time, 0);
LABEL_27:
                free(v22);
                free(v23);
                CFRelease(v2);
                return;
              }
              v27 = Count;
              v22 = malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
              if (v22)
              {
                v23 = malloc_type_calloc(v27, 8uLL, 0x6004044C4A2DFuLL);
                if (!v23)
                {
                  APSLogErrorAt(0);
                  goto LABEL_27;
                }
                CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(DerivedStorage + 792), (const void **)v22, (const void **)v23);
                for (i = 0; i != v27; ++i)
                {
                  CMTimeMakeFromDictionary(&v32, *((CFDictionaryRef *)v23 + i));
                  time.value = value;
                  time.timescale = timescale;
                  time.flags = flags;
                  time.epoch = epoch;
                  time2 = v32;
                  if ((CMTimeCompare(&time, &time2) & 0x80000000) == 0)
                  {
                    if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
                      && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
                    {
                      LogPrintF();
                    }
                    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 800), *((const void **)v22 + i));
                    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 792), *((const void **)v22 + i));
                  }
                }
                goto LABEL_26;
              }
              APSLogErrorAt(0);
            }
            v23 = 0;
            goto LABEL_27;
          }
        }
        else
        {
          v7 = 4294954514;
        }
      }
    }
    else
    {
      v7 = 4294954514;
    }
    APSLogErrorAt(v7);
    goto LABEL_13;
  }
}

void hoseSBAR_purgeTimerCancelled(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void hoseSBAR_renewAudioIOAssertionDispatch(const void *a1)
{
  uint64_t DerivedStorage;
  unsigned int v3;
  uint64_t v4;
  dispatch_time_t v5;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_DWORD *)(DerivedStorage + 132);
  if (!v3
    || (v4 = *(_QWORD *)(DerivedStorage + 136),
        v5 = dispatch_time(0, 1000000000 * v3),
        v6 = APSAudioIOAssertionTimingControllerAssertUntilTime(v4, v5),
        !(_DWORD)v6))
  {
    if (!a1)
      return;
    goto LABEL_4;
  }
  APSLogErrorAt(v6);
  if (a1)
LABEL_4:
    CFRelease(a1);
}

uint64_t hoseSBAR_setVolumeFadeInCurve(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v6;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v8;
  CFMutableArrayRef v9;
  __CFArray *v10;
  uint64_t appended;
  const void *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, _QWORD, __CFDictionary *);
  uint64_t v15;
  CMTime rhs;
  CMTime lhs;
  CMTime v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v19, 0, sizeof(v19));
  lhs = *a2;
  rhs = *a3;
  CMTimeAdd(&v19, &lhs, &rhs);
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v15 = 4294894966;
    APSLogErrorAt(0);
    return v15;
  }
  v8 = Mutable;
  v9 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E0C9B378]);
  if (!v9)
  {
    v15 = 4294894966;
    APSLogErrorAt(0);
    goto LABEL_18;
  }
  v10 = v9;
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
  {
    lhs = *a3;
    CMTimeGetSeconds(&lhs);
    lhs = *a2;
    CMTimeGetSeconds(&lhs);
    LogPrintF();
  }
  lhs = *a2;
  appended = FigCFArrayAppendCMTime();
  if ((_DWORD)appended)
  {
    v15 = appended;
    goto LABEL_16;
  }
  appended = FigCFArrayAppendDouble();
  if ((_DWORD)appended)
  {
    v15 = appended;
    goto LABEL_16;
  }
  v12 = (const void *)*MEMORY[0x1E0CC5CD0];
  CFArrayAppendValue(v10, (const void *)*MEMORY[0x1E0CC5CD0]);
  lhs = v19;
  appended = FigCFArrayAppendCMTime();
  if ((_DWORD)appended)
  {
    v15 = appended;
    goto LABEL_16;
  }
  appended = FigCFArrayAppendDouble();
  if ((_DWORD)appended)
  {
    v15 = appended;
    goto LABEL_16;
  }
  CFArrayAppendValue(v10, v12);
  CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E0CC5CD8], v10);
  v13 = *(_QWORD *)(DerivedStorage + 104);
  v14 = *(uint64_t (**)(uint64_t, _QWORD, __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v14)
  {
    v15 = 4294954514;
LABEL_15:
    appended = v15;
LABEL_16:
    APSLogErrorAt(appended);
    goto LABEL_17;
  }
  v15 = v14(v13, *MEMORY[0x1E0CC5DD0], v8);
  if ((_DWORD)v15)
    goto LABEL_15;
LABEL_17:
  CFRelease(v10);
LABEL_18:
  CFRelease(v8);
  return v15;
}

uint64_t hoseSBAR_timedManagerTimerTriggerNotification(uint64_t a1, uint64_t a2)
{
  _BOOL4 v3;
  double v4;
  double v5;
  int Int64Ranged;

  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFBooleanGetTypeID();
  v3 = CFDictionaryGetTypedValue() == *MEMORY[0x1E0C9AE50];
  CFBooleanGetTypeID();
  CFDictionaryGetTypedValue();
  CFDictionaryGetDouble();
  v5 = v4;
  Int64Ranged = CFDictionaryGetInt64Ranged();
  return hoseSBAR_setPreferencesOnAudioSessionSetValues(a2, v3, Int64Ranged, v5);
}

uint64_t hoseSBAR_setPreferencesOnAudioSessionSetValues(uint64_t a1, int a2, int a3, double a4)
{
  uint64_t DerivedStorage;
  int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  const __CFAllocator *v13;
  CFNumberRef v14;
  CFNumberRef v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  CFNumberRef v19;
  CFNumberRef v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (APSIsAPMSpeaker_sCheckOnce != -1)
    dispatch_once(&APSIsAPMSpeaker_sCheckOnce, &__block_literal_global_9);
  v9 = APSIsAPMSpeaker_sIsAPMSpeaker;
  result = FigCFEqual();
  if ((_DWORD)result)
  {
    v11 = 0;
    if (v9)
      return result;
  }
  else
  {
    v11 = *(_QWORD *)(DerivedStorage + 224);
    if (v9)
      return result;
  }
  v12 = *(_QWORD *)(DerivedStorage + 232);
  v33 = a4;
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v14 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat64Type, &v33);
  if (v14)
  {
    v15 = v14;
    v16 = (uint64_t *)MEMORY[0x1E0D49AD0];
    if (v12
      && (v17 = hoseSBAR_setMXSessionPropertyOnAudioSessionIfNecessary(a1, v12, 0, *MEMORY[0x1E0D49AD0], (uint64_t)v14, a2), (_DWORD)v17))
    {
      v29 = v17;
    }
    else
    {
      if (!v11
        || (v17 = hoseSBAR_setMXSessionPropertyOnAudioSessionIfNecessary(a1, v11, 1, *v16, (uint64_t)v15, a2),
            !(_DWORD)v17))
      {
        CFRelease(v15);
        goto LABEL_13;
      }
      v29 = v17;
    }
    APSLogErrorAt(v17);
    CFRelease(v15);
    v30 = v29;
    return APSLogErrorAt(v30);
  }
  APSLogErrorAt(0);
LABEL_13:
  v18 = *(_QWORD *)(DerivedStorage + 232);
  valuePtr = a3;
  v19 = CFNumberCreate(v13, kCFNumberSInt32Type, &valuePtr);
  if (v19)
  {
    v20 = v19;
    v21 = (uint64_t *)MEMORY[0x1E0D49AC0];
    if (v18
      && (v22 = hoseSBAR_setMXSessionPropertyOnAudioSessionIfNecessary(a1, v18, 0, *MEMORY[0x1E0D49AC0], (uint64_t)v19, a2), (_DWORD)v22))
    {
      v31 = v22;
    }
    else
    {
      if (!v11
        || (v22 = hoseSBAR_setMXSessionPropertyOnAudioSessionIfNecessary(a1, v11, 1, *v21, (uint64_t)v20, a2),
            !(_DWORD)v22))
      {
        CFRelease(v20);
        goto LABEL_19;
      }
      v31 = v22;
    }
    APSLogErrorAt(v22);
    CFRelease(v20);
    v30 = v31;
    return APSLogErrorAt(v30);
  }
  APSLogErrorAt(0);
LABEL_19:
  v23 = *(_QWORD *)(DerivedStorage + 232);
  v24 = CMBaseObjectGetDerivedStorage();
  v25 = *(_QWORD *)(v24 + 592);
  if (v25)
  {
    result = *(unsigned int *)(v25 + 56);
  }
  else
  {
    APSLogErrorAt(0);
    result = 4294901760;
  }
  if (*(_BYTE *)(v24 + 241) && (result = APSAudioFormatDoesAudioChannelLayoutTagHaveHeights(result), (_DWORD)result))
    v26 = (uint64_t *)MEMORY[0x1E0D49060];
  else
    v26 = (uint64_t *)MEMORY[0x1E0D49058];
  v27 = *v26;
  v28 = (uint64_t *)MEMORY[0x1E0D49A40];
  if (v23)
  {
    result = hoseSBAR_setMXSessionPropertyOnAudioSessionIfNecessary(a1, v23, 0, *MEMORY[0x1E0D49A40], *v26, a2);
    if ((_DWORD)result)
    {
      v32 = result;
LABEL_41:
      APSLogErrorAt(result);
      v30 = v32;
      return APSLogErrorAt(v30);
    }
  }
  if (v11)
  {
    result = hoseSBAR_setMXSessionPropertyOnAudioSessionIfNecessary(a1, v11, 1, *v28, v27, a2);
    if ((_DWORD)result)
    {
      v32 = result;
      goto LABEL_41;
    }
  }
  return result;
}

uint64_t hoseSBAR_setMXSessionPropertyOnAudioSessionIfNecessary(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  const __CFAllocator *v10;
  const char *v11;
  CFStringRef v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  CFTypeRef cf;

  cf = 0;
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v11 = "Shadow Session";
  if (!a3)
    v11 = "Parent Session";
  v12 = CFStringCreateWithFormat(v10, 0, CFSTR("%s"), v11);
  if (!v12)
  {
    APSLogErrorAt(0);
    v16 = 4294894966;
    goto LABEL_27;
  }
  if (a6)
  {
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
      && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v17 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (v17)
    {
      v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 56);
      if (v18)
      {
        v16 = v18(a2, a4, a5);
        if (!(_DWORD)v16)
          goto LABEL_27;
      }
      else
      {
        v16 = 4294948071;
      }
    }
    else
    {
      v16 = 4294948075;
    }
    v19 = v16;
    goto LABEL_26;
  }
  v13 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (!v13)
  {
    v16 = 4294948075;
LABEL_25:
    v19 = v16;
    goto LABEL_26;
  }
  v14 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v13 + 48);
  if (!v14)
  {
    v16 = 4294948071;
    goto LABEL_25;
  }
  v15 = v14(a2, a4, v10, &cf);
  if ((_DWORD)v15)
  {
    v16 = v15;
    goto LABEL_25;
  }
  if (!FigCFEqual())
  {
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
      && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v21 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (v21)
    {
      v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 56);
      if (v22)
      {
        v16 = v22(a2, a4, a5);
        if (!(_DWORD)v16)
          goto LABEL_27;
      }
      else
      {
        v16 = 4294948071;
      }
    }
    else
    {
      v16 = 4294948075;
    }
    v19 = v16;
LABEL_26:
    APSLogErrorAt(v19);
    goto LABEL_27;
  }
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v16 = 0;
LABEL_27:
  if (cf)
    CFRelease(cf);
  if (v12)
    CFRelease(v12);
  return v16;
}

__n128 hoseSBAR_getMediaTimeForSynchronizerTime(CMTime *a1, uint64_t a2, CMTime *a3)
{
  uint64_t DerivedStorage;
  __n128 *v6;
  __n128 result;
  CMTime v8;
  CMTime lhs;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = (__n128 *)MEMORY[0x1E0CA2E18];
  a1->epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  result = *v6;
  *(__n128 *)&a1->value = *v6;
  if (*(_BYTE *)(DerivedStorage + 128))
  {
    result = *(__n128 *)&a3->value;
    *(_OWORD *)&a1->value = *(_OWORD *)&a3->value;
    a1->epoch = a3->epoch;
  }
  else if ((*(_BYTE *)(DerivedStorage + 508) & 1) != 0)
  {
    lhs = *a3;
    v8 = *(CMTime *)(DerivedStorage + 496);
    CMTimeSubtract(a1, &lhs, &v8);
  }
  return result;
}

void hoseSBAR_maybeTriggerPullAudioBBuffs(void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return;
  v3 = DerivedStorage;
  if (!*(_BYTE *)(DerivedStorage + 353))
  {
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR > 30
      || gLogCategory_APSEndpointStreamAudioHoseSBAR == -1 && !_LogCategory_Initialize())
    {
      return;
    }
LABEL_10:
    LogPrintF();
    return;
  }
  if (!*(_DWORD *)(DerivedStorage + 356))
  {
    CFRetain(a1);
    dispatch_async_f(*(dispatch_queue_t *)(v3 + 280), a1, (dispatch_function_t)hoseSBAR_pullAudioBBuffsDispatchFunction);
    return;
  }
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 30
    && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
  {
    goto LABEL_10;
  }
}

void hoseSBAR_pruneBufferQueueToTimestamp(uint64_t a1, uint64_t a2, opaqueCMBufferQueue *a3)
{
  opaqueCMSampleBuffer *v5;
  opaqueCMSampleBuffer *v6;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMBufferRef v9;
  CMTime time2;
  CMTime time;
  CMTimeValue v12;
  CMTimeScale v13;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  CMBaseObjectGetDerivedStorage();
  if ((*(_BYTE *)(a2 + 12) & 1) == 0 || !a3)
  {
    APSLogErrorAt(0);
    return;
  }
  v5 = (opaqueCMSampleBuffer *)CMBufferQueueCopyHead(a3);
  if (v5)
  {
    v6 = v5;
    do
    {
      CMSampleBufferGetOutputPresentationTimeStamp(&time, v6);
      value = time.value;
      flags = time.flags;
      timescale = time.timescale;
      if ((time.flags & 1) != 0)
      {
        epoch = time.epoch;
      }
      else
      {
        CMBufferQueueGetMinPresentationTimeStamp(&time, a3);
        v12 = time.value;
        flags = time.flags;
        v13 = time.timescale;
        if ((time.flags & 1) == 0)
        {
          if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 30
            && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
LABEL_26:
          CFRelease(v6);
          return;
        }
        epoch = time.epoch;
        if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 30
          && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
        {
          time.value = v12;
          time.timescale = v13;
          time.flags = flags;
          time.epoch = epoch;
          CMTimeGetSeconds(&time);
          LogPrintF();
        }
        value = v12;
        timescale = v13;
      }
      time = *(CMTime *)a2;
      time2.value = value;
      time2.timescale = timescale;
      time2.flags = flags;
      time2.epoch = epoch;
      if (CMTimeCompare(&time, &time2) < 0)
        goto LABEL_26;
      if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 30
        && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
      {
        time.value = value;
        time.timescale = timescale;
        time.flags = flags;
        time.epoch = epoch;
        CMTimeGetSeconds(&time);
        time = *(CMTime *)a2;
        CMTimeGetSeconds(&time);
        LogPrintF();
      }
      v9 = CMBufferQueueDequeueAndRetain(a3);
      if (v9)
        CFRelease(v9);
      CFRelease(v6);
      v6 = (opaqueCMSampleBuffer *)CMBufferQueueCopyHead(a3);
    }
    while (v6);
  }
}

uint64_t hoseSBAR_updateBufferingPriority(const void *a1)
{
  uint64_t DerivedStorage;
  int v3;
  const void *DefaultLocalCenter;
  CMTime v6;
  CMTime rhs;
  CMTime lhs;
  CMTime v9;
  CMTime v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v10, 0, sizeof(v10));
  CMTimebaseGetTime(&v10, *(CMTimebaseRef *)(DerivedStorage + 120));
  v9 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E28];
  if ((*(_BYTE *)(DerivedStorage + 340) & 1) != 0)
  {
    lhs = *(CMTime *)(DerivedStorage + 328);
    rhs = v10;
    CMTimeSubtract(&v9, &lhs, &rhs);
  }
  if (hoseSBAR_getBufferingPriorityThreshold_sHoseSBARBufferingPriorityThresholdOnce != -1)
    dispatch_once(&hoseSBAR_getBufferingPriorityThreshold_sHoseSBARBufferingPriorityThresholdOnce, &__block_literal_global_217);
  v6 = *(CMTime *)hoseSBAR_getBufferingPriorityThreshold_sHoseSBARBufferingPriorityThreshold;
  lhs = v9;
  if (CMTimeCompare(&lhs, &v6) < 0)
    v3 = 36;
  else
    v3 = 37;
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 248));
  if (*(_DWORD *)(DerivedStorage + 268) != v3)
  {
    *(_DWORD *)(DerivedStorage + 268) = v3;
    DefaultLocalCenter = (const void *)CMNotificationCenterGetDefaultLocalCenter();
    APSCMNotificationCenterPostNotificationAsync(DefaultLocalCenter, CFSTR("BufferingPriorityChanged"), a1, 0, 0, *(NSObject **)(DerivedStorage + 8), QOS_CLASS_USER_INITIATED);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 248));
}

double __hoseSBAR_getBufferingPriorityThreshold_block_invoke()
{
  int IntWithOverrideAndDefault;
  double result;
  CMTime v2;

  IntWithOverrideAndDefault = APSSettingsGetIntWithOverrideAndDefault(CFSTR("hoseSBARBufferingPriorityThresholdMs"), 0, 10000);
  CMTimeMake(&v2, IntWithOverrideAndDefault, 1000);
  result = *(double *)&v2.value;
  *(CMTime *)hoseSBAR_getBufferingPriorityThreshold_sHoseSBARBufferingPriorityThreshold = v2;
  return result;
}

void hoseSBAR_pullAudioBBuffsDispatchFunction(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  CFTypeRef v4;
  const __CFAllocator *v5;
  uint64_t v6;
  uint64_t v7;
  const __CFArray *v8;
  CFIndex Count;
  CFMutableArrayRef MutableCopy;
  const void *ValueAtIndex;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t started;
  uint64_t v18;
  CFArrayRef theArray;
  int v20;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    goto LABEL_51;
  v3 = DerivedStorage;
  if (!*(_BYTE *)(DerivedStorage + 353))
  {
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR > 30
      || gLogCategory_APSEndpointStreamAudioHoseSBAR == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_51;
    }
LABEL_60:
    LogPrintF();
    goto LABEL_51;
  }
  if (*(_DWORD *)(DerivedStorage + 356))
  {
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR > 30
      || gLogCategory_APSEndpointStreamAudioHoseSBAR == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_51;
    }
    goto LABEL_60;
  }
  if (hoseSBAR_hoseIsAboveHighWater())
  {
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR > 30
      || gLogCategory_APSEndpointStreamAudioHoseSBAR == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_51;
    }
    goto LABEL_60;
  }
  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 384))
  {
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
      && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_48;
  }
  v4 = 0;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
LABEL_7:
  while (!hoseSBAR_hoseIsAboveHighWater())
  {
    if (v4)
      CFRelease(v4);
    v6 = CMBaseObjectGetDerivedStorage();
    theArray = 0;
    if (!*(_QWORD *)(v6 + 384))
    {
      if (gLogCategory_APSEndpointStreamAudioHoseSBAR > 50
        || gLogCategory_APSEndpointStreamAudioHoseSBAR == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_24;
      }
LABEL_22:
      LogPrintF();
      goto LABEL_24;
    }
    v7 = v6;
    v8 = *(const __CFArray **)(v6 + 360);
    if (v8)
    {
      Count = CFArrayGetCount(v8);
      MutableCopy = *(CFMutableArrayRef *)(v7 + 360);
      if (Count)
        goto LABEL_18;
      if (MutableCopy)
      {
        CFRelease(MutableCopy);
        *(_QWORD *)(v7 + 360) = 0;
      }
    }
    (*(void (**)(_QWORD, const void *, CFArrayRef *, _QWORD))(*(_QWORD *)(v7 + 384) + 8))(*(_QWORD *)(v7 + 392), a1, &theArray, 0);
    if (!theArray || !CFArrayGetCount(theArray))
    {
      *(_BYTE *)(v7 + 353) = 0;
      if (gLogCategory_APSEndpointStreamAudioHoseSBAR > 10
        || gLogCategory_APSEndpointStreamAudioHoseSBAR == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_24;
      }
      goto LABEL_22;
    }
    MutableCopy = CFArrayCreateMutableCopy(v5, 0, theArray);
    *(_QWORD *)(v7 + 360) = MutableCopy;
    if (MutableCopy)
    {
LABEL_18:
      ValueAtIndex = CFArrayGetValueAtIndex(MutableCopy, 0);
      v4 = CFRetain(ValueAtIndex);
      if (v4)
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v7 + 360), 0);
      goto LABEL_25;
    }
    APSLogErrorAt(0);
LABEL_24:
    v4 = 0;
LABEL_25:
    if (theArray)
      CFRelease(theArray);
    if (!v4)
      goto LABEL_48;
    v12 = CMBaseObjectGetDerivedStorage();
    v20 = 0;
    CMBaseObjectGetDerivedStorage();
    if (FigCFEqual())
    {
      (*(void (**)(const void *, CFTypeRef, _QWORD, int *))(*(_QWORD *)(v12 + 96) + 8))(a1, v4, 0, &v20);
      while (1)
      {
        v13 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 600);
        if (!v13)
          break;
        if (*(_BYTE *)(v13 + 16) == 1)
        {
          v14 = *(_DWORD *)(v13 + 20);
          if (((v14 - v20) & 0x800000) == 0 && ((v14 ^ v20) & 0xFFFFFF) != 0)
            break;
        }
        v15 = *(_DWORD *)(v13 + 52);
        if (((v15 - v20) & 0x800000) == 0 && ((v15 ^ v20) & 0xFFFFFF) != 0)
          goto LABEL_7;
        hoseSBAR_discardHeadFlushOperation();
      }
    }
    v16 = hoseSBAR_enqueueAudioBBuffToInternalBuffersInternal((uint64_t)a1, (uint64_t)v4);
    if ((_DWORD)v16)
    {
      v18 = v16;
      APSLogErrorAt(v16);
      goto LABEL_46;
    }
  }
  v18 = 0;
  if (!v4)
    goto LABEL_47;
LABEL_46:
  CFRelease(v4);
LABEL_47:
  if ((_DWORD)v18)
  {
    started = v18;
LABEL_66:
    APSLogErrorAt(started);
    goto LABEL_51;
  }
LABEL_48:
  if (!*(_BYTE *)(v3 + 242))
  {
    started = hoseSBAR_startTheSynchronizerIfNecessary(a1, 1);
    if ((_DWORD)started)
      goto LABEL_66;
  }
  started = hoseSBAR_fillSBARToHighWater((uint64_t)a1);
  if ((_DWORD)started)
    goto LABEL_66;
LABEL_51:
  CFRelease(a1);
}

BOOL hoseSBAR_hoseIsAboveHighWater()
{
  uint64_t DerivedStorage;
  _OWORD *v2;
  CMTime *p_rhs;
  uint64_t v4;
  unsigned int (*v5)(uint64_t);
  CMTime rhs;
  CMTime v7;
  CMTime time2;
  CMTime time1;
  CMTime v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  CMBufferQueueGetDuration(&time1, *(CMBufferQueueRef *)(DerivedStorage + 552));
  time2 = *(CMTime *)(DerivedStorage + 192);
  if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    return 1;
  if ((*(_BYTE *)(DerivedStorage + 316) & 1) == 0)
    return 0;
  v2 = (_OWORD *)(DerivedStorage + 328);
  if (CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 120)) == 0.0)
  {
    *(_OWORD *)&time2.value = *v2;
    time2.epoch = *(_QWORD *)(DerivedStorage + 344);
    v7 = *(CMTime *)(DerivedStorage + 304);
    p_rhs = &v7;
  }
  else
  {
    CMTimebaseGetTime(&rhs, *(CMTimebaseRef *)(DerivedStorage + 120));
    *(_OWORD *)&time2.value = *v2;
    time2.epoch = *(_QWORD *)(DerivedStorage + 344);
    p_rhs = &rhs;
  }
  CMTimeSubtract(&v10, &time2, p_rhs);
  time2 = v10;
  v7 = *(CMTime *)(DerivedStorage + 192);
  if (CMTimeCompare(&time2, &v7) < 0)
    return 0;
  v4 = *(_QWORD *)(DerivedStorage + 104);
  v5 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v5)
    return 1;
  return v5(v4) != 0;
}

void hoseSBAR_discardHeadFlushOperation()
{
  uint64_t DerivedStorage;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(uint64_t **)(DerivedStorage + 600);
  if (v1)
  {
    v2 = *v1;
    v3 = (_QWORD *)v1[1];
    if (*v1)
    {
      *(_QWORD *)(v2 + 8) = v3;
      v3 = (_QWORD *)v1[1];
    }
    else
    {
      *(_QWORD *)(DerivedStorage + 608) = v3;
    }
    *v3 = v2;
    free(v1);
  }
}

uint64_t hoseSBAR_enqueueAudioBBuffToInternalBuffersInternal(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const __CFAllocator *v6;
  uint64_t v7;
  const void *Int64;
  const void *v9;
  CFStringRef v10;
  CFDictionaryRef v11;
  CFDictionaryRef v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const __CFAllocator *v17;
  CFDictionaryRef v18;
  int v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  CMSampleBufferRef v24;
  const void *v25;
  const __CFAllocator *v26;
  uint64_t v27;
  const __CFAllocator *v28;
  const void *v29;
  CMSampleBufferRef v30;
  const __CFArray *SampleAttachmentsArray;
  CFStringRef v32;
  __CFDictionary *ValueAtIndex;
  const void *v34;
  CFTypeRef cf;
  const __CFDictionary *v37;
  CMTime rhs;
  CMTime lhs;
  _BYTE time[28];
  CMAttachmentBearerRef target;
  _OWORD v42[3];
  __int128 v43;
  CFTypeRef v44[2];
  __int128 v45;
  __int128 v46;
  CFUUIDRef uuid[2];
  _OWORD v48[2];
  void *value[2];
  CFTypeRef v50;
  CMSampleBufferRef v51;
  int v52;
  _OWORD v53[2];
  OpaqueCMBlockBuffer *v54;
  uint64_t v55;
  int epoch_high;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v54 = 0;
  memset(v53, 0, 28);
  v52 = 0;
  v55 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 12);
  epoch_high = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 20);
  v51 = 0;
  v50 = 0;
  *(_OWORD *)value = 0u;
  *(_OWORD *)uuid = 0u;
  memset(v48, 0, sizeof(v48));
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  *(_OWORD *)v44 = 0u;
  memset(v42, 0, sizeof(v42));
  target = 0;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, int *))(*(_QWORD *)(DerivedStorage + 96) + 8))(a1, a2, v53, &v52);
  if ((_DWORD)v5)
  {
    v7 = v5;
    goto LABEL_105;
  }
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, OpaqueCMBlockBuffer **, _OWORD *))(*(_QWORD *)(DerivedStorage + 96)
                                                                                     + 16))(a1, a2, &v54, v42);
  if ((_DWORD)v5)
  {
    v7 = v5;
    goto LABEL_105;
  }
  if (LOBYTE(v48[0]))
  {
    if (!CMBlockBufferGetDataLength(v54))
    {
      v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v5 = CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&target);
      v7 = v5;
      if (!(_DWORD)v5)
      {
        Int64 = CFNumberCreate(v6, kCFNumberSInt64Type, &uuid[1]);
        CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA2718], Int64, 1u);
        CMBufferQueueEnqueue(*(CMBufferQueueRef *)(DerivedStorage + 552), target);
        CMBufferQueueEnqueue(*(CMBufferQueueRef *)(DerivedStorage + 560), target);
LABEL_7:
        v9 = 0;
LABEL_8:
        v10 = 0;
        v11 = 0;
        v12 = 0;
        goto LABEL_75;
      }
LABEL_105:
      APSLogErrorAt(v5);
      v9 = 0;
      Int64 = 0;
      goto LABEL_8;
    }
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR > 50
      || gLogCategory_APSEndpointStreamAudioHoseSBAR == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_124;
    }
LABEL_108:
    LogPrintF();
LABEL_124:
    v9 = 0;
    Int64 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v7 = 0;
    goto LABEL_75;
  }
  v13 = *(_QWORD *)&v42[0];
  v14 = *(_QWORD *)&v42[1];
  if (!CMBlockBufferGetDataLength(v54))
  {
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR > 50
      || gLogCategory_APSEndpointStreamAudioHoseSBAR == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_124;
    }
    goto LABEL_108;
  }
  *(_OWORD *)time = v53[0];
  *(_OWORD *)&time[12] = *(_OWORD *)((char *)v53 + 12);
  hoseSBAR_updateRTPRolloverStateAssumingIncreasingTransportTimes(a1, time);
  *(_OWORD *)time = v53[0];
  *(_OWORD *)&time[12] = *(_OWORD *)((char *)v53 + 12);
  hoseSBAR_getMediaTimeForTransportTime(&lhs, a1, (uint64_t)time);
  epoch_high = HIDWORD(lhs.epoch);
  v55 = *(_QWORD *)&lhs.flags;
  rhs = *(CMTime *)(DerivedStorage + 168);
  CMTimeSubtract((CMTime *)time, &lhs, &rhs);
  v15 = *(_QWORD *)time;
  v16 = *(_DWORD *)&time[8];
  v55 = *(_QWORD *)&time[12];
  epoch_high = *(_DWORD *)&time[20];
  if (value[0])
  {
    Int64 = (const void *)CFNumberCreateInt64();
    if (!Int64)
    {
      v7 = 4294894966;
      APSLogErrorAt(0);
      goto LABEL_7;
    }
    v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    *(_QWORD *)time = v15;
    *(_DWORD *)&time[8] = v16;
    *(_QWORD *)&time[12] = v55;
    *(_DWORD *)&time[20] = epoch_high;
    v18 = CMTimeCopyAsDictionary((CMTime *)time, v17);
    if (!v18)
      goto LABEL_126;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 792), Int64, v18);
    if (value[1])
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 800), Int64, value[1]);
    v19 = CFDictionaryContainsKey(*(CFDictionaryRef *)(DerivedStorage + 800), Int64);
    if (v19 && !CFDictionaryContainsKey(*(CFDictionaryRef *)(DerivedStorage + 808), Int64))
    {
      v19 = 1;
    }
    else
    {
      CFRelease(Int64);
      Int64 = 0;
    }
  }
  else
  {
    v19 = 0;
    Int64 = 0;
    v18 = 0;
  }
  *(_QWORD *)time = v15;
  *(_DWORD *)&time[8] = v16;
  *(_QWORD *)&time[12] = v55;
  *(_DWORD *)&time[20] = epoch_high;
  lhs = *(CMTime *)((char *)v48 + 4);
  v20 = hoseSBAR_createSbufWithAudioDataAndOPTS(a1, v54, (CMTime *)time, v13, v45, (uint64_t)Int64, (uint64_t)&lhs, &v51);
  if ((_DWORD)v20)
  {
    v7 = v20;
    APSLogErrorAt(v20);
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    if (!Int64)
      goto LABEL_72;
    goto LABEL_71;
  }
  v21 = 0;
  if (v19 || !value[0])
  {
LABEL_30:
    v37 = v18;
    if (*((_QWORD *)&v42[0] + 1))
    {
      cf = (CFTypeRef)CFNumberCreateInt64();
      if (!cf)
      {
        v29 = v21;
        v7 = 4294894966;
        APSLogErrorAt(0);
        v34 = 0;
        v25 = 0;
        v12 = 0;
        v11 = 0;
        v10 = 0;
        v9 = 0;
        if (!v29)
        {
LABEL_66:
          if (v34)
            CFRelease(v34);
          if (v25)
            CFRelease(v25);
          v18 = v37;
          if (!Int64)
            goto LABEL_72;
          goto LABEL_71;
        }
LABEL_65:
        CFRelease(v29);
        goto LABEL_66;
      }
      CMSetAttachment(v51, CFSTR("HoseSBARSourceAudioFormatIndex"), v21, 0);
      if (v14)
        goto LABEL_33;
    }
    else
    {
      cf = 0;
      if (v14)
      {
LABEL_33:
        v25 = (const void *)CFNumberCreateInt64();
        if (!v25)
        {
          v29 = v21;
          v7 = 4294894966;
          APSLogErrorAt(0);
          v12 = 0;
          goto LABEL_118;
        }
        CMSetAttachment(v51, CFSTR("HoseSBARCryptorID"), v25, 0);
LABEL_37:
        if ((BYTE4(v42[2]) & 1) == 0)
        {
          v12 = 0;
LABEL_45:
          if ((BYTE12(v43) & 1) == 0)
          {
            v11 = 0;
LABEL_53:
            v29 = v21;
            if (v50)
            {
              FigCFEqual();
              v9 = (const void *)CFStringCreateF();
              v30 = v51;
              CMSetAttachment(v51, (CFStringRef)*MEMORY[0x1E0CC4138], v50, 1u);
              FigEndpointStreamAudioEngineSbufTracerDebugPrint();
            }
            else
            {
              v9 = 0;
              v30 = v51;
            }
            if (v44[1])
              CMSetAttachment(v30, (CFStringRef)*MEMORY[0x1E0CA4E40], v44[1], 1u);
            if (!uuid[0])
            {
              v10 = 0;
LABEL_63:
              CMBufferQueueEnqueue(*(CMBufferQueueRef *)(DerivedStorage + 552), v30);
              CMBufferQueueEnqueue(*(CMBufferQueueRef *)(DerivedStorage + 560), v30);
              v7 = 0;
              goto LABEL_64;
            }
            SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(v30, 1u);
            v32 = CFUUIDCreateString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], uuid[0]);
            if (v32)
            {
              v10 = v32;
              ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
              if (ValueAtIndex)
                CFDictionarySetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CA4E28], v10);
              goto LABEL_63;
            }
            APSLogErrorAt(0);
            v7 = 4294894965;
            APSSignalErrorAt(4294894965);
            v10 = 0;
LABEL_64:
            v34 = cf;
            if (!v29)
              goto LABEL_66;
            goto LABEL_65;
          }
          v27 = v15;
          v28 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          *(_OWORD *)time = v43;
          *(CFTypeRef *)&time[16] = v44[0];
          v11 = CMTimeCopyAsDictionary((CMTime *)time, v28);
          if (v11)
          {
            if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
              && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
            {
              *(_OWORD *)time = v43;
              *(CFTypeRef *)&time[16] = v44[0];
              CMTimeGetSeconds((CMTime *)time);
              *(_QWORD *)time = v27;
              *(_DWORD *)&time[8] = v16;
              *(_QWORD *)&time[12] = v55;
              *(_DWORD *)&time[20] = epoch_high;
              CMTimeGetSeconds((CMTime *)time);
              LogPrintF();
            }
            CMSetAttachment(v51, (CFStringRef)*MEMORY[0x1E0CA2720], v11, 1u);
            goto LABEL_53;
          }
          v29 = v21;
          v7 = 4294894966;
          APSLogErrorAt(0);
LABEL_120:
          v10 = 0;
          v9 = 0;
          goto LABEL_64;
        }
        v26 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        *(_OWORD *)time = *(_OWORD *)((char *)&v42[1] + 8);
        *(_QWORD *)&time[16] = *((_QWORD *)&v42[2] + 1);
        v12 = CMTimeCopyAsDictionary((CMTime *)time, v26);
        if (v12)
        {
          if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
            && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
          {
            *(_OWORD *)time = *(_OWORD *)((char *)&v42[1] + 8);
            *(_QWORD *)&time[16] = *((_QWORD *)&v42[2] + 1);
            CMTimeGetSeconds((CMTime *)time);
            *(_QWORD *)time = v15;
            *(_DWORD *)&time[8] = v16;
            *(_QWORD *)&time[12] = v55;
            *(_DWORD *)&time[20] = epoch_high;
            CMTimeGetSeconds((CMTime *)time);
            LogPrintF();
          }
          CMSetAttachment(v51, (CFStringRef)*MEMORY[0x1E0CA2728], v12, 1u);
          goto LABEL_45;
        }
        v29 = v21;
        v7 = 4294894966;
        APSLogErrorAt(0);
LABEL_118:
        v11 = 0;
        goto LABEL_120;
      }
    }
    v25 = 0;
    goto LABEL_37;
  }
  if (*(_BYTE *)(DerivedStorage + 816))
  {
    v21 = 0;
    goto LABEL_30;
  }
  if (Int64)
    CFRelease(Int64);
  v22 = CFNumberCreateInt64();
  if (!v22)
  {
    v7 = 4294894966;
    APSLogErrorAt(0);
    v12 = 0;
    v11 = 0;
    v10 = 0;
    v9 = 0;
    goto LABEL_72;
  }
  Int64 = (const void *)v22;
  v23 = CFNumberCreateInt64();
  if (v23)
  {
    v21 = (const void *)v23;
    v24 = v51;
    CMSetAttachment(v51, CFSTR("HoseSBARMagicCookieID"), Int64, 0);
    CMSetAttachment(v24, CFSTR("HoseSBARAudioFormatIndex"), v21, 0);
    goto LABEL_30;
  }
LABEL_126:
  v7 = 4294894966;
  APSLogErrorAt(0);
  v12 = 0;
  v11 = 0;
  v10 = 0;
  v9 = 0;
LABEL_71:
  CFRelease(Int64);
LABEL_72:
  if (v18)
    CFRelease(v18);
  Int64 = 0;
LABEL_75:
  if (v54)
    CFRelease(v54);
  if (v12)
    CFRelease(v12);
  if (v11)
    CFRelease(v11);
  if (target)
    CFRelease(target);
  if (v51)
    CFRelease(v51);
  if (v10)
    CFRelease(v10);
  if (Int64)
    CFRelease(Int64);
  if (v9)
    CFRelease(v9);
  if (v44[1])
    CFRelease(v44[1]);
  if (uuid[0])
    CFRelease(uuid[0]);
  if (value[1])
    CFRelease(value[1]);
  if (v50)
    CFRelease(v50);
  return v7;
}

uint64_t hoseSBAR_startTheSynchronizerIfNecessary(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  OpaqueCMClock *HostTimeClock;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, __int128 *, CMTime *, float);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, __int128 *, float);
  CMTime v18;
  CMTime v19;
  __int128 v20;
  uint64_t v21;
  CMTime v22;
  __int128 v23;
  uint64_t v24;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v20 = *MEMORY[0x1E0CA2E68];
  v21 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  memset(&v19, 0, sizeof(v19));
  HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime(&v19, HostTimeClock);
  if (!*(_BYTE *)(DerivedStorage + 242))
  {
    v6 = hoseSBAR_enqueueIntoSBARPrimingSBufIfNecessary((uint64_t)a1);
    if ((_DWORD)v6)
    {
      v13 = v6;
      goto LABEL_26;
    }
  }
  if (*(_QWORD *)(DerivedStorage + 136))
  {
    v7 = *(NSObject **)(DerivedStorage + 296);
    if (a1)
      v8 = (void *)CFRetain(a1);
    else
      v8 = 0;
    dispatch_async_f(v7, v8, (dispatch_function_t)hoseSBAR_renewAudioIOAssertionDispatch);
  }
  if (*(_BYTE *)(DerivedStorage + 128))
  {
    if ((*(_BYTE *)(DerivedStorage + 484) & 1) == 0)
      return 0;
    v21 = *(_QWORD *)(DerivedStorage + 488);
    v20 = *(_OWORD *)(DerivedStorage + 472);
    v19 = *(CMTime *)(DerivedStorage + 448);
  }
  v9 = *(_DWORD *)(DerivedStorage + 376);
  if (v9 == 1 || a2 && (*(_BYTE *)(DerivedStorage + 316) & 1) != 0)
    return 0;
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR > 50)
    goto LABEL_18;
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1)
    goto LABEL_16;
  if (_LogCategory_Initialize())
  {
    v9 = *(_DWORD *)(DerivedStorage + 376);
LABEL_16:
    hoseSBAR_synchronizerStateToName(v9);
    LogPrintF();
  }
LABEL_18:
  v10 = *(_QWORD *)(DerivedStorage + 112);
  v18 = v19;
  v11 = *(uint64_t (**)(uint64_t, __int128 *, CMTime *, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v11)
  {
    v13 = 4294954514;
LABEL_25:
    v6 = v13;
LABEL_26:
    APSLogErrorAt(v6);
    return v13;
  }
  v23 = v20;
  v24 = v21;
  v22 = v18;
  v12 = v11(v10, &v23, &v22, 1.0);
  if ((_DWORD)v12)
  {
    v13 = v12;
    goto LABEL_25;
  }
  v13 = hoseSBAR_waitForTimebaseRate(1.0);
  if ((_DWORD)v13)
  {
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 90
      && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v15 = *(_QWORD *)(DerivedStorage + 112);
    v16 = *(void (**)(uint64_t, __int128 *, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v16)
    {
      v23 = *MEMORY[0x1E0CA2E18];
      v24 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      v16(v15, &v23, 0.0);
    }
  }
  else
  {
    CMTimebaseSetTimerDispatchSourceToFireImmediately(*(CMTimebaseRef *)(DerivedStorage + 120), *(dispatch_source_t *)(DerivedStorage + 544));
    v14 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)(DerivedStorage + 496) = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(DerivedStorage + 512) = *(_QWORD *)(v14 + 16);
    hoseSBAR_updateSynchronizerState((uint64_t)a1, 1);
  }
  return v13;
}

uint64_t hoseSBAR_fillSBARToHighWater(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  unsigned int (*v5)(uint64_t);
  uint64_t v6;
  CMTimeEpoch v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  CMBufferRef Head;
  void *v12;
  uint64_t v13;
  uint64_t UInt64;
  uint64_t v15;
  CFMutableDictionaryRef Mutable;
  const void *v17;
  const void *Int64;
  int v19;
  int v20;
  uint64_t Value;
  const __CFData *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  const UInt8 *BytePtr;
  unsigned int Length;
  OpaqueCMBlockBuffer *DataBuffer;
  uint64_t v29;
  const __CFArray *SampleAttachmentsArray;
  CFArrayRef v31;
  const __CFArray *v32;
  int v33;
  opaqueCMSampleBuffer *v34;
  CMBufferRef v35;
  uint64_t v36;
  uint64_t v37;
  opaqueCMSampleBuffer *v38;
  uint64_t v39;
  __int128 v40;
  _OWORD *v41;
  CMTimeValue v42;
  CMTimeScale timescale;
  uint64_t v44;
  const __CFDictionary *v45;
  CFDictionaryRef v46;
  CFTypeRef v47;
  const void *v48;
  CFTypeRef v49;
  const void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  CMTimeValue v55;
  uint64_t (*v56)(uint64_t, uint64_t, CMTimeValue);
  const void *v57;
  uint64_t v58;
  CMSampleBufferRef v59;
  uint64_t (*v60)(uint64_t, CMSampleBufferRef);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  const __CFString *key;
  const __CFString *v69;
  uint64_t v70;
  CMTimeEpoch v71;
  __int128 v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  const __CFAllocator *allocator;
  CFTypeRef cf;
  CMSampleTimingInfo sampleTimingArray;
  CMTime rhs;
  CMTime v80;
  CMTime v81;
  CMTime v82;
  CMTime v83;
  CMTime layoutSize;
  CMTime formatDescriptionOut;
  CMTime sampleSizeArray;
  CMTime sbuf;
  CMTime time1;
  CMTime time;
  CMTimeRange layout;
  CMTime time2;
  CMTime v92;
  CMTimeRange asbd;
  CMSampleBufferRef v94;
  CMTime v95;
  uint64_t v96;
  int epoch_high;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  cf = 0;
  if (!*(_BYTE *)(DerivedStorage + 242)
    && ((*(_BYTE *)(DerivedStorage + 508) & 1) == 0
     || (*(_BYTE *)(DerivedStorage + 460) & 1) == 0
     || (*(_BYTE *)(DerivedStorage + 484) & 1) == 0)
    || CMBufferQueueIsEmpty(*(CMBufferQueueRef *)(DerivedStorage + 560)))
  {
    v37 = 0;
    goto LABEL_180;
  }
  v73 = 0;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  key = (const __CFString *)*MEMORY[0x1E0CA2728];
  v69 = (const __CFString *)*MEMORY[0x1E0CA4E40];
  v67 = *MEMORY[0x1E0CC5D88];
  v74 = a1;
  v70 = v3;
  while (2)
  {
    v4 = *(_QWORD *)(v3 + 104);
    v5 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (!v5 || v5(v4))
    {
      v37 = 0;
      goto LABEL_180;
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    v6 = CMBaseObjectGetDerivedStorage();
    memset(&v92, 0, sizeof(v92));
    CMTimeMake(&v92, 500, 1000);
    v72 = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E18];
    v7 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    time2.epoch = v7;
    time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    v8 = *(_QWORD *)(v6 + 576);
    if (v8 && CFArrayGetCount(*(CFArrayRef *)(v8 + 32)))
    {
      APSLogErrorAt(0);
      APSCMSampleBufferMergerFlush(*(_QWORD *)(v6 + 576));
      v37 = 4294960587;
      goto LABEL_189;
    }
    v71 = v7;
    v9 = 0;
    v10 = 0;
    v75 = v6;
    while (1)
    {
      Head = CMBufferQueueGetHead(*(CMBufferQueueRef *)(v6 + 560));
      if (!Head)
        break;
      v12 = (void *)Head;
      v13 = CMBaseObjectGetDerivedStorage();
      if (!CMGetAttachment(v12, CFSTR("HoseSBARCryptorID"), 0))
        goto LABEL_41;
      UInt64 = FigCFNumberGetUInt64();
      if (!FigCFDictionaryGetValue())
      {
        if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 90
          && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        break;
      }
      v15 = *(_QWORD *)(v13 + 784);
      if (v15 == UInt64)
      {
        Mutable = 0;
        v17 = 0;
        goto LABEL_36;
      }
      if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50)
      {
        if (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize())
          LogPrintF();
        v15 = *(_QWORD *)(v13 + 784);
      }
      if (!v15)
      {
        Mutable = 0;
        v17 = 0;
        goto LABEL_35;
      }
      Int64 = (const void *)CFNumberCreateInt64();
      if (!Int64)
      {
        APSLogErrorAt(0);
        break;
      }
      v17 = Int64;
      CFBagRemoveValue(*(CFMutableBagRef *)(v13 + 768), Int64);
      if (CFBagContainsValue(*(CFBagRef *)(v13 + 768), v17))
      {
        Mutable = 0;
LABEL_35:
        *(_QWORD *)(v13 + 784) = UInt64;
LABEL_36:
        FigSampleBufferSetDecryptor();
        CMRemoveAttachment(v12, CFSTR("HoseSBARCryptorID"));
        v19 = 0;
        v20 = 0;
        if (!v17)
          goto LABEL_38;
        goto LABEL_37;
      }
      if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
        && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v13 + 776), v17);
      Mutable = CFDictionaryCreateMutable(allocator, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        CFDictionarySetInt64();
        CMNotificationCenterGetDefaultLocalCenter();
        a1 = v74;
        FigDispatchAsyncPostNotification();
        goto LABEL_35;
      }
      APSLogErrorAt(0);
      v19 = -72330;
LABEL_37:
      CFRelease(v17);
      v20 = v19;
LABEL_38:
      if (Mutable)
        CFRelease(Mutable);
      v6 = v75;
      if (v20)
        break;
LABEL_41:
      if (v10)
        CFRelease(v10);
      CMBaseObjectGetDerivedStorage();
      sbuf.value = 0;
      sampleSizeArray.value = 0;
      LODWORD(layoutSize.value) = 0;
      formatDescriptionOut.value = 0;
      if (!CMGetAttachment(v12, CFSTR("HoseSBARMagicCookieID"), 0))
      {
        v10 = 0;
        goto LABEL_65;
      }
      memset(&sampleTimingArray, 0, sizeof(sampleTimingArray));
      memset(&asbd, 0, 40);
      memset(&layout, 0, 32);
      FigCFNumberGetUInt64();
      Value = FigCFDictionaryGetValue();
      if (!Value)
      {
        if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 90
          && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
        {
LABEL_81:
          LogPrintF();
        }
LABEL_85:
        v10 = 0;
        v33 = 0;
        goto LABEL_62;
      }
      v22 = (const __CFData *)Value;
      if (!CMGetAttachment(v12, CFSTR("HoseSBARAudioFormatIndex"), 0))
      {
        if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 90
          && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
        {
          goto LABEL_81;
        }
        goto LABEL_85;
      }
      v23 = (const void *)FigCFDictionaryGetValue();
      if (v23)
      {
        formatDescriptionOut.value = (CMTimeValue)CFRetain(v23);
        if (formatDescriptionOut.value)
          goto LABEL_53;
      }
      else
      {
        formatDescriptionOut.value = 0;
      }
      v24 = FigCFNumberGetUInt64();
      v25 = APAudioFormatIndexToASBD(v24, (uint64_t)&asbd);
      if ((_DWORD)v25
        || (v25 = APAudioFormatIndexToAudioChannelLayout(v24, (__int128 *)&layout.start.value, &layoutSize), (_DWORD)v25)
        || (BytePtr = CFDataGetBytePtr(v22),
            Length = CFDataGetLength(v22),
            v25 = CMAudioFormatDescriptionCreate(allocator, (const AudioStreamBasicDescription *)&asbd, LODWORD(layoutSize.value), (const AudioChannelLayout *)&layout, Length, BytePtr, 0, (CMAudioFormatDescriptionRef *)&formatDescriptionOut), (_DWORD)v25))
      {
        APSLogErrorAt(v25);
        goto LABEL_85;
      }
LABEL_53:
      DataBuffer = CMSampleBufferGetDataBuffer((CMSampleBufferRef)v12);
      sampleSizeArray.value = CMBlockBufferGetDataLength(DataBuffer);
      CMSampleBufferGetPresentationTimeStamp(&sampleTimingArray.presentationTimeStamp, (CMSampleBufferRef)v12);
      CMSampleBufferGetDuration(&v95, (CMSampleBufferRef)v12);
      sampleTimingArray.duration = v95;
      CMSampleBufferGetDecodeTimeStamp(&v95, (CMSampleBufferRef)v12);
      sampleTimingArray.decodeTimeStamp = v95;
      v29 = CMSampleBufferCreateReady(allocator, DataBuffer, (CMFormatDescriptionRef)formatDescriptionOut.value, 1, 1, &sampleTimingArray, 1, (const size_t *)&sampleSizeArray, (CMSampleBufferRef *)&sbuf);
      if ((_DWORD)v29)
      {
        APSLogErrorAt(v29);
        if (sbuf.value)
          CFRelease((CFTypeRef)sbuf.value);
        goto LABEL_85;
      }
      SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray((CMSampleBufferRef)v12, 0);
      v31 = CMSampleBufferGetSampleAttachmentsArray((CMSampleBufferRef)sbuf.value, 1u);
      if (SampleAttachmentsArray)
      {
        v32 = v31;
        if (CFArrayGetCount(SampleAttachmentsArray) >= 1)
        {
          CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
          CFArrayGetValueAtIndex(v32, 0);
          FigCFDictionaryAddEntriesToDictionaryWithRecursion();
        }
      }
      CMRemoveAttachment((CMAttachmentBearerRef)sbuf.value, CFSTR("HoseSBARMagicCookieID"));
      CMRemoveAttachment((CMAttachmentBearerRef)sbuf.value, CFSTR("HoseSBARAudioFormatIndex"));
      if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 30
        && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v10 = (void *)sbuf.value;
      sbuf.value = 0;
      v33 = 1;
LABEL_62:
      if (formatDescriptionOut.value)
        CFRelease((CFTypeRef)formatDescriptionOut.value);
      if (!v33)
        break;
LABEL_65:
      if (v10)
        v34 = (opaqueCMSampleBuffer *)v10;
      else
        v34 = (opaqueCMSampleBuffer *)v12;
      CMSampleBufferGetOutputDuration(&time2, v34);
      if (v9)
      {
        sampleTimingArray.duration = time;
        asbd.start = time2;
        CMTimeAdd(&time1, &sampleTimingArray.duration, &asbd.start);
        sampleTimingArray.duration = v92;
        if (CMTimeCompare(&time1, &sampleTimingArray.duration) > 0)
          goto LABEL_97;
      }
      if (!APSCMSampleBufferMergerTryMerge(*(_QWORD *)(v6 + 576), v34))
        break;
      v35 = CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(v6 + 560));
      if (v35)
        CFRelease(v35);
      sampleTimingArray.duration = time;
      asbd.start = time2;
      CMTimeAdd(&time, &sampleTimingArray.duration, &asbd.start);
      if (++v9 == 32)
        goto LABEL_97;
    }
    if (!v9)
    {
      v37 = 0;
      cf = 0;
      goto LABEL_100;
    }
LABEL_97:
    v36 = APSCMSampleBufferMergerCopyMergedSBuf(*(_QWORD *)(v6 + 576), &cf);
    v37 = v36;
    if ((_DWORD)v36)
      APSLogErrorAt(v36);
LABEL_100:
    if (v10)
      CFRelease(v10);
    APSCMSampleBufferMergerFlush(*(_QWORD *)(v6 + 576));
    if ((_DWORD)v37)
    {
LABEL_189:
      v66 = v37;
      goto LABEL_191;
    }
    v38 = (opaqueCMSampleBuffer *)cf;
    if (!cf)
    {
      v37 = 0;
      goto LABEL_183;
    }
    v39 = CMBaseObjectGetDerivedStorage();
    *(_OWORD *)&v95.value = v72;
    v95.epoch = v71;
    v96 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 12);
    epoch_high = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 20);
    v94 = 0;
    v40 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
    *(_OWORD *)&sampleTimingArray.duration.value = *MEMORY[0x1E0CA2E40];
    *(_OWORD *)&sampleTimingArray.duration.epoch = v40;
    *(_OWORD *)&sampleTimingArray.presentationTimeStamp.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
    *(_OWORD *)&asbd.start.value = *(_OWORD *)&sampleTimingArray.duration.value;
    *(_OWORD *)&asbd.start.epoch = v40;
    *(_OWORD *)&asbd.duration.timescale = *(_OWORD *)&sampleTimingArray.presentationTimeStamp.timescale;
    *(_OWORD *)&v92.value = v72;
    v92.epoch = v71;
    CMSampleBufferGetOutputPresentationTimeStamp(&v95, v38);
    v41 = (_OWORD *)(v39 + 520);
    if ((*(_BYTE *)(v39 + 532) & 1) != 0)
    {
      layout.start = v95;
      *(_OWORD *)&time2.value = *v41;
      time2.epoch = *(_QWORD *)(v39 + 536);
      if (CMTimeCompare(&layout.start, &time2) < 0)
      {
        v37 = 0;
        v46 = 0;
        goto LABEL_166;
      }
    }
    time2 = v95;
    hoseSBAR_getSynchronizerTimeForMediaTime(&layout.start, a1, (__n128 *)&time2);
    v42 = layout.start.value;
    timescale = layout.start.timescale;
    v96 = *(_QWORD *)&layout.start.flags;
    epoch_high = HIDWORD(layout.start.epoch);
    v44 = CMSampleBufferCreateCopy(allocator, v38, &v94);
    if ((_DWORD)v44)
    {
      v37 = v44;
LABEL_174:
      APSLogErrorAt(v44);
      v46 = 0;
      goto LABEL_165;
    }
    layout.start.value = v42;
    layout.start.timescale = timescale;
    *(_QWORD *)&layout.start.flags = v96;
    HIDWORD(layout.start.epoch) = epoch_high;
    v44 = CMSampleBufferSetOutputPresentationTimeStamp(v94, &layout.start);
    if ((_DWORD)v44)
    {
      v37 = v44;
      goto LABEL_174;
    }
    CMSampleBufferGetOutputDuration(&time2, v38);
    layout.start = v95;
    CMTimeRangeMake((CMTimeRange *)&sampleTimingArray, &layout.start, &time2);
    if ((*(_BYTE *)(v39 + 532) & 1) != 0
      && (*(_OWORD *)&layout.start.value = *(_OWORD *)&sampleTimingArray.duration.value,
          *(_OWORD *)&layout.start.epoch = *(_OWORD *)&sampleTimingArray.duration.epoch,
          *(_OWORD *)&layout.duration.timescale = *(_OWORD *)&sampleTimingArray.presentationTimeStamp.timescale,
          *(_OWORD *)&time.value = *v41,
          time.epoch = *(_QWORD *)(v39 + 536),
          CMTimeRangeContainsTime(&layout, &time)))
    {
      memset(&layout, 0, 24);
      *(_OWORD *)&time.value = *v41;
      time.epoch = *(_QWORD *)(v39 + 536);
      time1 = v95;
      CMTimeSubtract(&layout.start, &time, &time1);
      v45 = (const __CFDictionary *)CMGetAttachment(v94, key, 0);
      if (v45)
      {
        CMTimeMakeFromDictionary(&v92, v45);
        time1 = v92;
        sbuf = layout.start;
        CMTimeAdd(&time, &time1, &sbuf);
        CMSampleBufferGetOutputDuration(&time1, v94);
        if ((CMTimeCompare(&time, &time1) & 0x80000000) == 0)
        {
          CMSampleBufferGetOutputDuration(&sampleSizeArray, v94);
          formatDescriptionOut = layout.start;
          CMTimeAdd(&sbuf, &sampleSizeArray, &formatDescriptionOut);
          layout.start = sbuf;
        }
      }
      sbuf = layout.start;
      v46 = CMTimeCopyAsDictionary(&sbuf, allocator);
      CMSetAttachment(v94, key, v46, 1u);
    }
    else
    {
      v46 = 0;
    }
    v47 = CMGetAttachment(v94, v69, 0);
    if (FigCFEqual())
    {
      CMRemoveAttachment(v94, v69);
    }
    else
    {
      if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
        && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v48 = *(const void **)(v39 + 824);
      *(_QWORD *)(v39 + 824) = v47;
      if (v47)
        CFRetain(v47);
      if (v48)
        CFRelease(v48);
    }
    v49 = CMGetAttachment(v94, CFSTR("HoseSBARSourceAudioFormatIndex"), 0);
    if (v49)
    {
      v50 = v49;
      if (!FigCFEqual())
      {
        v51 = CMBaseObjectGetDerivedStorage();
        layout.start.value = 0;
        sbuf.value = 0;
        v52 = FigCFNumberGetUInt64();
        if (v52)
        {
          v53 = APSAudioFormatDescriptionCreateWithAudioFormatIndex((uint64_t)allocator, v52, 0, &layout);
          if ((_DWORD)v53)
            goto LABEL_141;
          v53 = layout.start.value;
          if (!layout.start.value)
            goto LABEL_141;
          if (*(_DWORD *)(layout.start.value + 44) >= 3u)
          {
            v53 = APSBadgingConvertAPSourceFormatToMATSourceFormat(layout.start.value, &sbuf.value);
            if ((_DWORD)v53)
              goto LABEL_141;
            if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
              && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            v54 = *(_QWORD *)(v51 + 104);
            v55 = sbuf.value;
            v56 = *(uint64_t (**)(uint64_t, uint64_t, CMTimeValue))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
            if (!v56)
            {
              v53 = 4294954514;
              goto LABEL_141;
            }
            v53 = v56(v54, v67, v55);
            if ((_DWORD)v53)
LABEL_141:
              APSLogErrorAt(v53);
          }
          if (layout.start.value)
            CFRelease((CFTypeRef)layout.start.value);
          if (sbuf.value)
            CFRelease((CFTypeRef)sbuf.value);
        }
        v57 = *(const void **)(v39 + 832);
        *(_QWORD *)(v39 + 832) = v50;
        CFRetain(v50);
        if (v57)
          CFRelease(v57);
      }
    }
    CMRemoveAttachment(v94, CFSTR("HoseSBARSourceAudioFormatIndex"));
    CMSampleBufferGetOutputDuration(&sbuf, v94);
    layout.start.value = v42;
    layout.start.timescale = timescale;
    *(_QWORD *)&layout.start.flags = v96;
    HIDWORD(layout.start.epoch) = epoch_high;
    CMTimeRangeMake(&asbd, &layout.start, &sbuf);
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 30
      && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
    {
      CMTimebaseGetTime(&formatDescriptionOut, *(CMTimebaseRef *)(v39 + 120));
      CMTimeGetSeconds(&formatDescriptionOut);
      layout.start.value = v42;
      layout.start.timescale = timescale;
      *(_QWORD *)&layout.start.flags = v96;
      HIDWORD(layout.start.epoch) = epoch_high;
      CMTimeGetSeconds(&layout.start);
      layout = asbd;
      CMTimeRangeGetEnd(&layoutSize, &layout);
      CMTimeGetSeconds(&layoutSize);
      layout = asbd;
      CMTimeRangeGetEnd(&v83, &layout);
      layout = asbd;
      CMTimeRangeGetEnd(&v82, &layout);
      LogPrintF();
    }
    v58 = *(_QWORD *)(v39 + 104);
    v59 = v94;
    v60 = *(uint64_t (**)(uint64_t, CMSampleBufferRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (!v60)
    {
      v37 = 4294954514;
LABEL_161:
      APSLogErrorAt(v37);
      goto LABEL_165;
    }
    v61 = v60(v58, v59);
    if ((_DWORD)v61)
    {
      v37 = v61;
      goto LABEL_161;
    }
    if ((*(_BYTE *)(v39 + 316) & 1) == 0)
    {
      *(_QWORD *)(v39 + 304) = v42;
      *(_DWORD *)(v39 + 312) = timescale;
      *(_QWORD *)(v39 + 316) = v96;
      *(_DWORD *)(v39 + 324) = epoch_high;
    }
    layout = asbd;
    CMTimeRangeGetEnd(&v81, &layout);
    *(CMTime *)(v39 + 328) = v81;
    v62 = mach_absolute_time();
    if (v62 > *(_QWORD *)(v39 + 632))
    {
      v63 = v62;
      memset(&v81, 0, sizeof(v81));
      CMTimebaseGetTime(&v81, *(CMTimebaseRef *)(v39 + 120));
      memset(&v80, 0, sizeof(v80));
      layout.start.value = v42;
      layout.start.timescale = timescale;
      *(_QWORD *)&layout.start.flags = v96;
      HIDWORD(layout.start.epoch) = epoch_high;
      rhs = v81;
      CMTimeSubtract(&v80, &layout.start, &rhs);
      layout.start = v80;
      CMTimeGetSeconds(&layout.start);
      if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
        && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
      {
        layout.start = v81;
        CMTimeGetSeconds(&layout.start);
        layout.start.value = v42;
        layout.start.timescale = timescale;
        *(_QWORD *)&layout.start.flags = v96;
        HIDWORD(layout.start.epoch) = epoch_high;
        CMTimeGetSeconds(&layout.start);
        layout = asbd;
        CMTimeRangeGetEnd(&rhs, &layout);
        CMTimeGetSeconds(&rhs);
        LogPrintF();
      }
      v64 = *(unsigned int *)(v39 + 640);
      *(_QWORD *)(v39 + 632) = v63 + UpTicksPerSecond() / 0x3E8uLL * v64;
    }
    v37 = 0;
    ++*(_DWORD *)(v39 + 628);
LABEL_165:
    a1 = v74;
LABEL_166:
    v3 = v70;
    if (v94)
      CFRelease(v94);
    if (v46)
      CFRelease(v46);
    if (!(_DWORD)v37)
    {
      ++v73;
      continue;
    }
    break;
  }
  v66 = v37;
LABEL_191:
  APSLogErrorAt(v66);
LABEL_180:
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
LABEL_183:
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 30
    && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v37;
}

__n128 hoseSBAR_getSynchronizerTimeForMediaTime(CMTime *a1, uint64_t a2, __n128 *a3)
{
  uint64_t DerivedStorage;
  __n128 *v6;
  __n128 result;
  CMTime v8;
  CMTime lhs;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = (__n128 *)MEMORY[0x1E0CA2E18];
  a1->epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  result = *v6;
  *(__n128 *)&a1->value = *v6;
  if (*(_BYTE *)(DerivedStorage + 128))
  {
    result = *a3;
    *(__n128 *)&a1->value = *a3;
    a1->epoch = a3[1].n128_i64[0];
  }
  else if ((*(_BYTE *)(DerivedStorage + 508) & 1) != 0)
  {
    lhs = *(CMTime *)(DerivedStorage + 496);
    v8 = *(CMTime *)a3->n128_u8;
    CMTimeAdd(a1, &lhs, &v8);
  }
  return result;
}

uint64_t hoseSBAR_enqueueIntoSBARPrimingSBufIfNecessary(uint64_t a1)
{
  uint64_t DerivedStorage;
  opaqueCMSampleBuffer *Head;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  CFTypeRef v8;
  uint64_t (*v9)(uint64_t, CFTypeRef);
  uint64_t v10;
  CMTime time;
  CFTypeRef cf;
  CMBlockBufferRef blockBufferOut;
  CMTime v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v15, 0, sizeof(v15));
  CMTimeMake(&v15, -1, 1);
  cf = 0;
  blockBufferOut = 0;
  if (*(_BYTE *)(DerivedStorage + 568))
    goto LABEL_24;
  if (*(_BYTE *)(DerivedStorage + 128))
  {
    Head = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(DerivedStorage + 560));
    if (Head)
    {
      CMSampleBufferGetOutputPresentationTimeStamp(&time, Head);
      *(_QWORD *)&v15.timescale = *(_QWORD *)&time.timescale;
      v15.epoch = time.epoch;
      v15.value = time.value - time.timescale;
      goto LABEL_5;
    }
LABEL_24:
    v10 = 0;
    goto LABEL_19;
  }
LABEL_5:
  v4 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0x40uLL, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0x40uLL, 1u, &blockBufferOut);
  if ((_DWORD)v4)
  {
    v10 = v4;
  }
  else
  {
    v5 = *(_QWORD *)(DerivedStorage + 592);
    if (v5)
      v6 = *(_QWORD *)(v5 + 96);
    else
      v6 = 0;
    time = v15;
    v4 = hoseSBAR_createSbufWithAudioDataAndOPTS(a1, blockBufferOut, &time, v6, 0, 0, MEMORY[0x1E0CA2E18], (CMSampleBufferRef *)&cf);
    if ((_DWORD)v4)
    {
      v10 = v4;
    }
    else
    {
      if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
        && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
      {
        time = v15;
        CMTimeGetSeconds(&time);
        LogPrintF();
      }
      v7 = *(_QWORD *)(DerivedStorage + 104);
      v8 = cf;
      v9 = *(uint64_t (**)(uint64_t, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v9)
      {
        v10 = v9(v7, v8);
        if (!(_DWORD)v10)
        {
          *(_BYTE *)(DerivedStorage + 568) = 1;
          goto LABEL_19;
        }
      }
      else
      {
        v10 = 4294954514;
      }
      v4 = v10;
    }
  }
  APSLogErrorAt(v4);
LABEL_19:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (cf)
    CFRelease(cf);
  return v10;
}

const char *hoseSBAR_synchronizerStateToName(int a1)
{
  if (!a1)
    return "Stopped";
  if (a1 == 1)
    return "Started";
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 90
    && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return "Unknown?";
}

uint64_t hoseSBAR_waitForTimebaseRate(double a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  double v4;
  uint64_t v5;
  double *Instance;
  double *v7;
  dispatch_semaphore_t v8;
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  dispatch_time_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
  {
    CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 120));
    LogPrintF();
  }
  if (CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 120)) == a1)
  {
    v10 = 0;
    goto LABEL_28;
  }
  v3 = *(const void **)(DerivedStorage + 120);
  if (!v3)
  {
    v5 = 4294894965;
    goto LABEL_36;
  }
  v4 = fabs(a1);
  if (v4 >= INFINITY && v4 <= INFINITY)
  {
    v5 = 4294894965;
LABEL_36:
    APSLogErrorAt(0);
LABEL_41:
    APSLogErrorAt(v5);
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 90
      && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return v5;
  }
  if (gAPSEndpointStreamAudioHoseSBARTimebaseRateChangeListenerInitOnce != -1)
    dispatch_once_f(&gAPSEndpointStreamAudioHoseSBARTimebaseRateChangeListenerInitOnce, 0, (dispatch_function_t)_APSEndpointStreamAudioHoseSBARTimebaseRateChangeListenerGetTypeID);
  Instance = (double *)_CFRuntimeCreateInstance();
  if (!Instance)
  {
    APSLogErrorAt(0);
    v5 = 4294960568;
    goto LABEL_41;
  }
  v7 = Instance;
  Instance[2] = 0.0;
  Instance[3] = 0.0;
  Instance[4] = 0.0;
  *((_QWORD *)Instance + 3) = CFRetain(v3);
  v7[2] = a1;
  v8 = dispatch_semaphore_create(0);
  *((_QWORD *)v7 + 4) = v8;
  if (!v8)
  {
    APSLogErrorAt(0);
    v5 = 4294894966;
LABEL_40:
    CFRelease(v7);
    goto LABEL_41;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  v9 = FigNotificationCenterAddWeakListener();
  if ((_DWORD)v9)
  {
    v5 = v9;
    APSLogErrorAt(v9);
    goto LABEL_40;
  }
  v10 = CFRetain(v7);
  CFRelease(v7);
  if (CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 120)) != a1)
  {
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
      && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v11 = v10[4];
    v12 = dispatch_time(0, 2500000000);
    if (dispatch_semaphore_wait(v11, v12))
    {
      if (CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 120)) != a1)
      {
        APSLogErrorAt(0);
        if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 90
          && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
        {
          CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 120));
          LogPrintF();
        }
        v5 = 4294960574;
        goto LABEL_33;
      }
      if (gLogCategory_APSEndpointStreamAudioHoseSBAR > 50)
      {
        v5 = 0;
LABEL_33:
        CFRelease(v10);
        return v5;
      }
      if (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize())
        LogPrintF();
    }
  }
LABEL_28:
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
  {
    CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 120));
    LogPrintF();
  }
  v5 = 0;
  if (v10)
    goto LABEL_33;
  return v5;
}

uint64_t hoseSBAR_updateSynchronizerState(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;

  result = CMBaseObjectGetDerivedStorage();
  v4 = result;
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50)
  {
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
    {
      hoseSBAR_synchronizerStateToName(*(_DWORD *)(v4 + 376));
      hoseSBAR_synchronizerStateToName(a2);
      CMTimebaseGetRate(*(CMTimebaseRef *)(v4 + 120));
      result = LogPrintF();
    }
  }
  *(_DWORD *)(v4 + 376) = a2;
  return result;
}

uint64_t _APSEndpointStreamAudioHoseSBARTimebaseRateChangeListenerGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSEndpointStreamAudioHoseSBARTimebaseRateChangeListenerTypeID = result;
  return result;
}

uint64_t hoseSBARTimebaseRateChangeListener_timebaseRateChangedNotification(uint64_t a1, uint64_t a2)
{
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
  {
    CMTimebaseGetRate(*(CMTimebaseRef *)(a2 + 24));
    LogPrintF();
  }
  if (CMTimebaseGetRate(*(CMTimebaseRef *)(a2 + 24)) != *(double *)(a2 + 16))
    return APSLogErrorAt(0);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a2 + 32));
  CMNotificationCenterGetDefaultLocalCenter();
  return FigNotificationCenterRemoveWeakListener();
}

void _APSEndpointStreamAudioHoseSBARTimebaseRateChangeListenerFinalize(uint64_t a1)
{
  const void *v2;
  NSObject *v3;

  if (*(_QWORD *)(a1 + 24))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    v2 = *(const void **)(a1 + 24);
    if (v2)
      CFRelease(v2);
  }
  v3 = *(NSObject **)(a1 + 32);
  if (v3)
    dispatch_release(v3);
}

uint64_t hoseSBAR_createSbufWithAudioDataAndOPTS(uint64_t a1, OpaqueCMBlockBuffer *a2, CMTime *a3, unint64_t a4, UInt32 a5, uint64_t a6, uint64_t a7, CMSampleBufferRef *a8)
{
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  UInt32 mFramesPerPacket;
  uint64_t v19;
  int v20;
  BOOL v21;
  BOOL v22;
  const opaqueCMFormatDescription *v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  AudioFormatID v28;
  unsigned __int16 v29;
  unsigned __int16 v30;
  int v31;
  unsigned __int16 v32;
  unsigned __int16 v33;
  BOOL v34;
  CMSampleBufferRef *v35;
  int v36;
  const __CFAllocator *v37;
  size_t v38;
  const void *value;
  uint64_t v40;
  const void *v41;
  const void *v42;
  const void *v43;
  uint64_t v44;
  const __CFAllocator *v45;
  __CFDictionary *Mutable;
  __CFDictionary *v47;
  uint64_t v48;
  uint64_t v49;
  _BOOL4 v50;
  int v51;
  uint64_t v52;
  CFDictionaryRef v53;
  CFDictionaryRef v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t DerivedStorage;
  UInt32 mChannelsPerFrame;
  AudioFormatID mFormatID;
  CMTime *v62;
  uint64_t v63;
  CMTime formatDescriptionOut;
  CMSampleTimingInfo sampleTimingArray;
  AudioStreamPacketDescription packetDescriptions;
  CMSampleBufferRef v69;
  CMSampleBufferRef sampleBufferOut;
  CFTypeRef cf;
  size_t layoutSize;
  CMTime magicCookie;
  CMTime theData;
  CMTime rhs;
  CMAudioFormatDescriptionRef valuePtr;
  AudioStreamBasicDescription asbd;
  AudioChannelLayout layout;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v69 = 0;
  sampleBufferOut = 0;
  packetDescriptions.mStartOffset = 0;
  *(_QWORD *)&packetDescriptions.mVariableFramesInPacket = 0;
  v14 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 48);
  *(_OWORD *)&sampleTimingArray.presentationTimeStamp.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 32);
  *(_OWORD *)&sampleTimingArray.decodeTimeStamp.value = v14;
  sampleTimingArray.decodeTimeStamp.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E90] + 64);
  v15 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 16);
  *(_OWORD *)&sampleTimingArray.duration.value = *MEMORY[0x1E0CA2E90];
  *(_OWORD *)&sampleTimingArray.duration.epoch = v15;
  v16 = CMBaseObjectGetDerivedStorage();
  memset(&asbd, 0, sizeof(asbd));
  memset(&layout, 0, sizeof(layout));
  layoutSize = 0;
  magicCookie.value = 0;
  memset(&rhs, 0, sizeof(rhs));
  valuePtr = 0;
  theData.value = 0;
  formatDescriptionOut.value = 0;
  v17 = APAudioFormatIndexToASBD(a4, (uint64_t)&asbd);
  if ((_DWORD)v17)
  {
    v24 = v17;
    goto LABEL_209;
  }
  mFramesPerPacket = asbd.mFramesPerPacket;
  if (a5)
    mFramesPerPacket = a5;
  asbd.mFramesPerPacket = mFramesPerPacket;
  if (!*(_QWORD *)(v16 + 584))
    goto LABEL_15;
  v19 = *(_QWORD *)(v16 + 592);
  if (!v19)
  {
    if (!a4)
    {
      APSLogErrorAt(0);
      v20 = 0;
      mFramesPerPacket = asbd.mFramesPerPacket;
      goto LABEL_8;
    }
LABEL_15:
    v21 = 0;
    v22 = a6 == 0;
    goto LABEL_16;
  }
  if (*(_QWORD *)(v19 + 96) != a4)
    goto LABEL_15;
  v20 = *(_DWORD *)(v19 + 36);
LABEL_8:
  v21 = v20 == mFramesPerPacket;
  v22 = a6 == 0;
  if (!a6 && v20 == mFramesPerPacket)
  {
    v23 = (const opaqueCMFormatDescription *)CFRetain(*(CFTypeRef *)(v16 + 584));
    v24 = 0;
LABEL_11:
    v25 = 0;
    goto LABEL_158;
  }
LABEL_16:
  mChannelsPerFrame = asbd.mChannelsPerFrame;
  mFormatID = asbd.mFormatID;
  if (a4 > 0x3F || ((1 << a4) & 0xC03E000E00000000) == 0)
  {
    v26 = *(_BYTE *)(v16 + 241) != 0;
    goto LABEL_28;
  }
  if (!*(_BYTE *)(v16 + 241))
  {
    if (hoseSBAR_allowAtmosPlayback_initOnce != -1)
      dispatch_once(&hoseSBAR_allowAtmosPlayback_initOnce, &__block_literal_global_713);
    if ((hoseSBAR_allowAtmosPlayback_isAtmosAllowed & 1) != 0)
    {
      v26 = 0;
      goto LABEL_28;
    }
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
      && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v28 = 1902207795;
    if ((int)asbd.mFormatID <= 1902207794)
    {
      if ((int)asbd.mFormatID <= 1685220712)
      {
        if ((int)asbd.mFormatID <= 1667524656)
        {
          if ((int)asbd.mFormatID <= 1667326823)
          {
            if (asbd.mFormatID == 1633771875 || asbd.mFormatID == 1667312947)
              goto LABEL_114;
            v30 = 24931;
          }
          else if ((int)asbd.mFormatID > 1667330146)
          {
            if (asbd.mFormatID == 1667330147)
              goto LABEL_114;
            v30 = 30307;
          }
          else
          {
            if (asbd.mFormatID == 1667326824)
              goto LABEL_114;
            v30 = 25456;
          }
          v31 = v30 | 0x63610000;
          goto LABEL_113;
        }
        if ((int)asbd.mFormatID <= 1667656802)
        {
          if (asbd.mFormatID == 1667524657 || asbd.mFormatID == 1667574579)
            goto LABEL_114;
          v31 = 1667575091;
          goto LABEL_113;
        }
        if ((int)asbd.mFormatID > 1668047202)
        {
          if (asbd.mFormatID != 1668047203)
          {
            v31 = 1668641633;
            goto LABEL_113;
          }
        }
        else if (asbd.mFormatID != 1667656803)
        {
          v31 = 1667790435;
          goto LABEL_113;
        }
        goto LABEL_114;
      }
      if ((int)asbd.mFormatID <= 1885430578)
      {
        if ((int)asbd.mFormatID <= 1701733237)
        {
          if (asbd.mFormatID == 1685220713 || asbd.mFormatID == 1700886115)
            goto LABEL_114;
          v31 = 1701733217;
          goto LABEL_113;
        }
        if ((int)asbd.mFormatID > 1882599479)
        {
          if (asbd.mFormatID != 1882599480)
          {
            v31 = 1885430115;
            goto LABEL_113;
          }
        }
        else if (asbd.mFormatID != 1701733238)
        {
          v31 = 1869117027;
          goto LABEL_113;
        }
        goto LABEL_114;
      }
      if ((int)asbd.mFormatID <= 1885547314)
      {
        if (asbd.mFormatID - 1885430579 <= 0x3D && ((1 << (LOBYTE(asbd.mFormatID) - 51)) & 0x2020000000000001) != 0)
          goto LABEL_114;
        goto LABEL_197;
      }
      if ((int)asbd.mFormatID <= 1886745440)
      {
        if (asbd.mFormatID != 1885547315)
        {
          v31 = 1885692723;
          goto LABEL_113;
        }
        goto LABEL_114;
      }
      if (asbd.mFormatID == 1886745441)
        goto LABEL_114;
      v32 = 24931;
    }
    else
    {
      if ((int)asbd.mFormatID > 1902667125)
      {
        if ((int)asbd.mFormatID > 2053202738)
        {
          if ((int)asbd.mFormatID <= 2053319474)
          {
            if (asbd.mFormatID - 2053202739 <= 0x3D
              && ((1 << (LOBYTE(asbd.mFormatID) - 51)) & 0x2020000000000001) != 0)
            {
              goto LABEL_114;
            }
            v29 = 30307;
            goto LABEL_108;
          }
          if ((int)asbd.mFormatID <= 2053923170)
          {
            if (asbd.mFormatID != 2053319475)
            {
              v31 = 2053464883;
              goto LABEL_113;
            }
            goto LABEL_114;
          }
          if (asbd.mFormatID == 2053923171)
            goto LABEL_114;
          v31 = 2054517601;
LABEL_113:
          if (asbd.mFormatID == v31)
            goto LABEL_114;
LABEL_197:
          v28 = 1700998451;
          goto LABEL_114;
        }
        if ((int)asbd.mFormatID <= 1902998903)
        {
          if (asbd.mFormatID == 1902667126 || asbd.mFormatID == 1902671459)
            goto LABEL_114;
          v31 = 1902928227;
          goto LABEL_113;
        }
        if ((int)asbd.mFormatID > 1903587384)
        {
          if (asbd.mFormatID != 1903587385)
          {
            v29 = 24931;
LABEL_108:
            v31 = v29 | 0x7A610000;
            goto LABEL_113;
          }
        }
        else if (asbd.mFormatID != 1902998904)
        {
          v31 = 1903522657;
          goto LABEL_113;
        }
LABEL_114:
        asbd.mFormatID = v28;
        asbd.mChannelsPerFrame = 6;
        *(_BYTE *)(v16 + 816) = 1;
        v27 = 50;
LABEL_115:
        v17 = APAudioFormatIndexToAudioChannelLayout(v27, (__int128 *)&layout, (_DWORD *)&layoutSize + 1);
        if (!(_DWORD)v17)
          goto LABEL_116;
        v24 = v17;
LABEL_209:
        APSLogErrorAt(v17);
        v23 = 0;
        goto LABEL_11;
      }
      if ((int)asbd.mFormatID > 1902324530)
      {
        if ((int)asbd.mFormatID <= 1902405732)
        {
          if (asbd.mFormatID == 1902324531 || asbd.mFormatID == 1902403958)
            goto LABEL_114;
          v33 = 26673;
        }
        else
        {
          if ((int)asbd.mFormatID > 1902469938)
          {
            if (asbd.mFormatID == 1902469939)
              goto LABEL_114;
            v31 = 1902537827;
            goto LABEL_113;
          }
          if (asbd.mFormatID == 1902405733)
            goto LABEL_114;
          v33 = 28024;
        }
        v31 = v33 | 0x71640000;
        goto LABEL_113;
      }
      if (asbd.mFormatID - 1902207795 <= 0x3D && ((1 << (LOBYTE(asbd.mFormatID) - 51)) & 0x2020000000000001) != 0
        || asbd.mFormatID - 1902212657 <= 0x34 && ((1 << (LOBYTE(asbd.mFormatID) - 49)) & 0x14000000000001) != 0)
      {
        goto LABEL_114;
      }
      v32 = 28771;
    }
    v31 = v32 | 0x71610000;
    goto LABEL_113;
  }
  v26 = 1;
LABEL_28:
  *(_BYTE *)(v16 + 816) = 0;
  v27 = a4;
  if (a4 > 0x3F)
    goto LABEL_115;
  v27 = a4;
  if (((1 << a4) & 0xC03E000E00000000) == 0)
    goto LABEL_115;
  v27 = a4;
  if (!v26)
    goto LABEL_115;
LABEL_116:
  v62 = a3;
  v63 = a1;
  if (FigCFDictionaryGetValueIfPresent() && !*(_BYTE *)(v16 + 816))
  {
    v34 = v21;
    v35 = a8;
    magicCookie.value = (CMTimeValue)CFDataGetBytePtr((CFDataRef)theData.value);
    LODWORD(layoutSize) = CFDataGetLength((CFDataRef)theData.value);
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
      && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
    {
      FigCFNumberGetUInt64();
      LogPrintF();
    }
  }
  else
  {
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
      && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if ((asbd.mFormatID & 0xEFFFFFFF) == 0x616C6163)
    {
      v34 = v21;
      v35 = a8;
      LODWORD(rhs.value) = bswap32(asbd.mFramesPerPacket);
      BYTE4(rhs.value) = 0;
      BYTE5(rhs.value) = APAudioFormatIndexGetBitsPerChannel(a4);
      HIWORD(rhs.value) = 2600;
      LOBYTE(rhs.timescale) = 14;
      BYTE1(rhs.timescale) = asbd.mChannelsPerFrame;
      HIWORD(rhs.timescale) = -256;
      *(_QWORD *)&rhs.flags = 0;
      HIDWORD(rhs.epoch) = bswap32(asbd.mSampleRate);
      magicCookie.value = (CMTimeValue)&rhs;
      LODWORD(layoutSize) = 24;
      goto LABEL_136;
    }
    v34 = v21;
    if ((int)asbd.mFormatID > 1667330146)
    {
      v35 = a8;
      if (asbd.mFormatID == 1667330147)
      {
LABEL_133:
        APAudioFormatGetMagicCookieForAPAC(a4, &magicCookie, (int *)&layoutSize, asbd.mSampleRate);
        goto LABEL_136;
      }
      v36 = 1902211171;
LABEL_132:
      if (asbd.mFormatID != v36)
        goto LABEL_136;
      goto LABEL_133;
    }
    v35 = a8;
    if (asbd.mFormatID != 1633772320)
    {
      v36 = 1634754915;
      goto LABEL_132;
    }
    APAudioFormatGetMagicCookieForAACLC(asbd.mChannelsPerFrame, &magicCookie, (int *)&layoutSize, asbd.mSampleRate);
  }
LABEL_136:
  v37 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v38 = layoutSize;
  value = (const void *)magicCookie.value;
  v40 = CMAudioFormatDescriptionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &asbd, HIDWORD(layoutSize), &layout, layoutSize, (const void *)magicCookie.value, 0, (CMAudioFormatDescriptionRef *)&formatDescriptionOut);
  if ((_DWORD)v40)
  {
    v24 = v40;
LABEL_204:
    APSLogErrorAt(v40);
    v23 = 0;
    v25 = 0;
    a8 = v35;
    goto LABEL_206;
  }
  v41 = *(const void **)(v16 + 584);
  v42 = (const void *)formatDescriptionOut.value;
  *(_QWORD *)(v16 + 584) = formatDescriptionOut.value;
  if (v42)
    CFRetain(v42);
  if (v41)
    CFRelease(v41);
  if (!v22)
    FigCFDictionarySetValue();
  v43 = *(const void **)(v16 + 592);
  if (v43)
    CFRelease(v43);
  asbd.mFormatID = mFormatID;
  asbd.mChannelsPerFrame = mChannelsPerFrame;
  v40 = APAudioFormatIndexToAudioChannelLayout(a4, (__int128 *)&layout, (_DWORD *)&layoutSize + 1);
  if ((_DWORD)v40)
  {
    v24 = v40;
    goto LABEL_204;
  }
  v40 = CMAudioFormatDescriptionCreate(v37, &asbd, HIDWORD(layoutSize), &layout, v38, value, 0, &valuePtr);
  if ((_DWORD)v40)
  {
    v24 = v40;
    goto LABEL_204;
  }
  v44 = APSAudioFormatDescriptionCreateWithCMFormatDescription(v37, valuePtr, (_QWORD *)(v16 + 592));
  a8 = v35;
  if (!(_DWORD)v44)
  {
    v23 = (const opaqueCMFormatDescription *)formatDescriptionOut.value;
    formatDescriptionOut.value = 0;
    if (v34)
    {
      v25 = 0;
      v24 = 0;
      a3 = v62;
      a1 = v63;
      goto LABEL_160;
    }
    cf = 0;
    APSAudioFormatDescriptionCopyDebugString(*(_QWORD *)(v16 + 592), (CFStringRef *)&cf);
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
      && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    a3 = v62;
    if (cf)
      CFRelease(cf);
    v24 = 0;
    v25 = 1;
    goto LABEL_157;
  }
  v24 = v44;
  APSLogErrorAt(v44);
  v23 = 0;
  v25 = 0;
LABEL_206:
  a3 = v62;
LABEL_157:
  a1 = v63;
LABEL_158:
  if (formatDescriptionOut.value)
    CFRelease((CFTypeRef)formatDescriptionOut.value);
LABEL_160:
  if (valuePtr)
    CFRelease(valuePtr);
  if ((_DWORD)v24)
  {
    APSLogErrorAt(v24);
    v47 = 0;
    goto LABEL_188;
  }
  v45 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (v25)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v47 = Mutable;
    if (!Mutable)
    {
      APSLogErrorAt(0);
      v24 = 4294894966;
      goto LABEL_188;
    }
    CFDictionarySetValue(Mutable, CFSTR("AudioFormat"), *(const void **)(DerivedStorage + 592));
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 120)) != 0.0)
    {
      formatDescriptionOut = *a3;
      v48 = CMBaseObjectGetDerivedStorage();
      v49 = *(_QWORD *)(v48 + 592);
      if (v49)
      {
        v50 = *(_DWORD *)(v49 + 44) > 2u;
      }
      else
      {
        APSLogErrorAt(0);
        v49 = *(_QWORD *)(v48 + 592);
        if (!v49)
        {
          APSLogErrorAt(0);
          v49 = *(_QWORD *)(v48 + 592);
          valuePtr = 0;
          if (!v49)
          {
            APSLogErrorAt(0);
            v50 = 0;
            v51 = 0;
LABEL_170:
            LODWORD(cf) = v51;
            CMTimeMake(&rhs, 1, 1);
            theData = formatDescriptionOut;
            CMTimeSubtract(&formatDescriptionOut, &theData, &rhs);
            if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
              && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
            {
              CMTimebaseGetTime(&magicCookie, *(CMTimebaseRef *)(v48 + 120));
              CMTimeGetSeconds(&magicCookie);
              theData = formatDescriptionOut;
              CMTimeGetSeconds(&theData);
              LogPrintF();
            }
            *(_OWORD *)&asbd.mSampleRate = xmmword_1E8289438;
            *(_OWORD *)&asbd.mBytesPerPacket = *(_OWORD *)off_1E8289448;
            v52 = *MEMORY[0x1E0C9AE50];
            if (!v50)
              v52 = *MEMORY[0x1E0C9AE40];
            *(_QWORD *)&layout.mChannelLayoutTag = *MEMORY[0x1E0C9AE40];
            *(_QWORD *)&layout.mNumberChannelDescriptions = v52;
            *(_QWORD *)&layout.mChannelDescriptions[0].mChannelFlags = CFNumberCreate(v45, kCFNumberFloat64Type, &valuePtr);
            *(_QWORD *)&layout.mChannelDescriptions[0].mCoordinates[1] = CFNumberCreate(v45, kCFNumberSInt32Type, &cf);
            v53 = CFDictionaryCreate(v45, (const void **)&asbd, (const void **)&layout, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (v53)
            {
              v54 = v53;
              v55 = *(_QWORD *)(v48 + 840);
              theData = formatDescriptionOut;
              v56 = APSTimedInfoManagerAddTimedInfo(v55, (__int128 *)&theData.value, v54);
              if ((_DWORD)v56)
                APSLogErrorAt(v56);
              CFRelease(v54);
            }
            else
            {
              APSLogErrorAt(0);
            }
            goto LABEL_182;
          }
          v50 = 0;
LABEL_169:
          v51 = *(_DWORD *)(v49 + 44);
          goto LABEL_170;
        }
        v50 = 0;
      }
      valuePtr = *(CMAudioFormatDescriptionRef *)(v49 + 16);
      goto LABEL_169;
    }
    hoseSBAR_setPreferencesOnAudioSession(a1, 0);
  }
  else
  {
    v47 = 0;
  }
LABEL_182:
  packetDescriptions.mStartOffset = 0;
  packetDescriptions.mVariableFramesInPacket = 352;
  packetDescriptions.mDataByteSize = CMBlockBufferGetDataLength(a2);
  *(_OWORD *)&asbd.mSampleRate = *(_OWORD *)&a3->value;
  *(_QWORD *)&asbd.mBytesPerPacket = a3->epoch;
  v57 = CMAudioSampleBufferCreateReadyWithPacketDescriptions(v45, a2, v23, 1, (CMTime *)&asbd, &packetDescriptions, &sampleBufferOut);
  if ((_DWORD)v57)
  {
    v24 = v57;
  }
  else
  {
    v57 = APSAPACApplyIndependentDecodableDependancy(sampleBufferOut);
    if ((_DWORD)v57)
    {
      v24 = v57;
    }
    else
    {
      if ((*(_BYTE *)(a7 + 12) & 1) == 0)
      {
        v24 = 0;
        *a8 = sampleBufferOut;
        sampleBufferOut = 0;
        goto LABEL_188;
      }
      CMSampleBufferGetPresentationTimeStamp(&sampleTimingArray.presentationTimeStamp, sampleBufferOut);
      *(_OWORD *)&sampleTimingArray.duration.value = *(_OWORD *)a7;
      sampleTimingArray.duration.epoch = *(_QWORD *)(a7 + 16);
      v57 = CMSampleBufferCreateCopyWithNewTiming(v45, sampleBufferOut, 1, &sampleTimingArray, &v69);
      v24 = v57;
      if (!(_DWORD)v57)
      {
        *a8 = v69;
        v69 = 0;
        goto LABEL_188;
      }
    }
  }
  APSLogErrorAt(v57);
LABEL_188:
  if (v23)
    CFRelease(v23);
  if (sampleBufferOut)
    CFRelease(sampleBufferOut);
  if (v69)
    CFRelease(v69);
  if (v47)
    CFRelease(v47);
  return v24;
}

uint64_t hoseSBAR_setPreferencesOnAudioSession(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  double v6;
  int v7;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(_QWORD *)(DerivedStorage + 592);
  if (v5 || (v9 = DerivedStorage, APSLogErrorAt(0), (v5 = *(_QWORD *)(v9 + 592)) != 0))
  {
    v6 = *(double *)(v5 + 16);
  }
  else
  {
    APSLogErrorAt(0);
    v5 = *(_QWORD *)(v9 + 592);
    if (!v5)
    {
      APSLogErrorAt(0);
      v7 = 0;
      v6 = 0.0;
      return hoseSBAR_setPreferencesOnAudioSessionSetValues(a1, a2, v7, v6);
    }
    v6 = 0.0;
  }
  v7 = *(_DWORD *)(v5 + 44);
  return hoseSBAR_setPreferencesOnAudioSessionSetValues(a1, a2, v7, v6);
}

uint64_t __hoseSBAR_allowAtmosPlayback_block_invoke()
{
  uint64_t result;

  result = MGGetProductType();
  if (result == 1540760353 || result == 4240173202 || result == 2702125347)
    hoseSBAR_allowAtmosPlayback_isAtmosAllowed = 1;
  return result;
}

uint64_t hoseSBAR_updateRTPRolloverStateAssumingIncreasingTransportTimes(uint64_t a1, _OWORD *a2)
{
  uint64_t result;
  unsigned int RTPTimeForTransportTime;
  _BYTE v6[28];
  char v7;

  result = CMBaseObjectGetDerivedStorage();
  v7 = 0;
  if (**(_DWORD **)(result + 96) == 1)
  {
    *(_OWORD *)v6 = *a2;
    *(_OWORD *)&v6[12] = *(_OWORD *)((char *)a2 + 12);
    RTPTimeForTransportTime = hoseSBAR_getRTPTimeForTransportTime(a1, (uint64_t)v6, &v7);
    if (v7)
      return hoseSBAR_updateRTPRolloverStateAssumingIncreasingRTPTimes(a1, RTPTimeForTransportTime);
    else
      return APSLogErrorAt(0);
  }
  return result;
}

CMTime *hoseSBAR_getMediaTimeForTransportTime(CMTime *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int *v4;

  v3 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)&result->value = *MEMORY[0x1E0CA2E18];
  result->epoch = *(_QWORD *)(v3 + 16);
  v4 = (unsigned int *)(a3 + 4);
  if (*(_DWORD *)a3 == 1)
    return hoseSBAR_getMediaTimeForRTPTime(result, a2, *v4);
  if (*(_DWORD *)a3 == 2 && (*(_DWORD *)(a3 + 16) & 0x1D) == 1 && *(_QWORD *)(a3 + 20) == 0)
  {
    *(_OWORD *)&result->value = *(_OWORD *)v4;
    result->epoch = *(_QWORD *)(a3 + 20);
  }
  return result;
}

CMTime *hoseSBAR_getMediaTimeForRTPTime(CMTime *a1, uint64_t a2, unsigned int a3)
{
  uint64_t DerivedStorage;
  int32_t v6;
  _OWORD *v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  CMTime *result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(_DWORD *)(DerivedStorage + 88);
  v7 = (_OWORD *)MEMORY[0x1E0CA2E18];
  a1->epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  *(_OWORD *)&a1->value = *v7;
  if (**(_DWORD **)(DerivedStorage + 96) != 1)
  {
    result = (CMTime *)APSLogErrorAt(0);
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR > 90)
      return result;
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR == -1)
    {
      result = (CMTime *)_LogCategory_Initialize();
      if (!(_DWORD)result)
        return result;
    }
    return (CMTime *)LogPrintF();
  }
  if (!*(_BYTE *)(DerivedStorage + 624))
  {
    result = (CMTime *)APSLogErrorAt(0);
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR > 90)
      return result;
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR == -1)
    {
      result = (CMTime *)_LogCategory_Initialize();
      if (!(_DWORD)result)
        return result;
    }
    return (CMTime *)LogPrintF();
  }
  v8 = *(_DWORD *)(DerivedStorage + 620);
  v9 = a3 >= v8;
  v10 = a3 - v8;
  v11 = !v9;
  v12 = v10 != 0 && v9;
  v13 = v10 < 1;
  if (v10 < 1)
    v14 = -1;
  else
    v14 = 1;
  if (v13)
    v11 = v12;
  if (!v11)
    v14 = 0;
  return CMTimeMake(a1, a3 | ((unint64_t)(*(_DWORD *)(DerivedStorage + 616) + v14) << 32), v6);
}

uint64_t hoseSBAR_getRTPTimeForTransportTime(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t DerivedStorage;
  unsigned int *v6;
  uint64_t result;
  char v9;
  int32_t v10;
  CMTime time;
  CMTime v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = (unsigned int *)(a2 + 4);
  if (*(_DWORD *)a2 == 1)
  {
    result = *v6;
    v9 = 1;
    if (!a3)
      return result;
    goto LABEL_11;
  }
  if (*(_DWORD *)a2 != 2)
    goto LABEL_7;
  if ((*(_DWORD *)(a2 + 16) & 0x1D) != 1 || *(_QWORD *)(a2 + 20) != 0)
    goto LABEL_7;
  v10 = *(_DWORD *)(DerivedStorage + 88);
  if (!v10)
  {
    APSLogErrorAt(0);
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 90)
    {
      if (gLogCategory_APSEndpointStreamAudioHoseSBAR == -1)
      {
        result = _LogCategory_Initialize();
        if (!(_DWORD)result)
        {
LABEL_8:
          v9 = 0;
          if (!a3)
            return result;
          goto LABEL_11;
        }
      }
      LogPrintF();
    }
LABEL_7:
    result = 0;
    goto LABEL_8;
  }
  *(_OWORD *)&time.value = *(_OWORD *)v6;
  time.epoch = *(_QWORD *)(a2 + 20);
  v9 = 1;
  CMTimeConvertScale(&v12, &time, v10, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  result = LODWORD(v12.value);
  if (a3)
LABEL_11:
    *a3 = v9;
  return result;
}

uint64_t hoseSBAR_updateRTPRolloverStateAssumingIncreasingRTPTimes(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;

  result = CMBaseObjectGetDerivedStorage();
  v4 = result;
  if (!*(_BYTE *)(result + 624))
  {
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR > 50)
      goto LABEL_18;
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR == -1)
    {
      result = _LogCategory_Initialize();
      if (!(_DWORD)result)
        goto LABEL_18;
    }
LABEL_12:
    result = LogPrintF();
LABEL_18:
    *(_DWORD *)(v4 + 620) = a2;
    *(_BYTE *)(v4 + 624) = 1;
    return result;
  }
  v5 = *(_DWORD *)(result + 620);
  if ((int)(v5 - a2) < 1)
  {
    if (v5 <= a2)
      goto LABEL_18;
    ++*(_DWORD *)(result + 616);
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR > 50)
      goto LABEL_18;
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR == -1)
    {
      result = _LogCategory_Initialize();
      if (!(_DWORD)result)
        goto LABEL_18;
    }
    goto LABEL_12;
  }
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50)
  {
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

uint64_t hoseSBAR_beginUnderrunIfNeeded(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  _OWORD *v4;
  CMTime time2;
  CMTime time1;

  result = CMBaseObjectGetDerivedStorage();
  if ((*(_BYTE *)(result + 680) & 1) == 0)
  {
    v3 = result;
    if ((*(_BYTE *)(result + 656) & 1) != 0)
    {
      v4 = (_OWORD *)(result + 644);
      if ((*(_BYTE *)(result + 340) & 1) == 0
        || (time1 = *(CMTime *)(result + 328),
            *(_OWORD *)&time2.value = *v4,
            time2.epoch = *(_QWORD *)(result + 660),
            result = CMTimeCompare(&time1, &time2),
            (int)result <= 0))
      {
        if ((*(_BYTE *)(v3 + 508) & 1) != 0)
        {
          if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 90
            && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          *(_OWORD *)&time2.value = *v4;
          time2.epoch = *(_QWORD *)(v3 + 660);
          hoseSBAR_getMediaTimeForSynchronizerTime(&time1, a1, &time2);
          *(CMTime *)(v3 + 668) = time1;
          CMNotificationCenterGetDefaultLocalCenter();
          return FigDispatchAsyncPostNotification();
        }
      }
    }
  }
  return result;
}

void hoseSBAR_endUnderrun()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  OpaqueCMClock *HostTimeClock;
  double Seconds;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  double v10;
  __int128 v11;
  __int128 v12;
  __CFNotificationCenter *DarwinNotifyCenter;
  CMTime rhs;
  CMTime lhs;
  CMTime time;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*(_BYTE *)(DerivedStorage + 680) & 1) != 0)
  {
    v1 = DerivedStorage;
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
      && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v2 = v1 + 668;
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    HostTimeClock = CMClockGetHostTimeClock();
    CMClockGetTime(&lhs, HostTimeClock);
    rhs = *(CMTime *)(v1 + 400);
    CMTimeSubtract(&time, &lhs, &rhs);
    Seconds = CMTimeGetSeconds(&time);
    v5 = (_OWORD *)(v1 + 692);
    if ((*(_BYTE *)(v1 + 704) & 1) != 0 && (*(_BYTE *)(v1 + 728) & 1) != 0)
    {
      v6 = v1 + 716;
      if (!*(_QWORD *)(v6 + 16) && (*(_QWORD *)v6 & 0x8000000000000000) == 0)
      {
        v10 = Seconds;
        v11 = *(_OWORD *)v6;
        rhs.epoch = *(_QWORD *)(v6 + 16);
        *(_OWORD *)&rhs.value = v11;
        if (CMTimeGetSeconds(&rhs) < 5.0 && v10 >= 20.0)
        {
          if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
            && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
          {
            v12 = *(_OWORD *)v6;
            rhs.epoch = *(_QWORD *)(v6 + 16);
            *(_OWORD *)&rhs.value = v12;
            CMTimeGetSeconds(&rhs);
            LogPrintF();
          }
          DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
          CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.airplay.bufferedaudiounderrun"), 0, 0, 1u);
        }
      }
    }
    v7 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)v2 = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(v2 + 16) = *(_QWORD *)(v7 + 16);
    v8 = MEMORY[0x1E0CA2E40];
    v9 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
    *v5 = *MEMORY[0x1E0CA2E40];
    v5[1] = v9;
    v5[2] = *(_OWORD *)(v8 + 32);
  }
}

uint64_t hoseSBAR_transferStashedSBufsIntoBuffersForSBAR(void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBufferQueueReset(*(CMBufferQueueRef *)(DerivedStorage + 560));
  if ((_DWORD)v3)
  {
    v4 = v3;
    goto LABEL_7;
  }
  v3 = CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(DerivedStorage + 552), (OSStatus (__cdecl *)(CMBufferRef, void *))hoseSBAR_transferStashedSBufsIntoBuffersForSBARCallback, a1);
  if ((_DWORD)v3)
  {
    v4 = v3;
    goto LABEL_7;
  }
  v3 = hoseSBAR_fillSBARToHighWater((uint64_t)a1);
  v4 = v3;
  if ((_DWORD)v3)
LABEL_7:
    APSLogErrorAt(v3);
  return v4;
}

uint64_t hoseSBAR_transferStashedSBufsIntoBuffersForSBARCallback(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBufferQueueEnqueue(*(CMBufferQueueRef *)(DerivedStorage + 560), a1);
  v4 = v3;
  if ((_DWORD)v3)
    APSLogErrorAt(v3);
  return v4;
}

uint64_t hoseSBAR_decodeRTPHeader(int a1, OpaqueCMBlockBuffer *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t AudioDataTimestamp;
  int v8;
  uint64_t v9;
  unsigned __int16 destination;
  int v12;

  v12 = 0;
  destination = 0;
  AudioDataTimestamp = APSTransportMessageGetAudioDataTimestamp(a2, &v12);
  if ((_DWORD)AudioDataTimestamp)
  {
    v9 = AudioDataTimestamp;
LABEL_10:
    APSLogErrorAt(AudioDataTimestamp);
    return v9;
  }
  AudioDataTimestamp = APSTransportMessageGetAudioDataSequenceNumber(a2, &destination);
  if ((_DWORD)AudioDataTimestamp)
  {
    v9 = AudioDataTimestamp;
    goto LABEL_10;
  }
  if (a3)
  {
    v8 = v12;
    *(_DWORD *)a3 = 1;
    *(_DWORD *)(a3 + 4) = v8;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_DWORD *)(a3 + 24) = 0;
  }
  v9 = 0;
  if (a4)
    *a4 = destination;
  return v9;
}

uint64_t hoseSBAR_decodeRTPData(uint64_t a1, OpaqueCMBlockBuffer *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v8;
  uint64_t ContiguousCopy;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  uint64_t (*v15)(uint64_t, char *, uint64_t, char *, size_t, char *, size_t, size_t *);
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  CMBlockBufferRef blockBufferOut;
  size_t dataLength;
  size_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *dataPointerOut;
  size_t totalLengthOut;
  CMBlockBufferRef theBuffer;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  totalLengthOut = 0;
  theBuffer = 0;
  v30 = 0;
  dataPointerOut = 0;
  v28 = 0;
  v29 = 0;
  dataLength = 0;
  v27 = 0;
  blockBufferOut = 0;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (APSAllocatorGetDefaultAirPlayMallocZoneCFAllocator_once != -1)
    dispatch_once(&APSAllocatorGetDefaultAirPlayMallocZoneCFAllocator_once, &__block_literal_global_3);
  ContiguousCopy = APSCMBlockBufferCreateContiguousCopy(v8, (const __CFAllocator *)APSAllocatorGetDefaultAirPlayMallocZoneCFAllocator_allocator, a2, (CFTypeRef *)&theBuffer);
  if ((_DWORD)ContiguousCopy)
  {
    v18 = ContiguousCopy;
    goto LABEL_26;
  }
  ContiguousCopy = CMBlockBufferGetDataPointer(theBuffer, 0, 0, &totalLengthOut, &dataPointerOut);
  if ((_DWORD)ContiguousCopy)
  {
    v18 = ContiguousCopy;
    goto LABEL_26;
  }
  ContiguousCopy = APSTransportMessageGetAudioDataPointer(theBuffer, &v28, &v27);
  if ((_DWORD)ContiguousCopy)
  {
    v18 = ContiguousCopy;
    goto LABEL_26;
  }
  if (*(_QWORD *)(DerivedStorage + 72))
  {
    ContiguousCopy = APSTransportMessageGetAudioAADPointer(theBuffer, &v30, &v29);
    if ((_DWORD)ContiguousCopy)
    {
      v18 = ContiguousCopy;
      goto LABEL_26;
    }
    v10 = *(_QWORD *)(DerivedStorage + 72);
    v12 = v29;
    v11 = v30;
    v14 = v27;
    v13 = v28;
    v15 = *(uint64_t (**)(uint64_t, char *, uint64_t, char *, size_t, char *, size_t, size_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v15)
    {
      v16 = v15(v10, v11, v12, v13, v14, v13, v14, &dataLength);
      if (!(_DWORD)v16)
      {
        v17 = dataLength;
        if (dataLength)
          goto LABEL_11;
LABEL_14:
        ContiguousCopy = CMBlockBufferCreateEmpty(v8, 0, 1u, &blockBufferOut);
        if ((_DWORD)ContiguousCopy)
        {
          v18 = ContiguousCopy;
          goto LABEL_26;
        }
        goto LABEL_15;
      }
      v18 = v16;
    }
    else
    {
      v18 = 4294954514;
    }
    ContiguousCopy = v18;
    goto LABEL_26;
  }
  v17 = v27;
  dataLength = v27;
  if (!v27)
    goto LABEL_14;
LABEL_11:
  ContiguousCopy = CMBlockBufferCreateWithBufferReference(v8, theBuffer, v28 - dataPointerOut, v17, 1u, &blockBufferOut);
  if ((_DWORD)ContiguousCopy)
  {
    v18 = ContiguousCopy;
LABEL_26:
    APSLogErrorAt(ContiguousCopy);
    goto LABEL_27;
  }
LABEL_15:
  if (a3)
  {
    v19 = blockBufferOut;
    if (blockBufferOut)
      v19 = (void *)CFRetain(blockBufferOut);
    *a3 = v19;
  }
  if (a4)
  {
    v20 = *(_QWORD *)(DerivedStorage + 80);
    if (v20)
      v20 = *(_QWORD *)(v20 + 96);
    v18 = 0;
    *(_QWORD *)a4 = v20;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 160) = 0;
    v21 = MEMORY[0x1E0CA2E18];
    v22 = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)(a4 + 24) = *MEMORY[0x1E0CA2E18];
    v23 = *(_QWORD *)(v21 + 16);
    *(_QWORD *)(a4 + 40) = v23;
    *(_OWORD *)(a4 + 48) = v22;
    *(_QWORD *)(a4 + 64) = v23;
  }
  else
  {
    v18 = 0;
  }
LABEL_27:
  if (theBuffer)
    CFRelease(theBuffer);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v18;
}

uint64_t hoseSBAR_decodeBufferedRTPHeader(int a1, OpaqueCMBlockBuffer *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t BufferedAudioDataTimestamp;
  int v8;
  uint64_t v9;
  uint64_t destination;

  destination = 0;
  BufferedAudioDataTimestamp = APSTransportMessageGetBufferedAudioDataTimestamp(a2, (_DWORD *)&destination + 1);
  if ((_DWORD)BufferedAudioDataTimestamp)
  {
    v9 = BufferedAudioDataTimestamp;
LABEL_10:
    APSLogErrorAt(BufferedAudioDataTimestamp);
    return v9;
  }
  BufferedAudioDataTimestamp = APSTransportMessageGetBufferedAudioDataExtendedSequenceNumber(a2, (unsigned int *)&destination);
  if ((_DWORD)BufferedAudioDataTimestamp)
  {
    v9 = BufferedAudioDataTimestamp;
    goto LABEL_10;
  }
  if (a3)
  {
    v8 = HIDWORD(destination);
    *(_DWORD *)a3 = 1;
    *(_DWORD *)(a3 + 4) = v8;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_DWORD *)(a3 + 24) = 0;
  }
  v9 = 0;
  if (a4)
    *a4 = destination;
  return v9;
}

uint64_t hoseSBAR_decodeBufferedRTPData(uint64_t a1, OpaqueCMBlockBuffer *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v8;
  uint64_t ContiguousCopy;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  uint64_t (*v15)(uint64_t, char *, uint64_t, char *, size_t, char *, size_t, size_t *);
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unsigned __int8 destination;
  CMBlockBufferRef blockBufferOut;
  size_t dataLength;
  size_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *dataPointerOut;
  size_t totalLengthOut;
  CMBlockBufferRef theBuffer;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  totalLengthOut = 0;
  theBuffer = 0;
  v28 = 0;
  dataPointerOut = 0;
  v26 = 0;
  v27 = 0;
  dataLength = 0;
  v25 = 0;
  blockBufferOut = 0;
  destination = 0;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (APSAllocatorGetDefaultAirPlayMallocZoneCFAllocator_once != -1)
    dispatch_once(&APSAllocatorGetDefaultAirPlayMallocZoneCFAllocator_once, &__block_literal_global_3);
  ContiguousCopy = APSCMBlockBufferCreateContiguousCopy(v8, (const __CFAllocator *)APSAllocatorGetDefaultAirPlayMallocZoneCFAllocator_allocator, a2, (CFTypeRef *)&theBuffer);
  if ((_DWORD)ContiguousCopy)
  {
    v18 = ContiguousCopy;
    goto LABEL_28;
  }
  ContiguousCopy = CMBlockBufferGetDataPointer(theBuffer, 0, 0, &totalLengthOut, &dataPointerOut);
  if ((_DWORD)ContiguousCopy)
  {
    v18 = ContiguousCopy;
    goto LABEL_28;
  }
  ContiguousCopy = APSTransportMessageGetBufferedAudioDataPointer(theBuffer, &v26, &v25);
  if ((_DWORD)ContiguousCopy)
  {
    v18 = ContiguousCopy;
    goto LABEL_28;
  }
  if (*(_QWORD *)(DerivedStorage + 72))
  {
    ContiguousCopy = APSTransportMessageGetBufferedAudioAADPointer(theBuffer, &v28, &v27);
    if ((_DWORD)ContiguousCopy)
    {
      v18 = ContiguousCopy;
      goto LABEL_28;
    }
    v10 = *(_QWORD *)(DerivedStorage + 72);
    v12 = v27;
    v11 = v28;
    v14 = v25;
    v13 = v26;
    v15 = *(uint64_t (**)(uint64_t, char *, uint64_t, char *, size_t, char *, size_t, size_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v15)
    {
      v16 = v15(v10, v11, v12, v13, v14, v13, v14, &dataLength);
      if (!(_DWORD)v16)
      {
        v17 = dataLength;
        if (dataLength)
          goto LABEL_11;
LABEL_14:
        ContiguousCopy = CMBlockBufferCreateEmpty(v8, 0, 1u, &blockBufferOut);
        if ((_DWORD)ContiguousCopy)
        {
          v18 = ContiguousCopy;
          goto LABEL_28;
        }
        goto LABEL_15;
      }
      v18 = v16;
    }
    else
    {
      v18 = 4294954514;
    }
    ContiguousCopy = v18;
    goto LABEL_28;
  }
  v17 = v25;
  dataLength = v25;
  if (!v25)
    goto LABEL_14;
LABEL_11:
  ContiguousCopy = CMBlockBufferCreateWithBufferReference(v8, theBuffer, v26 - dataPointerOut, v17, 1u, &blockBufferOut);
  if ((_DWORD)ContiguousCopy)
  {
    v18 = ContiguousCopy;
LABEL_28:
    APSLogErrorAt(ContiguousCopy);
    goto LABEL_29;
  }
LABEL_15:
  ContiguousCopy = APSTransportMessageGetBufferedAudioDataFormatIndex(a2, &destination);
  if ((_DWORD)ContiguousCopy)
  {
    v18 = ContiguousCopy;
    goto LABEL_28;
  }
  if (a3)
  {
    v19 = blockBufferOut;
    if (blockBufferOut)
      v19 = (void *)CFRetain(blockBufferOut);
    *a3 = v19;
  }
  if (a4)
  {
    v20 = destination;
    if (!destination)
    {
      v20 = *(_QWORD *)(DerivedStorage + 80);
      if (v20)
        v20 = *(_QWORD *)(v20 + 96);
    }
    v18 = 0;
    *a4 = v20;
    a4[2] = 0;
    a4[20] = 0;
  }
  else
  {
    v18 = 0;
  }
LABEL_29:
  if (theBuffer)
    CFRelease(theBuffer);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v18;
}

uint64_t hoseSBAR_decodeAPAPHeader(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v10;
  int v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = *MEMORY[0x1E0CA2E18];
  v14 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v12 = 0;
  v6 = APSAPAPBBufDecodeHeader(a2, (uint64_t)&v13, &v12);
  v7 = v6;
  if ((_DWORD)v6)
  {
    APSLogErrorAt(v6);
  }
  else
  {
    if (a3)
    {
      v8 = HIDWORD(v13);
      if ((BYTE12(v13) & 0x1D) == 1 && v14 == 0)
      {
        v15 = v13;
        v16 = DWORD2(v13);
        v10 = 2;
      }
      else
      {
        v8 = 0;
        v10 = 0;
        v16 = 0;
        v15 = 0;
      }
      *(_DWORD *)a3 = v10;
      *(_QWORD *)(a3 + 4) = v15;
      *(_DWORD *)(a3 + 12) = v16;
      *(_DWORD *)(a3 + 16) = v8;
      *(_QWORD *)(a3 + 20) = 0;
    }
    if (a4)
      *a4 = v12;
  }
  return v7;
}

uint64_t hoseSBAR_decodeAPAPData(uint64_t a1, OpaqueCMBlockBuffer *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  size_t DataLength;
  const __CFAllocator *v10;
  uint64_t v11;
  CFTypeRef v12;
  CFTypeRef v13;
  __int128 v14;
  CFTypeRef v15;
  CFTypeRef v16;
  CFTypeRef v17;
  CFTypeRef v18;
  uint64_t v19;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  const void *v25;
  __int128 v26;
  const void *v27;
  CFTypeRef cf[11];
  uint64_t v29;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef v32;
  CMBlockBufferRef blockBufferOut;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  DataLength = CMBlockBufferGetDataLength(a2);
  v32 = 0;
  blockBufferOut = 0;
  v21 = a1;
  v22 = 0uLL;
  v23 = 0;
  v24 = *MEMORY[0x1E0CA2E18];
  v25 = *(const void **)(MEMORY[0x1E0CA2E18] + 16);
  v26 = v24;
  v27 = v25;
  memset(cf, 0, sizeof(cf));
  *(CFTypeRef *)((char *)&cf[9] + 4) = v25;
  *(_OWORD *)((char *)&cf[7] + 4) = v24;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (APSAllocatorGetDefaultAirPlayMallocZoneCFAllocator_once != -1)
    dispatch_once(&APSAllocatorGetDefaultAirPlayMallocZoneCFAllocator_once, &__block_literal_global_3);
  v11 = CMBlockBufferCreateWithMemoryBlock(v10, 0, DataLength, (CFAllocatorRef)APSAllocatorGetDefaultAirPlayMallocZoneCFAllocator_allocator, 0, 0, DataLength, 1u, &blockBufferOut);
  if ((_DWORD)v11)
  {
    v19 = v11;
LABEL_35:
    APSLogErrorAt(v11);
    goto LABEL_20;
  }
  v11 = APSAPAPBBufDecode((uint64_t)v10, a2, blockBufferOut, *(_QWORD *)(DerivedStorage + 72), 0, 0, (uint64_t)hoseSBAR_decodeAPAPExtensionItem, (uint64_t)&v21, &v32);
  if ((_DWORD)v11)
  {
    v19 = v11;
    goto LABEL_35;
  }
  if (a3)
  {
    v12 = v32;
    if (v32)
      v12 = CFRetain(v32);
    *a3 = v12;
  }
  if (a4)
  {
    v13 = cf[0];
    *(_QWORD *)(a4 + 16) = v23;
    *(_OWORD *)a4 = v22;
    *(_OWORD *)(a4 + 24) = v24;
    *(_QWORD *)(a4 + 40) = v25;
    *(_OWORD *)(a4 + 48) = v26;
    *(_QWORD *)(a4 + 64) = v27;
    if (v13)
      v13 = CFRetain(v13);
    *(_QWORD *)(a4 + 72) = v13;
    v14 = *(_OWORD *)&cf[3];
    *(_OWORD *)(a4 + 80) = *(_OWORD *)&cf[1];
    *(_OWORD *)(a4 + 96) = v14;
    v15 = cf[5];
    if (cf[5])
      v15 = CFRetain(cf[5]);
    v16 = cf[6];
    *(_QWORD *)(a4 + 112) = v15;
    *(_QWORD *)(a4 + 120) = v16;
    *(_BYTE *)(a4 + 128) = cf[7];
    *(_OWORD *)(a4 + 132) = *(_OWORD *)((char *)&cf[7] + 4);
    *(CFTypeRef *)(a4 + 148) = *(CFTypeRef *)((char *)&cf[9] + 4);
    v17 = v30;
    *(_QWORD *)(a4 + 160) = v29;
    if (v17)
      v17 = CFRetain(v17);
    *(_QWORD *)(a4 + 168) = v17;
    v18 = v31;
    if (v31)
      v18 = CFRetain(v31);
    v19 = 0;
    *(_QWORD *)(a4 + 176) = v18;
  }
  else
  {
    v19 = 0;
  }
LABEL_20:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (v32)
    CFRelease(v32);
  if (cf[0])
    CFRelease(cf[0]);
  if (cf[5])
    CFRelease(cf[5]);
  if (v30)
    CFRelease(v30);
  if (v31)
    CFRelease(v31);
  return v19;
}

uint64_t hoseSBAR_decodeAPAPExtensionItem(uint64_t a1, OpaqueCMBlockBuffer *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t BigUIntAsUInt64;
  CMTimeValue value;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTimeFlags v13;
  CMTimeEpoch v14;
  const void *v15;
  const void *v16;
  CMTimeFlags v17;
  CMTimeEpoch v18;
  size_t DataLength;
  void *v20;
  CFDataRef v21;
  const void *v22;
  CMTime v24;
  unint64_t destination;
  unsigned int v26;
  CMTimeValue v27;
  CMTimeScale timescale;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = 0;
  switch(a1)
  {
    case 2:
      v8 = DerivedStorage;
      v24.value = 0;
      BigUIntAsUInt64 = APSCMBlockBufferGetBigUIntAsUInt64(a2, (unint64_t *)&v24);
      v7 = BigUIntAsUInt64;
      if ((_DWORD)BigUIntAsUInt64)
        goto LABEL_70;
      value = v24.value;
      if (!v24.value)
      {
        value = *(_QWORD *)(v8 + 592);
        if (value)
          value = *(_QWORD *)(value + 96);
      }
      *(_QWORD *)(a3 + 8) = value;
      return v7;
    case 3:
      v24.value = 0;
      BigUIntAsUInt64 = APSCMBlockBufferGetBigUIntAsUInt64(a2, (unint64_t *)&v24);
      v7 = BigUIntAsUInt64;
      if ((_DWORD)BigUIntAsUInt64)
        goto LABEL_70;
      *(_QWORD *)(a3 + 24) = v24.value;
      return v7;
    case 4:
      v26 = 0;
      destination = 0;
      BigUIntAsUInt64 = CMBlockBufferCopyDataBytes(a2, 0, 0xCuLL, &destination);
      if ((_DWORD)BigUIntAsUInt64)
      {
        v7 = BigUIntAsUInt64;
        goto LABEL_70;
      }
      CMTimeMake(&v24, bswap64(destination), bswap32(v26));
      v27 = v24.value;
      flags = v24.flags;
      timescale = v24.timescale;
      if ((v24.flags & 1) == 0)
        goto LABEL_63;
      v7 = 0;
      epoch = v24.epoch;
      *(_QWORD *)(a3 + 32) = v27;
      *(_DWORD *)(a3 + 40) = timescale;
      *(_DWORD *)(a3 + 44) = flags;
      *(_QWORD *)(a3 + 48) = epoch;
      return v7;
    case 5:
      v26 = 0;
      destination = 0;
      BigUIntAsUInt64 = CMBlockBufferCopyDataBytes(a2, 0, 0xCuLL, &destination);
      if ((_DWORD)BigUIntAsUInt64)
      {
        v7 = BigUIntAsUInt64;
        goto LABEL_70;
      }
      CMTimeMake(&v24, bswap64(destination), bswap32(v26));
      v27 = v24.value;
      v13 = v24.flags;
      timescale = v24.timescale;
      if ((v24.flags & 1) == 0)
        goto LABEL_63;
      v7 = 0;
      v14 = v24.epoch;
      *(_QWORD *)(a3 + 56) = v27;
      *(_DWORD *)(a3 + 64) = timescale;
      *(_DWORD *)(a3 + 68) = v13;
      *(_QWORD *)(a3 + 72) = v14;
      return v7;
    case 7:
      v24.value = 0;
      BigUIntAsUInt64 = APSAPAPExtensionConvertSoundCheckInfoBBufAndMergeIntoLoudnessInfoDict(a2, *(_QWORD *)(a3 + 80), (CFTypeRef *)&v24);
      v7 = BigUIntAsUInt64;
      if (!(_DWORD)BigUIntAsUInt64)
        goto LABEL_28;
      goto LABEL_70;
    case 8:
      v24.value = 0;
      BigUIntAsUInt64 = APSCMBlockBufferGetBigUIntAsUInt64(a2, (unint64_t *)&v24);
      v7 = BigUIntAsUInt64;
      if ((_DWORD)BigUIntAsUInt64)
        goto LABEL_70;
      *(_QWORD *)(a3 + 88) = v24.value;
      return v7;
    case 9:
      v24.value = 0;
      BigUIntAsUInt64 = APSCMBlockBufferCopyAsUUID(a2, (CFTypeRef *)&v24);
      v7 = BigUIntAsUInt64;
      if ((_DWORD)BigUIntAsUInt64)
        goto LABEL_70;
      v15 = *(const void **)(a3 + 120);
      if (v15)
        CFRelease(v15);
      *(_QWORD *)(a3 + 120) = v24.value;
      return v7;
    case 10:
      v24.value = 0;
      BigUIntAsUInt64 = APSCMBlockBufferGetBigUIntAsUInt64(a2, (unint64_t *)&v24);
      v7 = BigUIntAsUInt64;
      if ((_DWORD)BigUIntAsUInt64)
        goto LABEL_70;
      *(_QWORD *)(a3 + 128) = v24.value;
      *(_BYTE *)(a3 + 136) = 1;
      return v7;
    case 11:
      v24.value = 0;
      BigUIntAsUInt64 = APSAPAPExtensionConvertLoudnessParametersBBufAndMergeIntoLoudnessInfoDict(a2, *(_QWORD *)(a3 + 80), (CFTypeRef *)&v24);
      v7 = BigUIntAsUInt64;
      if ((_DWORD)BigUIntAsUInt64)
        goto LABEL_70;
      goto LABEL_28;
    case 12:
      v24.value = 0;
      BigUIntAsUInt64 = APSAPAPExtensionConvertMediaKindBBufAndMergeIntoLoudnessInfoDict(a2, *(_QWORD *)(a3 + 80), (CFTypeRef *)&v24);
      v7 = BigUIntAsUInt64;
      if ((_DWORD)BigUIntAsUInt64)
        goto LABEL_70;
LABEL_28:
      v16 = *(const void **)(a3 + 80);
      if (v16)
        CFRelease(v16);
      *(_QWORD *)(a3 + 80) = v24.value;
      return v7;
    case 13:
      v26 = 0;
      destination = 0;
      BigUIntAsUInt64 = CMBlockBufferCopyDataBytes(a2, 0, 0xCuLL, &destination);
      if ((_DWORD)BigUIntAsUInt64)
      {
        v7 = BigUIntAsUInt64;
        goto LABEL_70;
      }
      CMTimeMake(&v24, bswap64(destination), bswap32(v26));
      v27 = v24.value;
      v17 = v24.flags;
      timescale = v24.timescale;
      if ((v24.flags & 1) != 0)
      {
        v7 = 0;
        v18 = v24.epoch;
        *(_QWORD *)(a3 + 140) = v27;
        *(_DWORD *)(a3 + 148) = timescale;
        *(_DWORD *)(a3 + 152) = v17;
        *(_QWORD *)(a3 + 156) = v18;
      }
      else
      {
LABEL_63:
        APSLogErrorAt(0);
        v7 = 4294960559;
      }
      break;
    case 14:
      v24.value = 0;
      BigUIntAsUInt64 = APSCMBlockBufferGetBigUIntAsUInt64(a2, (unint64_t *)&v24);
      v7 = BigUIntAsUInt64;
      if ((_DWORD)BigUIntAsUInt64)
        goto LABEL_70;
      *(_QWORD *)(a3 + 96) = v24.value;
      return v7;
    case 15:
      v24.value = 0;
      BigUIntAsUInt64 = APSCMBlockBufferGetBigUIntAsUInt64(a2, (unint64_t *)&v24);
      v7 = BigUIntAsUInt64;
      if ((_DWORD)BigUIntAsUInt64)
        goto LABEL_70;
      *(_QWORD *)(a3 + 104) = v24.value;
      return v7;
    case 16:
      v24.value = 0;
      BigUIntAsUInt64 = APSCMBlockBufferGetBigUIntAsUInt64(a2, (unint64_t *)&v24);
      v7 = BigUIntAsUInt64;
      if ((_DWORD)BigUIntAsUInt64)
        goto LABEL_70;
      *(_QWORD *)(a3 + 112) = v24.value;
      return v7;
    case 17:
      v24.value = 0;
      BigUIntAsUInt64 = APSCMBlockBufferGetBigUIntAsUInt64(a2, (unint64_t *)&v24);
      v7 = BigUIntAsUInt64;
      if ((_DWORD)BigUIntAsUInt64)
        goto LABEL_70;
      *(_QWORD *)(a3 + 168) = v24.value;
      return v7;
    case 18:
      DataLength = CMBlockBufferGetDataLength(a2);
      v20 = malloc_type_calloc(1uLL, DataLength, 0xD62A1EF4uLL);
      BigUIntAsUInt64 = CMBlockBufferCopyDataBytes(a2, 0, DataLength, v20);
      if ((_DWORD)BigUIntAsUInt64)
      {
        v7 = BigUIntAsUInt64;
LABEL_70:
        APSLogErrorAt(BigUIntAsUInt64);
      }
      else
      {
        v21 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v20, DataLength);
        if (v21)
        {
          *(_QWORD *)(a3 + 176) = v21;
          free(v20);
          v7 = 0;
        }
        else
        {
          APSLogErrorAt(0);
          v7 = 4294960587;
        }
      }
      break;
    case 19:
      v24.value = 0;
      BigUIntAsUInt64 = APSAPAPExtensionConvertSbufTracerBBufToSbufTracerDict(a2, (CFTypeRef *)&v24);
      v7 = BigUIntAsUInt64;
      if ((_DWORD)BigUIntAsUInt64)
        goto LABEL_70;
      v22 = *(const void **)(a3 + 184);
      if (v22)
        CFRelease(v22);
      *(_QWORD *)(a3 + 184) = v24.value;
      return v7;
    case 20:
      v24.value = 0;
      BigUIntAsUInt64 = APSCMBlockBufferGetBigUIntAsUInt64(a2, (unint64_t *)&v24);
      v7 = BigUIntAsUInt64;
      if ((_DWORD)BigUIntAsUInt64)
        goto LABEL_70;
      *(_QWORD *)(a3 + 16) = v24.value;
      return v7;
    default:
      return v7;
  }
  return v7;
}

uint64_t hoseSBAR_Invalidate(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    v3 = *(NSObject **)(DerivedStorage + 280);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __hoseSBAR_Invalidate_block_invoke;
    block[3] = &__block_descriptor_tmp_726;
    block[4] = a1;
    dispatch_sync(v3, block);
  }
  return 0;
}

void hoseSBAR_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  int v9;
  int v10;
  uint64_t v11;
  void (*v12)(uint64_t, __int128 *, float);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  const void *v20;
  NSObject *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  const void *v37;
  const void *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  const void *v42;
  const void *v43;
  NSObject *v44;
  NSObject *v45;
  __int128 v46;
  uint64_t v47;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v3 = *(NSObject **)(DerivedStorage + 8);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  hoseSBAR_invalidateInternal(a1);
  v4 = *(const void **)(DerivedStorage + 16);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(DerivedStorage + 32);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(DerivedStorage + 24);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(DerivedStorage + 40);
  if (v7)
    CFRelease(v7);
  v8 = *(const void **)(DerivedStorage + 48);
  if (v8)
    CFRelease(v8);
  v9 = *(_DWORD *)(DerivedStorage + 216);
  if (v9 != -1)
  {
    notify_cancel(v9);
    *(_DWORD *)(DerivedStorage + 216) = -1;
  }
  v10 = *(_DWORD *)(DerivedStorage + 220);
  if (v10 != -1)
  {
    notify_cancel(v10);
    *(_DWORD *)(DerivedStorage + 220) = -1;
  }
  v11 = *(_QWORD *)(DerivedStorage + 112);
  if (v11)
  {
    v12 = *(void (**)(uint64_t, __int128 *, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    v13 = MEMORY[0x1E0CA2E18];
    if (v12)
    {
      v46 = *MEMORY[0x1E0CA2E18];
      v47 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      v12(v11, &v46, 0.0);
    }
    *(_OWORD *)(DerivedStorage + 496) = *(_OWORD *)v13;
    *(_QWORD *)(DerivedStorage + 512) = *(_QWORD *)(v13 + 16);
    hoseSBAR_updateSynchronizerState(a1, 0);
    v14 = *(_QWORD *)(DerivedStorage + 104);
    if (v14)
    {
      v15 = *(_QWORD *)(DerivedStorage + 112);
      v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v16)
        v16(v15, v14);
    }
    CFRelease(*(CFTypeRef *)(DerivedStorage + 112));
  }
  v17 = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(v17 + 120))
  {
    v18 = v17;
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    v19 = *(NSObject **)(v18 + 544);
    if (v19)
    {
      CMTimebaseRemoveTimerDispatchSource(*(CMTimebaseRef *)(v18 + 120), v19);
      dispatch_source_cancel(*(dispatch_source_t *)(v18 + 544));
      dispatch_release(*(dispatch_object_t *)(v18 + 544));
      *(_QWORD *)(v18 + 544) = 0;
    }
  }
  v20 = *(const void **)(DerivedStorage + 120);
  if (v20)
    CFRelease(v20);
  if (*(_QWORD *)(DerivedStorage + 104))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CFRelease(*(CFTypeRef *)(DerivedStorage + 104));
  }
  v21 = *(NSObject **)(DerivedStorage + 296);
  if (v21)
  {
    dispatch_release(v21);
    *(_QWORD *)(DerivedStorage + 296) = 0;
  }
  v22 = *(const void **)(DerivedStorage + 136);
  if (v22)
    CFRelease(v22);
  v23 = *(const void **)(DerivedStorage + 360);
  if (v23)
    CFRelease(v23);
  v24 = *(const void **)(DerivedStorage + 552);
  if (v24)
    CFRelease(v24);
  v25 = *(const void **)(DerivedStorage + 560);
  if (v25)
    CFRelease(v25);
  v26 = *(const void **)(DerivedStorage + 576);
  if (v26)
    CFRelease(v26);
  v27 = *(const void **)(DerivedStorage + 824);
  if (v27)
    CFRelease(v27);
  v28 = *(const void **)(DerivedStorage + 832);
  if (v28)
    CFRelease(v28);
  v29 = *(const void **)(DerivedStorage + 72);
  if (v29)
    CFRelease(v29);
  v30 = *(const void **)(DerivedStorage + 584);
  if (v30)
    CFRelease(v30);
  v31 = *(const void **)(DerivedStorage + 64);
  if (v31)
    CFRelease(v31);
  v32 = *(const void **)(DerivedStorage + 80);
  if (v32)
    CFRelease(v32);
  v33 = *(const void **)(DerivedStorage + 592);
  if (v33)
    CFRelease(v33);
  v34 = *(const void **)(DerivedStorage + 768);
  if (v34)
    CFRelease(v34);
  v35 = *(const void **)(DerivedStorage + 776);
  if (v35)
    CFRelease(v35);
  v36 = *(const void **)(DerivedStorage + 792);
  if (v36)
    CFRelease(v36);
  v37 = *(const void **)(DerivedStorage + 800);
  if (v37)
    CFRelease(v37);
  v38 = *(const void **)(DerivedStorage + 808);
  if (v38)
    CFRelease(v38);
  v39 = *(const void **)(DerivedStorage + 256);
  if (v39)
    CFRelease(v39);
  v40 = *(const void **)(DerivedStorage + 272);
  if (v40)
    CFRelease(v40);
  v41 = *(const void **)(DerivedStorage + 840);
  if (v41)
  {
    CFRelease(v41);
    *(_QWORD *)(DerivedStorage + 840) = 0;
  }
  FigSimpleMutexDestroy();
  v42 = *(const void **)(DerivedStorage + 224);
  if (v42)
  {
    CFRelease(v42);
    *(_QWORD *)(DerivedStorage + 224) = 0;
  }
  v43 = *(const void **)(DerivedStorage + 232);
  if (v43)
  {
    CFRelease(v43);
    *(_QWORD *)(DerivedStorage + 232) = 0;
  }
  v44 = *(NSObject **)(DerivedStorage + 280);
  if (v44)
  {
    dispatch_release(v44);
    *(_QWORD *)(DerivedStorage + 280) = 0;
  }
  v45 = *(NSObject **)(DerivedStorage + 288);
  if (v45)
  {
    dispatch_release(v45);
    *(_QWORD *)(DerivedStorage + 288) = 0;
  }
}

__CFString *hoseSBAR_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APSEndpointStreamAudioHoseSBAR %p '%@'>"), a1, *(_QWORD *)(DerivedStorage + 16));
  return Mutable;
}

uint64_t hoseSBAR_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, _QWORD, const __CFAllocator *, _QWORD *);
  uint64_t v10;
  CFNumberRef v11;
  const void *StringValue;
  CFStringRef v14;
  const void *NumberValue;
  CFTypeRef v16;
  CFTypeRef v17;
  const void **v18;
  char cStr[16];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  *(_OWORD *)cStr = 0u;
  v20 = 0u;
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 30
    && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt(0);
    return 4294894964;
  }
  if (!a2 || !a4)
  {
    APSLogErrorAt(0);
    return 4294894965;
  }
  if (!CFEqual(a2, CFSTR("VolumeLinear")))
  {
    if (CFEqual(a2, CFSTR("APSEndpointStreamAudioHoseProtocolProperty_AudioBufferSize")))
    {
      v11 = CFNumberCreate(a3, kCFNumberSInt32Type, (const void *)(DerivedStorage + 56));
      *a4 = v11;
      if (!v11)
      {
        v10 = 4294894966;
        goto LABEL_17;
      }
      return 0;
    }
    if (CFEqual(a2, CFSTR("APSEndpointStreamAudioHoseProtocolProperty_Name")))
    {
      StringValue = *(const void **)(DerivedStorage + 16);
      if (!StringValue)
      {
LABEL_21:
        v10 = 0;
        *a4 = StringValue;
        return v10;
      }
LABEL_20:
      StringValue = CFRetain(StringValue);
      goto LABEL_21;
    }
    if (CFEqual(a2, CFSTR("Model")))
    {
      cStr[0] = 0;
      GetDeviceModelString();
LABEL_27:
      v14 = CFStringCreateWithCString(a3, cStr, 0x8000100u);
      v10 = (uint64_t)v14;
      if (!v14)
      {
        *a4 = 0;
        return v10;
      }
      *a4 = CFRetain(v14);
      CFRelease((CFTypeRef)v10);
      return 0;
    }
    if (CFEqual(a2, CFSTR("OSBuildVersion")))
    {
      cStr[0] = 0;
      GetSystemBuildVersionString();
      goto LABEL_27;
    }
    if (CFEqual(a2, CFSTR("BufferingPriority")))
    {
      pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 248));
      *a4 = CFNumberCreateInt64();
      pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 248));
      if (!*a4)
      {
        v10 = 4294894966;
        v11 = 0;
        goto LABEL_17;
      }
      return 0;
    }
    if (CFEqual(a2, CFSTR("Rate")))
    {
      pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 248));
      *a4 = CFNumberCreateInt64();
      pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 248));
      if (!*a4)
      {
        v10 = 4294894966;
        v11 = 0;
        goto LABEL_17;
      }
      return 0;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4788]))
    {
      StringValue = *(const void **)(DerivedStorage + 24);
      if (!StringValue)
        goto LABEL_21;
      goto LABEL_20;
    }
    if (CFEqual(a2, CFSTR("ClusterUUID")))
    {
      StringValue = (const void *)FigCFDictionaryGetStringValue();
      if (!StringValue)
        goto LABEL_21;
      goto LABEL_20;
    }
    if (CFEqual(a2, CFSTR("IsClusterLeader")))
    {
      StringValue = (const void *)FigCFDictionaryGetBooleanValue();
      if (!StringValue)
        goto LABEL_21;
      goto LABEL_20;
    }
    if (CFEqual(a2, CFSTR("ClusterType")))
    {
      NumberValue = (const void *)FigCFDictionaryGetNumberValue();
      if (!NumberValue)
      {
        *a4 = 0;
LABEL_56:
        StringValue = (const void *)FigCFNumberCreateSInt32();
        goto LABEL_21;
      }
      v16 = CFRetain(NumberValue);
      *a4 = v16;
      if (!v16)
        goto LABEL_56;
    }
    else
    {
      if (CFEqual(a2, CFSTR("ClusterSize")))
      {
        StringValue = (const void *)FigCFDictionaryGetNumberValue();
        if (!StringValue)
          goto LABEL_21;
        goto LABEL_20;
      }
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CC5D60]))
      {
        if (CFEqual(a2, CFSTR("APSEndpointStreamAudioHoseProtocolProperty_SupportsReceiverChoosesAnchor")))
        {
          v18 = (const void **)MEMORY[0x1E0C9AE50];
          if (!*(_BYTE *)(DerivedStorage + 242))
            v18 = (const void **)MEMORY[0x1E0C9AE40];
        }
        else
        {
          if (!CFEqual(a2, CFSTR("APSEndpointStreamAudioHoseProtocolProperty_IsDolbyCertified")))
          {
            if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 30
              && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            return 4294954512;
          }
          v18 = (const void **)MEMORY[0x1E0C9AE50];
        }
        StringValue = *v18;
        goto LABEL_20;
      }
      pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 248));
      v17 = *(CFTypeRef *)(DerivedStorage + 272);
      if (v17)
        v17 = CFRetain(v17);
      *a4 = v17;
      pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 248));
    }
    return 0;
  }
  v8 = *(_QWORD *)(DerivedStorage + 104);
  v9 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v9)
  {
    v10 = 4294954514;
LABEL_16:
    v11 = (CFNumberRef)v10;
LABEL_17:
    APSLogErrorAt((uint64_t)v11);
    return v10;
  }
  v10 = v9(v8, *MEMORY[0x1E0CC5DC8], a3, a4);
  if ((_DWORD)v10)
    goto LABEL_16;
  return v10;
}

uint64_t hoseSBAR_SetProperty(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  CFTypeID v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, _QWORD, const void *);
  uint64_t v12;
  CFTypeID v13;
  NSObject *v14;
  CFTypeID v15;
  CFTypeRef v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, _QWORD, const void *);
  CFTypeRef v19;
  const void *v20;
  uint64_t *v21;
  int v22;
  _QWORD v23[2];
  _QWORD block[8];
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;

  v25 = 0;
  v26 = &v25;
  v27 = 0x2000000000;
  v28 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 30
    && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt(0);
    v21 = v26;
    v22 = -72332;
    goto LABEL_49;
  }
  if (CFEqual(a2, CFSTR("APSEndpointStreamAudioHoseProtocolProperty_IsTimelineEstablished")))
    goto LABEL_7;
  if (CFEqual(a2, CFSTR("VolumeLinear")))
  {
    if (a3)
    {
      v9 = CFGetTypeID(a3);
      if (v9 == CFNumberGetTypeID())
      {
        v10 = *(_QWORD *)(DerivedStorage + 104);
        v11 = *(uint64_t (**)(uint64_t, _QWORD, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (v11)
        {
          v12 = v11(v10, *MEMORY[0x1E0CC5DC8], a3);
          *((_DWORD *)v26 + 6) = v12;
          if (!(_DWORD)v12)
            goto LABEL_7;
        }
        else
        {
          v12 = 4294954514;
          *((_DWORD *)v26 + 6) = -12782;
        }
LABEL_24:
        APSLogErrorAt(v12);
        goto LABEL_7;
      }
    }
    goto LABEL_51;
  }
  if (CFEqual(a2, CFSTR("BufferedClientAudioSessionID")))
  {
    if (!a3 || (v13 = CFGetTypeID(a3), v13 == CFNumberGetTypeID()))
    {
      if (!FigCFEqual())
      {
        if (a1)
          CFRetain(a1);
        if (a3)
          CFRetain(a3);
        v14 = *(NSObject **)(DerivedStorage + 280);
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 0x40000000;
        block[2] = __hoseSBAR_SetProperty_block_invoke;
        block[3] = &unk_1E82893C8;
        block[4] = &v25;
        block[5] = DerivedStorage;
        block[6] = a3;
        block[7] = a1;
        dispatch_async(v14, block);
      }
      goto LABEL_7;
    }
LABEL_51:
    APSLogErrorAt(0);
    v21 = v26;
    v22 = -72331;
    goto LABEL_49;
  }
  if (!CFEqual(a2, CFSTR("AudioProcessingTapID")))
  {
    if (CFEqual(a2, CFSTR("MuteStream")))
    {
      v17 = *(_QWORD *)(DerivedStorage + 104);
      v18 = *(uint64_t (**)(uint64_t, _QWORD, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v18)
      {
        v12 = v18(v17, *MEMORY[0x1E0CC5DA8], a3);
        *((_DWORD *)v26 + 6) = v12;
        if (!(_DWORD)v12)
          goto LABEL_7;
      }
      else
      {
        v12 = 4294954514;
        *((_DWORD *)v26 + 6) = -12782;
      }
      goto LABEL_24;
    }
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 30
      && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v21 = v26;
    v22 = -12784;
LABEL_49:
    *((_DWORD *)v21 + 6) = v22;
    goto LABEL_7;
  }
  if (a3)
  {
    v15 = CFGetTypeID(a3);
    if (v15 != CFNumberGetTypeID())
      goto LABEL_51;
  }
  if (a1)
    v16 = CFRetain(a1);
  else
    v16 = 0;
  v23[0] = v16;
  if (a3)
    v19 = CFRetain(a3);
  else
    v19 = 0;
  v23[1] = v19;
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 248));
  APSDispatchAsyncFHelper(*(NSObject **)(DerivedStorage + 280), (uint64_t)hoseSBAR_setAudioProcessingTapIDInternal, v23, 0x10uLL);
  v20 = *(const void **)(DerivedStorage + 272);
  *(_QWORD *)(DerivedStorage + 272) = a3;
  if (a3)
    CFRetain(a3);
  if (v20)
    CFRelease(v20);
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 248));
LABEL_7:
  v7 = *((unsigned int *)v26 + 6);
  _Block_object_dispose(&v25, 8);
  return v7;
}

uint64_t hoseSBAR_audioHoseSendAudio(const void *a1, int a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  CFTypeRef v8;
  CFTypeRef v9;
  _QWORD v11[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 == 1734700576)
  {
    v7 = DerivedStorage;
    if (a1)
      v8 = CFRetain(a1);
    else
      v8 = 0;
    v11[0] = v8;
    if (a3)
      v9 = CFRetain(a3);
    else
      v9 = 0;
    v11[1] = v9;
    APSDispatchAsyncFHelper(*(NSObject **)(v7 + 280), (uint64_t)hoseSBAR_hoseSendAudioDataDispatchInternal, v11, 0x10uLL);
    return 0;
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960561;
  }
}

uint64_t hoseSBAR_audioHoseTimeAnnounce(const void *a1, int a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef v10;
  uint64_t v11;
  CFTypeRef v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = 0;
  if (a1)
    v7 = CFRetain(a1);
  else
    v7 = 0;
  v10 = v7;
  LODWORD(v11) = a2;
  if (a3)
    v8 = CFRetain(a3);
  else
    v8 = 0;
  v12 = v8;
  APSDispatchAsyncFHelper(*(NSObject **)(DerivedStorage + 280), (uint64_t)hoseSBAR_audioHoseTimeAnnounceDispatchInternal, &v10, 0x18uLL);
  return 0;
}

uint64_t hoseSBAR_audioHoseFlush(const void *a1, int a2, _OWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  CFTypeRef v11;
  CFTypeRef v13;
  int v14;
  _BYTE v15[28];
  uint64_t v16;
  uint64_t v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
    v11 = CFRetain(a1);
  else
    v11 = 0;
  v13 = v11;
  v14 = a2;
  *(_OWORD *)v15 = *a3;
  *(_OWORD *)&v15[12] = *(_OWORD *)((char *)a3 + 12);
  v16 = a4;
  v17 = a5;
  APSDispatchAsyncFHelper(*(NSObject **)(DerivedStorage + 280), (uint64_t)hoseSBAR_audioHoseFlushCallbackDispatchInternal, &v13, 0x38uLL);
  return 0;
}

uint64_t hoseSBAR_audioHoseFlushWithinSampleRange(const void *a1, int a2, _OWORD *a3, int a4, _OWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t DerivedStorage;
  CFTypeRef v16;
  int v17;
  _BYTE v18[28];
  int v19;
  _BYTE v20[28];
  uint64_t v21;
  uint64_t v22;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16 = CFRetain(a1);
  v17 = a2;
  *(_OWORD *)v18 = *a3;
  *(_OWORD *)&v18[12] = *(_OWORD *)((char *)a3 + 12);
  v19 = a4;
  *(_OWORD *)v20 = *a5;
  *(_OWORD *)&v20[12] = *(_OWORD *)((char *)a5 + 12);
  v21 = a6;
  v22 = a7;
  APSDispatchAsyncFHelper(*(NSObject **)(DerivedStorage + 280), (uint64_t)hoseSBAR_audioHoseFlushWithinSampleRangeDispatchInternal, &v16, 0x58uLL);
  return 0;
}

uint64_t hoseSBAR_audioHoseNotifyAudioAvailable(const void *a1)
{
  uint64_t DerivedStorage;
  CFTypeRef v3;
  CFTypeRef v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
    v3 = CFRetain(a1);
  else
    v3 = 0;
  v5 = v3;
  APSDispatchAsyncFHelper(*(NSObject **)(DerivedStorage + 280), (uint64_t)hoseSBAR_notifyAudioDataAvailableEngineCallbackDispatchInternal, &v5, 8uLL);
  return 0;
}

uint64_t hoseSBAR_audioHoseSetRateAndAnchorTime(const void *a1, int a2, _OWORD *a3, uint64_t a4, _OWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t DerivedStorage;
  CFTypeRef v15;
  CFTypeRef v17;
  int v18;
  _DWORD v19[11];
  uint64_t v20;
  _BYTE v21[32];
  uint64_t v22;
  uint64_t v23;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)&v21[24] = 0;
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a1)
    v15 = CFRetain(a1);
  else
    v15 = 0;
  v17 = v15;
  v18 = a2;
  *(_OWORD *)v19 = *a3;
  *(_OWORD *)&v19[3] = *(_OWORD *)((char *)a3 + 12);
  *(_OWORD *)&v19[7] = *(_OWORD *)a4;
  v20 = *(_QWORD *)(a4 + 16);
  *(_OWORD *)v21 = *a5;
  *(_OWORD *)&v21[12] = *(_OWORD *)((char *)a5 + 12);
  v22 = a6;
  v23 = a7;
  APSDispatchAsyncFHelper(*(NSObject **)(DerivedStorage + 280), (uint64_t)hoseSBAR_audioHoseSetRateAndAnchorTimeCallbackDispatchInternal, &v17, 0x70uLL);
  return 0;
}

uint64_t hoseSBAR_audioHoseSetCallbacks(const void *a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  _QWORD v9[8];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  if (a3)
    CFRetain(a3);
  v7 = *(NSObject **)(DerivedStorage + 280);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = __hoseSBAR_audioHoseSetCallbacks_block_invoke;
  v9[3] = &__block_descriptor_tmp_220;
  v9[4] = DerivedStorage;
  v9[5] = a2;
  v9[6] = a3;
  v9[7] = a1;
  dispatch_async(v7, v9);
  return 0;
}

uint64_t hoseSBAR_audioHoseApplyVolumeFade(uint64_t a1, unsigned int a2, CMTime *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  CMTime time2;
  uint64_t v12;
  unsigned int v13;
  __int128 v14;
  _BYTE v15[12];
  CMTime time1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)&v15[4] = 0;
  if (a2 >= 3)
  {
    v9 = 4294894965;
LABEL_13:
    APSLogErrorAt(0);
    return v9;
  }
  v7 = DerivedStorage;
  time1 = *a3;
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (CMTimeCompare(&time1, &time2) <= 0)
  {
    v9 = 4294894965;
    goto LABEL_13;
  }
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
  {
    time1 = *a3;
    CMTimeGetSeconds(&time1);
    LogPrintF();
  }
  v12 = a1;
  v13 = a2;
  v14 = *(_OWORD *)&a3->value;
  *(_QWORD *)v15 = a3->epoch;
  v8 = *(NSObject **)(v7 + 280);
  LODWORD(time2.value) = 0;
  time1.value = (CMTimeValue)&time2;
  *(_QWORD *)&time1.timescale = &v12;
  time1.epoch = (CMTimeEpoch)hoseSBAR_audioHoseApplyVolumeFadeCallbackDispatchInternal;
  if (!v8)
    return 4294960591;
  dispatch_sync_f(v8, &time1, (dispatch_function_t)APSDispatchSyncTaskCallback);
  return LODWORD(time2.value);
}

uint64_t hoseSBAR_audioHoseSetRate(const void *a1, int a2, _OWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  CFTypeRef v11;
  CFTypeRef v13;
  int v14;
  _BYTE v15[28];
  uint64_t v16;
  uint64_t v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a1)
    v11 = CFRetain(a1);
  else
    v11 = 0;
  v13 = v11;
  v14 = a2;
  *(_OWORD *)v15 = *a3;
  *(_OWORD *)&v15[12] = *(_OWORD *)((char *)a3 + 12);
  v16 = a4;
  v17 = a5;
  APSDispatchAsyncFHelper(*(NSObject **)(DerivedStorage + 280), (uint64_t)hoseSBAR_audioHoseSetRateCallbackDispatchInternal, &v13, 0x38uLL);
  return 0;
}

uint64_t hoseSBAR_audioHoseGetAnchor(const void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  CFTypeRef v9;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = 0;
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a1)
    v9 = CFRetain(a1);
  else
    v9 = 0;
  v11 = v9;
  LODWORD(v12) = a2;
  v13 = a3;
  v14 = a4;
  APSDispatchAsyncFHelper(*(NSObject **)(DerivedStorage + 280), (uint64_t)hoseSBAR_audioHoseGetAnchorCallbackDispatchInternal, &v11, 0x38uLL);
  return 0;
}

uint64_t hoseSBAR_audioHoseSetCryptor(const void *a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  CFTypeRef v11;
  CFTypeRef v12;
  _QWORD v14[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a1)
    v11 = CFRetain(a1);
  else
    v11 = 0;
  v14[0] = v11;
  v14[1] = a2;
  if (a3)
    v12 = CFRetain(a3);
  else
    v12 = 0;
  v14[2] = v12;
  v14[3] = a4;
  v14[4] = a5;
  APSDispatchAsyncFHelper(*(NSObject **)(DerivedStorage + 280), (uint64_t)hoseSBAR_audioHoseSetCryptorCallbackDispatchInternal, v14, 0x28uLL);
  return 0;
}

uint64_t hoseSBAR_audioHoseSetMagicCookie(const void *a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  CFTypeRef v11;
  CFTypeRef v12;
  _QWORD v14[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a1)
    v11 = CFRetain(a1);
  else
    v11 = 0;
  v14[0] = v11;
  v14[1] = a2;
  if (a3)
    v12 = CFRetain(a3);
  else
    v12 = 0;
  v14[2] = v12;
  v14[3] = a4;
  v14[4] = a5;
  APSDispatchAsyncFHelper(*(NSObject **)(DerivedStorage + 280), (uint64_t)hoseSBAR_audioHoseSetMagicCookieCallbackDispatchInternal, v14, 0x28uLL);
  return 0;
}

void hoseSBAR_audioHoseSetMagicCookieCallbackDispatchInternal(_QWORD *a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  const void *Int64;
  const void *v6;
  uint64_t v7;
  void (*v8)(_QWORD, _QWORD, uint64_t, _QWORD);
  const void *v9;

  v2 = (const void *)a1[2];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (v2)
  {
    v4 = DerivedStorage;
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
      && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    Int64 = (const void *)CFNumberCreateInt64();
    if (Int64)
    {
      v6 = Int64;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v4 + 800), Int64, v2);
      CFRelease(v6);
      v7 = 0;
    }
    else
    {
      APSLogErrorAt(0);
      v7 = 4294894966;
    }
  }
  else
  {
    v7 = 4294894965;
    APSLogErrorAt(0);
  }
  v8 = (void (*)(_QWORD, _QWORD, uint64_t, _QWORD))a1[3];
  if (v8)
    v8(*a1, a1[1], v7, a1[4]);
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v9 = (const void *)a1[2];
  if (v9)
    CFRelease(v9);
}

void hoseSBAR_audioHoseSetCryptorCallbackDispatchInternal(_QWORD *a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  const void *Int64;
  const void *v6;
  uint64_t v7;
  void (*v8)(_QWORD, _QWORD, uint64_t, _QWORD);
  const void *v9;

  v2 = (const void *)a1[2];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (v2)
  {
    v4 = DerivedStorage;
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
      && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    Int64 = (const void *)CFNumberCreateInt64();
    if (Int64)
    {
      v6 = Int64;
      CFBagAddValue(*(CFMutableBagRef *)(v4 + 768), Int64);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v4 + 776), v6, v2);
      CFRelease(v6);
      v7 = 0;
    }
    else
    {
      APSLogErrorAt(0);
      v7 = 4294894966;
    }
  }
  else
  {
    v7 = 4294894965;
    APSLogErrorAt(0);
  }
  v8 = (void (*)(_QWORD, _QWORD, uint64_t, _QWORD))a1[3];
  if (v8)
    v8(*a1, a1[1], v7, a1[4]);
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v9 = (const void *)a1[2];
  if (v9)
    CFRelease(v9);
}

void hoseSBAR_audioHoseGetAnchorCallbackDispatchInternal(uint64_t a1)
{
  CFTypeRef v2;
  int v3;
  uint64_t DerivedStorage;
  uint64_t v5;
  int v6;
  uint64_t v7;
  void (*v8)(CFTypeRef, _BYTE *, __int128 *, uint64_t, uint64_t);
  CFTypeRef v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _OWORD v13[2];
  __int128 v14;
  uint64_t v15;
  _BYTE v16[28];

  memset(v13, 0, 28);
  v11 = kAPSNetworkTimeInvalid;
  v12 = 0x100000000;
  v2 = *(CFTypeRef *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  memset(v16, 0, sizeof(v16));
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (v3 == 1)
  {
    v5 = DerivedStorage;
    v6 = **(_DWORD **)(DerivedStorage + 96);
    v14 = *(_OWORD *)(DerivedStorage + 472);
    v15 = *(_QWORD *)(DerivedStorage + 488);
    hoseSBAR_getTransportTimeForMediaTime((CMTime *)v16, (uint64_t)v2, (uint64_t)&v14, v6);
    if (*(_DWORD *)v16 == 1 || *(_DWORD *)v16 == 2 && (v16[16] & 0x1D) == 1 && !*(_QWORD *)&v16[20])
    {
      v7 = 0;
      v13[0] = *(_OWORD *)v16;
      *(_OWORD *)((char *)v13 + 12) = *(_OWORD *)&v16[12];
      v12 = *(_QWORD *)(v5 + 440);
      v11 = *(_OWORD *)(v5 + 424);
      goto LABEL_9;
    }
    v7 = 4294894965;
  }
  else
  {
    v7 = 4294894965;
  }
  APSLogErrorAt(0);
LABEL_9:
  v8 = *(void (**)(CFTypeRef, _BYTE *, __int128 *, uint64_t, uint64_t))(a1 + 16);
  if (v8)
  {
    v9 = *(CFTypeRef *)a1;
    v10 = *(_QWORD *)(a1 + 24);
    *(_OWORD *)v16 = v13[0];
    *(_OWORD *)&v16[12] = *(_OWORD *)((char *)v13 + 12);
    v14 = v11;
    v15 = v12;
    v8(v9, v16, &v14, v7, v10);
  }
  CFRelease(*(CFTypeRef *)a1);
}

CMTime *hoseSBAR_getTransportTimeForMediaTime(CMTime *result, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  CMTime *v5;
  uint64_t DerivedStorage;
  int32_t v7;
  int value;
  CMTime v9;
  CMTime time;
  CMTime v11;

  result->value = 0;
  *(_QWORD *)&result->timescale = 0;
  LODWORD(result[1].value) = 0;
  result->epoch = 0;
  v4 = *(_DWORD *)(a3 + 12);
  if ((v4 & 1) != 0)
  {
    v5 = result;
    if (a4 == 2)
    {
      if ((*(_DWORD *)(a3 + 12) & 0x1D) == 1 && !*(_QWORD *)(a3 + 16))
      {
        LODWORD(result->value) = 2;
        *(CMTimeValue *)((char *)&result->value + 4) = *(_QWORD *)a3;
        result->flags = *(_DWORD *)(a3 + 8);
        LODWORD(result->epoch) = v4;
        *(CMTimeEpoch *)((char *)&result->epoch + 4) = 0;
      }
      else
      {
        result->value = 0;
        *(_QWORD *)&result->timescale = 0;
        LODWORD(result[1].value) = 0;
        result->epoch = 0;
      }
    }
    else if (a4 == 1)
    {
      *(_OWORD *)&v9.value = *(_OWORD *)a3;
      v9.epoch = *(_QWORD *)(a3 + 16);
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (**(_DWORD **)(DerivedStorage + 96) == 1)
      {
        v7 = *(_DWORD *)(DerivedStorage + 88);
        time = v9;
        result = CMTimeConvertScale(&v11, &time, v7, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        if ((v11.flags & 1) != 0)
        {
          value = v11.value;
          *(_QWORD *)&v5->timescale = 0;
          v5->epoch = 0;
          LODWORD(v5[1].value) = 0;
          LODWORD(v5->value) = 1;
          HIDWORD(v5->value) = value;
          return result;
        }
      }
      else
      {
        APSLogErrorAt(0);
        if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 90
          && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
      return (CMTime *)APSLogErrorAt(0);
    }
  }
  return result;
}

void hoseSBAR_audioHoseSetRateCallbackDispatchInternal(uint64_t a1)
{
  void *v2;
  int v3;
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  OpaqueCMClock *HostTimeClock;
  void (*v9)(void *, _OWORD *, __int128 *, uint64_t, uint64_t);
  void *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _OWORD v14[2];
  _BYTE v15[28];

  v2 = *(void **)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v14[0] = *(_OWORD *)(a1 + 12);
  *(_OWORD *)((char *)v14 + 12) = *(_OWORD *)(a1 + 24);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = DerivedStorage;
  if (v3 == 1)
  {
    if ((*(_BYTE *)(DerivedStorage + 484) & 1) != 0)
    {
      v7 = 4294894965;
      v6 = 0;
    }
    else
    {
      *(_OWORD *)v15 = v14[0];
      *(_OWORD *)&v15[12] = *(_OWORD *)((char *)v14 + 12);
      v6 = hoseSBAR_audioHosePrepareRTPTimestampsAndTransferBufferForSBAR(v2, v15, &kAPSNetworkTimeInvalid, MEMORY[0x1E0CA2E18], kAPSAudioTransportTime_Invalid);
      v7 = v6;
      if (!(_DWORD)v6)
      {
        HostTimeClock = CMClockGetHostTimeClock();
        CMClockGetTime((CMTime *)v15, HostTimeClock);
        *(_OWORD *)(v5 + 400) = *(_OWORD *)v15;
        *(_QWORD *)(v5 + 416) = *(_QWORD *)&v15[16];
        goto LABEL_5;
      }
    }
  }
  else
  {
    v7 = 4294894965;
    v6 = 0;
  }
  APSLogErrorAt(v6);
LABEL_5:
  *(_OWORD *)v15 = v14[0];
  *(_OWORD *)&v15[12] = *(_OWORD *)((char *)v14 + 12);
  v9 = *(void (**)(void *, _OWORD *, __int128 *, uint64_t, uint64_t))(a1 + 40);
  if (v9)
  {
    v10 = *(void **)a1;
    v11 = *(_QWORD *)(a1 + 48);
    v14[0] = *(_OWORD *)v15;
    *(_OWORD *)((char *)v14 + 12) = *(_OWORD *)&v15[12];
    v12 = *(_OWORD *)(v5 + 424);
    v13 = *(_QWORD *)(v5 + 440);
    v9(v10, v14, &v12, v7, v11);
  }
  CFRelease(*(CFTypeRef *)a1);
}

uint64_t hoseSBAR_audioHosePrepareRTPTimestampsAndTransferBufferForSBAR(void *a1, _OWORD *a2, __int128 *a3, CMTime *a4, _OWORD *a5)
{
  uint64_t DerivedStorage;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTimeFlags v13;
  CMTimeEpoch v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  CMTimeEpoch v18;
  CMTimeValue v19;
  uint64_t started;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, _BYTE *, CMTime *);
  uint64_t v25;
  __int128 v26;
  CMTimeEpoch v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, __int128 *);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, _BYTE *, CMTime *);
  uint64_t v35;
  CMClockRef HostTimeClock;
  const void *TimeOfDayClock;
  uint64_t v38;
  CFTypeRef v40;
  CMTime time;
  _BYTE hostTime[28];
  CMTime v43;
  __int128 v44;
  uint64_t v45;
  CMTime v46;
  CMTime v47;
  CMTime rhs;
  CMTime lhs;
  CMTimeValue v50;
  CMTimeScale v51;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v47 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v46 = v47;
  v44 = kAPSNetworkTimeInvalid;
  v45 = 0x100000000;
  v43 = v47;
  *(_OWORD *)hostTime = *a2;
  *(_OWORD *)&hostTime[12] = *(_OWORD *)((char *)a2 + 12);
  hoseSBAR_updateRTPRolloverStateAssumingIncreasingTransportTimes((uint64_t)a1, hostTime);
  *(_OWORD *)hostTime = *a2;
  *(_OWORD *)&hostTime[12] = *(_OWORD *)((char *)a2 + 12);
  hoseSBAR_getMediaTimeForTransportTime(&lhs, (uint64_t)a1, (uint64_t)hostTime);
  value = lhs.value;
  flags = lhs.flags;
  timescale = lhs.timescale;
  epoch = lhs.epoch;
  *(_OWORD *)hostTime = *a5;
  *(_OWORD *)&hostTime[12] = *(_OWORD *)((char *)a5 + 12);
  hoseSBAR_getMediaTimeForTransportTime(&lhs, (uint64_t)a1, (uint64_t)hostTime);
  v50 = lhs.value;
  v51 = lhs.timescale;
  if ((flags & 1) == 0)
  {
    APSLogErrorAt(0);
    *(_OWORD *)hostTime = *a2;
    *(_OWORD *)&hostTime[12] = *(_OWORD *)((char *)a2 + 12);
    v40 = APSAudioTransportTimeCopyDebugDesc((uint64_t)hostTime);
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
      && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v38 = 4294894965;
    if (v40)
      CFRelease(v40);
    return v38;
  }
  v13 = lhs.flags;
  v14 = lhs.epoch;
  *(_QWORD *)(DerivedStorage + 520) = v50;
  *(_DWORD *)(DerivedStorage + 528) = v51;
  *(_DWORD *)(DerivedStorage + 532) = v13;
  *(_QWORD *)(DerivedStorage + 536) = v14;
  *(_OWORD *)hostTime = *a5;
  *(_OWORD *)&hostTime[12] = *(_OWORD *)((char *)a5 + 12);
  hoseSBAR_updateRTPRolloverStateOnFlushFromTransportTime((uint64_t)a1, hostTime);
  v15 = CMBaseObjectGetDerivedStorage();
  memset(hostTime, 0, 24);
  CMTimeMake((CMTime *)hostTime, 30, 1000);
  if (*(_BYTE *)(v15 + 740))
  {
    *(_QWORD *)&hostTime[16] = *(_QWORD *)(v15 + 760);
    *(_OWORD *)hostTime = *(_OWORD *)(v15 + 744);
  }
  lhs.value = value;
  lhs.timescale = timescale;
  lhs.flags = flags;
  lhs.epoch = epoch;
  rhs = *(CMTime *)hostTime;
  if (hoseSBAR_setVolumeFadeInCurve((uint64_t)a1, &lhs, &rhs))
  {
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR > 90
      || gLogCategory_APSEndpointStreamAudioHoseSBAR == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_14;
    }
LABEL_7:
    LogPrintF();
    goto LABEL_14;
  }
  if (*(_BYTE *)(v15 + 740))
  {
    v16 = *(_DWORD *)(v15 + 216);
    lhs = *(CMTime *)(v15 + 744);
    if (hoseSBAR_postNotifyStyleAudioFadeAppliedForAirPlayPlayback((uint64_t)a1, "com.apple.mediaexperience.fadeinappliedforplaybackhandoff", v16, &lhs))
    {
      if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 90
        && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
      {
        goto LABEL_7;
      }
    }
  }
LABEL_14:
  v17 = *a3;
  *(_QWORD *)(DerivedStorage + 440) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(DerivedStorage + 424) = v17;
  v18 = a4->epoch;
  *(_OWORD *)(DerivedStorage + 448) = *(_OWORD *)&a4->value;
  v19 = value;
  *(_QWORD *)(DerivedStorage + 464) = v18;
  *(_QWORD *)(DerivedStorage + 472) = v19;
  *(_DWORD *)(DerivedStorage + 480) = timescale;
  *(_DWORD *)(DerivedStorage + 484) = flags;
  *(_QWORD *)(DerivedStorage + 488) = epoch;
  started = hoseSBAR_startTheSynchronizerIfNecessary(a1, 0);
  if ((_DWORD)started)
  {
    v38 = started;
    goto LABEL_55;
  }
  v21 = (_OWORD *)(DerivedStorage + 448);
  v22 = (_OWORD *)(DerivedStorage + 472);
  v23 = *(_QWORD *)(DerivedStorage + 112);
  if ((*(_BYTE *)(DerivedStorage + 460) & 1) != 0)
  {
    lhs = *a4;
    v34 = *(uint64_t (**)(uint64_t, uint64_t, _BYTE *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 64);
    if (v34)
    {
      *(CMTime *)hostTime = lhs;
      v35 = v34(v23, 1747795565, hostTime, &v47);
      if (!(_DWORD)v35)
      {
        lhs = v47;
        *(_OWORD *)&rhs.value = *v22;
        rhs.epoch = *(_QWORD *)(DerivedStorage + 488);
        CMTimeSubtract((CMTime *)hostTime, &lhs, &rhs);
        *(_OWORD *)(DerivedStorage + 496) = *(_OWORD *)hostTime;
        v33 = *(_QWORD *)&hostTime[16];
        goto LABEL_24;
      }
      v38 = v35;
    }
    else
    {
      v38 = 4294954514;
    }
    APSLogErrorAt(v38);
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 90
      && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
    {
      goto LABEL_38;
    }
    return v38;
  }
  v24 = *(uint64_t (**)(uint64_t, uint64_t, _BYTE *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (v24)
  {
    *(_QWORD *)hostTime = value;
    *(_DWORD *)&hostTime[8] = timescale;
    *(_DWORD *)&hostTime[12] = flags;
    *(_QWORD *)&hostTime[16] = epoch;
    v25 = v24(v23, 1831681640, hostTime, &v46);
    if (!(_DWORD)v25)
    {
      v26 = *(_OWORD *)&v46.value;
      *v21 = *(_OWORD *)&v46.value;
      v27 = v46.epoch;
      *(_QWORD *)(DerivedStorage + 464) = v46.epoch;
      v28 = *(_QWORD *)(DerivedStorage + 64);
      *(_OWORD *)hostTime = v26;
      *(_QWORD *)&hostTime[16] = v27;
      v29 = CMClockConvertHostTimeToSystemUnits((CMTime *)hostTime);
      v30 = *(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v30)
      {
        v31 = v30(v28, v29, &v44);
        if (!(_DWORD)v31)
        {
          *(_OWORD *)(DerivedStorage + 424) = v44;
          *(_QWORD *)(DerivedStorage + 440) = v45;
          v32 = MEMORY[0x1E0CA2E68];
          *(_OWORD *)(DerivedStorage + 496) = *MEMORY[0x1E0CA2E68];
          v33 = *(_QWORD *)(v32 + 16);
LABEL_24:
          *(_QWORD *)(DerivedStorage + 512) = v33;
          HostTimeClock = CMClockGetHostTimeClock();
          TimeOfDayClock = (const void *)FigGetTimeOfDayClock();
          *(_OWORD *)hostTime = *(_OWORD *)&a4->value;
          *(_QWORD *)&hostTime[16] = a4->epoch;
          CMSyncConvertTime(&v43, (CMTime *)hostTime, HostTimeClock, TimeOfDayClock);
          if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
            && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
          {
            *(_OWORD *)hostTime = *v21;
            *(_QWORD *)&hostTime[16] = *(_QWORD *)(DerivedStorage + 464);
            CMTimeGetSeconds((CMTime *)hostTime);
            *(_OWORD *)hostTime = *v22;
            *(_QWORD *)&hostTime[16] = *(_QWORD *)(DerivedStorage + 488);
            CMTimeGetSeconds((CMTime *)hostTime);
            *(CMTime *)hostTime = v43;
            CMTimeGetSeconds((CMTime *)hostTime);
            *(_OWORD *)hostTime = *(_OWORD *)(DerivedStorage + 496);
            *(_QWORD *)&hostTime[16] = *(_QWORD *)(DerivedStorage + 512);
            CMTimeGetSeconds((CMTime *)hostTime);
            CMBufferQueueGetDuration(&time, *(CMBufferQueueRef *)(DerivedStorage + 552));
            CMTimeGetSeconds(&time);
            LogPrintF();
          }
          started = hoseSBAR_transferStashedSBufsIntoBuffersForSBAR(a1);
          v38 = started;
          if (!(_DWORD)started)
          {
            hoseSBAR_beginUnderrunIfNeeded((uint64_t)a1);
            return v38;
          }
LABEL_55:
          APSLogErrorAt(started);
          return v38;
        }
        v38 = v31;
      }
      else
      {
        v38 = 4294954514;
      }
      APSLogErrorAt(v38);
      if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 90
        && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
      {
        goto LABEL_38;
      }
      return v38;
    }
    v38 = v25;
  }
  else
  {
    v38 = 4294954514;
  }
  APSLogErrorAt(v38);
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 90
    && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
  {
LABEL_38:
    LogPrintF();
  }
  return v38;
}

uint64_t hoseSBAR_updateRTPRolloverStateOnFlushFromTransportTime(uint64_t a1, _OWORD *a2)
{
  uint64_t result;
  unsigned int RTPTimeForTransportTime;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  _BYTE v9[28];
  char v10;

  result = CMBaseObjectGetDerivedStorage();
  v10 = 0;
  if (**(_DWORD **)(result + 96) == 1)
  {
    *(_OWORD *)v9 = *a2;
    *(_OWORD *)&v9[12] = *(_OWORD *)((char *)a2 + 12);
    RTPTimeForTransportTime = hoseSBAR_getRTPTimeForTransportTime(a1, (uint64_t)v9, &v10);
    if (v10 && (v6 = RTPTimeForTransportTime, result = CMBaseObjectGetDerivedStorage(), *(_BYTE *)(result + 624)))
    {
      v7 = result;
      v8 = *(_DWORD *)(result + 620);
      if ((int)(v6 - v8) < 0)
      {
        if (v6 > v8)
        {
          --*(_DWORD *)(result + 616);
          if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50)
          {
            if (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1
              || (result = _LogCategory_Initialize(), (_DWORD)result))
            {
              result = LogPrintF();
            }
          }
        }
        *(_DWORD *)(v7 + 620) = v6;
      }
    }
    else
    {
      return APSLogErrorAt(0);
    }
  }
  return result;
}

uint64_t hoseSBAR_postNotifyStyleAudioFadeAppliedForAirPlayPlayback(uint64_t a1, const char *a2, int a3, CMTime *a4)
{
  double Seconds;
  uint64_t result;
  CMTime time;

  if (a3 == -1)
  {
    APSLogErrorAt(0);
    return 4294960578;
  }
  time = *a4;
  Seconds = CMTimeGetSeconds(&time);
  if (notify_set_state(a3, (unint64_t)(Seconds * 1000.0)))
  {
    APSLogErrorAt(0);
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 90
      && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 4294960582;
  }
  if (notify_post(a2))
  {
    APSLogErrorAt(0);
    return 4294960582;
  }
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR > 50)
    return 0;
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
  {
    LogPrintF();
    return 0;
  }
  return result;
}

uint64_t hoseSBAR_audioHoseApplyVolumeFadeCallbackDispatchInternal(uint64_t a1)
{
  uint64_t v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  const __CFAllocator *v9;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v11;
  CFMutableArrayRef v12;
  __CFArray *v13;
  uint64_t appended;
  const void *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, _QWORD, CFMutableDictionaryRef);
  __int128 v18;
  int v19;
  CMTime v21;
  CMTime time;

  v2 = *(_QWORD *)a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return 0;
  v4 = DerivedStorage;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5 == 2)
  {
    if (!*(_DWORD *)(DerivedStorage + 264))
    {
      APSLogErrorAt(0);
      if (gLogCategory_APSEndpointStreamAudioHoseSBAR > 90
        || gLogCategory_APSEndpointStreamAudioHoseSBAR == -1 && !_LogCategory_Initialize())
      {
        return 4294960591;
      }
LABEL_14:
      LogPrintF();
      return 4294960591;
    }
    *(_OWORD *)&v21.value = *(_OWORD *)(a1 + 12);
    v21.epoch = *(_QWORD *)(a1 + 28);
    v8 = CMBaseObjectGetDerivedStorage();
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
      v6 = 4294894966;
      APSLogErrorAt(0);
      goto LABEL_44;
    }
    v11 = Mutable;
    v12 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
    if (!v12)
    {
      v6 = 4294894966;
      APSLogErrorAt(0);
      CFRelease(v11);
      goto LABEL_44;
    }
    v13 = v12;
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
      && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
    {
      time = v21;
      CMTimeGetSeconds(&time);
      LogPrintF();
    }
    time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    appended = FigCFArrayAppendCMTime();
    if ((_DWORD)appended)
    {
      v6 = appended;
    }
    else
    {
      appended = FigCFArrayAppendDouble();
      if ((_DWORD)appended)
      {
        v6 = appended;
      }
      else
      {
        v15 = (const void *)*MEMORY[0x1E0CC5CD0];
        CFArrayAppendValue(v13, (const void *)*MEMORY[0x1E0CC5CD0]);
        time = v21;
        appended = FigCFArrayAppendCMTime();
        if ((_DWORD)appended)
        {
          v6 = appended;
        }
        else
        {
          appended = FigCFArrayAppendDouble();
          if ((_DWORD)appended)
          {
            v6 = appended;
          }
          else
          {
            CFArrayAppendValue(v13, v15);
            CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E0CC5CD8], v13);
            v16 = *(_QWORD *)(v8 + 104);
            v17 = *(uint64_t (**)(uint64_t, _QWORD, CFMutableDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 56);
            if (v17)
            {
              v6 = v17(v16, *MEMORY[0x1E0CC5DD0], v11);
              if (!(_DWORD)v6)
                goto LABEL_28;
            }
            else
            {
              v6 = 4294954514;
            }
            appended = v6;
          }
        }
      }
    }
    APSLogErrorAt(appended);
LABEL_28:
    CFRelease(v13);
    CFRelease(v11);
    if (!(_DWORD)v6)
    {
      *(_BYTE *)(v4 + 740) = 1;
      v18 = *(_OWORD *)(a1 + 12);
      *(_QWORD *)(v4 + 760) = *(_QWORD *)(a1 + 28);
      *(_OWORD *)(v4 + 744) = v18;
      v19 = *(_DWORD *)(v4 + 220);
      time = *(CMTime *)(a1 + 12);
      if (hoseSBAR_postNotifyStyleAudioFadeAppliedForAirPlayPlayback(v2, "com.apple.mediaexperience.fadeoutappliedforplaybackhandoff", v19, &time)&& gLogCategory_APSEndpointStreamAudioHoseSBAR <= 90&& (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      return 0;
    }
LABEL_44:
    APSLogErrorAt(v6);
    return v6;
  }
  if (v5 != 1)
  {
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR > 90
      || gLogCategory_APSEndpointStreamAudioHoseSBAR == -1 && !_LogCategory_Initialize())
    {
      return 4294960591;
    }
    goto LABEL_14;
  }
  if (*(_DWORD *)(DerivedStorage + 264))
  {
    APSLogErrorAt(0);
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR > 90
      || gLogCategory_APSEndpointStreamAudioHoseSBAR == -1 && !_LogCategory_Initialize())
    {
      return 4294960591;
    }
    goto LABEL_14;
  }
  v6 = 0;
  *(_BYTE *)(DerivedStorage + 740) = 1;
  v7 = *(_OWORD *)(a1 + 12);
  *(_QWORD *)(DerivedStorage + 760) = *(_QWORD *)(a1 + 28);
  *(_OWORD *)(DerivedStorage + 744) = v7;
  return v6;
}

void __hoseSBAR_audioHoseSetCallbacks_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  *(_QWORD *)(a1[4] + 384) = a1[5];
  v2 = a1[4];
  v3 = *(const void **)(v2 + 392);
  v4 = (const void *)a1[6];
  *(_QWORD *)(v2 + 392) = v4;
  if (v4)
    CFRetain(v4);
  if (v3)
    CFRelease(v3);
  v5 = (const void *)a1[7];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[6];
  if (v6)
    CFRelease(v6);
}

void hoseSBAR_audioHoseSetRateAndAnchorTimeCallbackDispatchInternal(uint64_t a1)
{
  void *v2;
  int v3;
  uint64_t DerivedStorage;
  uint64_t v5;
  CFTypeRef v6;
  CFTypeRef v7;
  uint64_t v8;
  CMTimeEpoch v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, _BYTE *, float);
  uint64_t v14;
  const void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, _BYTE *, CMTime *);
  uint64_t v26;
  CMClockRef HostTimeClock;
  uint64_t v28;
  OpaqueCMClock *v29;
  CFMutableDictionaryRef v30;
  void (*v31)(void *, uint64_t, _BYTE *, _BYTE *, _BYTE *, uint64_t, uint64_t);
  void *v32;
  uint64_t v33;
  uint64_t v34;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v36;
  CFMutableArrayRef v37;
  CFMutableArrayRef v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, _QWORD, CFMutableDictionaryRef);
  uint64_t v41;
  int v42;
  uint64_t v43;
  __int128 v44;
  _BYTE v45[28];
  CMTime v46;
  _BYTE v47[64];
  CMTime hostTime;
  _BYTE lhs[28];
  CMTime rhs;
  CMTime v51;
  CMTime v52;
  _BYTE time[28];
  CMTime v54;
  uint64_t v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  memset(&v47[32], 0, 28);
  v2 = *(void **)a1;
  v3 = *(_DWORD *)(a1 + 8);
  *(_OWORD *)v47 = *(_OWORD *)(a1 + 12);
  *(_OWORD *)&v47[12] = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&v46.value = *(_OWORD *)(a1 + 40);
  v46.epoch = *(_QWORD *)(a1 + 56);
  *(_OWORD *)v45 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v45[12] = *(_OWORD *)(a1 + 76);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    if (v3)
    {
      v5 = CMBaseObjectGetDerivedStorage();
      v54 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      hostTime.value = 0;
      *(_OWORD *)time = *(_OWORD *)v47;
      *(_OWORD *)&time[12] = *(_OWORD *)&v47[12];
      v6 = APSAudioTransportTimeCopyDebugDesc((uint64_t)time);
      *(_OWORD *)time = *(_OWORD *)v45;
      *(_OWORD *)&time[12] = *(_OWORD *)&v45[12];
      v7 = APSAudioTransportTimeCopyDebugDesc((uint64_t)time);
      if ((*(_BYTE *)(v5 + 484) & 1) != 0
        && gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
        && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v24 = *(_QWORD *)(v5 + 64);
      v25 = *(uint64_t (**)(uint64_t, _BYTE *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v25)
      {
        *(_OWORD *)time = *(_OWORD *)&v46.value;
        *(_QWORD *)&time[16] = v46.epoch;
        v26 = v25(v24, time, &hostTime);
        if (!(_DWORD)v26)
        {
          CMClockMakeHostTimeFromSystemUnits(&v54, hostTime.value);
          if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
            && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
          {
            *(CMTime *)time = v54;
            CMTimeGetSeconds((CMTime *)time);
            HostTimeClock = CMClockGetHostTimeClock();
            CMSyncGetTime(&v52, HostTimeClock);
            CMTimeGetSeconds(&v52);
            LogPrintF();
          }
          *(_OWORD *)time = *(_OWORD *)v47;
          *(_OWORD *)&time[12] = *(_OWORD *)&v47[12];
          v51 = v46;
          rhs = v54;
          *(_OWORD *)lhs = *(_OWORD *)v45;
          *(_OWORD *)&lhs[12] = *(_OWORD *)&v45[12];
          v28 = hoseSBAR_audioHosePrepareRTPTimestampsAndTransferBufferForSBAR(v2, time, (__int128 *)&v51.value, &rhs, lhs);
          v21 = v28;
          if ((_DWORD)v28)
            APSLogErrorAt(v28);
LABEL_41:
          if (v6)
            CFRelease(v6);
          if (v7)
            CFRelease(v7);
          if (!(_DWORD)v21)
          {
            v29 = CMClockGetHostTimeClock();
            CMClockGetTime((CMTime *)time, v29);
            *(_OWORD *)(DerivedStorage + 400) = *(_OWORD *)time;
            *(_QWORD *)(DerivedStorage + 416) = *(_QWORD *)&time[16];
LABEL_47:
            hoseSBAR_updateBufferingPriority(v2);
            v21 = 0;
            goto LABEL_48;
          }
          v23 = v21;
LABEL_27:
          APSLogErrorAt(v23);
          goto LABEL_48;
        }
        v21 = v26;
      }
      else
      {
        v21 = 4294954514;
      }
      APSLogErrorAt(v21);
      if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 90
        && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_41;
    }
    v8 = CMBaseObjectGetDerivedStorage();
    memset(time, 0, sizeof(time));
    *(_OWORD *)&v54.value = *MEMORY[0x1E0CA2E18];
    v9 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    v44 = *(_OWORD *)&v54.value;
    *(_OWORD *)&v52.value = *(_OWORD *)&v54.value;
    v52.epoch = v9;
    v10 = *(_QWORD *)(v8 + 472);
    v54.epoch = v9;
    v55 = v10;
    v56 = *(_DWORD *)(v8 + 480);
    v11 = *(_DWORD *)(v8 + 484);
    v43 = *(_QWORD *)(v8 + 488);
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
      && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v12 = *(_QWORD *)(v8 + 112);
    v13 = *(uint64_t (**)(uint64_t, _BYTE *, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v13)
    {
      v42 = v11;
      *(_OWORD *)lhs = *(_OWORD *)&v54.value;
      *(_QWORD *)&lhs[16] = v9;
      v14 = v13(v12, lhs, 0.0);
      if (!(_DWORD)v14)
      {
        hoseSBAR_waitForTimebaseRate(0.0);
        hoseSBAR_updateSynchronizerState((uint64_t)v2, 0);
        CMBufferQueueGetFirstPresentationTimeStamp(&v51, *(CMBufferQueueRef *)(v8 + 552));
        hoseSBAR_getTransportTimeForMediaTime((CMTime *)time, (uint64_t)v2, (uint64_t)&v51, **(_DWORD **)(v8 + 96));
        *(_OWORD *)(v8 + 496) = v44;
        *(_QWORD *)(v8 + 512) = v9;
        *(_QWORD *)(v8 + 440) = 0x100000000;
        *(_OWORD *)(v8 + 424) = kAPSNetworkTimeInvalid;
        *(_OWORD *)(v8 + 448) = v44;
        *(_QWORD *)(v8 + 464) = v9;
        *(_OWORD *)(v8 + 472) = v44;
        *(_QWORD *)(v8 + 488) = v9;
        v15 = *(const void **)(v8 + 824);
        if (v15)
        {
          CFRelease(v15);
          *(_QWORD *)(v8 + 824) = 0;
        }
        v16 = *(const void **)(v8 + 832);
        if (v16)
        {
          CFRelease(v16);
          *(_QWORD *)(v8 + 832) = 0;
        }
        v17 = *(_QWORD *)(v8 + 104);
        v18 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (v18)
        {
          v19 = v18(v17);
          if (!(_DWORD)v19)
          {
            *(_BYTE *)(v8 + 568) = 0;
            v20 = CMBaseObjectGetDerivedStorage();
            if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
              && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (!Mutable)
            {
              APSLogErrorAt(0);
              goto LABEL_71;
            }
            v36 = Mutable;
            v37 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
            if (!v37)
            {
              APSLogErrorAt(0);
              CFRelease(v36);
              goto LABEL_71;
            }
            v38 = v37;
            CFDictionarySetValue(v36, (const void *)*MEMORY[0x1E0CC5CD8], v37);
            v39 = *(_QWORD *)(v20 + 104);
            v40 = *(uint64_t (**)(uint64_t, _QWORD, CFMutableDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 56);
            if (v40)
            {
              v41 = v40(v39, *MEMORY[0x1E0CC5DD0], v36);
              if (!(_DWORD)v41)
                goto LABEL_70;
            }
            else
            {
              v41 = 4294954514;
            }
            APSLogErrorAt(v41);
LABEL_70:
            CFRelease(v38);
            CFRelease(v36);
            if (!(_DWORD)v41)
            {
              if ((v42 & 1) != 0)
              {
                CMTimebaseGetTime(&v54, *(CMTimebaseRef *)(v8 + 120));
                CMTimeMake(&rhs, 1000, 1000);
                *(_QWORD *)lhs = v55;
                *(_DWORD *)&lhs[8] = v56;
                *(_DWORD *)&lhs[12] = v42;
                *(_QWORD *)&lhs[16] = v43;
                CMTimeAdd(&v52, (CMTime *)lhs, &rhs);
                if (*(_BYTE *)(v8 + 740))
                {
                  *(CMTime *)lhs = v54;
                  hostTime = v52;
                  if ((CMTimeCompare((CMTime *)lhs, &hostTime) & 0x80000000) == 0)
                  {
                    *(_BYTE *)(v8 + 740) = 0;
                    *(_OWORD *)(v8 + 744) = v44;
                    *(_QWORD *)(v8 + 760) = v9;
                  }
                }
              }
LABEL_79:
              v22 = hoseSBAR_transferStashedSBufsIntoBuffersForSBAR(v2);
              if ((_DWORD)v22)
              {
                v21 = v22;
              }
              else
              {
                v22 = hoseSBAR_enqueueIntoSBARPrimingSBufIfNecessary((uint64_t)v2);
                if (!(_DWORD)v22)
                {
                  hoseSBAR_endUnderrun();
                  *(_OWORD *)&v47[32] = *(_OWORD *)time;
                  *(_OWORD *)&v47[44] = *(_OWORD *)&time[12];
                  *(_OWORD *)(DerivedStorage + 400) = v44;
                  *(_QWORD *)(DerivedStorage + 416) = v9;
                  goto LABEL_47;
                }
                v21 = v22;
              }
              goto LABEL_26;
            }
LABEL_71:
            if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 90
              && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            goto LABEL_79;
          }
          v21 = v19;
        }
        else
        {
          v21 = 4294954514;
        }
        v22 = v21;
LABEL_26:
        APSLogErrorAt(v22);
        *(_OWORD *)&v47[32] = *(_OWORD *)time;
        *(_OWORD *)&v47[44] = *(_OWORD *)&time[12];
        v23 = v21;
        goto LABEL_27;
      }
      v21 = v14;
    }
    else
    {
      v21 = 4294954514;
    }
    v22 = v21;
    goto LABEL_26;
  }
  APSLogErrorAt(0);
  v21 = 4294894964;
LABEL_48:
  if (!*(_BYTE *)DerivedStorage)
  {
    pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 248));
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
      && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (!(_DWORD)v21 && *(_DWORD *)(DerivedStorage + 264) != v3)
    {
      v30 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *(_DWORD *)(DerivedStorage + 264) = v3;
      CFDictionarySetInt64();
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      CFRelease(v30);
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 248));
  }
  v31 = *(void (**)(void *, uint64_t, _BYTE *, _BYTE *, _BYTE *, uint64_t, uint64_t))(a1 + 96);
  if (v31)
  {
    v32 = *(void **)a1;
    v33 = *(unsigned int *)(a1 + 8);
    v34 = *(_QWORD *)(a1 + 104);
    *(_OWORD *)time = *(_OWORD *)(a1 + 12);
    *(_OWORD *)&time[12] = *(_OWORD *)(a1 + 24);
    *(_OWORD *)v47 = *(_OWORD *)(a1 + 40);
    *(_QWORD *)&v47[16] = *(_QWORD *)(a1 + 56);
    *(_OWORD *)lhs = *(_OWORD *)&v47[32];
    *(_OWORD *)&lhs[12] = *(_OWORD *)&v47[44];
    v31(v32, v33, time, v47, lhs, v21, v34);
  }
  CFRelease(*(CFTypeRef *)a1);
}

void hoseSBAR_notifyAudioDataAvailableEngineCallbackDispatchInternal(CFTypeRef *a1)
{
  void *v2;
  _BYTE *DerivedStorage;

  v2 = (void *)*a1;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 30
    && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!*DerivedStorage)
  {
    DerivedStorage[353] = 1;
    hoseSBAR_maybeTriggerPullAudioBBuffs(v2);
  }
  CFRelease(*a1);
}

void hoseSBAR_audioHoseFlushWithinSampleRangeDispatchInternal(uint64_t a1)
{
  CFTypeRef v2;
  uint64_t v3;
  uint64_t DerivedStorage;
  CMTime *v5;
  CFTypeRef v6;
  CFTypeRef v7;
  __int128 v8;
  uint64_t v9;
  const __CFArray *v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v15;
  uint64_t v16;
  const __CFAllocator *v17;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  uint64_t v19;
  const void *v20;
  const void *value;
  const CMBufferCallbacks *v22;
  const void *v23;
  const void *v24;
  uint64_t v25;
  CMTimeFlags flags;
  CFTypeRef v27;
  CFTypeRef v28;
  CMTimeEpoch epoch;
  char *v30;
  char *v31;
  CFTypeRef v32;
  CMTimeValue v33;
  const void *v34;
  const void *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, CMTime *, void (*)(int, _DWORD *), char *);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  CMTimeFlags v47;
  int v48;
  _BYTE v49[28];
  _BYTE v50[28];
  _BYTE rhs[28];
  CMTime queueOut;
  CMTime v53;
  CMTime v54;
  CMTimeRange v55;
  CMTime time[3];
  CMTimeValue v57;
  CMTimeScale timescale;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v2 = *(CFTypeRef *)a1;
  v47 = *(_DWORD *)(a1 + 40);
  v48 = *(_DWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 72);
  v46 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)v50 = *(_OWORD *)(a1 + 12);
  *(_OWORD *)&v50[12] = *(_OWORD *)(a1 + 24);
  *(_OWORD *)v49 = *(_OWORD *)(a1 + 44);
  *(_OWORD *)&v49[12] = *(_OWORD *)(a1 + 56);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = (CMTime *)MEMORY[0x1E0CA2E18];
  v57 = *MEMORY[0x1E0CA2E18];
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  *(_OWORD *)&time[0].value = *(_OWORD *)v50;
  *(_OWORD *)&time[0].flags = *(_OWORD *)&v50[12];
  v6 = APSAudioTransportTimeCopyDebugDesc((uint64_t)time);
  *(_OWORD *)&time[0].value = *(_OWORD *)v49;
  *(_OWORD *)&time[0].flags = *(_OWORD *)&v49[12];
  v7 = APSAudioTransportTimeCopyDebugDesc((uint64_t)time);
  v8 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *(_OWORD *)&v55.start.value = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)&v55.start.epoch = v8;
  *(_OWORD *)&v55.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  v54 = *v5;
  v53 = v54;
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
  {
    time[0] = *(CMTime *)(DerivedStorage + 328);
    CMTimeGetSeconds(time);
    LogPrintF();
  }
  if (*(_BYTE *)DerivedStorage)
  {
    LODWORD(v25) = -72332;
    v45 = 0;
LABEL_60:
    APSLogErrorAt(v45);
    goto LABEL_72;
  }
  v9 = CMBaseObjectGetDerivedStorage();
  v10 = *(const __CFArray **)(v9 + 360);
  if (v10)
  {
    Count = CFArrayGetCount(v10);
    if (Count >= 1)
    {
      v12 = Count;
      for (i = 0; i != v12; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v9 + 360), i);
        hoseSBAR_enqueueAudioBBuffToInternalBuffersInternal((uint64_t)v2, (uint64_t)ValueAtIndex);
      }
    }
    v15 = *(const void **)(v9 + 360);
    if (v15)
    {
      CFRelease(v15);
      *(_QWORD *)(v9 + 360) = 0;
    }
  }
  *(_OWORD *)&time[0].value = *(_OWORD *)v50;
  *(_OWORD *)&time[0].flags = *(_OWORD *)&v50[12];
  hoseSBAR_getMediaTimeForTransportTime(&v54, (uint64_t)v2, (uint64_t)time);
  *(_OWORD *)&time[0].value = *(_OWORD *)v49;
  *(_OWORD *)&time[0].flags = *(_OWORD *)&v49[12];
  hoseSBAR_getMediaTimeForTransportTime(&v53, (uint64_t)v2, (uint64_t)time);
  *(CMTime *)rhs = v54;
  v16 = CMBaseObjectGetDerivedStorage();
  queueOut.value = 0;
  *(_OWORD *)&time[0].timescale = *(_OWORD *)rhs;
  time[0].value = 0;
  time[1].value = *(_QWORD *)&rhs[16];
  v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  v19 = CMBufferQueueCreate(v17, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)&queueOut);
  if ((_DWORD)v19)
  {
    v25 = v19;
LABEL_68:
    APSLogErrorAt(v19);
    goto LABEL_27;
  }
  time[0].value = queueOut.value;
  v19 = CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(v16 + 552), (OSStatus (__cdecl *)(CMBufferRef, void *))hoseSBAR_bufferQueuePopBackAfterTimeCallback, time);
  if ((_DWORD)v19)
  {
    v25 = v19;
    goto LABEL_68;
  }
  v20 = *(const void **)(v16 + 552);
  value = (const void *)queueOut.value;
  *(_QWORD *)(v16 + 552) = queueOut.value;
  if (value)
    CFRetain(value);
  if (v20)
    CFRelease(v20);
  if (queueOut.value)
  {
    CFRelease((CFTypeRef)queueOut.value);
    queueOut.value = 0;
  }
  v22 = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  v19 = CMBufferQueueCreate(v17, 0, v22, (CMBufferQueueRef *)&queueOut);
  if ((_DWORD)v19)
  {
    v25 = v19;
    goto LABEL_68;
  }
  time[0].value = queueOut.value;
  v19 = CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(v16 + 560), (OSStatus (__cdecl *)(CMBufferRef, void *))hoseSBAR_bufferQueuePopBackAfterTimeCallback, time);
  if ((_DWORD)v19)
  {
    v25 = v19;
    goto LABEL_68;
  }
  v23 = *(const void **)(v16 + 560);
  v24 = (const void *)queueOut.value;
  *(_QWORD *)(v16 + 560) = queueOut.value;
  if (v24)
    CFRetain(v24);
  if (v23)
    CFRelease(v23);
  v25 = 0;
LABEL_27:
  if (queueOut.value)
    CFRelease((CFTypeRef)queueOut.value);
  if ((_DWORD)v25)
  {
    v45 = v25;
    goto LABEL_60;
  }
  *(_OWORD *)&time[0].value = *(_OWORD *)v50;
  *(_OWORD *)&time[0].flags = *(_OWORD *)&v50[12];
  hoseSBAR_getMediaTimeForTransportTime((CMTime *)rhs, (uint64_t)v2, (uint64_t)time);
  hoseSBAR_getSynchronizerTimeForMediaTime(time, (uint64_t)v2, (__n128 *)rhs);
  v57 = time[0].value;
  flags = time[0].flags;
  timescale = time[0].timescale;
  if ((time[0].flags & 1) == 0)
  {
    APSLogErrorAt(0);
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 90
      && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    LODWORD(v25) = 0;
LABEL_72:
    v42 = 1;
    if (!v6)
      goto LABEL_50;
LABEL_49:
    CFRelease(v6);
    goto LABEL_50;
  }
  v27 = v7;
  v28 = v6;
  epoch = time[0].epoch;
  v30 = (char *)malloc_type_calloc(1uLL, 0x78uLL, 0x10A004079E0F624uLL);
  if (!v30)
  {
    APSLogErrorAt(0);
    LODWORD(v25) = -72330;
    v42 = 1;
    goto LABEL_47;
  }
  v31 = v30;
  *((_DWORD *)v30 + 8) = 0;
  v32 = CFRetain(v2);
  *((_DWORD *)v31 + 12) = v48;
  *((_OWORD *)v31 + 4) = *(_OWORD *)&v50[12];
  *(_OWORD *)(v31 + 52) = *(_OWORD *)v50;
  *((_DWORD *)v31 + 20) = v47;
  *(_OWORD *)(v31 + 84) = *(_OWORD *)v49;
  *((_OWORD *)v31 + 6) = *(_OWORD *)&v49[12];
  v33 = v57;
  *(_QWORD *)v31 = v32;
  *((_QWORD *)v31 + 1) = v33;
  *((_DWORD *)v31 + 4) = timescale;
  *((_DWORD *)v31 + 5) = flags;
  *((_QWORD *)v31 + 3) = epoch;
  *((_QWORD *)v31 + 5) = v3;
  *((_QWORD *)v31 + 14) = v46;
  ++*(_DWORD *)(DerivedStorage + 356);
  v34 = *(const void **)(DerivedStorage + 824);
  if (v34)
  {
    CFRelease(v34);
    *(_QWORD *)(DerivedStorage + 824) = 0;
  }
  v35 = *(const void **)(DerivedStorage + 832);
  if (v35)
  {
    CFRelease(v35);
    *(_QWORD *)(DerivedStorage + 832) = 0;
  }
  v36 = *(_QWORD *)(DerivedStorage + 104);
  v37 = *(uint64_t (**)(uint64_t, CMTime *, void (*)(int, _DWORD *), char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 56);
  if (!v37)
  {
    v43 = CMBaseObjectGetDerivedStorage();
    v25 = 4294954514;
    *((_DWORD *)v31 + 8) = -12782;
    dispatch_async_f(*(dispatch_queue_t *)(v43 + 280), v31, (dispatch_function_t)hoseSBAR_audioEngineFlushFromTimeSBARCallbackInternal);
LABEL_46:
    APSLogErrorAt(v25);
    v42 = 0;
LABEL_47:
    v6 = v28;
    v7 = v27;
    goto LABEL_48;
  }
  time[0].value = v57;
  time[0].timescale = timescale;
  time[0].flags = flags;
  time[0].epoch = epoch;
  v38 = v37(v36, time, hoseSBAR_audioEngineFlushFromTimeSBARCallback, v31);
  if ((_DWORD)v38)
  {
    v25 = v38;
    goto LABEL_46;
  }
  CMBaseObjectGetDerivedStorage();
  v6 = v28;
  if (FigCFEqual())
  {
    LODWORD(time[0].value) = 1;
    HIDWORD(time[0].value) = v48;
    *(_OWORD *)&time[0].timescale = *(_OWORD *)v50;
    *(_OWORD *)((char *)&time[0].epoch + 4) = *(_OWORD *)&v50[12];
    time[1].flags = v47;
    *(_OWORD *)&time[1].epoch = *(_OWORD *)v49;
    *(_OWORD *)((char *)&time[2].value + 4) = *(_OWORD *)&v49[12];
    hoseSBAR_addPendingFlushOperation((uint64_t)v2, (uint64_t)time);
  }
  time[0] = v53;
  *(CMTime *)rhs = v54;
  CMTimeSubtract(&queueOut, time, (CMTime *)rhs);
  time[0] = v54;
  CMTimeRangeMake(&v55, time, &queueOut);
  v39 = *(_QWORD *)(DerivedStorage + 840);
  *(CMTimeRange *)&time[0].value = v55;
  APSTimedInfoManagerFlushWithinTimeRange(v39, time);
  v40 = APSTimedInfoManagerSuspend(*(_QWORD *)(DerivedStorage + 840), 0);
  v7 = v27;
  if ((_DWORD)v40)
  {
    LODWORD(v25) = v40;
    APSLogErrorAt(v40);
    v42 = 0;
LABEL_48:
    if (!v6)
      goto LABEL_50;
    goto LABEL_49;
  }
  v41 = APSTimedInfoManagerResume(*(_QWORD *)(DerivedStorage + 840), *(const void **)(DerivedStorage + 120));
  LODWORD(v25) = v41;
  if ((_DWORD)v41)
    APSLogErrorAt(v41);
  v42 = 0;
  if (v6)
    goto LABEL_49;
LABEL_50:
  if (v7)
    CFRelease(v7);
  v44 = v42 ^ 1;
  if (!v3)
    v44 = 1;
  if ((v44 & 1) == 0)
  {
    *(_OWORD *)&time[0].value = *(_OWORD *)v50;
    *(_OWORD *)&time[0].flags = *(_OWORD *)&v50[12];
    *(_OWORD *)rhs = *(_OWORD *)v49;
    *(_OWORD *)&rhs[12] = *(_OWORD *)&v49[12];
    hoseSBAR_callAudioHoseFlushWithinSampleRangeCompletionHandlerInternal(v2, v3, v48, time, v47, rhs, v25, v46);
  }
  CFRelease(*(CFTypeRef *)a1);
}

uint64_t hoseSBAR_bufferQueuePopBackAfterTimeCallback(opaqueCMSampleBuffer *a1, uint64_t a2)
{
  CFDictionaryRef v4;
  const __CFAllocator *v5;
  uint64_t v6;
  const __CFString *v7;
  const __CFDictionary *v8;
  CMTime v10;
  CMTime v11;
  CMTime time2;
  CMTime time1;
  CMTime v14;
  CMTime v15;
  CMTime v16;
  CMTime v17;
  CMTime v18;
  CMSampleBufferRef sampleBufferOut;

  sampleBufferOut = 0;
  memset(&v17, 0, sizeof(v17));
  memset(&v16, 0, sizeof(v16));
  memset(&v15, 0, sizeof(v15));
  v14 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  CMSampleBufferGetOutputPresentationTimeStamp(&v18, a1);
  time1 = v18;
  time2 = *(CMTime *)(a2 + 8);
  if (CMTimeCompare(&time1, &time2) > 0)
    goto LABEL_4;
  CMSampleBufferGetOutputDuration(&v17, a1);
  time1 = v18;
  time2 = v17;
  CMTimeAdd(&v16, &time1, &time2);
  time1 = *(CMTime *)(a2 + 8);
  time2 = v16;
  if (CMTimeCompare(&time1, &time2) > 0)
  {
    CMBufferQueueEnqueue(*(CMBufferQueueRef *)a2, a1);
LABEL_4:
    v4 = 0;
    goto LABEL_11;
  }
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v6 = CMSampleBufferCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1, &sampleBufferOut);
  if ((_DWORD)v6)
  {
    APSLogErrorAt(v6);
    goto LABEL_4;
  }
  time1 = v16;
  time2 = *(CMTime *)(a2 + 8);
  CMTimeSubtract(&v15, &time1, &time2);
  v7 = (const __CFString *)*MEMORY[0x1E0CA2720];
  v8 = (const __CFDictionary *)CMGetAttachment(sampleBufferOut, (CFStringRef)*MEMORY[0x1E0CA2720], 0);
  if (v8)
  {
    CMTimeMakeFromDictionary(&v14, v8);
    time1 = v15;
    time2 = v14;
    CMTimeAdd(&v11, &time1, &time2);
    time1 = v17;
    if ((CMTimeCompare(&v11, &time1) & 0x80000000) == 0)
    {
      time2 = v15;
      v10 = v17;
      CMTimeAdd(&time1, &time2, &v10);
      v15 = time1;
    }
  }
  time1 = v15;
  v4 = CMTimeCopyAsDictionary(&time1, v5);
  if (v4)
  {
    CMSetAttachment(sampleBufferOut, v7, v4, 1u);
    CMBufferQueueEnqueue(*(CMBufferQueueRef *)a2, sampleBufferOut);
  }
  else
  {
    APSLogErrorAt(0);
  }
LABEL_11:
  if (sampleBufferOut)
    CFRelease(sampleBufferOut);
  if (v4)
    CFRelease(v4);
  return 0;
}

void hoseSBAR_audioEngineFlushFromTimeSBARCallback(int a1, _DWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  a2[8] = a1;
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 280), a2, (dispatch_function_t)hoseSBAR_audioEngineFlushFromTimeSBARCallbackInternal);
}

void hoseSBAR_audioEngineFlushFromTimeSBARCallbackInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  CFTypeRef v3;
  CFTypeRef v4;
  _OWORD *v5;
  int v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  _BYTE time1[28];
  CMTime time2;
  _BYTE time[28];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)time = *(_OWORD *)(a1 + 52);
  *(_OWORD *)&time[12] = *(_OWORD *)(a1 + 64);
  v3 = APSAudioTransportTimeCopyDebugDesc((uint64_t)time);
  *(_OWORD *)time = *(_OWORD *)(a1 + 84);
  *(_OWORD *)&time[12] = *(_OWORD *)(a1 + 96);
  v4 = APSAudioTransportTimeCopyDebugDesc((uint64_t)time);
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
  {
    *(_OWORD *)time = *(_OWORD *)(a1 + 8);
    *(_QWORD *)&time[16] = *(_QWORD *)(a1 + 24);
    CMTimeGetSeconds((CMTime *)time);
    *(_OWORD *)time = *(_OWORD *)(DerivedStorage + 328);
    *(_QWORD *)&time[16] = *(_QWORD *)(DerivedStorage + 344);
    CMTimeGetSeconds((CMTime *)time);
    LogPrintF();
  }
  v5 = (_OWORD *)(a1 + 52);
  --*(_DWORD *)(DerivedStorage + 356);
  v6 = *(_DWORD *)(a1 + 32);
  if (!v6)
  {
    *(_OWORD *)time1 = *(_OWORD *)(a1 + 8);
    *(_QWORD *)&time1[16] = *(_QWORD *)(a1 + 24);
    time2 = *(CMTime *)(DerivedStorage + 328);
    CMTimeMinimum((CMTime *)time, (CMTime *)time1, &time2);
    *(_OWORD *)(DerivedStorage + 328) = *(_OWORD *)time;
    *(_QWORD *)(DerivedStorage + 344) = *(_QWORD *)&time[16];
    v7 = *(void **)a1;
    *(_OWORD *)time = *v5;
    *(_OWORD *)&time[12] = *(_OWORD *)(a1 + 64);
    hoseSBAR_updateRTPRolloverStateOnFlushFromTransportTime((uint64_t)v7, time);
    v6 = *(_DWORD *)(a1 + 32);
  }
  v8 = *(const void **)a1;
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_DWORD *)(a1 + 48);
  v11 = *(_DWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a1 + 112);
  *(_OWORD *)time = *v5;
  *(_OWORD *)&time[12] = *(_OWORD *)(a1 + 64);
  *(_OWORD *)time1 = *(_OWORD *)(a1 + 84);
  *(_OWORD *)&time1[12] = *(_OWORD *)(a1 + 96);
  hoseSBAR_callAudioHoseFlushWithinSampleRangeCompletionHandlerInternal(v8, v9, v10, time, v11, time1, v6, v12);
  hoseSBAR_maybeTriggerPullAudioBBuffs(*(void **)a1);
  if (v3)
    CFRelease(v3);
  if (v4)
    CFRelease(v4);
  CFRelease(*(CFTypeRef *)a1);
  free((void *)a1);
}

uint64_t hoseSBAR_addPendingFlushOperation(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = (uint64_t)malloc_type_calloc(1uLL, 0x58uLL, 0x10A00403B7FD5E2uLL);
  if (result)
  {
    *(_OWORD *)(result + 16) = *(_OWORD *)a2;
    v5 = *(_OWORD *)(a2 + 16);
    v6 = *(_OWORD *)(a2 + 32);
    v7 = *(_OWORD *)(a2 + 48);
    *(_DWORD *)(result + 80) = *(_DWORD *)(a2 + 64);
    *(_OWORD *)(result + 48) = v6;
    *(_OWORD *)(result + 64) = v7;
    *(_OWORD *)(result + 32) = v5;
    v8 = *(uint64_t **)(DerivedStorage + 608);
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = v8;
    *v8 = result;
    *(_QWORD *)(DerivedStorage + 608) = result;
  }
  else if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 90)
  {
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

void hoseSBAR_callAudioHoseFlushWithinSampleRangeCompletionHandlerInternal(const void *a1, uint64_t a2, int a3, _OWORD *a4, int a5, _OWORD *a6, int a7, uint64_t a8)
{
  uint64_t DerivedStorage;
  uint64_t v17;
  _QWORD v18[2];
  int v19;
  _BYTE v20[28];
  int v21;
  _BYTE v22[28];
  uint64_t v23;
  uint64_t v24;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v23 = 0;
  if (a2)
  {
    v17 = DerivedStorage;
    v18[0] = CFRetain(a1);
    v18[1] = a2;
    v19 = a3;
    *(_OWORD *)v20 = *a4;
    *(_OWORD *)&v20[12] = *(_OWORD *)((char *)a4 + 12);
    v21 = a5;
    *(_OWORD *)v22 = *a6;
    *(_OWORD *)&v22[12] = *(_OWORD *)((char *)a6 + 12);
    LODWORD(v23) = a7;
    v24 = a8;
    APSDispatchAsyncFHelper(*(NSObject **)(v17 + 8), (uint64_t)hoseSBAR_callAudioEngineFlushWithinSampleRangeCompletionHandlerCaller, v18, 0x60uLL);
  }
}

void hoseSBAR_callAudioEngineFlushWithinSampleRangeCompletionHandlerCaller(uint64_t a1)
{
  CFTypeRef v2;
  void (*v3)(CFTypeRef, uint64_t, _OWORD *, uint64_t, _OWORD *, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];
  _OWORD v10[2];

  v2 = *(CFTypeRef *)a1;
  v3 = *(void (**)(CFTypeRef, uint64_t, _OWORD *, uint64_t, _OWORD *, uint64_t, uint64_t))(a1 + 8);
  v5 = *(unsigned int *)(a1 + 16);
  v6 = *(unsigned int *)(a1 + 48);
  v7 = *(unsigned int *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 88);
  v10[0] = *(_OWORD *)(a1 + 20);
  *(_OWORD *)((char *)v10 + 12) = *(_OWORD *)(a1 + 32);
  v9[0] = *(_OWORD *)(a1 + 52);
  *(_OWORD *)((char *)v9 + 12) = *(_OWORD *)(a1 + 64);
  v3(v2, v5, v10, v6, v9, v7, v8);
  CFRelease(*(CFTypeRef *)a1);
}

void hoseSBAR_audioHoseFlushCallbackDispatchInternal(uint64_t a1)
{
  CFTypeRef v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t DerivedStorage;
  int v7;
  CFTypeRef v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, _BYTE *, float);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  const void *v16;
  __int128 v17;
  uint64_t v18;
  const void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[28];
  _BYTE v25[68];

  v2 = *(CFTypeRef *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)v24 = *(_OWORD *)(a1 + 12);
  *(_OWORD *)&v24[12] = *(_OWORD *)(a1 + 24);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(_DWORD *)(DerivedStorage + 376);
  *(_OWORD *)v25 = *(_OWORD *)v24;
  *(_OWORD *)&v25[12] = *(_OWORD *)&v24[12];
  v8 = APSAudioTransportTimeCopyDebugDesc((uint64_t)v25);
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt(0);
    LODWORD(v22) = -72332;
    goto LABEL_27;
  }
  v9 = (__int128 *)MEMORY[0x1E0CA2E18];
  if (v7 == 1)
  {
    v10 = *(_QWORD *)(DerivedStorage + 112);
    v11 = *(uint64_t (**)(uint64_t, _BYTE *, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v11)
    {
      *(_OWORD *)v25 = *v9;
      *(_QWORD *)&v25[16] = *((_QWORD *)v9 + 2);
      v12 = v11(v10, v25, 0.0);
      if (!(_DWORD)v12)
      {
        hoseSBAR_waitForTimebaseRate(0.0);
        hoseSBAR_updateSynchronizerState((uint64_t)v2, 0);
        goto LABEL_10;
      }
      v22 = v12;
    }
    else
    {
      v22 = 4294954514;
    }
    v15 = v22;
LABEL_34:
    APSLogErrorAt(v15);
    goto LABEL_27;
  }
LABEL_10:
  *(_BYTE *)(DerivedStorage + 353) = 0;
  v13 = *(_QWORD *)(DerivedStorage + 104);
  v14 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v14)
    v14(v13);
  *(_BYTE *)(DerivedStorage + 568) = 0;
  v15 = CMBufferQueueReset(*(CMBufferQueueRef *)(DerivedStorage + 560));
  if ((_DWORD)v15)
  {
    LODWORD(v22) = v15;
    goto LABEL_34;
  }
  if (v7 == 1)
    hoseSBAR_enqueueIntoSBARPrimingSBufIfNecessary((uint64_t)v2);
  CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    memset(v25, 0, 36);
    *(_DWORD *)&v25[36] = v3;
    *(_OWORD *)&v25[40] = *(_OWORD *)v24;
    *(_OWORD *)&v25[52] = *(_OWORD *)&v24[12];
    hoseSBAR_addPendingFlushOperation((uint64_t)v2, (uint64_t)v25);
  }
  v15 = APSTimedInfoManagerFlush(*(_QWORD *)(DerivedStorage + 840));
  if ((_DWORD)v15)
  {
    LODWORD(v22) = v15;
    goto LABEL_34;
  }
  v15 = APSTimedInfoManagerSuspend(*(_QWORD *)(DerivedStorage + 840), 0);
  if ((_DWORD)v15)
  {
    LODWORD(v22) = v15;
    goto LABEL_34;
  }
  v15 = APSTimedInfoManagerResume(*(_QWORD *)(DerivedStorage + 840), *(const void **)(DerivedStorage + 120));
  if ((_DWORD)v15)
  {
    LODWORD(v22) = v15;
    goto LABEL_34;
  }
  v16 = *(const void **)(DerivedStorage + 360);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(DerivedStorage + 360) = 0;
  }
  CMBufferQueueReset(*(CMBufferQueueRef *)(DerivedStorage + 552));
  *(_QWORD *)(DerivedStorage + 440) = 0x100000000;
  *(_OWORD *)(DerivedStorage + 424) = kAPSNetworkTimeInvalid;
  v17 = *v9;
  *(_OWORD *)(DerivedStorage + 448) = *v9;
  v18 = *((_QWORD *)v9 + 2);
  *(_QWORD *)(DerivedStorage + 464) = v18;
  *(_OWORD *)(DerivedStorage + 472) = v17;
  *(_QWORD *)(DerivedStorage + 488) = v18;
  *(_OWORD *)(DerivedStorage + 496) = v17;
  *(_QWORD *)(DerivedStorage + 512) = v18;
  *(_QWORD *)(DerivedStorage + 536) = v18;
  *(_OWORD *)(DerivedStorage + 520) = v17;
  *(_QWORD *)(DerivedStorage + 320) = v18;
  *(_OWORD *)(DerivedStorage + 304) = v17;
  *(_QWORD *)(DerivedStorage + 344) = v18;
  *(_OWORD *)(DerivedStorage + 328) = v17;
  *(_DWORD *)(DerivedStorage + 628) = 0;
  *(_QWORD *)(DerivedStorage + 632) = 0;
  v19 = *(const void **)(DerivedStorage + 824);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(DerivedStorage + 824) = 0;
  }
  v20 = *(const void **)(DerivedStorage + 832);
  if (v20)
  {
    CFRelease(v20);
    *(_QWORD *)(DerivedStorage + 832) = 0;
  }
  CFBagRemoveAllValues(*(CFMutableBagRef *)(DerivedStorage + 768));
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 776));
  *(_QWORD *)(DerivedStorage + 784) = 0;
  v21 = CMBaseObjectGetDerivedStorage();
  LODWORD(v22) = 0;
  *(_QWORD *)(v21 + 616) = 0;
  *(_BYTE *)(v21 + 624) = 0;
  *(_BYTE *)(DerivedStorage + 352) = 0;
LABEL_27:
  if (v8)
    CFRelease(v8);
  if (v5)
  {
    v23 = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)&v25[48] = 0;
    *(_QWORD *)v25 = CFRetain(v2);
    *(_QWORD *)&v25[8] = v5;
    *(_DWORD *)&v25[16] = v3;
    *(_OWORD *)&v25[20] = *(_OWORD *)v24;
    *(_OWORD *)&v25[32] = *(_OWORD *)&v24[12];
    *(_DWORD *)&v25[48] = v22;
    *(_QWORD *)&v25[56] = v4;
    APSDispatchAsyncFHelper(*(NSObject **)(v23 + 8), (uint64_t)hoseSBAR_callAudioHoseFlushCompletionHandlerCaller, v25, 0x40uLL);
  }
  CFRelease(*(CFTypeRef *)a1);
}

void hoseSBAR_callAudioHoseFlushCompletionHandlerCaller(uint64_t a1)
{
  CFTypeRef v2;
  void (*v3)(CFTypeRef, uint64_t, _OWORD *, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD v8[2];

  v2 = *(CFTypeRef *)a1;
  v3 = *(void (**)(CFTypeRef, uint64_t, _OWORD *, uint64_t, uint64_t))(a1 + 8);
  v5 = *(unsigned int *)(a1 + 16);
  v6 = *(unsigned int *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8[0] = *(_OWORD *)(a1 + 20);
  *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)(a1 + 32);
  v3(v2, v5, v8, v6, v7);
  CFRelease(*(CFTypeRef *)a1);
}

void hoseSBAR_audioHoseTimeAnnounceDispatchInternal(uint64_t a1)
{
  CFTypeRef v2;
  int v3;
  OpaqueCMBlockBuffer *v4;
  _BYTE *DerivedStorage;
  _BYTE *v6;
  int v7;
  uint64_t DataPointer;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, CMTime *, CMTime *);
  double v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, CMTime *, CMTime *);
  double v19;
  int64_t v20;
  unsigned int v21;
  int64_t v22;
  __int128 v23;
  CMTimeEpoch epoch;
  uint64_t v25;
  CMTimeFlags flags;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTimeEpoch v29;
  OpaqueCMClock *HostTimeClock;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, CMTime *, CMTime *, float);
  const void *v33;
  CMTime v34;
  CMTime v35;
  CMTime v36;
  CMTime v37;
  CMTime dataPointerOut;
  CMTime time;

  v2 = *(CFTypeRef *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(OpaqueCMBlockBuffer **)(a1 + 16);
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v37 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v36 = v37;
  if (*DerivedStorage)
    goto LABEL_48;
  v6 = DerivedStorage;
  if (DerivedStorage[352])
    goto LABEL_48;
  if (v3 > 1952542317)
  {
    if (v3 != 1952542318)
    {
      v7 = 1953526896;
LABEL_8:
      if (v3 != v7)
      {
        if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 90
          && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
        {
          goto LABEL_36;
        }
        goto LABEL_48;
      }
      dataPointerOut.value = 0;
      v35.value = 0;
      DataPointer = CMBlockBufferGetDataPointer(v4, 0, 0, 0, (char **)&dataPointerOut);
      if (!(_DWORD)DataPointer)
      {
        v9 = *(_QWORD *)(dataPointerOut.value + 4);
        v10 = *(_QWORD *)(dataPointerOut.value + 16);
        v11 = *((_QWORD *)v6 + 8);
        v12 = *(unsigned int (**)(uint64_t, CMTime *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 24);
        if (!v12
          || (v13 = (double)bswap64(v9) / 1000000000.0,
              time.value = bswap64(v10),
              *(_QWORD *)&time.timescale = vcvtd_n_u64_f64(v13 - floor(v13), 0x40uLL),
              time.epoch = vcvtmd_s64_f64(v13),
              v12(v11, &time, &v35)))
        {
          if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 90
            && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
        v20 = UpTicksToNanoseconds();
        CMTimeMake(&v36, v20, 1000000000);
        v21 = bswap32(*(_DWORD *)dataPointerOut.value);
        goto LABEL_33;
      }
LABEL_47:
      APSLogErrorAt(DataPointer);
      goto LABEL_48;
    }
  }
  else if (v3 != 1950436942)
  {
    v7 = 1951421520;
    goto LABEL_8;
  }
  dataPointerOut.value = 0;
  v35.value = 0;
  DataPointer = CMBlockBufferGetDataPointer(v4, 0, 0, 0, (char **)&dataPointerOut);
  if ((_DWORD)DataPointer)
    goto LABEL_47;
  v14 = *(_DWORD *)dataPointerOut.value;
  v15 = *(_DWORD *)(dataPointerOut.value + 4);
  v16 = *(_DWORD *)(dataPointerOut.value + 8);
  v17 = *((_QWORD *)v6 + 8);
  v18 = *(unsigned int (**)(uint64_t, CMTime *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v18
    || (v19 = (double)bswap32(v15) + (double)bswap32(v16) * 2.32830644e-10 + -2208988800.0,
        time.value = 0,
        *(_QWORD *)&time.timescale = vcvtd_n_u64_f64(v19 - floor(v19), 0x40uLL),
        time.epoch = vcvtmd_s64_f64(v19),
        v18(v17, &time, &v35)))
  {
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 90
      && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  v21 = bswap32(v14);
  v22 = UpTicksToNanoseconds();
  CMTimeMake(&v36, v22, 1000000000);
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 30
    && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
  {
    time = v36;
    CMTimeGetSeconds(&time);
    LogPrintF();
  }
LABEL_33:
  hoseSBAR_updateRTPRolloverStateAssumingIncreasingRTPTimes((uint64_t)v2, v21);
  hoseSBAR_getMediaTimeForRTPTime(&v37, (uint64_t)v2, v21);
  *(CMTime *)(v6 + 448) = v36;
  v23 = *(_OWORD *)&v37.value;
  *(_OWORD *)(v6 + 472) = *(_OWORD *)&v37.value;
  epoch = v37.epoch;
  *((_QWORD *)v6 + 61) = v37.epoch;
  v25 = MEMORY[0x1E0CA2E68];
  *((_OWORD *)v6 + 31) = *MEMORY[0x1E0CA2E68];
  *((_QWORD *)v6 + 64) = *(_QWORD *)(v25 + 16);
  *(_OWORD *)&dataPointerOut.value = v23;
  dataPointerOut.epoch = epoch;
  hoseSBAR_getSynchronizerTimeForMediaTime(&time, (uint64_t)v2, (__n128 *)&dataPointerOut);
  flags = time.flags;
  if ((time.flags & 1) != 0)
  {
    value = time.value;
    timescale = time.timescale;
    v29 = time.epoch;
    if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
      && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
    {
      time.value = value;
      time.timescale = timescale;
      time.flags = flags;
      time.epoch = v29;
      CMTimeGetSeconds(&time);
      time = v36;
      CMTimeGetSeconds(&time);
      HostTimeClock = CMClockGetHostTimeClock();
      CMClockGetTime(&v35, HostTimeClock);
      CMTimeGetSeconds(&v35);
      LogPrintF();
    }
    v31 = *((_QWORD *)v6 + 14);
    v34 = v36;
    v32 = *(uint64_t (**)(uint64_t, CMTime *, CMTime *, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
    if (v32)
    {
      time.value = value;
      time.timescale = timescale;
      time.flags = flags;
      time.epoch = v29;
      dataPointerOut = v34;
      DataPointer = v32(v31, &time, &dataPointerOut, 1.0);
      if (!(_DWORD)DataPointer)
      {
        hoseSBAR_waitForTimebaseRate(1.0);
        CMTimebaseSetTimerDispatchSourceToFireImmediately(*((CMTimebaseRef *)v6 + 15), *((dispatch_source_t *)v6 + 68));
        hoseSBAR_updateSynchronizerState((uint64_t)v2, 1);
        v6[352] = 1;
        goto LABEL_48;
      }
    }
    else
    {
      DataPointer = 4294954514;
    }
    goto LABEL_47;
  }
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 50
    && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
  {
LABEL_36:
    LogPrintF();
  }
LABEL_48:
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v33 = *(const void **)(a1 + 16);
  if (v33)
    CFRelease(v33);
}

void hoseSBAR_hoseSendAudioDataDispatchInternal(uint64_t a1)
{
  const void *v2;
  CFTypeRef v3;
  uint64_t DerivedStorage;
  const void *v5;
  _QWORD v6[2];

  v3 = *(CFTypeRef *)a1;
  v2 = *(const void **)(a1 + 8);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6[0] = v3;
  v6[1] = v2;
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 30
    && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!*(_BYTE *)DerivedStorage)
  {
    CFRetain(v3);
    CFRetain(v2);
    APSDispatchAsyncFHelper(*(NSObject **)(DerivedStorage + 280), (uint64_t)hoseSBAR_sbarEnqueueSingleAudioBBuffDispatchFunction, v6, 0x10uLL);
  }
  CFRelease(*(CFTypeRef *)a1);
  v5 = *(const void **)(a1 + 8);
  if (v5)
    CFRelease(v5);
}

void hoseSBAR_sbarEnqueueSingleAudioBBuffDispatchFunction(uint64_t a1)
{
  uint64_t started;
  const void *v3;

  if (!*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 242)
    && (started = hoseSBAR_startTheSynchronizerIfNecessary(*(const void **)a1, 1), (_DWORD)started)
    || (started = hoseSBAR_enqueueAudioBBuffToInternalBuffersInternal(*(_QWORD *)a1, *(_QWORD *)(a1 + 8)),
        (_DWORD)started)
    || (started = hoseSBAR_fillSBARToHighWater(*(_QWORD *)a1), (_DWORD)started))
  {
    APSLogErrorAt(started);
  }
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v3 = *(const void **)(a1 + 8);
  if (v3)
    CFRelease(v3);
}

__CFString *hoseSBAR_audioHoseProtocolCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("APSEndpointStreamAudioHoseSBAR <APSEndpointStreamAudioHoseProtocol> on <%p>"), a1);
  return Mutable;
}

void hoseSBAR_setAudioProcessingTapIDInternal(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, _QWORD, uint64_t);
  uint64_t v5;
  const void *v6;

  v2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 104);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v4)
  {
    v5 = v4(v2, *MEMORY[0x1E0CC5D60], v3);
    if (!(_DWORD)v5)
      goto LABEL_10;
  }
  else
  {
    v5 = 4294954514;
  }
  if (gLogCategory_APSEndpointStreamAudioHoseSBAR <= 90
    && (gLogCategory_APSEndpointStreamAudioHoseSBAR != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APSLogErrorAt(v5);
LABEL_10:
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v6 = *(const void **)(a1 + 8);
  if (v6)
    CFRelease(v6);
}

void hoseSBAR_invalidateInternal(uint64_t a1)
{
  _BYTE *DerivedStorage;
  _BYTE *v3;
  uint64_t v4;
  __int128 *v5;
  void (*v6)(uint64_t, __int128 *, float);
  uint64_t v7;
  void (*v8)(uint64_t);
  opaqueCMBufferQueue *v9;
  opaqueCMBufferQueue *v10;
  const void *v11;
  __int128 v12;
  uint64_t v13;
  __CFBag *v14;
  __CFDictionary *v15;
  __CFDictionary *v16;
  __CFDictionary *v17;
  __CFDictionary *v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  __int128 v24;
  uint64_t v25;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    v3 = DerivedStorage;
    CMBaseObjectGetDerivedStorage();
    v4 = *((_QWORD *)v3 + 14);
    v5 = (__int128 *)MEMORY[0x1E0CA2E18];
    if (v4)
    {
      v6 = *(void (**)(uint64_t, __int128 *, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v6)
      {
        v24 = *v5;
        v25 = *((_QWORD *)v5 + 2);
        v6(v4, &v24, 0.0);
      }
      hoseSBAR_updateSynchronizerState(a1, 0);
    }
    v7 = *((_QWORD *)v3 + 13);
    if (v7)
    {
      v8 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v8)
        v8(v7);
      v3[568] = 0;
    }
    v9 = (opaqueCMBufferQueue *)*((_QWORD *)v3 + 69);
    if (v9)
      CMBufferQueueReset(v9);
    v10 = (opaqueCMBufferQueue *)*((_QWORD *)v3 + 70);
    if (v10)
      CMBufferQueueReset(v10);
    v3[353] = 0;
    v11 = (const void *)*((_QWORD *)v3 + 45);
    if (v11)
    {
      CFRelease(v11);
      *((_QWORD *)v3 + 45) = 0;
    }
    *((_QWORD *)v3 + 55) = 0x100000000;
    *(_OWORD *)(v3 + 424) = kAPSNetworkTimeInvalid;
    v12 = *v5;
    *((_OWORD *)v3 + 28) = *v5;
    v13 = *((_QWORD *)v5 + 2);
    *((_QWORD *)v3 + 58) = v13;
    *(_OWORD *)(v3 + 472) = v12;
    *((_QWORD *)v3 + 61) = v13;
    *((_OWORD *)v3 + 31) = v12;
    *((_QWORD *)v3 + 64) = v13;
    *((_QWORD *)v3 + 67) = v13;
    *(_OWORD *)(v3 + 520) = v12;
    *((_QWORD *)v3 + 40) = v13;
    *((_OWORD *)v3 + 19) = v12;
    *((_QWORD *)v3 + 43) = v13;
    *(_OWORD *)(v3 + 328) = v12;
    *((_DWORD *)v3 + 157) = 0;
    *((_QWORD *)v3 + 79) = 0;
    v14 = (__CFBag *)*((_QWORD *)v3 + 96);
    if (v14)
      CFBagRemoveAllValues(v14);
    v15 = (__CFDictionary *)*((_QWORD *)v3 + 97);
    if (v15)
      CFDictionaryRemoveAllValues(v15);
    *((_QWORD *)v3 + 98) = 0;
    v16 = (__CFDictionary *)*((_QWORD *)v3 + 99);
    if (v16)
      CFDictionaryRemoveAllValues(v16);
    v17 = (__CFDictionary *)*((_QWORD *)v3 + 100);
    if (v17)
      CFDictionaryRemoveAllValues(v17);
    v18 = (__CFDictionary *)*((_QWORD *)v3 + 101);
    if (v18)
      CFDictionaryRemoveAllValues(v18);
    v19 = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)(v19 + 616) = 0;
    *(_BYTE *)(v19 + 624) = 0;
    v3[352] = 0;
    while (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 600))
      hoseSBAR_discardHeadFlushOperation();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    v20 = (const void *)*((_QWORD *)v3 + 9);
    if (v20)
    {
      CFRelease(v20);
      *((_QWORD *)v3 + 9) = 0;
    }
    v21 = *((_QWORD *)v3 + 14);
    if (v21)
    {
      v22 = *((_QWORD *)v3 + 13);
      if (v22)
      {
        v23 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v23)
          v23(v21, v22);
      }
    }
    *v3 = 1;
  }
}

uint64_t APSEndpointStreamAudioHoseSBARInvalidate(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);

  if (!a1)
    return 4294954516;
  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
  if (v2)
    return v2(a1);
  else
    return 4294954514;
}

uint64_t APSAsyncLoggerGetTypeID()
{
  if (APSAsyncLoggerGetTypeID_once != -1)
    dispatch_once(&APSAsyncLoggerGetTypeID_once, &__block_literal_global_727);
  return APSAsyncLoggerGetTypeID_typeID;
}

uint64_t APSAsyncLoggerLogMessage(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  if (a2)
  {
    v9 = a2;
    if (a3)
    {
      v4 = a3[1];
      v10 = *a3;
      v11 = v4;
    }
    else
    {
      v10 = 0u;
      v11 = 0u;
    }
    v12 = mach_absolute_time();
    APSAtomicMessageQueueSendMessage(*(_QWORD *)(a1 + 16), &v9);
    v5 = *(unsigned int **)(*(_QWORD *)(a1 + 24) + 16);
    v6 = v5 + 10;
    while (1)
    {
      v7 = __ldxr(v6);
      if (v7 != 1)
        break;
      if (!__stlxr(2u, v6))
      {
        caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(v5 + 6), (caulk::concurrent::message *)v5);
        return 0;
      }
    }
    result = 0;
    __clrex();
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  return result;
}

uint64_t APSAsyncLoggerGetSharedLogger()
{
  if (APSAsyncLoggerGetSharedLogger_onceToken != -1)
    dispatch_once_f(&APSAsyncLoggerGetSharedLogger_onceToken, &APSAsyncLoggerGetSharedLogger_gLogger, (dispatch_function_t)asyncLogger_initOnce);
  return APSAsyncLoggerGetSharedLogger_gLogger;
}

void asyncLogger_initOnce(uint64_t *a1)
{
  uint64_t v2;
  uint64_t Instance;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;

  if (!a1)
    goto LABEL_10;
  v2 = *MEMORY[0x1E0C9AE00];
  if (APSAsyncLoggerGetTypeID_once != -1)
    dispatch_once(&APSAsyncLoggerGetTypeID_once, &__block_literal_global_727);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v4 = Instance;
    *(_QWORD *)(Instance + 16) = 0;
    *(_QWORD *)(Instance + 24) = 0;
    v5 = APSAtomicMessageQueueCreate(v2, 48, (uint64_t *)(Instance + 16));
    if ((_DWORD)v5 || (SNPrintF(), (v5 = FigDispatchQueueCreateWithPriority()) == 0))
    {
      APSLogErrorAt(v5);
      CFRelease((CFTypeRef)v4);
    }
    else
    {
      v6 = v5;
      v7 = (void *)CFRetain(*(CFTypeRef *)(v4 + 16));
      v8 = APSRealTimeSignalCreate(v6, v7, (uint64_t)asyncLogger_debugSignalHandler, (void (__cdecl *)(void *))MEMORY[0x1E0C98BC0], (uint64_t *)(v4 + 24));
      if ((_DWORD)v8)
      {
        APSLogErrorAt(v8);
        CFRelease((CFTypeRef)v4);
      }
      else
      {
        *a1 = v4;
      }
      dispatch_release(v6);
    }
  }
  else
  {
LABEL_10:
    APSLogErrorAt(0);
  }
}

uint64_t asyncLogger_debugSignalHandler(uint64_t a1)
{
  uint64_t result;
  double v3;
  uint64_t v4;
  _OWORD v5[2];
  __int128 v6;

  v6 = 0u;
  memset(v5, 0, sizeof(v5));
  while (1)
  {
    result = APSAtomicMessageQueueReadMessage(a1, v5);
    if (!(_DWORD)result)
      break;
    v3 = (double)(mach_absolute_time() - *((_QWORD *)&v6 + 1)) * 1000.0;
    v4 = UpTicksPerSecond();
    (*(void (**)(char *, double))&v5[0])((char *)v5 + 8, v3 / (double)(unint64_t)v4);
  }
  return result;
}

uint64_t APSCryptorGetClassID()
{
  if (APSCryptorGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APSCryptorGetClassID_sRegisterOnce, &APSCryptorGetClassID_sClassID, (dispatch_function_t)cryptor_registerBaseClass);
  return APSCryptorGetClassID_sClassID;
}

uint64_t cryptor_registerBaseClass()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFStringRef cryptor_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[APSCryptor %p]"), a1);
}

uint64_t APSCryptorGetTypeID()
{
  if (APSCryptorGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APSCryptorGetClassID_sRegisterOnce, &APSCryptorGetClassID_sClassID, (dispatch_function_t)cryptor_registerBaseClass);
  return CMBaseClassGetCFTypeID();
}

void APSTimeProfilerTaskBegin(CFTypeRef cf)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD v5[3];

  if (profiler_getShared_sAPSTimeProfilerOnce != -1)
    dispatch_once_f(&profiler_getShared_sAPSTimeProfilerOnce, &profiler_getShared_sAPSTimeProfiler, (dispatch_function_t)profiler_initialize);
  if (profiler_getShared_sAPSTimeProfiler)
  {
    v5[0] = 1;
    v5[1] = CFRetain(cf);
    v5[2] = mach_absolute_time();
    APSAtomicMessageQueueSendMessage(qword_1EF9206F8, v5);
    v2 = *(unsigned int **)(qword_1EF920700 + 16);
    v3 = v2 + 10;
    while (1)
    {
      v4 = __ldxr(v3);
      if (v4 != 1)
        break;
      if (!__stlxr(2u, v3))
      {
        caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(v2 + 6), (caulk::concurrent::message *)v2);
        return;
      }
    }
    __clrex();
  }
}

void profiler_initialize(uint64_t a1)
{
  const void *Int64;
  NSObject *v3;
  NSObject *v4;
  const __CFAllocator *v5;
  const CFDictionaryKeyCallBacks *v6;

  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  Int64 = APSSettingsGetInt64(CFSTR("enableTimeProfiler"), 0);
  *(_BYTE *)a1 = Int64 != 0;
  if (Int64)
  {
    v3 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
    v4 = dispatch_queue_create("APSTimeProfiler", v3);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v4);
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    APSAtomicMessageQueueCreate(*MEMORY[0x1E0C9AE00], 24, (uint64_t *)(a1 + 24));
    APSRealTimeSignalCreate(*(NSObject **)(a1 + 8), (void *)a1, (uint64_t)profiler_messageSignalHandler, 0, (uint64_t *)(a1 + 32));
    v6 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    *(_QWORD *)(a1 + 40) = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(a1 + 48) = CFDictionaryCreateMutable(v5, 0, v6, 0);
    dispatch_set_context(*(dispatch_object_t *)(a1 + 16), (void *)a1);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 16), (dispatch_function_t)profiler_timerTick);
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 16), 0, 0x12A05F200uLL, 0x4C4B40uLL);
    dispatch_resume(*(dispatch_object_t *)(a1 + 16));
  }
}

uint64_t profiler_messageSignalHandler(uint64_t a1)
{
  const __CFAllocator *v2;
  const CFArrayCallBacks *v3;
  uint64_t result;
  void *v5;
  _QWORD *Mutable;
  const __CFArray *v7;
  const __CFNumber *ValueAtIndex;
  int Value;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v15;
  uint64_t __dst;
  void *key;
  unint64_t v18;
  unint64_t valuePtr;

  __dst = 0;
  key = 0;
  v18 = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  while (1)
  {
    result = APSAtomicMessageQueueReadMessage(*(_QWORD *)(a1 + 24), &__dst);
    if (!(_DWORD)result)
      return result;
    valuePtr = 0;
    if ((_DWORD)__dst == 1)
    {
      v5 = key;
      if (!CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), key))
      {
        Mutable = CFArrayCreateMutable(v2, 0, v3);
        if (!Mutable)
          goto LABEL_30;
        v15 = Mutable;
        CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 40), v5, Mutable);
        CFRelease(v15);
      }
      Mutable = (_QWORD *)CFArrayAppendInt64();
      if ((_DWORD)Mutable)
        goto LABEL_30;
LABEL_24:
      if (v5)
        goto LABEL_25;
    }
    else
    {
      if ((_DWORD)__dst != 2)
      {
        v5 = key;
        goto LABEL_24;
      }
      v5 = key;
      Mutable = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), key);
      if (!Mutable)
        goto LABEL_30;
      v7 = (const __CFArray *)Mutable;
      if (CFArrayGetCount((CFArrayRef)Mutable) <= 0)
      {
        Mutable = 0;
        goto LABEL_30;
      }
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v7, 0);
      Value = CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
      CFArrayRemoveValueAtIndex(v7, 0);
      if (!Value)
      {
        Mutable = 0;
        goto LABEL_30;
      }
      v10 = v18 - valuePtr;
      if (v18 < valuePtr)
      {
        Mutable = 0;
        goto LABEL_30;
      }
      v11 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 48), v5);
      if (v11)
      {
LABEL_12:
        v12 = v11[1] + v10;
        ++*v11;
        v11[1] = v12;
        v13 = v11[2];
        v14 = v11[3];
        if (v13 >= v10)
          v13 = v10;
        if (v14 <= v10)
          v14 = v10;
        v11[2] = v13;
        v11[3] = v14;
        if (v5)
LABEL_25:
          CFRelease(v5);
      }
      else
      {
        Mutable = malloc_type_malloc(0x20uLL, 0x1000040E0EAB150uLL);
        if (Mutable)
        {
          v11 = Mutable;
          *Mutable = 0;
          Mutable[1] = 0;
          *((_OWORD *)Mutable + 1) = xmmword_1C96DA7E0;
          CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 48), v5, Mutable);
          goto LABEL_12;
        }
LABEL_30:
        APSLogErrorAt((uint64_t)Mutable);
        if (v5)
          goto LABEL_25;
      }
    }
  }
}

void profiler_timerTick(uint64_t a1)
{
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 48), (CFDictionaryApplierFunction)profiler_taskProfileLogAndFreeApplier, 0);
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 48));
}

void profiler_taskProfileLogAndFreeApplier(int a1, void *a2)
{
  if (gLogCategory_APSTimeProfiler <= 50
    && (gLogCategory_APSTimeProfiler != -1 || _LogCategory_Initialize()))
  {
    UpTicksToMicroseconds();
    UpTicksToMicroseconds();
    UpTicksToMicroseconds();
    LogPrintF();
  }
  free(a2);
}

void APSTimeProfilerTaskEnd(CFTypeRef cf)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD v5[3];

  if (profiler_getShared_sAPSTimeProfilerOnce != -1)
    dispatch_once_f(&profiler_getShared_sAPSTimeProfilerOnce, &profiler_getShared_sAPSTimeProfiler, (dispatch_function_t)profiler_initialize);
  if (profiler_getShared_sAPSTimeProfiler)
  {
    v5[0] = 2;
    v5[1] = CFRetain(cf);
    v5[2] = mach_absolute_time();
    APSAtomicMessageQueueSendMessage(qword_1EF9206F8, v5);
    v2 = *(unsigned int **)(qword_1EF920700 + 16);
    v3 = v2 + 10;
    while (1)
    {
      v4 = __ldxr(v3);
      if (v4 != 1)
        break;
      if (!__stlxr(2u, v3))
      {
        caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(v2 + 6), (caulk::concurrent::message *)v2);
        return;
      }
    }
    __clrex();
  }
}

BOOL APSAccessControlIsValidConfig(int a1, int a2)
{
  switch(a1)
  {
    case 2:
      return 1;
    case 1:
      return (a2 - 1) < 2;
    case 0:
      return 1;
  }
  return 0;
}

uint64_t APSNetworkAddressGetTypeID()
{
  if (APSNetworkAddressGetTypeID_sInitOnce != -1)
    dispatch_once_f(&APSNetworkAddressGetTypeID_sInitOnce, &APSNetworkAddressGetTypeID_sTypeID, (dispatch_function_t)networkAddress_getTypeID);
  return APSNetworkAddressGetTypeID_sTypeID;
}

uint64_t networkAddress_getTypeID(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t networkAddress_Finalize(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (gLogCategory_APSNetworkAddress <= 30)
  {
    if (gLogCategory_APSNetworkAddress != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
      result = LogPrintF();
  }
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  return result;
}

BOOL networkAddress_Equal(_OWORD *a1, _OWORD *a2)
{
  CFTypeID v4;
  CFTypeID v5;
  int Port;

  v4 = CFGetTypeID(a1);
  if (APSNetworkAddressGetTypeID_sInitOnce != -1)
    dispatch_once_f(&APSNetworkAddressGetTypeID_sInitOnce, &APSNetworkAddressGetTypeID_sTypeID, (dispatch_function_t)networkAddress_getTypeID);
  if (v4 != APSNetworkAddressGetTypeID_sTypeID)
    return 0;
  v5 = CFGetTypeID(a2);
  if (APSNetworkAddressGetTypeID_sInitOnce != -1)
    dispatch_once_f(&APSNetworkAddressGetTypeID_sInitOnce, &APSNetworkAddressGetTypeID_sTypeID, (dispatch_function_t)networkAddress_getTypeID);
  if (v5 == APSNetworkAddressGetTypeID_sTypeID
    && BYTE1(a1[1]) == BYTE1(a2[1])
    && (Port = SockAddrGetPort(), Port == SockAddrGetPort()))
  {
    return SockAddrCompareAddr() == 0;
  }
  else
  {
    return 0;
  }
}

__CFString *networkAddress_CopyDebugDescription(uint64_t a1)
{
  uint64_t Mutable;
  __CFString *v3;
  _OWORD v5[8];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  memset(v5, 0, sizeof(v5));
  Mutable = (uint64_t)CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v3 = (__CFString *)Mutable;
  if (!Mutable || (Mutable = SockAddrToString(), (_DWORD)Mutable))
    APSLogErrorAt(Mutable);
  else
    CFStringAppendFormat(v3, 0, CFSTR("<APSNetworkAddress %p '%s'>"), a1, v5);
  return v3;
}

uint64_t APSNetworkAddressCreateWithSocketAddr(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  _OWORD *Instance;
  _OWORD *v6;
  __int128 v7;
  uint64_t result;

  if (APSNetworkAddressGetTypeID_sInitOnce != -1)
    dispatch_once_f(&APSNetworkAddressGetTypeID_sInitOnce, &APSNetworkAddressGetTypeID_sTypeID, (dispatch_function_t)networkAddress_getTypeID);
  Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (Instance)
  {
    v6 = Instance;
    Instance[1] = 0u;
    Instance[2] = 0u;
    v7 = *a2;
    *(_OWORD *)((char *)Instance + 28) = *(__int128 *)((char *)a2 + 12);
    Instance[1] = v7;
    if (gLogCategory_APSNetworkAddress <= 30
      && (gLogCategory_APSNetworkAddress != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    result = 0;
    *a3 = v6;
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960568;
  }
  return result;
}

uint64_t APSNetworkAddressCreateWithString(uint64_t a1, CFStringRef theString, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9[4];
  char buffer[16];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  *(_OWORD *)buffer = 0u;
  v11 = 0u;
  memset(&v9[2], 0, 28);
  if (!CFStringGetCString(theString, buffer, 128, 0x8000100u))
  {
    if (gLogCategory_APSNetworkAddress > 90
      || gLogCategory_APSNetworkAddress == -1 && !_LogCategory_Initialize())
    {
      return 4294960554;
    }
    v7 = 4294960554;
    goto LABEL_11;
  }
  v5 = StringToSockAddr();
  if ((_DWORD)v5)
  {
    v7 = v5;
    if (gLogCategory_APSNetworkAddress > 90
      || gLogCategory_APSNetworkAddress == -1 && !_LogCategory_Initialize())
    {
      return v7;
    }
LABEL_11:
    LogPrintF();
    return v7;
  }
  v9[0] = v9[2];
  *(__int128 *)((char *)v9 + 12) = *(__int128 *)((char *)&v9[2] + 12);
  v6 = APSNetworkAddressCreateWithSocketAddr(a1, v9, a3);
  v7 = v6;
  if ((_DWORD)v6)
    APSLogErrorAt(v6);
  return v7;
}

__n128 APSNetworkAddressGetSocketAddr@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)(a1 + 16);
  result = *(__n128 *)(a1 + 28);
  *(__n128 *)(a2 + 12) = result;
  return result;
}

uint64_t APSNetworkAddressGetPort()
{
  return (unsigned __int16)SockAddrGetPort();
}

uint64_t APSNetworkAddressSetPort()
{
  return SockAddrSetPort();
}

uint64_t APSNetworkAddressCopyStringRepresentation(uint64_t a1, CFStringRef *a2)
{
  return APSNetworkAddressCopyStringRepresentationWithFlags(a1, 0, a2);
}

uint64_t APSNetworkAddressCopyStringRepresentationWithFlags(uint64_t a1, uint64_t a2, CFStringRef *a3)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD v7[8];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  memset(v7, 0, sizeof(v7));
  if (a3)
  {
    v4 = SockAddrToString();
    v5 = v4;
    if ((_DWORD)v4)
      APSLogErrorAt(v4);
    else
      *a3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v7, 0x8000100u);
  }
  else
  {
    APSLogErrorAt(0);
    return 0;
  }
  return v5;
}

uint64_t APSNetworkAddressGetCStringRepresentation(uint64_t a1, char *a2, CFIndex a3)
{
  return APSNetworkAddressGetCStringRepresentationWithFlags(a1, 0, a2, a3);
}

uint64_t APSNetworkAddressGetCStringRepresentationWithFlags(uint64_t a1, uint64_t a2, char *a3, CFIndex a4)
{
  uint64_t v6;
  uint64_t CString;
  uint64_t v8;
  CFStringRef theString;

  theString = 0;
  v6 = APSNetworkAddressCopyStringRepresentationWithFlags(a1, a2, &theString);
  if ((_DWORD)v6)
  {
    v8 = v6;
    APSLogErrorAt(v6);
  }
  else
  {
    CString = CFStringGetCString(theString, a3, a4, 0x8000100u);
    if ((_DWORD)CString)
    {
      v8 = 0;
    }
    else
    {
      APSLogErrorAt(CString);
      v8 = 4294960533;
    }
  }
  if (theString)
    CFRelease(theString);
  return v8;
}

uint64_t APSNetworkAddressCopyInterfaceName(uint64_t a1, CFStringRef *a2)
{
  uint64_t v3;
  CFStringRef v4;
  uint64_t result;
  char cStr[16];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  if (*(_BYTE *)(a1 + 17) == 30)
  {
    v3 = *(unsigned int *)(a1 + 40);
    if (!(_DWORD)v3)
    {
      APSLogErrorAt(v3);
      return 4294960560;
    }
    if (!if_indextoname(v3, cStr))
    {
      APSLogErrorAt(0);
      return 4294960569;
    }
    v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0x8000100u);
  }
  else
  {
    v4 = 0;
  }
  result = 0;
  *a2 = v4;
  return result;
}

uint64_t APSNetworkAddressSetInterfaceName(uint64_t a1, CFStringRef theString)
{
  uint64_t CString;
  uint64_t v4;
  int v5;
  uint64_t result;
  char buffer[128];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (!theString)
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  if (*(_BYTE *)(a1 + 17) != 30)
    return 4294960591;
  CString = CFStringGetCString(theString, buffer, 128, 0x8000100u);
  if ((_DWORD)CString)
  {
    v4 = if_nametoindex(buffer);
    if ((_DWORD)v4)
    {
      v5 = v4;
      result = 0;
      *(_DWORD *)(a1 + 40) = v5;
    }
    else
    {
      APSLogErrorAt(v4);
      return 4294960569;
    }
  }
  else
  {
    APSLogErrorAt(CString);
    return 4294960560;
  }
  return result;
}

BOOL APSNetworkAddressIsIPv6(uint64_t a1)
{
  return *(_BYTE *)(a1 + 17) == 30;
}

uint64_t APSRealTimePTPClockGetTypeID()
{
  if (gAPSRealTimePTPClockInitOnce != -1)
    dispatch_once_f(&gAPSRealTimePTPClockInitOnce, 0, (dispatch_function_t)_APSRealTimePTPClockGetTypeID);
  return gAPSRealTimePTPClockTypeID;
}

uint64_t _APSRealTimePTPClockGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSRealTimePTPClockTypeID = result;
  return result;
}

void _APSRealTimePTPClockFinalize(uint64_t a1)
{
  dispatch_queue_t *v2;

  if (gLogCategory_APSRealTimePTPClock <= 50
    && (gLogCategory_APSRealTimePTPClock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(dispatch_queue_t **)(a1 + 16);
  if (v2)
  {
    dispatch_sync_f(*v2, v2, (dispatch_function_t)rtPTPClockServer_deregisterClientInternal);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

void rtPTPClockServer_deregisterClientInternal(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  const void *v5;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    if (gLogCategory_APSRealTimePTPClock <= 50)
    {
      if (gLogCategory_APSRealTimePTPClock != -1 || (v3 = _LogCategory_Initialize(), v2 = *(_QWORD *)(a1 + 24), v3))
      {
        LogPrintF();
        v2 = *(_QWORD *)(a1 + 24);
      }
    }
    v4 = v2 - 1;
    *(_QWORD *)(a1 + 24) = v4;
    if (!v4)
    {
      if (gLogCategory_APSRealTimePTPClock <= 50
        && (gLogCategory_APSRealTimePTPClock != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v5 = *(const void **)(a1 + 16);
      if (v5)
      {
        CFRelease(v5);
        *(_QWORD *)(a1 + 16) = 0;
      }
      dispatch_suspend(*(dispatch_object_t *)(a1 + 8));
    }
  }
  else if (gLogCategory_APSRealTimePTPClock <= 90
         && (gLogCategory_APSRealTimePTPClock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

uint64_t APSRealTimePTPClockCreate(CFTypeRef *a1)
{
  uint64_t Instance;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *context;
  uint64_t v7;

  if (a1)
  {
    if (gAPSRealTimePTPClockInitOnce != -1)
      dispatch_once_f(&gAPSRealTimePTPClockInitOnce, 0, (dispatch_function_t)_APSRealTimePTPClockGetTypeID);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v3 = (_QWORD *)Instance;
      *(_QWORD *)(Instance + 16) = 0;
      if (rtPTPClockServer_getSharedServer_sAPSRealTimePTPClockServerOnce != -1)
        dispatch_once_f(&rtPTPClockServer_getSharedServer_sAPSRealTimePTPClockServerOnce, &rtPTPClockServer_getSharedServer_sAPSRealTimePTPClockServer, (dispatch_function_t)rtPTPClockServer_init);
      context = &rtPTPClockServer_getSharedServer_sAPSRealTimePTPClockServer;
      v7 = 0;
      dispatch_sync_f((dispatch_queue_t)rtPTPClockServer_getSharedServer_sAPSRealTimePTPClockServer, &context, (dispatch_function_t)rtPTPClockServer_registerClientInternal);
      v4 = v7;
      if ((_DWORD)v7)
      {
        if (gLogCategory_APSRealTimePTPClock <= 90
          && (gLogCategory_APSRealTimePTPClock != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
      else
      {
        v3[2] = &rtPTPClockServer_getSharedServer_sAPSRealTimePTPClockServer;
        if (gLogCategory_APSRealTimePTPClock <= 50
          && (gLogCategory_APSRealTimePTPClock != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        *a1 = CFRetain(v3);
      }
      CFRelease(v3);
    }
    else
    {
      APSLogErrorAt(0);
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  return v4;
}

void rtPTPClockServer_init(dispatch_source_t *a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;

  APSRealTimeWritableCreate(0, 0x40uLL, (CFTypeRef *)a1 + 4);
  v2 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  v3 = dispatch_queue_create("APSRealTimePTPClockServer", v2);
  *a1 = v3;
  v4 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v3);
  a1[1] = v4;
  dispatch_source_set_timer(v4, 0, 0x1DCD6500uLL, 0xF4240uLL);
  dispatch_set_context(a1[1], a1);
  dispatch_source_set_event_handler_f(a1[1], (dispatch_function_t)rtPTPClockServer_updateRelativeRateAndAnchorTime);
  if (gLogCategory_APSRealTimePTPClock <= 50
    && (gLogCategory_APSRealTimePTPClock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

uint64_t rtPTPClockServer_registerClientInternal(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _OWORD v6[4];

  v2 = *(_QWORD *)a1;
  memset(v6, 0, sizeof(v6));
  if (gLogCategory_APSRealTimePTPClock <= 50
    && (gLogCategory_APSRealTimePTPClock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v3 = *(_QWORD *)(v2 + 24);
  if (v3)
    goto LABEL_12;
  if (gLogCategory_APSRealTimePTPClock <= 50
    && (gLogCategory_APSRealTimePTPClock != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  result = CM8021ASClockCreate();
  if (!(_DWORD)result)
  {
    rtPTPClockServer_getRelativeRateAndAnchor(v2, (uint64_t)v6);
    APSRealTimeWritableWrite(*(_QWORD *)(v2 + 32), v6);
    dispatch_resume(*(dispatch_object_t *)(v2 + 8));
    v3 = *(_QWORD *)(v2 + 24);
LABEL_12:
    result = 0;
    *(_QWORD *)(v2 + 24) = v3 + 1;
    goto LABEL_13;
  }
  if (gLogCategory_APSRealTimePTPClock <= 90)
  {
    v5 = result;
    if (gLogCategory_APSRealTimePTPClock != -1 || _LogCategory_Initialize())
      LogPrintF();
    result = v5;
  }
LABEL_13:
  *(_DWORD *)(a1 + 8) = result;
  return result;
}

void rtPTPClockServer_getRelativeRateAndAnchor(uint64_t a1, uint64_t a2)
{
  OpaqueCMClock *HostTimeClock;
  uint64_t v4;
  __int128 v5;
  CMTimeEpoch epoch;
  CMTime v7;
  CMTime time;
  CMTime lhs;
  CMTime rhs;
  uint64_t v11;
  uint64_t v12;
  CMTime v13;
  CMTime v14;
  CMTime v15;
  CMTime v16;

  v16 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v15 = v16;
  v14 = v16;
  v13 = v16;
  v11 = 0;
  v12 = 0;
  do
  {
    HostTimeClock = CMClockGetHostTimeClock();
    CMClockGetTime(&v16, HostTimeClock);
    CMTimeMake(&rhs, 1, 1);
    lhs = v16;
    CMTimeAdd(&v15, &lhs, &rhs);
    lhs = v16;
    CM8021ASClockGetClockTimeForHostTime();
    lhs = v15;
    CM8021ASClockGetClockTimeForHostTime();
    v4 = v12;
  }
  while (v12 != v11);
  *(CMTime *)a2 = v16;
  v5 = *(_OWORD *)&v14.value;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)&v14.value;
  epoch = v14.epoch;
  *(_QWORD *)(a2 + 40) = v14.epoch;
  *(_QWORD *)(a2 + 48) = v4;
  lhs = v13;
  *(_OWORD *)&v7.value = v5;
  v7.epoch = epoch;
  CMTimeSubtract(&time, &lhs, &v7);
  *(Float64 *)(a2 + 56) = CMTimeGetSeconds(&time);
}

uint64_t rtPTPClockServer_updateRelativeRateAndAnchorTime(uint64_t a1)
{
  _OWORD v3[4];

  memset(v3, 0, sizeof(v3));
  rtPTPClockServer_getRelativeRateAndAnchor(a1, (uint64_t)v3);
  return APSRealTimeWritableWrite(*(_QWORD *)(a1 + 32), v3);
}

uint64_t APSRealTimePTPClockGetEstimatedPTPTimeForHostTime@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, CMTime *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  CMTime v10;
  CMTime v11;
  CMTime v12;
  CMTime v13;
  uint64_t v14;
  CMTime rhs;
  CMTime time;
  CMTime lhs;
  CMTime __dst[2];
  __int128 v19;

  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)&v10.value = *(_OWORD *)a2;
  v10.epoch = *(_QWORD *)(a2 + 16);
  v7 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)&a4->value = *MEMORY[0x1E0CA2E18];
  a4->epoch = *(_QWORD *)(v7 + 16);
  v19 = 0u;
  memset(__dst, 0, sizeof(__dst));
  v8 = APSRealTimeWritableRead(*(_QWORD *)(v6 + 32), __dst);
  if ((_DWORD)v8)
    return APSLogErrorAt(v8);
  lhs = v10;
  rhs = __dst[0];
  CMTimeSubtract(&time, &lhs, &rhs);
  CMTimeMultiplyByFloat64(&lhs, &time, *((Float64 *)&v19 + 1));
  rhs = __dst[1];
  result = (uint64_t)CMTimeAdd(a4, &rhs, &lhs);
  if (gLogCategory_APSRealTimePTPClock <= 30)
  {
    if (gLogCategory_APSRealTimePTPClock != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
    {
      v14 = 0;
      memset(&rhs, 0, sizeof(rhs));
      v13 = v10;
      result = CM8021ASClockGetClockTimeForHostTime();
      if (gLogCategory_APSRealTimePTPClock <= 30)
      {
        if (gLogCategory_APSRealTimePTPClock != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
        {
          v13 = v10;
          CMTimeGetSeconds(&v13);
          v13 = *a4;
          CMTimeGetSeconds(&v13);
          v13 = rhs;
          CMTimeGetSeconds(&v13);
          if ((_QWORD)v19 == v14)
          {
            v12 = *a4;
            v11 = rhs;
            CMTimeSubtract(&v13, &v12, &v11);
            CMTimeGetSeconds(&v13);
          }
          result = LogPrintF();
        }
      }
    }
  }
  if (a3)
    *a3 = v19;
  return result;
}

uint64_t APSRealTimePTPClockGetEstimatedHostTimeForPTPTime@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, CMTime *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  CMTime v10;
  CMTime v11;
  CMTime v12;
  CMTime v13;
  uint64_t v14;
  CMTime rhs;
  CMTime time;
  CMTime lhs;
  CMTime __dst[2];
  __int128 v19;

  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)&v10.value = *(_OWORD *)a2;
  v10.epoch = *(_QWORD *)(a2 + 16);
  v7 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)&a4->value = *MEMORY[0x1E0CA2E18];
  a4->epoch = *(_QWORD *)(v7 + 16);
  v19 = 0u;
  memset(__dst, 0, sizeof(__dst));
  v8 = APSRealTimeWritableRead(*(_QWORD *)(v6 + 32), __dst);
  if ((_DWORD)v8)
    return APSLogErrorAt(v8);
  lhs = v10;
  rhs = __dst[1];
  CMTimeSubtract(&time, &lhs, &rhs);
  CMTimeMultiplyByFloat64(&lhs, &time, 1.0 / *((double *)&v19 + 1));
  rhs = __dst[0];
  result = (uint64_t)CMTimeAdd(a4, &rhs, &lhs);
  if (gLogCategory_APSRealTimePTPClock <= 30)
  {
    if (gLogCategory_APSRealTimePTPClock != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
    {
      v14 = 0;
      memset(&rhs, 0, sizeof(rhs));
      v13 = v10;
      result = CM8021ASClockGetHostTimeForClockTime();
      if (gLogCategory_APSRealTimePTPClock <= 30)
      {
        if (gLogCategory_APSRealTimePTPClock != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
        {
          v13 = v10;
          CMTimeGetSeconds(&v13);
          v13 = *a4;
          CMTimeGetSeconds(&v13);
          v13 = rhs;
          CMTimeGetSeconds(&v13);
          if ((_QWORD)v19 == v14)
          {
            v12 = *a4;
            v11 = rhs;
            CMTimeSubtract(&v13, &v12, &v11);
            CMTimeGetSeconds(&v13);
          }
          result = LogPrintF();
        }
      }
    }
  }
  if (a3)
    *a3 = v19;
  return result;
}

uint64_t APSRealTimeSafeSemaphoreCreate(uint64_t a1, uint64_t *a2)
{
  uint64_t Instance;
  uint64_t v4;
  caulk::semaphore *v5;
  uint64_t result;

  if (a2)
  {
    if (APSRealTimeSafeSemaphoreGetTypeID::sRegisterAPSRealTimeSafeSemaphoreOnce != -1)
      dispatch_once_f(&APSRealTimeSafeSemaphoreGetTypeID::sRegisterAPSRealTimeSafeSemaphoreOnce, 0, (dispatch_function_t)registerAPSRealTimeSafeSemaphore);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v4 = Instance;
      v5 = (caulk::semaphore *)operator new();
      caulk::semaphore::semaphore(v5);
      result = 0;
      *(_QWORD *)(v4 + 16) = v5;
      *a2 = v4;
    }
    else
    {
      APSLogErrorAt(0);
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  return result;
}

void sub_1C969D110(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1CAA42B64](v1, 0x1000C40A517B1A3);
  _Unwind_Resume(a1);
}

uint64_t registerAPSRealTimeSafeSemaphore(void *a1)
{
  uint64_t result;

  sAPSRealTimeSafeSemaphoreClass = 0;
  *(_QWORD *)algn_1EF920778 = "APSRealTimeSafeSemaphore";
  qword_1EF920780 = (uint64_t)APSRealTimeSafeSemaphoreInit;
  unk_1EF920788 = 0;
  qword_1EF920790 = (uint64_t)APSRealTimeSafeSemaphoreFinalize;
  unk_1EF920798 = 0;
  qword_1EF9207A0 = 0;
  unk_1EF9207A8 = 0;
  qword_1EF9207B0 = (uint64_t)APSRealTimeSafeSemaphoreCopyDebugDesc;
  result = _CFRuntimeRegisterClass();
  sAPSRealTimeSafeSemaphoreID = result;
  return result;
}

uint64_t APSRealTimeSafeSemaphoreInit(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t APSRealTimeSafeSemaphoreFinalize(_QWORD *a1)
{
  uint64_t result;

  result = a1[2];
  if (result)
  {
    MEMORY[0x1CAA42B40]();
    JUMPOUT(0x1CAA42B64);
  }
  return result;
}

__CFString *APSRealTimeSafeSemaphoreCopyDebugDesc(const void *a1)
{
  const __CFAllocator *v1;
  __CFString *Mutable;

  v1 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v1, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("APSRealTimeSafeSemaphore"));
  return Mutable;
}

uint64_t APSRealTimeSafeSemaphoreGetTypeID()
{
  if (APSRealTimeSafeSemaphoreGetTypeID::sRegisterAPSRealTimeSafeSemaphoreOnce != -1)
    dispatch_once_f(&APSRealTimeSafeSemaphoreGetTypeID::sRegisterAPSRealTimeSafeSemaphoreOnce, 0, (dispatch_function_t)registerAPSRealTimeSafeSemaphore);
  return sAPSRealTimeSafeSemaphoreID;
}

uint64_t APSRealTimeSafeSemaphoreSignal(uint64_t a1)
{
  return caulk::semaphore::signal(*(caulk::semaphore **)(a1 + 16));
}

uint64_t APSRealTimeSafeSemaphoreWait(uint64_t a1)
{
  return caulk::semaphore::timed_wait(*(caulk::semaphore **)(a1 + 16), -1.0);
}

uint64_t APSRealTimeSafeSemaphoreTimedWait(uint64_t a1, double a2)
{
  return caulk::semaphore::timed_wait(*(caulk::semaphore **)(a1 + 16), a2);
}

uint64_t APSDynamicLatencyManagerGetTypeID()
{
  if (gAPSDynamicLatencyManagerInitOnce != -1)
    dispatch_once_f(&gAPSDynamicLatencyManagerInitOnce, 0, (dispatch_function_t)_APSDynamicLatencyManagerGetTypeID);
  return gAPSDynamicLatencyManagerTypeID;
}

uint64_t _APSDynamicLatencyManagerGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSDynamicLatencyManagerTypeID = result;
  return result;
}

uint64_t _APSDynamicLatencyManagerFinalize(_QWORD *a1)
{
  void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  uint64_t result;

  v2 = (void *)a1[12];
  if (v2)
    free(v2);
  v3 = (const void *)a1[11];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[15];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[16];
  if (v5)
    CFRelease(v5);
  result = FigSimpleMutexDestroy();
  if (gLogCategory_APSDynamicLatencyManager <= 50)
  {
    if (gLogCategory_APSDynamicLatencyManager != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

uint64_t _APSDynamicLatencyManagerCreate(const void *a1, const void *a2, unint64_t a3, unint64_t a4, const __CFDictionary *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  uint64_t Instance;
  uint64_t v19;
  uint64_t v20;
  const __CFAllocator *v21;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;

  if (gLogCategory_APSDynamicLatencyManager <= 30
    && (gLogCategory_APSDynamicLatencyManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a2 || !a3 || a4 >= a3 || !a1 || !a10)
  {
    APSLogErrorAt(0);
    return -6705;
  }
  v32 = a6;
  if (gAPSDynamicLatencyManagerInitOnce != -1)
    dispatch_once_f(&gAPSDynamicLatencyManagerInitOnce, 0, (dispatch_function_t)_APSDynamicLatencyManagerGetTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    APSLogErrorAt(0);
    return -6728;
  }
  v19 = Instance;
  v31 = a8;
  *(_OWORD *)(Instance + 16) = 0u;
  v20 = Instance + 16;
  *(_QWORD *)(Instance + 128) = 0;
  *(_OWORD *)(Instance + 96) = 0u;
  *(_OWORD *)(Instance + 112) = 0u;
  *(_OWORD *)(Instance + 64) = 0u;
  *(_OWORD *)(Instance + 80) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  *(_OWORD *)(Instance + 48) = 0u;
  v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(v20 + 104) = Mutable;
  if (!Mutable
    || (v23 = CFDictionaryCreateMutable(v21, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]),
        (*(_QWORD *)(v19 + 128) = v23) == 0)
    || (v24 = FigSimpleMutexCreate(), (*(_QWORD *)(v19 + 80) = v24) == 0))
  {
    APSLogErrorAt(0);
    v33 = -6728;
LABEL_38:
    CFRelease((CFTypeRef)v19);
    return v33;
  }
  *(_OWORD *)(v19 + 24) = xmmword_1C96DA7F0;
  *(_QWORD *)(v19 + 40) = 0x4024000000000000;
  *(_QWORD *)(v19 + 16) = 0x500000E10;
  if (a5)
  {
    if (CFDictionaryContainsKey(a5, CFSTR("PromotionSecs")))
      *(_DWORD *)v20 = CFDictionaryGetInt64Ranged();
    if (CFDictionaryContainsKey(a5, CFSTR("MinSessionDurationSecs")))
      *(_DWORD *)(v19 + 20) = CFDictionaryGetInt64Ranged();
    if (CFDictionaryContainsKey(a5, CFSTR("GlitchesPerHourPromoteTier")))
    {
      CFDictionaryGetDouble();
      *(_QWORD *)(v19 + 24) = v25;
    }
    if (CFDictionaryContainsKey(a5, CFSTR("GlitchesPerHourDemoteTier")))
    {
      CFDictionaryGetDouble();
      *(_QWORD *)(v19 + 32) = v26;
    }
    if (CFDictionaryContainsKey(a5, CFSTR("GlitchesPerHourWorstTier")))
    {
      CFDictionaryGetDouble();
      *(_QWORD *)(v19 + 40) = v27;
    }
  }
  v28 = dynamicLatencyManager_SetTiers(v19, a1, a2, a3, a4);
  v33 = v28;
  if ((_DWORD)v28)
  {
    APSLogErrorAt(v28);
    goto LABEL_38;
  }
  *(_QWORD *)(v19 + 48) = v32;
  *(_QWORD *)(v19 + 56) = a7;
  *(_QWORD *)(v19 + 64) = v31;
  *(_QWORD *)(v19 + 72) = a9;
  *a10 = v19;
  if (gLogCategory_APSDynamicLatencyManager <= 50
    && (gLogCategory_APSDynamicLatencyManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v33;
}

uint64_t dynamicLatencyManager_SetTiers(uint64_t a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5)
{
  const void *v10;
  void *v11;
  size_t v12;
  void *v13;
  uint64_t v14;

  if (gLogCategory_APSDynamicLatencyManager <= 30
    && (gLogCategory_APSDynamicLatencyManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 80));
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 120));
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 128));
  v10 = *(const void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = a2;
  if (a2)
    CFRetain(a2);
  if (v10)
    CFRelease(v10);
  v11 = *(void **)(a1 + 96);
  if (v11)
    free(v11);
  *(_QWORD *)(a1 + 104) = a4;
  v12 = 4 * a4;
  v13 = malloc_type_malloc(v12, 0xDA92CFCFuLL);
  *(_QWORD *)(a1 + 96) = v13;
  if (v13)
  {
    memcpy(v13, a3, v12);
    v14 = 0;
    *(_QWORD *)(a1 + 112) = a5;
  }
  else
  {
    APSLogErrorAt(0);
    v14 = 4294960568;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 80));
  return v14;
}

uint64_t _APSDynamicLatencyManagerUpdateTiers(uint64_t a1, const void *a2, const void *a3, unint64_t a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t v11;

  if (gLogCategory_APSDynamicLatencyManager <= 30
    && (gLogCategory_APSDynamicLatencyManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a1 && a2 && a3 && a4 && a5 < a4)
  {
    v10 = dynamicLatencyManager_SetTiers(a1, a2, a3, a4, a5);
    v11 = v10;
    if ((_DWORD)v10)
      APSLogErrorAt(v10);
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  return v11;
}

uint64_t APSDynamicLatencyManagerGetLLA()
{
  if (APSDynamicLatencyManagerGetLLA_sInitOnce != -1)
    dispatch_once_f(&APSDynamicLatencyManagerGetLLA_sInitOnce, &APSDynamicLatencyManagerGetLLA_sAPSDynamicLatencyManager, (dispatch_function_t)dynamicLatencyManager_GetLLA);
  return APSDynamicLatencyManagerGetLLA_sAPSDynamicLatencyManager;
}

void dynamicLatencyManager_GetLLA(uint64_t *a1)
{
  uint64_t v2;
  char *v3;
  const __CFString *v4;
  const __CFString *v5;
  unint64_t v6;
  CFTypeID v7;
  uint64_t i;
  char *v9;
  const void *Int64;
  CFMutableDictionaryRef Mutable;
  const __CFDictionary *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = 0;
  v14 = 0;
  while (!FigCFEqual())
  {
    v2 += 40;
    if (v2 == 120)
    {
      v3 = 0;
      goto LABEL_6;
    }
  }
  v3 = (char *)&kDLMConfigurations + v2;
LABEL_6:
  if (gLogCategory_APSDynamicLatencyManager <= 30
    && (gLogCategory_APSDynamicLatencyManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v4 = (const __CFString *)APSSettingsCopyValueEx(CFSTR("llaDLMVariant"), 0, (int *)&v14 + 1);
  v5 = v4;
  v6 = 0;
  if (HIDWORD(v14) || !v4)
  {
LABEL_35:
    if (v5)
      goto LABEL_39;
    goto LABEL_40;
  }
  v7 = CFGetTypeID(v4);
  if (v7 != CFStringGetTypeID() || CFStringGetLength(v5) < 1)
  {
    v6 = 0;
    goto LABEL_39;
  }
  if (gLogCategory_APSDynamicLatencyManager <= 50
    && (gLogCategory_APSDynamicLatencyManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  for (i = 0; i != 120; i += 40)
  {
    v9 = (char *)&kDLMConfigurations + i;
    if (FigCFEqual())
    {
      if (gLogCategory_APSDynamicLatencyManager <= 50
        && (gLogCategory_APSDynamicLatencyManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      Int64 = APSSettingsGetInt64(CFSTR("llaDLMTierIndex"), (int *)&v14 + 1);
      if (!HIDWORD(v14))
      {
        v6 = (unint64_t)Int64;
        if (gLogCategory_APSDynamicLatencyManager <= 50
          && (gLogCategory_APSDynamicLatencyManager != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (v6 < 5)
          goto LABEL_34;
        APSLogErrorAt(0);
        if (gLogCategory_APSDynamicLatencyManager <= 90
          && (gLogCategory_APSDynamicLatencyManager != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
      v6 = 0;
LABEL_34:
      v3 = v9;
      goto LABEL_35;
    }
  }
  APSLogErrorAt(0);
  if (gLogCategory_APSDynamicLatencyManager <= 90
    && (gLogCategory_APSDynamicLatencyManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v6 = 0;
  if (v5)
LABEL_39:
    CFRelease(v5);
LABEL_40:
  if (gLogCategory_APSDynamicLatencyManager <= 50
    && (gLogCategory_APSDynamicLatencyManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v12 = Mutable;
    APSSettingsGetIntWithOverrideAndDefault(CFSTR("llaDLMPromotionSec"), 0, 3600);
    FigCFDictionarySetInt64();
    APSSettingsGetIntWithOverrideAndDefault(CFSTR("llaDLMMinSessionDurationSec"), 0, 5);
    FigCFDictionarySetInt64();
    APSSettingsGetDouble(CFSTR("llaDLMGlitchesPerHourPromoteTier"), (int *)&v14);
    FigCFDictionarySetDouble();
    APSSettingsGetDouble(CFSTR("llaDLMGlitchesPerHourDemoteTier"), (int *)&v14);
    FigCFDictionarySetDouble();
    APSSettingsGetDouble(CFSTR("llaDLMGlitchesPerHourWorstTier"), (int *)&v14);
    FigCFDictionarySetDouble();
    v13 = _APSDynamicLatencyManagerCreate(*(const void **)v3, v3 + 8, *((_QWORD *)v3 + 4), v6, v12, (uint64_t)dynamicLatencyManager_LatencyTierChangeCallback, 0, (uint64_t)dynamicLatencyManager_SetVariantCallback, 0, a1);
    LODWORD(v14) = v13;
    if ((_DWORD)v13)
    {
      APSLogErrorAt(v13);
    }
    else
    {
      dynamicLatencyManager_SetVariantCallback(*a1, *(const void **)v3);
      LODWORD(v14) = 0;
      dynamicLatencyManager_LatencyTierChangeCallback();
      LODWORD(v14) = 0;
    }
    CFRelease(v12);
  }
  else
  {
    APSLogErrorAt(0);
  }
}

uint64_t dynamicLatencyManager_LatencyTierChangeCallback()
{
  if (gLogCategory_APSDynamicLatencyManager <= 30
    && (gLogCategory_APSDynamicLatencyManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APSSettingsSetInt64(CFSTR("llaDLMTierIndex"));
  if (gLogCategory_APSDynamicLatencyManager <= 50
    && (gLogCategory_APSDynamicLatencyManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return 0;
}

uint64_t dynamicLatencyManager_SetVariantCallback(uint64_t a1, const void *a2)
{
  const __CFString *v3;

  if (gLogCategory_APSDynamicLatencyManager <= 30
    && (gLogCategory_APSDynamicLatencyManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2)
  {
    if (CFEqual(CFSTR("llaDLMVariant"), CFSTR("wirelessdisplay_enable_timestamps_diagnostic")))
      v3 = CFSTR("com.apple.coremedia");
    else
      v3 = CFSTR("com.apple.airplay");
    CFPreferencesSetAppValue(CFSTR("llaDLMVariant"), a2, v3);
    if (gLogCategory_APSDynamicLatencyManager <= 50
      && (gLogCategory_APSDynamicLatencyManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  else
  {
    APSLogErrorAt(0);
  }
  return 0;
}

uint64_t APSDynamicLatencyManagerSetVariant(uint64_t a1, uint64_t a2)
{
  const void *v4;
  CFTypeRef v5;
  uint64_t v6;
  const void **v7;
  const void *v8;
  uint64_t v9;
  __CFString **v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, _QWORD);
  uint64_t (*v13)(uint64_t, _QWORD, _QWORD, _QWORD);

  if (gLogCategory_APSDynamicLatencyManager <= 30
    && (gLogCategory_APSDynamicLatencyManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a1 || !a2)
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 80));
  v4 = *(const void **)(a1 + 88);
  if (v4)
    v5 = CFRetain(v4);
  else
    v5 = 0;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 80));
  if (FigCFEqual())
  {
    if (gLogCategory_APSDynamicLatencyManager <= 50
      && (gLogCategory_APSDynamicLatencyManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_29;
  }
  v6 = 0;
  v7 = (const void **)&kDLMConfigurations;
  while (1)
  {
    v8 = *v7;
    if (FigCFEqual())
      break;
    ++v6;
    v7 += 5;
    if (v6 == 3)
    {
      APSLogErrorAt(0);
      v9 = 4294960569;
      goto LABEL_30;
    }
  }
  v10 = &kDLMConfigurations + 5 * v6 + 1;
  v11 = dynamicLatencyManager_SetTiers(a1, v8, v10, 5, 0);
  if ((_DWORD)v11)
  {
    v9 = v11;
LABEL_27:
    APSLogErrorAt(v11);
    goto LABEL_30;
  }
  v12 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a1 + 64);
  if (v12)
  {
    v11 = v12(a1, a2, *(_QWORD *)(a1 + 72));
    if ((_DWORD)v11)
    {
      v9 = v11;
      goto LABEL_27;
    }
  }
  v13 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 48);
  if (v13)
  {
    v11 = v13(a1, *(unsigned int *)v10, 0, *(_QWORD *)(a1 + 56));
    v9 = v11;
    if (!(_DWORD)v11)
      goto LABEL_30;
    goto LABEL_27;
  }
LABEL_29:
  v9 = 0;
LABEL_30:
  if (v5)
    CFRelease(v5);
  return v9;
}

uint64_t APSDynamicLatencyManagerAddPerformanceReport(uint64_t a1, const __CFDictionary *a2)
{
  const void *TypedValue;
  uint64_t Int64;
  unint64_t v6;
  pthread_mutex_t **Value;
  pthread_mutex_t **v8;
  const void *v9;
  __CFArray *v10;
  CFMutableArrayRef Mutable;
  unint64_t v12;
  CFIndex i;
  unsigned int v16;
  CFRange v17;

  v16 = 0;
  if (gLogCategory_APSDynamicLatencyManager <= 30
    && (gLogCategory_APSDynamicLatencyManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a1 || !a2)
  {
    APSLogErrorAt(0);
    return -6705;
  }
  CFStringGetTypeID();
  TypedValue = (const void *)CFDictionaryGetTypedValue();
  Int64 = CFDictionaryGetInt64();
  v6 = CFDictionaryGetInt64();
  CFDictionaryGetInt64();
  Value = (pthread_mutex_t **)CFDictionaryGetValue(a2, CFSTR("GlitchDurationHistogram"));
  if (!Value)
  {
    APSLogErrorAt(0);
    return -6727;
  }
  if (v6 >= *(unsigned int *)(a1 + 20))
  {
    v8 = Value;
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 80));
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 128), TypedValue))
    {
      if (CFDictionaryGetInt64() == Int64)
      {
        if (gLogCategory_APSDynamicLatencyManager <= 50
          && (gLogCategory_APSDynamicLatencyManager != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        goto LABEL_43;
      }
      CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 128));
    }
    v9 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 120), TypedValue);
    if (v9)
    {
      v10 = (__CFArray *)CFRetain(v9);
      if (v10)
        goto LABEL_16;
    }
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v10 = Mutable;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 120), TypedValue, Mutable);
LABEL_16:
      if (CFArrayGetCount(v10) && CFArrayGetValueAtIndex(v10, 0) && Int64 == CFDictionaryGetInt64())
        CFArraySetValueAtIndex(v10, 0, a2);
      else
        CFArrayInsertValueAtIndex(v10, 0, a2);
      v12 = 0;
      for (i = 0; i < CFArrayGetCount(v10) && v12 < *(unsigned int *)(a1 + 16); ++i)
      {
        CFArrayGetValueAtIndex(v10, i);
        v12 += CFDictionaryGetInt64();
      }
      if (gLogCategory_APSDynamicLatencyManager <= 50
        && (gLogCategory_APSDynamicLatencyManager != -1 || _LogCategory_Initialize()))
      {
        pthread_mutex_lock(v8[2]);
        pthread_mutex_unlock(v8[2]);
        CFArrayGetCount(v10);
        CFArrayGetCount(v10);
        LogPrintF();
      }
      if (i < CFArrayGetCount(v10))
      {
        v17.length = CFArrayGetCount(v10) - i;
        v17.location = i;
        CFArrayReplaceValues(v10, v17, 0, 0);
      }
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 80));
      CFRelease(v10);
      return v16;
    }
    APSLogErrorAt(0);
    v16 = -6728;
LABEL_43:
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 80));
    return v16;
  }
  if (gLogCategory_APSDynamicLatencyManager <= 50
    && (gLogCategory_APSDynamicLatencyManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v16;
}

uint64_t APSDynamicLatencyManagerUpdate(uint64_t a1, _BYTE *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, unint64_t, _QWORD);
  __int128 context;
  int64_t v10;

  context = xmmword_1C96DA188;
  v10 = 0x7FFFFFFFLL;
  if (gLogCategory_APSDynamicLatencyManager <= 30
    && (gLogCategory_APSDynamicLatencyManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a1 && a2)
  {
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 80));
    if (!CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 120)))
      goto LABEL_27;
    v4 = *(_QWORD *)(a1 + 112);
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 120), (CFDictionaryApplierFunction)dynamicLatencyManager_EndpointPerformance, &context);
    if (v4)
    {
      if (*((double *)&context + 1) > *(double *)(a1 + 40))
      {
        v5 = 0;
        goto LABEL_16;
      }
      if (*((double *)&context + 1) > *(double *)(a1 + 32))
      {
        v5 = v4 - 1;
        goto LABEL_16;
      }
    }
    if (v4 < *(_QWORD *)(a1 + 104) - 1 && (unint64_t)context >= *(unsigned int *)(a1 + 16))
    {
      v5 = v4;
      if (*((double *)&context + 1) <= *(double *)(a1 + 24))
      {
        if (v10 <= (uint64_t)(*(unsigned int *)(*(_QWORD *)(a1 + 96) + 4 * v4)
                            - (unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 96) + 4 * (v4 + 1))))
          v5 = v4;
        else
          v5 = v4 + 1;
      }
    }
    else
    {
      v5 = v4;
    }
LABEL_16:
    if (gLogCategory_APSDynamicLatencyManager <= 50
      && (gLogCategory_APSDynamicLatencyManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (v4 != v5)
    {
      *(_QWORD *)(a1 + 112) = v5;
      v6 = *(unsigned int *)(*(_QWORD *)(a1 + 96) + 4 * v5);
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 120), (CFDictionaryApplierFunction)dynamicLatencyManager_AddSessionToDenyList, (void *)a1);
      CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 120));
      *a2 = 1;
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 80));
      v7 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, _QWORD))(a1 + 48);
      if (v7)
        return v7(a1, v6, v5, *(_QWORD *)(a1 + 56));
      return 0;
    }
LABEL_27:
    *a2 = 0;
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 80));
    return 0;
  }
  APSLogErrorAt(0);
  return 4294960591;
}

uint64_t dynamicLatencyManager_EndpointPerformance(int a1, CFArrayRef theArray, uint64_t a3)
{
  if (theArray && a3 && CFArrayGetCount(theArray))
    return FigCFArrayApplyFunction();
  else
    return APSLogErrorAt(0);
}

void dynamicLatencyManager_AddSessionToDenyList(const void *a1, CFArrayRef theArray, uint64_t a3)
{
  const __CFDictionary *ValueAtIndex;
  __CFDictionary *v7;
  const void *Value;

  if (CFArrayGetCount(theArray))
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, 0);
    if (ValueAtIndex)
    {
      v7 = *(__CFDictionary **)(a3 + 128);
      Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("SessionID"));
      CFDictionarySetValue(v7, a1, Value);
    }
  }
}

uint64_t dynamicLatencyManager_SessionPerformance(const __CFDictionary *a1, uint64_t a2)
{
  uint64_t Int64;
  const void *Value;
  uint64_t i;
  uint64_t result;

  if (!a1 || !a2)
    return APSLogErrorAt(0);
  *(_QWORD *)a2 += CFDictionaryGetInt64();
  Int64 = CFDictionaryGetInt64();
  if ((Int64 & 0x8000000000000000) == 0)
  {
    *(_QWORD *)(a2 + 16) += Int64;
    ++*(_DWORD *)(a2 + 24);
  }
  Value = CFDictionaryGetValue(a1, CFSTR("GlitchDurationHistogram"));
  for (i = 0; i != 72; i += 24)
  {
    result = APSStatsHistogramGetSampleCountInRange((uint64_t)Value, *(double *)((char *)&kGlitchWeights + i), *(double *)((char *)&kGlitchWeights + i + 8));
    *(double *)(a2 + 8) = *(double *)(a2 + 8)
                        + (double)result * *(double *)((char *)&kGlitchWeights + i + 16);
  }
  return result;
}

uint64_t APSDynamicLatencyManagerReset(uint64_t a1, BOOL *a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v6;
  uint64_t v7;

  if (gLogCategory_APSDynamicLatencyManager <= 30
    && (gLogCategory_APSDynamicLatencyManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a1 && a2)
  {
    if (gLogCategory_APSDynamicLatencyManager <= 50
      && (gLogCategory_APSDynamicLatencyManager != -1 || _LogCategory_Initialize()))
    {
      CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 120));
      LogPrintF();
    }
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 80));
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 120));
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 128));
    v4 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = 0;
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 80));
    if (v4
      && (v5 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 48)) != 0
      && (v6 = v5(a1, **(unsigned int **)(a1 + 96), 0, *(_QWORD *)(a1 + 56)), (_DWORD)v6))
    {
      v7 = v6;
      APSLogErrorAt(v6);
    }
    else
    {
      v7 = 0;
      *a2 = v4 != 0;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  return v7;
}

uint64_t APSDynamicLatencyManagerGetLatencyTier(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  uint64_t v6;

  if (gLogCategory_APSDynamicLatencyManager <= 30
    && (gLogCategory_APSDynamicLatencyManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a1 && a2 && a3)
  {
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 80));
    v6 = *(_QWORD *)(a1 + 112);
    *a2 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * v6);
    *a3 = v6;
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 80));
    return 0;
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
}

uint64_t APSDisplayUtilsCopyDisplayCapabilities(uint64_t a1, __CFDictionary **a2)
{
  uint64_t HDCPCapabilityOfDevice;
  __CFDictionary *Mutable;
  const void **v6;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v10 = 0;
  v9 = 0;
  if (gLogCategory_APSDisplayUtils <= 50
    && (gLogCategory_APSDisplayUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v11 = 0;
  if (APSSettingsGetInt64IfPresent(CFSTR("fakeDisplayIsProvisionedForHDCP2"), &v11))
  {
    v10 = v11 != 0;
  }
  else
  {
    HDCPCapabilityOfDevice = AUCWirelessHDCPSessionManagerGetHDCPCapabilityOfDevice();
    if (gLogCategory_APSDisplayUtils <= 30
      && (gLogCategory_APSDisplayUtils != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if ((_DWORD)HDCPCapabilityOfDevice)
    {
      v8 = HDCPCapabilityOfDevice;
      goto LABEL_25;
    }
  }
  if (!APSSettingsGetUInt64IfPresent(CFSTR("fakeDisplayProtectionBits"), &v9))
  {
    HDCPCapabilityOfDevice = AUCWirelessHDCPSessionManagerGetProtectionBitsOfDisplay();
    if (gLogCategory_APSDisplayUtils <= 30
      && (gLogCategory_APSDisplayUtils != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if ((_DWORD)HDCPCapabilityOfDevice)
    {
      v8 = HDCPCapabilityOfDevice;
LABEL_25:
      APSLogErrorAt(v8);
      return HDCPCapabilityOfDevice;
    }
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetInt64();
  v6 = (const void **)MEMORY[0x1E0C9AE50];
  if (!v10)
    v6 = (const void **)MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(Mutable, CFSTR("isProvisionedForHDCP2"), *v6);
  if (gLogCategory_APSDisplayUtils <= 30
    && (gLogCategory_APSDisplayUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  HDCPCapabilityOfDevice = 0;
  *a2 = Mutable;
  return HDCPCapabilityOfDevice;
}

uint64_t APSWiFiTrafficRegistrationGetTypeID()
{
  if (gAPSWiFiTrafficRegistrationInitOnce != -1)
    dispatch_once_f(&gAPSWiFiTrafficRegistrationInitOnce, 0, (dispatch_function_t)_APSWiFiTrafficRegistrationGetTypeID);
  return gAPSWiFiTrafficRegistrationTypeID;
}

uint64_t _APSWiFiTrafficRegistrationGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSWiFiTrafficRegistrationTypeID = result;
  return result;
}

void _APSWiFiTrafficRegistrationFinalize(uint64_t a1)
{
  int v2;
  NSObject *v3;
  NSObject *v4;
  const void *v5;
  uint64_t v6;
  _QWORD block[5];

  v6 = 0;
  objc_msgSend(*(id *)(a1 + 40), "clearTrafficRegistration:error:", *(_QWORD *)(a1 + 32), &v6);
  if (v6)
  {
    v2 = **(_DWORD **)(a1 + 56);
    if (v2 <= 90 && (v2 != -1 || _LogCategory_Initialize()))
      LogPrintF();
  }
  v3 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___APSWiFiRegistrationPostRegistrationRemovedEvent_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  dispatch_sync(v3, block);
  v4 = *(NSObject **)(a1 + 24);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(a1 + 24) = 0;
  }

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v5 = *(const void **)(a1 + 16);
  if (v5)
  {
    _Block_release(v5);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

uint64_t APSWiFiTrafficRegistrationCreate(void *a1, void *a2, unsigned int *a3, int a4, int a5, uint64_t a6, uint64_t a7, CFTypeRef *a8)
{
  uint64_t Instance;
  uint64_t v17;
  dispatch_queue_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  char label[16];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v32 = 0;
  v35 = 0u;
  v36 = 0u;
  *(_OWORD *)label = 0u;
  v34 = 0u;
  if (!a1 || !a2 || !a8)
  {
    APSLogErrorAt(0);
    v19 = 0;
    v20 = 0;
    v26 = 4294960591;
    goto LABEL_38;
  }
  if (gAPSWiFiTrafficRegistrationInitOnce != -1)
    dispatch_once_f(&gAPSWiFiTrafficRegistrationInitOnce, 0, (dispatch_function_t)_APSWiFiTrafficRegistrationGetTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    APSLogErrorAt(0);
    v19 = 0;
    v20 = 0;
    v26 = 4294960568;
    goto LABEL_38;
  }
  v17 = Instance;
  *(_OWORD *)(Instance + 16) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  *(_QWORD *)(Instance + 48) = a6;
  *(_QWORD *)(Instance + 56) = a7;
  v29 = Instance;
  SNPrintF();
  v18 = dispatch_queue_create(label, 0);
  *(_QWORD *)(v17 + 24) = v18;
  if (!v18)
  {
    APSLogErrorAt(0);
    v20 = 0;
    v19 = 0;
LABEL_46:
    v26 = 4294960568;
    goto LABEL_37;
  }
  v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DD99F0]), "initWithAddress:", *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32), v29);
  if (!v19)
  {
    APSLogErrorAt(0);
    v20 = 0;
    goto LABEL_46;
  }
  v20 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DD99D8]), "initWithUniqueIdentifier:peerAddress:", a2, v19);
  if (!v20)
  {
    APSLogErrorAt(0);
    goto LABEL_46;
  }
  if (!a4 || !objc_msgSend(a2, "isEqualToString:", *MEMORY[0x1E0DD99B8]))
    goto LABEL_26;
  objc_msgSend(a1, "performRealtimeConnectivityCheckWithConfiguration:error:", v20, &v32);
  if (objc_msgSend(v32, "code") != 13)
  {
    v21 = objc_msgSend(v32, "code");
    if (!a5 || v21 != 35)
      goto LABEL_20;
LABEL_17:
    v22 = **(_DWORD **)(v17 + 56);
    if (v22 <= 50 && (v22 != -1 || _LogCategory_Initialize()))
    {
      v30 = *(_QWORD *)(v17 + 48);
      v31 = v32;
      LogPrintF();
    }
    v32 = 0;
    goto LABEL_26;
  }
  if (a5)
    goto LABEL_17;
LABEL_20:
  v23 = NSErrorToOSStatus();
  if ((_DWORD)v23)
  {
    v26 = v23;
    goto LABEL_51;
  }
  v24 = **(_DWORD **)(v17 + 56);
  if (v24 <= 30 && (v24 != -1 || _LogCategory_Initialize()))
  {
    v30 = *(_QWORD *)(v17 + 48);
    LogPrintF();
  }
LABEL_26:
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    v28 = **(_DWORD **)(v17 + 56);
    if (v28 <= 90 && (v28 != -1 || _LogCategory_Initialize()))
    {
      IsAppleInternalBuild();
      LogPrintF();
    }
    v26 = 4294960526;
    goto LABEL_37;
  }
  objc_msgSend(v20, "setLegacyUpgradeRequired:", APSSettingsGetInt64(CFSTR("legacyTrafficRegistration"), 0) != 0, v30, v31);
  objc_msgSend(a1, "setTrafficRegistration:error:", v20, &v32);
  v23 = NSErrorToOSStatus();
  if ((_DWORD)v23)
  {
    v26 = v23;
LABEL_51:
    APSLogErrorAt(v23);
    goto LABEL_37;
  }
  v25 = **(_DWORD **)(v17 + 56);
  if (v25 <= 50)
  {
    if (v25 != -1)
    {
LABEL_30:
      if (v25 == -1)
        _LogCategory_Initialize();
      LogPrintF();
      goto LABEL_36;
    }
    if (_LogCategory_Initialize())
    {
      v25 = **(_DWORD **)(v17 + 56);
      goto LABEL_30;
    }
  }
LABEL_36:
  *(_QWORD *)(v17 + 40) = a1;
  *(_QWORD *)(v17 + 32) = v20;
  v26 = 0;
  *a8 = CFRetain((CFTypeRef)v17);
LABEL_37:
  CFRelease((CFTypeRef)v17);
LABEL_38:

  return v26;
}

void APSWiFiTrafficRegistrationSetRemovalHandler(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *(NSObject **)(a1 + 24);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __APSWiFiTrafficRegistrationSetRemovalHandler_block_invoke;
  v3[3] = &unk_1E828B558;
  v3[4] = a2;
  v3[5] = a1;
  dispatch_sync(v2, v3);
}

uint64_t APSConnectionInterfaceManagerGetTypeID()
{
  if (APSConnectionInterfaceManagerGetTypeID_connectionInterfaceManagerInitOnce != -1)
    dispatch_once_f(&APSConnectionInterfaceManagerGetTypeID_connectionInterfaceManagerInitOnce, &APSConnectionInterfaceManagerGetTypeID_connectionInterfaceManagerTypeID, (dispatch_function_t)interfaceManager_registerCMClass);
  return APSConnectionInterfaceManagerGetTypeID_connectionInterfaceManagerTypeID;
}

uint64_t interfaceManager_registerCMClass(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

void connectionInterfaceManager_Finalize(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v3 = *(const void **)(a1 + 32);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 32) = 0;
  }
}

uint64_t APSConnectionInterfaceManagerCreate(const __CFAllocator *a1, _QWORD *a2)
{
  uint64_t Instance;
  _QWORD *v5;
  dispatch_queue_t v6;
  CFMutableSetRef Mutable;
  uint64_t v8;

  if (APSConnectionInterfaceManagerGetTypeID_connectionInterfaceManagerInitOnce != -1)
    dispatch_once_f(&APSConnectionInterfaceManagerGetTypeID_connectionInterfaceManagerInitOnce, &APSConnectionInterfaceManagerGetTypeID_connectionInterfaceManagerTypeID, (dispatch_function_t)interfaceManager_registerCMClass);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    v8 = 4294895426;
    APSLogErrorAt(0);
    return v8;
  }
  v5 = (_QWORD *)Instance;
  *(_OWORD *)(Instance + 16) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  v6 = dispatch_queue_create("com.apple.airplay.connectionInterfaceManager", 0);
  v5[2] = v6;
  if (!v6)
  {
    APSLogErrorAt(0);
LABEL_11:
    v8 = 4294895426;
    CFRelease(v5);
    return v8;
  }
  Mutable = CFSetCreateMutable(a1, 0, 0);
  v5[4] = Mutable;
  if (!Mutable)
  {
    APSLogErrorAt(0);
    APSSignalErrorAt(4294895426);
    goto LABEL_11;
  }
  v8 = 0;
  *a2 = v5;
  return v8;
}

uint64_t APSConnectionInterfaceManagerSelectInterface(uint64_t a1, unsigned int a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD v5[3];
  _QWORD context[3];
  unsigned int v7;

  v5[0] = a1;
  v5[1] = a2;
  v3 = *(NSObject **)(a1 + 16);
  v7 = 0;
  v5[2] = a3;
  context[0] = &v7;
  context[1] = v5;
  context[2] = connectionInterfaceManager_selectInterfaceInternal;
  if (!v3)
    return 4294960591;
  dispatch_sync_f(v3, context, (dispatch_function_t)APSDispatchSyncTaskCallback);
  return v7;
}

uint64_t connectionInterfaceManager_selectInterfaceInternal(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  int v7;

  if (!*((_DWORD *)a1 + 2))
  {
    APSLogErrorAt(0);
    v3 = 4294895425;
    APSSignalErrorAt(4294895425);
    return v3;
  }
  if (!CFSetGetCount(*(CFSetRef *)(*a1 + 32)))
  {
    if (gLogCategory_APSConnectionInterfaceManager <= 40
      && (gLogCategory_APSConnectionInterfaceManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v2 = *a1;
    *(_DWORD *)(*a1 + 24) = *((_DWORD *)a1 + 2);
    goto LABEL_15;
  }
  v2 = *a1;
  if (*(_DWORD *)(*a1 + 24) == *((_DWORD *)a1 + 2))
  {
    if (gLogCategory_APSConnectionInterfaceManager <= 30)
    {
      if (gLogCategory_APSConnectionInterfaceManager != -1 || (v7 = _LogCategory_Initialize(), v2 = *a1, v7))
      {
        LogPrintF();
        v2 = *a1;
      }
    }
LABEL_15:
    v4 = (*(_DWORD *)(v2 + 40) + 1);
    *(_DWORD *)(v2 + 40) = v4;
    CFSetSetValue(*(CFMutableSetRef *)(v2 + 32), (const void *)v4);
    v5 = (_DWORD *)a1[2];
    v3 = 0;
    if (v5)
      *v5 = *(_DWORD *)(*a1 + 40);
    return v3;
  }
  v3 = 4294895424;
  if (gLogCategory_APSConnectionInterfaceManager <= 30
    && (gLogCategory_APSConnectionInterfaceManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v3;
}

uint64_t APSConnectionInterfaceManagerReleaseInterfaceSelection(uint64_t a1, unsigned int a2)
{
  _QWORD v3[2];

  v3[0] = a1;
  v3[1] = a2;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), v3, (dispatch_function_t)connectionInterfaceManager_releaseInterfaceSelection);
  return 0;
}

CFIndex connectionInterfaceManager_releaseInterfaceSelection(unsigned int *a1)
{
  CFIndex result;

  if (gLogCategory_APSConnectionInterfaceManager <= 30
    && (gLogCategory_APSConnectionInterfaceManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFSetRemoveValue(*(CFMutableSetRef *)(*(_QWORD *)a1 + 32), (const void *)a1[2]);
  result = CFSetGetCount(*(CFSetRef *)(*(_QWORD *)a1 + 32));
  if (!result)
  {
    if (gLogCategory_APSConnectionInterfaceManager <= 40)
    {
      if (gLogCategory_APSConnectionInterfaceManager != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
        result = LogPrintF();
    }
    *(_DWORD *)(*(_QWORD *)a1 + 24) = 0;
  }
  return result;
}

uint64_t APSReferencingAllocatorCreate(const __CFAllocator *a1, void *a2, CFAllocatorRef *a3)
{
  CFAllocatorRef v4;
  CFAllocatorContext context;

  memset(&context.reallocate, 0, 24);
  if (a2 && a3)
  {
    context.version = 0;
    context.info = a2;
    context.retain = (CFAllocatorRetainCallBack)MEMORY[0x1E0C98BD0];
    context.release = (CFAllocatorReleaseCallBack)MEMORY[0x1E0C98BC0];
    context.copyDescription = (CFAllocatorCopyDescriptionCallBack)MEMORY[0x1E0C98350];
    context.allocate = (CFAllocatorAllocateCallBack)refAllocator_Allocate;
    v4 = CFAllocatorCreate(a1, &context);
    *a3 = v4;
    if (v4)
    {
      return 0;
    }
    else
    {
      APSLogErrorAt(0);
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
}

uint64_t refAllocator_Allocate()
{
  APSSignalErrorAt(4294960568);
  return 0;
}

uint64_t APSReferencingAllocatorGetOverheadBytes()
{
  if (APSReferencingAllocatorGetOverheadBytes_sOnce != -1)
    dispatch_once_f(&APSReferencingAllocatorGetOverheadBytes_sOnce, &APSReferencingAllocatorGetOverheadBytes_sOverheadBytes, (dispatch_function_t)refAllocator_calculateOverheadBytes);
  return APSReferencingAllocatorGetOverheadBytes_sOverheadBytes;
}

void refAllocator_calculateOverheadBytes(void *a1)
{
  const __CFAllocator *v1;
  const __CFAllocator *v2;
  CFTypeRef cf;
  CFAllocatorContext context;

  context.reallocate = 0;
  memset(&context.retain, 0, 24);
  context.version = 0;
  context.info = a1;
  context.allocate = (CFAllocatorAllocateCallBack)refAllocatorOverhead_Allocate;
  cf = 0;
  context.deallocate = (CFAllocatorDeallocateCallBack)refAllocatorOverhead_Deallocate;
  context.preferredSize = 0;
  v1 = CFAllocatorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &context);
  v2 = v1;
  if (!v1
    || (v1 = (const __CFAllocator *)APSReferencingAllocatorCreate(v1, (void *)*MEMORY[0x1E0C9B0D0], (CFAllocatorRef *)&cf), (_DWORD)v1))
  {
    APSLogErrorAt((uint64_t)v1);
  }
  if (cf)
    CFRelease(cf);
  if (v2)
    CFRelease(v2);
}

void *refAllocatorOverhead_Allocate(CFIndex size, CFOptionFlags hint, _QWORD *a3)
{
  *a3 += size;
  return CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], size, hint);
}

void refAllocatorOverhead_Deallocate(void *ptr)
{
  CFAllocatorDeallocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], ptr);
}

uint64_t APSPSGDataSourceGetClassID()
{
  if (APSPSGDataSourceGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APSPSGDataSourceGetClassID_sRegisterOnce, &APSPSGDataSourceGetClassID_sClassID, (dispatch_function_t)psgDataSource_registerBaseClass);
  return APSPSGDataSourceGetClassID_sClassID;
}

uint64_t psgDataSource_registerBaseClass()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFStringRef psgDataSource_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[APSPSGDataSource %p]"), a1);
}

uint64_t APSPSGDataSourceGetTypeID()
{
  if (APSPSGDataSourceGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APSPSGDataSourceGetClassID_sRegisterOnce, &APSPSGDataSourceGetClassID_sClassID, (dispatch_function_t)psgDataSource_registerBaseClass);
  return CMBaseClassGetCFTypeID();
}

uint64_t flatQueueValueInfoCF_CopyValue(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3)
{
  *a3 = CFRetain(*a2);
  return 0;
}

uint64_t flatQueueValueInfoCF_FreeValue(uint64_t a1, CFTypeRef *a2)
{
  CFRelease(*a2);
  return 0;
}

uint64_t APSFlatQueueGetTypeID()
{
  if (gAPSFlatQueueInitOnce != -1)
    dispatch_once_f(&gAPSFlatQueueInitOnce, 0, (dispatch_function_t)_APSFlatQueueGetTypeID);
  return gAPSFlatQueueTypeID;
}

uint64_t _APSFlatQueueGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSFlatQueueTypeID = result;
  return result;
}

void _APSFlatQueueFinalize(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);

  v2 = a1 + 16;
  if (*(_QWORD *)(a1 + 32) && *(_QWORD *)(a1 + 96))
  {
    v3 = *(_QWORD *)(a1 + 80);
    do
    {
      (*(void (**)(uint64_t, uint64_t))(a1 + 32))(v2, *(_QWORD *)(a1 + 72) + *(_QWORD *)(a1 + 16) * v3);
      v3 = (*(_QWORD *)(a1 + 80) + 1) & *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 80) = v3;
      v4 = *(_QWORD *)(a1 + 96) - 1;
      *(_QWORD *)(a1 + 96) = v4;
    }
    while (v4);
  }
  v5 = *(void (**)(uint64_t))(a1 + 40);
  if (v5)
    v5(v2);
  free(*(void **)(a1 + 72));
}

uint64_t APSFlatQueueCreate(__int128 *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t Instance;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  unsigned int v10;
  void *v11;
  void (*v13)(__int128 *);

  if (!a1)
    return 4294960591;
  v5 = 4294960591;
  if (a3 && *(_QWORD *)a1)
  {
    if (gAPSFlatQueueInitOnce != -1)
      dispatch_once_f(&gAPSFlatQueueInitOnce, 0, (dispatch_function_t)_APSFlatQueueGetTypeID);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v7 = (_QWORD *)Instance;
      *(_QWORD *)(Instance + 96) = 0;
      *(_OWORD *)(Instance + 64) = 0u;
      *(_OWORD *)(Instance + 80) = 0u;
      *(_OWORD *)(Instance + 32) = 0u;
      *(_OWORD *)(Instance + 48) = 0u;
      *(_OWORD *)(Instance + 16) = 0u;
      v8 = *a1;
      v9 = a1[1];
      *(_QWORD *)(Instance + 48) = *((_QWORD *)a1 + 4);
      *(_OWORD *)(Instance + 16) = v8;
      *(_OWORD *)(Instance + 32) = v9;
      v10 = iceil2();
      v7[7] = v10;
      v7[8] = v10 - 1;
      v11 = malloc_type_malloc(v7[2] * v10, 0x1F1C35CCuLL);
      v7[9] = v11;
      if (v11)
      {
        v5 = 0;
        *a3 = v7;
      }
      else
      {
        CFRelease(v7);
        return 4294960568;
      }
      return v5;
    }
    v5 = 4294960568;
  }
  v13 = (void (*)(__int128 *))*((_QWORD *)a1 + 3);
  if (v13)
    v13(a1);
  return v5;
}

uint64_t APSFlatQueueGetCapacity(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 56);
  return result;
}

uint64_t APSFlatQueueGetCount(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 96);
  return result;
}

BOOL APSFlatQueueIsEmpty(uint64_t a1)
{
  return !a1 || *(_QWORD *)(a1 + 96) == 0;
}

uint64_t APSFlatQueueEnqueue(uint64_t a1, void *__src)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v14;

  result = 4294960591;
  if (a1 && __src)
  {
    v5 = *(_QWORD *)(a1 + 96);
    if (v5 == *(_QWORD *)(a1 + 56))
    {
      if (v5)
        v6 = 2 * v5;
      else
        v6 = 1;
      v7 = (char *)malloc_type_realloc(*(void **)(a1 + 72), *(_QWORD *)(a1 + 16) * v6, 0xBEBAFDDCuLL);
      if (!v7)
        return 4294960568;
      v8 = v7;
      v10 = (_QWORD *)(a1 + 88);
      v9 = *(_QWORD *)(a1 + 88);
      v11 = *(_QWORD *)(a1 + 56);
      v12 = *(_QWORD *)(a1 + 80);
      if (v9 <= v11 - v12)
      {
        memcpy(&v7[*(_QWORD *)(a1 + 16) * v11], v7, *(_QWORD *)(a1 + 16) * v9);
      }
      else
      {
        memcpy(&v7[*(_QWORD *)(a1 + 16) * (v12 + v11)], &v7[*(_QWORD *)(a1 + 16) * v12], *(_QWORD *)(a1 + 16) * (v11 - v12));
        v10 = (_QWORD *)(a1 + 80);
      }
      *v10 += *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 56) = v6;
      *(_QWORD *)(a1 + 64) = v6 - 1;
      *(_QWORD *)(a1 + 72) = v8;
    }
    else
    {
      v8 = *(char **)(a1 + 72);
    }
    v13 = *(uint64_t (**)(void))(a1 + 24);
    if (v13)
    {
      result = v13();
      if ((_DWORD)result)
        return result;
    }
    else
    {
      memcpy(&v8[*(_QWORD *)(a1 + 16) * *(_QWORD *)(a1 + 88)], __src, *(_QWORD *)(a1 + 16));
    }
    result = 0;
    v14 = *(_QWORD *)(a1 + 96) + 1;
    *(_QWORD *)(a1 + 88) = (*(_QWORD *)(a1 + 88) + 1) & *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 96) = v14;
  }
  return result;
}

uint64_t APSFlatQueueDequeue(size_t *a1, void *__dst)
{
  uint64_t result;
  uint64_t (*v4)(void);

  if (!a1)
    return 4294960591;
  if (!a1[12])
    return 4294960546;
  if (__dst)
  {
    memcpy(__dst, (const void *)(a1[9] + a1[2] * a1[10]), a1[2]);
LABEL_5:
    result = 0;
    a1[10] = (a1[10] + 1) & a1[8];
    --a1[12];
    return result;
  }
  v4 = (uint64_t (*)(void))a1[4];
  if (!v4)
    goto LABEL_5;
  result = v4();
  if (!(_DWORD)result)
    goto LABEL_5;
  return result;
}

uint64_t APSFlatQueuePeek(size_t *a1, void *__dst)
{
  uint64_t result;

  result = 4294960591;
  if (a1 && __dst)
  {
    if (a1[12])
    {
      memcpy(__dst, (const void *)(a1[9] + a1[2] * a1[10]), a1[2]);
      return 0;
    }
    else
    {
      return 4294960546;
    }
  }
  return result;
}

uint64_t APSFlatQueueRemoveAllValues(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  if (!a1)
    return 4294960591;
  if (*(_QWORD *)(a1 + 32))
  {
    if (*(_QWORD *)(a1 + 96))
    {
      v2 = *(_QWORD *)(a1 + 80);
      while (1)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 32))(a1 + 16, *(_QWORD *)(a1 + 72) + *(_QWORD *)(a1 + 16) * v2);
        if ((_DWORD)result)
          break;
        v2 = (*(_QWORD *)(a1 + 80) + 1) & *(_QWORD *)(a1 + 64);
        *(_QWORD *)(a1 + 80) = v2;
        v4 = *(_QWORD *)(a1 + 96) - 1;
        *(_QWORD *)(a1 + 96) = v4;
        if (!v4)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    result = 0;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 96) = 0;
  }
  return result;
}

uint64_t APSFlatQueueDequeueWhileF(_QWORD *a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, uint64_t);
  uint64_t v10;

  result = 4294960591;
  if (a1 && a2)
  {
    if (a1[12])
    {
      v7 = a1[10];
      while (1)
      {
        v8 = a1[9] + a1[2] * v7;
        result = a2(v8, a3);
        if (!(_DWORD)result)
          break;
        v9 = (uint64_t (*)(_QWORD *, uint64_t))a1[4];
        if (v9)
        {
          result = v9(a1 + 2, v8);
          if ((_DWORD)result)
            break;
        }
        v7 = (a1[10] + 1) & a1[8];
        a1[10] = v7;
        v10 = a1[12] - 1;
        a1[12] = v10;
        if (!v10)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t APSFlatQueueDequeueWhileB(_QWORD *a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t, uint64_t);

  if (a2)
    v3 = flatQueue_dequeueWhileBCallbackF;
  else
    v3 = 0;
  return APSFlatQueueDequeueWhileF(a1, v3, a2);
}

uint64_t flatQueue_dequeueWhileBCallbackF(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

uint64_t APSDebugAllocatorCreate(const void *a1, const __CFString *a2, CFAllocatorRef *a3)
{
  unint64_t *v6;
  unint64_t *v7;
  CFTypeRef v8;
  const __CFString *v9;
  unint64_t IntWithOverrideAndDefault;
  const __CFAllocator *v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v16;
  NSObject *v17;
  CFAllocatorRef v18;
  uint64_t v19;
  CFAllocatorContext v21;

  if (!a3)
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  v6 = (unint64_t *)malloc_type_calloc(1uLL, 0x68uLL, 0x10E004095A892B6uLL);
  if (!v6)
  {
    APSLogErrorAt(0);
    return 4294960568;
  }
  v7 = v6;
  memset(&v21, 0, sizeof(v21));
  atomic_store(1uLL, v6);
  if (a1)
    v8 = CFRetain(a1);
  else
    v8 = 0;
  v7[2] = (unint64_t)v8;
  if (a2)
    v9 = a2;
  else
    v9 = &stru_1E828E0E0;
  v7[3] = (unint64_t)CFRetain(v9);
  if ((APSSettingsGetIntWithOverrideAndDefault(CFSTR("debugAllocatorHighWaterUs"), 0, 100) & 0x80000000) != 0)
    IntWithOverrideAndDefault = 0;
  else
    IntWithOverrideAndDefault = (int)APSSettingsGetIntWithOverrideAndDefault(CFSTR("debugAllocatorHighWaterUs"), 0, 100);
  v7[6] = IntWithOverrideAndDefault;
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v12 = APSAtomicMessageQueueCreate(*MEMORY[0x1E0C9AE00], 40, (uint64_t *)v7 + 4);
  if ((_DWORD)v12)
  {
    v19 = v12;
LABEL_27:
    APSLogErrorAt(v12);
    goto LABEL_20;
  }
  v13 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  v14 = dispatch_queue_create("APSDebugAllocator", v13);
  v7[7] = (unint64_t)v14;
  if (!v14)
  {
LABEL_28:
    APSLogErrorAt(0);
    v19 = 4294960568;
    goto LABEL_20;
  }
  v12 = APSRealTimeSignalCreate(v14, v7, (uint64_t)dbgAllocator_messageSignalHandler, 0, (uint64_t *)v7 + 5);
  if ((_DWORD)v12)
  {
    v19 = v12;
    goto LABEL_27;
  }
  atomic_store(0, v7 + 11);
  atomic_store(0, v7 + 12);
  Mutable = CFDictionaryCreateMutable(v11, 0, 0, 0);
  v7[9] = (unint64_t)Mutable;
  if (!Mutable)
    goto LABEL_28;
  v16 = CFDictionaryCreateMutable(v11, 0, 0, 0);
  v7[10] = (unint64_t)v16;
  if (!v16)
    goto LABEL_28;
  v17 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, (dispatch_queue_t)v7[7]);
  v7[8] = (unint64_t)v17;
  if (!v17)
    goto LABEL_28;
  dispatch_set_context(v17, v7);
  dispatch_source_set_event_handler_f((dispatch_source_t)v7[8], (dispatch_function_t)dbgAllocator_timerTick);
  dispatch_source_set_timer((dispatch_source_t)v7[8], 0, 0x12A05F200uLL, 0x4C4B40uLL);
  dispatch_resume((dispatch_object_t)v7[8]);
  v21.copyDescription = 0;
  v21.allocate = (CFAllocatorAllocateCallBack)dbgAllocator_allocate;
  v21.reallocate = 0;
  v21.deallocate = (CFAllocatorDeallocateCallBack)dbgAllocator_deallocate;
  v21.preferredSize = (CFAllocatorPreferredSizeCallBack)dbgAllocator_preferredSize;
  v21.version = 0;
  v21.info = v7;
  v21.retain = (CFAllocatorRetainCallBack)dbgAllocator_retain;
  v21.release = (CFAllocatorReleaseCallBack)dbgAllocator_release;
  v18 = CFAllocatorCreate(v11, &v21);
  if (!v18)
    goto LABEL_28;
  v19 = 0;
  v7[1] = (unint64_t)v18;
  *a3 = v18;
LABEL_20:
  dbgAllocator_release(v7);
  return v19;
}

uint64_t dbgAllocator_messageSignalHandler(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  const void *v13;
  _QWORD *v14;
  unint64_t v15;
  void *key[2];
  void *v17[2];
  unint64_t v18;
  void *value;

  v18 = 0;
  *(_OWORD *)key = 0u;
  *(_OWORD *)v17 = 0u;
  v2 = (unint64_t *)(a1 + 88);
  do
    v3 = __ldxr(v2);
  while (__stxr(0, v2));
  v4 = (unint64_t *)(a1 + 96);
  do
    v5 = __ldxr(v4);
  while (__stxr(0, v4));
  if (v3
    && gLogCategory_APSDebugAllocator <= 50
    && (gLogCategory_APSDebugAllocator != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v5
    && gLogCategory_APSDebugAllocator <= 50
    && (gLogCategory_APSDebugAllocator != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  while (1)
  {
    result = APSAtomicMessageQueueReadMessage(*(_QWORD *)(a1 + 32), key);
    if (!(_DWORD)result)
      return result;
    v7 = v18;
    v8 = UpTicksToMicroseconds();
    if (LODWORD(key[0]) == 2)
    {
      value = 0;
      if (v8 >= *(_QWORD *)(a1 + 48))
      {
        if (gLogCategory_APSDebugAllocator > 90
          || gLogCategory_APSDebugAllocator == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_46;
        }
      }
      else if (gLogCategory_APSDebugAllocator > 30
             || gLogCategory_APSDebugAllocator == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_46;
      }
      LogPrintF();
LABEL_46:
      v13 = v17[0];
      if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 72), v17[0], (const void **)&value))
      {
        v14 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), value);
        v15 = v14[5];
        ++v14[4];
        if (v7 < v15)
          v14[5] = v7;
        if (v7 > v14[6])
          v14[6] = v7;
        v14[7] += v7;
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 72), v13);
      }
    }
    else if (LODWORD(key[0]) == 1)
    {
      if (v8 >= *(_QWORD *)(a1 + 48))
      {
        if (gLogCategory_APSDebugAllocator <= 90
          && (gLogCategory_APSDebugAllocator != -1 || _LogCategory_Initialize()))
        {
LABEL_28:
          LogPrintF();
        }
      }
      else if (gLogCategory_APSDebugAllocator <= 30
             && (gLogCategory_APSDebugAllocator != -1 || _LogCategory_Initialize()))
      {
        goto LABEL_28;
      }
      v9 = key[1];
      v10 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), key[1]);
      if (v10)
        goto LABEL_40;
      v11 = malloc_type_malloc(0x40uLL, 0x1000040FA0F61DDuLL);
      if (v11)
      {
        v10 = v11;
        *((_OWORD *)v11 + 2) = 0u;
        *((_OWORD *)v11 + 3) = 0u;
        *(_OWORD *)v11 = 0u;
        *((_OWORD *)v11 + 1) = 0u;
        v11[1] = -1;
        v11[5] = -1;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 80), v9, v11);
LABEL_40:
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 72), v17[1], v9);
        v12 = v10[1];
        ++*v10;
        if (v7 < v12)
          v10[1] = v7;
        if (v7 > v10[2])
          v10[2] = v7;
        v10[3] += v7;
      }
      else
      {
        APSLogErrorAt(0);
      }
    }
  }
}

void dbgAllocator_timerTick(CFDictionaryRef *context)
{
  if (gLogCategory_APSDebugAllocator <= 50
    && (gLogCategory_APSDebugAllocator != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFDictionaryApplyFunction(context[10], (CFDictionaryApplierFunction)dbgAllocator_logStatsApplier, context);
  CFDictionaryApplyFunction(context[10], (CFDictionaryApplierFunction)dbgAllocator_resetStatsApplier, context);
}

void *dbgAllocator_allocate(CFIndex a1, CFOptionFlags a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD v13[5];

  v6 = mach_absolute_time();
  v7 = CFAllocatorAllocate(*(CFAllocatorRef *)(a3 + 16), a1, a2);
  v8 = mach_absolute_time();
  if (v7)
  {
    v13[1] = a1;
    v13[0] = 1;
    v13[2] = 0;
    v13[3] = v7;
    v13[4] = v8 - v6;
    APSAtomicMessageQueueSendMessage(*(_QWORD *)(a3 + 32), v13);
    v9 = *(unsigned int **)(*(_QWORD *)(a3 + 40) + 16);
    v10 = v9 + 10;
    while (1)
    {
      v11 = __ldxr(v10);
      if (v11 != 1)
        break;
      if (!__stlxr(2u, v10))
      {
        caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(v9 + 6), (caulk::concurrent::message *)v9);
        return v7;
      }
    }
    __clrex();
  }
  else
  {
    APSLogErrorAt(0);
  }
  return v7;
}

uint64_t dbgAllocator_deallocate(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v9 = 0u;
  v10 = 0u;
  v4 = mach_absolute_time();
  CFAllocatorDeallocate(*(CFAllocatorRef *)(a2 + 16), a1);
  LODWORD(v9) = 2;
  *(_QWORD *)&v10 = a1;
  v11 = mach_absolute_time() - v4;
  result = APSAtomicMessageQueueSendMessage(*(_QWORD *)(a2 + 32), &v9);
  v6 = *(unsigned int **)(*(_QWORD *)(a2 + 40) + 16);
  v7 = v6 + 10;
  while (1)
  {
    v8 = __ldxr(v7);
    if (v8 != 1)
      break;
    if (!__stlxr(2u, v7))
      return caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(v6 + 6), (caulk::concurrent::message *)v6);
  }
  __clrex();
  return result;
}

CFIndex dbgAllocator_preferredSize(CFIndex size, CFOptionFlags hint, uint64_t a3)
{
  return CFAllocatorGetPreferredSizeForSize(*(CFAllocatorRef *)(a3 + 16), size, hint);
}

unint64_t *dbgAllocator_retain(unint64_t *result)
{
  unint64_t v1;

  do
    v1 = __ldaxr(result);
  while (__stlxr(v1 + 1, result));
  return result;
}

void dbgAllocator_release(void *a1)
{
  unint64_t v2;
  unint64_t v3;
  const void *v4;
  NSObject *v5;
  NSObject *v6;
  const __CFDictionary *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  do
  {
    v2 = __ldaxr((unint64_t *)a1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, (unint64_t *)a1));
  if (!v3)
  {
    v4 = (const void *)*((_QWORD *)a1 + 5);
    if (v4)
      CFRelease(v4);
    v5 = *((_QWORD *)a1 + 8);
    if (v5)
    {
      dispatch_source_cancel(v5);
      dispatch_sync_f(*((dispatch_queue_t *)a1 + 7), a1, (dispatch_function_t)dbgAllocator_flush);
      dispatch_release(*((dispatch_object_t *)a1 + 8));
    }
    v6 = *((_QWORD *)a1 + 7);
    if (v6)
      dispatch_release(v6);
    v7 = (const __CFDictionary *)*((_QWORD *)a1 + 10);
    if (v7)
    {
      CFDictionaryApplyFunction(v7, (CFDictionaryApplierFunction)dbgAllocator_freeStatsApplier, a1);
      CFRelease(*((CFTypeRef *)a1 + 10));
    }
    v8 = (const void *)*((_QWORD *)a1 + 9);
    if (v8)
      CFRelease(v8);
    v9 = (const void *)*((_QWORD *)a1 + 2);
    if (v9)
      CFRelease(v9);
    v10 = (const void *)*((_QWORD *)a1 + 3);
    if (v10)
      CFRelease(v10);
    free(a1);
  }
}

void dbgAllocator_freeStatsApplier(int a1, void *a2)
{
  free(a2);
}

uint64_t dbgAllocator_logStatsApplier(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (*a2 || a2[4])
  {
    if (gLogCategory_APSDebugAllocator <= 50)
    {
      if (gLogCategory_APSDebugAllocator != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
        result = LogPrintF();
    }
    if (*a2)
    {
      if (gLogCategory_APSDebugAllocator <= 50)
      {
        if (gLogCategory_APSDebugAllocator != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
        {
          UpTicksToMicroseconds();
          UpTicksToMicroseconds();
          UpTicksToMicroseconds();
          result = LogPrintF();
        }
      }
    }
    if (a2[4])
    {
      if (gLogCategory_APSDebugAllocator <= 50)
      {
        if (gLogCategory_APSDebugAllocator != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
        {
          UpTicksToMicroseconds();
          UpTicksToMicroseconds();
          UpTicksToMicroseconds();
          return LogPrintF();
        }
      }
    }
  }
  return result;
}

double dbgAllocator_resetStatsApplier(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 8) = -1;
  *(_QWORD *)(a2 + 40) = -1;
  return result;
}

uint64_t APSPriorityDispatcherGetTypeID()
{
  if (gAPSPriorityDispatcherInitOnce != -1)
    dispatch_once_f(&gAPSPriorityDispatcherInitOnce, 0, (dispatch_function_t)_APSPriorityDispatcherGetTypeID);
  return gAPSPriorityDispatcherTypeID;
}

uint64_t _APSPriorityDispatcherGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSPriorityDispatcherTypeID = result;
  return result;
}

uint64_t _APSPriorityDispatcherFinalize(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t result;

  v2 = a1[2];
  if (v2)
  {
    dispatch_release(v2);
    a1[2] = 0;
  }
  v3 = a1[5];
  if (v3)
  {
    dispatch_release(v3);
    a1[5] = 0;
  }
  result = a1[3];
  if (result)
  {
    result = FigSimpleMutexDestroy();
    a1[3] = 0;
  }
  if (gLogCategory_APSPriorityDispatcher <= 50)
  {
    if (gLogCategory_APSPriorityDispatcher != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

uint64_t APSPriorityDispatcherCreate(NSObject *a1, int a2, CFTypeRef *a3)
{
  uint64_t Instance;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 && a3)
  {
    if (gAPSPriorityDispatcherInitOnce != -1)
      dispatch_once_f(&gAPSPriorityDispatcherInitOnce, 0, (dispatch_function_t)_APSPriorityDispatcherGetTypeID);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v7 = (_QWORD *)Instance;
      *(_OWORD *)(Instance + 16) = 0u;
      *(_OWORD *)(Instance + 32) = 0u;
      dispatch_retain(a1);
      v7[2] = a1;
      v8 = FigSimpleMutexCreate();
      v7[3] = v8;
      if (v8)
      {
        v9 = priorityDispatcher_setPriority((uint64_t)v7, a2, 1);
        if ((_DWORD)v9)
        {
          v10 = v9;
          APSLogErrorAt(v9);
        }
        else
        {
          if (gLogCategory_APSPriorityDispatcher <= 50
            && (gLogCategory_APSPriorityDispatcher != -1 || _LogCategory_Initialize()))
          {
            FigThreadGetMachThreadPriorityValue();
            LogPrintF();
          }
          v10 = 0;
          *a3 = CFRetain(v7);
        }
      }
      else
      {
        APSLogErrorAt(0);
        v10 = 4294960568;
      }
      CFRelease(v7);
    }
    else
    {
      APSLogErrorAt(0);
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  return v10;
}

uint64_t priorityDispatcher_setPriority(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;

  if (!a1)
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
  if (!a3)
  {
    if (*(_DWORD *)(a1 + 32) == a2)
    {
      v9 = 0;
      goto LABEL_16;
    }
    if (gLogCategory_APSPriorityDispatcher <= 50
      && (gLogCategory_APSPriorityDispatcher != -1 || _LogCategory_Initialize()))
    {
      FigThreadGetMachThreadPriorityValue();
      FigThreadGetMachThreadPriorityValue();
      LogPrintF();
    }
  }
  v6 = FigDispatchQueueCreateWithPriority();
  if (!v6)
  {
    APSLogErrorAt(0);
    v9 = 4294960568;
LABEL_16:
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
    return v9;
  }
  v7 = v6;
  v8 = *(NSObject **)(a1 + 40);
  if (v8)
  {
    dispatch_release(v8);
    *(_QWORD *)(a1 + 40) = 0;
  }
  dispatch_retain(v7);
  *(_QWORD *)(a1 + 40) = v7;
  *(_DWORD *)(a1 + 32) = a2;
  dispatch_retain(*(dispatch_object_t *)(a1 + 16));
  dispatch_async_f(*(dispatch_queue_t *)(a1 + 40), *(void **)(a1 + 16), (dispatch_function_t)priorityDispatcher_syncFlushOnQueue);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
  dispatch_release(v7);
  return 0;
}

void priorityDispatcher_syncFlushOnQueue(NSObject *a1)
{
  dispatch_sync_f(a1, 0, (dispatch_function_t)priorityDispatcher_flush);
  if (a1)
    dispatch_release(a1);
}

uint64_t APSPriorityDispatcherSetPriority(uint64_t a1, int a2)
{
  return priorityDispatcher_setPriority(a1, a2, 0);
}

uint64_t APSPriorityDispatcherSyncF(uint64_t a1, NSObject *a2, NSObject *a3)
{
  return priorityDispatcher_dispatchFunction(a1, a2, a3, 0);
}

uint64_t priorityDispatcher_dispatchFunction(uint64_t a1, NSObject *a2, NSObject *a3, int a4)
{
  dispatch_object_t *v8;
  dispatch_object_t *v9;
  pthread_mutex_t *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;

  if (!a1 || !a2)
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  v8 = (dispatch_object_t *)malloc_type_malloc(0x18uLL, 0xA00402214FCE6uLL);
  if (!v8)
  {
    APSLogErrorAt(0);
    return 4294960568;
  }
  v9 = v8;
  dispatch_retain(*(dispatch_object_t *)(a1 + 16));
  v10 = *(pthread_mutex_t **)(a1 + 24);
  *v9 = *(dispatch_object_t *)(a1 + 16);
  v9[1] = a2;
  v9[2] = a3;
  pthread_mutex_lock(v10);
  dispatch_retain(*(dispatch_object_t *)(a1 + 40));
  v11 = *(NSObject **)(a1 + 40);
  v12 = pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
  if (a4)
  {
    if (a4 != 1)
    {
      if (a4 != 2)
      {
        if (*v9)
          dispatch_release(*v9);
        free(v9);
        v13 = 4294960587;
        if (v11)
          goto LABEL_19;
        return v13;
      }
      MEMORY[0x1CAA42498](v12);
      FigThreadCopyProperty();
      CFGetInt64Ranged();
      if (gLogCategory_APSPriorityDispatcher <= 90
        && (gLogCategory_APSPriorityDispatcher != -1 || _LogCategory_Initialize()))
      {
        FigThreadGetMachThreadPriorityValue();
        LogPrintF();
      }
    }
    dispatch_async_f(v11, v9, (dispatch_function_t)priorityDispatcher_invokeAndDestroyContext);
  }
  else
  {
    dispatch_sync_f(v11, v9, (dispatch_function_t)priorityDispatcher_invokeAndDestroyContext);
  }
  v13 = 0;
  if (v11)
LABEL_19:
    dispatch_release(v11);
  return v13;
}

void priorityDispatcher_invokeAndDestroyContext(uint64_t a1)
{
  dispatch_sync_f(*(dispatch_queue_t *)a1, *(void **)(a1 + 16), *(dispatch_function_t *)(a1 + 8));
  if (*(_QWORD *)a1)
    dispatch_release(*(dispatch_object_t *)a1);
  free((void *)a1);
}

uint64_t APSPriorityDispatcherAsyncF(uint64_t a1, NSObject *a2, NSObject *a3)
{
  return priorityDispatcher_dispatchFunction(a1, a2, a3, 1);
}

uint64_t APSPriorityDispatcherAsyncEnforcePriorityF(uint64_t a1, NSObject *a2, NSObject *a3)
{
  return priorityDispatcher_dispatchFunction(a1, a2, a3, 2);
}

uint64_t APSPriorityDispatcherSync(uint64_t a1, void *a2)
{
  return priorityDispatcher_dispatchBlock(a1, a2, 0);
}

uint64_t priorityDispatcher_dispatchBlock(uint64_t a1, void *aBlock, int a3)
{
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 && aBlock)
  {
    v5 = _Block_copy(aBlock);
    if (v5)
    {
      v6 = v5;
      v7 = priorityDispatcher_dispatchFunction(a1, priorityDispatcher_invokeAndReleaseBlock, v5, a3);
      v8 = v7;
      if ((_DWORD)v7)
      {
        APSLogErrorAt(v7);
        _Block_release(v6);
      }
    }
    else
    {
      APSLogErrorAt(0);
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  return v8;
}

void priorityDispatcher_invokeAndReleaseBlock(void (**a1)(void))
{
  a1[2]();
  _Block_release(a1);
}

uint64_t APSPriorityDispatcherAsync(uint64_t a1, void *a2)
{
  return priorityDispatcher_dispatchBlock(a1, a2, 1);
}

uint64_t APSPriorityDispatcherAsyncEnforcePriority(uint64_t a1, void *a2)
{
  return priorityDispatcher_dispatchBlock(a1, a2, 2);
}

uint64_t APSPriorityDispatcherSyncTask(uint64_t a1, objc_class *a2, objc_class *a3)
{
  uint64_t v3;
  uint64_t v4;
  NSObject v6[2];
  uint64_t v7;

  v6[0].isa = a2;
  v6[1].isa = a3;
  if (a1 && a2)
  {
    v7 = 0;
    v3 = priorityDispatcher_dispatchFunction(a1, priorityDispatcher_syncTask, v6, 0);
    if ((_DWORD)v3)
    {
      v4 = v3;
      APSLogErrorAt(v3);
    }
    else
    {
      return v7;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  return v4;
}

uint64_t priorityDispatcher_syncTask(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))a1)(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

uint64_t APSRTPJitterBufferCreate(uint64_t a1, __int128 *a2, __int128 *a3, int a4, char a5, const void *a6, _DWORD *a7)
{
  uint64_t Instance;
  uint64_t v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  dispatch_queue_t v20;
  unsigned int v21;
  size_t v22;
  void *v23;
  const __CFAllocator *v24;
  uint64_t v25;
  const __CFAllocator *v26;
  dispatch_semaphore_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v36;

  if (!a2 || !a3 || *((_DWORD *)a3 + 2) != 1819304813 || !a4)
  {
    APSLogErrorAt(0);
    v14 = 0;
    LODWORD(v34) = -6705;
    goto LABEL_45;
  }
  if (APSRTPJitterBufferGetTypeID_once != -1)
    dispatch_once(&APSRTPJitterBufferGetTypeID_once, &__block_literal_global_964);
  Instance = _CFRuntimeCreateInstance();
  v14 = Instance;
  if (!Instance)
    goto LABEL_49;
  *(_OWORD *)(Instance + 112) = 0u;
  v15 = (double *)(Instance + 112);
  *(_OWORD *)(Instance + 256) = 0u;
  *(_OWORD *)(Instance + 272) = 0u;
  *(_OWORD *)(Instance + 224) = 0u;
  *(_OWORD *)(Instance + 240) = 0u;
  *(_OWORD *)(Instance + 192) = 0u;
  *(_OWORD *)(Instance + 208) = 0u;
  *(_OWORD *)(Instance + 160) = 0u;
  *(_OWORD *)(Instance + 176) = 0u;
  *(_OWORD *)(Instance + 128) = 0u;
  *(_OWORD *)(Instance + 144) = 0u;
  *(_OWORD *)(Instance + 80) = 0u;
  *(_OWORD *)(Instance + 96) = 0u;
  *(_OWORD *)(Instance + 48) = 0u;
  *(_OWORD *)(Instance + 64) = 0u;
  *(_OWORD *)(Instance + 16) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  v16 = *a2;
  v17 = a2[1];
  *(_QWORD *)(Instance + 104) = *((_QWORD *)a2 + 4);
  *(_OWORD *)(Instance + 88) = v17;
  *(_OWORD *)(Instance + 72) = v16;
  v19 = *a3;
  v18 = a3[1];
  *(_QWORD *)(Instance + 144) = *((_QWORD *)a3 + 4);
  *(_OWORD *)(Instance + 112) = v19;
  *(_OWORD *)(Instance + 128) = v18;
  *(_DWORD *)(Instance + 156) = *(double *)(Instance + 112) * a4 / 0x3E8;
  *(_DWORD *)(Instance + 160) = a4;
  *(_BYTE *)(Instance + 274) = 0;
  *(_DWORD *)(Instance + 236) = 0;
  if ((a5 & 1) != 0)
    *(_WORD *)(Instance + 164) = 257;
  *(_QWORD *)(Instance + 16) = CFRetain(a6);
  v20 = dispatch_queue_create("com.apple.APSRTPJitterBuffer.log", 0);
  *(_QWORD *)(v14 + 24) = v20;
  if (!v20)
  {
LABEL_49:
    APSLogErrorAt(0);
    LODWORD(v34) = -6728;
    goto LABEL_45;
  }
  if (gLogCategory_APSRTPJitterBuffer <= 40
    && (gLogCategory_APSRTPJitterBuffer != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_DWORD *)(v14 + 80) == 1819304813)
    v21 = 0x5A0u / *(_DWORD *)(v14 + 88);
  else
    v21 = *(_DWORD *)(v14 + 92);
  *(_DWORD *)(v14 + 152) = v21;
  if (!v21)
  {
    APSLogErrorAt(0);
    v34 = 4294960591;
LABEL_56:
    v36 = v34;
LABEL_63:
    APSLogErrorAt(v36);
    goto LABEL_45;
  }
  v22 = 4 * *(_DWORD *)(v14 + 156) / v21 + 1;
  *(_DWORD *)(v14 + 40) = v22;
  v23 = malloc_type_calloc(v22, 0x5C8uLL, 0x10000409D9978B0uLL);
  *(_QWORD *)(v14 + 32) = v23;
  if (!v23)
    goto LABEL_55;
  if (gLogCategory_APSRTPJitterBuffer <= 40
    && (gLogCategory_APSRTPJitterBuffer != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v24 = CFGetAllocator((CFTypeRef)v14);
  v25 = CMSimpleQueueCreate(v24, *(_DWORD *)(v14 + 40), (CMSimpleQueueRef *)(v14 + 56));
  if ((_DWORD)v25)
  {
    v34 = v25;
LABEL_54:
    APSLogErrorAt(v25);
    goto LABEL_56;
  }
  v26 = CFGetAllocator((CFTypeRef)v14);
  v25 = CMSimpleQueueCreate(v26, *(_DWORD *)(v14 + 40), (CMSimpleQueueRef *)(v14 + 48));
  if ((_DWORD)v25)
  {
    v34 = v25;
    goto LABEL_54;
  }
  v27 = dispatch_semaphore_create(0);
  *(_QWORD *)(v14 + 64) = v27;
  if (!v27)
  {
LABEL_55:
    APSLogErrorAt(0);
    v34 = 4294960568;
    goto LABEL_56;
  }
  if (*(_DWORD *)(v14 + 40))
  {
    v28 = 0;
    v29 = 0;
    do
    {
      CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(v14 + 48), (const void *)(*(_QWORD *)(v14 + 32) + v28));
      ++v29;
      v28 += 1480;
    }
    while (v29 < *(unsigned int *)(v14 + 40));
  }
  if (*(double *)(v14 + 72) != *v15 || *(_DWORD *)(v14 + 100) != *(_DWORD *)(v14 + 140))
  {
    APSLogErrorAt(0);
    v34 = 4294960591;
LABEL_62:
    v36 = v34;
    goto LABEL_63;
  }
  *(_DWORD *)(v14 + 224) = 20 * *(_DWORD *)(v14 + 156) * *(_DWORD *)(v14 + 136);
  v30 = MirroredRingBufferInit();
  if ((_DWORD)v30)
  {
    v34 = v30;
LABEL_61:
    APSLogErrorAt(v30);
    goto LABEL_62;
  }
  if (gLogCategory_APSRTPJitterBuffer <= 40
    && (gLogCategory_APSRTPJitterBuffer != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v30 = AudioConverterNew((const AudioStreamBasicDescription *)v15 - 1, (const AudioStreamBasicDescription *)(v14 + 112), (AudioConverterRef *)(v14 + 248));
  if ((_DWORD)v30)
  {
    v34 = v30;
    goto LABEL_61;
  }
  v30 = pthread_create((pthread_t *)(v14 + 256), 0, (void *(__cdecl *)(void *))_APSRTPJitterBufferDecodeThreadEntry, (void *)v14);
  if ((_DWORD)v30)
  {
    v34 = v30;
    goto LABEL_61;
  }
  *(_QWORD *)(v14 + 264) = v14 + 256;
  if (*(_BYTE *)(v14 + 164))
  {
    LODWORD(v31) = *(_DWORD *)(v14 + 224);
    HIDWORD(v32) = 1072483532;
    LODWORD(v32) = *(_DWORD *)(v14 + 136);
    v33 = 4 * a4 * *(double *)(v14 + 112) / 0x3E8;
    *(_DWORD *)(v14 + 180) = ((double)v31 * 0.9 / (double)v32);
    *(_DWORD *)(v14 + 184) = v33;
    if (gLogCategory_APSRTPJitterBuffer <= 40
      && (gLogCategory_APSRTPJitterBuffer != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  LODWORD(v34) = 0;
LABEL_45:
  if (a7)
    *a7 = v34;
  return v14;
}

uint64_t _APSRTPJitterBufferDecodeThreadEntry(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  size_t v15;
  NSObject *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  NSObject *v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v23;
  NSObject *v24;
  int v25;
  int v26;
  int v27;
  NSObject *v28;
  unsigned int v29;
  unsigned int v30;
  size_t v31;
  NSObject *v32;
  int v33;
  int v34;
  int v35;
  NSObject *v36;
  uint64_t v37;
  NSObject *v38;
  _QWORD v40[5];
  _QWORD block[5];
  _QWORD v42[5];
  int v43;
  _QWORD v44[5];
  int v45;
  unsigned int v46;
  unsigned int v47;
  _QWORD v48[6];
  _QWORD v49[5];
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)();
  void *v54;
  uint64_t v55;
  _DWORD *v56;
  unsigned int v57;

  SetCurrentThreadPriority();
  if (gLogCategory_APSRTPJitterBuffer <= 30
    && (gLogCategory_APSRTPJitterBuffer != -1 || _LogCategory_Initialize()))
  {
    v2 = *(NSObject **)(a1 + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___APSRTPJitterBufferDecodeThreadEntry_block_invoke;
    block[3] = &__block_descriptor_tmp_26;
    block[4] = a1;
    dispatch_async(v2, block);
  }
  if (!*(_BYTE *)(a1 + 273))
  {
    v4 = MEMORY[0x1E0C809B0];
    do
    {
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 64), 0xFFFFFFFFFFFFFFFFLL);
      if (*(_BYTE *)(a1 + 273))
        break;
      v5 = CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 56));
      if (*(_BYTE *)(a1 + 273))
        break;
      v6 = v5;
      if (v5)
      {
        if (*((_QWORD *)v5 + 184))
        {
          if (!*(_BYTE *)(a1 + 272))
          {
            v7 = *(_DWORD *)(a1 + 228);
            if (*(_BYTE *)(a1 + 164))
            {
              *(_DWORD *)(a1 + 232) = v7;
              *(_DWORD *)(a1 + 236) = v7 - v5[1];
              *(_DWORD *)(a1 + 240) = v7;
            }
            else
            {
              *(_DWORD *)(a1 + 232) = v5[1];
              v8 = v5[1];
              v9 = v8 - v7;
              v10 = *(_DWORD *)(a1 + 156);
              v11 = v7 - v8 + v10;
              if (v9 >= v10)
                v11 = 0;
              *(_DWORD *)(a1 + 236) = v11;
              v12 = v11 + v5[1];
              *(_DWORD *)(a1 + 232) = v12;
              *(_DWORD *)(a1 + 240) = v12;
              v13 = *(_DWORD *)(a1 + 136) * (v12 - v7);
              if (v13)
              {
                v14 = *(_DWORD *)(a1 + 224);
                if (v13 >= v14)
                  v15 = v14;
                else
                  v15 = v13;
                bzero((void *)(*(_QWORD *)(a1 + 192) + (*(_DWORD *)(a1 + 212) & *(_DWORD *)(a1 + 220))), v15);
                *(_DWORD *)(a1 + 220) += v13;
              }
            }
            if (gLogCategory_APSRTPJitterBuffer <= 30
              && (gLogCategory_APSRTPJitterBuffer != -1 || _LogCategory_Initialize()))
            {
              v16 = *(NSObject **)(a1 + 24);
              v51 = v4;
              v52 = 0x40000000;
              v53 = ___APSRTPJitterBufferInitializeWritePointers_block_invoke;
              v54 = &__block_descriptor_tmp_36;
              v55 = a1;
              v56 = v6;
              dispatch_async(v16, &v51);
            }
          }
          v17 = v6[1] + *(_DWORD *)(a1 + 236);
          v6[1] = v17;
          v18 = *(_DWORD *)(a1 + 240);
          v19 = v17 - v18;
          if (v17 < v18)
          {
            if (gLogCategory_APSRTPJitterBuffer <= 30
              && (gLogCategory_APSRTPJitterBuffer != -1 || _LogCategory_Initialize()))
            {
              v38 = *(NSObject **)(a1 + 24);
              v48[0] = v4;
              v48[1] = 0x40000000;
              v48[2] = ___APSRTPJitterBufferWritePacket_block_invoke;
              v48[3] = &__block_descriptor_tmp_30;
              v48[4] = a1;
              v48[5] = v6;
              dispatch_async(v38, v48);
            }
          }
          else
          {
            if (v17 == v18)
            {
              v19 = 0;
            }
            else
            {
              if (gLogCategory_APSRTPJitterBuffer <= 30
                && (gLogCategory_APSRTPJitterBuffer != -1 || _LogCategory_Initialize()))
              {
                v20 = *(NSObject **)(a1 + 24);
                v44[0] = v4;
                v44[1] = 0x40000000;
                v44[2] = ___APSRTPJitterBufferWritePacket_block_invoke_2;
                v44[3] = &__block_descriptor_tmp_32;
                v44[4] = a1;
                v45 = v17 - v18;
                v46 = v18;
                v47 = v17;
                dispatch_async(v20, v44);
              }
              ++*(_DWORD *)(a1 + 284);
            }
            v21 = *(_DWORD *)(a1 + 92);
            v22 = (*(_DWORD *)(a1 + 208) - *(_DWORD *)(a1 + 220) + *(_DWORD *)(a1 + 216))
                / *(_DWORD *)(a1 + 136);
            if (v22 < v21 + v19)
            {
              if (gLogCategory_APSRTPJitterBuffer <= 30)
              {
                v23 = *(_DWORD **)(a1 + 228);
                if (gLogCategory_APSRTPJitterBuffer != -1 || _LogCategory_Initialize())
                {
                  v24 = *(NSObject **)(a1 + 24);
                  v51 = v4;
                  v52 = 0x40000000;
                  v53 = ___APSRTPJitterBufferCheckOverrun_block_invoke;
                  v54 = &__block_descriptor_tmp_40;
                  v55 = a1;
                  v56 = v23;
                  v57 = v22;
                  dispatch_async(v24, &v51);
                }
              }
              ++*(_DWORD *)(a1 + 280);
              v21 = *(_DWORD *)(a1 + 92);
            }
            if (v21 < 2)
            {
              v27 = 0;
              v26 = v19;
            }
            else
            {
              v25 = v19 / v21;
              v26 = v19 % v21;
              if (v21 <= v19)
              {
                v27 = 0;
                do
                {
                  v27 += _APSRTPJitterBufferDecodeOneUnit(a1, (OSStatus (__cdecl *)(AudioConverterRef, UInt32 *, AudioBufferList *, AudioStreamPacketDescription **, void *))_APSRTPJitterBufferNullDecodeInputCallback, 0);
                  --v25;
                }
                while (v25);
              }
              else
              {
                v27 = 0;
              }
            }
            if (v26)
            {
              if (gLogCategory_APSRTPJitterBuffer <= 30
                && (gLogCategory_APSRTPJitterBuffer != -1 || _LogCategory_Initialize()))
              {
                v28 = *(NSObject **)(a1 + 24);
                v49[0] = v4;
                v49[1] = 0x40000000;
                v49[2] = ___APSRTPJitterBufferDecodePacketSamples_block_invoke;
                v49[3] = &__block_descriptor_tmp_38_972;
                v49[4] = a1;
                v50 = v26;
                dispatch_async(v28, v49);
              }
              v29 = *(_DWORD *)(a1 + 136) * v26;
              v30 = *(_DWORD *)(a1 + 224);
              if (v29 >= v30)
                v31 = v30;
              else
                v31 = v29;
              bzero((void *)(*(_QWORD *)(a1 + 192) + (*(_DWORD *)(a1 + 212) & *(_DWORD *)(a1 + 220))), v31);
              if (gLogCategory_APSRTPJitterBuffer <= 20
                && (gLogCategory_APSRTPJitterBuffer != -1 || _LogCategory_Initialize()))
              {
                v32 = *(NSObject **)(a1 + 24);
                v51 = v4;
                v52 = 0x40000000;
                v53 = ___APSRTPJitterBufferWriteZeros_block_invoke;
                v54 = &__block_descriptor_tmp_48;
                v55 = a1;
                LODWORD(v56) = v26;
                dispatch_async(v32, &v51);
              }
              v33 = *(_DWORD *)(a1 + 136);
              v34 = *(_DWORD *)(a1 + 220);
              *(_DWORD *)(a1 + 232) += 2 * v26;
              *(_DWORD *)(a1 + 220) = v34 + v33 * 2 * v26;
              v27 += v26;
            }
            *(_DWORD *)(a1 + 240) += _APSRTPJitterBufferDecodeOneUnit(a1, (OSStatus (__cdecl *)(AudioConverterRef, UInt32 *, AudioBufferList *, AudioStreamPacketDescription **, void *))_APSRTPJitterBufferDecodeInputCallback, (uint64_t)v6)+ v27;
            if (*(_BYTE *)(a1 + 164))
            {
              if (!*(_BYTE *)(a1 + 176))
              {
                v35 = *(_DWORD *)(a1 + 244) - *(_DWORD *)(a1 + 228);
                if (v35 >= *(_DWORD *)(a1 + 180))
                {
                  if (gLogCategory_APSRTPJitterBuffer <= 30
                    && (gLogCategory_APSRTPJitterBuffer != -1 || _LogCategory_Initialize()))
                  {
                    v36 = *(NSObject **)(a1 + 24);
                    v42[0] = v4;
                    v42[1] = 0x40000000;
                    v42[2] = ___APSRTPJitterBufferWritePacket_block_invoke_3;
                    v42[3] = &__block_descriptor_tmp_34;
                    v42[4] = a1;
                    v43 = v35;
                    dispatch_async(v36, v42);
                  }
                  ++*(_DWORD *)(a1 + 280);
                  *(_BYTE *)(a1 + 176) = 1;
                }
              }
            }
            if (!*(_BYTE *)(a1 + 272))
            {
              if (*(_BYTE *)(a1 + 165))
              {
                v37 = mach_absolute_time();
                *(_QWORD *)(a1 + 168) = v37 - MillisecondsToUpTicks();
              }
              *(_BYTE *)(a1 + 272) = 1;
            }
          }
        }
        CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(a1 + 48), v6);
      }
      else
      {
        APSLogErrorAt(0);
      }
    }
    while (!*(_BYTE *)(a1 + 273));
  }
  if (gLogCategory_APSRTPJitterBuffer <= 30
    && (gLogCategory_APSRTPJitterBuffer != -1 || _LogCategory_Initialize()))
  {
    v3 = *(NSObject **)(a1 + 24);
    v40[0] = MEMORY[0x1E0C809B0];
    v40[1] = 0x40000000;
    v40[2] = ___APSRTPJitterBufferDecodeThreadEntry_block_invoke_2;
    v40[3] = &__block_descriptor_tmp_28;
    v40[4] = a1;
    dispatch_async(v3, v40);
  }
  return 0;
}

uint64_t _APSRTPJitterBufferNullDecodeInputCallback(uint64_t a1, int *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t result;
  int v6;

  if (*a2)
  {
    if (*(_QWORD *)(a5 + 8))
    {
      v6 = 0;
      result = 4294960546;
    }
    else
    {
      *(_QWORD *)(a3 + 16) = &_APSRTPJitterBufferNullDecodeInputCallback_missingData;
      *(_QWORD *)(a3 + 8) = *(unsigned int *)(*(_QWORD *)a5 + 100);
      if (a4)
      {
        *(_QWORD *)(a5 + 16) = 0;
        *(_QWORD *)(a5 + 24) = 0;
        *a4 = a5 + 16;
      }
      result = 0;
      v6 = 1;
      *(_BYTE *)(a5 + 32) = 1;
    }
  }
  else
  {
    result = 0;
    v6 = 1;
  }
  *a2 = v6;
  return result;
}

uint64_t _APSRTPJitterBufferDecodeOneUnit(uint64_t a1, OSStatus (__cdecl *a2)(AudioConverterRef, UInt32 *, AudioBufferList *, AudioStreamPacketDescription **, void *), uint64_t a3)
{
  unsigned int v4;
  uint64_t v5;
  UInt32 v6;
  OSStatus v7;
  OSStatus v8;
  UInt32 v9;
  NSObject *v10;
  _QWORD *v11;
  NSObject *v12;
  UInt32 v13;
  _QWORD v15[5];
  UInt32 v16;
  _QWORD block[5];
  UInt32 v18;
  _QWORD v19[5];
  UInt32 v20;
  OSStatus v21;
  _QWORD inInputDataProcUserData[5];
  AudioBufferList outOutputData;
  UInt32 ioOutputDataPacketSize;

  *(_QWORD *)&outOutputData.mNumberBuffers = 1;
  inInputDataProcUserData[0] = a1;
  inInputDataProcUserData[1] = a3;
  memset(&inInputDataProcUserData[2], 0, 24);
  v4 = *(_DWORD *)(a1 + 88);
  if (v4)
    v5 = *(_DWORD *)(a3 + 1472) / v4;
  else
    v5 = *(unsigned int *)(a1 + 92);
  outOutputData.mBuffers[0].mData = (void *)(*(_QWORD *)(a1 + 192)
                                           + (*(_DWORD *)(a1 + 212) & *(_DWORD *)(a1 + 220)));
  v6 = *(_DWORD *)(a1 + 128) * v5;
  outOutputData.mBuffers[0].mNumberChannels = *(_DWORD *)(a1 + 140);
  outOutputData.mBuffers[0].mDataByteSize = v6;
  ioOutputDataPacketSize = v5;
  v7 = AudioConverterFillComplexBuffer(*(AudioConverterRef *)(a1 + 248), a2, inInputDataProcUserData, &ioOutputDataPacketSize, &outOutputData, 0);
  if (v7 == -6750)
  {
    if (gLogCategory_APSRTPJitterBuffer > 30)
      goto LABEL_20;
    if (gLogCategory_APSRTPJitterBuffer != -1 || _LogCategory_Initialize())
    {
      v12 = *(NSObject **)(a1 + 24);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = ___APSRTPJitterBufferDecodeOneUnit_block_invoke_2;
      block[3] = &__block_descriptor_tmp_44;
      block[4] = a1;
      v18 = ioOutputDataPacketSize;
      dispatch_async(v12, block);
    }
    goto LABEL_15;
  }
  v8 = v7;
  if (!v7)
  {
LABEL_15:
    if (gLogCategory_APSRTPJitterBuffer <= 20
      && (gLogCategory_APSRTPJitterBuffer != -1 || _LogCategory_Initialize()))
    {
      v10 = *(NSObject **)(a1 + 24);
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 0x40000000;
      v15[2] = ___APSRTPJitterBufferDecodeOneUnit_block_invoke_3;
      v15[3] = &__block_descriptor_tmp_46;
      v15[4] = a1;
      v16 = ioOutputDataPacketSize;
      v11 = v15;
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  bzero(outOutputData.mBuffers[0].mData, (*(_DWORD *)(a1 + 128) * v5));
  ioOutputDataPacketSize = v5;
  if (gLogCategory_APSRTPJitterBuffer <= 60)
  {
    v9 = v5;
    if (gLogCategory_APSRTPJitterBuffer != -1)
    {
LABEL_8:
      v10 = *(NSObject **)(a1 + 24);
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 0x40000000;
      v19[2] = ___APSRTPJitterBufferDecodeOneUnit_block_invoke;
      v19[3] = &__block_descriptor_tmp_42;
      v19[4] = a1;
      v20 = v9;
      v21 = v8;
      v11 = v19;
LABEL_18:
      dispatch_async(v10, v11);
      goto LABEL_20;
    }
    if (_LogCategory_Initialize())
    {
      v9 = ioOutputDataPacketSize;
      goto LABEL_8;
    }
  }
LABEL_20:
  v13 = ioOutputDataPacketSize;
  *(_DWORD *)(a1 + 232) += ioOutputDataPacketSize;
  *(_DWORD *)(a1 + 220) += *(_DWORD *)(a1 + 136) * v13;
  return v5;
}

uint64_t _APSRTPJitterBufferDecodeInputCallback(uint64_t a1, _DWORD *a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  if (!*a2)
    return 0;
  v5 = a5[1];
  if (!v5)
    return 4294960546;
  v6 = *(_QWORD *)(v5 + 1472);
  if (!v6)
    return 4294960546;
  *(_QWORD *)(a3 + 16) = v5 + 12;
  v7 = *a5;
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(*a5 + 100);
  *(_DWORD *)(a3 + 12) = v6;
  if (a4)
  {
    a5[2] = 0;
    *((_DWORD *)a5 + 6) = 0;
    *((_DWORD *)a5 + 7) = v6;
    *a4 = a5 + 2;
    v7 = *a5;
  }
  v8 = *(unsigned int *)(v7 + 88);
  v9 = *a2;
  if ((_DWORD)v8)
  {
    v10 = a5[1];
    if (*(_QWORD *)(v10 + 1472) / v8 != v9)
      goto LABEL_14;
LABEL_11:
    result = 0;
    *(_QWORD *)(v10 + 1472) = 0;
    *((_BYTE *)a5 + 32) = 1;
    return result;
  }
  if ((_DWORD)v9 == 1)
  {
    v10 = a5[1];
    goto LABEL_11;
  }
LABEL_14:
  APSLogErrorAt(0);
  return 4294960534;
}

void _APSRTPJitterBufferFinalize(uint64_t a1)
{
  OpaqueAudioConverter *v2;
  void *v3;
  const void *v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;
  const void *v8;

  if (*(_QWORD *)(a1 + 264))
  {
    *(_BYTE *)(a1 + 273) = 1;
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 64));
    pthread_join(*(pthread_t *)(a1 + 256), 0);
    *(_QWORD *)(a1 + 264) = 0;
  }
  dispatch_sync(*(dispatch_queue_t *)(a1 + 24), &__block_literal_global_50);
  if (gLogCategory_APSRTPJitterBuffer <= 50
    && (gLogCategory_APSRTPJitterBuffer != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(OpaqueAudioConverter **)(a1 + 248);
  if (v2)
  {
    AudioConverterDispose(v2);
    *(_QWORD *)(a1 + 248) = 0;
  }
  MirroredRingBufferFree();
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    free(v3);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v4 = *(const void **)(a1 + 56);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 56) = 0;
  }
  v5 = *(const void **)(a1 + 48);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v6 = *(NSObject **)(a1 + 64);
  if (v6)
  {
    dispatch_release(v6);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v7 = *(NSObject **)(a1 + 24);
  if (v7)
  {
    dispatch_release(v7);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v8 = *(const void **)(a1 + 16);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

uint64_t APSRTPJitterBufferGetTypeID()
{
  if (APSRTPJitterBufferGetTypeID_once != -1)
    dispatch_once(&APSRTPJitterBufferGetTypeID_once, &__block_literal_global_964);
  return APSRTPJitterBufferGetTypeID_typeID;
}

const void *APSRTPJitterBufferGetEmptyPacket(uint64_t a1, int *a2)
{
  opaqueCMSimpleQueue *v3;
  const void *result;
  int v5;

  if (!a1 || (v3 = *(opaqueCMSimpleQueue **)(a1 + 48)) == 0)
  {
    APSLogErrorAt(0);
    result = 0;
    v5 = -6718;
    if (!a2)
      return result;
    goto LABEL_9;
  }
  result = CMSimpleQueueDequeue(v3);
  if (result)
    v5 = 0;
  else
    v5 = -6728;
  if (!result)
    result = 0;
  if (a2)
LABEL_9:
    *a2 = v5;
  return result;
}

intptr_t APSRTPJitterBufferDiscardPacket(intptr_t result, _QWORD *a2)
{
  intptr_t v2;

  if (a2)
  {
    v2 = result;
    a2[184] = 0;
    CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(result + 56), a2);
    return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v2 + 64));
  }
  return result;
}

intptr_t APSRTPJitterBufferEnqueuePacket(intptr_t result, uint64_t a2)
{
  intptr_t v2;
  int v3;
  int v4;

  if (a2)
  {
    v2 = result;
    v3 = *(_DWORD *)(a2 + 4);
    if (*(_DWORD *)(result + 80) == 1819304813)
      v4 = v3 + *(_QWORD *)(a2 + 1472) / (unint64_t)*(unsigned int *)(result + 96);
    else
      v4 = *(_DWORD *)(result + 92) + v3;
    *(_DWORD *)(result + 244) = v4;
    CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(result + 56), (const void *)a2);
    return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v2 + 64));
  }
  return result;
}

uint64_t APSRTPJitterBufferRead(uint64_t a1, unsigned int a2, char *__dst, unint64_t a4)
{
  unsigned int v7;
  int v8;
  unint64_t v9;
  NSObject *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  NSObject *v20;
  int v21;
  int v22;
  int v23;
  NSObject *v24;
  NSObject *v25;
  unsigned int v28;
  unsigned int v29;
  size_t v30;
  NSObject *v31;
  unsigned int v32;
  int v33;
  int v34;
  int32_t Count;
  int32_t v36;
  NSObject *v37;
  NSObject *v38;
  _DWORD *v39;
  int v40;
  _QWORD v42[5];
  _QWORD v43[5];
  int v44;
  unsigned int v45;
  int32_t v46;
  _QWORD v47[5];
  int v48;
  unsigned int v49;
  unsigned int v50;
  _QWORD v51[5];
  unsigned int v52;
  _QWORD block[6];
  int v54;
  _QWORD v55[5];
  int v56;
  _QWORD v57[5];
  int v58;

  v7 = *(_DWORD *)(a1 + 232);
  v8 = *(unsigned __int8 *)(a1 + 272);
  v9 = a4 / *(unsigned int *)(a1 + 136);
  if (gLogCategory_APSRTPJitterBuffer <= 10
    && (gLogCategory_APSRTPJitterBuffer != -1 || _LogCategory_Initialize()))
  {
    v11 = *(NSObject **)(a1 + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __APSRTPJitterBufferRead_block_invoke;
    block[3] = &__block_descriptor_tmp_9;
    block[4] = a1;
    block[5] = a4;
    v54 = v9;
    dispatch_async(v11, block);
  }
  if (!*(_BYTE *)(a1 + 164))
  {
    if (v9 + a2 < *(_DWORD *)(a1 + 232) || *(_BYTE *)(a1 + 272) == 0)
    {
      if (*(_BYTE *)(a1 + 274))
      {
        if (gLogCategory_APSRTPJitterBuffer <= 30
          && (gLogCategory_APSRTPJitterBuffer != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        *(_BYTE *)(a1 + 274) = 0;
      }
    }
    else if (!*(_BYTE *)(a1 + 274))
    {
      if (gLogCategory_APSRTPJitterBuffer <= 30
        && (gLogCategory_APSRTPJitterBuffer != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_BYTE *)(a1 + 274) = 1;
      ++*(_DWORD *)(a1 + 276);
    }
  }
  if (!v8)
  {
    v15 = 0;
    *(_DWORD *)(a1 + 228) = a2;
    v16 = v9;
    goto LABEL_78;
  }
  if (!*(_BYTE *)(a1 + 164))
  {
    v17 = *(_DWORD *)(a1 + 228);
    if (v17 <= a2)
    {
      if (v17 >= a2)
      {
        v18 = 0;
      }
      else
      {
        v19 = a2 - v17;
        if (gLogCategory_APSRTPJitterBuffer <= 30
          && (gLogCategory_APSRTPJitterBuffer != -1 || _LogCategory_Initialize()))
        {
          v20 = *(NSObject **)(a1 + 24);
          v51[0] = MEMORY[0x1E0C809B0];
          v51[1] = 0x40000000;
          v51[2] = __APSRTPJitterBufferRead_block_invoke_2;
          v51[3] = &__block_descriptor_tmp_11;
          v51[4] = a1;
          v52 = v19;
          dispatch_async(v20, v51);
        }
        v18 = 0;
        *(_DWORD *)(a1 + 216) += *(_DWORD *)(a1 + 136) * v19;
        v17 = *(_DWORD *)(a1 + 228) + v19;
        *(_DWORD *)(a1 + 228) = v17;
      }
    }
    else if (v17 - a2 >= v9)
    {
      v18 = v9;
    }
    else
    {
      v18 = v17 - a2;
    }
    goto LABEL_57;
  }
  mach_absolute_time();
  if (!*(_BYTE *)(a1 + 165))
    goto LABEL_39;
  v12 = UpTicksToMilliseconds();
  v13 = *(unsigned int *)(a1 + 160);
  if ((int)(1000
           * (*(_DWORD *)(a1 + 236) + *(_DWORD *)(a1 + 244) - *(_DWORD *)(a1 + 228))
           / *(double *)(a1 + 112)) >= (int)v13 + (int)v12
    || v12 >= v13)
  {
    *(_BYTE *)(a1 + 176) = 1;
    *(_BYTE *)(a1 + 165) = 0;
    *(_QWORD *)(a1 + 168) = 0;
    if (gLogCategory_APSRTPJitterBuffer > 30)
      goto LABEL_39;
    if (gLogCategory_APSRTPJitterBuffer != -1 || _LogCategory_Initialize())
      LogPrintF();
  }
  if (!*(_BYTE *)(a1 + 165))
  {
LABEL_39:
    if (*(_BYTE *)(a1 + 176))
    {
      v21 = *(_DWORD *)(a1 + 228);
      v22 = *(_DWORD *)(a1 + 236) + *(_DWORD *)(a1 + 244) - v21;
      if (v22 <= *(_DWORD *)(a1 + 184))
      {
        v23 = 0;
      }
      else
      {
        v23 = v7 - v21;
        if (gLogCategory_APSRTPJitterBuffer <= 30
          && (gLogCategory_APSRTPJitterBuffer != -1 || _LogCategory_Initialize()))
        {
          v24 = *(NSObject **)(a1 + 24);
          v57[0] = MEMORY[0x1E0C809B0];
          v57[1] = 0x40000000;
          v57[2] = ___APSRTPJitterBufferLegacyDiscardExcess_block_invoke;
          v57[3] = &__block_descriptor_tmp_56;
          v57[4] = a1;
          v58 = v22;
          dispatch_async(v24, v57);
        }
        if (v22 - *(_DWORD *)(a1 + 184) < v23)
          v23 = v22 - *(_DWORD *)(a1 + 184);
        *(_DWORD *)(a1 + 216) += v23 * *(_DWORD *)(a1 + 136);
        *(_DWORD *)(a1 + 228) += v23;
        if (gLogCategory_APSRTPJitterBuffer <= 30
          && (gLogCategory_APSRTPJitterBuffer != -1 || _LogCategory_Initialize()))
        {
          v25 = *(NSObject **)(a1 + 24);
          v55[0] = MEMORY[0x1E0C809B0];
          v55[1] = 0x40000000;
          v55[2] = ___APSRTPJitterBufferLegacyDiscardExcess_block_invoke_2;
          v55[3] = &__block_descriptor_tmp_58;
          v55[4] = a1;
          v56 = v23;
          dispatch_async(v25, v55);
        }
      }
      if (v22 - v23 <= *(_DWORD *)(a1 + 184))
        *(_BYTE *)(a1 + 176) = 0;
    }
  }
  v18 = 0;
  v17 = *(_DWORD *)(a1 + 228);
LABEL_57:
  if (v9 > v18 && *(_BYTE *)(a1 + 165) == 0 && v7 >= v17)
  {
    v29 = v7 - v17;
    if (v29 >= v9 - v18)
      v29 = v9 - v18;
    if (v29 >= (*(_DWORD *)(a1 + 220) - *(_DWORD *)(a1 + 216)) / *(_DWORD *)(a1 + 136))
      v28 = (*(_DWORD *)(a1 + 220) - *(_DWORD *)(a1 + 216)) / *(_DWORD *)(a1 + 136);
    else
      v28 = v29;
  }
  else
  {
    v28 = 0;
  }
  v15 = v28 + v18;
  v16 = v9 - (v28 + v18);
  if (v18)
  {
    bzero(__dst, *(_DWORD *)(a1 + 136) * v18);
    __dst += *(_DWORD *)(a1 + 136) * v18;
  }
  if (v28)
  {
    v30 = *(_DWORD *)(a1 + 136) * v28;
    if (gLogCategory_APSRTPJitterBuffer <= 10
      && (gLogCategory_APSRTPJitterBuffer != -1 || _LogCategory_Initialize()))
    {
      v31 = *(NSObject **)(a1 + 24);
      v47[0] = MEMORY[0x1E0C809B0];
      v47[1] = 0x40000000;
      v47[2] = __APSRTPJitterBufferRead_block_invoke_3;
      v47[3] = &__block_descriptor_tmp_13_991;
      v47[4] = a1;
      v48 = v30;
      v49 = v28;
      v50 = v7;
      dispatch_async(v31, v47);
    }
    memcpy(__dst, (const void *)(*(_QWORD *)(a1 + 192) + (*(_DWORD *)(a1 + 212) & *(_DWORD *)(a1 + 216))), v30);
    *(_DWORD *)(a1 + 216) += *(_DWORD *)(a1 + 136) * v28;
    *(_DWORD *)(a1 + 228) += v28;
    __dst += v30;
  }
LABEL_78:
  if (v15 != (_DWORD)v9)
  {
    if (*(_BYTE *)(a1 + 164))
    {
      v32 = *(_DWORD *)(a1 + 136);
      if (*(_BYTE *)(a1 + 165))
      {
LABEL_103:
        bzero(__dst, v32 * v16);
        return 0;
      }
      v34 = *(_DWORD *)(a1 + 216);
      v33 = *(_DWORD *)(a1 + 220);
      Count = CMSimpleQueueGetCount(*(CMSimpleQueueRef *)(a1 + 56));
      if (gLogCategory_APSRTPJitterBuffer <= 30)
      {
        v36 = Count;
        if (gLogCategory_APSRTPJitterBuffer != -1 || _LogCategory_Initialize())
        {
          v43[0] = MEMORY[0x1E0C809B0];
          v43[2] = __APSRTPJitterBufferRead_block_invoke_4;
          v43[3] = &__block_descriptor_tmp_15;
          v37 = *(NSObject **)(a1 + 24);
          v43[1] = 0x40000000;
          v43[4] = a1;
          v44 = v16;
          v45 = (v33 - v34) / v32;
          v46 = v36;
          dispatch_async(v37, v43);
        }
      }
      *(_BYTE *)(a1 + 165) = 1;
      *(_QWORD *)(a1 + 168) = mach_absolute_time();
      if (gLogCategory_APSRTPJitterBuffer <= 40
        && (gLogCategory_APSRTPJitterBuffer != -1 || _LogCategory_Initialize()))
      {
        v38 = *(NSObject **)(a1 + 24);
        v42[0] = MEMORY[0x1E0C809B0];
        v42[1] = 0x40000000;
        v42[2] = __APSRTPJitterBufferRead_block_invoke_5;
        v42[3] = &__block_descriptor_tmp_17;
        v42[4] = a1;
        dispatch_async(v38, v42);
      }
      v39 = (_DWORD *)(a1 + 276);
      v40 = 1;
    }
    else
    {
      if (v8)
      {
        *(_DWORD *)(a1 + 216) += *(_DWORD *)(a1 + 136) * v16;
        if (!*(_BYTE *)(a1 + 274))
        {
          if (gLogCategory_APSRTPJitterBuffer <= 30
            && (gLogCategory_APSRTPJitterBuffer != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          ++*(_DWORD *)(a1 + 276);
          *(_BYTE *)(a1 + 274) = 1;
        }
      }
      v39 = (_DWORD *)(a1 + 228);
      v40 = v16;
    }
    *v39 += v40;
    v32 = *(_DWORD *)(a1 + 136);
    goto LABEL_103;
  }
  return 0;
}

uint64_t APSRTPJitterBufferCopyStatistics(uint64_t a1, CFTypeRef *a2)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v4;

  if (a2)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v4 = Mutable;
      CFDictionarySetInt64();
      CFDictionarySetInt64();
      CFDictionarySetInt64();
      *a2 = CFRetain(v4);
      CFRelease(v4);
      return 0;
    }
    else
    {
      APSLogErrorAt(0);
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
}

void APSTapToRadarInvoke(const void *a1, const void *a2, const void *a3, uint64_t a4, const void *a5, int a6)
{
  const void *v12;
  void *v13;
  __CFDictionary *Mutable;
  CFUserNotificationRef v15;
  const __CFAllocator *v16;
  CFUserNotificationRef v17;
  _QWORD block[9];
  char v19;

  if (!IsAppleInternalBuild())
  {
    if (gLogCategory_APSTapToRadar <= 50
      && (gLogCategory_APSTapToRadar != -1 || _LogCategory_Initialize()))
    {
      goto LABEL_7;
    }
    return;
  }
  if (!(Class)getTapToRadarServiceClass[0]())
  {
    if (gLogCategory_APSTapToRadar <= 90
      && (gLogCategory_APSTapToRadar != -1 || _LogCategory_Initialize()))
    {
      goto LABEL_7;
    }
    return;
  }
  v12 = (const void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ (%@)"), CFSTR("AirPlay has detected an internal error. Please help us make AirPlay better by logging a bug. Thanks."), a4);
  v13 = (void *)objc_msgSend((id)objc_msgSend((Class)getTapToRadarServiceClass[0](), "shared"), "serviceSettings");
  if (!v13)
    goto LABEL_41;
  if (objc_msgSend(v13, "authorizationStatus") != 1)
  {
    if (gLogCategory_APSTapToRadar <= 50
      && (gLogCategory_APSTapToRadar != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (a2)
    {
      if (a6)
      {
        Mutable = 0;
        v15 = 0;
        if (!a1)
          goto LABEL_23;
        goto LABEL_22;
      }
      if (v12)
      {
        v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0C9B800], CFSTR("AirPlay Error"));
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0C9B810], v12);
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0C9B838], CFSTR("Tap-to-Radar"));
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0C9B830], CFSTR("Cancel"));
        v17 = CFUserNotificationCreate(v16, 10.0, 0, 0, Mutable);
        if (!v17)
        {
          APSLogErrorAt(0);
          if (!Mutable)
            return;
          goto LABEL_28;
        }
        v15 = v17;
        if (!a1)
        {
LABEL_23:
          CFRetain(a2);
          if (a3)
            CFRetain(a3);
          if (a5)
            CFRetain(a5);
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 3221225472;
          block[2] = __apsTapToRadarInvokeDetailed_block_invoke;
          block[3] = &__block_descriptor_73_e5_v8__0l;
          v19 = a6;
          block[4] = v15;
          block[5] = a1;
          block[6] = a2;
          block[7] = a3;
          block[8] = a5;
          dispatch_async(MEMORY[0x1E0C80D38], block);
          if (!Mutable)
            return;
LABEL_28:
          CFRelease(Mutable);
          return;
        }
LABEL_22:
        CFRetain(a1);
        goto LABEL_23;
      }
    }
LABEL_41:
    APSLogErrorAt(0);
    return;
  }
  if (gLogCategory_APSTapToRadar <= 50 && (gLogCategory_APSTapToRadar != -1 || _LogCategory_Initialize()))
LABEL_7:
    LogPrintF();
}

uint64_t TapToRadarServiceFunction()
{
  return classTapToRadarService;
}

Class initTapToRadarService()
{
  Class result;

  if (TapToRadarKitLibrary_sOnce != -1)
    dispatch_once(&TapToRadarKitLibrary_sOnce, &__block_literal_global_1038);
  result = objc_getClass("TapToRadarService");
  classTapToRadarService = (uint64_t)result;
  getTapToRadarServiceClass[0] = TapToRadarServiceFunction;
  return result;
}

void __apsTapToRadarInvokeDetailed_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  CFOptionFlags responseFlags;

  responseFlags = 0;
  if (!*(_BYTE *)(a1 + 72))
  {
    responseFlags = 3;
    CFUserNotificationReceiveResponse(*(CFUserNotificationRef *)(a1 + 32), 10.0, &responseFlags);
    if (responseFlags)
    {
      v5 = 0;
LABEL_11:
      v7 = 0;
      goto LABEL_12;
    }
  }
  v2 = *(_QWORD *)(a1 + 40);
  if (apsRadarLogging_radarComponentEntryForAPSRadarComponentID_onceToken != -1)
    dispatch_once(&apsRadarLogging_radarComponentEntryForAPSRadarComponentID_onceToken, &__block_literal_global_47);
  v3 = (void *)objc_msgSend((id)apsRadarLogging_radarComponentEntryForAPSRadarComponentID_entries, "valueForKey:", v2);
  v4 = objc_alloc_init((Class)getRadarDraftClass[0]());
  v5 = v4;
  if (!v4)
  {
    APSLogErrorAt(0);
    goto LABEL_11;
  }
  objc_msgSend(v4, "setTitle:", *(_QWORD *)(a1 + 48));
  v6 = *(_QWORD *)(a1 + 56);
  if (!v6)
    v6 = *(_QWORD *)(a1 + 48);
  objc_msgSend(v5, "setProblemDescription:", v6);
  v7 = (void *)objc_msgSend(objc_alloc(getRadarComponentClass()), "initWithName:version:identifier:", objc_msgSend(v3, "componentName"), objc_msgSend(v3, "componentVersion"), objc_msgSend((id)objc_msgSend(v3, "componentID"), "integerValue"));
  if (v7)
  {
    objc_msgSend(v5, "setComponent:", v7);
    objc_msgSend(v5, "setClassification:", 6);
    objc_msgSend(v5, "setReproducibility:", 6);
    objc_msgSend(v5, "setDeviceIDs:", *(_QWORD *)(a1 + 64));
    objc_msgSend(v5, "setIsUserInitiated:", *(_BYTE *)(a1 + 72) == 0);
    objc_msgSend(v5, "setShouldCapturePerformanceTrace:", 1);
    objc_msgSend((id)objc_msgSend((Class)getTapToRadarServiceClass[0](), "shared"), "createDraft:forProcessNamed:withDisplayReason:completionHandler:", v5, 0, CFSTR("AirPlay has detected an internal error"), &__block_literal_global_44_1035);
  }
  else
  {
    APSLogErrorAt(0);
  }
LABEL_12:

  v8 = *(const void **)(a1 + 64);
  if (v8)
    CFRelease(v8);
  v9 = *(const void **)(a1 + 40);
  if (v9)
    CFRelease(v9);
  v10 = *(const void **)(a1 + 48);
  if (v10)
    CFRelease(v10);
  v11 = *(const void **)(a1 + 56);
  if (v11)
    CFRelease(v11);
  v12 = *(const void **)(a1 + 32);
  if (v12)
    CFRelease(v12);
}

uint64_t RadarDraftFunction()
{
  return classRadarDraft;
}

Class initRadarDraft()
{
  Class result;

  if (TapToRadarKitLibrary_sOnce != -1)
    dispatch_once(&TapToRadarKitLibrary_sOnce, &__block_literal_global_1038);
  result = objc_getClass("RadarDraft");
  classRadarDraft = (uint64_t)result;
  getRadarDraftClass[0] = RadarDraftFunction;
  return result;
}

uint64_t RadarComponentFunction()
{
  return classRadarComponent;
}

Class initRadarComponent()
{
  Class result;

  if (TapToRadarKitLibrary_sOnce != -1)
    dispatch_once(&TapToRadarKitLibrary_sOnce, &__block_literal_global_1038);
  result = objc_getClass("RadarComponent");
  classRadarComponent = (uint64_t)result;
  getRadarComponentClass = RadarComponentFunction;
  return result;
}

void __apsTapToRadarInvokeDetailed_block_invoke_2(uint64_t a1, void *a2)
{
  if (a2
    && gLogCategory_APSTapToRadar <= 90
    && (gLogCategory_APSTapToRadar != -1 || _LogCategory_Initialize()))
  {
    objc_msgSend(a2, "localizedDescription");
    LogPrintF();
  }
}

uint64_t __apsRadarLogging_radarComponentEntryForAPSRadarComponentID_block_invoke()
{
  APSRadarComponentEntry *v0;
  APSRadarComponentEntry *v1;
  APSRadarComponentEntry *v2;
  APSRadarComponentEntry *v3;
  APSRadarComponentEntry *v4;
  APSRadarComponentEntry *v5;

  apsRadarLogging_radarComponentEntryForAPSRadarComponentID_entries = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99E08]);
  v0 = +[APSRadarComponentEntry componentEntryWithName:componentVersion:componentID:](APSRadarComponentEntry, "componentEntryWithName:componentVersion:componentID:", CFSTR("AirPlay (New Bugs)"), CFSTR("All"), CFSTR("629193"));
  objc_msgSend((id)apsRadarLogging_radarComponentEntryForAPSRadarComponentID_entries, "setValue:forKey:", v0, CFSTR("AirPlay (New Bugs)"));
  v1 = +[APSRadarComponentEntry componentEntryWithName:componentVersion:componentID:](APSRadarComponentEntry, "componentEntryWithName:componentVersion:componentID:", CFSTR("AirPlay Core"), CFSTR("All"), CFSTR("629196"));
  objc_msgSend((id)apsRadarLogging_radarComponentEntryForAPSRadarComponentID_entries, "setValue:forKey:", v1, CFSTR("AirPlay Core"));
  v2 = +[APSRadarComponentEntry componentEntryWithName:componentVersion:componentID:](APSRadarComponentEntry, "componentEntryWithName:componentVersion:componentID:", CFSTR("AirPlay Audio"), CFSTR("All"), CFSTR("855786"));
  objc_msgSend((id)apsRadarLogging_radarComponentEntryForAPSRadarComponentID_entries, "setValue:forKey:", v2, CFSTR("AirPlay Audio"));
  v3 = +[APSRadarComponentEntry componentEntryWithName:componentVersion:componentID:](APSRadarComponentEntry, "componentEntryWithName:componentVersion:componentID:", CFSTR("AirPlay Performance"), CFSTR("All"), CFSTR("953616"));
  objc_msgSend((id)apsRadarLogging_radarComponentEntryForAPSRadarComponentID_entries, "setValue:forKey:", v3, CFSTR("AirPlay Performance"));
  v4 = +[APSRadarComponentEntry componentEntryWithName:componentVersion:componentID:](APSRadarComponentEntry, "componentEntryWithName:componentVersion:componentID:", CFSTR("CoreMedia AP Music"), CFSTR("All"), CFSTR("629211"));
  objc_msgSend((id)apsRadarLogging_radarComponentEntryForAPSRadarComponentID_entries, "setValue:forKey:", v4, CFSTR("CoreMedia AP Music"));
  v5 = +[APSRadarComponentEntry componentEntryWithName:componentVersion:componentID:](APSRadarComponentEntry, "componentEntryWithName:componentVersion:componentID:", CFSTR("CoreMedia AP Video"), CFSTR("All"), CFSTR("629212"));
  return objc_msgSend((id)apsRadarLogging_radarComponentEntryForAPSRadarComponentID_entries, "setValue:forKey:", v5, CFSTR("CoreMedia AP Video"));
}

uint64_t APSTimedInfoManagerGetTypeID()
{
  if (gAPSTimedInfoManagerInitOnce != -1)
    dispatch_once_f(&gAPSTimedInfoManagerInitOnce, 0, (dispatch_function_t)_APSTimedInfoManagerGetTypeID);
  return gAPSTimedInfoManagerTypeID;
}

uint64_t _APSTimedInfoManagerGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSTimedInfoManagerTypeID = result;
  return result;
}

void _APSTimedInfoManagerFinalize(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  NSObject *v4;

  if (gLogCategory_APSTimedInfoManager <= 30
    && (gLogCategory_APSTimedInfoManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  timedInfoManager_removeAllElemFromCurrentElem(*(_QWORD **)(a1 + 80), *(_QWORD **)(a1 + 80));
  FigSimpleMutexDestroy();
  CMTimebaseRemoveTimerDispatchSource(*(CMTimebaseRef *)(a1 + 40), *(dispatch_source_t *)(a1 + 16));
  v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 16));
    dispatch_release(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 40) = 0;
  }
  v4 = *(NSObject **)(a1 + 24);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(a1 + 24) = 0;
  }
}

_QWORD *timedInfoManager_removeAllElemFromCurrentElem(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  const void *v8;

  if (a1)
  {
    if (a1 == a2)
    {
LABEL_7:
      if (a2)
      {
        v6 = a2;
        do
        {
          v7 = (_QWORD *)*v6;
          v8 = (const void *)v6[5];
          if (v8)
            CFRelease(v8);
          free(v6);
          v6 = v7;
        }
        while (v7);
      }
    }
    else
    {
      v4 = a1;
      while (1)
      {
        v5 = v4;
        v4 = (_QWORD *)*v4;
        if (!v4)
          break;
        if (v4 == a2)
        {
          *v5 = 0;
          goto LABEL_7;
        }
      }
    }
  }
  if (a1 == a2)
    return 0;
  else
    return a1;
}

uint64_t APSTimedInfoManagerCreate(CFTypeRef *a1)
{
  uint64_t Instance;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a1)
  {
    if (gAPSTimedInfoManagerInitOnce != -1)
      dispatch_once_f(&gAPSTimedInfoManagerInitOnce, 0, (dispatch_function_t)_APSTimedInfoManagerGetTypeID);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v3 = Instance;
      *(_QWORD *)(Instance + 80) = 0;
      *(_OWORD *)(Instance + 48) = 0u;
      *(_OWORD *)(Instance + 64) = 0u;
      *(_OWORD *)(Instance + 16) = 0u;
      *(_OWORD *)(Instance + 32) = 0u;
      v4 = FigDispatchQueueCreateWithPriority();
      *(_QWORD *)(v3 + 24) = v4;
      if (v4 && (v5 = FigSimpleMutexCreate(), (*(_QWORD *)(v3 + 32) = v5) != 0))
      {
        v6 = MEMORY[0x1E0CA2E18];
        *(_OWORD *)(v3 + 48) = *MEMORY[0x1E0CA2E18];
        *(_QWORD *)(v3 + 64) = *(_QWORD *)(v6 + 16);
        *(_WORD *)(v3 + 72) = 0;
        if (gLogCategory_APSTimedInfoManager <= 30
          && (gLogCategory_APSTimedInfoManager != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v7 = 0;
        *a1 = CFRetain((CFTypeRef)v3);
      }
      else
      {
        APSLogErrorAt(0);
        v7 = 4294960568;
      }
      CFRelease((CFTypeRef)v3);
    }
    else
    {
      APSLogErrorAt(0);
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  return v7;
}

uint64_t APSTimedInfoManagerResume(uint64_t a1, const void *a2)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  NSObject *v7;
  uint64_t v8;
  OpaqueCMTimebase *v9;
  NSObject *v10;
  CMTime v12;

  if (!a1 || !a2)
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 32));
  v4 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (*(_BYTE *)(a1 + 72))
  {
    APSLogErrorAt(0);
    v8 = 4294960587;
    APSSignalErrorAt(4294960587);
    goto LABEL_12;
  }
  if (*(_QWORD *)(a1 + 16))
  {
    APSLogErrorAt(0);
  }
  else
  {
    v5 = (void *)v4;
    v6 = *(const void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = a2;
    CFRetain(a2);
    if (v6)
      CFRelease(v6);
    v7 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 1uLL, *(dispatch_queue_t *)(a1 + 24));
    *(_QWORD *)(a1 + 16) = v7;
    if (!v7)
    {
      APSLogErrorAt(0);
      v8 = 4294960568;
      goto LABEL_12;
    }
    dispatch_set_context(v7, v5);
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 16), (dispatch_function_t)timedInfoManager_fireNotification);
    dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(a1 + 16), (dispatch_function_t)FigCFRelease);
    dispatch_resume(*(dispatch_object_t *)(a1 + 16));
    CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(a1 + 40), *(dispatch_source_t *)(a1 + 16));
    *(_BYTE *)(a1 + 72) = 1;
    if (*(_BYTE *)(a1 + 73) && (*(_BYTE *)(a1 + 60) & 1) != 0)
    {
      v9 = *(OpaqueCMTimebase **)(a1 + 40);
      v10 = *(NSObject **)(a1 + 16);
      v12 = *(CMTime *)(a1 + 48);
      CMTimebaseSetTimerDispatchSourceNextFireTime(v9, v10, &v12, 1u);
      v8 = 0;
      *(_BYTE *)(a1 + 73) = 0;
      goto LABEL_12;
    }
  }
  v8 = 0;
LABEL_12:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 32));
  return v8;
}

void timedInfoManager_fireNotification()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  CMTimeEpoch v6;
  OpaqueCMTimebase *v7;
  NSObject *v8;
  uint64_t v9;
  CMTime v10;
  CMTime time1;

  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = v0;
    pthread_mutex_lock(*(pthread_mutex_t **)(v0 + 32));
    v2 = (_OWORD *)(v1 + 48);
    v3 = v1 + 80;
    while (1)
    {
      v3 = *(_QWORD *)v3;
      if (!v3)
        break;
      time1 = *(CMTime *)(v3 + 16);
      *(_OWORD *)&v10.value = *v2;
      v10.epoch = *(_QWORD *)(v1 + 64);
      if (CMTimeCompare(&time1, &v10) <= 0)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          v5 = *(_OWORD *)(v4 + 16);
          v6 = *(_QWORD *)(v4 + 32);
          *(_QWORD *)(v1 + 64) = v6;
          *v2 = v5;
          v7 = *(OpaqueCMTimebase **)(v1 + 40);
          v8 = *(NSObject **)(v1 + 16);
          *(_OWORD *)&time1.value = *v2;
          time1.epoch = v6;
          CMTimebaseSetTimerDispatchSourceNextFireTime(v7, v8, &time1, 1u);
        }
        else
        {
          v9 = MEMORY[0x1E0CA2E18];
          *v2 = *MEMORY[0x1E0CA2E18];
          *(_QWORD *)(v1 + 64) = *(_QWORD *)(v9 + 16);
        }
        *(_QWORD *)(v1 + 80) = timedInfoManager_removeAllElemFromCurrentElem(*(_QWORD **)(v1 + 80), (_QWORD *)v3);
        break;
      }
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 32));
    CFRelease((CFTypeRef)v1);
  }
  else
  {
    APSLogErrorAt(0);
  }
}

void FigCFRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t APSTimedInfoManagerSuspend(uint64_t a1, int a2)
{
  uint64_t v4;
  NSObject *v5;
  const void *v6;

  if (a1)
  {
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 32));
    if (*(_BYTE *)(a1 + 72))
    {
      CMTimebaseRemoveTimerDispatchSource(*(CMTimebaseRef *)(a1 + 40), *(dispatch_source_t *)(a1 + 16));
      *(_BYTE *)(a1 + 72) = 0;
      if (a2)
      {
        v4 = MEMORY[0x1E0CA2E18];
        *(_OWORD *)(a1 + 48) = *MEMORY[0x1E0CA2E18];
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(v4 + 16);
        *(_QWORD *)(a1 + 80) = timedInfoManager_removeAllElemFromCurrentElem(*(_QWORD **)(a1 + 80), *(_QWORD **)(a1 + 80));
      }
      else
      {
        *(_BYTE *)(a1 + 73) = 1;
      }
      v5 = *(NSObject **)(a1 + 16);
      if (v5)
      {
        dispatch_source_cancel(*(dispatch_source_t *)(a1 + 16));
        dispatch_release(v5);
        *(_QWORD *)(a1 + 16) = 0;
      }
      v6 = *(const void **)(a1 + 40);
      if (v6)
      {
        CFRelease(v6);
        *(_QWORD *)(a1 + 40) = 0;
      }
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 32));
    return 0;
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
}

uint64_t APSTimedInfoManagerAddTimedInfo(uint64_t a1, __int128 *a2, const void *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int32_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _OWORD *v15;
  OpaqueCMTimebase *v16;
  NSObject *v17;
  uint64_t v18;
  __int128 v19;
  CMTime v21;
  CMTime time1;

  if (!a1)
    goto LABEL_33;
  if ((*((_BYTE *)a2 + 12) & 1) == 0)
  {
    APSLogErrorAt(0);
    v18 = 4294960591;
    APSSignalErrorAt(4294960591);
    return v18;
  }
  if (!a3)
  {
LABEL_33:
    APSLogErrorAt(0);
    return 4294960591;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 32));
  v6 = malloc_type_calloc(1uLL, 0x30uLL, 0x106004041D4C332uLL);
  if (v6)
  {
    v7 = v6;
    v8 = *a2;
    v6[4] = *((_QWORD *)a2 + 2);
    *((_OWORD *)v6 + 1) = v8;
    v6[5] = CFRetain(a3);
    v9 = *(_QWORD *)(a1 + 80);
    if (v9)
    {
      time1 = *(CMTime *)(v9 + 16);
      v21 = *(CMTime *)(v7 + 2);
      if (CMTimeCompare(&time1, &v21) < 0)
      {
        *v7 = v9;
        v7[1] = 0;
        *(_QWORD *)(v9 + 8) = v7;
      }
      else
      {
        v10 = *(_QWORD **)v9;
        if (*(_QWORD *)v9)
        {
          v11 = (_QWORD *)v9;
          while (1)
          {
            time1 = *(CMTime *)(v10 + 2);
            v21 = *(CMTime *)(v7 + 2);
            v12 = CMTimeCompare(&time1, &v21);
            v13 = (_QWORD *)*v11;
            if (v12 < 0)
              break;
            v10 = (_QWORD *)*v13;
            v11 = (_QWORD *)*v11;
            if (!*v13)
              goto LABEL_16;
          }
          v10 = (_QWORD *)*v11;
          v13 = v11;
        }
        else
        {
          v13 = (_QWORD *)v9;
        }
LABEL_16:
        *v7 = v10;
        *v13 = v7;
        v7[1] = v13;
        if (*v7)
          *(_QWORD *)(*v7 + 8) = v7;
        v7 = 0;
      }
    }
    else
    {
      *v7 = 0;
      v7[1] = 0;
    }
    if (v7)
      v14 = v7;
    else
      v14 = (_QWORD *)v9;
    *(_QWORD *)(a1 + 80) = v14;
    v15 = (_OWORD *)(a1 + 48);
    if ((*(_BYTE *)(a1 + 60) & 1) != 0
      && (*(_OWORD *)&time1.value = *v15,
          time1.epoch = *(_QWORD *)(a1 + 64),
          v21 = *(CMTime *)a2,
          CMTimeCompare(&time1, &v21) < 0))
    {
      v18 = 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 72))
      {
        v16 = *(OpaqueCMTimebase **)(a1 + 40);
        v17 = *(NSObject **)(a1 + 16);
        time1 = *(CMTime *)a2;
        CMTimebaseSetTimerDispatchSourceNextFireTime(v16, v17, &time1, 1u);
      }
      else
      {
        *(_BYTE *)(a1 + 73) = 1;
      }
      v18 = 0;
      v19 = *a2;
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 2);
      *v15 = v19;
    }
  }
  else
  {
    APSLogErrorAt(0);
    v18 = 4294960591;
    APSSignalErrorAt(4294960591);
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 32));
  return v18;
}

uint64_t APSTimedInfoManagerFlush(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  if (a1)
  {
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 32));
    CMTimebaseRemoveTimerDispatchSource(*(CMTimebaseRef *)(a1 + 40), *(dispatch_source_t *)(a1 + 16));
    v2 = timedInfoManager_removeAllElemFromCurrentElem(*(_QWORD **)(a1 + 80), *(_QWORD **)(a1 + 80));
    v3 = MEMORY[0x1E0CA2E18];
    *(_QWORD *)(a1 + 80) = v2;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v3;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(v3 + 16);
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 32));
    return 0;
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
}

uint64_t APSTimedInfoManagerFlushWithinTimeRange(uint64_t a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  int v6;
  char *v7;
  char **v8;
  char *v9;
  const void *v10;
  CMTime v12;
  CMTimeRange range;

  if (a1)
  {
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 32));
    v4 = *(char **)(a1 + 80);
    if (v4)
    {
      while (1)
      {
        v5 = a2[1];
        *(_OWORD *)&range.start.value = *a2;
        *(_OWORD *)&range.start.epoch = v5;
        *(_OWORD *)&range.duration.timescale = a2[2];
        v12 = *(CMTime *)(v4 + 16);
        v6 = CMTimeRangeContainsTime(&range, &v12);
        v7 = *(char **)v4;
        if (v6)
          break;
LABEL_12:
        v4 = v7;
        if (!v7)
          goto LABEL_16;
      }
      v8 = (char **)*((_QWORD *)v4 + 1);
      if (v8)
      {
        *v8 = v7;
        v9 = *(char **)v4;
        if (!*(_QWORD *)v4)
        {
LABEL_7:
          *(_OWORD *)&range.start.value = *((_OWORD *)v4 + 1);
          range.start.epoch = *((_QWORD *)v4 + 4);
          v12 = *(CMTime *)(a1 + 48);
          if (!CMTimeCompare(&range.start, &v12))
            CMTimebaseRemoveTimerDispatchSource(*(CMTimebaseRef *)(a1 + 40), *(dispatch_source_t *)(a1 + 16));
          v10 = (const void *)*((_QWORD *)v4 + 5);
          if (v10)
            CFRelease(v10);
          free(v4);
          goto LABEL_12;
        }
      }
      else
      {
        *(_QWORD *)(a1 + 80) = v7;
        v9 = v7;
        if (!v7)
          goto LABEL_7;
      }
      *((_QWORD *)v9 + 1) = v8;
      goto LABEL_7;
    }
LABEL_16:
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 32));
    return 0;
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
}

uint64_t APSTimedInfoManagerGetTimebase(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t APSWrapperGetTypeID()
{
  if (gAPSWrapperInitOnce != -1)
    dispatch_once_f(&gAPSWrapperInitOnce, 0, (dispatch_function_t)_APSWrapperGetTypeID);
  return gAPSWrapperTypeID;
}

uint64_t _APSWrapperGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSWrapperTypeID = result;
  return result;
}

uint64_t _APSWrapperFinalize(uint64_t result)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(result + 24);
  if (v1)
    return v1(*(_QWORD *)(result + 16));
  return result;
}

uint64_t APSWrapperCreate(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  _QWORD *Instance;
  const void *v7;

  if (!a3)
    return 4294960591;
  if (gAPSWrapperInitOnce != -1)
    dispatch_once_f(&gAPSWrapperInitOnce, 0, (dispatch_function_t)_APSWrapperGetTypeID);
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  if (!Instance)
    return 4294960568;
  v7 = Instance;
  Instance[2] = a1;
  Instance[3] = a2;
  *a3 = CFRetain(Instance);
  CFRelease(v7);
  return 0;
}

uint64_t APSWrapperGetValue(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 16);
  return result;
}

uint64_t APSStatsHistogramGetTypeID()
{
  if (APSStatsHistogramGetTypeID_once != -1)
    dispatch_once(&APSStatsHistogramGetTypeID_once, &__block_literal_global_1111);
  return APSStatsHistogramGetTypeID_typeID;
}

void hist_finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v3 = *(const void **)(a1 + 32);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 32) = 0;
  }
  if (*(_QWORD *)(a1 + 16))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(a1 + 16) = 0;
  }
  free(*(void **)(a1 + 112));
  *(_QWORD *)(a1 + 112) = 0;
}

__CFString *hist_copyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  __CFDictionary *v3;
  const __CFDictionary *v4;
  const void *Value;
  const void *v6;
  const void *v7;
  const void *v8;
  uint64_t v9;
  const __CFArray *v10;
  const __CFArray *v11;
  CFIndex Count;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __CFDictionary *cf;
  char __str[32];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v3 = APSStatsHistogramCopyAsDictionary(a1);
  if (v3)
  {
    v4 = v3;
    cf = v3;
    if (CFDictionaryGetCount(v3) < 1)
      goto LABEL_12;
    Value = CFDictionaryGetValue(v4, CFSTR("Name"));
    v6 = CFDictionaryGetValue(v4, CFSTR("UnitName"));
    v7 = CFDictionaryGetValue(v4, CFSTR("BucketCount"));
    v8 = CFDictionaryGetValue(v4, CFSTR("SampleCount"));
    CFDictionaryGetDouble();
    CFStringAppendFormat(Mutable, 0, CFSTR("%@ (%@)\nBucket count: %@\nTotal samples: %@\nDuration: %.1f sec\n"), Value, v6, v7, v8, v9);
    v10 = (const __CFArray *)CFDictionaryGetValue(v4, CFSTR("Intervals"));
    v11 = (const __CFArray *)CFDictionaryGetValue(v4, CFSTR("Values"));
    Count = CFArrayGetCount(v11);
    if (CFArrayGetCount(v10) == Count + 1)
    {
      if (Count >= 1)
      {
        v13 = 0;
        do
        {
          FigCFArrayGetFloatAtIndex();
          v14 = v13 + 1;
          FigCFArrayGetFloatAtIndex();
          FigCFArrayGetFloatAtIndex();
          snprintf(__str, 0x20uLL, "%.1f - %.1f", 0.0, 0.0);
          CFStringAppendFormat(Mutable, 0, CFSTR("%16s %5.1f%%  "), __str, 0.0 * 100.0);
          v15 = (int)(0.0 * 50.0 + 0.5);
          if (v15 >= 1)
          {
            do
            {
              CFStringAppend(Mutable, CFSTR("*"));
              --v15;
            }
            while (v15);
          }
          CFStringAppend(Mutable, CFSTR("\n"));
          v13 = v14;
        }
        while (v14 != Count);
      }
    }
    else
    {
LABEL_12:
      APSLogErrorAt(0);
    }
    CFRelease(cf);
  }
  else
  {
    APSLogErrorAt(0);
  }
  return Mutable;
}

__CFDictionary *APSStatsHistogramCopyAsDictionary(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFDictionary *Mutable;
  __CFDictionary *v4;
  const CFArrayCallBacks *v5;
  CFMutableArrayRef v6;
  CFMutableArrayRef v7;
  unsigned int v8;
  unint64_t v9;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = Mutable;
  if (a1)
  {
    CFDictionarySetValue(Mutable, CFSTR("Name"), *(const void **)(a1 + 24));
    CFDictionarySetValue(v4, CFSTR("UnitName"), *(const void **)(a1 + 32));
    FigCFDictionarySetInt32();
    v5 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    v6 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E0C9B378]);
    v7 = CFArrayCreateMutable(v2, 0, v5);
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
    FigCFDictionarySetInt32();
    UpTicksToSecondsF();
    FigCFDictionarySetFloat();
    FigCFArrayAppendFloat();
    if (*(_DWORD *)(a1 + 120) >= 2u)
    {
      v8 = 1;
      do
      {
        FigCFArrayAppendFloat();
        ++v8;
      }
      while (v8 < *(_DWORD *)(a1 + 120));
    }
    FigCFArrayAppendFloat();
    CFDictionarySetValue(v4, CFSTR("Intervals"), v6);
    if (*(_DWORD *)(a1 + 120))
    {
      v9 = 0;
      do
      {
        FigCFArrayAppendFloat();
        ++v9;
      }
      while (v9 < *(unsigned int *)(a1 + 120));
    }
    CFDictionarySetValue(v4, CFSTR("Values"), v7);
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
    if (v6)
      CFRelease(v6);
    if (v7)
      CFRelease(v7);
  }
  return v4;
}

uint64_t APSStatsHistogramCreate(const __CFDictionary *a1)
{
  uint64_t Instance;
  uint64_t v3;
  const void *Value;
  const void *v5;
  unsigned int v6;
  size_t v7;
  double v8;
  double v9;
  double v10;

  if (APSStatsHistogramGetTypeID_once != -1)
    dispatch_once(&APSStatsHistogramGetTypeID_once, &__block_literal_global_1111);
  Instance = _CFRuntimeCreateInstance();
  v3 = Instance;
  if (Instance)
  {
    *(_QWORD *)(Instance + 128) = 0;
    *(_OWORD *)(Instance + 96) = 0u;
    *(_OWORD *)(Instance + 112) = 0u;
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 80) = 0u;
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_QWORD *)(Instance + 16) = FigSimpleMutexCreate();
    *(_QWORD *)(v3 + 48) = 0x41DFFFFFFFC00000;
    *(_DWORD *)(v3 + 120) = 10;
    if (a1)
    {
      Value = CFDictionaryGetValue(a1, CFSTR("Name"));
      if (Value)
        Value = CFRetain(Value);
      *(_QWORD *)(v3 + 24) = Value;
      v5 = CFDictionaryGetValue(a1, CFSTR("UnitName"));
      if (v5)
        v5 = CFRetain(v5);
      *(_QWORD *)(v3 + 32) = v5;
      FigCFDictionaryGetInt32IfPresent();
      FigCFDictionaryGetDoubleIfPresent();
      FigCFDictionaryGetDoubleIfPresent();
      FigCFDictionaryGetDoubleIfPresent();
      FigCFDictionaryGetBooleanIfPresent();
    }
    if (!*(_QWORD *)(v3 + 24))
      *(_QWORD *)(v3 + 24) = CFRetain(CFSTR("Histogram"));
    if (!*(_QWORD *)(v3 + 32))
      *(_QWORD *)(v3 + 32) = CFRetain(CFSTR(" "));
    v6 = *(_DWORD *)(v3 + 120);
    if (v6 <= 1)
      v6 = 1;
    if (v6 >= 0x64)
      v7 = 100;
    else
      v7 = v6;
    *(_DWORD *)(v3 + 120) = v7;
    *(_QWORD *)(v3 + 112) = malloc_type_calloc(v7, 4uLL, 0x100004052888210uLL);
    *(_QWORD *)(v3 + 88) = SecondsToUpTicksF();
    v8 = *(double *)(v3 + 40);
    v9 = *(double *)(v3 + 48);
    *(double *)(v3 + 56) = v8;
    *(double *)(v3 + 64) = v9;
    v10 = v9 - v8;
    LODWORD(v9) = *(_DWORD *)(v3 + 120);
    *(double *)(v3 + 72) = v10 / (double)*(unint64_t *)&v9;
  }
  else
  {
    APSLogErrorAt(0);
  }
  return v3;
}

uint64_t APSStatsHistogramCreateFromSerializedDictionary(const __CFDictionary *a1, uint64_t *a2)
{
  uint64_t Instance;
  uint64_t v5;
  uint64_t v6;
  const void *Value;
  CFTypeRef v8;
  const void *v9;
  CFTypeRef v10;
  int Int64Ranged;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v23;

  v23 = 0;
  if (!a1)
  {
    APSLogErrorAt(0);
    v23 = -6705;
    if (gLogCategory_APStatsHistogram > 90
      || gLogCategory_APStatsHistogram == -1 && !_LogCategory_Initialize())
    {
      return v23;
    }
LABEL_35:
    LogPrintF();
    return v23;
  }
  if (!a2)
  {
    APSLogErrorAt(0);
    v23 = -6705;
    if (gLogCategory_APStatsHistogram > 90
      || gLogCategory_APStatsHistogram == -1 && !_LogCategory_Initialize())
    {
      return v23;
    }
    goto LABEL_35;
  }
  if (APSStatsHistogramGetTypeID_once != -1)
    dispatch_once(&APSStatsHistogramGetTypeID_once, &__block_literal_global_1111);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    APSLogErrorAt(0);
    v23 = -6728;
    if (gLogCategory_APStatsHistogram > 90
      || gLogCategory_APStatsHistogram == -1 && !_LogCategory_Initialize())
    {
      return v23;
    }
    goto LABEL_35;
  }
  v5 = Instance;
  *(_QWORD *)(Instance + 128) = 0;
  *(_OWORD *)(Instance + 96) = 0u;
  *(_OWORD *)(Instance + 112) = 0u;
  *(_OWORD *)(Instance + 64) = 0u;
  *(_OWORD *)(Instance + 80) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  *(_OWORD *)(Instance + 48) = 0u;
  *(_OWORD *)(Instance + 16) = 0u;
  v6 = FigSimpleMutexCreate();
  *(_QWORD *)(v5 + 16) = v6;
  if (!v6)
  {
    APSLogErrorAt(0);
    v23 = -6728;
    if (gLogCategory_APStatsHistogram > 90
      || gLogCategory_APStatsHistogram == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_25;
    }
LABEL_23:
    LogPrintF();
LABEL_25:
    CFRelease((CFTypeRef)v5);
    return v23;
  }
  Value = CFDictionaryGetValue(a1, CFSTR("Name"));
  if (!Value)
  {
    *(_QWORD *)(v5 + 24) = 0;
    goto LABEL_21;
  }
  v8 = CFRetain(Value);
  *(_QWORD *)(v5 + 24) = v8;
  if (!v8)
    goto LABEL_21;
  v9 = CFDictionaryGetValue(a1, CFSTR("UnitName"));
  if (!v9)
  {
    *(_QWORD *)(v5 + 32) = 0;
    goto LABEL_21;
  }
  v10 = CFRetain(v9);
  *(_QWORD *)(v5 + 32) = v10;
  if (!v10)
  {
LABEL_21:
    APSLogErrorAt(0);
    v23 = -6727;
    if (gLogCategory_APStatsHistogram > 90
      || gLogCategory_APStatsHistogram == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  Int64Ranged = CFDictionaryGetInt64Ranged();
  *(_DWORD *)(v5 + 120) = Int64Ranged;
  if (!Int64Ranged)
  {
    APSLogErrorAt(0);
    v23 = -6709;
    if (gLogCategory_APStatsHistogram > 90
      || gLogCategory_APStatsHistogram == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  CFDictionaryGetDouble();
  *(_QWORD *)(v5 + 88) = SecondsToUpTicksF();
  CFDictionaryGetDouble();
  *(_QWORD *)(v5 + 40) = v12;
  CFDictionaryGetDouble();
  *(_QWORD *)(v5 + 48) = v13;
  *(_BYTE *)(v5 + 128) = CFDictionaryGetInt64() != 0;
  CFDictionaryGetDouble();
  *(_QWORD *)(v5 + 72) = v14;
  *(_DWORD *)(v5 + 124) = CFDictionaryGetInt64Ranged();
  *(_QWORD *)(v5 + 104) = mach_absolute_time();
  CFDictionaryGetDouble();
  v15 = *(_QWORD *)(v5 + 104);
  *(_QWORD *)(v5 + 96) = v15 - SecondsToUpTicksF();
  CFDictionaryGetDouble();
  *(_QWORD *)(v5 + 56) = v16;
  CFDictionaryGetDouble();
  *(_QWORD *)(v5 + 64) = v17;
  CFDictionaryGetDouble();
  *(_QWORD *)(v5 + 80) = v18;
  if (!CFDictionaryGetValue(a1, CFSTR("Samples")))
    goto LABEL_21;
  v19 = malloc_type_calloc(*(unsigned int *)(v5 + 120), 4uLL, 0x100004052888210uLL);
  *(_QWORD *)(v5 + 112) = v19;
  if (!v19)
  {
    APSLogErrorAt(0);
    v23 = -6728;
    if (gLogCategory_APStatsHistogram > 90
      || gLogCategory_APStatsHistogram == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  if (*(_DWORD *)(v5 + 120))
  {
    v20 = 0;
    v21 = 0;
    do
    {
      FigCFArrayGetInt32AtIndex();
      ++v21;
      v20 += 4;
    }
    while (v21 < *(unsigned int *)(v5 + 120));
  }
  *a2 = v5;
  return v23;
}

uint64_t APSStatsHistogramAddValue(uint64_t a1, double a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int v11;
  double v12;
  double v13;

  result = mach_absolute_time();
  if (a1 && *(double *)(a1 + 72) > 0.0)
  {
    v5 = result;
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
    v6 = *(_QWORD *)(a1 + 104);
    if (v5 - v6 > *(_QWORD *)(a1 + 88))
    {
      if (!*(_BYTE *)(a1 + 128))
      {
LABEL_7:
        v9 = *(double *)(a1 + 40);
        v10 = *(double *)(a1 + 72);
        if (a2 >= v9 + v10)
        {
          if (a2 >= *(double *)(a1 + 48) - v10)
          {
            v11 = *(_DWORD *)(a1 + 120) - 1;
            v13 = *(double *)(a1 + 64);
            if (v13 <= a2)
              v13 = a2;
            *(double *)(a1 + 64) = v13;
          }
          else
          {
            v11 = (int)((a2 - v9) / v10);
          }
        }
        else
        {
          v11 = 0;
          v12 = *(double *)(a1 + 56);
          if (v12 >= a2)
            v12 = a2;
          *(double *)(a1 + 56) = v12;
        }
        ++*(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * v11);
        ++*(_DWORD *)(a1 + 124);
        if (!*(_QWORD *)(a1 + 96))
          *(_QWORD *)(a1 + 96) = v5;
        *(_QWORD *)(a1 + 104) = v5;
        return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
      }
      if (v6)
      {
        v7 = a2 - *(double *)(a1 + 80);
        UpTicksToSecondsF();
        *(double *)(a1 + 80) = a2;
        a2 = v7 / v8;
        goto LABEL_7;
      }
      *(_QWORD *)(a1 + 96) = v5;
      *(_QWORD *)(a1 + 104) = v5;
      *(double *)(a1 + 80) = a2;
    }
    return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
  }
  return result;
}

uint64_t APSStatsHistogramCreateSerializedDictionary(uint64_t a1, __CFDictionary **a2)
{
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  const void **v7;
  CFMutableArrayRef v8;
  CFMutableArrayRef v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;

  if (a1)
  {
    if (a2)
    {
      v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!Mutable)
      {
        APSLogErrorAt(0);
        if (gLogCategory_APStatsHistogram <= 90
          && (gLogCategory_APStatsHistogram != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        return 4294960568;
      }
      v6 = Mutable;
      if (*(_DWORD *)(a1 + 120))
      {
        CFDictionarySetInt64();
        CFDictionarySetValue(v6, CFSTR("Name"), *(const void **)(a1 + 24));
        CFDictionarySetValue(v6, CFSTR("UnitName"), *(const void **)(a1 + 32));
        UpTicksToSecondsF();
        FigCFDictionarySetDouble();
        FigCFDictionarySetDouble();
        FigCFDictionarySetDouble();
        v7 = (const void **)MEMORY[0x1E0C9AE50];
        if (!*(_BYTE *)(a1 + 128))
          v7 = (const void **)MEMORY[0x1E0C9AE40];
        CFDictionarySetValue(v6, CFSTR("ConvertToRate"), *v7);
        FigCFDictionarySetDouble();
        pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
        v8 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E0C9B378]);
        if (v8)
        {
          v9 = v8;
          if (*(_DWORD *)(a1 + 120))
          {
            v10 = 0;
            do
            {
              FigCFArrayAppendInt32();
              ++v10;
            }
            while (v10 < *(unsigned int *)(a1 + 120));
          }
          CFDictionarySetValue(v6, CFSTR("Samples"), v9);
          CFDictionarySetInt64();
          UpTicksToSecondsF();
          FigCFDictionarySetDouble();
          FigCFDictionarySetDouble();
          FigCFDictionarySetDouble();
          FigCFDictionarySetDouble();
          *a2 = v6;
          pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
          CFRelease(v9);
          return 0;
        }
        APSLogErrorAt(0);
        if (gLogCategory_APStatsHistogram <= 90
          && (gLogCategory_APStatsHistogram != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
        v11 = 4294960568;
      }
      else
      {
        APSLogErrorAt(0);
        if (gLogCategory_APStatsHistogram <= 90
          && (gLogCategory_APStatsHistogram != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v11 = 4294960587;
      }
      CFRelease(v6);
      return v11;
    }
    APSLogErrorAt(0);
    if (gLogCategory_APStatsHistogram == -1)
      _LogCategory_Initialize();
  }
  else
  {
    APSLogErrorAt(0);
    if (gLogCategory_APStatsHistogram == -1)
      _LogCategory_Initialize();
  }
  result = LogPrintF();
  __break(1u);
  return result;
}

__CFString *APSStatsHistogramCopyAsRTCString(uint64_t a1)
{
  __CFString *Mutable;
  uint64_t v3;
  double v4;
  double v5;
  unint64_t v6;
  unint64_t v7;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (a1)
  {
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
    v3 = *(unsigned int *)(a1 + 124);
    v4 = (double)v3;
    if ((_DWORD)v3)
      v5 = (double)v3;
    else
      v5 = 1.0;
    LODWORD(v4) = **(_DWORD **)(a1 + 112);
    CFStringAppendFormat(Mutable, 0, CFSTR("%u,%.1f,%d,"), v3, *(_QWORD *)(a1 + 56), (int)((double)*(unint64_t *)&v4 * 100.0 / v5 + 0.5));
    if (*(_DWORD *)(a1 + 120) >= 2u)
    {
      v6 = 1;
      do
      {
        *(double *)&v7 = (double)v6;
        LODWORD(v7) = *(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * v6);
        CFStringAppendFormat(Mutable, 0, CFSTR("%.1f,%d,"), *(double *)(a1 + 40) + *(double *)(a1 + 72) * (double)v6++, (int)((double)v7 * 100.0 / v5 + 0.5));
      }
      while (v6 < *(unsigned int *)(a1 + 120));
    }
    CFStringAppendFormat(Mutable, 0, CFSTR("%.1f"), *(_QWORD *)(a1 + 64));
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
  }
  return Mutable;
}

__CFString *APSStatsHistogramCopyPercentageValuesAsRTCString(uint64_t a1)
{
  __CFString *Mutable;
  unsigned int v3;
  double v4;
  double v5;
  unint64_t v6;
  unint64_t v7;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (a1)
  {
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
    v3 = *(_DWORD *)(a1 + 124);
    v4 = (double)v3;
    if (v3)
      v5 = (double)v3;
    else
      v5 = 1.0;
    LODWORD(v4) = **(_DWORD **)(a1 + 112);
    CFStringAppendFormat(Mutable, 0, CFSTR("%d"), (int)((double)*(unint64_t *)&v4 * 100.0 / v5 + 0.5));
    if (*(_DWORD *)(a1 + 120) >= 2u)
    {
      v7 = 1;
      do
      {
        LODWORD(v6) = *(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * v7);
        CFStringAppendFormat(Mutable, 0, CFSTR(",%d"), (int)((double)v6 * 100.0 / v5 + 0.5));
        ++v7;
      }
      while (v7 < *(unsigned int *)(a1 + 120));
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
  }
  return Mutable;
}

__CFString *APSStatsHistogramCopyValuesAsRTCString(uint64_t a1)
{
  __CFString *Mutable;
  unint64_t v3;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (a1)
  {
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
    CFStringAppendFormat(Mutable, 0, CFSTR("%d"), **(unsigned int **)(a1 + 112));
    if (*(_DWORD *)(a1 + 120) >= 2u)
    {
      v3 = 1;
      do
        CFStringAppendFormat(Mutable, 0, CFSTR(",%d"), *(unsigned int *)(*(_QWORD *)(a1 + 112) + 4 * v3++));
      while (v3 < *(unsigned int *)(a1 + 120));
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
  }
  return Mutable;
}

uint64_t APSStatsHistogramGetTotalSampleCount(uint64_t a1)
{
  uint64_t v2;

  if (!a1)
    return 0;
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  v2 = *(unsigned int *)(a1 + 124);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
  return v2;
}

uint64_t APSStatsHistogramGetSampleCountInRange(uint64_t a1, double a2, double a3)
{
  unsigned int v6;
  uint64_t v7;
  double v8;
  double v9;
  unsigned int i;
  double v11;

  if (!a1)
    return 0;
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  v6 = *(_DWORD *)(a1 + 120);
  if (v6)
  {
    v7 = 0;
    v8 = *(double *)(a1 + 40);
    v9 = *(double *)(a1 + 56);
    if (v9 >= v8)
      v9 = *(double *)(a1 + 40);
    for (i = 1; i <= v6; ++i)
    {
      v11 = v9;
      if (v6 == i)
      {
        v9 = *(double *)(a1 + 64);
        if (v9 <= *(double *)(a1 + 48))
          v9 = *(double *)(a1 + 48);
      }
      else
      {
        v9 = v8 + *(double *)(a1 + 72) * (double)i;
      }
      if (v11 >= a2 && v9 <= a3)
        v7 = (*(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * (i - 1)) + v7);
    }
  }
  else
  {
    v7 = 0;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
  return v7;
}

uint64_t APSLocalAudioCapabilityMonitorGetTypeID()
{
  if (gAPSLocalAudioCapabilityMonitorInitOnce != -1)
    dispatch_once_f(&gAPSLocalAudioCapabilityMonitorInitOnce, 0, (dispatch_function_t)_APSLocalAudioCapabilityMonitorGetTypeID);
  return gAPSLocalAudioCapabilityMonitorTypeID;
}

uint64_t _APSLocalAudioCapabilityMonitorGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSLocalAudioCapabilityMonitorTypeID = result;
  return result;
}

void _APSLocalAudioCapabilityMonitorFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  NSObject *v5;

  if (gLogCategory_APSLocalAudioCapabilityMonitor <= 50
    && (gLogCategory_APSLocalAudioCapabilityMonitor != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  v2 = (const void *)a1[4];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[5];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[6];
  if (v4)
    CFRelease(v4);
  FigSimpleMutexDestroy();
  v5 = a1[3];
  if (v5)
  {
    dispatch_release(v5);
    a1[3] = 0;
  }
}

void apsCapabilityMonitor_handleFormatInfoChanged(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  const void *v11;
  CFTypeRef v12;
  const void *v13;
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef cf;

  v15 = 0;
  cf = 0;
  v2 = a2[4];
  if (!v2 || (v4 = *(_QWORD *)(CMBaseObjectGetVTable() + 16)) == 0)
  {
    v7 = 4294948075;
    goto LABEL_19;
  }
  v5 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(v4 + 48);
  if (!v5)
  {
    v7 = 4294948071;
    goto LABEL_19;
  }
  v6 = *MEMORY[0x1E0C9AE00];
  v7 = v5(v2, *MEMORY[0x1E0D49A00], *MEMORY[0x1E0C9AE00], &cf);
  if ((_DWORD)v7)
    goto LABEL_19;
  v8 = a2[4];
  if (!v8 || (v9 = *(_QWORD *)(CMBaseObjectGetVTable() + 16)) == 0)
  {
    v7 = 4294948075;
    goto LABEL_19;
  }
  v10 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(v9 + 48);
  if (!v10)
  {
    v7 = 4294948071;
    goto LABEL_19;
  }
  v7 = v10(v8, *MEMORY[0x1E0D49988], v6, &v15);
  if ((_DWORD)v7)
  {
LABEL_19:
    APSLogErrorAt(v7);
    goto LABEL_20;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(gAPSLocalAudioCapabilityMonitor + 16));
  v11 = (const void *)a2[5];
  v12 = cf;
  a2[5] = cf;
  if (v12)
    CFRetain(v12);
  if (v11)
    CFRelease(v11);
  v13 = (const void *)a2[6];
  v14 = v15;
  a2[6] = v15;
  if (v14)
    CFRetain(v14);
  if (v13)
    CFRelease(v13);
  pthread_mutex_unlock(*(pthread_mutex_t **)(gAPSLocalAudioCapabilityMonitor + 16));
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
LABEL_20:
  if (cf)
    CFRelease(cf);
  if (v15)
    CFRelease(v15);
}

uint64_t APSLocalAudioCapabilityMonitorInitialize()
{
  if (APSLocalAudioCapabilityMonitorInitialize_once != -1)
    dispatch_once(&APSLocalAudioCapabilityMonitorInitialize_once, &__block_literal_global_1171);
  return gCreationErr;
}

uint64_t APSLocalAudioCapabilityMonitorGetSharedInstance(_QWORD *a1)
{
  CFTypeRef v2;

  if (APSLocalAudioCapabilityMonitorInitialize_once == -1)
  {
    if (!a1)
      return gCreationErr;
  }
  else
  {
    dispatch_once(&APSLocalAudioCapabilityMonitorInitialize_once, &__block_literal_global_1171);
    if (!a1)
      return gCreationErr;
  }
  v2 = (CFTypeRef)gAPSLocalAudioCapabilityMonitor;
  if (gAPSLocalAudioCapabilityMonitor)
    v2 = CFRetain((CFTypeRef)gAPSLocalAudioCapabilityMonitor);
  *a1 = v2;
  return gCreationErr;
}

uint64_t APSLocalAudioCapabilityMonitorCopyProperty(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  pthread_mutex_t **v5;
  CFTypeRef v6;
  uint64_t v7;

  if (!a2 || !a3)
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  if (FigCFEqual())
  {
    v5 = (pthread_mutex_t **)(a1 + 16);
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
    v6 = *(CFTypeRef *)(a1 + 40);
    if (v6)
LABEL_5:
      v6 = CFRetain(v6);
  }
  else
  {
    if (!FigCFEqual())
    {
      v7 = 4294954512;
      goto LABEL_7;
    }
    v5 = (pthread_mutex_t **)(a1 + 16);
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
    v6 = *(CFTypeRef *)(a1 + 48);
    if (v6)
      goto LABEL_5;
  }
  *a3 = v6;
  pthread_mutex_unlock(*v5);
  v7 = 0;
LABEL_7:
  if (gLogCategory_APSLocalAudioCapabilityMonitor <= 50
    && (gLogCategory_APSLocalAudioCapabilityMonitor != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v7;
}

uint64_t APSRealTimeReadableGetTypeID()
{
  if (gAPSRealTimeReadableInitOnce != -1)
    dispatch_once_f(&gAPSRealTimeReadableInitOnce, 0, (dispatch_function_t)_APSRealTimeReadableGetTypeID);
  return gAPSRealTimeReadableTypeID;
}

uint64_t _APSRealTimeReadableGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSRealTimeReadableTypeID = result;
  return result;
}

uint64_t _APSRealTimeReadableFinalize(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 40);
  if (v1)
    free(v1);
  return FigSimpleMutexDestroy();
}

uint64_t APSRealTimeReadableCreate(const void *a1, size_t a2, CFTypeRef *a3)
{
  uint64_t Instance;
  _QWORD *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 && a3)
  {
    if (gAPSRealTimeReadableInitOnce != -1)
      dispatch_once_f(&gAPSRealTimeReadableInitOnce, 0, (dispatch_function_t)_APSRealTimeReadableGetTypeID);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v7 = (_QWORD *)Instance;
      *(_OWORD *)(Instance + 16) = 0u;
      *(_OWORD *)(Instance + 32) = 0u;
      v8 = malloc_type_malloc(a2, 0x4B3B55A3uLL);
      if (!v8)
        goto LABEL_16;
      v9 = v8;
      if (a1)
        memcpy(v8, a1, a2);
      else
        bzero(v8, a2);
      v7[5] = v9;
      v7[2] = a2;
      v7[3] = v9;
      v10 = FigSimpleMutexCreate();
      v7[4] = v10;
      if (v10)
      {
        v11 = 0;
        *a3 = CFRetain(v7);
      }
      else
      {
LABEL_16:
        APSLogErrorAt(0);
        v11 = 4294960568;
      }
      CFRelease(v7);
    }
    else
    {
      APSLogErrorAt(0);
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  return v11;
}

uint64_t APSRealTimeReadableRead(uint64_t a1, void *__dst)
{
  unint64_t *v3;
  const void *v4;
  uint64_t v5;

  if (a1 && __dst)
  {
    v3 = (unint64_t *)(a1 + 24);
    do
      v4 = (const void *)__ldaxr(v3);
    while (__stxr(0, v3));
    if (v4)
    {
      memcpy(__dst, v4, *(_QWORD *)(a1 + 16));
      v5 = 0;
      atomic_store((unint64_t)v4, (unint64_t *)(a1 + 24));
    }
    else
    {
      APSLogErrorAt(0);
      v5 = 4294960537;
      APSSignalErrorAt(4294960537);
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  return v5;
}

uint64_t APSRealTimeReadableWrite(uint64_t a1, const void *a2)
{
  void *v4;
  unint64_t v5;
  unint64_t *v6;
  void *v7;
  unint64_t v8;

  if (a1 && a2)
  {
    v4 = malloc_type_malloc(*(_QWORD *)(a1 + 16), 0x70681FB2uLL);
    if (v4)
    {
      v5 = (unint64_t)v4;
      memcpy(v4, a2, *(_QWORD *)(a1 + 16));
      pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 32));
      v6 = (unint64_t *)(a1 + 24);
      while (1)
      {
        v7 = *(void **)(a1 + 40);
        v8 = __ldxr(v6);
        if ((void *)v8 == v7)
        {
          if (!__stlxr(v5, v6))
          {
            *(_QWORD *)(a1 + 40) = v5;
            pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 32));
            free(v7);
            return 0;
          }
        }
        else
        {
          __clrex();
        }
        pthread_yield_np();
      }
    }
    APSLogErrorAt(0);
    return 4294960568;
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
}

uint64_t APSRealTimeAllocatorGetDefault()
{
  if (APSRealTimeAllocatorGetDefault::sRTAllocatorOnce != -1)
    dispatch_once(&APSRealTimeAllocatorGetDefault::sRTAllocatorOnce, &__block_literal_global_1182);
  return APSRealTimeAllocatorGetDefault::sRTAllocator;
}

uint64_t ___ZL22rtReleaser_getInstancev_block_invoke()
{
  NSObject *v0;

  v0 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  rtReleaser_getInstance(void)::sRTReleaser = (uint64_t)dispatch_queue_create("APSRealTimeReleaser", v0);
  APSAtomicMessageQueueCreate(*MEMORY[0x1E0C9AE00], 8, &qword_1EF9208D0);
  return APSRealTimeSignalCreate(rtReleaser_getInstance(void)::sRTReleaser, (void *)qword_1EF9208D0, (uint64_t)rtReleaser_serviceMessageQueue, 0, &qword_1EF9208D8);
}

uint64_t rtReleaser_serviceMessageQueue(uint64_t a1)
{
  uint64_t result;
  CFTypeRef cf;

  for (cf = 0; ; CFRelease(cf))
  {
    result = APSAtomicMessageQueueReadMessage(a1, &cf);
    if (!(_DWORD)result)
      break;
  }
  return result;
}

void *APSRealTimeAllocatorAllocate(CFIndex size)
{
  if (APSRealTimeAllocatorGetDefault::sRTAllocatorOnce != -1)
    dispatch_once(&APSRealTimeAllocatorGetDefault::sRTAllocatorOnce, &__block_literal_global_1182);
  return CFAllocatorAllocate((CFAllocatorRef)APSRealTimeAllocatorGetDefault::sRTAllocator, size, 0);
}

void APSRealTimeAllocatorDeallocate(void *ptr)
{
  if (APSRealTimeAllocatorGetDefault::sRTAllocatorOnce != -1)
    dispatch_once(&APSRealTimeAllocatorGetDefault::sRTAllocatorOnce, &__block_literal_global_1182);
  CFAllocatorDeallocate((CFAllocatorRef)APSRealTimeAllocatorGetDefault::sRTAllocator, ptr);
}

void APSCFRealTimeRelease(CFTypeRef cf)
{
  CFAllocatorRef v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  CFTypeRef v6;

  v6 = cf;
  if (rtReleaser_getInstance(void)::sRTReleaserOnce == -1)
  {
    if (!cf)
      return;
  }
  else
  {
    dispatch_once(&rtReleaser_getInstance(void)::sRTReleaserOnce, &__block_literal_global_5);
    if (!cf)
      return;
  }
  v2 = CFGetAllocator(cf);
  if (APSRealTimeAllocatorGetDefault::sRTAllocatorOnce != -1)
    dispatch_once(&APSRealTimeAllocatorGetDefault::sRTAllocatorOnce, &__block_literal_global_1182);
  if (v2 == (CFAllocatorRef)APSRealTimeAllocatorGetDefault::sRTAllocator)
  {
    CFRelease(cf);
  }
  else
  {
    APSAtomicMessageQueueSendMessage(qword_1EF9208D0, &v6);
    v3 = *(unsigned int **)(qword_1EF9208D8 + 16);
    v4 = v3 + 10;
    while (1)
    {
      v5 = __ldxr(v4);
      if (v5 != 1)
        break;
      if (!__stlxr(2u, v4))
      {
        caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(v3 + 6), (caulk::concurrent::message *)v3);
        return;
      }
    }
    __clrex();
  }
}

uint64_t APSAudioStats_MarkEvent(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (!result || !a2)
    return APSLogErrorAt(0);
  v2 = result;
  if (gLogCategory_APSAudioStats <= 50)
  {
    if (gLogCategory_APSAudioStats != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
      result = LogPrintF();
  }
  *(_QWORD *)(v2 + 392) = 0;
  return result;
}

uint64_t APSAudioStatsCreate(const void *a1, __int128 *a2, int a3, int a4, unsigned int a5, uint64_t *a6)
{
  uint64_t Instance;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  int v17;
  NSObject *v18;
  dispatch_time_t v19;
  NSObject *v20;
  uint64_t result;
  _QWORD handler[7];

  if (a2 && a6)
  {
    if (APSAudioStatsGetTypeID_once != -1)
      dispatch_once(&APSAudioStatsGetTypeID_once, &__block_literal_global_1192);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v13 = Instance;
      *(_QWORD *)(Instance + 400) = 0;
      *(_OWORD *)(Instance + 368) = 0u;
      *(_OWORD *)(Instance + 384) = 0u;
      *(_OWORD *)(Instance + 336) = 0u;
      *(_OWORD *)(Instance + 352) = 0u;
      *(_OWORD *)(Instance + 304) = 0u;
      *(_OWORD *)(Instance + 320) = 0u;
      *(_OWORD *)(Instance + 272) = 0u;
      *(_OWORD *)(Instance + 288) = 0u;
      *(_OWORD *)(Instance + 240) = 0u;
      *(_OWORD *)(Instance + 256) = 0u;
      *(_OWORD *)(Instance + 208) = 0u;
      *(_OWORD *)(Instance + 224) = 0u;
      *(_OWORD *)(Instance + 176) = 0u;
      *(_OWORD *)(Instance + 192) = 0u;
      *(_OWORD *)(Instance + 144) = 0u;
      *(_OWORD *)(Instance + 160) = 0u;
      *(_OWORD *)(Instance + 112) = 0u;
      *(_OWORD *)(Instance + 128) = 0u;
      *(_OWORD *)(Instance + 80) = 0u;
      *(_OWORD *)(Instance + 96) = 0u;
      *(_OWORD *)(Instance + 32) = 0u;
      *(_OWORD *)(Instance + 48) = 0u;
      *(_OWORD *)(Instance + 16) = 0u;
      *(_OWORD *)(Instance + 64) = 0u;
      v14 = (_OWORD *)(Instance + 64);
      *a6 = Instance;
      v15 = *a2;
      v16 = a2[1];
      *(_QWORD *)(Instance + 56) = *((_QWORD *)a2 + 4);
      *(_OWORD *)(Instance + 40) = v16;
      *(_OWORD *)(Instance + 24) = v15;
      *(_QWORD *)(Instance + 16) = CFRetain(a1);
      *v14 = 0u;
      *(_OWORD *)(v13 + 80) = 0u;
      *(_OWORD *)(v13 + 96) = 0u;
      *(_OWORD *)(v13 + 112) = 0u;
      *(_OWORD *)(v13 + 128) = 0u;
      *(_OWORD *)(v13 + 144) = 0u;
      *(_OWORD *)(v13 + 160) = 0u;
      *(_OWORD *)(v13 + 176) = 0u;
      *(_OWORD *)(v13 + 192) = 0u;
      *(_OWORD *)(v13 + 208) = 0u;
      *(_OWORD *)(v13 + 224) = 0u;
      *(_OWORD *)(v13 + 240) = 0u;
      *(_OWORD *)(v13 + 256) = 0u;
      *(_OWORD *)(v13 + 272) = 0u;
      *(_OWORD *)(v13 + 288) = 0u;
      *(_QWORD *)(v13 + 304) = 0;
      *(_QWORD *)(v13 + 88) = mach_absolute_time();
      *(_QWORD *)(v13 + 104) = 0;
      if (a4)
      {
        if (a5 <= 3)
          v17 = 3;
        else
          v17 = a5;
        *(_DWORD *)(v13 + 292) = v17;
        *(_BYTE *)(v13 + 288) = a4;
        v18 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(v13 + 296));
        *(_QWORD *)(v13 + 304) = v18;
        v19 = dispatch_time(0xF4240uLL, 0);
        dispatch_source_set_timer(v18, v19, 0x989680uLL, 0);
        v20 = *(NSObject **)(v13 + 304);
        handler[0] = MEMORY[0x1E0C809B0];
        handler[1] = 0x40000000;
        handler[2] = __APSZeroTracker_StartZeroLoggerDispatch_block_invoke;
        handler[3] = &__block_descriptor_tmp_12_1193;
        handler[4] = v14;
        handler[5] = a1;
        handler[6] = a2;
        dispatch_source_set_event_handler(v20, handler);
        dispatch_resume(*(dispatch_object_t *)(v13 + 304));
      }
      else
      {
        *(_DWORD *)(v13 + 292) = 0;
        *(_BYTE *)(v13 + 288) = 0;
      }
      APSSampleRateTracker_Init(v13 + 312, 0x64uLL, a1, a3);
      APSSampleRateTracker_Init(v13 + 352, 0x3E8uLL, a1, a3);
      result = 0;
      *(_QWORD *)(v13 + 392) = 0;
      *(_QWORD *)(v13 + 400) = 0;
    }
    else
    {
      APSLogErrorAt(0);
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 0;
  }
  return result;
}

void APSSampleRateTracker_Init(uint64_t a1, size_t count, const void *a3, int a4)
{
  __CFDictionary *Mutable;

  if (a1)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_DWORD *)(a1 + 16) = count;
    *(_QWORD *)(a1 + 8) = malloc_type_calloc(count, 0x10uLL, 0x1000040451B5BE8uLL);
    if (a4)
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionarySetValue(Mutable, CFSTR("Name"), a3);
      CFDictionarySetValue(Mutable, CFSTR("UnitName"), CFSTR("Hz"));
      FigCFDictionarySetDouble();
      FigCFDictionarySetDouble();
      *(_QWORD *)(a1 + 32) = APSStatsHistogramCreate(Mutable);
      if (Mutable)
        CFRelease(Mutable);
    }
  }
  else
  {
    APSLogErrorAt(0);
  }
}

void APSAudioStatsFinalize(uint64_t a1)
{
  const void *v2;
  NSObject *v3;

  if (a1)
  {
    APSSampleRateTracker_Finalize(a1 + 312);
    APSSampleRateTracker_Finalize(a1 + 352);
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    v2 = *(const void **)(a1 + 16);
    if (v2)
      CFRelease(v2);
    if (*(_BYTE *)(a1 + 288))
    {
      v3 = *(NSObject **)(a1 + 304);
      if (v3)
      {
        dispatch_source_cancel(v3);
        dispatch_release(*(dispatch_object_t *)(a1 + 304));
        *(_QWORD *)(a1 + 304) = 0;
      }
    }
  }
  else
  {
    APSLogErrorAt(0);
  }
}

__CFString *APSAudioStatsCopyDebugDescription(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  const __CFString *v4;
  int v5;
  const __CFString *v6;
  uint64_t i;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const __CFString *v11;

  if (a1)
  {
    v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    v4 = CFStringCreateMutable(v2, 0);
    CFStringAppendF();
    CFStringAppend(Mutable, v4);
    if (v4)
      CFRelease(v4);
    CFStringAppendF();
    if (*(_QWORD *)(a1 + 16))
    {
      if (*(_DWORD *)(a1 + 80) >= 0xAu)
        v5 = 10;
      else
        v5 = *(_DWORD *)(a1 + 80);
      v6 = CFStringCreateMutable(v2, 0);
      if (*(_DWORD *)(a1 + 32) == 1819304813 && v5)
      {
        CFStringAppendF();
        CFStringAppendF();
        for (i = 9; i != -1; --i)
        {
          v8 = *(_QWORD *)(a1 + 104);
          v9 = i + (__int16)v8 - 10;
          v10 = i + v8;
          if (v9 >= 0)
            v10 -= 10;
          if (*(_DWORD *)(a1 + 16 * v10 + 128))
          {
            UpTicksToSecondsF();
            CFStringAppendF();
          }
        }
      }
      CFStringAppend(Mutable, v6);
      if (v6)
        CFRelease(v6);
    }
    else
    {
      APSLogErrorAt(0);
      CFStringAppend(Mutable, 0);
    }
    v11 = (const __CFString *)APSAudioStats_CopySampleRateStatsAsString((unint64_t *)a1);
    CFStringAppend(Mutable, v11);
    if (v11)
      CFRelease(v11);
    if (*(_QWORD *)(a1 + 344))
      CFStringAppendF();
    if (*(_QWORD *)(a1 + 384))
      CFStringAppendF();
  }
  else
  {
    APSLogErrorAt(0);
    return 0;
  }
  return Mutable;
}

uint64_t APSAudioStats_CopySampleRateStatsAsString(unint64_t *a1)
{
  uint64_t v1;
  unint64_t *v2;
  uint64_t v3;

  if (a1)
  {
    v2 = a1;
    v3 = (uint64_t)(a1 + 39);
    APSSampleRateTracker_GetRate(a1 + 39);
    APSSampleRateTracker_GetTimeAccumulated(v3);
    v2 += 44;
    APSSampleRateTracker_GetRate(v2);
    APSSampleRateTracker_GetTimeAccumulated((uint64_t)v2);
    return CFStringCreateF();
  }
  else
  {
    APSLogErrorAt(0);
  }
  return v1;
}

double APSSampleRateTracker_GetRate(unint64_t *a1)
{
  double TimeAccumulated;
  double v3;
  uint64_t v4;
  double v5;

  if (a1)
  {
    TimeAccumulated = APSSampleRateTracker_GetTimeAccumulated((uint64_t)a1);
    v3 = (double)*a1;
    v4 = a1[4];
    v5 = v3 / TimeAccumulated;
    if (v4)
      APSStatsHistogramAddValue(v4, v3 / TimeAccumulated);
  }
  else
  {
    APSLogErrorAt(0);
    return 0.0;
  }
  return v5;
}

double APSSampleRateTracker_GetTimeAccumulated(uint64_t a1)
{
  double result;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 8))
    {
      UpTicksToSecondsF();
      return result;
    }
  }
  else
  {
    APSLogErrorAt(0);
  }
  return 0.0;
}

void APSSampleRateTracker_Finalize(uint64_t a1)
{
  const void *v2;

  if (a1)
  {
    free(*(void **)(a1 + 8));
    v2 = *(const void **)(a1 + 32);
    if (v2)
      CFRelease(v2);
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else
  {
    APSLogErrorAt(0);
  }
}

uint64_t APSAudioStats_ProcessAudioBuffer(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  int v17;
  uint64_t result;

  if (a1 && a2)
  {
    v6 = mach_absolute_time();
    if (*(_DWORD *)(a1 + 32) == 1819304813)
      v7 = a3 / *(unsigned int *)(a1 + 48);
    else
      v7 = *(unsigned int *)(a1 + 44);
    v8 = 8;
    if (a3 < 8)
      v8 = a3;
    if (v8)
    {
      v9 = v8;
      v10 = a2;
      while (!*v10++)
      {
        if (!--v9)
          goto LABEL_12;
      }
    }
    else
    {
LABEL_12:
      v12 = a3 - 8;
      if (a3 < 8)
        v12 = 0;
      if (v8 + 8 >= a3)
        v13 = v8;
      else
        v13 = v12;
      v14 = a3 - v13;
      if (a3 <= v13)
      {
LABEL_21:
        v17 = *(_DWORD *)(a1 + 112);
        if (!v17)
        {
          *(_QWORD *)(a1 + 120) = mach_absolute_time();
          v17 = *(_DWORD *)(a1 + 112);
        }
        *(_DWORD *)(a1 + 112) = v17 + a3;
        if (*(_BYTE *)(a1 + 288))
          *(_DWORD *)(a1 + 68) += a3;
        *(_DWORD *)(a1 + 76) += a3;
        ++*(_DWORD *)(a1 + 64);
LABEL_28:
        APSSampleRateTracker_AddNewRecord(a1 + 312, v7, v6);
        result = APSSampleRateTracker_AddNewRecord(a1 + 352, v7, v6);
        *(int64x2_t *)(a1 + 392) = vaddq_s64(*(int64x2_t *)(a1 + 392), vdupq_n_s64(v7));
        return result;
      }
      v15 = &a2[v13];
      while (!*v15++)
      {
        if (!--v14)
          goto LABEL_21;
      }
    }
    if (*(_DWORD *)(a1 + 112))
      APSZeroTracker_EndCurrentRun(a1 + 64);
    goto LABEL_28;
  }
  return APSLogErrorAt(0);
}

uint64_t APSZeroTracker_EndCurrentRun(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;

  if (!result)
    return APSLogErrorAt(0);
  if (*(_DWORD *)(result + 48))
  {
    v1 = *(_QWORD *)(result + 48);
    v2 = result + 16 * *(_QWORD *)(result + 40);
    v4 = *(_DWORD *)(v2 + 64);
    v3 = (_QWORD *)(v2 + 64);
    if (v4 < v1)
    {
      v5 = 0;
      *v3 = v1;
      v6 = (unsigned int *)(result + 64);
      v7 = *(unsigned int *)(result + 64);
      v3[1] = *(_QWORD *)(result + 56);
      do
      {
        v9 = *v6;
        v6 += 4;
        v8 = v9;
        if (v7 > v9)
        {
          *(_QWORD *)(result + 40) = v5;
          v7 = v8;
        }
        ++v5;
      }
      while (v5 != 10);
      LODWORD(v1) = *(_DWORD *)(result + 48);
    }
    if (v1 > *(_DWORD *)(result + 8))
    {
      *(_DWORD *)(result + 8) = v1;
      *(_QWORD *)(result + 32) = *(_QWORD *)(result + 56);
    }
    *(_DWORD *)(result + 48) = 0;
    ++*(_DWORD *)(result + 16);
    *(_DWORD *)(result + 4) = 0;
  }
  return result;
}

uint64_t APSSampleRateTracker_AddNewRecord(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  int v9;

  if (!result)
    return APSLogErrorAt(0);
  v3 = *(_QWORD *)(result + 8);
  v4 = *(unsigned int *)(result + 20);
  v5 = *(_DWORD *)(result + 24);
  if (v5)
  {
    v6 = *(_DWORD *)(result + 16);
    if ((_DWORD)v4)
      v7 = *(_DWORD *)(result + 20);
    else
      v7 = *(_DWORD *)(result + 16);
    v8 = *(_QWORD *)result + *(_QWORD *)(v3 + 16 * (v7 - 1) + 8);
    *(_QWORD *)result = v8;
    if (v5 >= v6)
      *(_QWORD *)result = v8 - *(_QWORD *)(v3 + 16 * v4 + 8);
  }
  else
  {
    v6 = *(_DWORD *)(result + 16);
  }
  *(_QWORD *)(v3 + 16 * v4 + 8) = a2;
  *(_QWORD *)(v3 + 16 * v4) = a3;
  if ((int)v4 + 1 < v6)
    v9 = v4 + 1;
  else
    v9 = 0;
  *(_DWORD *)(result + 20) = v9;
  *(_DWORD *)(result + 24) = v5 + 1;
  return result;
}

uint64_t APSAudioStats_TerminateSession(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;

  if (!a1)
    return APSLogErrorAt(0);
  v2 = a1 + 64;
  if (*(_BYTE *)(a1 + 288))
  {
    v3 = *(NSObject **)(a1 + 304);
    if (v3)
    {
      dispatch_source_cancel(v3);
      dispatch_release(*(dispatch_object_t *)(a1 + 304));
      *(_QWORD *)(a1 + 304) = 0;
    }
  }
  return APSZeroTracker_EndCurrentRun(v2);
}

uint64_t APSIssueReporterProtocolGetProtocolID()
{
  if (APSIssueReporterProtocolGetProtocolID_sAPSIssueReporterProtocolIDOnce != -1)
    dispatch_once_f(&APSIssueReporterProtocolGetProtocolID_sAPSIssueReporterProtocolIDOnce, &APSIssueReporterProtocolGetProtocolID_sAPSIssueReporterProtocolID, (dispatch_function_t)issueReporter_registerProtocol);
  return APSIssueReporterProtocolGetProtocolID_sAPSIssueReporterProtocolID;
}

uint64_t issueReporter_registerProtocol()
{
  return FigBaseProtocolRegisterProtocol();
}

uint64_t APSRealTimeDispatcherGetTypeID()
{
  if (gAPSRealTimeDispatcherInitOnce != -1)
    dispatch_once_f(&gAPSRealTimeDispatcherInitOnce, 0, (dispatch_function_t)_APSRealTimeDispatcherGetTypeID);
  return gAPSRealTimeDispatcherTypeID;
}

uint64_t _APSRealTimeDispatcherGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSRealTimeDispatcherTypeID = result;
  return result;
}

void _APSRealTimeDispatcherFinalize(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  const void *v4;

  v2 = a1[2];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[3];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[4];
  if (v4)
    CFRelease(v4);
}

uint64_t APSRealTimeDispatcherCreate(NSObject *a1, CFTypeRef *a2)
{
  uint64_t *Instance;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  if (!a1 || !a2)
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  if (gAPSRealTimeDispatcherInitOnce != -1)
    dispatch_once_f(&gAPSRealTimeDispatcherInitOnce, 0, (dispatch_function_t)_APSRealTimeDispatcherGetTypeID);
  Instance = (uint64_t *)_CFRuntimeCreateInstance();
  if (!Instance)
  {
    APSLogErrorAt(0);
    return 4294960568;
  }
  v5 = Instance;
  Instance[3] = 0;
  v6 = Instance + 3;
  Instance[2] = 0;
  Instance[4] = 0;
  dispatch_retain(a1);
  *(v6 - 1) = (uint64_t)a1;
  v7 = APSAtomicMessageQueueCreate(*MEMORY[0x1E0C9AE00], 16, v6);
  if ((_DWORD)v7)
  {
    v9 = v7;
    goto LABEL_14;
  }
  v8 = (void *)CFRetain((CFTypeRef)v5[3]);
  v7 = APSRealTimeSignalCreate(a1, v8, (uint64_t)rtDispatcher_signalHandler, (void (__cdecl *)(void *))rtDispatcher_signalFinalizer, v5 + 4);
  v9 = v7;
  if ((_DWORD)v7)
  {
LABEL_14:
    APSLogErrorAt(v7);
    goto LABEL_9;
  }
  *a2 = CFRetain(v5);
LABEL_9:
  CFRelease(v5);
  return v9;
}

uint64_t rtDispatcher_signalHandler(uint64_t a1)
{
  uint64_t result;
  void (*v3)(uint64_t);
  uint64_t i;

  v3 = 0;
  for (i = 0; ; v3(i))
  {
    result = APSAtomicMessageQueueReadMessage(a1, &v3);
    if (!(_DWORD)result)
      break;
  }
  return result;
}

void rtDispatcher_signalFinalizer(const void *a1)
{
  void (*v2)(uint64_t);
  uint64_t v3;

  v2 = 0;
  v3 = 0;
  while (APSAtomicMessageQueueReadMessage((uint64_t)a1, &v2))
    v2(v3);
  CFRelease(a1);
}

uint64_t APSRealTimeDispatcherAsync(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  if (a2)
  {
    v3 = result;
    result = APSAtomicMessageQueueSendMessage(*(_QWORD *)(result + 24), v7);
    v4 = *(unsigned int **)(*(_QWORD *)(v3 + 32) + 16);
    v5 = v4 + 10;
    while (1)
    {
      v6 = __ldxr(v5);
      if (v6 != 1)
        break;
      if (!__stlxr(2u, v5))
        return caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(v4 + 6), (caulk::concurrent::message *)v4);
    }
    __clrex();
  }
  return result;
}

uint64_t APSRTPPassThroughJitterBufferAcquireRelinquishedNode(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned __int128 *v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned __int128 v8;
  unint64_t v9;
  unsigned __int128 v10;
  int v11;
  BOOL v12;
  _QWORD *v13;
  unsigned int *v14;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  unsigned __int128 *v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned __int128 v26;
  unint64_t v27;
  unsigned __int128 v28;
  int v29;
  BOOL v30;

  v2 = 4294895295;
  if (!a1 || !a2)
    return v2;
  v2 = 4294895294;
  *a2 = 0;
  v5 = (unsigned __int128 *)(a1 + 64);
  do
  {
    v8 = __ldaxp(v5);
    v6 = *((_QWORD *)&v8 + 1);
    v7 = (_QWORD *)v8;
  }
  while (__stlxp(v8, v5));
  while (1)
  {
    v13 = v7;
    if (!v7)
      break;
    v9 = *v7;
    do
    {
      while (1)
      {
        v10 = __ldaxp(v5);
        v7 = (_QWORD *)v10;
        v11 = (_QWORD)v10 != (_QWORD)v13;
        if (*((_QWORD *)&v10 + 1) != v6)
          ++v11;
        if (!v11)
          break;
        if (!__stlxp(v10, v5))
          goto LABEL_13;
      }
    }
    while (__stlxp(__PAIR128__(v6 + 1, v9), v5));
LABEL_13:
    v12 = *((_QWORD *)&v10 + 1) == v6 && (_QWORD)v10 == (_QWORD)v13;
    v6 = *((_QWORD *)&v10 + 1);
    if (v12)
    {
      v18 = v13;
      goto LABEL_29;
    }
  }
  v14 = (unsigned int *)(a1 + 116);
  while (1)
  {
    if (atomic_load(v14))
      goto LABEL_23;
    if (__ldaxr(v14))
    {
      __clrex();
      goto LABEL_23;
    }
    if (!__stlxr(1u, v14))
      break;
LABEL_23:
    pthread_yield_np();
  }
  v17 = *(_QWORD **)(a1 + 200);
  v18 = (_QWORD *)*v17;
  if ((_QWORD *)*v17 == v17)
  {
    atomic_store(0, (unsigned int *)(a1 + 116));
    v23 = (unsigned __int128 *)(a1 + 80);
    do
    {
      v26 = __ldaxp(v23);
      v24 = *((_QWORD *)&v26 + 1);
      v25 = (_QWORD *)v26;
    }
    while (__stlxp(v26, v23));
    while (v25)
    {
      v18 = v25;
      v27 = *v25;
      do
      {
        while (1)
        {
          v28 = __ldaxp(v23);
          v25 = (_QWORD *)v28;
          v29 = (_QWORD)v28 != (_QWORD)v18;
          if (*((_QWORD *)&v28 + 1) != v24)
            ++v29;
          if (!v29)
            break;
          if (!__stlxp(v28, v23))
            goto LABEL_42;
        }
      }
      while (__stlxp(__PAIR128__(v24 + 1, v27), v23));
LABEL_42:
      v30 = *((_QWORD *)&v28 + 1) == v24 && (_QWORD)v28 == (_QWORD)v18;
      v24 = *((_QWORD *)&v28 + 1);
      if (v30)
        goto LABEL_29;
    }
    if (gLogCategory_APSRTPPassThroughJitterBuffer <= 30
      && (gLogCategory_APSRTPPassThroughJitterBuffer != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  else
  {
    v19 = *v18;
    *(_QWORD *)(v19 + 8) = v18[1];
    *(_QWORD *)v18[1] = v19;
    atomic_store(0, (unsigned int *)(a1 + 116));
    v20 = (unsigned int *)(a1 + 112);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
LABEL_29:
    v22 = v18 + 2;
    *((_DWORD *)v18 + 13) = 0;
    *((_DWORD *)v18 + 14) = 0;
    if (gLogCategory_APSRTPPassThroughJitterBuffer <= 30
      && (gLogCategory_APSRTPPassThroughJitterBuffer != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v2 = 0;
    *a2 = v22;
  }
  return v2;
}

uint64_t APSRTPPassThroughJitterBufferRelinquishNode(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  unsigned __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int128 v9;
  unsigned __int128 v10;
  int v11;
  BOOL v12;

  result = 4294895295;
  if (a1 && a2)
  {
    if (gLogCategory_APSRTPPassThroughJitterBuffer <= 30
      && (gLogCategory_APSRTPPassThroughJitterBuffer != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v5 = (_QWORD *)(a2 - 16);
    v6 = (unsigned __int128 *)(a1 + 64);
    do
    {
      v9 = __ldaxp(v6);
      v8 = *((_QWORD *)&v9 + 1);
      v7 = v9;
    }
    while (__stlxp(v9, v6));
    *(_QWORD *)(a2 - 8) = 0;
    do
    {
      *v5 = v7;
      do
      {
        while (1)
        {
          v10 = __ldaxp(v6);
          v11 = (_QWORD)v10 != v7;
          if (*((_QWORD *)&v10 + 1) != v8)
            ++v11;
          if (!v11)
            break;
          if (!__stlxp(v10, v6))
            goto LABEL_17;
        }
      }
      while (__stlxp(__PAIR128__(v8 + 1, (unint64_t)v5), v6));
LABEL_17:
      v12 = *((_QWORD *)&v10 + 1) == v8 && (_QWORD)v10 == v7;
      v8 = v10 >> 64;
      v7 = v10;
    }
    while (!v12);
    return 0;
  }
  return result;
}

uint64_t APSRTPPassThroughJitterBufferInsertNode(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  unsigned __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int128 v27;
  unsigned __int128 v28;
  int v29;
  BOOL v30;

  result = 4294895295;
  if (a1 && a2)
  {
    if (gLogCategory_APSRTPPassThroughJitterBuffer <= 30
      && (gLogCategory_APSRTPPassThroughJitterBuffer != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v5 = *(_DWORD *)(*(_QWORD *)a2 + 4);
    v6 = (unint64_t *)(a1 + 216);
    v7 = atomic_load((unint64_t *)(a1 + 216));
    do
    {
      v8 = (v7 & 0x4000000000000000) >> 62;
      if ((v7 & 0x4000000000000000) != 0)
        v9 = v7 >> 31;
      else
        LODWORD(v9) = v7;
      if ((v7 & 0x4000000000000000) != 0)
        LODWORD(v10) = v7;
      else
        v10 = v7 >> 31;
      v11 = 31;
      v12 = v5;
      while (1)
      {
        v13 = v12 % 0x1F;
        if ((v9 & (1 << v13)) == 0)
          break;
        if (*(_DWORD *)(a1 + 124 * v8 + 224 + 4 * v13) == v5)
        {
LABEL_52:
          APSRTPPassThroughJitterBufferRelinquishNode(a1, a2);
          return 0;
        }
        v12 = v13 + 1;
        if (!--v11)
        {
          v13 = -1;
          break;
        }
      }
      v14 = v8 ^ 1;
      v15 = 31;
      v16 = v5;
      do
      {
        v17 = v16 % 0x1F;
        if ((v10 & (1 << v17)) == 0)
          break;
        if (*(_DWORD *)(a1 + 124 * (v8 ^ 1) + 224 + 4 * v17) == v5)
          goto LABEL_52;
        v16 = v17 + 1;
        --v15;
      }
      while (v15);
      v18 = v7;
      if (v13 == -1)
      {
        if ((v7 & 0x4000000000000000) != 0)
          v8 = 0xFFFFFFFF80000000;
        else
          v8 = 0xC00000007FFFFFFFLL;
        v18 = (v7 & 0xBFFFFFFFFFFFFFFFLL | (v14 << 62)) & v8;
        v13 = v5 % 0x1F;
        LODWORD(v8) = (v7 & 0x4000000000000000) == 0;
      }
      v19 = (1 << v13);
      if ((_DWORD)v8)
        v19 = (unint64_t)(1 << v13) << 31;
      v20 = v19 | v18;
      while (1)
      {
        v21 = __ldaxr(v6);
        if (v21 != v7)
          break;
        if (!__stlxr(v20, v6))
        {
          v22 = 1;
          goto LABEL_35;
        }
      }
      v22 = 0;
      __clrex();
LABEL_35:
      v7 = v21;
    }
    while ((v22 & 1) == 0);
    *(_DWORD *)(a1 + 124 * ((v18 >> 62) & 1) + 4 * v13 + 224) = v5;
    v23 = (_QWORD *)(a2 - 16);
    v24 = (unsigned __int128 *)(a1 + 80);
    do
    {
      v27 = __ldaxp(v24);
      v26 = *((_QWORD *)&v27 + 1);
      v25 = v27;
    }
    while (__stlxp(v27, v24));
    *(_QWORD *)(a2 - 8) = 0;
    do
    {
      result = 0;
      *v23 = v25;
      do
      {
        while (1)
        {
          v28 = __ldaxp(v24);
          v29 = (_QWORD)v28 != v25;
          if (*((_QWORD *)&v28 + 1) != v26)
            ++v29;
          if (!v29)
            break;
          if (!__stlxp(v28, v24))
            goto LABEL_46;
        }
      }
      while (__stlxp(__PAIR128__(v26 + 1, (unint64_t)v23), v24));
LABEL_46:
      v30 = *((_QWORD *)&v28 + 1) == v26 && (_QWORD)v28 == v25;
      v26 = *((_QWORD *)&v28 + 1);
      v25 = v28;
    }
    while (!v30);
  }
  return result;
}

uint64_t APSRTPPassThroughJitterBufferAcquireLowestInsertedNode(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int128 *v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int128 v7;
  unsigned __int128 v8;
  int v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t *v25;
  int v26;
  int v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD **v38;
  _QWORD *v39;
  unsigned int *v40;
  uint64_t v41;
  _QWORD *v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  unint64_t v46;

  v3 = 4294895295;
  if (!a1 || !a2)
    goto LABEL_71;
  v4 = (unsigned __int128 *)(a1 + 80);
  do
  {
    v7 = __ldaxp(v4);
    v6 = *((_QWORD *)&v7 + 1);
    v5 = (_QWORD *)v7;
  }
  while (__stlxp(v7, v4));
  if (!(_QWORD)v7)
    goto LABEL_51;
  do
  {
    do
    {
      while (1)
      {
        v8 = __ldaxp(v4);
        v9 = (_QWORD)v8 != (_QWORD)v5;
        if (*((_QWORD *)&v8 + 1) != v6)
          ++v9;
        if (v9)
          break;
        if (!__stlxp(__PAIR128__(v6 + 1, 0), v4))
          goto LABEL_12;
      }
    }
    while (__stlxp(v8, v4));
LABEL_12:
    v10 = (_QWORD)v8 == (_QWORD)v5 && *((_QWORD *)&v8 + 1) == v6;
    if (!v10)
    {
      v6 = *((_QWORD *)&v8 + 1);
      v5 = (_QWORD *)v8;
    }
  }
  while (!v10 && v5);
  if (!v5)
    goto LABEL_51;
  v11 = 0;
  do
  {
    v12 = v5;
    v5 = (_QWORD *)*v5;
    *v12 = v11;
    v11 = v12;
  }
  while (v5);
  v13 = (unint64_t *)(a1 + 208);
  v14 = (unsigned int *)(a1 + 116);
  v15 = (unsigned int *)(a1 + 120);
  v16 = (unsigned int *)(a1 + 112);
  while (2)
  {
    v17 = v12;
    v12 = (_QWORD *)*v12;
    v18 = v17 + 2;
    *v17 = 0;
    v17[1] = 0;
    do
    {
      while (1)
      {
        v19 = atomic_load(v13);
        if ((v19 & 0x8000000000000000) == 0)
          goto LABEL_30;
        v20 = *(_DWORD *)(*v18 + 4);
        if (v20 - (int)v19 < 0)
        {
          v28 = 1;
          goto LABEL_43;
        }
        if (v20 - ((HIDWORD(v19) & 0x7FFFFFFF) + (int)v19) < 0)
          goto LABEL_30;
        v21 = __ldaxr(v13);
        if (v21 == v19)
          break;
        __clrex();
      }
    }
    while (__stlxr(v19 & 0x7FFFFFFFFFFFFFFFLL, v13));
LABEL_30:
    while (2)
    {
      if (atomic_load(v14))
      {
        do
LABEL_28:
          v22 = __ldaxr(v15);
        while (__stlxr(v22 + 1, v15));
        pthread_yield_np();
        continue;
      }
      break;
    }
    if (__ldaxr(v14))
    {
      __clrex();
      goto LABEL_28;
    }
    if (__stlxr(1u, v14))
      goto LABEL_28;
    v25 = *(uint64_t **)(a1 + 200);
    do
    {
      v25 = (uint64_t *)v25[1];
      if (v25 == *(uint64_t **)(a1 + 200))
      {
        v25 = *(uint64_t **)(a1 + 200);
        goto LABEL_40;
      }
      v26 = *(_DWORD *)(v25[2] + 4);
      v27 = *(_DWORD *)(*v18 + 4);
    }
    while (v26 - v27 > 0);
    if (v26 == v27)
    {
      v28 = 1;
      goto LABEL_41;
    }
LABEL_40:
    v28 = 0;
    v29 = *v25;
    *v17 = *v25;
    v17[1] = (uint64_t)v25;
    *(_QWORD *)(v29 + 8) = v17;
    *(_QWORD *)v17[1] = v17;
LABEL_41:
    atomic_store(0, v14);
LABEL_43:
    if (gLogCategory_APSRTPPassThroughJitterBuffer <= 30
      && (gLogCategory_APSRTPPassThroughJitterBuffer != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if ((v28 & 1) != 0)
    {
      APSRTPPassThroughJitterBufferRelinquishNode(a1, (uint64_t)(v17 + 2));
    }
    else
    {
      do
        v30 = __ldaxr(v16);
      while (__stlxr(v30 + 1, v16));
    }
    if (v12)
      continue;
    break;
  }
LABEL_51:
  v31 = (unsigned int *)(a1 + 116);
  v32 = (unsigned int *)(a1 + 120);
  while (2)
  {
    if (atomic_load(v31))
    {
      do
LABEL_56:
        v35 = __ldaxr(v32);
      while (__stlxr(v35 + 1, v32));
      pthread_yield_np();
      continue;
    }
    break;
  }
  if (__ldaxr(v31))
  {
    __clrex();
    goto LABEL_56;
  }
  if (__stlxr(1u, v31))
    goto LABEL_56;
  v36 = (unint64_t *)(a1 + 208);
  v37 = atomic_load((unint64_t *)(a1 + 208));
  v38 = *(_QWORD ***)(a1 + 200);
  v39 = *v38;
  if (*v38 == v38)
  {
LABEL_65:
    *a2 = 0;
    v45 = 4294895294;
  }
  else
  {
    v40 = (unsigned int *)(a1 + 112);
    while (1)
    {
      *v38 = (_QWORD *)*v39;
      v42 = (_QWORD *)*v39;
      v41 = (uint64_t)(v39 + 2);
      v42[1] = v38;
      *a2 = v41;
      do
        v43 = __ldaxr(v40);
      while (__stlxr(v43 - 1, v40));
      if ((v37 & 0x8000000000000000) == 0)
        goto LABEL_69;
      v44 = *(_DWORD *)(*(_QWORD *)v41 + 4);
      if (v44 - (int)v37 >= 0)
        break;
      APSRTPPassThroughJitterBufferRelinquishNode(a1, v41);
      v37 = atomic_load((unint64_t *)(a1 + 208));
      v38 = *(_QWORD ***)(a1 + 200);
      v39 = *v38;
      if (*v38 == v38)
        goto LABEL_65;
    }
    if (v44 - ((HIDWORD(v37) & 0x7FFFFFFF) + (int)v37) < 0)
    {
LABEL_69:
      v45 = 0;
      goto LABEL_70;
    }
    while (1)
    {
      v46 = __ldaxr(v36);
      if (v46 != v37)
        break;
      if (!__stlxr(v37 & 0x7FFFFFFFFFFFFFFFLL, v36))
        goto LABEL_69;
    }
    v45 = 0;
    __clrex();
  }
LABEL_70:
  atomic_store(0, v31);
  v3 = v45;
LABEL_71:
  if (gLogCategory_APSRTPPassThroughJitterBuffer <= 30
    && (gLogCategory_APSRTPPassThroughJitterBuffer != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v3;
}

uint64_t APSRTPPassThroughJitterBufferGetInsertedNodeCount(uint64_t result)
{
  if (result)
    return atomic_load((unsigned int *)(result + 112));
  return result;
}

uint64_t APSRTPPassThroughJitterBufferFlush(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;

  v3 = 4294895295;
  if (a1)
  {
    if ((int)(a2 - a3) >= 1)
    {
      APSLogErrorAt(0);
    }
    else
    {
      if (gLogCategory_APSRTPPassThroughJitterBuffer <= 30
        && (gLogCategory_APSRTPPassThroughJitterBuffer != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v3 = 0;
      atomic_store(a2 | ((unint64_t)((a3 - a2) | 0x80000000) << 32), (unint64_t *)(a1 + 208));
    }
  }
  return v3;
}

unint64_t APSRTPPassThroughJitterBufferIsFlushing(unint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = atomic_load((unint64_t *)(result + 208));
    return v1 >> 63;
  }
  return result;
}

uint64_t APSRTPPassThroughJitterBufferCreate(uint64_t a1, int a2, uint64_t a3, const void *a4, uint64_t *a5)
{
  unsigned int v8;
  uint64_t Instance;
  uint64_t v10;
  CFTypeRef v11;
  void *v12;
  char *v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned __int128 *v20;
  unsigned __int128 *v21;
  unsigned __int128 *v22;
  uint64_t v23;

  if (a2 <= 0)
  {
    v23 = 4294895295;
LABEL_30:
    APSLogErrorAt(0);
    return v23;
  }
  if (!a3)
  {
    v23 = 4294895295;
    goto LABEL_30;
  }
  if (!a5)
  {
    v23 = 4294895295;
    goto LABEL_30;
  }
  v8 = a2;
  if (APSRTPPassThroughJitterBufferGetTypeID_sRegisterAPSRTPPassThroughJitterBufferOnce != -1)
    dispatch_once_f(&APSRTPPassThroughJitterBufferGetTypeID_sRegisterAPSRTPPassThroughJitterBufferOnce, 0, (dispatch_function_t)registerAPSRTPPassThroughJitterBuffer);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    APSLogErrorAt(0);
    return 4294895296;
  }
  v10 = Instance;
  *(_DWORD *)(Instance + 16) = v8;
  *(_QWORD *)(Instance + 24) = a3;
  if (a4)
  {
    v11 = CFRetain(a4);
    v8 = *(_DWORD *)(v10 + 16);
  }
  else
  {
    v11 = 0;
  }
  *(_QWORD *)(v10 + 32) = v11;
  v12 = CFAllocatorAllocate((CFAllocatorRef)a4, 72 * v8, 0);
  *(_QWORD *)(v10 + 40) = v12;
  if (!v12)
  {
    APSLogErrorAt(0);
    if (gLogCategory_APSRTPPassThroughJitterBuffer > 90
      || gLogCategory_APSRTPPassThroughJitterBuffer == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_42;
    }
LABEL_37:
    LogPrintF();
LABEL_42:
    CFRelease((CFTypeRef)v10);
    return 4294895296;
  }
  v13 = (char *)CFAllocatorAllocate((CFAllocatorRef)a4, *(_QWORD *)(v10 + 24) * *(unsigned int *)(v10 + 16), 0);
  *(_QWORD *)(v10 + 48) = v13;
  if (!v13)
  {
    APSLogErrorAt(0);
    if (gLogCategory_APSRTPPassThroughJitterBuffer > 90
      || gLogCategory_APSRTPPassThroughJitterBuffer == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_42;
    }
    goto LABEL_37;
  }
  v14 = *(_DWORD *)(v10 + 16);
  v15 = *(_QWORD *)(v10 + 40);
  if (v14 != 1)
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = v15 + 72;
    v18 = (v14 - 1);
    do
    {
      *(_QWORD *)(v17 - 32) = v13;
      *(_QWORD *)(v17 - 72) = v17;
      v13 += v16;
      v17 += 72;
      --v18;
    }
    while (v18);
  }
  v19 = (_QWORD *)(v15 + 72 * (v14 - 1));
  v19[5] = v13;
  *v19 = 0;
  v20 = (unsigned __int128 *)(v10 + 96);
  do
    __ldaxp(v20);
  while (__stlxp(0, v20));
  v21 = (unsigned __int128 *)(v10 + 80);
  do
    __ldaxp(v21);
  while (__stlxp(0, v21));
  v22 = (unsigned __int128 *)(v10 + 64);
  do
    __ldaxp(v22);
  while (__stlxp(v15, v22));
  *(_QWORD *)(v10 + 128) = v10 + 128;
  *(_QWORD *)(v10 + 136) = v10 + 128;
  *(_QWORD *)(v10 + 200) = v10 + 128;
  atomic_store(0, (unsigned int *)(v10 + 112));
  if (gLogCategory_APSRTPPassThroughJitterBuffer <= 50
    && (gLogCategory_APSRTPPassThroughJitterBuffer != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v23 = 0;
  *a5 = v10;
  return v23;
}

uint64_t registerAPSRTPPassThroughJitterBuffer()
{
  uint64_t result;

  sAPSRTPPassThroughJitterBufferClass = 0;
  unk_1EF920990 = "APSRTPPassThroughJitterBuffer";
  qword_1EF920998 = (uint64_t)APSRTPPassThroughJitterBufferInit;
  unk_1EF9209A0 = 0;
  qword_1EF9209A8 = (uint64_t)APSRTPPassThroughJitterBufferFinalize;
  unk_1EF9209B0 = 0;
  qword_1EF9209B8 = 0;
  unk_1EF9209C0 = 0;
  qword_1EF9209C8 = (uint64_t)APSRTPPassThroughJitterBufferCopyDebugDesc;
  result = _CFRuntimeRegisterClass();
  sAPSRTPPassThroughJitterBufferID = result;
  return result;
}

double APSRTPPassThroughJitterBufferInit(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[28] = 0u;
  a1[29] = 0u;
  a1[26] = 0u;
  a1[27] = 0u;
  a1[24] = 0u;
  a1[25] = 0u;
  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void APSRTPPassThroughJitterBufferFinalize(uint64_t a1)
{
  void *v2;
  void *v3;
  const void *v4;

  v2 = *(void **)(a1 + 40);
  if (v2)
    CFAllocatorDeallocate(*(CFAllocatorRef *)(a1 + 32), v2);
  v3 = *(void **)(a1 + 48);
  if (v3)
    CFAllocatorDeallocate(*(CFAllocatorRef *)(a1 + 32), v3);
  v4 = *(const void **)(a1 + 32);
  if (v4)
    CFRelease(v4);
}

__CFString *APSRTPPassThroughJitterBufferCopyDebugDesc(const void *a1)
{
  const __CFAllocator *v1;
  __CFString *Mutable;

  v1 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v1, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("APSRTPPassThroughJitterBuffer"));
  return Mutable;
}

uint64_t APSRTPPassThroughJitterBufferGetTypeID()
{
  if (APSRTPPassThroughJitterBufferGetTypeID_sRegisterAPSRTPPassThroughJitterBufferOnce != -1)
    dispatch_once_f(&APSRTPPassThroughJitterBufferGetTypeID_sRegisterAPSRTPPassThroughJitterBufferOnce, 0, (dispatch_function_t)registerAPSRTPPassThroughJitterBuffer);
  return sAPSRTPPassThroughJitterBufferID;
}

uint64_t APSAudioIOAssertionTimingControllerGetTypeID()
{
  if (gAPSAudioIOAssertionTimingControllerInitOnce != -1)
    dispatch_once_f(&gAPSAudioIOAssertionTimingControllerInitOnce, 0, (dispatch_function_t)_APSAudioIOAssertionTimingControllerGetTypeID);
  return gAPSAudioIOAssertionTimingControllerTypeID;
}

uint64_t _APSAudioIOAssertionTimingControllerGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSAudioIOAssertionTimingControllerTypeID = result;
  return result;
}

void _APSAudioIOAssertionTimingControllerFinalize(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  const void *v5;
  const void *v6;

  if (gLogCategory_APSAudioIOAssertionTimingController <= 50
    && (gLogCategory_APSAudioIOAssertionTimingController != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_sync_f(*(dispatch_queue_t *)(a1 + 24), (void *)a1, (dispatch_function_t)audioIOAssertionTimingController_releaseAndClearAssertion);
  }
  v3 = *(NSObject **)(a1 + 24);
  if (v3)
    dispatch_release(v3);
  v4 = *(NSObject **)(a1 + 32);
  if (v4)
    dispatch_release(v4);
  v5 = *(const void **)(a1 + 16);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 40);
  if (v6)
    CFRelease(v6);
}

void audioIOAssertionTimingController_releaseAndClearAssertion(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    if (gLogCategory_APSAudioIOAssertionTimingController > 50)
      goto LABEL_7;
    if (gLogCategory_APSAudioIOAssertionTimingController != -1 || _LogCategory_Initialize())
      LogPrintF();
    v2 = *(const void **)(a1 + 40);
    if (v2)
    {
LABEL_7:
      CFRelease(v2);
      *(_QWORD *)(a1 + 40) = 0;
    }
  }
}

uint64_t APSAudioIOAssertionTimingControllerCreate(const __CFString *a1, CFTypeRef *a2)
{
  uint64_t Instance;
  uint64_t v5;
  const __CFString *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;

  if (a2)
  {
    if (gAPSAudioIOAssertionTimingControllerInitOnce != -1)
      dispatch_once_f(&gAPSAudioIOAssertionTimingControllerInitOnce, 0, (dispatch_function_t)_APSAudioIOAssertionTimingControllerGetTypeID);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v5 = Instance;
      *(_OWORD *)(Instance + 16) = 0u;
      *(_OWORD *)(Instance + 32) = 0u;
      if (a1)
        v6 = a1;
      else
        v6 = &stru_1E828E0E0;
      *(_QWORD *)(v5 + 16) = CFRetain(v6);
      v7 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
      v8 = dispatch_queue_create("APSAudioIOAssertionTimingController", v7);
      *(_QWORD *)(v5 + 24) = v8;
      if (v8 && (v9 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v8), (*(_QWORD *)(v5 + 32) = v9) != 0))
      {
        dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        dispatch_set_context(*(dispatch_object_t *)(v5 + 32), (void *)v5);
        dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v5 + 32), (dispatch_function_t)audioIOAssertionTimingController_releaseAndClearAssertion);
        dispatch_resume(*(dispatch_object_t *)(v5 + 32));
        if (gLogCategory_APSAudioIOAssertionTimingController <= 50
          && (gLogCategory_APSAudioIOAssertionTimingController != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v10 = 0;
        *a2 = CFRetain((CFTypeRef)v5);
      }
      else
      {
        APSLogErrorAt(0);
        v10 = 4294960568;
      }
      CFRelease((CFTypeRef)v5);
    }
    else
    {
      APSLogErrorAt(0);
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  return v10;
}

uint64_t APSAudioIOAssertionTimingControllerAssertUntilTime(uint64_t a1, uint64_t a2)
{
  _QWORD context[2];
  uint64_t v4;

  context[0] = a1;
  context[1] = a2;
  if (a1)
  {
    v4 = 0;
    dispatch_sync_f(*(dispatch_queue_t *)(a1 + 24), context, (dispatch_function_t)audioIOAssertionTimingController_assertUntilTimeInternal);
    return v4;
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
}

uint64_t audioIOAssertionTimingController_assertUntilTimeInternal(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  const void *v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 40);
  if (!a1[1])
  {
    if (v3)
    {
      if (gLogCategory_APSAudioIOAssertionTimingController <= 50)
      {
        if (gLogCategory_APSAudioIOAssertionTimingController != -1 || (v5 = _LogCategory_Initialize(), v2 = *a1, v5))
        {
          LogPrintF();
          v2 = *a1;
        }
      }
      v6 = *(const void **)(v2 + 40);
      if (v6)
      {
        CFRelease(v6);
        *(_QWORD *)(*a1 + 40) = 0;
      }
    }
    goto LABEL_15;
  }
  if (v3)
  {
LABEL_15:
    if (gLogCategory_APSAudioIOAssertionTimingController <= 30
      && (gLogCategory_APSAudioIOAssertionTimingController != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_19;
  }
  result = APSAudioIOAssertionCreate(*(const __CFString **)(v2 + 16), (CFTypeRef *)(*a1 + 40));
  if (!(_DWORD)result)
  {
    if (gLogCategory_APSAudioIOAssertionTimingController > 50)
    {
LABEL_19:
      dispatch_source_set_timer(*(dispatch_source_t *)(*a1 + 32), a1[1], 0xFFFFFFFFFFFFFFFFLL, 0);
      result = 0;
      goto LABEL_20;
    }
    if (gLogCategory_APSAudioIOAssertionTimingController != -1 || _LogCategory_Initialize())
      LogPrintF();
    goto LABEL_15;
  }
  if (gLogCategory_APSAudioIOAssertionTimingController <= 90)
  {
    v7 = result;
    if (gLogCategory_APSAudioIOAssertionTimingController != -1 || _LogCategory_Initialize())
      LogPrintF();
    result = v7;
  }
LABEL_20:
  *((_DWORD *)a1 + 4) = result;
  return result;
}

uint64_t APSSystemGetUserVersion()
{
  uint64_t v0;

  if (APSSystemGetUserVersion_prefsOnce != -1)
    dispatch_once(&APSSystemGetUserVersion_prefsOnce, &__block_literal_global_1266);
  v0 = APSSystemGetUserVersion_prefsUserVersion;
  if (APSSystemGetUserVersion_prefsUserVersion >= 3)
  {
    v0 = gUserVersionOverride;
    if (gUserVersionOverride >= 3)
    {
      if (senderSupportsAirPlay1080p_once != -1)
        dispatch_once(&senderSupportsAirPlay1080p_once, &__block_literal_global_251);
      v0 = senderSupportsAirPlay1080p_result;
    }
  }
  if (gLogCategory_APSSystemUtils <= 30
    && (gLogCategory_APSSystemUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v0;
}

uint64_t __senderSupportsAirPlay1080p_block_invoke()
{
  uint64_t v0;
  mach_port_t v1;
  char i;
  char v3;
  const __CFDictionary *v4;
  uint64_t result;

  v0 = 0;
  v1 = *MEMORY[0x1E0CBBAA8];
  for (i = 1; ; i = 0)
  {
    v3 = i;
    v4 = IOServiceMatching(senderSupportsAirPlay1080p_drivers[v0]);
    result = IOServiceGetMatchingService(v1, v4);
    if ((_DWORD)result)
      break;
    v0 = 1;
    if ((v3 & 1) == 0)
      return result;
  }
  senderSupportsAirPlay1080p_result = 1;
  return IOObjectRelease(result);
}

uint64_t APSSystemSetUserVersion(uint64_t result)
{
  int v1;

  v1 = result;
  if (gLogCategory_APSSystemUtils <= 50)
  {
    if (gLogCategory_APSSystemUtils != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
      result = LogPrintF();
  }
  gUserVersionOverride = v1;
  return result;
}

uint64_t APSIsMXAvailableForPrewarm()
{
  return in_audio_mx_server_process();
}

uint64_t APSIsIPhone()
{
  if (APSIsIPhone_onceToken != -1)
    dispatch_once(&APSIsIPhone_onceToken, &__block_literal_global_18);
  return APSIsIPhone_sIsiPhone;
}

uint64_t APSIsIPad()
{
  if (APSIsIPad_onceToken != -1)
    dispatch_once(&APSIsIPad_onceToken, &__block_literal_global_19);
  return APSIsIPad_sIsiPad;
}

uint64_t APSIsEndpointClusteringEnabled()
{
  if (APSIsEndpointClusteringEnabled_sIsEndpointClusteringEnabledOnce != -1)
    dispatch_once(&APSIsEndpointClusteringEnabled_sIsEndpointClusteringEnabledOnce, &__block_literal_global_20);
  return APSIsEndpointClusteringEnabled_sIsEndpointClusteringEnabled;
}

uint64_t APSIsPairingGroupEnabled()
{
  if (APSIsPairingGroupEnabled_sIsPairingGroupEnabledOnce != -1)
    dispatch_once(&APSIsPairingGroupEnabled_sIsPairingGroupEnabledOnce, &__block_literal_global_23);
  return APSIsPairingGroupEnabled_sIsPairingGroupEnabled;
}

uint64_t APSMultiPrimariesEnabled()
{
  if (APSMultiPrimariesEnabled_sMultiPrimariesEnabledOnce != -1)
    dispatch_once(&APSMultiPrimariesEnabled_sMultiPrimariesEnabledOnce, &__block_literal_global_26);
  return APSMultiPrimariesEnabled_sMultiPrimariesEnabled;
}

uint64_t APSNowPlayingSessionDataSourceEnabled()
{
  if (APSNowPlayingSessionDataSourceEnabled_sNowPlayingSessionDataSourceEnabledOnce != -1)
    dispatch_once(&APSNowPlayingSessionDataSourceEnabled_sNowPlayingSessionDataSourceEnabledOnce, &__block_literal_global_31_1298);
  return APSNowPlayingSessionDataSourceEnabled_sNowPlayingSessionDataSourceEnabled;
}

uint64_t APSIsRemoteHALPluginLoadingEnabled()
{
  if (APSIsRemoteHALPluginLoadingEnabled_sOnce != -1)
    dispatch_once(&APSIsRemoteHALPluginLoadingEnabled_sOnce, &__block_literal_global_34);
  return APSIsRemoteHALPluginLoadingEnabled_sRemoteHalPluginLoadingEnabled;
}

uint64_t APSShouldClusterEngageOnActivation()
{
  if (APSShouldClusterEngageOnActivation_sOnce != -1)
    dispatch_once(&APSShouldClusterEngageOnActivation_sOnce, &__block_literal_global_35);
  return APSShouldClusterEngageOnActivation_sEngageOnActivateCluster;
}

uint64_t APSIsExplicitEndpointManagerInitializationEnabledInMX()
{
  if (APSIsExplicitEndpointManagerInitializationEnabledInMX_sOnce != -1)
    dispatch_once(&APSIsExplicitEndpointManagerInitializationEnabledInMX_sOnce, &__block_literal_global_38);
  return APSIsExplicitEndpointManagerInitializationEnabledInMX_sEnabled;
}

uint64_t APSIsSuntoryEnabled()
{
  if (APSIsSuntoryEnabled_sSuntoryEnabledOnce != -1)
    dispatch_once(&APSIsSuntoryEnabled_sSuntoryEnabledOnce, &__block_literal_global_43);
  return APSIsSuntoryEnabled_sSuntoryEnabled;
}

uint64_t APSIsProximityReceiverEnabled()
{
  if (APSIsProximityReceiverEnabled_sOnce != -1)
    dispatch_once(&APSIsProximityReceiverEnabled_sOnce, &__block_literal_global_51);
  return APSIsProximityReceiverEnabled_sProximityReceiverEnabled;
}

uint64_t APSIsPermanentSpeakerGroupingEnabled(uint64_t a1)
{
  if (a1)
    return *MEMORY[0x1E0C9AE50] == a1;
  if (APSIsPermanentSpeakerGroupingEnabled_sOnce != -1)
    dispatch_once(&APSIsPermanentSpeakerGroupingEnabled_sOnce, &__block_literal_global_54);
  return APSIsPermanentSpeakerGroupingEnabled_sPSGEnabled;
}

uint64_t APSIsSetMRInfoCommandEnabled()
{
  if (APSIsSetMRInfoCommandEnabled_sOnce != -1)
    dispatch_once(&APSIsSetMRInfoCommandEnabled_sOnce, &__block_literal_global_57);
  return APSIsSetMRInfoCommandEnabled_sSetMREnabled;
}

const __CFString *APSGetFabricatedMemberIDForHTGroup(uint64_t a1, int a2, int a3)
{
  BOOL v3;
  const __CFString *v4;

  if (a3)
    v3 = 1;
  else
    v3 = a1 == 2;
  v4 = CFSTR("2");
  if (v3)
    v4 = CFSTR("1");
  if (a2)
    return CFSTR("0");
  else
    return v4;
}

CFStringRef APSCreateGroupID(const void *a1, const __CFString *a2, const __CFString *a3)
{
  const __CFAllocator *v6;
  __CFArray *Mutable;
  __CFArray *v8;
  CFStringRef v9;

  if (!a1)
    return 0;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    APSLogErrorAt(0);
    return 0;
  }
  v8 = Mutable;
  CFArrayAppendValue(Mutable, a1);
  if (a2)
  {
    if ((unint64_t)(CFStringGetLength(a2) - 1) > 2)
    {
      if (gLogCategory_APSSystemUtils <= 90
        && (gLogCategory_APSSystemUtils != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else
    {
      CFArrayAppendValue(v8, a2);
    }
  }
  if (a3)
  {
    if (CFStringGetLength(a3) < 4)
    {
      if (gLogCategory_APSSystemUtils <= 90
        && (gLogCategory_APSSystemUtils != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else
    {
      CFArrayAppendValue(v8, a3);
    }
  }
  v9 = CFStringCreateByCombiningStrings(v6, v8, CFSTR("+"));
  CFRelease(v8);
  return v9;
}

uint64_t APSParseGroupID(CFStringRef theString, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  const __CFAllocator *v9;
  const __CFArray *ArrayBySeparatingStrings;
  const __CFArray *v11;
  CFIndex Count;
  unint64_t v13;
  const __CFString *ValueAtIndex;
  CFTypeRef v15;
  const __CFString *v16;
  CFIndex Length;
  unint64_t v18;
  CFTypeRef v19;
  const void *v20;
  const void *v21;
  const __CFString *v22;
  CFTypeRef v23;
  const void *v24;
  uint64_t v25;

  if (!theString
    || (v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
        (ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theString, CFSTR("+"))) == 0))
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  v11 = ArrayBySeparatingStrings;
  Count = CFArrayGetCount(ArrayBySeparatingStrings);
  if ((unint64_t)(Count - 4) < 0xFFFFFFFFFFFFFFFDLL
    || (v13 = Count,
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v11, 0),
        CFStringGetLength(ValueAtIndex) < 1))
  {
    APSLogErrorAt(0);
    CFRelease(v11);
    return 4294960591;
  }
  v15 = CFRetain(ValueAtIndex);
  if (v13 < 2)
  {
    v20 = 0;
    goto LABEL_20;
  }
  v16 = (const __CFString *)CFArrayGetValueAtIndex(v11, 1);
  Length = CFStringGetLength(v16);
  if (Length <= 0)
  {
    APSLogErrorAt(0);
    v21 = 0;
LABEL_44:
    v20 = 0;
    goto LABEL_45;
  }
  v18 = Length;
  v19 = CFRetain(v16);
  v20 = v19;
  if (v18 < 4)
  {
    if (v13 != 3)
    {
      v23 = 0;
      if (v19)
      {
LABEL_16:
        v24 = CFStringCreateWithFormat(v9, 0, CFSTR("%@+%@"), v15, v20);
        if (!a2)
        {
LABEL_22:
          if (a3)
          {
            v21 = 0;
            *a3 = v20;
            if (a4)
            {
LABEL_24:
              v20 = 0;
              *a4 = v23;
              goto LABEL_27;
            }
          }
          else
          {
            v21 = v20;
            if (a4)
              goto LABEL_24;
          }
          v20 = v23;
LABEL_27:
          v25 = 0;
          if (a5)
          {
            *a5 = v24;
            v24 = 0;
          }
          goto LABEL_29;
        }
LABEL_21:
        *a2 = v15;
        v15 = 0;
        goto LABEL_22;
      }
      goto LABEL_19;
    }
    v21 = v19;
    goto LABEL_14;
  }
  if (v13 != 3)
    goto LABEL_20;
  if (!v19)
  {
    v21 = 0;
LABEL_14:
    v22 = (const __CFString *)CFArrayGetValueAtIndex(v11, 2);
    if (CFStringGetLength(v22) > 3)
    {
      v23 = CFRetain(v22);
      v20 = v21;
      if (v21)
        goto LABEL_16;
LABEL_19:
      v20 = v23;
LABEL_20:
      v24 = CFRetain(v15);
      v23 = v20;
      v20 = 0;
      if (!a2)
        goto LABEL_22;
      goto LABEL_21;
    }
    APSLogErrorAt(0);
    goto LABEL_44;
  }
  APSLogErrorAt(0);
  v21 = 0;
LABEL_45:
  v24 = 0;
  v25 = 4294960591;
LABEL_29:
  CFRelease(v11);
  if (v15)
    CFRelease(v15);
  if (v21)
    CFRelease(v21);
  if (v20)
    CFRelease(v20);
  if (v24)
    CFRelease(v24);
  return v25;
}

BOOL APSIsMemberOfHTGroup()
{
  CFTypeRef v0;
  unsigned int v1;
  unsigned int v4;
  CFTypeRef cf;

  cf = 0;
  v4 = 0;
  APSCopyPersistentGroupInfo((const __CFString **)&cf, &v4, 0, 0, 0, 0, 0, 0);
  v0 = cf;
  v1 = v4;
  if (cf)
    CFRelease(cf);
  return v0 && v1 == 1;
}

void APSCopyPersistentGroupInfo(const __CFString **a1, unsigned int *a2, _QWORD *a3, _QWORD *a4, CFStringRef *a5, BOOL *a6, _QWORD *a7, _QWORD *a8)
{
  const __CFString *v11;
  unsigned int Int64;
  uint64_t v13;
  const void *v14;
  const __CFAllocator *v15;
  uint64_t v16;
  CFStringRef v17;
  const void *v18;
  int v19;
  const void *v20;
  const __CFString *v21;
  BOOL v22;
  const __CFString *v23;
  uint64_t v24;
  BOOL v25;
  const void *v26;
  const void *v27;
  CFStringRef v28;
  _QWORD *v34;
  unsigned int v35;

  if (a1)
    *a1 = 0;
  if (a3)
    *a3 = 0;
  if (a2)
    *a2 = 0;
  if (a4)
    *a4 = 0;
  if (a5)
    *a5 = 0;
  if (a6)
    *a6 = 0;
  if (a7)
    *a7 = 0;
  if (a8)
    *a8 = 0;
  v35 = 0;
  CFPreferencesAppSynchronize(CFSTR("com.apple.airplay"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.coremedia"));
  v11 = (const __CFString *)APSSettingsCopyValueEx(CFSTR("persistentGroupUUID"), 0, 0);
  v34 = a8;
  if (v11)
  {
    Int64 = APSSettingsGetInt64(CFSTR("persistentGroupType"), (int *)&v35);
    v13 = v35;
    if (v35 || (v14 = APSSettingsGetInt64(CFSTR("persistentGroupSize"), (int *)&v35), (v13 = v35) != 0))
    {
      APSLogErrorAt(v13);
      v28 = v11;
    }
    else
    {
      v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v16 = APSGetPersistentGroupModel();
      v17 = CFStringCreateWithFormat(v15, 0, CFSTR("%d"), v16);
      v18 = APSSettingsCopyValueEx(CFSTR("persistentGroupMemberID"), 0, 0);
      if (!v18 && Int64 == 1)
      {
        v19 = IsAppleTV();
        v20 = APSSettingsGetInt64(CFSTR("tightSyncIsGroupLeader"), 0);
        v21 = CFSTR("2");
        if (v20)
          v22 = 1;
        else
          v22 = v14 == (const void *)2;
        if (v22)
          v21 = CFSTR("1");
        if (v19)
          v23 = CFSTR("0");
        else
          v23 = v21;
        v18 = CFRetain(v23);
      }
      v24 = APSValidatePersistentGroupInfo((uint64_t)v11, (uint64_t)v14, Int64, (uint64_t)v18, (uint64_t)v17, 0);
      v35 = v24;
      if (!(_DWORD)v24)
      {
        v25 = APSSettingsGetInt64(CFSTR("persistentGroupIsGroupLeader"), 0) != 0;
        v26 = APSSettingsCopyValueEx(CFSTR("persistentGroupLeaderUUID"), 0, 0);
        v27 = APSSettingsCopyValueEx(CFSTR("groupName"), 0, 0);
        goto LABEL_41;
      }
      APSLogErrorAt(v24);
      CFRelease(v11);
      if (v18)
        CFRelease(v18);
      if (!v17)
      {
        v11 = 0;
        Int64 = 0;
        v14 = 0;
        v18 = 0;
        goto LABEL_40;
      }
      v28 = v17;
    }
    CFRelease(v28);
    v11 = 0;
  }
  Int64 = 0;
  v14 = 0;
  v18 = 0;
  v17 = 0;
LABEL_40:
  v25 = 0;
  v26 = 0;
  v27 = 0;
LABEL_41:
  if (a1)
  {
    *a1 = v11;
    v11 = 0;
  }
  if (a3)
    *a3 = v14;
  if (a2)
    *a2 = Int64;
  if (a4)
  {
    *a4 = v18;
    v18 = 0;
  }
  if (a5)
  {
    *a5 = v17;
    v17 = 0;
  }
  if (a6)
    *a6 = v25;
  if (a7)
  {
    *a7 = v26;
    v26 = 0;
  }
  if (v34)
  {
    *v34 = v27;
    v27 = 0;
  }
  if (v11)
    CFRelease(v11);
  if (v18)
    CFRelease(v18);
  if (v17)
    CFRelease(v17);
  if (v26)
    CFRelease(v26);
  if (v27)
    CFRelease(v27);
}

uint64_t APSGetPersistentGroupModel()
{
  uint64_t IntWithOverrideAndDefault;

  CFPreferencesAppSynchronize(CFSTR("com.apple.airplay"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.coremedia"));
  IntWithOverrideAndDefault = APSSettingsGetIntWithOverrideAndDefault(CFSTR("persistentGroupModel"), 0, 0);
  return APSSettingsGetIntWithOverrideAndDefault(CFSTR("simulatePersistentGroupModel"), 0, IntWithOverrideAndDefault);
}

uint64_t APSValidatePersistentGroupInfo(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;

  if (!a1)
  {
    v10 = 4294960591;
    goto LABEL_18;
  }
  if (a3 > 1)
  {
    v10 = 4294960561;
    goto LABEL_18;
  }
  if (!a3 && !APSIsPermanentSpeakerGroupingEnabled(a6))
    return 4294960561;
  if (a2 < 2)
  {
    v10 = 4294960561;
    goto LABEL_18;
  }
  if (!a4)
  {
    v10 = 4294960561;
    goto LABEL_18;
  }
  if (a3 == 1)
  {
    if ((unint64_t)a2 > 3)
    {
      v10 = 4294960561;
    }
    else
    {
      if (a5)
        return 0;
      v10 = 4294960561;
    }
LABEL_18:
    APSLogErrorAt(0);
    return v10;
  }
  return 0;
}

BOOL APSIsMemberOfStereoPair()
{
  _BOOL8 v0;
  CFTypeRef v1;
  unsigned int v3;
  CFTypeRef v4;
  CFTypeRef cf;

  v4 = 0;
  cf = 0;
  v3 = 0;
  if (APSIsAPMSpeaker_sCheckOnce != -1)
    dispatch_once(&APSIsAPMSpeaker_sCheckOnce, &__block_literal_global_9);
  if (!APSIsAPMSpeaker_sIsAPMSpeaker)
  {
    v0 = 0;
LABEL_8:
    v1 = v4;
    goto LABEL_9;
  }
  APSCopyPersistentGroupInfo((const __CFString **)&v4, &v3, 0, 0, 0, 0, 0, 0);
  v0 = 0;
  v1 = v4;
  if (!v4 && !v3)
  {
    APSCopyTightSyncInfo(&cf, 0, 0, 0, 0);
    v0 = cf != 0;
    if (cf)
    {
      CFRelease(cf);
      v0 = 1;
    }
    goto LABEL_8;
  }
LABEL_9:
  if (v1)
    CFRelease(v1);
  return v0;
}

void APSCopyTightSyncInfo(_QWORD *a1, BOOL *a2, _QWORD *a3, CFStringRef *a4, _QWORD *a5)
{
  CFTypeID TypeID;
  const void *v11;
  CFTypeID v12;
  BOOL v13;
  CFTypeID v14;
  const void *v15;
  const __CFAllocator *v16;
  uint64_t v17;
  CFStringRef v18;
  CFTypeID v19;
  const void *v20;

  CFPreferencesAppSynchronize(CFSTR("com.apple.airplay"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.coremedia"));
  TypeID = CFStringGetTypeID();
  v11 = APSSettingsCopyValueEx(CFSTR("tightSyncGroupUUID"), TypeID, 0);
  if (v11)
  {
    if (!a2)
      goto LABEL_3;
  }
  else
  {
    v12 = CFStringGetTypeID();
    v11 = APSSettingsCopyValueEx(CFSTR("tightSyncUUID"), v12, 0);
    if (!a2)
    {
LABEL_3:
      if (!a3)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  if (v11)
    v13 = APSSettingsGetInt64(CFSTR("tightSyncIsGroupLeader"), 0) != 0;
  else
    v13 = 0;
  *a2 = v13;
  if (!a3)
  {
LABEL_4:
    if (!a4)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_14:
  if (v11)
  {
    v14 = CFStringGetTypeID();
    v15 = APSSettingsCopyValueEx(CFSTR("tightSyncGroupLeaderUUID"), v14, 0);
  }
  else
  {
    v15 = 0;
  }
  *a3 = v15;
  if (!a4)
  {
LABEL_5:
    if (!a5)
      goto LABEL_6;
LABEL_22:
    if (v11)
    {
      v19 = CFStringGetTypeID();
      v20 = APSSettingsCopyValueEx(CFSTR("groupName"), v19, 0);
    }
    else
    {
      v20 = 0;
    }
    *a5 = v20;
    if (a1)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_18:
  if (v11)
  {
    v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v17 = APSGetTightSyncGroupModel();
    v18 = CFStringCreateWithFormat(v16, 0, CFSTR("%d"), v17);
  }
  else
  {
    v18 = 0;
  }
  *a4 = v18;
  if (a5)
    goto LABEL_22;
LABEL_6:
  if (a1)
  {
LABEL_7:
    *a1 = v11;
    return;
  }
LABEL_26:
  if (v11)
    CFRelease(v11);
}

uint64_t APSGetTightSyncGroupModel()
{
  uint64_t IntWithOverrideAndDefault;

  CFPreferencesAppSynchronize(CFSTR("com.apple.airplay"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.coremedia"));
  IntWithOverrideAndDefault = APSSettingsGetIntWithOverrideAndDefault(CFSTR("tightSyncGroupModel"), 0, 0);
  return APSSettingsGetIntWithOverrideAndDefault(CFSTR("simulateTightSyncGroupModel"), 0, IntWithOverrideAndDefault);
}

BOOL APSIsMemberOfPersistentGroup()
{
  CFTypeRef v0;
  CFTypeRef cf;

  cf = 0;
  APSCopyClusterInfo(&cf, 0, 0, 0, 0);
  v0 = cf;
  if (cf)
    CFRelease(cf);
  return v0 != 0;
}

void APSCopyClusterInfo(_QWORD *a1, uint64_t *a2, int *a3, _QWORD *a4, _QWORD *a5)
{
  CFTypeRef v10;
  int v11;
  int v12;
  uint64_t v13;
  CFTypeRef v14;
  CFTypeRef v15;
  const __CFString *v16;
  CFTypeRef v17;
  BOOL v18;
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef v21;
  uint64_t v22;
  unsigned int v23;
  CFTypeRef cf;

  cf = 0;
  v23 = 0;
  v21 = 0;
  v22 = 0;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  v17 = 0;
  if (a1)
    *a1 = 0;
  if (a2)
    *a2 = 0;
  if (a3)
    *a3 = 0;
  if (a4)
    *a4 = 0;
  if (a5)
    *a5 = 0;
  APSCopyPersistentGroupInfo((const __CFString **)&cf, &v23, &v22, &v21, (CFStringRef *)&v20, 0, 0, 0);
  if (cf)
  {
    v10 = CFRetain(cf);
    if (v23)
      v11 = 0;
    else
      v11 = 3;
    if (v23 == 1)
      v12 = 2;
    else
      v12 = v11;
    v13 = v22;
    v14 = CFRetain(v21);
    v15 = v20;
    if (v20)
      CFRetain(v20);
    if (a1)
    {
LABEL_21:
      *a1 = v10;
      v10 = 0;
    }
  }
  else
  {
    APSCopyTightSyncInfo(&v19, &v18, 0, (CFStringRef *)&v17, 0);
    if (!v19)
    {
      v10 = 0;
      v14 = 0;
      goto LABEL_30;
    }
    v10 = CFRetain(v19);
    if (v18)
      v16 = CFSTR("0");
    else
      v16 = CFSTR("1");
    v14 = CFRetain(v16);
    v15 = CFRetain(v17);
    v12 = 1;
    v13 = 2;
    if (a1)
      goto LABEL_21;
  }
  if (a2)
    *a2 = v13;
  if (a3)
    *a3 = v12;
  if (a4)
  {
    *a4 = v14;
    v14 = 0;
  }
  if (a5)
  {
    *a5 = v15;
LABEL_30:
    v15 = 0;
  }
  if (cf)
    CFRelease(cf);
  if (v21)
    CFRelease(v21);
  if (v20)
    CFRelease(v20);
  if (v19)
    CFRelease(v19);
  if (v17)
    CFRelease(v17);
  if (v10)
    CFRelease(v10);
  if (v14)
    CFRelease(v14);
  if (v15)
    CFRelease(v15);
}

uint64_t APSHasSamePersistentGroupUUID(uint64_t a1)
{
  uint64_t v1;
  CFTypeRef cf;

  v1 = a1;
  cf = 0;
  if (a1)
  {
    APSCopyClusterInfo(&cf, 0, 0, 0, 0);
    v1 = FigCFEqual();
    if (cf)
      CFRelease(cf);
  }
  return v1;
}

uint64_t APSIsAPValeriaScreenSender()
{
  if (APSIsAPValeriaScreenSender_once != -1)
    dispatch_once(&APSIsAPValeriaScreenSender_once, &__block_literal_global_72);
  return APSIsAPValeriaScreenSender_result;
}

uint64_t APSHasUDPMirroringSenderSupport()
{
  if (APSHasUDPMirroringSenderSupport_sCheckOnce != -1)
    dispatch_once(&APSHasUDPMirroringSenderSupport_sCheckOnce, &__block_literal_global_76);
  return APSHasUDPMirroringSenderSupport_sIsSupported;
}

uint64_t APSHasUDPMirroringOutOfProcessSupport()
{
  if (APSHasUDPMirroringOutOfProcessSupport_sCheckOnce != -1)
    dispatch_once(&APSHasUDPMirroringOutOfProcessSupport_sCheckOnce, &__block_literal_global_107);
  return APSHasUDPMirroringOutOfProcessSupport_sIsSupported;
}

uint64_t APSHasUHDMirroringSupport()
{
  if (APSHasUDPMirroringSenderSupport_sCheckOnce != -1)
    dispatch_once(&APSHasUDPMirroringSenderSupport_sCheckOnce, &__block_literal_global_76);
  return APSHasUDPMirroringSenderSupport_sIsSupported;
}

uint64_t APSHasUDPMirroringReceiverSupport()
{
  if (APSHasUDPMirroringReceiverSupport_sCheckOnce != -1)
    dispatch_once(&APSHasUDPMirroringReceiverSupport_sCheckOnce, &__block_literal_global_115);
  return APSHasUDPMirroringReceiverSupport_sIsSupported;
}

uint64_t APSHas4K60444SenderSupport()
{
  if (APSHas4K60444SenderSupport_sCheckOnce != -1)
    dispatch_once(&APSHas4K60444SenderSupport_sCheckOnce, &__block_literal_global_118);
  return APSHas4K60444SenderSupport_sIsSupported;
}

uint64_t APSHasHDRSenderSupport()
{
  if (APSHasHDRSenderSupport_once != -1)
    dispatch_once(&APSHasHDRSenderSupport_once, &__block_literal_global_122);
  return APSHasHDRSenderSupport_supported;
}

BOOL APSIsPersistentGroupSDBCapable()
{
  return APSGetPersistentGroupModel() == 0;
}

uint64_t APSIsATVInHTGroup()
{
  uint64_t result;

  result = IsAppleTV();
  if ((_DWORD)result)
    return APSIsMemberOfHTGroup();
  return result;
}

unint64_t APSGetDeviceID(int a1, unsigned __int8 *a2, int *a3)
{
  unint64_t PrimaryMACAddress;
  uint64_t v6;
  CFStringRef v7;
  uint64_t CString;
  unint64_t RandomDeviceID;
  unint64_t v12;
  int v14;
  int v15;
  int v16;
  CFStringRef theString;
  char buffer[16];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  switch(a1)
  {
    case 0:
    case 4:
      theString = 0;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v25 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      *(_OWORD *)buffer = 0u;
      PrimaryMACAddress = atomic_load(&systemUtils_getDeviceIDFromSystemPairingID_sScalarDeviceID);
      if (PrimaryMACAddress)
      {
        v15 = 0;
        *a2 = BYTE5(PrimaryMACAddress);
        a2[1] = BYTE4(PrimaryMACAddress);
        a2[2] = BYTE3(PrimaryMACAddress);
        a2[3] = BYTE2(PrimaryMACAddress);
        a2[4] = BYTE1(PrimaryMACAddress);
        a2[5] = PrimaryMACAddress;
        goto LABEL_16;
      }
      v6 = APSCopyPairingIdentity(1, &theString);
      if ((_DWORD)v6)
      {
        v14 = v6;
        goto LABEL_29;
      }
      v7 = theString;
      CString = CFStringGetCString(theString, buffer, 256, 0x8000100u);
      if ((_DWORD)CString)
      {
        v6 = HexToData();
        if (!(_DWORD)v6)
        {
          APSLogErrorAt(0);
          PrimaryMACAddress = 0;
          v15 = -6717;
LABEL_16:
          v7 = theString;
          goto LABEL_17;
        }
        v14 = v6;
LABEL_29:
        APSLogErrorAt(v6);
        v15 = v14;
        PrimaryMACAddress = 0;
        goto LABEL_16;
      }
      APSLogErrorAt(CString);
      PrimaryMACAddress = 0;
      v15 = -6762;
LABEL_17:
      v16 = v15;
      if (v7)
        CFRelease(v7);
LABEL_21:
      if (a3)
        *a3 = v16;
      if (v16)
        return 0;
      else
        return PrimaryMACAddress;
    case 1:
      PrimaryMACAddress = GetPrimaryMACAddress();
      goto LABEL_21;
    case 2:
      PrimaryMACAddress = systemUtils_generateRandomDeviceID(a2);
      goto LABEL_21;
    case 3:
      if (!atomic_load(&systemUtils_getProcessStableRandomDeviceID_sScalarDeviceID))
      {
        RandomDeviceID = systemUtils_generateRandomDeviceID(a2);
        while (!__ldaxr(&systemUtils_getProcessStableRandomDeviceID_sScalarDeviceID))
        {
          if (!__stlxr(RandomDeviceID, &systemUtils_getProcessStableRandomDeviceID_sScalarDeviceID))
            goto LABEL_20;
        }
        __clrex();
      }
LABEL_20:
      v12 = atomic_load(&systemUtils_getProcessStableRandomDeviceID_sScalarDeviceID);
      *a2 = BYTE5(v12);
      a2[1] = BYTE4(v12);
      a2[2] = BYTE3(v12);
      a2[3] = BYTE2(v12);
      a2[4] = BYTE1(v12);
      a2[5] = v12;
      PrimaryMACAddress = atomic_load(&systemUtils_getProcessStableRandomDeviceID_sScalarDeviceID);
      goto LABEL_21;
    default:
      PrimaryMACAddress = 0;
      goto LABEL_21;
  }
}

unint64_t systemUtils_generateRandomDeviceID(unsigned __int8 *a1)
{
  uint64_t v2;

  arc4random_buf(a1, 6uLL);
  v2 = *a1 & 0xFC | 2;
  *a1 = v2;
  return (v2 << 40) | ((unint64_t)a1[1] << 32) | ((unint64_t)a1[2] << 24) | ((unint64_t)a1[3] << 16) | ((unint64_t)a1[4] << 8) | a1[5];
}

uint64_t APSCopyPairingIdentity(int a1, CFStringRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  CFStringRef v6;

  v4 = PairingSessionCreate();
  if ((_DWORD)v4)
  {
    v5 = v4;
LABEL_8:
    APSLogErrorAt(v4);
    return v5;
  }
  if (a1)
    PairingSessionSetFlags();
  PairingSessionSetKeychainInfo();
  v4 = PairingSessionCopyIdentity();
  v5 = v4;
  if ((_DWORD)v4)
    goto LABEL_8;
  v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0x8000100u);
  free(0);
  *a2 = v6;
  return v5;
}

uint64_t APSScreenGetMediaPresentationParams(double a1, double a2, uint64_t a3, int a4, int a5, int a6, double *a7, int *a8)
{
  uint64_t result;
  char v16;
  BOOL v17;
  double v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  int v23;

  result = APSSettingsGetIntWithOverrideAndDefault(CFSTR("limit4KFPSBasedOnConnectionLatencyHint"), 0, 1);
  v16 = result;
  if (!a5)
  {
    v17 = a2 * a1 > 8294400.0;
    if (a2 * a1 > 8294400.0)
      a1 = 3840.0;
    v18 = 2160.0;
    goto LABEL_9;
  }
  result = FigCFEqual();
  if ((_DWORD)result)
  {
    v17 = a2 * a1 > 2073600.0;
    if (a2 * a1 > 2073600.0)
      a1 = 1920.0;
    v18 = 1080.0;
LABEL_9:
    if (v17)
      a2 = v18;
    v19 = a4 < 60;
    v20 = 60;
LABEL_12:
    if (v19)
      v21 = a4;
    else
      v21 = v20;
    goto LABEL_15;
  }
  result = FigCFEqual();
  if (a2 * a1 > 8294400.0)
  {
    a1 = 3840.0;
    a2 = 2160.0;
  }
  if (a4 >= 60)
    v21 = 60;
  else
    v21 = a4;
  if ((_DWORD)result)
  {
    if (a1 * a2 <= 2073600.0)
      goto LABEL_15;
    v19 = a4 < 30;
    v20 = 30;
    goto LABEL_12;
  }
  if (a1 * a2 > 2073600.0)
  {
    if (senderSupports4K60HDR_once != -1)
      dispatch_once(&senderSupports4K60HDR_once, &__block_literal_global_252);
    result = APSSettingsGetIntWithOverrideAndDefault(CFSTR("senderSupports4k60HDR"), 0, senderSupports4K60HDR_supported);
    v22 = result != 0;
    senderSupports4K60HDR_supported = (_DWORD)result != 0;
    if (gLogCategory_APSSystemUtils <= 50)
    {
      if (gLogCategory_APSSystemUtils != -1
        || (result = _LogCategory_Initialize(), v22 = senderSupports4K60HDR_supported, (_DWORD)result))
      {
        result = LogPrintF();
        v22 = senderSupports4K60HDR_supported;
      }
    }
    if (v22)
      v23 = 60;
    else
      v23 = 30;
    if (v23 >= a4)
      v21 = a4;
    else
      v21 = v23;
  }
LABEL_15:
  if (a6 == 1 && v16 && a2 * a1 > 2073600.0)
  {
    if (v21 >= 30)
      v21 = 30;
    if (gLogCategory_APSSystemUtils <= 50)
    {
      if (gLogCategory_APSSystemUtils != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
        result = LogPrintF();
    }
  }
  if (a7)
  {
    *a7 = a1;
    a7[1] = a2;
  }
  if (a8)
    *a8 = v21;
  return result;
}

void __senderSupports4K60HDR_block_invoke()
{
  uint64_t v0;
  _OWORD v1[4];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  if (APSHasHDRSenderSupport_once != -1)
    dispatch_once(&APSHasHDRSenderSupport_once, &__block_literal_global_122);
  senderSupports4K60HDR_supported = APSHasHDRSenderSupport_supported;
  if (APSHasHDRSenderSupport_supported)
  {
    memset(v1, 0, sizeof(v1));
    GetDeviceModelString();
    v0 = 0;
    while (strncmp((const char *)v1, gUserVersionOverride_block_invoke_2_unsupportedModels[v0], 0x40uLL))
    {
      if (++v0 == 36)
        return;
    }
    senderSupports4K60HDR_supported = 0;
  }
}

BOOL APSIsLinkLocalInterface(const char *a1)
{
  uint64_t v2;
  ifaddrs *v3;
  ifaddrs *v4;
  sockaddr *ifa_addr;
  int CFPreferenceNumberWithDefault;
  ifaddrs *v8;

  v8 = 0;
  if (!a1)
  {
    APSLogErrorAt(0);
    goto LABEL_20;
  }
  if (!getifaddrs(&v8))
  {
LABEL_5:
    v3 = v8;
    if (v8)
    {
      v4 = v8;
      while (1)
      {
        if (!strcmp(a1, v4->ifa_name))
        {
          ifa_addr = v4->ifa_addr;
          if (ifa_addr->sa_family == 2
            && ifa_addr->sa_data[2] == 169
            && ifa_addr->sa_data[3] == 254)
          {
            break;
          }
        }
        v4 = v4->ifa_next;
        if (!v4)
          goto LABEL_15;
      }
      LODWORD(v4) = 1;
      if (!v3)
        goto LABEL_21;
LABEL_16:
      MEMORY[0x1CAA42EC4](v3);
      goto LABEL_21;
    }
LABEL_20:
    LODWORD(v4) = 0;
    goto LABEL_21;
  }
  if (*__error())
  {
    v2 = *__error();
    if (!(_DWORD)v2)
      goto LABEL_5;
  }
  else
  {
    v2 = 4294960596;
  }
  APSLogErrorAt(v2);
  LODWORD(v4) = 0;
  v3 = v8;
LABEL_15:
  if (v3)
    goto LABEL_16;
LABEL_21:
  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  if ((_DWORD)v4 != (CFPreferenceNumberWithDefault != 0)
    && gLogCategory_APSSystemUtils <= 50
    && (gLogCategory_APSSystemUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return CFPreferenceNumberWithDefault != 0;
}

uint64_t APSHasNANSupport()
{
  if (APSHasNANSupport_sHasNANSupportOnce != -1)
    dispatch_once(&APSHasNANSupport_sHasNANSupportOnce, &__block_literal_global_142);
  return APSHasNANSupport_sHasNANSupport;
}

uint64_t APSCanSendToAltReceiver()
{
  if (APSCanSendToAltReceiver_sCanSendToAltReceiverOnce != -1)
    dispatch_once(&APSCanSendToAltReceiver_sCanSendToAltReceiverOnce, &__block_literal_global_145);
  return APSCanSendToAltReceiver_sCanSendToAltReceiver;
}

uint64_t APSCopyBootUUID(CFStringRef *a1)
{
  uint64_t v2;
  CFStringRef v3;
  CFStringRef v4;
  size_t v6;
  char cStr[16];
  _BYTE v8[21];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = 37;
  if (!a1)
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  *(_OWORD *)cStr = 0u;
  memset(v8, 0, sizeof(v8));
  if (!sysctlbyname("kern.bootsessionuuid", cStr, &v6, 0, 0))
    goto LABEL_5;
  if (!*__error())
  {
    v2 = 4294960596;
    goto LABEL_10;
  }
  v2 = *__error();
  if ((_DWORD)v2)
  {
LABEL_10:
    APSLogErrorAt(v2);
    return v2;
  }
LABEL_5:
  v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0x8000100u);
  if (v3)
  {
    v4 = v3;
    if (gLogCategory_APSSystemUtils <= 50
      && (gLogCategory_APSSystemUtils != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v2 = 0;
    *a1 = v4;
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960568;
  }
  return v2;
}

uint64_t APSCopyDeviceName()
{
  return MGCopyAnswer();
}

UInt8 *APSGetDeviceNameCString(UInt8 *a1, uint64_t a2)
{
  UInt8 *v2;
  const __CFString *v4;
  const __CFString *v5;
  uint64_t Length;
  CFIndex usedBufLen;
  CFRange v9;

  v2 = a1;
  usedBufLen = 0;
  if (a1)
  {
    v4 = (const __CFString *)MGCopyAnswer();
    if (v4)
    {
      v5 = v4;
      Length = CFStringGetLength(v4);
      if (Length >= 1
        && (v9.length = Length, v9.location = 0, CFStringGetBytes(v5, v9, 0x8000100u, 0, 0, v2, a2 - 1, &usedBufLen)))
      {
        v2[usedBufLen] = 0;
      }
      else
      {
        v2 = 0;
      }
      CFRelease(v5);
    }
    else
    {
      APSLogErrorAt(0);
      return 0;
    }
  }
  else
  {
    APSLogErrorAt(0);
  }
  return v2;
}

uint64_t APSPersistentGroupTypeToClusterType(int a1)
{
  unsigned int v1;

  if (a1)
    v1 = 0;
  else
    v1 = 3;
  if (a1 == 1)
    return 2;
  else
    return v1;
}

uint64_t APSCopyDefaultGroupUUID(_QWORD *a1)
{
  CFTypeRef v2;
  uint64_t v3;
  uint64_t v4;
  CFTypeRef cf;

  cf = 0;
  APSCopyClusterInfo(&cf, 0, 0, 0, 0);
  v2 = cf;
  if (cf)
    goto LABEL_4;
  v3 = APSCopyBootUUID((CFStringRef *)&cf);
  if (!(_DWORD)v3)
  {
    v2 = cf;
LABEL_4:
    v4 = 0;
    *a1 = v2;
    return v4;
  }
  v4 = v3;
  APSLogErrorAt(v3);
  if (cf)
    CFRelease(cf);
  return v4;
}

char *APSGetDeviceClassString(char *a1, size_t a2)
{
  int DeviceClass;
  const char *v5;

  DeviceClass = GestaltGetDeviceClass();
  v5 = "iPhone";
  switch(DeviceClass)
  {
    case 1:
      break;
    case 2:
      v5 = "iPod";
      break;
    case 3:
      v5 = "iPad";
      break;
    case 4:
      v5 = "AppleTV";
      break;
    case 5:
      v5 = "FPGA";
      break;
    case 6:
      v5 = "Watch";
      break;
    case 7:
      v5 = "HomePod";
      break;
    default:
      if (DeviceClass == 100)
        v5 = "Mac";
      else
        v5 = "Unknown";
      break;
  }
  strlcpy(a1, v5, a2);
  return a1;
}

void APSClearLegacyAirPlayPairingInfo()
{
  const void *v0;
  const void *v1;

  v1 = 0;
  if (gLogCategory_APSSystemUtils <= 50
    && (gLogCategory_APSSystemUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!gQblcfSzZBQsYCCV((uint64_t *)&v1, 0))
  {
    v0 = v1;
    PHDcW8((uint64_t)v1, 0);
    KeychainDeleteFormatted();
    CFRelease(v0);
  }
  if (!PairingSessionCreate())
  {
    PairingSessionSetKeychainInfo();
    PairingSessionDeletePeer();
    PairingSessionDeleteIdentity();
    CFRelease(0);
  }
}

void APSEnsureCanInitiatePlayback()
{
  void *v0;
  void *v1;
  uint64_t v2;

  if (APSEnsureCanInitiatePlayback_once != -1)
    dispatch_once(&APSEnsureCanInitiatePlayback_once, &__block_literal_global_181);
  if (APSEnsureCanInitiatePlayback_bundleID)
  {
    v2 = 0;
    v0 = (void *)objc_msgSend(MEMORY[0x1E0D48560], "sharedAVSystemController");
    objc_msgSend(v0, "setAttribute:forKey:error:", APSEnsureCanInitiatePlayback_bundleID, *MEMORY[0x1E0D47E80], &v2);
    if (v2)
    {
      if (gLogCategory_APSSystemUtils <= 90
        && (gLogCategory_APSSystemUtils != -1 || _LogCategory_Initialize()))
      {
LABEL_10:
        LogPrintF();
      }
    }
    else
    {
      v1 = (void *)objc_msgSend(MEMORY[0x1E0D48560], "sharedAVSystemController");
      objc_msgSend((id)objc_msgSend(v1, "attributeForKey:", *MEMORY[0x1E0D47F00]), "BOOLValue");
      if (gLogCategory_APSSystemUtils <= 50
        && (gLogCategory_APSSystemUtils != -1 || _LogCategory_Initialize()))
      {
        goto LABEL_10;
      }
    }
  }
}

CFStringRef APSCopyPSGDeviceModelString()
{
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;

  GetDeviceModelString();
  if (v9 == 0x6363416F69647541 && v10 == 0x2C3179726F737365 && v11 == 49)
  {
    v7 = 0;
  }
  else if (v9 == 0x6363416F69647541 && v10 == 0x2C3579726F737365 && v11 == 49)
  {
    v7 = 1;
  }
  else
  {
    v6 = v9 == 0x6363416F69647541 && v10 == 0x2C3679726F737365 && v11 == 49;
    v7 = (2 * v6);
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%d"), v7);
}

CFStringRef APSCopyPersistentGroupModelString()
{
  const __CFAllocator *v0;
  uint64_t v1;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = APSGetPersistentGroupModel();
  return CFStringCreateWithFormat(v0, 0, CFSTR("%d"), v1);
}

uint64_t APSGetClusterModelForTightSyncGroupModel(int a1)
{
  if (a1 == 2)
    return 2;
  else
    return a1 == 1;
}

uint64_t APSGetClusterModelForPersistentGroupModel(int a1)
{
  if (a1 == 2)
    return 2;
  else
    return a1 == 1;
}

const __CFString *APSGetClusterModelNameForClusterTypeAndModel(int a1, int a2)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = CFSTR("AppleTVHTCluster");
  if (a2 == 1)
    v2 = CFSTR("AudioAccessory5,1-AppleTVHTCluster");
  if (a2 == 2)
    v2 = CFSTR("AudioAccessory6,1-AppleTVHTCluster");
  v3 = CFSTR("AudioAccessory1,1-TightSyncCluster");
  if (a2 == 1)
    v3 = CFSTR("AudioAccessory5,1-TightSyncCluster");
  if (a2 == 2)
    v3 = CFSTR("AudioAccessory6,1-TightSyncCluster");
  if (a1 != 1)
    v3 = 0;
  if (a1 != 2)
    v2 = v3;
  if (a1 == 3)
    return CFSTR("GenericPersistentGroup");
  else
    return v2;
}

const __CFString *APSClusterTypeToDescriptionString(int a1)
{
  const __CFString *v1;

  v1 = CFSTR("PSG");
  if (a1 == 2)
    v1 = CFSTR("HT");
  if (a1 == 1)
    return CFSTR("Stereo Pair");
  else
    return v1;
}

uint64_t APSClusterTypeToFigEndpointDescriptorClusterType(int a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = MEMORY[0x1E0D48AB0];
  v2 = MEMORY[0x1E0D48AA8];
  if (a1 != 2)
    v2 = MEMORY[0x1E0D48AB8];
  if (a1 != 1)
    v1 = v2;
  return *(_QWORD *)v1;
}

uint64_t APSIsDirectLinkInterface(uint64_t a1)
{
  uint64_t v1;
  const __SCNetworkInterface *v2;
  uint64_t IsThunderbolt;
  uint64_t v4;
  const __CFString *InterfaceType;

  if (!a1 || (v1 = _SCNetworkInterfaceCreateWithBSDName()) == 0)
  {
    APSLogErrorAt(0);
    return 0;
  }
  v2 = (const __SCNetworkInterface *)v1;
  IsThunderbolt = _SCNetworkInterfaceIsThunderbolt();
  if ((_DWORD)IsThunderbolt)
  {
    v4 = IsThunderbolt;
    if (gLogCategory_APSSystemUtils > 50
      || gLogCategory_APSSystemUtils == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_18;
    }
  }
  else
  {
    InterfaceType = SCNetworkInterfaceGetInterfaceType(v2);
    if (CFStringCompare(InterfaceType, (CFStringRef)*MEMORY[0x1E0CE8BC0], 0)
      || (_SCNetworkInterfaceGetFamilySubType(), CFGetInt64() != 1)
      || (_SCNetworkInterfaceGetIOPath(), !FigCFStringFind()))
    {
      v4 = 0;
      goto LABEL_18;
    }
    if (gLogCategory_APSSystemUtils > 50)
    {
      v4 = 1;
      goto LABEL_18;
    }
    if (gLogCategory_APSSystemUtils == -1)
    {
      v4 = 1;
      if (!_LogCategory_Initialize())
        goto LABEL_18;
    }
    else
    {
      v4 = 1;
    }
  }
  LogPrintF();
LABEL_18:
  CFRelease(v2);
  return v4;
}

uint64_t APSIsEthernetInterface(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  uint64_t IsPhysicalEthernet;

  if (a1 && (v1 = _SCNetworkInterfaceCreateWithBSDName()) != 0)
  {
    v2 = (const void *)v1;
    IsPhysicalEthernet = _SCNetworkInterfaceIsPhysicalEthernet();
    CFRelease(v2);
    return IsPhysicalEthernet;
  }
  else
  {
    APSLogErrorAt(0);
    return 0;
  }
}

uint64_t APSShouldStartAdvertistingForAirPlaySourceBeacon(void *a1, int a2, int a3)
{
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v10;

  v6 = objc_msgSend(a1, "airplaySourceFlags");
  v7 = v6;
  v8 = 1;
  if (a2 && (v6 & 4) == 0)
  {
    if (gLogCategory_APSSystemUtils <= 30
      && (gLogCategory_APSSystemUtils != -1 || _LogCategory_Initialize()))
    {
      v10 = objc_msgSend(a1, "identifier");
      LogPrintF();
    }
    v8 = 0;
  }
  if (a3 && (v7 & 0x10) != 0)
  {
    if ((objc_msgSend(a1, "deviceFlags") & 0x80) != 0)
    {
      if (gLogCategory_APSSystemUtils <= 30
        && (gLogCategory_APSSystemUtils != -1 || _LogCategory_Initialize()))
      {
        objc_msgSend(a1, "accountID", v10);
        LogPrintF();
      }
    }
    else
    {
      if (gLogCategory_APSSystemUtils <= 30
        && (gLogCategory_APSSystemUtils != -1 || _LogCategory_Initialize()))
      {
        objc_msgSend(a1, "identifier", v10);
        LogPrintF();
      }
      return 0;
    }
  }
  return v8;
}

uint64_t APSGetAccessControlConfig(unsigned int *a1, _DWORD *a2)
{
  int v4;
  unsigned int Int64;
  unsigned int v6;
  BOOL v7;
  int IntWithOverrideAndDefault;
  unsigned int v10;

  v10 = 0;
  CFPreferencesAppSynchronize(CFSTR("com.apple.airplay"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.coremedia"));
  v4 = 0;
  Int64 = APSSettingsGetInt64(CFSTR("accessControlType"), (int *)&v10);
  v6 = v10;
  v10 = 0;
  v7 = Int64 != 1 && v6 == 0;
  if (v7
    || (IntWithOverrideAndDefault = APSSettingsGetIntWithOverrideAndDefault(CFSTR("accessControlLevel"), 0, 0),
        v4 = IntWithOverrideAndDefault,
        !v6))
  {
    if (!Int64 || Int64 == 2)
      goto LABEL_12;
    if (Int64 != 1)
      goto LABEL_16;
  }
  else if ((IntWithOverrideAndDefault - 1) >= 2)
  {
    Int64 = 2;
LABEL_12:
    if (a1)
      *a1 = Int64;
    if (a2)
      *a2 = v4;
    return v10;
  }
  Int64 = 1;
  if ((v4 - 3) > 0xFFFFFFFD)
    goto LABEL_12;
LABEL_16:
  if (gLogCategory_APSSystemUtils <= 90
    && (gLogCategory_APSSystemUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return -6705;
}

BOOL APSGetP2PAllow()
{
  const void *Int64;
  _BOOL8 result;
  BOOL v2;
  int v3;
  int v4;

  v4 = 0;
  v3 = 0;
  Int64 = APSSettingsGetInt64(CFSTR("p2pAllow"), &v3);
  result = 0;
  if (v3)
    v2 = 0;
  else
    v2 = Int64 == 0;
  if (!v2)
  {
    APSCopyClusterInfo(0, 0, &v4, 0, 0);
    return (v4 & 0xFFFFFFFD) != 1;
  }
  return result;
}

uint64_t APSSystemSupportsWiFiUDM()
{
  return 1;
}

double APSGetMaxSizePreservingAspectRatio(double result, double a2, double a3, double a4)
{
  double v5;
  double v6;

  if (result > a3 || a2 > a4)
  {
    v5 = a3 / result;
    v6 = a4 / a2;
    if (v5 >= v6)
      v5 = v6;
    return (double)(int)(result * v5 + 0.5);
  }
  return result;
}

uint64_t APSIsValidDeviceEnclosureColorString(CFStringRef str)
{
  uint64_t v1;
  uint64_t IntValue;
  CFStringRef v3;
  CFStringRef v4;

  v1 = (uint64_t)str;
  if (!str)
    return v1;
  IntValue = CFStringGetIntValue(str);
  if ((IntValue & 0x80000000) != 0)
  {
    if (gLogCategory_APSSystemUtils > 60
      || gLogCategory_APSSystemUtils == -1 && !_LogCategory_Initialize())
    {
      return 0;
    }
LABEL_14:
    LogPrintF();
    return 0;
  }
  if (IntValue >= 0x3E8)
  {
    if (gLogCategory_APSSystemUtils > 60
      || gLogCategory_APSSystemUtils == -1 && !_LogCategory_Initialize())
    {
      return 0;
    }
    goto LABEL_14;
  }
  v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%d"), IntValue);
  if (!v3)
  {
    APSLogErrorAt(0);
    return 0;
  }
  v4 = v3;
  if (CFEqual((CFTypeRef)v1, v3))
  {
    v1 = 1;
  }
  else
  {
    if (gLogCategory_APSSystemUtils <= 60
      && (gLogCategory_APSSystemUtils != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v1 = 0;
  }
  CFRelease(v4);
  return v1;
}

uint64_t APSIsInAirPlaySenderSystemServer()
{
  if (APSIsInAirPlaySenderSystemServer_sOnceToken != -1)
    dispatch_once(&APSIsInAirPlaySenderSystemServer_sOnceToken, &__block_literal_global_243);
  return APSIsInAirPlaySenderSystemServer_sIsInAirPlaySenderSystemServer;
}

uint64_t APSIsInAudioSystemServer()
{
  if (APSIsInAudioSystemServer_sOnceToken != -1)
    dispatch_once(&APSIsInAudioSystemServer_sOnceToken, &__block_literal_global_244);
  return APSIsInAudioSystemServer_sIsInAudioSystemServer;
}

double APSGetCPULoadAverage(_QWORD *a1)
{
  int v2;
  double result;
  double v4[2];

  v4[1] = *(double *)MEMORY[0x1E0C80C00];
  v4[0] = 0.0;
  if (APSGetCPULoadAverage_sOnceToken != -1)
    dispatch_once(&APSGetCPULoadAverage_sOnceToken, &__block_literal_global_245);
  v2 = getloadavg(v4, 1);
  result = v4[0];
  if (a1)
    *a1 = APSGetCPULoadAverage_sProcessorCount;
  if (v2 != 1)
    return 0.0;
  return result;
}

uint64_t APSGetAllowPersistentGroupsOnInfra()
{
  if (APSGetAllowPersistentGroupsOnInfra_sAllowPersistentGroupsOnInfraOnce != -1)
    dispatch_once(&APSGetAllowPersistentGroupsOnInfra_sAllowPersistentGroupsOnInfraOnce, &__block_literal_global_246);
  return APSGetAllowPersistentGroupsOnInfra_sAllowPersistentGroupsOnInfra;
}

uint64_t APSDispatchSectionGetTypeID()
{
  if (gAPSDispatchSectionInitOnce != -1)
    dispatch_once_f(&gAPSDispatchSectionInitOnce, 0, (dispatch_function_t)_APSDispatchSectionGetTypeID);
  return gAPSDispatchSectionTypeID;
}

uint64_t _APSDispatchSectionGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSDispatchSectionTypeID = result;
  return result;
}

uint64_t _APSDispatchSectionFinalize()
{
  return FigSimpleMutexDestroy();
}

uint64_t APSDispatchSectionCreate(_QWORD *a1)
{
  _QWORD *Instance;
  const void *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;

  if (gAPSDispatchSectionInitOnce != -1)
    dispatch_once_f(&gAPSDispatchSectionInitOnce, 0, (dispatch_function_t)_APSDispatchSectionGetTypeID);
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  if (Instance)
  {
    v3 = Instance;
    Instance[4] = 0;
    v4 = Instance + 4;
    Instance[2] = 0;
    Instance[3] = 0;
    Instance[5] = Instance + 4;
    v5 = FigSimpleMutexCreate();
    *(v4 - 2) = v5;
    if (v5)
    {
      result = 0;
      *a1 = v3;
      return result;
    }
    CFRelease(v3);
  }
  return 4294960568;
}

uint64_t APSDispatchSectionEnter(uint64_t a1, NSObject *a2, void (__cdecl *a3)(void *), void *a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  v8 = 4294960591;
  if (a2 && a3)
  {
    if (*(_BYTE *)(a1 + 24))
    {
      v9 = malloc_type_malloc(0x30uLL, 0x10A0040C5FEEBA1uLL);
      if (v9)
      {
        v10 = v9;
        v9[1] = a2;
        v9[2] = 0;
        *((_DWORD *)v9 + 6) = 0;
        v9[4] = a3;
        v9[5] = a4;
        dispatch_retain(a2);
        v8 = 0;
        *v10 = 0;
        **(_QWORD **)(a1 + 40) = v10;
        *(_QWORD *)(a1 + 40) = v10;
      }
      else
      {
        v8 = 4294960568;
      }
    }
    else
    {
      CFRetain((CFTypeRef)a1);
      *(_BYTE *)(a1 + 24) = 1;
      dispatch_async_f(a2, a4, a3);
      v8 = 0;
    }
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
  return v8;
}

uint64_t APSDispatchSectionEnterWithPriorityDispatcher(uint64_t a1, const void *a2, int a3, NSObject *a4, NSObject *a5)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  CFTypeRef v13;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  v10 = 4294960591;
  if (a2 && a4)
  {
    if (*(_BYTE *)(a1 + 24))
    {
      v11 = malloc_type_malloc(0x30uLL, 0x10A0040C5FEEBA1uLL);
      if (v11)
      {
        v12 = v11;
        v13 = CFRetain(a2);
        v10 = 0;
        v12[1] = 0;
        v12[2] = v13;
        *((_DWORD *)v12 + 6) = a3;
        v12[4] = a4;
        v12[5] = a5;
        *v12 = 0;
        **(_QWORD **)(a1 + 40) = v12;
        *(_QWORD *)(a1 + 40) = v12;
      }
      else
      {
        v10 = 4294960568;
      }
    }
    else
    {
      v10 = priorityDispatcher_setPriority((uint64_t)a2, a3, 0);
      if (!(_DWORD)v10)
      {
        v10 = priorityDispatcher_dispatchFunction((uint64_t)a2, a4, a5, 1);
        if (!(_DWORD)v10)
        {
          CFRetain((CFTypeRef)a1);
          *(_BYTE *)(a1 + 24) = 1;
        }
      }
    }
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
  return v10;
}

uint64_t APSDispatchSectionEnterWithBlock(uint64_t a1, NSObject *a2, void *aBlock)
{
  uint64_t v3;
  void *v6;
  const void *v7;

  v3 = 4294960591;
  if (a2 && aBlock)
  {
    v6 = _Block_copy(aBlock);
    if (v6)
    {
      v7 = v6;
      v3 = APSDispatchSectionEnter(a1, a2, (void (__cdecl *)(void *))_APSDispatchSectionDidEnterWithBlock, v6);
      if ((_DWORD)v3)
        _Block_release(v7);
    }
    else
    {
      return 4294960568;
    }
  }
  return v3;
}

void _APSDispatchSectionDidEnterWithBlock(void (**a1)(void))
{
  a1[2]();
  _Block_release(a1);
}

uint64_t APSDispatchSectionLeave(uint64_t a1)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  if (!*(_BYTE *)(a1 + 24))
  {
    v6 = 4294960587;
    goto LABEL_12;
  }
  v2 = (_QWORD *)(a1 + 32);
  v3 = *(uint64_t **)(a1 + 32);
  if (v3)
  {
    v4 = *v3;
    *v2 = *v3;
    if (!v4)
      *(_QWORD *)(a1 + 40) = v2;
    v5 = v3[1];
    if (v5)
    {
      dispatch_async_f(v5, (void *)v3[5], (dispatch_function_t)v3[4]);
      dispatch_release((dispatch_object_t)v3[1]);
    }
    else
    {
      v7 = v3[2];
      if (v7)
      {
        priorityDispatcher_setPriority(v7, *((_DWORD *)v3 + 6), 0);
        v6 = priorityDispatcher_dispatchFunction(v3[2], v3[4], v3[5], 1);
        CFRelease((CFTypeRef)v3[2]);
        goto LABEL_11;
      }
    }
    v6 = 0;
LABEL_11:
    free(v3);
LABEL_12:
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
    return v6;
  }
  *(_BYTE *)(a1 + 24) = 0;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
  CFRelease((CFTypeRef)a1);
  return 0;
}

uint64_t APSDispatchSectionIsOccupied(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t APSW5LogCollect(const __CFString *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  const __CFString *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v10 = 0;
  v2 = (void *)MEMORY[0x1CAA430BC]();
  v3 = objc_msgSend(MEMORY[0x1E0DD9A20], "requestWithItemID:configuration:", 83, 0);
  if (v3)
  {
    v4 = v3;
    if (a1)
      v5 = a1;
    else
      v5 = CFSTR("AirPlay Performance Issue");
    v6 = (void *)objc_msgSend(MEMORY[0x1E0DD9A18], "sharedClient");
    v13[0] = v4;
    v7 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v13, 1);
    v11[0] = CFSTR("Reason");
    v11[1] = CFSTR("Compress");
    v12[0] = v5;
    v12[1] = MEMORY[0x1E0C9AAB0];
    if (objc_msgSend(v6, "collectLogs:configuration:update:receipts:error:", v7, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v12, v11, 2), &__block_literal_global_1489, 0, &v10))
    {
      v8 = 0;
    }
    else
    {
      APSLogErrorAt(0);
      if (NSErrorToOSStatus())
        v8 = 0;
      else
        v8 = 4294960596;
      if (gLogCategory_APSW5Log <= 50 && (gLogCategory_APSW5Log != -1 || _LogCategory_Initialize()))
        LogPrintF();
    }
  }
  else
  {
    APSLogErrorAt(0);
    v8 = 4294960568;
  }
  objc_autoreleasePoolPop(v2);
  return v8;
}

uint64_t APSCMBlockBufferCreateWithDispatchData(const __CFAllocator *a1, NSObject *a2, CFTypeRef *a3)
{
  uint64_t v3;
  dispatch_data_t v7;
  CMBlockBufferCustomBlockSource customBlockSource;
  CMBlockBufferRef blockBufferOut;
  size_t size_ptr;
  void *buffer_ptr;

  buffer_ptr = 0;
  blockBufferOut = 0;
  size_ptr = 0;
  v3 = 4294960591;
  if (a2 && a3)
  {
    APSTimeProfilerTaskBegin(CFSTR("DispatchDataCreateMap"));
    v7 = dispatch_data_create_map(a2, (const void **)&buffer_ptr, &size_ptr);
    APSTimeProfilerTaskEnd(CFSTR("DispatchDataCreateMap"));
    if (v7)
    {
      customBlockSource.version = 0;
      customBlockSource.AllocateBlock = 0;
      customBlockSource.FreeBlock = (void (__cdecl *)(void *, void *, size_t))bbufUtils_freeDispatchDataBlock;
      customBlockSource.refCon = v7;
      v3 = CMBlockBufferCreateWithMemoryBlock(a1, buffer_ptr, size_ptr, (CFAllocatorRef)*MEMORY[0x1E0C9AE20], &customBlockSource, 0, size_ptr, 0, &blockBufferOut);
      if (!(_DWORD)v3)
      {
        dispatch_retain(v7);
        *a3 = CFRetain(blockBufferOut);
      }
      dispatch_release(v7);
      if (blockBufferOut)
        CFRelease(blockBufferOut);
    }
    else
    {
      return 4294960568;
    }
  }
  return v3;
}

uint64_t APSCMBlockBufferCreateContiguousCopy(const __CFAllocator *a1, const __CFAllocator *a2, CMBlockBufferRef theBuffer, CFTypeRef *a4)
{
  uint64_t DataPointer;
  size_t DataLength;
  size_t v10;
  uint64_t v11;
  char *dataPointerOut;
  CMBlockBufferRef theBuffera;

  dataPointerOut = 0;
  theBuffera = 0;
  DataPointer = 4294960591;
  if (theBuffer && a4)
  {
    DataLength = CMBlockBufferGetDataLength(theBuffer);
    if (DataLength)
    {
      v10 = DataLength;
      DataPointer = CMBlockBufferCreateWithMemoryBlock(a1, 0, v10, a2, 0, 0, v10, 1u, &theBuffera);
      if ((_DWORD)DataPointer)
        goto LABEL_10;
      DataPointer = CMBlockBufferGetDataPointer(theBuffera, 0, 0, 0, &dataPointerOut);
      if ((_DWORD)DataPointer)
        goto LABEL_10;
      v11 = CMBlockBufferCopyDataBytes(theBuffer, 0, v10, dataPointerOut);
    }
    else
    {
      v11 = CMBlockBufferCreateEmpty(a1, 0, 1u, &theBuffera);
    }
    DataPointer = v11;
    if (!(_DWORD)v11)
    {
      DataPointer = 0;
      *a4 = CFRetain(theBuffera);
    }
  }
LABEL_10:
  if (theBuffera)
    CFRelease(theBuffera);
  return DataPointer;
}

uint64_t APSCMBlockBufferReplace(CMBlockBufferRef theBuffer, uint64_t a2, OpaqueCMBlockBuffer *a3, size_t a4, uint64_t a5)
{
  uint64_t result;
  size_t DataLength;
  size_t v12;
  size_t v13;
  size_t v14;
  char *v15;
  size_t lengthAtOffsetOut;

  v15 = 0;
  lengthAtOffsetOut = 0;
  result = 4294960591;
  if (theBuffer)
  {
    if (a3)
    {
      DataLength = CMBlockBufferGetDataLength(theBuffer);
      v12 = CMBlockBufferGetDataLength(a3);
      result = 4294960591;
      if (a5 + a2 <= DataLength)
      {
        v13 = a5 + a4;
        if (v13 <= v12)
        {
          if (v13 <= a4)
          {
            return 0;
          }
          else
          {
            while (1)
            {
              result = CMBlockBufferGetDataPointer(a3, a4, &lengthAtOffsetOut, 0, &v15);
              if ((_DWORD)result)
                break;
              v14 = lengthAtOffsetOut >= v13 - a4 ? v13 - a4 : lengthAtOffsetOut;
              result = CMBlockBufferReplaceDataBytes(v15, theBuffer, a4 + a2, v14);
              if ((_DWORD)result)
                break;
              a4 += lengthAtOffsetOut;
              if (a4 >= v13)
                return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t APSCMBlockBufferCreateBigUIntWithUInt64(CFAllocatorRef structureAllocator, unint64_t a2, CMBlockBufferRef *blockBufferOut)
{
  unsigned int v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;

  if (!a2)
    return CMBlockBufferCreateEmpty(structureAllocator, 0, 0, blockBufferOut);
  v6 = ilog2_64();
  v7 = CFAllocatorAllocate(structureAllocator, 8, 0);
  if (!v7)
    return 4294960568;
  v8 = v7;
  *v7 = bswap64(a2);
  v9 = CMBlockBufferCreateWithMemoryBlock(structureAllocator, v7, 8uLL, structureAllocator, 0, 8 - ((v6 >> 3) + 1), (v6 >> 3) + 1, 0, blockBufferOut);
  if ((_DWORD)v9)
    CFAllocatorDeallocate(structureAllocator, v8);
  return v9;
}

uint64_t APSCMBlockBufferGetBigUIntAsUInt64(OpaqueCMBlockBuffer *a1, unint64_t *a2)
{
  size_t DataLength;
  uint64_t result;
  unint64_t v6;

  if (!a1)
    return 4294960591;
  DataLength = CMBlockBufferGetDataLength(a1);
  if (DataLength > 8)
    return 4294960553;
  if (!a2)
    return 0;
  if (DataLength)
  {
    result = CMBlockBufferCopyDataBytes(a1, 0, DataLength, (char *)a2 - DataLength + 8);
    if ((_DWORD)result)
      return result;
    v6 = bswap64(*a2);
  }
  else
  {
    v6 = 0;
  }
  result = 0;
  *a2 = v6;
  return result;
}

uint64_t APSCMBlockBufferCreateWithUUID(const __CFUUID *a1, _QWORD *a2)
{
  uint64_t BlockBufferCopyingMemoryBlock;

  if (!a2)
    return 4294960591;
  CFUUIDGetUUIDBytes(a1);
  BlockBufferCopyingMemoryBlock = FigCreateBlockBufferCopyingMemoryBlock();
  if (!(_DWORD)BlockBufferCopyingMemoryBlock)
    *a2 = 0;
  return BlockBufferCopyingMemoryBlock;
}

uint64_t APSCMBlockBufferCopyAsUUID(OpaqueCMBlockBuffer *a1, CFTypeRef *a2)
{
  uint64_t result;
  const void *v5;
  CFUUIDBytes v6;

  *(_QWORD *)&v6.byte0 = 0;
  *(_QWORD *)&v6.byte8 = 0;
  if (!a2)
    return 4294960591;
  if (CMBlockBufferGetDataLength(a1) != 16)
    return 4294960553;
  result = CMBlockBufferCopyDataBytes(a1, 0, 0x10uLL, &v6);
  if (!(_DWORD)result)
  {
    result = (uint64_t)CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6);
    if (result)
    {
      v5 = (const void *)result;
      *a2 = CFRetain((CFTypeRef)result);
      CFRelease(v5);
      return 0;
    }
    else
    {
      *a2 = 0;
    }
  }
  return result;
}

uint64_t APSCMBlockBufferCreateWithString(const __CFAllocator *a1, __CFString *theString, CFStringEncoding encoding, int a4, CMBlockBufferRef *a5)
{
  uint64_t v5;
  const char *CStringPtr;
  char *v11;
  size_t v12;
  const __CFAllocator *v13;
  CFIndex Length;
  UInt8 *v15;
  UInt8 *v16;
  CMBlockBufferCustomBlockSource customBlockSource;
  CFIndex v19;
  CFIndex usedBufLen;
  CFRange v21;
  CFRange v22;

  v19 = 0;
  usedBufLen = 0;
  v5 = 4294960591;
  if (theString && a5)
  {
    if (!a4
      || (CStringPtr = CFStringGetCStringPtr(theString, encoding)) == 0
      || (v11 = (char *)CStringPtr, v12 = strlen(CStringPtr), v12 < 0x1D))
    {
      Length = CFStringGetLength(theString);
      v21.location = 0;
      v21.length = Length;
      if (CFStringGetBytes(theString, v21, encoding, 0, 1u, 0, 0, &usedBufLen) != Length)
        return 4294960579;
      if (usedBufLen < 1)
        return CMBlockBufferCreateEmpty(a1, 0, 0, a5);
      v15 = (UInt8 *)CFAllocatorAllocate(a1, usedBufLen, 0);
      if (!v15)
        return 4294960568;
      v16 = v15;
      v22.location = 0;
      v22.length = Length;
      if (CFStringGetBytes(theString, v22, encoding, 0, 1u, v15, usedBufLen, &v19) == Length)
      {
        if (v19 == usedBufLen)
        {
          v5 = CMBlockBufferCreateWithMemoryBlock(a1, v16, v19, a1, 0, 0, v19, 0, a5);
          if (!(_DWORD)v5)
            return v5;
        }
        else
        {
          v5 = 4294960548;
        }
      }
      else
      {
        v5 = 4294960579;
      }
      CFAllocatorDeallocate(a1, v16);
      return v5;
    }
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    customBlockSource.version = 0;
    customBlockSource.AllocateBlock = 0;
    customBlockSource.FreeBlock = (void (__cdecl *)(void *, void *, size_t))bbufUtils_freeStringBlock;
    customBlockSource.refCon = theString;
    v5 = CMBlockBufferCreateWithMemoryBlock(a1, v11, v12, v13, &customBlockSource, 0, v12, 0, a5);
    if (!(_DWORD)v5)
      CFRetain(theString);
  }
  return v5;
}

uint64_t APSCMBlockBufferCopyAsString(const __CFAllocator *a1, CMBlockBufferRef theBuffer, CFStringEncoding a3, int a4, _QWORD *a5)
{
  uint64_t DataPointer;
  size_t DataLength;
  unint64_t v12;
  char *v13;
  const __CFAllocator *v14;
  char *v15;
  CFStringRef v16;
  CFAllocatorRef contentsDeallocator;
  char *dataPointerOut;
  size_t lengthAtOffsetOut;

  dataPointerOut = 0;
  lengthAtOffsetOut = 0;
  contentsDeallocator = 0;
  DataPointer = 4294960591;
  if (!theBuffer || !a5)
    return DataPointer;
  DataLength = CMBlockBufferGetDataLength(theBuffer);
  if (!DataLength)
  {
    DataPointer = 0;
    *a5 = CFRetain(&stru_1E828E0E0);
    goto LABEL_20;
  }
  v12 = DataLength;
  DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
  if ((_DWORD)DataPointer)
    goto LABEL_20;
  if (a4 && lengthAtOffsetOut == v12)
  {
    if (APSReferencingAllocatorGetOverheadBytes_sOnce != -1)
      dispatch_once_f(&APSReferencingAllocatorGetOverheadBytes_sOnce, &APSReferencingAllocatorGetOverheadBytes_sOverheadBytes, (dispatch_function_t)refAllocator_calculateOverheadBytes);
    if (v12 > APSReferencingAllocatorGetOverheadBytes_sOverheadBytes)
    {
      DataPointer = APSReferencingAllocatorCreate(a1, theBuffer, &contentsDeallocator);
      if ((_DWORD)DataPointer)
        goto LABEL_20;
      v13 = 0;
      v14 = contentsDeallocator;
LABEL_18:
      v16 = CFStringCreateWithBytesNoCopy(a1, (const UInt8 *)dataPointerOut, v12, a3, 1u, v14);
      *a5 = v16;
      if (v16)
      {
        DataPointer = 0;
        goto LABEL_20;
      }
      if (v13)
      {
        DataPointer = 4294960568;
        v14 = contentsDeallocator;
        goto LABEL_17;
      }
      goto LABEL_26;
    }
  }
  if (a1)
    v14 = (const __CFAllocator *)CFRetain(a1);
  else
    v14 = 0;
  contentsDeallocator = v14;
  v15 = (char *)CFAllocatorAllocate(v14, v12, 0);
  if (v15)
  {
    v13 = v15;
    dataPointerOut = v15;
    DataPointer = CMBlockBufferCopyDataBytes(theBuffer, 0, v12, v15);
    if ((_DWORD)DataPointer)
    {
LABEL_17:
      CFAllocatorDeallocate(v14, v13);
      goto LABEL_20;
    }
    goto LABEL_18;
  }
LABEL_26:
  DataPointer = 4294960568;
LABEL_20:
  if (contentsDeallocator)
    CFRelease(contentsDeallocator);
  return DataPointer;
}

uint64_t AirPlayDeviceSupportsAWDLSolo(_DWORD *a1)
{
  char Int64;
  uint64_t v3;

  if (APSIsVirtualMachine_sCheckOnceForVM != -1)
    dispatch_once(&APSIsVirtualMachine_sCheckOnceForVM, &__block_literal_global_233);
  if (APSIsVirtualMachine_sIsVirtualMachine == 1)
  {
    if (gLogCategory_APSNetworkUtils <= 50
      && (gLogCategory_APSNetworkUtils != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v3 = 0;
  }
  else
  {
    pthread_mutex_lock(&AirPlayDeviceSupportsAWDLSolo_soloQueryMutex);
    if ((AirPlayDeviceSupportsAWDLSolo_querySuccessful & 1) == 0)
    {
      Int64 = WiFiManagerGetInt64();
      v3 = Int64 & 1;
      AirPlayDeviceSupportsAWDLSolo_supportsSolo = Int64 & 1;
      AirPlayDeviceSupportsAWDLSolo_querySuccessful = 1;
      if (gLogCategory_APSNetworkUtils > 40)
        goto LABEL_13;
      if (gLogCategory_APSNetworkUtils != -1 || _LogCategory_Initialize())
        LogPrintF();
    }
    v3 = AirPlayDeviceSupportsAWDLSolo_supportsSolo;
    if (gLogCategory_APSNetworkUtils <= 10
      && (gLogCategory_APSNetworkUtils != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
LABEL_13:
  pthread_mutex_unlock(&AirPlayDeviceSupportsAWDLSolo_soloQueryMutex);
  if (a1)
    *a1 = 0;
  return v3;
}

char *AirPlayCreateAWDLChannelSequenceString(uint64_t a1, uint64_t a2, unsigned int a3, char **a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  int v9;
  char *v10;
  size_t v11;
  int v12;
  char *result;
  char __s1[256];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a3 >= 0x10)
    v4 = 16;
  else
    v4 = a3;
  if ((_DWORD)v4)
  {
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v7 += snprintf(&__s1[v7], 256 - v7, "%u", *(unsigned __int8 *)(a1 + v8));
      if (v7 > 0xFF)
        break;
      if (*(_BYTE *)(a1 + v8))
      {
        v9 = *(_DWORD *)(a2 + 4 * v8);
        if ((v9 & 0x400) != 0)
        {
          v12 = snprintf(&__s1[v7], 256 - v7, "++");
          goto LABEL_13;
        }
        if ((v9 & 4) != 0)
        {
          v10 = &__s1[v7];
          v11 = 256 - v7;
          if ((v9 & 0x200) != 0)
            v12 = snprintf(v10, v11, "+");
          else
            v12 = snprintf(v10, v11, "-");
LABEL_13:
          v7 += v12;
          if (v7 > 0xFF)
            break;
        }
      }
      if (v8 >= (v4 - 1) || (v7 += snprintf(&__s1[v7], 256 - v7, ", "), v7 < 0x100))
      {
        if (v4 != ++v8)
          continue;
      }
      break;
    }
  }
  result = strdup(__s1);
  *a4 = result;
  return result;
}

uint64_t APSAudioIOAssertionGetTypeID()
{
  if (gAPSAudioIOAssertionInitOnce != -1)
    dispatch_once_f(&gAPSAudioIOAssertionInitOnce, 0, (dispatch_function_t)_APSAudioIOAssertionGetTypeID);
  return gAPSAudioIOAssertionTypeID;
}

uint64_t _APSAudioIOAssertionGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSAudioIOAssertionTypeID = result;
  return result;
}

void _APSAudioIOAssertionFinalize(uint64_t a1)
{
  pthread_mutex_t **v2;
  uint64_t v3;
  int v4;
  const void *v5;

  if (gLogCategory_APSAudioIOAssertion <= 50
    && (gLogCategory_APSAudioIOAssertion != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(pthread_mutex_t ***)(a1 + 24);
  if (v2)
  {
    pthread_mutex_lock(*v2);
    v3 = *(_QWORD *)(a1 + 24);
    v4 = *(_DWORD *)(v3 + 16) - 1;
    *(_DWORD *)(v3 + 16) = v4;
    if (!v4)
    {
      audioIOAssertion_setAudioIOState(v3, 0);
      v3 = *(_QWORD *)(a1 + 24);
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)v3);
  }
  v5 = *(const void **)(a1 + 16);
  if (v5)
    CFRelease(v5);
}

uint64_t audioIOAssertion_setAudioIOState(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL4 inPropertyData;

  inPropertyData = a2 != 0;
  FigSimpleMutexCheckIsLockedOnThisThread();
  v3 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v3)
  {
    if ((_DWORD)v3 == 1836589345)
    {
      getpid();
      CMSessionMgrSystemSoundActivateForPID();
      v3 = 0;
    }
    else if ((_DWORD)v3 == 1667330849)
    {
      v4 = AudioServicesSetProperty(0x61637421u, 4u, (const void *)(a1 + 24), 4u, &inPropertyData);
      v3 = v4;
      if ((_DWORD)v4)
        APSLogErrorAt(v4);
    }
    else
    {
      v3 = 4294960561;
    }
  }
  if (gLogCategory_APSAudioIOAssertion <= 110
    && (gLogCategory_APSAudioIOAssertion != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v3;
}

uint64_t APSAudioIOAssertionCreate(const __CFString *a1, CFTypeRef *a2)
{
  uint64_t Instance;
  _QWORD *v5;
  const __CFString *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if (audioIOAssertion_getManager_sManagerOnce == -1)
  {
    if (a2)
      goto LABEL_3;
LABEL_20:
    APSLogErrorAt(0);
    return 4294960591;
  }
  dispatch_once_f(&audioIOAssertion_getManager_sManagerOnce, &audioIOAssertion_getManager_sManager, (dispatch_function_t)audioIOAssertion_initManager);
  if (!a2)
    goto LABEL_20;
LABEL_3:
  if (gAPSAudioIOAssertionInitOnce != -1)
    dispatch_once_f(&gAPSAudioIOAssertionInitOnce, 0, (dispatch_function_t)_APSAudioIOAssertionGetTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    APSLogErrorAt(0);
    return 4294960568;
  }
  v5 = (_QWORD *)Instance;
  *(_QWORD *)(Instance + 16) = 0;
  *(_QWORD *)(Instance + 24) = 0;
  if (a1)
    v6 = a1;
  else
    v6 = &stru_1E828E0E0;
  v5[2] = CFRetain(v6);
  pthread_mutex_lock((pthread_mutex_t *)audioIOAssertion_getManager_sManager);
  v7 = dword_1EF920B38;
  if (dword_1EF920B38)
    goto LABEL_12;
  v8 = audioIOAssertion_setAudioIOState((uint64_t)&audioIOAssertion_getManager_sManager, 1);
  if (!(_DWORD)v8)
  {
    v7 = dword_1EF920B38;
LABEL_12:
    dword_1EF920B38 = v7 + 1;
    v5[3] = &audioIOAssertion_getManager_sManager;
    if (gLogCategory_APSAudioIOAssertion <= 50
      && (gLogCategory_APSAudioIOAssertion != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v9 = 0;
    *a2 = CFRetain(v5);
    goto LABEL_17;
  }
  v9 = v8;
  APSLogErrorAt(v8);
LABEL_17:
  pthread_mutex_unlock((pthread_mutex_t *)audioIOAssertion_getManager_sManager);
  CFRelease(v5);
  return v9;
}

uint64_t audioIOAssertion_initManager(uint64_t a1)
{
  NSObject *v2;
  uint64_t result;

  *(_QWORD *)a1 = FigSimpleMutexCreate();
  v2 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  *(_QWORD *)(a1 + 8) = dispatch_queue_create("APSAudioIOAssertionManager.timer", v2);
  *(_QWORD *)(a1 + 16) = 0x6361732100000000;
  *(_DWORD *)(a1 + 24) = APSSettingsGetIntWithOverrideAndDefault(CFSTR("audioIOAssertionSSID"), 0, 3100);
  result = in_audio_mx_server_process();
  if ((_DWORD)result)
    *(_DWORD *)(a1 + 20) = 1836589345;
  return result;
}

uint64_t APSAudioIOAssertionUntilTime(const __CFString *a1, dispatch_time_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *context;

  context = 0;
  v3 = APSAudioIOAssertionCreate(a1, (CFTypeRef *)&context);
  v4 = v3;
  if ((_DWORD)v3)
    APSLogErrorAt(v3);
  else
    dispatch_after_f(a2, *(dispatch_queue_t *)(*((_QWORD *)context + 3) + 8), context, (dispatch_function_t)MEMORY[0x1E0C98BC0]);
  return v4;
}

uint64_t _APSAudioIOAssertionSetActivationMethod(int a1)
{
  if (audioIOAssertion_getManager_sManagerOnce != -1)
    dispatch_once_f(&audioIOAssertion_getManager_sManagerOnce, &audioIOAssertion_getManager_sManager, (dispatch_function_t)audioIOAssertion_initManager);
  pthread_mutex_lock((pthread_mutex_t *)audioIOAssertion_getManager_sManager);
  dword_1EF920B3C = a1;
  return pthread_mutex_unlock((pthread_mutex_t *)audioIOAssertion_getManager_sManager);
}

uint64_t _APSAudioIOAssertionGetActivationCount()
{
  uint64_t v0;

  if (audioIOAssertion_getManager_sManagerOnce != -1)
    dispatch_once_f(&audioIOAssertion_getManager_sManagerOnce, &audioIOAssertion_getManager_sManager, (dispatch_function_t)audioIOAssertion_initManager);
  pthread_mutex_lock((pthread_mutex_t *)audioIOAssertion_getManager_sManager);
  v0 = dword_1EF920B38;
  pthread_mutex_unlock((pthread_mutex_t *)audioIOAssertion_getManager_sManager);
  return v0;
}

uint64_t APSPairingAuthenticationCoreUtilsSignBytesForSelfIdentity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  dispatch_semaphore_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  char v13;
  void *v15;
  _QWORD v16[7];
  id v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  uint64_t v29;

  v24 = 0;
  v25 = &v24;
  v26 = 0x3052000000;
  v27 = __Block_byref_object_copy_;
  v28 = __Block_byref_object_dispose_;
  v29 = 0;
  v18 = 0;
  v19 = &v18;
  v20 = 0x3052000000;
  v21 = __Block_byref_object_copy_;
  v22 = __Block_byref_object_dispose_;
  v23 = 0;
  v17 = 0;
  v6 = objc_alloc_init(MEMORY[0x1E0D838E8]);
  if (!v6 || (v7 = dispatch_semaphore_create(0)) == 0)
  {
    APSLogErrorAt(0);
    v8 = 0;
    v10 = 4294960568;
    goto LABEL_20;
  }
  v8 = v7;
  if (gLogCategory_APSPairingAuthenticationCoreUtils <= 50
    && (gLogCategory_APSPairingAuthenticationCoreUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  dispatch_retain(v8);
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __APSPairingAuthenticationCoreUtilsSignBytesForSelfIdentity_block_invoke;
  v16[3] = &unk_1E828AA50;
  v16[5] = &v24;
  v16[6] = &v18;
  v16[4] = v8;
  objc_msgSend(v6, "getIdentitiesWithFlags:completion:", 1, v16);
  dispatch_semaphore_wait(v8, 0xFFFFFFFFFFFFFFFFLL);
  if (gLogCategory_APSPairingAuthenticationCoreUtils <= 50
    && (gLogCategory_APSPairingAuthenticationCoreUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v9 = objc_msgSend((id)v19[5], "code");
  v10 = v9;
  if ((_DWORD)v9)
    goto LABEL_27;
  v11 = (void *)objc_msgSend((id)v25[5], "firstObject");
  v12 = v11;
  if (!v11)
    goto LABEL_28;
  v13 = objc_msgSend(v11, "signDataPtr:dataLen:signatureBytes:error:", a1, a2, a3, &v17);
  v9 = objc_msgSend(v17, "code");
  if ((_DWORD)v9)
  {
    v10 = v9;
LABEL_27:
    APSLogErrorAt(v9);
    goto LABEL_20;
  }
  if ((v13 & 1) == 0)
  {
LABEL_28:
    APSLogErrorAt(0);
    v10 = 4294960587;
    goto LABEL_20;
  }
  if (gLogCategory_APSPairingAuthenticationCoreUtils <= 30
    && (gLogCategory_APSPairingAuthenticationCoreUtils != -1 || _LogCategory_Initialize()))
  {
    v15 = v12;
    LogPrintF();
  }
  v10 = 0;
LABEL_20:

  if (v8)
    dispatch_release(v8);
  objc_msgSend(v6, "invalidate", v15);

  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v24, 8);
  return v10;
}

void sub_1C96B0E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t APSPairingAuthenticationCoreUtilsVerifySignatureForSameAccount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  dispatch_semaphore_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _QWORD v29[7];
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  void (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  void (*v40)(uint64_t);
  uint64_t v41;
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v36 = 0;
  v37 = &v36;
  v38 = 0x3052000000;
  v39 = __Block_byref_object_copy_;
  v40 = __Block_byref_object_dispose_;
  v41 = 0;
  v30 = 0;
  v31 = &v30;
  v32 = 0x3052000000;
  v33 = __Block_byref_object_copy_;
  v34 = __Block_byref_object_dispose_;
  v35 = 0;
  v6 = objc_alloc_init(MEMORY[0x1E0D838E8]);
  if (v6 && (v7 = dispatch_semaphore_create(0)) != 0)
  {
    v8 = v7;
    if (gLogCategory_APSPairingAuthenticationCoreUtils <= 50
      && (gLogCategory_APSPairingAuthenticationCoreUtils != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    dispatch_retain(v8);
    v29[0] = MEMORY[0x1E0C809B0];
    v29[1] = 3221225472;
    v29[2] = __APSPairingAuthenticationCoreUtilsVerifySignatureForSameAccount_block_invoke;
    v29[3] = &unk_1E828AA50;
    v29[5] = &v36;
    v29[6] = &v30;
    v29[4] = v8;
    objc_msgSend(v6, "getIdentitiesWithFlags:completion:", 2, v29);
    dispatch_semaphore_wait(v8, 0xFFFFFFFFFFFFFFFFLL);
    if (gLogCategory_APSPairingAuthenticationCoreUtils <= 50
      && (gLogCategory_APSPairingAuthenticationCoreUtils != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v9 = objc_msgSend((id)v31[5], "code");
    v10 = v9;
    if ((_DWORD)v9)
    {
      APSLogErrorAt(v9);
    }
    else if (v37[5])
    {
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v11 = (void *)v37[5];
      v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v25, v42, 16);
      v23 = v6;
      if (v12)
      {
        v13 = *(_QWORD *)v26;
LABEL_15:
        v14 = 0;
        while (1)
        {
          if (*(_QWORD *)v26 != v13)
            objc_enumerationMutation(v11);
          v15 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * v14);
          v24 = 0;
          v16 = objc_msgSend(v15, "verifySignaturePtr:signatureLen:dataPtr:dataLen:error:", a3, 64, a1, a2, &v24, v21, v22);
          v17 = v24;
          if (v24)
            v18 = 0;
          else
            v18 = v16;
          if ((v18 & 1) != 0)
          {
            if (gLogCategory_APSPairingAuthenticationCoreUtils <= 30
              && (gLogCategory_APSPairingAuthenticationCoreUtils != -1 || _LogCategory_Initialize()))
            {
              v21 = v15;
              LogPrintF();
            }
            v10 = 0;
            goto LABEL_36;
          }
          if (gLogCategory_APSPairingAuthenticationCoreUtils > 30)
            goto LABEL_26;
          if (gLogCategory_APSPairingAuthenticationCoreUtils == -1)
          {
            if (!_LogCategory_Initialize())
              goto LABEL_26;
            v17 = v24;
          }
          v21 = v15;
          v22 = v17;
          LogPrintF();
LABEL_26:
          if (v12 == ++v14)
          {
            v19 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v25, v42, 16);
            v12 = v19;
            if (v19)
              goto LABEL_15;
            break;
          }
        }
      }
      APSLogErrorAt(0);
      v10 = 4294960580;
LABEL_36:
      v6 = v23;
    }
    else
    {
      APSLogErrorAt(0);
      v10 = 4294960587;
    }
  }
  else
  {
    APSLogErrorAt(0);
    v8 = 0;
    v10 = 4294960568;
  }

  if (v8)
    dispatch_release(v8);
  objc_msgSend(v6, "invalidate", v21);

  _Block_object_dispose(&v30, 8);
  _Block_object_dispose(&v36, 8);
  return v10;
}

void sub_1C96B135C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

uint64_t tGvVBtfGSsOH67XQ()
{
  if (TyZKBvs2dXtrLjcUCR != -1)
    dispatch_once_f(&TyZKBvs2dXtrLjcUCR, 0, (dispatch_function_t)Ja1EGqpVx);
  return ItH26wrAHoeKhrXaDR;
}

uint64_t Ja1EGqpVx()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  ItH26wrAHoeKhrXaDR = result;
  return result;
}

uint64_t yItiyMt(uint64_t a1)
{
  uint64_t result;
  uint64_t i;

  result = NhB9kxUGdXXE(a1);
  if (*(_BYTE *)(a1 + 336))
  {
    result = AES_CTR_Final();
    *(_BYTE *)(a1 + 336) = 0;
  }
  for (i = 16; i != 448; ++i)
    *(_BYTE *)(a1 + i) = 0;
  return result;
}

uint64_t NhB9kxUGdXXE(uint64_t a1)
{
  const void *v2;
  const void *v3;
  uint64_t result;

  *(_DWORD *)(a1 + 340) = 0;
  v2 = *(const void **)(a1 + 344);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 344) = 0;
  }
  v3 = *(const void **)(a1 + 352);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 352) = 0;
  }
  if (*(_QWORD *)(a1 + 360))
  {
    SRP_free();
    *(_QWORD *)(a1 + 360) = 0;
  }
  result = *(_QWORD *)(a1 + 368);
  if (result)
  {
    result = cstr_free();
    *(_QWORD *)(a1 + 368) = 0;
  }
  if (*(_BYTE *)(a1 + 424))
  {
    result = AES_GCM_Final();
    *(_BYTE *)(a1 + 424) = 0;
  }
  if (*(_BYTE *)(a1 + 425))
  {
    result = AES_GCM_Final();
    *(_BYTE *)(a1 + 425) = 0;
  }
  return result;
}

uint64_t gQblcfSzZBQsYCCV(uint64_t *a1, int a2)
{
  uint64_t Instance;
  int v5;
  int v6;
  int v7;
  const __CFString *v8;
  const __CFString *v9;
  uint64_t v10;

  if (B0qLAG != -1)
    dispatch_once_f(&B0qLAG, 0, (dispatch_function_t)_GlobalInitialize);
  if (tHHVsHfAtS9mW)
  {
    if (TyZKBvs2dXtrLjcUCR != -1)
      dispatch_once_f(&TyZKBvs2dXtrLjcUCR, 0, (dispatch_function_t)Ja1EGqpVx);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      *(_OWORD *)(Instance + 20) = 0u;
      *(_OWORD *)(Instance + 404) = 0u;
      *(_OWORD *)(Instance + 420) = 0u;
      v5 = 1634747209;
      *(_OWORD *)(Instance + 372) = 0u;
      *(_OWORD *)(Instance + 388) = 0u;
      *(_OWORD *)(Instance + 340) = 0u;
      *(_OWORD *)(Instance + 356) = 0u;
      *(_OWORD *)(Instance + 308) = 0u;
      *(_OWORD *)(Instance + 324) = 0u;
      *(_OWORD *)(Instance + 276) = 0u;
      *(_OWORD *)(Instance + 292) = 0u;
      *(_OWORD *)(Instance + 244) = 0u;
      *(_OWORD *)(Instance + 260) = 0u;
      *(_OWORD *)(Instance + 212) = 0u;
      *(_OWORD *)(Instance + 228) = 0u;
      *(_OWORD *)(Instance + 180) = 0u;
      *(_OWORD *)(Instance + 196) = 0u;
      *(_OWORD *)(Instance + 148) = 0u;
      *(_OWORD *)(Instance + 164) = 0u;
      *(_OWORD *)(Instance + 116) = 0u;
      *(_OWORD *)(Instance + 132) = 0u;
      *(_OWORD *)(Instance + 84) = 0u;
      *(_OWORD *)(Instance + 100) = 0u;
      *(_OWORD *)(Instance + 52) = 0u;
      *(_OWORD *)(Instance + 68) = 0u;
      *(_OWORD *)(Instance + 36) = 0u;
      *(_OWORD *)(Instance + 432) = 0u;
      *(_DWORD *)(Instance + 16) = a2;
      if (a2)
      {
        v5 = 1634751305;
        v6 = 11;
        v7 = 1634751312;
        v8 = CFSTR("AirPlay Server Peer");
        v9 = CFSTR("AirPlay Server Identity");
      }
      else
      {
        v7 = 1634747216;
        v6 = 1;
        v8 = CFSTR("AirPlay Client Peer");
        v9 = CFSTR("AirPlay Client Identity");
      }
      v10 = 0;
      *(_QWORD *)(Instance + 24) = v9;
      *(_DWORD *)(Instance + 32) = v5;
      *(_QWORD *)(Instance + 40) = v8;
      *(_DWORD *)(Instance + 48) = v7;
      *(_DWORD *)(Instance + 52) = v6;
      *(_DWORD *)(Instance + 56) = v6;
      *a1 = Instance;
    }
    else
    {
      APSLogErrorAt(0);
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960534;
  }
  return v10;
}

dispatch_semaphore_t _GlobalInitialize()
{
  dispatch_semaphore_t result;

  result = dispatch_semaphore_create(1);
  tHHVsHfAtS9mW = (uint64_t)result;
  return result;
}

uint64_t XoN3GgjZNCvkN1T8I3(uint64_t a1)
{
  uint64_t result;
  int v3;

  result = NhB9kxUGdXXE(a1);
  if (*(_DWORD *)(a1 + 16))
    v3 = 11;
  else
    v3 = 1;
  *(_DWORD *)(a1 + 52) = v3;
  *(_DWORD *)(a1 + 56) = v3;
  if (*(_BYTE *)(a1 + 336))
  {
    result = AES_CTR_Final();
    *(_BYTE *)(a1 + 336) = 0;
  }
  return result;
}

__n128 aMoe8v8GNE9T(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 220);
  v3 = *(_OWORD *)(a1 + 236);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

__n128 Dk7hjUuq(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 236) = *(_OWORD *)(a2 + 16);
  *(__n128 *)(a1 + 220) = result;
  return result;
}

uint64_t PCFdAVst(uint64_t a1, const void *a2, CC_LONG a3, const void *a4, CC_LONG a5, _OWORD *a6, _OWORD *a7)
{
  int v7;

  v7 = *(_DWORD *)(a1 + 56);
  if (*(_DWORD *)(a1 + 16))
  {
    if (v7 != 14)
      goto LABEL_6;
LABEL_5:
    Mb6C1FLt7vW91ix(a1, a2, a3, a4, a5, a6, a7);
    return 0;
  }
  if (v7 == 5)
    goto LABEL_5;
LABEL_6:
  APSLogErrorAt(0);
  return 4294960587;
}

double Mb6C1FLt7vW91ix(uint64_t a1, const void *a2, CC_LONG a3, const void *a4, CC_LONG a5, _OWORD *a6, _OWORD *a7)
{
  double result;
  CC_SHA512_CTX v15;
  double md[8];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  result = 0.0;
  memset(&v15, 0, sizeof(v15));
  if (a6)
  {
    CC_SHA512_Init(&v15);
    CC_SHA512_Update(&v15, a2, a3);
    CC_SHA512_Update(&v15, (const void *)(a1 + 252), 0x20u);
    CC_SHA512_Final((unsigned __int8 *)md, &v15);
    result = md[0];
    *a6 = *(_OWORD *)md;
  }
  if (a7)
  {
    CC_SHA512_Init(&v15);
    CC_SHA512_Update(&v15, a4, a5);
    CC_SHA512_Update(&v15, (const void *)(a1 + 252), 0x20u);
    CC_SHA512_Final((unsigned __int8 *)md, &v15);
    result = md[0];
    *a7 = *(_OWORD *)md;
  }
  return result;
}

uint64_t h4BvW7X(uint64_t a1, __int128 *a2, uint64_t a3, _OWORD *a4, unint64_t a5, _QWORD *a6, _BYTE *a7)
{
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  int v19;
  int v20;

  switch(*(_DWORD *)(a1 + 52))
  {
    case 1:
    case 3:
      if (gLogCategory_AirPlayPairing <= 30
        && (gLogCategory_AirPlayPairing != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (a3)
      {
        APSLogErrorAt(0);
        v15 = 4294960591;
        goto LABEL_42;
      }
      if (a5 <= 0x1F)
        goto LABEL_59;
      v16 = KUY675K4ryxHGzD5GVD(a1, 1, a4, 0);
      v15 = v16;
      if ((_DWORD)v16)
        goto LABEL_61;
      *a6 = 32;
      *a7 = 0;
      *(_DWORD *)(a1 + 52) = 2;
      return v15;
    case 2:
      if (gLogCategory_AirPlayPairing <= 30
        && (gLogCategory_AirPlayPairing != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (a3 != 32)
        goto LABEL_59;
      v17 = *a2;
      *(_OWORD *)(a1 + 236) = a2[1];
      *(_OWORD *)(a1 + 220) = v17;
      v16 = i9kF3TCOFmU(a1, a1 + 220, 0);
      if ((_DWORD)v16)
      {
        v15 = v16;
        goto LABEL_61;
      }
      *a6 = 0;
      *a7 = 1;
      *(_DWORD *)(a1 + 52) = 3;
      if (gLogCategory_AirPlayPairing > 40
        || gLogCategory_AirPlayPairing == -1 && !_LogCategory_Initialize())
      {
        return 0;
      }
      goto LABEL_37;
    case 0xB:
    case 0xC:
      if (gLogCategory_AirPlayPairing <= 30
        && (gLogCategory_AirPlayPairing != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (a3 != 32 || a5 <= 0x1F)
      {
LABEL_59:
        APSLogErrorAt(0);
        v15 = 4294960553;
        goto LABEL_42;
      }
      v16 = i9kF3TCOFmU(a1, (uint64_t)a2, 0);
      if ((_DWORD)v16)
      {
        v15 = v16;
LABEL_61:
        APSLogErrorAt(v16);
        goto LABEL_42;
      }
      v16 = KUY675K4ryxHGzD5GVD(a1, 1, a4, 0);
      if ((_DWORD)v16)
      {
        v15 = v16;
        goto LABEL_61;
      }
      *a6 = 32;
      *a7 = 1;
      *(_DWORD *)(a1 + 52) = 12;
      if (gLogCategory_AirPlayPairing <= 40
        && (gLogCategory_AirPlayPairing != -1 || _LogCategory_Initialize()))
      {
LABEL_37:
        LogPrintF();
      }
      return 0;
    default:
      if (gLogCategory_AirPlayPairing >= 61)
      {
        if (*(_DWORD *)(a1 + 16))
          v14 = 11;
        else
          v14 = 1;
        *(_DWORD *)(a1 + 52) = v14;
        return 4294960587;
      }
      else
      {
        if (gLogCategory_AirPlayPairing != -1 || _LogCategory_Initialize())
          LogPrintF();
        v15 = 4294960587;
LABEL_42:
        v19 = gLogCategory_AirPlayPairing;
        if (*(_DWORD *)(a1 + 16))
          v20 = 11;
        else
          v20 = 1;
        *(_DWORD *)(a1 + 52) = v20;
        if (v19 <= 60 && (v19 != -1 || _LogCategory_Initialize()))
          LogPrintF();
      }
      return v15;
  }
}

uint64_t KUY675K4ryxHGzD5GVD(uint64_t a1, int a2, _OWORD *a3, _OWORD *a4)
{
  const void *v5;
  int v6;
  __int128 v7;
  __int128 v8;
  int v10;
  unsigned int v13;
  char __s[65];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  dispatch_semaphore_wait((dispatch_semaphore_t)tHHVsHfAtS9mW, 0xFFFFFFFFFFFFFFFFLL);
  v5 = 0;
  v6 = 1;
  v13 = 1;
  do
  {
    if (v5)
      CFRelease(v5);
    v5 = (const void *)KeychainCopyMatchingFormatted();
    if (!a2 || v13 == -25293)
      goto LABEL_20;
    v10 = v6;
    KeychainDeleteFormatted();
    cced25519_make_key_pair_compat();
    DataToHexCStringEx();
    DataToHexCStringEx();
    SNPrintF();
    strlen(__s);
    v13 = KeychainAddFormatted();
    if (!v13)
    {
      v7 = v18;
      *a3 = v17;
      a3[1] = v7;
      if (a4)
      {
        v8 = v16;
        *a4 = v15;
        a4[1] = v8;
      }
      if (gLogCategory_AirPlayPairing <= 50
        && (gLogCategory_AirPlayPairing != -1 || _LogCategory_Initialize()))
      {
        goto LABEL_18;
      }
      goto LABEL_20;
    }
    if (gLogCategory_AirPlayPairing <= 40
      && (gLogCategory_AirPlayPairing != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    usleep(0x4E20u);
    ++v6;
  }
  while (v10 != 10);
  if (gLogCategory_AirPlayPairing <= 60
    && (gLogCategory_AirPlayPairing != -1 || _LogCategory_Initialize()))
  {
LABEL_18:
    LogPrintF();
  }
LABEL_20:
  if (v5)
    CFRelease(v5);
  dispatch_semaphore_signal((dispatch_semaphore_t)tHHVsHfAtS9mW);
  return v13;
}

uint64_t i9kF3TCOFmU(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Formatted;
  uint64_t updated;

  DataToHexCStringEx();
  Formatted = CFPropertyListCreateFormatted();
  if ((_DWORD)Formatted)
  {
    updated = Formatted;
    APSLogErrorAt(Formatted);
  }
  else
  {
    if (!a3)
      SNPrintF();
    dispatch_semaphore_wait((dispatch_semaphore_t)tHHVsHfAtS9mW, 0xFFFFFFFFFFFFFFFFLL);
    updated = KeychainUpdateFormatted();
    if ((_DWORD)updated == -25300)
      updated = KeychainAddFormatted();
    if ((_DWORD)updated != -25293 && (_DWORD)updated)
      APSLogErrorAt(updated);
    dispatch_semaphore_signal((dispatch_semaphore_t)tHHVsHfAtS9mW);
  }
  if ((_DWORD)updated != -25293
    && (_DWORD)updated
    && gLogCategory_AirPlayPairing <= 60
    && (gLogCategory_AirPlayPairing != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return updated;
}

uint64_t VBAEFt(uint64_t a1, __int128 *a2, unint64_t a3, uint64_t a4, unint64_t a5, _QWORD *a6, _BYTE *a7)
{
  unint64_t v11;
  __int128 *v12;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int v20;
  __int128 v21;
  __int128 v22;
  uint64_t n;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  int v33;
  int v34;
  int v35;
  __int128 v36;
  __int128 v37;
  uint64_t m;
  _OWORD v40[4];
  _OWORD v41[4];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v11 = a3;
  v12 = a2;
  v46 = *MEMORY[0x1E0C80C00];
  v14 = *(_DWORD *)(a1 + 16);
  if (v14 == 1)
  {
    if (a3 <= 3)
    {
LABEL_123:
      APSLogErrorAt(0);
      v16 = 4294960553;
      goto LABEL_64;
    }
    if ((*(_BYTE *)a2 & 1) != 0)
      *(_DWORD *)(a1 + 56) = 11;
    v12 = (__int128 *)((char *)a2 + 4);
    v11 = a3 - 4;
  }
  switch(*(_DWORD *)(a1 + 56))
  {
    case 1:
    case 5:
      if (gLogCategory_AirPlayPairing <= 30
        && (gLogCategory_AirPlayPairing != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (v11 || a5 <= 0x43)
        goto LABEL_123;
      RandomBytes();
      cccurve25519_make_pub();
      v17 = KUY675K4ryxHGzD5GVD(a1, 1, (_OWORD *)(a1 + 124), (_OWORD *)(a1 + 156));
      v16 = v17;
      if ((_DWORD)v17)
        goto LABEL_124;
      *(_DWORD *)a4 = 1;
      v18 = *(_OWORD *)(a1 + 60);
      *(_OWORD *)(a4 + 20) = *(_OWORD *)(a1 + 76);
      *(_OWORD *)(a4 + 4) = v18;
      v19 = *(_OWORD *)(a1 + 124);
      *(_OWORD *)(a4 + 52) = *(_OWORD *)(a1 + 140);
      *(_OWORD *)(a4 + 36) = v19;
      *a6 = 68;
      *a7 = 0;
      v20 = 2;
      goto LABEL_93;
    case 2:
      if (gLogCategory_AirPlayPairing <= 30
        && (gLogCategory_AirPlayPairing != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (v11 != 96)
        goto LABEL_123;
      v27 = *v12;
      *(_OWORD *)(a1 + 204) = v12[1];
      *(_OWORD *)(a1 + 188) = v27;
      v28 = v12[3];
      v42 = v12[2];
      v43 = v28;
      v29 = v12[5];
      v44 = v12[4];
      v45 = v29;
      cccurve25519();
      for (i = 92; i != 124; ++i)
        *(_BYTE *)(a1 + i) = 0;
      Mb6C1FLt7vW91ix(a1, "Pair-Verify-AES-Key", 0x13u, "Pair-Verify-AES-IV", 0x12u, v41, v40);
      if (*(_BYTE *)(a1 + 336))
      {
        AES_CTR_Final();
        *(_BYTE *)(a1 + 336) = 0;
      }
      v17 = AES_CTR_Init();
      v16 = v17;
      for (j = 0; j != 64; ++j)
        *((_BYTE *)v41 + j) = 0;
      for (k = 0; k != 64; ++k)
        *((_BYTE *)v40 + k) = 0;
      if ((_DWORD)v17)
        goto LABEL_124;
      *(_BYTE *)(a1 + 336) = 1;
      v17 = AES_CTR_Update();
      if ((_DWORD)v17)
      {
        v16 = v17;
        goto LABEL_124;
      }
      v33 = cced25519_verify_compat();
      v34 = gLogCategory_AirPlayPairing;
      if (!v33)
      {
        if (gLogCategory_AirPlayPairing <= 30
          && (gLogCategory_AirPlayPairing != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (a5 <= 0x43)
          goto LABEL_123;
        cced25519_sign_compat();
        for (m = 0; m != 32; ++m)
          *(_BYTE *)(a1 + 156 + m) = 0;
        *(_DWORD *)a4 = 0;
        v17 = AES_CTR_Update();
        v16 = v17;
        if (!(_DWORD)v17)
        {
          *a6 = 68;
          *a7 = 0;
          v20 = 4;
          goto LABEL_93;
        }
        goto LABEL_124;
      }
      if (gLogCategory_AirPlayPairing > 50)
        goto LABEL_122;
      if (gLogCategory_AirPlayPairing == -1 && !_LogCategory_Initialize())
        goto LABEL_131;
      goto LABEL_120;
    case 4:
      if (gLogCategory_AirPlayPairing <= 30
        && (gLogCategory_AirPlayPairing != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (v11)
        goto LABEL_123;
      *a6 = 0;
      *a7 = 1;
      *(_DWORD *)(a1 + 56) = 5;
      if (gLogCategory_AirPlayPairing <= 40
        && (gLogCategory_AirPlayPairing != -1 || _LogCategory_Initialize()))
      {
        goto LABEL_82;
      }
      return 0;
    case 0xB:
    case 0xE:
      if (gLogCategory_AirPlayPairing <= 30
        && (gLogCategory_AirPlayPairing != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (v11 != 64 || a5 <= 0x5F)
        goto LABEL_123;
      v21 = *v12;
      *(_OWORD *)(a1 + 204) = v12[1];
      *(_OWORD *)(a1 + 188) = v21;
      v22 = v12[2];
      *(_OWORD *)(a1 + 236) = v12[3];
      *(_OWORD *)(a1 + 220) = v22;
      if (xOvZekdnwD6())
      {
        RandomBytes();
        cccurve25519_make_pub();
        cccurve25519();
        v17 = KUY675K4ryxHGzD5GVD(a1, 1, (_OWORD *)(a1 + 124), (_OWORD *)(a1 + 156));
        if ((_DWORD)v17)
        {
          v16 = v17;
          goto LABEL_124;
        }
        cced25519_sign_compat();
        for (n = 156; n != 188; ++n)
          *(_BYTE *)(a1 + n) = 0;
        Mb6C1FLt7vW91ix(a1, "Pair-Verify-AES-Key", 0x13u, "Pair-Verify-AES-IV", 0x12u, v41, v40);
        if (*(_BYTE *)(a1 + 336))
        {
          AES_CTR_Final();
          *(_BYTE *)(a1 + 336) = 0;
        }
        v17 = AES_CTR_Init();
        if ((_DWORD)v17)
        {
          v16 = v17;
          goto LABEL_124;
        }
        *(_BYTE *)(a1 + 336) = 1;
        v17 = AES_CTR_Update();
        v16 = v17;
        if ((_DWORD)v17)
          goto LABEL_124;
        v24 = *(_OWORD *)(a1 + 76);
        *(_OWORD *)a4 = *(_OWORD *)(a1 + 60);
        *(_OWORD *)(a4 + 16) = v24;
        v25 = v43;
        *(_OWORD *)(a4 + 32) = v42;
        *(_OWORD *)(a4 + 48) = v25;
        v26 = v45;
        *(_OWORD *)(a4 + 64) = v44;
        *(_OWORD *)(a4 + 80) = v26;
        *a6 = 96;
        *a7 = 0;
        v20 = 13;
LABEL_93:
        *(_DWORD *)(a1 + 56) = v20;
        return v16;
      }
      v34 = gLogCategory_AirPlayPairing;
      if (gLogCategory_AirPlayPairing > 50)
      {
        v16 = 4294960551;
        goto LABEL_65;
      }
      if (gLogCategory_AirPlayPairing != -1 || _LogCategory_Initialize())
        LogPrintF();
      v16 = 4294960551;
      break;
    case 0xD:
      if (gLogCategory_AirPlayPairing <= 30
        && (gLogCategory_AirPlayPairing != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (v11 != 64)
        goto LABEL_123;
      v36 = v12[1];
      v42 = *v12;
      v43 = v36;
      v37 = v12[3];
      v44 = v12[2];
      v45 = v37;
      v17 = AES_CTR_Update();
      if ((_DWORD)v17)
      {
        v16 = v17;
LABEL_124:
        APSLogErrorAt(v17);
      }
      else
      {
        if (!cced25519_verify_compat())
        {
          *a6 = 0;
          *a7 = 1;
          *(_DWORD *)(a1 + 56) = 14;
          if (gLogCategory_AirPlayPairing <= 30
            && (gLogCategory_AirPlayPairing != -1 || _LogCategory_Initialize()))
          {
LABEL_82:
            LogPrintF();
          }
          return 0;
        }
        v34 = gLogCategory_AirPlayPairing;
        if (gLogCategory_AirPlayPairing > 50)
        {
LABEL_122:
          v16 = 4294960580;
          goto LABEL_65;
        }
        if (gLogCategory_AirPlayPairing != -1 || _LogCategory_Initialize())
LABEL_120:
          LogPrintF();
LABEL_131:
        v16 = 4294960580;
      }
      break;
    default:
      if (gLogCategory_AirPlayPairing >= 61)
      {
        if (v14)
          v15 = 11;
        else
          v15 = 1;
        *(_DWORD *)(a1 + 56) = v15;
        return 4294960587;
      }
      if (gLogCategory_AirPlayPairing != -1 || _LogCategory_Initialize())
        LogPrintF();
      v16 = 4294960587;
      break;
  }
LABEL_64:
  v34 = gLogCategory_AirPlayPairing;
LABEL_65:
  if (*(_DWORD *)(a1 + 16))
    v35 = 11;
  else
    v35 = 1;
  *(_DWORD *)(a1 + 56) = v35;
  if (v34 <= 60 && (v34 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  return v16;
}

uint64_t xOvZekdnwD6()
{
  uint64_t result;
  const void *v1;
  const void *Value;
  uint64_t Formatted;
  uint64_t updated;

  DataToHexCStringEx();
  result = KeychainCopyMatchingFormatted();
  if (result)
  {
    v1 = (const void *)result;
    Value = CFDictionaryGetValue((CFDictionaryRef)result, (const void *)*MEMORY[0x1E0CD68A0]);
    if (!Value || !CFEqual(Value, (CFTypeRef)*MEMORY[0x1E0CD68E8]))
      goto LABEL_10;
    Formatted = CFPropertyListCreateFormatted();
    if (!(_DWORD)Formatted)
    {
      updated = KeychainUpdateFormatted();
      CFRelease(0);
      if (!(_DWORD)updated)
      {
        if (gLogCategory_AirPlayPairing > 50
          || gLogCategory_AirPlayPairing == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_10;
        }
        goto LABEL_8;
      }
      Formatted = updated;
    }
    APSLogErrorAt(Formatted);
    if (gLogCategory_AirPlayPairing > 50
      || gLogCategory_AirPlayPairing == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_10;
    }
LABEL_8:
    LogPrintF();
LABEL_10:
    CFRelease(v1);
    return 1;
  }
  return result;
}

uint64_t rJPl3sdBfc0E3yB(uint64_t a1, CFTypeRef cf, uint64_t a3)
{
  __CFDictionary *Mutable;
  __CFDictionary *v6;
  uint64_t Bytes;
  const void *v8;

  if (*(_DWORD *)(a1 + 16))
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  else
  {
    if (a3)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!Mutable)
      {
        APSLogErrorAt(0);
        return 4294960568;
      }
      v6 = Mutable;
      CFDictionarySetValue(Mutable, CFSTR("method"), CFSTR("pin"));
      CFDictionarySetValue(v6, CFSTR("user"), cf);
      Bytes = CFPropertyListCreateBytes();
      CFRelease(v6);
      if ((_DWORD)Bytes)
      {
        APSLogErrorAt(Bytes);
        return Bytes;
      }
    }
    v8 = *(const void **)(a1 + 352);
    if (cf)
      CFRetain(cf);
    *(_QWORD *)(a1 + 352) = cf;
    if (v8)
      CFRelease(v8);
    Bytes = 0;
    *(_DWORD *)(a1 + 340) = 101;
  }
  return Bytes;
}

uint64_t o4IBrWf(uint64_t a1)
{
  const void *v2;
  const void *TypedValue;
  uint64_t v4;
  unsigned int v6;

  v6 = 0;
  if (*(_DWORD *)(a1 + 16) == 1)
  {
    CFDictionaryGetTypeID();
    v2 = (const void *)CFCreateWithPlistBytes();
    CFStringGetTypeID();
    TypedValue = (const void *)CFDictionaryGetTypedValue();
    v4 = CFEqual(TypedValue, CFSTR("pin"));
    if ((_DWORD)v4)
    {
      CFStringGetTypeID();
      CFDictionaryGetTypedValue();
      *(_DWORD *)(a1 + 340) = 111;
    }
    else
    {
      APSLogErrorAt(v4);
      v6 = -6735;
    }
    if (v2)
      CFRelease(v2);
  }
  else
  {
    APSLogErrorAt(0);
    return -6705;
  }
  return v6;
}

uint64_t GvMGlTNs(uint64_t a1, CFTypeRef cf)
{
  const void *v4;

  v4 = *(const void **)(a1 + 344);
  if (cf)
    CFRetain(cf);
  *(_QWORD *)(a1 + 344) = cf;
  if (v4)
    CFRelease(v4);
  return 0;
}

uint64_t SrtySZG0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, char *a6)
{
  int v10;
  __CFDictionary *Mutable;
  __CFDictionary *v12;
  uint64_t Bytes;
  int v14;
  const void *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  const __CFData *v27;
  uint64_t v28;
  const __CFData *v29;
  CFMutableDictionaryRef v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t inited;
  char v39;
  uint64_t k;
  uint64_t m;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  CFMutableDictionaryRef v47;
  int v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  const __CFData *TypedValue;
  CFMutableDictionaryRef v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  const __CFData *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  const __CFData *v61;
  char v62;
  uint64_t i;
  uint64_t j;
  uint64_t v65;
  uint64_t v66;
  __int16 v67;
  CFMutableDictionaryRef v68;
  int v69;
  char v70;
  const void *v71;
  uint64_t v72;
  CFMutableDictionaryRef v73;
  uint64_t v74;
  void *v75;
  void *v76;
  int v77;
  int v79;
  int v80;
  int v81;
  int v82;
  CC_SHA512_CTX c;
  uint64_t v84;
  unint64_t Length;
  unsigned int v86;
  unsigned __int8 v87[64];
  unsigned __int8 md[64];
  _OWORD v89[2];
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v10 = *(_DWORD *)(a1 + 340);
  if (!v10)
  {
    if (*(_DWORD *)(a1 + 16))
      v10 = 111;
    else
      v10 = 101;
    *(_DWORD *)(a1 + 340) = v10;
  }
  v86 = 0;
  v84 = 0;
  Length = 0;
  memset(&c, 0, sizeof(c));
  switch(v10)
  {
    case 'e':
      if (a3 || !*(_QWORD *)(a1 + 352))
        goto LABEL_278;
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!Mutable)
      {
        APSLogErrorAt(0);
        v26 = -6728;
        goto LABEL_71;
      }
      v12 = Mutable;
      CFDictionarySetValue(Mutable, CFSTR("method"), CFSTR("pin"));
      CFDictionarySetValue(v12, CFSTR("user"), *(const void **)(a1 + 352));
      Bytes = CFPropertyListCreateBytes();
      v86 = Bytes;
      if (!(_DWORD)Bytes)
      {
        *(_DWORD *)(a1 + 340) = 102;
        v14 = gLogCategory_AirPlayPairing;
        if (gLogCategory_AirPlayPairing <= 30)
        {
          if (gLogCategory_AirPlayPairing != -1)
          {
LABEL_13:
            if (v14 == -1)
              _LogCategory_Initialize();
            LogPrintF();
            goto LABEL_160;
          }
          if (_LogCategory_Initialize())
          {
            v14 = gLogCategory_AirPlayPairing;
            goto LABEL_13;
          }
        }
LABEL_160:
        v15 = 0;
        goto LABEL_250;
      }
      APSLogErrorAt(Bytes);
      v15 = 0;
      goto LABEL_252;
    case 'f':
      if (!a3 || !*(_QWORD *)(a1 + 344) || !*(_QWORD *)(a1 + 352))
        goto LABEL_278;
      CFDictionaryGetTypeID();
      v15 = (const void *)CFCreateWithPlistBytes();
      v16 = gLogCategory_AirPlayPairing;
      if (gLogCategory_AirPlayPairing > 30)
        goto LABEL_163;
      if (gLogCategory_AirPlayPairing != -1)
        goto LABEL_20;
      if (_LogCategory_Initialize())
      {
        v16 = gLogCategory_AirPlayPairing;
LABEL_20:
        if (v16 == -1)
          _LogCategory_Initialize();
        LogPrintF();
      }
LABEL_163:
      if (*(_QWORD *)(a1 + 360))
      {
        SRP_free();
        *(_QWORD *)(a1 + 360) = 0;
      }
      SRP6a_client_method();
      v49 = SRP_new();
      *(_QWORD *)(a1 + 360) = v49;
      if (!v49)
        goto LABEL_319;
      v50 = (void *)CFCopyCString();
      v36 = v86;
      if (v86)
        goto LABEL_329;
      v86 = SRP_set_username();
      free(v50);
      v51 = v86;
      if (v86)
        goto LABEL_300;
      CFDataGetTypeID();
      TypedValue = (const __CFData *)CFDictionaryGetTypedValue();
      Length = CFDataGetLength(TypedValue);
      if (Length <= 0xF)
        goto LABEL_299;
      CFDataGetBytePtr(TypedValue);
      v51 = SRP_set_params();
      v86 = v51;
      if ((_DWORD)v51)
      {
LABEL_300:
        APSLogErrorAt(v51);
        v81 = -6705;
        goto LABEL_320;
      }
      v53 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!v53)
        goto LABEL_319;
      v12 = v53;
      v84 = 0;
      v54 = SRP_gen_pub();
      v86 = v54;
      if ((_DWORD)v54)
        goto LABEL_326;
      CFDictionarySetData();
      cstr_free();
      v55 = (void *)CFCopyCString();
      v86 = SRP_set_auth_password();
      free(v55);
      v56 = v86;
      if (v86)
        goto LABEL_325;
      CFDataGetTypeID();
      v57 = (const __CFData *)CFDictionaryGetTypedValue();
      if (*(_QWORD *)(a1 + 368))
      {
        cstr_free();
        *(_QWORD *)(a1 + 368) = 0;
      }
      CFDataGetBytePtr(v57);
      CFDataGetLength(v57);
      v58 = SRP_compute_key();
      v86 = v58;
      if ((_DWORD)v58)
      {
        APSLogErrorAt(v58);
        v80 = -6737;
        goto LABEL_314;
      }
      v84 = 0;
      v54 = SRP_respond();
      v86 = v54;
      if ((_DWORD)v54)
        goto LABEL_326;
      CFDictionarySetData();
      cstr_free();
      v59 = CFPropertyListCreateBytes();
      v86 = v59;
      if ((_DWORD)v59)
        goto LABEL_328;
      *(_DWORD *)(a1 + 340) = 104;
      v60 = gLogCategory_AirPlayPairing;
      if (gLogCategory_AirPlayPairing > 30)
        goto LABEL_250;
      if (gLogCategory_AirPlayPairing == -1)
      {
        if (!_LogCategory_Initialize())
          goto LABEL_250;
        v60 = gLogCategory_AirPlayPairing;
      }
      if (v60 == -1)
        goto LABEL_248;
      goto LABEL_249;
    case 'h':
      if (!a3)
        goto LABEL_278;
      if (!*(_QWORD *)(a1 + 360) || !*(_QWORD *)(a1 + 368))
        goto LABEL_277;
      CFDictionaryGetTypeID();
      v15 = (const void *)CFCreateWithPlistBytes();
      v18 = gLogCategory_AirPlayPairing;
      if (gLogCategory_AirPlayPairing > 30)
        goto LABEL_186;
      if (gLogCategory_AirPlayPairing != -1)
        goto LABEL_36;
      if (_LogCategory_Initialize())
      {
        v18 = gLogCategory_AirPlayPairing;
LABEL_36:
        if (v18 == -1)
          _LogCategory_Initialize();
        LogPrintF();
      }
LABEL_186:
      CFDataGetTypeID();
      v61 = (const __CFData *)CFDictionaryGetTypedValue();
      CFDataGetBytePtr(v61);
      CFDataGetLength(v61);
      if (SRP_verify())
        goto LABEL_262;
      inited = KUY675K4ryxHGzD5GVD(a1, 1, v89, 0);
      v86 = inited;
      if ((_DWORD)inited)
        goto LABEL_330;
      CC_SHA512_Init(&c);
      CC_SHA512_Update(&c, "Pair-Setup-AES-Key", 0x12u);
      CC_SHA512_Update(&c, **(const void ***)(a1 + 368), *(_DWORD *)(*(_QWORD *)(a1 + 368) + 8));
      CC_SHA512_Final(md, &c);
      CC_SHA512_Init(&c);
      CC_SHA512_Update(&c, "Pair-Setup-AES-IV", 0x11u);
      CC_SHA512_Update(&c, **(const void ***)(a1 + 368), *(_DWORD *)(*(_QWORD *)(a1 + 368) + 8));
      CC_SHA512_Final(v87, &c);
      if (*(_BYTE *)(a1 + 424))
      {
        AES_GCM_Final();
        *(_BYTE *)(a1 + 424) = 0;
      }
      if (*(_BYTE *)(a1 + 425))
      {
        AES_GCM_Final();
        *(_BYTE *)(a1 + 425) = 0;
      }
      inited = AES_GCM_InitEx();
      v86 = inited;
      if ((_DWORD)inited || (inited = AES_GCM_InitEx(), (v86 = inited) != 0))
      {
        v62 = 0;
      }
      else
      {
        *(_OWORD *)(a1 + 427) = *(_OWORD *)v87;
        v62 = 1;
      }
      for (i = 0; i != 64; md[i++] = 0)
        ;
      for (j = 0; j != 64; v87[j++] = 0)
        ;
      if ((v62 & 1) == 0)
        goto LABEL_330;
      v65 = 0;
      *(_WORD *)(a1 + 424) = 257;
      v66 = a1 + 442;
      do
      {
        if (v65 == -16)
          break;
        v67 = (*(_BYTE *)(v66 + v65--))++ + 1;
      }
      while ((v67 & 0x100) != 0);
      inited = AES_GCM_InitMessage();
      v86 = inited;
      if ((_DWORD)inited)
        goto LABEL_330;
      inited = AES_GCM_Encrypt();
      v86 = inited;
      if ((_DWORD)inited)
        goto LABEL_330;
      inited = AES_GCM_FinalizeMessage();
      v86 = inited;
      if ((_DWORD)inited)
        goto LABEL_330;
      v68 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!v68)
        goto LABEL_309;
      v12 = v68;
      CFDictionarySetData();
      CFDictionarySetData();
      v32 = CFPropertyListCreateBytes();
      v86 = v32;
      if ((_DWORD)v32)
        goto LABEL_315;
      *(_DWORD *)(a1 + 340) = 106;
      v69 = gLogCategory_AirPlayPairing;
      if (gLogCategory_AirPlayPairing > 30)
        goto LABEL_213;
      if (gLogCategory_AirPlayPairing != -1)
        goto LABEL_210;
      if (!_LogCategory_Initialize())
        goto LABEL_213;
      v69 = gLogCategory_AirPlayPairing;
LABEL_210:
      if (v69 == -1)
        _LogCategory_Initialize();
      goto LABEL_249;
    case 'j':
      if (!a3)
        goto LABEL_278;
      if (!*(_BYTE *)(a1 + 425))
      {
LABEL_277:
        APSLogErrorAt(0);
        v26 = -6745;
        goto LABEL_71;
      }
      CFDictionaryGetTypeID();
      v15 = (const void *)CFCreateWithPlistBytes();
      v19 = gLogCategory_AirPlayPairing;
      if (gLogCategory_AirPlayPairing > 30)
        goto LABEL_103;
      if (gLogCategory_AirPlayPairing != -1)
        goto LABEL_42;
      if (_LogCategory_Initialize())
      {
        v19 = gLogCategory_AirPlayPairing;
LABEL_42:
        if (v19 == -1)
          _LogCategory_Initialize();
        LogPrintF();
      }
LABEL_103:
      v34 = 442;
      do
      {
        if (v34 == 426)
          break;
        v35 = (*(_BYTE *)(a1 + v34--))++ + 1;
      }
      while ((v35 & 0x100) != 0);
      v36 = AES_GCM_InitMessage();
      v86 = v36;
      if ((_DWORD)v36)
        goto LABEL_329;
      CFDictionaryGetData();
      v36 = AES_GCM_Decrypt();
      v86 = v36;
      if ((_DWORD)v36)
        goto LABEL_329;
      CFDictionaryGetData();
      if (Length != 16)
      {
LABEL_299:
        APSLogErrorAt(0);
        v81 = -6743;
        goto LABEL_320;
      }
      v86 = AES_GCM_VerifyMessage();
      if (v86)
        goto LABEL_253;
      if (!*(_BYTE *)(a1 + 426) && (v36 = i9kF3TCOFmU(a1, (uint64_t)v89, 0), (v86 = v36) != 0))
      {
LABEL_329:
        APSLogErrorAt(v36);
      }
      else
      {
        v37 = v89[1];
        *(_OWORD *)(a1 + 220) = v89[0];
        *(_OWORD *)(a1 + 236) = v37;
        *(_DWORD *)(a1 + 340) = 107;
        *a4 = 0;
        *a5 = 0;
        if (gLogCategory_AirPlayPairing <= 30
          && (gLogCategory_AirPlayPairing != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        *a6 = 1;
        v86 = 0;
      }
      goto LABEL_253;
    case 'o':
      if (!a3 || !*(_QWORD *)(a1 + 344))
        goto LABEL_278;
      pthread_mutex_lock(&keNhHD7HkAhiLlu6y);
      v20 = mach_absolute_time();
      v21 = h2UmgtdqR3Ht;
      if (!h2UmgtdqR3Ht)
      {
        h2UmgtdqR3Ht = v20;
        v21 = v20;
      }
      if (R7q7ABg4QtpjFZAFcR <= 9)
      {
        ++R7q7ABg4QtpjFZAFcR;
        goto LABEL_65;
      }
      v23 = 2 * RAQKrwbyvjlDG1nD;
      if ((2 * RAQKrwbyvjlDG1nD) >= 0x2A30)
        v23 = 10800;
      if (RAQKrwbyvjlDG1nD)
        v24 = v23;
      else
        v24 = 1;
      RAQKrwbyvjlDG1nD = v24;
      if (v21 + UpTicksPerSecond() * v24 <= v20)
      {
LABEL_65:
        pthread_mutex_unlock(&keNhHD7HkAhiLlu6y);
        CFDictionaryGetTypeID();
        v15 = (const void *)CFCreateWithPlistBytes();
        v25 = gLogCategory_AirPlayPairing;
        if (gLogCategory_AirPlayPairing > 30)
          goto LABEL_230;
        if (gLogCategory_AirPlayPairing == -1)
        {
          if (!_LogCategory_Initialize())
            goto LABEL_230;
          v25 = gLogCategory_AirPlayPairing;
        }
        if (v25 == -1)
          _LogCategory_Initialize();
        LogPrintF();
LABEL_230:
        CFStringGetTypeID();
        v71 = (const void *)CFDictionaryGetTypedValue();
        v72 = CFEqual(v71, CFSTR("pin"));
        if ((_DWORD)v72)
        {
          v73 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (v73)
          {
            v12 = v73;
            if (*(_QWORD *)(a1 + 360))
            {
              SRP_free();
              *(_QWORD *)(a1 + 360) = 0;
            }
            SRP6a_server_method();
            v74 = SRP_new();
            *(_QWORD *)(a1 + 360) = v74;
            if (v74)
            {
              v75 = (void *)CFDictionaryCopyCString();
              v59 = v86;
              if (v86)
                goto LABEL_328;
              v86 = SRP_set_username();
              free(v75);
              v56 = v86;
              if (v86)
                goto LABEL_325;
              v59 = RandomBytes();
              v86 = v59;
              if ((_DWORD)v59)
                goto LABEL_328;
              CFDictionarySetData();
              v56 = SRP_set_params();
              v86 = v56;
              if ((_DWORD)v56
                || (v76 = (void *)CFCopyCString(), v86 = SRP_set_auth_password(), free(v76), (v56 = v86) != 0))
              {
LABEL_325:
                APSLogErrorAt(v56);
                v82 = -6705;
              }
              else
              {
                v84 = 0;
                v54 = SRP_gen_pub();
                v86 = v54;
                if (!(_DWORD)v54)
                {
                  CFDictionarySetData();
                  cstr_free();
                  v59 = CFPropertyListCreateBytes();
                  v86 = v59;
                  if (!(_DWORD)v59)
                  {
                    *(_DWORD *)(a1 + 340) = 113;
                    v77 = gLogCategory_AirPlayPairing;
                    if (gLogCategory_AirPlayPairing > 30)
                      goto LABEL_250;
                    if (gLogCategory_AirPlayPairing == -1)
                    {
                      if (!_LogCategory_Initialize())
                        goto LABEL_250;
                      v77 = gLogCategory_AirPlayPairing;
                    }
                    if (v77 == -1)
                      goto LABEL_248;
                    goto LABEL_249;
                  }
LABEL_328:
                  APSLogErrorAt(v59);
                  goto LABEL_252;
                }
LABEL_326:
                APSLogErrorAt(v54);
                v82 = -6700;
              }
            }
            else
            {
              APSLogErrorAt(0);
              v82 = -6728;
            }
            v86 = v82;
            goto LABEL_252;
          }
LABEL_319:
          APSLogErrorAt(0);
          v81 = -6728;
        }
        else
        {
          APSLogErrorAt(v72);
          v81 = -6735;
        }
LABEL_320:
        v86 = v81;
        goto LABEL_253;
      }
      pthread_mutex_unlock(&keNhHD7HkAhiLlu6y);
      if (gLogCategory_AirPlayPairing <= 50
        && (gLogCategory_AirPlayPairing != -1 || _LogCategory_Initialize()))
      {
        UpTicksPerSecond();
        LogPrintF();
      }
      v26 = -6760;
      goto LABEL_71;
    case 'q':
      if (!a3 || !*(_QWORD *)(a1 + 360))
        goto LABEL_278;
      CFDictionaryGetTypeID();
      v15 = (const void *)CFCreateWithPlistBytes();
      v17 = gLogCategory_AirPlayPairing;
      if (gLogCategory_AirPlayPairing > 30)
        goto LABEL_88;
      if (gLogCategory_AirPlayPairing != -1)
        goto LABEL_29;
      if (_LogCategory_Initialize())
      {
        v17 = gLogCategory_AirPlayPairing;
LABEL_29:
        if (v17 == -1)
          _LogCategory_Initialize();
        LogPrintF();
      }
LABEL_88:
      CFDataGetTypeID();
      v27 = (const __CFData *)CFDictionaryGetTypedValue();
      if (*(_QWORD *)(a1 + 368))
      {
        cstr_free();
        *(_QWORD *)(a1 + 368) = 0;
      }
      CFDataGetBytePtr(v27);
      CFDataGetLength(v27);
      v28 = SRP_compute_key();
      v86 = v28;
      if ((_DWORD)v28)
      {
        APSLogErrorAt(v28);
        v79 = -6737;
      }
      else
      {
        CFDataGetTypeID();
        v29 = (const __CFData *)CFDictionaryGetTypedValue();
        CFDataGetBytePtr(v29);
        CFDataGetLength(v29);
        v86 = SRP_verify();
        if (!v86)
        {
          v30 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (!v30)
            goto LABEL_309;
          v12 = v30;
          v84 = 0;
          v31 = SRP_respond();
          v86 = v31;
          if ((_DWORD)v31)
          {
            APSLogErrorAt(v31);
            v80 = -6700;
LABEL_314:
            v86 = v80;
            goto LABEL_252;
          }
          CFDictionarySetData();
          cstr_free();
          v32 = CFPropertyListCreateBytes();
          v86 = v32;
          if ((_DWORD)v32)
            goto LABEL_315;
          *(_DWORD *)(a1 + 340) = 115;
          v33 = gLogCategory_AirPlayPairing;
          if (gLogCategory_AirPlayPairing <= 30)
          {
            if (gLogCategory_AirPlayPairing != -1)
              goto LABEL_97;
            if (_LogCategory_Initialize())
            {
              v33 = gLogCategory_AirPlayPairing;
LABEL_97:
              if (v33 == -1)
LABEL_248:
                _LogCategory_Initialize();
LABEL_249:
              LogPrintF();
LABEL_250:
              v70 = 0;
              goto LABEL_251;
            }
          }
LABEL_213:
          v70 = 0;
          goto LABEL_251;
        }
LABEL_262:
        v79 = -6754;
      }
      goto LABEL_310;
    case 's':
      if (!a3 || !*(_QWORD *)(a1 + 368))
      {
LABEL_278:
        APSLogErrorAt(0);
        v26 = -6705;
LABEL_71:
        v86 = v26;
        goto LABEL_256;
      }
      CFDictionaryGetTypeID();
      v15 = (const void *)CFCreateWithPlistBytes();
      v22 = gLogCategory_AirPlayPairing;
      if (gLogCategory_AirPlayPairing > 30)
        goto LABEL_119;
      if (gLogCategory_AirPlayPairing != -1)
        goto LABEL_54;
      if (_LogCategory_Initialize())
      {
        v22 = gLogCategory_AirPlayPairing;
LABEL_54:
        if (v22 == -1)
          _LogCategory_Initialize();
        LogPrintF();
      }
LABEL_119:
      CC_SHA512_Init(&c);
      CC_SHA512_Update(&c, "Pair-Setup-AES-Key", 0x12u);
      CC_SHA512_Update(&c, **(const void ***)(a1 + 368), *(_DWORD *)(*(_QWORD *)(a1 + 368) + 8));
      CC_SHA512_Final(md, &c);
      CC_SHA512_Init(&c);
      CC_SHA512_Update(&c, "Pair-Setup-AES-IV", 0x11u);
      CC_SHA512_Update(&c, **(const void ***)(a1 + 368), *(_DWORD *)(*(_QWORD *)(a1 + 368) + 8));
      CC_SHA512_Final(v87, &c);
      if (*(_BYTE *)(a1 + 424))
      {
        AES_GCM_Final();
        *(_BYTE *)(a1 + 424) = 0;
      }
      if (*(_BYTE *)(a1 + 425))
      {
        AES_GCM_Final();
        *(_BYTE *)(a1 + 425) = 0;
      }
      inited = AES_GCM_InitEx();
      v86 = inited;
      if ((_DWORD)inited || (inited = AES_GCM_InitEx(), (v86 = inited) != 0))
      {
        v39 = 0;
      }
      else
      {
        *(_OWORD *)(a1 + 427) = *(_OWORD *)v87;
        v39 = 1;
      }
      for (k = 0; k != 64; ++k)
        md[k] = 0;
      for (m = 0; m != 64; ++m)
        v87[m] = 0;
      if ((v39 & 1) == 0)
        goto LABEL_330;
      *(_WORD *)(a1 + 424) = 257;
      v42 = 442;
      do
      {
        if (v42 == 426)
          break;
        v43 = (*(_BYTE *)(a1 + v42--))++ + 1;
      }
      while ((v43 & 0x100) != 0);
      inited = AES_GCM_InitMessage();
      v86 = inited;
      if ((_DWORD)inited)
        goto LABEL_330;
      CFDictionaryGetData();
      inited = v86;
      if (v86)
        goto LABEL_330;
      inited = AES_GCM_Decrypt();
      v86 = inited;
      if ((_DWORD)inited)
        goto LABEL_330;
      CFDictionaryGetData();
      inited = v86;
      if (v86)
        goto LABEL_330;
      if (Length != 16)
      {
        APSLogErrorAt(0);
        v79 = -6743;
LABEL_310:
        v86 = v79;
        goto LABEL_253;
      }
      v86 = AES_GCM_VerifyMessage();
      if (v86)
        goto LABEL_253;
      if (*(_BYTE *)(a1 + 426) || (inited = i9kF3TCOFmU(a1, (uint64_t)v89, 0), (v86 = inited) == 0))
      {
        inited = KUY675K4ryxHGzD5GVD(a1, 1, v89, 0);
        v86 = inited;
        if (!(_DWORD)inited)
        {
          v44 = 0;
          v45 = a1 + 442;
          do
          {
            if (v44 == -16)
              break;
            v46 = (*(_BYTE *)(v45 + v44--))++ + 1;
          }
          while ((v46 & 0x100) != 0);
          inited = AES_GCM_InitMessage();
          v86 = inited;
          if (!(_DWORD)inited)
          {
            inited = AES_GCM_Encrypt();
            v86 = inited;
            if (!(_DWORD)inited)
            {
              inited = AES_GCM_FinalizeMessage();
              v86 = inited;
              if (!(_DWORD)inited)
              {
                v47 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                if (v47)
                {
                  v12 = v47;
                  CFDictionarySetData();
                  CFDictionarySetData();
                  v32 = CFPropertyListCreateBytes();
                  v86 = v32;
                  if ((_DWORD)v32)
                  {
LABEL_315:
                    APSLogErrorAt(v32);
                    goto LABEL_252;
                  }
                  *(_DWORD *)(a1 + 340) = 117;
                  pthread_mutex_lock(&keNhHD7HkAhiLlu6y);
                  R7q7ABg4QtpjFZAFcR = 0;
                  RAQKrwbyvjlDG1nD = 0;
                  h2UmgtdqR3Ht = 0;
                  pthread_mutex_unlock(&keNhHD7HkAhiLlu6y);
                  v48 = gLogCategory_AirPlayPairing;
                  if (gLogCategory_AirPlayPairing > 30)
                    goto LABEL_222;
                  if (gLogCategory_AirPlayPairing == -1)
                  {
                    if (!_LogCategory_Initialize())
                      goto LABEL_219;
                    v48 = gLogCategory_AirPlayPairing;
                  }
                  if (v48 == -1)
                    _LogCategory_Initialize();
                  LogPrintF();
LABEL_219:
                  if (gLogCategory_AirPlayPairing <= 30)
                  {
                    if (gLogCategory_AirPlayPairing != -1 || _LogCategory_Initialize())
                      LogPrintF();
                    v70 = 1;
LABEL_251:
                    *a6 = v70;
                    v86 = 0;
LABEL_252:
                    CFRelease(v12);
                    goto LABEL_253;
                  }
LABEL_222:
                  v70 = 1;
                  goto LABEL_251;
                }
LABEL_309:
                APSLogErrorAt(0);
                v79 = -6728;
                goto LABEL_310;
              }
            }
          }
        }
      }
LABEL_330:
      APSLogErrorAt(inited);
LABEL_253:
      if (v15)
        CFRelease(v15);
      if (!v86)
        return 0;
LABEL_256:
      if (gLogCategory_AirPlayPairing <= 60
        && (gLogCategory_AirPlayPairing != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      NhB9kxUGdXXE(a1);
      return v86;
    default:
      if (gLogCategory_AirPlayPairing <= 60
        && (gLogCategory_AirPlayPairing != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v26 = -6709;
      goto LABEL_71;
  }
}

uint64_t G30ooIXBM()
{
  return KeychainDeleteFormatted();
}

CFMutableArrayRef Fqbh1vZGfV6J(uint64_t a1, int *a2)
{
  const __CFArray *v3;
  CFMutableArrayRef Mutable;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  const CFDictionaryKeyCallBacks *v8;
  const CFDictionaryValueCallBacks *v9;
  CFMutableDictionaryRef v10;
  CFMutableDictionaryRef v11;
  int v13;

  dispatch_semaphore_wait((dispatch_semaphore_t)tHHVsHfAtS9mW, 0xFFFFFFFFFFFFFFFFLL);
  v3 = (const __CFArray *)KeychainCopyMatchingFormatted();
  dispatch_semaphore_signal((dispatch_semaphore_t)tHHVsHfAtS9mW);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    if (v3 && (Count = CFArrayGetCount(v3), Count >= 1))
    {
      v6 = Count;
      v7 = 0;
      v8 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
      v9 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      while (1)
      {
        CFArrayGetValueAtIndex(v3, v7);
        v10 = CFDictionaryCreateMutable(0, 0, v8, v9);
        if (!v10)
          break;
        v11 = v10;
        CFDictionaryGetData();
        CFRelease(v11);
        if (v6 == ++v7)
          goto LABEL_7;
      }
      APSLogErrorAt(0);
      v13 = -6728;
      CFRelease(Mutable);
      Mutable = 0;
    }
    else
    {
LABEL_7:
      v13 = 0;
    }
  }
  else
  {
    APSLogErrorAt(0);
    v13 = -6728;
  }
  if (v3)
    CFRelease(v3);
  if (a2)
    *a2 = v13;
  return Mutable;
}

uint64_t PHDcW8(uint64_t a1, uint64_t a2)
{
  const __CFArray *v3;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  uint64_t v7;
  const void *v8;
  uint64_t TypedValueAtIndex;
  const __CFDictionary *v10;
  int v12;
  char v13[128];
  char v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  v14[0] = 0;
  if (a2)
    DataToHexCStringEx();
  v3 = (const __CFArray *)KeychainCopyMatchingFormatted();
  if (v3)
  {
    v4 = v3;
    Count = CFArrayGetCount(v3);
    if (Count >= 1)
    {
      v6 = Count;
      v7 = 0;
      v8 = (const void *)*MEMORY[0x1E0CD70E0];
      do
      {
        CFDictionaryGetTypeID();
        TypedValueAtIndex = CFArrayGetTypedValueAtIndex();
        if (TypedValueAtIndex)
        {
          v10 = (const __CFDictionary *)TypedValueAtIndex;
          if (*(_DWORD *)(a1 + 48) == CFDictionaryGetInt64())
          {
            if (!v14[0] || (CFDictionaryGetCString(), !v12) && !strcasecmp(v13, v14))
            {
              if (CFDictionaryGetValue(v10, v8))
                v12 = KeychainDeleteFormatted();
            }
          }
        }
        ++v7;
      }
      while (v6 != v7);
    }
    CFRelease(v4);
  }
  return 0;
}

uint64_t APAudioFormatIndexToASBD(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  if (a2)
  {
    switch(a1)
    {
      case 2:
        result = 0;
        v6 = 0x40BF400000000000;
        goto LABEL_24;
      case 3:
        result = 0;
        v7 = 0x40BF400000000000;
        goto LABEL_26;
      case 4:
        result = 0;
        v6 = 0x40CF400000000000;
        goto LABEL_24;
      case 5:
        result = 0;
        v7 = 0x40CF400000000000;
        goto LABEL_26;
      case 6:
        result = 0;
        v6 = 0x40D7700000000000;
        goto LABEL_24;
      case 7:
        result = 0;
        v7 = 0x40D7700000000000;
        goto LABEL_26;
      case 8:
        result = 0;
        v6 = 0x40DF400000000000;
        goto LABEL_24;
      case 9:
        result = 0;
        v7 = 0x40DF400000000000;
        goto LABEL_26;
      case 10:
        result = 0;
        v6 = 0x40E5888000000000;
        goto LABEL_24;
      case 11:
        result = 0;
        v7 = 0x40E5888000000000;
        goto LABEL_26;
      case 12:
        result = 0;
        v8 = 0x40E5888000000000;
        goto LABEL_28;
      case 13:
        result = 0;
        v9 = 0x40E5888000000000;
        goto LABEL_30;
      case 14:
        result = 0;
        v6 = 0x40E7700000000000;
LABEL_24:
        *(_QWORD *)a2 = v6;
        *(_OWORD *)(a2 + 8) = xmmword_1C96DAB20;
        v4 = xmmword_1C96DAB30;
        goto LABEL_107;
      case 15:
        result = 0;
        v7 = 0x40E7700000000000;
LABEL_26:
        *(_QWORD *)a2 = v7;
        *(_OWORD *)(a2 + 8) = xmmword_1C96DAB00;
        v4 = xmmword_1C96DAB10;
        goto LABEL_107;
      case 16:
        result = 0;
        v8 = 0x40E7700000000000;
LABEL_28:
        *(_QWORD *)a2 = v8;
        *(_OWORD *)(a2 + 8) = xmmword_1C96DAAE0;
        v4 = xmmword_1C96DAAF0;
        goto LABEL_107;
      case 17:
        result = 0;
        v9 = 0x40E7700000000000;
LABEL_30:
        *(_QWORD *)a2 = v9;
        *(_OWORD *)(a2 + 8) = xmmword_1C96DAAC0;
        v4 = xmmword_1C96DAAD0;
        goto LABEL_107;
      case 18:
        result = 0;
        v10 = 0x40E5888000000000;
        goto LABEL_34;
      case 19:
        result = 0;
        v11 = 0x40E5888000000000;
        goto LABEL_36;
      case 20:
        result = 0;
        v10 = 0x40E7700000000000;
LABEL_34:
        *(_QWORD *)a2 = v10;
        v12 = xmmword_1C96DA980;
        goto LABEL_106;
      case 21:
        result = 0;
        v11 = 0x40E7700000000000;
LABEL_36:
        *(_QWORD *)a2 = v11;
        v12 = xmmword_1C96DA960;
        goto LABEL_106;
      case 22:
        result = 0;
        v13 = 0x40E5888000000000;
        goto LABEL_39;
      case 23:
        result = 0;
        v13 = 0x40E7700000000000;
LABEL_39:
        *(_QWORD *)a2 = v13;
        v12 = xmmword_1C96DA950;
        goto LABEL_106;
      case 24:
        result = 0;
        v14 = 0x40E5888000000000;
        goto LABEL_42;
      case 25:
        result = 0;
        v14 = 0x40E7700000000000;
LABEL_42:
        *(_QWORD *)a2 = v14;
        v12 = xmmword_1C96DA940;
        goto LABEL_106;
      case 26:
        result = 0;
        v15 = 0x40CF400000000000;
        goto LABEL_60;
      case 27:
        result = 0;
        v15 = 0x40D7700000000000;
        goto LABEL_60;
      case 28:
        result = 0;
        *(_QWORD *)a2 = 0x40CF400000000000;
        v16 = xmmword_1C96DA930;
        goto LABEL_61;
      case 29:
        result = 0;
        *(_QWORD *)a2 = 0x40D7700000000000;
        v16 = xmmword_1C96DA920;
        goto LABEL_61;
      case 30:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        v16 = xmmword_1C96DA900;
        goto LABEL_61;
      case 31:
        result = 0;
        v15 = 0x40E5888000000000;
        goto LABEL_60;
      case 32:
        result = 0;
        v15 = 0x40E7700000000000;
        goto LABEL_60;
      case 33:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        v3 = xmmword_1C96DA890;
        goto LABEL_104;
      case 34:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        v17 = xmmword_1C96DA890;
        goto LABEL_84;
      case 35:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        v18 = xmmword_1C96DA890;
        goto LABEL_71;
      case 38:
      case 78:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        *(_OWORD *)(a2 + 8) = xmmword_1C96DAA80;
        v4 = xmmword_1C96DAA90;
        goto LABEL_107;
      case 39:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        v19 = xmmword_1C96DA950;
        goto LABEL_102;
      case 40:
      case 90:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        v3 = xmmword_1C96DA950;
        goto LABEL_104;
      case 41:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        v19 = xmmword_1C96DA940;
        goto LABEL_102;
      case 42:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        v3 = xmmword_1C96DA940;
        goto LABEL_104;
      case 43:
        result = 0;
        v15 = 0x40DF400000000000;
LABEL_60:
        *(_QWORD *)a2 = v15;
        v16 = xmmword_1C96DA940;
LABEL_61:
        *(_OWORD *)(a2 + 8) = v16;
        v4 = xmmword_1C96DA910;
        goto LABEL_107;
      case 44:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        *(_OWORD *)(a2 + 8) = xmmword_1C96DAAA0;
        v4 = xmmword_1C96DAAB0;
        goto LABEL_107;
      case 45:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        *(_OWORD *)(a2 + 8) = xmmword_1C96DAA40;
        v4 = xmmword_1C96DAA50;
        goto LABEL_107;
      case 46:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        *(_OWORD *)(a2 + 8) = xmmword_1C96DAA20;
        v4 = xmmword_1C96DAA30;
        goto LABEL_107;
      case 47:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        *(_OWORD *)(a2 + 8) = xmmword_1C96DAA00;
        v4 = xmmword_1C96DAA10;
        goto LABEL_107;
      case 48:
      case 79:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        *(_OWORD *)(a2 + 8) = xmmword_1C96DA9E0;
        v4 = xmmword_1C96DA9F0;
        goto LABEL_107;
      case 49:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        v12 = xmmword_1C96DA990;
        goto LABEL_106;
      case 50:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        v19 = xmmword_1C96DA990;
        goto LABEL_102;
      case 51:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        v3 = xmmword_1C96DA990;
        goto LABEL_104;
      case 52:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        v17 = xmmword_1C96DA990;
        goto LABEL_84;
      case 53:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        v18 = xmmword_1C96DA990;
LABEL_71:
        *(_OWORD *)(a2 + 8) = v18;
        v4 = xmmword_1C96DA8A0;
        goto LABEL_107;
      case 54:
        result = 0;
        v20 = 0x40E7700000000000;
        goto LABEL_87;
      case 55:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        v19 = xmmword_1C96DA8C0;
        goto LABEL_102;
      case 56:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        v3 = xmmword_1C96DA8C0;
        goto LABEL_104;
      case 57:
        result = 0;
        v21 = 0x40E7700000000000;
        goto LABEL_89;
      case 58:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        v19 = xmmword_1C96DA8B0;
        goto LABEL_102;
      case 60:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        v3 = xmmword_1C96DA8B0;
        goto LABEL_104;
      case 61:
        result = 0;
        v22 = 0x40E7700000000000;
        goto LABEL_92;
      case 62:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        v12 = xmmword_1C96DA890;
        goto LABEL_106;
      case 63:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        v19 = xmmword_1C96DA890;
        goto LABEL_102;
      case 64:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        v12 = xmmword_1C96DA820;
        goto LABEL_106;
      case 65:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        v19 = xmmword_1C96DA820;
        goto LABEL_102;
      case 66:
      case 67:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        v3 = xmmword_1C96DA820;
        goto LABEL_104;
      case 68:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        v17 = xmmword_1C96DA820;
LABEL_84:
        *(_OWORD *)(a2 + 8) = v17;
        v4 = xmmword_1C96DA830;
        goto LABEL_107;
      case 69:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        v23 = xmmword_1C96DA9A0;
        goto LABEL_97;
      case 70:
        result = 0;
        v20 = 0x40E5888000000000;
LABEL_87:
        *(_QWORD *)a2 = v20;
        v12 = xmmword_1C96DA8C0;
        goto LABEL_106;
      case 71:
        result = 0;
        v21 = 0x40E5888000000000;
LABEL_89:
        *(_QWORD *)a2 = v21;
        v12 = xmmword_1C96DA8B0;
        goto LABEL_106;
      case 72:
        result = 0;
        *(_QWORD *)a2 = 0x40E5888000000000;
        v12 = xmmword_1C96DA8F0;
        goto LABEL_106;
      case 73:
        result = 0;
        v22 = 0x40E5888000000000;
LABEL_92:
        *(_QWORD *)a2 = v22;
        v12 = xmmword_1C96DA8D0;
        goto LABEL_106;
      case 74:
        result = 0;
        v24 = 0x40E5888000000000;
        goto LABEL_95;
      case 75:
        result = 0;
        v24 = 0x40E7700000000000;
LABEL_95:
        *(_QWORD *)a2 = v24;
        v12 = xmmword_1C96DA800;
        goto LABEL_106;
      case 76:
      case 77:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        *(_OWORD *)(a2 + 8) = xmmword_1C96DA820;
        v4 = xmmword_1C96DA840;
        goto LABEL_107;
      case 80:
      case 82:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        v5 = xmmword_1C96DAA70;
        goto LABEL_9;
      case 81:
      case 83:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        v5 = xmmword_1C96DA9C0;
LABEL_9:
        *(_OWORD *)(a2 + 8) = v5;
        v4 = xmmword_1C96DA9D0;
        goto LABEL_107;
      case 84:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        v23 = xmmword_1C96DAA60;
LABEL_97:
        *(_OWORD *)(a2 + 8) = v23;
        v4 = xmmword_1C96DA9B0;
        goto LABEL_107;
      case 85:
        result = 0;
        v25 = 0x40E5888000000000;
        goto LABEL_100;
      case 86:
        result = 0;
        v25 = 0x40E7700000000000;
LABEL_100:
        *(_QWORD *)a2 = v25;
        v12 = xmmword_1C96DA970;
        goto LABEL_106;
      case 87:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        v19 = xmmword_1C96DA880;
LABEL_102:
        *(_OWORD *)(a2 + 8) = v19;
        v4 = xmmword_1C96DA860;
        goto LABEL_107;
      case 88:
        result = 0;
        *(_QWORD *)a2 = 0x40E7700000000000;
        v3 = xmmword_1C96DA870;
LABEL_104:
        *(_OWORD *)(a2 + 8) = v3;
        v4 = xmmword_1C96DA850;
        goto LABEL_107;
      case 89:
        result = 0;
        *(_QWORD *)a2 = 0x40E5888000000000;
        v12 = xmmword_1C96DA8E0;
LABEL_106:
        *(_OWORD *)(a2 + 8) = v12;
        v4 = xmmword_1C96DA810;
LABEL_107:
        *(_OWORD *)(a2 + 24) = v4;
        break;
      default:
        if (gLogCategory_APAudioFormat <= 90
          && (gLogCategory_APAudioFormat != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        result = 4294960561;
        break;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  return result;
}

uint64_t APAudioFormatIndexGetBitsPerChannel(uint64_t a1)
{
  uint64_t v1;
  int v3;
  unsigned int v4;

  v1 = 16;
  switch(a1)
  {
    case 18:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 49:
    case 50:
    case 51:
    case 52:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 60:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 70:
    case 71:
    case 72:
    case 74:
    case 75:
    case 76:
    case 77:
    case 87:
    case 88:
    case 89:
    case 90:
      return v1;
    default:
      if (((1 << (a1 - 19)) & 0x40040000000005) != 0)
        v3 = 24;
      else
        v3 = 0;
      if ((unint64_t)(a1 - 19) <= 0x36)
        v4 = v3;
      else
        v4 = 0;
      if ((unint64_t)(a1 - 85) >= 2)
        v1 = v4;
      else
        v1 = 20;
      break;
  }
  return v1;
}

uint64_t APAudioFormatIndexToChannelLayoutTag(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t result;
  int v4;

  if (a2)
  {
    v2 = a1 - 2;
    if ((unint64_t)(a1 - 2) > 0x58)
    {
      v4 = -65536;
      result = 4294960561;
    }
    else
    {
      result = dword_1C96DA40C[v2];
      v4 = dword_1C96DA570[v2];
    }
    *a2 = v4;
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  return result;
}

uint64_t ASBDToAPAudioFormatIndex(uint64_t a1, int a2, uint64_t *a3)
{
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t result;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  unint64_t v15;
  _QWORD *v16;
  double v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int IsAudioChannelLayoutTag7_1;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;

  if (!a1 || !a3)
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  v5 = *(_DWORD *)(a1 + 8);
  if (v5 > 1885430114)
  {
    if (v5 <= 1902207855)
    {
      if (v5 > 1902207794)
      {
        if (v5 == 1902207795)
        {
          if (*(double *)a1 == 48000.0 && *(_DWORD *)(a1 + 28) == 6)
          {
            v7 = 87;
            goto LABEL_171;
          }
          return 4294960561;
        }
        if (v5 == 1902207848)
        {
          if (*(double *)a1 == 44100.0 && *(_DWORD *)(a1 + 28) == 2)
          {
            v7 = 71;
            goto LABEL_171;
          }
          if (*(double *)a1 == 48000.0)
          {
            v23 = *(_DWORD *)(a1 + 28);
            switch(v23)
            {
              case 2:
                v7 = 57;
                goto LABEL_171;
              case 8:
                v7 = 60;
                goto LABEL_171;
              case 6:
                v7 = 58;
                goto LABEL_171;
            }
          }
          return 4294960561;
        }
      }
      else
      {
        if (v5 == 1885430115)
        {
          if (*(double *)a1 == 44100.0 && *(_DWORD *)(a1 + 28) == 2)
          {
            v7 = 89;
            goto LABEL_171;
          }
          return 4294960561;
        }
        if (v5 == 1902207331)
        {
          if (*(double *)a1 == 44100.0 && *(_DWORD *)(a1 + 28) == 2)
          {
            v7 = 70;
            goto LABEL_171;
          }
          if (*(double *)a1 == 48000.0)
          {
            v22 = *(_DWORD *)(a1 + 28);
            switch(v22)
            {
              case 2:
                v7 = 54;
                goto LABEL_171;
              case 8:
                v7 = 56;
                goto LABEL_171;
              case 6:
                v7 = 55;
                goto LABEL_171;
            }
          }
          return 4294960561;
        }
      }
      goto LABEL_92;
    }
    if (v5 > 1902324530)
    {
      if (v5 != 1902324531)
      {
        if (v5 == 1902469939)
        {
          if (*(double *)a1 == 48000.0 && *(_DWORD *)(a1 + 28) == 8)
          {
            v7 = 88;
            goto LABEL_171;
          }
          return 4294960561;
        }
        if (v5 == 1902928227)
        {
          if (*(_DWORD *)(a1 + 12) == 3 && *(_DWORD *)(a1 + 28) == 2)
          {
            if (*(double *)a1 == 44100.0)
            {
              v7 = 73;
              goto LABEL_171;
            }
            if (*(double *)a1 == 48000.0)
            {
              v7 = 61;
              goto LABEL_171;
            }
          }
          return 4294960561;
        }
LABEL_92:
        if (gLogCategory_APAudioFormat <= 50
          && (gLogCategory_APAudioFormat != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        return 4294960561;
      }
      if (*(double *)a1 != 48000.0)
        return 4294960561;
      HIDWORD(v19) = *(_DWORD *)(a1 + 28);
      LODWORD(v19) = HIDWORD(v19) - 2;
      v14 = v19 >> 1;
      if (v14 >= 8 || ((0xADu >> v14) & 1) == 0)
        return 4294960561;
      v16 = &unk_1C96DA748;
LABEL_69:
      v7 = v16[v14];
      goto LABEL_171;
    }
    if (v5 == 1902207856)
    {
      if (*(double *)a1 == 44100.0 && *(_DWORD *)(a1 + 28) == 2)
      {
        v7 = 72;
        goto LABEL_171;
      }
      return 4294960561;
    }
    v10 = 1902211171;
    goto LABEL_42;
  }
  if (v5 <= 1634754914)
  {
    if (v5 <= 1633772388)
    {
      if (v5 == 778924083)
      {
        if (*(_DWORD *)(a1 + 28) == 2)
        {
          v20 = (int)*(double *)a1;
          if (v20 == 44100)
          {
            v7 = 74;
            goto LABEL_171;
          }
          if (v20 == 48000)
          {
            v7 = 75;
            goto LABEL_171;
          }
        }
        return 4294960561;
      }
      if (v5 == 1633772320)
      {
        v8 = *(_DWORD *)(a1 + 28);
        switch(v8)
        {
          case 8:
            if (*(double *)a1 == 48000.0)
            {
              IsAudioChannelLayoutTag7_1 = APAudioFormatIsAudioChannelLayoutTag7_1(a2);
              v7 = 90;
              if (!IsAudioChannelLayoutTag7_1)
                v7 = 40;
              goto LABEL_171;
            }
            break;
          case 6:
            if (*(double *)a1 == 48000.0)
            {
              v7 = 39;
              goto LABEL_171;
            }
            break;
          case 2:
            v9 = (int)*(double *)a1;
            if (v9 == 44100)
            {
              v7 = 22;
              goto LABEL_171;
            }
            if (v9 == 48000)
            {
              v7 = 23;
              goto LABEL_171;
            }
            break;
        }
        return 4294960561;
      }
      goto LABEL_92;
    }
    if (v5 != 1633772389)
    {
      if (v5 == 1634492771)
      {
        if (*(double *)a1 == 44100.0 && *(_DWORD *)(a1 + 28) == 2)
        {
          v12 = *(_DWORD *)(a1 + 12) - 1;
          if (v12 >= 3)
            return 4294960561;
          v13 = &unk_1C96DA6D8;
        }
        else
        {
          if (*(double *)a1 != 48000.0)
            return 4294960561;
          if (*(_DWORD *)(a1 + 28) != 2)
            return 4294960561;
          v12 = *(_DWORD *)(a1 + 12) - 1;
          if (v12 >= 3)
            return 4294960561;
          v13 = &unk_1C96DA6F0;
        }
        v7 = v13[v12];
        goto LABEL_171;
      }
      goto LABEL_92;
    }
    result = 4294960561;
    switch(*(_DWORD *)(a1 + 28))
    {
      case 1:
        v21 = (int)*(double *)a1;
        if (v21 <= 31999)
        {
          if (v21 == 16000)
          {
            v7 = 26;
            goto LABEL_171;
          }
          if (v21 == 24000)
          {
            v7 = 27;
            goto LABEL_171;
          }
        }
        else
        {
          switch(v21)
          {
            case 32000:
              v7 = 43;
              goto LABEL_171;
            case 44100:
              v7 = 31;
              goto LABEL_171;
            case 48000:
              v7 = 32;
              goto LABEL_171;
          }
        }
        break;
      case 2:
        v27 = (int)*(double *)a1;
        if (v27 == 44100)
        {
          v7 = 24;
          goto LABEL_171;
        }
        if (v27 == 48000)
        {
          v7 = 25;
          goto LABEL_171;
        }
        break;
      case 6:
        if (*(double *)a1 == 48000.0)
        {
          v7 = 41;
          goto LABEL_171;
        }
        break;
      case 8:
        if (*(double *)a1 == 48000.0)
        {
          v7 = 42;
          goto LABEL_171;
        }
        break;
      default:
        return result;
    }
    return result;
  }
  if (v5 <= 1700997938)
  {
    if (v5 == 1634754915)
    {
LABEL_43:
      if (*(double *)a1 != 48000.0)
        return 4294960561;
      result = 4294960561;
      v7 = 64;
      switch(*(_DWORD *)(a1 + 28))
      {
        case 2:
          goto LABEL_171;
        case 6:
          v7 = 65;
          goto LABEL_171;
        case 8:
          v25 = APAudioFormatIsAudioChannelLayoutTag7_1(a2);
          v7 = 66;
          if (v25)
            v7 = 67;
          goto LABEL_171;
        case 0xA:
          v7 = 76;
          if (a2 == 12845066)
            v7 = 77;
          goto LABEL_171;
        case 0xC:
          v7 = 68;
          goto LABEL_171;
        default:
          return result;
      }
      return result;
    }
    v10 = 1667330147;
LABEL_42:
    if (v5 != v10)
      goto LABEL_92;
    goto LABEL_43;
  }
  if (v5 == 1700997939)
  {
    if (*(double *)a1 != 48000.0)
      return 4294960561;
    HIDWORD(v15) = *(_DWORD *)(a1 + 28);
    LODWORD(v15) = HIDWORD(v15) - 2;
    v14 = v15 >> 1;
    if (v14 >= 8 || ((0xADu >> v14) & 1) == 0)
      return 4294960561;
    v16 = &unk_1C96DA708;
    goto LABEL_69;
  }
  if (v5 != 1819304813)
  {
    if (v5 == 1869641075)
    {
      if (*(_DWORD *)(a1 + 28) == 1)
      {
        v6 = (int)*(double *)a1;
        switch(v6)
        {
          case 16000:
            v7 = 28;
            goto LABEL_171;
          case 48000:
            v7 = 30;
            goto LABEL_171;
          case 24000:
            v7 = 29;
LABEL_171:
            result = 0;
            *a3 = v7;
            return result;
        }
      }
      return 4294960561;
    }
    goto LABEL_92;
  }
  v17 = *(double *)a1;
  if (*(double *)a1 == 8000.0)
  {
    v18 = *(_DWORD *)(a1 + 28);
    if (v18 == 1)
    {
      v7 = 2;
      goto LABEL_171;
    }
    if (v18 == 2)
    {
      v7 = 3;
      goto LABEL_171;
    }
    return 4294960561;
  }
  if (v17 == 16000.0)
  {
    v24 = *(_DWORD *)(a1 + 28);
    if (v24 == 1)
    {
      v7 = 4;
      goto LABEL_171;
    }
    if (v24 == 2)
    {
      v7 = 5;
      goto LABEL_171;
    }
    return 4294960561;
  }
  if (v17 == 24000.0)
  {
    v28 = *(_DWORD *)(a1 + 28);
    if (v28 == 1)
    {
      v7 = 6;
      goto LABEL_171;
    }
    if (v28 == 2)
    {
      v7 = 7;
      goto LABEL_171;
    }
    return 4294960561;
  }
  if (v17 == 32000.0)
  {
    v29 = *(_DWORD *)(a1 + 28);
    if (v29 == 1)
    {
      v7 = 8;
      goto LABEL_171;
    }
    if (v29 == 2)
    {
      v7 = 9;
      goto LABEL_171;
    }
    return 4294960561;
  }
  if (v17 == 44100.0)
  {
    v30 = *(_DWORD *)(a1 + 28);
    if (v30 == 2)
    {
      v33 = *(_DWORD *)(a1 + 32);
      if (v33 == 16)
      {
        v7 = 11;
        goto LABEL_171;
      }
      if (v33 == 24)
      {
        v7 = 13;
        goto LABEL_171;
      }
    }
    else if (v30 == 1)
    {
      v31 = *(_DWORD *)(a1 + 32);
      if (v31 == 16)
      {
        v7 = 10;
        goto LABEL_171;
      }
      if (v31 == 24)
      {
        v7 = 12;
        goto LABEL_171;
      }
    }
    return 4294960561;
  }
  if (v17 != 48000.0)
    return 4294960561;
  result = 4294960561;
  switch(*(_DWORD *)(a1 + 28))
  {
    case 1:
      v32 = *(_DWORD *)(a1 + 32);
      if (v32 == 16)
      {
        v7 = 14;
        goto LABEL_171;
      }
      if (v32 == 24)
      {
        v7 = 16;
        goto LABEL_171;
      }
      if ((*(_BYTE *)(a1 + 12) & 1) != 0)
      {
        v7 = 45;
        goto LABEL_171;
      }
      break;
    case 2:
      v34 = *(_DWORD *)(a1 + 32);
      if (v34 == 16)
      {
        v7 = 15;
        goto LABEL_171;
      }
      if (v34 == 24)
      {
        v7 = 17;
        goto LABEL_171;
      }
      if ((*(_BYTE *)(a1 + 12) & 1) != 0)
      {
        v7 = 46;
        goto LABEL_171;
      }
      break;
    case 6:
      if (*(_DWORD *)(a1 + 32) == 16)
      {
        v7 = 44;
        goto LABEL_171;
      }
      if ((*(_BYTE *)(a1 + 12) & 1) != 0)
      {
        v7 = 47;
        goto LABEL_171;
      }
      break;
    case 8:
      if (*(_DWORD *)(a1 + 32) == 16)
      {
        v7 = 38;
        goto LABEL_171;
      }
      if ((*(_BYTE *)(a1 + 12) & 1) != 0)
      {
        v7 = 48;
        goto LABEL_171;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t APAudioFormatIsAudioChannelLayoutTag7_1(int a1)
{
  uint64_t result;
  int v3;

  result = 0;
  if (a1 <= 10747911)
  {
    if (a1 <= 8519687)
    {
      if (a1 > 8388615)
      {
        if (a1 == 8388616)
          return 1;
        v3 = 8454152;
      }
      else
      {
        if (a1 == 8257544)
          return 1;
        v3 = 8323080;
      }
    }
    else if (a1 <= 10551303)
    {
      if (a1 == 8519688)
        return 1;
      v3 = 10485768;
    }
    else
    {
      if (a1 == 10551304 || a1 == 10616840)
        return 1;
      v3 = 10682376;
    }
LABEL_27:
    if (a1 != v3)
      return result;
    return 1;
  }
  if (a1 > 11993095)
  {
    if (a1 <= 12386311)
    {
      if (a1 == 11993096)
        return 1;
      v3 = 12058632;
    }
    else
    {
      if (a1 == 12386312 || a1 == 14090248)
        return 1;
      v3 = 13172744;
    }
    goto LABEL_27;
  }
  if (a1 <= 10878983)
  {
    if (a1 == 10747912)
      return 1;
    v3 = 10813448;
    goto LABEL_27;
  }
  if (a1 != 10878984 && a1 != 10944520)
  {
    v3 = 11599880;
    goto LABEL_27;
  }
  return 1;
}

uint64_t APAudioFormatToASBD(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v3 = 0xC6C70636DLL;
  v4 = 4294960561;
  if (a1 > 0x3FFFFFFF)
  {
    if (a1 <= 0x7FFFFFFFFFFFLL)
    {
      if (a1 > 0x7FFFFFFFFFLL)
      {
        if (a1 <= 0x7FFFFFFFFFFLL)
        {
          if (a1 <= 0x1FFFFFFFFFFLL)
          {
            if (a1 != 0x8000000000)
            {
              if (a1 != 0x10000000000)
                return v4;
              v5 = 0;
              v6 = 0x40000000000;
              v3 = 1633772320;
              goto LABEL_141;
            }
            v5 = 0;
            v6 = 0x40000000000;
            v3 = 1633772320;
LABEL_138:
            v7 = 6;
LABEL_160:
            v8 = 0x40E7700000000000;
            goto LABEL_161;
          }
          if (a1 == 0x20000000000)
          {
            v5 = 0;
            v6 = 0x1E000000000;
            v3 = 1633772389;
            goto LABEL_138;
          }
          if (a1 != 0x40000000000)
            return v4;
          v5 = 0;
          v6 = 0x1E000000000;
          v3 = 1633772389;
          goto LABEL_141;
        }
        if (a1 <= 0x1FFFFFFFFFFFLL)
        {
          if (a1 != 0x80000000000)
          {
            if (a1 != 0x100000000000)
              return v4;
            v6 = 0x10000000CLL;
            v5 = 16;
            goto LABEL_138;
          }
          v5 = 0;
          v6 = 0x1E000000000;
          v3 = 1633772389;
          goto LABEL_134;
        }
        if (a1 != 0x200000000000)
        {
          if (a1 != 0x400000000000)
            return v4;
          v6 = 0x100000008;
          v3 = 0x16C70636DLL;
          v5 = 32;
          goto LABEL_159;
        }
        v6 = 0x100000004;
        v3 = 0x16C70636DLL;
        v5 = 32;
LABEL_154:
        v7 = 1;
        goto LABEL_160;
      }
      if (a1 > 0x1FFFFFFFFLL)
      {
        if (a1 <= 0x7FFFFFFFFLL)
        {
          if (a1 == 0x200000000)
          {
            v5 = 0;
            v6 = 0x60000000000;
            v3 = 1902324531;
            goto LABEL_141;
          }
          if (a1 != 0x400000000)
            return v4;
          v5 = 0;
          v6 = 0x60000000000;
          v3 = 1902324531;
LABEL_149:
          v7 = 12;
          goto LABEL_160;
        }
        if (a1 != 0x800000000)
        {
          if (a1 != 0x4000000000)
            return v4;
          v6 = 0x100000010;
          v5 = 16;
          goto LABEL_141;
        }
        v5 = 0;
        v6 = 0x60000000000;
        v3 = 1902324531;
        goto LABEL_146;
      }
      if (a1 == 0x40000000)
      {
        v5 = 0;
        v6 = 0x3C000000000;
        v3 = 1869641075;
        goto LABEL_154;
      }
      if (a1 != 0x80000000)
      {
        if (a1 != 0x100000000)
          return v4;
        v5 = 0;
        v6 = 0x1E000000000;
        v3 = 1633772389;
        goto LABEL_154;
      }
      v5 = 0;
      v6 = 0x1E000000000;
      v3 = 1633772389;
      goto LABEL_128;
    }
    if (a1 <= 0x3FFFFFFFFFFFFFLL)
    {
      if (a1 > 0x3FFFFFFFFFFFFLL)
      {
        if (a1 <= 0xFFFFFFFFFFFFFLL)
        {
          if (a1 == 0x4000000000000)
          {
            v5 = 0;
            v6 = 0x60000000000;
            v3 = 1700997939;
            goto LABEL_138;
          }
          if (a1 != 0x8000000000000)
            return v4;
          v5 = 0;
          v6 = 0x60000000000;
          v3 = 1700997939;
LABEL_141:
          v7 = 8;
          goto LABEL_160;
        }
        if (a1 == 0x10000000000000)
        {
          v5 = 0;
          v6 = 0x60000000000;
          v3 = 1700997939;
          goto LABEL_149;
        }
        if (a1 != 0x20000000000000)
          return v4;
        v5 = 0;
        v6 = 0x60000000000;
        v3 = 1700997939;
LABEL_146:
        v7 = 16;
        goto LABEL_160;
      }
      if (a1 == 0x800000000000)
      {
        v6 = 0x100000018;
        v3 = 0x16C70636DLL;
        v5 = 32;
        goto LABEL_138;
      }
      if (a1 == 0x1000000000000)
      {
        v6 = 0x100000020;
        v3 = 0x16C70636DLL;
        v5 = 32;
        goto LABEL_141;
      }
      if (a1 != 0x2000000000000)
        return v4;
      v5 = 0;
      v6 = 0x60000000000;
      v3 = 1700997939;
    }
    else if (a1 > 0x3FFFFFFFFFFFFFFLL)
    {
      if (a1 <= 0x1FFFFFFFFFFFFFFFLL)
      {
        if (a1 == 0x400000000000000)
        {
          v5 = 0;
          v6 = 0x40000000000;
          v3 = 1902207848;
          goto LABEL_138;
        }
        if (a1 != 0x1000000000000000)
          return v4;
        v5 = 0;
        v6 = 0x40000000000;
        v3 = 1902207848;
        goto LABEL_141;
      }
      if (a1 == 0x2000000000000000)
      {
        v5 = 0;
        v6 = 0x100000000000;
        v3 = 0x3716C6163;
      }
      else
      {
        if (a1 != 0x4000000000000000)
          return v4;
        v5 = 0;
        v6 = 0x60000000000;
        v3 = 1902324531;
      }
    }
    else if (a1 > 0xFFFFFFFFFFFFFFLL)
    {
      if (a1 == 0x100000000000000)
      {
        v5 = 0;
        v6 = 0x40000000000;
        v3 = 1902207331;
        goto LABEL_141;
      }
      if (a1 != 0x200000000000000)
        return v4;
      v5 = 0;
      v6 = 0x40000000000;
      v3 = 1902207848;
    }
    else
    {
      if (a1 != 0x40000000000000)
      {
        if (a1 != 0x80000000000000)
          return v4;
        v5 = 0;
        v6 = 0x40000000000;
        v3 = 1902207331;
        goto LABEL_138;
      }
      v5 = 0;
      v6 = 0x40000000000;
      v3 = 1902207331;
    }
LABEL_159:
    v7 = 2;
    goto LABEL_160;
  }
  if (a1 >= 0x8000)
  {
    if (a1 >= 0x400000)
    {
      if (a1 <= 0x3FFFFFF)
      {
        if (a1 > 0xFFFFFF)
        {
          if (a1 != 0x1000000)
          {
            if (a1 != 0x2000000)
              return v4;
            v5 = 0;
            v6 = 0x1E000000000;
            v3 = 1633772389;
            goto LABEL_159;
          }
          v5 = 0;
          v6 = 0x1E000000000;
          v3 = 1633772389;
        }
        else
        {
          if (a1 != 0x400000)
          {
            if (a1 != 0x800000)
              return v4;
            v5 = 0;
            v6 = 0x40000000000;
            v3 = 1633772320;
            goto LABEL_159;
          }
          v5 = 0;
          v6 = 0x40000000000;
          v3 = 1633772320;
        }
        goto LABEL_151;
      }
      if (a1 <= 0xFFFFFFF)
      {
        if (a1 != 0x4000000)
        {
          if (a1 != 0x8000000)
            return v4;
          v5 = 0;
          v6 = 0x1E000000000;
          v3 = 1633772389;
          goto LABEL_143;
        }
        v5 = 0;
        v6 = 0x1E000000000;
        v3 = 1633772389;
        goto LABEL_156;
      }
      if (a1 != 0x10000000)
      {
        if (a1 != 0x20000000)
          return v4;
        v5 = 0;
        v6 = 0x1E000000000;
        v3 = 1869641075;
        goto LABEL_143;
      }
      v5 = 0;
      v6 = 0x14000000000;
      v3 = 1869641075;
      goto LABEL_156;
    }
    if (a1 < 0x40000)
    {
      if (a1 != 0x8000)
      {
        if (a1 != 0x10000)
        {
          if (a1 != 0x20000)
            return v4;
          v6 = 0x100000006;
          v5 = 24;
          goto LABEL_159;
        }
        v6 = 0x100000003;
        v5 = 24;
        goto LABEL_154;
      }
      v6 = 0x100000004;
      v5 = 16;
      goto LABEL_159;
    }
    if (a1 >= 0x100000)
    {
      if (a1 == 0x100000)
      {
        v5 = 0;
        v6 = 0x16000000000;
        v3 = 0x1616C6163;
      }
      else
      {
        if (a1 != 0x200000)
          return v4;
        v5 = 0;
        v6 = 0x16000000000;
        v3 = 0x3616C6163;
      }
      goto LABEL_159;
    }
    if (a1 == 0x40000)
    {
      v5 = 0;
      v6 = 0x16000000000;
      v3 = 0x1616C6163;
    }
    else
    {
      if (a1 != 0x80000)
        return v4;
      v5 = 0;
      v6 = 0x16000000000;
      v3 = 0x3616C6163;
    }
LABEL_151:
    v7 = 2;
    goto LABEL_152;
  }
  v6 = 0x100000002;
  if (a1 <= 255)
  {
    if (a1 <= 15)
    {
      if (a1 != 0x8000000000000000)
      {
        v8 = 0x40BF400000000000;
        if (a1 == 4)
        {
          v5 = 16;
          v7 = 1;
        }
        else
        {
          if (a1 != 8)
            return v4;
          v6 = 0x100000004;
          v5 = 16;
          v7 = 2;
        }
        goto LABEL_161;
      }
      v5 = 0;
      v6 = 0x60000000000;
      v3 = 1902324531;
      goto LABEL_138;
    }
    if (a1 > 63)
    {
      if (a1 != 64)
      {
        if (a1 != 128)
          return v4;
        v6 = 0x100000004;
        v5 = 16;
        v7 = 2;
        goto LABEL_144;
      }
      v5 = 16;
LABEL_143:
      v7 = 1;
LABEL_144:
      v8 = 0x40D7700000000000;
      goto LABEL_161;
    }
    if (a1 != 16)
    {
      if (a1 != 32)
        return v4;
      v6 = 0x100000004;
      v5 = 16;
      v7 = 2;
      goto LABEL_157;
    }
    v5 = 16;
LABEL_156:
    v7 = 1;
LABEL_157:
    v8 = 0x40CF400000000000;
    goto LABEL_161;
  }
  if (a1 > 2047)
  {
    if (a1 >= 0x2000)
    {
      if (a1 != 0x2000)
      {
        if (a1 != 0x4000)
          return v4;
        v5 = 16;
        goto LABEL_154;
      }
      v6 = 0x100000006;
      v5 = 24;
      goto LABEL_151;
    }
    if (a1 == 2048)
    {
      v6 = 0x100000004;
      v5 = 16;
      goto LABEL_151;
    }
    if (a1 != 4096)
      return v4;
    v6 = 0x100000003;
    v5 = 24;
LABEL_128:
    v7 = 1;
LABEL_152:
    v8 = 0x40E5888000000000;
    goto LABEL_161;
  }
  if (a1 != 256)
  {
    if (a1 == 512)
    {
      v6 = 0x100000004;
      v5 = 16;
      v7 = 2;
      goto LABEL_136;
    }
    if (a1 != 1024)
      return v4;
    v5 = 16;
    goto LABEL_128;
  }
  v5 = 16;
LABEL_134:
  v7 = 1;
LABEL_136:
  v8 = 0x40DF400000000000;
LABEL_161:
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 24) = v6;
  *(_DWORD *)(a2 + 28) = v7;
  *(_DWORD *)(a2 + 32) = v5;
  *(_DWORD *)(a2 + 36) = 0;
  if (a3)
  {
    v9 = 16;
    if (a1 > 0x7FFFFFFFFLL)
    {
      if (a1 > 0xFFFFFFFFFFFFFLL)
      {
        if (a1 <= 0x1FFFFFFFFFFFFFFLL)
        {
          if (a1 > 0x7FFFFFFFFFFFFFLL)
          {
            if (a1 != 0x80000000000000)
            {
              v10 = 0x100000000000000;
              goto LABEL_215;
            }
          }
          else if (a1 != 0x10000000000000)
          {
            v10 = 0x40000000000000;
            goto LABEL_215;
          }
        }
        else
        {
          if (a1 > 0xFFFFFFFFFFFFFFFLL)
          {
            if (a1 == 0x1000000000000000 || a1 == 0x4000000000000000)
              goto LABEL_216;
            goto LABEL_208;
          }
          if (a1 != 0x200000000000000)
          {
            v10 = 0x400000000000000;
            goto LABEL_215;
          }
        }
      }
      else if (a1 <= 0x3FFFFFFFFFFLL)
      {
        if (a1 > 0xFFFFFFFFFFLL)
        {
          if (a1 != 0x10000000000)
          {
            v10 = 0x20000000000;
            goto LABEL_215;
          }
        }
        else if (a1 != 0x800000000)
        {
          v10 = 0x8000000000;
          goto LABEL_215;
        }
      }
      else
      {
        if (a1 > 0x1FFFFFFFFFFFFLL)
        {
          if (a1 == 0x2000000000000 || a1 == 0x4000000000000)
            goto LABEL_216;
          v10 = 0x8000000000000;
          goto LABEL_215;
        }
        if (a1 != 0x40000000000)
        {
          v10 = 0x80000000000;
          goto LABEL_215;
        }
      }
    }
    else if (a1 > 0x3FFFFFF)
    {
      if (a1 <= 0x3FFFFFFF)
      {
        if (a1 > 0xFFFFFFF)
        {
          if (a1 != 0x10000000)
          {
            v10 = 0x20000000;
            goto LABEL_215;
          }
        }
        else if (a1 != 0x4000000)
        {
          v10 = 0x8000000;
          goto LABEL_215;
        }
      }
      else
      {
        if (a1 > 0xFFFFFFFFLL)
        {
          if (a1 == 0x100000000 || a1 == 0x200000000)
            goto LABEL_216;
          v10 = 0x400000000;
          goto LABEL_215;
        }
        if (a1 != 0x40000000)
        {
          v10 = 0x80000000;
          goto LABEL_215;
        }
      }
    }
    else
    {
      if (a1 >= 0x200000)
      {
        if (a1 >= 0x800000)
        {
          if (a1 == 0x800000 || a1 == 0x1000000)
            goto LABEL_216;
          v10 = 0x2000000;
LABEL_215:
          if (a1 == v10)
            goto LABEL_216;
LABEL_218:
          v9 = v5;
          goto LABEL_216;
        }
        if (a1 != 0x200000)
          goto LABEL_216;
        goto LABEL_208;
      }
      if (a1 < 0x80000)
      {
        if (a1 == 0x8000000000000000 || a1 == 0x40000)
          goto LABEL_216;
        goto LABEL_218;
      }
      if (a1 == 0x80000)
LABEL_208:
        v9 = 24;
    }
LABEL_216:
    v4 = 0;
    *a3 = v9;
    return v4;
  }
  return 0;
}

uint64_t APAudioFormatIndexToAPAudioFormat(unint64_t a1)
{
  if (a1 >= 0x40)
    return 0;
  else
    return 1 << a1;
}

uint64_t ASBDToAPAudioFormat(uint64_t a1, unint64_t *a2)
{
  int v2;
  uint64_t v3;
  double v4;
  int v5;
  unint64_t v6;
  double v7;
  int v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  double v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;

  v2 = *(_DWORD *)(a1 + 8);
  v3 = 4294960561;
  if (v2 > 1869641074)
  {
    if (v2 <= 1902207847)
    {
      if (v2 == 1869641075)
      {
        if (*(_DWORD *)(a1 + 28) == 1)
        {
          v14 = *(double *)a1;
          if (*(double *)a1 == 16000.0)
          {
            v6 = 0x10000000;
            goto LABEL_156;
          }
          if (v14 == 24000.0)
          {
            v6 = 0x20000000;
            goto LABEL_156;
          }
          if (v14 == 48000.0)
          {
            v6 = 0x40000000;
            goto LABEL_156;
          }
        }
      }
      else
      {
        if (v2 != 1902207331)
          return v3;
        v8 = *(_DWORD *)(a1 + 28);
        if (v8 == 8)
        {
          if (*(double *)a1 == 48000.0)
          {
            v6 = 0x100000000000000;
            goto LABEL_156;
          }
        }
        else if (v8 == 6)
        {
          if (*(double *)a1 == 48000.0)
          {
            v6 = 0x80000000000000;
            goto LABEL_156;
          }
        }
        else if (v8 == 2 && *(double *)a1 == 48000.0)
        {
          v6 = 0x40000000000000;
          goto LABEL_156;
        }
      }
    }
    else
    {
      if (v2 != 1902207848)
      {
        if (v2 == 1902324531)
        {
          HIDWORD(v12) = *(_DWORD *)(a1 + 28);
          LODWORD(v12) = HIDWORD(v12) - 2;
          v3 = 4294960561;
          switch((v12 >> 1))
          {
            case 0u:
              if (*(double *)a1 != 48000.0)
                return 4294960561;
              v6 = 0x4000000000000000;
              goto LABEL_156;
            case 2u:
              if (*(double *)a1 != 48000.0)
                return 4294960561;
              v6 = 0x8000000000000000;
              goto LABEL_156;
            case 3u:
              if (*(double *)a1 != 48000.0)
                return 4294960561;
              v6 = 0x200000000;
              goto LABEL_156;
            case 5u:
              if (*(double *)a1 != 48000.0)
                return 4294960561;
              v6 = 0x400000000;
              goto LABEL_156;
            case 7u:
              if (*(double *)a1 != 48000.0)
                return 4294960561;
              v6 = 0x800000000;
              goto LABEL_156;
            default:
              return v3;
          }
        }
        else if (v2 == 1902928227)
        {
          if (*(double *)a1 == 48000.0 && *(_DWORD *)(a1 + 28) == 2 && *(_DWORD *)(a1 + 12) == 3)
          {
            v6 = 0x2000000000000000;
            goto LABEL_156;
          }
          return 4294960561;
        }
        return v3;
      }
      v11 = *(_DWORD *)(a1 + 28);
      if (v11 == 8)
      {
        if (*(double *)a1 == 48000.0)
        {
          v6 = 0x1000000000000000;
          goto LABEL_156;
        }
      }
      else if (v11 == 6)
      {
        if (*(double *)a1 == 48000.0)
        {
          v6 = 0x400000000000000;
          goto LABEL_156;
        }
      }
      else if (v11 == 2 && *(double *)a1 == 48000.0)
      {
        v6 = 0x200000000000000;
        goto LABEL_156;
      }
    }
    return 4294960561;
  }
  if (v2 <= 1634492770)
  {
    if (v2 != 1633772320)
    {
      if (v2 == 1633772389)
      {
        v6 = 0x20000000000;
        switch(*(_DWORD *)(a1 + 28))
        {
          case 1:
            v7 = *(double *)a1;
            if (*(double *)a1 == 16000.0)
            {
              v6 = 0x4000000;
              goto LABEL_156;
            }
            if (v7 == 24000.0)
            {
              v6 = 0x8000000;
              goto LABEL_156;
            }
            if (v7 == 32000.0)
            {
              v6 = 0x80000000000;
              goto LABEL_156;
            }
            if (v7 == 44100.0)
            {
              v6 = 0x80000000;
              goto LABEL_156;
            }
            if (v7 != 48000.0)
              return 4294960561;
            v6 = 0x100000000;
            goto LABEL_156;
          case 2:
            if (*(double *)a1 == 44100.0)
            {
              v6 = 0x1000000;
              goto LABEL_156;
            }
            if (*(double *)a1 != 48000.0)
              return 4294960561;
            v6 = 0x2000000;
            break;
          case 6:
            goto LABEL_156;
          case 8:
            v6 = 0x40000000000;
            goto LABEL_156;
          default:
            return v3;
        }
        goto LABEL_156;
      }
      return v3;
    }
    v13 = *(_DWORD *)(a1 + 28);
    switch(v13)
    {
      case 8:
        v6 = 0x10000000000;
        goto LABEL_156;
      case 6:
        v6 = 0x8000000000;
        goto LABEL_156;
      case 2:
        if (*(double *)a1 == 44100.0)
        {
          v6 = 0x400000;
          goto LABEL_156;
        }
        if (*(double *)a1 == 48000.0)
        {
          v6 = 0x800000;
          goto LABEL_156;
        }
        break;
    }
    return 4294960561;
  }
  switch(v2)
  {
    case 1634492771:
      if (*(double *)a1 == 44100.0 && *(_DWORD *)(a1 + 28) == 2)
      {
        v9 = *(_DWORD *)(a1 + 12);
        if (v9 == 1)
        {
          v6 = 0x40000;
          goto LABEL_156;
        }
        if (v9 == 3)
        {
          v6 = 0x80000;
          goto LABEL_156;
        }
      }
      else if (*(double *)a1 == 48000.0 && *(_DWORD *)(a1 + 28) == 2)
      {
        v15 = *(_DWORD *)(a1 + 12);
        if (v15 == 1)
        {
          v6 = 0x100000;
          goto LABEL_156;
        }
        if (v15 == 3)
        {
          v6 = 0x200000;
          goto LABEL_156;
        }
      }
      return 4294960561;
    case 1700997939:
      HIDWORD(v10) = *(_DWORD *)(a1 + 28);
      LODWORD(v10) = HIDWORD(v10) - 2;
      v3 = 4294960561;
      switch((v10 >> 1))
      {
        case 0u:
          if (*(double *)a1 != 48000.0)
            return 4294960561;
          v6 = 0x2000000000000;
          goto LABEL_156;
        case 2u:
          if (*(double *)a1 != 48000.0)
            return 4294960561;
          v6 = 0x4000000000000;
          goto LABEL_156;
        case 3u:
          if (*(double *)a1 != 48000.0)
            return 4294960561;
          v6 = 0x8000000000000;
          goto LABEL_156;
        case 5u:
          if (*(double *)a1 != 48000.0)
            return 4294960561;
          v6 = 0x10000000000000;
          goto LABEL_156;
        case 7u:
          if (*(double *)a1 != 48000.0)
            return 4294960561;
          v6 = 0x20000000000000;
          goto LABEL_156;
        default:
          return v3;
      }
    case 1819304813:
      v4 = *(double *)a1;
      if (*(double *)a1 == 8000.0)
      {
        v5 = *(_DWORD *)(a1 + 28);
        if (v5 == 1)
        {
          v6 = 4;
          goto LABEL_156;
        }
        if (v5 == 2)
        {
          v6 = 8;
LABEL_156:
          v3 = 0;
          *a2 = v6;
          return v3;
        }
      }
      else if (v4 == 16000.0)
      {
        v16 = *(_DWORD *)(a1 + 28);
        if (v16 == 1)
        {
          v6 = 16;
          goto LABEL_156;
        }
        if (v16 == 2)
        {
          v6 = 32;
          goto LABEL_156;
        }
      }
      else if (v4 == 24000.0)
      {
        v17 = *(_DWORD *)(a1 + 28);
        if (v17 == 1)
        {
          v6 = 64;
          goto LABEL_156;
        }
        if (v17 == 2)
        {
          v6 = 128;
          goto LABEL_156;
        }
      }
      else if (v4 == 32000.0)
      {
        v18 = *(_DWORD *)(a1 + 28);
        if (v18 == 1)
        {
          v6 = 256;
          goto LABEL_156;
        }
        if (v18 == 2)
        {
          v6 = 512;
          goto LABEL_156;
        }
      }
      else if (v4 == 44100.0)
      {
        v19 = *(_DWORD *)(a1 + 28);
        if (v19 == 2)
        {
          v22 = *(_DWORD *)(a1 + 32);
          if (v22 == 16)
          {
            v6 = 2048;
            goto LABEL_156;
          }
          if (v22 == 24)
          {
            v6 = 0x2000;
            goto LABEL_156;
          }
        }
        else if (v19 == 1)
        {
          v20 = *(_DWORD *)(a1 + 32);
          if (v20 == 16)
          {
            v6 = 1024;
            goto LABEL_156;
          }
          if (v20 == 24)
          {
            v6 = 4096;
            goto LABEL_156;
          }
        }
      }
      else if (v4 == 48000.0)
      {
        v3 = 4294960561;
        switch(*(_DWORD *)(a1 + 28))
        {
          case 1:
            v21 = *(_DWORD *)(a1 + 32);
            if (v21 == 16)
            {
              v6 = 0x4000;
              goto LABEL_156;
            }
            if (v21 == 24)
            {
              v6 = 0x10000;
              goto LABEL_156;
            }
            if ((*(_BYTE *)(a1 + 12) & 1) == 0)
              return 4294960561;
            v6 = 0x200000000000;
            goto LABEL_156;
          case 2:
            v23 = *(_DWORD *)(a1 + 32);
            if (v23 == 16)
            {
              v6 = 0x8000;
              goto LABEL_156;
            }
            if (v23 == 24)
            {
              v6 = 0x20000;
              goto LABEL_156;
            }
            if ((*(_BYTE *)(a1 + 12) & 1) == 0)
              return 4294960561;
            v6 = 0x400000000000;
            goto LABEL_156;
          case 6:
            if (*(_DWORD *)(a1 + 32) == 16)
            {
              v6 = 0x100000000000;
              goto LABEL_156;
            }
            if ((*(_BYTE *)(a1 + 12) & 1) == 0)
              return 4294960561;
            v6 = 0x800000000000;
            goto LABEL_156;
          case 8:
            if (*(_DWORD *)(a1 + 32) == 16)
            {
              v6 = 0x4000000000;
              goto LABEL_156;
            }
            if ((*(_BYTE *)(a1 + 12) & 1) == 0)
              return 4294960561;
            v6 = 0x1000000000000;
            break;
          default:
            return v3;
        }
        goto LABEL_156;
      }
      return 4294960561;
  }
  return v3;
}

uint64_t APAudioFormatToCompressionType(uint64_t a1, int *a2)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = 1;
  result = 4294960561;
  if (a1 <= 0x7FFFFFFFFFLL)
  {
    if (a1 >= 0x80000)
    {
      if (a1 > 0xFFFFFF)
      {
        if (a1 > 0x1FFFFFFFFLL)
        {
          if (a1 == 0x200000000 || a1 == 0x400000000)
            goto LABEL_53;
          v6 = 0x800000000;
          goto LABEL_44;
        }
        if (a1 == 0x1000000 || a1 == 0x2000000)
          goto LABEL_73;
        return result;
      }
      if (a1 < 0x200000)
      {
        if (a1 != 0x80000 && a1 != 0x100000)
          return result;
      }
      else if (a1 != 0x200000)
      {
        if (a1 == 0x400000 || a1 == 0x800000)
          goto LABEL_56;
        return result;
      }
    }
    else
    {
      if (a1 <= 2047)
      {
        if (a1 > 31)
        {
          if (a1 == 32 || a1 == 128 || a1 == 512)
            goto LABEL_75;
          return result;
        }
        if (a1 == 0x8000000000000000)
          goto LABEL_53;
        if (a1 != 8)
          return result;
LABEL_75:
        result = 0;
        *a2 = v3;
        return result;
      }
      if (a1 < 0x8000)
      {
        if (a1 == 2048 || a1 == 0x2000)
          goto LABEL_75;
        return result;
      }
      if (a1 == 0x8000 || a1 == 0x20000)
        goto LABEL_75;
      if (a1 != 0x40000)
        return result;
    }
    v3 = 2;
    goto LABEL_75;
  }
  if (a1 > 0x7FFFFFFFFFFFFLL)
  {
    if (a1 > 0xFFFFFFFFFFFFFFLL)
    {
      if (a1 <= 0xFFFFFFFFFFFFFFFLL)
      {
        if (a1 != 0x100000000000000)
        {
          if (a1 != 0x200000000000000 && a1 != 0x400000000000000)
            return result;
          goto LABEL_49;
        }
LABEL_53:
        v3 = 1902207331;
        goto LABEL_75;
      }
      if (a1 == 0x1000000000000000)
      {
LABEL_49:
        v3 = 1902207848;
        goto LABEL_75;
      }
      if (a1 == 0x2000000000000000)
      {
        v3 = 1902928227;
        goto LABEL_75;
      }
      v7 = 0x4000000000000000;
      goto LABEL_62;
    }
    if (a1 > 0x1FFFFFFFFFFFFFLL)
    {
      if (a1 != 0x20000000000000)
      {
        if (a1 == 0x40000000000000)
          goto LABEL_53;
        v6 = 0x80000000000000;
LABEL_44:
        if (a1 != v6)
          return result;
        goto LABEL_53;
      }
LABEL_63:
      v3 = 128;
      goto LABEL_75;
    }
    if (a1 == 0x8000000000000)
      goto LABEL_63;
    v7 = 0x10000000000000;
LABEL_62:
    if (a1 != v7)
      return result;
    goto LABEL_63;
  }
  if (a1 > 0x3FFFFFFFFFFFLL)
  {
    if (a1 <= 0xFFFFFFFFFFFFLL)
    {
      if (a1 == 0x400000000000)
        goto LABEL_75;
      v5 = 0x800000000000;
      goto LABEL_69;
    }
    if (a1 != 0x1000000000000)
    {
      if (a1 == 0x2000000000000)
        goto LABEL_63;
      v7 = 0x4000000000000;
      goto LABEL_62;
    }
    goto LABEL_75;
  }
  if (a1 > 0x1FFFFFFFFFFLL)
  {
    if (a1 != 0x20000000000 && a1 != 0x40000000000)
    {
      v5 = 0x200000000000;
LABEL_69:
      if (a1 != v5)
        return result;
      goto LABEL_75;
    }
LABEL_73:
    v3 = 8;
    goto LABEL_75;
  }
  if (a1 == 0x8000000000 || a1 == 0x10000000000)
  {
LABEL_56:
    v3 = 4;
    goto LABEL_75;
  }
  return result;
}

uint64_t APAudioFormatToPCMASBD(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v3 = 0xC6C70636DLL;
  v4 = 2;
  v5 = 16;
  result = 4294960561;
  v7 = 0x40E7700000000000;
  if (a1 > 0x3FFFFFFF)
  {
    if (a1 <= 0x7FFFFFFFFFFFLL)
    {
      if (a1 > 0x7FFFFFFFFFLL)
      {
        if (a1 <= 0x7FFFFFFFFFFLL)
        {
          if (a1 <= 0x1FFFFFFFFFFLL)
          {
            if (a1 != 0x8000000000)
            {
              v8 = 0x10000000000;
              goto LABEL_78;
            }
LABEL_80:
            v4 = 6;
            goto LABEL_121;
          }
          if (a1 == 0x20000000000)
            goto LABEL_80;
          v8 = 0x40000000000;
LABEL_78:
          if (a1 != v8)
            return result;
          goto LABEL_79;
        }
        if (a1 <= 0x1FFFFFFFFFFFLL)
        {
          if (a1 == 0x80000000000)
          {
            v4 = 1;
            v7 = 0x40DF400000000000;
            goto LABEL_121;
          }
          if (a1 != 0x100000000000)
            return result;
          v9 = 0x1000000006;
          v10 = 0x10000000CLL;
          goto LABEL_132;
        }
        if (a1 == 0x200000000000)
        {
          v9 = 0x2000000001;
          v10 = 0x100000004;
        }
        else
        {
          if (a1 != 0x400000000000)
            return result;
          v9 = 0x2000000002;
          v10 = 0x100000008;
        }
        goto LABEL_131;
      }
      if (a1 > 0x1FFFFFFFFLL)
      {
        if (a1 <= 0x7FFFFFFFFLL)
        {
          if (a1 != 0x200000000)
          {
            if (a1 != 0x400000000)
              return result;
LABEL_113:
            v4 = 12;
            goto LABEL_121;
          }
LABEL_79:
          v4 = 8;
          goto LABEL_121;
        }
        if (a1 != 0x800000000)
        {
          if (a1 != 0x4000000000)
            return result;
          v9 = 0x1000000008;
          v10 = 0x100000010;
          goto LABEL_132;
        }
LABEL_98:
        v4 = 16;
        goto LABEL_121;
      }
      if (a1 == 0x40000000)
        goto LABEL_64;
      if (a1 != 0x80000000)
      {
        if (a1 != 0x100000000)
          return result;
LABEL_64:
        v4 = 1;
        goto LABEL_121;
      }
      v4 = 1;
LABEL_120:
      v7 = 0x40E5888000000000;
      goto LABEL_121;
    }
    if (a1 <= 0x3FFFFFFFFFFFFFLL)
    {
      if (a1 > 0x3FFFFFFFFFFFFLL)
      {
        if (a1 <= 0xFFFFFFFFFFFFFLL)
        {
          if (a1 == 0x4000000000000)
            goto LABEL_80;
          v8 = 0x8000000000000;
          goto LABEL_78;
        }
        if (a1 == 0x10000000000000)
          goto LABEL_113;
        if (a1 != 0x20000000000000)
          return result;
        v5 = 0;
        goto LABEL_98;
      }
      if (a1 == 0x800000000000)
      {
        v9 = 0x2000000006;
        v10 = 0x100000018;
      }
      else
      {
        if (a1 != 0x1000000000000)
        {
          v13 = 0x2000000000000;
          goto LABEL_111;
        }
        v9 = 0x2000000008;
        v10 = 0x100000020;
      }
LABEL_131:
      v3 = 0x16C70636DLL;
      goto LABEL_132;
    }
    if (a1 <= 0x3FFFFFFFFFFFFFFLL)
    {
      if (a1 <= 0xFFFFFFFFFFFFFFLL)
      {
        if (a1 != 0x40000000000000)
        {
          if (a1 == 0x80000000000000)
            goto LABEL_80;
          return result;
        }
LABEL_121:
        result = 0;
        *(_QWORD *)a2 = v7;
        *(_QWORD *)(a2 + 8) = 0xC6C70636DLL;
        v14 = v4 * (v5 >> 3);
        *(_DWORD *)(a2 + 16) = v14;
        *(_DWORD *)(a2 + 20) = 1;
        *(_DWORD *)(a2 + 24) = v14;
        *(_DWORD *)(a2 + 28) = v4;
        *(_DWORD *)(a2 + 32) = v5;
LABEL_134:
        *(_DWORD *)(a2 + 36) = 0;
        return result;
      }
      if (a1 == 0x100000000000000)
        goto LABEL_79;
      v13 = 0x200000000000000;
      goto LABEL_111;
    }
    if (a1 <= 0x1FFFFFFFFFFFFFFFLL)
    {
      if (a1 == 0x400000000000000)
        goto LABEL_80;
      v8 = 0x1000000000000000;
      goto LABEL_78;
    }
    if (a1 != 0x2000000000000000)
    {
      v13 = 0x4000000000000000;
      goto LABEL_111;
    }
    goto LABEL_115;
  }
  if (a1 >= 0x8000)
  {
    if (a1 < 0x400000)
    {
      if (a1 < 0x40000)
      {
        switch(a1)
        {
          case 0x8000:
            v9 = 0x1000000002;
            v10 = 0x100000004;
            break;
          case 0x10000:
            v9 = 0x1800000001;
            v10 = 0x100000003;
            break;
          case 0x20000:
            v9 = 0x1800000002;
            v10 = 0x100000006;
            break;
          default:
            return result;
        }
        goto LABEL_132;
      }
      if (a1 < 0x100000)
      {
        if (a1 == 0x40000)
          goto LABEL_120;
        if (a1 != 0x80000)
          return result;
        v7 = 0x40E5888000000000;
LABEL_116:
        v5 = 24;
        goto LABEL_121;
      }
      if (a1 == 0x100000)
        goto LABEL_121;
      if (a1 != 0x200000)
        return result;
LABEL_115:
      v7 = 0x40E7700000000000;
      goto LABEL_116;
    }
    if (a1 <= 0x3FFFFFF)
    {
      if (a1 <= 0xFFFFFF)
      {
        if (a1 == 0x400000)
          goto LABEL_120;
        if (a1 != 0x800000)
          return result;
        goto LABEL_121;
      }
      if (a1 == 0x1000000)
        goto LABEL_120;
      v13 = 0x2000000;
LABEL_111:
      if (a1 == v13)
        goto LABEL_121;
      return result;
    }
    if (a1 > 0xFFFFFFF)
    {
      if (a1 != 0x10000000)
      {
        v12 = 0x20000000;
        goto LABEL_107;
      }
    }
    else if (a1 != 0x4000000)
    {
      v12 = 0x8000000;
LABEL_107:
      if (a1 != v12)
        return result;
      v4 = 1;
      v7 = 0x40D7700000000000;
      goto LABEL_121;
    }
    v4 = 1;
    v7 = 0x40CF400000000000;
    goto LABEL_121;
  }
  v9 = 0x1000000001;
  v10 = 0x100000002;
  if (a1 <= 255)
  {
    if (a1 <= 15)
    {
      if (a1 == 0x8000000000000000)
        goto LABEL_80;
      v11 = 0x40BF400000000000;
      if (a1 != 4)
      {
        if (a1 != 8)
          return result;
        v9 = 0x1000000002;
        v10 = 0x100000004;
      }
    }
    else if (a1 > 63)
    {
      if (a1 != 64)
      {
        if (a1 != 128)
          return result;
        v9 = 0x1000000002;
        v10 = 0x100000004;
      }
      v11 = 0x40D7700000000000;
    }
    else
    {
      if (a1 != 16)
      {
        if (a1 != 32)
          return result;
        v9 = 0x1000000002;
        v10 = 0x100000004;
      }
      v11 = 0x40CF400000000000;
    }
LABEL_133:
    result = 0;
    *(_QWORD *)a2 = v11;
    *(_QWORD *)(a2 + 8) = v3;
    *(_QWORD *)(a2 + 16) = v10;
    *(_DWORD *)(a2 + 24) = v10;
    *(_QWORD *)(a2 + 28) = v9;
    goto LABEL_134;
  }
  if (a1 <= 2047)
  {
    if (a1 != 256)
    {
      if (a1 != 512)
      {
        if (a1 != 1024)
          return result;
        goto LABEL_129;
      }
      v9 = 0x1000000002;
      v10 = 0x100000004;
    }
    v11 = 0x40DF400000000000;
    goto LABEL_133;
  }
  if (a1 < 0x2000)
  {
    if (a1 == 2048)
    {
      v9 = 0x1000000002;
      v10 = 0x100000004;
    }
    else
    {
      if (a1 != 4096)
        return result;
      v9 = 0x1800000001;
      v10 = 0x100000003;
    }
    goto LABEL_129;
  }
  if (a1 == 0x2000)
  {
    v9 = 0x1800000002;
    v10 = 0x100000006;
LABEL_129:
    v11 = 0x40E5888000000000;
    goto LABEL_133;
  }
  if (a1 == 0x4000)
  {
LABEL_132:
    v11 = 0x40E7700000000000;
    goto LABEL_133;
  }
  return result;
}

uint64_t APAudioFormatIndexToPCMASBD(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  int BitsPerChannel;
  int v7;
  int v8;
  unsigned int v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = 0;
  v11 = 0u;
  v12 = 0u;
  v4 = APAudioFormatIndexToASBD(a1, (uint64_t)&v11);
  if (!(_DWORD)v4)
  {
    if (DWORD2(v11) == 1819304813)
    {
      v5 = v12;
      *(_OWORD *)a2 = v11;
      *(_OWORD *)(a2 + 16) = v5;
      *(_QWORD *)(a2 + 32) = v13;
    }
    else
    {
      BitsPerChannel = APAudioFormatIndexGetBitsPerChannel(a1);
      if (BitsPerChannel == ((BitsPerChannel + 7) & 0x38))
        v7 = 12;
      else
        v7 = 20;
      *(_QWORD *)a2 = v11;
      *(_DWORD *)(a2 + 8) = 1819304813;
      *(_DWORD *)(a2 + 12) = v7;
      v8 = HIDWORD(v12);
      v9 = HIDWORD(v12) * ((BitsPerChannel + 7) >> 3);
      *(_DWORD *)(a2 + 16) = v9;
      *(_DWORD *)(a2 + 20) = 1;
      *(_DWORD *)(a2 + 24) = v9;
      *(_DWORD *)(a2 + 28) = v8;
      *(_DWORD *)(a2 + 32) = BitsPerChannel;
      *(_DWORD *)(a2 + 36) = 0;
    }
  }
  return v4;
}

uint64_t APAudioFormatGetAudioFormatCount(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;

  v1 = result;
  LODWORD(result) = 0;
  v2 = 65;
  v3 = 1;
  do
  {
    if ((v3 & v1) != 0)
      result = (result + 1);
    else
      result = result;
    v3 *= 2;
    --v2;
  }
  while (v2 > 1);
  return result;
}

uint64_t APAudioFormatCreateDescriptionArray(uint64_t a1, int a2, char a3, CFAllocatorRef allocator, const __CFData **a5)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  CFIndex v11;
  __CFData *Mutable;
  const __CFData *v13;
  UInt8 *BytePtr;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  CFIndex v24;
  __CFData *v25;
  UInt8 *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;

  if (a2 != 1634955876)
  {
    if (a2 != 1634951780)
      return 4294954516;
    v8 = 0;
    v9 = 65;
    v10 = 1;
    do
    {
      if ((v10 & a1) != 0)
        ++v8;
      v10 *= 2;
      --v9;
    }
    while (v9 > 1);
    if (v8)
    {
      v11 = 40 * v8;
      Mutable = CFDataCreateMutable(allocator, v11);
      if (Mutable)
      {
        v13 = Mutable;
        CFDataSetLength(Mutable, v11);
        BytePtr = (UInt8 *)CFDataGetBytePtr(v13);
        v15 = 65;
        v16 = 1;
        while ((v16 & a1) == 0)
        {
LABEL_185:
          v16 *= 2;
          if (--v15 <= 1)
            goto LABEL_375;
        }
        if ((a3 & 1) != 0)
        {
          APAudioFormatToPCMASBD(v16, (uint64_t)BytePtr);
          goto LABEL_184;
        }
        if (v16 > 0x3FFFFFFF)
        {
          if (v16 <= 0x7FFFFFFFFFFFLL)
          {
            if (v16 > 0x7FFFFFFFFFLL)
            {
              if (v16 <= 0x7FFFFFFFFFFLL)
              {
                if (v16 <= 0x1FFFFFFFFFFLL)
                {
                  if (v16 != 0x8000000000)
                  {
                    if (v16 == 0x10000000000)
                    {
                      v17 = 0x40E7700000000000;
                      v18 = 1633772320;
LABEL_167:
                      v20 = 0x40000000000;
                      goto LABEL_168;
                    }
LABEL_184:
                    BytePtr += 40;
                    goto LABEL_185;
                  }
                  v17 = 0x40E7700000000000;
                  v18 = 1633772320;
                  goto LABEL_144;
                }
                if (v16 == 0x20000000000)
                {
                  v17 = 0x40E7700000000000;
                  v18 = 1633772389;
                  v20 = 0x1E000000000;
                  goto LABEL_162;
                }
                if (v16 != 0x40000000000)
                  goto LABEL_184;
                v17 = 0x40E7700000000000;
                v18 = 1633772389;
                v20 = 0x1E000000000;
LABEL_168:
                v19 = 8;
                goto LABEL_183;
              }
              if (v16 <= 0x1FFFFFFFFFFFLL)
              {
                if (v16 != 0x80000000000)
                {
                  if (v16 != 0x100000000000)
                    goto LABEL_184;
                  v19 = 0x1000000006;
                  v20 = 0x10000000CLL;
                  goto LABEL_107;
                }
                v17 = 0x40DF400000000000;
                goto LABEL_149;
              }
              if (v16 == 0x200000000000)
              {
                v19 = 0x2000000001;
                v18 = 0x16C70636DLL;
                v17 = 0x40E7700000000000;
                v20 = 0x100000004;
                goto LABEL_183;
              }
              if (v16 != 0x400000000000)
                goto LABEL_184;
              v19 = 0x2000000002;
              v20 = 0x100000008;
LABEL_157:
              v17 = 0x40E7700000000000;
              v18 = 0x16C70636DLL;
              goto LABEL_183;
            }
            if (v16 <= 0x1FFFFFFFFLL)
            {
              switch(v16)
              {
                case 0x40000000:
                  v17 = 0x40E7700000000000;
                  v18 = 1869641075;
                  v20 = 0x3C000000000;
LABEL_151:
                  v19 = 1;
                  goto LABEL_183;
                case 0x80000000:
                  v17 = 0x40E5888000000000;
                  break;
                case 0x100000000:
                  v17 = 0x40E7700000000000;
                  break;
                default:
                  goto LABEL_184;
              }
              goto LABEL_149;
            }
            if (v16 > 0x7FFFFFFFFLL)
            {
              if (v16 != 0x800000000)
              {
                if (v16 != 0x4000000000)
                  goto LABEL_184;
                v19 = 0x1000000008;
                v20 = 0x100000010;
LABEL_107:
                v17 = 0x40E7700000000000;
                v18 = 0xC6C70636DLL;
                goto LABEL_183;
              }
              v19 = 16;
              goto LABEL_172;
            }
            if (v16 != 0x200000000)
            {
              if (v16 != 0x400000000)
                goto LABEL_184;
              v19 = 12;
LABEL_172:
              v17 = 0x40E7700000000000;
              v18 = 1902324531;
              goto LABEL_179;
            }
            v17 = 0x40E7700000000000;
            v18 = 1902324531;
LABEL_136:
            v20 = 0x60000000000;
            goto LABEL_168;
          }
          if (v16 > 0x3FFFFFFFFFFFFFLL)
          {
            if (v16 <= 0x3FFFFFFFFFFFFFFLL)
            {
              if (v16 <= 0xFFFFFFFFFFFFFFLL)
              {
                if (v16 != 0x40000000000000)
                {
                  if (v16 != 0x80000000000000)
                    goto LABEL_184;
                  v18 = 1902207331;
                  goto LABEL_143;
                }
                v18 = 1902207331;
                goto LABEL_132;
              }
              if (v16 != 0x100000000000000)
              {
                if (v16 != 0x200000000000000)
                  goto LABEL_184;
                v18 = 1902207848;
LABEL_132:
                v17 = 0x40E7700000000000;
LABEL_133:
                v20 = 0x40000000000;
                goto LABEL_176;
              }
              v18 = 1902207331;
LABEL_166:
              v17 = 0x40E7700000000000;
              goto LABEL_167;
            }
            if (v16 <= 0x1FFFFFFFFFFFFFFFLL)
            {
              if (v16 == 0x400000000000000)
              {
                v18 = 1902207848;
LABEL_143:
                v17 = 0x40E7700000000000;
LABEL_144:
                v20 = 0x40000000000;
LABEL_162:
                v19 = 6;
                goto LABEL_183;
              }
              if (v16 != 0x1000000000000000)
                goto LABEL_184;
              v18 = 1902207848;
              goto LABEL_166;
            }
            if (v16 == 0x2000000000000000)
            {
              v20 = 0x100000000000;
              v18 = 0x3716C6163;
              v17 = 0x40E7700000000000;
              goto LABEL_176;
            }
            if (v16 != 0x4000000000000000)
              goto LABEL_184;
            v17 = 0x40E7700000000000;
            v18 = 1902324531;
            goto LABEL_127;
          }
          if (v16 <= 0x3FFFFFFFFFFFFLL)
          {
            if (v16 == 0x800000000000)
            {
              v19 = 0x2000000006;
              v20 = 0x100000018;
              goto LABEL_157;
            }
            if (v16 == 0x1000000000000)
            {
              v19 = 0x2000000008;
              v20 = 0x100000020;
              goto LABEL_157;
            }
            if (v16 != 0x2000000000000)
              goto LABEL_184;
            v18 = 1700997939;
            v17 = 0x40E7700000000000;
LABEL_127:
            v20 = 0x60000000000;
            goto LABEL_176;
          }
          if (v16 > 0xFFFFFFFFFFFFFLL)
          {
            if (v16 == 0x10000000000000)
            {
              v19 = 12;
            }
            else
            {
              if (v16 != 0x20000000000000)
                goto LABEL_184;
              v19 = 16;
            }
            v18 = 1700997939;
            v17 = 0x40E7700000000000;
LABEL_179:
            v20 = 0x60000000000;
            goto LABEL_183;
          }
          if (v16 != 0x4000000000000)
          {
            if (v16 != 0x8000000000000)
              goto LABEL_184;
            v18 = 1700997939;
            v17 = 0x40E7700000000000;
            goto LABEL_136;
          }
          v18 = 1700997939;
          v17 = 0x40E7700000000000;
LABEL_146:
          v20 = 0x60000000000;
          goto LABEL_162;
        }
        if (v16 >= 0x8000)
        {
          if (v16 >= 0x400000)
          {
            if (v16 > 0x3FFFFFF)
            {
              if (v16 > 0xFFFFFFF)
              {
                if (v16 == 0x10000000)
                {
                  v17 = 0x40CF400000000000;
                  v18 = 1869641075;
                  v20 = 0x14000000000;
                  goto LABEL_151;
                }
                if (v16 != 0x20000000)
                  goto LABEL_184;
                v17 = 0x40D7700000000000;
                v18 = 1869641075;
                goto LABEL_150;
              }
              if (v16 == 0x4000000)
              {
                v17 = 0x40CF400000000000;
              }
              else
              {
                if (v16 != 0x8000000)
                  goto LABEL_184;
                v17 = 0x40D7700000000000;
              }
LABEL_149:
              v18 = 1633772389;
LABEL_150:
              v20 = 0x1E000000000;
              goto LABEL_151;
            }
            if (v16 <= 0xFFFFFF)
            {
              if (v16 == 0x400000)
              {
                v17 = 0x40E5888000000000;
              }
              else
              {
                if (v16 != 0x800000)
                  goto LABEL_184;
                v17 = 0x40E7700000000000;
              }
              v18 = 1633772320;
              goto LABEL_133;
            }
            if (v16 == 0x1000000)
            {
              v17 = 0x40E5888000000000;
            }
            else
            {
              if (v16 != 0x2000000)
                goto LABEL_184;
              v17 = 0x40E7700000000000;
            }
            v18 = 1633772389;
            v20 = 0x1E000000000;
LABEL_176:
            v19 = 2;
            goto LABEL_183;
          }
          if (v16 >= 0x40000)
          {
            if (v16 >= 0x100000)
            {
              if (v16 != 0x100000)
              {
                if (v16 != 0x200000)
                  goto LABEL_184;
                v17 = 0x40E7700000000000;
LABEL_111:
                v18 = 0x3616C6163;
LABEL_175:
                v20 = 0x16000000000;
                goto LABEL_176;
              }
              v17 = 0x40E7700000000000;
            }
            else
            {
              if (v16 != 0x40000)
              {
                if (v16 != 0x80000)
                  goto LABEL_184;
                v17 = 0x40E5888000000000;
                goto LABEL_111;
              }
              v17 = 0x40E5888000000000;
            }
            v18 = 0x1616C6163;
            goto LABEL_175;
          }
          if (v16 != 0x8000)
          {
            if (v16 != 0x10000)
            {
              if (v16 != 0x20000)
                goto LABEL_184;
              v17 = 0x40E7700000000000;
LABEL_181:
              v18 = 0xC6C70636DLL;
              v20 = 0x100000006;
              v19 = 0x1800000002;
              goto LABEL_183;
            }
            v17 = 0x40E7700000000000;
LABEL_154:
            v18 = 0xC6C70636DLL;
            v20 = 0x100000003;
            v19 = 0x1800000001;
            goto LABEL_183;
          }
          v17 = 0x40E7700000000000;
          goto LABEL_160;
        }
        if (v16 > 255)
        {
          if (v16 <= 2047)
          {
            switch(v16)
            {
              case 256:
                v17 = 0x40DF400000000000;
                break;
              case 512:
                v17 = 0x40DF400000000000;
                goto LABEL_160;
              case 1024:
                v17 = 0x40E5888000000000;
                break;
              default:
                goto LABEL_184;
            }
          }
          else
          {
            if (v16 < 0x2000)
            {
              if (v16 != 2048)
              {
                if (v16 != 4096)
                  goto LABEL_184;
                v17 = 0x40E5888000000000;
                goto LABEL_154;
              }
              v17 = 0x40E5888000000000;
LABEL_160:
              v18 = 0xC6C70636DLL;
              v20 = 0x100000004;
              v19 = 0x1000000002;
              goto LABEL_183;
            }
            if (v16 == 0x2000)
            {
              v17 = 0x40E5888000000000;
              goto LABEL_181;
            }
            if (v16 != 0x4000)
              goto LABEL_184;
            v17 = 0x40E7700000000000;
          }
        }
        else
        {
          if (v16 <= 15)
          {
            if (v16 == 0x8000000000000000)
            {
              v17 = 0x40E7700000000000;
              v18 = 1902324531;
              goto LABEL_146;
            }
            v17 = 0x40BF400000000000;
            v18 = 0xC6C70636DLL;
            v20 = 0x100000002;
            v19 = 0x1000000001;
            if (v16 == 4)
            {
LABEL_183:
              *(_QWORD *)BytePtr = v17;
              *((_QWORD *)BytePtr + 1) = v18;
              *((_QWORD *)BytePtr + 2) = v20;
              *((_DWORD *)BytePtr + 6) = v20;
              *(_QWORD *)(BytePtr + 28) = v19;
              *((_DWORD *)BytePtr + 9) = 0;
              goto LABEL_184;
            }
            if (v16 != 8)
              goto LABEL_184;
            v17 = 0x40BF400000000000;
            goto LABEL_160;
          }
          if (v16 > 63)
          {
            if (v16 != 64)
            {
              if (v16 != 128)
                goto LABEL_184;
              v17 = 0x40D7700000000000;
              goto LABEL_160;
            }
            v17 = 0x40D7700000000000;
          }
          else
          {
            if (v16 != 16)
            {
              if (v16 != 32)
                goto LABEL_184;
              v17 = 0x40CF400000000000;
              goto LABEL_160;
            }
            v17 = 0x40CF400000000000;
          }
        }
        v18 = 0xC6C70636DLL;
        v20 = 0x100000002;
        v19 = 0x1000000001;
        goto LABEL_183;
      }
      goto LABEL_380;
    }
LABEL_378:
    APSLogErrorAt(0);
    return 4294954516;
  }
  v21 = 0;
  v22 = 65;
  v23 = 1;
  do
  {
    if ((v23 & a1) != 0)
      ++v21;
    v23 *= 2;
    --v22;
  }
  while (v22 > 1);
  if (!v21)
    goto LABEL_378;
  v24 = 56 * v21;
  v25 = CFDataCreateMutable(allocator, v24);
  if (v25)
  {
    v13 = v25;
    CFDataSetLength(v25, v24);
    v26 = (UInt8 *)CFDataGetBytePtr(v13);
    v27 = 65;
    v28 = 1;
    while ((v28 & a1) == 0)
    {
LABEL_371:
      v28 *= 2;
      if (--v27 <= 1)
      {
LABEL_375:
        result = 0;
        *a5 = v13;
        return result;
      }
    }
    if ((a3 & 1) != 0)
    {
      APAudioFormatToPCMASBD(v28, (uint64_t)v26);
      goto LABEL_370;
    }
    if (v28 > 0x3FFFFFFF)
    {
      if (v28 <= 0x7FFFFFFFFFFFLL)
      {
        if (v28 > 0x7FFFFFFFFFLL)
        {
          if (v28 <= 0x7FFFFFFFFFFLL)
          {
            if (v28 <= 0x1FFFFFFFFFFLL)
            {
              if (v28 != 0x8000000000)
              {
                if (v28 == 0x10000000000)
                {
                  v29 = 0x40E7700000000000;
                  v30 = 1633772320;
LABEL_353:
                  v32 = 0x40000000000;
                  goto LABEL_354;
                }
LABEL_370:
                v33 = *(_QWORD *)v26;
                *((_QWORD *)v26 + 5) = *(_QWORD *)v26;
                *((_QWORD *)v26 + 6) = v33;
                v26 += 56;
                goto LABEL_371;
              }
              v29 = 0x40E7700000000000;
              v30 = 1633772320;
              goto LABEL_330;
            }
            if (v28 == 0x20000000000)
            {
              v29 = 0x40E7700000000000;
              v30 = 1633772389;
              v32 = 0x1E000000000;
              goto LABEL_348;
            }
            if (v28 != 0x40000000000)
              goto LABEL_370;
            v29 = 0x40E7700000000000;
            v30 = 1633772389;
            v32 = 0x1E000000000;
LABEL_354:
            v31 = 8;
            goto LABEL_369;
          }
          if (v28 <= 0x1FFFFFFFFFFFLL)
          {
            if (v28 != 0x80000000000)
            {
              if (v28 != 0x100000000000)
                goto LABEL_370;
              v31 = 0x1000000006;
              v32 = 0x10000000CLL;
              goto LABEL_293;
            }
            v29 = 0x40DF400000000000;
            goto LABEL_335;
          }
          if (v28 == 0x200000000000)
          {
            v31 = 0x2000000001;
            v30 = 0x16C70636DLL;
            v29 = 0x40E7700000000000;
            v32 = 0x100000004;
            goto LABEL_369;
          }
          if (v28 != 0x400000000000)
            goto LABEL_370;
          v31 = 0x2000000002;
          v32 = 0x100000008;
LABEL_343:
          v29 = 0x40E7700000000000;
          v30 = 0x16C70636DLL;
          goto LABEL_369;
        }
        if (v28 <= 0x1FFFFFFFFLL)
        {
          switch(v28)
          {
            case 0x40000000:
              v29 = 0x40E7700000000000;
              v30 = 1869641075;
              v32 = 0x3C000000000;
LABEL_337:
              v31 = 1;
              goto LABEL_369;
            case 0x80000000:
              v29 = 0x40E5888000000000;
              break;
            case 0x100000000:
              v29 = 0x40E7700000000000;
              break;
            default:
              goto LABEL_370;
          }
          goto LABEL_335;
        }
        if (v28 > 0x7FFFFFFFFLL)
        {
          if (v28 != 0x800000000)
          {
            if (v28 != 0x4000000000)
              goto LABEL_370;
            v31 = 0x1000000008;
            v32 = 0x100000010;
LABEL_293:
            v29 = 0x40E7700000000000;
            v30 = 0xC6C70636DLL;
            goto LABEL_369;
          }
          v31 = 16;
          goto LABEL_358;
        }
        if (v28 != 0x200000000)
        {
          if (v28 != 0x400000000)
            goto LABEL_370;
          v31 = 12;
LABEL_358:
          v29 = 0x40E7700000000000;
          v30 = 1902324531;
          goto LABEL_365;
        }
        v29 = 0x40E7700000000000;
        v30 = 1902324531;
LABEL_322:
        v32 = 0x60000000000;
        goto LABEL_354;
      }
      if (v28 > 0x3FFFFFFFFFFFFFLL)
      {
        if (v28 <= 0x3FFFFFFFFFFFFFFLL)
        {
          if (v28 <= 0xFFFFFFFFFFFFFFLL)
          {
            if (v28 != 0x40000000000000)
            {
              if (v28 != 0x80000000000000)
                goto LABEL_370;
              v30 = 1902207331;
              goto LABEL_329;
            }
            v30 = 1902207331;
            goto LABEL_318;
          }
          if (v28 != 0x100000000000000)
          {
            if (v28 != 0x200000000000000)
              goto LABEL_370;
            v30 = 1902207848;
LABEL_318:
            v29 = 0x40E7700000000000;
LABEL_319:
            v32 = 0x40000000000;
            goto LABEL_362;
          }
          v30 = 1902207331;
LABEL_352:
          v29 = 0x40E7700000000000;
          goto LABEL_353;
        }
        if (v28 <= 0x1FFFFFFFFFFFFFFFLL)
        {
          if (v28 == 0x400000000000000)
          {
            v30 = 1902207848;
LABEL_329:
            v29 = 0x40E7700000000000;
LABEL_330:
            v32 = 0x40000000000;
LABEL_348:
            v31 = 6;
            goto LABEL_369;
          }
          if (v28 != 0x1000000000000000)
            goto LABEL_370;
          v30 = 1902207848;
          goto LABEL_352;
        }
        if (v28 == 0x2000000000000000)
        {
          v32 = 0x100000000000;
          v30 = 0x3716C6163;
          v29 = 0x40E7700000000000;
          goto LABEL_362;
        }
        if (v28 != 0x4000000000000000)
          goto LABEL_370;
        v29 = 0x40E7700000000000;
        v30 = 1902324531;
        goto LABEL_313;
      }
      if (v28 <= 0x3FFFFFFFFFFFFLL)
      {
        if (v28 == 0x800000000000)
        {
          v31 = 0x2000000006;
          v32 = 0x100000018;
          goto LABEL_343;
        }
        if (v28 == 0x1000000000000)
        {
          v31 = 0x2000000008;
          v32 = 0x100000020;
          goto LABEL_343;
        }
        if (v28 != 0x2000000000000)
          goto LABEL_370;
        v30 = 1700997939;
        v29 = 0x40E7700000000000;
LABEL_313:
        v32 = 0x60000000000;
        goto LABEL_362;
      }
      if (v28 > 0xFFFFFFFFFFFFFLL)
      {
        if (v28 == 0x10000000000000)
        {
          v31 = 12;
        }
        else
        {
          if (v28 != 0x20000000000000)
            goto LABEL_370;
          v31 = 16;
        }
        v30 = 1700997939;
        v29 = 0x40E7700000000000;
LABEL_365:
        v32 = 0x60000000000;
        goto LABEL_369;
      }
      if (v28 != 0x4000000000000)
      {
        if (v28 != 0x8000000000000)
          goto LABEL_370;
        v30 = 1700997939;
        v29 = 0x40E7700000000000;
        goto LABEL_322;
      }
      v30 = 1700997939;
      v29 = 0x40E7700000000000;
LABEL_332:
      v32 = 0x60000000000;
      goto LABEL_348;
    }
    if (v28 >= 0x8000)
    {
      if (v28 >= 0x400000)
      {
        if (v28 > 0x3FFFFFF)
        {
          if (v28 > 0xFFFFFFF)
          {
            if (v28 == 0x10000000)
            {
              v29 = 0x40CF400000000000;
              v30 = 1869641075;
              v32 = 0x14000000000;
              goto LABEL_337;
            }
            if (v28 != 0x20000000)
              goto LABEL_370;
            v29 = 0x40D7700000000000;
            v30 = 1869641075;
            goto LABEL_336;
          }
          if (v28 == 0x4000000)
          {
            v29 = 0x40CF400000000000;
          }
          else
          {
            if (v28 != 0x8000000)
              goto LABEL_370;
            v29 = 0x40D7700000000000;
          }
LABEL_335:
          v30 = 1633772389;
LABEL_336:
          v32 = 0x1E000000000;
          goto LABEL_337;
        }
        if (v28 <= 0xFFFFFF)
        {
          if (v28 == 0x400000)
          {
            v29 = 0x40E5888000000000;
          }
          else
          {
            if (v28 != 0x800000)
              goto LABEL_370;
            v29 = 0x40E7700000000000;
          }
          v30 = 1633772320;
          goto LABEL_319;
        }
        if (v28 == 0x1000000)
        {
          v29 = 0x40E5888000000000;
        }
        else
        {
          if (v28 != 0x2000000)
            goto LABEL_370;
          v29 = 0x40E7700000000000;
        }
        v30 = 1633772389;
        v32 = 0x1E000000000;
LABEL_362:
        v31 = 2;
        goto LABEL_369;
      }
      if (v28 >= 0x40000)
      {
        if (v28 >= 0x100000)
        {
          if (v28 != 0x100000)
          {
            if (v28 != 0x200000)
              goto LABEL_370;
            v29 = 0x40E7700000000000;
LABEL_297:
            v30 = 0x3616C6163;
LABEL_361:
            v32 = 0x16000000000;
            goto LABEL_362;
          }
          v29 = 0x40E7700000000000;
        }
        else
        {
          if (v28 != 0x40000)
          {
            if (v28 != 0x80000)
              goto LABEL_370;
            v29 = 0x40E5888000000000;
            goto LABEL_297;
          }
          v29 = 0x40E5888000000000;
        }
        v30 = 0x1616C6163;
        goto LABEL_361;
      }
      if (v28 != 0x8000)
      {
        if (v28 != 0x10000)
        {
          if (v28 != 0x20000)
            goto LABEL_370;
          v29 = 0x40E7700000000000;
LABEL_367:
          v30 = 0xC6C70636DLL;
          v32 = 0x100000006;
          v31 = 0x1800000002;
          goto LABEL_369;
        }
        v29 = 0x40E7700000000000;
LABEL_340:
        v30 = 0xC6C70636DLL;
        v32 = 0x100000003;
        v31 = 0x1800000001;
        goto LABEL_369;
      }
      v29 = 0x40E7700000000000;
      goto LABEL_346;
    }
    if (v28 > 255)
    {
      if (v28 <= 2047)
      {
        switch(v28)
        {
          case 256:
            v29 = 0x40DF400000000000;
            break;
          case 512:
            v29 = 0x40DF400000000000;
            goto LABEL_346;
          case 1024:
            v29 = 0x40E5888000000000;
            break;
          default:
            goto LABEL_370;
        }
      }
      else
      {
        if (v28 < 0x2000)
        {
          if (v28 != 2048)
          {
            if (v28 != 4096)
              goto LABEL_370;
            v29 = 0x40E5888000000000;
            goto LABEL_340;
          }
          v29 = 0x40E5888000000000;
LABEL_346:
          v30 = 0xC6C70636DLL;
          v32 = 0x100000004;
          v31 = 0x1000000002;
          goto LABEL_369;
        }
        if (v28 == 0x2000)
        {
          v29 = 0x40E5888000000000;
          goto LABEL_367;
        }
        if (v28 != 0x4000)
          goto LABEL_370;
        v29 = 0x40E7700000000000;
      }
    }
    else
    {
      if (v28 <= 15)
      {
        if (v28 == 0x8000000000000000)
        {
          v29 = 0x40E7700000000000;
          v30 = 1902324531;
          goto LABEL_332;
        }
        v29 = 0x40BF400000000000;
        v30 = 0xC6C70636DLL;
        v32 = 0x100000002;
        v31 = 0x1000000001;
        if (v28 == 4)
        {
LABEL_369:
          *(_QWORD *)v26 = v29;
          *((_QWORD *)v26 + 1) = v30;
          *((_QWORD *)v26 + 2) = v32;
          *((_DWORD *)v26 + 6) = v32;
          *(_QWORD *)(v26 + 28) = v31;
          *((_DWORD *)v26 + 9) = 0;
          goto LABEL_370;
        }
        if (v28 != 8)
          goto LABEL_370;
        v29 = 0x40BF400000000000;
        goto LABEL_346;
      }
      if (v28 > 63)
      {
        if (v28 != 64)
        {
          if (v28 != 128)
            goto LABEL_370;
          v29 = 0x40D7700000000000;
          goto LABEL_346;
        }
        v29 = 0x40D7700000000000;
      }
      else
      {
        if (v28 != 16)
        {
          if (v28 != 32)
            goto LABEL_370;
          v29 = 0x40CF400000000000;
          goto LABEL_346;
        }
        v29 = 0x40CF400000000000;
      }
    }
    v30 = 0xC6C70636DLL;
    v32 = 0x100000002;
    v31 = 0x1000000001;
    goto LABEL_369;
  }
LABEL_380:
  APSLogErrorAt(0);
  return 4294954510;
}

uint64_t APCompressionTypeToAPAudioFormat(int a1, uint64_t *a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;

  result = 4294960561;
  if (a1 > 255)
  {
    if (a1 > 1023)
    {
      if (a1 == 1024)
      {
        v5 = 0x40000000000000;
      }
      else
      {
        if (a1 != 2048)
          return result;
        v5 = 0x2000000000000000;
      }
    }
    else if (a1 == 256)
    {
      v5 = 0x4000000000000000;
    }
    else
    {
      if (a1 != 512)
        return result;
      v5 = 0x200000000000000;
    }
LABEL_15:
    result = 0;
    *a2 = v5;
  }
  else
  {
    v4 = a1 - 1;
    v5 = 2048;
    switch(v4)
    {
      case 0:
        goto LABEL_15;
      case 1:
        v5 = 0x40000;
        goto LABEL_15;
      case 3:
        v5 = 0x400000;
        goto LABEL_15;
      case 7:
        v5 = 0x1000000;
        goto LABEL_15;
      default:
        return result;
    }
  }
  return result;
}

uint64_t APCompressionTypeToAPAudioFormatIndex(int a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  if (!a2)
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  result = 4294960561;
  if (a1 > 255)
  {
    if (a1 <= 1023)
    {
      if (a1 == 256)
      {
        result = 0;
        v4 = 62;
      }
      else
      {
        if (a1 != 512)
          return result;
        result = 0;
        v4 = 57;
      }
    }
    else
    {
      switch(a1)
      {
        case 1024:
          result = 0;
          v4 = 54;
          break;
        case 2048:
          result = 0;
          v4 = 61;
          break;
        case 4096:
          result = 0;
          v4 = 64;
          break;
        default:
          return result;
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 1:
        result = 0;
        v4 = 11;
        break;
      case 2:
        result = 0;
        v4 = 18;
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        return result;
      case 4:
        result = 0;
        v4 = 22;
        break;
      case 8:
        result = 0;
        v4 = 24;
        break;
      default:
        if (a1 != 128)
          return result;
        result = 0;
        v4 = 49;
        break;
    }
  }
  *a2 = v4;
  return result;
}

uint64_t APAudioFormatCopyPreferredBufferedAudioFormats(CFMutableArrayRef *a1)
{
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v3;
  uint64_t appended;
  uint64_t v5;
  uint64_t SupportedTransportAudioFormatsForBufferedSender;
  uint64_t v7;
  uint64_t v9;

  v9 = 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    APSLogErrorAt(0);
    return 4294960568;
  }
  v3 = Mutable;
  if (!APAudioFormatGetCompressionTypeOverrideAudioFormat(&v9))
  {
    appended = CFArrayAppendInt64();
    if ((_DWORD)appended)
    {
      v5 = appended;
    }
    else
    {
      appended = CFArrayAppendInt64();
      if ((_DWORD)appended)
      {
        v5 = appended;
      }
      else
      {
        appended = CFArrayAppendInt64();
        if ((_DWORD)appended)
        {
          v5 = appended;
        }
        else
        {
          SupportedTransportAudioFormatsForBufferedSender = APAudioFormatGetSupportedTransportAudioFormatsForBufferedSender(0);
          v7 = 0;
          while (1)
          {
            if (((1 << v7) & SupportedTransportAudioFormatsForBufferedSender) != 0)
            {
              appended = CFArrayAppendInt64();
              if ((_DWORD)appended)
                break;
            }
            if (++v7 == 64)
              goto LABEL_12;
          }
          v5 = appended;
        }
      }
    }
    goto LABEL_15;
  }
  appended = CFArrayAppendInt64();
  if ((_DWORD)appended)
  {
    v5 = appended;
LABEL_15:
    APSLogErrorAt(appended);
    goto LABEL_16;
  }
LABEL_12:
  v5 = 0;
  if (!a1)
  {
LABEL_16:
    CFRelease(v3);
    return v5;
  }
  *a1 = v3;
  return v5;
}

BOOL APAudioFormatGetCompressionTypeOverrideAudioFormat(_QWORD *a1)
{
  int CFPreferenceNumberWithDefault;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t v8;

  v8 = 0;
  if (!a1)
  {
    v4 = 0;
    goto LABEL_10;
  }
  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  if ((CFPreferenceNumberWithDefault & 0xF) == 0)
  {
    v4 = 0;
    v5 = 0;
    goto LABEL_12;
  }
  v3 = CFPreferenceNumberWithDefault;
  if (gLogCategory_APAudioFormat <= 50 && (gLogCategory_APAudioFormat != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v5 = APCompressionTypeToAPAudioFormat(v3, &v8);
  v4 = v8;
  if (!v5)
  {
    if (!v8)
    {
LABEL_10:
      v5 = -6705;
      goto LABEL_12;
    }
    v5 = 0;
    *a1 = v8;
    v4 = 1;
  }
LABEL_12:
  if (v5)
    v6 = 1;
  else
    v6 = v4 == 0;
  return !v6;
}

uint64_t APAudioFormatGetSupportedTransportAudioFormatsForBufferedSender(uint64_t *a1)
{
  char CFPreferenceNumberWithDefault;
  int v3;
  unint64_t BufferedPassthroughSupportedFormats;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  if (APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender_initOnce != -1)
    dispatch_once(&APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender_initOnce, &__block_literal_global_94);
  v3 = APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender_atmosAllowed;
  BufferedPassthroughSupportedFormats = APAudioFormatGetBufferedPassthroughSupportedFormats(APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender_atmosAllowed);
  if (a1)
  {
    v5 = 0x200000;
    if (!CFPreferenceNumberWithDefault)
      v5 = 0x400000;
    *a1 = v5;
  }
  v6 = 0x400000;
  if (v3)
    v6 = 0x18000C00000;
  v7 = BufferedPassthroughSupportedFormats | v6;
  if (CFPreferenceNumberWithDefault)
    return v7 | 0x200000;
  else
    return v7;
}

unint64_t APAudioFormatGetBufferedPassthroughSupportedFormats(int a1)
{
  uint64_t v2;
  unint64_t v3;

  if (!IsAppleTV())
  {
    if (APSIsAPMSpeaker_sCheckOnce != -1)
      dispatch_once(&APSIsAPMSpeaker_sCheckOnce, &__block_literal_global_9);
    if (!APSIsAPMSpeaker_sIsAPMSpeaker)
      return 0;
  }
  if (APAudioFormatGetBufferedPassthroughSupportedFormats_initOnce != -1)
    dispatch_once(&APAudioFormatGetBufferedPassthroughSupportedFormats_initOnce, &__block_literal_global_100);
  if (!APAudioFormatGetBufferedPassthroughSupportedFormats_sPassthroughEnabled)
    return 0;
  v2 = 0x18000E80000;
  if (a1 != 0 && APAudioFormatGetBufferedPassthroughSupportedFormats_sPassthroughDDPAtmosEnabled != 0)
    v2 = 0x3E018000E80000;
  v3 = 0x37C0018000E80000;
  if (a1 != 0 && APAudioFormatGetBufferedPassthroughSupportedFormats_sPassthroughDDPAtmosEnabled != 0)
    v3 = 0xF7FE018E00E80000;
  if (APAudioFormatGetBufferedPassthroughSupportedFormats_sPassthroughEncryptedEnabled)
    return v3;
  else
    return v2;
}

uint64_t APAudioFormatCopyPreferredRealTimeAudioFormats(int a1, CFMutableArrayRef *a2)
{
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v5;
  uint64_t appended;
  uint64_t v7;
  uint64_t v9;

  v9 = 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v5 = Mutable;
    if (APAudioFormatGetCompressionTypeOverrideAudioFormat(&v9))
    {
      appended = CFArrayAppendInt64();
      if ((_DWORD)appended)
      {
        v7 = appended;
LABEL_21:
        APSLogErrorAt(appended);
        goto LABEL_22;
      }
    }
    else if (a1)
    {
      appended = CFArrayAppendInt64();
      if ((_DWORD)appended)
      {
        v7 = appended;
        goto LABEL_21;
      }
      appended = CFArrayAppendInt64();
      if ((_DWORD)appended)
      {
        v7 = appended;
        goto LABEL_21;
      }
      appended = CFArrayAppendInt64();
      if ((_DWORD)appended)
      {
        v7 = appended;
        goto LABEL_21;
      }
      appended = CFArrayAppendInt64();
      if ((_DWORD)appended)
      {
        v7 = appended;
        goto LABEL_21;
      }
    }
    else
    {
      appended = CFArrayAppendInt64();
      if ((_DWORD)appended)
      {
        v7 = appended;
        goto LABEL_21;
      }
      appended = CFArrayAppendInt64();
      if ((_DWORD)appended)
      {
        v7 = appended;
        goto LABEL_21;
      }
    }
    v7 = 0;
    if (!a2)
    {
LABEL_22:
      CFRelease(v5);
      return v7;
    }
    *a2 = v5;
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960568;
  }
  return v7;
}

BOOL APAudioFormatIsLowLatencyAudioSurroundSender()
{
  return (APSGetPersistentGroupModel() & 0xFFFFFFFD) == 0;
}

BOOL APAudioFormatIsLowLatencyAudioSurroundReceiver()
{
  uint64_t v0;

  v0 = MGGetProductType();
  return v0 == 1540760353 || v0 == 4240173202 || v0 == 2702125347;
}

uint64_t APAudioFormatGetLowLatencyAudioFramesPerPacket()
{
  return 512;
}

uint64_t APAudioFormatCopyPreferredLowLatencyAudioFormats(CFMutableArrayRef *a1)
{
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v3;
  uint64_t appended;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v10 = 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    APSLogErrorAt(0);
    return 4294960568;
  }
  v3 = Mutable;
  if (!APAudioFormatGetCompressionTypeOverrideAudioFormat(&v10))
  {
    v6 = (APSGetPersistentGroupModel() & 0xFFFFFFFD) == 0;
    v7 = 0;
    if (APSSettingsGetIntWithOverrideAndDefault(CFSTR("lowLatencyAudioSurroundSender"), 0, v6))
      v8 = 0x40002000000;
    else
      v8 = 0x2000000;
    while (1)
    {
      if (((1 << v7) & v8) != 0)
      {
        appended = CFArrayAppendInt64();
        if ((_DWORD)appended)
          break;
      }
      if (++v7 == 64)
        goto LABEL_11;
    }
    v5 = appended;
    goto LABEL_14;
  }
  appended = CFArrayAppendInt64();
  if ((_DWORD)appended)
  {
    v5 = appended;
LABEL_14:
    APSLogErrorAt(appended);
    goto LABEL_15;
  }
LABEL_11:
  v5 = 0;
  if (!a1)
  {
LABEL_15:
    CFRelease(v3);
    return v5;
  }
  *a1 = v3;
  return v5;
}

uint64_t APAudioFormatGetSupportedTransportAudioFormatsLowLatencySender(_QWORD *a1)
{
  _BOOL8 v2;
  int IntWithOverrideAndDefault;

  v2 = (APSGetPersistentGroupModel() & 0xFFFFFFFD) == 0;
  IntWithOverrideAndDefault = APSSettingsGetIntWithOverrideAndDefault(CFSTR("lowLatencyAudioSurroundSender"), 0, v2);
  if (a1)
    *a1 = 0x2000000;
  if (IntWithOverrideAndDefault)
    return 0x40002000000;
  else
    return 0x2000000;
}

uint64_t APAudioFormatChooseFromPreferredAudioFormats(const __CFArray *a1, uint64_t a2, uint64_t a3)
{
  CFIndex Count;

  Count = CFArrayGetCount(a1);
  if (a3 && Count >= 1)
  {
    CFArrayGetValueAtIndex(a1, 0);
    CFGetInt64();
    APSLogErrorAt(4294960591);
  }
  return 4294960591;
}

uint64_t ASBDGetBitsPerChannel(uint64_t a1)
{
  int v2;
  uint64_t result;
  BOOL v4;
  int v5;

  v2 = *(_DWORD *)(a1 + 8);
  result = 16;
  if (v2 > 1634492770)
  {
    v4 = v2 == 1634492771;
    v5 = 1869641075;
  }
  else
  {
    v4 = v2 == 1633772320;
    v5 = 1633772389;
  }
  if (!v4 && v2 != v5)
    return *(unsigned int *)(a1 + 32);
  return result;
}

uint64_t APAudioFormatAudioCompressionTypeSupportsVBR(int a1)
{
  uint64_t result;

  result = 0;
  if (a1 > 255)
  {
    if (a1 > 1023)
    {
      if (a1 != 4096 && a1 != 1024)
        return result;
    }
    else if (a1 != 256 && a1 != 512)
    {
      return result;
    }
    return 1;
  }
  if (a1 <= 0x20 && ((1 << a1) & 0x100000110) != 0 || a1 == 128)
    return 1;
  return result;
}

uint64_t APAudioFormatSupportsVBR(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = 1;
  if (a1 <= 0x7FFFFFFFFFLL)
  {
    if (a1 >= 0x80000)
    {
      if (a1 > 0xFFFFFF)
      {
        if (a1 > 0x1FFFFFFFFLL)
        {
          if (a1 == 0x200000000 || a1 == 0x400000000)
            return APAudioFormatAudioCompressionTypeSupportsVBR(1902207331);
          v3 = 0x800000000;
LABEL_44:
          if (a1 == v3)
            return APAudioFormatAudioCompressionTypeSupportsVBR(1902207331);
          goto LABEL_76;
        }
        if (a1 != 0x1000000 && a1 != 0x2000000)
          goto LABEL_76;
        return APAudioFormatAudioCompressionTypeSupportsVBR(8);
      }
      if (a1 < 0x200000)
      {
        if (a1 != 0x80000 && a1 != 0x100000)
          goto LABEL_76;
      }
      else if (a1 != 0x200000)
      {
        if (a1 != 0x400000 && a1 != 0x800000)
          goto LABEL_76;
        return APAudioFormatAudioCompressionTypeSupportsVBR(4);
      }
    }
    else
    {
      if (a1 <= 2047)
      {
        if (a1 <= 31)
        {
          if (a1 == 0x8000000000000000)
            return APAudioFormatAudioCompressionTypeSupportsVBR(1902207331);
          if (a1 != 8)
            goto LABEL_76;
        }
        else if (a1 != 32 && a1 != 128 && a1 != 512)
        {
          goto LABEL_76;
        }
        return APAudioFormatAudioCompressionTypeSupportsVBR(v1);
      }
      if (a1 < 0x8000)
      {
        if (a1 != 2048 && a1 != 0x2000)
          goto LABEL_76;
        return APAudioFormatAudioCompressionTypeSupportsVBR(v1);
      }
      if (a1 == 0x8000 || a1 == 0x20000)
        return APAudioFormatAudioCompressionTypeSupportsVBR(v1);
      if (a1 != 0x40000)
        goto LABEL_76;
    }
    return APAudioFormatAudioCompressionTypeSupportsVBR(2);
  }
  if (a1 <= 0x7FFFFFFFFFFFFLL)
  {
    if (a1 > 0x3FFFFFFFFFFFLL)
    {
      if (a1 > 0xFFFFFFFFFFFFLL)
      {
        if (a1 == 0x1000000000000)
          return APAudioFormatAudioCompressionTypeSupportsVBR(v1);
        if (a1 != 0x2000000000000)
        {
          v4 = 0x4000000000000;
          goto LABEL_62;
        }
        return APAudioFormatAudioCompressionTypeSupportsVBR(128);
      }
      if (a1 == 0x400000000000)
        return APAudioFormatAudioCompressionTypeSupportsVBR(v1);
      v2 = 0x800000000000;
LABEL_69:
      if (a1 != v2)
        goto LABEL_76;
      return APAudioFormatAudioCompressionTypeSupportsVBR(v1);
    }
    if (a1 > 0x1FFFFFFFFFFLL)
    {
      if (a1 != 0x20000000000 && a1 != 0x40000000000)
      {
        v2 = 0x200000000000;
        goto LABEL_69;
      }
      return APAudioFormatAudioCompressionTypeSupportsVBR(8);
    }
    if (a1 != 0x8000000000 && a1 != 0x10000000000)
      goto LABEL_76;
    return APAudioFormatAudioCompressionTypeSupportsVBR(4);
  }
  if (a1 > 0xFFFFFFFFFFFFFFLL)
  {
    if (a1 <= 0xFFFFFFFFFFFFFFFLL)
    {
      if (a1 != 0x100000000000000)
      {
        if (a1 != 0x200000000000000 && a1 != 0x400000000000000)
          goto LABEL_76;
        return APAudioFormatAudioCompressionTypeSupportsVBR(1902207848);
      }
      return APAudioFormatAudioCompressionTypeSupportsVBR(1902207331);
    }
    if (a1 == 0x1000000000000000)
      return APAudioFormatAudioCompressionTypeSupportsVBR(1902207848);
    if (a1 != 0x2000000000000000)
    {
      v4 = 0x4000000000000000;
      goto LABEL_62;
    }
    v1 = 1902928227;
    return APAudioFormatAudioCompressionTypeSupportsVBR(v1);
  }
  if (a1 > 0x1FFFFFFFFFFFFFLL)
  {
    if (a1 != 0x20000000000000)
    {
      if (a1 == 0x40000000000000)
        return APAudioFormatAudioCompressionTypeSupportsVBR(1902207331);
      v3 = 0x80000000000000;
      goto LABEL_44;
    }
    return APAudioFormatAudioCompressionTypeSupportsVBR(128);
  }
  if (a1 == 0x8000000000000)
    return APAudioFormatAudioCompressionTypeSupportsVBR(128);
  v4 = 0x10000000000000;
LABEL_62:
  if (a1 == v4)
    return APAudioFormatAudioCompressionTypeSupportsVBR(128);
LABEL_76:
  APSLogErrorAt(4294960561);
  return 0;
}

uint64_t APAudioFormatCompressionTypeToAudioFormatID(int a1)
{
  int v1;
  uint64_t result;

  if (a1 > 255)
  {
    if (a1 > 1023)
    {
      if (a1 == 1024)
        return 1902207331;
      if (a1 == 2048)
        return 1902928227;
    }
    else
    {
      if (a1 == 256)
        return 1902324531;
      if (a1 == 512)
        return 1902207848;
    }
    return 0;
  }
  v1 = a1 - 1;
  result = 1819304813;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = 1634492771;
      break;
    case 3:
      result = 1633772320;
      break;
    case 7:
      result = 1633772389;
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t APAudioFormatIDToAPCompressionType(int a1)
{
  if (a1 <= 1869641074)
  {
    if (a1 > 1634492770)
    {
      if (a1 == 1634492771)
        return 2;
      if (a1 == 1819304813)
        return 1;
    }
    else
    {
      if (a1 == 1633772320)
        return 4;
      if (a1 == 1633772389)
        return 8;
    }
  }
  else if (a1 <= 1902207847)
  {
    if (a1 == 1869641075)
      return 32;
    if (a1 == 1902207331)
      return 1024;
  }
  else
  {
    switch(a1)
    {
      case 1902207848:
        return 512;
      case 1902324531:
        return 256;
      case 1902928227:
        return 2048;
    }
  }
  return 0;
}

uint64_t APAudioFormatFindMaxChannelPerFrameFromAudioFormat(uint64_t a1, int *a2)
{
  int v2;
  uint64_t v3;

  if ((a1 & 0x1109054200000000) != 0)
  {
    v2 = 8;
  }
  else if ((a1 & 0x8484928000000000) != 0)
  {
    v2 = 6;
  }
  else if ((a1 & 0x6242400003FEAAA8) != 0)
  {
    v2 = 2;
  }
  else
  {
    if ((a1 & 0x2801FC015554) == 0)
    {
      v3 = 4294960591;
      APSSignalErrorAt(4294960591);
      return v3;
    }
    v2 = 1;
  }
  v3 = 0;
  *a2 = v2;
  return v3;
}

BOOL APAudioFormatIndexIsDolbyOrAtmos(unint64_t a1)
{
  return a1 <= 0x3F && ((1 << a1) & 0xC03E000E00000000) != 0;
}

uint64_t APAudioFormatCopyTransportFormatDescriptionForSourceContentFormatDescriptionAndSupportedFormats(const opaqueCMFormatDescription *a1, uint64_t a2, CMAudioFormatDescriptionRef *a3)
{
  char CFPreferenceNumberWithDefault;
  char v7;
  const AudioStreamBasicDescription *StreamBasicDescription;
  UInt32 mChannelsPerFrame;
  uint64_t v10;
  int v11;
  uint64_t v12;
  signed int MediaSubType;
  int v14;
  int v15;
  const AudioFormatListItem *FormatList;
  int mFormatID;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CMAudioFormatDescriptionRef formatDescriptionOut;
  AudioChannelLayout layout;
  _DWORD layoutSize[11];
  size_t sizeOut;

  memset(layoutSize, 0, sizeof(layoutSize));
  memset(&layout, 0, sizeof(layout));
  formatDescriptionOut = 0;
  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  if (!a1
    || (v7 = CFPreferenceNumberWithDefault,
        (StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(a1)) == 0))
  {
    APSLogErrorAt(0);
    goto LABEL_67;
  }
  mChannelsPerFrame = StreamBasicDescription->mChannelsPerFrame;
  if (mChannelsPerFrame - 1 >= 2)
  {
    if (mChannelsPerFrame != 6)
    {
      if (mChannelsPerFrame != 8)
      {
        v11 = gLogCategory_APAudioFormat;
        if (gLogCategory_APAudioFormat <= 50)
        {
          if (gLogCategory_APAudioFormat == -1 && !_LogCategory_Initialize())
            goto LABEL_67;
LABEL_66:
          LogPrintF();
LABEL_67:
          v11 = gLogCategory_APAudioFormat;
        }
LABEL_68:
        if (v11 <= 90 && (v11 != -1 || _LogCategory_Initialize()))
        {
          v22 = 4294960561;
          LogPrintF();
        }
        else
        {
          v22 = 4294960561;
        }
        goto LABEL_83;
      }
      v10 = 0x40E7700000000000;
      if ((a2 & 0x10000000000) != 0)
      {
        v12 = 1633772320;
        goto LABEL_48;
      }
      if ((a2 & 0x40000000000) != 0)
        goto LABEL_49;
      if (gLogCategory_APAudioFormat <= 50
        && (gLogCategory_APAudioFormat != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
    if (MediaSubType > 1885692722)
    {
      if (MediaSubType <= 1902469938)
      {
        if (MediaSubType != 1885692723)
        {
          v14 = 1902324531;
LABEL_33:
          if (MediaSubType != v14)
            goto LABEL_50;
LABEL_44:
          v12 = 1633772320;
          v10 = 0x40E7700000000000;
          if ((a2 & 0x10000000000) == 0)
          {
            if ((a2 & 0x40000000000) == 0)
            {
              if ((a2 & 0x8000000000) == 0)
              {
LABEL_52:
                if (gLogCategory_APAudioFormat <= 50
                  && (gLogCategory_APAudioFormat != -1 || _LogCategory_Initialize()))
                {
                  LogPrintF();
                }
                goto LABEL_59;
              }
LABEL_56:
              v19 = 6;
              v20 = 1024;
              v21 = 0x8000000000;
              goto LABEL_73;
            }
LABEL_49:
            v12 = 1633772389;
            v19 = 8;
            v20 = 480;
            v21 = 0x40000000000;
            goto LABEL_73;
          }
LABEL_48:
          v19 = 8;
          v20 = 1024;
          v21 = 0x10000000000;
          goto LABEL_73;
        }
        goto LABEL_35;
      }
      if (MediaSubType == 2053464883)
      {
LABEL_35:
        sizeOut = 0;
        FormatList = CMAudioFormatDescriptionGetFormatList(a1, &sizeOut);
        if (!FormatList || sizeOut <= 0x2F)
          goto LABEL_50;
        mFormatID = FormatList->mASBD.mFormatID;
        if (mFormatID <= 1885547314)
        {
          if (mFormatID == 1667574579)
            goto LABEL_44;
          v18 = 1700997939;
        }
        else
        {
          if (mFormatID == 1885547315 || mFormatID == 1902324531)
            goto LABEL_44;
          v18 = 2053319475;
        }
        if (mFormatID == v18)
          goto LABEL_44;
LABEL_50:
        v10 = 0x40E7700000000000;
        if ((a2 & 0x8000000000) == 0)
        {
          if ((a2 & 0x20000000000) != 0)
          {
            v12 = 1633772389;
            v19 = 6;
            v20 = 480;
            v21 = 0x20000000000;
            goto LABEL_73;
          }
          goto LABEL_52;
        }
        v12 = 1633772320;
        goto LABEL_56;
      }
      if (MediaSubType == 2053319475)
        goto LABEL_44;
      v15 = 1902469939;
    }
    else
    {
      if (MediaSubType > 1700997938)
      {
        if (MediaSubType == 1700997939)
          goto LABEL_44;
        if (MediaSubType != 1700998451)
        {
          v14 = 1885547315;
          goto LABEL_33;
        }
        goto LABEL_35;
      }
      if (MediaSubType == 1667574579)
        goto LABEL_44;
      v15 = 1667575091;
    }
    if (MediaSubType != v15)
      goto LABEL_50;
    goto LABEL_35;
  }
LABEL_59:
  v10 = 0x40E7700000000000;
  if ((a2 & 0x200000) != 0 && v7)
  {
    v12 = 0x3616C6163;
    v19 = 2;
    v20 = 352;
    v21 = 0x200000;
    goto LABEL_73;
  }
  v12 = 1633772320;
  if ((a2 & 0x800000) != 0)
  {
    v19 = 2;
    v20 = 1024;
    v21 = 0x800000;
  }
  else
  {
    if ((a2 & 0x400000) == 0)
    {
      v11 = gLogCategory_APAudioFormat;
      if (gLogCategory_APAudioFormat <= 50)
      {
        if (gLogCategory_APAudioFormat == -1 && !_LogCategory_Initialize())
          goto LABEL_67;
        goto LABEL_66;
      }
      goto LABEL_68;
    }
    v19 = 2;
    v20 = 1024;
    v10 = 0x40E5888000000000;
    v21 = 0x400000;
  }
LABEL_73:
  *(_QWORD *)&layoutSize[1] = v10;
  *(_QWORD *)&layoutSize[3] = v12;
  layoutSize[5] = 0;
  layoutSize[6] = v20;
  layoutSize[7] = 0;
  layoutSize[8] = v19;
  *(_QWORD *)&layoutSize[9] = 0;
  v23 = APAudioFormatToAudioChannelLayout(v21, (__int128 *)&layout, layoutSize);
  if ((_DWORD)v23)
  {
    v22 = v23;
LABEL_93:
    APSLogErrorAt(v23);
    goto LABEL_83;
  }
  v23 = CMAudioFormatDescriptionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const AudioStreamBasicDescription *)&layoutSize[1], layoutSize[0], &layout, 0, 0, 0, &formatDescriptionOut);
  if ((_DWORD)v23)
  {
    v22 = v23;
    goto LABEL_93;
  }
  if (formatDescriptionOut)
  {
    if (a3)
    {
      *a3 = formatDescriptionOut;
      formatDescriptionOut = 0;
    }
    if (gLogCategory_APAudioFormat <= 50
      && (gLogCategory_APAudioFormat != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v22 = 0;
  }
  else
  {
    APSLogErrorAt(0);
    v22 = 4294954510;
    APSSignalErrorAt(4294954510);
  }
LABEL_83:
  if (formatDescriptionOut)
    CFRelease(formatDescriptionOut);
  return v22;
}

uint64_t APAudioFormatToAudioChannelLayout(uint64_t a1, __int128 *a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;

  v3 = 4294960591;
  if (a2 && a3)
  {
    if (a1 > 0x3FFFFFFF)
    {
      if (a1 <= 0x7FFFFFFFFFFFLL)
      {
        if (a1 > 0x7FFFFFFFFFLL)
        {
          if (a1 <= 0x7FFFFFFFFFFLL)
          {
            if (a1 <= 0x1FFFFFFFFFFLL)
            {
              if (a1 != 0x8000000000)
              {
                v4 = 0x10000000000;
                goto LABEL_82;
              }
LABEL_75:
              v3 = 0;
              v9 = &APAudioFormatIndexToAudioChannelLayout_gAPLayout_5_1;
LABEL_103:
              v10 = v9[1];
              *a2 = *v9;
              a2[1] = v10;
              *a3 = 12;
              return v3;
            }
            if (a1 == 0x20000000000)
              goto LABEL_75;
            v4 = 0x40000000000;
LABEL_82:
            if (a1 == v4)
              goto LABEL_83;
LABEL_106:
            v3 = 4294960561;
            APSLogErrorAt(4294960561);
            return v3;
          }
          if (a1 <= 0x1FFFFFFFFFFFLL)
          {
            if (a1 != 0x80000000000)
            {
              v5 = 0x100000000000;
LABEL_51:
              if (a1 != v5)
                goto LABEL_106;
              goto LABEL_75;
            }
LABEL_98:
            v3 = 0;
            v9 = &APAudioFormatIndexToAudioChannelLayout_gAPLayout_Mono;
            goto LABEL_103;
          }
          if (a1 == 0x200000000000)
            goto LABEL_98;
          v8 = 0x400000000000;
          goto LABEL_101;
        }
        if (a1 > 0x1FFFFFFFFLL)
        {
          if (a1 <= 0x7FFFFFFFFLL)
          {
            if (a1 != 0x200000000)
            {
              if (a1 != 0x400000000)
                goto LABEL_106;
              goto LABEL_105;
            }
LABEL_83:
            v3 = 0;
            v9 = &APAudioFormatIndexToAudioChannelLayout_gAPLayout_5_1_2;
            goto LABEL_103;
          }
          if (a1 != 0x800000000)
          {
            v4 = 0x4000000000;
            goto LABEL_82;
          }
LABEL_89:
          v3 = 0;
          v9 = &APAudioFormatIndexToAudioChannelLayout_gAPLayout_9_1_6;
          goto LABEL_103;
        }
        if (a1 == 0x40000000 || a1 == 0x80000000)
          goto LABEL_98;
        v7 = 0x100000000;
LABEL_97:
        if (a1 != v7)
          goto LABEL_106;
        goto LABEL_98;
      }
      if (a1 <= 0x3FFFFFFFFFFFFFLL)
      {
        if (a1 > 0x3FFFFFFFFFFFFLL)
        {
          if (a1 <= 0xFFFFFFFFFFFFFLL)
          {
            if (a1 == 0x4000000000000)
              goto LABEL_75;
            v4 = 0x8000000000000;
            goto LABEL_82;
          }
          if (a1 == 0x10000000000000)
          {
LABEL_105:
            v3 = 0;
            v9 = &APAudioFormatIndexToAudioChannelLayout_gAPLayout_7_1_4;
            goto LABEL_103;
          }
          if (a1 != 0x20000000000000)
            goto LABEL_106;
          goto LABEL_89;
        }
        if (a1 == 0x800000000000)
          goto LABEL_75;
        if (a1 == 0x1000000000000)
          goto LABEL_83;
        v8 = 0x2000000000000;
      }
      else if (a1 > 0x3FFFFFFFFFFFFFFLL)
      {
        if (a1 <= 0x1FFFFFFFFFFFFFFFLL)
        {
          if (a1 == 0x400000000000000)
            goto LABEL_75;
          v4 = 0x1000000000000000;
          goto LABEL_82;
        }
        if (a1 == 0x2000000000000000)
          goto LABEL_102;
        v8 = 0x4000000000000000;
      }
      else
      {
        if (a1 <= 0xFFFFFFFFFFFFFFLL)
        {
          if (a1 != 0x40000000000000)
          {
            v5 = 0x80000000000000;
            goto LABEL_51;
          }
          goto LABEL_102;
        }
        if (a1 == 0x100000000000000)
          goto LABEL_83;
        v8 = 0x200000000000000;
      }
LABEL_101:
      if (a1 != v8)
        goto LABEL_106;
      goto LABEL_102;
    }
    if (a1 < 0x8000)
    {
      if (a1 > 255)
      {
        if (a1 <= 2047)
        {
          if (a1 == 256)
            goto LABEL_98;
          if (a1 != 512)
          {
            if (a1 != 1024)
              goto LABEL_106;
            goto LABEL_98;
          }
        }
        else if (a1 >= 0x2000)
        {
          if (a1 != 0x2000)
          {
            if (a1 != 0x4000)
              goto LABEL_106;
            goto LABEL_98;
          }
        }
        else if (a1 != 2048)
        {
          if (a1 != 4096)
            goto LABEL_106;
          goto LABEL_98;
        }
      }
      else
      {
        v6 = a1 - 4;
        if ((unint64_t)(a1 - 4) > 0x3C)
          goto LABEL_26;
        if (((1 << v6) & 0x1000000000001001) != 0)
          goto LABEL_98;
        if (((1 << v6) & 0x10000010) == 0)
        {
LABEL_26:
          if (a1 == 0x8000000000000000)
            goto LABEL_75;
          if (a1 != 128)
            goto LABEL_106;
        }
      }
    }
    else
    {
      if (a1 >= 0x400000)
      {
        if (a1 <= 0x3FFFFFF)
        {
          if (a1 <= 0xFFFFFF)
          {
            if (a1 != 0x400000 && a1 != 0x800000)
              goto LABEL_106;
            goto LABEL_102;
          }
          if (a1 == 0x1000000)
            goto LABEL_102;
          v8 = 0x2000000;
          goto LABEL_101;
        }
        if (a1 > 0xFFFFFFF)
        {
          if (a1 == 0x10000000)
            goto LABEL_98;
          v7 = 0x20000000;
        }
        else
        {
          if (a1 == 0x4000000)
            goto LABEL_98;
          v7 = 0x8000000;
        }
        goto LABEL_97;
      }
      if (a1 < 0x40000)
      {
        if (a1 != 0x8000)
        {
          if (a1 == 0x10000)
            goto LABEL_98;
          if (a1 != 0x20000)
            goto LABEL_106;
        }
      }
      else if (a1 >= 0x100000)
      {
        if (a1 != 0x100000 && a1 != 0x200000)
          goto LABEL_106;
      }
      else if (a1 != 0x40000 && a1 != 0x80000)
      {
        goto LABEL_106;
      }
    }
LABEL_102:
    v3 = 0;
    v9 = &APAudioFormatIndexToAudioChannelLayout_gAPLayout_Stereo;
    goto LABEL_103;
  }
  return v3;
}

uint64_t APAudioFormatSelectTransportFormatForAudioSourceInputFormat(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  char CFPreferenceNumberWithDefault;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  v7 = a1 & 0xF7FFF7CF42B3C000;
  if ((a1 & 0x814C3C00) != 0 && (a2 & 0x814C3C00) != 0)
  {
    if (!v7)
    {
      v8 = 0;
      v9 = 0x400000;
LABEL_95:
      *a3 = v9;
      return v8;
    }
  }
  else if (!v7 || (a2 & 0xF7FFF7CF42B3C000) == 0)
  {
    APSLogErrorAt(0);
    v8 = 4294960591;
    goto LABEL_86;
  }
  if (a1 > 0x3FFFFFFFFFLL)
  {
    if (a1 > 0x1FFFFFFFFFFFFLL)
    {
      if (a1 <= 0xFFFFFFFFFFFFFFLL)
      {
        if (a1 <= 0x7FFFFFFFFFFFFLL)
        {
          if (a1 == 0x2000000000000)
            goto LABEL_89;
          v11 = 0x4000000000000;
        }
        else
        {
          if (a1 == 0x8000000000000)
            goto LABEL_58;
          if (a1 == 0x40000000000000)
            goto LABEL_89;
          v11 = 0x80000000000000;
        }
      }
      else
      {
        if (a1 > 0xFFFFFFFFFFFFFFFLL)
        {
          if (a1 == 0x4000000000000000 || a1 == 0x2000000000000000)
            goto LABEL_89;
          v12 = 0x1000000000000000;
          goto LABEL_57;
        }
        if (a1 == 0x100000000000000)
          goto LABEL_58;
        if (a1 == 0x200000000000000)
          goto LABEL_89;
        v11 = 0x400000000000000;
      }
    }
    else
    {
      if (a1 > 0x7FFFFFFFFFFLL)
      {
        if (a1 <= 0x3FFFFFFFFFFFLL)
        {
          if (a1 == 0x80000000000)
            goto LABEL_89;
          if (a1 != 0x100000000000)
          {
            v10 = 0x200000000000;
LABEL_71:
            if (a1 != v10)
              goto LABEL_85;
LABEL_89:
            if ((a2 & 0x200000) != 0 && CFPreferenceNumberWithDefault)
            {
              v8 = 0;
              v9 = 0x200000;
            }
            else if ((a2 & 0x800000) != 0)
            {
              v8 = 0;
              v9 = 0x800000;
            }
            else
            {
              v8 = 4294960591;
              APSSignalErrorAt(4294960591);
              v9 = 0;
            }
            goto LABEL_95;
          }
LABEL_76:
          if ((a2 & 0x8000000000) != 0)
          {
            v8 = 0;
            v9 = 0x8000000000;
            goto LABEL_95;
          }
          if ((a2 & 0x20000000000) != 0)
          {
            v8 = 0;
            v9 = 0x20000000000;
            goto LABEL_95;
          }
          if (gLogCategory_APAudioFormat <= 50
            && (gLogCategory_APAudioFormat != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          goto LABEL_89;
        }
        if (a1 == 0x400000000000)
          goto LABEL_89;
        if (a1 == 0x800000000000)
          goto LABEL_76;
        v12 = 0x1000000000000;
        goto LABEL_57;
      }
      if (a1 > 0xFFFFFFFFFFLL)
      {
        if (a1 != 0x10000000000)
        {
          if (a1 == 0x20000000000)
            goto LABEL_76;
          v12 = 0x40000000000;
          goto LABEL_57;
        }
LABEL_58:
        if ((a2 & 0x10000000000) != 0)
        {
          v8 = 0;
          v9 = 0x10000000000;
          goto LABEL_95;
        }
        if ((a2 & 0x40000000000) != 0)
        {
          v8 = 0;
          v9 = 0x40000000000;
          goto LABEL_95;
        }
        if (gLogCategory_APAudioFormat <= 50
          && (gLogCategory_APAudioFormat != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        goto LABEL_76;
      }
      if (a1 == 0x4000000000)
        goto LABEL_58;
      v11 = 0x8000000000;
    }
    if (a1 == v11)
      goto LABEL_76;
    goto LABEL_85;
  }
  if (a1 < 0x800000)
  {
    if (a1 >= 0x40000)
    {
      if (a1 < 0x100000)
      {
        if (a1 != 0x40000 && a1 != 0x80000)
          goto LABEL_85;
      }
      else if (a1 != 0x100000 && a1 != 0x200000 && a1 != 0x400000)
      {
        goto LABEL_85;
      }
      goto LABEL_89;
    }
    if (a1 >= 0x8000)
    {
      if (a1 != 0x8000 && a1 != 0x10000 && a1 != 0x20000)
        goto LABEL_85;
      goto LABEL_89;
    }
    if (a1 == 0x8000000000000000)
      goto LABEL_76;
    if (a1 == 0x4000)
      goto LABEL_89;
    goto LABEL_85;
  }
  if (a1 <= 0xFFFFFFF)
  {
    if (a1 <= 0x1FFFFFF)
    {
      if (a1 == 0x800000)
        goto LABEL_89;
      v10 = 0x1000000;
    }
    else
    {
      if (a1 == 0x2000000 || a1 == 0x4000000)
        goto LABEL_89;
      v10 = 0x8000000;
    }
    goto LABEL_71;
  }
  if (a1 <= 0x7FFFFFFF)
  {
    if (a1 == 0x10000000 || a1 == 0x20000000)
      goto LABEL_89;
    v10 = 0x40000000;
    goto LABEL_71;
  }
  if (a1 == 0x80000000 || a1 == 0x100000000)
    goto LABEL_89;
  v12 = 0x200000000;
LABEL_57:
  if (a1 == v12)
    goto LABEL_58;
LABEL_85:
  v8 = 4294960591;
LABEL_86:
  APSSignalErrorAt(4294960591);
  return v8;
}

uint64_t APAudioFormatIsBufferedLosslessEnabled()
{
  return FigGetCFPreferenceNumberWithDefault();
}

unint64_t APAudioFormatGetAudioFormatForFormatDescription(const opaqueCMFormatDescription *a1, uint64_t a2)
{
  const AudioFormatListItem *RichestDecodableFormat;
  int mFormatID;
  BOOL v6;
  int v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v13;

  v13 = 0;
  RichestDecodableFormat = CMAudioFormatDescriptionGetRichestDecodableFormat(a1);
  if (RichestDecodableFormat)
  {
    mFormatID = RichestDecodableFormat->mASBD.mFormatID;
    if (mFormatID <= 1885547314)
    {
      v6 = mFormatID == 1667574579;
      v7 = 1700997939;
    }
    else
    {
      v6 = mFormatID == 1885547315 || mFormatID == 1902324531;
      v7 = 2053319475;
    }
    if (v6 || mFormatID == v7)
    {
      if (!a2)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  RichestDecodableFormat = (const AudioFormatListItem *)CMAudioFormatDescriptionGetStreamBasicDescription(a1);
  if (a2)
  {
LABEL_14:
    v9 = *(_OWORD *)&RichestDecodableFormat->mASBD.mSampleRate;
    v10 = *(_OWORD *)&RichestDecodableFormat->mASBD.mBytesPerPacket;
    *(_QWORD *)(a2 + 32) = *(_QWORD *)&RichestDecodableFormat->mASBD.mBitsPerChannel;
    *(_OWORD *)a2 = v9;
    *(_OWORD *)(a2 + 16) = v10;
  }
LABEL_15:
  v11 = ASBDToAPAudioFormat((uint64_t)RichestDecodableFormat, &v13);
  if (!(_DWORD)v11)
    return v13;
  APSLogErrorAt(v11);
  return 0;
}

uint64_t APAudioFormatGetPassthroughAudioFormatsForFormatDescription(const opaqueCMFormatDescription *a1)
{
  unint64_t AudioFormatForFormatDescription;
  uint64_t v2;
  unint64_t BufferedPassthroughSupportedFormats;
  CFTypeRef cf;
  _OWORD v6[2];
  uint64_t v7;

  if (!a1)
  {
    APSLogErrorAt(0);
    return 0;
  }
  v7 = 0;
  memset(v6, 0, sizeof(v6));
  AudioFormatForFormatDescription = APAudioFormatGetAudioFormatForFormatDescription(a1, (uint64_t)v6);
  if (!AudioFormatForFormatDescription)
  {
    APSLogErrorAt(0);
    if (gLogCategory_APAudioFormat <= 50
      && (gLogCategory_APAudioFormat != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 0;
  }
  v2 = AudioFormatForFormatDescription;
  if (APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender_initOnce != -1)
    dispatch_once(&APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender_initOnce, &__block_literal_global_94);
  BufferedPassthroughSupportedFormats = APAudioFormatGetBufferedPassthroughSupportedFormats(APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender_atmosAllowed);
  cf = 0;
  APAudioFormatCopyAudioFormatsToReadableString(BufferedPassthroughSupportedFormats, (__CFString **)&cf);
  if (gLogCategory_APAudioFormat <= 50 && (gLogCategory_APAudioFormat != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (cf)
    CFRelease(cf);
  cf = 0;
  APAudioFormatCopyAudioFormatsToReadableString(v2, (__CFString **)&cf);
  if (gLogCategory_APAudioFormat <= 50 && (gLogCategory_APAudioFormat != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (cf)
    CFRelease(cf);
  if ((BufferedPassthroughSupportedFormats & v2) != 0)
    return v2;
  else
    return 0;
}

uint64_t APAudioFormatCopyAudioFormatsToReadableString(uint64_t a1, __CFString **a2)
{
  CFMutableStringRef Mutable;
  __CFString *v5;
  int v6;
  uint64_t i;
  const char *v8;
  uint64_t result;

  if (a2)
  {
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    if (Mutable)
    {
      v5 = Mutable;
      v6 = 65;
      for (i = 1; (i & a1) == 0; i *= 2)
      {
LABEL_149:
        if (--v6 <= 1)
        {
          result = 0;
          *a2 = v5;
          return result;
        }
      }
      CFStringAppend(v5, CFSTR("["));
      if (i > 0x3FFFFFFF)
      {
        if (i <= 0x7FFFFFFFFFFFLL)
        {
          if (i > 0xFFFFFFFFFFLL)
          {
            if (i <= 0x7FFFFFFFFFFLL)
            {
              switch(i)
              {
                case 0x10000000000:
                  v8 = "AAC_LC/48000/5.1.2";
                  goto LABEL_148;
                case 0x20000000000:
                  v8 = "AAC_ELD/48000/5.1";
                  goto LABEL_148;
                case 0x40000000000:
                  v8 = "AAC_ELD/48000/5.1.2";
                  goto LABEL_148;
              }
            }
            else if (i > 0x1FFFFFFFFFFFLL)
            {
              if (i == 0x200000000000)
              {
                v8 = "PCM/48000/32f/1";
                goto LABEL_148;
              }
              if (i == 0x400000000000)
              {
                v8 = "PCM/48000/32f/2";
                goto LABEL_148;
              }
            }
            else
            {
              if (i == 0x80000000000)
              {
                v8 = "AAC-ELD/32000/1";
                goto LABEL_148;
              }
              if (i == 0x100000000000)
              {
                v8 = "PCM/48000/16/5.1";
                goto LABEL_148;
              }
            }
          }
          else if (i <= 0x1FFFFFFFFLL)
          {
            switch(i)
            {
              case 0x40000000:
                v8 = "OPUS/48000/1";
                goto LABEL_148;
              case 0x80000000:
                v8 = "AAC-ELD/44100/1";
                goto LABEL_148;
              case 0x100000000:
                v8 = "AAC-ELD/48000/1";
                goto LABEL_148;
            }
          }
          else if (i > 0x3FFFFFFFFFLL)
          {
            if (i == 0x4000000000)
            {
              v8 = "PCM/48000/16/5.1.2";
              goto LABEL_148;
            }
            if (i == 0x8000000000)
            {
              v8 = "AAC_LC/48000/5.1";
              goto LABEL_148;
            }
          }
          else
          {
            if (i == 0x200000000)
            {
              v8 = "QC3/48000/5.1.2";
              goto LABEL_148;
            }
            if (i == 0x400000000)
            {
              v8 = "QC3/48000/7.1.4";
              goto LABEL_148;
            }
          }
        }
        else if (i <= 0x3FFFFFFFFFFFFFLL)
        {
          if (i <= 0x3FFFFFFFFFFFFLL)
          {
            switch(i)
            {
              case 0x800000000000:
                v8 = "PCM/48000/32f/5.1";
                goto LABEL_148;
              case 0x1000000000000:
                v8 = "PCM/48000/32f/5.1.2";
                goto LABEL_148;
              case 0x2000000000000:
                v8 = "DDPLUS/48000/2";
                goto LABEL_148;
            }
          }
          else if (i > 0xFFFFFFFFFFFFFLL)
          {
            if (i == 0x10000000000000)
            {
              v8 = "DDPLUS/48000/7.1.4";
              goto LABEL_148;
            }
            if (i == 0x20000000000000)
            {
              v8 = "DDPLUS/48000/9.1.6";
              goto LABEL_148;
            }
          }
          else
          {
            if (i == 0x4000000000000)
            {
              v8 = "DDPLUS/48000/5.1";
              goto LABEL_148;
            }
            if (i == 0x8000000000000)
            {
              v8 = "DDPLUS/48000/5.1.2";
              goto LABEL_148;
            }
          }
        }
        else if (i > 0x3FFFFFFFFFFFFFFLL)
        {
          if (i > 0x1FFFFFFFFFFFFFFFLL)
          {
            if (i == 0x2000000000000000)
            {
              v8 = "QLAC/48000/24/2";
              goto LABEL_148;
            }
            if (i == 0x4000000000000000)
            {
              v8 = "QC3/48000/2";
              goto LABEL_148;
            }
          }
          else
          {
            if (i == 0x400000000000000)
            {
              v8 = "QAACHE/48000/5.1";
              goto LABEL_148;
            }
            if (i == 0x1000000000000000)
            {
              v8 = "QAACHE/48000/5.1.2";
              goto LABEL_148;
            }
          }
        }
        else if (i > 0xFFFFFFFFFFFFFFLL)
        {
          if (i == 0x100000000000000)
          {
            v8 = "QAAC/48000/5.1.2";
            goto LABEL_148;
          }
          if (i == 0x200000000000000)
          {
            v8 = "QAACHE/48000/2";
            goto LABEL_148;
          }
        }
        else
        {
          if (i == 0x40000000000000)
          {
            v8 = "QAAC/48000/2";
            goto LABEL_148;
          }
          if (i == 0x80000000000000)
          {
            v8 = "QAAC/48000/5.1";
            goto LABEL_148;
          }
        }
      }
      else if (i < 0x8000)
      {
        if (i > 255)
        {
          if (i <= 2047)
          {
            switch(i)
            {
              case 256:
                v8 = "PCM/32000/16/1";
                goto LABEL_148;
              case 512:
                v8 = "PCM/32000/16/2";
                goto LABEL_148;
              case 1024:
                v8 = "PCM/44100/16/1";
                goto LABEL_148;
            }
          }
          else if (i >= 0x2000)
          {
            if (i == 0x2000)
            {
              v8 = "PCM/44100/24/2";
              goto LABEL_148;
            }
            if (i == 0x4000)
            {
              v8 = "PCM/48000/16/1";
              goto LABEL_148;
            }
          }
          else
          {
            if (i == 2048)
            {
              v8 = "PCM/44100/16/2";
              goto LABEL_148;
            }
            if (i == 4096)
            {
              v8 = "PCM/44100/24/1";
              goto LABEL_148;
            }
          }
        }
        else if (i <= 15)
        {
          switch(i)
          {
            case 0x8000000000000000:
              v8 = "QC3/48000/5.1";
              goto LABEL_148;
            case 4:
              v8 = "PCM/8000/16/1";
              goto LABEL_148;
            case 8:
              v8 = "PCM/8000/16/2";
              goto LABEL_148;
          }
        }
        else if (i > 63)
        {
          v8 = "PCM/24000/16/1";
          if (i == 64)
            goto LABEL_148;
          if (i == 128)
          {
            v8 = "PCM/24000/16/2";
            goto LABEL_148;
          }
        }
        else
        {
          if (i == 16)
          {
            v8 = "PCM/16000/16/1";
            goto LABEL_148;
          }
          if (i == 32)
          {
            v8 = "PCM/16000/16/2";
            goto LABEL_148;
          }
        }
      }
      else if (i < 0x400000)
      {
        if (i < 0x40000)
        {
          switch(i)
          {
            case 0x8000:
              v8 = "PCM/48000/16/2";
              goto LABEL_148;
            case 0x10000:
              v8 = "PCM/48000/24/1";
              goto LABEL_148;
            case 0x20000:
              v8 = "PCM/48000/24/2";
              goto LABEL_148;
          }
        }
        else if (i >= 0x100000)
        {
          if (i == 0x100000)
          {
            v8 = "ALAC/48000/16/2";
            goto LABEL_148;
          }
          if (i == 0x200000)
          {
            v8 = "ALAC/48000/24/2";
            goto LABEL_148;
          }
        }
        else
        {
          if (i == 0x40000)
          {
            v8 = "ALAC/44100/16/2";
            goto LABEL_148;
          }
          if (i == 0x80000)
          {
            v8 = "ALAC/44100/24/2";
            goto LABEL_148;
          }
        }
      }
      else if (i > 0x3FFFFFF)
      {
        if (i > 0xFFFFFFF)
        {
          if (i == 0x10000000)
          {
            v8 = "OPUS/16000/1";
            goto LABEL_148;
          }
          if (i == 0x20000000)
          {
            v8 = "OPUS/24000/1";
            goto LABEL_148;
          }
        }
        else
        {
          if (i == 0x4000000)
          {
            v8 = "AAC-ELD/16000/1";
            goto LABEL_148;
          }
          if (i == 0x8000000)
          {
            v8 = "AAC-ELD/24000/1";
            goto LABEL_148;
          }
        }
      }
      else if (i > 0xFFFFFF)
      {
        if (i == 0x1000000)
        {
          v8 = "AAC-ELD/44100/2";
          goto LABEL_148;
        }
        if (i == 0x2000000)
        {
          v8 = "AAC-ELD/48000/2";
          goto LABEL_148;
        }
      }
      else
      {
        if (i == 0x400000)
        {
          v8 = "AAC-LC/44100/2";
          goto LABEL_148;
        }
        if (i == 0x800000)
        {
          v8 = "AAC-LC/48000/2";
LABEL_148:
          CFStringAppendCString(v5, v8, 0x8000100u);
          CFStringAppend(v5, CFSTR("]"));
          goto LABEL_149;
        }
      }
      if (i == 0x800000000)
        v8 = "QC3/48000/9.1.6";
      else
        v8 = "";
      goto LABEL_148;
    }
    APSLogErrorAt(0);
    return 4294954510;
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
}

uint64_t APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender()
{
  if (APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender_initOnce != -1)
    dispatch_once(&APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender_initOnce, &__block_literal_global_94);
  return APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender_atmosAllowed;
}

uint64_t APAudioFormatIndexToAudioChannelLayout(uint64_t a1, __int128 *a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  __int128 *v8;
  char v9;
  char v10;
  __int128 v11;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v3 = 4294960591;
  if (a2 && a3)
  {
    v15 = 0;
    v13 = 0u;
    v14 = 0u;
    v7 = APAudioFormatIndexToASBD(a1, (uint64_t)&v13);
    if ((_DWORD)v7)
    {
      v3 = v7;
      APSLogErrorAt(v7);
    }
    else
    {
      switch(HIDWORD(v14))
      {
        case 1:
          v3 = 0;
          v8 = &APAudioFormatIndexToAudioChannelLayout_gAPLayout_Mono;
          goto LABEL_26;
        case 2:
          v3 = 0;
          v8 = &APAudioFormatIndexToAudioChannelLayout_gAPLayout_Stereo;
          goto LABEL_26;
        case 6:
          if ((unint64_t)(a1 - 39) > 0x1A || ((1 << (a1 - 39)) & 0x5090925) == 0)
            goto LABEL_28;
          v3 = 0;
          v8 = &APAudioFormatIndexToAudioChannelLayout_gAPLayout_5_1;
          goto LABEL_26;
        case 8:
          v9 = a1 - 33;
          if ((unint64_t)(a1 - 33) > 0x39)
            goto LABEL_28;
          if (((1 << v9) & 0x2088482A1) != 0)
          {
            v3 = 0;
            v8 = &APAudioFormatIndexToAudioChannelLayout_gAPLayout_5_1_2;
            goto LABEL_26;
          }
          if (((1 << v9) & 0x200600400000000) == 0)
            goto LABEL_28;
          v3 = 0;
          v8 = &APAudioFormatIndexToAudioChannelLayout_gAPLayout_7_1;
          goto LABEL_26;
        case 0xA:
          v10 = a1 - 76;
          if ((unint64_t)(a1 - 76) > 7)
            goto LABEL_28;
          if (((1 << v10) & 0x31) != 0)
          {
            v3 = 0;
            v8 = &APAudioFormatIndexToAudioChannelLayout_gAPLayout_5_1_4;
            goto LABEL_26;
          }
          if (((1 << v10) & 0xC2) != 0)
          {
            v3 = 0;
            v8 = &APAudioFormatIndexToAudioChannelLayout_gAPLayout_7_1_2;
LABEL_26:
            v11 = v8[1];
            *a2 = *v8;
            a2[1] = v11;
            *a3 = 12;
            return v3;
          }
LABEL_28:
          APSSignalErrorAt(4294960591);
          break;
        case 0xC:
          if ((unint64_t)(a1 - 34) > 0x32 || ((1 << (a1 - 34)) & 0x4000C00040001) == 0)
            goto LABEL_28;
          v3 = 0;
          v8 = &APAudioFormatIndexToAudioChannelLayout_gAPLayout_7_1_4;
          goto LABEL_26;
        case 0x10:
          if (a1 != 53 && a1 != 35)
            goto LABEL_28;
          v3 = 0;
          v8 = &APAudioFormatIndexToAudioChannelLayout_gAPLayout_9_1_6;
          goto LABEL_26;
        default:
          return v3;
      }
    }
  }
  return v3;
}

BOOL APAudioFormatIsAudioChannelLayoutTag7_1_2(int a1)
{
  return a1 == 12845066;
}

BOOL APAudioFormatIsAudioChannelLayoutTag7_1_4(int a1)
{
  return a1 == 13238284 || a1 == 12582924;
}

uint64_t APSAudioFormatDoesAudioChannelLayoutTagHaveHeights(int a1)
{
  uint64_t result;
  int v3;

  result = 0;
  if (a1 > 12779529)
  {
    if (a1 != 12779530 && a1 != 13238284)
    {
      v3 = 12845066;
LABEL_8:
      if (a1 != v3)
        return result;
    }
  }
  else if (a1 != 12582924 && a1 != 12648464)
  {
    v3 = 12713992;
    goto LABEL_8;
  }
  return 1;
}

uint64_t APSAudioFormatGetFullRangeChannelCountFromChannelLayoutTag(int a1)
{
  int v1;
  uint64_t result;

  if (a1 <= 12582923)
  {
    if (a1 > 8126469)
    {
      if (a1 != 8126470)
      {
        v1 = 8388616;
LABEL_15:
        if (a1 == v1)
          return 7;
        goto LABEL_19;
      }
      return 5;
    }
    if (a1 == 6553601)
      return 1;
    if (a1 == 6619138)
      return 2;
  }
  else
  {
    if (a1 > 12713991)
    {
      if (a1 != 12713992 && a1 != 12779530)
      {
        v1 = 12845066;
        goto LABEL_15;
      }
      return 5;
    }
    if (a1 == 12582924)
      return 7;
    if (a1 == 12648464)
      return 9;
  }
LABEL_19:
  if (gLogCategory_APAudioFormat > 90)
    return 0;
  if (gLogCategory_APAudioFormat != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
  {
    LogPrintF();
    return 0;
  }
  return result;
}

uint64_t APAudioFormatASBDArrayToAPAudioFormats(const __CFData *a1, _QWORD *a2)
{
  unint64_t Length;
  unint64_t v5;
  const UInt8 *BytePtr;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;

  v10 = 0;
  Length = CFDataGetLength(a1);
  if (Length <= 0x27)
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  else
  {
    v5 = Length / 0x28;
    BytePtr = CFDataGetBytePtr(a1);
    v7 = 0;
    if (v5 <= 1)
      v5 = 1;
    do
    {
      result = ASBDToAPAudioFormat((uint64_t)BytePtr, &v10);
      v9 = v10;
      if ((_DWORD)result)
        v9 = 0;
      v7 |= v9;
      BytePtr += 40;
      --v5;
    }
    while (v5);
    *a2 = v7;
  }
  return result;
}

BOOL APAudioFormatAPACIsAllowedForCurrentDeviceAsSender()
{
  uint64_t v0;

  if (APAudioFormatAPACIsAllowedForCurrentDeviceAsSender_initOnce != -1)
    dispatch_once(&APAudioFormatAPACIsAllowedForCurrentDeviceAsSender_initOnce, &__block_literal_global_1787);
  if (APAudioFormatAPACIsAllowedForCurrentDeviceAsSender_apacAllowed != 1)
    return 0;
  v0 = IsAppleInternalBuild();
  return APSSettingsGetIntWithOverrideAndDefault(CFSTR("bufferedAPACSurround"), 0, v0)
      || APSSettingsIsFeatureEnabled(CFSTR("BufferedAPAC")) != 0;
}

uint64_t APAudioFormatAtmosIsAllowedForCurrentDeviceAsReceiver()
{
  if (APAudioFormatAtmosIsAllowedForCurrentDeviceAsReceiver_initOnce != -1)
    dispatch_once(&APAudioFormatAtmosIsAllowedForCurrentDeviceAsReceiver_initOnce, &__block_literal_global_98);
  return APAudioFormatAtmosIsAllowedForCurrentDeviceAsReceiver_atmosAllowed;
}

uint64_t APAudioFormatFilterFormatsForSpatialSender(uint64_t a1, CFArrayRef theArray, int a3)
{
  uint64_t v3;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  int v7;
  CFIndex v8;
  const void *v9;
  const __CFString *v10;
  const __CFString *v11;
  const __CFDictionary *ValueAtIndex;
  const __CFString *v13;
  const __CFString *v14;
  void *v15;
  unint64_t v16;
  const __CFArray *v20;
  CFTypeRef cf;
  char v22;
  int v23;
  void *value;

  v3 = a1;
  value = 0;
  v23 = 0;
  v22 = 0;
  if (!theArray)
  {
    v9 = 0;
    goto LABEL_34;
  }
  v4 = theArray;
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
    v9 = 0;
    goto LABEL_25;
  }
  v6 = Count;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = CFSTR("IsLocalStream");
  v11 = CFSTR("TightSyncUUID");
  v20 = v4;
  do
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v4, v8);
    FigCFDictionaryGetBooleanIfPresent();
    if (CFDictionaryGetValueIfPresent(ValueAtIndex, v11, (const void **)&value) && (!v9 || !CFEqual(value, v9)))
    {
      v13 = v11;
      v14 = v10;
      v15 = value;
      if (value)
        CFRetain(value);
      if (v9)
        CFRelease(v9);
      v9 = v15;
      v10 = v14;
      v11 = v13;
      v4 = v20;
    }
    v7 |= v22 != 0;
    FigCFDictionaryGetInt64IfPresent();
    ++v8;
  }
  while (v6 != v8);
  if (IsAppleTV() && MGGetProductType() != 1110205732)
  {
    if (APSSettingsGetIntWithOverrideAndDefault(CFSTR("DisableATVWHASurround"), 0, 0))
    {
      LODWORD(v3) = a1;
      goto LABEL_28;
    }
    if ((v7 & 1) != 0)
    {
      if (APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender_initOnce != -1)
        dispatch_once(&APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender_initOnce, &__block_literal_global_94);
      v3 = a1;
      v16 = APAudioFormatGetBufferedPassthroughSupportedFormats(APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender_atmosAllowed) | 0x600000;
      goto LABEL_33;
    }
LABEL_25:
    v3 = a1;
    goto LABEL_34;
  }
  if (APSIsAPMSpeaker_sCheckOnce != -1)
    dispatch_once(&APSIsAPMSpeaker_sCheckOnce, &__block_literal_global_9);
  v3 = a1;
  if (!APSIsAPMSpeaker_sIsAPMSpeaker)
    goto LABEL_34;
  if (!a3)
  {
LABEL_28:
    v3 &= 0x400000uLL;
    goto LABEL_34;
  }
  if (!FigGetCFPreferenceNumberWithDefault())
  {
    if (APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender_initOnce != -1)
      dispatch_once(&APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender_initOnce, &__block_literal_global_94);
    v16 = APAudioFormatGetBufferedPassthroughSupportedFormats(APAudioFormatAtmosIsAllowedForCurrentDeviceAsSender_atmosAllowed) | 0xE6C6FA81FFFFFFFCLL;
LABEL_33:
    v3 &= v16;
  }
LABEL_34:
  cf = 0;
  APAudioFormatCopyAudioFormatsToReadableString(v3, (__CFString **)&cf);
  if (gLogCategory_APAudioFormat <= 50 && (gLogCategory_APAudioFormat != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (cf)
    CFRelease(cf);
  if (v9)
    CFRelease(v9);
  return v3;
}

uint64_t APAudioFormatFilterFormatsForCurrentBufferedSender(uint64_t a1)
{
  uint64_t SupportedTransportAudioFormatsForBufferedSender;

  SupportedTransportAudioFormatsForBufferedSender = APAudioFormatGetSupportedTransportAudioFormatsForBufferedSender(0);
  return APAudioFormatFilterFormatsForSpatialSender(SupportedTransportAudioFormatsForBufferedSender, 0, 0) & a1;
}

uint64_t APAudioFormatFilterFormatsForCurrentBufferedSenderWithEndpointStreamInfo(uint64_t a1, const __CFArray *a2, int a3)
{
  uint64_t SupportedTransportAudioFormatsForBufferedSender;

  SupportedTransportAudioFormatsForBufferedSender = APAudioFormatGetSupportedTransportAudioFormatsForBufferedSender(0);
  return APAudioFormatFilterFormatsForSpatialSender(SupportedTransportAudioFormatsForBufferedSender, a2, a3) & a1;
}

uint64_t APAudioFormatFilterFormatsForCurrentRealTimeSender(int a1)
{
  return *(_QWORD *)&a1 & 0x40000;
}

uint64_t APAudioFormatGetSupportedTransportAudioFormatsForRealTimeSender(_QWORD *a1)
{
  if (a1)
    *a1 = 0x40000;
  return 0x40000;
}

uint64_t APAudioFormatFilterFormatsForCurrentLowLatencySender(uint64_t a1)
{
  _BOOL8 v2;
  int IntWithOverrideAndDefault;
  uint64_t v4;

  v2 = (APSGetPersistentGroupModel() & 0xFFFFFFFD) == 0;
  IntWithOverrideAndDefault = APSSettingsGetIntWithOverrideAndDefault(CFSTR("lowLatencyAudioSurroundSender"), 0, v2);
  v4 = 0x2000000;
  if (IntWithOverrideAndDefault)
    v4 = 0x40002000000;
  return v4 & a1;
}

unint64_t APAudioFormatGetSupportedTransportAudioFormatsForBufferedReceiver(_QWORD *a1)
{
  int v2;
  unint64_t BufferedPassthroughSupportedFormats;
  uint64_t v4;

  if (APAudioFormatAtmosIsAllowedForCurrentDeviceAsReceiver_initOnce != -1)
    dispatch_once(&APAudioFormatAtmosIsAllowedForCurrentDeviceAsReceiver_initOnce, &__block_literal_global_98);
  v2 = APAudioFormatAtmosIsAllowedForCurrentDeviceAsReceiver_atmosAllowed;
  BufferedPassthroughSupportedFormats = APAudioFormatGetBufferedPassthroughSupportedFormats(APAudioFormatAtmosIsAllowedForCurrentDeviceAsReceiver_atmosAllowed);
  if (a1)
    *a1 = 0x800000;
  v4 = 14680064;
  if (v2)
    v4 = 0x18000E00000;
  return BufferedPassthroughSupportedFormats | v4;
}

uint64_t APAudioFormatGetSupportedTransportAudioFormatsForRealTimeReceiver(_QWORD *a1)
{
  if (a1)
    *a1 = 0x40000;
  return 21235712;
}

uint64_t APAudioFormatGetSupportedTransportAudioFormatsForScreenReceiver(_QWORD *a1)
{
  if (a1)
    *a1 = 0x400000;
  return 21235712;
}

uint64_t APAudioFormatGetTransportAudioFormatForPCMFormatLowLatencySender(uint64_t a1)
{
  unsigned int v2;

  v2 = 0;
  APAudioFormatFindMaxChannelPerFrameFromAudioFormat(a1, (int *)&v2);
  if (v2 <= 2)
    return 0x2000000;
  else
    return 0x40000000000;
}

uint64_t APAudioFormatGetSupportedTransportAudioFormatsLowLatencyReceiver(uint64_t *a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t result;
  int IntWithOverrideAndDefault;

  if (APSIsAPMSpeaker_sCheckOnce != -1)
    dispatch_once(&APSIsAPMSpeaker_sCheckOnce, &__block_literal_global_9);
  if (APSIsAPMSpeaker_sIsAPMSpeaker)
  {
    v2 = MGGetProductType();
    v3 = v2 == 1540760353 || v2 == 4240173202 || v2 == 2702125347;
    IntWithOverrideAndDefault = APSSettingsGetIntWithOverrideAndDefault(CFSTR("lowLatencyAudioSurroundReceiver"), 0, v3);
    v4 = 0x2000000;
    if (IntWithOverrideAndDefault)
      result = 0x40002000000;
    else
      result = 0x2000000;
    if (a1)
      goto LABEL_15;
  }
  else
  {
    v4 = 0;
    result = 0;
    if (a1)
LABEL_15:
      *a1 = v4;
  }
  return result;
}

unint64_t APAudioFormatGetSupportedAudioFormatsForLocalEchoCancellationReferenceReceiver(_QWORD *a1)
{
  unint64_t SupportedAudioFormatsForLocalBufferedReceiver;

  SupportedAudioFormatsForLocalBufferedReceiver = APAudioFormatGetSupportedAudioFormatsForLocalBufferedReceiver(0);
  if (a1)
    *a1 = 0x800000;
  return SupportedAudioFormatsForLocalBufferedReceiver & 0xF7CFFFC3FFFFFFFCLL;
}

unint64_t APAudioFormatGetSupportedAudioFormatsForLocalBufferedReceiver(_QWORD *a1)
{
  int v2;
  char CFPreferenceNumberWithDefault;
  unint64_t BufferedPassthroughSupportedFormats;
  uint64_t v5;

  if (APAudioFormatAtmosIsAllowedForCurrentDeviceAsReceiver_initOnce != -1)
    dispatch_once(&APAudioFormatAtmosIsAllowedForCurrentDeviceAsReceiver_initOnce, &__block_literal_global_98);
  v2 = APAudioFormatAtmosIsAllowedForCurrentDeviceAsReceiver_atmosAllowed;
  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  if (APAudioFormatAtmosIsAllowedForCurrentDeviceAsReceiver_initOnce != -1)
    dispatch_once(&APAudioFormatAtmosIsAllowedForCurrentDeviceAsReceiver_initOnce, &__block_literal_global_98);
  BufferedPassthroughSupportedFormats = APAudioFormatGetBufferedPassthroughSupportedFormats(APAudioFormatAtmosIsAllowedForCurrentDeviceAsReceiver_atmosAllowed);
  if (a1)
    *a1 = 0x800000;
  v5 = 0x400000;
  if (v2)
    v5 = 0x18000C00000;
  if (CFPreferenceNumberWithDefault)
    v5 |= 0x200000uLL;
  return BufferedPassthroughSupportedFormats | v5;
}

uint64_t APAudioFormatGetSupportedAudioFormatsForLocalRealTimeReceiver(_QWORD *a1)
{
  if (a1)
    *a1 = 0x40000;
  return 21235712;
}

uint64_t APAudioFormatGetMagicCookieForAACLC(int a1, _QWORD *a2, int *a3, double a4)
{
  uint64_t result;
  int v9;

  if (APAudioFormatInitializeMagicCookieForCodec_initOnce != -1)
    dispatch_once(&APAudioFormatInitializeMagicCookieForCodec_initOnce, &__block_literal_global_141);
  if (a4 != 48000.0)
    return 0;
  if (sAAC_LCMagicSurround51 && sAAC_LCMagicSurround512)
  {
    if (a1 == 8)
    {
      result = 0;
      *a2 = sAAC_LCMagicSurround512;
      v9 = sAAC_LCMagicSurroundSize512;
      goto LABEL_11;
    }
    if (a1 == 6)
    {
      result = 0;
      *a2 = sAAC_LCMagicSurround51;
      v9 = sAAC_LCMagicSurroundSize51;
LABEL_11:
      *a3 = v9;
      return result;
    }
    return 0;
  }
  APSLogErrorAt(0);
  return 4294960561;
}

uint64_t APAudioFormatGetMagicCookieForAACELD(int a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t result;

  if (APAudioFormatInitializeMagicCookieForCodec_initOnce != -1)
    dispatch_once(&APAudioFormatInitializeMagicCookieForCodec_initOnce, &__block_literal_global_141);
  if (sAAC_ELDMagicSurround512)
  {
    result = 0;
    if (a1 == 8)
    {
      *a2 = sAAC_ELDMagicSurround512;
      *a3 = sAAC_ELDMagicSurroundSize512;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960561;
  }
  return result;
}

uint64_t APAudioFormatGetMagicCookieForALAC(int a1, int a2, _QWORD *a3, int *a4)
{
  uint64_t v8;
  int v9;

  if (APAudioFormatInitializeMagicCookieForCodec_initOnce == -1)
  {
    if (a3)
      goto LABEL_3;
LABEL_27:
    v8 = 4294960591;
    goto LABEL_29;
  }
  dispatch_once(&APAudioFormatInitializeMagicCookieForCodec_initOnce, &__block_literal_global_141);
  if (!a3)
    goto LABEL_27;
LABEL_3:
  if (!a4)
  {
    v8 = 4294960591;
    goto LABEL_29;
  }
  if (a1 == 48000)
  {
    if (a2 != 24)
    {
      if (a2 == 16)
      {
        if (sAAC_ALAC48k16BitStereo)
        {
          v8 = 0;
          *a3 = sAAC_ALAC48k16BitStereo;
          v9 = sAAC_ALAC48k16BitSizeStereo;
          goto LABEL_22;
        }
        v8 = 4294960561;
        goto LABEL_29;
      }
      goto LABEL_14;
    }
    if (sAAC_ALAC48k24BitStereo)
    {
      v8 = 0;
      *a3 = sAAC_ALAC48k24BitStereo;
      v9 = sAAC_ALAC48k24BitSizeStereo;
      goto LABEL_22;
    }
    v8 = 4294960561;
LABEL_29:
    APSLogErrorAt(0);
    goto LABEL_15;
  }
  if (a1 != 44100)
    goto LABEL_14;
  if (a2 == 24)
  {
    if (sAAC_ALAC44k24BitStereo)
    {
      v8 = 0;
      *a3 = sAAC_ALAC44k24BitStereo;
      v9 = sAAC_ALAC44k24BitSizeStereo;
      goto LABEL_22;
    }
    v8 = 4294960561;
    goto LABEL_29;
  }
  if (a2 == 16)
  {
    if (sAAC_ALAC44k16BitStereo)
    {
      v8 = 0;
      *a3 = sAAC_ALAC44k16BitStereo;
      v9 = sAAC_ALAC44k16BitSizeStereo;
LABEL_22:
      *a4 = v9;
      return v8;
    }
    v8 = 4294960561;
    goto LABEL_29;
  }
LABEL_14:
  v8 = 4294960561;
LABEL_15:
  if (gLogCategory_APAudioFormat <= 90 && (gLogCategory_APAudioFormat != -1 || _LogCategory_Initialize()))
    LogPrintF();
  return v8;
}

uint64_t APAudioFormatGetMagicCookieForAPAC(uint64_t a1, _QWORD *a2, int *a3, double a4)
{
  uint64_t result;
  int v9;

  if (APAudioFormatInitializeMagicCookieForCodec_initOnce != -1)
    dispatch_once(&APAudioFormatInitializeMagicCookieForCodec_initOnce, &__block_literal_global_141);
  if (sAPAC_MagicStereo
    && sAPAC_MagicSurround51
    && sAPAC_MagicSurround512
    && sAPAC_MagicSurround71
    && sAPAC_MagicSurround714)
  {
    result = 0;
    if (a4 == 48000.0)
    {
      switch(a1)
      {
        case '@':
          result = 0;
          *a2 = sAPAC_MagicStereo;
          v9 = sAPAC_MagicStereoSize;
          goto LABEL_17;
        case 'A':
          result = 0;
          *a2 = sAPAC_MagicSurround51;
          v9 = sAPAC_MagicSurround51Size;
          goto LABEL_17;
        case 'B':
          result = 0;
          *a2 = sAPAC_MagicSurround512;
          v9 = sAPAC_MagicSurround512Size;
          goto LABEL_17;
        case 'C':
          result = 0;
          *a2 = sAPAC_MagicSurround71;
          v9 = sAPAC_MagicSurround71Size;
          goto LABEL_17;
        case 'D':
          result = 0;
          *a2 = sAPAC_MagicSurround714;
          v9 = sAPAC_MagicSurround714Size;
          goto LABEL_17;
        case 'L':
          result = 0;
          *a2 = sAPAC_MagicSurround514;
          v9 = sAPAC_MagicSurround514Size;
          goto LABEL_17;
        case 'M':
          result = 0;
          *a2 = sAPAC_MagicSurround712;
          v9 = sAPAC_MagicSurround712Size;
LABEL_17:
          *a3 = v9;
          break;
        default:
          return result;
      }
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960561;
  }
  return result;
}

uint64_t APSRealTimeWritableGetTypeID()
{
  if (gAPSRealTimeWritableInitOnce != -1)
    dispatch_once_f(&gAPSRealTimeWritableInitOnce, 0, (dispatch_function_t)_APSRealTimeWritableGetTypeID);
  return gAPSRealTimeWritableTypeID;
}

uint64_t _APSRealTimeWritableGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSRealTimeWritableTypeID = result;
  return result;
}

void _APSRealTimeWritableFinalize(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 40);
  if (v2)
    free(v2);
  v3 = *(void **)(a1 + 48);
  if (v3)
    free(v3);
}

uint64_t APSRealTimeWritableCreate(const void *a1, size_t a2, CFTypeRef *a3)
{
  uint64_t Instance;
  _QWORD *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;

  if (a2 && a3)
  {
    if (gAPSRealTimeWritableInitOnce != -1)
      dispatch_once_f(&gAPSRealTimeWritableInitOnce, 0, (dispatch_function_t)_APSRealTimeWritableGetTypeID);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v7 = (_QWORD *)Instance;
      *(_QWORD *)(Instance + 33) = 0;
      *(_QWORD *)(Instance + 25) = 0;
      *(_QWORD *)(Instance + 48) = 0;
      *(_QWORD *)(Instance + 41) = 0;
      *(_QWORD *)(Instance + 16) = a2;
      *(_BYTE *)(Instance + 24) = 0;
      atomic_store(0, (unint64_t *)(Instance + 32));
      v8 = malloc_type_malloc(a2, 0x1E8E328DuLL);
      v7[5] = v8;
      if (v8 && (v9 = malloc_type_malloc(a2, 0x949EECFuLL), (v7[6] = v9) != 0))
      {
        v10 = (void *)v7[5];
        if (a1)
          memcpy(v10, a1, a2);
        else
          bzero(v10, a2);
        v11 = 0;
        *a3 = CFRetain(v7);
      }
      else
      {
        APSLogErrorAt(0);
        v11 = 4294960568;
      }
      CFRelease(v7);
    }
    else
    {
      APSLogErrorAt(0);
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  return v11;
}

uint64_t APSRealTimeWritableRead(uint64_t a1, void *__dst)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  if (a1 && __dst)
  {
    v4 = (unint64_t *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 32);
    while (1)
    {
      __dmb(9u);
      memcpy(__dst, *(const void **)(a1 + 8 * (v5 & 1) + 40), *(_QWORD *)(a1 + 16));
      v6 = __ldxr(v4);
      if (v6 != v5)
        break;
      if (__stlxr(v5, v4))
        goto LABEL_8;
      v7 = 1;
LABEL_9:
      v5 = v6;
      if ((v7 & 1) != 0)
        return 0;
    }
    __clrex();
LABEL_8:
    v7 = 0;
    goto LABEL_9;
  }
  APSLogErrorAt(0);
  return 4294960591;
}

uint64_t APSRealTimeWritableWrite(uint64_t a1, const void *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 v4;
  unint64_t v5;
  uint64_t v6;

  if (a1 && a2)
  {
    v3 = (unsigned __int8 *)(a1 + 24);
    do
      v4 = __ldxr(v3);
    while (__stxr(1u, v3));
    if ((v4 & 1) != 0)
    {
      APSLogErrorAt(0);
      v6 = 4294960537;
      APSSignalErrorAt(4294960537);
    }
    else
    {
      v5 = *(_QWORD *)(a1 + 32) + 1;
      memcpy(*(void **)(a1 + 8 * (v5 & 1) + 40), a2, *(_QWORD *)(a1 + 16));
      v6 = 0;
      atomic_store(v5, (unint64_t *)(a1 + 32));
      *(_BYTE *)(a1 + 24) = 0;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  return v6;
}

const void *APSEncryptionUtilsDeriveAESKeySHA512(const void *result, CC_LONG a2, const void *a3, CC_LONG a4, const void *a5, CC_LONG a6, _OWORD *a7, _OWORD *a8)
{
  const void *v12;
  uint64_t i;
  CC_SHA512_CTX v17;
  unsigned __int8 md[64];
  uint64_t v19;

  v12 = result;
  v19 = *MEMORY[0x1E0C80C00];
  memset(&v17, 0, sizeof(v17));
  if (a7)
  {
    CC_SHA512_Init(&v17);
    CC_SHA512_Update(&v17, a3, a4);
    CC_SHA512_Update(&v17, v12, a2);
    result = (const void *)CC_SHA512_Final(md, &v17);
    *a7 = *(_OWORD *)md;
  }
  if (a8)
  {
    CC_SHA512_Init(&v17);
    CC_SHA512_Update(&v17, a5, a6);
    CC_SHA512_Update(&v17, v12, a2);
    result = (const void *)CC_SHA512_Final(md, &v17);
    *a8 = *(_OWORD *)md;
  }
  for (i = 0; i != 64; ++i)
    md[i] = 0;
  return result;
}

void APSEncryptionUtilsDeriveAESKeySHA512ForScreen(const void *a1, CC_LONG a2, uint64_t a3, _OWORD *a4, _OWORD *a5)
{
  signed int v9;
  uint64_t v10;
  signed int v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;

  v9 = ASPrintF();
  v10 = v9;
  v11 = ASPrintF();
  v12 = v11;
  APSEncryptionUtilsDeriveAESKeySHA512(a1, a2, 0, v9, 0, v11, a4, a5);
  if (v9)
  {
    v13 = 0;
    do
    {
      *v13++ = 0;
      --v10;
    }
    while (v10);
  }
  if ((_DWORD)v12)
  {
    v14 = 0;
    do
    {
      *v14++ = 0;
      --v12;
    }
    while (v12);
  }
  free(0);
  free(0);
}

uint64_t APSThreadSafeDictionaryGetTypeID()
{
  if (gAPSThreadSafeDictionaryInitOnce != -1)
    dispatch_once_f(&gAPSThreadSafeDictionaryInitOnce, 0, (dispatch_function_t)_APSThreadSafeDictionaryGetTypeID);
  return gAPSThreadSafeDictionaryTypeID;
}

uint64_t _APSThreadSafeDictionaryGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSThreadSafeDictionaryTypeID = result;
  return result;
}

uint64_t _APSThreadSafeDictionaryFinalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 24) = 0;
  }
  return FigSimpleMutexDestroy();
}

uint64_t APSThreadSafeDictionaryCreate(CFTypeRef *a1)
{
  uint64_t Instance;
  _QWORD *v3;

  if (!a1)
    return 4294960591;
  if (gAPSThreadSafeDictionaryInitOnce != -1)
    dispatch_once_f(&gAPSThreadSafeDictionaryInitOnce, 0, (dispatch_function_t)_APSThreadSafeDictionaryGetTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294960568;
  v3 = (_QWORD *)Instance;
  *(_QWORD *)(Instance + 16) = 0;
  *(_QWORD *)(Instance + 24) = 0;
  *(_QWORD *)(Instance + 16) = FigSimpleMutexCreate();
  v3[3] = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *a1 = CFRetain(v3);
  CFRelease(v3);
  return 0;
}

uint64_t APSThreadSafeDictionaryCopyValueIfPresent(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  uint64_t v6;

  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), a2, a3))
  {
    if (*a3)
      CFRetain(*a3);
    v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
  return v6;
}

void *APSThreadSafeDictionaryCopyValue(uint64_t a1, const void *a2)
{
  void *value;

  value = 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), a2, (const void **)&value))
  {
    if (value)
      CFRetain(value);
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
  return value;
}

uint64_t APSThreadSafeDictionaryGetInt32IfPresent(uint64_t a1)
{
  uint64_t Int32IfPresent;

  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
  return Int32IfPresent;
}

uint64_t APSThreadSafeDictionaryGetInt64IfPresent(uint64_t a1)
{
  uint64_t Int64IfPresent;

  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  Int64IfPresent = FigCFDictionaryGetInt64IfPresent();
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
  return Int64IfPresent;
}

uint64_t APSThreadSafeDictionaryGetInt64(uint64_t a1)
{
  uint64_t Int64;

  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  Int64 = CFDictionaryGetInt64();
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
  return Int64;
}

uint64_t APSThreadSafeDictionarySetValue(uint64_t a1)
{
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  FigCFDictionarySetValue();
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
}

uint64_t APSThreadSafeDictionarySetInt64(uint64_t a1)
{
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  FigCFDictionarySetInt64();
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
}

uint64_t APSThreadSafeDictionarySetInt32(uint64_t a1)
{
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  FigCFDictionarySetInt32();
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
}

uint64_t APSThreadSafeDictionaryCopyMutableDictionary(uint64_t a1)
{
  uint64_t MutableCopy;

  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  MutableCopy = FigCFDictionaryCreateMutableCopy();
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
  return MutableCopy;
}

uint64_t APSThreadSafeDictionaryRemoveValue(uint64_t a1, const void *a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), a2);
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
}

uint64_t APSXPCServerStart(const void *a1, const __CFDictionary *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  dispatch_queue_t v6;
  const void *Value;
  NSObject *v8;
  _xpc_connection_s *mach_service;
  uint64_t v10;
  _QWORD handler[5];
  char *name;
  char *v14;

  if (a1)
  {
    v3 = apsxpc_serverLookup(a1);
    pthread_mutex_lock((pthread_mutex_t *)v3[3]);
    if (!v3[6])
    {
      v3[6] = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
      v3[7] = FigSimpleMutexCreate();
    }
    if (v3[4])
    {
      pthread_mutex_unlock((pthread_mutex_t *)v3[3]);
      return 0;
    }
    else
    {
      v14 = 0;
      name = 0;
      ASPrintF();
      v5 = CFStringCopyUTF8CString();
      v4 = v5;
      if ((_DWORD)v5)
      {
        APSLogErrorAt(v5);
      }
      else
      {
        v6 = dispatch_queue_create(v14, 0);
        v3[4] = v6;
        if (a2)
        {
          Value = CFDictionaryGetValue(a2, CFSTR("EntitlementName"));
          if (Value)
            Value = CFRetain(Value);
          v3[2] = Value;
          v8 = v3[4];
        }
        else
        {
          v8 = v6;
        }
        mach_service = xpc_connection_create_mach_service(name, v8, 1uLL);
        v10 = MEMORY[0x1E0C809B0];
        v3[5] = mach_service;
        handler[0] = v10;
        handler[1] = 0x40000000;
        handler[2] = __apsxpc_serverEnsureStart_block_invoke;
        handler[3] = &__block_descriptor_tmp_14;
        handler[4] = v3;
        xpc_connection_set_event_handler(mach_service, handler);
        xpc_connection_resume((xpc_connection_t)v3[5]);
        if (gLogCategory_APSXPCService <= 50
          && (gLogCategory_APSXPCService != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
      free(v14);
      free(name);
      pthread_mutex_unlock((pthread_mutex_t *)v3[3]);
      if ((_DWORD)v4)
        APSLogErrorAt(v4);
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  return v4;
}

_QWORD *apsxpc_serverLookup(const void *a1)
{
  _QWORD *Value;

  if (apsxpc_getServerTable_once != -1)
    dispatch_once(&apsxpc_getServerTable_once, &__block_literal_global_1841);
  pthread_mutex_lock((pthread_mutex_t *)apsxpc_getServerTable_serverTable_1);
  Value = CFDictionaryGetValue((CFDictionaryRef)apsxpc_getServerTable_serverTable_0, a1);
  if (!Value)
  {
    Value = malloc_type_calloc(1uLL, 0x60uLL, 0x1070040C487B433uLL);
    *Value = CFRetain(a1);
    Value[1] = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("APSXPCServerDisconnected-%@"), a1);
    Value[3] = FigSimpleMutexCreate();
    CFDictionaryAddValue((CFMutableDictionaryRef)apsxpc_getServerTable_serverTable_0, a1, Value);
  }
  pthread_mutex_unlock((pthread_mutex_t *)apsxpc_getServerTable_serverTable_1);
  return Value;
}

void __apsxpc_serverEnsureStart_block_invoke(uint64_t a1, _xpc_connection_s *a2)
{
  uint64_t v4;
  uint64_t v5;
  pid_t pid;
  uint64_t v7;
  char has_entitlement;
  NSObject *v9;
  _QWORD handler[5];
  char *label;
  _BYTE buffer[3];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[29];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = MEMORY[0x1CAA43374](a2);
  if (v4 == MEMORY[0x1E0C812E0])
  {
    v5 = *(_QWORD *)(a1 + 32);
    memset(v19, 0, sizeof(v19));
    v18 = 0u;
    v17 = 0u;
    v16 = 0u;
    v15 = 0u;
    v14 = 0u;
    v13 = 0u;
    memset(buffer, 63, sizeof(buffer));
    pid = xpc_connection_get_pid(a2);
    proc_name(pid, buffer, 0x80u);
    if (gLogCategory_APSXPCService <= 50
      && (gLogCategory_APSXPCService != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    label = 0;
    if (*(_QWORD *)(v5 + 16))
    {
      v7 = CFStringCopyUTF8CString();
      if ((_DWORD)v7)
      {
        APSLogErrorAt(v7);
        free(label);
      }
      else
      {
        has_entitlement = xpc_connection_has_entitlement();
        free(label);
        if ((has_entitlement & 1) != 0)
          goto LABEL_18;
      }
      if (gLogCategory_APSXPCService > 90
        || gLogCategory_APSXPCService == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_43;
      }
      goto LABEL_41;
    }
LABEL_18:
    if (!*(_QWORD *)(v5 + 72))
    {
      label = 0;
      if (gLogCategory_APSXPCService <= 50
        && (gLogCategory_APSXPCService != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_QWORD *)(v5 + 72) = xpc_retain(a2);
      *(_DWORD *)(v5 + 88) = pid;
      *(_QWORD *)(v5 + 64) = strdup(buffer);
      ASPrintF();
      v9 = dispatch_queue_create(label, 0);
      *(_QWORD *)(v5 + 80) = v9;
      xpc_connection_set_target_queue(a2, v9);
      free(label);
      handler[0] = MEMORY[0x1E0C809B0];
      handler[1] = 0x40000000;
      handler[2] = __apsxpc_serverHandleNewClientConnection_block_invoke;
      handler[3] = &__block_descriptor_tmp_19;
      handler[4] = v5;
      xpc_connection_set_event_handler(a2, handler);
      xpc_connection_resume(a2);
      return;
    }
    if (gLogCategory_APSXPCService > 90 || gLogCategory_APSXPCService == -1 && !_LogCategory_Initialize())
    {
LABEL_43:
      xpc_connection_cancel(a2);
      return;
    }
LABEL_41:
    LogPrintF();
    goto LABEL_43;
  }
  if (v4 != MEMORY[0x1E0C81310])
    return;
  if (a2 == (_xpc_connection_s *)MEMORY[0x1E0C81260])
  {
    if (gLogCategory_APSXPCService <= 90
      && (gLogCategory_APSXPCService != -1 || _LogCategory_Initialize()))
    {
      goto LABEL_27;
    }
  }
  else if (a2 == (_xpc_connection_s *)MEMORY[0x1E0C81258])
  {
    if (gLogCategory_APSXPCService <= 90
      && (gLogCategory_APSXPCService != -1 || _LogCategory_Initialize()))
    {
      goto LABEL_27;
    }
  }
  else if (gLogCategory_APSXPCService <= 90
         && (gLogCategory_APSXPCService != -1 || _LogCategory_Initialize()))
  {
LABEL_27:
    LogPrintF();
  }
}

void __apsxpc_serverHandleNewClientConnection_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v4;
  _QWORD *v5;
  const char *string;
  xpc_object_t reply;
  _xpc_connection_s *remote_connection;
  uint64_t v9;
  NSObject *v10;
  int v11;
  CFTypeRef v12;
  CFTypeRef cf;
  void *key[6];

  v4 = MEMORY[0x1CAA43374](a2);
  if (v4 == MEMORY[0x1E0C812F8])
  {
    reply = xpc_dictionary_create_reply(a2);
    remote_connection = xpc_dictionary_get_remote_connection(a2);
    cf = 0;
    key[0] = 0;
    v12 = 0;
    v9 = FigXPCMessageCopyCFString();
    if ((_DWORD)v9)
    {
      v11 = v9;
    }
    else
    {
      v11 = -6705;
      v9 = 4294960591;
    }
    APSLogErrorAt(v9);
    if (key[0])
      CFRelease(key[0]);
    if (cf)
      CFRelease(cf);
    if (v12)
      CFRelease(v12);
    xpc_dictionary_set_int64(reply, "OutError", v11);
    xpc_connection_send_message(remote_connection, reply);
    xpc_release(reply);
  }
  else if (v4 == MEMORY[0x1E0C81310])
  {
    v5 = *(_QWORD **)(a1 + 32);
    string = xpc_dictionary_get_string(a2, (const char *)*MEMORY[0x1E0C81270]);
    if (a2 == (void *)MEMORY[0x1E0C81260])
    {
      v10 = v5[4];
      key[0] = (void *)MEMORY[0x1E0C809B0];
      key[1] = (void *)0x40000000;
      key[2] = __apsxpc_serverHandleClientConnectionError_block_invoke;
      key[3] = &__block_descriptor_tmp_29;
      key[4] = v5;
      key[5] = (void *)string;
      dispatch_sync(v10, key);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
    else if (gLogCategory_APSXPCService <= 90
           && (gLogCategory_APSXPCService != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
}

void __apsxpc_serverHandleClientConnectionError_block_invoke(uint64_t a1)
{
  uint64_t v2;
  _xpc_connection_s *v3;
  void *v4;
  NSObject *v5;

  if (gLogCategory_APSXPCService <= 90 && (gLogCategory_APSXPCService != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v2 + 88)
    && gLogCategory_APSXPCService <= 50
    && (gLogCategory_APSXPCService != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v3 = *(_xpc_connection_s **)(v2 + 72);
  if (v3)
  {
    xpc_connection_cancel(v3);
    v4 = *(void **)(v2 + 72);
    if (v4)
    {
      *(_QWORD *)(v2 + 72) = 0;
      xpc_release(v4);
    }
  }
  v5 = *(NSObject **)(v2 + 80);
  if (v5)
  {
    dispatch_release(v5);
    *(_QWORD *)(v2 + 80) = 0;
  }
  free(*(void **)(v2 + 64));
  *(_QWORD *)(v2 + 64) = 0;
  *(_DWORD *)(v2 + 88) = 0;
}

uint64_t __apsxpc_getServerTable_block_invoke()
{
  uint64_t result;

  apsxpc_getServerTable_serverTable_0 = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
  result = FigSimpleMutexCreate();
  apsxpc_getServerTable_serverTable_1 = result;
  return result;
}

uint64_t APSXPCServerAddCommandHandler(const void *a1, const void *a2, const void *a3)
{
  _QWORD *v5;
  const void *Value;
  uint64_t v7;

  if (!a1 || !a2 || !a3)
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  v5 = apsxpc_serverLookup(a1);
  pthread_mutex_lock((pthread_mutex_t *)v5[3]);
  if (!v5[6])
  {
    v5[6] = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
    v5[7] = FigSimpleMutexCreate();
  }
  pthread_mutex_unlock((pthread_mutex_t *)v5[3]);
  pthread_mutex_lock((pthread_mutex_t *)v5[7]);
  Value = CFDictionaryGetValue((CFDictionaryRef)v5[6], a2);
  if (Value)
  {
    pthread_mutex_unlock((pthread_mutex_t *)v5[7]);
    if (Value != a3)
    {
      v7 = 4294960577;
      APSLogErrorAt(4294960577);
      return v7;
    }
  }
  else
  {
    CFDictionaryAddValue((CFMutableDictionaryRef)v5[6], a2, a3);
    pthread_mutex_unlock((pthread_mutex_t *)v5[7]);
  }
  if (Value != a3
    && gLogCategory_APSXPCService <= 50
    && (gLogCategory_APSXPCService != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return 0;
}

uint64_t APSXPCServerPostEvent(const void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  NSObject *v6;
  xpc_object_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD block[6];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  v15 = 0;
  if (!a1 || !a2)
  {
    APSLogErrorAt(0);
    v9 = 4294960591;
    goto LABEL_13;
  }
  v4 = apsxpc_serverLookup(a1);
  pthread_mutex_lock((pthread_mutex_t *)v4[3]);
  v5 = v4[4];
  pthread_mutex_unlock((pthread_mutex_t *)v4[3]);
  if (!v5)
  {
    v9 = 4294960551;
    APSLogErrorAt(4294960551);
    goto LABEL_13;
  }
  v6 = v4[4];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __APSXPCServerPostEvent_block_invoke;
  block[3] = &unk_1E828ACF8;
  block[4] = &v12;
  block[5] = v4;
  dispatch_sync(v6, block);
  if (!v13[3])
  {
    v9 = 0;
    goto LABEL_13;
  }
  v7 = xpc_dictionary_create(0, 0, 0);
  v8 = FigXPCMessageSetCFString();
  if ((_DWORD)v8)
  {
    v9 = v8;
LABEL_19:
    APSLogErrorAt(v8);
    goto LABEL_13;
  }
  if (a3)
  {
    v8 = FigXPCMessageSetCFDictionary();
    if ((_DWORD)v8)
    {
      v9 = v8;
      goto LABEL_19;
    }
  }
  xpc_connection_send_message((xpc_connection_t)v13[3], v7);
  if (gLogCategory_APSXPCService <= 50 && (gLogCategory_APSXPCService != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v9 = 0;
LABEL_13:
  FigXPCRelease();
  FigXPCRelease();
  _Block_object_dispose(&v12, 8);
  return v9;
}

uint64_t APSXPCServerGetDisconnectNotificationName(const void *a1)
{
  if (a1)
    return apsxpc_serverLookup(a1)[1];
  APSLogErrorAt(0);
  return 0;
}

uint64_t APSXPCClientSendCommandCreatingReply(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  NSObject *v8;
  uint64_t v9;
  _QWORD block[9];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  v15 = 0;
  if (a1 && a2)
  {
    v7 = apsxpc_clientLookup(a1);
    if (gLogCategory_APSXPCService <= 50
      && (gLogCategory_APSXPCService != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v8 = v7[2];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __APSXPCClientSendCommandCreatingReply_block_invoke;
    block[3] = &unk_1E828AD20;
    block[4] = &v12;
    block[5] = v7;
    block[6] = a2;
    block[7] = a3;
    block[8] = a4;
    dispatch_sync(v8, block);
    v9 = *((unsigned int *)v13 + 6);
  }
  else
  {
    APSLogErrorAt(0);
    v9 = 4294960591;
    *((_DWORD *)v13 + 6) = -6705;
  }
  _Block_object_dispose(&v12, 8);
  return v9;
}

_QWORD *apsxpc_clientLookup(const void *a1)
{
  _QWORD *Value;
  const __CFAllocator *v3;

  if (apsxpc_getClientTable_once != -1)
    dispatch_once(&apsxpc_getClientTable_once, &__block_literal_global_38_1859);
  pthread_mutex_lock((pthread_mutex_t *)apsxpc_getClientTable_clientTable_1);
  Value = CFDictionaryGetValue((CFDictionaryRef)apsxpc_getClientTable_clientTable_0, a1);
  if (!Value)
  {
    Value = malloc_type_calloc(1uLL, 0x40uLL, 0x6004065B7E030uLL);
    *Value = CFRetain(a1);
    v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Value[1] = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("APSXPCClientDisconnected-%@"), a1);
    ASPrintF();
    Value[2] = dispatch_queue_create(0, 0);
    ASPrintF();
    Value[3] = dispatch_queue_create(0, 0);
    ASPrintF();
    Value[7] = dispatch_queue_create(0, 0);
    Value[5] = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], 0);
    Value[6] = FigSimpleMutexCreate();
    CFDictionaryAddValue((CFMutableDictionaryRef)apsxpc_getClientTable_clientTable_0, a1, Value);
  }
  pthread_mutex_unlock((pthread_mutex_t *)apsxpc_getClientTable_clientTable_1);
  return Value;
}

void __apsxpc_clientEnsureConnection_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = MEMORY[0x1CAA43374](a2);
  if (v3 == MEMORY[0x1E0C81310])
  {
    xpc_dictionary_get_string(a2, (const char *)*MEMORY[0x1E0C81270]);
    if (gLogCategory_APSXPCService <= 90
      && (gLogCategory_APSXPCService != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  else if (v3 == MEMORY[0x1E0C812F8])
  {
    v4 = FigXPCMessageCopyCFString();
    if (!(_DWORD)v4)
      v4 = 0;
    APSLogErrorAt(v4);
  }
}

void __apsxpc_clientHandleMessageFromServer_block_invoke(uint64_t a1)
{
  const void *v2;
  const void *v3;

  if (gLogCategory_APSXPCService <= 50 && (gLogCategory_APSXPCService != -1 || _LogCategory_Initialize()))
    LogPrintF();
  (*(void (**)(_QWORD, _QWORD))(a1 + 48))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56));
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 56);
  if (v3)
    CFRelease(v3);
}

uint64_t __apsxpc_getClientTable_block_invoke()
{
  uint64_t result;

  apsxpc_getClientTable_clientTable_0 = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
  result = FigSimpleMutexCreate();
  apsxpc_getClientTable_clientTable_1 = result;
  return result;
}

uint64_t APSXPCClientAddEventHandler(const void *a1, const void *a2, const void *a3)
{
  _QWORD *v5;
  const void *Value;
  uint64_t v7;

  if (!a1 || !a2 || !a3)
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  v5 = apsxpc_clientLookup(a1);
  pthread_mutex_lock((pthread_mutex_t *)v5[6]);
  Value = CFDictionaryGetValue((CFDictionaryRef)v5[5], a2);
  if (Value)
  {
    pthread_mutex_unlock((pthread_mutex_t *)v5[6]);
    if (Value != a3)
    {
      v7 = 4294960577;
      APSLogErrorAt(4294960577);
      return v7;
    }
  }
  else
  {
    CFDictionaryAddValue((CFMutableDictionaryRef)v5[5], a2, a3);
    pthread_mutex_unlock((pthread_mutex_t *)v5[6]);
  }
  if (Value != a3
    && gLogCategory_APSXPCService <= 50
    && (gLogCategory_APSXPCService != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return 0;
}

uint64_t APSXPCClientGetDisconnectNotificationName(const void *a1)
{
  if (a1)
    return apsxpc_clientLookup(a1)[1];
  APSLogErrorAt(0);
  return 0;
}

uint64_t APSRTPJitterBufferSimCreate(uint64_t a1, __int128 *a2, uint64_t a3, int a4, char a5, const void *a6, _DWORD *a7)
{
  uint64_t Instance;
  uint64_t v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  dispatch_queue_t v20;
  unsigned int v21;
  size_t v22;
  void *v23;
  const __CFAllocator *v24;
  uint64_t v25;
  const __CFAllocator *v26;
  dispatch_semaphore_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v37;

  if (!a2 || !a3 || *(_DWORD *)(a3 + 8) != 1819304813 || !a4)
  {
    APSLogErrorAt(0);
    v14 = 0;
    LODWORD(v35) = -6705;
    goto LABEL_43;
  }
  if (APSRTPJitterBufferSimGetTypeID_once != -1)
    dispatch_once(&APSRTPJitterBufferSimGetTypeID_once, &__block_literal_global_1870);
  Instance = _CFRuntimeCreateInstance();
  v14 = Instance;
  if (!Instance)
    goto LABEL_47;
  *(_OWORD *)(Instance + 16) = 0u;
  *(_QWORD *)(Instance + 272) = 0;
  *(_OWORD *)(Instance + 240) = 0u;
  *(_OWORD *)(Instance + 256) = 0u;
  *(_OWORD *)(Instance + 208) = 0u;
  *(_OWORD *)(Instance + 224) = 0u;
  *(_OWORD *)(Instance + 176) = 0u;
  *(_OWORD *)(Instance + 192) = 0u;
  *(_OWORD *)(Instance + 144) = 0u;
  *(_OWORD *)(Instance + 160) = 0u;
  *(_OWORD *)(Instance + 128) = 0u;
  *(_OWORD *)(Instance + 80) = 0u;
  *(_OWORD *)(Instance + 96) = 0u;
  *(_OWORD *)(Instance + 48) = 0u;
  *(_OWORD *)(Instance + 64) = 0u;
  *(_OWORD *)(Instance + 112) = 0u;
  v15 = (double *)(Instance + 112);
  *(_OWORD *)(Instance + 32) = 0u;
  v16 = *a2;
  v17 = a2[1];
  *(_QWORD *)(Instance + 104) = *((_QWORD *)a2 + 4);
  *(_OWORD *)(Instance + 88) = v17;
  *(_OWORD *)(Instance + 72) = v16;
  v18 = *(_QWORD *)(a3 + 32);
  v19 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(Instance + 112) = *(_OWORD *)a3;
  *(_QWORD *)(Instance + 144) = v18;
  *(_OWORD *)(Instance + 128) = v19;
  *(_DWORD *)(Instance + 156) = *(double *)(Instance + 112) * a4 / 0x3E8;
  *(_DWORD *)(Instance + 160) = a4;
  *(_BYTE *)(Instance + 266) = 0;
  *(_DWORD *)(Instance + 236) = 0;
  if ((a5 & 1) != 0)
    *(_WORD *)(Instance + 164) = 257;
  *(_QWORD *)(Instance + 16) = CFRetain(a6);
  v20 = dispatch_queue_create("com.apple.APSRTPJitterBufferSim.log", 0);
  *(_QWORD *)(v14 + 24) = v20;
  if (!v20)
  {
LABEL_47:
    APSLogErrorAt(0);
    LODWORD(v35) = -6728;
    goto LABEL_43;
  }
  if (gLogCategory_APSRTPJitterBufferSim <= 50
    && (gLogCategory_APSRTPJitterBufferSim != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_DWORD *)(v14 + 80) == 1819304813)
    v21 = 0x5A0u / *(_DWORD *)(v14 + 88);
  else
    v21 = *(_DWORD *)(v14 + 92);
  *(_DWORD *)(v14 + 152) = v21;
  if (!v21)
  {
    APSLogErrorAt(0);
    v35 = 4294960591;
LABEL_54:
    v37 = v35;
LABEL_58:
    APSLogErrorAt(v37);
    goto LABEL_43;
  }
  v22 = 4 * *(_DWORD *)(v14 + 156) / v21 + 1;
  *(_DWORD *)(v14 + 40) = v22;
  v23 = malloc_type_calloc(v22, 0x18uLL, 0x1000040FC63CA6CuLL);
  *(_QWORD *)(v14 + 32) = v23;
  if (!v23)
    goto LABEL_53;
  if (gLogCategory_APSRTPJitterBufferSim <= 30
    && (gLogCategory_APSRTPJitterBufferSim != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v24 = CFGetAllocator((CFTypeRef)v14);
  v25 = CMSimpleQueueCreate(v24, *(_DWORD *)(v14 + 40), (CMSimpleQueueRef *)(v14 + 56));
  if ((_DWORD)v25)
  {
    v35 = v25;
LABEL_52:
    APSLogErrorAt(v25);
    goto LABEL_54;
  }
  v26 = CFGetAllocator((CFTypeRef)v14);
  v25 = CMSimpleQueueCreate(v26, *(_DWORD *)(v14 + 40), (CMSimpleQueueRef *)(v14 + 48));
  if ((_DWORD)v25)
  {
    v35 = v25;
    goto LABEL_52;
  }
  v27 = dispatch_semaphore_create(0);
  *(_QWORD *)(v14 + 64) = v27;
  if (!v27)
  {
LABEL_53:
    APSLogErrorAt(0);
    v35 = 4294960568;
    goto LABEL_54;
  }
  if (*(_DWORD *)(v14 + 40))
  {
    v28 = 0;
    v29 = 0;
    do
    {
      CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(v14 + 48), (const void *)(*(_QWORD *)(v14 + 32) + v28));
      ++v29;
      v28 += 24;
    }
    while (v29 < *(unsigned int *)(v14 + 40));
  }
  if (*(double *)(v14 + 72) != *v15 || *(_DWORD *)(v14 + 100) != *(_DWORD *)(v14 + 140))
  {
    APSLogErrorAt(0);
    v35 = 4294960591;
LABEL_57:
    v37 = v35;
    goto LABEL_58;
  }
  *(_DWORD *)(v14 + 224) = 20 * *(_DWORD *)(v14 + 156) * *(_DWORD *)(v14 + 136);
  v30 = iceil2();
  *(_QWORD *)(v14 + 192) = 0;
  *(_QWORD *)(v14 + 200) = v30;
  *(_DWORD *)(v14 + 208) = v30;
  *(_DWORD *)(v14 + 212) = v30 - 1;
  *(_QWORD *)(v14 + 216) = 0;
  if (gLogCategory_APSRTPJitterBufferSim <= 30
    && (gLogCategory_APSRTPJitterBufferSim != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v31 = pthread_create((pthread_t *)(v14 + 248), 0, (void *(__cdecl *)(void *))_APSRTPJitterBufferSimDecodeThreadEntry, (void *)v14);
  if ((_DWORD)v31)
  {
    v35 = v31;
    APSLogErrorAt(v31);
    goto LABEL_57;
  }
  *(_QWORD *)(v14 + 256) = v14 + 248;
  if (*(_BYTE *)(v14 + 164))
  {
    LODWORD(v32) = *(_DWORD *)(v14 + 224);
    HIDWORD(v33) = 1072483532;
    LODWORD(v33) = *(_DWORD *)(v14 + 136);
    v34 = 4 * a4 * *(double *)(v14 + 112) / 0x3E8;
    *(_DWORD *)(v14 + 180) = ((double)v32 * 0.9 / (double)v33);
    *(_DWORD *)(v14 + 184) = v34;
    if (gLogCategory_APSRTPJitterBufferSim <= 40
      && (gLogCategory_APSRTPJitterBufferSim != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  LODWORD(v35) = 0;
LABEL_43:
  if (a7)
    *a7 = v35;
  return v14;
}

uint64_t _APSRTPJitterBufferSimDecodeThreadEntry(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  size_t v15;
  NSObject *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  NSObject *v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  NSObject *v29;
  int v30;
  int v31;
  NSObject *v32;
  uint64_t v33;
  NSObject *v34;
  _QWORD v36[5];
  _QWORD block[5];
  _QWORD v38[5];
  int v39;
  _QWORD v40[5];
  int v41;
  unsigned int v42;
  unsigned int v43;
  _QWORD v44[6];
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)();
  void *v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;

  SetCurrentThreadPriority();
  if (gLogCategory_APSRTPJitterBufferSim <= 30
    && (gLogCategory_APSRTPJitterBufferSim != -1 || _LogCategory_Initialize()))
  {
    v2 = *(NSObject **)(a1 + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___APSRTPJitterBufferSimDecodeThreadEntry_block_invoke;
    block[3] = &__block_descriptor_tmp_23;
    block[4] = a1;
    dispatch_async(v2, block);
  }
  if (!*(_BYTE *)(a1 + 265))
  {
    v4 = MEMORY[0x1E0C809B0];
    do
    {
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 64), 0xFFFFFFFFFFFFFFFFLL);
      if (*(_BYTE *)(a1 + 265))
        break;
      v5 = CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 56));
      if (*(_BYTE *)(a1 + 265))
        break;
      v6 = v5;
      if (v5)
      {
        if (*((_QWORD *)v5 + 2))
        {
          if (!*(_BYTE *)(a1 + 264))
          {
            v7 = *(_DWORD *)(a1 + 228);
            if (*(_BYTE *)(a1 + 164))
            {
              *(_DWORD *)(a1 + 232) = v7;
              *(_DWORD *)(a1 + 236) = v7 - v5[1];
              *(_DWORD *)(a1 + 240) = v7;
            }
            else
            {
              *(_DWORD *)(a1 + 232) = v5[1];
              v8 = v5[1];
              v9 = v8 - v7;
              v10 = *(_DWORD *)(a1 + 156);
              v11 = v7 - v8 + v10;
              if (v9 >= v10)
                v11 = 0;
              *(_DWORD *)(a1 + 236) = v11;
              v12 = v11 + v5[1];
              *(_DWORD *)(a1 + 232) = v12;
              *(_DWORD *)(a1 + 240) = v12;
              v13 = *(_DWORD *)(a1 + 136) * (v12 - v7);
              if (v13)
              {
                v14 = *(_DWORD *)(a1 + 224);
                if (v13 >= v14)
                  v15 = v14;
                else
                  v15 = v13;
                bzero((void *)(*(_QWORD *)(a1 + 192) + (*(_DWORD *)(a1 + 212) & *(_DWORD *)(a1 + 220))), v15);
                *(_DWORD *)(a1 + 220) += v13;
              }
            }
            if (gLogCategory_APSRTPJitterBufferSim <= 30
              && (gLogCategory_APSRTPJitterBufferSim != -1 || _LogCategory_Initialize()))
            {
              v16 = *(NSObject **)(a1 + 24);
              v45 = v4;
              v46 = 0x40000000;
              v47 = ___APSRTPJitterBufferSimInitializeWritePointers_block_invoke;
              v48 = &__block_descriptor_tmp_33;
              v49 = a1;
              v50 = (unint64_t)v6;
              dispatch_async(v16, &v45);
            }
          }
          v17 = v6[1] + *(_DWORD *)(a1 + 236);
          v6[1] = v17;
          v18 = *(_DWORD *)(a1 + 240);
          v19 = v17 - v18;
          if (v17 < v18)
          {
            if (gLogCategory_APSRTPJitterBufferSim <= 30
              && (gLogCategory_APSRTPJitterBufferSim != -1 || _LogCategory_Initialize()))
            {
              v34 = *(NSObject **)(a1 + 24);
              v44[0] = v4;
              v44[1] = 0x40000000;
              v44[2] = ___APSRTPJitterBufferSimWritePacket_block_invoke;
              v44[3] = &__block_descriptor_tmp_27;
              v44[4] = a1;
              v44[5] = v6;
              dispatch_async(v34, v44);
            }
          }
          else
          {
            if (v17 == v18)
            {
              v19 = 0;
            }
            else
            {
              if (gLogCategory_APSRTPJitterBufferSim <= 30
                && (gLogCategory_APSRTPJitterBufferSim != -1 || _LogCategory_Initialize()))
              {
                v20 = *(NSObject **)(a1 + 24);
                v40[0] = v4;
                v40[1] = 0x40000000;
                v40[2] = ___APSRTPJitterBufferSimWritePacket_block_invoke_2;
                v40[3] = &__block_descriptor_tmp_29_1878;
                v40[4] = a1;
                v41 = v17 - v18;
                v42 = v18;
                v43 = v17;
                dispatch_async(v20, v40);
              }
              ++*(_DWORD *)(a1 + 276);
            }
            v21 = *(_DWORD *)(a1 + 88);
            if (v21)
              v22 = v6[4] / v21;
            else
              v22 = *(_DWORD *)(a1 + 92);
            v23 = v22 + v19;
            v24 = *(_DWORD *)(a1 + 220);
            v25 = *(_DWORD *)(a1 + 136);
            v26 = (*(_DWORD *)(a1 + 208) - v24 + *(_DWORD *)(a1 + 216)) / v25;
            v27 = *(_DWORD *)(a1 + 232);
            if (v26 < v23)
            {
              if (gLogCategory_APSRTPJitterBufferSim <= 50)
              {
                v28 = *(_DWORD *)(a1 + 228);
                if (gLogCategory_APSRTPJitterBufferSim != -1 || _LogCategory_Initialize())
                {
                  v29 = *(NSObject **)(a1 + 24);
                  v45 = v4;
                  v46 = 0x40000000;
                  v47 = ___APSRTPJitterBufferSimCheckOverrun_block_invoke;
                  v48 = &__block_descriptor_tmp_35;
                  v49 = a1;
                  v50 = __PAIR64__(v27, v28);
                  v51 = v26;
                  dispatch_async(v29, &v45);
                }
              }
              ++*(_DWORD *)(a1 + 272);
              v25 = *(_DWORD *)(a1 + 136);
              v24 = *(_DWORD *)(a1 + 220);
              v21 = *(_DWORD *)(a1 + 88);
              v27 = *(_DWORD *)(a1 + 232);
            }
            if (v21)
              v30 = v6[4] / v21;
            else
              v30 = *(_DWORD *)(a1 + 92);
            *(_DWORD *)(a1 + 232) = v27 + v19 + v30;
            *(_DWORD *)(a1 + 220) = v24 + (v30 + v19) * v25;
            *(_DWORD *)(a1 + 240) += v30;
            if (*(_BYTE *)(a1 + 164))
            {
              if (!*(_BYTE *)(a1 + 176))
              {
                v31 = *(_DWORD *)(a1 + 244) - *(_DWORD *)(a1 + 228);
                if (v31 >= *(_DWORD *)(a1 + 180))
                {
                  if (gLogCategory_APSRTPJitterBufferSim <= 30
                    && (gLogCategory_APSRTPJitterBufferSim != -1 || _LogCategory_Initialize()))
                  {
                    v32 = *(NSObject **)(a1 + 24);
                    v38[0] = v4;
                    v38[1] = 0x40000000;
                    v38[2] = ___APSRTPJitterBufferSimWritePacket_block_invoke_3;
                    v38[3] = &__block_descriptor_tmp_31;
                    v38[4] = a1;
                    v39 = v31;
                    dispatch_async(v32, v38);
                  }
                  ++*(_DWORD *)(a1 + 272);
                  *(_BYTE *)(a1 + 176) = 1;
                }
              }
            }
            if (!*(_BYTE *)(a1 + 264))
            {
              if (*(_BYTE *)(a1 + 165))
              {
                v33 = mach_absolute_time();
                *(_QWORD *)(a1 + 168) = v33 - MillisecondsToUpTicks();
              }
              *(_BYTE *)(a1 + 264) = 1;
            }
          }
        }
        CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(a1 + 48), v6);
      }
      else
      {
        APSLogErrorAt(0);
      }
    }
    while (!*(_BYTE *)(a1 + 265));
  }
  if (gLogCategory_APSRTPJitterBufferSim <= 30
    && (gLogCategory_APSRTPJitterBufferSim != -1 || _LogCategory_Initialize()))
  {
    v3 = *(NSObject **)(a1 + 24);
    v36[0] = MEMORY[0x1E0C809B0];
    v36[1] = 0x40000000;
    v36[2] = ___APSRTPJitterBufferSimDecodeThreadEntry_block_invoke_2;
    v36[3] = &__block_descriptor_tmp_25;
    v36[4] = a1;
    dispatch_async(v3, v36);
  }
  return 0;
}

void _APSRTPJitterBufferSimFinalize(uint64_t a1)
{
  mach_vm_address_t v2;
  void *v3;
  const void *v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;
  const void *v8;

  if (*(_QWORD *)(a1 + 256))
  {
    *(_BYTE *)(a1 + 265) = 1;
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 64));
    pthread_join(*(pthread_t *)(a1 + 248), 0);
    *(_QWORD *)(a1 + 256) = 0;
  }
  dispatch_sync(*(dispatch_queue_t *)(a1 + 24), &__block_literal_global_37);
  if (gLogCategory_APSRTPJitterBufferSim <= 50
    && (gLogCategory_APSRTPJitterBufferSim != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(_QWORD *)(a1 + 192);
  if (v2)
    mach_vm_deallocate(*MEMORY[0x1E0C83DA0], v2, (2 * *(_DWORD *)(a1 + 208)));
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    free(v3);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v4 = *(const void **)(a1 + 56);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 56) = 0;
  }
  v5 = *(const void **)(a1 + 48);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v6 = *(NSObject **)(a1 + 64);
  if (v6)
  {
    dispatch_release(v6);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v7 = *(NSObject **)(a1 + 24);
  if (v7)
  {
    dispatch_release(v7);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v8 = *(const void **)(a1 + 16);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

uint64_t APSRTPJitterBufferSimGetTypeID()
{
  if (APSRTPJitterBufferSimGetTypeID_once != -1)
    dispatch_once(&APSRTPJitterBufferSimGetTypeID_once, &__block_literal_global_1870);
  return APSRTPJitterBufferSimGetTypeID_typeID;
}

const void *APSRTPJitterBufferSimGetEmptyPacket(uint64_t a1, int *a2)
{
  opaqueCMSimpleQueue *v4;
  const void *result;
  int v6;

  if (!a1 || (v4 = *(opaqueCMSimpleQueue **)(a1 + 48)) == 0)
  {
    APSLogErrorAt(0);
    result = 0;
    v6 = -6718;
    if (!a2)
      return result;
    goto LABEL_11;
  }
  result = CMSimpleQueueDequeue(v4);
  if (result)
  {
    v6 = 0;
    if (!a2)
      return result;
    goto LABEL_11;
  }
  if (gLogCategory_APSRTPJitterBufferSim <= 30
    && (gLogCategory_APSRTPJitterBufferSim != -1 || _LogCategory_Initialize()))
  {
    CMSimpleQueueGetCount(*(CMSimpleQueueRef *)(a1 + 56));
    LogPrintF();
  }
  result = 0;
  v6 = -6728;
  if (a2)
LABEL_11:
    *a2 = v6;
  return result;
}

intptr_t APSRTPJitterBufferSimDiscardPacket(intptr_t result, _QWORD *a2)
{
  intptr_t v2;

  if (a2)
  {
    v2 = result;
    a2[2] = 0;
    CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(result + 56), a2);
    return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v2 + 64));
  }
  return result;
}

intptr_t APSRTPJitterBufferSimEnqueuePacket(intptr_t result, _DWORD *a2)
{
  intptr_t v2;
  int v3;

  if (a2)
  {
    v2 = result;
    if (*(_DWORD *)(result + 80) == 1819304813)
      v3 = a2[4] / *(_DWORD *)(result + 96);
    else
      v3 = *(_DWORD *)(result + 92);
    *(_DWORD *)(result + 244) = v3 + a2[1];
    CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(result + 56), a2);
    return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v2 + 64));
  }
  return result;
}

uint64_t APSRTPJitterBufferSimRead(uint64_t a1, unsigned int a2, unint64_t a3)
{
  unsigned int v5;
  int v6;
  unint64_t v7;
  NSObject *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  NSObject *v16;
  int v17;
  int v18;
  int v19;
  NSObject *v20;
  NSObject *v21;
  unsigned int v22;
  unsigned int v25;
  unsigned int v26;
  NSObject *v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int32_t Count;
  int32_t v33;
  NSObject *v34;
  _QWORD v36[5];
  int v37;
  unsigned int v38;
  int32_t v39;
  _QWORD v40[5];
  int v41;
  unsigned int v42;
  unsigned int v43;
  _QWORD v44[5];
  unsigned int v45;
  _QWORD block[6];
  int v47;
  _QWORD v48[5];
  int v49;
  _QWORD v50[5];
  int v51;

  v5 = *(_DWORD *)(a1 + 232);
  v6 = *(unsigned __int8 *)(a1 + 264);
  v7 = a3 / *(unsigned int *)(a1 + 136);
  if (gLogCategory_APSRTPJitterBufferSim <= 10
    && (gLogCategory_APSRTPJitterBufferSim != -1 || _LogCategory_Initialize()))
  {
    v9 = *(NSObject **)(a1 + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __APSRTPJitterBufferSimRead_block_invoke;
    block[3] = &__block_descriptor_tmp_12_1891;
    block[4] = a1;
    block[5] = a3;
    v47 = v7;
    dispatch_async(v9, block);
  }
  if (!*(_BYTE *)(a1 + 164))
  {
    if (v7 + a2 < *(_DWORD *)(a1 + 232) || *(_BYTE *)(a1 + 264) == 0)
    {
      if (*(_BYTE *)(a1 + 266))
      {
        if (gLogCategory_APSRTPJitterBufferSim <= 30
          && (gLogCategory_APSRTPJitterBufferSim != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        *(_BYTE *)(a1 + 266) = 0;
      }
    }
    else if (!*(_BYTE *)(a1 + 266))
    {
      if (gLogCategory_APSRTPJitterBufferSim <= 50
        && (gLogCategory_APSRTPJitterBufferSim != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_BYTE *)(a1 + 266) = 1;
      ++*(_DWORD *)(a1 + 268);
    }
  }
  if (!v6)
  {
    v13 = 0;
    goto LABEL_77;
  }
  if (!*(_BYTE *)(a1 + 164))
  {
    v14 = *(_DWORD *)(a1 + 228);
    if (v14 <= a2)
    {
      if (v14 >= a2)
      {
        v13 = 0;
      }
      else
      {
        v15 = a2 - v14;
        if (gLogCategory_APSRTPJitterBufferSim <= 30
          && (gLogCategory_APSRTPJitterBufferSim != -1 || _LogCategory_Initialize()))
        {
          v16 = *(NSObject **)(a1 + 24);
          v44[0] = MEMORY[0x1E0C809B0];
          v44[1] = 0x40000000;
          v44[2] = __APSRTPJitterBufferSimRead_block_invoke_2;
          v44[3] = &__block_descriptor_tmp_14_1896;
          v44[4] = a1;
          v45 = v15;
          dispatch_async(v16, v44);
        }
        v13 = 0;
        *(_DWORD *)(a1 + 216) += *(_DWORD *)(a1 + 136) * v15;
        v14 = *(_DWORD *)(a1 + 228) + v15;
        *(_DWORD *)(a1 + 228) = v14;
      }
    }
    else if (v14 - a2 >= v7)
    {
      v13 = v7;
    }
    else
    {
      v13 = v14 - a2;
    }
    goto LABEL_57;
  }
  mach_absolute_time();
  if (!*(_BYTE *)(a1 + 165))
    goto LABEL_39;
  v10 = UpTicksToMilliseconds();
  v11 = *(unsigned int *)(a1 + 160);
  if ((int)(1000
           * (*(_DWORD *)(a1 + 236) + *(_DWORD *)(a1 + 244) - *(_DWORD *)(a1 + 228))
           / *(double *)(a1 + 112)) >= (int)v11 + (int)v10
    || v10 >= v11)
  {
    *(_BYTE *)(a1 + 176) = 1;
    *(_BYTE *)(a1 + 165) = 0;
    *(_QWORD *)(a1 + 168) = 0;
    if (gLogCategory_APSRTPJitterBufferSim > 30)
      goto LABEL_39;
    if (gLogCategory_APSRTPJitterBufferSim != -1 || _LogCategory_Initialize())
      LogPrintF();
  }
  if (!*(_BYTE *)(a1 + 165))
  {
LABEL_39:
    if (*(_BYTE *)(a1 + 176))
    {
      v17 = *(_DWORD *)(a1 + 228);
      v18 = *(_DWORD *)(a1 + 236) + *(_DWORD *)(a1 + 244) - v17;
      if (v18 <= *(_DWORD *)(a1 + 184))
      {
        v19 = 0;
      }
      else
      {
        v19 = v5 - v17;
        if (gLogCategory_APSRTPJitterBufferSim <= 30
          && (gLogCategory_APSRTPJitterBufferSim != -1 || _LogCategory_Initialize()))
        {
          v20 = *(NSObject **)(a1 + 24);
          v50[0] = MEMORY[0x1E0C809B0];
          v50[1] = 0x40000000;
          v50[2] = ___APSRTPJitterBufferSimLegacyDiscardExcess_block_invoke;
          v50[3] = &__block_descriptor_tmp_43_1895;
          v50[4] = a1;
          v51 = v18;
          dispatch_async(v20, v50);
        }
        if (v18 - *(_DWORD *)(a1 + 184) < v19)
          v19 = v18 - *(_DWORD *)(a1 + 184);
        *(_DWORD *)(a1 + 216) += v19 * *(_DWORD *)(a1 + 136);
        *(_DWORD *)(a1 + 228) += v19;
        if (gLogCategory_APSRTPJitterBufferSim <= 50
          && (gLogCategory_APSRTPJitterBufferSim != -1 || _LogCategory_Initialize()))
        {
          v21 = *(NSObject **)(a1 + 24);
          v48[0] = MEMORY[0x1E0C809B0];
          v48[1] = 0x40000000;
          v48[2] = ___APSRTPJitterBufferSimLegacyDiscardExcess_block_invoke_2;
          v48[3] = &__block_descriptor_tmp_45;
          v48[4] = a1;
          v49 = v19;
          dispatch_async(v21, v48);
        }
      }
      if (v18 - v19 <= *(_DWORD *)(a1 + 184))
        *(_BYTE *)(a1 + 176) = 0;
    }
  }
  v13 = 0;
  v14 = *(_DWORD *)(a1 + 228);
LABEL_57:
  v22 = v7 - v13;
  if (v7 <= v13 || *(_BYTE *)(a1 + 165) != 0 || v5 < v14)
    goto LABEL_74;
  if (v5 - v14 < v22)
    v22 = v5 - v14;
  v25 = *(_DWORD *)(a1 + 136);
  v26 = v22 >= (*(_DWORD *)(a1 + 220) - *(_DWORD *)(a1 + 216)) / v25
      ? (*(_DWORD *)(a1 + 220) - *(_DWORD *)(a1 + 216)) / v25
      : v22;
  v13 += v26;
  if (!v26)
  {
LABEL_74:
    a2 = v14;
    goto LABEL_78;
  }
  if (gLogCategory_APSRTPJitterBufferSim <= 10
    && (gLogCategory_APSRTPJitterBufferSim != -1 || _LogCategory_Initialize()))
  {
    v27 = *(NSObject **)(a1 + 24);
    v40[0] = MEMORY[0x1E0C809B0];
    v40[1] = 0x40000000;
    v40[2] = __APSRTPJitterBufferSimRead_block_invoke_3;
    v40[3] = &__block_descriptor_tmp_16;
    v40[4] = a1;
    v41 = v25 * v26;
    v42 = v26;
    v43 = v5;
    dispatch_async(v27, v40);
  }
  *(_DWORD *)(a1 + 216) += *(_DWORD *)(a1 + 136) * v26;
  a2 = *(_DWORD *)(a1 + 228) + v26;
LABEL_77:
  *(_DWORD *)(a1 + 228) = a2;
LABEL_78:
  v28 = v7 - v13;
  if (v28)
  {
    if (*(_BYTE *)(a1 + 164))
    {
      if (!*(_BYTE *)(a1 + 165))
      {
        v30 = *(_DWORD *)(a1 + 216);
        v29 = *(_DWORD *)(a1 + 220);
        v31 = *(_DWORD *)(a1 + 136);
        Count = CMSimpleQueueGetCount(*(CMSimpleQueueRef *)(a1 + 56));
        if (gLogCategory_APSRTPJitterBufferSim <= 50)
        {
          v33 = Count;
          if (gLogCategory_APSRTPJitterBufferSim != -1 || _LogCategory_Initialize())
          {
            v36[0] = MEMORY[0x1E0C809B0];
            v36[2] = __APSRTPJitterBufferSimRead_block_invoke_4;
            v36[3] = &__block_descriptor_tmp_18;
            v34 = *(NSObject **)(a1 + 24);
            v36[1] = 0x40000000;
            v36[4] = a1;
            v37 = v28;
            v38 = (v29 - v30) / v31;
            v39 = v33;
            dispatch_async(v34, v36);
          }
        }
        *(_BYTE *)(a1 + 165) = 1;
        *(_QWORD *)(a1 + 168) = mach_absolute_time();
        ++*(_DWORD *)(a1 + 268);
      }
    }
    else
    {
      if (v6)
      {
        *(_DWORD *)(a1 + 216) += *(_DWORD *)(a1 + 136) * v28;
        if (!*(_BYTE *)(a1 + 266))
        {
          if (gLogCategory_APSRTPJitterBufferSim <= 50
            && (gLogCategory_APSRTPJitterBufferSim != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          ++*(_DWORD *)(a1 + 268);
          *(_BYTE *)(a1 + 266) = 1;
          a2 = *(_DWORD *)(a1 + 228);
        }
      }
      *(_DWORD *)(a1 + 228) = a2 + v28;
    }
  }
  return 0;
}

uint64_t APSSimulatedReceiverCreate(uint64_t a1, __int128 *a2, uint64_t a3, unsigned int a4)
{
  uint64_t Instance;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  __int128 v11;
  double v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  dispatch_time_t v16;
  const void *v17;
  int v19;
  unsigned int v20;

  v20 = 0;
  if (APSSimulatedReceiverGetTypeID_once != -1)
    dispatch_once(&APSSimulatedReceiverGetTypeID_once, &__block_literal_global_1906);
  Instance = _CFRuntimeCreateInstance();
  v8 = Instance;
  if (!Instance)
  {
    APSLogErrorAt(0);
    v9 = 0;
LABEL_18:
    v19 = -6728;
    goto LABEL_20;
  }
  *(_QWORD *)(Instance + 96) = 0;
  *(_OWORD *)(Instance + 64) = 0u;
  *(_OWORD *)(Instance + 80) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  *(_OWORD *)(Instance + 48) = 0u;
  *(_OWORD *)(Instance + 16) = 0u;
  v9 = (const void *)CFStringCreateF();
  v10 = *(_QWORD *)(a3 + 32);
  v11 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)a3;
  *(_OWORD *)(v8 + 40) = v11;
  *(_QWORD *)(v8 + 56) = v10;
  *(_QWORD *)(v8 + 88) = mach_absolute_time();
  *(_DWORD *)(v8 + 96) = 0;
  *(_BYTE *)(v8 + 100) = 1;
  v12 = *(double *)a3;
  *(_QWORD *)(v8 + 80) = *(_QWORD *)a3;
  *(_QWORD *)(v8 + 16) = APSRTPJitterBufferSimCreate(*MEMORY[0x1E0C9AE00], a2, a3, ((double)a4 * 1000.0 / v12), 1, v9, &v20);
  if (v20)
  {
    APSLogErrorAt(v20);
LABEL_8:
    if (!v20)
      goto LABEL_12;
    goto LABEL_9;
  }
  v13 = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(v8 + 72) = v13;
  if (!v13)
  {
    APSLogErrorAt(0);
    goto LABEL_18;
  }
  v14 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v13);
  *(_QWORD *)(v8 + 64) = v14;
  if (v14)
  {
    dispatch_set_context(v14, (void *)v8);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v8 + 64), (dispatch_function_t)simulatedReceiverReadDataBlock);
    v15 = *(NSObject **)(v8 + 64);
    v16 = dispatch_time(0, 10000000);
    dispatch_source_set_timer(v15, v16, 0x989680uLL, 0x1F4uLL);
    dispatch_resume(*(dispatch_object_t *)(v8 + 64));
    goto LABEL_8;
  }
  APSLogErrorAt(0);
  v19 = -6718;
LABEL_20:
  v20 = v19;
LABEL_9:
  v17 = *(const void **)(v8 + 16);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(v8 + 16) = 0;
  }
  CFRelease((CFTypeRef)v8);
  v8 = 0;
LABEL_12:
  if (v9)
    CFRelease(v9);
  return v8;
}

uint64_t simulatedReceiverReadDataBlock(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  unsigned int v4;

  if (*(_BYTE *)(result + 100))
  {
    v1 = result;
    v2 = mach_absolute_time();
    UpTicksToSecondsF();
    v4 = (v3 * *(double *)(v1 + 80));
    result = APSRTPJitterBufferSimRead(*(_QWORD *)(v1 + 16), *(_DWORD *)(v1 + 96), *(_DWORD *)(v1 + 48) * v4);
    *(_QWORD *)(v1 + 88) = v2;
    *(_DWORD *)(v1 + 96) += v4;
  }
  return result;
}

void _APSSimulatedReceiverFinalize(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *(NSObject **)(a1 + 72);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___APSSimulatedReceiverFinalize_block_invoke;
  block[3] = &__block_descriptor_tmp_6;
  block[4] = a1;
  dispatch_sync(v1, block);
}

uint64_t APSSimulatedReceiverWritePacket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _WORD *EmptyPacket;
  uint64_t v7;
  unsigned int v9;

  v9 = 0;
  EmptyPacket = APSRTPJitterBufferSimGetEmptyPacket(*(_QWORD *)(a1 + 16), (int *)&v9);
  v7 = v9;
  if (v9)
    goto LABEL_7;
  if (!EmptyPacket)
  {
    v7 = 0;
LABEL_7:
    APSLogErrorAt(v7);
    return v9;
  }
  EmptyPacket[1] = *(_WORD *)a2;
  *((_DWORD *)EmptyPacket + 1) = *(_DWORD *)(a2 + 2);
  *((_QWORD *)EmptyPacket + 2) = a3;
  APSRTPJitterBufferSimEnqueuePacket(*(_QWORD *)(a1 + 16), EmptyPacket);
  return v9;
}

void APSSimulatedReceiverUpdateReadSampleRate(uint64_t a1, double a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *(NSObject **)(a1 + 72);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = __APSSimulatedReceiverUpdateReadSampleRate_block_invoke;
  v3[3] = &__block_descriptor_tmp_1910;
  v3[4] = a1;
  *(double *)&v3[5] = a2;
  dispatch_async(v2, v3);
}

uint64_t APSPSGDataSourceCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t DerivedStorage;
  dispatch_queue_t v5;
  dispatch_queue_t v6;
  uint64_t v7;

  if (a2)
  {
    if (APSPSGDataSourceGetClassID_sRegisterOnce != -1)
      dispatch_once_f(&APSPSGDataSourceGetClassID_sRegisterOnce, &APSPSGDataSourceGetClassID_sClassID, (dispatch_function_t)psgDataSource_registerBaseClass);
    v3 = CMDerivedObjectCreate();
    if ((_DWORD)v3)
    {
      v7 = v3;
      APSLogErrorAt(v3);
    }
    else
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(_DWORD *)DerivedStorage = -1;
      v5 = dispatch_queue_create("com.apple.airplay.APSPSGDataSource.queue", 0);
      *(_QWORD *)(DerivedStorage + 32) = v5;
      if (v5
        && (v6 = dispatch_queue_create("com.apple.airplay.APSPSGDataSource.notificationQueue", 0),
            (*(_QWORD *)(DerivedStorage + 8) = v6) != 0))
      {
        if (gLogCategory_APSPSGDataSource <= 50
          && (gLogCategory_APSPSGDataSource != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v7 = 0;
        *a2 = 0;
      }
      else
      {
        APSLogErrorAt(0);
        return 4294960568;
      }
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  return v7;
}

uint64_t dataSource_Start(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  _QWORD v7[5];
  _QWORD handler[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = MEMORY[0x1E0C809B0];
  v4 = *(NSObject **)(DerivedStorage + 32);
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __dataSource_Start_block_invoke;
  handler[3] = &__block_descriptor_40_e8_v12__0i8l;
  handler[4] = a1;
  notify_register_dispatch("com.apple.airplay.prefsChanged", (int *)DerivedStorage, v4, handler);
  v5 = *(NSObject **)(DerivedStorage + 32);
  v7[0] = v3;
  v7[1] = 3221225472;
  v7[2] = __dataSource_Start_block_invoke_2;
  v7[3] = &__block_descriptor_40_e5_v8__0l;
  v7[4] = a1;
  dispatch_sync(v5, v7);
  return 0;
}

uint64_t dataSource_Stop()
{
  int *DerivedStorage;

  DerivedStorage = (int *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage != -1)
  {
    notify_cancel(*DerivedStorage);
    *DerivedStorage = -1;
  }
  return 0;
}

void dataSource_updateDevicePSGInfos(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  __CFArray *v6;
  const __CFArray *v7;
  CFMutableDictionaryRef v8;
  const void *v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  char v23;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0x2020000000;
  v23 = 0;
  v18 = 0;
  v19 = &v18;
  v20 = 0x2020000000;
  v21 = 0;
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  CFPreferencesAppSynchronize(CFSTR("com.apple.airplay"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.coremedia"));
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v6 = APSSettingsCopyKeys(0);
    if (v6)
    {
      v7 = v6;
      v8 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v8)
      {
        CFArrayGetCount(v7);
        CFArrayApplyBlock();
        CFDictionaryApplyBlock();
        if (!FigCFEqual())
        {
          if (gLogCategory_APSPSGDataSource <= 50
            && (gLogCategory_APSPSGDataSource != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          v9 = *(const void **)(DerivedStorage + 24);
          v10 = v19[3];
          if (v10)
            CFRetain((CFTypeRef)v19[3]);
          *(_QWORD *)(DerivedStorage + 24) = v10;
          if (v9)
            CFRelease(v9);
        }
        if (!FigCFEqual())
        {
          if (gLogCategory_APSPSGDataSource <= 50
            && (gLogCategory_APSPSGDataSource != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          v11 = *(const void **)(DerivedStorage + 16);
          CFRetain(Mutable);
          *(_QWORD *)(DerivedStorage + 16) = Mutable;
          if (v11)
            CFRelease(v11);
          if (a2)
          {
            CMNotificationCenterGetDefaultLocalCenter();
            FigDispatchAsyncPostNotification();
          }
        }
      }
      else
      {
        APSLogErrorAt(0);
      }
      CFRelease(v7);
    }
    else
    {
      v8 = 0;
    }
    CFRelease(Mutable);
  }
  else
  {
    APSLogErrorAt(0);
    v8 = 0;
  }
  v12 = (const void *)v15[3];
  if (v12)
    CFRelease(v12);
  if (v8)
    CFRelease(v8);
  v13 = (const void *)v19[3];
  if (v13)
    CFRelease(v13);
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(v22, 8);
}

void sub_1C96C4048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 160), 8);
  _Block_object_dispose((const void *)(v27 - 128), 8);
  _Unwind_Resume(a1);
}

void __dataSource_updateDevicePSGInfos_block_invoke(uint64_t a1, CFStringRef theString)
{
  const __CFAllocator *v4;
  CFIndex Length;
  CFMutableStringRef MutableCopy;
  __CFString *v7;
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  __CFDictionary *v11;
  const __CFString *Value;
  const __CFString *v13;
  CFIndex v14;
  CFIndex v15;
  const void *v16;
  const __CFString *v17;
  const __CFString *v18;
  const __CFString *v19;
  __CFString *v20;
  CFRange v21;

  if (!CFStringHasPrefix(theString, CFSTR("PSGDataSource::PSGInfo::")))
    return;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Length = CFStringGetLength(theString);
  MutableCopy = CFStringCreateMutableCopy(v4, Length, theString);
  if (!MutableCopy)
  {
    APSLogErrorAt(0);
    return;
  }
  v7 = MutableCopy;
  v21.length = CFStringGetLength(CFSTR("PSGDataSource::PSGInfo::"));
  v21.location = 0;
  CFStringReplace(v7, v21, &stru_1E828E0E0);
  v8 = (const __CFDictionary *)APSSettingsCopyValueEx(theString, 0, 0);
  if (!v8)
  {
    APSLogErrorAt(0);
    if (gLogCategory_APSPSGDataSource <= 90
      && (gLogCategory_APSPSGDataSource != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v20 = v7;
    goto LABEL_34;
  }
  v9 = v8;
  v10 = CFDictionaryCreateMutableCopy(v4, 0, v8);
  v11 = v10;
  if (!v10)
    goto LABEL_28;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    Value = (const __CFString *)CFDictionaryGetValue(v10, CFSTR("PGLeaderUUID"));
    if (Value)
    {
      v13 = Value;
      v14 = CFStringGetLength(Value);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFStringCreateMutableCopy(v4, v14, v13);
      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      {
LABEL_28:
        APSLogErrorAt(0);
        goto LABEL_29;
      }
    }
    else
    {
      if (CFDictionaryGetInt64())
      {
        v15 = CFStringGetLength(v7);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFStringCreateMutableCopy(v4, v15, v7);
        v16 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
        if (!v16)
          goto LABEL_28;
      }
      else
      {
        v16 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
        if (!v16)
          goto LABEL_14;
      }
      CFDictionarySetValue(v11, CFSTR("PGLeaderUUID"), v16);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    }
  }
LABEL_14:
  if (!CFDictionaryContainsKey(v11, CFSTR("IsLocalDevice")))
  {
    CFDictionarySetValue(v11, CFSTR("IsLocalDevice"), (const void *)*MEMORY[0x1E0C9AE40]);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }
  CFDictionaryGetValue(v11, CFSTR("PGUUID"));
  CFDictionaryGetInt64();
  CFDictionarySetInt64();
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 72), v7, v11);
  if (CFDictionaryGetInt64())
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = CFDictionaryCreateMutableCopy(v4, 0, v9);
    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
      goto LABEL_28;
  }
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
LABEL_29:
    v18 = 0;
    goto LABEL_30;
  }
  v17 = (const __CFString *)CFStringCreateF();
  v18 = v17;
  if (v17)
  {
    if (CFEqual(v17, CFSTR("wirelessdisplay_enable_timestamps_diagnostic")))
      v19 = CFSTR("com.apple.coremedia");
    else
      v19 = CFSTR("com.apple.airplay");
    CFPreferencesSetAppValue(v18, v11, v19);
  }
  else
  {
    APSLogErrorAt(0);
  }
LABEL_30:
  CFRelease(v7);
  CFRelease(v9);
  if (v11)
    CFRelease(v11);
  if (v18)
  {
    v20 = (__CFString *)v18;
LABEL_34:
    CFRelease(v20);
  }
}

uint64_t __dataSource_updateDevicePSGInfos_block_invoke_2(int a1, int a2, CFDictionaryRef theDict)
{
  CFDictionaryGetValue(theDict, CFSTR("PGUUID"));
  return FigCFDictionarySetValueFromKeyInDict();
}

void dataSource_Finalize()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  NSObject *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  dataSource_Stop();
  v1 = *(NSObject **)(DerivedStorage + 32);
  if (v1)
  {
    dispatch_release(v1);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v2 = *(NSObject **)(DerivedStorage + 8);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
}

uint64_t dataSource_CopyDebugDescription()
{
  return CFStringCreateF();
}

uint64_t dataSource_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  uint64_t v8;
  _QWORD v10[8];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a4)
  {
    v7 = *(NSObject **)(DerivedStorage + 32);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __dataSource_CopyProperty_block_invoke;
    v10[3] = &unk_1E828B2B0;
    v10[6] = a4;
    v10[7] = DerivedStorage;
    v10[4] = &v11;
    v10[5] = a2;
    dispatch_sync(v7, v10);
    v8 = *((unsigned int *)v12 + 6);
  }
  else
  {
    APSLogErrorAt(0);
    v8 = 4294960591;
    *((_DWORD *)v12 + 6) = -6705;
  }
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_1C96C4650(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t dataSource_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  uint64_t v8;
  _QWORD block[9];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a3)
  {
    v7 = *(NSObject **)(DerivedStorage + 32);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __dataSource_SetProperty_block_invoke;
    block[3] = &unk_1E828B2D8;
    block[4] = &v11;
    block[5] = a2;
    block[6] = a1;
    block[7] = a3;
    block[8] = DerivedStorage;
    dispatch_sync(v7, block);
    v8 = *((unsigned int *)v12 + 6);
  }
  else
  {
    APSLogErrorAt(0);
    v8 = 4294960591;
    *((_DWORD *)v12 + 6) = -6705;
  }
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_1C96C4760(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t dataSource_SetDevicePSGInfoInternal(uint64_t a1, const void *a2)
{
  uint64_t v3;
  const __CFArray *v4;
  __CFArray *v5;
  CFIndex i;
  const __CFString *TypedValueAtIndex;
  const __CFString *v8;
  CFIndex v9;
  const __CFAllocator *v10;
  const void *v11;
  const __CFDictionary *Value;
  const __CFString *v13;
  const __CFDictionary *v14;
  const __CFString *v15;
  CFMutableDictionaryRef v16;
  CFMutableDictionaryRef MutableCopy;
  const __CFString *v18;
  const void *v19;
  uint64_t DerivedStorage;
  unsigned int v22;

  v22 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = FigCFDictionaryCopyArrayOfKeys();
  if (!v3)
  {
    APSLogErrorAt(0);
    return 0;
  }
  v4 = (const __CFArray *)v3;
  CFPreferencesAppSynchronize(CFSTR("com.apple.airplay"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.coremedia"));
  v5 = APSSettingsCopyKeys(0);
  if (!v5)
  {
LABEL_47:
    v13 = 0;
LABEL_51:
    if (gLogCategory_APSPSGDataSource <= 50
      && (gLogCategory_APSPSGDataSource != -1 || _LogCategory_Initialize()))
    {
      goto LABEL_53;
    }
    goto LABEL_57;
  }
  for (i = 0; i < CFArrayGetCount(v5); ++i)
  {
    CFStringGetTypeID();
    TypedValueAtIndex = (const __CFString *)CFArrayGetTypedValueAtIndex();
    if (CFStringHasPrefix(TypedValueAtIndex, CFSTR("PSGDataSource::PSGInfo::")))
    {
      if (CFEqual(TypedValueAtIndex, CFSTR("wirelessdisplay_enable_timestamps_diagnostic")))
        v8 = CFSTR("com.apple.coremedia");
      else
        v8 = CFSTR("com.apple.airplay");
      CFPreferencesSetAppValue(TypedValueAtIndex, 0, v8);
      v22 = 0;
    }
  }
  v9 = 0;
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (1)
  {
    if (v9 >= CFArrayGetCount(v4))
    {
      v19 = *(const void **)(DerivedStorage + 16);
      if (a2)
        CFRetain(a2);
      *(_QWORD *)(DerivedStorage + 16) = a2;
      if (v19)
        CFRelease(v19);
      goto LABEL_47;
    }
    CFStringGetTypeID();
    v11 = (const void *)CFArrayGetTypedValueAtIndex();
    Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a2, v11);
    v13 = (const __CFString *)CFStringCreateF();
    if (v11)
      break;
    v14 = *(const __CFDictionary **)(DerivedStorage + 16);
    if (v14 && CFDictionaryContainsKey(v14, v13))
    {
      if (CFEqual(v13, CFSTR("wirelessdisplay_enable_timestamps_diagnostic")))
        v15 = CFSTR("com.apple.coremedia");
      else
        v15 = CFSTR("com.apple.airplay");
      CFPreferencesSetAppValue(v13, 0, v15);
      v16 = 0;
      v22 = 0;
      if (gLogCategory_APSPSGDataSource > 50)
        goto LABEL_35;
      if (gLogCategory_APSPSGDataSource != -1 || _LogCategory_Initialize())
        LogPrintF();
    }
    v16 = 0;
    if (v13)
      goto LABEL_36;
LABEL_37:
    if (v16)
      CFRelease(v16);
    ++v9;
  }
  if (!CFDictionaryGetValue(Value, CFSTR("PGUUID"))
    || !CFDictionaryGetValue(Value, CFSTR("PGName"))
    || !CFDictionaryGetValue(Value, CFSTR("PGType"))
    || !CFDictionaryGetValue(Value, CFSTR("PGMemberID")))
  {
    APSLogErrorAt(0);
    goto LABEL_51;
  }
  if (gLogCategory_APSPSGDataSource <= 50
    && (gLogCategory_APSPSGDataSource != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  MutableCopy = CFDictionaryCreateMutableCopy(v10, 0, Value);
  if (MutableCopy)
  {
    v16 = MutableCopy;
    if (CFEqual(v13, CFSTR("wirelessdisplay_enable_timestamps_diagnostic")))
      v18 = CFSTR("com.apple.coremedia");
    else
      v18 = CFSTR("com.apple.airplay");
    CFPreferencesSetAppValue(v13, v16, v18);
    v22 = 0;
LABEL_35:
    if (!v13)
      goto LABEL_37;
LABEL_36:
    CFRelease(v13);
    goto LABEL_37;
  }
  APSLogErrorAt(0);
  v22 = -6728;
  if (gLogCategory_APSPSGDataSource > 90
    || gLogCategory_APSPSGDataSource == -1 && !_LogCategory_Initialize())
  {
    goto LABEL_57;
  }
LABEL_53:
  LogPrintF();
LABEL_57:
  CFPreferencesAppSynchronize(CFSTR("com.apple.airplay"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.coremedia"));
  notify_post("com.apple.airplay.prefsChanged");
  if (v13)
    CFRelease(v13);
  if (v5)
    CFRelease(v5);
  CFRelease(v4);
  return v22;
}

uint64_t APSPSGDataSourceSetDevicePSGInfo(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD block[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v4 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 32);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __APSPSGDataSourceSetDevicePSGInfo_block_invoke;
  block[3] = &unk_1E828B1E0;
  block[4] = &v8;
  block[5] = a1;
  block[6] = a2;
  dispatch_sync(v4, block);
  v5 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1C96C4E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const void *APSPSGDataSourceCopyDevicePSGInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const __CFString *v3;
  CFTypeID TypeID;
  const void *v5;
  const void *v6;
  int v8;

  v8 = 0;
  if (a2 && (v2 = CFStringCreateF()) != 0)
  {
    v3 = (const __CFString *)v2;
    CFPreferencesAppSynchronize(CFSTR("com.apple.airplay"));
    CFPreferencesAppSynchronize(CFSTR("com.apple.coremedia"));
    TypeID = CFDictionaryGetTypeID();
    v5 = APSSettingsCopyValueEx(v3, TypeID, &v8);
    v6 = v5;
    if (v8)
    {
      if (!v5)
      {
        APSLogErrorAt(0);
        v8 = -6727;
      }
    }
    else if (gLogCategory_APSPSGDataSource <= 90
           && (gLogCategory_APSPSGDataSource != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFRelease(v3);
  }
  else
  {
    APSLogErrorAt(0);
    return 0;
  }
  return v6;
}

uint64_t APSPSGDataSourceGetShared(_QWORD *a1)
{
  if (APSPSGDataSourceGetShared_once != -1)
    dispatch_once(&APSPSGDataSourceGetShared_once, &__block_literal_global_1938);
  *a1 = APSPSGDataSourceGetShared_psgDataSource;
  return APSPSGDataSourceGetShared_err;
}

uint64_t APSCFArrayGetEmpty()
{
  if (APSCFArrayGetEmpty_sAPSCFArrayEmptyOnce != -1)
    dispatch_once(&APSCFArrayGetEmpty_sAPSCFArrayEmptyOnce, &__block_literal_global_1941);
  return APSCFArrayGetEmpty_sAPSCFArrayEmpty;
}

uint64_t APSCFArraySetUInt64AtIndex(__CFArray *a1, CFIndex a2)
{
  const void *Int64;
  const void *v5;

  if (a1)
  {
    Int64 = (const void *)CFNumberCreateInt64();
    if (Int64)
    {
      v5 = Int64;
      CFArraySetValueAtIndex(a1, a2, Int64);
      CFRelease(v5);
      return 0;
    }
    else
    {
      APSLogErrorAt(0);
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
}

uint64_t APSCFArrayGetUInt64AtIndex(const __CFArray *a1, CFIndex a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t result;

  if (a1)
  {
    CFArrayGetValueAtIndex(a1, a2);
    v4 = CFGetInt64();
    result = 0;
    *a3 = v4;
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  return result;
}

void APSCFArrayReverse(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  uint64_t v4;
  CFIndex v5;
  uint64_t v6;
  CFIndex v7;

  Count = CFArrayGetCount(a1);
  v3 = CFArrayGetCount(a1);
  if (v3 >= 0)
    v4 = v3;
  else
    v4 = v3 + 1;
  if (v3 >= 2)
  {
    v5 = 0;
    v6 = v4 >> 1;
    v7 = Count - 1;
    do
      CFArrayExchangeValuesAtIndices(a1, v5++, v7--);
    while (v6 != v5);
  }
}

CFStringRef APSCreateNewUUIDString()
{
  const __CFAllocator *v0;
  const __CFUUID *v1;
  CFStringRef v2;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  v2 = CFUUIDCreateString(v0, v1);
  if (v1)
    CFRelease(v1);
  return v2;
}

uint64_t APSCFStringParseUInt32s(const __CFString *a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  const __CFCharacterSet *Predefined;
  CFIndex Length;
  CFIndex v6;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFIndex v15;
  UniChar v16;
  int IsCharacterMember;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  CFIndex v26;
  uint64_t v27;
  const __CFCharacterSet *theSet;
  UniChar buffer[8];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  CFStringRef theString;
  const UniChar *v41;
  const char *v42;
  uint64_t v43;
  CFIndex v44;
  int64_t v45;
  int64_t v46;
  CFRange v47;

  Predefined = CFCharacterSetGetPredefined(kCFCharacterSetDecimalDigit);
  theSet = CFCharacterSetGetPredefined(kCFCharacterSetWhitespace);
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  *(_OWORD *)buffer = 0u;
  v33 = 0u;
  if (!a1)
    return 0;
  Length = CFStringGetLength(a1);
  if (Length < 1)
    return 0;
  v6 = Length;
  theString = a1;
  v43 = 0;
  v44 = Length;
  CharactersPtr = CFStringGetCharactersPtr(a1);
  CStringPtr = 0;
  v41 = CharactersPtr;
  if (!CharactersPtr)
    CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v45 = 0;
  v46 = 0;
  v13 = 64;
  v42 = CStringPtr;
  do
  {
    if ((unint64_t)v12 >= 4)
      v14 = 4;
    else
      v14 = v12;
    v15 = v44;
    if (v44 <= v12)
    {
      v16 = 0;
    }
    else if (v41)
    {
      v16 = v41[v12 + v43];
    }
    else if (v42)
    {
      v16 = v42[v43 + v12];
    }
    else
    {
      v21 = v45;
      if (v46 <= v12 || v45 > v12)
      {
        v23 = v14 + v9;
        v24 = v13 - v14;
        v25 = v12 - v14;
        v26 = v25 + 64;
        if (v25 + 64 >= v44)
          v26 = v44;
        v45 = v25;
        v46 = v26;
        if (v44 >= v24)
          v15 = v24;
        v47.length = v15 + v23;
        v47.location = v25 + v43;
        CFStringGetCharacters(theString, v47, buffer);
        v21 = v45;
      }
      v16 = buffer[v12 - v21];
    }
    IsCharacterMember = CFCharacterSetIsCharacterMember(Predefined, v16);
    if (IsCharacterMember)
    {
      if (10 * (_DWORD)v11 + v16 - 48 < v11)
      {
        APSLogErrorAt(0);
        return 4294960553;
      }
      v10 = 1;
      v11 = 10 * (_DWORD)v11 + v16 - 48;
    }
    else
    {
      if (v10)
        v18 = 0;
      else
        v18 = v11;
      if (v10 && a2)
      {
        v19 = a2(v11, a3);
        if ((_DWORD)v19)
        {
          v27 = v19;
LABEL_46:
          APSLogErrorAt(v19);
          return v27;
        }
        v18 = 0;
      }
      v20 = CFCharacterSetIsCharacterMember(theSet, v16);
      if (!(_DWORD)v20)
      {
        APSLogErrorAt(v20);
        return 4294960579;
      }
      v10 = 0;
      v11 = v18;
    }
    ++v12;
    --v9;
    ++v13;
  }
  while (v6 != v12);
  v27 = 0;
  if (a2)
  {
    if (IsCharacterMember)
    {
      v19 = a2(v11, a3);
      v27 = v19;
      if ((_DWORD)v19)
        goto LABEL_46;
    }
  }
  return v27;
}

uint64_t APSCFStringCountUInt32s(const __CFString *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  v3 = APSCFStringParseUInt32s(a1, (uint64_t (*)(uint64_t, uint64_t))apsCFUtils_stringCountUInt32sCallback, (uint64_t)&v6);
  v4 = v3;
  if ((_DWORD)v3)
  {
    APSLogErrorAt(v3);
  }
  else if (a2)
  {
    *a2 = v6;
  }
  return v4;
}

uint64_t apsCFUtils_stringCountUInt32sCallback(uint64_t a1, _QWORD *a2)
{
  ++*a2;
  return 0;
}

BOOL APSCFDictionaryPairIsKeyPresentAndEqual()
{
  const void *Value;
  const void *v1;
  _BOOL8 result;

  Value = (const void *)FigCFDictionaryGetValue();
  v1 = (const void *)FigCFDictionaryGetValue();
  result = 0;
  if (Value)
  {
    if (v1)
      return CFEqual(Value, v1) != 0;
  }
  return result;
}

uint64_t APSCFDataCreateWithBase64String(uint64_t a1)
{
  if (a1)
    return objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBase64EncodedString:options:", a1, 0);
  APSLogErrorAt(0);
  return 0;
}

uint64_t APSCFDictionaryGetBooleanIfPresent(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t Int64;

  Int64 = CFDictionaryGetInt64();
  if (a3)
    *a3 = Int64 != 0;
  return 1;
}

uint64_t APSIntrospectorAddCommand(const void *a1, pthread_mutex_t *a2, pthread_mutex_t *a3, const void *a4)
{
  uint64_t result;

  if (APSIntrospectorInit_once != -1)
    dispatch_once_f(&APSIntrospectorInit_once, 0, (dispatch_function_t)introsp_init);
  result = gIntrospector;
  if (gIntrospector)
  {
    if (a1 && a3 && a4)
      return introsp_addCommand(gIntrospector, a1, a2, a3, a4, 0);
    else
      return APSLogErrorAt(0);
  }
  return result;
}

void introsp_init()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *global_queue;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  int v15;
  void *v16;
  int v17;
  sockaddr v18;
  uint64_t v19;
  int v20;
  _QWORD block[4];
  int v22;

  if (!IsAppleInternalBuild())
    return;
  gIntrospector = (uint64_t)malloc_type_calloc(1uLL, 0x30uLL, 0x1030040FB85C623uLL);
  *(_QWORD *)gIntrospector = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
  v0 = FigSimpleMutexCreate();
  v1 = gIntrospector;
  *(_QWORD *)(gIntrospector + 8) = v0;
  *(_DWORD *)(v1 + 40) = -1;
  *(_WORD *)(v1 + 44) = 0;
  *(_QWORD *)&v18.sa_len = 0;
  *(_QWORD *)&v18.sa_data[6] = 0;
  v20 = 0;
  v19 = 0;
  v17 = 1;
  v2 = socket(2, 1, 6);
  if (v2 < 0)
  {
    if (*__error())
    {
      v3 = *__error();
      if (!(_DWORD)v3)
        goto LABEL_5;
    }
    else
    {
      v3 = 4294960596;
    }
    v7 = v3;
    goto LABEL_28;
  }
LABEL_5:
  setsockopt(v2, 0xFFFF, 4130, &v17, 4u);
  v17 = 1;
  if (!setsockopt(v2, 0xFFFF, 4, &v17, 4u))
    goto LABEL_8;
  if (!*__error())
  {
    v4 = 4294960596;
    goto LABEL_23;
  }
  v4 = *__error();
  if ((_DWORD)v4)
  {
LABEL_23:
    v7 = v4;
    goto LABEL_28;
  }
LABEL_8:
  v5 = 0;
  *(_QWORD *)&v18.sa_data[6] = 0;
  *(_WORD *)&v18.sa_len = 528;
  *(_DWORD *)&v18.sa_data[2] = 16777343;
  while (1)
  {
    *(_WORD *)v18.sa_data = bswap32(v5 + 6060) >> 16;
    if (!bind(v2, &v18, 0x10u))
      break;
    if (*__error())
    {
      v6 = *__error();
      if (!(_DWORD)v6)
        break;
    }
    else
    {
      v6 = 4294960596;
    }
    if (++v5 == 10)
    {
      v7 = v6;
      goto LABEL_28;
    }
  }
  if (!listen(v2, 5))
    goto LABEL_19;
  if (*__error())
  {
    v8 = *__error();
    if (!(_DWORD)v8)
    {
LABEL_19:
      *(_DWORD *)(v1 + 40) = v2;
      global_queue = dispatch_get_global_queue(0, 0);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __introsp_savePort_block_invoke;
      block[3] = &__block_descriptor_tmp_18_1947;
      v22 = v5 + 6060;
      dispatch_async(global_queue, block);
      introsp_addCommand(v1, CFSTR("echo"), 0, (pthread_mutex_t *)introsp_cmdEcho, CFSTR("output arguments in single quotes"), 0);
      introsp_addCommand(v1, CFSTR("exit"), (pthread_mutex_t *)v1, (pthread_mutex_t *)introsp_cmdQuit, CFSTR("quit (same as 'quit')"), 1);
      introsp_addCommand(v1, CFSTR("fignote"), 0, (pthread_mutex_t *)introsp_cmdFigNote, CFSTR("change or show fignote log variables"), 0);
      introsp_addCommand(v1, CFSTR("help"), (pthread_mutex_t *)v1, (pthread_mutex_t *)introsp_cmdHelp, CFSTR("list available commands and their brief descriptions"), 0);
      introsp_addCommand(v1, CFSTR("logging"), 0, (pthread_mutex_t *)introsp_cmdLogging, CFSTR("modify or show current log settings"), 0);
      introsp_addCommand(v1, CFSTR("progname"), 0, (pthread_mutex_t *)introsp_cmdProgName, CFSTR("show the program name"), 0);
      introsp_addCommand(v1, CFSTR("prompt"), (pthread_mutex_t *)v1, (pthread_mutex_t *)introsp_cmdPrompt, CFSTR("turn the prompt on/off"), 0);
      introsp_addCommand(v1, CFSTR("quit"), (pthread_mutex_t *)v1, (pthread_mutex_t *)introsp_cmdQuit, CFSTR("quit (same as 'exit')"), 1);
      introsp_addCommand(v1, CFSTR("GET"), (pthread_mutex_t *)v1, (pthread_mutex_t *)introsp_cmdQuit, 0, 1);
      introsp_addCommand(v1, CFSTR("HEAD"), (pthread_mutex_t *)v1, (pthread_mutex_t *)introsp_cmdQuit, 0, 1);
      introsp_addCommand(v1, CFSTR("POST"), (pthread_mutex_t *)v1, (pthread_mutex_t *)introsp_cmdQuit, 0, 1);
      introsp_addCommand(v1, CFSTR("PUT"), (pthread_mutex_t *)v1, (pthread_mutex_t *)introsp_cmdQuit, 0, 1);
      introsp_addCommand(v1, CFSTR("DELETE"), (pthread_mutex_t *)v1, (pthread_mutex_t *)introsp_cmdQuit, 0, 1);
      introsp_addCommand(v1, CFSTR("CONNECT"), (pthread_mutex_t *)v1, (pthread_mutex_t *)introsp_cmdQuit, 0, 1);
      introsp_addCommand(v1, CFSTR("OPTIONS"), (pthread_mutex_t *)v1, (pthread_mutex_t *)introsp_cmdQuit, 0, 1);
      introsp_addCommand(v1, CFSTR("TRACE"), (pthread_mutex_t *)v1, (pthread_mutex_t *)introsp_cmdQuit, 0, 1);
      introsp_addCommand(v1, CFSTR("PATCH"), (pthread_mutex_t *)v1, (pthread_mutex_t *)introsp_cmdQuit, 0, 1);
      v10 = dispatch_queue_create("com.apple.airplay.introspector", 0);
      *(_QWORD *)(v1 + 24) = v10;
      v11 = dispatch_source_create(MEMORY[0x1E0C80DB8], *(int *)(v1 + 40), 0, v10);
      *(_QWORD *)(v1 + 32) = v11;
      dispatch_set_context(v11, (void *)v1);
      dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v1 + 32), (dispatch_function_t)introsp_serverHandleConnection);
      dispatch_resume(*(dispatch_object_t *)(v1 + 32));
      if (gLogCategory_APSIntrospector <= 50
        && (gLogCategory_APSIntrospector != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      return;
    }
  }
  else
  {
    v8 = 4294960596;
  }
  v7 = v8;
LABEL_28:
  APSLogErrorAt(v7);
  if (gLogCategory_APSIntrospector <= 90
    && (gLogCategory_APSIntrospector != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v12 = gIntrospector;
  if (gIntrospector)
  {
    v13 = *(NSObject **)(gIntrospector + 32);
    if (v13)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(gIntrospector + 32));
      dispatch_release(v13);
      v12 = gIntrospector;
      *(_QWORD *)(gIntrospector + 32) = 0;
    }
    v14 = *(NSObject **)(v12 + 24);
    if (v14)
    {
      dispatch_release(v14);
      v12 = gIntrospector;
      *(_QWORD *)(gIntrospector + 24) = 0;
    }
    if (*(_QWORD *)v12)
    {
      CFRelease(*(CFTypeRef *)v12);
      v12 = gIntrospector;
    }
    if (*(_QWORD *)(v12 + 8))
    {
      FigSimpleMutexDestroy();
      v12 = gIntrospector;
    }
    free(*(void **)(v12 + 16));
    v15 = *(_DWORD *)(v12 + 40);
    if (v15 < 0)
    {
      v16 = (void *)gIntrospector;
    }
    else
    {
      if (close(v15) && *__error())
        __error();
      v16 = (void *)gIntrospector;
      *(_DWORD *)(gIntrospector + 40) = -1;
    }
    free(v16);
    gIntrospector = 0;
  }
  if ((v2 & 0x80000000) == 0 && close(v2) && *__error())
    __error();
}

uint64_t introsp_addCommand(uint64_t a1, const void *a2, pthread_mutex_t *a3, pthread_mutex_t *a4, const void *a5, char a6)
{
  pthread_mutex_t **Value;
  pthread_mutex_t **v13;
  uint64_t result;
  _QWORD *v15;
  CFTypeRef v16;

  if (!a2 || !a4)
    return APSLogErrorAt(0);
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  Value = (pthread_mutex_t **)CFDictionaryGetValue(*(CFDictionaryRef *)a1, a2);
  if (Value)
  {
    v13 = Value;
    result = pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
    if (*v13 == a4)
    {
      pthread_mutex_lock(v13[3]);
      v13[1] = a3;
      return pthread_mutex_unlock(v13[3]);
    }
    else if (gLogCategory_APSIntrospector <= 90)
    {
      if (gLogCategory_APSIntrospector != -1)
        return LogPrintF();
      result = _LogCategory_Initialize();
      if ((_DWORD)result)
        return LogPrintF();
    }
  }
  else
  {
    v15 = malloc_type_calloc(1uLL, 0x28uLL, 0x10E0040A81CF768uLL);
    *v15 = a4;
    v15[1] = a3;
    if (a5)
      v16 = CFRetain(a5);
    else
      v16 = 0;
    v15[2] = v16;
    v15[3] = FigReentrantMutexCreate();
    *((_BYTE *)v15 + 32) = a6;
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, a2, v15);
    return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  }
  return result;
}

void __introsp_savePort_block_invoke(uint64_t a1)
{
  uint64_t v2;
  int out_token;
  char *name;

  name = 0;
  out_token = 0;
  getprogname();
  ASPrintF();
  v2 = notify_register_check(0, &out_token);
  if ((_DWORD)v2)
  {
    APSLogErrorAt(v2);
  }
  else
  {
    notify_set_state(out_token, *(int *)(a1 + 32));
    notify_post(name);
  }
  free(name);
}

uint64_t introsp_cmdEcho(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  if (a3 >= 2)
  {
    v4 = a3 - 1;
    v5 = a4 + 8;
    do
    {
      v5 += 8;
      FPrintF();
      --v4;
    }
    while (v4);
  }
  return FPrintF();
}

uint64_t introsp_cmdQuit(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 44))
      return FPrintF();
  }
  return result;
}

void introsp_cmdFigNote(uint64_t a1, uint64_t a2, int a3, const char **a4)
{
  const __CFAllocator *v6;
  CFStringRef v7;
  const char *v8;
  int Value;
  CFStringRef v10;
  char v11;
  CFIndex Count;
  CFIndex v13;
  CFIndex i;

  if (a3 < 3)
  {
LABEL_25:
    FPrintF();
    return;
  }
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a4[2], 0x8000100u);
  v8 = a4[1];
  if (!strcmp(v8, "change"))
  {
    if (a3 == 5)
    {
      v10 = CFStringCreateWithCString(v6, a4[3], 0x8000100u);
      TextToInt32();
      Value = FigNote_ChangeValue();
      goto LABEL_18;
    }
  }
  else
  {
    if (strcmp(v8, "show"))
      goto LABEL_4;
    if (a3 == 3)
    {
      Value = FigNote_CopyKeys();
      if (!Value)
      {
        Count = CFArrayGetCount(0);
        if (Count >= 1)
        {
          v13 = Count;
          for (i = 0; i != v13; ++i)
          {
            CFArrayGetValueAtIndex(0, i);
            FPrintF();
          }
        }
        CFRelease(0);
      }
      v10 = 0;
      goto LABEL_18;
    }
    if (a3 == 4)
    {
      v10 = CFStringCreateWithCString(v6, a4[3], 0x8000100u);
      Value = FigNote_GetValue();
      if (!Value)
        FPrintF();
LABEL_18:
      v11 = 1;
      if (!v7)
        goto LABEL_20;
      goto LABEL_19;
    }
  }
LABEL_4:
  Value = 0;
  v10 = 0;
  v11 = 0;
  if (v7)
LABEL_19:
    CFRelease(v7);
LABEL_20:
  if (v10)
    CFRelease(v10);
  if (Value)
    FPrintF();
  if ((v11 & 1) == 0)
    goto LABEL_25;
}

void introsp_cmdHelp(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  const __CFAllocator *v11;
  CFStringRef v12;
  _QWORD *Value;
  uint64_t v14;
  CFIndex Count;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v17 = 0;
  v18 = &v17;
  v19 = 0x2000000000;
  v20 = 0;
  v7 = a3 - 1;
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if (v7)
  {
    v8 = v7;
    v9 = malloc_type_malloc(16 * v7, 0x600405BB7FD7CuLL);
    v18[3] = 0;
    if (a3 >= 2)
    {
      v10 = 0;
      v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      do
      {
        v12 = CFStringCreateWithCString(v11, *(const char **)(a4 + 8 * v10 + 8), 0x8000100u);
        v9[2 * v18[3]] = v12;
        Value = CFDictionaryGetValue(*(CFDictionaryRef *)a1, (const void *)v9[2 * v18[3]]);
        if (Value)
          v14 = Value[2];
        else
          v14 = 0;
        v9[2 * v18[3] + 1] = v14;
        v10 = v18[3] + 1;
        v18[3] = v10;
      }
      while (v10 < v8);
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  }
  else
  {
    Count = CFDictionaryGetCount(*(CFDictionaryRef *)a1);
    v9 = malloc_type_malloc(16 * Count, 0x600405BB7FD7CuLL);
    CFDictionaryApplyBlock();
    v8 = v18[3];
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
    qsort(v9, v8, 0x10uLL, (int (__cdecl *)(const void *, const void *))compareDescriptions);
  }
  v18[3] = 0;
  if (v8 >= 1)
  {
    do
    {
      FPrintF();
      CFRelease((CFTypeRef)v9[2 * v18[3]]);
      v16 = v18[3] + 1;
      v18[3] = v16;
    }
    while (v16 < v8);
  }
  free(v9);
  _Block_object_dispose(&v17, 8);
}

void introsp_cmdLogging(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a3 < 2)
  {
    if (LogShow())
    {
      FPrintF();
    }
    else
    {
      FPrintF();
      free(0);
    }
  }
  else
  {
    v3 = 8 * a3;
    v4 = 8;
    do
    {
      if (LogControl())
        FPrintF();
      v4 += 8;
    }
    while (v3 != v4);
  }
}

uint64_t introsp_cmdProgName()
{
  getprogname();
  return FPrintF();
}

uint64_t introsp_cmdPrompt(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  const char *v5;

  *(_WORD *)(result + 44) = 1;
  if (a3 >= 2)
  {
    v4 = result;
    v5 = *(const char **)(a4 + 8);
    result = strcmp(v5, "line");
    if ((_DWORD)result)
    {
      result = strcmp(v5, "off");
      if (!(_DWORD)result)
        *(_BYTE *)(v4 + 44) = 0;
    }
    else
    {
      *(_BYTE *)(v4 + 45) = 1;
    }
  }
  return result;
}

uint64_t introsp_serverHandleConnection(uint64_t a1)
{
  uint64_t v1;
  int v2;
  _BYTE *v3;
  char *v4;
  void *v5;
  FILE *v6;
  const __CFAllocator **v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  _BYTE *v11;
  ssize_t v12;
  _BYTE **v13;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 v19;
  int v20;
  _BYTE *v21;
  unsigned __int8 v22;
  uint64_t v23;
  _BYTE *v24;
  int v25;
  int v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  _BOOL4 v32;
  int v33;
  unsigned __int8 *v34;
  const char **v35;
  FILE *v36;
  CFStringRef v37;
  CFStringRef v38;
  pthread_mutex_t **Value;
  __CFString *Mutable;
  uint64_t v41;
  const char **v42;
  uint64_t v43;
  const char *v44;
  uint64_t result;
  _BYTE *v46;
  uint64_t v47;
  const __CFAllocator *alloc;
  _BYTE *v49;
  FILE *v50;
  const char **v51;
  int v52;
  UInt8 v53[64];
  uint64_t v54;

  v1 = a1;
  v54 = *MEMORY[0x1E0C80C00];
  v2 = accept(*(_DWORD *)(a1 + 40), 0, 0);
  if (v2 < 0)
  {
    result = (uint64_t)__error();
    if (!*(_DWORD *)result || (result = (uint64_t)__error(), *(_DWORD *)result))
    {
      if (gLogCategory_APSIntrospector <= 90)
      {
        if (gLogCategory_APSIntrospector != -1)
          return LogPrintF();
        result = _LogCategory_Initialize();
        if ((_DWORD)result)
          return LogPrintF();
      }
      return result;
    }
  }
  v52 = 1;
  setsockopt(v2, 0xFFFF, 4130, &v52, 4u);
  v3 = malloc_type_malloc(0x800uLL, 0xFF5FC5D5uLL);
  v49 = malloc_type_malloc(0x800uLL, 0xB9486711uLL);
  v51 = (const char **)malloc_type_malloc(0x208uLL, 0x10040436913F5uLL);
  v4 = (char *)malloc_type_calloc(1uLL, 0x28uLL, 0x1010040787528ABuLL);
  v5 = malloc_type_malloc(0x1000uLL, 0xB94E825EuLL);
  *((_QWORD *)v4 + 1) = v5;
  *(_QWORD *)v4 = v5;
  *((_OWORD *)v4 + 1) = xmmword_1C96DAB50;
  *((_DWORD *)v4 + 8) = v2;
  v4[36] = 0;
  v6 = fdopen(v2, "w");
  v50 = v6;
  if (!v6)
  {
    APSLogErrorAt(0);
    goto LABEL_101;
  }
  setlinebuf(v6);
  if (!*(_QWORD *)(v1 + 16))
  {
    APSGetDeviceNameCString(v53, 64);
    getprogname();
    ASPrintF();
  }
  v7 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  *(_WORD *)(v1 + 44) = 0;
  alloc = *v7;
  v8 = MEMORY[0x1E0C80978];
  v46 = v3;
  v47 = v1;
  while (1)
  {
    v10 = 0;
    v11 = v3;
    while (1)
    {
      v12 = *((_QWORD *)v4 + 3);
      v13 = (_BYTE **)(v4 + 8);
      if (v12 <= 0)
        break;
LABEL_15:
      v14 = *v13;
      *((_QWORD *)v4 + 3) = v12 - 1;
      *((_QWORD *)v4 + 1) = v14 + 1;
      LOBYTE(v14) = *v14;
      *v11++ = (_BYTE)v14;
      if (v14 == 10)
        goto LABEL_20;
LABEL_16:
      if (++v10 == 2047)
      {
LABEL_20:
        *v11 = 0;
        goto LABEL_21;
      }
    }
    do
    {
      v12 = read(*((_DWORD *)v4 + 8), *(void **)v4, *((_QWORD *)v4 + 2));
      *((_QWORD *)v4 + 3) = v12;
      if ((v12 & 0x8000000000000000) == 0)
        goto LABEL_14;
    }
    while (*__error() == 4);
    v12 = *((_QWORD *)v4 + 3);
    if ((v12 & 0x8000000000000000) == 0)
    {
LABEL_14:
      v13 = (_BYTE **)v4;
      if (v12)
        goto LABEL_15;
      v15 = -1;
      goto LABEL_97;
    }
    APSLogErrorAt(0);
    v15 = *__error();
    if (!v15)
    {
      *v11++ = 0;
      goto LABEL_16;
    }
LABEL_97:
    *v11 = 0;
    v2 = -1;
    if (!v10 || v15 != -1)
      goto LABEL_101;
LABEL_21:
    v16 = 0;
    v17 = 0;
    v18 = v3;
LABEL_22:
    if (v16 == 64)
      goto LABEL_72;
    v19 = *v18;
    if (*v18)
      break;
LABEL_67:
    v36 = v50;
    v35 = v51;
    if ((_DWORD)v16)
      goto LABEL_73;
LABEL_94:
    if (*(_BYTE *)(v1 + 44))
    {
      v9 = "\n";
      if (!*(_BYTE *)(v1 + 45))
        v9 = "";
      fprintf(v36, "%s%s", *(const char **)(v1 + 16), v9);
      fflush(v36);
    }
  }
  while (1)
  {
    if ((v19 & 0x80) == 0)
    {
      if ((*(_DWORD *)(v8 + 4 * (char)v19 + 60) & 0x4000) == 0)
        break;
      goto LABEL_28;
    }
    if (!__maskrune((char)v19, 0x4000uLL))
      break;
LABEL_28:
    v20 = *++v18;
    v19 = v20;
    if (!v20)
      goto LABEL_67;
  }
  if (!*v18 || *v18 == 35)
    goto LABEL_67;
  v21 = v3;
  v22 = 0;
  v23 = v17;
  v24 = v49;
  v51[v16] = &v49[v17];
  if (v17 <= 2046)
    v25 = 2046;
  else
    v25 = v17;
  v26 = v25 + 1;
  while (2)
  {
    while (2)
    {
      v27 = v18;
      v29 = *v18++;
      v28 = v29;
      v30 = (char)v29;
      if (v29 > 38)
      {
        if (v28 != 39)
        {
          if (v28 != 92)
            goto LABEL_57;
          v31 = *v18;
          if (*v18)
          {
            v32 = v22 == 0;
            if (v31 == 92)
              v32 = 1;
            v33 = v31 == v22 || v32;
            v34 = v27 + 2;
            if (v33)
            {
              v18 = v34;
              LOBYTE(v30) = v31;
            }
            else
            {
              LOBYTE(v30) = 92;
            }
          }
          else
          {
            LOBYTE(v30) = 92;
          }
          goto LABEL_64;
        }
LABEL_41:
        if (!v22 || v30 == v22)
        {
          if (v22)
            v22 = 0;
          else
            v22 = v30;
          continue;
        }
        v18 = v27 + 1;
        goto LABEL_64;
      }
      break;
    }
    if (v28 == 34)
      goto LABEL_41;
    if (v28)
    {
LABEL_57:
      if ((v30 & 0x80000000) != 0)
      {
        if (!__maskrune(v30, 0x4000uLL))
          goto LABEL_62;
      }
      else if ((*(_DWORD *)(v8 + 4 * v30 + 60) & 0x4000) == 0)
      {
        goto LABEL_62;
      }
      if (!v22)
      {
        v17 = v23 + 1;
        v49[(int)v23] = 0;
        ++v16;
        v3 = v21;
        v1 = v47;
        if (v30)
          goto LABEL_22;
        goto LABEL_67;
      }
LABEL_62:
      v24 = v49;
LABEL_64:
      v24[v23++] = v30;
      if (v26 == (_DWORD)v23)
      {
        v44 = "line is too long";
LABEL_70:
        v36 = v50;
        fprintf(v50, "Parse error: %s\n", v44);
        v3 = v21;
        v1 = v47;
        goto LABEL_94;
      }
      continue;
    }
    break;
  }
  v24[(int)v23] = 0;
  v44 = "unmatched quote";
  if (v22)
    goto LABEL_70;
  v16 = (v16 + 1);
  v3 = v21;
  v1 = v47;
LABEL_72:
  v36 = v50;
  v35 = v51;
LABEL_73:
  v37 = CFStringCreateWithCString(alloc, *v35, 0x8000100u);
  if (!v37)
  {
    fprintf(v36, "%s: command string could not be created\n");
    goto LABEL_87;
  }
  v38 = v37;
  pthread_mutex_lock(*(pthread_mutex_t **)(v1 + 8));
  Value = (pthread_mutex_t **)CFDictionaryGetValue(*(CFDictionaryRef *)v1, v38);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 8));
  CFRelease(v38);
  if (!Value)
  {
    fprintf(v36, "%s: no such command found, use 'help' to list available commands\n");
LABEL_87:
    if (*(_BYTE *)(v1 + 44))
      goto LABEL_94;
    goto LABEL_100;
  }
  if ((int)*MEMORY[0x1E0C844E0] >= 2)
  {
    *MEMORY[0x1E0C844E0] = 1;
    *MEMORY[0x1E0C844F0] = 1;
  }
  v35[(int)v16] = 0;
  if (gLogCategory_APSIntrospector <= 30
    && (gLogCategory_APSIntrospector != -1 || _LogCategory_Initialize()))
  {
    Mutable = CFStringCreateMutable(alloc, 0);
    if ((int)v16 >= 1)
    {
      v41 = v16;
      v42 = v51;
      do
      {
        v43 = (uint64_t)*v42++;
        CFStringAppendFormat(Mutable, 0, CFSTR("'%s' "), v43);
        --v41;
      }
      while (v41);
    }
    if (gLogCategory_APSIntrospector <= 30
      && (gLogCategory_APSIntrospector != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFRelease(Mutable);
    v36 = v50;
    v35 = v51;
    v3 = v46;
  }
  pthread_mutex_lock(Value[3]);
  ((void (*)(pthread_mutex_t *, FILE *, uint64_t, const char **))*Value)(Value[1], v36, v16, v35);
  pthread_mutex_unlock(Value[3]);
  if (!*((_BYTE *)Value + 32))
    goto LABEL_94;
LABEL_100:
  v2 = -1;
LABEL_101:
  free(*(void **)v4);
  if (v4[36])
    close(*((_DWORD *)v4 + 8));
  free(v4);
  free(v3);
  free(v49);
  free(v51);
  result = (uint64_t)v50;
  if (v50)
    result = fclose(v50);
  if ((v2 & 0x80000000) == 0)
  {
    result = close(v2);
    if ((_DWORD)result)
    {
      result = (uint64_t)__error();
      if (*(_DWORD *)result)
        return (uint64_t)__error();
    }
  }
  return result;
}

CFTypeRef __introsp_cmdHelp_block_invoke(CFTypeRef result, CFTypeRef cf, uint64_t a3)
{
  uint64_t v4;

  if (*(_QWORD *)(a3 + 16))
  {
    v4 = (uint64_t)result;
    result = CFRetain(cf);
    *(_QWORD *)(*(_QWORD *)(v4 + 40) + 16 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8) + 24)) = result;
    *(_QWORD *)(*(_QWORD *)(v4 + 40) + 16 * (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8) + 24))++ + 8) = *(_QWORD *)(a3 + 16);
  }
  return result;
}

CFComparisonResult compareDescriptions(CFStringRef *a1, CFStringRef *a2)
{
  return CFStringCompare(*a1, *a2, 0);
}

void APSIntrospectorSetCommandContext(const void *a1, pthread_mutex_t *a2)
{
  uint64_t v4;
  pthread_mutex_t **Value;

  if (APSIntrospectorInit_once != -1)
    dispatch_once_f(&APSIntrospectorInit_once, 0, (dispatch_function_t)introsp_init);
  v4 = gIntrospector;
  if (gIntrospector)
  {
    if (a1)
    {
      pthread_mutex_lock(*(pthread_mutex_t **)(gIntrospector + 8));
      Value = (pthread_mutex_t **)CFDictionaryGetValue(*(CFDictionaryRef *)v4, a1);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 8));
      if (Value)
      {
        pthread_mutex_lock(Value[3]);
        Value[1] = a2;
        pthread_mutex_unlock(Value[3]);
      }
      else if (gLogCategory_APSIntrospector <= 90
             && (gLogCategory_APSIntrospector != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else
    {
      APSLogErrorAt(0);
    }
  }
}

void APSIntrospectorCollectionShow(NSObject **a1, uint64_t a2, int a3, uint64_t a4)
{
  NSObject *v6;
  _QWORD *v7;
  _QWORD v8[6];
  _QWORD block[6];

  if (a3 < 2)
  {
    v6 = *a1;
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 0x40000000;
    v8[2] = __APSIntrospectorCollectionShow_block_invoke_2;
    v8[3] = &__block_descriptor_tmp_12_2040;
    v8[4] = a1;
    v8[5] = a2;
    v7 = v8;
  }
  else
  {
    if (strcmp(*(const char **)(a4 + 8), "count"))
    {
      FPrintF();
      return;
    }
    v6 = *a1;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __APSIntrospectorCollectionShow_block_invoke;
    block[3] = &__block_descriptor_tmp_2038;
    block[4] = a1;
    block[5] = a2;
    v7 = block;
  }
  dispatch_sync(v6, v7);
}

void APSIntrospectorInit()
{
  if (APSIntrospectorInit_once != -1)
    dispatch_once_f(&APSIntrospectorInit_once, 0, (dispatch_function_t)introsp_init);
}

uint64_t APSCMNotificationCenterPostNotificationAsync(const void *a1, const void *a2, const void *a3, const void *a4, int a5, NSObject *a6, dispatch_qos_class_t qos_class)
{
  dispatch_block_t v12;
  void *v13;
  _QWORD block[8];
  int v16;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __APSCMNotificationCenterPostNotificationAsync_block_invoke;
  block[3] = &__block_descriptor_tmp_2048;
  block[4] = a1;
  block[5] = a2;
  block[6] = a3;
  block[7] = a4;
  v16 = a5;
  v12 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, qos_class, 0, block);
  if (!v12)
    return 4294960568;
  v13 = v12;
  if (a1)
    CFRetain(a1);
  if (a2)
    CFRetain(a2);
  if (a3)
    CFRetain(a3);
  if (a4)
    CFRetain(a4);
  dispatch_async(a6, v13);
  _Block_release(v13);
  return 0;
}

uint64_t APSHTTPParseByteRangeRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  *a4 = 0;
  *a5 = -1;
  result = HTTPParseByteRangeRequest();
  if (!(_DWORD)result)
  {
    v9 = *a4;
    v10 = *a5;
    if (*a4 < 0)
    {
      if (v10 != -1)
        return 4294960586;
      *a4 = v9 + a3;
    }
    else if ((v10 & 0x8000000000000000) == 0 && v10 <= a3)
    {
      goto LABEL_9;
    }
    *a5 = a3;
    v9 = *a4;
    v10 = a3;
    if (*a4 < 0)
    {
LABEL_13:
      if (gLogCategory_AirPlayHTTPUtilities <= 50
        && (gLogCategory_AirPlayHTTPUtilities != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      return 4294960586;
    }
LABEL_9:
    if (v10 <= a3 && v9 < v10)
      return 0;
    goto LABEL_13;
  }
  return result;
}

uint64_t APSHTTPOpenLocalFile(const __CFString *a1, int *a2, off_t *a3)
{
  int CString;
  int v7;
  uint64_t v8;
  __darwin_time_t tv_sec;
  stat v11;
  char buffer[1025];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  bzero(buffer, 0x401uLL);
  memset(&v11, 0, sizeof(v11));
  CString = CFStringGetCString(a1, buffer, 1025, 0x8000100u);
  v7 = -1;
  v8 = 4294960585;
  if (!CString || !buffer[0])
    goto LABEL_21;
  v7 = open(buffer, 0);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_6:
    if (fcntl(v7, 48, 1) && *__error())
      __error();
    if (fcntl(v7, 45, 1) && *__error())
      __error();
    if (!fstat(v7, &v11))
    {
      v8 = 0;
      if (a2)
        goto LABEL_22;
      goto LABEL_26;
    }
    if (*__error())
    {
      v8 = *__error();
      if (v7 < 0)
        goto LABEL_21;
    }
    else
    {
      v8 = 4294960596;
      if (v7 < 0)
        goto LABEL_21;
    }
    if ((_DWORD)v8)
    {
      close(v7);
      v7 = -1;
    }
LABEL_21:
    if (a2)
      goto LABEL_22;
LABEL_26:
    close(v7);
    if (!a3)
      return v8;
    goto LABEL_23;
  }
  if (*__error())
  {
    v8 = *__error();
    if ((_DWORD)v8)
      goto LABEL_21;
    goto LABEL_6;
  }
  v8 = 4294960596;
  if (!a2)
    goto LABEL_26;
LABEL_22:
  *a2 = v7;
  if (a3)
  {
LABEL_23:
    tv_sec = v11.st_mtimespec.tv_sec;
    *a3 = v11.st_size;
    a3[1] = tv_sec;
  }
  return v8;
}

uint64_t APSCryptorCBCCreate(uint64_t a1, const __CFData *a2, const __CFData *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;

  if (!a2)
  {
    v8 = 4294895585;
    APSLogErrorAt(0);
    return v8;
  }
  if (!a3)
  {
    v8 = 4294895585;
    v7 = 0;
LABEL_19:
    APSLogErrorAt(v7);
    return v8;
  }
  if (APSCryptorGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APSCryptorGetClassID_sRegisterOnce, &APSCryptorGetClassID_sClassID, (dispatch_function_t)cryptor_registerBaseClass);
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
  {
    v8 = v7;
    goto LABEL_19;
  }
  CMBaseObjectGetDerivedStorage();
  CFDataGetBytePtr(a2);
  CFDataGetBytePtr(a3);
  v7 = AES_CBCFrame_Init();
  if ((_DWORD)v7)
  {
    v8 = v7;
    goto LABEL_19;
  }
  CFDataGetBytePtr(a2);
  CFDataGetBytePtr(a3);
  v7 = AES_CBCFrame_Init();
  if ((_DWORD)v7)
  {
    v8 = v7;
    goto LABEL_19;
  }
  if (gLogCategory_APSCryptorCBC <= 30 && (gLogCategory_APSCryptorCBC != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v8 = 0;
  *a4 = 0;
  return v8;
}

uint64_t cbcCryptor_GetEncryptionOverheadLength()
{
  return 0;
}

uint64_t cbcCryptor_EncryptMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v9;
  uint64_t v10;

  CMBaseObjectGetDerivedStorage();
  if (a7 < a5)
  {
    APSLogErrorAt(0);
    return 4294895585;
  }
  else
  {
    v9 = AES_CBCFrame_Update();
    v10 = v9;
    if ((_DWORD)v9)
      APSLogErrorAt(v9);
  }
  return v10;
}

uint64_t cbcCryptor_DecryptMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, unint64_t *a8)
{
  uint64_t v11;
  uint64_t v12;

  CMBaseObjectGetDerivedStorage();
  if (a7 < a5)
  {
    APSLogErrorAt(0);
    return 4294895585;
  }
  else
  {
    v11 = AES_CBCFrame_Update();
    if ((_DWORD)v11)
    {
      v12 = v11;
      APSLogErrorAt(v11);
    }
    else
    {
      v12 = 0;
      if (a8)
        *a8 = a5;
    }
  }
  return v12;
}

uint64_t cbcCryptor_Finalize()
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSCryptorCBC <= 30 && (gLogCategory_APSCryptorCBC != -1 || _LogCategory_Initialize()))
    LogPrintF();
  AES_CBCFrame_Final();
  return AES_CBCFrame_Final();
}

__CFString *cbcCryptor_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APSCryptorCBC %p>"), a1);
  return Mutable;
}

uint64_t APSWiFiTransactionGetTypeID()
{
  if (gAPSWiFiTransactionInitOnce != -1)
    dispatch_once_f(&gAPSWiFiTransactionInitOnce, 0, (dispatch_function_t)_APSWiFiTransactionGetTypeID);
  return gAPSWiFiTransactionTypeID;
}

uint64_t _APSWiFiTransactionGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSWiFiTransactionTypeID = result;
  return result;
}

void _APSWiFiTransactionFinalize(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  const void *v6;
  int8x16_t v7;
  _QWORD v8[4];
  int8x16_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD block[5];

  v2 = MEMORY[0x1E0C809B0];
  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(_QWORD *)(a1 + 16);
    v7 = *(int8x16_t *)(a1 + 48);
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = ___APSWiFiTransactionFinalize_block_invoke;
    v8[3] = &__block_descriptor_64_e8_v16__0q8l;
    v9 = vextq_s8(v7, v7, 8uLL);
    v10 = v3;
    v11 = a1;
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0DD9A08], "shared"), "endTransaction:completionHandler:", v3, v8);
  }
  v4 = *(NSObject **)(a1 + 32);
  block[0] = v2;
  block[1] = 3221225472;
  block[2] = ___APSWiFiTransactionPostTransactionReleasedEvent_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  dispatch_sync(v4, block);
  v5 = *(NSObject **)(a1 + 32);
  if (v5)
  {
    dispatch_release(v5);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v6 = *(const void **)(a1 + 24);
  if (v6)
  {
    _Block_release(v6);
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t APSWiFiTransactionCreate(unsigned int a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t Instance;
  uint64_t v9;
  dispatch_queue_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  _QWORD v17[5];
  char label[16];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v20 = 0u;
  v21 = 0u;
  *(_OWORD *)label = 0u;
  v19 = 0u;
  if (a4)
  {
    if (gAPSWiFiTransactionInitOnce != -1)
      dispatch_once_f(&gAPSWiFiTransactionInitOnce, 0, (dispatch_function_t)_APSWiFiTransactionGetTypeID);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v9 = Instance;
      *(_OWORD *)(Instance + 16) = 0u;
      *(_OWORD *)(Instance + 32) = 0u;
      *(_QWORD *)(Instance + 48) = a2;
      *(_QWORD *)(Instance + 56) = a3;
      v16 = Instance;
      SNPrintF();
      v10 = dispatch_queue_create(label, 0);
      *(_QWORD *)(v9 + 32) = v10;
      if (v10)
      {
        if (a1 >= 4)
        {
          v14 = **(_DWORD **)(v9 + 56);
          if (v14 <= 90 && (v14 != -1 || _LogCategory_Initialize()))
            LogPrintF();
          v13 = 4294960591;
        }
        else
        {
          *(_QWORD *)(v9 + 16) = qword_1C96DA788[a1];
          CFRetain((CFTypeRef)v9);
          v11 = (void *)objc_msgSend(MEMORY[0x1E0DD9A08], "shared", v16);
          v12 = *(_QWORD *)(v9 + 16);
          v17[0] = MEMORY[0x1E0C809B0];
          v17[1] = 3221225472;
          v17[2] = __APSWiFiTransactionCreate_block_invoke;
          v17[3] = &__block_descriptor_40_e8_v16__0q8l;
          v17[4] = v9;
          objc_msgSend(v11, "beginTransaction:completionHandler:", v12, v17);
          v13 = 0;
          *a4 = CFRetain((CFTypeRef)v9);
        }
      }
      else
      {
        APSLogErrorAt(0);
        v13 = 4294960568;
      }
      CFRelease((CFTypeRef)v9);
    }
    else
    {
      APSLogErrorAt(0);
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  return v13;
}

void APSWiFiTransactionSetReleaseHandler(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *(NSObject **)(a1 + 32);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __APSWiFiTransactionSetReleaseHandler_block_invoke;
  v3[3] = &unk_1E828B558;
  v3[4] = a2;
  v3[5] = a1;
  dispatch_sync(v2, v3);
}

CFAllocatorRef APSCreateSecureMemAllocator()
{
  CFAllocatorContext v1;

  *(_OWORD *)&v1.copyDescription = xmmword_1E828B638;
  *(_OWORD *)&v1.reallocate = unk_1E828B648;
  v1.preferredSize = 0;
  memset(&v1, 0, 32);
  return CFAllocatorCreate(0, &v1);
}

_QWORD *keyHolder_secureMemAllocateCallBack(uint64_t a1)
{
  _QWORD *v2;

  v2 = malloc_type_calloc(1uLL, a1 + 16, 0x6050AD5AuLL);
  if (v2)
  {
    *v2 = a1;
    v2[1] = 0xFECA00EEFFC0ADBALL;
    return v2 + 2;
  }
  else
  {
    APSLogErrorAt(0);
    return 0;
  }
}

void keyHolder_secureMemDeallocateCallBack(_BYTE *a1)
{
  uint64_t *v1;
  uint64_t i;

  if (a1)
  {
    v1 = (uint64_t *)(a1 - 16);
    if (*((_QWORD *)a1 - 1) == 0xFECA00EEFFC0ADBALL)
    {
      for (i = *v1; i; --i)
        *a1++ = 0;
      free(v1);
    }
    else if (gLogCategory_APSKeyHolderCommon <= 90
           && (gLogCategory_APSKeyHolderCommon != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
}

uint64_t APSKeyHolderGetClassID()
{
  if (APSKeyHolderGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APSKeyHolderGetClassID_sRegisterOnce, &APSKeyHolderGetClassID_sClassID, (dispatch_function_t)keyHolder_registerBaseClass);
  return APSKeyHolderGetClassID_sClassID;
}

uint64_t keyHolder_registerBaseClass()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFStringRef keyHolder_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[APSKeyHolder %p]"), a1);
}

uint64_t APSKeyHolderGetTypeID()
{
  if (APSKeyHolderGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APSKeyHolderGetClassID_sRegisterOnce, &APSKeyHolderGetClassID_sClassID, (dispatch_function_t)keyHolder_registerBaseClass);
  return CMBaseClassGetCFTypeID();
}

uint64_t APSContiguousAllocatorGetTypeID()
{
  if (gAPSContiguousAllocatorInitOnce != -1)
    dispatch_once_f(&gAPSContiguousAllocatorInitOnce, 0, (dispatch_function_t)_APSContiguousAllocatorGetTypeID);
  return gAPSContiguousAllocatorTypeID;
}

uint64_t _APSContiguousAllocatorGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSContiguousAllocatorTypeID = result;
  return result;
}

void _APSContiguousAllocatorFinalize(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 24);
  if (v1)
  {
    malloc_zone_free(*(malloc_zone_t **)(a1 + 16), v1);
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t APSContiguousAllocatorCreate(size_t a1, malloc_zone_t *a2, int a3, unsigned int a4, uint64_t *a5)
{
  uint64_t Instance;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  if (gAPSContiguousAllocatorInitOnce != -1)
    dispatch_once_f(&gAPSContiguousAllocatorInitOnce, 0, (dispatch_function_t)_APSContiguousAllocatorGetTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    APSLogErrorAt(0);
    return 4294960568;
  }
  v11 = Instance;
  v12 = 4294895215;
  *(_QWORD *)(Instance + 96) = 0;
  *(_OWORD *)(Instance + 64) = 0u;
  *(_OWORD *)(Instance + 80) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  *(_OWORD *)(Instance + 48) = 0u;
  *(_OWORD *)(Instance + 16) = 0u;
  if (a1 < 5)
  {
LABEL_22:
    APSLogErrorAt(0);
    CFRelease((CFTypeRef)v11);
    return v12;
  }
  if (!a2)
    a2 = malloc_default_zone();
  *(_QWORD *)(v11 + 16) = a2;
  *(_DWORD *)(v11 + 72) = a3;
  *(_QWORD *)(v11 + 88) = a1;
  *(_QWORD *)(v11 + 56) = a1;
  *(_QWORD *)(v11 + 64) = a4;
  if (a4)
    v13 = (char *)malloc_type_zone_memalign(a2, a4, a1, 0xE06AD371uLL);
  else
    v13 = (char *)malloc_type_zone_calloc(a2, 1uLL, a1, 0x24EDA8AAuLL);
  *(_QWORD *)(v11 + 24) = v13;
  if (!v13)
  {
    v12 = 4294895216;
    goto LABEL_22;
  }
  if (*(_QWORD *)(v11 + 64))
  {
    bzero(v13, a1);
    v13 = *(char **)(v11 + 24);
  }
  *(_QWORD *)(v11 + 32) = &v13[*(_QWORD *)(v11 + 56)];
  *(_QWORD *)(v11 + 40) = v13;
  *(_QWORD *)(v11 + 48) = v13;
  if (gLogCategory_APSContiguousAllocator <= 50
    && (gLogCategory_APSContiguousAllocator != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v12 = 0;
  *a5 = v11;
  return v12;
}

uint64_t APSContiguousAllocatorAcquireBlock(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v11 = 4294895215;
LABEL_40:
    APSLogErrorAt(0);
LABEL_30:
    if (gLogCategory_APSContiguousAllocator <= 20
      && (gLogCategory_APSContiguousAllocator != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return v11;
  }
  if (*(_DWORD *)(a1 + 72) > a2)
  {
    v11 = 4294895215;
    goto LABEL_40;
  }
  v3 = *(_QWORD *)(a1 + 64);
  if (v3 && a2 % v3)
  {
    v11 = 4294895215;
    goto LABEL_40;
  }
  if (a2 >= 0xFFFFFFFC)
  {
    v11 = 4294895215;
    goto LABEL_40;
  }
  if (!a3)
  {
    v11 = 4294895215;
    goto LABEL_40;
  }
  v4 = a2 + 4;
  v6 = *(unsigned int **)(a1 + 40);
  v5 = *(unsigned int **)(a1 + 48);
  if (v5 <= v6 && *(_QWORD *)(a1 + 80))
  {
    if (v5 >= v6)
    {
      if (v5 != v6 || *(_QWORD *)(a1 + 88) == *(_QWORD *)(a1 + 96))
        goto LABEL_23;
      goto LABEL_41;
    }
    if (v4 > (int)v6 - (int)v5)
      goto LABEL_23;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 32) - (_QWORD)v5;
    if (v4 > v7)
    {
      v5 = *(unsigned int **)(a1 + 24);
      if (v4 > (int)v6 - (int)v5)
      {
LABEL_23:
        v11 = 4294895212;
        if (gLogCategory_APSContiguousAllocator > 20)
          return v11;
        if (gLogCategory_APSContiguousAllocator != -1 || _LogCategory_Initialize())
          LogPrintF();
        goto LABEL_30;
      }
      *(_QWORD *)(a1 + 96) = v7;
    }
  }
  *v5 = a2;
  *(_QWORD *)(a1 + 48) = (char *)v5 + v4;
  v8 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v8 + v4;
  v9 = *(_QWORD *)(a1 + 56);
  if (v8 + v4 > v9 || (v10 = *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 88) = v10 - v4, v10 - v4 < 0) || v10 + v8 != v9)
  {
LABEL_41:
    APSLogErrorAt(0);
    v11 = 4294895214;
    goto LABEL_30;
  }
  *a3 = v5 + 1;
  if (gLogCategory_APSContiguousAllocator <= 10
    && (gLogCategory_APSContiguousAllocator != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return 0;
}

uint64_t APSContiguousAllocatorGetFirstAcquiredBlock(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = 4294895213;
  if (a1)
  {
    if (a2)
    {
      v2 = 0;
      if (*(_QWORD *)(a1 + 80))
        *a2 = *(_QWORD *)(a1 + 40) + 4;
      else
        *a2 = 0;
      return v2;
    }
    v2 = 4294895215;
  }
  APSLogErrorAt(0);
  if (gLogCategory_APSContiguousAllocator <= 90
    && (gLogCategory_APSContiguousAllocator != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v2;
}

uint64_t APSContiguousAllocatorRelinquishBlock(_QWORD *a1, unint64_t a2, unsigned int a3, _DWORD *a4)
{
  uint64_t v8;
  int v9;
  unint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;

  v8 = 4294895215;
  if (!a1 || !a3 || !a2 || a1[5] + 4 != a2 || a1[3] > a2 || a1[4] <= a2)
    goto LABEL_37;
  v9 = *(_DWORD *)(a2 - 4);
  if (gLogCategory_APSContiguousAllocator <= 10
    && (gLogCategory_APSContiguousAllocator != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v9 == a3)
  {
    bzero((void *)(a1[5] + 4), a3);
    *(_DWORD *)(a2 - 4) = 0;
    v10 = a1[4];
    v11 = (_DWORD *)(a1[5] + a3 + 4);
    a1[5] = v11;
    if ((unint64_t)v11 >= v10
      || (((_DWORD)v10 - (_DWORD)v11) & 0xFFFFFFFC) == 0
      || !*v11 && v11 != (_DWORD *)a1[6])
    {
      v11 = (_DWORD *)a1[3];
      a1[5] = v11;
      a1[12] = 0;
    }
    if (a4
      && v11 + 1 != a4
      && gLogCategory_APSContiguousAllocator <= 90
      && (gLogCategory_APSContiguousAllocator != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v12 = a1[10] - (a3 + 4);
    a1[10] = v12;
    v8 = 4294895214;
    if ((v12 & 0x8000000000000000) == 0)
    {
      v13 = a1[11] + a3 + 4;
      a1[11] = v13;
      v14 = a1[7];
      if (v13 > v14 && gLogCategory_APSContiguousAllocator <= 90)
      {
        if (gLogCategory_APSContiguousAllocator != -1
          || (v15 = _LogCategory_Initialize(), v13 = a1[11], v14 = a1[7], v15))
        {
          LogPrintF();
          v13 = a1[11];
          v14 = a1[7];
        }
      }
      if (v13 <= v14)
      {
        if (gLogCategory_APSContiguousAllocator <= 10)
        {
          if (gLogCategory_APSContiguousAllocator != -1
            || (v16 = _LogCategory_Initialize(), v13 = a1[11], v14 = a1[7], v16))
          {
            LogPrintF();
            v13 = a1[11];
            v14 = a1[7];
          }
        }
        if (a1[10] + v13 == v14)
          return 0;
      }
    }
  }
LABEL_37:
  APSLogErrorAt(0);
  if (gLogCategory_APSContiguousAllocator <= 90
    && (gLogCategory_APSContiguousAllocator != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v8;
}

uint64_t APSContiguousAllocatorRelinquishBlockFromAddress(_QWORD *a1, unint64_t a2, int a3)
{
  uint64_t v3;
  unint64_t v7;
  int *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  size_t v19;

  v3 = 4294895214;
  if (!a1)
  {
    v3 = 4294895215;
    goto LABEL_35;
  }
  if (!a3 || !a2 || (v7 = a1[3], v7 > a2) || a1[4] <= a2)
  {
    v3 = 4294895215;
    goto LABEL_35;
  }
  v8 = (int *)(a2 - 4);
  if (a2 - 4 < v7)
  {
    v3 = 4294895215;
    goto LABEL_35;
  }
  v9 = *v8;
  if (gLogCategory_APSContiguousAllocator <= 30
    && (gLogCategory_APSContiguousAllocator != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!v9)
    return 0;
  if (v9 != a3)
  {
    v3 = 4294895215;
    goto LABEL_35;
  }
  v11 = a1[5];
  v10 = a1[6];
  if (v10 > v11)
  {
    if (v10 >= a1[4])
      goto LABEL_35;
    v12 = v10 - (_QWORD)v8;
    bzero((void *)(a2 - 4), v10 - (_QWORD)v8);
    v13 = a1[11] + v12;
    a1[11] = v13;
    if (v13 > a1[7])
      goto LABEL_35;
    goto LABEL_19;
  }
  if ((unint64_t)v8 < v10)
  {
    v12 = v10 - (_QWORD)v8;
    bzero((void *)(a2 - 4), v10 - (_QWORD)v8);
    v14 = a1[11] + v12;
    a1[11] = v14;
    if (v14 > a1[7])
      goto LABEL_35;
LABEL_19:
    a1[10] -= v12;
LABEL_24:
    a1[6] = v8;
    if (gLogCategory_APSContiguousAllocator <= 30
      && (gLogCategory_APSContiguousAllocator != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (a1[10] + a1[11] != a1[7])
      goto LABEL_35;
    return 0;
  }
  if ((unint64_t)v8 >= v11)
  {
    v15 = (void *)a1[3];
    v16 = v10 - (_QWORD)v15;
    bzero(v15, v10 - (_QWORD)v15);
    v17 = a1[11] + v16;
    a1[11] = v17;
    if (v17 <= a1[7])
    {
      a1[10] -= v16;
      v18 = a1[4] - ((_QWORD)v8 + a1[12]);
      bzero((void *)(a2 - 4), v18);
      v19 = a1[11] + v18;
      a1[11] = v19;
      if (v19 <= a1[7])
      {
        a1[10] -= v18;
        a1[12] = 0;
        goto LABEL_24;
      }
    }
  }
LABEL_35:
  APSLogErrorAt(0);
  if (gLogCategory_APSContiguousAllocator <= 90
    && (gLogCategory_APSContiguousAllocator != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v3;
}

uint64_t APSContiguousAllocatorGetTotalFreeBlockSize(uint64_t a1)
{
  if (a1)
    return *(_QWORD *)(a1 + 88);
  APSLogErrorAt(0);
  return 0;
}

uint64_t APSContiguousAllocatorGetNextAvailableBlockSize(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;

  if (!a1)
  {
    APSLogErrorAt(0);
    return 0;
  }
  v2 = a1[5];
  v1 = a1[6];
  if (v1 > v2 || !a1[10])
  {
    v3 = a1[4] - v1;
    v4 = v2 - a1[3];
    if (v4 > v3)
      v3 = v4;
    goto LABEL_8;
  }
  if (v1 < v2)
  {
    v3 = v2 - v1;
LABEL_8:
    v5 = v3 >= 4;
    v6 = v3 - 4;
    if (!v5)
      v6 = 0;
    goto LABEL_10;
  }
  v6 = 0;
LABEL_10:
  if (v6 >= 0xFFFFFFFF)
    return 0xFFFFFFFFLL;
  else
    return v6;
}

void APSVolumeConvertDBToLinearGain(float a1)
{
  if (a1 > -30.0)
    __exp10f(a1 / 20.0);
}

float APSVolumeConvertLinearGainToDB(float a1)
{
  if (a1 <= 0.0)
    return -144.0;
  else
    return log10f(a1) * 20.0;
}

float APSVolumeConvertSliderValueToDB()
{
  double v0;

  TranslateValue();
  return v0;
}

float APSVolumeConvertDBToSliderValue()
{
  double v0;

  TranslateValue();
  return v0;
}

uint64_t APSVolumeConvertDBToClampedSliderValue()
{
  double v0;
  uint64_t result;
  double v2;
  float v3;
  double v4;

  TranslateValue();
  *(float *)&v0 = v0;
  if (*(float *)&v0 > 1.0 || (result = TranslateValue(), v3 = v2, v3 >= 0.0))
  {
    result = TranslateValue();
    *(float *)&v4 = v4;
    if (*(float *)&v4 <= 1.0)
      return TranslateValue();
  }
  return result;
}

void APSVolumeConvertSliderValueToLinearGain()
{
  double v0;
  float v1;

  TranslateValue();
  v1 = v0;
  if (v1 > -30.0)
    __exp10f(v1 / 20.0);
}

float APSVolumeConvertLinearGainToSliderValue(float a1)
{
  double v1;

  if (a1 > 0.0)
    log10f(a1);
  TranslateValue();
  return v1;
}

BOOL APSVolumeDBValuesAreNoticeablyDifferent(float a1, float a2)
{
  double v4;
  float v5;
  double v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;

  TranslateValue();
  *(float *)&v4 = v4;
  v5 = fabsf(*(float *)&v4 + 30.0);
  TranslateValue();
  *(float *)&v6 = v6;
  v7 = fabsf(*(float *)&v6 + 30.0);
  if (fabsf(a1 + 144.0) >= v5)
    v8 = a1;
  else
    v8 = -30.0;
  if (fabsf(a2 + 144.0) >= v5)
    v9 = a2;
  else
    v9 = -30.0;
  if (fabsf(v8 + 30.0) >= 0.00000011921)
  {
    v10 = fabsf(v9 + 30.0);
    v11 = fabsf(v8);
    if (fabsf(v9) >= 0.00000011921 && v11 >= 0.00000011921 && v10 >= 0.00000011921)
      v7 = v5;
  }
  return vabds_f32(v8, v9) >= v7;
}

BOOL APSVolumeSliderValuesAreNoticeablyDifferent(float a1, float a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  float v9;
  float v10;
  double v11;
  float v12;
  double v13;
  float v14;
  double v15;
  float v16;

  TranslateValue();
  *(float *)&v4 = v4;
  if (vabds_f32(a1, *(float *)&v4) < 0.0099999)
  {
    TranslateValue();
    a1 = v5;
  }
  TranslateValue();
  *(float *)&v6 = v6;
  if (vabds_f32(a2, *(float *)&v6) < 0.0099999)
  {
    TranslateValue();
    a2 = v7;
  }
  TranslateValue();
  *(float *)&v8 = v8;
  v9 = vabds_f32(a1, *(float *)&v8);
  v10 = 0.00000011921;
  if (v9 >= 0.00000011921)
  {
    TranslateValue();
    *(float *)&v11 = v11;
    v12 = vabds_f32(a2, *(float *)&v11);
    v10 = 0.00000011921;
    if (v12 >= 0.00000011921)
    {
      TranslateValue();
      *(float *)&v13 = v13;
      v14 = vabds_f32(a1, *(float *)&v13);
      v10 = 0.00000011921;
      if (v14 >= 0.00000011921)
      {
        TranslateValue();
        *(float *)&v15 = v15;
        v16 = vabds_f32(a2, *(float *)&v15);
        v10 = 0.00000011921;
        if (v16 >= 0.00000011921)
          v10 = 0.0099999;
      }
    }
  }
  return vabds_f32(a1, a2) >= v10;
}

BOOL APSVolumeLinearGainValuesAreNoticeablyDifferent(float a1, float a2)
{
  float v4;

  APSVolumeConvertSliderValueToLinearGain();
  return vabds_f32(a1, a2) >= fabsf(v4);
}

const char *APSGetVolumeFadeTypeName(int a1)
{
  const char *v1;

  v1 = "Invalid";
  if (a1 == 2)
    v1 = "FadeOut";
  if (a1 == 1)
    return "FadeIn";
  else
    return v1;
}

uint64_t APSVolumeControlTypeFromEx(uint64_t a1, int a2)
{
  uint64_t result;

  result = 0;
  switch((int)a1)
  {
    case 1:
    case 2:
      result = a1;
      break;
    case 4:
      result = 3;
      break;
    case 8:
      result = 4;
      break;
    case 9:
      if (a2)
        result = 4;
      else
        result = 1;
      break;
    case 10:
      if (a2)
        result = 4;
      else
        result = 2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t APSVolumeControlTypeToEx(int a1)
{
  if ((a1 - 1) > 3)
    return 0;
  else
    return dword_1C96DABA0[a1 - 1];
}

const char *APSGetAPVolumeControlTypeName(unsigned int a1)
{
  if (a1 > 4)
    return "Unknown";
  else
    return off_1E828B6E0[a1];
}

const char *APSGetFigEndpointVolumeControlTypeName(unint64_t a1)
{
  if (a1 > 3)
    return "Unknown";
  else
    return off_1E828B708[a1];
}

const char *APSGetAPMuteControlTypeName(int a1)
{
  if ((a1 - 1) > 3)
    return "Unknown";
  else
    return off_1E828B728[a1 - 1];
}

uint64_t APSRotatingKeyMapperInitialize(uint64_t a1)
{
  uint64_t v2;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v4;
  CFMutableDictionaryRef v5;
  CFMutableDictionaryRef v6;
  CFMutableDictionaryRef v7;
  uint64_t result;

  if (*(_BYTE *)a1)
  {
    APSLogErrorAt(0);
    return 0;
  }
  else
  {
    v2 = FigSimpleMutexCreate();
    *(_QWORD *)(a1 + 8) = v2;
    if (!v2)
      goto LABEL_10;
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(a1 + 16) = Mutable;
    if (!Mutable)
      goto LABEL_10;
    v4 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(a1 + 24) = v4;
    if (!v4)
      goto LABEL_10;
    v5 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(a1 + 32) = v5;
    if (v5
      && (v6 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]),
          (*(_QWORD *)(a1 + 40) = v6) != 0)
      && (v7 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]),
          (*(_QWORD *)(a1 + 48) = v7) != 0))
    {
      result = 0;
      *(_BYTE *)a1 = 1;
    }
    else
    {
LABEL_10:
      APSLogErrorAt(0);
      APSRotatingKeyMapperClear(a1);
      return 4294960568;
    }
  }
  return result;
}

_BYTE *APSRotatingKeyMapperIsInitialized(_BYTE *result)
{
  if (result)
    return (_BYTE *)(*result != 0);
  return result;
}

uint64_t APSRotatingKeyMapperSetDesiredKeyForID(uint64_t a1, const void *a2, const void *a3, const void **a4)
{
  int v8;
  const void *Value;
  const void *v10;
  const void *v11;
  const void *v12;
  __CFDictionary *v13;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if (a3)
    v8 = CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 32), a3);
  else
    v8 = 0;
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), a2);
  v10 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), a2);
  if (v10)
    v11 = v10;
  else
    v11 = Value;
  if (v11 != a3)
  {
    v12 = v10;
    if (!a3 || !v11 || !CFEqual(a3, v11))
    {
      if (a3 && !v8)
      {
        if (v12)
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 48), v12);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), a2, a3);
        v13 = *(__CFDictionary **)(a1 + 48);
LABEL_22:
        CFDictionarySetValue(v13, a3, a2);
        goto LABEL_23;
      }
      if (v12)
      {
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 40), a2);
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 48), v12);
      }
      if (v8)
      {
        if (Value)
        {
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 32), Value);
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), a2);
        }
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), a2, a3);
        v13 = *(__CFDictionary **)(a1 + 24);
        goto LABEL_22;
      }
    }
  }
LABEL_23:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  if (a4)
    *a4 = APSRotatingKeyMapperCopyDataForID(a1, a2);
  return 0;
}

const void *APSRotatingKeyMapperCopyDataForID(uint64_t a1, const void *a2)
{
  const void *Value;
  const void *v5;
  const void *v6;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), a2);
  if (Value)
  {
    v5 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), Value);
    v6 = v5;
    if (v5)
      CFRetain(v5);
  }
  else
  {
    v6 = 0;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v6;
}

uint64_t APSRotatingKeyMapperRemoveID(uint64_t a1, const void *a2)
{
  const void *Value;
  const void *v5;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), a2);
  v5 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), a2);
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), a2);
  if (Value)
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), Value);
  if (v5)
  {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 40), a2);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 48), v5);
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return 0;
}

uint64_t APSRotatingKeyMapperSetDataForKey(uint64_t a1, const void *a2, const void *a3, _QWORD *a4)
{
  const void *Value;
  const void *v9;
  const void *v10;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 32), a2))
  {
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), 0);
  }
  else
  {
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 48), a2);
    if (Value)
    {
      v9 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), Value);
      if (v9)
      {
        v10 = v9;
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 32), v9);
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), v10);
      }
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 40), Value);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 48), a2);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), Value, a2);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), a2, Value);
    }
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, a3);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  if (a4)
  {
    *a4 = Value;
    if (Value)
      CFRetain(Value);
  }
  return 0;
}

uint64_t APSRemoteConfigGetTypeID()
{
  if (gAPSRemoteConfigInitOnce != -1)
    dispatch_once_f(&gAPSRemoteConfigInitOnce, 0, (dispatch_function_t)_APSRemoteConfigGetTypeID);
  return gAPSRemoteConfigTypeID;
}

uint64_t _APSRemoteConfigGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSRemoteConfigTypeID = result;
  return result;
}

void _APSRemoteConfigFinalize(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  const void *v6;
  const void *v7;
  const void *v8;

  if (gLogCategory_APSRemoteConfig <= 50
    && (gLogCategory_APSRemoteConfig != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_source_cancel(v2);
    if (*(_BYTE *)(a1 + 64))
    {
      dispatch_resume(*(dispatch_object_t *)(a1 + 56));
      *(_BYTE *)(a1 + 64) = 0;
    }
    dispatch_release(*(dispatch_object_t *)(a1 + 56));
    *(_QWORD *)(a1 + 56) = 0;
  }
  v3 = *(NSObject **)(a1 + 48);
  if (v3)
  {
    dispatch_sync_f(v3, 0, (dispatch_function_t)remoteConfig_nop);
    v4 = *(NSObject **)(a1 + 48);
    if (v4)
    {
      dispatch_release(v4);
      *(_QWORD *)(a1 + 48) = 0;
    }
  }
  v5 = *(NSObject **)(a1 + 72);
  if (v5)
  {
    dispatch_release(v5);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v6 = *(const void **)(a1 + 32);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v7 = *(const void **)(a1 + 40);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 40) = 0;
  }
  FigSimpleMutexDestroy();
  v8 = *(const void **)(a1 + 16);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

CFTypeRef _APSRemoteConfigCreate(const __CFSet *a1, unsigned int a2)
{
  _OWORD *Instance;
  uint64_t v5;
  const __CFAllocator *v6;
  CFSetRef Copy;
  uint64_t v8;
  CFMutableDictionaryRef Mutable;
  NSObject *v10;
  NSObject *v11;
  dispatch_source_t v12;
  dispatch_queue_t v13;
  NSObject *v14;
  dispatch_time_t v15;
  CFTypeRef v16;

  if (gAPSRemoteConfigInitOnce != -1)
    dispatch_once_f(&gAPSRemoteConfigInitOnce, 0, (dispatch_function_t)_APSRemoteConfigGetTypeID);
  Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (Instance)
  {
    v5 = (uint64_t)Instance;
    Instance[3] = 0u;
    Instance[4] = 0u;
    Instance[1] = 0u;
    Instance[2] = 0u;
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Copy = CFSetCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1);
    *(_QWORD *)(v5 + 16) = Copy;
    if (!Copy)
      goto LABEL_21;
    v8 = FigSimpleMutexCreate();
    *(_QWORD *)(v5 + 24) = v8;
    if (!v8)
      goto LABEL_21;
    Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(v5 + 32) = Mutable;
    if (!Mutable)
      goto LABEL_21;
    v10 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_BACKGROUND, 0);
    v11 = dispatch_queue_create("APSRemoteConfig.update", v10);
    *(_QWORD *)(v5 + 48) = v11;
    if (!v11)
      goto LABEL_21;
    v12 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v11);
    *(_QWORD *)(v5 + 56) = v12;
    if (v12
      && (*(_BYTE *)(v5 + 64) = 1,
          v13 = dispatch_queue_create("APSRemoteConfig.notification", 0),
          (*(_QWORD *)(v5 + 72) = v13) != 0))
    {
      remoteConfig_update(v5, 1);
      if (a2)
      {
        dispatch_set_context(*(dispatch_object_t *)(v5 + 56), (void *)v5);
        dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v5 + 56), (dispatch_function_t)remoteConfig_updateTimerFire);
        v14 = *(NSObject **)(v5 + 56);
        v15 = dispatch_time(0, 1000000000 * a2);
        dispatch_source_set_timer(v14, v15, 1000000000 * a2, 0x3B9ACA00uLL);
        if (*(_BYTE *)(v5 + 64))
        {
          *(_BYTE *)(v5 + 64) = 0;
          dispatch_resume(*(dispatch_object_t *)(v5 + 56));
        }
      }
      if (gLogCategory_APSRemoteConfig <= 50
        && (gLogCategory_APSRemoteConfig != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v16 = CFRetain((CFTypeRef)v5);
    }
    else
    {
LABEL_21:
      APSLogErrorAt(0);
      v16 = 0;
    }
    CFRelease((CFTypeRef)v5);
  }
  else
  {
    APSLogErrorAt(0);
    return 0;
  }
  return v16;
}

void remoteConfig_update(uint64_t a1, int a2)
{
  const __CFDictionary *Mutable;
  CFIndex Count;
  uint64_t context;
  CFTypeRef cf;
  CFDictionaryRef theDict;

  cf = 0;
  theDict = 0;
  context = a1;
  Mutable = (const __CFDictionary *)FigRCLCreateConfiguration();
  if ((_DWORD)Mutable)
    goto LABEL_15;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  theDict = Mutable;
  if (!Mutable)
    goto LABEL_15;
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
  CFSetApplyFunction(*(CFSetRef *)(a1 + 16), (CFSetApplierFunction)remoteConfig_updateApplier, &context);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
  Count = CFDictionaryGetCount(theDict);
  if (!a2 && Count >= 1)
  {
    if (gLogCategory_APSRemoteConfig <= 50
      && (gLogCategory_APSRemoteConfig != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    Mutable = (const __CFDictionary *)FigDispatchAsyncPostNotification();
    if ((_DWORD)Mutable)
LABEL_15:
      APSLogErrorAt((uint64_t)Mutable);
  }
  if (cf)
    CFRelease(cf);
  if (theDict)
    CFRelease(theDict);
}

void remoteConfig_updateTimerFire(uint64_t a1)
{
  if (gLogCategory_APSRemoteConfig <= 50
    && (gLogCategory_APSRemoteConfig != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  remoteConfig_update(a1, 0);
}

void remoteConfig_updateApplier(void *key, CFMutableDictionaryRef *a2)
{
  const __CFDictionary *v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  CFTypeRef v8;
  __CFDictionary *v9;
  CFMutableDictionaryRef Mutable;
  const void *Value;

  v4 = (const __CFDictionary *)*((_QWORD *)*a2 + 5);
  if (v4)
  {
    Value = CFDictionaryGetValue(v4, key);
    if (Value)
    {
      v5 = (uint64_t)CFRetain(Value);
      goto LABEL_4;
    }
  }
  else if (a2[1])
  {
    v5 = FigRCLCopyCFType();
LABEL_4:
    v6 = (const void *)v5;
    goto LABEL_5;
  }
  v6 = 0;
LABEL_5:
  v7 = CFDictionaryGetValue(*((CFDictionaryRef *)*a2 + 4), key);
  if (v7)
    v8 = CFRetain(v7);
  else
    v8 = 0;
  if (FigCFEqual())
  {
    Mutable = 0;
  }
  else
  {
    if (gLogCategory_APSRemoteConfig <= 50
      && (gLogCategory_APSRemoteConfig != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v9 = (__CFDictionary *)*((_QWORD *)*a2 + 4);
    if (v6)
      CFDictionarySetValue(v9, key, v6);
    else
      CFDictionaryRemoveValue(v9, key);
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      CFDictionaryAddValue(a2[2], key, Mutable);
    }
    else
    {
      APSLogErrorAt(0);
    }
  }
  if (v6)
    CFRelease(v6);
  if (v8)
    CFRelease(v8);
  if (Mutable)
    CFRelease(Mutable);
}

uint64_t APSRemoteConfigGetShared()
{
  if (APSRemoteConfigGetShared_once != -1)
    dispatch_once_f(&APSRemoteConfigGetShared_once, &APSRemoteConfigGetShared_config, (dispatch_function_t)remoteConfig_createShared);
  return APSRemoteConfigGetShared_config;
}

void remoteConfig_createShared(CFTypeRef *a1)
{
  CFSetRef v2;
  const __CFSet *v3;
  unsigned int IntWithOverrideAndDefault;
  const __CFSet *v5;
  const __CFSet *v6;
  const __CFSet *v7;

  v2 = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kAPSRemoteConfigKeyList, 4, MEMORY[0x1E0C9B3B0]);
  if (v2)
  {
    v3 = v2;
    IntWithOverrideAndDefault = APSSettingsGetIntWithOverrideAndDefault(CFSTR("remoteConfigUpdateIntervalSecs"), 0, 3600);
    v5 = (const __CFSet *)_APSRemoteConfigCreate(v3, IntWithOverrideAndDefault);
    if (v5)
    {
      v6 = v5;
      *a1 = CFRetain(v5);
      CFRelease(v3);
      v7 = v6;
    }
    else
    {
      APSLogErrorAt(0);
      *a1 = 0;
      v7 = v3;
    }
    CFRelease(v7);
  }
  else
  {
    APSLogErrorAt(0);
    *a1 = 0;
  }
}

CFTypeRef APSRemoteConfigCopyValue(uint64_t a1, void *value)
{
  CFTypeRef v2;
  uint64_t v4;
  const void *v5;

  if (!a1)
  {
    APSLogErrorAt(0);
    return 0;
  }
  v2 = value;
  if (!value)
  {
    APSLogErrorAt(0);
    return v2;
  }
  v4 = CFSetContainsValue(*(CFSetRef *)(a1 + 16), value);
  if (!(_DWORD)v4)
  {
    APSLogErrorAt(v4);
    if (gLogCategory_APSRemoteConfig <= 90
      && (gLogCategory_APSRemoteConfig != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 0;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
  v5 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), v2);
  if (v5)
    v2 = CFRetain(v5);
  else
    v2 = 0;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
  return v2;
}

uint64_t APSRemoteConfigGetBooleanIfPresent(uint64_t a1, void *a2, Boolean *a3)
{
  const __CFBoolean *v4;
  const __CFBoolean *v5;
  CFTypeID v6;
  uint64_t v7;

  if (a1 && a2 && (v4 = (const __CFBoolean *)APSRemoteConfigCopyValue(a1, a2)) != 0)
  {
    v5 = v4;
    v6 = CFGetTypeID(v4);
    if (v6 == CFBooleanGetTypeID())
    {
      if (a3)
        *a3 = CFBooleanGetValue(v5);
      v7 = 1;
    }
    else
    {
      APSLogErrorAt(0);
      v7 = 0;
    }
    CFRelease(v5);
  }
  else
  {
    APSLogErrorAt(0);
    return 0;
  }
  return v7;
}

uint64_t _APSRemoteConfigSetFakeRCLData(uint64_t a1, const __CFDictionary *a2)
{
  const void *v4;

  if (!a1)
    return APSLogErrorAt(0);
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
  v4 = *(const void **)(a1 + 40);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 40) = 0;
  }
  if (a2)
    *(_QWORD *)(a1 + 40) = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
}

void _APSRemoteConfigUpdateNow(uint64_t a1)
{
  if (a1)
    remoteConfig_update(a1, 0);
  else
    APSLogErrorAt(0);
}

__CFData *APSFeaturesCreateMutable(uint64_t a1)
{
  __CFData *Mutable;
  __CFData *v3;

  Mutable = CFDataCreateMutable(0, 0);
  v3 = Mutable;
  if (Mutable)
  {
    if (a1 >= 1)
      CFDataSetLength(Mutable, (unint64_t)(a1 + 7) >> 3);
  }
  else
  {
    APSLogErrorAt(0);
  }
  return v3;
}

CFMutableDataRef APSFeaturesCreateMutableCopy(CFDataRef theData)
{
  return CFDataCreateMutableCopy(0, 0, theData);
}

uint64_t APSFeaturesCreateFromStringRepresentation(CFStringRef theString, int *a2)
{
  CFIndex v4;
  char *v5;
  uint64_t v6;
  int v8;

  if (gLogCategory_APSFeatures <= 30 && (gLogCategory_APSFeatures != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v4 = CFStringGetLength(theString) + 1;
  v5 = (char *)malloc_type_malloc(v4, 0x16C71FD5uLL);
  if (v5)
  {
    if (CFStringGetCString(theString, v5, v4, 0x600u) == 1 && (strlen(v5), v6 = Base64DecodeCopy(), (_DWORD)v6))
    {
      v8 = v6;
      APSLogErrorAt(v6);
    }
    else
    {
      APSLogErrorAt(0);
      v8 = -6705;
    }
  }
  else
  {
    APSLogErrorAt(0);
    v8 = -6728;
  }
  free(v5);
  free(0);
  if (a2)
    *a2 = v8;
  if (gLogCategory_APSFeatures <= 90 && (gLogCategory_APSFeatures != -1 || _LogCategory_Initialize()))
    LogPrintF();
  return 0;
}

__CFData *APSFeaturesCreateFromLegacyFlags(unint64_t a1)
{
  __CFData *Mutable;
  __CFData *v3;

  Mutable = APSFeaturesCreateMutable(0);
  v3 = Mutable;
  if (Mutable)
    APSFeaturesSetLegacyFlags(Mutable, a1);
  else
    APSLogErrorAt(0);
  return v3;
}

void APSFeaturesSetLegacyFlags(const __CFData *a1, unint64_t a2)
{
  uint64_t Length;
  uint64_t i;
  CFRange v6;
  UInt8 v7[8];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  Length = CFDataGetLength(a1);
  for (i = 0; i != 8; ++i)
  {
    v7[i] = a2;
    a2 >>= 8;
  }
  if (Length >= 8)
    v6.length = 8;
  else
    v6.length = Length;
  v6.location = 0;
  CFDataReplaceBytes(a1, v6, v7, 8);
}

const void *APSFeaturesCreateFromEndpointInfoFeatureRepresentations(const __CFString *a1, unint64_t a2, unsigned int *a3)
{
  const void *v4;
  unsigned int v6;

  v6 = 0;
  if (a1)
  {
    v4 = (const void *)APSFeaturesCreateFromStringRepresentation(a1, (int *)&v6);
    if (v6)
    {
      APSLogErrorAt(v6);
      if (v6)
      {
        if (v4)
        {
          CFRelease(v4);
          v4 = 0;
          if (!a3)
            return v4;
          goto LABEL_9;
        }
      }
    }
  }
  else
  {
    v4 = APSFeaturesCreateFromLegacyFlags(a2);
    if (!v4)
    {
      APSLogErrorAt(0);
      v6 = -6728;
      if (!a3)
        return v4;
      goto LABEL_9;
    }
  }
  if (a3)
LABEL_9:
    *a3 = v6;
  return v4;
}

BOOL APSFeaturesIsEmpty(const __CFData *a1)
{
  CFIndex Length;
  const UInt8 *BytePtr;
  uint64_t v5;
  CFIndex v7;

  if (!a1)
    return 1;
  Length = CFDataGetLength(a1);
  BytePtr = CFDataGetBytePtr(a1);
  if (Length < 1)
    return 1;
  if (*BytePtr)
    return 0;
  v5 = 1;
  while (Length != v5)
  {
    if (BytePtr[v5++])
    {
      v7 = v5 - 1;
      return v7 >= Length;
    }
  }
  v7 = Length;
  return v7 >= Length;
}

uint64_t APSFeaturesHasFeature(const __CFData *a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  const UInt8 *BytePtr;

  if (a2 >= 0)
    v2 = a2;
  else
    v2 = a2 + 7;
  if (!a1)
  {
LABEL_8:
    APSLogErrorAt(0);
    return 0;
  }
  v3 = a2;
  if (v2 >> 3 < CFDataGetLength(a1))
  {
    BytePtr = CFDataGetBytePtr(a1);
    if (BytePtr)
      return (BytePtr[v2 >> 3] >> (v3 - (v2 & 0xF8))) & 1;
    goto LABEL_8;
  }
  return 0;
}

uint64_t APSFeaturesHasAllFeatures(CFDataRef theData, const __CFData *a2)
{
  const __CFData *BytePtr;
  CFIndex Length;
  CFIndex v5;
  const UInt8 *v6;
  CFIndex v7;

  BytePtr = theData;
  if (theData)
  {
    Length = CFDataGetLength(theData);
    BytePtr = (const __CFData *)CFDataGetBytePtr(BytePtr);
    if (!a2)
      return 1;
  }
  else
  {
    Length = 0;
    if (!a2)
      return 1;
  }
  v5 = CFDataGetLength(a2);
  v6 = CFDataGetBytePtr(a2);
  if (v5 < 1)
    return 1;
  v7 = 0;
  while (!v6[v7] || v7 < Length && (v6[v7] & ~*((unsigned __int8 *)BytePtr + v7)) == 0)
  {
    if (v5 == ++v7)
      return 1;
  }
  return 0;
}

UInt8 *APSFeaturesSetFeature(__CFData *a1, uint64_t a2)
{
  UInt8 *result;

  if (CFDataGetLength(a1) <= a2 / 8)
    CFDataSetLength(a1, a2 / 8 + 1);
  result = CFDataGetMutableBytePtr(a1);
  result[a2 / 8] |= 1 << (a2 % 8);
  return result;
}

const UInt8 *APSFeaturesSetAllFeatures(__CFData *a1, CFDataRef theData)
{
  uint64_t Length;
  UInt8 *MutableBytePtr;
  const UInt8 *result;
  char v7;

  Length = CFDataGetLength(theData);
  if (CFDataGetLength(a1) < Length)
    CFDataSetLength(a1, Length);
  MutableBytePtr = CFDataGetMutableBytePtr(a1);
  result = CFDataGetBytePtr(theData);
  if (Length >= 1)
  {
    do
    {
      v7 = *result++;
      *MutableBytePtr++ |= v7;
      --Length;
    }
    while (Length);
  }
  return result;
}

uint64_t APSFeaturesClearFeature(const __CFData *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;

  result = CFDataGetLength(a1);
  v5 = a2 + 7;
  if (a2 >= 0)
    v5 = a2;
  if (result > v5 >> 3)
  {
    v6 = v5 >> 3;
    v7 = a2 - 8 * (v5 >> 3);
    result = (uint64_t)CFDataGetMutableBytePtr(a1);
    *(_BYTE *)(result + v6) &= ~(1 << v7);
  }
  return result;
}

const UInt8 *APSFeaturesClearAllFeatures(CFDataRef theData, const __CFData *a2)
{
  __CFData *MutableBytePtr;
  CFIndex Length;
  CFIndex v5;
  const UInt8 *result;
  uint64_t v7;
  char v8;

  MutableBytePtr = theData;
  if (theData)
  {
    Length = CFDataGetLength(theData);
    MutableBytePtr = (__CFData *)CFDataGetMutableBytePtr(MutableBytePtr);
    if (a2)
    {
LABEL_3:
      v5 = CFDataGetLength(a2);
      result = CFDataGetBytePtr(a2);
      goto LABEL_6;
    }
  }
  else
  {
    Length = 0;
    if (a2)
      goto LABEL_3;
  }
  v5 = 0;
  result = 0;
LABEL_6:
  if (v5 >= Length)
    v7 = Length;
  else
    v7 = v5;
  if (v7 >= 1)
  {
    do
    {
      v8 = *result++;
      *(_BYTE *)MutableBytePtr &= ~v8;
      MutableBytePtr = (__CFData *)((char *)MutableBytePtr + 1);
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t APSFeaturesCopyStringRepresentation(const UInt8 *theData, _QWORD *a2)
{
  const __CFData *v3;
  CFIndex Length;
  CFIndex v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v3 = (const __CFData *)theData;
  if (theData)
  {
    Length = CFDataGetLength((CFDataRef)theData);
    theData = CFDataGetBytePtr(v3);
  }
  else
  {
    Length = 0;
  }
  do
  {
    v5 = Length;
    if (Length-- < 1)
    {
      if (v3)
      {
        v9 = (void *)CFRetain(&stru_1E828E0E0);
        v8 = 0;
        goto LABEL_11;
      }
      goto LABEL_13;
    }
  }
  while (!theData[v5 - 1]);
  if (!v3)
  {
LABEL_13:
    APSLogErrorAt(0);
    v8 = 4294960591;
    goto LABEL_12;
  }
  v7 = Base64EncodeCopyEx();
  v8 = v7;
  if (!(_DWORD)v7)
  {
    v9 = (void *)CFStringCreateWithBytes(0, 0, 0, 0x600u, 0);
LABEL_11:
    *a2 = v9;
    goto LABEL_12;
  }
  APSLogErrorAt(v7);
LABEL_12:
  free(0);
  return v8;
}

unint64_t APSFeaturesGetLegacyFlags(unint64_t result, _DWORD *a2)
{
  const __CFData *v3;
  CFIndex Length;
  const UInt8 *BytePtr;
  unint64_t v6;
  const UInt8 *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  if (!result)
    goto LABEL_7;
  v3 = (const __CFData *)result;
  Length = CFDataGetLength((CFDataRef)result);
  BytePtr = CFDataGetBytePtr(v3);
  v6 = Length - 1;
  if (Length >= 1)
  {
    v7 = BytePtr;
    v8 = 0;
    result = 0;
    if (v6 >= 7)
      v6 = 7;
    v9 = 8 * v6 + 8;
    do
    {
      v10 = *v7++;
      result |= (unint64_t)v10 << v8;
      v8 += 8;
    }
    while (v9 != v8);
LABEL_7:
    if (!a2)
      return result;
    goto LABEL_8;
  }
  result = 0;
  if (!a2)
    return result;
LABEL_8:
  *a2 = 0;
  return result;
}

uint64_t APSPriorityDispatchSourceGetTypeID()
{
  if (gAPSPriorityDispatchSourceInitOnce != -1)
    dispatch_once_f(&gAPSPriorityDispatchSourceInitOnce, 0, (dispatch_function_t)_APSPriorityDispatchSourceGetTypeID);
  return gAPSPriorityDispatchSourceTypeID;
}

uint64_t _APSPriorityDispatchSourceGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSPriorityDispatchSourceTypeID = result;
  return result;
}

void _APSPriorityDispatchSourceFinalize(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  const void *v5;
  const void *v6;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 && !*(_BYTE *)(a1 + 88))
    atomic_store(1u, (unsigned int *)(v2 + 56));
  v3 = *(NSObject **)(a1 + 80);
  if (v3)
  {
    dispatch_source_cancel(v3);
    if (*(_BYTE *)(a1 + 89))
    {
      dispatch_resume(*(dispatch_object_t *)(a1 + 80));
      *(_BYTE *)(a1 + 89) = 0;
    }
    dispatch_release(*(dispatch_object_t *)(a1 + 80));
    *(_QWORD *)(a1 + 80) = 0;
  }
  v4 = *(NSObject **)(a1 + 72);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(a1 + 72) = 0;
  }
  if (*(_QWORD *)(a1 + 56))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(a1 + 56) = 0;
  }
  v5 = *(const void **)(a1 + 40);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 48);
  if (v6)
    CFRelease(v6);
}

uint64_t APSPriorityDispatchSourceCreate(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4, unsigned int a5, const void *a6, __int128 *a7, CFTypeRef *a8)
{
  uint64_t v8;
  uint64_t Instance;
  uint64_t v18;
  _OWORD *v19;
  CFTypeRef v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v8 = 4294960591;
  if (a4 && a7 && a8 && *((_QWORD *)a7 + 1))
  {
    if (gAPSPriorityDispatchSourceInitOnce != -1)
      dispatch_once_f(&gAPSPriorityDispatchSourceInitOnce, 0, (dispatch_function_t)_APSPriorityDispatchSourceGetTypeID);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v18 = Instance;
      *(_QWORD *)(Instance + 112) = 0;
      *(_OWORD *)(Instance + 80) = 0u;
      *(_OWORD *)(Instance + 96) = 0u;
      *(_OWORD *)(Instance + 48) = 0u;
      *(_OWORD *)(Instance + 64) = 0u;
      *(_OWORD *)(Instance + 16) = 0u;
      *(_OWORD *)(Instance + 32) = 0u;
      if (gAPSPriorityDispatchSourceSharedContextInitOnce != -1)
        dispatch_once_f(&gAPSPriorityDispatchSourceSharedContextInitOnce, 0, (dispatch_function_t)_APSPriorityDispatchSourceSharedContextGetTypeID);
      v19 = (_OWORD *)_CFRuntimeCreateInstance();
      *(_QWORD *)(v18 + 40) = v19;
      if (!v19)
        goto LABEL_19;
      v19[2] = 0u;
      v19[3] = 0u;
      v19[1] = 0u;
      *(_QWORD *)(v18 + 16) = a1;
      *(_QWORD *)(v18 + 24) = a2;
      *(_QWORD *)(v18 + 32) = a3;
      v20 = a6 ? CFRetain(a6) : 0;
      *(_QWORD *)(v18 + 48) = v20;
      dispatch_retain(a4);
      v21 = *(_QWORD *)(v18 + 40);
      *(_QWORD *)(v21 + 16) = a4;
      v22 = *a7;
      *(_QWORD *)(v21 + 40) = *((_QWORD *)a7 + 2);
      *(_OWORD *)(v21 + 24) = v22;
      atomic_store(0, (unsigned int *)(*(_QWORD *)(v18 + 40) + 56));
      v23 = FigSimpleMutexCreate();
      *(_QWORD *)(v18 + 56) = v23;
      if (v23)
      {
        *(_DWORD *)(v18 + 64) = a5;
        *(_QWORD *)(v18 + 72) = 0;
        *(_QWORD *)(v18 + 80) = 0;
        *(_BYTE *)(v18 + 89) = 1;
        *(_QWORD *)(v18 + 96) = -1;
        *(_QWORD *)(v18 + 104) = -1;
        *(_QWORD *)(v18 + 112) = -1;
        v8 = priorityDispatchSource_setPriority(v18, a5, 1);
        if (!(_DWORD)v8)
          *a8 = CFRetain((CFTypeRef)v18);
      }
      else
      {
LABEL_19:
        v8 = 4294960568;
      }
      CFRelease((CFTypeRef)v18);
    }
    else
    {
      return 4294960568;
    }
  }
  return v8;
}

uint64_t _APSPriorityDispatchSourceSharedContextGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSPriorityDispatchSourceSharedContextTypeID = result;
  return result;
}

uint64_t priorityDispatchSource_setPriority(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6;
  NSObject *Queue;
  NSObject *v8;
  NSObject *v9;
  int v10;
  _QWORD *v11;
  void *v12;
  NSObject *v13;
  NSObject *v14;
  _BOOL4 v15;
  _BOOL4 v16;
  void (__cdecl *v17)(void *);
  void (__cdecl *v18)(void *);
  uint64_t v19;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 56));
  if (*(_BYTE *)(a1 + 88))
  {
    v19 = 4294960573;
    goto LABEL_39;
  }
  if (!a3 && *(_DWORD *)(a1 + 64) == a2)
  {
    v19 = 0;
    goto LABEL_39;
  }
  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
  {
    Queue = APSPriorityDispatchQueuePoolGetQueue(v6, a2);
    if (Queue)
    {
      v8 = Queue;
      dispatch_retain(Queue);
      goto LABEL_10;
    }
    v19 = 4294960569;
LABEL_39:
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 56));
    return v19;
  }
  if (a2 == 5)
  {
    dispatch_retain(*(dispatch_object_t *)(*(_QWORD *)(a1 + 40) + 16));
    v8 = *(NSObject **)(*(_QWORD *)(a1 + 40) + 16);
  }
  else
  {
    v8 = FigDispatchQueueCreateWithPriority();
    if (!v8)
    {
      v19 = 4294960568;
      goto LABEL_39;
    }
  }
LABEL_10:
  v9 = dispatch_source_create(*(dispatch_source_type_t *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v8);
  if (v9 && (v10 = *(unsigned __int8 *)(a1 + 89), (v11 = malloc_type_malloc(0x10uLL, 0x20040A4A59CD2uLL)) != 0))
  {
    v12 = v11;
    *v11 = v9;
    v11[1] = CFRetain(*(CFTypeRef *)(a1 + 40));
    v13 = *(NSObject **)(a1 + 80);
    if (v13)
    {
      dispatch_source_cancel(v13);
      if (*(_BYTE *)(a1 + 89))
      {
        dispatch_resume(*(dispatch_object_t *)(a1 + 80));
        *(_BYTE *)(a1 + 89) = 0;
      }
      dispatch_release(*(dispatch_object_t *)(a1 + 80));
      *(_QWORD *)(a1 + 80) = 0;
    }
    v14 = *(NSObject **)(a1 + 72);
    if (v14)
    {
      dispatch_release(v14);
      *(_QWORD *)(a1 + 72) = 0;
    }
    if (*(_QWORD *)(a1 + 16) == MEMORY[0x1E0C80DD0])
      dispatch_source_set_timer(v9, *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112));
    dispatch_set_context(v9, v12);
    v15 = *(_QWORD *)(a1 + 48) == 0;
    v16 = a2 == 5;
    if (v16 && v15)
      v17 = (void (__cdecl *)(void *))priorityDispatchSource_targetQueueEventHandler;
    else
      v17 = (void (__cdecl *)(void *))priorityDispatchSource_sourceEventHandler;
    if (v16 && v15)
      v18 = (void (__cdecl *)(void *))priorityDispatchSource_targetQueueCancelHandler;
    else
      v18 = (void (__cdecl *)(void *))priorityDispatchSource_sourceCancelHandler;
    dispatch_source_set_event_handler_f(v9, v17);
    dispatch_source_set_cancel_handler_f(v9, v18);
    *(_DWORD *)(a1 + 64) = a2;
    dispatch_retain(v8);
    *(_QWORD *)(a1 + 72) = v8;
    dispatch_retain(v9);
    *(_QWORD *)(a1 + 80) = v9;
    *(_BYTE *)(a1 + 89) = v10;
    if (!v10)
      dispatch_resume(v9);
    v19 = 0;
  }
  else
  {
    v19 = 4294960568;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 56));
  if (v8)
    dispatch_release(v8);
  if (v9)
    dispatch_release(v9);
  return v19;
}

_QWORD *priorityDispatchSource_targetQueueEventHandler(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = result[1];
  if (!*(_DWORD *)(v1 + 56))
  {
    v2 = result;
    *(_QWORD *)(v1 + 48) = *result;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD))(v1 + 32))(*(_QWORD *)(v1 + 24));
    *(_QWORD *)(v2[1] + 48) = 0;
  }
  return result;
}

void priorityDispatchSource_sourceEventHandler(_QWORD *context)
{
  dispatch_sync_f(*(dispatch_queue_t *)(context[1] + 16), context, (dispatch_function_t)priorityDispatchSource_targetQueueEventHandler);
}

void priorityDispatchSource_targetQueueCancelHandler(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int v3;
  int v4;
  _QWORD *v5;
  void (*v6)(_QWORD);

  v2 = (unsigned int *)(a1[1] + 56);
  while (1)
  {
    v3 = __ldxr(v2);
    if (v3 != 1)
      break;
    if (!__stxr(2u, v2))
    {
      v4 = 1;
      goto LABEL_6;
    }
  }
  v4 = 0;
  __clrex();
LABEL_6:
  v5 = (_QWORD *)a1[1];
  if (v4)
  {
    v6 = (void (*)(_QWORD))v5[5];
    if (v6)
    {
      v6(v5[3]);
      v5 = (_QWORD *)a1[1];
    }
  }
  CFRelease(v5);
  free(a1);
}

void priorityDispatchSource_sourceCancelHandler(CFTypeRef *a1)
{
  CFTypeRef v2;

  v2 = CFRetain(a1[1]);
  dispatch_sync_f(*((dispatch_queue_t *)a1[1] + 2), a1, (dispatch_function_t)priorityDispatchSource_targetQueueCancelHandler);
  CFRelease(v2);
}

void _APSPriorityDispatchSourceSharedContextFinalize(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

uintptr_t APSPriorityDispatchSourceGetData(uint64_t a1)
{
  NSObject *v1;

  if (a1 && (v1 = *(NSObject **)(*(_QWORD *)(a1 + 40) + 48)) != 0)
    return dispatch_source_get_data(v1);
  else
    return 0;
}

uint64_t APSPriorityDispatchSourceSetTimer(uint64_t a1, dispatch_time_t a2, uint64_t a3, uint64_t a4)
{
  dispatch_time_t v8;
  uint64_t v9;

  if (!a1)
    return 4294960591;
  if (*(_QWORD *)(a1 + 16) != MEMORY[0x1E0C80DD0])
    return 4294960540;
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 56));
  if (*(_BYTE *)(a1 + 88))
  {
    v9 = 4294960573;
  }
  else
  {
    v8 = dispatch_time(a2, 0);
    *(_QWORD *)(a1 + 96) = v8;
    *(_QWORD *)(a1 + 104) = a3;
    *(_QWORD *)(a1 + 112) = a4;
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 80), v8, a3, a4);
    v9 = 0;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 56));
  return v9;
}

uint64_t APSPriorityDispatchSourceSetPriority(uint64_t a1, unsigned int a2)
{
  if (a1)
    return priorityDispatchSource_setPriority(a1, a2, 0);
  else
    return 4294960591;
}

uint64_t APSPriorityDispatchSourceResume(uint64_t a1)
{
  uint64_t v2;

  if (!a1)
    return 4294960591;
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 56));
  if (*(_BYTE *)(a1 + 88))
  {
    v2 = 4294960573;
  }
  else
  {
    if (*(_BYTE *)(a1 + 89))
    {
      *(_BYTE *)(a1 + 89) = 0;
      dispatch_resume(*(dispatch_object_t *)(a1 + 80));
    }
    v2 = 0;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 56));
  return v2;
}

uint64_t APSPriorityDispatchSourceSuspend(uint64_t a1)
{
  uint64_t v2;

  if (!a1)
    return 4294960591;
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 56));
  if (*(_BYTE *)(a1 + 88))
  {
    v2 = 4294960573;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 89))
    {
      *(_BYTE *)(a1 + 89) = 1;
      dispatch_suspend(*(dispatch_object_t *)(a1 + 80));
    }
    v2 = 0;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 56));
  return v2;
}

uint64_t APSPriorityDispatchSourceCancel(uint64_t a1)
{
  NSObject *v2;

  if (!a1)
    return 4294960591;
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 56));
  if (!*(_BYTE *)(a1 + 88))
  {
    atomic_store(1u, (unsigned int *)(*(_QWORD *)(a1 + 40) + 56));
    v2 = *(NSObject **)(a1 + 80);
    if (v2)
    {
      dispatch_source_cancel(v2);
      if (*(_BYTE *)(a1 + 89))
      {
        dispatch_resume(*(dispatch_object_t *)(a1 + 80));
        *(_BYTE *)(a1 + 89) = 0;
      }
      dispatch_release(*(dispatch_object_t *)(a1 + 80));
      *(_QWORD *)(a1 + 80) = 0;
    }
    *(_BYTE *)(a1 + 88) = 1;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 56));
  return 0;
}

uint64_t APSVersionUtilsGetShortVersionLength(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  unsigned int v9;

  if (!a1)
    goto LABEL_9;
  v2 = 0;
  do
  {
    v3 = v2;
    v4 = *(char *)(a1 + v2++);
  }
  while ((v4 - 48) < 0xA);
  if (!v3)
    goto LABEL_9;
  if (v4 != 46)
    goto LABEL_9;
  v5 = v2;
  do
  {
    result = v5;
    v7 = *(char *)(a1 + v5++);
  }
  while ((v7 - 48) < 0xA);
  if (result == v2)
    goto LABEL_9;
  if ((_BYTE)v7)
  {
    if (v7 != 46)
      goto LABEL_9;
    v8 = v5;
    do
    {
      result = v8;
      v9 = *(char *)(a1 + v8++) - 48;
    }
    while (v9 < 0xA);
    if (result == v5)
    {
LABEL_9:
      APSLogErrorAt(0);
      if (gLogCategory_APSVersionUtils <= 90
        && (gLogCategory_APSVersionUtils != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      return 0;
    }
  }
  return result;
}

void APSGetFBOPropertyCMTime(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, CMTime *a4@<X8>)
{
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  int v10;
  BOOL v11;
  CFTypeID v12;
  CFTypeRef cf;

  v8 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)&a4->value = *MEMORY[0x1E0CA2E18];
  a4->epoch = *(_QWORD *)(v8 + 16);
  cf = 0;
  v9 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v9)
  {
    v10 = v9(a1, a2, *MEMORY[0x1E0C9AE00], &cf);
    if (v10)
      v11 = 1;
    else
      v11 = cf == 0;
    if (!v11)
    {
      v12 = CFGetTypeID(cf);
      if (v12 == CFDictionaryGetTypeID())
        CMTimeMakeFromDictionary(a4, (CFDictionaryRef)cf);
      v10 = 0;
    }
    if (a3)
      goto LABEL_10;
  }
  else
  {
    v10 = -12782;
    if (a3)
LABEL_10:
      *a3 = v10;
  }
  if (cf)
    CFRelease(cf);
}

uint64_t APSGetFBOPropertyCString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t (*v8)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  int v9;
  BOOL v10;
  uint64_t v11;
  CFTypeRef cf;

  cf = 0;
  v8 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v8)
  {
    v11 = 0;
    v9 = -12782;
    if (!a5)
      goto LABEL_10;
    goto LABEL_9;
  }
  v9 = v8(a1, a2, *MEMORY[0x1E0C9AE00], &cf);
  if (v9)
    v10 = 1;
  else
    v10 = cf == 0;
  if (!v10)
  {
    v11 = CFGetCString();
    v9 = 0;
    if (!a5)
      goto LABEL_10;
LABEL_9:
    *a5 = v9;
    goto LABEL_10;
  }
  v11 = 0;
  if (a5)
    goto LABEL_9;
LABEL_10:
  if (cf)
    CFRelease(cf);
  return v11;
}

double APSGetFBOPropertyDouble(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  double v7;
  int v8;
  BOOL v9;
  double v10;
  CFTypeRef cf;

  cf = 0;
  v6 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  v7 = 0.0;
  if (v6)
  {
    v8 = v6(a1, a2, *MEMORY[0x1E0C9AE00], &cf);
    if (v8)
      v9 = 1;
    else
      v9 = cf == 0;
    if (!v9)
    {
      CFGetDouble();
      v7 = v10;
      v8 = 0;
    }
    if (a3)
      goto LABEL_8;
  }
  else
  {
    v8 = -12782;
    if (a3)
LABEL_8:
      *a3 = v8;
  }
  if (cf)
    CFRelease(cf);
  return v7;
}

uint64_t APSGetFBOPropertyInt64(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  int v7;
  BOOL v8;
  uint64_t v9;
  CFTypeRef cf;

  cf = 0;
  v6 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v6)
  {
    v9 = 0;
    v7 = -12782;
    if (!a3)
      goto LABEL_10;
    goto LABEL_9;
  }
  v7 = v6(a1, a2, *MEMORY[0x1E0C9AE00], &cf);
  if (v7)
    v8 = 1;
  else
    v8 = cf == 0;
  if (!v8)
  {
    v9 = CFGetInt64();
    v7 = 0;
    if (!a3)
      goto LABEL_10;
LABEL_9:
    *a3 = v7;
    goto LABEL_10;
  }
  v9 = 0;
  if (a3)
    goto LABEL_9;
LABEL_10:
  if (cf)
    CFRelease(cf);
  return v9;
}

CFTypeRef APSIsFBOPropertyNonNull(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  int v7;
  CFTypeRef result;
  CFTypeRef cf;

  cf = 0;
  v6 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v6)
  {
    v7 = v6(a1, a2, *MEMORY[0x1E0C9AE00], &cf);
    if (!a3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = -12782;
  if (a3)
LABEL_3:
    *a3 = v7;
LABEL_4:
  result = cf;
  if (cf)
  {
    CFRelease(cf);
    return (CFTypeRef)(cf != 0);
  }
  return result;
}

BOOL APSIsFBOPropertyAvailable(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  int v5;
  CFTypeRef cf;

  cf = 0;
  v4 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v4)
  {
    v5 = v4(a1, a2, *MEMORY[0x1E0C9AE00], &cf);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    v5 = -12782;
  }
  return v5 == 0;
}

BOOL APSIsFBOPropertyEqual(uint64_t a1, uint64_t a2, CFTypeRef a3, int *a4)
{
  uint64_t (*v8)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  int v9;
  _BOOL8 v10;
  CFTypeRef cf1;

  cf1 = 0;
  if (a1)
  {
    v8 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
    if (v8)
    {
      v9 = v8(a1, a2, *MEMORY[0x1E0C9AE00], &cf1);
      if (v9)
      {
        v10 = 0;
      }
      else
      {
        if (cf1 == a3)
        {
          v10 = 1;
        }
        else
        {
          v10 = 0;
          if (a3 && cf1)
            v10 = CFEqual(cf1, a3) != 0;
        }
        v9 = 0;
      }
    }
    else
    {
      v10 = 0;
      v9 = -12782;
    }
  }
  else
  {
    v10 = 0;
    v9 = -6705;
  }
  if (a4)
    *a4 = v9;
  if (cf1)
    CFRelease(cf1);
  return v10;
}

uint64_t APSSetFBOPropertyCString(uint64_t a1, uint64_t a2, char *cStr, CFIndex numBytes)
{
  CFStringRef v6;
  CFStringRef v7;
  uint64_t (*v8)(uint64_t, uint64_t, CFStringRef);
  uint64_t v9;

  if (numBytes == -1)
    v6 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  else
    v6 = CFStringCreateWithBytes(0, (const UInt8 *)cStr, numBytes, 0x8000100u, 0);
  v7 = v6;
  if (!v6)
    return 4294960596;
  v8 = *(uint64_t (**)(uint64_t, uint64_t, CFStringRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v8)
    v9 = v8(a1, a2, v7);
  else
    v9 = 4294954514;
  CFRelease(v7);
  return v9;
}

uint64_t APSSetFBOPropertyData(uint64_t a1, uint64_t a2, UInt8 *bytes, CFIndex length)
{
  CFDataRef v6;
  CFDataRef v7;
  uint64_t (*v8)(uint64_t, uint64_t, CFDataRef);
  uint64_t v9;

  v6 = CFDataCreate(0, bytes, length);
  if (!v6)
    return 4294960596;
  v7 = v6;
  v8 = *(uint64_t (**)(uint64_t, uint64_t, CFDataRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v8)
    v9 = v8(a1, a2, v7);
  else
    v9 = 4294954514;
  CFRelease(v7);
  return v9;
}

uint64_t APSSetFBOPropertyDouble(uint64_t a1, uint64_t a2, double a3)
{
  CFNumberRef v5;
  CFNumberRef v6;
  uint64_t (*v7)(uint64_t, uint64_t, CFNumberRef);
  uint64_t v8;
  double valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  if (!v5)
    return 4294960568;
  v6 = v5;
  v7 = *(uint64_t (**)(uint64_t, uint64_t, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v7)
    v8 = v7(a1, a2, v6);
  else
    v8 = 4294954514;
  CFRelease(v6);
  return v8;
}

uint64_t APSSetFBOPropertyInt64(uint64_t a1, uint64_t a2)
{
  uint64_t Int64;
  const void *v5;
  uint64_t (*v6)(uint64_t, uint64_t, const void *);
  uint64_t v7;

  Int64 = CFNumberCreateInt64();
  if (!Int64)
    return 4294960568;
  v5 = (const void *)Int64;
  v6 = *(uint64_t (**)(uint64_t, uint64_t, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    v7 = v6(a1, a2, v5);
  else
    v7 = 4294954514;
  CFRelease(v5);
  return v7;
}

uint64_t APSSetFBOPropertyDictionary(uint64_t a1, uint64_t a2, CFDictionaryRef theDict)
{
  CFDictionaryRef Copy;
  CFDictionaryRef v6;
  uint64_t (*v7)(uint64_t, uint64_t, CFDictionaryRef);
  uint64_t v8;

  if (!theDict)
    return 4294960591;
  Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theDict);
  if (!Copy)
    return 4294960568;
  v6 = Copy;
  v7 = *(uint64_t (**)(uint64_t, uint64_t, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v7)
    v8 = v7(a1, a2, v6);
  else
    v8 = 4294954514;
  CFRelease(v6);
  return v8;
}

uint64_t APSRecycleBinGetTypeID()
{
  if (gAPSRecycleBinInitOnce != -1)
    dispatch_once_f(&gAPSRecycleBinInitOnce, 0, (dispatch_function_t)_APSRecycleBinGetTypeID);
  return gAPSRecycleBinTypeID;
}

uint64_t _APSRecycleBinGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSRecycleBinTypeID = result;
  return result;
}

_QWORD *_APSRecycleBinFinalize(_QWORD *a1)
{
  unsigned __int128 *v2;
  _QWORD *v3;
  unsigned __int128 v4;
  _QWORD *v5;
  void (*v6)(_QWORD);
  unsigned __int128 *v7;
  _QWORD *result;
  unsigned __int128 v9;
  _QWORD *v10;
  uint64_t (*v11)(_QWORD);

  v2 = (unsigned __int128 *)(a1 + 8);
  do
  {
    v4 = __ldaxp(v2);
    v3 = (_QWORD *)v4;
  }
  while (__stxp(v4, v2));
  if ((_QWORD)v4)
  {
    do
    {
      v5 = (_QWORD *)v3[1];
      v6 = (void (*)(_QWORD))a1[5];
      if (v6)
        v6(*v3);
      free(v3);
      v3 = v5;
    }
    while (v5);
  }
  v7 = (unsigned __int128 *)(a1 + 10);
  do
  {
    v9 = __ldaxp(v7);
    result = (_QWORD *)v9;
  }
  while (__stxp(v9, v7));
  if ((_QWORD)v9)
  {
    do
    {
      v10 = (_QWORD *)result[1];
      free(result);
      result = v10;
    }
    while (v10);
  }
  v11 = (uint64_t (*)(_QWORD))a1[6];
  if (v11)
    return (_QWORD *)v11(a1[2]);
  return result;
}

uint64_t APSRecycleBinCreate(__int128 *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t Instance;
  uint64_t v7;
  unsigned __int128 *v8;
  unsigned __int128 *v9;
  unint64_t *v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  if (!a3)
    return 4294960591;
  if (gAPSRecycleBinInitOnce != -1)
    dispatch_once_f(&gAPSRecycleBinInitOnce, 0, (dispatch_function_t)_APSRecycleBinGetTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294960568;
  v7 = Instance;
  *(_OWORD *)(Instance + 16) = 0u;
  *(_OWORD *)(Instance + 80) = 0u;
  *(_OWORD *)(Instance + 96) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  *(_OWORD *)(Instance + 48) = 0u;
  *(_OWORD *)(Instance + 64) = 0u;
  v8 = (unsigned __int128 *)(Instance + 64);
  do
    __ldaxp(v8);
  while (__stlxp(0, v8));
  v9 = (unsigned __int128 *)(Instance + 80);
  do
    __ldaxp(v9);
  while (__stlxp(0, v9));
  v10 = (unint64_t *)(Instance + 96);
  atomic_store(0, (unint64_t *)(Instance + 96));
  if (a1)
  {
    v11 = *a1;
    v12 = a1[1];
    *(_QWORD *)(Instance + 48) = *((_QWORD *)a1 + 4);
    *(_OWORD *)(Instance + 16) = v11;
    *(_OWORD *)(Instance + 32) = v12;
  }
  if (a2)
  {
    if (*(_QWORD *)(Instance + 24))
    {
      v13 = 0;
      v14 = 0;
      while (1)
      {
        v15 = malloc_type_malloc(0x10uLL, 0xE0040CF218873uLL);
        if (!v15)
          break;
        v16 = v15;
        v17 = (*(uint64_t (**)(_QWORD, _QWORD *))(v7 + 24))(*(_QWORD *)(v7 + 16), v15);
        if ((_DWORD)v17)
        {
          v19 = v17;
          free(v16);
          goto LABEL_23;
        }
        v16[1] = v13;
        do
          __ldxp(v8);
        while (__stxp((unint64_t)v16, v8));
        do
          v18 = __ldxr(v10);
        while (__stxr(v18 + 1, v10));
        ++v14;
        v13 = v16;
        if (v14 == a2)
        {
          __dmb(0xBu);
          goto LABEL_21;
        }
      }
      v19 = 4294960568;
    }
    else
    {
      v19 = 4294960561;
    }
  }
  else
  {
LABEL_21:
    v19 = 0;
    *a3 = CFRetain((CFTypeRef)v7);
  }
LABEL_23:
  CFRelease((CFTypeRef)v7);
  return v19;
}

uint64_t APSRecycleBinTakeItem(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned __int128 *v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned __int128 v7;
  uint64_t *v8;
  unint64_t v9;
  unsigned __int128 v10;
  int v11;
  BOOL v12;
  uint64_t (*v13)(_QWORD, uint64_t *);
  unsigned __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int128 v17;
  unsigned __int128 v18;
  int v19;
  BOOL v20;
  uint64_t v22;

  v22 = 0;
  v2 = 4294960591;
  if (a1 && a2)
  {
    v4 = (unsigned __int128 *)(a1 + 64);
    do
    {
      v7 = __ldxp(v4);
      v5 = *((_QWORD *)&v7 + 1);
      v6 = (uint64_t *)v7;
    }
    while (__stxp(v7, v4));
    while (v6)
    {
      v8 = v6;
      __dmb(9u);
      v9 = v6[1];
      do
      {
        while (1)
        {
          v10 = __ldaxp(v4);
          v6 = (uint64_t *)v10;
          v11 = (_QWORD)v10 != (_QWORD)v8;
          if (*((_QWORD *)&v10 + 1) != v5)
            ++v11;
          if (!v11)
            break;
          if (!__stxp(v10, v4))
            goto LABEL_13;
        }
      }
      while (__stxp(__PAIR128__(v5 + 1, v9), v4));
LABEL_13:
      v12 = *((_QWORD *)&v10 + 1) == v5 && (_QWORD)v10 == (_QWORD)v8;
      v5 = *((_QWORD *)&v10 + 1);
      if (v12)
      {
        v22 = *v8;
        v14 = (unsigned __int128 *)(a1 + 80);
        do
        {
          v17 = __ldxp(v14);
          v15 = *((_QWORD *)&v17 + 1);
          v16 = v17;
        }
        while (__stxp(v17, v14));
        do
        {
          v8[1] = v16;
          do
          {
            while (1)
            {
              v18 = __ldxp(v14);
              v19 = (_QWORD)v18 != v16;
              if (*((_QWORD *)&v18 + 1) != v15)
                ++v19;
              if (!v19)
                break;
              if (!__stlxp(v18, v14))
                goto LABEL_30;
            }
          }
          while (__stlxp(__PAIR128__(v15 + 1, (unint64_t)v8), v14));
LABEL_30:
          v20 = *((_QWORD *)&v18 + 1) == v15 && (_QWORD)v18 == v16;
          v15 = *((_QWORD *)&v18 + 1);
          v16 = v18;
        }
        while (!v20);
LABEL_35:
        v2 = 0;
        *a2 = v22;
        return v2;
      }
    }
    v13 = *(uint64_t (**)(_QWORD, uint64_t *))(a1 + 24);
    if (v13)
    {
      v2 = v13(*(_QWORD *)(a1 + 16), &v22);
      if ((_DWORD)v2)
        return v2;
      goto LABEL_35;
    }
    return 4294960546;
  }
  return v2;
}

uint64_t APSRecycleBinAddItem(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned __int128 *v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned __int128 v8;
  uint64_t *v9;
  unint64_t v10;
  unsigned __int128 v11;
  int v12;
  BOOL v13;
  uint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t (*v17)(uint64_t);
  unsigned __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int128 v21;
  unsigned __int128 v22;
  int v23;
  BOOL v24;

  result = 4294960591;
  if (a1)
  {
    v4 = a2;
    if (a2)
    {
      v5 = (unsigned __int128 *)(a1 + 80);
      do
      {
        v8 = __ldxp(v5);
        v6 = *((_QWORD *)&v8 + 1);
        v7 = (uint64_t *)v8;
      }
      while (__stxp(v8, v5));
      while (v7)
      {
        v9 = v7;
        __dmb(9u);
        v10 = v7[1];
        do
        {
          while (1)
          {
            v11 = __ldxp(v5);
            v7 = (uint64_t *)v11;
            v12 = (_QWORD)v11 != (_QWORD)v9;
            if (*((_QWORD *)&v11 + 1) != v6)
              ++v12;
            if (!v12)
              break;
            if (!__stxp(v11, v5))
              goto LABEL_13;
          }
        }
        while (__stxp(__PAIR128__(v6 + 1, v10), v5));
LABEL_13:
        v13 = *((_QWORD *)&v11 + 1) == v6 && (_QWORD)v11 == (_QWORD)v9;
        v6 = *((_QWORD *)&v11 + 1);
        if (v13)
          goto LABEL_21;
      }
      v14 = (uint64_t *)malloc_type_malloc(0x10uLL, 0xE0040CF218873uLL);
      if (!v14)
        return 4294960568;
      v9 = v14;
      v15 = (unint64_t *)(a1 + 96);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
LABEL_21:
      v17 = *(uint64_t (**)(uint64_t))(a1 + 32);
      if (v17)
        v4 = v17(v4);
      *v9 = v4;
      v18 = (unsigned __int128 *)(a1 + 64);
      do
      {
        v21 = __ldxp(v18);
        v19 = *((_QWORD *)&v21 + 1);
        v20 = v21;
      }
      while (__stxp(v21, v18));
      do
      {
        v9[1] = v20;
        do
        {
          while (1)
          {
            v22 = __ldxp(v18);
            v23 = (_QWORD)v22 != v20;
            if (*((_QWORD *)&v22 + 1) != v19)
              ++v23;
            if (!v23)
              break;
            if (!__stlxp(v22, v18))
              goto LABEL_32;
          }
        }
        while (__stlxp(__PAIR128__(v19 + 1, (unint64_t)v9), v18));
LABEL_32:
        v24 = *((_QWORD *)&v22 + 1) == v19 && (_QWORD)v22 == v20;
        v19 = *((_QWORD *)&v22 + 1);
        v20 = v22;
      }
      while (!v24);
      return 0;
    }
  }
  return result;
}

uint64_t APSEventRecorderGetTypeID()
{
  if (APSEventRecorderGetTypeID_once != -1)
    dispatch_once_f(&APSEventRecorderGetTypeID_once, &APSEventRecorderGetTypeID_typeID, (dispatch_function_t)eventRecorder_registerCMClass);
  return APSEventRecorderGetTypeID_typeID;
}

uint64_t eventRecorder_registerCMClass(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t eventRecorder_finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 24) = 0;
  }
  free(*(void **)(a1 + 112));
  v3 = *(const void **)(a1 + 32);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 32) = 0;
  }
  return pthread_mutex_destroy((pthread_mutex_t *)(a1 + 40));
}

uint64_t APSEventRecorderCreate(int a1, const void *a2, unsigned int a3, int *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t Instance;
  uint64_t v13;
  uint64_t Mutable;
  uint64_t v15;
  CFTypeRef v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;

  if (!a3 || !a6)
  {
    APSLogErrorAt(0);
    return 4294895135;
  }
  if (APSEventRecorderGetTypeID_once != -1)
    dispatch_once_f(&APSEventRecorderGetTypeID_once, &APSEventRecorderGetTypeID_typeID, (dispatch_function_t)eventRecorder_registerCMClass);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    v19 = 4294895136;
    APSLogErrorAt(0);
    return v19;
  }
  v13 = Instance;
  *(_QWORD *)(Instance + 112) = 0;
  *(_OWORD *)(Instance + 80) = 0u;
  *(_OWORD *)(Instance + 96) = 0u;
  *(_OWORD *)(Instance + 48) = 0u;
  *(_OWORD *)(Instance + 64) = 0u;
  *(_OWORD *)(Instance + 16) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  Mutable = pthread_mutex_init((pthread_mutex_t *)(Instance + 40), 0);
  if ((_DWORD)Mutable)
  {
    v19 = Mutable;
LABEL_28:
    APSLogErrorAt(Mutable);
    CFRelease((CFTypeRef)v13);
    return v19;
  }
  v15 = a3;
  Mutable = (uint64_t)malloc_type_calloc(a3, 0x10uLL, 0x1000040D9A13B51uLL);
  *(_QWORD *)(v13 + 112) = Mutable;
  if (!Mutable)
  {
    v19 = 4294895136;
    goto LABEL_28;
  }
  Mutable = (uint64_t)CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(v13 + 32) = Mutable;
  if (!Mutable)
  {
    v19 = 4294895136;
    goto LABEL_28;
  }
  *(_DWORD *)(v13 + 104) = a3;
  *(_DWORD *)(v13 + 16) = a1;
  if (a2)
    v16 = CFRetain(a2);
  else
    v16 = 0;
  *(_QWORD *)(v13 + 24) = v16;
  if (a4)
  {
    v17 = (_DWORD *)(*(_QWORD *)(v13 + 112) + 8);
    do
    {
      v18 = *a4++;
      *v17 = v18;
      v17 += 4;
      --v15;
    }
    while (v15);
  }
  if (a5)
    eventRecorder_addChildToParent(a5, (const void *)v13);
  if (gLogCategory_APSEventRecorder <= 30
    && (gLogCategory_APSEventRecorder != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v19 = 0;
  *a6 = v13;
  return v19;
}

uint64_t eventRecorder_addChildToParent(uint64_t a1, const void *a2)
{
  uint64_t result;

  result = 4294895135;
  if (a1)
  {
    if (a2)
    {
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 40));
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), a2);
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 40));
      return 0;
    }
  }
  return result;
}

uint64_t APSEventRecorderGetType(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 16);
  return result;
}

uint64_t APSEventRecorderCopyName(uint64_t result, _QWORD *a2)
{
  const void *v3;
  CFTypeRef v4;

  if (result)
  {
    if (a2)
    {
      v3 = *(const void **)(result + 24);
      if (v3)
        v4 = CFRetain(v3);
      else
        v4 = 0;
      result = 0;
      *a2 = v4;
    }
    else
    {
      APSLogErrorAt(0);
      return 4294895135;
    }
  }
  return result;
}

uint64_t APSEventRecorderRecordEvent(uint64_t a1, int a2)
{
  double Current;

  Current = CFAbsoluteTimeGetCurrent();
  return APSEventRecorderRecordEventWithFlagsAtTime(a1, a2, 0, Current);
}

uint64_t APSEventRecorderRecordEventWithFlagsAtTime(uint64_t result, int a2, char a3, double a4)
{
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    if ((a2 & 0xFFFF000) == *(_DWORD *)(result + 16) && (v4 = a2 & 0xFFF, v4 < *(_DWORD *)(result + 104)))
    {
      v5 = *(_QWORD *)(result + 112);
      if ((a3 & 1) == 0 || *(double *)(v5 + 16 * v4) == 0.0)
        *(double *)(v5 + 16 * v4) = a4;
      result = *(unsigned int *)(v5 + 16 * v4 + 8);
      if ((_DWORD)result)
      {
        kdebug_trace();
        return 0;
      }
    }
    else
    {
      APSLogErrorAt(0);
      return 4294895134;
    }
  }
  return result;
}

double APSEventRecorderGetEventTime(uint64_t a1, int a2)
{
  double result;

  result = 0.0;
  if (a1 && (a2 & 0xFFFF000) == *(_DWORD *)(a1 + 16) && (a2 & 0xFFFu) < *(_DWORD *)(a1 + 104))
    return *(double *)(*(_QWORD *)(a1 + 112) + 16 * (a2 & 0xFFF));
  return result;
}

double APSEventRecorderGetEventTimeRecursive(CFTypeRef a1, int a2, int *a3)
{
  double v4;
  __int16 v5;
  int v6;
  int v7;

  v4 = 0.0;
  if (!a1)
  {
    v7 = 0;
    goto LABEL_8;
  }
  v5 = a2;
  v6 = a2 & 0xFFFF000;
  v7 = -72162;
  if ((a2 & 0xFFFF000) == *((_DWORD *)a1 + 4))
  {
    a1 = CFRetain(a1);
  }
  else
  {
    a1 = eventRecorder_copyChildEventRecorderOfTypeByDeepSearch((uint64_t)a1, a2 & 0xFFFF000);
    if (!a1)
    {
      v7 = -72163;
      goto LABEL_8;
    }
  }
  if (v6 == *((_DWORD *)a1 + 4) && (v5 & 0xFFFu) < *((_DWORD *)a1 + 26))
  {
    v7 = 0;
    v4 = *(double *)(*((_QWORD *)a1 + 14) + 16 * (v5 & 0xFFF));
  }
LABEL_8:
  if (a3)
    *a3 = v7;
  if (a1)
    CFRelease(a1);
  return v4;
}

CFTypeRef eventRecorder_copyChildEventRecorderOfTypeByDeepSearch(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  const __CFArray *Copy;
  CFIndex Count;
  CFIndex v7;
  _DWORD *ValueAtIndex;
  int v9;
  CFTypeRef v10;
  CFTypeRef v11;

  v4 = (pthread_mutex_t *)(a1 + 40);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 40));
  Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFArrayRef *)(a1 + 32));
  pthread_mutex_unlock(v4);
  if (Copy)
  {
    Count = CFArrayGetCount(Copy);
    if (gLogCategory_APSEventRecorder <= 10
      && (gLogCategory_APSEventRecorder != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (Count >= 1)
    {
      v7 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(Copy, v7);
        if (gLogCategory_APSEventRecorder <= 10
          && (gLogCategory_APSEventRecorder != -1 || _LogCategory_Initialize()))
        {
          break;
        }
        if (ValueAtIndex)
          goto LABEL_13;
        v9 = 0;
LABEL_14:
        if (v9 == (_DWORD)a2)
          v10 = CFRetain(ValueAtIndex);
        else
          v10 = (CFTypeRef)eventRecorder_copyChildEventRecorderOfTypeByDeepSearch(ValueAtIndex, a2);
        v11 = v10;
        if (v10)
          goto LABEL_22;
        if (Count == ++v7)
          goto LABEL_21;
      }
      LogPrintF();
LABEL_13:
      v9 = ValueAtIndex[4];
      goto LABEL_14;
    }
LABEL_21:
    v11 = 0;
LABEL_22:
    CFRelease(Copy);
  }
  else
  {
    APSLogErrorAt(0);
    return 0;
  }
  return v11;
}

uint64_t APSEventRecorderReset(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  if (result)
  {
    v1 = result;
    v2 = *(unsigned int *)(result + 104);
    if ((_DWORD)v2)
    {
      v3 = *(_QWORD **)(result + 112);
      do
      {
        *v3 = 0;
        v3 += 2;
        --v2;
      }
      while (v2);
    }
    pthread_mutex_lock((pthread_mutex_t *)(result + 40));
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v1 + 32));
    return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
  }
  return result;
}

unint64_t APSEventRecorderGetTimeBetweenEventsInMilliSecond(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  double v5;
  double v6;

  v4 = 0;
  if (a1 && a3)
  {
    v5 = 0.0;
    v6 = 0.0;
    if ((a2 & 0xFFFF000) == *(_DWORD *)(a1 + 16) && (a2 & 0xFFFu) < *(_DWORD *)(a1 + 104))
      v6 = *(double *)(*(_QWORD *)(a1 + 112) + 16 * (a2 & 0xFFF));
    if ((a4 & 0xFFFF000) == *(_DWORD *)(a3 + 16) && (a4 & 0xFFFu) < *(_DWORD *)(a3 + 104))
      v5 = *(double *)(*(_QWORD *)(a3 + 112) + 16 * (a4 & 0xFFF));
    if (v5 < v6)
    {
      APSLogErrorAt(0);
      return 0;
    }
    else
    {
      return (unint64_t)((v5 - v6) * 1000.0);
    }
  }
  return v4;
}

uint64_t APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursive(const void *a1, int a2, const void *a3, int a4)
{
  uint64_t v5;

  v5 = 0;
  APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursiveEx(a1, a2, a3, a4, 0, &v5);
  return v5;
}

uint64_t APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursiveEx(const void *a1, int a2, const void *a3, int a4, int a5, _QWORD *a6)
{
  uint64_t result;
  double EventTimeRecursive;
  double v13;
  uint64_t v14;

  result = 0;
  v14 = 0;
  if (a1)
  {
    if (a3)
    {
      EventTimeRecursive = APSEventRecorderGetEventTimeRecursive(a1, a2, (int *)&v14 + 1);
      v13 = APSEventRecorderGetEventTimeRecursive(a3, a4, (int *)&v14);
      if (a5 != 1 || (result = 4294895134, !v14) && EventTimeRecursive != 0.0 && v13 != 0.0)
      {
        if (v13 < EventTimeRecursive)
        {
          APSLogErrorAt(0);
          return 4294895135;
        }
        else
        {
          result = 0;
          *a6 = (unint64_t)((v13 - EventTimeRecursive) * 1000.0);
        }
      }
    }
  }
  return result;
}

unint64_t APSEventRecorderGetTimeBetweenCFAbsoluteTimeAndEventInMilliSecond(unint64_t result, int a2, double a3)
{
  double v3;

  if (result)
  {
    v3 = 0.0;
    if ((a2 & 0xFFFF000) == *(_DWORD *)(result + 16) && (a2 & 0xFFFu) < *(_DWORD *)(result + 104))
      v3 = *(double *)(*(_QWORD *)(result + 112) + 16 * (a2 & 0xFFF));
    if (v3 < a3)
    {
      APSLogErrorAt(0);
      return 0;
    }
    else
    {
      return (unint64_t)((v3 - a3) * 1000.0);
    }
  }
  return result;
}

unint64_t APSEventRecorderGetTimeSinceEventInMilliSecond(uint64_t a1, int a2)
{
  double Current;
  double v5;

  Current = CFAbsoluteTimeGetCurrent();
  if (!a1)
    return 0;
  v5 = 0.0;
  if ((a2 & 0xFFFF000) == *(_DWORD *)(a1 + 16) && (a2 & 0xFFFu) < *(_DWORD *)(a1 + 104))
    v5 = *(double *)(*(_QWORD *)(a1 + 112) + 16 * (a2 & 0xFFF));
  return (unint64_t)((Current - v5) * 1000.0);
}

unint64_t APSEventRecorderGetTimeSinceEventInMilliSecondRecursive(const void *a1, int a2)
{
  double Current;

  Current = CFAbsoluteTimeGetCurrent();
  if (a1)
    return (unint64_t)((Current - APSEventRecorderGetEventTimeRecursive(a1, a2, 0)) * 1000.0);
  else
    return 0;
}

uint64_t APSEventRecorderAddSignPostForEvent(uint64_t result, int a2, int a3)
{
  uint64_t v3;

  if (result)
  {
    v3 = result;
    result = 4294895134;
    if ((a2 & 0xFFFF000) == *(_DWORD *)(v3 + 16) && (a2 & 0xFFFu) < *(_DWORD *)(v3 + 104))
    {
      result = 0;
      *(_DWORD *)(*(_QWORD *)(v3 + 112) + 16 * (a2 & 0xFFF) + 8) = a3;
    }
  }
  return result;
}

CFStringRef APSEventRecorderCreateStringWithEventRecorderTime(CFAbsoluteTime a1)
{
  const __CFAllocator *v2;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (eventRecorder_getSharedDateFormatter_once != -1)
    dispatch_once_f(&eventRecorder_getSharedDateFormatter_once, &eventRecorder_getSharedDateFormatter_dateFormatter, (dispatch_function_t)eventRecorder_createSharedDateFormatter);
  return CFDateFormatterCreateStringWithAbsoluteTime(v2, (CFDateFormatterRef)eventRecorder_getSharedDateFormatter_dateFormatter, a1);
}

void eventRecorder_createSharedDateFormatter(__CFDateFormatter **a1)
{
  const __CFLocale *v2;
  __CFDateFormatter *v3;

  v2 = CFLocaleCopyCurrent();
  v3 = CFDateFormatterCreate(0, v2, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
  CFDateFormatterSetFormat(v3, CFSTR("MMMM d, HH:mm:ss.SSS"));
  if (v2)
    CFRelease(v2);
  *a1 = v3;
}

uint64_t APSEventRecorderCopyChildEventRecorderOfType(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  CFTypeRef v5;

  v3 = 4294895133;
  if (a3)
  {
    v5 = eventRecorder_copyChildEventRecorderOfTypeByDeepSearch(a1, a2);
    if (v5)
    {
      v3 = 0;
      *a3 = v5;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294895135;
  }
  return v3;
}

uint64_t APSEventRecorderRemoveChildEventRecorderFromParent(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = 4294895135;
  if (a1)
  {
    if (a2)
    {
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 40));
      FigCFArrayRemoveLastElementOfValue();
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 40));
      return 0;
    }
  }
  return result;
}

uint64_t eventRecorder_applyForEachMatchingChildEventRecorder(uint64_t a1)
{
  pthread_mutex_t *v2;
  const __CFAllocator *v3;
  const __CFArray *Copy;
  CFIndex Count;
  const __CFArray *v6;
  uint64_t v7;
  unint64_t v8;
  CFIndex v9;
  CFIndex v10;
  CFIndex i;
  CFIndex j;
  const void *ValueAtIndex;

  v2 = (pthread_mutex_t *)(a1 + 40);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 40));
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFArrayRef *)(a1 + 32));
  pthread_mutex_unlock(v2);
  if (Copy)
  {
    Count = CFArrayGetCount(Copy);
    pthread_mutex_lock(v2);
    v6 = CFArrayCreateCopy(v3, *(CFArrayRef *)(a1 + 32));
    pthread_mutex_unlock(v2);
    if (gLogCategory_APSEventRecorder <= 50
      && (gLogCategory_APSEventRecorder != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (*(_DWORD *)(a1 + 104))
    {
      v7 = 0;
      v8 = 0;
      do
      {
        if (*(double *)(*(_QWORD *)(a1 + 112) + v7) != 0.0
          && gLogCategory_APSEventRecorder <= 50
          && (gLogCategory_APSEventRecorder != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        ++v8;
        v7 += 16;
      }
      while (v8 < *(unsigned int *)(a1 + 104));
    }
    if (v6)
    {
      v9 = CFArrayGetCount(v6);
      if (v9 >= 1)
      {
        v10 = v9;
        for (i = 0; i != v10; ++i)
        {
          CFArrayGetValueAtIndex(v6, i);
          if (gLogCategory_APSEventRecorder <= 50
            && (gLogCategory_APSEventRecorder != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
      }
      CFRelease(v6);
    }
    else
    {
      APSLogErrorAt(0);
    }
    if (Count >= 1)
    {
      for (j = 0; j != Count; ++j)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(Copy, j);
        eventRecorder_applyForEachMatchingChildEventRecorder(ValueAtIndex);
      }
    }
    CFRelease(Copy);
    return 4294895133;
  }
  else
  {
    APSLogErrorAt(0);
    return 4294895136;
  }
}

uint64_t APSRTCReportingAgentGetTypeID()
{
  if (APSRTCReportingAgentGetTypeID_sInitOnce != -1)
    dispatch_once_f(&APSRTCReportingAgentGetTypeID_sInitOnce, &APSRTCReportingAgentGetTypeID_sTypeID, (dispatch_function_t)reportingAgent_getTypeID);
  return APSRTCReportingAgentGetTypeID_sTypeID;
}

uint64_t reportingAgent_getTypeID(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

void reportingAgent_Finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  NSObject *v7;

  if (gLogCategory_APSRTCReportingAgent <= 40
    && (gLogCategory_APSRTCReportingAgent != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = (const void *)a1[7];
  if (v2)
  {
    CFRelease(v2);
    a1[7] = 0;
  }
  v3 = (const void *)a1[10];
  if (v3)
  {
    CFRelease(v3);
    a1[10] = 0;
  }
  v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0;
  }
  v5 = (const void *)a1[4];
  if (v5)
  {
    CFRelease(v5);
    a1[4] = 0;
  }
  v6 = (const void *)a1[3];
  if (v6)
  {
    CFRelease(v6);
    a1[3] = 0;
  }
  v7 = a1[2];
  if (v7)
  {
    dispatch_release(v7);
    a1[2] = 0;
  }
}

__CFString *reportingAgent_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  __CFString *v3;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v3 = Mutable;
  if (Mutable)
    CFStringAppendFormat(Mutable, 0, CFSTR("<APSRTCReportingAgent %p>"), a1);
  else
    APSLogErrorAt(0);
  return v3;
}

uint64_t APSRTCReportingAgentCreate(const void *a1, const __CFString *a2, _QWORD *a3)
{
  uint64_t v3;
  const __CFAllocator *v7;
  uint64_t Instance;
  _QWORD *v9;
  dispatch_queue_t v10;
  const __CFString *v11;
  const __CFUUID *v12;
  const __CFUUID *v13;
  CFStringRef v14;
  const __CFUUID *v15;

  v3 = 72300;
  if (!a1 || !a3)
  {
    APSLogErrorAt(0);
    return 72303;
  }
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (APSRTCReportingAgentGetTypeID_sInitOnce != -1)
    dispatch_once_f(&APSRTCReportingAgentGetTypeID_sInitOnce, &APSRTCReportingAgentGetTypeID_sTypeID, (dispatch_function_t)reportingAgent_getTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    APSLogErrorAt(0);
    return v3;
  }
  v9 = (_QWORD *)Instance;
  *(_QWORD *)(Instance + 80) = 0;
  *(_OWORD *)(Instance + 48) = 0u;
  *(_OWORD *)(Instance + 64) = 0u;
  *(_OWORD *)(Instance + 16) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  v10 = dispatch_queue_create("APSRTCReportingAgentQueue", 0);
  v9[2] = v10;
  if (v10)
  {
    if (a2)
      v11 = a2;
    else
      v11 = CFSTR("Default");
    v9[5] = CFRetain(v11);
    v9[4] = CFRetain(a1);
    v9[8] = mach_absolute_time();
    v12 = CFUUIDCreate(v7);
    if (v12)
    {
      v13 = v12;
      v14 = CFUUIDCreateString(v7, v12);
      v9[3] = v14;
      if (v14)
      {
        v3 = 0;
        *a3 = v9;
      }
      else
      {
        APSLogErrorAt(0);
        CFRelease(v9);
        v3 = 4294960568;
      }
      v15 = v13;
      goto LABEL_14;
    }
    v3 = 4294960568;
  }
  APSLogErrorAt(0);
  v15 = (const __CFUUID *)v9;
LABEL_14:
  CFRelease(v15);
  return v3;
}

void APSRTCReportingAgentSendMediaEvent(uint64_t a1, CFTypeRef cf, const void *a3, int a4)
{
  CFTypeID v8;
  const __CFString *Value;
  const void *v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  CFTypeID v14;
  uint64_t v15;
  const void *v16;
  const void *v17;
  const void *DisplayName;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v20;
  const __CFString *v21;
  const void *v22;
  NSObject *v23;
  const void *v24;
  _QWORD block[6];

  if (!a1 || !cf && !a4)
    return;
  if (cf)
  {
    v8 = CFGetTypeID(cf);
    if (v8 == CFDictionaryGetTypeID())
    {
      Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("title"));
      if (!Value)
      {
        v10 = (const void *)getkMRMediaRemoteNowPlayingInfoTitle[0]();
        Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, v10);
      }
      v11 = (const void *)getkMRMediaRemoteNowPlayingInfoClientPropertiesData[0]();
      v12 = CFDictionaryGetValue((CFDictionaryRef)cf, v11);
      if (v12)
      {
        v13 = (uint64_t)v12;
        v14 = CFGetTypeID(v12);
        if (v14 == CFDataGetTypeID())
        {
          v15 = ((uint64_t (*)(uint64_t))softLinkMRNowPlayingClientCreateFromExternalRepresentation[0])(v13);
          if (v15)
          {
            v16 = (const void *)v15;
            v17 = *(const void **)(a1 + 80);
            DisplayName = (const void *)softLinkMRNowPlayingClientGetDisplayName(v15);
            *(_QWORD *)(a1 + 80) = DisplayName;
            if (DisplayName)
              CFRetain(DisplayName);
            if (v17)
              CFRelease(v17);
            CFRelease(v16);
          }
        }
      }
      if (a4)
        goto LABEL_20;
LABEL_19:
      if (!Value)
        return;
      goto LABEL_20;
    }
  }
  Value = 0;
  if (!a4)
    goto LABEL_19;
LABEL_20:
  if (a4 || (v21 = *(const __CFString **)(a1 + 56)) != 0 && CFStringCompare(Value, v21, 0))
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
      APSLogErrorAt(0);
      return;
    }
    v20 = Mutable;
    if (gLogCategory_APSRTCReportingAgent <= 40
      && (gLogCategory_APSRTCReportingAgent != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    FigCFDictionarySetInt32();
    mach_absolute_time();
    UpTicksToSeconds();
    FigCFDictionarySetInt64();
    v22 = *(const void **)(a1 + 80);
    if (v22)
      CFDictionarySetValue(v20, CFSTR("clientDisplayName"), v22);
    CFDictionarySetValue(v20, CFSTR("rtcAgentID"), *(const void **)(a1 + 24));
    CFDictionarySetValue(v20, CFSTR("sessionType"), a3);
    CFRetain((CFTypeRef)a1);
    CFRetain(v20);
    v23 = *(NSObject **)(a1 + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __APSRTCReportingAgentSendMediaEvent_block_invoke;
    block[3] = &__block_descriptor_48_e5_v8__0l;
    block[4] = a1;
    block[5] = v20;
    dispatch_async(v23, block);
    ++*(_DWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 64) = mach_absolute_time();
  }
  else
  {
    v20 = 0;
  }
  if (!*(_QWORD *)(a1 + 64))
    *(_QWORD *)(a1 + 64) = mach_absolute_time();
  v24 = *(const void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = Value;
  if (Value)
    CFRetain(Value);
  if (v24)
    CFRelease(v24);
  if (v20)
    CFRelease(v20);
}

uint64_t initValkMRMediaRemoteNowPlayingInfoTitle()
{
  uint64_t *v0;
  uint64_t result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global_2207);
  v0 = (uint64_t *)dlsym((void *)MediaRemoteLibrary_sLib, "kMRMediaRemoteNowPlayingInfoTitle");
  if (v0)
  {
    result = *v0;
    constantValkMRMediaRemoteNowPlayingInfoTitle = result;
  }
  else
  {
    result = constantValkMRMediaRemoteNowPlayingInfoTitle;
  }
  getkMRMediaRemoteNowPlayingInfoTitle[0] = kMRMediaRemoteNowPlayingInfoTitleFunction;
  return result;
}

uint64_t kMRMediaRemoteNowPlayingInfoTitleFunction()
{
  return constantValkMRMediaRemoteNowPlayingInfoTitle;
}

uint64_t initValkMRMediaRemoteNowPlayingInfoClientPropertiesData()
{
  uint64_t *v0;
  uint64_t result;

  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global_2207);
  v0 = (uint64_t *)dlsym((void *)MediaRemoteLibrary_sLib, "kMRMediaRemoteNowPlayingInfoClientPropertiesData");
  if (v0)
  {
    result = *v0;
    constantValkMRMediaRemoteNowPlayingInfoClientPropertiesData = result;
  }
  else
  {
    result = constantValkMRMediaRemoteNowPlayingInfoClientPropertiesData;
  }
  getkMRMediaRemoteNowPlayingInfoClientPropertiesData[0] = kMRMediaRemoteNowPlayingInfoClientPropertiesDataFunction;
  return result;
}

uint64_t kMRMediaRemoteNowPlayingInfoClientPropertiesDataFunction()
{
  return constantValkMRMediaRemoteNowPlayingInfoClientPropertiesData;
}

void reportingAgent_SendReportToRTC(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v5;
  CFTypeRef cf;

  cf = 0;
  if (a1)
  {
    v5 = APSRTCReportingCreateOrCopy(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0, &cf, 0);
    if ((_DWORD)v5)
    {
      APSLogErrorAt(v5);
    }
    else
    {
      if (gLogCategory_APSRTCReportingAgent <= 40
        && (gLogCategory_APSRTCReportingAgent != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      APSRTCReportingSendMsg((uint64_t)cf, a2, 1, a3);
    }
    if (cf)
      CFRelease(cf);
  }
}

uint64_t initMRNowPlayingClientGetDisplayName(uint64_t a1)
{
  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global_2207);
  softLinkMRNowPlayingClientGetDisplayName = (uint64_t (*)())dlsym((void *)MediaRemoteLibrary_sLib, "MRNowPlayingClientGetDisplayName");
  return ((uint64_t (*)(uint64_t))softLinkMRNowPlayingClientGetDisplayName)(a1);
}

uint64_t initMRNowPlayingClientCreateFromExternalRepresentation(uint64_t a1)
{
  if (MediaRemoteLibrary_sOnce != -1)
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global_2207);
  softLinkMRNowPlayingClientCreateFromExternalRepresentation[0] = (uint64_t (*)())dlsym((void *)MediaRemoteLibrary_sLib, "MRNowPlayingClientCreateFromExternalRepresentation");
  return ((uint64_t (*)(uint64_t))softLinkMRNowPlayingClientCreateFromExternalRepresentation[0])(a1);
}

void APSRTCReportingAgentSendEvent(uint64_t a1, __int16 a2, const __CFDictionary *a3)
{
  __CFDictionary *MutableCopy;
  __CFDictionary *v7;
  const void *v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *Value;
  const __CFString *v12;
  NSObject *v13;
  _QWORD block[6];
  __int16 v15;

  if (a1)
  {
    MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    if (MutableCopy)
    {
      v7 = MutableCopy;
      v8 = *(const void **)(a1 + 80);
      if (v8)
        CFDictionarySetValue(MutableCopy, CFSTR("clientDisplayName"), v8);
      v9 = (const __CFString *)CFPreferencesCopyAppValue(CFSTR("rtcUserPrefValue1"), CFSTR("com.apple.airplay"));
      v10 = v9;
      if (v9 && CFStringGetLength(v9))
        CFDictionarySetValue(v7, CFSTR("rtcUserPrefValue1"), v10);
      CFDictionarySetValue(v7, CFSTR("rtcAgentID"), *(const void **)(a1 + 24));
      Value = (const __CFString *)CFDictionaryGetValue(a3, CFSTR("sessionType"));
      if (Value)
      {
        v12 = Value;
        if (CFStringCompare(Value, CFSTR("AudioBuffered"), 0) == kCFCompareEqualTo
          || CFStringCompare(v12, CFSTR("AudioRealTime"), 0) == kCFCompareEqualTo)
        {
          FigCFDictionarySetInt64();
        }
      }
      CFRetain((CFTypeRef)a1);
      CFRetain(v7);
      v13 = *(NSObject **)(a1 + 16);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __APSRTCReportingAgentSendEvent_block_invoke;
      block[3] = &__block_descriptor_50_e5_v8__0l;
      v15 = a2;
      block[4] = v7;
      block[5] = a1;
      dispatch_async(v13, block);
      CFRelease(v7);
      if (v10)
        CFRelease(v10);
    }
    else
    {
      APSLogErrorAt(0);
    }
  }
}

void APSRTCReportingAgentSendOfflineEvent(_QWORD *a1, CFDictionaryRef theDict)
{
  NSObject *v4;
  unsigned __int16 Int64Ranged;
  __CFDictionary *MutableCopy;
  const __CFDictionary *v7;
  _QWORD block[6];

  if (a1)
  {
    if (!theDict)
    {
LABEL_14:
      APSLogErrorAt(0);
      return;
    }
    CFDictionaryGetValue(theDict, CFSTR("_sender"));
    if (FigCFEqual())
    {
      CFRetain(a1);
      CFRetain(theDict);
      v4 = a1[2];
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __APSRTCReportingAgentSendOfflineEvent_block_invoke;
      block[3] = &__block_descriptor_48_e5_v8__0l;
      block[4] = theDict;
      block[5] = a1;
      dispatch_async(v4, block);
      return;
    }
    Int64Ranged = CFDictionaryGetInt64Ranged();
    if (Int64Ranged - 7000 <= 0x63)
    {
      MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
      if (MutableCopy)
      {
        v7 = MutableCopy;
        CFDictionarySetValue(MutableCopy, CFSTR("receiverSuppliedInfoSource"), CFSTR("ThirdPartyTVFamily"));
        APSRTCReportingAgentSendEvent((uint64_t)a1, Int64Ranged, v7);
        CFRelease(v7);
        return;
      }
      goto LABEL_14;
    }
    if (gLogCategory_APSRTCReportingAgent <= 60
      && (gLogCategory_APSRTCReportingAgent != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
}

uint64_t APSAllocatorGetDefaultAirPlayMallocZone()
{
  if (APSAllocatorGetDefaultAirPlayMallocZone_once != -1)
    dispatch_once(&APSAllocatorGetDefaultAirPlayMallocZone_once, &__block_literal_global_2239);
  return APSAllocatorGetDefaultAirPlayMallocZone_mallocZone;
}

CFAllocatorRef APSAllocatorCreateMallocZoneCFAllocator(void *a1)
{
  CFAllocatorContext context;

  context.version = 0;
  context.info = a1;
  memset(&context.retain, 0, 24);
  context.allocate = (CFAllocatorAllocateCallBack)APSAllocatorMallocZoneCFAllocate;
  context.reallocate = (CFAllocatorReallocateCallBack)APSAllocatorMallocZoneCFReallocate;
  context.deallocate = (CFAllocatorDeallocateCallBack)APSAllocatorMallocZoneCFDeallocate;
  context.preferredSize = 0;
  return CFAllocatorCreate(0, &context);
}

void *APSAllocatorMallocZoneCFAllocate(size_t size, int a2, malloc_zone_t *zone)
{
  return malloc_type_zone_malloc(zone, size, 0x8F1D0958uLL);
}

void *APSAllocatorMallocZoneCFReallocate(void *ptr, size_t size, int a3, malloc_zone_t *zone)
{
  return malloc_type_zone_realloc(zone, ptr, size, 0x72090E3uLL);
}

void APSAllocatorMallocZoneCFDeallocate(void *ptr, malloc_zone_t *zone)
{
  malloc_zone_free(zone, ptr);
}

uint64_t APSAllocatorGetDefaultAirPlayMallocZoneCFAllocator()
{
  if (APSAllocatorGetDefaultAirPlayMallocZoneCFAllocator_once != -1)
    dispatch_once(&APSAllocatorGetDefaultAirPlayMallocZoneCFAllocator_once, &__block_literal_global_3);
  return APSAllocatorGetDefaultAirPlayMallocZoneCFAllocator_allocator;
}

uint64_t APSLatencyOffsetStepperGetTypeID()
{
  if (APSLatencyOffsetStepperGetTypeID_once != -1)
    dispatch_once(&APSLatencyOffsetStepperGetTypeID_once, &__block_literal_global_2248);
  return APSLatencyOffsetStepperGetTypeID_typeID;
}

void latencyStepper_Finalize(uint64_t a1)
{
  const void *v2;
  NSObject *v3;

  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
  v3 = *(NSObject **)(a1 + 48);
  if (v3)
  {
    if (!*(_BYTE *)(a1 + 56))
    {
      dispatch_resume(v3);
      v3 = *(NSObject **)(a1 + 48);
    }
    dispatch_source_cancel(v3);
    dispatch_release(*(dispatch_object_t *)(a1 + 48));
  }
}

uint64_t APSLatencyOffsetStepperCreate(float a1, uint64_t a2, const void *a3, _QWORD *a4)
{
  _OWORD *Instance;
  _OWORD *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  const void *v12;
  dispatch_source_t v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;

  if (gLogCategory_APSLatencyOffsetStepper <= 50
    && (gLogCategory_APSLatencyOffsetStepper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a3 || a1 <= 0.0 || !a4)
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  if (APSLatencyOffsetStepperGetTypeID_once != -1)
    dispatch_once(&APSLatencyOffsetStepperGetTypeID_once, &__block_literal_global_2248);
  Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (!Instance)
  {
    APSLogErrorAt(0);
    return 4294960568;
  }
  v8 = Instance;
  Instance[2] = 0u;
  Instance[3] = 0u;
  Instance[1] = 0u;
  *((_QWORD *)Instance + 2) = CFRetain(a3);
  *((float *)v8 + 6) = a1;
  SNPrintF();
  v9 = FigDispatchQueueCreateWithPriority();
  if (!v9)
  {
    APSLogErrorAt(0);
    CFRelease(v8);
    return 4294960568;
  }
  v10 = v9;
  v11 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!v11)
  {
    APSLogErrorAt(0);
    CFRelease(v8);
    dispatch_release(v10);
    return 4294960568;
  }
  v12 = (const void *)v11;
  v13 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v10);
  if (v13)
  {
    v14 = v13;
    v15 = (void *)CFRetain(v12);
    dispatch_set_context(v14, v15);
    dispatch_source_set_cancel_handler_f(v14, (dispatch_function_t)MEMORY[0x1E0C98BC0]);
    dispatch_source_set_event_handler_f(v14, (dispatch_function_t)latencyStepper_relativeRatePeriodicUpdater);
    dispatch_source_set_timer(v14, 0, 0x3B9ACA00uLL, 0x2FAF080uLL);
    *((_BYTE *)v8 + 56) = 0;
    atomic_store(0x3FF0000000000000uLL, (unint64_t *)v8 + 5);
    *((_QWORD *)v8 + 6) = v14;
    if (gLogCategory_APSLatencyOffsetStepper <= 50
      && (gLogCategory_APSLatencyOffsetStepper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v16 = 0;
    *a4 = v8;
  }
  else
  {
    APSLogErrorAt(0);
    CFRelease(v8);
    v16 = 4294960568;
  }
  dispatch_release(v10);
  CFRelease(v12);
  return v16;
}

void latencyStepper_relativeRatePeriodicUpdater()
{
  uint64_t v0;
  uint64_t v1;
  CMClockRef HostTimeClock;
  unsigned int v3;
  float v4;
  float v5;

  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = v0;
    if (*(_BYTE *)(v0 + 56))
    {
      HostTimeClock = CMClockGetHostTimeClock();
      atomic_store(COERCE_UNSIGNED_INT64(CMSyncGetRelativeRate(HostTimeClock, *(CMClockOrTimebaseRef *)(v1 + 16))), (unint64_t *)(v1 + 40));
      v3 = atomic_load((unsigned int *)(v1 + 32));
      v4 = *(float *)&v3;
      v5 = COERCE_FLOAT(atomic_load((unsigned int *)(v1 + 28)));
      if ((float)(v4 - v5) == 0.0)
      {
        dispatch_suspend(*(dispatch_object_t *)(v1 + 48));
        *(_BYTE *)(v1 + 56) = 0;
      }
    }
    CFRelease((CFTypeRef)v1);
  }
}

uint64_t APSLatencyOffsetStepperSetTargetLatencyOffset(uint64_t a1, float a2)
{
  unsigned int *v4;
  float v5;

  if (gLogCategory_APSLatencyOffsetStepper <= 30
    && (gLogCategory_APSLatencyOffsetStepper != -1 || _LogCategory_Initialize()))
  {
    atomic_load((unsigned int *)(a1 + 28));
    LogPrintF();
  }
  v4 = (unsigned int *)(a1 + 32);
  do
    v5 = COERCE_FLOAT(__ldaxr(v4));
  while (__stlxr(LODWORD(a2), v4));
  if (v5 != a2 && v5 == 0.0 && *(_BYTE *)(a1 + 56))
  {
    dispatch_resume(*(dispatch_object_t *)(a1 + 48));
    *(_BYTE *)(a1 + 56) = 1;
  }
  return 0;
}

uint64_t APSLatencyOffsetStepperStepForInterval(uint64_t a1, float a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  double v8;
  double v9;
  unsigned int v10;
  __int128 v12;
  __int128 v13;

  v2 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 32)));
  v3 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 28)));
  if (a2 <= 0.0)
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  else
  {
    v4 = v2 - v3;
    if ((float)(v2 - v3) != 0.0)
    {
      v12 = 0u;
      v13 = 0u;
      v5 = *(float *)(a1 + 24) * a2;
      v6 = fabsf(v4);
      if (v6 <= v5)
        v5 = v6;
      if (v4 < 0.0)
        v5 = -v5;
      v7 = v5 + v3;
      v8 = COERCE_DOUBLE(atomic_load((unint64_t *)(a1 + 40)));
      v9 = v8 * v7;
      *(float *)&v10 = v9;
      atomic_store(v10, (unsigned int *)(a1 + 28));
      *(_QWORD *)&v12 = a1;
      *((float *)&v12 + 2) = v2;
      *(float *)&v13 = v7;
      DWORD2(v13) = -(int)(v9 * ((double)(unint64_t)UpTicksPerSecond() / 1000.0));
      if (APSAsyncLoggerGetSharedLogger_onceToken != -1)
        dispatch_once_f(&APSAsyncLoggerGetSharedLogger_onceToken, &APSAsyncLoggerGetSharedLogger_gLogger, (dispatch_function_t)asyncLogger_initOnce);
      APSAsyncLoggerLogMessage(APSAsyncLoggerGetSharedLogger_gLogger, (uint64_t)latencyStepper_stepAsyncLogger, &v12);
    }
    return 0;
  }
}

uint64_t latencyStepper_stepAsyncLogger()
{
  uint64_t result;

  if (gLogCategory_APSLatencyOffsetStepper <= 30)
  {
    if (gLogCategory_APSLatencyOffsetStepper != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

double APSLatencyOffsetStepperGetOffsetSamples(uint64_t a1, double a2)
{
  float v2;

  v2 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 28)));
  return v2 * a2 / 1000.0;
}

uint64_t APSAPAPBBufEncode(const __CFAllocator *a1, OpaqueCMBlockBuffer *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, CMBlockBufferRef *a9)
{
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t result;
  size_t v20;
  char *v21;
  uint64_t (*v22)(uint64_t, char *, uint64_t, char *, size_t, char *, size_t, char *, uint64_t);
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  OpaqueCMBlockBuffer *v27;
  size_t v28;
  char *dataPointerOut;
  size_t totalLengthOut;
  size_t lengthAtOffsetOut;

  lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  totalLengthOut = 0;
  if (a3 && (v17 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8)) != 0)
    v18 = v17(a3);
  else
    v18 = 0;
  v27 = a2;
  v28 = 0;
  v26[0] = a6;
  v26[1] = a7;
  result = 4294960591;
  v25 = a8;
  if (a2)
  {
    if (a8)
    {
      if (a9)
      {
        result = CMBlockBufferGetDataPointer(a2, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
        if (!(_DWORD)result)
        {
          if (lengthAtOffsetOut == totalLengthOut)
          {
            v23 = *(_OWORD *)a4;
            v24 = *(_QWORD *)(a4 + 16);
            result = APSAPAPEncode(&v23, a5, (uint64_t (*)(uint64_t (*)(unint64_t, unint64_t, uint64_t, uint64_t), _QWORD *, uint64_t))_APSAPAPBBufEncodeExtensionItemsCallback, (uint64_t)v26, (uint64_t (*)(_QWORD, _QWORD *, uint64_t))_APSAPAPBBufEncodeMediaDataCallback, (uint64_t)&v25, (uint64_t (*)(unint64_t *, uint64_t, uint64_t))_APSAPAPBBufEncodeWriteCallback, (uint64_t)&v27);
            if (!(_DWORD)result)
            {
              v20 = v28;
              if (v28 < 0x10 || v28 > totalLengthOut)
              {
                return 4294960587;
              }
              else
              {
                if (!a3)
                  return CMBlockBufferCreateWithBufferReference(a1, a2, 0, v20 + v18, 0, a9);
                if (v28 + v18 > totalLengthOut)
                {
                  return 4294960545;
                }
                else
                {
                  v21 = dataPointerOut;
                  v22 = *(uint64_t (**)(uint64_t, char *, uint64_t, char *, size_t, char *, size_t, char *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
                  if (v22)
                  {
                    result = v22(a3, v21, 12, v21 + 15, v20 - 15, v21 + 15, v20 - 15, &v21[v20], v18);
                    if (!(_DWORD)result)
                    {
                      v20 = v28;
                      return CMBlockBufferCreateWithBufferReference(a1, a2, 0, v20 + v18, 0, a9);
                    }
                  }
                  else
                  {
                    return 4294954514;
                  }
                }
              }
            }
          }
          else
          {
            return 4294960591;
          }
        }
      }
    }
  }
  return result;
}

uint64_t _APSAPAPBBufEncodeExtensionItemsCallback(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD v4[3];

  v4[0] = 0;
  v4[1] = a1;
  v4[2] = a2;
  if (!*a3)
    return 0;
  LODWORD(result) = ((uint64_t (*)(_QWORD, _QWORD *, _QWORD))*a3)(_APSAPAPBBufEncodeExtensionItemCallback, v4, a3[1]);
  if ((_DWORD)result)
    return result;
  else
    return LODWORD(v4[0]);
}

uint64_t _APSAPAPBBufEncodeMediaDataCallback(uint64_t (*a1)(char *, size_t, uint64_t), uint64_t a2, CMBlockBufferRef *a3)
{
  size_t DataLength;
  size_t v7;
  uint64_t result;
  char *v9;
  size_t lengthAtOffsetOut;

  DataLength = CMBlockBufferGetDataLength(*a3);
  v9 = 0;
  lengthAtOffsetOut = 0;
  v7 = 0;
  if (DataLength)
  {
    while (1)
    {
      result = CMBlockBufferGetDataPointer(*a3, v7, &lengthAtOffsetOut, 0, &v9);
      if ((_DWORD)result)
        break;
      result = a1(v9, lengthAtOffsetOut, a2);
      if ((_DWORD)result)
        break;
      v7 += lengthAtOffsetOut;
      if (v7 >= DataLength)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    if (v7 == DataLength)
      return 0;
    else
      return 4294960587;
  }
  return result;
}

uint64_t _APSAPAPBBufEncodeWriteCallback(const void *a1, size_t dataLength, uint64_t a3)
{
  uint64_t result;

  if (!dataLength
    || !*(_QWORD *)a3
    || (result = CMBlockBufferReplaceDataBytes(a1, *(CMBlockBufferRef *)a3, *(_QWORD *)(a3 + 8), dataLength),
        !(_DWORD)result))
  {
    result = 0;
    *(_QWORD *)(a3 + 8) += dataLength;
  }
  return result;
}

uint64_t _APSAPAPBBufEncodeExtensionItemCallback(uint64_t a1, CMBlockBufferRef theBuffer, unsigned int *a3)
{
  uint64_t result;
  char *v7;
  size_t v8;
  char *dataPointerOut;
  size_t totalLengthOut;
  size_t lengthAtOffsetOut;

  totalLengthOut = 0;
  lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  result = *a3;
  if (theBuffer && !(_DWORD)result)
  {
    if (CMBlockBufferIsEmpty(theBuffer))
    {
      v7 = 0;
      v8 = 0;
      goto LABEL_5;
    }
    result = CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
    *a3 = result;
    if (!(_DWORD)result)
    {
      v8 = lengthAtOffsetOut;
      if (lengthAtOffsetOut != totalLengthOut)
      {
        result = 4294960591;
        goto LABEL_6;
      }
      v7 = dataPointerOut;
LABEL_5:
      result = (*((uint64_t (**)(uint64_t, size_t, char *, _QWORD))a3 + 1))(a1, v8, v7, *((_QWORD *)a3 + 2));
LABEL_6:
      *a3 = result;
    }
  }
  return result;
}

uint64_t APSAPAPBBufDecode(uint64_t a1, CMBlockBufferRef theBuffer, OpaqueCMBlockBuffer *a3, uint64_t a4, uint64_t a5, int *a6, uint64_t a7, uint64_t a8, CFTypeRef *a9)
{
  uint64_t DataPointer;
  CFTypeRef v14;
  size_t v16;
  size_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, char *, uint64_t, char *, size_t, char *, size_t, size_t *);
  uint64_t v22;
  CFTypeRef cf;
  _QWORD *v24;
  _QWORD v25[4];
  _QWORD v26[2];
  size_t v27;
  char *v28;
  size_t v29;
  size_t v30;
  char *dataPointerOut;
  size_t totalLengthOut;
  size_t lengthAtOffsetOut;

  totalLengthOut = 0;
  lengthAtOffsetOut = 0;
  v30 = 0;
  dataPointerOut = 0;
  v28 = 0;
  v29 = 0;
  v26[1] = 0;
  v27 = 0;
  v25[0] = a1;
  v25[1] = a7;
  v25[2] = a8;
  v25[3] = v26;
  v26[0] = a3;
  v22 = a1;
  cf = 0;
  DataPointer = 4294960591;
  v24 = v26;
  if (!theBuffer)
    goto LABEL_6;
  if (!a3)
    goto LABEL_6;
  DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
  if ((_DWORD)DataPointer)
    goto LABEL_6;
  if (lengthAtOffsetOut != totalLengthOut)
    goto LABEL_27;
  DataPointer = CMBlockBufferGetDataPointer(a3, 0, &v30, &v29, &v28);
  if ((_DWORD)DataPointer)
    goto LABEL_6;
  v16 = v30;
  if (v30 != v29)
    goto LABEL_27;
  v17 = totalLengthOut;
  if (v30 < totalLengthOut)
    goto LABEL_27;
  v18 = dataPointerOut;
  v19 = v28;
  if (dataPointerOut == v28)
  {
    v19 = dataPointerOut;
    if (a4)
      goto LABEL_17;
    goto LABEL_22;
  }
  if (&dataPointerOut[totalLengthOut] > v28 && &v28[totalLengthOut] > dataPointerOut)
  {
LABEL_27:
    DataPointer = 4294960591;
    goto LABEL_6;
  }
  if (a4)
  {
    v20 = *(_QWORD *)dataPointerOut;
    *(_QWORD *)(v28 + 7) = *(_QWORD *)(dataPointerOut + 7);
    *(_QWORD *)v19 = v20;
LABEL_17:
    v21 = *(uint64_t (**)(uint64_t, char *, uint64_t, char *, size_t, char *, size_t, size_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (!v21)
    {
      DataPointer = 4294954514;
      goto LABEL_6;
    }
    DataPointer = v21(a4, v18, 12, v18 + 15, v17 - 15, v19 + 15, v16 - 15, &v27);
    if ((_DWORD)DataPointer)
      goto LABEL_6;
    v17 = v27 + 15;
    goto LABEL_22;
  }
  memcpy(v28, dataPointerOut, totalLengthOut);
  v17 = totalLengthOut;
LABEL_22:
  v27 = v17;
  DataPointer = APSAPAPDecode(v17, (uint64_t (*)(_QWORD, unint64_t, uint64_t))_APSAPAPBBufDecodeReadCallback, (uint64_t)v26, a5, a6, (uint64_t (*)(unint64_t))_APSAPAPBBufDecodeExtensionItemCallback, (uint64_t)v25, (uint64_t (*)(unint64_t, uint64_t (*)(uint64_t, unint64_t, unsigned int *), uint64_t *, uint64_t))_APSAPAPBBufDecodeMediaDataCallback, (uint64_t)&v22);
  if (!(_DWORD)DataPointer)
  {
    v14 = cf;
    if (!cf)
      return 4294960587;
    if (!a9)
    {
      DataPointer = 0;
      goto LABEL_7;
    }
    DataPointer = 0;
    *a9 = CFRetain(cf);
  }
LABEL_6:
  v14 = cf;
  if (cf)
LABEL_7:
    CFRelease(v14);
  return DataPointer;
}

uint64_t _APSAPAPBBufDecodeReadCallback(void *a1, size_t a2, uint64_t a3)
{
  size_t v6;
  uint64_t result;

  v6 = *(_QWORD *)(a3 + 8) + a2;
  if (v6 > CMBlockBufferGetDataLength(*(CMBlockBufferRef *)a3))
    return 4294960546;
  if (!a1
    || (result = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)a3, *(_QWORD *)(a3 + 8), a2, a1), !(_DWORD)result))
  {
    result = 0;
    *(_QWORD *)(a3 + 8) += a2;
  }
  return result;
}

uint64_t _APSAPAPBBufDecodeExtensionItemCallback(uint64_t a1, size_t dataLength, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const __CFAllocator *v7;
  uint64_t v8;
  uint64_t v9;
  CMBlockBufferRef blockBufferOut;

  blockBufferOut = 0;
  if (!*(_QWORD *)(a5 + 8))
    return 0;
  v7 = *(const __CFAllocator **)a5;
  if (dataLength)
    v8 = CMBlockBufferCreateWithBufferReference(v7, **(CMBlockBufferRef **)(a5 + 24), *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8), dataLength, 0, &blockBufferOut);
  else
    v8 = CMBlockBufferCreateEmpty(v7, 0, 0, &blockBufferOut);
  v9 = v8;
  if (!(_DWORD)v8)
    v9 = (*(uint64_t (**)(uint64_t, CMBlockBufferRef, _QWORD))(a5 + 8))(a1, blockBufferOut, *(_QWORD *)(a5 + 16));
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v9;
}

uint64_t _APSAPAPBBufDecodeMediaDataCallback(size_t dataLength, int a2, int a3, CMBlockBufferRef *blockBufferOut)
{
  const __CFAllocator *v5;

  if (blockBufferOut[1])
    return 4294960587;
  v5 = *blockBufferOut;
  if (dataLength)
    return CMBlockBufferCreateWithBufferReference(v5, *(CMBlockBufferRef *)blockBufferOut[2], *((_QWORD *)blockBufferOut[2] + 1), dataLength, 0, blockBufferOut + 1);
  else
    return CMBlockBufferCreateEmpty(v5, 0, 0, blockBufferOut + 1);
}

uint64_t APSAPAPBBufEncodeHeaderSeqNum(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  __int128 v4;
  uint64_t v5;
  _QWORD v6[2];
  _QWORD v7[2];
  int v8;
  __int128 v9;
  uint64_t v10;

  v9 = *MEMORY[0x1E0CA2E18];
  v10 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v8 = 0;
  v7[0] = a1;
  v7[1] = 0;
  v6[0] = a1;
  v6[1] = 0;
  result = APSAPAPDecodeHeader((uint64_t (*)(unint64_t *, uint64_t, uint64_t))_APSAPAPBBufDecodeReadCallback, (uint64_t)v7, (uint64_t)&v9, &v8);
  if (!(_DWORD)result && v8 != a2)
  {
    v4 = v9;
    v5 = v10;
    return APSAPAPEncodeHeader((uint64_t)&v4, a2, (uint64_t (*)(unint64_t *, uint64_t, uint64_t))_APSAPAPBBufEncodeWriteCallback, (uint64_t)v6);
  }
  return result;
}

uint64_t APSAPAPBBufDecodeHeader(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t result;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  v5 = a1;
  v6 = 0;
  if (!a1)
    return 4294960591;
  LODWORD(result) = APSAPAPDecodeHeader((uint64_t (*)(unint64_t *, uint64_t, uint64_t))_APSAPAPBBufDecodeReadCallback, (uint64_t)&v5, a2, a3);
  if (v6 == 15)
    v4 = result;
  else
    v4 = -6709;
  if ((_DWORD)result)
    return result;
  else
    return v4;
}

uint64_t APSAPAPBBufEncodeGetMinBackingSize(uint64_t a1, uint64_t (*a2)(_QWORD, uint64_t *, uint64_t), uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v9 = a1;
  if (a1)
  {
    v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (!v10)
    {
      v9 = 0;
      if (!a5)
        return 4294960591;
      goto LABEL_5;
    }
    v9 = v10(v9);
  }
  if (!a5)
    return 4294960591;
LABEL_5:
  v12 = 0;
  v13 = 0;
  if (!a2)
    return 4294960591;
  result = a2(_APSAPAPGetEncodeSizeExtensionItemCallback, &v12, a3);
  if (!(_DWORD)result)
  {
    result = v12;
    if (!(_DWORD)v12)
      *a5 = a4 + v9 + v13 + 16;
  }
  return result;
}

uint64_t APSCMSampleBufferMergerGetTypeID()
{
  if (gAPSCMSampleBufferMergerInitOnce != -1)
    dispatch_once_f(&gAPSCMSampleBufferMergerInitOnce, 0, (dispatch_function_t)_APSCMSampleBufferMergerGetTypeID);
  return gAPSCMSampleBufferMergerTypeID;
}

uint64_t _APSCMSampleBufferMergerGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSCMSampleBufferMergerTypeID = result;
  return result;
}

void _APSCMSampleBufferMergerFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  if (gLogCategory_APSCMSampleBufferMerger <= 30
    && (gLogCategory_APSCMSampleBufferMerger != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = (const void *)a1[3];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[2];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[4];
  if (v4)
    CFRelease(v4);
}

uint64_t APSCMSampleBufferMergerCreate(char a1, CFTypeRef *a2)
{
  uint64_t Instance;
  uint64_t v5;
  CFMutableArrayRef Mutable;
  uint64_t v7;

  if (a2)
  {
    if (gAPSCMSampleBufferMergerInitOnce != -1)
      dispatch_once_f(&gAPSCMSampleBufferMergerInitOnce, 0, (dispatch_function_t)_APSCMSampleBufferMergerGetTypeID);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v5 = Instance;
      *(_OWORD *)(Instance + 16) = 0u;
      *(_OWORD *)(Instance + 32) = 0u;
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      *(_QWORD *)(v5 + 32) = Mutable;
      if (Mutable)
      {
        if (gLogCategory_APSCMSampleBufferMerger <= 30
          && (gLogCategory_APSCMSampleBufferMerger != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v7 = 0;
        *a2 = CFRetain((CFTypeRef)v5);
        *(_BYTE *)(v5 + 40) = a1;
      }
      else
      {
        APSLogErrorAt(0);
        v7 = 4294960568;
      }
      CFRelease((CFTypeRef)v5);
    }
    else
    {
      APSLogErrorAt(0);
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  return v7;
}

CFIndex APSCMSampleBufferMergerGetCount(CFIndex result)
{
  if (result)
    return CFArrayGetCount(*(CFArrayRef *)(result + 32));
  return result;
}

uint64_t APSCMSampleBufferMergerFlush(uint64_t a1)
{
  const void *v2;
  const void *v3;

  if (a1)
  {
    if (gLogCategory_APSCMSampleBufferMerger <= 30
      && (gLogCategory_APSCMSampleBufferMerger != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v2 = *(const void **)(a1 + 24);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(a1 + 24) = 0;
    }
    v3 = *(const void **)(a1 + 16);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1 + 16) = 0;
    }
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 32));
    return 0;
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
}

uint64_t APSCMSampleBufferMergerTryMerge(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t v2;
  const __CFArray *v5;
  CFIndex Count;
  opaqueCMSampleBuffer *ValueAtIndex;
  const opaqueCMFormatDescription *FormatDescription;
  const opaqueCMFormatDescription *v9;
  const __CFAllocator *v10;
  const __CFDictionary *v11;
  const __CFString *v12;
  const __CFDictionary *v13;
  const __CFDictionary *v14;
  const __CFAllocator *v15;
  CFDictionaryRef v16;
  CMTime v18;
  CMTime v19;
  CMTime v20;
  CMTime v21;
  CMTime time2;
  CMTime rhs;
  CMTime lhs;
  CMTime time1;

  v2 = 0;
  if (!a1 || !a2)
    return v2;
  v5 = *(const __CFArray **)(a1 + 32);
  if (v5)
    Count = CFArrayGetCount(v5);
  else
    Count = 0;
  if (gLogCategory_APSCMSampleBufferMerger <= 30
    && (gLogCategory_APSCMSampleBufferMerger != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (Count)
  {
    ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), Count - 1);
    if (sbufMerger_isSBufReTimed(ValueAtIndex))
    {
      if (gLogCategory_APSCMSampleBufferMerger > 50
        || gLogCategory_APSCMSampleBufferMerger == -1 && !_LogCategory_Initialize())
      {
        return 0;
      }
    }
    else if (sbufMerger_isSBufReTimed(a2))
    {
      if (gLogCategory_APSCMSampleBufferMerger > 50
        || gLogCategory_APSCMSampleBufferMerger == -1 && !_LogCategory_Initialize())
      {
        return 0;
      }
    }
    else if (CMSampleBufferGetNumSamples(ValueAtIndex) == 1)
    {
      if (CMSampleBufferGetNumSamples(a2) == 1)
      {
        CMSampleBufferGetPresentationTimeStamp(&lhs, ValueAtIndex);
        CMSampleBufferGetDuration(&rhs, ValueAtIndex);
        CMTimeAdd(&time1, &lhs, &rhs);
        CMSampleBufferGetPresentationTimeStamp(&time2, a2);
        if (CMTimeCompare(&time1, &time2))
        {
          if (gLogCategory_APSCMSampleBufferMerger > 50
            || gLogCategory_APSCMSampleBufferMerger == -1 && !_LogCategory_Initialize())
          {
            return 0;
          }
        }
        else
        {
          FormatDescription = CMSampleBufferGetFormatDescription(ValueAtIndex);
          v9 = CMSampleBufferGetFormatDescription(a2);
          if (CMFormatDescriptionEqual(FormatDescription, v9))
          {
            FigSampleBufferGetDecryptor();
            FigSampleBufferGetDecryptor();
            if (FigCFEqual())
            {
              v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              v11 = CMCopyDictionaryOfAttachments((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0);
              if (!sbufMerger_areAttachmentsMergable(*(const __CFDictionary **)(a1 + 16), v11, *(unsigned __int8 *)(a1 + 40)))
              {
                if (gLogCategory_APSCMSampleBufferMerger <= 50
                  && (gLogCategory_APSCMSampleBufferMerger != -1 || _LogCategory_Initialize()))
                {
                  goto LABEL_67;
                }
                goto LABEL_68;
              }
              if (v11)
                CFRelease(v11);
              v11 = CMCopyDictionaryOfAttachments(v10, a2, 1u);
              if (!sbufMerger_areAttachmentsMergable(*(const __CFDictionary **)(a1 + 24), v11, *(unsigned __int8 *)(a1 + 40)))
              {
                if (gLogCategory_APSCMSampleBufferMerger <= 50
                  && (gLogCategory_APSCMSampleBufferMerger != -1 || _LogCategory_Initialize()))
                {
                  goto LABEL_67;
                }
                goto LABEL_68;
              }
              v12 = (const __CFString *)*MEMORY[0x1E0CA2728];
              v13 = (const __CFDictionary *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA2728], 0);
              CMTimeMakeFromDictionary(&v21, v13);
              if (*(_BYTE *)(a1 + 40) && (v21.flags & 1) != 0)
              {
                CMSampleBufferGetDuration(&v20, ValueAtIndex);
                v14 = (const __CFDictionary *)CMGetAttachment(ValueAtIndex, v12, 0);
                CMTimeMakeFromDictionary(&v19, v14);
                if (CMTimeCompare(&v20, &v19))
                {
                  if (gLogCategory_APSCMSampleBufferMerger <= 50
                    && (gLogCategory_APSCMSampleBufferMerger != -1 || _LogCategory_Initialize()))
                  {
                    goto LABEL_67;
                  }
                  goto LABEL_68;
                }
                CMSampleBufferGetOutputDuration(&v18, ValueAtIndex);
                v21 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
                if (CMTimeCompare(&v18, &v21))
                {
                  if (gLogCategory_APSCMSampleBufferMerger <= 50
                    && (gLogCategory_APSCMSampleBufferMerger != -1 || _LogCategory_Initialize()))
                  {
LABEL_67:
                    LogPrintF();
                  }
LABEL_68:
                  v2 = 0;
                  if (!v11)
                    return v2;
                  goto LABEL_35;
                }
              }
              goto LABEL_30;
            }
            if (gLogCategory_APSCMSampleBufferMerger > 50
              || gLogCategory_APSCMSampleBufferMerger == -1 && !_LogCategory_Initialize())
            {
              return 0;
            }
          }
          else if (gLogCategory_APSCMSampleBufferMerger > 50
                 || gLogCategory_APSCMSampleBufferMerger == -1 && !_LogCategory_Initialize())
          {
            return 0;
          }
        }
      }
      else if (gLogCategory_APSCMSampleBufferMerger > 50
             || gLogCategory_APSCMSampleBufferMerger == -1 && !_LogCategory_Initialize())
      {
        return 0;
      }
    }
    else if (gLogCategory_APSCMSampleBufferMerger > 50
           || gLogCategory_APSCMSampleBufferMerger == -1 && !_LogCategory_Initialize())
    {
      return 0;
    }
    LogPrintF();
    return 0;
  }
  v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  *(_QWORD *)(a1 + 16) = CMCopyDictionaryOfAttachments((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0);
  v16 = CMCopyDictionaryOfAttachments(v15, a2, 1u);
  v11 = 0;
  *(_QWORD *)(a1 + 24) = v16;
LABEL_30:
  if (gLogCategory_APSCMSampleBufferMerger <= 30
    && (gLogCategory_APSCMSampleBufferMerger != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), a2);
  v2 = 1;
  if (v11)
LABEL_35:
    CFRelease(v11);
  return v2;
}

BOOL sbufMerger_isSBufReTimed(void *a1)
{
  const __CFDictionary *v2;
  CMTime time2;
  CMTime rhs;
  CMTime lhs;
  CMTime time1;
  CMTime v8;

  v2 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA2728], 0);
  v8 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (v2)
    CMTimeMakeFromDictionary(&v8, v2);
  else
    v8 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  CMSampleBufferGetPresentationTimeStamp(&lhs, (CMSampleBufferRef)a1);
  rhs = v8;
  CMTimeAdd(&time1, &lhs, &rhs);
  CMSampleBufferGetOutputPresentationTimeStamp(&time2, (CMSampleBufferRef)a1);
  return CMTimeCompare(&time1, &time2) != 0;
}

BOOL sbufMerger_areAttachmentsMergable(const __CFDictionary *a1, const __CFDictionary *a2, int a3)
{
  uint64_t Count;
  uint64_t v7;
  const void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;

  Count = FigCFDictionaryGetCount();
  v7 = FigCFDictionaryGetCount();
  v8 = (const void **)MEMORY[0x1E0CC4138];
  if (a1)
    Count -= CFDictionaryContainsKey(a1, (const void *)*MEMORY[0x1E0CC4138]) != 0;
  if (a2)
    v7 -= CFDictionaryContainsKey(a2, *v8) != 0;
  if (!(Count | v7))
    return 1;
  if (Count != v7)
    return 0;
  v9 = Count + (char)-APSCFDictionaryPairIsKeyPresentAndEqual();
  v10 = v9 + (char)-APSCFDictionaryPairIsKeyPresentAndEqual();
  v11 = v10 + (char)-APSCFDictionaryPairIsKeyPresentAndEqual();
  v12 = v11 + (char)-APSCFDictionaryPairIsKeyPresentAndEqual();
  if (a3)
  {
    v13 = (const void *)*MEMORY[0x1E0CA2728];
    if (CFDictionaryContainsKey(a1, (const void *)*MEMORY[0x1E0CA2728]))
      v12 -= CFDictionaryContainsKey(a2, v13) != 0;
  }
  return v12 == 0;
}

uint64_t APSCMSampleBufferMergerCopyMergedSBuf(uint64_t a1, CFTypeRef *a2)
{
  CFIndex Count;
  uint64_t v5;
  opaqueCMSampleBuffer *ValueAtIndex;
  opaqueCMSampleBuffer *v7;
  CMSampleTimingInfo *v8;
  CMSampleTimingInfo *v9;
  size_t *v10;
  size_t *v11;
  const __CFAllocator *v12;
  uint64_t v13;
  CFIndex v14;
  char v15;
  CMTime *p_presentationTimeStamp;
  CMTimeEpoch v17;
  opaqueCMSampleBuffer *v18;
  OpaqueCMBlockBuffer *DataBuffer;
  __int128 v20;
  __int128 v21;
  uint64_t appended;
  OpaqueCMBlockBuffer *v23;
  const opaqueCMFormatDescription *FormatDescription;
  const __CFDictionary *v25;
  const __CFDictionary *v26;
  const __CFArray *SampleAttachmentsArray;
  CFIndex i;
  opaqueCMSampleBuffer *v29;
  const __CFArray *v30;
  const __CFArray *v31;
  const __CFDictionary *v32;
  const void **v33;
  const __CFString *v34;
  CMAttachmentMode v35;
  const __CFDictionary *v36;
  opaqueCMSampleBuffer *v37;
  opaqueCMSampleBuffer *v38;
  CFDictionaryRef v39;
  uint64_t v40;
  CFTypeRef *v42;
  const __CFAllocator *v43;
  const CMSampleTimingInfo *v44;
  __int128 v45;
  CMTime rhs;
  CMTime lhs;
  CMTime time;
  CMTime v49;
  CMSampleBufferRef sampleBufferOut;
  CMBlockBufferRef blockBufferOut;

  sampleBufferOut = 0;
  blockBufferOut = 0;
  v49 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (!a1 || !a2)
  {
    APSLogErrorAt(0);
    v40 = 4294960591;
    goto LABEL_41;
  }
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
  if (Count)
  {
    v5 = Count;
    ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), 0);
    v7 = ValueAtIndex;
    if (v5 > 1)
    {
      v8 = (CMSampleTimingInfo *)malloc_type_calloc(v5, 0x48uLL, 0x1000040FF89C88EuLL);
      if (v8)
      {
        v9 = v8;
        v10 = (size_t *)malloc_type_calloc(v5, 8uLL, 0x100004000313F17uLL);
        if (v10)
        {
          v11 = v10;
          v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v13 = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v5, 0, &blockBufferOut);
          if ((_DWORD)v13)
          {
            v40 = v13;
          }
          else
          {
            v42 = a2;
            v43 = v12;
            v44 = v9;
            v14 = 0;
            v15 = 0;
            p_presentationTimeStamp = &v9->presentationTimeStamp;
            v45 = *MEMORY[0x1E0CA2E18];
            v17 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
            do
            {
              v18 = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), v14);
              DataBuffer = CMSampleBufferGetDataBuffer(v18);
              CMSampleBufferGetPresentationTimeStamp(&time, v18);
              v20 = *(_OWORD *)&time.value;
              p_presentationTimeStamp->epoch = time.epoch;
              *(_OWORD *)&p_presentationTimeStamp->value = v20;
              CMSampleBufferGetDuration(&time, v18);
              v21 = *(_OWORD *)&time.value;
              p_presentationTimeStamp[-1].epoch = time.epoch;
              *(_OWORD *)&p_presentationTimeStamp[-1].value = v21;
              *(_OWORD *)&p_presentationTimeStamp[1].value = v45;
              p_presentationTimeStamp[1].epoch = v17;
              if (DataBuffer)
              {
                if (!CMBlockBufferIsEmpty(DataBuffer))
                {
                  v11[v14] = CMBlockBufferGetDataLength(DataBuffer);
                  appended = CMBlockBufferAppendBufferReference(blockBufferOut, DataBuffer, 0, 0, 0);
                  if ((_DWORD)appended)
                  {
                    v40 = appended;
                    APSLogErrorAt(appended);
                    v39 = 0;
                    v9 = (CMSampleTimingInfo *)v44;
                    goto LABEL_39;
                  }
                }
              }
              v15 |= CMSampleBufferGetSampleAttachmentsArray(v18, 0) != 0;
              ++v14;
              p_presentationTimeStamp += 3;
            }
            while (v5 != v14);
            v23 = blockBufferOut;
            FormatDescription = CMSampleBufferGetFormatDescription(v7);
            v9 = (CMSampleTimingInfo *)v44;
            v13 = CMSampleBufferCreateReady(v43, v23, FormatDescription, v5, v5, v44, v5, v11, &sampleBufferOut);
            if (!(_DWORD)v13)
            {
              FigSampleBufferGetDecryptor();
              FigSampleBufferSetDecryptor();
              v25 = *(const __CFDictionary **)(a1 + 16);
              if (v25)
                CMSetAttachments(sampleBufferOut, v25, 0);
              v26 = *(const __CFDictionary **)(a1 + 24);
              if (v26)
                CMSetAttachments(sampleBufferOut, v26, 1u);
              if (v15)
              {
                SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sampleBufferOut, 1u);
                for (i = 0; i != v5; ++i)
                {
                  v29 = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), i);
                  v30 = CMSampleBufferGetSampleAttachmentsArray(v29, 0);
                  if (v30)
                  {
                    v31 = v30;
                    if (CFArrayGetCount(v30) >= 1)
                    {
                      CFArrayGetValueAtIndex(v31, 0);
                      CFArrayGetValueAtIndex(SampleAttachmentsArray, i);
                      FigCFDictionaryAddEntriesToDictionaryWithRecursion();
                    }
                  }
                }
              }
              if (*(_BYTE *)(a1 + 40))
              {
                v32 = *(const __CFDictionary **)(a1 + 24);
                v33 = (const void **)MEMORY[0x1E0CA2728];
                if (v32)
                {
                  v34 = (const __CFString *)*MEMORY[0x1E0CA2728];
                  if (CFDictionaryContainsKey(v32, (const void *)*MEMORY[0x1E0CA2728]))
                  {
                    v35 = 1;
LABEL_31:
                    v9 = (CMSampleTimingInfo *)v44;
                    v37 = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), v5 - 1);
                    CMSampleBufferGetOutputPresentationTimeStamp(&lhs, v37);
                    v38 = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), 0);
                    CMSampleBufferGetPresentationTimeStamp(&rhs, v38);
                    CMTimeSubtract(&v49, &lhs, &rhs);
                    time = v49;
                    v39 = CMTimeCopyAsDictionary(&time, v43);
                    CMSetAttachment(sampleBufferOut, v34, v39, v35);
                    goto LABEL_34;
                  }
                }
                v36 = *(const __CFDictionary **)(a1 + 16);
                if (v36)
                {
                  v34 = (const __CFString *)*v33;
                  if (CFDictionaryContainsKey(v36, *v33))
                  {
                    v35 = 0;
                    goto LABEL_31;
                  }
                }
                v39 = 0;
                v9 = (CMSampleTimingInfo *)v44;
              }
              else
              {
                v39 = 0;
              }
LABEL_34:
              if (gLogCategory_APSCMSampleBufferMerger <= 30
                && (gLogCategory_APSCMSampleBufferMerger != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              v40 = 0;
              *v42 = CFRetain(sampleBufferOut);
              goto LABEL_39;
            }
            v40 = v13;
          }
          APSLogErrorAt(v13);
          v39 = 0;
LABEL_39:
          free(v9);
          free(v11);
          if (v39)
            CFRelease(v39);
          goto LABEL_41;
        }
        APSLogErrorAt(0);
        free(v9);
      }
      else
      {
        APSLogErrorAt(0);
      }
      v40 = 4294960568;
      goto LABEL_41;
    }
    *a2 = CFRetain(ValueAtIndex);
    if (gLogCategory_APSCMSampleBufferMerger <= 30
      && (gLogCategory_APSCMSampleBufferMerger != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v40 = 0;
  }
  else
  {
    APSLogErrorAt(0);
    if (gLogCategory_APSCMSampleBufferMerger <= 30
      && (gLogCategory_APSCMSampleBufferMerger != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v40 = 4294960578;
  }
LABEL_41:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (sampleBufferOut)
    CFRelease(sampleBufferOut);
  return v40;
}

uint64_t APSAudioFormatDescriptionGetTypeID()
{
  if (APSAudioFormatDescriptionGetTypeID_sInitOnce != -1)
    dispatch_once_f(&APSAudioFormatDescriptionGetTypeID_sInitOnce, &APSAudioFormatDescriptionGetTypeID_sTypeID, (dispatch_function_t)audioFormat_getTypeID);
  return APSAudioFormatDescriptionGetTypeID_sTypeID;
}

uint64_t audioFormat_getTypeID(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

double audioFormat_Finalize(uint64_t a1)
{
  const void *v2;
  double result;

  v2 = *(const void **)(a1 + 104);
  if (v2)
    CFRelease(v2);
  if (gLogCategory_APSAudioFormatDescription <= 30
    && (gLogCategory_APSAudioFormatDescription != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

BOOL audioFormat_Equal(_QWORD *a1, _QWORD *a2)
{
  CFTypeID v4;
  CFTypeID v5;

  if (a1)
  {
    v4 = CFGetTypeID(a1);
    if (APSAudioFormatDescriptionGetTypeID_sInitOnce != -1)
      dispatch_once_f(&APSAudioFormatDescriptionGetTypeID_sInitOnce, &APSAudioFormatDescriptionGetTypeID_sTypeID, (dispatch_function_t)audioFormat_getTypeID);
    if (v4 == APSAudioFormatDescriptionGetTypeID_sTypeID && a2)
    {
      v5 = CFGetTypeID(a2);
      if (APSAudioFormatDescriptionGetTypeID_sInitOnce != -1)
        dispatch_once_f(&APSAudioFormatDescriptionGetTypeID_sInitOnce, &APSAudioFormatDescriptionGetTypeID_sTypeID, (dispatch_function_t)audioFormat_getTypeID);
      if (v5 == APSAudioFormatDescriptionGetTypeID_sTypeID)
        return a1[12] == a2[12];
    }
  }
  APSLogErrorAt(0);
  return 0;
}

__CFString *audioFormat_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  __CFString *v3;
  uint64_t v4;
  const char *v5;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v3 = Mutable;
  if (Mutable)
  {
    v4 = *(_QWORD *)(a1 + 96);
    v5 = "PCM/24000/16/1";
    switch(v4)
    {
      case 2:
        v5 = "PCM/8000/16/1";
        break;
      case 3:
        v5 = "PCM/8000/16/2";
        break;
      case 4:
        v5 = "PCM/16000/16/1";
        break;
      case 5:
        v5 = "PCM/16000/16/2";
        break;
      case 6:
        break;
      case 7:
        v5 = "PCM/24000/16/2";
        break;
      case 8:
        v5 = "PCM/32000/16/1";
        break;
      case 9:
        v5 = "PCM/32000/16/2";
        break;
      case 10:
        v5 = "PCM/44100/16/1";
        break;
      case 11:
        v5 = "PCM/44100/16/2";
        break;
      case 12:
        v5 = "PCM/44100/24/1";
        break;
      case 13:
        v5 = "PCM/44100/24/2";
        break;
      case 14:
        v5 = "PCM/48000/16/1";
        break;
      case 15:
        v5 = "PCM/48000/16/2";
        break;
      case 16:
        v5 = "PCM/48000/24/1";
        break;
      case 17:
        v5 = "PCM/48000/24/2";
        break;
      case 18:
        v5 = "ALAC/44100/16/2";
        break;
      case 19:
        v5 = "ALAC/44100/24/2";
        break;
      case 20:
        v5 = "ALAC/48000/16/2";
        break;
      case 21:
        v5 = "ALAC/48000/24/2";
        break;
      case 22:
        v5 = "AAC-LC/44100/2";
        break;
      case 23:
        v5 = "AAC-LC/48000/2";
        break;
      case 24:
        v5 = "AAC-ELD/44100/2";
        break;
      case 25:
        v5 = "AAC-ELD/48000/2";
        break;
      case 26:
        v5 = "AAC-ELD/16000/1";
        break;
      case 27:
        v5 = "AAC-ELD/24000/1";
        break;
      case 28:
        v5 = "OPUS/16000/1";
        break;
      case 29:
        v5 = "OPUS/24000/1";
        break;
      case 30:
        v5 = "OPUS/48000/1";
        break;
      case 31:
        v5 = "AAC-ELD/44100/1";
        break;
      case 32:
        v5 = "AAC-ELD/48000/1";
        break;
      case 38:
        v5 = "PCM/48000/16/5.1.2";
        break;
      case 39:
        v5 = "AAC_LC/48000/5.1";
        break;
      case 40:
        v5 = "AAC_LC/48000/5.1.2";
        break;
      case 41:
        v5 = "AAC_ELD/48000/5.1";
        break;
      case 42:
        v5 = "AAC_ELD/48000/5.1.2";
        break;
      case 43:
        v5 = "AAC-ELD/32000/1";
        break;
      case 44:
        v5 = "PCM/48000/16/5.1";
        break;
      case 45:
        v5 = "PCM/48000/32f/1";
        break;
      case 46:
        v5 = "PCM/48000/32f/2";
        break;
      case 47:
        v5 = "PCM/48000/32f/5.1";
        break;
      case 48:
        v5 = "PCM/48000/32f/5.1.2";
        break;
      case 49:
        v5 = "DDPLUS/48000/2";
        break;
      case 50:
        v5 = "DDPLUS/48000/5.1";
        break;
      case 51:
        v5 = "DDPLUS/48000/5.1.2";
        break;
      case 52:
        v5 = "DDPLUS/48000/7.1.4";
        break;
      case 53:
        v5 = "DDPLUS/48000/9.1.6";
        break;
      case 54:
        v5 = "QAAC/48000/2";
        break;
      case 55:
        v5 = "QAAC/48000/5.1";
        break;
      case 56:
        v5 = "QAAC/48000/5.1.2";
        break;
      case 57:
        v5 = "QAACHE/48000/2";
        break;
      case 58:
        v5 = "QAACHE/48000/5.1";
        break;
      case 60:
        v5 = "QAACHE/48000/5.1.2";
        break;
      case 69:
        v5 = "PCM/48000/32f/7.1.4";
        break;
      case 78:
        v5 = "PCM/48000/16/7.1";
        break;
      case 79:
        v5 = "PCM/48000/32f/7.1";
        break;
      case 80:
        v5 = "PCM/48000/16/5.1.4";
        break;
      case 81:
        v5 = "PCM/48000/32f/5.1.4";
        break;
      case 82:
        v5 = "PCM/48000/16/7.1.2";
        break;
      case 83:
        v5 = "PCM/48000/32f/7.1.2";
        break;
      case 84:
        v5 = "PCM/48000/16/7.1.4";
        break;
      case 85:
        v5 = "ALAC/44100/20/2";
        break;
      case 86:
        v5 = "ALAC/48000/20/2";
        break;
      case 90:
        v5 = "AAC_LC/48000/7.1";
        break;
      default:
        if (v4 > 86)
        {
          switch(v4)
          {
            case 'W':
              v5 = "QAC3/48000/5.1";
              break;
            case 'X':
              v5 = "QEC3/48000/7.1";
              break;
            case 'Y':
              v5 = "PAAC/44100/2";
              break;
            default:
LABEL_94:
              v5 = "";
              if (v4 == 75)
                v5 = "MP3/48000/2";
              break;
          }
        }
        else
        {
          switch(v4)
          {
            case '!':
              v5 = "QC3/48000/5.1.2";
              break;
            case '"':
              v5 = "QC3/48000/7.1.4";
              break;
            case '#':
              v5 = "QC3/48000/9.1.6";
              break;
            case '=':
              v5 = "QLAC/48000/24/2";
              break;
            case '>':
              v5 = "QC3/48000/2";
              break;
            case '?':
              v5 = "QC3/48000/5.1";
              break;
            case '@':
              v5 = "APAC/48000/2";
              break;
            case 'A':
              v5 = "APAC/48000/5.1";
              break;
            case 'B':
              v5 = "APAC/48000/5.1.2";
              break;
            case 'C':
              v5 = "APAC/48000/7.1";
              break;
            case 'D':
              v5 = "APAC/48000/7.1.4";
              break;
            case 'F':
              v5 = "QAAC/44100/2";
              break;
            case 'G':
              v5 = "QAACHE/44100/2";
              break;
            case 'H':
              v5 = "QAACHEV2/44100/2";
              break;
            case 'I':
              v5 = "QLAC/44100/24/2";
              break;
            case 'J':
              v5 = "MP3/44100/2";
              break;
            case 'L':
              v5 = "APAC/48000/5.1.4";
              break;
            case 'M':
              v5 = "APAC/48000/7.1.2";
              break;
            default:
              goto LABEL_94;
          }
        }
        break;
    }
    CFStringAppendFormat(Mutable, 0, CFSTR("<APSAudioFormatDescription %p> Index %llu:%s"), a1, *(_QWORD *)(a1 + 96), v5);
  }
  else
  {
    APSLogErrorAt(0);
  }
  return v3;
}

uint64_t APSAudioFormatDescriptionCreateWithAudioFormatIndex(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t Instance;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  if (!a4)
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  if (APSAudioFormatDescriptionGetTypeID_sInitOnce != -1)
    dispatch_once_f(&APSAudioFormatDescriptionGetTypeID_sInitOnce, &APSAudioFormatDescriptionGetTypeID_sTypeID, (dispatch_function_t)audioFormat_getTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v7 = (_DWORD *)Instance;
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 80) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_QWORD *)(Instance + 96) = a2;
    *(_QWORD *)(Instance + 104) = 0;
    v8 = APAudioFormatIndexToASBD(a2, Instance + 16);
    if ((_DWORD)v8)
    {
      v10 = v8;
    }
    else
    {
      v9 = a2 - 2;
      if ((unint64_t)(a2 - 2) >= 0x59)
      {
        v7[22] = -65536;
        v10 = 4294960561;
      }
      else
      {
        v10 = dword_1C96DA40C[v9];
        v11 = dword_1C96DA570[v9];
        v7[22] = v11;
        if (!(_DWORD)v10)
        {
          v7[14] = v11;
          FigCFDictionaryGetBooleanIfPresent();
          if (FigCFDictionaryGetInt32IfPresent())
            v7[8] = 0;
          if (FigCFDictionaryGetInt32IfPresent())
            v7[9] = 0;
          if (FigCFDictionaryGetInt32IfPresent())
            v7[10] = 0;
          if (FigCFDictionaryGetInt32IfPresent())
            v7[12] = 0;
          v10 = 0;
          *a4 = v7;
          return v10;
        }
      }
      v8 = v10;
    }
    APSLogErrorAt(v8);
    CFRelease(v7);
    return v10;
  }
  APSLogErrorAt(0);
  return FigSignalErrorAt();
}

uint64_t APSAudioFormatDescriptionCreateWithASBD(const __CFAllocator *a1, _DWORD *a2, int a3, CFTypeRef *a4)
{
  uint64_t v7;
  CFMutableDictionaryRef Mutable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  CFTypeRef cf;

  v13 = 0;
  cf = 0;
  if (!a4)
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  v7 = ASBDToAPAudioFormatIndex((uint64_t)a2, a3, &v13);
  if (!(_DWORD)v7)
  {
    Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (a2[4] && (v9 = FigCFDictionarySetInt32(), (_DWORD)v9))
    {
      v11 = v9;
    }
    else if (a2[5] && (v9 = FigCFDictionarySetInt32(), (_DWORD)v9))
    {
      v11 = v9;
    }
    else if (a2[6] && (v9 = FigCFDictionarySetInt32(), (_DWORD)v9))
    {
      v11 = v9;
    }
    else
    {
      if (!a2[8] || (v9 = FigCFDictionarySetInt32(), !(_DWORD)v9))
      {
        v10 = APSAudioFormatDescriptionCreateWithAudioFormatIndex((uint64_t)a1, v13, (uint64_t)Mutable, &cf);
        v11 = v10;
        if ((_DWORD)v10)
        {
          APSLogErrorAt(v10);
          if (cf)
            CFRelease(cf);
        }
        else
        {
          *a4 = cf;
          cf = 0;
        }
        goto LABEL_13;
      }
      v11 = v9;
    }
    APSLogErrorAt(v9);
LABEL_13:
    if (Mutable)
      CFRelease(Mutable);
    return v11;
  }
  v11 = v7;
  APSLogErrorAt(v7);
  if (gLogCategory_APSAudioFormatDescription <= 50
    && (gLogCategory_APSAudioFormatDescription != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v11;
}

uint64_t APSAudioFormatDescriptionCreateWithFigEndpointStreamAudioFormatDescription(const __CFAllocator *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t ASBD;
  int ChannelLayoutTag;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v12[2];
  uint64_t v13;

  if (a2 && a3)
  {
    ASBD = FigEndpointStreamAudioFormatDescriptionGetASBD();
    ChannelLayoutTag = FigEndpointStreamAudioFormatDescriptionGetChannelLayoutTag();
    v7 = *(_OWORD *)ASBD;
    v8 = *(_OWORD *)(ASBD + 16);
    v13 = *(_QWORD *)(ASBD + 32);
    v12[0] = v7;
    v12[1] = v8;
    v9 = APSAudioFormatDescriptionCreateWithASBD(a1, v12, ChannelLayoutTag, a3);
    v10 = v9;
    if ((_DWORD)v9)
      APSLogErrorAt(v9);
  }
  else
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  return v10;
}

uint64_t APSAudioFormatDescriptionCreateWithCMFormatDescription(const __CFAllocator *a1, CMAudioFormatDescriptionRef desc, _QWORD *a3)
{
  const AudioFormatListItem *RichestDecodableFormat;
  const AudioChannelLayout *ChannelLayout;
  int mChannelLayoutTag;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v14[2];
  uint64_t v15;
  size_t sizeOut;
  CFTypeRef v17;

  v17 = 0;
  sizeOut = 0;
  if (desc && a3)
  {
    RichestDecodableFormat = CMAudioFormatDescriptionGetRichestDecodableFormat(desc);
    if (!RichestDecodableFormat)
      RichestDecodableFormat = (const AudioFormatListItem *)CMAudioFormatDescriptionGetStreamBasicDescription(desc);
    ChannelLayout = CMAudioFormatDescriptionGetChannelLayout(desc, &sizeOut);
    if (ChannelLayout)
      mChannelLayoutTag = ChannelLayout->mChannelLayoutTag;
    else
      mChannelLayoutTag = -65536;
    v9 = *(_OWORD *)&RichestDecodableFormat->mASBD.mSampleRate;
    v10 = *(_OWORD *)&RichestDecodableFormat->mASBD.mBytesPerPacket;
    v15 = *(_QWORD *)&RichestDecodableFormat->mASBD.mBitsPerChannel;
    v14[0] = v9;
    v14[1] = v10;
    v11 = APSAudioFormatDescriptionCreateWithASBD(a1, v14, mChannelLayoutTag, &v17);
    v12 = v11;
    if ((_DWORD)v11)
    {
      APSLogErrorAt(v11);
      if (v17)
        CFRelease(v17);
    }
    else
    {
      *a3 = v17;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  return v12;
}

CFStringRef APSAudioFormatDescriptionCopyDebugString(uint64_t a1, CFStringRef *a2)
{
  uint64_t v3;
  const char *v4;
  CFStringRef result;

  if (!a2 || !a1)
    return (CFStringRef)APSLogErrorAt(0);
  v3 = *(_QWORD *)(a1 + 96);
  v4 = "PCM/24000/16/1";
  switch(v3)
  {
    case 2:
      v4 = "PCM/8000/16/1";
      break;
    case 3:
      v4 = "PCM/8000/16/2";
      break;
    case 4:
      v4 = "PCM/16000/16/1";
      break;
    case 5:
      v4 = "PCM/16000/16/2";
      break;
    case 6:
      break;
    case 7:
      v4 = "PCM/24000/16/2";
      break;
    case 8:
      v4 = "PCM/32000/16/1";
      break;
    case 9:
      v4 = "PCM/32000/16/2";
      break;
    case 10:
      v4 = "PCM/44100/16/1";
      break;
    case 11:
      v4 = "PCM/44100/16/2";
      break;
    case 12:
      v4 = "PCM/44100/24/1";
      break;
    case 13:
      v4 = "PCM/44100/24/2";
      break;
    case 14:
      v4 = "PCM/48000/16/1";
      break;
    case 15:
      v4 = "PCM/48000/16/2";
      break;
    case 16:
      v4 = "PCM/48000/24/1";
      break;
    case 17:
      v4 = "PCM/48000/24/2";
      break;
    case 18:
      v4 = "ALAC/44100/16/2";
      break;
    case 19:
      v4 = "ALAC/44100/24/2";
      break;
    case 20:
      v4 = "ALAC/48000/16/2";
      break;
    case 21:
      v4 = "ALAC/48000/24/2";
      break;
    case 22:
      v4 = "AAC-LC/44100/2";
      break;
    case 23:
      v4 = "AAC-LC/48000/2";
      break;
    case 24:
      v4 = "AAC-ELD/44100/2";
      break;
    case 25:
      v4 = "AAC-ELD/48000/2";
      break;
    case 26:
      v4 = "AAC-ELD/16000/1";
      break;
    case 27:
      v4 = "AAC-ELD/24000/1";
      break;
    case 28:
      v4 = "OPUS/16000/1";
      break;
    case 29:
      v4 = "OPUS/24000/1";
      break;
    case 30:
      v4 = "OPUS/48000/1";
      break;
    case 31:
      v4 = "AAC-ELD/44100/1";
      break;
    case 32:
      v4 = "AAC-ELD/48000/1";
      break;
    case 38:
      v4 = "PCM/48000/16/5.1.2";
      break;
    case 39:
      v4 = "AAC_LC/48000/5.1";
      break;
    case 40:
      v4 = "AAC_LC/48000/5.1.2";
      break;
    case 41:
      v4 = "AAC_ELD/48000/5.1";
      break;
    case 42:
      v4 = "AAC_ELD/48000/5.1.2";
      break;
    case 43:
      v4 = "AAC-ELD/32000/1";
      break;
    case 44:
      v4 = "PCM/48000/16/5.1";
      break;
    case 45:
      v4 = "PCM/48000/32f/1";
      break;
    case 46:
      v4 = "PCM/48000/32f/2";
      break;
    case 47:
      v4 = "PCM/48000/32f/5.1";
      break;
    case 48:
      v4 = "PCM/48000/32f/5.1.2";
      break;
    case 49:
      v4 = "DDPLUS/48000/2";
      break;
    case 50:
      v4 = "DDPLUS/48000/5.1";
      break;
    case 51:
      v4 = "DDPLUS/48000/5.1.2";
      break;
    case 52:
      v4 = "DDPLUS/48000/7.1.4";
      break;
    case 53:
      v4 = "DDPLUS/48000/9.1.6";
      break;
    case 54:
      v4 = "QAAC/48000/2";
      break;
    case 55:
      v4 = "QAAC/48000/5.1";
      break;
    case 56:
      v4 = "QAAC/48000/5.1.2";
      break;
    case 57:
      v4 = "QAACHE/48000/2";
      break;
    case 58:
      v4 = "QAACHE/48000/5.1";
      break;
    case 60:
      v4 = "QAACHE/48000/5.1.2";
      break;
    case 69:
      v4 = "PCM/48000/32f/7.1.4";
      break;
    case 78:
      v4 = "PCM/48000/16/7.1";
      break;
    case 79:
      v4 = "PCM/48000/32f/7.1";
      break;
    case 80:
      v4 = "PCM/48000/16/5.1.4";
      break;
    case 81:
      v4 = "PCM/48000/32f/5.1.4";
      break;
    case 82:
      v4 = "PCM/48000/16/7.1.2";
      break;
    case 83:
      v4 = "PCM/48000/32f/7.1.2";
      break;
    case 84:
      v4 = "PCM/48000/16/7.1.4";
      break;
    case 85:
      v4 = "ALAC/44100/20/2";
      break;
    case 86:
      v4 = "ALAC/48000/20/2";
      break;
    case 90:
      v4 = "AAC_LC/48000/7.1";
      break;
    default:
      if (v3 > 86)
      {
        switch(v3)
        {
          case 'W':
            v4 = "QAC3/48000/5.1";
            break;
          case 'X':
            v4 = "QEC3/48000/7.1";
            break;
          case 'Y':
            v4 = "PAAC/44100/2";
            break;
          default:
LABEL_94:
            if (v3 == 75)
              v4 = "MP3/48000/2";
            else
              v4 = "";
            break;
        }
      }
      else
      {
        switch(v3)
        {
          case '!':
            v4 = "QC3/48000/5.1.2";
            break;
          case '"':
            v4 = "QC3/48000/7.1.4";
            break;
          case '#':
            v4 = "QC3/48000/9.1.6";
            break;
          case '=':
            v4 = "QLAC/48000/24/2";
            break;
          case '>':
            v4 = "QC3/48000/2";
            break;
          case '?':
            v4 = "QC3/48000/5.1";
            break;
          case '@':
            v4 = "APAC/48000/2";
            break;
          case 'A':
            v4 = "APAC/48000/5.1";
            break;
          case 'B':
            v4 = "APAC/48000/5.1.2";
            break;
          case 'C':
            v4 = "APAC/48000/7.1";
            break;
          case 'D':
            v4 = "APAC/48000/7.1.4";
            break;
          case 'F':
            v4 = "QAAC/44100/2";
            break;
          case 'G':
            v4 = "QAACHE/44100/2";
            break;
          case 'H':
            v4 = "QAACHEV2/44100/2";
            break;
          case 'I':
            v4 = "QLAC/44100/24/2";
            break;
          case 'J':
            v4 = "MP3/44100/2";
            break;
          case 'L':
            v4 = "APAC/48000/5.1.4";
            break;
          case 'M':
            v4 = "APAC/48000/7.1.2";
            break;
          default:
            goto LABEL_94;
        }
      }
      break;
  }
  result = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 0x8000100u);
  *a2 = result;
  return result;
}

uint64_t APSAudioFormatDescriptionGetASBD(uint64_t a1)
{
  if (a1)
    return a1 + 16;
  APSLogErrorAt(0);
  return 0;
}

uint64_t APSAudioFormatDescriptionGetAudioChannelLayout(uint64_t a1)
{
  if (a1)
    return a1 + 56;
  APSLogErrorAt(0);
  return 0;
}

uint64_t APSAudioFormatDescriptionGetChannelLayoutTag(uint64_t a1)
{
  if (a1)
    return *(unsigned int *)(a1 + 56);
  APSLogErrorAt(0);
  return 4294901760;
}

uint64_t APSAudioFormatDescriptionGetAudioFormatIndex(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 96);
  return result;
}

uint64_t APSAudioFormatDescriptionGetLegacyFormatMask(uint64_t a1)
{
  unint64_t v1;

  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 96);
    if (v1 >= 0x40)
      return 0;
    else
      return 1 << v1;
  }
  else
  {
    APSLogErrorAt(0);
    return 0;
  }
}

double APSAudioFormatDescriptionGetSampleRate(uint64_t a1)
{
  if (a1)
    return *(double *)(a1 + 16);
  APSLogErrorAt(0);
  return 0.0;
}

uint64_t APSAudioFormatDescriptionGetCompressionType(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!a1)
  {
    APSLogErrorAt(0);
    return 0;
  }
  result = 0;
  v3 = *(_QWORD *)(a1 + 96);
  v4 = 1;
  if (v3 >= 0x40)
    v5 = 0;
  else
    v5 = 1 << v3;
  if (v5 <= 0x7FFFFFFFFFLL)
  {
    if (v5 >= 0x80000)
    {
      if (v5 > 0xFFFFFF)
      {
        if (v5 > 0x1FFFFFFFFLL)
        {
          if (v5 == 0x200000000 || v5 == 0x400000000)
            return 1902207331;
          v7 = 0x800000000;
          goto LABEL_48;
        }
        if (v5 == 0x1000000 || v5 == 0x2000000)
          return 8;
        return result;
      }
      if (v5 < 0x200000)
      {
        if (v5 != 0x80000 && v5 != 0x100000)
          return result;
      }
      else if (v5 != 0x200000)
      {
        if (v5 == 0x400000 || v5 == 0x800000)
          return 4;
        return result;
      }
    }
    else
    {
      if (v5 <= 2047)
      {
        if (v5 <= 31)
        {
          if (v5 != 0x8000000000000000)
          {
            if (v5 != 8)
              return result;
            return v4;
          }
          return 1902207331;
        }
        if (v5 == 32 || v5 == 128 || v5 == 512)
          return v4;
        return result;
      }
      if (v5 < 0x8000)
      {
        if (v5 == 2048 || v5 == 0x2000)
          return v4;
        return result;
      }
      if (v5 == 0x8000 || v5 == 0x20000)
        return v4;
      if (v5 != 0x40000)
        return result;
    }
    return 2;
  }
  if (v5 > 0x7FFFFFFFFFFFFLL)
  {
    if (v5 > 0xFFFFFFFFFFFFFFLL)
    {
      if (v5 <= 0xFFFFFFFFFFFFFFFLL)
      {
        if (v5 != 0x100000000000000)
        {
          if (v5 != 0x200000000000000 && v5 != 0x400000000000000)
            return result;
          return 1902207848;
        }
        return 1902207331;
      }
      if (v5 == 0x1000000000000000)
        return 1902207848;
      if (v5 == 0x2000000000000000)
        return 1902928227;
      v8 = 0x4000000000000000;
      goto LABEL_66;
    }
    if (v5 > 0x1FFFFFFFFFFFFFLL)
    {
      if (v5 != 0x20000000000000)
      {
        if (v5 == 0x40000000000000)
          return 1902207331;
        v7 = 0x80000000000000;
LABEL_48:
        if (v5 != v7)
          return result;
        return 1902207331;
      }
      return 128;
    }
    if (v5 == 0x8000000000000)
      return 128;
    v8 = 0x10000000000000;
LABEL_66:
    if (v5 != v8)
      return result;
    return 128;
  }
  if (v5 > 0x3FFFFFFFFFFFLL)
  {
    if (v5 > 0xFFFFFFFFFFFFLL)
    {
      if (v5 == 0x1000000000000)
        return v4;
      if (v5 == 0x2000000000000)
        return 128;
      v8 = 0x4000000000000;
      goto LABEL_66;
    }
    if (v5 == 0x400000000000)
      return v4;
    v6 = 0x800000000000;
LABEL_73:
    if (v5 != v6)
      return result;
    return v4;
  }
  if (v5 > 0x1FFFFFFFFFFLL)
  {
    if (v5 != 0x20000000000 && v5 != 0x40000000000)
    {
      v6 = 0x200000000000;
      goto LABEL_73;
    }
    return 8;
  }
  if (v5 == 0x8000000000 || v5 == 0x10000000000)
    return 4;
  return result;
}

uint64_t APSAudioFormatDescriptionGetFormatID(uint64_t a1)
{
  if (a1)
    return *(unsigned int *)(a1 + 24);
  APSLogErrorAt(0);
  return 0;
}

uint64_t APSAudioFormatDescriptionGetFramesPerPacket(uint64_t a1)
{
  if (a1)
    return *(unsigned int *)(a1 + 36);
  APSLogErrorAt(0);
  return 0;
}

uint64_t APSAudioFormatDescriptionGetChannelCount(uint64_t a1)
{
  if (a1)
    return *(unsigned int *)(a1 + 44);
  APSLogErrorAt(0);
  return 0;
}

uint64_t APSAudioFormatDescriptionGetBitsPerChannel(uint64_t a1)
{
  if (a1)
    return *(unsigned int *)(a1 + 48);
  APSLogErrorAt(0);
  return 0;
}

uint64_t APSAudioFormatDescriptionCopyFigEndpointStreamAudioFormatDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a2 && a3)
  {
    v3 = FigEndpointStreamAudioFormatDescriptionCreate();
    v4 = v3;
    if ((_DWORD)v3)
      APSLogErrorAt(v3);
  }
  else
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  return v4;
}

uint64_t APSAPACApplyIndependentDecodableDependancy(opaqueCMSampleBuffer *a1)
{
  const opaqueCMFormatDescription *FormatDescription;
  uint64_t v3;
  CFTypeRef v4;
  int v5;
  const void *v8;
  const void *SInt16;
  uint64_t v10;
  uint64_t result;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
  {
    APSLogErrorAt(0);
    return 0;
  }
  FormatDescription = CMSampleBufferGetFormatDescription(a1);
  if (!FormatDescription)
    return 0;
  v3 = APSAudioFormatDescriptionCreateWithCMFormatDescription((const __CFAllocator *)*MEMORY[0x1E0C9AE00], FormatDescription, &cf);
  if ((_DWORD)v3)
  {
    v10 = v3;
    APSLogErrorAt(v3);
    SInt16 = 0;
    goto LABEL_19;
  }
  v4 = cf;
  if (cf)
  {
    v5 = *((_DWORD *)cf + 6);
    if (v5 != 1634754915 && v5 != 1902211171 && v5 != 1667330147)
    {
      SInt16 = 0;
      v10 = 0;
LABEL_20:
      CFRelease(v4);
LABEL_21:
      if (SInt16)
        CFRelease(SInt16);
      return v10;
    }
    SInt16 = (const void *)FigCFNumberCreateSInt16();
    if (SInt16)
    {
      v8 = (const void *)*MEMORY[0x1E0C9AE40];
      CMSetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA25A8], SInt16, 1u);
      CMSetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA2620], v8, 1u);
      if (gLogCategory_APSAPACSupport <= 10
        && (gLogCategory_APSAPACSupport != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v10 = 0;
    }
    else
    {
      APSLogErrorAt(0);
      v10 = 4294954510;
    }
LABEL_19:
    v4 = cf;
    if (!cf)
      goto LABEL_21;
    goto LABEL_20;
  }
  result = APSLogErrorAt(0);
  __break(1u);
  return result;
}

uint64_t APSAudioFormatDescriptionListGetTypeID()
{
  if (APSAudioFormatDescriptionListGetTypeID_sInitOnce != -1)
    dispatch_once_f(&APSAudioFormatDescriptionListGetTypeID_sInitOnce, &APSAudioFormatDescriptionListGetTypeID_sTypeID, (dispatch_function_t)audioFormatList_getTypeID);
  return APSAudioFormatDescriptionListGetTypeID_sTypeID;
}

uint64_t audioFormatList_getTypeID(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

void audioFormatList_Finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  if (gLogCategory_APSAudioFormatDescriptionList <= 30
    && (gLogCategory_APSAudioFormatDescriptionList != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
  v5 = (const void *)a1[6];
  if (v5)
  {
    CFRelease(v5);
    a1[6] = 0;
  }
  v6 = (const void *)a1[5];
  if (v6)
  {
    CFRelease(v6);
    a1[5] = 0;
  }
}

BOOL audioFormatList_Equal(const void *a1, const void *a2)
{
  CFTypeID v4;
  CFTypeID v5;
  uint64_t v6;
  CFIndex Count;
  const __CFAllocator *v8;
  CFMutableArrayRef MutableCopy;
  const __CFArray *v10;
  CFMutableArrayRef v11;
  const __CFArray *v12;
  _BOOL8 v13;
  CFArrayRef v15;
  CFArrayRef theArray;
  CFRange v17;
  CFRange v18;

  v15 = 0;
  theArray = 0;
  if (!a1)
    goto LABEL_20;
  v4 = CFGetTypeID(a1);
  if (APSAudioFormatDescriptionListGetTypeID_sInitOnce != -1)
    dispatch_once_f(&APSAudioFormatDescriptionListGetTypeID_sInitOnce, &APSAudioFormatDescriptionListGetTypeID_sTypeID, (dispatch_function_t)audioFormatList_getTypeID);
  if (v4 != APSAudioFormatDescriptionListGetTypeID_sTypeID)
  {
LABEL_20:
    v6 = 0;
LABEL_22:
    APSLogErrorAt(v6);
    goto LABEL_23;
  }
  if (!a2)
    goto LABEL_21;
  v5 = CFGetTypeID(a2);
  if (APSAudioFormatDescriptionListGetTypeID_sInitOnce != -1)
    dispatch_once_f(&APSAudioFormatDescriptionListGetTypeID_sInitOnce, &APSAudioFormatDescriptionListGetTypeID_sTypeID, (dispatch_function_t)audioFormatList_getTypeID);
  if (v5 != APSAudioFormatDescriptionListGetTypeID_sTypeID)
  {
LABEL_21:
    v6 = 0;
    goto LABEL_22;
  }
  v6 = APSAudioFormatDescriptionListCopyAudioFormatDescriptionsArray((uint64_t)a1, (uint64_t *)&theArray);
  if ((_DWORD)v6)
    goto LABEL_22;
  v6 = APSAudioFormatDescriptionListCopyAudioFormatDescriptionsArray((uint64_t)a2, (uint64_t *)&v15);
  if ((_DWORD)v6)
    goto LABEL_22;
  Count = CFArrayGetCount(theArray);
  if (Count == CFArrayGetCount(v15))
  {
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theArray);
    if (MutableCopy)
    {
      v10 = MutableCopy;
      v11 = CFArrayCreateMutableCopy(v8, 0, v15);
      if (v11)
      {
        v12 = v11;
        v17.length = CFArrayGetCount(v10);
        v17.location = 0;
        CFArraySortValues(v10, v17, (CFComparatorFunction)audioFormatList_objComparatorX, 0);
        v18.length = CFArrayGetCount(v12);
        v18.location = 0;
        CFArraySortValues(v12, v18, (CFComparatorFunction)audioFormatList_objComparatorX, 0);
        v13 = CFEqual(v10, v12) != 0;
        CFRelease(v10);
        CFRelease(v12);
        goto LABEL_15;
      }
      CFRelease(v10);
    }
  }
LABEL_23:
  v13 = 0;
LABEL_15:
  if (theArray)
    CFRelease(theArray);
  if (v15)
    CFRelease(v15);
  return v13;
}

__CFString *audioFormatList_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  __CFString *v3;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v3 = Mutable;
  if (Mutable)
    CFStringAppendFormat(Mutable, 0, CFSTR("<APSAudioFormatDescriptionList %p> %@"), a1, *(_QWORD *)(a1 + 16));
  else
    APSLogErrorAt(0);
  return v3;
}

uint64_t APSAudioFormatDescriptionListCopyAudioFormatDescriptionsArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (a1 && a2 && (v3 = FigCFDictionaryCopyArrayOfValues()) != 0)
  {
    v4 = v3;
    result = 0;
    *a2 = v4;
  }
  else
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  return result;
}

uint64_t audioFormatList_objComparatorX(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 96);
    if (a2)
    {
LABEL_3:
      v3 = *(_QWORD *)(a2 + 96);
      goto LABEL_4;
    }
  }
  else
  {
    v2 = 0;
    if (a2)
      goto LABEL_3;
  }
  v3 = 0;
LABEL_4:
  v4 = v2 > v3;
  if (v2 >= v3)
    v5 = 0;
  else
    v5 = -1;
  if (v4)
    return 1;
  else
    return v5;
}

uint64_t APSAudioFormatDescriptionListCreate(const __CFAllocator *a1, _QWORD *a2)
{
  _OWORD *Instance;
  _OWORD *v5;
  CFMutableDictionaryRef Mutable;
  const CFDictionaryKeyCallBacks *v7;
  const CFDictionaryValueCallBacks *v8;
  CFMutableDictionaryRef v9;
  uint64_t result;

  if (a2)
  {
    if (APSAudioFormatDescriptionListGetTypeID_sInitOnce != -1)
      dispatch_once_f(&APSAudioFormatDescriptionListGetTypeID_sInitOnce, &APSAudioFormatDescriptionListGetTypeID_sTypeID, (dispatch_function_t)audioFormatList_getTypeID);
    Instance = (_OWORD *)_CFRuntimeCreateInstance();
    if (Instance)
    {
      v5 = Instance;
      Instance[2] = 0u;
      Instance[3] = 0u;
      Instance[1] = 0u;
      Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *((_QWORD *)v5 + 2) = Mutable;
      if (Mutable
        && (v7 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390],
            v8 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0],
            *((_QWORD *)v5 + 6) = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]),
            v9 = CFDictionaryCreateMutable(a1, 0, v7, v8),
            (*((_QWORD *)v5 + 5) = v9) != 0))
      {
        result = 0;
        *((_DWORD *)v5 + 14) = 0;
        *((_WORD *)v5 + 30) = 0;
        *((_QWORD *)v5 + 3) = 0;
        *((_QWORD *)v5 + 4) = 0;
        *a2 = v5;
      }
      else
      {
        APSLogErrorAt(0);
        CFRelease(v5);
        return 4294954510;
      }
    }
    else
    {
      APSLogErrorAt(0);
      return FigSignalErrorAt();
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  return result;
}

void APSAudioFormatDescriptionListCopyDebugString(uint64_t a1, _QWORD *a2)
{
  uint64_t Mutable;
  const void *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  const void *ValueAtIndex;
  CFTypeRef cf;
  CFArrayRef theArray;

  cf = 0;
  theArray = 0;
  if (!a1 || !a2)
  {
    APSLogErrorAt(0);
    goto LABEL_12;
  }
  Mutable = (uint64_t)CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v5 = (const void *)Mutable;
  if (Mutable)
  {
    Mutable = APSAudioFormatDescriptionListCopyAudioFormatDescriptionsArray(a1, (uint64_t *)&theArray);
    if (!(_DWORD)Mutable)
    {
      Count = CFArrayGetCount(theArray);
      if (Count >= 1)
      {
        v7 = Count;
        v8 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, v8);
          APSAudioFormatDescriptionCopyDebugString((uint64_t)ValueAtIndex, (CFStringRef *)&cf);
          Mutable = CFStringAppendF();
          if ((_DWORD)Mutable)
            goto LABEL_20;
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
        }
        while (v7 != ++v8);
      }
      *a2 = v5;
LABEL_12:
      v5 = 0;
      goto LABEL_13;
    }
  }
LABEL_20:
  APSLogErrorAt(Mutable);
LABEL_13:
  if (theArray)
    CFRelease(theArray);
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
}

uint64_t APSAudioFormatDescriptionListCreateWithAudioFormatDescriptionArray(const __CFAllocator *a1, const __CFArray *a2, CFTypeRef *a3)
{
  uint64_t v5;
  CFIndex v6;
  CFIndex Count;
  const void *ValueAtIndex;
  uint64_t v9;
  CFTypeID v10;
  uint64_t v12;
  CFTypeRef cf;

  cf = 0;
  if (a3)
  {
    v5 = APSAudioFormatDescriptionListCreate(a1, &cf);
    if ((_DWORD)v5)
    {
      v12 = v5;
LABEL_17:
      APSLogErrorAt(v5);
    }
    else
    {
      v6 = 0;
      while (1)
      {
        if (a2)
          Count = CFArrayGetCount(a2);
        else
          Count = 0;
        if (v6 >= Count)
        {
          v12 = 0;
          *a3 = cf;
          return v12;
        }
        ValueAtIndex = CFArrayGetValueAtIndex(a2, v6);
        if (!ValueAtIndex)
          break;
        v9 = (uint64_t)ValueAtIndex;
        v10 = CFGetTypeID(ValueAtIndex);
        if (APSAudioFormatDescriptionGetTypeID_sInitOnce != -1)
          dispatch_once_f(&APSAudioFormatDescriptionGetTypeID_sInitOnce, &APSAudioFormatDescriptionGetTypeID_sTypeID, (dispatch_function_t)audioFormat_getTypeID);
        if (v10 != APSAudioFormatDescriptionGetTypeID_sTypeID)
          break;
        v5 = APSAudioFormatDescriptionListAddFormat((uint64_t)cf, v9);
        ++v6;
        if ((_DWORD)v5)
        {
          v12 = v5;
          goto LABEL_17;
        }
      }
      APSLogErrorAt(0);
      v12 = 4294954516;
    }
    if (cf)
      CFRelease(cf);
  }
  else
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  return v12;
}

uint64_t APSAudioFormatDescriptionListAddFormat(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  double v5;
  const __CFString *v6;
  int v7;
  const __CFAllocator *v8;
  CFStringRef v9;
  CFDataRef v10;
  const void *SInt32;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int FullRangeChannelCountFromChannelLayoutTag;
  uint64_t v18;
  UInt8 bytes[4];
  void *key;

  key = 0;
  *(_DWORD *)bytes = -65536;
  if (!a1 || !a2)
  {
    APSLogErrorAt(0);
    SInt32 = 0;
    v9 = 0;
    v10 = 0;
    v18 = 4294954516;
    goto LABEL_45;
  }
  v4 = *(_DWORD *)(a2 + 44);
  if (*(_DWORD *)(a1 + 56) > v4)
    v4 = *(_DWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 56) = v4;
  v5 = *(double *)(a2 + 16);
  if (v5 == 44100.0)
  {
    *(_BYTE *)(a1 + 61) = 1;
  }
  else if (v5 == 48000.0)
  {
    *(_BYTE *)(a1 + 60) = 1;
  }
  v6 = 0;
  v7 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)bytes = v7;
  if (v7 <= 12582923)
  {
    if (v7 > 8126469)
    {
      if (v7 == 8126470)
      {
        v6 = CFSTR("5_1");
      }
      else if (v7 == 8388616)
      {
        v6 = CFSTR("7_1");
      }
    }
    else if (v7 == 6553601)
    {
      v6 = CFSTR("Mono");
    }
    else if (v7 == 6619138)
    {
      v6 = CFSTR("Stereo");
    }
  }
  else if (v7 <= 12713991)
  {
    if (v7 == 12582924)
    {
      v6 = CFSTR("7_1_4");
    }
    else if (v7 == 12648464)
    {
      v6 = CFSTR("9_1_6");
    }
  }
  else
  {
    switch(v7)
    {
      case 12713992:
        v6 = CFSTR("5_1_2");
        break;
      case 12779530:
        v6 = CFSTR("5_1_4");
        break;
      case 12845066:
        v6 = CFSTR("7_1_2");
        break;
    }
  }
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("ChannelLayoutTag:%@"), v6);
  if (!v9)
  {
    APSLogErrorAt(0);
    SInt32 = 0;
    v10 = 0;
LABEL_58:
    v18 = 4294954510;
    goto LABEL_45;
  }
  v10 = CFDataCreate(v8, bytes, 4);
  if (!v10)
  {
    APSLogErrorAt(0);
    SInt32 = 0;
    goto LABEL_58;
  }
  CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 48), v9, v10);
  SInt32 = (const void *)FigCFNumberCreateSInt32();
  if (!SInt32)
  {
    APSLogErrorAt(0);
    goto LABEL_58;
  }
  CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 40), SInt32, (const void *)*MEMORY[0x1E0C9AE50]);
  v12 = audioFormatList_copyHashedKeyFromAudioFormatDescription(a2, (CFStringRef *)&key);
  if (!(_DWORD)v12)
  {
    v13 = *(_QWORD *)(a1 + 32);
    if (!v13)
    {
      *(_QWORD *)(a1 + 32) = CFRetain((CFTypeRef)a2);
      goto LABEL_44;
    }
    v14 = *(_DWORD *)(a2 + 44);
    v15 = *(_DWORD *)(v13 + 44);
    if (v14 <= v15)
    {
      if (v14 != v15)
        goto LABEL_44;
      if (v14 > 2)
      {
        v16 = *(_DWORD *)(v13 + 56);
        FullRangeChannelCountFromChannelLayoutTag = APSAudioFormatGetFullRangeChannelCountFromChannelLayoutTag(*(_DWORD *)(a2 + 56));
        if (FullRangeChannelCountFromChannelLayoutTag <= APSAudioFormatGetFullRangeChannelCountFromChannelLayoutTag(v16))
          goto LABEL_44;
        v13 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = a2;
        CFRetain((CFTypeRef)a2);
        if (!v13)
          goto LABEL_44;
        goto LABEL_37;
      }
      if (*(double *)(a2 + 16) <= *(double *)(v13 + 16))
        goto LABEL_44;
    }
    *(_QWORD *)(a1 + 32) = a2;
    CFRetain((CFTypeRef)a2);
LABEL_37:
    CFRelease((CFTypeRef)v13);
LABEL_44:
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 16), key, (const void *)a2);
    v18 = 0;
    goto LABEL_45;
  }
  v18 = v12;
  APSLogErrorAt(v12);
LABEL_45:
  if (key)
    CFRelease(key);
  if (SInt32)
    CFRelease(SInt32);
  if (v9)
    CFRelease(v9);
  if (v10)
    CFRelease(v10);
  return v18;
}

uint64_t audioFormatList_copyHashedKeyFromAudioFormatDescription(uint64_t a1, CFStringRef *a2)
{
  uint64_t v3;
  const __CFAllocator *v4;
  const char *v5;
  CFStringRef v6;
  CFStringRef v7;
  uint64_t result;

  if (a2)
  {
    if (a1)
    {
      v3 = *(_QWORD *)(a1 + 96);
      v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v5 = "PCM/24000/16/1";
      switch(v3)
      {
        case 2:
          v5 = "PCM/8000/16/1";
          break;
        case 3:
          v5 = "PCM/8000/16/2";
          break;
        case 4:
          v5 = "PCM/16000/16/1";
          break;
        case 5:
          v5 = "PCM/16000/16/2";
          break;
        case 6:
          break;
        case 7:
          v5 = "PCM/24000/16/2";
          break;
        case 8:
          v5 = "PCM/32000/16/1";
          break;
        case 9:
          v5 = "PCM/32000/16/2";
          break;
        case 10:
          v5 = "PCM/44100/16/1";
          break;
        case 11:
          v5 = "PCM/44100/16/2";
          break;
        case 12:
          v5 = "PCM/44100/24/1";
          break;
        case 13:
          v5 = "PCM/44100/24/2";
          break;
        case 14:
          v5 = "PCM/48000/16/1";
          break;
        case 15:
          v5 = "PCM/48000/16/2";
          break;
        case 16:
          v5 = "PCM/48000/24/1";
          break;
        case 17:
          v5 = "PCM/48000/24/2";
          break;
        case 18:
          v5 = "ALAC/44100/16/2";
          break;
        case 19:
          v5 = "ALAC/44100/24/2";
          break;
        case 20:
          v5 = "ALAC/48000/16/2";
          break;
        case 21:
          v5 = "ALAC/48000/24/2";
          break;
        case 22:
          v5 = "AAC-LC/44100/2";
          break;
        case 23:
          v5 = "AAC-LC/48000/2";
          break;
        case 24:
          v5 = "AAC-ELD/44100/2";
          break;
        case 25:
          v5 = "AAC-ELD/48000/2";
          break;
        case 26:
          v5 = "AAC-ELD/16000/1";
          break;
        case 27:
          v5 = "AAC-ELD/24000/1";
          break;
        case 28:
          v5 = "OPUS/16000/1";
          break;
        case 29:
          v5 = "OPUS/24000/1";
          break;
        case 30:
          v5 = "OPUS/48000/1";
          break;
        case 31:
          v5 = "AAC-ELD/44100/1";
          break;
        case 32:
          v5 = "AAC-ELD/48000/1";
          break;
        case 38:
          v5 = "PCM/48000/16/5.1.2";
          break;
        case 39:
          v5 = "AAC_LC/48000/5.1";
          break;
        case 40:
          v5 = "AAC_LC/48000/5.1.2";
          break;
        case 41:
          v5 = "AAC_ELD/48000/5.1";
          break;
        case 42:
          v5 = "AAC_ELD/48000/5.1.2";
          break;
        case 43:
          v5 = "AAC-ELD/32000/1";
          break;
        case 44:
          v5 = "PCM/48000/16/5.1";
          break;
        case 45:
          v5 = "PCM/48000/32f/1";
          break;
        case 46:
          v5 = "PCM/48000/32f/2";
          break;
        case 47:
          v5 = "PCM/48000/32f/5.1";
          break;
        case 48:
          v5 = "PCM/48000/32f/5.1.2";
          break;
        case 49:
          v5 = "DDPLUS/48000/2";
          break;
        case 50:
          v5 = "DDPLUS/48000/5.1";
          break;
        case 51:
          v5 = "DDPLUS/48000/5.1.2";
          break;
        case 52:
          v5 = "DDPLUS/48000/7.1.4";
          break;
        case 53:
          v5 = "DDPLUS/48000/9.1.6";
          break;
        case 54:
          v5 = "QAAC/48000/2";
          break;
        case 55:
          v5 = "QAAC/48000/5.1";
          break;
        case 56:
          v5 = "QAAC/48000/5.1.2";
          break;
        case 57:
          v5 = "QAACHE/48000/2";
          break;
        case 58:
          v5 = "QAACHE/48000/5.1";
          break;
        case 60:
          v5 = "QAACHE/48000/5.1.2";
          break;
        case 69:
          v5 = "PCM/48000/32f/7.1.4";
          break;
        case 78:
          v5 = "PCM/48000/16/7.1";
          break;
        case 79:
          v5 = "PCM/48000/32f/7.1";
          break;
        case 80:
          v5 = "PCM/48000/16/5.1.4";
          break;
        case 81:
          v5 = "PCM/48000/32f/5.1.4";
          break;
        case 82:
          v5 = "PCM/48000/16/7.1.2";
          break;
        case 83:
          v5 = "PCM/48000/32f/7.1.2";
          break;
        case 84:
          v5 = "PCM/48000/16/7.1.4";
          break;
        case 85:
          v5 = "ALAC/44100/20/2";
          break;
        case 86:
          v5 = "ALAC/48000/20/2";
          break;
        case 90:
          v5 = "AAC_LC/48000/7.1";
          break;
        default:
          if (v3 > 86)
          {
            switch(v3)
            {
              case 'W':
                v5 = "QAC3/48000/5.1";
                break;
              case 'X':
                v5 = "QEC3/48000/7.1";
                break;
              case 'Y':
                v5 = "PAAC/44100/2";
                break;
              default:
                goto LABEL_98;
            }
          }
          else
          {
            switch(v3)
            {
              case '!':
                v5 = "QC3/48000/5.1.2";
                break;
              case '"':
                v5 = "QC3/48000/7.1.4";
                break;
              case '#':
                v5 = "QC3/48000/9.1.6";
                break;
              case '=':
                v5 = "QLAC/48000/24/2";
                break;
              case '>':
                v5 = "QC3/48000/2";
                break;
              case '?':
                v5 = "QC3/48000/5.1";
                break;
              case '@':
                v5 = "APAC/48000/2";
                break;
              case 'A':
                v5 = "APAC/48000/5.1";
                break;
              case 'B':
                v5 = "APAC/48000/5.1.2";
                break;
              case 'C':
                v5 = "APAC/48000/7.1";
                break;
              case 'D':
                v5 = "APAC/48000/7.1.4";
                break;
              case 'F':
                v5 = "QAAC/44100/2";
                break;
              case 'G':
                v5 = "QAACHE/44100/2";
                break;
              case 'H':
                v5 = "QAACHEV2/44100/2";
                break;
              case 'I':
                v5 = "QLAC/44100/24/2";
                break;
              case 'J':
                v5 = "MP3/44100/2";
                break;
              case 'K':
                v5 = "MP3/48000/2";
                v3 = 75;
                break;
              case 'L':
                v5 = "APAC/48000/5.1.4";
                break;
              case 'M':
                v5 = "APAC/48000/7.1.2";
                break;
              default:
                goto LABEL_98;
            }
          }
          break;
      }
    }
    else
    {
      v3 = 0;
      v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
LABEL_98:
      v5 = "";
    }
    v6 = CFStringCreateWithFormat(v4, 0, CFSTR("Index_%llu:%s"), v3, v5);
    if (v6)
    {
      v7 = v6;
      result = 0;
      *a2 = v7;
    }
    else
    {
      APSLogErrorAt(0);
      return 4294954510;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  return result;
}

uint64_t APSAudioFormatDescriptionListContainsFormat(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *key;

  v2 = a1;
  key = 0;
  if (!a1)
  {
    APSLogErrorAt(0);
    return v2;
  }
  if (a2)
  {
    v3 = audioFormatList_copyHashedKeyFromAudioFormatDescription(a2, (CFStringRef *)&key);
    if (!(_DWORD)v3)
    {
      v2 = CFDictionaryContainsKey(*(CFDictionaryRef *)(v2 + 16), key);
      goto LABEL_5;
    }
  }
  else
  {
    v3 = 0;
  }
  APSLogErrorAt(v3);
  v2 = 0;
LABEL_5:
  if (key)
    CFRelease(key);
  return v2;
}

uint64_t APSAudioFormatDescriptionListAddListToSource(uint64_t a1, uint64_t a2)
{
  uint64_t MutableCopy;
  const void *v5;
  const void *v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  unsigned int v10;

  if (!a1 || !a2)
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  MutableCopy = FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
  {
    APSLogErrorAt(0);
    return 4294954510;
  }
  v5 = (const void *)MutableCopy;
  CFDictionaryMergeDictionary();
  v6 = *(const void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  CFRetain(v5);
  if (v6)
    CFRelease(v6);
  v7 = FigCFDictionaryCreateMutableCopy();
  if (!v7)
  {
    APSLogErrorAt(0);
    CFRelease(v5);
    return 4294954510;
  }
  v8 = (const void *)v7;
  CFDictionaryMergeDictionary();
  v9 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  CFRetain(v8);
  if (v9)
    CFRelease(v9);
  v10 = *(_DWORD *)(a1 + 56);
  if (v10 <= *(_DWORD *)(a2 + 56))
    v10 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 56) = v10;
  if (*(_BYTE *)(a1 + 61) || *(_BYTE *)(a2 + 61))
    *(_BYTE *)(a1 + 61) = 1;
  if (*(_BYTE *)(a1 + 60) || *(_BYTE *)(a2 + 60))
    *(_BYTE *)(a1 + 60) = 1;
  CFRelease(v5);
  CFRelease(v8);
  return 0;
}

uint64_t APSAudioFormatDescriptionListSupports44kHz(uint64_t a1)
{
  if (a1)
    return *(unsigned __int8 *)(a1 + 61);
  APSLogErrorAt(0);
  return 0;
}

uint64_t APSAudioFormatDescriptionListSupports48kHz(uint64_t a1)
{
  if (a1)
    return *(unsigned __int8 *)(a1 + 60);
  APSLogErrorAt(0);
  return 0;
}

uint64_t APSAudioFormatDescriptionListCreateIntersectionList(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  const __CFArray *v5;
  CFIndex v6;
  CFIndex i;
  const void *ValueAtIndex;
  const void *Value;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef cf;

  cf = 0;
  if (a1)
  {
    if (a2 && a3)
    {
      APSAudioFormatDescriptionListCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], &cf);
      if (cf)
      {
        v5 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
        v6 = 0;
        if (!v5)
          goto LABEL_7;
LABEL_6:
        for (i = CFArrayGetCount(v5); ; i = 0)
        {
          if (v6 >= i)
          {
            v11 = 0;
            *a3 = cf;
            cf = 0;
            goto LABEL_14;
          }
          ValueAtIndex = CFArrayGetValueAtIndex(v5, v6);
          if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a2 + 16), ValueAtIndex))
          {
            Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 16), ValueAtIndex);
            v10 = APSAudioFormatDescriptionListAddFormat((uint64_t)cf, (uint64_t)Value);
            if ((_DWORD)v10)
              break;
          }
          ++v6;
          if (v5)
            goto LABEL_6;
LABEL_7:
          ;
        }
        v11 = v10;
        APSLogErrorAt(v10);
      }
      else
      {
        APSLogErrorAt(0);
        v5 = 0;
        v11 = 4294954510;
      }
    }
    else
    {
      APSLogErrorAt(0);
      v5 = 0;
      v11 = 4294954516;
    }
    if (cf)
      CFRelease(cf);
LABEL_14:
    if (v5)
      CFRelease(v5);
  }
  else
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  return v11;
}

uint64_t APSAudioFormatDescriptionListCreateRelativeComplementList(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  const __CFArray *v6;
  CFIndex v7;
  CFIndex i;
  const void *ValueAtIndex;
  const void *Value;
  uint64_t v11;
  uint64_t v12;
  CFTypeRef cf;

  cf = 0;
  if (a1 && a2 && a3)
  {
    APSAudioFormatDescriptionListCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], &cf);
    v6 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
    v7 = 0;
    if (!v6)
      goto LABEL_6;
LABEL_5:
    for (i = CFArrayGetCount(v6); ; i = 0)
    {
      if (v7 >= i)
      {
        v12 = 0;
        *a3 = cf;
        cf = 0;
        goto LABEL_13;
      }
      ValueAtIndex = CFArrayGetValueAtIndex(v6, v7);
      if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a2 + 16), ValueAtIndex))
      {
        Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), ValueAtIndex);
        v11 = APSAudioFormatDescriptionListAddFormat((uint64_t)cf, (uint64_t)Value);
        if ((_DWORD)v11)
          break;
      }
      ++v7;
      if (v6)
        goto LABEL_5;
LABEL_6:
      ;
    }
    v12 = v11;
    APSLogErrorAt(v11);
    if (cf)
      CFRelease(cf);
LABEL_13:
    if (v6)
      CFRelease(v6);
  }
  else
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  return v12;
}

uint64_t APSAudioFormatDescriptionListCopyChannelLayoutTags(uint64_t a1, _QWORD *a2)
{
  const void *v3;
  CFTypeRef v4;
  uint64_t result;

  if (a1 && a2)
  {
    v3 = *(const void **)(a1 + 48);
    if (v3)
      v4 = CFRetain(v3);
    else
      v4 = 0;
    result = 0;
    *a2 = v4;
  }
  else
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  return result;
}

uint64_t APSAudioFormatDescriptionListGetDefaultFormat(uint64_t a1)
{
  if (a1)
    return *(_QWORD *)(a1 + 24);
  APSLogErrorAt(0);
  return 0;
}

uint64_t APSAudioFormatDescriptionListSetDefaultFormat(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  if (a1 && cf)
  {
    v2 = *(const void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = cf;
    CFRetain(cf);
    if (v2)
      CFRelease(v2);
    return 0;
  }
  else
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
}

uint64_t APSAudioFormatDescriptionListCopyRichestFormat(uint64_t a1, _QWORD *a2)
{
  const void *v3;
  CFTypeRef v4;
  uint64_t result;

  if (a1 && a2)
  {
    v3 = *(const void **)(a1 + 32);
    if (v3)
      v4 = CFRetain(v3);
    else
      v4 = 0;
    result = 0;
    *a2 = v4;
  }
  else
  {
    APSLogErrorAt(0);
    return 4294954516;
  }
  return result;
}

uint64_t APSAudioFormatDescriptionListGetLegacyFormatMask(uint64_t a1)
{
  uint64_t v1;
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  uint64_t v5;
  _QWORD *ValueAtIndex;
  unint64_t v7;
  uint64_t v8;
  CFArrayRef theArray;

  theArray = 0;
  v1 = APSAudioFormatDescriptionListCopyAudioFormatDescriptionsArray(a1, (uint64_t *)&theArray);
  if ((_DWORD)v1)
  {
    APSLogErrorAt(v1);
    goto LABEL_12;
  }
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
LABEL_12:
    v5 = 0;
    goto LABEL_13;
  }
  v3 = Count;
  v4 = 0;
  v5 = 0;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4);
    if (ValueAtIndex)
    {
      v7 = ValueAtIndex[12];
      if (v7 >= 0x40)
        v8 = 0;
      else
        v8 = 1 << v7;
    }
    else
    {
      APSLogErrorAt(0);
      v8 = 0;
    }
    v5 |= v8;
    ++v4;
  }
  while (v3 != v4);
LABEL_13:
  if (theArray)
    CFRelease(theArray);
  return v5;
}

CFIndex APSAudioFormatDescriptionListGetFormatCount(uint64_t a1)
{
  if (a1)
    return CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 16));
  APSLogErrorAt(0);
  return 0;
}

uint64_t APSAudioFormatDescriptionListGetMaxChannelCount(uint64_t a1)
{
  if (a1)
    return *(unsigned int *)(a1 + 56);
  APSLogErrorAt(0);
  return 0;
}

uint64_t APSAudioFormatDescriptionListSupportsFormatID(uint64_t a1)
{
  const void *SInt32;
  const void *v3;
  uint64_t v4;

  if (a1 && (SInt32 = (const void *)FigCFNumberCreateSInt32()) != 0)
  {
    v3 = SInt32;
    v4 = CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 40), SInt32);
    CFRelease(v3);
    return v4;
  }
  else
  {
    APSLogErrorAt(0);
    return 0;
  }
}

uint64_t APSTransportMessageGetRetransmitRequest(OpaqueCMBlockBuffer *a1, _WORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (CMBlockBufferGetDataLength(a1) <= 3)
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  else
  {
    v4 = CMBlockBufferCopyDataBytes(a1, 0, 4uLL, a2);
    v5 = v4;
    if ((_DWORD)v4)
    {
      APSLogErrorAt(v4);
    }
    else
    {
      *a2 = bswap32((unsigned __int16)*a2) >> 16;
      a2[1] = bswap32((unsigned __int16)a2[1]) >> 16;
    }
  }
  return v5;
}

uint64_t APSTransportMessageSetRetransmitResponseFutile(OpaqueCMBlockBuffer *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  int sourceBytes;

  sourceBytes = 0;
  if (CMBlockBufferGetDataLength(a1) <= 3)
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  else
  {
    LOWORD(sourceBytes) = __rev16(a2);
    v4 = CMBlockBufferReplaceDataBytes(&sourceBytes, a1, 0, 4uLL);
    v5 = v4;
    if ((_DWORD)v4)
      APSLogErrorAt(v4);
  }
  return v5;
}

uint64_t APSTransportMessageSetTimeAnnounce(OpaqueCMBlockBuffer *a1, int8x16_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int8x16_t v7;

  if (CMBlockBufferGetDataLength(a1) <= 0xF)
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  else
  {
    v7 = vrev32q_s8(*a2);
    v4 = CMBlockBufferReplaceDataBytes(&v7, a1, 0, 0x10uLL);
    v5 = v4;
    if ((_DWORD)v4)
      APSLogErrorAt(v4);
  }
  return v5;
}

uint64_t APSTransportMessageSetPTPTimeAnnounce(OpaqueCMBlockBuffer *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int sourceBytes;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;

  if (CMBlockBufferGetDataLength(a1) <= 0x17)
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  else
  {
    sourceBytes = bswap32(*(_DWORD *)a2);
    v8 = bswap64(*(_QWORD *)(a2 + 4));
    v9 = bswap32(*(_DWORD *)(a2 + 12));
    v10 = bswap64(*(_QWORD *)(a2 + 16));
    v4 = CMBlockBufferReplaceDataBytes(&sourceBytes, a1, 0, 0x18uLL);
    v5 = v4;
    if ((_DWORD)v4)
      APSLogErrorAt(v4);
  }
  return v5;
}

uint64_t APSTransportMessageCreateReferencingBBufWithAudioDataLength(const __CFAllocator *a1, OpaqueCMBlockBuffer *a2, uint64_t a3, CMBlockBufferRef *blockBufferOut)
{
  uint64_t v4;
  uint64_t v5;

  v4 = CMBlockBufferCreateWithBufferReference(a1, a2, 0, a3 + 10, 0, blockBufferOut);
  v5 = v4;
  if ((_DWORD)v4)
    APSLogErrorAt(v4);
  return v5;
}

uint64_t APSTransportMessageCreateReferencingBBufAudioDataOnly(const __CFAllocator *a1, CMBlockBufferRef theBuffer, CMBlockBufferRef *a3)
{
  size_t DataLength;
  uint64_t v7;
  uint64_t v8;

  DataLength = CMBlockBufferGetDataLength(theBuffer);
  v7 = CMBlockBufferCreateWithBufferReference(a1, theBuffer, 0xAuLL, DataLength - 10, 0, a3);
  v8 = v7;
  if ((_DWORD)v7)
    APSLogErrorAt(v7);
  return v8;
}

uint64_t APSTransportMessageGetAudioDataPointer(OpaqueCMBlockBuffer *a1, char **dataPointerOut, size_t *a3)
{
  uint64_t DataPointer;
  uint64_t v4;

  DataPointer = CMBlockBufferGetDataPointer(a1, 0xAuLL, a3, 0, dataPointerOut);
  v4 = DataPointer;
  if ((_DWORD)DataPointer)
    APSLogErrorAt(DataPointer);
  return v4;
}

uint64_t APSTransportMessageGetAudioDataSequenceNumber(OpaqueCMBlockBuffer *a1, _WORD *destination)
{
  uint64_t v3;
  uint64_t v4;

  v3 = CMBlockBufferCopyDataBytes(a1, 0, 2uLL, destination);
  v4 = v3;
  if ((_DWORD)v3)
    APSLogErrorAt(v3);
  else
    *destination = bswap32((unsigned __int16)*destination) >> 16;
  return v4;
}

uint64_t APSTransportMessageSetAudioDataSequenceNumber(CMBlockBufferRef destinationBuffer, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 sourceBytes;

  sourceBytes = __rev16(a2);
  v2 = CMBlockBufferReplaceDataBytes(&sourceBytes, destinationBuffer, 0, 2uLL);
  v3 = v2;
  if ((_DWORD)v2)
    APSLogErrorAt(v2);
  return v3;
}

uint64_t APSTransportMessageGetAudioDataTimestamp(OpaqueCMBlockBuffer *a1, _DWORD *destination)
{
  uint64_t v3;
  uint64_t v4;

  v3 = CMBlockBufferCopyDataBytes(a1, 2uLL, 4uLL, destination);
  v4 = v3;
  if ((_DWORD)v3)
    APSLogErrorAt(v3);
  else
    *destination = bswap32(*destination);
  return v4;
}

uint64_t APSTransportMessageGetAudioDataHeader(OpaqueCMBlockBuffer *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int8x8_t v6[2];

  if (a2)
  {
    memset(v6, 0, 10);
    v3 = CMBlockBufferCopyDataBytes(a1, 0, 0xAuLL, v6);
    v4 = v3;
    if ((_DWORD)v3)
    {
      APSLogErrorAt(v3);
    }
    else
    {
      *(_WORD *)a2 = bswap32(v6[0].u16[0]) >> 16;
      *(int8x8_t *)(a2 + 2) = vrev32_s8(*(int8x8_t *)((char *)v6 + 2));
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  return v4;
}

uint64_t APSTransportMessageSetAudioDataHeader(OpaqueCMBlockBuffer *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int16 sourceBytes;
  int8x8_t v8;

  if (CMBlockBufferGetDataLength(a1) <= 9)
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  else
  {
    sourceBytes = bswap32(*a2) >> 16;
    v8 = vrev32_s8(*(int8x8_t *)(a2 + 1));
    v4 = CMBlockBufferReplaceDataBytes(&sourceBytes, a1, 0, 0xAuLL);
    v5 = v4;
    if ((_DWORD)v4)
      APSLogErrorAt(v4);
  }
  return v5;
}

uint64_t APSTransportMessageGetAudioAADPointer(OpaqueCMBlockBuffer *a1, char **dataPointerOut, _QWORD *a3)
{
  uint64_t DataPointer;
  uint64_t v5;

  DataPointer = CMBlockBufferGetDataPointer(a1, 2uLL, 0, 0, dataPointerOut);
  v5 = DataPointer;
  if ((_DWORD)DataPointer)
    APSLogErrorAt(DataPointer);
  else
    *a3 = 8;
  return v5;
}

uint64_t APSTransportMessageBufferedCreateReferencingBBufWithAudioDataLength(const __CFAllocator *a1, OpaqueCMBlockBuffer *a2, uint64_t a3, CMBlockBufferRef *blockBufferOut)
{
  uint64_t v4;
  uint64_t v5;

  v4 = CMBlockBufferCreateWithBufferReference(a1, a2, 0, a3 + 11, 0, blockBufferOut);
  v5 = v4;
  if ((_DWORD)v4)
    APSLogErrorAt(v4);
  return v5;
}

uint64_t APSTransportMessageBufferedCreateReferencingBBufAudioDataOnly(const __CFAllocator *a1, CMBlockBufferRef theBuffer, CMBlockBufferRef *a3)
{
  size_t DataLength;
  uint64_t v7;
  uint64_t v8;

  DataLength = CMBlockBufferGetDataLength(theBuffer);
  v7 = CMBlockBufferCreateWithBufferReference(a1, theBuffer, 0xAuLL, DataLength - 11, 0, a3);
  v8 = v7;
  if ((_DWORD)v7)
    APSLogErrorAt(v7);
  return v8;
}

uint64_t APSTransportMessageGetBufferedAudioDataPointer(OpaqueCMBlockBuffer *a1, char **dataPointerOut, size_t *a3)
{
  uint64_t DataPointer;
  uint64_t v4;

  DataPointer = CMBlockBufferGetDataPointer(a1, 0xBuLL, a3, 0, dataPointerOut);
  v4 = DataPointer;
  if ((_DWORD)DataPointer)
    APSLogErrorAt(DataPointer);
  return v4;
}

uint64_t APSTransportMessageGetBufferedAudioDataExtendedSequenceNumber(OpaqueCMBlockBuffer *a1, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a2 = 0;
  v3 = CMBlockBufferCopyDataBytes(a1, 0, 3uLL, (char *)a2 + 1);
  v4 = v3;
  if ((_DWORD)v3)
    APSLogErrorAt(v3);
  else
    *a2 = bswap32(*a2);
  return v4;
}

uint64_t APSTransportMessageSetBufferedAudioDataExtendedSequenceNumber(CMBlockBufferRef destinationBuffer, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v5;

  v5 = bswap32(a2);
  v2 = CMBlockBufferReplaceDataBytes((char *)&v5 + 1, destinationBuffer, 0, 3uLL);
  v3 = v2;
  if ((_DWORD)v2)
    APSLogErrorAt(v2);
  return v3;
}

uint64_t APSTransportMessageGetBufferedAudioDataTimestamp(OpaqueCMBlockBuffer *a1, _DWORD *destination)
{
  uint64_t v3;
  uint64_t v4;

  v3 = CMBlockBufferCopyDataBytes(a1, 3uLL, 4uLL, destination);
  v4 = v3;
  if ((_DWORD)v3)
    APSLogErrorAt(v3);
  else
    *destination = bswap32(*destination);
  return v4;
}

uint64_t APSTransportMessageGetBufferedAudioDataFormatIndex(OpaqueCMBlockBuffer *a1, void *destination)
{
  uint64_t v2;
  uint64_t v3;

  v2 = CMBlockBufferCopyDataBytes(a1, 7uLL, 1uLL, destination);
  v3 = v2;
  if ((_DWORD)v2)
    APSLogErrorAt(v2);
  return v3;
}

uint64_t APSTransportMessageGetBufferedAudioDataFlags(OpaqueCMBlockBuffer *a1, void *destination)
{
  uint64_t v2;
  uint64_t v3;

  v2 = CMBlockBufferCopyDataBytes(a1, 8uLL, 1uLL, destination);
  v3 = v2;
  if ((_DWORD)v2)
    APSLogErrorAt(v2);
  return v3;
}

uint64_t APSTransportMessageGetBufferedAudioDataHeader(OpaqueCMBlockBuffer *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a2)
  {
    *(_DWORD *)((char *)v6 + 7) = 0;
    v6[0] = 0;
    v3 = CMBlockBufferCopyDataBytes(a1, 0, 0xBuLL, v6);
    v4 = v3;
    if ((_DWORD)v3)
    {
      APSLogErrorAt(v3);
    }
    else
    {
      *(_BYTE *)a2 = BYTE2(v6[0]);
      *(_BYTE *)(a2 + 1) = BYTE1(v6[0]);
      *(_BYTE *)(a2 + 2) = v6[0];
      *(_DWORD *)(a2 + 3) = bswap32(*(unsigned int *)((char *)v6 + 3));
      *(_DWORD *)(a2 + 7) = *(_DWORD *)((char *)v6 + 7);
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  return v4;
}

uint64_t APSTransportMessageSetBufferedAudioDataHeader(OpaqueCMBlockBuffer *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE sourceBytes[3];
  unsigned int v8;
  int v9;

  if (CMBlockBufferGetDataLength(a1) <= 0xA)
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  else
  {
    sourceBytes[0] = *(_BYTE *)(a2 + 2);
    sourceBytes[1] = *(_BYTE *)(a2 + 1);
    sourceBytes[2] = *(_BYTE *)a2;
    v8 = bswap32(*(_DWORD *)(a2 + 3));
    v9 = *(_DWORD *)(a2 + 7);
    v4 = CMBlockBufferReplaceDataBytes(sourceBytes, a1, 0, 0xBuLL);
    v5 = v4;
    if ((_DWORD)v4)
      APSLogErrorAt(v4);
  }
  return v5;
}

uint64_t APSTransportMessageGetBufferedAudioAADPointer(OpaqueCMBlockBuffer *a1, char **dataPointerOut, _QWORD *a3)
{
  uint64_t DataPointer;
  uint64_t v5;

  DataPointer = CMBlockBufferGetDataPointer(a1, 3uLL, 0, 0, dataPointerOut);
  v5 = DataPointer;
  if ((_DWORD)DataPointer)
    APSLogErrorAt(DataPointer);
  else
    *a3 = 8;
  return v5;
}

uint64_t APSTransportMessageSetScreenDataHeader(OpaqueCMBlockBuffer *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (CMBlockBufferGetDataLength(a1) <= 0x7A)
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  else
  {
    v4 = CMBlockBufferReplaceDataBytes(a2, a1, 0, 0x7BuLL);
    v5 = v4;
    if ((_DWORD)v4)
      APSLogErrorAt(v4);
  }
  return v5;
}

uint64_t APSTransportMessageSetScreenDataPayload(OpaqueCMBlockBuffer *a1, const __CFData *a2)
{
  const UInt8 *BytePtr;
  size_t Length;
  uint64_t v6;
  uint64_t v7;

  if (a2 && CMBlockBufferGetDataLength(a1) > 0x7A)
  {
    BytePtr = CFDataGetBytePtr(a2);
    Length = CFDataGetLength(a2);
    v6 = CMBlockBufferReplaceDataBytes(BytePtr, a1, 0x7BuLL, Length);
    v7 = v6;
    if ((_DWORD)v6)
      APSLogErrorAt(v6);
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  return v7;
}

uint64_t APSAPAPExtensionConvertLoudnessInfoDictMediaKindToBBuf(const __CFDictionary *a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t BigUIntWithUInt64;
  CFTypeRef v6;
  CFTypeRef cf;

  cf = 0;
  if (!a2)
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  if (!CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CFFDE8]))
    goto LABEL_30;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v3 = 2;
      goto LABEL_31;
    }
    if (FigCFEqual())
    {
      v3 = 3;
      goto LABEL_31;
    }
    if (FigCFEqual())
    {
      v3 = 4;
      goto LABEL_31;
    }
    if (FigCFEqual())
    {
      v3 = 5;
      goto LABEL_31;
    }
    if (FigCFEqual())
    {
      v3 = 6;
      goto LABEL_31;
    }
    if (FigCFEqual())
    {
      v3 = 7;
      goto LABEL_31;
    }
    if (FigCFEqual())
    {
      v3 = 8;
      goto LABEL_31;
    }
    if (FigCFEqual())
    {
      v3 = 9;
      goto LABEL_31;
    }
    if (FigCFEqual())
    {
      v3 = 10;
      goto LABEL_31;
    }
    if (FigCFEqual())
    {
      v3 = 11;
      goto LABEL_31;
    }
    if (gLogCategory_APSAPAPExtensionLoudnessInfoUtils <= 50
      && (gLogCategory_APSAPAPExtensionLoudnessInfoUtils != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
LABEL_30:
    v3 = 0;
    goto LABEL_31;
  }
  v3 = 1;
LABEL_31:
  BigUIntWithUInt64 = APSCMBlockBufferCreateBigUIntWithUInt64((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3, (CMBlockBufferRef *)&cf);
  v4 = BigUIntWithUInt64;
  if ((_DWORD)BigUIntWithUInt64)
  {
    APSLogErrorAt(BigUIntWithUInt64);
  }
  else
  {
    v6 = cf;
    if (cf)
      v6 = CFRetain(cf);
    *a2 = v6;
  }
  if (cf)
    CFRelease(cf);
  return v4;
}

uint64_t APSAPAPExtensionConvertLoudnessInfoDictLoudnessParametersToBBuf(const __CFDictionary *a1, _QWORD *a2)
{
  _DWORD *v4;
  uint64_t Float32IfPresent;
  uint64_t v6;
  CFTypeRef v7;
  CMBlockBufferRef v8;
  CMBlockBufferRef blockBufferOut;

  blockBufferOut = 0;
  if (a2)
  {
    v4 = malloc_type_calloc(1uLL, 0xCuLL, 0x10000403E1C8BA9uLL);
    if (v4)
    {
      if (CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CFFDE0]))
      {
        Float32IfPresent = FigCFDictionaryGetFloat32IfPresent();
        if ((_DWORD)Float32IfPresent
          && (*v4 = bswap32(0), Float32IfPresent = FigCFDictionaryGetFloat32IfPresent(), (_DWORD)Float32IfPresent)
          && (v4[1] = bswap32(0), Float32IfPresent = FigCFDictionaryGetFloat32IfPresent(), (_DWORD)Float32IfPresent))
        {
          v4[2] = bswap32(0);
          v6 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 0xCuLL, (CFAllocatorRef)*MEMORY[0x1E0C9AE10], 0, 0, 0xCuLL, 0, &blockBufferOut);
          if (blockBufferOut)
          {
            v7 = CFRetain(blockBufferOut);
            v8 = blockBufferOut;
            *a2 = v7;
            if (v8)
              CFRelease(v8);
            v4 = 0;
          }
          else
          {
            v4 = 0;
            *a2 = 0;
          }
        }
        else
        {
          APSLogErrorAt(Float32IfPresent);
          v6 = FigSignalErrorAt();
        }
      }
      else
      {
        v6 = 4294960569;
      }
    }
    else
    {
      APSLogErrorAt(0);
      v6 = 4294960568;
    }
  }
  else
  {
    APSLogErrorAt(0);
    v4 = 0;
    v6 = 4294960591;
  }
  free(v4);
  return v6;
}

uint64_t APSAPAPExtensionConvertMediaKindBBufAndMergeIntoLoudnessInfoDict(OpaqueCMBlockBuffer *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t BigUIntAsUInt64;
  const void *MutableCopy;
  uint64_t v7;
  unint64_t v9;

  v9 = 0;
  if (a3)
  {
    BigUIntAsUInt64 = APSCMBlockBufferGetBigUIntAsUInt64(a1, &v9);
    if ((_DWORD)BigUIntAsUInt64)
    {
      v7 = BigUIntAsUInt64;
      APSLogErrorAt(BigUIntAsUInt64);
    }
    else
    {
      switch((char)v9)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
          break;
        default:
          if (gLogCategory_APSAPAPExtensionLoudnessInfoUtils <= 50
            && (gLogCategory_APSAPAPExtensionLoudnessInfoUtils != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          break;
      }
      if (a2)
      {
        MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
        if (!MutableCopy)
          goto LABEL_17;
      }
      else
      {
        MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (!MutableCopy)
        {
LABEL_17:
          APSLogErrorAt(0);
          return 4294960568;
        }
      }
      FigCFDictionarySetValue();
      *a3 = CFRetain(MutableCopy);
      CFRelease(MutableCopy);
      return 0;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  return v7;
}

uint64_t APSAPAPExtensionConvertLoudnessParametersBBufAndMergeIntoLoudnessInfoDict(OpaqueCMBlockBuffer *a1, uint64_t a2, CFTypeRef *a3)
{
  const __CFAllocator *v6;
  uint64_t MutableCopy;
  const void *v8;
  uint64_t Mutable;
  CFMutableDictionaryRef v10;
  CFMutableDictionaryRef v11;
  const void *v12;
  char *dataPointerOut;

  dataPointerOut = 0;
  if (!a3 || (CMBlockBufferGetDataPointer(a1, 0, 0, 0, &dataPointerOut), CMBlockBufferGetDataLength(a1) != 12))
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a2)
  {
    MutableCopy = FigCFDictionaryCreateMutableCopy();
    if (MutableCopy)
    {
      v8 = (const void *)MutableCopy;
      if (FigCFDictionaryGetValue())
      {
        Mutable = FigCFDictionaryCreateMutableCopy();
        if (!Mutable)
          goto LABEL_16;
        goto LABEL_12;
      }
      Mutable = (uint64_t)CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
LABEL_12:
        v12 = (const void *)Mutable;
        goto LABEL_13;
      }
LABEL_16:
      APSLogErrorAt(0);
      CFRelease(v8);
      return 4294960568;
    }
  }
  else
  {
    v10 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v10)
    {
      v8 = v10;
      v11 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v11)
      {
        v12 = v11;
LABEL_13:
        FigCFDictionarySetFloat32();
        FigCFDictionarySetFloat32();
        FigCFDictionarySetFloat32();
        FigCFDictionarySetValue();
        *a3 = CFRetain(v8);
        CFRelease(v8);
        CFRelease(v12);
        return 0;
      }
      goto LABEL_16;
    }
  }
  APSLogErrorAt(0);
  return 4294960568;
}

uint64_t APSAPAPExtensionConvertLoudnessInfoDictSoundCheckInfoToBBuf(uint64_t a1, _QWORD *a2)
{
  const __CFDictionary *Value;
  const __CFDictionary *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const __CFString *v10;
  uint64_t v11;
  const __CFString *v12;
  const __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFAllocator *v17;
  uint64_t v18;
  void *v19;
  CMBlockBufferRef blockBufferOut;
  size_t count[2];
  __int128 v23;

  *(_OWORD *)count = 0u;
  v23 = 0u;
  blockBufferOut = 0;
  if (!a2)
  {
    APSLogErrorAt(0);
    v18 = 4294960591;
    goto LABEL_27;
  }
  Value = (const __CFDictionary *)FigCFDictionaryGetValue();
  if (!Value)
  {
    v18 = 4294960569;
    goto LABEL_27;
  }
  v4 = Value;
  v5 = (const void *)*MEMORY[0x1E0CFFE48];
  if (!CFDictionaryContainsKey(Value, (const void *)*MEMORY[0x1E0CFFE48])
    || (v6 = (const void *)*MEMORY[0x1E0CFFE50], !CFDictionaryContainsKey(v4, (const void *)*MEMORY[0x1E0CFFE50]))
    || (v7 = (const void *)*MEMORY[0x1E0CFFE58], !CFDictionaryContainsKey(v4, (const void *)*MEMORY[0x1E0CFFE58]))
    || (v8 = (const void *)*MEMORY[0x1E0CFFE60], !CFDictionaryContainsKey(v4, (const void *)*MEMORY[0x1E0CFFE60]))
    || (v9 = (const void *)*MEMORY[0x1E0CFFE68], !CFDictionaryContainsKey(v4, (const void *)*MEMORY[0x1E0CFFE68])))
  {
    v18 = 4294960579;
    goto LABEL_27;
  }
  v10 = (const __CFString *)CFDictionaryGetValue(v4, v5);
  v11 = APSCFStringCountUInt32s(v10, &count[1]);
  if ((_DWORD)v11)
  {
    v18 = v11;
    goto LABEL_48;
  }
  count[0] = (size_t)malloc_type_calloc(count[1], 0x14uLL, 0x1000040A86A77D5uLL);
  if (!count[0])
  {
    APSLogErrorAt(0);
    v18 = 4294960568;
    goto LABEL_27;
  }
  v23 = 0uLL;
  v12 = (const __CFString *)CFDictionaryGetValue(v4, v5);
  v11 = APSCFStringParseUInt32s(v12, (uint64_t (*)(uint64_t, uint64_t))apsapapExtensionSoundCheckInfo_parseUInt32, (uint64_t)count);
  if ((_DWORD)v11)
  {
    v18 = v11;
    goto LABEL_48;
  }
  if (*((_QWORD *)&v23 + 1) != count[1])
    goto LABEL_46;
  v23 = xmmword_1C96DAB60;
  v13 = (const __CFString *)CFDictionaryGetValue(v4, v6);
  v11 = APSCFStringParseUInt32s(v13, (uint64_t (*)(uint64_t, uint64_t))apsapapExtensionSoundCheckInfo_parseUInt32, (uint64_t)count);
  if ((_DWORD)v11)
  {
    v18 = v11;
    goto LABEL_48;
  }
  if (*((_QWORD *)&v23 + 1) != count[1])
    goto LABEL_46;
  v23 = xmmword_1C96DAB70;
  v14 = (const __CFString *)CFDictionaryGetValue(v4, v7);
  v11 = APSCFStringParseUInt32s(v14, (uint64_t (*)(uint64_t, uint64_t))apsapapExtensionSoundCheckInfo_parseUInt32, (uint64_t)count);
  if ((_DWORD)v11)
  {
    v18 = v11;
    goto LABEL_48;
  }
  if (*((_QWORD *)&v23 + 1) != count[1])
    goto LABEL_46;
  v23 = xmmword_1C96DAB80;
  v15 = (const __CFString *)CFDictionaryGetValue(v4, v8);
  v11 = APSCFStringParseUInt32s(v15, (uint64_t (*)(uint64_t, uint64_t))apsapapExtensionSoundCheckInfo_parseUInt32, (uint64_t)count);
  if ((_DWORD)v11)
  {
    v18 = v11;
    goto LABEL_48;
  }
  if (*((_QWORD *)&v23 + 1) != count[1])
    goto LABEL_46;
  v23 = xmmword_1C96DAB90;
  v16 = (const __CFString *)CFDictionaryGetValue(v4, v9);
  v11 = APSCFStringParseUInt32s(v16, (uint64_t (*)(uint64_t, uint64_t))apsapapExtensionSoundCheckInfo_parseUInt32, (uint64_t)count);
  if ((_DWORD)v11)
  {
    v18 = v11;
    goto LABEL_48;
  }
  if (*((_QWORD *)&v23 + 1) != count[1])
  {
LABEL_46:
    APSLogErrorAt(0);
    v18 = 4294960546;
    goto LABEL_27;
  }
  v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (*((_QWORD *)&v23 + 1))
  {
    v11 = CMBlockBufferCreateWithMemoryBlock(v17, (void *)count[0], 20 * *((_QWORD *)&v23 + 1), (CFAllocatorRef)*MEMORY[0x1E0C9AE10], 0, 0, 20 * *((_QWORD *)&v23 + 1), 0, &blockBufferOut);
    if ((_DWORD)v11)
    {
      v18 = v11;
LABEL_48:
      APSLogErrorAt(v11);
      goto LABEL_27;
    }
  }
  else
  {
    v11 = CMBlockBufferCreateEmpty(v17, 0, 0, &blockBufferOut);
    if ((_DWORD)v11)
    {
      v18 = v11;
      goto LABEL_48;
    }
  }
  count[0] = 0;
  v19 = blockBufferOut;
  if (blockBufferOut)
    v19 = (void *)CFRetain(blockBufferOut);
  v18 = 0;
  *a2 = v19;
LABEL_27:
  if (count[0])
    free((void *)count[0]);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v18;
}

uint64_t apsapapExtensionSoundCheckInfo_parseUInt32(unsigned int a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t result;

  v2 = a2[3];
  if (v2 >= a2[1])
  {
    APSLogErrorAt(0);
    return 4294960545;
  }
  else
  {
    result = 0;
    *(_DWORD *)(*a2 + 20 * v2 + a2[2]) = bswap32(a1);
    ++a2[3];
  }
  return result;
}

uint64_t APSAPAPExtensionConvertSoundCheckInfoBBufAndMergeIntoLoudnessInfoDict(OpaqueCMBlockBuffer *a1, CFIndex a2, CFTypeRef *a3)
{
  size_t v6;
  uint64_t DataPointer;
  const __CFAllocator *v8;
  CFMutableStringRef Mutable;
  CFMutableStringRef v10;
  CFMutableStringRef v11;
  CFMutableStringRef v12;
  CFMutableStringRef v13;
  CFMutableStringRef v14;
  CFMutableStringRef v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  CFDictionaryRef v21;
  const void *MutableCopy;
  uint64_t v23;
  CFTypeRef *v25;
  CFIndex capacity;
  size_t lengthAtOffsetOut;
  size_t totalLengthOut;
  char *dataPointerOut;
  void *values[5];
  void *keys[6];

  keys[5] = *(void **)MEMORY[0x1E0C80C00];
  totalLengthOut = 0;
  dataPointerOut = 0;
  lengthAtOffsetOut = 0;
  if (!a3)
    goto LABEL_67;
  if (CMBlockBufferIsEmpty(a1))
  {
    v6 = 0;
    goto LABEL_7;
  }
  DataPointer = CMBlockBufferGetDataPointer(a1, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
  if ((_DWORD)DataPointer)
  {
    v23 = DataPointer;
    APSLogErrorAt(DataPointer);
    return v23;
  }
  if (totalLengthOut != lengthAtOffsetOut)
  {
LABEL_67:
    APSLogErrorAt(0);
    return 4294960591;
  }
  v6 = totalLengthOut / 0x14;
  if (totalLengthOut % 0x14)
  {
    APSLogErrorAt(0);
    return 4294960553;
  }
LABEL_7:
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (!Mutable)
  {
    APSLogErrorAt(0);
    return 4294960568;
  }
  v10 = Mutable;
  v11 = CFStringCreateMutable(v8, 0);
  if (!v11)
  {
    APSLogErrorAt(0);
    CFRelease(v10);
    return 4294960568;
  }
  v12 = v11;
  v13 = CFStringCreateMutable(v8, 0);
  if (!v13)
  {
    APSLogErrorAt(0);
    v14 = 0;
LABEL_55:
    v15 = 0;
LABEL_57:
    v21 = 0;
LABEL_59:
    MutableCopy = 0;
LABEL_60:
    v23 = 4294960568;
    goto LABEL_32;
  }
  v14 = CFStringCreateMutable(v8, 0);
  if (!v14)
  {
    APSLogErrorAt(0);
    goto LABEL_55;
  }
  v15 = CFStringCreateMutable(v8, 0);
  if (!v15)
  {
    APSLogErrorAt(0);
    goto LABEL_57;
  }
  v25 = a3;
  capacity = a2;
  if (!v6)
    goto LABEL_26;
  v16 = CFStringAppendF();
  if ((_DWORD)v16)
  {
    v23 = v16;
LABEL_48:
    APSLogErrorAt(v16);
    v21 = 0;
    MutableCopy = 0;
    goto LABEL_32;
  }
  v16 = CFStringAppendF();
  if ((_DWORD)v16)
  {
    v23 = v16;
    goto LABEL_48;
  }
  v16 = CFStringAppendF();
  if ((_DWORD)v16)
  {
    v23 = v16;
    goto LABEL_48;
  }
  v16 = CFStringAppendF();
  if ((_DWORD)v16)
  {
    v23 = v16;
    goto LABEL_48;
  }
  v16 = CFStringAppendF();
  if ((_DWORD)v16)
  {
    v23 = v16;
    goto LABEL_48;
  }
  if (v6 >= 2)
  {
    v17 = v6 - 1;
    v18 = 39;
    while (1)
    {
      v16 = CFStringAppendF();
      if ((_DWORD)v16)
      {
        v23 = v16;
        goto LABEL_48;
      }
      v16 = CFStringAppendF();
      if ((_DWORD)v16)
      {
        v23 = v16;
        goto LABEL_48;
      }
      v16 = CFStringAppendF();
      if ((_DWORD)v16)
      {
        v23 = v16;
        goto LABEL_48;
      }
      v16 = CFStringAppendF();
      if ((_DWORD)v16)
      {
        v23 = v16;
        goto LABEL_48;
      }
      v16 = CFStringAppendF();
      if ((_DWORD)v16)
        break;
      v18 += 20;
      if (!--v17)
        goto LABEL_26;
    }
    v23 = v16;
    goto LABEL_48;
  }
LABEL_26:
  v19 = (void *)*MEMORY[0x1E0CFFE50];
  keys[0] = *(void **)MEMORY[0x1E0CFFE48];
  keys[1] = v19;
  v20 = (void *)*MEMORY[0x1E0CFFE60];
  keys[2] = *(void **)MEMORY[0x1E0CFFE58];
  keys[3] = v20;
  keys[4] = *(void **)MEMORY[0x1E0CFFE68];
  values[0] = v10;
  values[1] = v12;
  values[2] = v13;
  values[3] = v14;
  values[4] = v15;
  v21 = CFDictionaryCreate(v8, (const void **)keys, (const void **)values, 5, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v21)
  {
    APSLogErrorAt(0);
    goto LABEL_59;
  }
  if (capacity)
  {
    MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
    if (!MutableCopy)
      goto LABEL_69;
  }
  else
  {
    MutableCopy = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!MutableCopy)
    {
LABEL_69:
      APSLogErrorAt(0);
      goto LABEL_60;
    }
  }
  FigCFDictionarySetValue();
  v23 = 0;
  *v25 = CFRetain(MutableCopy);
LABEL_32:
  CFRelease(v10);
  CFRelease(v12);
  if (v13)
    CFRelease(v13);
  if (v14)
    CFRelease(v14);
  if (v15)
    CFRelease(v15);
  if (v21)
    CFRelease(v21);
  if (MutableCopy)
    CFRelease(MutableCopy);
  return v23;
}

uint64_t APSAudioTransportTimeMakeWithRTPTime@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)a2 = 1;
  *(_DWORD *)(a2 + 4) = result;
  return result;
}

__n128 APSAudioTransportTimeMakeWithMediaTime@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  if ((a1->n128_u32[3] & 0x1D) == 1 && !a1[1].n128_u64[0])
  {
    *(_DWORD *)a2 = 2;
    result = *a1;
    *(__n128 *)(a2 + 4) = *a1;
    *(_QWORD *)(a2 + 20) = a1[1].n128_u64[0];
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  return result;
}

BOOL APSAudioTransportTimeIsValid(uint64_t a1)
{
  if (*(_DWORD *)a1 != 2)
    return *(_DWORD *)a1 == 1;
  if ((*(_DWORD *)(a1 + 16) & 0x1D) == 1)
    return *(_QWORD *)(a1 + 20) == 0;
  return 0;
}

CFTypeRef APSAudioTransportTimeCopyDebugDesc(uint64_t a1)
{
  CMTime time;

  if (*(_DWORD *)a1 != 1)
  {
    if (*(_DWORD *)a1 != 2)
      return CFRetain(CFSTR("Invalid"));
    if ((*(_DWORD *)(a1 + 16) & 0x1D) != 1 || *(_QWORD *)(a1 + 20) != 0)
      return CFRetain(CFSTR("Invalid"));
    time = *(CMTime *)(a1 + 4);
    CMTimeGetSeconds(&time);
  }
  return (CFTypeRef)CFStringCreateF();
}

double APSAudioTransportTimeAdd@<D0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  BOOL v5;
  int v7;
  double result;
  CMTime v11;
  CMTime lhs;
  _BYTE v13[28];

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = *a1;
  if (*a1 == 1 || v4 == 2 && ((a1[4] & 0x1D) == 1 ? (v5 = *(_QWORD *)(a1 + 5) == 0) : (v5 = 0), v5))
  {
    if (*(_DWORD *)a2 == 2)
    {
      if ((*(_DWORD *)(a2 + 16) & 0x1D) == 1 && v4 == 2 && *(_QWORD *)(a2 + 20) == 0)
      {
        *(_DWORD *)v13 = 2;
        lhs = *(CMTime *)(a1 + 1);
        v11 = *(CMTime *)(a2 + 4);
        CMTimeAdd((CMTime *)&v13[4], &lhs, &v11);
        *(_OWORD *)a3 = *(_OWORD *)v13;
        result = *(double *)&v13[12];
        *(_OWORD *)(a3 + 12) = *(_OWORD *)&v13[12];
      }
    }
    else if (*(_DWORD *)a2 == 1 && v4 == 1)
    {
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_DWORD *)(a3 + 24) = 0;
      v7 = *(_DWORD *)(a2 + 4) + a1[1];
      *(_DWORD *)a3 = 1;
      *(_DWORD *)(a3 + 4) = v7;
    }
  }
  return result;
}

double APSAudioTransportTimeSub@<D0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  BOOL v5;
  int v7;
  double result;
  CMTime v11;
  CMTime lhs;
  _BYTE v13[28];

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = *a1;
  if (*a1 == 1 || v4 == 2 && ((a1[4] & 0x1D) == 1 ? (v5 = *(_QWORD *)(a1 + 5) == 0) : (v5 = 0), v5))
  {
    if (*(_DWORD *)a2 == 2)
    {
      if ((*(_DWORD *)(a2 + 16) & 0x1D) == 1 && v4 == 2 && *(_QWORD *)(a2 + 20) == 0)
      {
        *(_DWORD *)v13 = 2;
        lhs = *(CMTime *)(a1 + 1);
        v11 = *(CMTime *)(a2 + 4);
        CMTimeSubtract((CMTime *)&v13[4], &lhs, &v11);
        *(_OWORD *)a3 = *(_OWORD *)v13;
        result = *(double *)&v13[12];
        *(_OWORD *)(a3 + 12) = *(_OWORD *)&v13[12];
      }
    }
    else if (*(_DWORD *)a2 == 1 && v4 == 1)
    {
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_DWORD *)(a3 + 24) = 0;
      v7 = a1[1] - *(_DWORD *)(a2 + 4);
      *(_DWORD *)a3 = 1;
      *(_DWORD *)(a3 + 4) = v7;
    }
  }
  return result;
}

uint64_t APSAudioTransportTimeCompare(int *a1, int *a2)
{
  int v2;
  _BOOL4 v3;
  int v5;
  _BOOL4 v7;
  uint64_t v8;
  CMTime v10;
  CMTime time1;

  v2 = *a1;
  if (*a1 == 2)
    v3 = (a1[4] & 0x1D) == 1 && *(_QWORD *)(a1 + 5) == 0;
  else
    v3 = v2 == 1;
  v5 = *a2;
  if (*a2 == 1)
  {
    v7 = 1;
  }
  else
  {
    if (v5 != 2)
    {
      v7 = 0;
      return (v7 - v3);
    }
    v7 = (a2[4] & 0x1D) == 1 && *(_QWORD *)(a2 + 5) == 0;
  }
  if (!v3 || !v7)
    return (v7 - v3);
  v8 = (v2 - v5);
  if (v2 == v5)
  {
    if (v2 == 2)
    {
      time1 = *(CMTime *)(a1 + 1);
      v10 = *(CMTime *)(a2 + 1);
      return CMTimeCompare(&time1, &v10);
    }
    else if (v2 == 1)
    {
      return (a1[1] - a2[1]);
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

__n128 APSAudioTransportTimeMax@<Q0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _OWORD *v6;
  __n128 result;
  int v8[8];
  int v9[8];

  *(_OWORD *)v9 = *a1;
  *(_OWORD *)&v9[3] = *(_OWORD *)((char *)a1 + 12);
  *(_OWORD *)v8 = *a2;
  *(_OWORD *)&v8[3] = *(_OWORD *)((char *)a2 + 12);
  if ((int)APSAudioTransportTimeCompare(v9, v8) >= 0)
    v6 = a1;
  else
    v6 = a2;
  *(_OWORD *)a3 = *v6;
  result = *(__n128 *)((char *)v6 + 12);
  *(__n128 *)(a3 + 12) = result;
  return result;
}

__n128 APSAudioTransportTimeMin@<Q0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _OWORD *v6;
  __n128 result;
  int v8[8];
  int v9[8];

  *(_OWORD *)v9 = *a1;
  *(_OWORD *)&v9[3] = *(_OWORD *)((char *)a1 + 12);
  *(_OWORD *)v8 = *a2;
  *(_OWORD *)&v8[3] = *(_OWORD *)((char *)a2 + 12);
  if ((int)APSAudioTransportTimeCompare(v9, v8) >= 0)
    v6 = a2;
  else
    v6 = a1;
  *(_OWORD *)a3 = *v6;
  result = *(__n128 *)((char *)v6 + 12);
  *(__n128 *)(a3 + 12) = result;
  return result;
}

uint64_t APSAudioTransportTimeUtilsDecodeFromRequestResponseDictionary(CFDictionaryRef theDict, void *key, void *a3, const void *a4, uint64_t a5)
{
  int64_t Int64;
  int32_t v10;
  CMTimeFlags flags;
  int value;
  int v13;
  uint64_t v14;
  CMTime v16;
  unsigned int v17;

  v17 = 0;
  if ((a3 == 0) != (a4 == 0))
  {
LABEL_14:
    APSLogErrorAt(0);
    value = 0;
    v14 = 0;
    flags = 0;
    v13 = 0;
    v17 = -6705;
    if (!a5)
      return v17;
    goto LABEL_19;
  }
  if (!theDict)
    goto LABEL_17;
  if (a3 && (CFDictionaryContainsKey(theDict, a3) || CFDictionaryContainsKey(theDict, a4)))
  {
    Int64 = CFDictionaryGetInt64();
    v10 = CFDictionaryGetInt64();
    CMTimeMake(&v16, Int64, v10);
    flags = v16.flags;
    if ((v16.flags & 0x1D) == 1 && !v16.epoch)
    {
      value = v16.value;
      v13 = 2;
      v14 = *(CMTimeValue *)((char *)&v16.value + 4);
      if (!a5)
        return v17;
      goto LABEL_19;
    }
    goto LABEL_14;
  }
  if (key)
  {
    value = CFDictionaryContainsKey(theDict, key);
    if (value)
    {
      value = CFDictionaryGetInt64Ranged();
      flags = v17;
      v14 = 0;
      v13 = 1;
      if (!a5)
        return v17;
      goto LABEL_19;
    }
  }
  else
  {
LABEL_17:
    value = 0;
  }
  v14 = 0;
  flags = 0;
  v13 = 0;
  if (a5)
  {
LABEL_19:
    *(_DWORD *)a5 = v13;
    *(_DWORD *)(a5 + 4) = value;
    *(_QWORD *)(a5 + 8) = v14;
    *(_DWORD *)(a5 + 16) = flags;
    *(_QWORD *)(a5 + 20) = 0;
  }
  return v17;
}

uint64_t APSAudioTransportTimeUtilsEncodeToRequestResponseDictionary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((a3 == 0) == (a4 == 0))
  {
    if (!a1)
      return 0;
    if (*(_DWORD *)a5 == 1)
    {
      if (a2)
        goto LABEL_13;
    }
    else
    {
      if (*(_DWORD *)a5 != 2)
        return 0;
      if ((*(_DWORD *)(a5 + 16) & 0x1D) != 1 || *(_QWORD *)(a5 + 20) != 0)
        return 0;
      if (a3)
      {
        CFDictionarySetInt64();
LABEL_13:
        CFDictionarySetInt64();
        return 0;
      }
    }
    APSLogErrorAt(0);
    return 4294960582;
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
}

BOOL APSNANServiceTypeIsValid(int a1)
{
  return (a1 - 1) < 2;
}

const __CFString *APSNANServiceTypeGetTXTString(int a1)
{
  const __CFString *v1;

  v1 = CFSTR("ll");
  if (a1 != 2)
    v1 = 0;
  if (a1 == 1)
    return CFSTR("ap");
  else
    return v1;
}

uint64_t APSNANServiceTypeMakeWithTXTString(uint64_t result)
{
  _OWORD v1[16];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  memset(v1, 0, sizeof(v1));
  if (result)
  {
    result = CFStringGetCString((CFStringRef)result, (char *)v1, 256, 0x600u);
    if ((_DWORD)result)
    {
      strlen((const char *)v1);
      return APSNANServiceTypeMakeWithString((uint64_t)v1);
    }
  }
  return result;
}

uint64_t APSNANServiceTypeMakeWithString(uint64_t result)
{
  if (result)
  {
    if (strncmpx())
      return 2 * (strncmpx() == 0);
    else
      return 1;
  }
  return result;
}

BOOL APSNANServiceTypeIsKindOfType(int a1, int a2)
{
  _BOOL4 v2;

  v2 = a2 == 1;
  if (a1 != 1)
    v2 = 0;
  if (a1 == 2)
    return (a2 - 1) < 2;
  else
    return v2;
}

uint64_t APSCaulkMemoryResourceAllocatorCreate(uint64_t a1, char a2, CFAllocatorRef *a3)
{
  _QWORD *v6;
  CFAllocatorRef v7;
  CFAllocatorRef v8;
  uint64_t result;
  CFAllocatorContext context;

  memset(&context.copyDescription, 0, 40);
  if (a1 && a3)
  {
    v6 = (_QWORD *)operator new();
    *v6 = 0;
    v6[1] = a1;
    *((_BYTE *)v6 + 16) = a2;
    context.allocate = (CFAllocatorAllocateCallBack)cmrAllocator_allocate;
    context.deallocate = (CFAllocatorDeallocateCallBack)cmrAllocator_deallocate;
    context.version = 0;
    context.info = v6;
    context.retain = (CFAllocatorRetainCallBack)cmrAllocator_retain;
    context.release = (CFAllocatorReleaseCallBack)cmrAllocator_release;
    v7 = CFAllocatorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &context);
    if (v7)
    {
      v8 = v7;
      result = 0;
      *a3 = v8;
    }
    else
    {
      APSLogErrorAt(0);
      MEMORY[0x1CAA42B64](v6, 0x1060C40CD6EC5AFLL);
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960591;
  }
  return result;
}

void sub_1C96D6E34(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  APSLogErrorAt(0);
  JUMPOUT(0x1C96D6E2CLL);
}

_QWORD *cmrAllocator_allocate(uint64_t a1, unint64_t a2, _QWORD **a3)
{
  _QWORD *v4;

  v4 = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a3[1] + 16))(a3[1], a1 + 16, 8);
  *v4 = a1;
  v4[1] = ~a1;
  return v4 + 2;
}

void sub_1C96D6E9C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_alloc a10)
{
  void *v12;
  uint64_t v13;

  if (a2 == 3)
  {
    __cxa_get_exception_ptr(a1);
    a10.__vftable = (std::bad_alloc_vtbl *)(MEMORY[0x1E0DE5058] + 16);
    __cxa_begin_catch(a1);
    APSSignalErrorAt(4294960568);
    std::bad_alloc::~bad_alloc(&a10);
  }
  else
  {
    v12 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      (*(void (**)(void *))(*(_QWORD *)v12 + 16))(v12);
      v13 = 4294960534;
    }
    else
    {
      v13 = 4294960596;
    }
    APSSignalErrorAt(v13);
  }
  __cxa_end_catch();
  JUMPOUT(0x1C96D6E8CLL);
}

void cmrAllocator_deallocate(char *a1, _QWORD **a2)
{
  uint64_t v2;
  void *v3;
  int v4;
  int v5;
  void *v6;
  uint64_t v7;

  v2 = *((_QWORD *)a1 - 2);
  if ((*((_QWORD *)a1 - 1) & v2) != 0)
  {
    v3 = (void *)FatalErrorF();
    v5 = v4;
    v6 = __cxa_begin_catch(v3);
    if (v5 == 2)
    {
      (*(void (**)(void *))(*(_QWORD *)v6 + 16))(v6);
      v7 = 4294960534;
    }
    else
    {
      v7 = 4294960596;
    }
    APSSignalErrorAt(v7);
    __cxa_end_catch();
  }
  else
  {
    (*(void (**)(_QWORD *, char *, uint64_t, uint64_t))(*a2[1] + 24))(a2[1], a1 - 16, v2 + 16, 8);
  }
}

unint64_t *cmrAllocator_retain(unint64_t *result)
{
  unint64_t v1;

  do
    v1 = __ldaxr(result);
  while (__stlxr(v1 + 1, result));
  return result;
}

uint64_t cmrAllocator_release(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;

  do
  {
    v1 = __ldaxr((unint64_t *)result);
    v2 = v1 - 1;
  }
  while (__stlxr(v2, (unint64_t *)result));
  if (!v2)
  {
    if (*(_BYTE *)(result + 16))
    {
      v3 = *(_QWORD *)(result + 8);
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
    JUMPOUT(0x1CAA42B64);
  }
  return result;
}

uint64_t APSPriorityDispatchQueuePoolGetTypeID()
{
  if (gAPSPriorityDispatchQueuePoolInitOnce != -1)
    dispatch_once_f(&gAPSPriorityDispatchQueuePoolInitOnce, 0, (dispatch_function_t)_APSPriorityDispatchQueuePoolGetTypeID);
  return gAPSPriorityDispatchQueuePoolTypeID;
}

uint64_t _APSPriorityDispatchQueuePoolGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPSPriorityDispatchQueuePoolTypeID = result;
  return result;
}

void _APSPriorityDispatchQueuePoolFinalize(uint64_t a1)
{
  const void *v2;

  free(*(void **)(a1 + 16));
  FigSimpleMutexDestroy();
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
}

uint64_t APSPriorityDispatchQueuePoolCreate(uint64_t a1, int a2, CFTypeRef *a3)
{
  uint64_t Instance;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFAllocator *v10;
  CFMutableDictionaryRef v11;
  CFDictionaryValueCallBacks valueCallBacks;

  if (!a3)
    return 4294960591;
  if (gAPSPriorityDispatchQueuePoolInitOnce != -1)
    dispatch_once_f(&gAPSPriorityDispatchQueuePoolInitOnce, 0, (dispatch_function_t)_APSPriorityDispatchQueuePoolGetTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294960568;
  v7 = Instance;
  *(_OWORD *)(Instance + 16) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  if (!a1 || (v8 = CFStringCopyUTF8CString(), !(_DWORD)v8))
  {
    *(_DWORD *)(v7 + 24) = a2;
    v9 = FigSimpleMutexCreate();
    *(_QWORD *)(v7 + 32) = v9;
    if (!v9)
      goto LABEL_12;
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    valueCallBacks.version = 0;
    valueCallBacks.retain = (CFDictionaryRetainCallBack)queuePool_dictionaryDispatchQueueRetain;
    valueCallBacks.copyDescription = 0;
    valueCallBacks.equal = 0;
    valueCallBacks.release = (CFDictionaryReleaseCallBack)queuePool_dictionaryDispatchQueueRelease;
    v11 = CFDictionaryCreateMutable(v10, 0, 0, &valueCallBacks);
    *(_QWORD *)(v7 + 40) = v11;
    if (v11)
    {
      v8 = 0;
      *a3 = CFRetain((CFTypeRef)v7);
    }
    else
    {
LABEL_12:
      v8 = 4294960568;
    }
  }
  CFRelease((CFTypeRef)v7);
  return v8;
}

dispatch_object_t queuePool_dictionaryDispatchQueueRetain(int a1, dispatch_object_t object)
{
  dispatch_retain(object);
  return object;
}

void queuePool_dictionaryDispatchQueueRelease(int a1, dispatch_object_t object)
{
  dispatch_release(object);
}

NSObject *APSPriorityDispatchQueuePoolGetQueue(uint64_t a1, unsigned int a2)
{
  NSObject *Value;
  NSObject *v6;

  if (!a1)
    return 0;
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 32));
  if (a2 == 5)
    a2 = *(_DWORD *)(a1 + 24);
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), (const void *)a2);
  if (!Value)
  {
    if (a2 == 5)
      v6 = dispatch_queue_create(*(const char **)(a1 + 16), 0);
    else
      v6 = FigDispatchQueueCreateWithPriority();
    Value = v6;
    if (v6)
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), (const void *)a2, v6);
      dispatch_release(Value);
    }
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 32));
  return Value;
}

uint64_t APSPriorityDispatchQueuePoolSyncFlush(uint64_t a1)
{
  const __CFDictionary *Copy;

  if (!a1)
    return 4294960591;
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 32));
  Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFDictionaryRef *)(a1 + 40));
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 32));
  if (!Copy)
    return 4294960568;
  CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)queuePool_dictionarySyncFlushApplier, 0);
  CFRelease(Copy);
  return 0;
}

void queuePool_dictionarySyncFlushApplier(int a1, dispatch_queue_t queue)
{
  dispatch_sync_f(queue, 0, (dispatch_function_t)APSNOOPCallback);
}

uint64_t APSCryptorChaCha20Poly1305Create(int a1, CFDataRef theData, char a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t DerivedStorage;
  uint64_t v9;

  if (!theData)
  {
    v9 = 4294895585;
LABEL_14:
    APSLogErrorAt(0);
    return v9;
  }
  if (CFDataGetLength(theData) <= 31)
  {
    v9 = 4294895585;
    goto LABEL_14;
  }
  if (APSCryptorGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APSCryptorGetClassID_sRegisterOnce, &APSCryptorGetClassID_sClassID, (dispatch_function_t)cryptor_registerBaseClass);
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
  {
    v9 = v7;
    APSLogErrorAt(v7);
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)(DerivedStorage + 264) = CFRetain(theData);
    *(_BYTE *)DerivedStorage = a3;
    if (gLogCategory_APSCryptorChaCha20Poly1305 <= 30
      && (gLogCategory_APSCryptorChaCha20Poly1305 != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v9 = 0;
    *a4 = 0;
  }
  return v9;
}

uint64_t chachaCryptor_GetEncryptionOverheadLength()
{
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return 24;
  else
    return 16;
}

uint64_t chachaCryptor_EncryptMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9)
{
  uint64_t DerivedStorage;
  uint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a3 || a7 < a5)
    goto LABEL_16;
  v15 = DerivedStorage;
  v16 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v17 = 24;
  if (!*v16)
    v17 = 16;
  if (v17 <= a9)
  {
    CFDataGetBytePtr(*(CFDataRef *)(v15 + 264));
    v18 = (_QWORD *)(v15 + 272);
    chacha20_poly1305_init_64x64();
    chacha20_poly1305_add_aad();
    chacha20_poly1305_encrypt();
    chacha20_poly1305_final();
    if (*(_BYTE *)v15)
      *(_QWORD *)(a8 + 16) = *v18;
    v19 = 0;
    do
    {
      if (++*((_BYTE *)v18 + v19))
        v21 = 1;
      else
        v21 = v19 == 7;
      ++v19;
    }
    while (!v21);
    return 0;
  }
  else
  {
LABEL_16:
    APSLogErrorAt(0);
    return 4294895585;
  }
}

uint64_t chachaCryptor_DecryptMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, unint64_t *a8)
{
  uint64_t DerivedStorage;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v21;
  uint64_t v22;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v14 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v15 = 24;
  if (!*v14)
    v15 = 16;
  if (!a2)
  {
    v22 = 4294895585;
LABEL_20:
    APSLogErrorAt(0);
    return v22;
  }
  if (!a3)
  {
    v22 = 4294895585;
    goto LABEL_20;
  }
  v16 = a5 - v15;
  if (a5 < v15)
  {
    v22 = 4294895585;
    goto LABEL_20;
  }
  if (v16 > a7)
  {
    v22 = 4294895585;
    goto LABEL_20;
  }
  CFDataGetBytePtr(*(CFDataRef *)(DerivedStorage + 264));
  chacha20_poly1305_init_64x64();
  chacha20_poly1305_add_aad();
  v17 = chacha20_poly1305_decrypt();
  if (chacha20_poly1305_verify() + v17 == v16)
  {
    v18 = 0;
    *a8 = v16;
    v19 = DerivedStorage + 272;
    do
    {
      if (++*(_BYTE *)(v19 + v18))
        v21 = 1;
      else
        v21 = v18 == 7;
      ++v18;
    }
    while (!v21);
    return 0;
  }
  else
  {
    APSLogErrorAt(0);
    return 4294960534;
  }
}

void chachaCryptor_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  uint64_t i;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APSCryptorChaCha20Poly1305 <= 30
    && (gLogCategory_APSCryptorChaCha20Poly1305 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v1 = *(const void **)(DerivedStorage + 264);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 264) = 0;
  }
  for (i = 0; i != 256; ++i)
    *(_BYTE *)(DerivedStorage + 8 + i) = 0;
}

__CFString *chachaCryptor_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APSCryptorChaCha20Poly1305 %p>"), a1);
  return Mutable;
}

uint64_t AES_CBCFrame_Final()
{
  return MEMORY[0x1E0D1A728]();
}

uint64_t AES_CBCFrame_Init()
{
  return MEMORY[0x1E0D1A730]();
}

uint64_t AES_CBCFrame_Update()
{
  return MEMORY[0x1E0D1A738]();
}

uint64_t AES_CTR_Final()
{
  return MEMORY[0x1E0D1A740]();
}

uint64_t AES_CTR_Init()
{
  return MEMORY[0x1E0D1A748]();
}

uint64_t AES_CTR_Update()
{
  return MEMORY[0x1E0D1A750]();
}

uint64_t AES_GCM_Decrypt()
{
  return MEMORY[0x1E0D1A758]();
}

uint64_t AES_GCM_Encrypt()
{
  return MEMORY[0x1E0D1A760]();
}

uint64_t AES_GCM_Final()
{
  return MEMORY[0x1E0D1A768]();
}

uint64_t AES_GCM_FinalizeMessage()
{
  return MEMORY[0x1E0D1A770]();
}

uint64_t AES_GCM_InitEx()
{
  return MEMORY[0x1E0D1A778]();
}

uint64_t AES_GCM_InitMessage()
{
  return MEMORY[0x1E0D1A780]();
}

uint64_t AES_GCM_VerifyMessage()
{
  return MEMORY[0x1E0D1A788]();
}

uint64_t ASPrintF()
{
  return MEMORY[0x1E0D1A790]();
}

uint64_t AUCWirelessHDCPSessionManagerGetHDCPCapabilityOfDevice()
{
  return MEMORY[0x1E0D15368]();
}

uint64_t AUCWirelessHDCPSessionManagerGetProtectionBitsOfDisplay()
{
  return MEMORY[0x1E0D15370]();
}

OSStatus AudioConverterDispose(AudioConverterRef inAudioConverter)
{
  return MEMORY[0x1E0CFF450](inAudioConverter);
}

OSStatus AudioConverterFillComplexBuffer(AudioConverterRef inAudioConverter, AudioConverterComplexInputDataProc inInputDataProc, void *inInputDataProcUserData, UInt32 *ioOutputDataPacketSize, AudioBufferList *outOutputData, AudioStreamPacketDescription *outPacketDescription)
{
  return MEMORY[0x1E0CFF458](inAudioConverter, inInputDataProc, inInputDataProcUserData, ioOutputDataPacketSize, outOutputData, outPacketDescription);
}

OSStatus AudioConverterGetProperty(AudioConverterRef inAudioConverter, AudioConverterPropertyID inPropertyID, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  return MEMORY[0x1E0CFF468](inAudioConverter, *(_QWORD *)&inPropertyID, ioPropertyDataSize, outPropertyData);
}

OSStatus AudioConverterGetPropertyInfo(AudioConverterRef inAudioConverter, AudioConverterPropertyID inPropertyID, UInt32 *outSize, Boolean *outWritable)
{
  return MEMORY[0x1E0CFF470](inAudioConverter, *(_QWORD *)&inPropertyID, outSize, outWritable);
}

OSStatus AudioConverterNew(const AudioStreamBasicDescription *inSourceFormat, const AudioStreamBasicDescription *inDestinationFormat, AudioConverterRef *outAudioConverter)
{
  return MEMORY[0x1E0CFF478](inSourceFormat, inDestinationFormat, outAudioConverter);
}

OSStatus AudioConverterSetProperty(AudioConverterRef inAudioConverter, AudioConverterPropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  return MEMORY[0x1E0CFF4A0](inAudioConverter, *(_QWORD *)&inPropertyID, *(_QWORD *)&inPropertyDataSize, inPropertyData);
}

OSStatus AudioServicesSetProperty(AudioServicesPropertyID inPropertyID, UInt32 inSpecifierSize, const void *inSpecifier, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  return MEMORY[0x1E0C92178](*(_QWORD *)&inPropertyID, *(_QWORD *)&inSpecifierSize, inSpecifier, *(_QWORD *)&inPropertyDataSize, inPropertyData);
}

uint64_t Base64DecodeCopy()
{
  return MEMORY[0x1E0D1A7C0]();
}

uint64_t Base64EncodeCopyEx()
{
  return MEMORY[0x1E0D1A7C8]();
}

int CC_SHA512_Final(unsigned __int8 *md, CC_SHA512_CTX *c)
{
  return MEMORY[0x1E0C803B0](md, c);
}

int CC_SHA512_Init(CC_SHA512_CTX *c)
{
  return MEMORY[0x1E0C803B8](c);
}

int CC_SHA512_Update(CC_SHA512_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C803C0](c, data, *(_QWORD *)&len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

void *__cdecl CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint)
{
  return (void *)MEMORY[0x1E0C97C98](allocator, size, hint);
}

CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context)
{
  return (CFAllocatorRef)MEMORY[0x1E0C97CA8](allocator, context);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
  MEMORY[0x1E0C97CB0](allocator, ptr);
}

CFIndex CFAllocatorGetPreferredSizeForSize(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint)
{
  return MEMORY[0x1E0C97CC8](allocator, size, hint);
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
  MEMORY[0x1E0C97CE8](theArray, otherArray, otherRange.location, otherRange.length);
}

uint64_t CFArrayAppendInt64()
{
  return MEMORY[0x1E0D1A8D8]();
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

uint64_t CFArrayApplyBlock()
{
  return MEMORY[0x1E0D1A8E0]();
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D20](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1E0C97D30](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D50](allocator, capacity, theArray);
}

void CFArrayExchangeValuesAtIndices(CFMutableArrayRef theArray, CFIndex idx1, CFIndex idx2)
{
  MEMORY[0x1E0C97D58](theArray, idx1, idx2);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

uint64_t CFArrayGetTypedValueAtIndex()
{
  return MEMORY[0x1E0D1A8F0]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
  MEMORY[0x1E0C97DB0](theArray, idx, value);
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
  MEMORY[0x1E0C97DB8](theArray);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
  MEMORY[0x1E0C97DC0](theArray, idx);
}

void CFArrayReplaceValues(CFMutableArrayRef theArray, CFRange range, const void **newValues, CFIndex newCount)
{
  MEMORY[0x1E0C97DC8](theArray, range.location, range.length, newValues, newCount);
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
  MEMORY[0x1E0C97DD0](theArray, idx, value);
}

void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
  MEMORY[0x1E0C97DE0](theArray, range.location, range.length, comparator, context);
}

void CFBagAddValue(CFMutableBagRef theBag, const void *value)
{
  MEMORY[0x1E0C97E98](theBag, value);
}

Boolean CFBagContainsValue(CFBagRef theBag, const void *value)
{
  return MEMORY[0x1E0C97EA8](theBag, value);
}

CFMutableBagRef CFBagCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFBagCallBacks *callBacks)
{
  return (CFMutableBagRef)MEMORY[0x1E0C97EB8](allocator, capacity, callBacks);
}

void CFBagRemoveAllValues(CFMutableBagRef theBag)
{
  MEMORY[0x1E0C97EF0](theBag);
}

void CFBagRemoveValue(CFMutableBagRef theBag, const void *value)
{
  MEMORY[0x1E0C97EF8](theBag, value);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x1E0C98120](bundle);
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x1E0C98150]();
}

CFCharacterSetRef CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier)
{
  return (CFCharacterSetRef)MEMORY[0x1E0C982F0](theSetIdentifier);
}

Boolean CFCharacterSetIsCharacterMember(CFCharacterSetRef theSet, UniChar theChar)
{
  return MEMORY[0x1E0C98320](theSet, theChar);
}

uint64_t CFCopyCString()
{
  return MEMORY[0x1E0D1A8F8]();
}

uint64_t CFCreateWithPlistBytes()
{
  return MEMORY[0x1E0D1A908]();
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
  MEMORY[0x1E0C98390](theData, bytes, length);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983B8](allocator, capacity);
}

CFMutableDataRef CFDataCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDataRef theData)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983C0](allocator, capacity, theData);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
  MEMORY[0x1E0C983F0](theData, range.location, range.length, buffer);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1E0C98408](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1E0C98418]();
}

void CFDataReplaceBytes(CFMutableDataRef theData, CFRange range, const UInt8 *newBytes, CFIndex newLength)
{
  MEMORY[0x1E0C98428](theData, range.location, range.length, newBytes, newLength);
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
  MEMORY[0x1E0C98430](theData, length);
}

CFDateFormatterRef CFDateFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle)
{
  return (CFDateFormatterRef)MEMORY[0x1E0C98460](allocator, locale, dateStyle, timeStyle);
}

CFStringRef CFDateFormatterCreateStringWithAbsoluteTime(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFAbsoluteTime at)
{
  return (CFStringRef)MEMORY[0x1E0C98488](allocator, formatter, at);
}

void CFDateFormatterSetFormat(CFDateFormatterRef formatter, CFStringRef formatString)
{
  MEMORY[0x1E0C984C0](formatter, formatString);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

uint64_t CFDictionaryApplyBlock()
{
  return MEMORY[0x1E0D1A910]();
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98508](theDict, applier, context);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98518](theDict, key);
}

uint64_t CFDictionaryCopyCString()
{
  return MEMORY[0x1E0D1A918]();
}

uint64_t CFDictionaryCopyKeys()
{
  return MEMORY[0x1E0D1A920]();
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98538](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98558](allocator, capacity, theDict);
}

uint64_t CFDictionaryGetCString()
{
  return MEMORY[0x1E0D1A940]();
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98570](theDict);
}

uint64_t CFDictionaryGetData()
{
  return MEMORY[0x1E0D1A948]();
}

uint64_t CFDictionaryGetDouble()
{
  return MEMORY[0x1E0D1A950]();
}

uint64_t CFDictionaryGetInt64()
{
  return MEMORY[0x1E0D1A970]();
}

uint64_t CFDictionaryGetInt64Ranged()
{
  return MEMORY[0x1E0D1A980]();
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
  MEMORY[0x1E0C985A0](theDict, keys, values);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

uint64_t CFDictionaryGetTypedValue()
{
  return MEMORY[0x1E0D1A990]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1E0C985C8](theDict, key, value);
}

uint64_t CFDictionaryMergeDictionary()
{
  return MEMORY[0x1E0D1A9A0]();
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
  MEMORY[0x1E0C985D8](theDict);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x1E0C985E8](theDict, key);
}

uint64_t CFDictionarySetCString()
{
  return MEMORY[0x1E0D1A9A8]();
}

uint64_t CFDictionarySetData()
{
  return MEMORY[0x1E0D1A9B0]();
}

uint64_t CFDictionarySetInt64()
{
  return MEMORY[0x1E0D1A9C0]();
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x1E0C98718](cf);
}

uint64_t CFGetCString()
{
  return MEMORY[0x1E0D1A9D0]();
}

uint64_t CFGetDouble()
{
  return MEMORY[0x1E0D1A9D8]();
}

uint64_t CFGetInt64()
{
  return MEMORY[0x1E0D1A9E8]();
}

uint64_t CFGetInt64Ranged()
{
  return MEMORY[0x1E0D1A9F0]();
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFLocaleRef CFLocaleCopyCurrent(void)
{
  return (CFLocaleRef)MEMORY[0x1E0C98770]();
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x1E0C988E0](center, name, object, userInfo, deliverImmediately);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

uint64_t CFNumberCreateInt64()
{
  return MEMORY[0x1E0D1AA00]();
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1E0C98A30](applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

CFArrayRef CFPreferencesCopyKeyList(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFArrayRef)MEMORY[0x1E0C98A50](applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A70](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
  MEMORY[0x1E0C98A80](key, value, applicationID);
}

uint64_t CFPropertyListCreateBytes()
{
  return MEMORY[0x1E0D1AAA0]();
}

uint64_t CFPropertyListCreateFormatted()
{
  return MEMORY[0x1E0D1AAA8]();
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98D70](theSet, value);
}

uint64_t CFSetApplyBlock()
{
  return MEMORY[0x1E0D1AAC0]();
}

void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98D78](theSet, applier, context);
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1E0C98D80](theSet, value);
}

CFSetRef CFSetCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFSetCallBacks *callBacks)
{
  return (CFSetRef)MEMORY[0x1E0C98D88](allocator, values, numValues, callBacks);
}

CFSetRef CFSetCreateCopy(CFAllocatorRef allocator, CFSetRef theSet)
{
  return (CFSetRef)MEMORY[0x1E0C98D90](allocator, theSet);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1E0C98D98](allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x1E0C98DA8](theSet);
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98DE0](theSet, value);
}

void CFSetSetValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98DF0](theSet, value);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
  MEMORY[0x1E0C98ED8](theString, appendedString);
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
  MEMORY[0x1E0C98EE0](theString, cStr, *(_QWORD *)&encoding);
}

uint64_t CFStringAppendF()
{
  return MEMORY[0x1E0D1AAC8]();
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  MEMORY[0x1E0C98EF0](theString, formatOptions, format);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

uint64_t CFStringCopyUTF8CString()
{
  return MEMORY[0x1E0D1AAD0]();
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x1E0C98F58](alloc, theString, separatorString);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x1E0C98F68](alloc, theArray, separatorString);
}

uint64_t CFStringCreateF()
{
  return MEMORY[0x1E0D1AAD8]();
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F90](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F98](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1E0C98FB8](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1E0C98FC8](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation, contentsDeallocator);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1E0C99018](alloc, formatOptions, format);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1E0C99080](theString, range.location, range.length, *(_QWORD *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
  MEMORY[0x1E0C990C0](theString, range.location, range.length, buffer);
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1E0C990C8](theString);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x1E0C990F0](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

uint64_t CFStringGetOrCopyCStringUTF8()
{
  return MEMORY[0x1E0D1AAE0]();
}

CFStringEncoding CFStringGetSystemEncoding(void)
{
  return MEMORY[0x1E0C99168]();
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1E0C99180](theString, prefix);
}

Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix)
{
  return MEMORY[0x1E0C99190](theString, suffix);
}

void CFStringReplace(CFMutableStringRef theString, CFRange range, CFStringRef replacement)
{
  MEMORY[0x1E0C991F0](theString, range.location, range.length, replacement);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1E0C99518](alloc);
}

CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
{
  return (CFUUIDRef)MEMORY[0x1E0C99530](alloc, *(_QWORD *)&bytes.byte0, *(_QWORD *)&bytes.byte8);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1E0C99538](alloc, uuid);
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  uint64_t v1;
  uint64_t v2;
  CFUUIDBytes result;

  v1 = MEMORY[0x1E0C99568](uuid);
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return (CFUserNotificationRef)MEMORY[0x1E0C995A8](allocator, flags, error, dictionary, timeout);
}

SInt32 CFUserNotificationReceiveResponse(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags *responseFlags)
{
  return MEMORY[0x1E0C995E8](userNotification, responseFlags, timeout);
}

uint64_t CM8021ASClockAddIPv4PortAndGetIdentity()
{
  return MEMORY[0x1E0C9E9D8]();
}

uint64_t CM8021ASClockAddIPv6PortAndGetIdentity()
{
  return MEMORY[0x1E0C9E9E8]();
}

uint64_t CM8021ASClockCopyProperty()
{
  return MEMORY[0x1E0C9E9F0]();
}

uint64_t CM8021ASClockCreate()
{
  return MEMORY[0x1E0C9E9F8]();
}

uint64_t CM8021ASClockDisablePort()
{
  return MEMORY[0x1E0C9EA00]();
}

uint64_t CM8021ASClockEnablePort()
{
  return MEMORY[0x1E0C9EA08]();
}

uint64_t CM8021ASClockGetClockTimeForHostTime()
{
  return MEMORY[0x1E0C9EA10]();
}

uint64_t CM8021ASClockGetHostTimeForClockTime()
{
  return MEMORY[0x1E0C9EA18]();
}

uint64_t CM8021ASClockIsLocked()
{
  return MEMORY[0x1E0C9EA20]();
}

uint64_t CM8021ASClockOverridePortReceiveMatching()
{
  return MEMORY[0x1E0C9EA28]();
}

uint64_t CM8021ASClockRemoveIPv4Port()
{
  return MEMORY[0x1E0C9EA30]();
}

uint64_t CM8021ASClockRemoveIPv6Port()
{
  return MEMORY[0x1E0C9EA38]();
}

uint64_t CM8021ASClockSetAllPortRemoteSyncMessageIntervals()
{
  return MEMORY[0x1E0C9EA40]();
}

uint64_t CM8021ASClockSetPortRemoteSyncMessageIntervals()
{
  return MEMORY[0x1E0C9EA48]();
}

OSStatus CMAudioFormatDescriptionCreate(CFAllocatorRef allocator, const AudioStreamBasicDescription *asbd, size_t layoutSize, const AudioChannelLayout *layout, size_t magicCookieSize, const void *magicCookie, CFDictionaryRef extensions, CMAudioFormatDescriptionRef *formatDescriptionOut)
{
  return MEMORY[0x1E0C9EA80](allocator, asbd, layoutSize, layout, magicCookieSize, magicCookie, extensions, formatDescriptionOut);
}

const AudioChannelLayout *__cdecl CMAudioFormatDescriptionGetChannelLayout(CMAudioFormatDescriptionRef desc, size_t *sizeOut)
{
  return (const AudioChannelLayout *)MEMORY[0x1E0C9EAA0](desc, sizeOut);
}

const AudioFormatListItem *__cdecl CMAudioFormatDescriptionGetFormatList(CMAudioFormatDescriptionRef desc, size_t *sizeOut)
{
  return (const AudioFormatListItem *)MEMORY[0x1E0C9EAA8](desc, sizeOut);
}

const AudioFormatListItem *__cdecl CMAudioFormatDescriptionGetRichestDecodableFormat(CMAudioFormatDescriptionRef desc)
{
  return (const AudioFormatListItem *)MEMORY[0x1E0C9EAC8](desc);
}

uint64_t CMAudioFormatDescriptionGetRichestDecodableFormatAndChannelLayout()
{
  return MEMORY[0x1E0C9EAD0]();
}

const AudioStreamBasicDescription *__cdecl CMAudioFormatDescriptionGetStreamBasicDescription(CMAudioFormatDescriptionRef desc)
{
  return (const AudioStreamBasicDescription *)MEMORY[0x1E0C9EAD8](desc);
}

OSStatus CMAudioSampleBufferCreateReadyWithPacketDescriptions(CFAllocatorRef allocator, CMBlockBufferRef dataBuffer, CMFormatDescriptionRef formatDescription, CMItemCount numSamples, CMTime *presentationTimeStamp, const AudioStreamPacketDescription *packetDescriptions, CMSampleBufferRef *sampleBufferOut)
{
  return MEMORY[0x1E0C9EAE0](allocator, dataBuffer, formatDescription, numSamples, presentationTimeStamp, packetDescriptions, sampleBufferOut);
}

uint64_t CMBaseClassGetCFTypeID()
{
  return MEMORY[0x1E0C9EAF8]();
}

uint64_t CMBaseGetClassID()
{
  return MEMORY[0x1E0C9EB00]();
}

uint64_t CMBaseObjectGetDerivedStorage()
{
  return MEMORY[0x1E0C9EB10]();
}

uint64_t CMBaseObjectGetProtocolVTable()
{
  return MEMORY[0x1E0C9EB18]();
}

uint64_t CMBaseObjectGetVTable()
{
  return MEMORY[0x1E0C9EB28]();
}

OSStatus CMBlockBufferAppendBufferReference(CMBlockBufferRef theBuffer, CMBlockBufferRef targetBBuf, size_t offsetToData, size_t dataLength, CMBlockBufferFlags flags)
{
  return MEMORY[0x1E0C9EB50](theBuffer, targetBBuf, offsetToData, dataLength, *(_QWORD *)&flags);
}

OSStatus CMBlockBufferCopyDataBytes(CMBlockBufferRef theSourceBuffer, size_t offsetToData, size_t dataLength, void *destination)
{
  return MEMORY[0x1E0C9EB68](theSourceBuffer, offsetToData, dataLength, destination);
}

OSStatus CMBlockBufferCreateEmpty(CFAllocatorRef structureAllocator, uint32_t subBlockCapacity, CMBlockBufferFlags flags, CMBlockBufferRef *blockBufferOut)
{
  return MEMORY[0x1E0C9EB78](structureAllocator, *(_QWORD *)&subBlockCapacity, *(_QWORD *)&flags, blockBufferOut);
}

OSStatus CMBlockBufferCreateWithBufferReference(CFAllocatorRef structureAllocator, CMBlockBufferRef bufferReference, size_t offsetToData, size_t dataLength, CMBlockBufferFlags flags, CMBlockBufferRef *blockBufferOut)
{
  return MEMORY[0x1E0C9EB80](structureAllocator, bufferReference, offsetToData, dataLength, *(_QWORD *)&flags, blockBufferOut);
}

OSStatus CMBlockBufferCreateWithMemoryBlock(CFAllocatorRef structureAllocator, void *memoryBlock, size_t blockLength, CFAllocatorRef blockAllocator, const CMBlockBufferCustomBlockSource *customBlockSource, size_t offsetToData, size_t dataLength, CMBlockBufferFlags flags, CMBlockBufferRef *blockBufferOut)
{
  return MEMORY[0x1E0C9EB88](structureAllocator, memoryBlock, blockLength, blockAllocator, customBlockSource, offsetToData, dataLength, *(_QWORD *)&flags);
}

size_t CMBlockBufferGetDataLength(CMBlockBufferRef theBuffer)
{
  return MEMORY[0x1E0C9EB98](theBuffer);
}

OSStatus CMBlockBufferGetDataPointer(CMBlockBufferRef theBuffer, size_t offset, size_t *lengthAtOffsetOut, size_t *totalLengthOut, char **dataPointerOut)
{
  return MEMORY[0x1E0C9EBA8](theBuffer, offset, lengthAtOffsetOut, totalLengthOut, dataPointerOut);
}

CFTypeID CMBlockBufferGetTypeID(void)
{
  return MEMORY[0x1E0C9EBB0]();
}

Boolean CMBlockBufferIsEmpty(CMBlockBufferRef theBuffer)
{
  return MEMORY[0x1E0C9EBB8](theBuffer);
}

Boolean CMBlockBufferIsRangeContiguous(CMBlockBufferRef theBuffer, size_t offset, size_t length)
{
  return MEMORY[0x1E0C9EBC0](theBuffer, offset, length);
}

OSStatus CMBlockBufferReplaceDataBytes(const void *sourceBytes, CMBlockBufferRef destinationBuffer, size_t offsetIntoDestination, size_t dataLength)
{
  return MEMORY[0x1E0C9EBC8](sourceBytes, destinationBuffer, offsetIntoDestination, dataLength);
}

OSStatus CMBufferQueueCallForEachBuffer(CMBufferQueueRef queue, OSStatus (__cdecl *callback)(CMBufferRef, void *), void *refcon)
{
  return MEMORY[0x1E0C9EBD0](queue, callback, refcon);
}

CMBufferRef CMBufferQueueCopyHead(CMBufferQueueRef queue)
{
  return (CMBufferRef)MEMORY[0x1E0C9EBE0](queue);
}

OSStatus CMBufferQueueCreate(CFAllocatorRef allocator, CMItemCount capacity, const CMBufferCallbacks *callbacks, CMBufferQueueRef *queueOut)
{
  return MEMORY[0x1E0C9EBE8](allocator, capacity, callbacks, queueOut);
}

CMBufferRef CMBufferQueueDequeueAndRetain(CMBufferQueueRef queue)
{
  return (CMBufferRef)MEMORY[0x1E0C9EBF8](queue);
}

OSStatus CMBufferQueueEnqueue(CMBufferQueueRef queue, CMBufferRef buf)
{
  return MEMORY[0x1E0C9EC08](queue, buf);
}

const CMBufferCallbacks *CMBufferQueueGetCallbacksForUnsortedSampleBuffers(void)
{
  return (const CMBufferCallbacks *)MEMORY[0x1E0C9EC20]();
}

CMTime *__cdecl CMBufferQueueGetDuration(CMTime *__return_ptr retstr, CMBufferQueueRef queue)
{
  return (CMTime *)MEMORY[0x1E0C9EC28](retstr, queue);
}

CMTime *__cdecl CMBufferQueueGetEndPresentationTimeStamp(CMTime *__return_ptr retstr, CMBufferQueueRef queue)
{
  return (CMTime *)MEMORY[0x1E0C9EC30](retstr, queue);
}

CMTime *__cdecl CMBufferQueueGetFirstPresentationTimeStamp(CMTime *__return_ptr retstr, CMBufferQueueRef queue)
{
  return (CMTime *)MEMORY[0x1E0C9EC40](retstr, queue);
}

CMBufferRef CMBufferQueueGetHead(CMBufferQueueRef queue)
{
  return (CMBufferRef)MEMORY[0x1E0C9EC48](queue);
}

CMTime *__cdecl CMBufferQueueGetMinPresentationTimeStamp(CMTime *__return_ptr retstr, CMBufferQueueRef queue)
{
  return (CMTime *)MEMORY[0x1E0C9EC60](retstr, queue);
}

Boolean CMBufferQueueIsEmpty(CMBufferQueueRef queue)
{
  return MEMORY[0x1E0C9ECA0](queue);
}

OSStatus CMBufferQueueReset(CMBufferQueueRef queue)
{
  return MEMORY[0x1E0C9ECB8](queue);
}

uint64_t CMClockConvertHostTimeToSystemUnits(CMTime *hostTime)
{
  return MEMORY[0x1E0C9ED30](hostTime);
}

CMClockRef CMClockGetHostTimeClock(void)
{
  return (CMClockRef)MEMORY[0x1E0C9ED40]();
}

CMTime *__cdecl CMClockGetTime(CMTime *__return_ptr retstr, CMClockRef clock)
{
  return (CMTime *)MEMORY[0x1E0C9ED48](retstr, clock);
}

CMTime *__cdecl CMClockMakeHostTimeFromSystemUnits(CMTime *__return_ptr retstr, uint64_t hostTime)
{
  return (CMTime *)MEMORY[0x1E0C9ED60](retstr, hostTime);
}

CFDictionaryRef CMCopyDictionaryOfAttachments(CFAllocatorRef allocator, CMAttachmentBearerRef target, CMAttachmentMode attachmentMode)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9ED80](allocator, target, *(_QWORD *)&attachmentMode);
}

uint64_t CMDerivedObjectCreate()
{
  return MEMORY[0x1E0C9ED90]();
}

Boolean CMFormatDescriptionEqual(CMFormatDescriptionRef formatDescription, CMFormatDescriptionRef otherFormatDescription)
{
  return MEMORY[0x1E0C9EDB8](formatDescription, otherFormatDescription);
}

FourCharCode CMFormatDescriptionGetMediaSubType(CMFormatDescriptionRef desc)
{
  return MEMORY[0x1E0C9EDD8](desc);
}

CFTypeRef CMGetAttachment(CMAttachmentBearerRef target, CFStringRef key, CMAttachmentMode *attachmentModeOut)
{
  return (CFTypeRef)MEMORY[0x1E0C9EE00](target, key, attachmentModeOut);
}

uint64_t CMNotificationCenterGetDefaultLocalCenter()
{
  return MEMORY[0x1E0C9EEC8]();
}

uint64_t CMNotificationCenterPostNotification()
{
  return MEMORY[0x1E0C9EED0]();
}

void CMRemoveAttachment(CMAttachmentBearerRef target, CFStringRef key)
{
  MEMORY[0x1E0C9EF18](target, key);
}

OSStatus CMSampleBufferCreate(CFAllocatorRef allocator, CMBlockBufferRef dataBuffer, Boolean dataReady, CMSampleBufferMakeDataReadyCallback makeDataReadyCallback, void *makeDataReadyRefcon, CMFormatDescriptionRef formatDescription, CMItemCount numSamples, CMItemCount numSampleTimingEntries, const CMSampleTimingInfo *sampleTimingArray, CMItemCount numSampleSizeEntries, const size_t *sampleSizeArray, CMSampleBufferRef *sampleBufferOut)
{
  return MEMORY[0x1E0C9EF40](allocator, dataBuffer, dataReady, makeDataReadyCallback, makeDataReadyRefcon, formatDescription, numSamples, numSampleTimingEntries);
}

OSStatus CMSampleBufferCreateCopy(CFAllocatorRef allocator, CMSampleBufferRef sbuf, CMSampleBufferRef *sampleBufferOut)
{
  return MEMORY[0x1E0C9EF48](allocator, sbuf, sampleBufferOut);
}

OSStatus CMSampleBufferCreateCopyWithNewTiming(CFAllocatorRef allocator, CMSampleBufferRef originalSBuf, CMItemCount numSampleTimingEntries, const CMSampleTimingInfo *sampleTimingArray, CMSampleBufferRef *sampleBufferOut)
{
  return MEMORY[0x1E0C9EF50](allocator, originalSBuf, numSampleTimingEntries, sampleTimingArray, sampleBufferOut);
}

OSStatus CMSampleBufferCreateReady(CFAllocatorRef allocator, CMBlockBufferRef dataBuffer, CMFormatDescriptionRef formatDescription, CMItemCount numSamples, CMItemCount numSampleTimingEntries, const CMSampleTimingInfo *sampleTimingArray, CMItemCount numSampleSizeEntries, const size_t *sampleSizeArray, CMSampleBufferRef *sampleBufferOut)
{
  return MEMORY[0x1E0C9EF70](allocator, dataBuffer, formatDescription, numSamples, numSampleTimingEntries, sampleTimingArray, numSampleSizeEntries, sampleSizeArray);
}

CMBlockBufferRef CMSampleBufferGetDataBuffer(CMSampleBufferRef sbuf)
{
  return (CMBlockBufferRef)MEMORY[0x1E0C9EFB0](sbuf);
}

CMTime *__cdecl CMSampleBufferGetDecodeTimeStamp(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return (CMTime *)MEMORY[0x1E0C9EFC0](retstr, sbuf);
}

CMTime *__cdecl CMSampleBufferGetDuration(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return (CMTime *)MEMORY[0x1E0C9EFC8](retstr, sbuf);
}

CMFormatDescriptionRef CMSampleBufferGetFormatDescription(CMSampleBufferRef sbuf)
{
  return (CMFormatDescriptionRef)MEMORY[0x1E0C9EFD0](sbuf);
}

CMItemCount CMSampleBufferGetNumSamples(CMSampleBufferRef sbuf)
{
  return MEMORY[0x1E0C9EFE0](sbuf);
}

CMTime *__cdecl CMSampleBufferGetOutputDuration(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return (CMTime *)MEMORY[0x1E0C9EFF0](retstr, sbuf);
}

CMTime *__cdecl CMSampleBufferGetOutputPresentationTimeStamp(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return (CMTime *)MEMORY[0x1E0C9EFF8](retstr, sbuf);
}

CMTime *__cdecl CMSampleBufferGetPresentationTimeStamp(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return (CMTime *)MEMORY[0x1E0C9F008](retstr, sbuf);
}

CFArrayRef CMSampleBufferGetSampleAttachmentsArray(CMSampleBufferRef sbuf, Boolean createIfNecessary)
{
  return (CFArrayRef)MEMORY[0x1E0C9F010](sbuf, createIfNecessary);
}

OSStatus CMSampleBufferSetOutputPresentationTimeStamp(CMSampleBufferRef sbuf, CMTime *outputPresentationTimeStamp)
{
  return MEMORY[0x1E0C9F0A8](sbuf, outputPresentationTimeStamp);
}

uint64_t CMSessionMgrSystemSoundActivateForPID()
{
  return MEMORY[0x1E0D48380]();
}

void CMSetAttachment(CMAttachmentBearerRef target, CFStringRef key, CFTypeRef value, CMAttachmentMode attachmentMode)
{
  MEMORY[0x1E0C9F0C8](target, key, value, *(_QWORD *)&attachmentMode);
}

void CMSetAttachments(CMAttachmentBearerRef target, CFDictionaryRef theAttachments, CMAttachmentMode attachmentMode)
{
  MEMORY[0x1E0C9F0D0](target, theAttachments, *(_QWORD *)&attachmentMode);
}

OSStatus CMSimpleQueueCreate(CFAllocatorRef allocator, int32_t capacity, CMSimpleQueueRef *queueOut)
{
  return MEMORY[0x1E0C9F0E0](allocator, *(_QWORD *)&capacity, queueOut);
}

const void *__cdecl CMSimpleQueueDequeue(CMSimpleQueueRef queue)
{
  return (const void *)MEMORY[0x1E0C9F0E8](queue);
}

OSStatus CMSimpleQueueEnqueue(CMSimpleQueueRef queue, const void *element)
{
  return MEMORY[0x1E0C9F0F0](queue, element);
}

int32_t CMSimpleQueueGetCount(CMSimpleQueueRef queue)
{
  return MEMORY[0x1E0C9F100](queue);
}

CMTime *__cdecl CMSyncConvertTime(CMTime *__return_ptr retstr, CMTime *time, CMClockOrTimebaseRef fromClockOrTimebase, CMClockOrTimebaseRef toClockOrTimebase)
{
  return (CMTime *)MEMORY[0x1E0C9F130](retstr, time, fromClockOrTimebase, toClockOrTimebase);
}

Float64 CMSyncGetRelativeRate(CMClockOrTimebaseRef ofClockOrTimebase, CMClockOrTimebaseRef relativeToClockOrTimebase)
{
  Float64 result;

  MEMORY[0x1E0C9F138](ofClockOrTimebase, relativeToClockOrTimebase);
  return result;
}

CMTime *__cdecl CMSyncGetTime(CMTime *__return_ptr retstr, CMClockOrTimebaseRef clockOrTimebase)
{
  return (CMTime *)MEMORY[0x1E0C9F148](retstr, clockOrTimebase);
}

CMTime *__cdecl CMTimeAdd(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x1E0C9F298](retstr, lhs, rhs);
}

int32_t CMTimeCompare(CMTime *time1, CMTime *time2)
{
  return MEMORY[0x1E0C9F2D8](time1, time2);
}

CMTime *__cdecl CMTimeConvertScale(CMTime *__return_ptr retstr, CMTime *time, int32_t newTimescale, CMTimeRoundingMethod method)
{
  return (CMTime *)MEMORY[0x1E0C9F2E0](retstr, time, *(_QWORD *)&newTimescale, *(_QWORD *)&method);
}

CFDictionaryRef CMTimeCopyAsDictionary(CMTime *time, CFAllocatorRef allocator)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9F2F0](time, allocator);
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  Float64 result;

  MEMORY[0x1E0C9F310](time);
  return result;
}

CMTime *__cdecl CMTimeMake(CMTime *__return_ptr retstr, int64_t value, int32_t timescale)
{
  return (CMTime *)MEMORY[0x1E0C9F318](retstr, value, *(_QWORD *)&timescale);
}

CMTime *__cdecl CMTimeMakeFromDictionary(CMTime *__return_ptr retstr, CFDictionaryRef dictionaryRepresentation)
{
  return (CMTime *)MEMORY[0x1E0C9F320](retstr, dictionaryRepresentation);
}

CMTime *__cdecl CMTimeMakeWithSeconds(CMTime *__return_ptr retstr, Float64 seconds, int32_t preferredTimescale)
{
  return (CMTime *)MEMORY[0x1E0C9F330](retstr, *(_QWORD *)&preferredTimescale, seconds);
}

CMTime *__cdecl CMTimeMinimum(CMTime *__return_ptr retstr, CMTime *time1, CMTime *time2)
{
  return (CMTime *)MEMORY[0x1E0C9F378](retstr, time1, time2);
}

CMTime *__cdecl CMTimeMultiplyByFloat64(CMTime *__return_ptr retstr, CMTime *time, Float64 multiplier)
{
  return (CMTime *)MEMORY[0x1E0C9F388](retstr, time, multiplier);
}

Boolean CMTimeRangeContainsTime(CMTimeRange *range, CMTime *time)
{
  return MEMORY[0x1E0C9F3A0](range, time);
}

CMTime *__cdecl CMTimeRangeGetEnd(CMTime *__return_ptr retstr, CMTimeRange *range)
{
  return (CMTime *)MEMORY[0x1E0C9F3D0](retstr, range);
}

CMTimeRange *__cdecl CMTimeRangeMake(CMTimeRange *__return_ptr retstr, CMTime *start, CMTime *duration)
{
  return (CMTimeRange *)MEMORY[0x1E0C9F3E8](retstr, start, duration);
}

CMTime *__cdecl CMTimeSubtract(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x1E0C9F400](retstr, lhs, rhs);
}

uint64_t CMTimeSyncClockCreateForSystemDomainClockIdentifier()
{
  return MEMORY[0x1E0C9F408]();
}

OSStatus CMTimebaseAddTimerDispatchSource(CMTimebaseRef timebase, dispatch_source_t timerSource)
{
  return MEMORY[0x1E0C9F418](timebase, timerSource);
}

Float64 CMTimebaseGetRate(CMTimebaseRef timebase)
{
  Float64 result;

  MEMORY[0x1E0C9F468](timebase);
  return result;
}

CMTime *__cdecl CMTimebaseGetTime(CMTime *__return_ptr retstr, CMTimebaseRef timebase)
{
  return (CMTime *)MEMORY[0x1E0C9F470](retstr, timebase);
}

uint64_t CMTimebaseGetTimeWithLogging()
{
  return MEMORY[0x1E0C9F488]();
}

OSStatus CMTimebaseRemoveTimerDispatchSource(CMTimebaseRef timebase, dispatch_source_t timerSource)
{
  return MEMORY[0x1E0C9F4B0](timebase, timerSource);
}

OSStatus CMTimebaseSetTimerDispatchSourceNextFireTime(CMTimebaseRef timebase, dispatch_source_t timerSource, CMTime *fireTime, uint32_t flags)
{
  return MEMORY[0x1E0C9F4F0](timebase, timerSource, fireTime, *(_QWORD *)&flags);
}

OSStatus CMTimebaseSetTimerDispatchSourceToFireImmediately(CMTimebaseRef timebase, dispatch_source_t timerSource)
{
  return MEMORY[0x1E0C9F4F8](timebase, timerSource);
}

OSStatus CMVideoFormatDescriptionCopyAsBigEndianImageDescriptionBlockBuffer(CFAllocatorRef allocator, CMVideoFormatDescriptionRef videoFormatDescription, CFStringEncoding stringEncoding, CMImageDescriptionFlavor flavor, CMBlockBufferRef *blockBufferOut)
{
  return MEMORY[0x1E0C9F510](allocator, videoFormatDescription, *(_QWORD *)&stringEncoding, flavor, blockBufferOut);
}

OSStatus CMVideoFormatDescriptionCreateFromBigEndianImageDescriptionBlockBuffer(CFAllocatorRef allocator, CMBlockBufferRef imageDescriptionBlockBuffer, CFStringEncoding stringEncoding, CMImageDescriptionFlavor flavor, CMVideoFormatDescriptionRef *formatDescriptionOut)
{
  return MEMORY[0x1E0C9F530](allocator, imageDescriptionBlockBuffer, *(_QWORD *)&stringEncoding, flavor, formatDescriptionOut);
}

uint64_t CreateUsableInterfaceList()
{
  return MEMORY[0x1E0D1ACC8]();
}

uint64_t DataToHexCStringEx()
{
  return MEMORY[0x1E0D1AD80]();
}

uint64_t FPrintF()
{
  return MEMORY[0x1E0D1ADB0]();
}

uint64_t FVDUtilsHEVCEncoderSupports42010()
{
  return MEMORY[0x1E0CC2600]();
}

uint64_t FatalErrorF()
{
  return MEMORY[0x1E0D1ADC0]();
}

uint64_t FigAudioSessionCreateUsingAuxiliaryAVAudioSession()
{
  return MEMORY[0x1E0CC27D8]();
}

uint64_t FigBaseClassRegisterClass()
{
  return MEMORY[0x1E0C9F868]();
}

uint64_t FigBaseProtocolRegisterProtocol()
{
  return MEMORY[0x1E0C9F870]();
}

uint64_t FigCFArrayAppendCMTime()
{
  return MEMORY[0x1E0C9FA00]();
}

uint64_t FigCFArrayAppendDouble()
{
  return MEMORY[0x1E0C9FA08]();
}

uint64_t FigCFArrayAppendFloat()
{
  return MEMORY[0x1E0C9FA10]();
}

uint64_t FigCFArrayAppendInt32()
{
  return MEMORY[0x1E0C9FA20]();
}

uint64_t FigCFArrayAppendInt64()
{
  return MEMORY[0x1E0C9FA28]();
}

uint64_t FigCFArrayApplyFunction()
{
  return MEMORY[0x1E0C9FA38]();
}

uint64_t FigCFArrayGetFloatAtIndex()
{
  return MEMORY[0x1E0C9FAD0]();
}

uint64_t FigCFArrayGetInt32AtIndex()
{
  return MEMORY[0x1E0C9FAE0]();
}

uint64_t FigCFArrayRemoveLastElementOfValue()
{
  return MEMORY[0x1E0C9FB10]();
}

uint64_t FigCFDictionaryAddEntriesToDictionaryWithRecursion()
{
  return MEMORY[0x1E0C9FB50]();
}

uint64_t FigCFDictionaryCopyArrayOfKeys()
{
  return MEMORY[0x1E0C9FB60]();
}

uint64_t FigCFDictionaryCopyArrayOfValues()
{
  return MEMORY[0x1E0C9FB68]();
}

uint64_t FigCFDictionaryCreateMutableCopy()
{
  return MEMORY[0x1E0C9FB80]();
}

uint64_t FigCFDictionaryGetBooleanIfPresent()
{
  return MEMORY[0x1E0C9FB98]();
}

uint64_t FigCFDictionaryGetBooleanValue()
{
  return MEMORY[0x1E0C9FBA0]();
}

uint64_t FigCFDictionaryGetCMTimeIfPresent()
{
  return MEMORY[0x1E0C9FBC8]();
}

uint64_t FigCFDictionaryGetCMTimeRangeIfPresent()
{
  return MEMORY[0x1E0C9FBD0]();
}

uint64_t FigCFDictionaryGetCount()
{
  return MEMORY[0x1E0C9FBD8]();
}

uint64_t FigCFDictionaryGetDoubleIfPresent()
{
  return MEMORY[0x1E0C9FBF0]();
}

uint64_t FigCFDictionaryGetFloat32IfPresent()
{
  return MEMORY[0x1E0C9FBF8]();
}

uint64_t FigCFDictionaryGetInt32IfPresent()
{
  return MEMORY[0x1E0C9FC10]();
}

uint64_t FigCFDictionaryGetInt64IfPresent()
{
  return MEMORY[0x1E0C9FC18]();
}

uint64_t FigCFDictionaryGetNumberValue()
{
  return MEMORY[0x1E0C9FC28]();
}

uint64_t FigCFDictionaryGetStringValue()
{
  return MEMORY[0x1E0C9FC38]();
}

uint64_t FigCFDictionaryGetValue()
{
  return MEMORY[0x1E0C9FC48]();
}

uint64_t FigCFDictionaryGetValueIfPresent()
{
  return MEMORY[0x1E0C9FC58]();
}

uint64_t FigCFDictionarySetDouble()
{
  return MEMORY[0x1E0C9FCB0]();
}

uint64_t FigCFDictionarySetFloat()
{
  return MEMORY[0x1E0C9FCB8]();
}

uint64_t FigCFDictionarySetFloat32()
{
  return MEMORY[0x1E0C9FCC0]();
}

uint64_t FigCFDictionarySetInt32()
{
  return MEMORY[0x1E0C9FCD8]();
}

uint64_t FigCFDictionarySetInt64()
{
  return MEMORY[0x1E0C9FCE0]();
}

uint64_t FigCFDictionarySetValue()
{
  return MEMORY[0x1E0C9FD00]();
}

uint64_t FigCFDictionarySetValueFromKeyInDict()
{
  return MEMORY[0x1E0C9FD08]();
}

uint64_t FigCFEqual()
{
  return MEMORY[0x1E0C9FD10]();
}

uint64_t FigCFNumberCreateFloat64()
{
  return MEMORY[0x1E0C9FD38]();
}

uint64_t FigCFNumberCreateSInt16()
{
  return MEMORY[0x1E0C9FD40]();
}

uint64_t FigCFNumberCreateSInt32()
{
  return MEMORY[0x1E0C9FD48]();
}

uint64_t FigCFNumberCreateUInt32()
{
  return MEMORY[0x1E0C9FD68]();
}

uint64_t FigCFNumberGetUInt16()
{
  return MEMORY[0x1E0C9FDA0]();
}

uint64_t FigCFNumberGetUInt32()
{
  return MEMORY[0x1E0C9FDA8]();
}

uint64_t FigCFNumberGetUInt64()
{
  return MEMORY[0x1E0C9FDB0]();
}

uint64_t FigCFStringFind()
{
  return MEMORY[0x1E0C9FE30]();
}

uint64_t FigCFStringGetCStringPtrAndBufferToFree()
{
  return MEMORY[0x1E0C9FE38]();
}

uint64_t FigCFWeakReferenceHolderCopyReferencedObject()
{
  return MEMORY[0x1E0C9FEB8]();
}

uint64_t FigCFWeakReferenceHolderCreateWithReferencedObject()
{
  return MEMORY[0x1E0C9FEC0]();
}

uint64_t FigCFWeakReferenceTableAddValueAndGetKey()
{
  return MEMORY[0x1E0C9FEE8]();
}

uint64_t FigCFWeakReferenceTableCopyValue()
{
  return MEMORY[0x1E0C9FF00]();
}

uint64_t FigCFWeakReferenceTableCreate()
{
  return MEMORY[0x1E0C9FF10]();
}

uint64_t FigCFWeakReferenceTableRemoveValue()
{
  return MEMORY[0x1E0C9FF18]();
}

uint64_t FigCreateBlockBufferCopyingMemoryBlock()
{
  return MEMORY[0x1E0CA0218]();
}

uint64_t FigDispatchAsyncPostNotification()
{
  return MEMORY[0x1E0CA0588]();
}

uint64_t FigDispatchQueueCreateWithPriority()
{
  return MEMORY[0x1E0CA05C0]();
}

uint64_t FigEndpointStreamAudioEngineSbufTracerDebugPrint()
{
  return MEMORY[0x1E0CC2A50]();
}

uint64_t FigEndpointStreamAudioFormatDescriptionCreate()
{
  return MEMORY[0x1E0CA0768]();
}

uint64_t FigEndpointStreamAudioFormatDescriptionGetASBD()
{
  return MEMORY[0x1E0CA0778]();
}

uint64_t FigEndpointStreamAudioFormatDescriptionGetChannelLayoutTag()
{
  return MEMORY[0x1E0CA0780]();
}

uint64_t FigGetCFPreferenceNumberWithDefault()
{
  return MEMORY[0x1E0CA0A70]();
}

uint64_t FigGetTimeOfDayClock()
{
  return MEMORY[0x1E0CA0AD8]();
}

uint64_t FigIsAirplaydEnabled()
{
  return MEMORY[0x1E0CA0D48]();
}

uint64_t FigNote_ChangeValue()
{
  return MEMORY[0x1E0CA0F88]();
}

uint64_t FigNote_CopyKeys()
{
  return MEMORY[0x1E0CA0F90]();
}

uint64_t FigNote_GetValue()
{
  return MEMORY[0x1E0CA0F98]();
}

uint64_t FigNotificationCenterAddWeakListener()
{
  return MEMORY[0x1E0CA0FC0]();
}

uint64_t FigNotificationCenterRemoveWeakListener()
{
  return MEMORY[0x1E0CA0FD8]();
}

uint64_t FigRCLCopyCFType()
{
  return MEMORY[0x1E0CC2F68]();
}

uint64_t FigRCLCreateConfiguration()
{
  return MEMORY[0x1E0CC2F70]();
}

uint64_t FigReentrantMutexCreate()
{
  return MEMORY[0x1E0CA11D0]();
}

uint64_t FigReentrantMutexLock()
{
  return MEMORY[0x1E0CA11E0]();
}

uint64_t FigReentrantMutexUnlock()
{
  return MEMORY[0x1E0CA11F0]();
}

uint64_t FigRemote_CreateFormatDescriptionFromSerializedAtomDataBlockBuffer()
{
  return MEMORY[0x1E0CA1278]();
}

uint64_t FigRemote_CreateSerializedAtomDataBlockBufferForFormatDescription()
{
  return MEMORY[0x1E0CA12F0]();
}

uint64_t FigReportingAgentOfflineAirPlayCreate()
{
  return MEMORY[0x1E0CC2F88]();
}

uint64_t FigReportingAgentOfflineAirPlayIssueReportingEvent()
{
  return MEMORY[0x1E0CC2F90]();
}

uint64_t FigSampleBufferAudioRendererCentralCreateWithOptions()
{
  return MEMORY[0x1E0CC2FA0]();
}

uint64_t FigSampleBufferAudioRendererCreateRemoteWithOptions()
{
  return MEMORY[0x1E0CC2FA8]();
}

uint64_t FigSampleBufferAudioRendererCreateWithOptions()
{
  return MEMORY[0x1E0CC2FB8]();
}

uint64_t FigSampleBufferGetDecryptor()
{
  return MEMORY[0x1E0CA1440]();
}

uint64_t FigSampleBufferRenderSynchronizerCentralCreate()
{
  return MEMORY[0x1E0CC3008]();
}

uint64_t FigSampleBufferRenderSynchronizerCreateRemoteWithOptions()
{
  return MEMORY[0x1E0CC3010]();
}

uint64_t FigSampleBufferRenderSynchronizerCreateWithOptions()
{
  return MEMORY[0x1E0CC3018]();
}

uint64_t FigSampleBufferSetDecryptor()
{
  return MEMORY[0x1E0CA1460]();
}

uint64_t FigServer_IsAirplayd()
{
  return MEMORY[0x1E0CA1500]();
}

uint64_t FigSignalErrorAt()
{
  return MEMORY[0x1E0CA1550]();
}

uint64_t FigSimpleMutexCheckIsLockedOnThisThread()
{
  return MEMORY[0x1E0CA1560]();
}

uint64_t FigSimpleMutexCheckIsNotLockedOnThisThread()
{
  return MEMORY[0x1E0CA1568]();
}

uint64_t FigSimpleMutexCreate()
{
  return MEMORY[0x1E0CA1570]();
}

uint64_t FigSimpleMutexDestroy()
{
  return MEMORY[0x1E0CA1578]();
}

uint64_t FigSimpleMutexLock()
{
  return MEMORY[0x1E0CA1580]();
}

uint64_t FigSimpleMutexUnlock()
{
  return MEMORY[0x1E0CA1590]();
}

uint64_t FigThreadCopyProperty()
{
  return MEMORY[0x1E0CA17B0]();
}

uint64_t FigThreadGetCurrent()
{
  return MEMORY[0x1E0CA17C0]();
}

uint64_t FigThreadGetMachThreadPriorityValue()
{
  return MEMORY[0x1E0CA17E0]();
}

uint64_t FigThreadRunOnce()
{
  return MEMORY[0x1E0CA1810]();
}

uint64_t FigXPCMessageCopyCFDictionary()
{
  return MEMORY[0x1E0CA1BD0]();
}

uint64_t FigXPCMessageCopyCFString()
{
  return MEMORY[0x1E0CA1BF0]();
}

uint64_t FigXPCMessageSetCFDictionary()
{
  return MEMORY[0x1E0CA1CE0]();
}

uint64_t FigXPCMessageSetCFString()
{
  return MEMORY[0x1E0CA1D00]();
}

uint64_t FigXPCRelease()
{
  return MEMORY[0x1E0CA1D80]();
}

uint64_t FigXPCRetain()
{
  return MEMORY[0x1E0CA1E10]();
}

uint64_t GestaltGetBoolean()
{
  return MEMORY[0x1E0D1ADE0]();
}

uint64_t GestaltGetDeviceClass()
{
  return MEMORY[0x1E0D1AE00]();
}

uint64_t GestaltProductTypeStringToDeviceClass()
{
  return MEMORY[0x1E0D1AE08]();
}

uint64_t GetDeviceModelString()
{
  return MEMORY[0x1E0D1AE18]();
}

uint64_t GetPrimaryMACAddress()
{
  return MEMORY[0x1E0D1AE48]();
}

uint64_t GetSystemBuildVersionString()
{
  return MEMORY[0x1E0D1AE58]();
}

uint64_t HTTPParseByteRangeRequest()
{
  return MEMORY[0x1E0D1AF90]();
}

uint64_t HardwareAddressToCString()
{
  return MEMORY[0x1E0D1AFD8]();
}

uint64_t HexToData()
{
  return MEMORY[0x1E0D1AFE8]();
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x1E0CBB6F0](*(_QWORD *)&object);
}

IOReturn IOPMAssertionCreateWithProperties(CFDictionaryRef AssertionProperties, IOPMAssertionID *AssertionID)
{
  return MEMORY[0x1E0CBB718](AssertionProperties, AssertionID);
}

IOReturn IOPMAssertionRelease(IOPMAssertionID AssertionID)
{
  return MEMORY[0x1E0CBB738](*(_QWORD *)&AssertionID);
}

IOReturn IOPMAssertionSetProperty(IOPMAssertionID theAssertion, CFStringRef theProperty, CFTypeRef theValue)
{
  return MEMORY[0x1E0CBB748](*(_QWORD *)&theAssertion, theProperty, theValue);
}

CFTypeRef IORegistryEntrySearchCFProperty(io_registry_entry_t entry, const io_name_t plane, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x1E0CBB9A0](*(_QWORD *)&entry, plane, key, allocator, *(_QWORD *)&options);
}

uint64_t IOReportChannelGetChannelName()
{
  return MEMORY[0x1E0DE0290]();
}

uint64_t IOReportChannelGetSubGroup()
{
  return MEMORY[0x1E0DE02A8]();
}

uint64_t IOReportCopyChannelsForDrivers()
{
  return MEMORY[0x1E0DE02C8]();
}

uint64_t IOReportCreateSamples()
{
  return MEMORY[0x1E0DE02F8]();
}

uint64_t IOReportCreateSubscription()
{
  return MEMORY[0x1E0DE0310]();
}

uint64_t IOReportIterate()
{
  return MEMORY[0x1E0DE0338]();
}

uint64_t IOReportSelectChannelsInGroup()
{
  return MEMORY[0x1E0DE0358]();
}

uint64_t IOReportSimpleGetIntegerValue()
{
  return MEMORY[0x1E0DE0360]();
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x1E0CBB9E0](*(_QWORD *)&mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0CBBA00](name);
}

CFMutableDictionaryRef IOServiceNameMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0CBBA08](name);
}

uint64_t IsAppleInternalBuild()
{
  return MEMORY[0x1E0D1AFF8]();
}

uint64_t IsAppleTV()
{
  return MEMORY[0x1E0D1B008]();
}

uint64_t KeychainAddFormatted()
{
  return MEMORY[0x1E0D1B010]();
}

uint64_t KeychainCopyMatchingFormatted()
{
  return MEMORY[0x1E0D1B018]();
}

uint64_t KeychainDeleteFormatted()
{
  return MEMORY[0x1E0D1B020]();
}

uint64_t KeychainUpdateFormatted()
{
  return MEMORY[0x1E0D1B028]();
}

uint64_t LogCategoryCopyOSLogHandle()
{
  return MEMORY[0x1E0D1B038]();
}

uint64_t LogControl()
{
  return MEMORY[0x1E0D1B078]();
}

uint64_t LogPrintF()
{
  return MEMORY[0x1E0D1B098]();
}

uint64_t LogShow()
{
  return MEMORY[0x1E0D1B0B8]();
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1E0DE2B20]();
}

uint64_t MGGetProductType()
{
  return MEMORY[0x1E0DE2B68]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x1E0DE2B70]();
}

uint64_t MillisecondsToUpTicks()
{
  return MEMORY[0x1E0D1B110]();
}

uint64_t MirroredRingBufferFree()
{
  return MEMORY[0x1E0D1B118]();
}

uint64_t MirroredRingBufferInit()
{
  return MEMORY[0x1E0D1B120]();
}

uint64_t NSErrorToOSStatus()
{
  return MEMORY[0x1E0D1B1F0]();
}

uint64_t NTPClockCreate()
{
  return MEMORY[0x1E0D1B240]();
}

uint64_t NTPClockGetListenPort()
{
  return MEMORY[0x1E0D1B248]();
}

uint64_t NTPClockGetSynchronizedNTPTime()
{
  return MEMORY[0x1E0D1B250]();
}

uint64_t NTPClockGetSynchronizedNTPTimeNearUpTicks()
{
  return MEMORY[0x1E0D1B258]();
}

uint64_t NTPClockGetUpTicksNearSynchronizedNTPTime()
{
  return MEMORY[0x1E0D1B260]();
}

uint64_t NTPClockSetEpoch()
{
  return MEMORY[0x1E0D1B268]();
}

uint64_t NTPClockSetListenPort()
{
  return MEMORY[0x1E0D1B270]();
}

uint64_t NTPClockSetP2P()
{
  return MEMORY[0x1E0D1B278]();
}

uint64_t NTPClockSetPeer()
{
  return MEMORY[0x1E0D1B280]();
}

uint64_t NTPClockSetQoSDisabled()
{
  return MEMORY[0x1E0D1B288]();
}

uint64_t NTPClockSetRTCP()
{
  return MEMORY[0x1E0D1B290]();
}

uint64_t NTPClockSetThreadName()
{
  return MEMORY[0x1E0D1B298]();
}

uint64_t NTPClockSetThreadPriority()
{
  return MEMORY[0x1E0D1B2A0]();
}

uint64_t NTPClockStartClient()
{
  return MEMORY[0x1E0D1B2A8]();
}

uint64_t NTPClockStartServer()
{
  return MEMORY[0x1E0D1B2B0]();
}

uint64_t NTPClockStop()
{
  return MEMORY[0x1E0D1B2B8]();
}

uint64_t NTPtoUpTicks()
{
  return MEMORY[0x1E0D1B2C0]();
}

uint64_t PairingSessionCopyIdentity()
{
  return MEMORY[0x1E0D1B4F0]();
}

uint64_t PairingSessionCreate()
{
  return MEMORY[0x1E0D1B510]();
}

uint64_t PairingSessionDeleteIdentity()
{
  return MEMORY[0x1E0D1B518]();
}

uint64_t PairingSessionDeletePeer()
{
  return MEMORY[0x1E0D1B520]();
}

uint64_t PairingSessionSetFlags()
{
  return MEMORY[0x1E0D1B570]();
}

uint64_t PairingSessionSetKeychainInfo()
{
  return MEMORY[0x1E0D1B580]();
}

uint64_t RandomBytes()
{
  return MEMORY[0x1E0D1B5F8]();
}

uint64_t ReleaseUsableInterfaceList()
{
  return MEMORY[0x1E0D1B608]();
}

CFStringRef SCNetworkInterfaceGetInterfaceType(SCNetworkInterfaceRef interface)
{
  return (CFStringRef)MEMORY[0x1E0CE8870](interface);
}

uint64_t SNPrintF()
{
  return MEMORY[0x1E0D1B610]();
}

uint64_t SRP6a_client_method()
{
  return MEMORY[0x1E0CFE178]();
}

uint64_t SRP6a_server_method()
{
  return MEMORY[0x1E0CFE180]();
}

uint64_t SRP_compute_key()
{
  return MEMORY[0x1E0CFE188]();
}

uint64_t SRP_free()
{
  return MEMORY[0x1E0CFE190]();
}

uint64_t SRP_gen_pub()
{
  return MEMORY[0x1E0CFE198]();
}

uint64_t SRP_new()
{
  return MEMORY[0x1E0CFE1A0]();
}

uint64_t SRP_respond()
{
  return MEMORY[0x1E0CFE1A8]();
}

uint64_t SRP_set_auth_password()
{
  return MEMORY[0x1E0CFE1B0]();
}

uint64_t SRP_set_params()
{
  return MEMORY[0x1E0CFE1B8]();
}

uint64_t SRP_set_username()
{
  return MEMORY[0x1E0CFE1C0]();
}

uint64_t SRP_verify()
{
  return MEMORY[0x1E0CFE1C8]();
}

uint64_t SecondsToUpTicksF()
{
  return MEMORY[0x1E0D1B630]();
}

uint64_t SetCurrentThreadPriority()
{
  return MEMORY[0x1E0D1B650]();
}

uint64_t SockAddrCompareAddr()
{
  return MEMORY[0x1E0D1B660]();
}

uint64_t SockAddrCopy()
{
  return MEMORY[0x1E0D1B670]();
}

uint64_t SockAddrGetPort()
{
  return MEMORY[0x1E0D1B678]();
}

uint64_t SockAddrSetPort()
{
  return MEMORY[0x1E0D1B688]();
}

uint64_t SockAddrToString()
{
  return MEMORY[0x1E0D1B698]();
}

uint64_t StringToSockAddr()
{
  return MEMORY[0x1E0D1B710]();
}

uint64_t StringToUUID()
{
  return MEMORY[0x1E0D1B718]();
}

int TXTRecordContainsKey(uint16_t txtLen, const void *txtRecord, const char *key)
{
  return MEMORY[0x1E0C806E8](txtLen, txtRecord, key);
}

void TXTRecordCreate(TXTRecordRef *txtRecord, uint16_t bufferLen, void *buffer)
{
  MEMORY[0x1E0C806F0](txtRecord, bufferLen, buffer);
}

void TXTRecordDeallocate(TXTRecordRef *txtRecord)
{
  MEMORY[0x1E0C806F8](txtRecord);
}

const void *__cdecl TXTRecordGetBytesPtr(const TXTRecordRef *txtRecord)
{
  return (const void *)MEMORY[0x1E0C80700](txtRecord);
}

uint16_t TXTRecordGetCount(uint16_t txtLen, const void *txtRecord)
{
  return MEMORY[0x1E0C80708](txtLen, txtRecord);
}

DNSServiceErrorType TXTRecordGetItemAtIndex(uint16_t txtLen, const void *txtRecord, uint16_t itemIndex, uint16_t keyBufLen, char *key, uint8_t *valueLen, const void **value)
{
  return MEMORY[0x1E0C80710](txtLen, txtRecord, itemIndex, keyBufLen, key, valueLen, value);
}

uint16_t TXTRecordGetLength(const TXTRecordRef *txtRecord)
{
  return MEMORY[0x1E0C80718](txtRecord);
}

const void *__cdecl TXTRecordGetValuePtr(uint16_t txtLen, const void *txtRecord, const char *key, uint8_t *valueLen)
{
  return (const void *)MEMORY[0x1E0C80720](txtLen, txtRecord, key, valueLen);
}

DNSServiceErrorType TXTRecordRemoveValue(TXTRecordRef *txtRecord, const char *key)
{
  return MEMORY[0x1E0C80728](txtRecord, key);
}

DNSServiceErrorType TXTRecordSetValue(TXTRecordRef *txtRecord, const char *key, uint8_t valueSize, const void *value)
{
  return MEMORY[0x1E0C80730](txtRecord, key, valueSize, value);
}

uint64_t TextToHardwareAddress()
{
  return MEMORY[0x1E0D1B798]();
}

uint64_t TextToInt32()
{
  return MEMORY[0x1E0D1B7B0]();
}

uint64_t TranslateValue()
{
  return MEMORY[0x1E0D1B7C0]();
}

uint64_t UUIDtoCStringFlags()
{
  return MEMORY[0x1E0D1B7D8]();
}

uint64_t UpTicksPerSecond()
{
  return MEMORY[0x1E0D1B7E0]();
}

uint64_t UpTicksToMicroseconds()
{
  return MEMORY[0x1E0D1B7E8]();
}

uint64_t UpTicksToMilliseconds()
{
  return MEMORY[0x1E0D1B7F0]();
}

uint64_t UpTicksToNTP()
{
  return MEMORY[0x1E0D1B7F8]();
}

uint64_t UpTicksToNanoseconds()
{
  return MEMORY[0x1E0D1B800]();
}

uint64_t UpTicksToSeconds()
{
  return MEMORY[0x1E0D1B808]();
}

uint64_t UpTicksToSecondsF()
{
  return MEMORY[0x1E0D1B818]();
}

uint64_t WiFiManagerGetInt64()
{
  return MEMORY[0x1E0D1B850]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
  MEMORY[0x1E0C80940](a1, a2, *(_QWORD *)&a3);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1E0C9A498]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1E0C9A4B0]();
}

uint64_t _LogCategory_Initialize()
{
  return MEMORY[0x1E0D1B880]();
}

uint64_t _SCNetworkInterfaceCreateWithBSDName()
{
  return MEMORY[0x1E0CE8A98]();
}

uint64_t _SCNetworkInterfaceGetFamilySubType()
{
  return MEMORY[0x1E0CE8AA0]();
}

uint64_t _SCNetworkInterfaceGetIOPath()
{
  return MEMORY[0x1E0CE8AB8]();
}

uint64_t _SCNetworkInterfaceIsPhysicalEthernet()
{
  return MEMORY[0x1E0CE8AC8]();
}

uint64_t _SCNetworkInterfaceIsThunderbolt()
{
  return MEMORY[0x1E0CE8AD0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

void caulk::concurrent::message::~message(caulk::concurrent::message *this)
{
  MEMORY[0x1E0DDB450](this);
}

uint64_t caulk::concurrent::messenger::drain(caulk::concurrent::messenger *this)
{
  return MEMORY[0x1E0DDB468](this);
}

uint64_t caulk::concurrent::messenger::enqueue(caulk::concurrent::messenger *this, caulk::concurrent::message *a2)
{
  return MEMORY[0x1E0DDB470](this, a2);
}

uint64_t caulk::concurrent::messenger::messenger()
{
  return MEMORY[0x1E0DDB480]();
}

void caulk::concurrent::messenger::~messenger(caulk::concurrent::messenger *this)
{
  MEMORY[0x1E0DDB488](this);
}

uint64_t caulk::init_realtime_safe_resource(caulk *this)
{
  return MEMORY[0x1E0DDB4F8](this);
}

uint64_t caulk::semaphore::timed_wait(caulk::semaphore *this, double a2)
{
  return MEMORY[0x1E0DDB6F8](this, a2);
}

uint64_t caulk::semaphore::signal(caulk::semaphore *this)
{
  return MEMORY[0x1E0DDB700](this);
}

uint64_t caulk::semaphore::semaphore(caulk::semaphore *this)
{
  return MEMORY[0x1E0DDB708](this);
}

void caulk::semaphore::~semaphore(caulk::semaphore *this)
{
  MEMORY[0x1E0DDB710](this);
}

void std::bad_alloc::~bad_alloc(std::bad_alloc *this)
{
  MEMORY[0x1E0DE4DC0](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

uint64_t operator delete()
{
  return off_1E8287638();
}

uint64_t operator new()
{
  return off_1E8287640();
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void *__cxa_get_exception_ptr(void *a1)
{
  return (void *)MEMORY[0x1E0DE50A8](a1);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

float __exp10f(float a1)
{
  float result;

  MEMORY[0x1E0C80AD0](a1);
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1E0C80B68]();
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C78](*(_QWORD *)&a1);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

int accept(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x1E0C813C8](*(_QWORD *)&a1, a2, a3);
}

uint32_t arc4random(void)
{
  return MEMORY[0x1E0C81570]();
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
  MEMORY[0x1E0C81580](__buf, __nbytes);
}

int bind(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x1E0C816F0](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

uint64_t cccurve25519()
{
  return MEMORY[0x1E0C81998]();
}

uint64_t cccurve25519_make_pub()
{
  return MEMORY[0x1E0C819B0]();
}

uint64_t cced25519_make_key_pair_compat()
{
  return MEMORY[0x1E0D1B890]();
}

uint64_t cced25519_sign_compat()
{
  return MEMORY[0x1E0D1B898]();
}

uint64_t cced25519_verify_compat()
{
  return MEMORY[0x1E0D1B8A0]();
}

uint64_t chacha20_poly1305_add_aad()
{
  return MEMORY[0x1E0D1B8C0]();
}

uint64_t chacha20_poly1305_decrypt()
{
  return MEMORY[0x1E0D1B8C8]();
}

uint64_t chacha20_poly1305_encrypt()
{
  return MEMORY[0x1E0D1B8E8]();
}

uint64_t chacha20_poly1305_final()
{
  return MEMORY[0x1E0D1B900]();
}

uint64_t chacha20_poly1305_init_64x64()
{
  return MEMORY[0x1E0D1B908]();
}

uint64_t chacha20_poly1305_verify()
{
  return MEMORY[0x1E0D1B910]();
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

uint64_t cstr_free()
{
  return MEMORY[0x1E0CFE1D0]();
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_after_f(dispatch_time_t when, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82BD0](when, queue, context, work);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82C18](queue, context, work);
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C68](flags, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority, block);
}

BOOL dispatch_data_apply(dispatch_data_t data, dispatch_data_applier_t applier)
{
  return MEMORY[0x1E0C82CA0](data, applier);
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x1E0C82CB0](buffer, size, queue, destructor);
}

dispatch_data_t dispatch_data_create_concat(dispatch_data_t data1, dispatch_data_t data2)
{
  return (dispatch_data_t)MEMORY[0x1E0C82CC0](data1, data2);
}

dispatch_data_t dispatch_data_create_map(dispatch_data_t data, const void **buffer_ptr, size_t *size_ptr)
{
  return (dispatch_data_t)MEMORY[0x1E0C82CD0](data, buffer_ptr, size_ptr);
}

size_t dispatch_data_get_size(dispatch_data_t data)
{
  return MEMORY[0x1E0C82CE8](data);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
  MEMORY[0x1E0C82E10](predicate, context, function);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x1E0C82E98](object);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

void dispatch_retain(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA8](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
  MEMORY[0x1E0C82EE0](object, context);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

uintptr_t dispatch_source_get_data(dispatch_source_t source)
{
  return MEMORY[0x1E0C82F28](source);
}

void dispatch_source_set_cancel_handler_f(dispatch_source_t source, dispatch_function_t handler)
{
  MEMORY[0x1E0C82F50](source, handler);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_event_handler_f(dispatch_source_t source, dispatch_function_t handler)
{
  MEMORY[0x1E0C82F60](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

void dispatch_suspend(dispatch_object_t object)
{
  MEMORY[0x1E0C82F88](object);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

void dispatch_sync_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82FA0](queue, context, work);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1E0C83300](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

FILE *__cdecl fdopen(int a1, const char *a2)
{
  return (FILE *)MEMORY[0x1E0C83318](*(_QWORD *)&a1, a2);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1E0C83370](a1);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

void freeifaddrs(ifaddrs *a1)
{
  MEMORY[0x1E0C834D0](a1);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1E0C83560](*(_QWORD *)&a1, a2);
}

int getifaddrs(ifaddrs **a1)
{
  return MEMORY[0x1E0C836C8](a1);
}

int getloadavg(double a1[], int a2)
{
  return MEMORY[0x1E0C836E8](a1, *(_QWORD *)&a2);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x1E0C83778]();
}

uint64_t iceil2()
{
  return MEMORY[0x1E0D1B920]();
}

char *__cdecl if_indextoname(unsigned int a1, char *a2)
{
  return (char *)MEMORY[0x1E0C83900](*(_QWORD *)&a1, a2);
}

unsigned int if_nametoindex(const char *a1)
{
  return MEMORY[0x1E0C83910](a1);
}

uint64_t ilog2_64()
{
  return MEMORY[0x1E0D1B928]();
}

uint64_t in_audio_mx_server_process()
{
  return MEMORY[0x1E0CFFCA8]();
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1E0C83A20]();
}

int listen(int a1, int a2)
{
  return MEMORY[0x1E0C83B80](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

float log10f(float a1)
{
  float result;

  MEMORY[0x1E0C83BC8](a1);
  return result;
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1E0C83C50]();
}

kern_return_t mach_vm_deallocate(vm_map_t target, mach_vm_address_t address, mach_vm_size_t size)
{
  return MEMORY[0x1E0C83DD0](*(_QWORD *)&target, address, size);
}

kern_return_t mach_vm_remap(vm_map_t target_task, mach_vm_address_t *target_address, mach_vm_size_t size, mach_vm_offset_t mask, int flags, vm_map_t src_task, mach_vm_address_t src_address, BOOLean_t copy, vm_prot_t *cur_protection, vm_prot_t *max_protection, vm_inherit_t inheritance)
{
  return MEMORY[0x1E0C83E10](*(_QWORD *)&target_task, target_address, size, mask, *(_QWORD *)&flags, *(_QWORD *)&src_task, src_address, *(_QWORD *)&copy);
}

malloc_zone_t *__cdecl malloc_create_zone(vm_size_t start_size, unsigned int flags)
{
  return (malloc_zone_t *)MEMORY[0x1E0C83E78](start_size, *(_QWORD *)&flags);
}

malloc_zone_t *malloc_default_zone(void)
{
  return (malloc_zone_t *)MEMORY[0x1E0C83E88]();
}

void malloc_set_zone_name(malloc_zone_t *zone, const char *name)
{
  MEMORY[0x1E0C83ED8](zone, name);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

void *__cdecl malloc_type_zone_calloc(malloc_zone_t *zone, size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F20](zone, count, size, type_id);
}

void *__cdecl malloc_type_zone_malloc(malloc_zone_t *zone, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F28](zone, size, type_id);
}

void *__cdecl malloc_type_zone_memalign(malloc_zone_t *zone, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F38](zone, alignment, size, type_id);
}

void *__cdecl malloc_type_zone_realloc(malloc_zone_t *zone, void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F40](zone, ptr, size, type_id);
}

void malloc_zone_free(malloc_zone_t *zone, void *ptr)
{
  MEMORY[0x1E0C83F70](zone, ptr);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1E0C841D8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1E0C84220](a1, a2);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1E0C843D8](*(_QWORD *)&token);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1E0C843F8](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1E0C84400](name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return MEMORY[0x1E0C84428](*(_QWORD *)&token, state64);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

void os_release(void *object)
{
  MEMORY[0x1E0C84910](object);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1E0C84C20](*(_QWORD *)&pid, buffer, *(_QWORD *)&buffersize);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1E0C84D50](a1, a2, a3, a4);
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x1E0C84DD8](a1, a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x1E0C84E68](a1, a2);
}

void pthread_yield_np(void)
{
  MEMORY[0x1E0C84F40]();
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  MEMORY[0x1E0C84F88](__base, __nel, __width, __compar);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1E0C85000](*(_QWORD *)&a1, a2, a3);
}

int setlinebuf(FILE *a1)
{
  return MEMORY[0x1E0C85350](a1);
}

int setsockopt(int a1, int a2, int a3, const void *a4, socklen_t a5)
{
  return MEMORY[0x1E0C85388](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3, a4, *(_QWORD *)&a5);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return MEMORY[0x1E0C85450](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x1E0C85500](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1E0C85540](__s1);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85568](__dst, __source, __size);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85570](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

uint64_t strncmpx()
{
  return MEMORY[0x1E0D1B998]();
}

char *__cdecl strndup(const char *__s1, size_t __n)
{
  return (char *)MEMORY[0x1E0C855B8](__s1, __n);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85698](__str, __endptr, *(_QWORD *)&__base);
}

uint64_t sysconf(int a1)
{
  return MEMORY[0x1E0C85790](*(_QWORD *)&a1);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1E0C857A0](a1, a2, a3, a4, a5);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1E0C859E0](*(_QWORD *)&a1);
}

void xpc_connection_cancel(xpc_connection_t connection)
{
  MEMORY[0x1E0C85F68](connection);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1E0C85FB0](name, targetq, flags);
}

pid_t xpc_connection_get_pid(xpc_connection_t connection)
{
  return MEMORY[0x1E0C86008](connection);
}

uint64_t xpc_connection_has_entitlement()
{
  return MEMORY[0x1E0D1B9B8]();
}

void xpc_connection_resume(xpc_connection_t connection)
{
  MEMORY[0x1E0C86018](connection);
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
  MEMORY[0x1E0C86030](connection, message);
}

xpc_object_t xpc_connection_send_message_with_reply_sync(xpc_connection_t connection, xpc_object_t message)
{
  return (xpc_object_t)MEMORY[0x1E0C86048](connection, message);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
  MEMORY[0x1E0C86080](connection, handler);
}

void xpc_connection_set_target_queue(xpc_connection_t connection, dispatch_queue_t targetq)
{
  MEMORY[0x1E0C860C8](connection, targetq);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C86208](keys, values, count);
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return (xpc_object_t)MEMORY[0x1E0C86228](original);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C862A0](xdict, key);
}

xpc_connection_t xpc_dictionary_get_remote_connection(xpc_object_t xdict)
{
  return (xpc_connection_t)MEMORY[0x1E0C862B0](xdict);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1E0C862C8](xdict, key);
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
  MEMORY[0x1E0C86360](xdict, key, value);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1E0C86520](object);
}

void xpc_release(xpc_object_t object)
{
  MEMORY[0x1E0C86658](object);
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x1E0C86660](object);
}

xpc_object_t xpc_shmem_create(void *region, size_t length)
{
  return (xpc_object_t)MEMORY[0x1E0C866F0](region, length);
}

size_t xpc_shmem_map(xpc_object_t xshmem, void **region)
{
  return MEMORY[0x1E0C86700](xshmem, region);
}

