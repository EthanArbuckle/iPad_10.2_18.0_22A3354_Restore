uint64_t sub_235846234(const __CFURL *a1)
{
  std::__shared_weak_count_vtbl *String;
  std::__shared_weak_count *v3;
  CFStringRef v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  const __CFAllocator *v8;
  std::__shared_weak_count_vtbl *ArrayBySeparatingStrings;
  const __CFString *ValueAtIndex;
  std::__shared_weak_count_vtbl *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  const __CFString *v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count_vtbl *v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  CFIndex v36;
  char *v37;
  uint64_t v38;
  char v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  size_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char v48;
  unint64_t v49;
  char *v50;
  __int128 *v51;
  unint64_t v52;
  __int128 v53;
  char *v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t *p_info;
  unint64_t v60;
  char *v61;
  char *v62;
  char __str[16];
  CFStringRef v64[2];
  CFStringRef theString1;
  std::__shared_weak_count *v66;
  CFArrayRef theArray;
  std::__shared_weak_count *v68;
  CFStringRef theString;
  std::__shared_weak_count *v70;

  if (!sub_2358468E8(a1, "https://appclip.apple.com/rx"))
  {
    if (sub_2358468E8(a1, "https://appclip.apple.com/pair"))
      return 2;
    else
      return 0;
  }
  v61 = 0;
  v62 = 0;
  if (!a1)
    return 1;
  String = (std::__shared_weak_count_vtbl *)CFURLCopyQueryString(a1, 0);
  sub_235847990((std::__shared_weak_count_vtbl **)&theString, String, 0);
  v4 = theString;
  v3 = v70;
  if (!v70)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v70->__shared_owners_;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (!v4)
      goto LABEL_25;
  }
  else
  {
LABEL_8:
    if (!v4)
      goto LABEL_25;
  }
  v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  ArrayBySeparatingStrings = (std::__shared_weak_count_vtbl *)CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x24BDBD240], theString, CFSTR("="));
  sub_235847B10((std::__shared_weak_count_vtbl **)&theArray, ArrayBySeparatingStrings, 0);
  if (CFArrayGetCount(theArray) < 2)
    goto LABEL_16;
  ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, 0);
  v11 = (std::__shared_weak_count_vtbl *)CFURLCreateStringByReplacingPercentEscapes(v8, ValueAtIndex, 0);
  sub_235847990((std::__shared_weak_count_vtbl **)&theString1, v11, 0);
  if (CFStringCompare(theString1, CFSTR("p"), 0))
    goto LABEL_11;
  v24 = (const __CFString *)CFArrayGetValueAtIndex(theArray, 1);
  v25 = (std::__shared_weak_count_vtbl *)CFURLCreateStringByReplacingPercentEscapes(v8, v24, 0);
  sub_235847990((std::__shared_weak_count_vtbl **)v64, v25, 0);
  if ((CFStringGetLength(v64[0]) & 1) != 0)
  {
    v26 = (std::__shared_weak_count_vtbl *)CFStringCreateWithFormat(v8, 0, CFSTR("0%@"), v64[0]);
    sub_235847990((std::__shared_weak_count_vtbl **)__str, v26, 0);
    v27 = *(_OWORD *)__str;
    memset(__str, 0, sizeof(__str));
    v28 = (std::__shared_weak_count *)v64[1];
    *(_OWORD *)v64 = v27;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = *(std::__shared_weak_count **)&__str[8];
    if (*(_QWORD *)&__str[8])
    {
      v32 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
  v34 = 0;
  v35 = 0;
  v36 = 1;
  v37 = 0;
  while (v36 < CFStringGetLength(v64[0]))
  {
    __str[2] = 0;
    __str[0] = CFStringGetCharacterAtIndex(v64[0], v36 - 1);
    __str[1] = CFStringGetCharacterAtIndex(v64[0], v36);
    v39 = strtol(__str, 0, 16);
    v40 = v39;
    if (v34 < v35)
    {
      *v34 = v39;
      v38 = (uint64_t)(v34 + 1);
      goto LABEL_48;
    }
    v41 = v34 - v37;
    v42 = v34 - v37 + 1;
    if (v42 < 0)
      sub_235847D5C();
    if (2 * (v35 - v37) > (unint64_t)v42)
      v42 = 2 * (v35 - v37);
    if ((unint64_t)(v35 - v37) >= 0x3FFFFFFFFFFFFFFFLL)
      v43 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v43 = v42;
    if (v43)
    {
      v44 = (char *)operator new(v43);
      v45 = &v44[v41];
      v44[v41] = v40;
      v38 = (uint64_t)&v44[v41 + 1];
      if (v34 != v37)
        goto LABEL_59;
    }
    else
    {
      v44 = 0;
      v45 = (char *)(v34 - v37);
      *(_BYTE *)v41 = v40;
      v38 = v41 + 1;
      if (v34 != v37)
      {
LABEL_59:
        if (v41 < 8 || v44 > &v44[v34 - v37 - 1] || v37 > v34 - 1 || (unint64_t)(v37 - v44) < 0x20)
        {
          v46 = v34;
        }
        else if (v41 >= 0x20)
        {
          v49 = v41 & 0xFFFFFFFFFFFFFFE0;
          v50 = &v44[v41 - 16];
          v51 = (__int128 *)(v34 - 16);
          v52 = v41 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v53 = *v51;
            *((_OWORD *)v50 - 1) = *(v51 - 1);
            *(_OWORD *)v50 = v53;
            v50 -= 32;
            v51 -= 2;
            v52 -= 32;
          }
          while (v52);
          if (v41 == v49)
            goto LABEL_63;
          if ((v41 & 0x18) != 0)
            goto LABEL_78;
          v45 -= v49;
          v46 = &v34[-v49];
        }
        else
        {
          v49 = 0;
LABEL_78:
          v46 = &v34[-(v41 & 0xFFFFFFFFFFFFFFF8)];
          v45 -= v41 & 0xFFFFFFFFFFFFFFF8;
          v54 = &v44[&v34[-v49] - v37 - 8];
          v55 = (uint64_t *)&v34[-v49 - 8];
          v56 = v49 - (v41 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v57 = *v55--;
            *(_QWORD *)v54 = v57;
            v54 -= 8;
            v56 += 8;
          }
          while (v56);
          if (v41 == (v41 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_63:
            v45 = v44;
            v35 = &v44[v43];
            if (!v37)
              goto LABEL_68;
LABEL_67:
            operator delete(v37);
            goto LABEL_68;
          }
        }
        v47 = v45 - 1;
        do
        {
          v48 = *--v46;
          *v47-- = v48;
        }
        while (v46 != v37);
        goto LABEL_63;
      }
    }
    v35 = &v44[v43];
    if (v37)
      goto LABEL_67;
LABEL_68:
    v37 = v45;
LABEL_48:
    v36 += 2;
    v34 = (char *)v38;
  }
  v62 = v34;
  v61 = v37;
  v58 = (std::__shared_weak_count *)v64[1];
  if (v64[1])
  {
    p_info = &v64[1]->info;
    do
      v60 = __ldaxr((unint64_t *)p_info);
    while (__stlxr(v60 - 1, (unint64_t *)p_info));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
LABEL_11:
  v12 = v66;
  if (v66)
  {
    v13 = (unint64_t *)&v66->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_16:
  v15 = v68;
  if (v68)
  {
    v16 = (unint64_t *)&v68->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
LABEL_25:
  v19 = v70;
  if (!v70)
    goto LABEL_29;
  v20 = (unint64_t *)&v70->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    v22 = v61;
    v23 = v62 - v61;
    if (!v61)
      goto LABEL_33;
LABEL_30:
    operator delete(v22);
    if (v23 > 0x10)
      return 3;
    return 1;
  }
  else
  {
LABEL_29:
    v22 = v61;
    v23 = v62 - v61;
    if (v61)
      goto LABEL_30;
LABEL_33:
    if (v23 < 0x11)
      return 1;
    return 3;
  }
}

void sub_2358467AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22)
{
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;

  if (a16)
  {
    p_shared_owners = (unint64_t *)&a16->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
    }
  }
  if (a18)
  {
    v25 = (unint64_t *)&a18->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  if (a20)
  {
    v27 = (unint64_t *)&a20->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))a20->__on_zero_shared)(a20);
      std::__shared_weak_count::__release_weak(a20);
    }
  }
  if (a22)
  {
    v29 = (unint64_t *)&a22->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))a22->__on_zero_shared)(a22);
      std::__shared_weak_count::__release_weak(a22);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2358468E8(const __CFURL *a1, const char *a2)
{
  CFStringRef v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *size;
  unint64_t *v7;
  unint64_t v8;
  std::string *v9;
  std::string::size_type v10;
  size_t v11;
  unsigned __int8 *v12;
  std::string *v13;
  std::string *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::string v25;
  char v26;
  __int128 v27;

  v3 = CFURLGetString(a1);
  sub_235847DE4(&v25, v3);
  v27 = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
  if (v25.__r_.__value_.__l.__size_)
  {
    v4 = (unint64_t *)(v25.__r_.__value_.__l.__size_ + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    size = (std::__shared_weak_count *)v25.__r_.__value_.__l.__size_;
    if (v25.__r_.__value_.__l.__size_)
    {
      v7 = (unint64_t *)(v25.__r_.__value_.__l.__size_ + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  sub_235878BFC(v27, &v25);
  if (v26)
  {
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v25;
    else
      v9 = (std::string *)v25.__r_.__value_.__r.__words[0];
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    else
      v10 = v25.__r_.__value_.__l.__size_;
    v11 = strlen(a2);
    v12 = (unsigned __int8 *)v9 + v10;
    if (v11)
    {
      if (!v10)
      {
        v18 = 0;
        if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_41;
        goto LABEL_40;
      }
      v13 = v9;
      v14 = (std::string *)((char *)v9 + v10);
      do
      {
        if (v13->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)a2)
        {
          v15 = 1;
          while (v11 != v15)
          {
            if ((unsigned __int8 *)((char *)v13 + v15) == v12)
              goto LABEL_30;
            v16 = v13->__r_.__value_.__s.__data_[v15];
            v17 = a2[v15++];
            if (v16 != v17)
              goto LABEL_20;
          }
          v14 = v13;
        }
LABEL_20:
        v13 = (std::string *)((char *)v13 + 1);
      }
      while (v13 != (std::string *)v12);
    }
    else
    {
      v14 = (std::string *)((char *)v9 + v10);
    }
LABEL_30:
    if (v11)
      v19 = v14 == (std::string *)v12;
    else
      v19 = 0;
    v18 = !v19 && v14 == v9;
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_41;
LABEL_40:
    operator delete(v25.__r_.__value_.__l.__data_);
    goto LABEL_41;
  }
  v18 = 0;
LABEL_41:
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  return v18;
}

void sub_235846AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_235847A98((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_235846ABC(const __CFURL *a1@<X0>, unsigned int a2@<W1>, CFTypeRef *a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  const void *v9;
  const void *v10;
  size_t v11;
  char *v12;
  char *v13;
  const void *v14;
  const void *v15;
  size_t v16;
  char *v17;
  char *v18;
  const std::error_category *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count_vtbl *String;
  std::__shared_weak_count *v24;
  CFStringRef v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  int64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  const std::error_category *v35;
  unint64_t *v36;
  const std::error_category *v37;
  std::__shared_weak_count *cat;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void *v44;
  const std::error_category *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  CFStringRef theString;
  std::__shared_weak_count *v50;
  void *__p[5];
  void *v52;
  __int128 v53;
  const void *v54[2];
  char v55;
  char v56;
  const void *v57;
  std::__shared_weak_count *v58;
  std::error_condition v59;

  v8 = 2;
  if ((sub_2358468E8(a1, "https://appclip.apple.com/rx") & 1) == 0)
  {
    if (sub_2358468E8(a1, "https://appclip.apple.com/pair"))
      v8 = 2;
    else
      v8 = 0;
  }
  if (a2 - 1 < 2)
  {
    sub_235847520((uint64_t)v54, (uint64_t)a1, a2, a3);
    if (!v56
      || (v14 = v54[0],
          v15 = v54[1],
          v16 = (char *)v54[1] - (char *)v54[0],
          !sub_23584A940(v54[0], (char *)v54[1] - (char *)v54[0], a2)))
    {
      HIBYTE(__p[2]) = 11;
      strcpy((char *)__p, "Invalid URL");
      v52 = operator new(0x60uLL);
      v53 = xmmword_23587F980;
      strcpy((char *)v52, "/Library/Caches/com.apple.xbs/Sources/ACCBaker/product/AppCode/ACCBaker/src/ACCBakerUtil.mm");
      if (!a3)
        goto LABEL_77;
      v19 = std::generic_category();
      *(_QWORD *)&v59.__val_ = 22;
      v59.__cat_ = v19;
      sub_23587A32C(&v59, (uint64_t)__p, (CFErrorRef *)&v57);
      sub_23587A2E4(&v57, a3);
      v20 = v58;
      if (!v58)
        goto LABEL_56;
      p_shared_owners = (unint64_t *)&v58->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
LABEL_55:
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
        if ((SHIBYTE(v53) & 0x80000000) == 0)
        {
LABEL_57:
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
            goto LABEL_58;
          goto LABEL_78;
        }
LABEL_77:
        operator delete(v52);
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        {
LABEL_58:
          *(_BYTE *)a4 = 0;
          *(_BYTE *)(a4 + 32) = 0;
          if (!v56)
            return;
          goto LABEL_79;
        }
LABEL_78:
        operator delete(__p[0]);
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 32) = 0;
        if (!v56)
          return;
LABEL_79:
        v44 = (void *)v54[0];
        if (!v54[0])
          return;
        goto LABEL_80;
      }
LABEL_56:
      if ((SHIBYTE(v53) & 0x80000000) == 0)
        goto LABEL_57;
      goto LABEL_77;
    }
    memset(__p, 0, 24);
    if (v15 == v14)
    {
      v18 = 0;
      v17 = 0;
    }
    else
    {
      if ((v16 & 0x8000000000000000) != 0)
        sub_235847D5C();
      v17 = (char *)operator new(v16);
      v18 = &v17[v16];
      memcpy(v17, v14, v16);
    }
    *(_QWORD *)a4 = v17;
    *(_QWORD *)(a4 + 8) = v18;
    *(_QWORD *)(a4 + 16) = v18;
    *(_DWORD *)(a4 + 24) = v8;
    *(_BYTE *)(a4 + 32) = 1;
    v44 = (void *)v54[0];
    if (v54[0])
      goto LABEL_80;
  }
  else if (a2 == 3)
  {
    String = (std::__shared_weak_count_vtbl *)CFURLCopyQueryString(a1, 0);
    sub_235847990((std::__shared_weak_count_vtbl **)&theString, String, 0);
    v25 = theString;
    v24 = v50;
    if (v50)
    {
      v26 = (unint64_t *)&v50->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
      do
        v28 = __ldaxr(v26);
      while (__stlxr(v28 - 1, v26));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v25 && CFStringGetLength(theString) == 40)
    {
      sub_235847520((uint64_t)v54, (uint64_t)a1, 3u, a3);
      if (v56
        && (v29 = v54[0],
            v30 = v54[1],
            v31 = (char *)v54[1] - (char *)v54[0],
            sub_23584A940(v54[0], (char *)v54[1] - (char *)v54[0], 3)))
      {
        if (v31 == 21 && !*v29 && !v29[1])
        {
          if (v30 != v29 + 2)
            memmove(v29, v29 + 2, v30 - (v29 + 2));
          v54[1] = v30 - 2;
        }
        sub_235847904(__p, (uint64_t)v54);
        *(_OWORD *)a4 = *(_OWORD *)__p;
        *(void **)(a4 + 16) = __p[2];
        *(_DWORD *)(a4 + 24) = v8;
        *(_BYTE *)(a4 + 32) = 1;
      }
      else
      {
        HIBYTE(__p[2]) = 11;
        strcpy((char *)__p, "Invalid URL");
        v52 = operator new(0x60uLL);
        v53 = xmmword_23587F980;
        strcpy((char *)v52, "/Library/Caches/com.apple.xbs/Sources/ACCBaker/product/AppCode/ACCBaker/src/ACCBakerUtil.mm");
        if (!a3)
          goto LABEL_92;
        v45 = std::generic_category();
        *(_QWORD *)&v59.__val_ = 22;
        v59.__cat_ = v45;
        sub_23587A32C(&v59, (uint64_t)__p, (CFErrorRef *)&v57);
        sub_23587A2E4(&v57, a3);
        v46 = v58;
        if (v58)
        {
          v47 = (unint64_t *)&v58->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        if (SHIBYTE(v53) < 0)
LABEL_92:
          operator delete(v52);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 32) = 0;
      }
      if (v56 && v54[0])
      {
        v54[1] = v54[0];
        operator delete((void *)v54[0]);
      }
    }
    else
    {
      v55 = 11;
      strcpy((char *)v54, "Invalid URL");
      __p[0] = operator new(0x60uLL);
      *(_OWORD *)&__p[1] = xmmword_23587F980;
      strcpy((char *)__p[0], "/Library/Caches/com.apple.xbs/Sources/ACCBaker/product/AppCode/ACCBaker/src/ACCBakerUtil.mm");
      if (!a3)
        goto LABEL_67;
      v37 = std::generic_category();
      v52 = (void *)22;
      *(_QWORD *)&v53 = v37;
      sub_23587A32C((const std::error_condition *)&v52, (uint64_t)v54, (CFErrorRef *)&v59);
      sub_23587A2E4((const void **)&v59, a3);
      cat = (std::__shared_weak_count *)v59.__cat_;
      if (v59.__cat_)
      {
        v39 = (unint64_t *)&v59.__cat_[1];
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
          std::__shared_weak_count::__release_weak(cat);
        }
      }
      if (SHIBYTE(__p[2]) < 0)
LABEL_67:
        operator delete(__p[0]);
      if (v55 < 0)
        operator delete((void *)v54[0]);
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 32) = 0;
    }
    v41 = v50;
    if (v50)
    {
      v42 = (unint64_t *)&v50->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
  else
  {
    if (!a2)
    {
      sub_235847520((uint64_t)v54, (uint64_t)a1, 0, a3);
      if (v56)
      {
        v9 = v54[0];
        v10 = v54[1];
        v11 = (char *)v54[1] - (char *)v54[0];
        if (sub_23584A940(v54[0], (char *)v54[1] - (char *)v54[0], 0))
        {
          memset(__p, 0, 24);
          if (v10 == v9)
          {
            v13 = 0;
            v12 = 0;
          }
          else
          {
            if ((v11 & 0x8000000000000000) != 0)
              sub_235847D5C();
            v12 = (char *)operator new(v11);
            v13 = &v12[v11];
            memcpy(v12, v9, v11);
          }
          *(_QWORD *)a4 = v12;
          *(_QWORD *)(a4 + 8) = v13;
          *(_QWORD *)(a4 + 16) = v13;
          *(_DWORD *)(a4 + 24) = v8;
          *(_BYTE *)(a4 + 32) = 1;
          v44 = (void *)v54[0];
          if (!v54[0])
            return;
LABEL_80:
          operator delete(v44);
          return;
        }
      }
      HIBYTE(__p[2]) = 11;
      strcpy((char *)__p, "Invalid URL");
      v52 = operator new(0x60uLL);
      v53 = xmmword_23587F980;
      strcpy((char *)v52, "/Library/Caches/com.apple.xbs/Sources/ACCBaker/product/AppCode/ACCBaker/src/ACCBakerUtil.mm");
      if (!a3)
        goto LABEL_77;
      v35 = std::generic_category();
      *(_QWORD *)&v59.__val_ = 22;
      v59.__cat_ = v35;
      sub_23587A32C(&v59, (uint64_t)__p, (CFErrorRef *)&v57);
      sub_23587A2E4(&v57, a3);
      v20 = v58;
      if (!v58)
        goto LABEL_56;
      v36 = (unint64_t *)&v58->__shared_owners_;
      do
        v22 = __ldaxr(v36);
      while (__stlxr(v22 - 1, v36));
      goto LABEL_55;
    }
    v55 = 13;
    strcpy((char *)v54, "Not supported");
    __p[0] = operator new(0x60uLL);
    *(_OWORD *)&__p[1] = xmmword_23587F980;
    strcpy((char *)__p[0], "/Library/Caches/com.apple.xbs/Sources/ACCBaker/product/AppCode/ACCBaker/src/ACCBakerUtil.mm");
    if (!a3)
      goto LABEL_47;
    v52 = (void *)45;
    *(_QWORD *)&v53 = std::generic_category();
    sub_23587A32C((const std::error_condition *)&v52, (uint64_t)v54, (CFErrorRef *)&v59);
    sub_23587A2E4((const void **)&v59, a3);
    v32 = (std::__shared_weak_count *)v59.__cat_;
    if (v59.__cat_)
    {
      v33 = (unint64_t *)&v59.__cat_[1];
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    if (SHIBYTE(__p[2]) < 0)
LABEL_47:
      operator delete(__p[0]);
    if (v55 < 0)
      operator delete((void *)v54[0]);
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 32) = 0;
  }
}

void sub_2358472EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a31)
  {
    if (__p)
    {
      a26 = (uint64_t)__p;
      operator delete(__p);
      sub_235847A98((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_235847A98((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23584746C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if ((a16 & 0x80000000) == 0)
    JUMPOUT(0x235847478);
  JUMPOUT(0x2358473F4);
}

void sub_235847498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25)
{
  int v25;
  uint64_t v26;

  sub_235847A98(v26 - 96);
  if (a24 < 0)
  {
    operator delete(__p);
    if (a16 < 0)
    {
LABEL_5:
      operator delete(a11);
      if (!v25)
        goto LABEL_10;
LABEL_8:
      if (a25)
        operator delete(a25);
LABEL_10:
      _Unwind_Resume(a1);
    }
  }
  else if (a16 < 0)
  {
    goto LABEL_5;
  }
  if (!v25)
    goto LABEL_10;
  goto LABEL_8;
}

void sub_2358474F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  if (a19)
    operator delete(a19);
  _Unwind_Resume(a1);
}

void sub_2358474FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if ((a16 & 0x80000000) == 0)
    JUMPOUT(0x235847508);
  JUMPOUT(0x2358474D0);
}

void sub_235847520(uint64_t a1, uint64_t a2, unsigned int a3, CFTypeRef *a4)
{
  void *v7;
  void *v8;
  id v9;
  const std::error_category *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  id v17;
  const void *v18;
  size_t v19;
  size_t v20;
  char *v21;
  char *v22;
  id v23;
  void *__p;
  __int128 v25;
  void *v26[4];
  const void *v27;
  std::__shared_weak_count *v28;
  std::error_condition v29;

  if (a3 < 4)
  {
    objc_msgSend(MEMORY[0x24BEBECD0], "encoderWithVersion:", a3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = 0;
    objc_msgSend(v7, "encodeURL:error:", a2, &v23);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v23;
    if (v8 && (unint64_t)objc_msgSend(v8, "length") > 1)
    {
      v17 = objc_retainAutorelease(v8);
      v18 = (const void *)objc_msgSend(v17, "bytes");
      v19 = objc_msgSend(v17, "length");
      v20 = v19;
      memset(v26, 0, 24);
      if (v19)
      {
        if ((v19 & 0x8000000000000000) != 0)
          sub_235847D5C();
        v21 = (char *)operator new(v19);
        v22 = &v21[v20];
        memcpy(v21, v18, v20);
      }
      else
      {
        v22 = 0;
        v21 = 0;
      }
      *(_QWORD *)a1 = v21;
      *(_QWORD *)(a1 + 8) = v22;
      *(_QWORD *)(a1 + 16) = v22;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      strcpy((char *)v26, "URL compression failed");
      HIBYTE(v26[2]) = 22;
      __p = operator new(0x60uLL);
      v25 = xmmword_23587F980;
      strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/ACCBaker/product/AppCode/ACCBaker/src/ACCBakerUtil.mm");
      if (!a4)
        goto LABEL_11;
      v10 = std::generic_category();
      *(_QWORD *)&v29.__val_ = 22;
      v29.__cat_ = v10;
      sub_23587A32C(&v29, (uint64_t)v26, (CFErrorRef *)&v27);
      sub_23587A2E4(&v27, a4);
      v11 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (SHIBYTE(v25) < 0)
LABEL_11:
        operator delete(__p);
      if (SHIBYTE(v26[2]) < 0)
        operator delete(v26[0]);
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 24) = 0;
    }

    return;
  }
  HIBYTE(v26[2]) = 15;
  strcpy((char *)v26, "Invalid version");
  __p = operator new(0x60uLL);
  v25 = xmmword_23587F980;
  strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/ACCBaker/product/AppCode/ACCBaker/src/ACCBakerUtil.mm");
  if (!a4)
    goto LABEL_21;
  *(_QWORD *)&v29.__val_ = 22;
  v29.__cat_ = std::generic_category();
  sub_23587A32C(&v29, (uint64_t)v26, (CFErrorRef *)&v27);
  sub_23587A2E4(&v27, a4);
  v14 = v28;
  if (v28)
  {
    v15 = (unint64_t *)&v28->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      if ((SHIBYTE(v25) & 0x80000000) == 0)
        goto LABEL_22;
      goto LABEL_21;
    }
  }
  if (SHIBYTE(v25) < 0)
LABEL_21:
    operator delete(__p);
LABEL_22:
  if (SHIBYTE(v26[2]) < 0)
    operator delete(v26[0]);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
}

void sub_235847844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

_QWORD *sub_235847904(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  size_t v5;
  char *v6;
  char *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    if ((v5 & 0x8000000000000000) != 0)
      sub_235847D5C();
    v6 = (char *)operator new(v3 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    v7 = &v6[v5];
    a1[2] = &v6[v5];
    memcpy(v6, v4, v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_235847974(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::__shared_weak_count_vtbl **sub_235847990(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_235847DE4(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_2506DF190;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_235847A6C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_235847A84(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_235847A98(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_235847B00(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

std::__shared_weak_count_vtbl **sub_235847B10(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_235847C18(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_2506DF140;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_235847BEC(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_235847C04(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_235847C18(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    j__CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_2506DF140;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_235847C78(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_235847C90(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_235847CA8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B7D94C4);
}

void sub_235847CCC(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    j__CFRelease(v1);
}

uint64_t sub_235847CEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_235847D5C()
{
  sub_235847D70("vector");
}

void sub_235847D70(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_235847DC0(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2506DEF08, MEMORY[0x24BEDAAF0]);
}

void sub_235847DAC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_235847DC0(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

_QWORD *sub_235847DE4(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    j__CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_2506DF190;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_235847E44(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_235847E5C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_235847E74(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B7D94C4);
}

void sub_235847E98(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    j__CFRelease(v1);
}

uint64_t sub_235847EB8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_235847F2C(uint64_t a1, int a2, int a3, int a4)
{
  int **v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  int v22;
  int v23;

  *(_OWORD *)(a1 + 8) = 0u;
  v7 = (int **)(a1 + 8);
  *(_DWORD *)a1 = a3;
  *(_DWORD *)(a1 + 4) = a4;
  *(_OWORD *)(a1 + 24) = 0u;
  v8 = (uint64_t *)(a1 + 32);
  v9 = a3;
  *(_OWORD *)(a1 + 40) = 0u;
  v23 = 0;
  if (a3)
  {
    sub_235848090(a1 + 8, a3, (const float *)&v23);
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    v22 = 0;
    v12 = (v11 - v10) >> 2;
    v13 = v9 >= v12;
    if (v9 > v12)
    {
      sub_235848090((uint64_t)v8, v9 - v12, (const float *)&v22);
      goto LABEL_7;
    }
  }
  else
  {
    v10 = 0;
    v22 = 0;
    v13 = 1;
  }
  if (!v13)
    *(_QWORD *)(a1 + 40) = v10 + 4 * v9;
LABEL_7:
  v14 = (a3 - 1);
  if (a3 >= 1)
  {
    v15 = *v7;
    v16 = a3;
    v17 = 1;
    do
    {
      *v15++ = v17;
      v17 *= 2;
      if (v17 >= a3)
        v17 = (v17 ^ a2) & v14;
      --v16;
    }
    while (v16);
    if (a3 >= 2)
    {
      v18 = 0;
      v19 = *v7;
      v20 = *v8;
      do
      {
        *(_DWORD *)(v20 + 4 * v19[v18]) = v18;
        ++v18;
      }
      while (v14 != v18);
    }
  }
  return a1;
}

void sub_235848050(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 40) = v5;
    operator delete(v5);
    v6 = *v2;
    if (!*v2)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v6 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 16) = v6;
  operator delete(v6);
  _Unwind_Resume(exception_object);
}

void sub_235848090(uint64_t a1, unint64_t a2, const float *a3)
{
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  float32x4_t v26;
  float32x4_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  int v36;

  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = (_DWORD *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 2)
  {
    if (a2)
    {
      v16 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 4 * a2 > (unint64_t)a3)
        goto LABEL_43;
      v17 = v16 + 1;
      v8 = (_DWORD *)(v7 + 4 * (v17 & 0x7FFFFFFFFFFFFFF8));
      v18 = vld1q_dup_f32(a3);
      v19 = (float32x4_t *)(v7 + 16);
      v20 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v19[-1] = v18;
        *v19 = v18;
        v19 += 2;
        v20 -= 8;
      }
      while (v20);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_43:
        do
          *v8++ = *(_DWORD *)a3;
        while (v8 != (_DWORD *)(v7 + 4 * a2));
      }
      v8 = (_DWORD *)(v7 + 4 * a2);
    }
    *(_QWORD *)(a1 + 8) = v8;
  }
  else
  {
    v9 = *(_DWORD **)a1;
    v10 = v7 - *(_QWORD *)a1;
    v11 = v10 >> 2;
    v12 = (v10 >> 2) + a2;
    if (v12 >> 62)
      sub_235847D5C();
    v13 = v6 - (_QWORD)v9;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        sub_2358482F0();
      v15 = (char *)operator new(4 * v14);
    }
    else
    {
      v15 = 0;
    }
    v21 = (unint64_t)&v15[4 * v11];
    v22 = (char *)(v21 + 4 * a2);
    v23 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v24 = (char *)v21;
    if (v23 < 0x13)
      goto LABEL_44;
    if (v21 < (unint64_t)(a3 + 1))
    {
      v24 = &v15[4 * v11];
      if (&v15[4 * a2 + v10] > (char *)a3)
        goto LABEL_44;
    }
    v25 = v23 + 1;
    v24 = (char *)(v21 + 4 * (v25 & 0x7FFFFFFFFFFFFFF8));
    v26 = vld1q_dup_f32(a3);
    v27 = (float32x4_t *)&v15[4 * v11 + 16];
    v28 = v25 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_44:
      do
      {
        *(float *)v24 = *a3;
        v24 += 4;
      }
      while (v24 != v22);
    }
    if ((_DWORD *)v7 != v9)
    {
      v29 = v7 - (_QWORD)v9 - 4;
      if (v29 < 0x2C)
        goto LABEL_45;
      if (v7 - (unint64_t)&v15[v10] < 0x20)
        goto LABEL_45;
      v30 = (v29 >> 2) + 1;
      v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
      v8 = (_DWORD *)(v7 - v31);
      v21 -= v31;
      v32 = &v15[4 * v11 - 16];
      v33 = (__int128 *)(v7 - 16);
      v34 = v30 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 8;
      }
      while (v34);
      if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_45:
        do
        {
          v36 = *--v8;
          *(_DWORD *)(v21 - 4) = v36;
          v21 -= 4;
        }
        while (v8 != v9);
      }
    }
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v22;
    *(_QWORD *)(a1 + 16) = &v15[4 * v14];
    if (v9)
      operator delete(v9);
  }
}

void sub_2358482F0()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

void sub_235848318(char **a1)
{
  void **v1;
  char *v2;
  char *v3;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  unint64_t v18;
  int v19;

  v2 = a1[1];
  v3 = a1[2];
  v1 = (void **)(a1 + 1);
  if (v2 != v3)
  {
    v5 = a1[2];
    v6 = a1[1];
    while (!*(_DWORD *)v6)
    {
      v6 += 4;
      if (v6 == v3)
      {
        v6 = a1[2];
        break;
      }
    }
    if (v6 != v2)
    {
      if (v6 != v3)
      {
        memmove(a1[1], v6, v3 - v6);
        sub_2358487F4(v1, (a1[2] - v6) >> 2);
        return;
      }
      v19 = 0;
      if (a1[3] != v2)
      {
        v7 = v3;
        v8 = v2;
LABEL_20:
        v18 = v7 - v8;
        if (v18)
        {
          if (v18 >= 5)
            a1[2] = v8 + 4;
        }
        else
        {
          sub_235848090((uint64_t)v1, 1uLL, (const float *)&v19);
        }
        return;
      }
      v9 = v3 - v2;
      v10 = (char *)operator new(0x80uLL);
      v7 = &v10[(v3 - v2) & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)(v3 - v2 - 4) >= 0x2C)
      {
        v8 = &v10[v9 & 0xFFFFFFFFFFFFFFFCLL];
        if ((unint64_t)(v3 - v8) >= 0x20)
        {
          v11 = ((unint64_t)(v9 - 4) >> 2) + 1;
          v12 = 4 * (v11 & 0x7FFFFFFFFFFFFFF8);
          v5 = &v3[-v12];
          v8 = &v7[-v12];
          v13 = &v10[4 * (v9 >> 2) - 16];
          v14 = v3 - 16;
          v15 = v11 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v16 = *(_OWORD *)v14;
            *((_OWORD *)v13 - 1) = *((_OWORD *)v14 - 1);
            *(_OWORD *)v13 = v16;
            v13 -= 32;
            v14 -= 32;
            v15 -= 8;
          }
          while (v15);
          if (v11 == (v11 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_18:
            a1[1] = v8;
            a1[2] = v7;
            a1[3] = v10 + 128;
            if (v2)
            {
              operator delete(v2);
              v8 = a1[1];
              v7 = a1[2];
            }
            goto LABEL_20;
          }
        }
      }
      else
      {
        v8 = &v10[v9 & 0xFFFFFFFFFFFFFFFCLL];
      }
      do
      {
        v17 = *((_DWORD *)v5 - 1);
        v5 -= 4;
        *((_DWORD *)v8 - 1) = v17;
        v8 -= 4;
      }
      while (v5 != v2);
      goto LABEL_18;
    }
  }
}

_QWORD *sub_2358484D8(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v25;

  v3 = *(_DWORD **)(a1 + 8);
  if (!*v3)
    return sub_235848674(*(_QWORD *)a1, (_QWORD *)a1);
  v5 = *(_DWORD **)(a2 + 8);
  if (!*v5)
    return sub_235848674(*(_QWORD *)a1, (_QWORD *)a1);
  sub_2358487F4((void **)(a1 + 32), ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v3) >> 2) + ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 2) - 1);
  v6 = *(_DWORD **)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  if (v7 - (uint64_t)v6 >= 1)
    bzero(*(void **)(a1 + 32), 4 * (((unint64_t)(v7 - (_QWORD)v6) >> 2) - ((unint64_t)(v7 - (_QWORD)v6) > 3)) + 4);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  if (v8 != v9)
  {
    v10 = *(char **)(a2 + 8);
    v11 = *(char **)(a2 + 16);
    v12 = v11 - v10;
    if (v11 != v10)
    {
      v13 = 0;
      v14 = v12 >> 2;
      if ((unint64_t)(v12 >> 2) <= 1)
        v14 = 1;
      if ((unint64_t)((v8 - v9) >> 2) <= 1)
        v15 = 1;
      else
        v15 = (v8 - v9) >> 2;
      v16 = v6;
      do
      {
        v17 = v16;
        v18 = (int *)v10;
        v19 = v14;
        do
        {
          while (1)
          {
            v20 = *(int *)(v9 + 4 * v13);
            v22 = *v18++;
            v21 = v22;
            if (!(_DWORD)v20 || v21 == 0)
              break;
            *v17++ ^= *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8)
                                + 4
                                * ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 4 * v21)
                                  + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 4 * v20))
                                 % (**(_DWORD **)a1 - 1)));
            if (!--v19)
              goto LABEL_13;
          }
          *v17 = *v17;
          ++v17;
          --v19;
        }
        while (v19);
LABEL_13:
        ++v13;
        ++v16;
      }
      while (v13 != v15);
    }
  }
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  v25 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v25;
  sub_235848318((char **)a1);
  return (_QWORD *)a1;
}

_QWORD *sub_235848674(uint64_t a1, _QWORD *a2)
{
  char **v3;
  char *v4;
  char *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  *a2 = a1;
  v3 = (char **)(a2 + 1);
  v4 = (char *)a2[1];
  v5 = (char *)a2[3];
  if (v5 != v4)
    goto LABEL_12;
  v6 = (_BYTE *)a2[2];
  v7 = (char *)operator new(0x80uLL);
  v8 = v6 - v5;
  v9 = &v7[(v6 - v5) & 0xFFFFFFFFFFFFFFFCLL];
  v4 = v9;
  if (v6 != v5)
  {
    if ((unint64_t)(v8 - 4) < 0x2C)
    {
      v4 = &v7[(v6 - v5) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_9:
        v18 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *((_DWORD *)v4 - 1) = v18;
        v4 -= 4;
      }
      while (v6 != v5);
      goto LABEL_10;
    }
    v4 = &v7[(v6 - v5) & 0xFFFFFFFFFFFFFFFCLL];
    if (v6 - v7 - (v8 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
      goto LABEL_9;
    v10 = v8 >> 2;
    v11 = ((unint64_t)(v8 - 4) >> 2) + 1;
    v12 = 4 * (v11 & 0x7FFFFFFFFFFFFFF8);
    v13 = &v6[-v12];
    v4 = &v9[-v12];
    v14 = &v7[4 * v10 - 16];
    v15 = (__int128 *)(v6 - 16);
    v16 = v11 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v17 = *v15;
      *((_OWORD *)v14 - 1) = *(v15 - 1);
      *(_OWORD *)v14 = v17;
      v14 -= 32;
      v15 -= 2;
      v16 -= 8;
    }
    while (v16);
    v6 = v13;
    if (v11 != (v11 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_9;
  }
LABEL_10:
  a2[1] = v4;
  a2[2] = v9;
  a2[3] = v7 + 128;
  if (v5)
  {
    operator delete(v5);
    v4 = *v3;
  }
LABEL_12:
  v19 = (char *)a2[2];
  v20 = v19 - v4;
  if (v19 == v4)
  {
    sub_2358492C8((uint64_t)v3, 1 - (v20 >> 2));
    v4 = (char *)a2[1];
    v21 = a2[2] - (_QWORD)v4;
    if (v21 < 1)
      goto LABEL_17;
    goto LABEL_16;
  }
  if ((unint64_t)v20 >= 5)
  {
    v19 = v4 + 4;
    a2[2] = v4 + 4;
  }
  v21 = v19 - v4;
  if (v21 >= 1)
LABEL_16:
    bzero(v4, 4 * (((unint64_t)v21 >> 2) - ((unint64_t)v21 > 3)) + 4);
LABEL_17:
  *(_DWORD *)v4 = 0;
  return a2;
}

void sub_2358487F4(void **a1, unint64_t a2)
{
  _BYTE *v4;
  unint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  unint64_t v21;

  v4 = *a1;
  if (a2 <= ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 2)
  {
    v11 = (char *)*a1;
    goto LABEL_16;
  }
  v5 = 32;
  if (a2 > 0x20)
    v5 = a2;
  if (v5 >> 62)
    sub_235847D5C();
  v6 = a1[1];
  v7 = 4 * v5;
  v8 = (char *)operator new(4 * v5);
  v9 = v6 - v4;
  v10 = &v8[(v6 - v4) & 0xFFFFFFFFFFFFFFFCLL];
  v11 = v10;
  if (v6 != v4)
  {
    if ((unint64_t)(v9 - 4) < 0x2C)
    {
      v11 = &v8[(v6 - v4) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_13:
        v20 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *((_DWORD *)v11 - 1) = v20;
        v11 -= 4;
      }
      while (v6 != v4);
      goto LABEL_14;
    }
    v11 = &v8[(v6 - v4) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(v6 - &v8[v9 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
      goto LABEL_13;
    v12 = v9 >> 2;
    v13 = ((unint64_t)(v9 - 4) >> 2) + 1;
    v14 = 4 * (v13 & 0x7FFFFFFFFFFFFFF8);
    v15 = &v6[-v14];
    v11 = &v10[-v14];
    v16 = &v8[4 * v12 - 16];
    v17 = (__int128 *)(v6 - 16);
    v18 = v13 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v19 = *v17;
      *((_OWORD *)v16 - 1) = *(v17 - 1);
      *(_OWORD *)v16 = v19;
      v16 -= 32;
      v17 -= 2;
      v18 -= 8;
    }
    while (v18);
    v6 = v15;
    if (v13 != (v13 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_13;
  }
LABEL_14:
  *a1 = v11;
  a1[1] = v10;
  a1[2] = &v8[v7];
  if (v4)
  {
    operator delete(v4);
    v11 = (char *)*a1;
  }
LABEL_16:
  v21 = ((_BYTE *)a1[1] - v11) >> 2;
  if (a2 <= v21)
  {
    if (a2 < v21)
      a1[1] = &v11[4 * a2];
  }
  else
  {
    sub_2358492C8((uint64_t)a1, a2 - v21);
  }
}

uint64_t *sub_235848960(uint64_t *a1, int a2, int a3)
{
  void **v4;
  int *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a3)
    return sub_235848674(*a1, a1);
  v5 = (int *)a1[1];
  v6 = a1[2];
  v4 = (void **)(a1 + 1);
  v8 = v6 - (_QWORD)v5;
  v7 = v8 == 0;
  v9 = v8 >> 2;
  if (!v7)
  {
    if (v9 <= 1)
      v10 = 1;
    else
      v10 = v9;
    do
    {
      v11 = *v5;
      if ((_DWORD)v11)
        LODWORD(v11) = *(_DWORD *)(*(_QWORD *)(*a1 + 8)
                                 + 4
                                 * ((*(_DWORD *)(*(_QWORD *)(*a1 + 32) + 4 * a3)
                                   + *(_DWORD *)(*(_QWORD *)(*a1 + 32) + 4 * v11))
                                  % (*(_DWORD *)*a1 - 1)));
      *v5++ = v11;
      --v10;
    }
    while (v10);
  }
  sub_235848A14(v4, v9 + a2, 0);
  sub_235848318((char **)a1);
  return a1;
}

void sub_235848A14(void **a1, unint64_t a2, int a3)
{
  _BYTE *v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  unint64_t v22;
  int v23;

  v23 = a3;
  v5 = *a1;
  if (a2 <= ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 2)
  {
    v12 = (char *)*a1;
    goto LABEL_16;
  }
  v6 = 32;
  if (a2 > 0x20)
    v6 = a2;
  if (v6 >> 62)
    sub_235847D5C();
  v7 = a1[1];
  v8 = 4 * v6;
  v9 = (char *)operator new(4 * v6);
  v10 = v7 - v5;
  v11 = &v9[(v7 - v5) & 0xFFFFFFFFFFFFFFFCLL];
  v12 = v11;
  if (v7 != v5)
  {
    if ((unint64_t)(v10 - 4) < 0x2C)
    {
      v12 = &v9[(v7 - v5) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_13:
        v21 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v12 - 1) = v21;
        v12 -= 4;
      }
      while (v7 != v5);
      goto LABEL_14;
    }
    v12 = &v9[(v7 - v5) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(v7 - &v9[v10 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
      goto LABEL_13;
    v13 = v10 >> 2;
    v14 = ((unint64_t)(v10 - 4) >> 2) + 1;
    v15 = 4 * (v14 & 0x7FFFFFFFFFFFFFF8);
    v16 = &v7[-v15];
    v12 = &v11[-v15];
    v17 = &v9[4 * v13 - 16];
    v18 = (__int128 *)(v7 - 16);
    v19 = v14 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v20 = *v18;
      *((_OWORD *)v17 - 1) = *(v18 - 1);
      *(_OWORD *)v17 = v20;
      v17 -= 32;
      v18 -= 2;
      v19 -= 8;
    }
    while (v19);
    v7 = v16;
    if (v14 != (v14 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_13;
  }
LABEL_14:
  *a1 = v12;
  a1[1] = v11;
  a1[2] = &v9[v8];
  if (v5)
  {
    operator delete(v5);
    v12 = (char *)*a1;
  }
LABEL_16:
  v22 = ((_BYTE *)a1[1] - v12) >> 2;
  if (a2 <= v22)
  {
    if (a2 < v22)
      a1[1] = &v12[4 * a2];
  }
  else
  {
    sub_235848090((uint64_t)a1, a2 - v22, (const float *)&v23);
  }
}

uint64_t *sub_235848B98(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int8x16_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  int8x16_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int32 v19;
  __int32 v20;
  int v21;
  int v22;
  int8x16_t *v23;
  uint64_t v24;
  uint64_t v25;
  int8x16_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x16_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  __int128 v36;
  int8x16_t *v37;
  int8x16_t *v38;
  unint64_t v39;
  int8x16_t v40;
  unint64_t v41;
  __int32 *v42;
  __int8 *v43;
  BOOL v44;
  int *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int8x16_t *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int8x16_t *v60;
  int8x16_t *v61;
  unint64_t v62;
  int8x16_t v63;
  unint64_t v64;
  char *v65;
  __int8 *v66;
  std::logic_error *exception;
  void *v69[2];
  __int128 v70;
  void *__p[2];
  uint64_t v72;

  if (!**(_DWORD **)(a2 + 8))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_23584910C(exception, "Divide by 0");
    goto LABEL_67;
  }
  sub_235848674(*a1, (_QWORD *)a3);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16) - v6;
  v8 = *(int *)(v6 + 4 * (((uint64_t)(-1073741824 * v7) >> 32) + (v7 >> 2)));
  if (!(_DWORD)v8)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_23584910C(exception, "a == 0");
LABEL_67:
    __cxa_throw(exception, (struct type_info *)off_2506DEF18, MEMORY[0x24BEDAB88]);
  }
  v9 = (int8x16_t *)a1[1];
  v10 = *(int *)(*(_QWORD *)(*a1 + 8) + 4 * (*(_DWORD *)*a1 + ~*(_DWORD *)(*(_QWORD *)(*a1 + 32) + 4 * v8)));
  v72 = 0;
  v70 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v69 = 0u;
  v11 = a1[2] - (_QWORD)v9;
  v12 = v11 >> 2;
  v13 = v7 >> 2;
  if ((int)(v11 >> 2) < (int)v13)
    goto LABEL_62;
  while (v9->i32[0])
  {
    v19 = 0;
    if ((_DWORD)v10)
    {
      v20 = v9->i32[((uint64_t)(-1073741824 * v11) >> 32) + (v11 >> 2)];
      if (v20)
        v19 = *(_DWORD *)(*(_QWORD *)(*a1 + 8)
                        + 4
                        * ((*(_DWORD *)(*(_QWORD *)(*a1 + 32) + 4 * v10) + *(_DWORD *)(*(_QWORD *)(*a1 + 32) + 4 * v20))
                         % (*(_DWORD *)*a1 - 1)));
    }
    v21 = v12 - v13;
    v69[0] = (void *)*a1;
    if (v19)
      v22 = v21 + 1;
    else
      v22 = 1;
    sub_2358487F4(&v69[1], v22);
    v23 = (int8x16_t *)v69[1];
    v24 = v70;
    v25 = v70 - (unint64_t)v69[1];
    if ((uint64_t)(v70 - (unint64_t)v69[1]) >= 1)
      bzero(v69[1], 4 * (((unint64_t)v25 >> 2) - ((unint64_t)v25 > 3)) + 4);
    v23->i32[0] = v19;
    v26 = *(int8x16_t **)(a3 + 8);
    if (!v26->i32[0])
    {
      v34 = *(void **)a3;
      v35 = *((_QWORD *)&v70 + 1);
      *(void **)a3 = v69[0];
      *(_QWORD *)(a3 + 8) = v23;
      v69[0] = v34;
      v69[1] = v26;
      v36 = *(_OWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = v24;
      *(_QWORD *)(a3 + 24) = v35;
      v70 = v36;
      goto LABEL_33;
    }
    if (!v19)
      goto LABEL_33;
    v27 = *(_QWORD *)(a3 + 16);
    if (v25 <= (unint64_t)(v27 - (_QWORD)v26))
    {
      v29 = v25;
      v25 = v27 - (_QWORD)v26;
      v30 = v23;
      v23 = *(int8x16_t **)(a3 + 8);
      v31 = v25 >> 2;
      v32 = v29 >> 2;
      v33 = (v25 >> 2) - (v29 >> 2);
      if (v33 < v25 >> 2)
      {
LABEL_23:
        if ((unint64_t)v29 < 0x20 || &v23->i8[v25 - v29] < &v30->i8[v29] && v30 < (int8x16_t *)&v23->i8[v25])
          goto LABEL_29;
        v33 += v32 & 0xFFFFFFFFFFFFFFF8;
        v37 = v30 + 1;
        v38 = (int8x16_t *)((char *)v23 + 4 * v31 + -4 * v32 + 16);
        v39 = v32 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v40 = veorq_s8(*v38, *v37);
          v38[-1] = veorq_s8(v38[-1], v37[-1]);
          *v38 = v40;
          v37 += 2;
          v38 += 2;
          v39 -= 8;
        }
        while (v39);
        if (v32 != (v32 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_29:
          v41 = v33 - v31;
          v42 = &v23->i32[v33];
          v43 = &v30->i8[4 * v32];
          do
          {
            *v42++ ^= *(_DWORD *)&v43[4 * v41];
            v44 = __CFADD__(v41++, 1);
          }
          while (!v44);
        }
      }
    }
    else
    {
      v28 = *((_QWORD *)&v70 + 1);
      v69[1] = *(void **)(a3 + 8);
      *(_QWORD *)&v70 = v27;
      *((_QWORD *)&v70 + 1) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = v23;
      *(_QWORD *)(a3 + 16) = v24;
      *(_QWORD *)(a3 + 24) = v28;
      v29 = v27 - (_QWORD)v26;
      v30 = v26;
      v31 = v25 >> 2;
      v32 = v29 >> 2;
      v33 = (v25 >> 2) - (v29 >> 2);
      if (v33 < v25 >> 2)
        goto LABEL_23;
    }
    sub_235848318((char **)a3);
LABEL_33:
    sub_235849130(v69, a2);
    if (v19)
    {
      v45 = (int *)v69[1];
      v46 = (uint64_t)(v70 - (unint64_t)v69[1]) >> 2;
      if ((void *)v70 != v69[1])
      {
        if (v46 <= 1)
          v47 = 1;
        else
          v47 = (uint64_t)(v70 - (unint64_t)v69[1]) >> 2;
        v48 = v69[0];
        do
        {
          v49 = *v45;
          if ((_DWORD)v49)
            LODWORD(v49) = *(_DWORD *)(v48[1]
                                     + 4
                                     * ((*(_DWORD *)(v48[4] + 4 * v19) + *(_DWORD *)(v48[4] + 4 * v49))
                                      % (*(_DWORD *)v48 - 1)));
          *v45++ = v49;
          --v47;
        }
        while (v47);
      }
      sub_235848A14(&v69[1], v46 + v21, 0);
      sub_235848318((char **)v69);
    }
    else
    {
      sub_235848674((uint64_t)v69[0], v69);
    }
    v9 = (int8x16_t *)a1[1];
    if (v9->i32[0])
    {
      v50 = (char *)v69[1];
      v18 = a1[2];
      if (*(_DWORD *)v69[1])
      {
        v51 = v70;
        v52 = v70 - (unint64_t)v69[1];
        v53 = v18 - (_QWORD)v9;
        if ((unint64_t)v70 - (unint64_t)v69[1] <= v18 - (uint64_t)v9)
        {
          v55 = v70 - (unint64_t)v69[1];
          v52 = v18 - (_QWORD)v9;
          v56 = (int8x16_t *)v69[1];
          v50 = (char *)a1[1];
          v57 = v53 >> 2;
          v58 = (uint64_t)(v70 - (unint64_t)v69[1]) >> 2;
          v59 = v57 - v58;
          if (v57 - v58 >= v57)
          {
LABEL_59:
            sub_235848318((char **)a1);
            v9 = (int8x16_t *)a1[1];
            v18 = a1[2];
            goto LABEL_6;
          }
        }
        else
        {
          v54 = *((_QWORD *)&v70 + 1);
          v69[1] = (void *)a1[1];
          *(_QWORD *)&v70 = v18;
          *((_QWORD *)&v70 + 1) = a1[3];
          a1[1] = (uint64_t)v50;
          a1[2] = v51;
          a1[3] = v54;
          v55 = v18 - (_QWORD)v9;
          v56 = v9;
          v57 = v52 >> 2;
          v58 = v55 >> 2;
          v59 = (v52 >> 2) - (v55 >> 2);
          if (v59 >= v52 >> 2)
            goto LABEL_59;
        }
        if ((unint64_t)v55 < 0x20 || &v50[v52 - v55] < &v56->i8[v55] && v56 < (int8x16_t *)&v50[v52])
          goto LABEL_56;
        v59 += v58 & 0xFFFFFFFFFFFFFFF8;
        v60 = v56 + 1;
        v61 = (int8x16_t *)&v50[4 * v57 + 16 + -4 * v58];
        v62 = v58 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v63 = veorq_s8(*v61, *v60);
          v61[-1] = veorq_s8(v61[-1], v60[-1]);
          *v61 = v63;
          v60 += 2;
          v61 += 2;
          v62 -= 8;
        }
        while (v62);
        if (v58 != (v58 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_56:
          v64 = v59 - v57;
          v65 = &v50[4 * v59];
          v66 = &v56->i8[4 * v58];
          do
          {
            *(_DWORD *)v65 ^= *(_DWORD *)&v66[4 * v64];
            v65 += 4;
            v44 = __CFADD__(v64++, 1);
          }
          while (!v44);
        }
        goto LABEL_59;
      }
    }
    else
    {
      v14 = (void *)*a1;
      v15 = (int8x16_t *)v69[1];
      *a1 = (uint64_t)v69[0];
      a1[1] = (uint64_t)v15;
      v16 = v70;
      v69[0] = v14;
      v69[1] = v9;
      v17 = *((_OWORD *)a1 + 1);
      *((_OWORD *)a1 + 1) = v70;
      v18 = v16;
      v9 = v15;
      v70 = v17;
    }
LABEL_6:
    v11 = v18 - (_QWORD)v9;
    v12 = (unint64_t)(v18 - (_QWORD)v9) >> 2;
    v13 = (*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2;
    if ((int)v12 < (int)v13)
      break;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_62:
  if (v69[1])
  {
    *(void **)&v70 = v69[1];
    operator delete(v69[1]);
  }
  return a1;
}

void sub_2358490D0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2358490E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2358490F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_235849288(&a9);
  _Unwind_Resume(a1);
}

std::logic_error *sub_23584910C(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  return result;
}

_QWORD *sub_235849130(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _BYTE *v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  int v21;

  v4 = a1 + 1;
  v5 = (_BYTE *)a1[1];
  v6 = (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2;
  if (v6 <= (uint64_t)(a1[3] - (_QWORD)v5) >> 2)
    goto LABEL_15;
  if (v6 <= 0x20)
    v6 = 32;
  if (v6 >> 62)
    sub_235847D5C();
  v7 = (_BYTE *)a1[2];
  v8 = 4 * v6;
  v9 = (char *)operator new(4 * v6);
  v10 = v7 - v5;
  v11 = &v9[(v7 - v5) & 0xFFFFFFFFFFFFFFFCLL];
  v12 = v11;
  if (v7 != v5)
  {
    if ((unint64_t)(v10 - 4) < 0x2C)
    {
      v12 = &v9[(v7 - v5) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_12:
        v21 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v12 - 1) = v21;
        v12 -= 4;
      }
      while (v7 != v5);
      goto LABEL_13;
    }
    v12 = &v9[(v7 - v5) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(&v7[-(v10 & 0xFFFFFFFFFFFFFFFCLL)] - v9) < 0x20)
      goto LABEL_12;
    v13 = v10 >> 2;
    v14 = ((unint64_t)(v10 - 4) >> 2) + 1;
    v15 = 4 * (v14 & 0x7FFFFFFFFFFFFFF8);
    v16 = &v7[-v15];
    v12 = &v11[-v15];
    v17 = &v9[4 * v13 - 16];
    v18 = (__int128 *)(v7 - 16);
    v19 = v14 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v20 = *v18;
      *((_OWORD *)v17 - 1) = *(v18 - 1);
      *(_OWORD *)v17 = v20;
      v17 -= 32;
      v18 -= 2;
      v19 -= 8;
    }
    while (v19);
    v7 = v16;
    if (v14 != (v14 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_12;
  }
LABEL_13:
  a1[1] = v12;
  a1[2] = v11;
  a1[3] = &v9[v8];
  if (v5)
    operator delete(v5);
LABEL_15:
  if (a1 != (_QWORD *)a2)
    sub_235849464(v4, *(char **)(a2 + 8), *(char **)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  return a1;
}

_QWORD *sub_235849288(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_2358492C8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      v6 = &v5[4 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + a2;
    if (v10 >> 62)
      sub_235847D5C();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_2358482F0();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * a2;
    v16 = &v13[4 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[4 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

_QWORD *sub_235849464(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62)
      goto LABEL_22;
    v10 = v8 >> 1;
    if (v8 >> 1 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 62)
LABEL_22:
      sub_235847D5C();
    v13 = 4 * v12;
    result = operator new(4 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void sub_2358495A8()
{
  sub_2358495BC("vector");
}

void sub_2358495BC(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_23584960C(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2506DEF10, MEMORY[0x24BEDAB00]);
}

void sub_2358495F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_23584960C(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

_QWORD *sub_235849630(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _DWORD *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v4 = a1 + 1;
  *a1 = a2;
  a1[1] = a1 + 1;
  a1[2] = a1 + 1;
  a1[3] = 0;
  v5 = operator new(4uLL);
  *v5 = 1;
  v13 = 0;
  *((_QWORD *)&v11 + 1) = v5 + 1;
  v12 = 0uLL;
  *(_QWORD *)&v10 = a2;
  *((_QWORD *)&v10 + 1) = v5;
  *(_QWORD *)&v11 = v5 + 1;
  sub_235848318((char **)&v10);
  v6 = operator new(0x48uLL);
  v7 = v11;
  v6[1] = v10;
  v6[2] = v7;
  v6[3] = v12;
  *((_QWORD *)v6 + 8) = v13;
  v8 = a1[1];
  *(_QWORD *)v6 = v8;
  *((_QWORD *)v6 + 1) = v4;
  *(_QWORD *)(v8 + 8) = v6;
  a1[1] = v6;
  ++a1[3];
  return a1;
}

void sub_2358496D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;

  sub_235849288(&a9);
  sub_235849754(v9);
  _Unwind_Resume(a1);
}

void sub_2358496F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  uint64_t *v14;
  void *v16;

  if (__p)
  {
    operator delete(__p);
    v16 = a10;
    if (!a10)
    {
LABEL_3:
      sub_235849754(v14);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v16 = a10;
    if (!a10)
      goto LABEL_3;
  }
  operator delete(v16);
  sub_235849754(v14);
  _Unwind_Resume(a1);
}

void sub_235849740(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_235849754(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_235849754(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  void *v7;
  void *v8;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (void *)v3[6];
        if (v7)
        {
          v3[7] = (uint64_t)v7;
          operator delete(v7);
        }
        v8 = (void *)v3[3];
        if (v8)
        {
          v3[4] = (uint64_t)v8;
          operator delete(v8);
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

_QWORD *sub_2358497E8(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  int v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  char *v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  void *__p;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25[2];
  void *v26[2];
  __int128 v27;

  v4 = *(_DWORD *)(a1 + 24);
  if (v4 <= a2)
  {
    v5 = *(_QWORD *)(a1 + 8);
    *(_OWORD *)v25 = 0u;
    *(_OWORD *)v26 = 0u;
    v27 = 0u;
    v24 = *(_QWORD *)(v5 + 16);
    sub_235849130(&v24, v5 + 16);
    v6 = v4 - 1;
    do
    {
      v7 = *(char **)a1;
      v8 = v6 + *(_DWORD *)(*(_QWORD *)a1 + 4);
      v9 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      if (v8 >= (*(_QWORD *)(*(_QWORD *)a1 + 16) - v9) >> 2)
        sub_2358495A8();
      v10 = *(unsigned int *)(v9 + 4 * v8);
      v11 = operator new(8uLL);
      *v11 = (v10 << 32) | 1;
      v22 = 0;
      v23 = 0;
      __p = 0;
      v17 = v7;
      v18 = v11;
      v19 = v11 + 1;
      v20 = v11 + 1;
      sub_235848318(&v17);
      sub_2358484D8((uint64_t)&v24, (uint64_t)&v17);
      if (__p)
      {
        v22 = __p;
        operator delete(__p);
      }
      if (v18)
      {
        v19 = v18;
        operator delete(v18);
      }
      sub_235849A40((uint64_t *)(a1 + 8), &v24);
      ++v6;
    }
    while (a2 != v6);
    if (v26[1])
    {
      *(void **)&v27 = v26[1];
      operator delete(v26[1]);
    }
    if (v25[0])
    {
      v25[1] = v25[0];
      operator delete(v25[0]);
    }
  }
  v12 = *(_QWORD **)(a1 + 16);
  v13 = a2;
  if (a2 < 0)
  {
    do
      v12 = (_QWORD *)*v12;
    while (!__CFADD__(v13++, 1));
  }
  else if (a2)
  {
    v14 = a2 + 1;
    do
    {
      v12 = (_QWORD *)v12[1];
      --v14;
    }
    while (v14 > 1);
  }
  return v12 + 2;
}

void sub_235849960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  void *v22;

  if (__p)
  {
    operator delete(__p);
    v22 = a17;
    if (!a17)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v22 = a17;
    if (!a17)
      goto LABEL_3;
  }
  operator delete(v22);
  _Unwind_Resume(exception_object);
}

void sub_23584999C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_235849288((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2358499B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_235849288((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2358499C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v17;

  if (__p)
  {
    operator delete(__p);
    v17 = a10;
    if (!a10)
    {
LABEL_3:
      sub_235849288(&a16);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v17 = a10;
    if (!a10)
      goto LABEL_3;
  }
  operator delete(v17);
  sub_235849288(&a16);
  _Unwind_Resume(a1);
}

void sub_235849A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_235849288(&a9);
  sub_235849288(&a16);
  _Unwind_Resume(a1);
}

void sub_235849A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_235849288((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_235849A40(uint64_t *a1, _QWORD *a2)
{
  char *v4;
  _QWORD *result;
  uint64_t v6;

  v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = *a2;
  result = sub_235849130((_QWORD *)v4 + 2, (uint64_t)a2);
  v6 = *a1;
  *(_QWORD *)v4 = *a1;
  *((_QWORD *)v4 + 1) = a1;
  *(_QWORD *)(v6 + 8) = v4;
  *a1 = (uint64_t)v4;
  ++a1[2];
  return result;
}

void sub_235849AB8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = (void *)v1[6];
  if (v4)
  {
    v1[7] = v4;
    operator delete(v4);
    v5 = *v2;
    if (!*v2)
    {
LABEL_3:
      operator delete(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v5 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  v1[4] = v5;
  operator delete(v5);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_235849B04(char **a1, uint64_t a2, int a3)
{
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v9;
  char *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  size_t v14;
  unint64_t v15;
  int v16;
  char *v17;
  std::logic_error *exception;
  void *v19[2];
  __int128 v20;
  void *__p[2];
  uint64_t v22;
  char *v23;
  void *v24;
  _BYTE *v25;
  char *v26;
  void *v27;
  void *v28;
  uint64_t v29;

  if (!a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_23584910C(exception, "No error correction bytes");
    goto LABEL_18;
  }
  v5 = *(const void **)a2;
  v6 = (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2;
  v7 = (v6 - a3);
  if ((int)v6 <= a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_23584910C(exception, "No data bytes provided");
LABEL_18:
    __cxa_throw(exception, (struct type_info *)off_2506DEF18, MEMORY[0x24BEDAB88]);
  }
  v9 = *a1;
  v10 = (char *)operator new(4 * (v6 - a3));
  memmove(v10, v5, 4 * v7);
  v28 = 0;
  v29 = 0;
  v26 = &v10[4 * v7];
  v27 = 0;
  v23 = v9;
  v24 = v10;
  v25 = v26;
  sub_235848318(&v23);
  sub_235848960((uint64_t *)&v23, a3, 1);
  v22 = 0;
  v20 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v19 = 0u;
  v11 = sub_2358497E8((uint64_t)a1, a3);
  sub_235848B98((uint64_t *)&v23, (uint64_t)v11, (uint64_t)v19);
  v12 = v24;
  v13 = v25;
  v14 = v25 - (_BYTE *)v24;
  v15 = (unint64_t)(v25 - (_BYTE *)v24) >> 2;
  v16 = a3 - v15;
  v17 = (char *)(*(_QWORD *)a2 + 4 * v7);
  if (a3 - (int)v15 >= 1)
    bzero(v17, 4 * (~(_DWORD)v15 + a3) + 4);
  if (v13 != v12)
    memmove(&v17[4 * v16], v12, v14);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v19[1])
  {
    *(void **)&v20 = v19[1];
    operator delete(v19[1]);
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
}

void sub_235849CBC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_235849CD0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_235849CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  sub_235849288(&a16);
  _Unwind_Resume(a1);
}

void *ACCBakerCreate(const __CFURL *a1, unint64_t a2, unsigned __int8 *a3, CFTypeRef *a4)
{
  unsigned int v7;
  int v8;
  void *v9;
  uint64_t v10;
  CFStringRef v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *size;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  const std::error_category *v18;
  CFTypeRef v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::string *v23;
  const char *v24;
  int v25;
  const char *v26;
  CFIndex v27;
  const UInt8 *v28;
  const std::error_category *v29;
  CFTypeRef v30;
  unint64_t *v31;
  const std::error_category *v32;
  CFTypeRef v33;
  unint64_t *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  void **v40;
  uint64_t v41;
  BOOL v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  void *__p[4];
  std::string v49;
  char v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  _BYTE *v55;
  unsigned int v56;
  char v57;
  CFTypeRef cf;
  std::__shared_weak_count *v59;
  std::error_condition v60;
  _QWORD v61[3];
  _QWORD *v62;
  void *v63[2];
  uint64_t v64;
  void **v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  if (a3)
    v7 = *a3;
  else
    v7 = sub_235846234(a1);
  sub_235846ABC(a1, v7, a4, (uint64_t)&v54);
  if (!v57)
    return 0;
  v53 = 0;
  if (ACCBakerDataVersion0 == v7)
  {
    v8 = 0;
  }
  else if (ACCBakerDataVersion1 == v7)
  {
    v8 = 1;
  }
  else if (ACCBakerDataVersion2 == v7)
  {
    v8 = 2;
  }
  else
  {
    if (ACCBakerDataVersion3 != v7)
    {
      sub_23587BF24("/Library/Caches/com.apple.xbs/Sources/ACCBaker/product/AppCode/ACCBaker/src/ACCBaker.cpp", 50, (uint64_t)"", 0, (uint64_t)"Unexpected ACCBakerDataVersion value", 36, (void (*)(void **))sub_23587C380);
      abort();
    }
    v8 = 3;
  }
  HIBYTE(v64) = 0;
  LOBYTE(v63[0]) = 0;
  v10 = operator new();
  sub_23584B360((sqlite3 ***)v10, (uint64_t)v63);
  v53 = v10;
  *(_DWORD *)(v10 + 16) = v8;
  if (SHIBYTE(v64) < 0)
    operator delete(v63[0]);
  v63[0] = &off_2506DF220;
  v63[1] = &v53;
  v64 = 0;
  v65 = v63;
  v52 = 0;
  v61[0] = &off_2506DF2B0;
  v61[1] = &v52;
  v61[2] = 0;
  v62 = v61;
  v11 = CFURLGetString(a1);
  sub_235847DE4(&v49, v11);
  v51 = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
  if (!v49.__r_.__value_.__l.__size_)
    goto LABEL_23;
  v12 = (unint64_t *)(v49.__r_.__value_.__l.__size_ + 8);
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  size = (std::__shared_weak_count *)v49.__r_.__value_.__l.__size_;
  if (!v49.__r_.__value_.__l.__size_)
    goto LABEL_23;
  v15 = (unint64_t *)(v49.__r_.__value_.__l.__size_ + 8);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if (ACCBakerDataVersion0 == v7)
    {
LABEL_24:
      sub_235878BFC(v51, &v49);
      if (a2 - 2 <= 0xF)
        goto LABEL_25;
      goto LABEL_36;
    }
  }
  else
  {
LABEL_23:
    if (ACCBakerDataVersion0 == v7)
      goto LABEL_24;
  }
  v49.__r_.__value_.__s.__data_[0] = 0;
  v50 = 0;
  if (a2 - 2 <= 0xF)
  {
LABEL_25:
    __p[0] = operator new(0x28uLL);
    *(_OWORD *)&__p[1] = xmmword_23587FAD0;
    strcpy((char *)__p[0], "Palette ID currently not supported.");
    v17 = (char *)operator new(0x60uLL);
    v47 = v17;
    strcpy(v17, "/Library/Caches/com.apple.xbs/Sources/ACCBaker/product/AppCode/ACCBaker/src/ACCBaker.cpp");
    if (a4)
    {
      v18 = std::generic_category();
      *(_QWORD *)&v60.__val_ = 45;
      v60.__cat_ = v18;
      sub_23587A32C(&v60, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v19 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v19;
      v20 = v59;
      if (!v59)
        goto LABEL_73;
      p_shared_owners = (unint64_t *)&v59->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
LABEL_71:
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
LABEL_73:
      v17 = v47;
      goto LABEL_74;
    }
    goto LABEL_74;
  }
LABEL_36:
  v23 = &v49;
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v23 = (std::string *)v49.__r_.__value_.__r.__words[0];
  if (v50)
    v24 = (const char *)v23;
  else
    v24 = 0;
  v25 = sub_23584AB98(v53, v54, v55 - (_BYTE *)v54, v24, v56, 0, a2, &v52);
  if (v25)
  {
    memset(__p, 0, 24);
    if ((v25 - 1) < 2)
    {
      HIBYTE(__p[2]) = 17;
      LOBYTE(__p[2]) = 114;
      v26 = "Invalid parameter";
    }
    else if (v25 == 3)
    {
      HIBYTE(__p[2]) = 16;
      v26 = "Generation error";
    }
    else
    {
      if (v25 != 4)
        goto LABEL_63;
      HIBYTE(__p[2]) = 20;
      LODWORD(__p[2]) = 1702521203;
      v26 = "Invalid message size";
    }
    *(_OWORD *)__p = *(_OWORD *)v26;
LABEL_63:
    v17 = (char *)operator new(0x60uLL);
    v47 = v17;
    strcpy(v17, "/Library/Caches/com.apple.xbs/Sources/ACCBaker/product/AppCode/ACCBaker/src/ACCBaker.cpp");
    if (a4)
    {
      v32 = std::generic_category();
      *(_QWORD *)&v60.__val_ = 22;
      v60.__cat_ = v32;
      sub_23587A32C(&v60, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v33 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v33;
      v20 = v59;
      if (!v59)
        goto LABEL_73;
      v34 = (unint64_t *)&v59->__shared_owners_;
      do
        v22 = __ldaxr(v34);
      while (__stlxr(v22 - 1, v34));
      goto LABEL_71;
    }
    goto LABEL_74;
  }
  if (!v52)
  {
    HIBYTE(__p[2]) = 19;
    strcpy((char *)__p, "Cannot get SVG data");
    v17 = (char *)operator new(0x60uLL);
    v47 = v17;
    strcpy(v17, "/Library/Caches/com.apple.xbs/Sources/ACCBaker/product/AppCode/ACCBaker/src/ACCBaker.cpp");
    if (a4)
    {
      v29 = std::generic_category();
      *(_QWORD *)&v60.__val_ = 89;
      v60.__cat_ = v29;
      sub_23587A32C(&v60, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v30 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v30;
      v20 = v59;
      if (!v59)
        goto LABEL_73;
      v31 = (unint64_t *)&v59->__shared_owners_;
      do
        v22 = __ldaxr(v31);
      while (__stlxr(v22 - 1, v31));
      goto LABEL_71;
    }
LABEL_74:
    operator delete(v17);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    v9 = 0;
    goto LABEL_77;
  }
  if (*(char *)(v52 + 23) < 0)
  {
    if (*(_QWORD *)(v52 + 8))
    {
      v28 = *(const UInt8 **)v52;
      v27 = *(_QWORD *)(v52 + 8);
    }
    else
    {
      v28 = 0;
      v27 = *(_QWORD *)(v52 + 8);
    }
  }
  else
  {
    v27 = *(unsigned __int8 *)(v52 + 23);
    if (*(_BYTE *)(v52 + 23))
      v28 = (const UInt8 *)v52;
    else
      v28 = 0;
  }
  if (v28)
    v43 = 1;
  else
    v43 = v27 == 0;
  if (!v43
    && sub_23587BF24("/Library/Caches/com.apple.xbs/Sources/ACCBaker/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_23587C380))
  {
    abort();
  }
  sub_23587905C(v28, v27, __p);
  v9 = __p[0];
  v44 = (std::__shared_weak_count *)__p[1];
  if (__p[0])
    CFRetain(__p[0]);
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
LABEL_77:
  if (v50 && SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
  if (*((_QWORD *)&v51 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (!v62)
    sub_23584A6A4();
  (*(void (**)(_QWORD *))(*v62 + 48))(v62);
  v38 = v62;
  if (v62 == v61)
  {
    v39 = 4;
    v38 = v61;
  }
  else
  {
    if (!v62)
      goto LABEL_91;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_91:
  if (!v65)
    sub_23584A6A4();
  (*((void (**)(void **))*v65 + 6))(v65);
  v40 = v65;
  if (v65 == v63)
  {
    v41 = 4;
    v40 = v63;
    goto LABEL_96;
  }
  if (v65)
  {
    v41 = 5;
LABEL_96:
    (*((void (**)(void))*v40 + v41))();
  }
  if (v57 && v54)
  {
    v55 = v54;
    operator delete(v54);
  }
  return v9;
}

void sub_23584A50C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,int a39,__int16 a40,char a41,char a42)
{
  void *v42;
  uint64_t v43;

  operator delete(v42);
  if (a18 < 0)
    operator delete(__p);
  if (a26 && a25 < 0)
    operator delete(a20);
  sub_235847A98((uint64_t)&a28);
  sub_23584A638((_QWORD *)(v43 - 136));
  sub_23584A638((_QWORD *)(v43 - 104));
  if (a38)
  {
    if (a34)
    {
      a35 = (uint64_t)a34;
      operator delete(a34);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_23584A638(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = a1[3];
  if (!v2)
    sub_23584A6A4();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v3 = (_QWORD *)a1[3];
  if (v3 == a1)
  {
    v4 = 4;
    v3 = a1;
    goto LABEL_6;
  }
  if (v3)
  {
    v4 = 5;
LABEL_6:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_23584A6A4()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_2506DF1F8;
  __cxa_throw(exception, (struct type_info *)&unk_2506DF1D0, (void (*)(void *))std::exception::~exception);
}

void sub_23584A6DC(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x23B7D94C4);
}

void sub_23584A704()
{
  JUMPOUT(0x23B7D94C4);
}

__n128 sub_23584A718(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_2506DF220;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23584A750(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_2506DF220;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23584A770(uint64_t a1)
{
  return sub_23584B2B0(**(_QWORD **)(a1 + 8));
}

uint64_t sub_23584A77C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZ14ACCBakerCreateE3$_0JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZ14ACCBakerCreateE3$_0JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZ14ACCBakerCreateE3$_0JEEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZ14ACCBakerCreateE3$_0JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_23584A7E8()
{
  return &unk_2506DF290;
}

void sub_23584A7F8()
{
  JUMPOUT(0x23B7D94C4);
}

__n128 sub_23584A80C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_2506DF2B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23584A844(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_2506DF2B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23584A864(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = **(_QWORD **)(result + 8);
  if (v1)
  {
    v2 = *(void **)(v1 + 32);
    if (v2)
    {
      *(_QWORD *)(v1 + 40) = v2;
      operator delete(v2);
    }
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    JUMPOUT(0x23B7D94C4);
  }
  return result;
}

uint64_t sub_23584A8C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZ14ACCBakerCreateE3$_1JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZ14ACCBakerCreateE3$_1JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZ14ACCBakerCreateE3$_1JEEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZ14ACCBakerCreateE3$_1JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_23584A934()
{
  return &unk_2506DF310;
}

BOOL sub_23584A940(const void *a1, size_t __sz, int a3)
{
  _BOOL8 v3;
  _BYTE *v7;
  _BYTE *v8;
  size_t v9;
  __int128 v10;
  BOOL v11;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;

  v3 = 0;
  if (a1 && __sz)
  {
    __p = 0;
    v14 = 0;
    v15 = 0;
    if ((__sz & 0x8000000000000000) != 0)
      sub_235847D5C();
    v7 = operator new(__sz);
    v8 = &v7[__sz];
    __p = v7;
    v15 = &v7[__sz];
    memcpy(v7, a1, __sz);
    v14 = &v7[__sz];
    switch(a3)
    {
      case 0:
        v3 = (unsigned __int16)sub_23585B3E4(&__p, byte_23587FD54, (unsigned __int8 *)3) > 0xFFu;
        v7 = __p;
        if (__p)
          break;
        return v3;
      case 1:
        if (__sz > 0x12)
          goto LABEL_20;
        v11 = (v7[1] & 0x3F) == 0;
        goto LABEL_22;
      case 2:
        v9 = 9;
        if (!*v7)
          v9 = 4;
        if (v9 < __sz)
          goto LABEL_20;
        v3 = v7[1] < 0x10u;
        break;
      case 3:
        if (__sz == 21 && !*v7 && !v7[1])
        {
          if (v8 != v7 + 2)
          {
            v10 = *(_OWORD *)(v7 + 2);
            *((_WORD *)v7 + 8) = *((_WORD *)v7 + 9);
            v7[18] = v7[20];
            *(_OWORD *)v7 = v10;
          }
          v8 = v7 + 19;
        }
        if (v8 - v7 != 19)
          goto LABEL_20;
        v11 = (*(v8 - 1) & 7) == 0;
LABEL_22:
        v3 = v11;
        break;
      default:
LABEL_20:
        v3 = 0;
        break;
    }
    v14 = v7;
    operator delete(v7);
  }
  return v3;
}

void sub_23584AAC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_23584AAE8(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_23584B34C();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t sub_23584AB98(uint64_t a1, const void *a2, size_t __sz, const char *a4, unsigned int a5, int a6, unint64_t a7, uint64_t *a8)
{
  uint64_t v9;
  char *v17;
  char *v18;
  unsigned __int8 v19;
  unsigned __int16 v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  size_t v25;
  void *v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  __int128 v33;
  void **v34;
  size_t v35;
  void *v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  void *v40;
  _DWORD *exception;
  int v43;
  void *__p[2];
  uint64_t v45;
  char v46;
  void *__dst[2];
  unint64_t v48;
  __int16 v49;
  char v50;
  __int16 v51;
  char v52;
  __int16 v53;
  char v54;
  _QWORD v55[4];
  char v56;
  char v57;
  void *v58;
  char v59;
  void *v60;
  char v61;
  char v62;
  char v63;
  char v64;
  _QWORD *v65;
  char *v66;
  char *v67;
  char *v68;

  if (!a2)
    return 2;
  v9 = 1;
  if (a1 && a8)
  {
    v66 = 0;
    v67 = 0;
    v68 = 0;
    if (__sz)
    {
      if ((__sz & 0x8000000000000000) != 0)
        sub_235847D5C();
      v17 = (char *)operator new(__sz);
      v18 = &v17[__sz];
      v66 = v17;
      v68 = &v17[__sz];
      memcpy(v17, a2, __sz);
      v67 = v18;
    }
    v19 = 8;
    switch(*(_DWORD *)(a1 + 16))
    {
      case 0:
        v20 = sub_23585B3E4(&v66, byte_23587FD54, (unsigned __int8 *)3);
        v19 = v20;
        if (v20 >= 0x100u)
          goto LABEL_13;
        goto LABEL_9;
      case 1:
        goto LABEL_13;
      case 2:
        v19 = 110;
        goto LABEL_13;
      case 3:
        v19 = 16;
LABEL_13:
        v21 = (_QWORD *)operator new();
        v22 = operator new();
        *(_QWORD *)v22 = 0x1000000013;
        *(_DWORD *)(v22 + 8) = 0;
        sub_235847F28(v22 + 16);
        *v21 = v22;
        v65 = v21;
        sub_2358512B8(v19, &v66, (uint64_t)v55);
        if (!v64)
        {
          v9 = 4;
          goto LABEL_52;
        }
        if (a7 > 0x11)
        {
          v9 = 2;
          goto LABEL_50;
        }
        v23 = (char *)&unk_23587FCB2 + 9 * a7;
        v49 = *(_WORD *)(v23 + 3);
        v50 = v23[5];
        v51 = *(_WORD *)v23;
        v52 = v23[2];
        v53 = *((_WORD *)v23 + 3);
        v54 = v23[8];
        v24 = operator new();
        *(_QWORD *)(v24 + 32) = 0;
        *(_QWORD *)(v24 + 40) = 0;
        *(_QWORD *)(v24 + 48) = 0;
        *(_QWORD *)(v24 + 8) = 0;
        *(_QWORD *)(v24 + 16) = 0;
        *(_QWORD *)v24 = 0;
        *(_DWORD *)(v24 + 23) = 0;
        *a8 = v24;
        *(_BYTE *)(v24 + 27) = 1;
        if (a5 >= 3)
        {
          sub_23587BF24("/Library/Caches/com.apple.xbs/Sources/ACCBaker/product/AppCode/ACCBaker/src/ACCBakerInternal.cpp", 55, (uint64_t)"", 0, (uint64_t)"Unexpected logo type", 20, (void (*)(void **))sub_23587C380);
          abort();
        }
        if (!a4)
        {
          HIBYTE(v48) = 0;
          LOBYTE(__dst[0]) = 0;
          goto LABEL_29;
        }
        v25 = strlen(a4);
        if (v25 >= 0x7FFFFFFFFFFFFFF8)
          sub_23584B34C();
        v26 = (void *)v25;
        if (v25 >= 0x17)
        {
          v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v25 | 7) != 0x17)
            v28 = v25 | 7;
          v29 = v28 + 1;
          v27 = (void **)operator new(v28 + 1);
          __dst[1] = v26;
          v48 = v29 | 0x8000000000000000;
          __dst[0] = v27;
        }
        else
        {
          HIBYTE(v48) = v25;
          v27 = __dst;
          if (!v25)
            goto LABEL_28;
        }
        memcpy(v27, a4, (size_t)v26);
LABEL_28:
        *((_BYTE *)v26 + (_QWORD)v27) = 0;
LABEL_29:
        v30 = sub_23584B154((uint64_t)v55);
        sub_235865E28((uint64_t *)(a1 + 8), v30, (unsigned __int8 *)&v49, a5, a6 == 1, (uint64_t)__dst, 1, (uint64_t)__p);
        if (v46)
        {
          v31 = (void **)*a8;
          *((_WORD *)v31 + 12) = v53;
          *((_BYTE *)v31 + 26) = v54;
          if (!v46)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            v43 = (int)__p[0];
            *(_QWORD *)exception = &off_2506DF348;
            exception[2] = v43;
            __cxa_throw(exception, (struct type_info *)&unk_2506DF320, (void (*)(void *))std::exception::~exception);
          }
          v32 = *a8;
          if ((void **)*a8 != __p)
          {
            if (*(char *)(v32 + 23) < 0)
            {
              if (v45 >= 0)
                v34 = __p;
              else
                v34 = (void **)__p[0];
              if (v45 >= 0)
                v35 = HIBYTE(v45);
              else
                v35 = (size_t)__p[1];
              sub_23584BAC0((void **)v32, v34, v35);
            }
            else if (v45 < 0)
            {
              sub_23584B9FC((_QWORD *)v32, __p[0], (size_t)__p[1]);
            }
            else
            {
              v33 = *(_OWORD *)__p;
              *(_QWORD *)(v32 + 16) = v45;
              *(_OWORD *)v32 = v33;
            }
          }
          v9 = 0;
          if (v46 && SHIBYTE(v45) < 0)
          {
            operator delete(__p[0]);
            v9 = 0;
          }
        }
        else
        {
          v9 = 3;
        }
        if (SHIBYTE(v48) < 0)
          operator delete(__dst[0]);
        if (v64)
        {
LABEL_50:
          v36 = (void *)v55[0];
          if (!v55[0])
            goto LABEL_62;
          goto LABEL_61;
        }
LABEL_52:
        if (v63)
        {
          if (v62)
          {
            if (v61 < 0)
              operator delete(v60);
            if (v59 < 0)
              operator delete(v58);
          }
          if (v57 && v56 < 0)
          {
            v36 = (void *)v55[2];
LABEL_61:
            operator delete(v36);
          }
        }
LABEL_62:
        v37 = v65;
        v65 = 0;
        if (v37)
        {
          v38 = (_QWORD *)*v37;
          *v37 = 0;
          if (v38)
          {
            v39 = (void *)v38[6];
            if (v39)
            {
              v38[7] = v39;
              operator delete(v39);
            }
            v40 = (void *)v38[3];
            if (v40)
            {
              v38[4] = v40;
              operator delete(v40);
            }
            MEMORY[0x23B7D94C4](v38, 0x1010C40DA3B4497);
          }
          MEMORY[0x23B7D94C4](v37, 0x20C4093837F09);
        }
LABEL_70:
        if (v66)
        {
          v67 = v66;
          operator delete(v66);
        }
        break;
      default:
LABEL_9:
        v9 = 4;
        goto LABEL_70;
    }
  }
  return v9;
}

void sub_23584B088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;
  void *v27;

  if (a16 && a15 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_23584B214((uint64_t)&a25);
  sub_235851228((_QWORD **)(v25 - 112));
  v27 = *(void **)(v25 - 104);
  if (v27)
  {
    *(_QWORD *)(v25 - 96) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_23584B154(uint64_t result)
{
  __int128 *v1;
  void *exception;
  __int128 v3;
  _BYTE v4[112];

  v1 = (__int128 *)result;
  if (!*(_BYTE *)(result + 120))
  {
    exception = __cxa_allocate_exception(0x80uLL);
    v3 = *v1;
    sub_23584B6BC(v4, v1 + 1);
    sub_23584B548((uint64_t)exception, &v3);
    __cxa_throw(exception, (struct type_info *)&unk_2506DF378, (void (*)(void *))sub_23584B598);
  }
  return result;
}

void sub_23584B1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23584B630((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23584B1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_23584B630((uint64_t)&a9);
  __cxa_free_exception(v9);
  _Unwind_Resume(a1);
}

void sub_23584B200(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23584B214(uint64_t a1)
{
  void *v2;

  if (!*(_BYTE *)(a1 + 120))
  {
    if (!*(_BYTE *)(a1 + 112))
      return a1;
    if (!*(_BYTE *)(a1 + 104))
      goto LABEL_8;
    if (*(char *)(a1 + 103) < 0)
    {
      operator delete(*(void **)(a1 + 80));
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      {
LABEL_8:
        if (!*(_BYTE *)(a1 + 40))
          return a1;
        goto LABEL_9;
      }
    }
    else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      return a1;
LABEL_9:
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
      return a1;
    v2 = *(void **)(a1 + 16);
    goto LABEL_11;
  }
  v2 = *(void **)a1;
  if (!*(_QWORD *)a1)
    return a1;
LABEL_11:
  operator delete(v2);
  return a1;
}

uint64_t sub_23584B2B0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sqlite3 **v4;
  sqlite3 *v5;

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 8);
    *(_QWORD *)(v1 + 8) = 0;
    if (v2)
    {
      v3 = sub_235876FD0(v2);
      MEMORY[0x23B7D94C4](v3, 0x1092C40FB2C32F1);
    }
    v4 = *(sqlite3 ***)v1;
    *(_QWORD *)v1 = 0;
    if (v4)
    {
      v5 = *v4;
      *v4 = 0;
      if (v5)
        sqlite3_close_v2(v5);
      MEMORY[0x23B7D94C4](v4, 0x20C4093837F09);
    }
    JUMPOUT(0x23B7D94C4);
  }
  return result;
}

void sub_23584B34C()
{
  sub_235847D70("basic_string");
}

sqlite3 ***sub_23584B360(sqlite3 ***a1, uint64_t a2)
{
  sqlite3 **v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v7;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_23584B488(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
  }
  v3 = (sqlite3 **)operator new();
  sub_2358788B8(v3, (char *)__p);
  *a1 = v3;
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  v4 = operator new();
  sub_23585CF6C(v4);
  a1[1] = (sqlite3 **)v4;
  return a1;
}

void sub_23584B410(_Unwind_Exception *a1)
{
  sqlite3 ***v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  MEMORY[0x23B7D94C4](v3, 0x1092C40FB2C32F1);
  sub_235878994(v1);
  _Unwind_Resume(a1);
}

void sub_23584B448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;

  v15 = v14;
  MEMORY[0x23B7D94C4](v15, 0x20C4093837F09);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void *sub_23584B488(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_23584B34C();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

void sub_23584B514()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8E0] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB740], MEMORY[0x24BEDABA8]);
}

uint64_t sub_23584B548(uint64_t a1, _OWORD *a2)
{
  *(_QWORD *)a1 = off_2506DF3A0;
  *(_OWORD *)(a1 + 8) = *a2;
  sub_23584B6BC((_BYTE *)(a1 + 24), a2 + 1);
  return a1;
}

void sub_23584B584(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_23584B598(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_2506DF3A0;
  if (!LOBYTE(this[15].__vftable))
    goto LABEL_7;
  if (!LOBYTE(this[14].__vftable))
    goto LABEL_5;
  if (SHIBYTE(this[13].__vftable) < 0)
  {
    operator delete(this[11].__vftable);
    if (SHIBYTE(this[9].__vftable) < 0)
      goto LABEL_10;
LABEL_5:
    if (!LOBYTE(this[6].__vftable))
      goto LABEL_7;
    goto LABEL_6;
  }
  if ((SHIBYTE(this[9].__vftable) & 0x80000000) == 0)
    goto LABEL_5;
LABEL_10:
  operator delete(this[7].__vftable);
  if (!LOBYTE(this[6].__vftable))
    goto LABEL_7;
LABEL_6:
  if (SHIBYTE(this[5].__vftable) < 0)
  {
    operator delete(this[3].__vftable);
    std::exception::~exception(this);
    return;
  }
LABEL_7:
  std::exception::~exception(this);
}

uint64_t sub_23584B630(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 112))
    return a1;
  if (*(_BYTE *)(a1 + 104))
  {
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
        goto LABEL_5;
LABEL_9:
      operator delete(*(void **)(a1 + 48));
      if (!*(_BYTE *)(a1 + 40))
        return a1;
      goto LABEL_6;
    }
    operator delete(*(void **)(a1 + 80));
    if (*(char *)(a1 + 71) < 0)
      goto LABEL_9;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_6:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

_BYTE *sub_23584B6BC(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;

  *__dst = 0;
  __dst[96] = 0;
  if (*((_BYTE *)a2 + 96))
  {
    *__dst = 0;
    __dst[24] = 0;
    if (*((_BYTE *)a2 + 24))
    {
      if (*((char *)a2 + 23) < 0)
      {
        sub_23584B488(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v4 = *a2;
        *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
        *(_OWORD *)__dst = v4;
      }
      __dst[24] = 1;
    }
    sub_23584B800(__dst + 32, a2 + 2);
    __dst[96] = 1;
  }
  return __dst;
}

void sub_23584B744(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  sub_23584B774(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23584B774(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 96))
    return a1;
  if (*(_BYTE *)(a1 + 88))
  {
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_5;
LABEL_9:
      operator delete(*(void **)(a1 + 32));
      if (!*(_BYTE *)(a1 + 24))
        return a1;
      goto LABEL_6;
    }
    operator delete(*(void **)(a1 + 64));
    if (*(char *)(a1 + 55) < 0)
      goto LABEL_9;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 24))
    return a1;
LABEL_6:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

char *sub_23584B800(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  *__dst = 0;
  __dst[56] = 0;
  if (*((_BYTE *)a2 + 56))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_23584B488(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v4;
    }
    *((_QWORD *)__dst + 3) = *((_QWORD *)a2 + 3);
    v5 = __dst + 32;
    if (*((char *)a2 + 55) < 0)
    {
      sub_23584B488(v5, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
    }
    else
    {
      v6 = a2[2];
      *((_QWORD *)__dst + 6) = *((_QWORD *)a2 + 6);
      *(_OWORD *)v5 = v6;
    }
    __dst[56] = 1;
  }
  return __dst;
}

void sub_23584B898(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
  {
    operator delete(*(void **)v1);
    sub_23584B8D0(v1);
    _Unwind_Resume(a1);
  }
  sub_23584B8D0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23584B8D0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 56))
    return a1;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

void sub_23584B930(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_2506DF3A0;
  if (!LOBYTE(this[15].__vftable))
    goto LABEL_10;
  if (!LOBYTE(this[14].__vftable))
    goto LABEL_5;
  if (SHIBYTE(this[13].__vftable) < 0)
  {
    operator delete(this[11].__vftable);
    if ((SHIBYTE(this[9].__vftable) & 0x80000000) == 0)
    {
LABEL_5:
      if (!LOBYTE(this[6].__vftable))
        goto LABEL_10;
      goto LABEL_6;
    }
  }
  else if ((SHIBYTE(this[9].__vftable) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(this[7].__vftable);
  if (!LOBYTE(this[6].__vftable))
    goto LABEL_10;
LABEL_6:
  if (SHIBYTE(this[5].__vftable) < 0)
    operator delete(this[3].__vftable);
LABEL_10:
  std::exception::~exception(this);
  JUMPOUT(0x23B7D94C4);
}

void sub_23584B9D4(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x23B7D94C4);
}

_QWORD *sub_23584B9FC(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL)
      sub_23584B34C();
    v7 = 44;
    if (__len > 0x2C)
      v7 = __len;
    v8 = (v7 | 7) + 1;
    v6 = operator new(v8);
    memcpy(v6, __src, __len);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      v6 = __dst;
    }
  }
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void **sub_23584BAC0(void **a1, void *__src, size_t __len)
{
  unint64_t v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v13;
  uint64_t v14;

  v6 = (unint64_t)a1[2];
  v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) > __len)
  {
    v8 = *a1;
    a1[1] = (void *)__len;
    if (__len)
      memmove(v8, __src, __len);
    goto LABEL_12;
  }
  v9 = 0x7FFFFFFFFFFFFFF7;
  if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1)
    sub_23584B34C();
  v10 = v7 - 1;
  v11 = a1;
  if ((v6 & 0x8000000000000000) == 0)
  {
    if (v10 > 0x3FFFFFFFFFFFFFF2)
      goto LABEL_7;
LABEL_14:
    v13 = 2 * v10;
    if (__len > 2 * v10)
      v13 = __len;
    v14 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v14 = v13 | 7;
    if (v13 >= 0x17)
      v9 = v14 + 1;
    else
      v9 = 23;
    v8 = operator new(v9);
    if (!__len)
      goto LABEL_9;
    goto LABEL_8;
  }
  v11 = *a1;
  if (v10 <= 0x3FFFFFFFFFFFFFF2)
    goto LABEL_14;
LABEL_7:
  v8 = operator new(0x7FFFFFFFFFFFFFF7uLL);
  if (__len)
LABEL_8:
    memcpy(v8, __src, __len);
LABEL_9:
  if (v10 != 22)
    operator delete(v11);
  a1[1] = (void *)__len;
  a1[2] = (void *)(v9 | 0x8000000000000000);
  *a1 = v8;
LABEL_12:
  *((_BYTE *)v8 + __len) = 0;
  return a1;
}

uint64_t sub_23584BC04(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_2506DF3B8[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void sub_23584BC5C()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8D8] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB738], (void (*)(void *))std::exception::~exception);
}

_DWORD *sub_23584BC94(_DWORD *a1, const char **a2)
{
  uint64_t v4;
  const char *v5;
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_2506DF3B8[v4])(&v12, a1);
  a1[6] = -1;
  v5 = *a2;
  v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_23584B34C();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *((_QWORD *)a1 + 1) = v7;
    *((_QWORD *)a1 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v6;
    v8 = a1;
    if (!v6)
      goto LABEL_11;
  }
  memmove(v8, v5, v7);
LABEL_11:
  *((_BYTE *)v8 + v7) = 0;
  a1[6] = 1;
  return a1;
}

void sub_23584BD8C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void sub_23584BDA0(uint64_t a1, void **a2)
{
  void **v2;
  void **v4;
  void *v5;
  void *v6;

  v2 = (void **)*a2;
  if (*a2)
  {
    v4 = (void **)a2[1];
    v5 = *a2;
    if (v4 == v2)
    {
      a2[1] = v2;
      operator delete(v5);
    }
    else
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v2);
      v6 = *a2;
      a2[1] = v2;
      operator delete(v6);
    }
  }
}

_QWORD *sub_23584BE28(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  char *v9;
  __int128 *v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL)
      sub_235847D5C();
    v5 = 24 * a3;
    v6 = (char *)operator new(24 * a3);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      v9 = &v6[v7];
      v10 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        sub_23584B488(v9, *(void **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v8 = *v10;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
        *(_OWORD *)v9 = v8;
      }
      v7 += 24;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_23584BF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_23584BF50(&a9);
  _Unwind_Resume(a1);
}

void sub_23584BF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_23584BF50(&a9);
  _Unwind_Resume(a1);
}

void ***sub_23584BF50(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 3;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_23584BFE4(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v5;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_DWORD *sub_23584C048(_DWORD ***a1)
{
  return sub_23584C064(**a1, (char *)(*a1)[1]);
}

void sub_23584C054(uint64_t a1, uint64_t a2)
{
  sub_23584C154((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_23584C064(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_2506DF3B8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_23584B34C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_23584C154(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_23584B34C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_2506DF3B8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_23584BE28((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_23584C308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_235847B00(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_23584C34C(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_23584C444((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_23584B34C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_23584C43C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_23584C444(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_235847D5C();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_2358482F0();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_23584B34C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_23584C640(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23584BFE4((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_23584C654(__n128 ***a1)
{
  __n128 *v1;
  __n128 *v2;
  uint64_t v3;
  __n128 result;
  char v5;

  v1 = **a1;
  v2 = (*a1)[1];
  v3 = v1[1].n128_u32[2];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, __n128 *))off_2506DF3B8[v3])(&v5, v1);
  v1[1].n128_u32[2] = -1;
  result = *v2;
  v1[1].n128_u64[0] = v2[1].n128_u64[0];
  *v1 = result;
  v2->n128_u64[1] = 0;
  v2[1].n128_u64[0] = 0;
  v2->n128_u64[0] = 0;
  v1[1].n128_u32[2] = 1;
  return result;
}

void sub_23584C6CC(uint64_t a1, uint64_t a2)
{
  sub_23584C740((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

char *sub_23584C6D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  __int128 v5;
  char *result;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_23584C8A4((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
  }
  else
  {
    v5 = *(_OWORD *)v3;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v3 + 16);
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)v3 = 0;
    result = (char *)(v4 + 24);
    *(_QWORD *)(a2 + 8) = v4 + 24;
  }
  return result;
}

void sub_23584C740(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void *v9;
  _BYTE v10[15];
  char v11;
  void *__p[2];
  uint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v14 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v14[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = v3;
  *(_QWORD *)v10 = v14[0];
  *(_QWORD *)&v10[7] = *(_QWORD *)((char *)v14 + 7);
  v11 = v4;
  memset(v14, 0, 15);
  v5 = a1[1];
  v6 = *(_QWORD *)(v5 + 16);
  *(_OWORD *)__p = *(_OWORD *)v5;
  v13 = v6;
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  v7 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, uint64_t))off_2506DF3B8[v7])(&v8, v2);
  *(_DWORD *)(v2 + 24) = -1;
  sub_23584BE28((_QWORD *)v2, (uint64_t)&v9, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((v11 & 0x80000000) == 0)
      return;
LABEL_7:
    operator delete(v9);
    return;
  }
  operator delete(__p[0]);
  if (v11 < 0)
    goto LABEL_7;
}

void sub_23584C868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_235847B00(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_23584C8A4(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void **v11;
  void **v12;
  __int128 v13;
  void **v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_235847D5C();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_2358482F0();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (void **)*a1;
  v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v12 - 3);
      *((_QWORD *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    v12 = (void **)*a1;
    v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0)
        operator delete(*(v14 - 3));
      v14 -= 3;
    }
  }
  if (v12)
    operator delete(v12);
  return v10;
}

void sub_23584C9F8(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

__n128 sub_23584CA04@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

void sub_23584CA20(uint64_t *a1@<X1>, std::string *a2@<X8>, int64x2_t a3@<Q3>, int8x16_t a4@<Q5>)
{
  sub_23584CA30(*a1, a1[1], 0, 0, a2, a3, a4);
}

void sub_23584CA30(uint64_t a1@<X0>, uint64_t a2@<X1>, const std::string::value_type *a3@<X2>, std::string::size_type a4@<X3>, std::string *a5@<X8>, int64x2_t a6@<Q3>, int8x16_t a7@<Q5>)
{
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  int64x2_t v22;
  int8x16_t v23;
  int64x2_t v24;
  const double *v25;
  const double *v26;
  unsigned __int128 v27;
  unsigned __int128 v28;
  int32x2_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int32x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  int v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  uint64_t i;
  int v40;
  const std::string::value_type *v41;
  std::string::size_type v42;

  v12 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  if (v12 <= 1)
    v13 = 1;
  else
    v13 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  v14 = (v13 - 1) * a4;
  v15 = a2 - a1;
  if (a2 == a1)
  {
    v16 = 0;
  }
  else
  {
    if ((unint64_t)(v15 - 24) >= 0x60)
    {
      v18 = (v15 - 24) / 0x18uLL + 1;
      v19 = v18 & 3;
      if ((v18 & 3) == 0)
        v19 = 4;
      v20 = v18 - v19;
      v17 = a1 + 24 * v20;
      v21 = (unsigned __int8 *)(a1 + 47);
      v22 = 0uLL;
      v23.i64[0] = 255;
      v23.i64[1] = 255;
      v24 = 0uLL;
      do
      {
        a6.i8[0] = *(v21 - 24);
        a6.i8[4] = *v21;
        a7.i8[0] = v21[24];
        a7.i8[4] = v21[48];
        v25 = (const double *)(v21 - 39);
        v26 = (const double *)(v21 + 9);
        v27 = (unsigned __int128)vld3q_f64(v25);
        v28 = (unsigned __int128)vld3q_f64(v26);
        v29 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a6.i8, 0x18uLL), 0x18uLL));
        v30.i64[0] = v29.i32[0];
        v30.i64[1] = v29.i32[1];
        v31 = v30;
        v32 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a7.i8, 0x18uLL), 0x18uLL));
        v30.i64[0] = v32.i32[0];
        v30.i64[1] = v32.i32[1];
        v33 = v30;
        v30.i64[0] = a6.u32[0];
        v30.i64[1] = a6.u32[1];
        v34 = vbicq_s8(v30, v31);
        v30.i64[0] = a7.u32[0];
        v30.i64[1] = a7.u32[1];
        a6 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)v27, v31), vandq_s8(v34, v23));
        a7 = vandq_s8((int8x16_t)v28, v33);
        v22 = vaddq_s64(a6, v22);
        v24 = vaddq_s64((int64x2_t)vorrq_s8(a7, vandq_s8(vbicq_s8(v30, v33), v23)), v24);
        v21 += 96;
        v20 -= 4;
      }
      while (v20);
      v16 = vaddvq_s64(vaddq_s64(v24, v22));
    }
    else
    {
      v16 = 0;
      v17 = a1;
    }
    do
    {
      v35 = *(unsigned __int8 *)(v17 + 23);
      if ((v35 & 0x80u) != 0)
        v35 = *(_QWORD *)(v17 + 8);
      v16 += v35;
      v17 += 24;
    }
    while (v17 != a2);
  }
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a5, v16 + v14);
  if (v15 >= 1)
  {
    v36 = *(char *)(a1 + 23);
    v37 = v36 >= 0 ? (const std::string::value_type *)a1 : *(const std::string::value_type **)a1;
    v38 = v36 >= 0 ? *(unsigned __int8 *)(a1 + 23) : *(_QWORD *)(a1 + 8);
    std::string::append(a5, v37, v38);
    if ((unint64_t)v12 >= 2)
    {
      for (i = a1 + 24; i != a2; i += 24)
      {
        std::string::append(a5, a3, a4);
        v40 = *(char *)(i + 23);
        if (v40 >= 0)
          v41 = (const std::string::value_type *)i;
        else
          v41 = *(const std::string::value_type **)i;
        if (v40 >= 0)
          v42 = *(unsigned __int8 *)(i + 23);
        else
          v42 = *(_QWORD *)(i + 8);
        std::string::append(a5, v41, v42);
      }
    }
  }
}

void sub_23584CC3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23584CC60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_23584CD64(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x23B7D9458](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23584CD98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23B7D9458](a1 + 128);
  return a1;
}

uint64_t sub_23584CE20(uint64_t a1, char *__s)
{
  size_t v4;
  size_t v5;
  __int128 *p_dst;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 __dst;
  unint64_t v12;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_23584B34C();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = v5;
    v12 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v5);
    *((_BYTE *)p_dst + v5) = 0;
    if ((SHIBYTE(v12) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_10:
    v9 = (void *)__dst;
    sub_23584B488((_BYTE *)a1, (void *)__dst, *((unint64_t *)&__dst + 1));
    *(_BYTE *)(a1 + 24) = 1;
    *(_BYTE *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 88) = 0;
    operator delete(v9);
    return a1;
  }
  HIBYTE(v12) = v4;
  p_dst = &__dst;
  if (v4)
    goto LABEL_9;
  LOBYTE(__dst) = 0;
  if (SHIBYTE(v12) < 0)
    goto LABEL_10;
LABEL_5:
  *(_OWORD *)a1 = __dst;
  *(_QWORD *)(a1 + 16) = v12;
  *(_BYTE *)(a1 + 24) = 1;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  return a1;
}

void sub_23584CF34(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23584CF48(unsigned int a1@<W0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  const std::error_category *v8;
  char v9;
  uint64_t v10;
  int v11;
  void *v12;
  int v13;
  uint64_t v14;
  char v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const std::error_category *v20;
  void *__dst[2];
  char v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  char v29;
  void *__p;
  __int128 v31;
  unsigned __int8 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  unsigned __int8 v38;
  char v39;
  _QWORD v40[2];
  _QWORD v41[2];
  _QWORD v42[4];

  v42[2] = *MEMORY[0x24BDAC8D0];
  sub_23584B6BC(__dst, a2);
  v8 = std::generic_category();
  sub_23584B6BC(&__p, (__int128 *)__dst);
  v10 = a1;
  if (!v39)
  {
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = v8;
    *(_BYTE *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 112) = 0;
    goto LABEL_18;
  }
  v11 = v32;
  if (v32)
  {
    v12 = __p;
    v42[0] = v31;
    *(_QWORD *)((char *)v42 + 7) = *(_QWORD *)((char *)&v31 + 7);
    LOBYTE(a1) = HIBYTE(v31);
    v31 = 0uLL;
    __p = 0;
    v13 = v38;
    if (v38)
      goto LABEL_4;
  }
  else
  {
    v12 = 0;
    v13 = v38;
    if (v38)
    {
LABEL_4:
      v14 = v33;
      v41[0] = v34;
      *(_QWORD *)((char *)v41 + 7) = *(_QWORD *)((char *)&v34 + 7);
      v5 = HIBYTE(v34);
      v33 = 0;
      v34 = 0uLL;
      v4 = v35;
      v3 = v36;
      v40[0] = v37;
      *(_QWORD *)((char *)v40 + 7) = *(_QWORD *)((char *)&v37 + 7);
      v9 = HIBYTE(v37);
      v36 = 0;
      v37 = 0uLL;
      if (!v32)
        goto LABEL_11;
      goto LABEL_9;
    }
  }
  v14 = 0;
  if (!v32)
    goto LABEL_11;
LABEL_9:
  if (SHIBYTE(v31) < 0)
  {
    v19 = v10;
    v20 = v8;
    v15 = v9;
    operator delete(__p);
    v9 = v15;
    *(_QWORD *)a3 = v19;
    *(_QWORD *)(a3 + 8) = v20;
    *(_BYTE *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 112) = 0;
    v16 = (_BYTE *)(a3 + 112);
    *(_BYTE *)(a3 + 40) = 0;
LABEL_12:
    v17 = v42[0];
    *(_QWORD *)(a3 + 16) = v12;
    *(_QWORD *)(a3 + 24) = v17;
    *(_QWORD *)(a3 + 31) = *(_QWORD *)((char *)v42 + 7);
    *(_BYTE *)(a3 + 39) = a1;
    v42[0] = 0;
    *(_QWORD *)((char *)v42 + 7) = 0;
    *(_BYTE *)(a3 + 40) = 1;
    LOBYTE(a1) = 0;
    v12 = 0;
    goto LABEL_13;
  }
LABEL_11:
  *(_QWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = v8;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  v16 = (_BYTE *)(a3 + 112);
  *(_BYTE *)(a3 + 40) = 0;
  if (v11)
    goto LABEL_12;
LABEL_13:
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (v13)
  {
    v18 = v41[0];
    *(_QWORD *)(a3 + 48) = v14;
    *(_QWORD *)(a3 + 56) = v18;
    *(_QWORD *)(a3 + 63) = *(_QWORD *)((char *)v41 + 7);
    *(_BYTE *)(a3 + 71) = v5;
    v41[0] = 0;
    *(_QWORD *)((char *)v41 + 7) = 0;
    *(_QWORD *)(a3 + 72) = v4;
    *(_QWORD *)(a3 + 80) = v3;
    *(_QWORD *)(a3 + 88) = v40[0];
    *(_QWORD *)(a3 + 95) = *(_QWORD *)((char *)v40 + 7);
    *(_BYTE *)(a3 + 103) = v9;
    v40[0] = 0;
    *(_QWORD *)((char *)v40 + 7) = 0;
    *(_BYTE *)(a3 + 104) = 1;
  }
  *v16 = 1;
  if (v11 && (a1 & 0x80) != 0)
    operator delete(v12);
LABEL_18:
  if (!v29)
    return;
  if (!v28)
    goto LABEL_22;
  if (v27 < 0)
  {
    operator delete(v26);
    if (v25 < 0)
      goto LABEL_27;
LABEL_22:
    if (!v23)
      return;
    goto LABEL_23;
  }
  if ((v25 & 0x80000000) == 0)
    goto LABEL_22;
LABEL_27:
  operator delete(v24);
  if (!v23)
    return;
LABEL_23:
  if (v22 < 0)
    operator delete(__dst[0]);
}

void sub_23584D1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23584B774((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_23584D1D8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x23B7D9338](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!sub_23584D33C(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x23B7D9344](v13);
  return a1;
}

void sub_23584D2E0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x23B7D9344](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x23584D2C0);
}

void sub_23584D328(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_23584D33C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__b[2];
  int64_t v22;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        sub_23584B34C();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        v13 = __b;
      }
      memset(v13, __c, v12);
      *((_BYTE *)v13 + v12) = 0;
      if (v22 >= 0)
        v16 = __b;
      else
        v16 = (void **)__b[0];
      v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 96))(v6, v16, v12);
      v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12)
          return 0;
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(_QWORD *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_23584D4C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_23584D4E0(_DWORD ***a1)
{
  return sub_23584D4FC(**a1, (char *)(*a1)[1]);
}

void sub_23584D4EC(uint64_t a1, uint64_t a2)
{
  sub_23584D5EC((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_23584D4FC(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_2506DF3D0[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_23584B34C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_23584D5EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_23584B34C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_2506DF3D0[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_23584BE28((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_23584D7A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_235847B00(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_23584D7E4(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_23584D8DC((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_23584B34C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_23584D8D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_23584D8DC(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_235847D5C();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_2358482F0();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_23584B34C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_23584DAD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23584BFE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23584DAEC()
{
  uint64_t v0;
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  char **v3;
  char **v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  _DWORD *v45;
  _DWORD *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  char v52;
  _DWORD *v53;
  uint64_t v54;
  unsigned __int8 *v55;
  int v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t *v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  void *v69;
  uint64_t *v70;
  unsigned int v71;
  unint64_t v72;
  void *v73;
  int v74;
  unint64_t v75;
  unsigned int v76;
  _QWORD *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  size_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  _DWORD *v106;
  _DWORD *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  int8x16_t *v112;
  int8x16_t *v113;
  unint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t *v126;
  void *v127;
  uint64_t v128;
  int8x16_t *v129;
  uint64_t v130;
  int8x16_t v131;
  _QWORD *v132;
  int v133;
  _DWORD *v134;
  unsigned int v135;
  char *v136;
  unint64_t v137;
  unint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  int v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  _QWORD *v155;
  int v156;
  _QWORD *v157;
  int v158;
  const void *v159;
  int v160;
  _QWORD *v161;
  void **v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  void **v168;
  _QWORD *v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  _QWORD *v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  size_t v184;
  char *v185;
  char *v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  size_t v191;
  char *v192;
  unint64_t v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  char v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  _QWORD *v204;
  _QWORD *v205;
  unint64_t v206;
  char v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  unsigned int v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  int8x16_t v215;
  uint8x8_t v216;
  uint64_t v217;
  uint8x8_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  _QWORD *v223;
  unint64_t v224;
  char *v225;
  _QWORD *v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  void *v238;
  int v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  _DWORD *v244;
  void *v245;
  void *v246;
  _DWORD *v247;
  void *v248;
  void *v249;
  void *v250;
  int v251;
  uint64_t v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  char v261;
  int v262;
  _QWORD *v263;
  _QWORD *v264;
  unint64_t v265;
  _QWORD *v266;
  _QWORD *v267;
  void *v268;
  int v269[2];
  void *v270;
  unint64_t v271;
  uint64_t v272;
  void *v273;
  unint64_t v274;
  unint64_t v275;
  __int128 v276[6];
  char v277;
  int8x16_t v278;
  void *v279;
  unint64_t v280;
  unint64_t v281;
  __int128 v282;
  char v283;
  char v284;
  void *v285;
  char v286;
  void *v287;
  char v288;
  char v289;
  char v290;
  void *v291;
  _BYTE *v292;
  _QWORD *v293;
  void *v294;
  unint64_t v295;
  unint64_t v296;
  __int128 v297;
  char v298;
  char v299;
  void *v300;
  char v301;
  void *v302;
  char v303;
  char v304;
  char v305;
  void *v306;
  _BYTE *v307;
  char *v308;
  void *v309[3];
  void *v310[3];
  _DWORD *v311;
  _DWORD *v312;
  __int128 v313;
  uint64_t v314;
  char v315;
  void *v316;
  char v317;
  void *v318;
  char v319;
  char v320;
  char v321;
  __int128 v322;
  uint64_t v323;
  __int128 v324;
  char v325;
  char v326;
  void *v327;
  char v328;
  void *v329;
  char v330;
  char v331;
  char v332;
  __int128 v333;
  uint64_t v334;
  char v335;
  void *v336;
  char v337;
  void *v338;
  char v339;
  char v340;
  char v341;
  __int128 v342;
  uint64_t v343;
  unsigned __int8 *v344;
  void *v345;
  uint64_t v346;
  __int128 v347;
  __int128 v348;
  char v349;
  char v350;
  void *v351;
  char v352;
  void *v353;
  char v354;
  char v355;
  char v356;
  char v357;
  void *v358;
  unint64_t v359;
  void *v360[128];
  _BYTE __dst[896];
  _OWORD __src[64];
  uint64_t v363;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = v0;
  v363 = *MEMORY[0x24BDAC8D0];
  sub_235858D60(v3, v1, &v358);
  sub_235859184((uint64_t)&v358, v2, (uint64_t)&v347);
  if (v357)
  {
    v8 = sub_23584B154((uint64_t)&v347);
    v344 = v2;
    sub_23585238C(&v345, v8);
    v9 = *v2;
    v10 = v9 - 8;
    switch(v9)
    {
      case 8:
        goto LABEL_5;
      case 64:
        v12 = 0;
        v19 = 0;
        v20 = 8;
        v21 = 5;
        v22 = 88;
        goto LABEL_47;
      case 16:
LABEL_5:
        v11 = 19;
        v12 = 0;
        if (*v2 <= 0xFu)
          goto LABEL_6;
        break;
      default:
        v11 = 9;
        v12 = 0;
        if (*v2 <= 0xFu)
        {
LABEL_6:
          if (*v2)
          {
            v13 = (uint64_t *)operator new(8uLL);
            *v13 = 13;
            goto LABEL_8;
          }
          goto LABEL_33;
        }
        break;
    }
    if (v9 != 16)
    {
      if (v346 != 8 || *(_BYTE *)v345)
      {
        v12 = 0;
        v20 = 0;
        v22 = 8 * v11;
        goto LABEL_43;
      }
      v13 = (uint64_t *)operator new(8uLL);
      v62 = 0;
      v63 = 0;
      *v13 = 0;
      v64 = v13;
      do
      {
        v66 = 1 << v62;
        if (byte_2358809D5[v63])
          v65 = *v64 | v66;
        else
          v65 = *v64 & ~v66;
        *v64 = v65;
        ++v63;
        v64 += v62 == 63;
        if (v62 == 63)
          v62 = 0;
        else
          ++v62;
      }
      while (v63 != 45);
LABEL_8:
      v14 = *v2;
      v12 = 1;
      if (v14 <= 0xF)
      {
        if (!*v2)
          goto LABEL_32;
        v23 = (uint64_t *)operator new(8uLL);
        *v23 = 13;
        v12 = -5;
      }
      else
      {
        if (v14 == 16 || v14 == 64)
          goto LABEL_32;
        if (v346 != 8 || *(_BYTE *)v345)
        {
          v12 = 1;
LABEL_32:
          operator delete(v13);
          v9 = *v344;
          goto LABEL_33;
        }
        v23 = (uint64_t *)operator new(8uLL);
        v251 = 0;
        v252 = 0;
        *v23 = 0;
        v253 = v23;
        do
        {
          v255 = 1 << v251;
          if (byte_2358809D5[v252])
            v254 = *v253 | v255;
          else
            v254 = *v253 & ~v255;
          *v253 = v254;
          ++v252;
          v253 += v251 == 63;
          if (v251 == 63)
            v251 = 0;
          else
            ++v251;
        }
        while (v252 != 45);
        v12 = -44;
      }
      operator delete(v23);
      goto LABEL_32;
    }
LABEL_33:
    v20 = 8;
    v24 = 5;
    if ((v10 & 0xF7) != 0)
      v24 = 8;
    v22 = v11 * (unint64_t)v24;
    if (v9 == 8)
      goto LABEL_38;
    if (v9 != 110)
    {
      if (v9 != 16)
      {
LABEL_39:
        if (v9 == 8)
        {
          v19 = -6;
        }
        else
        {
          if (v9 != 16)
          {
            v19 = 0;
            v21 = 5;
            goto LABEL_47;
          }
          v19 = 0;
        }
        v21 = 9;
LABEL_47:
        v25 = v22 + v12 + v19 + v20 * (unint64_t)v21;
        v26 = (v25 + 7) >> 3;
        v27 = v4[1] - *v4;
        if (v27 > v26)
        {
          LODWORD(v360[3]) = -1;
          v360[0] = operator new(0x20uLL);
          *(_OWORD *)&v360[1] = xmmword_23587FE70;
          strcpy((char *)v360[0], "Invalid message length: ");
          LODWORD(v360[3]) = 1;
          std::to_string((std::string *)__dst, v27);
          *(_QWORD *)&__src[0] = v360;
          *((_QWORD *)&__src[0] + 1) = __dst;
          *(_QWORD *)&__src[1] = v360;
          *((_QWORD *)&__src[1] + 1) = __dst;
          *(_QWORD *)&__src[2] = __dst;
          if (LODWORD(v360[3]) == -1)
            sub_23584BC5C();
          *(_QWORD *)&v322 = __src;
          ((void (*)(__int128 *, void **))off_2506DF3E8[LODWORD(v360[3])])(&v322, v360);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          *(_QWORD *)&__src[0] = v360;
          *((_QWORD *)&__src[0] + 1) = " (max supported: ";
          *(_QWORD *)&__src[1] = v360;
          *((_QWORD *)&__src[1] + 1) = " (max supported: ";
          *(_QWORD *)&__src[2] = " (max supported: ";
          if (LODWORD(v360[3]) == -1)
            sub_23584BC5C();
          *(_QWORD *)__dst = __src;
          ((void (*)(_BYTE *, void **))off_2506DF430[LODWORD(v360[3])])(__dst, v360);
          std::to_string((std::string *)__dst, v26);
          *(_QWORD *)&__src[0] = v360;
          *((_QWORD *)&__src[0] + 1) = __dst;
          *(_QWORD *)&__src[1] = v360;
          *((_QWORD *)&__src[1] + 1) = __dst;
          *(_QWORD *)&__src[2] = __dst;
          if (LODWORD(v360[3]) == -1)
            sub_23584BC5C();
          *(_QWORD *)&v322 = __src;
          ((void (*)(__int128 *, void **))off_2506DF3E8[LODWORD(v360[3])])(&v322, v360);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          *(_QWORD *)&__src[0] = v360;
          *((_QWORD *)&__src[0] + 1) = ")";
          *(_QWORD *)&__src[1] = v360;
          *((_QWORD *)&__src[1] + 1) = ")";
          *(_QWORD *)&__src[2] = ")";
          if (LODWORD(v360[3]) == -1)
            sub_23584BC5C();
          *(_QWORD *)__dst = __src;
          ((void (*)(_BYTE *, void **))off_2506DF448[LODWORD(v360[3])])(__dst, v360);
          if (LODWORD(v360[3]) == -1)
            sub_23584BC5C();
          *(_QWORD *)&__src[0] = __dst;
          ((void (*)(__int128 *__return_ptr, _OWORD *, void **))off_2506DF418[LODWORD(v360[3])])(&v342, __src, v360);
          if (LODWORD(v360[3]) != -1)
            ((void (*)(_OWORD *, void **))off_2506DF400[LODWORD(v360[3])])(__src, v360);
          if (SHIBYTE(v343) < 0)
          {
            sub_23584B488(&v333, (void *)v342, *((unint64_t *)&v342 + 1));
          }
          else
          {
            v333 = v342;
            v334 = v343;
          }
          v335 = 1;
          LOBYTE(v336) = 0;
          v340 = 0;
          v341 = 1;
          sub_23584CF48(0x16u, &v333, (uint64_t)__src);
          *(_OWORD *)v7 = __src[0];
          *(_BYTE *)(v7 + 16) = 0;
          *(_BYTE *)(v7 + 112) = 0;
          if (LOBYTE(__src[7]))
          {
            *(_BYTE *)(v7 + 40) = 0;
            v35 = BYTE8(__src[2]);
            if (BYTE8(__src[2]))
            {
              *(_OWORD *)(v7 + 16) = __src[1];
              *(_QWORD *)(v7 + 32) = *(_QWORD *)&__src[2];
              memset(&__src[1], 0, 24);
              *(_BYTE *)(v7 + 40) = 1;
            }
            *(_BYTE *)(v7 + 48) = 0;
            *(_BYTE *)(v7 + 104) = 0;
            if (BYTE8(__src[6]))
            {
              v36 = *((_QWORD *)&__src[4] + 1);
              *(_QWORD *)(v7 + 64) = *(_QWORD *)&__src[4];
              *(_OWORD *)(v7 + 48) = __src[3];
              __src[3] = 0uLL;
              *(_QWORD *)(v7 + 72) = v36;
              *(_OWORD *)(v7 + 80) = __src[5];
              *(_QWORD *)(v7 + 96) = *(_QWORD *)&__src[6];
              *(_QWORD *)&__src[4] = 0;
              memset(&__src[5], 0, 24);
              *(_BYTE *)(v7 + 104) = 1;
            }
            *(_BYTE *)(v7 + 112) = 1;
            *(_BYTE *)(v7 + 120) = 0;
            if (v35 && SBYTE7(__src[2]) < 0)
              operator delete(*(void **)&__src[1]);
            if (!v341)
              goto LABEL_99;
          }
          else
          {
            *(_BYTE *)(v7 + 120) = 0;
            if (!v341)
            {
LABEL_99:
              if ((SHIBYTE(v343) & 0x80000000) == 0)
                goto LABEL_527;
              v37 = (void *)v342;
              goto LABEL_526;
            }
          }
          if (v340)
          {
            if (v339 < 0)
              operator delete(v338);
            if (v337 < 0)
              operator delete(v336);
          }
          if (v335 && SHIBYTE(v334) < 0)
            operator delete((void *)v333);
          goto LABEL_99;
        }
        if (v27 < v26)
        {
          v28 = *v2;
          if (v28 == 110 || v28 == 8)
          {
            sub_23584CE20((uint64_t)&v324, "Please pad data with extra 0!");
            v332 = 1;
            sub_23584CF48(0x16u, &v324, (uint64_t)__src);
            *(_OWORD *)v7 = __src[0];
            *(_BYTE *)(v7 + 16) = 0;
            *(_BYTE *)(v7 + 112) = 0;
            if (LOBYTE(__src[7]))
            {
              *(_BYTE *)(v7 + 40) = 0;
              v29 = BYTE8(__src[2]);
              if (BYTE8(__src[2]))
              {
                *(_OWORD *)(v7 + 16) = __src[1];
                *(_QWORD *)(v7 + 32) = *(_QWORD *)&__src[2];
                memset(&__src[1], 0, 24);
                *(_BYTE *)(v7 + 40) = 1;
              }
              *(_BYTE *)(v7 + 48) = 0;
              *(_BYTE *)(v7 + 104) = 0;
              if (BYTE8(__src[6]))
              {
                v30 = *((_QWORD *)&__src[4] + 1);
                *(_QWORD *)(v7 + 64) = *(_QWORD *)&__src[4];
                *(_OWORD *)(v7 + 48) = __src[3];
                __src[3] = 0uLL;
                *(_QWORD *)(v7 + 72) = v30;
                *(_OWORD *)(v7 + 80) = __src[5];
                *(_QWORD *)(v7 + 96) = *(_QWORD *)&__src[6];
                *(_QWORD *)&__src[4] = 0;
                memset(&__src[5], 0, 24);
                *(_BYTE *)(v7 + 104) = 1;
              }
              *(_BYTE *)(v7 + 112) = 1;
              *(_BYTE *)(v7 + 120) = 0;
              if (v29 && SBYTE7(__src[2]) < 0)
                operator delete(*(void **)&__src[1]);
            }
            else
            {
              *(_BYTE *)(v7 + 120) = 0;
            }
            if (!v332)
              goto LABEL_527;
            if (v331)
            {
              if (v330 < 0)
                operator delete(v329);
              if (v328 < 0)
                operator delete(v327);
            }
            if (!v326 || (v325 & 0x80000000) == 0)
            {
LABEL_527:
              v18 = v345;
              if (!v345)
                goto LABEL_529;
              goto LABEL_528;
            }
            v37 = (void *)v324;
LABEL_526:
            operator delete(v37);
            goto LABEL_527;
          }
        }
        v264 = v6;
        if (v25 >= v359)
          v25 = v359;
        v31 = v25 - *((_QWORD *)&v347 + 1);
        if ((uint64_t)v359 >= (uint64_t)(v25 - *((_QWORD *)&v347 + 1)))
          v32 = v25 - *((_QWORD *)&v347 + 1);
        else
          v32 = v359;
        v33 = v359 - v32;
        if (v33 < 0)
        {
          v38 = v33 - 63;
          if (v33 - 63 < 0)
            v38 = v33;
          v34 = v38 >> 6;
        }
        else
        {
          v34 = (unint64_t)v33 >> 6;
        }
        v343 = 0;
        v342 = 0uLL;
        v39 = v33 & 0x3F;
        *(_QWORD *)&__src[0] = (char *)v358 + 8 * v34;
        DWORD2(__src[0]) = v39;
        v360[0] = (char *)v358 + 8 * (v359 >> 6);
        LODWORD(v360[1]) = v359 & 0x3F;
        sub_23585200C(&v342, (uint64_t)__src, (uint64_t)v360, (v359 & 0x3F) - v39 + 8 * (8 * (v359 >> 6) - 8 * v34));
        v40 = *((_QWORD *)&v347 + 1);
        v41 = v359 - v31;
        if (*((_QWORD *)&v347 + 1) != v359 - v31)
        {
          v42 = *((_QWORD *)&v347 + 1);
          while (((*(_QWORD *)((char *)v358 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v42) & 1) == 0)
          {
            if (v41 == ++v42)
              goto LABEL_108;
          }
          LODWORD(v360[3]) = -1;
          v360[0] = operator new(0x30uLL);
          *(_OWORD *)&v360[1] = xmmword_23587FE20;
          strcpy((char *)v360[0], "Dangerous message found! The bits from index ");
          LODWORD(v360[3]) = 1;
          std::to_string((std::string *)__dst, v40);
          *(_QWORD *)&__src[0] = v360;
          *((_QWORD *)&__src[0] + 1) = __dst;
          *(_QWORD *)&__src[1] = v360;
          *((_QWORD *)&__src[1] + 1) = __dst;
          *(_QWORD *)&__src[2] = __dst;
          if (LODWORD(v360[3]) == -1)
            sub_23584BC5C();
          v310[0] = __src;
          ((void (*)(void **, void **))off_2506DF3E8[LODWORD(v360[3])])(v310, v360);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          *(_QWORD *)&__src[0] = v360;
          *((_QWORD *)&__src[0] + 1) = " to ";
          *(_QWORD *)&__src[1] = v360;
          *((_QWORD *)&__src[1] + 1) = " to ";
          *(_QWORD *)&__src[2] = " to ";
          if (LODWORD(v360[3]) == -1)
            sub_23584BC5C();
          *(_QWORD *)__dst = __src;
          ((void (*)(_BYTE *, void **))off_2506DF460[LODWORD(v360[3])])(__dst, v360);
          std::to_string((std::string *)__dst, v41);
          *(_QWORD *)&__src[0] = v360;
          *((_QWORD *)&__src[0] + 1) = __dst;
          *(_QWORD *)&__src[1] = v360;
          *((_QWORD *)&__src[1] + 1) = __dst;
          *(_QWORD *)&__src[2] = __dst;
          if (LODWORD(v360[3]) == -1)
            sub_23584BC5C();
          v310[0] = __src;
          ((void (*)(void **, void **))off_2506DF3E8[LODWORD(v360[3])])(v310, v360);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          *(_QWORD *)&__src[0] = v360;
          *((_QWORD *)&__src[0] + 1) = " are not all zero which means they'll be erased";
          *(_QWORD *)&__src[1] = v360;
          *((_QWORD *)&__src[1] + 1) = " are not all zero which means they'll be erased";
          *(_QWORD *)&__src[2] = " are not all zero which means they'll be erased";
          if (LODWORD(v360[3]) == -1)
            sub_23584BC5C();
          *(_QWORD *)__dst = __src;
          ((void (*)(_BYTE *, void **))off_2506DF478[LODWORD(v360[3])])(__dst, v360);
          if (LODWORD(v360[3]) == -1)
            sub_23584BC5C();
          *(_QWORD *)&__src[0] = __dst;
          ((void (*)(__int128 *__return_ptr, _OWORD *, void **))off_2506DF418[LODWORD(v360[3])])(&v322, __src, v360);
          if (LODWORD(v360[3]) != -1)
            ((void (*)(_OWORD *, void **))off_2506DF400[LODWORD(v360[3])])(__src, v360);
          if (SHIBYTE(v323) < 0)
          {
            sub_23584B488(&v313, (void *)v322, *((unint64_t *)&v322 + 1));
          }
          else
          {
            v313 = v322;
            v314 = v323;
          }
          v315 = 1;
          LOBYTE(v316) = 0;
          v320 = 0;
          v321 = 1;
          sub_23584CF48(1u, &v313, (uint64_t)__src);
          *(_OWORD *)v7 = __src[0];
          *(_BYTE *)(v7 + 16) = 0;
          *(_BYTE *)(v7 + 112) = 0;
          if (LOBYTE(__src[7]))
          {
            *(_BYTE *)(v7 + 40) = 0;
            v67 = BYTE8(__src[2]);
            if (BYTE8(__src[2]))
            {
              *(_OWORD *)(v7 + 16) = __src[1];
              *(_QWORD *)(v7 + 32) = *(_QWORD *)&__src[2];
              memset(&__src[1], 0, 24);
              *(_BYTE *)(v7 + 40) = 1;
            }
            *(_BYTE *)(v7 + 48) = 0;
            *(_BYTE *)(v7 + 104) = 0;
            if (BYTE8(__src[6]))
            {
              v68 = *((_QWORD *)&__src[4] + 1);
              *(_QWORD *)(v7 + 64) = *(_QWORD *)&__src[4];
              *(_OWORD *)(v7 + 48) = __src[3];
              __src[3] = 0uLL;
              *(_QWORD *)(v7 + 72) = v68;
              *(_OWORD *)(v7 + 80) = __src[5];
              *(_QWORD *)(v7 + 96) = *(_QWORD *)&__src[6];
              *(_QWORD *)&__src[4] = 0;
              memset(&__src[5], 0, 24);
              *(_BYTE *)(v7 + 104) = 1;
            }
            *(_BYTE *)(v7 + 112) = 1;
            *(_BYTE *)(v7 + 120) = 0;
            if (v67 && SBYTE7(__src[2]) < 0)
              operator delete(*(void **)&__src[1]);
          }
          else
          {
            *(_BYTE *)(v7 + 120) = 0;
          }
          if (v321)
          {
            if (v320)
            {
              if (v319 < 0)
                operator delete(v318);
              if (v317 < 0)
                operator delete(v316);
            }
            if (v315 && SHIBYTE(v314) < 0)
              operator delete((void *)v313);
          }
          if (SHIBYTE(v323) < 0)
          {
            v69 = (void *)v322;
LABEL_524:
            operator delete(v69);
          }
LABEL_525:
          v37 = (void *)v342;
          if (!(_QWORD)v342)
            goto LABEL_527;
          goto LABEL_526;
        }
LABEL_108:
        v43 = sub_23584B154((uint64_t)&v347);
        sub_235857F3C((uint64_t)&v342, v43, &v344, &v322);
        v44 = *v2;
        v45 = (_DWORD *)operator new();
        v46 = v45;
        if (((v44 - 8) & 0xF7) != 0)
          v47 = 256;
        else
          v47 = 32;
        if (((v44 - 8) & 0xF7) != 0)
          v48 = 285;
        else
          v48 = 37;
        *v45 = v48;
        v45[1] = v47;
        v45[2] = 1;
        sub_235847F28(v45 + 4);
        v312 = v46;
        v49 = *v2;
        v50 = 67;
        if (v49 != 8 && v49 != 16)
        {
          if (v49 == 110)
          {
            v51 = 0;
            v50 = 0;
            v52 = 0;
LABEL_146:
            v53 = (_DWORD *)operator new();
            *v53 = v50;
            v53[1] = 1 << v52;
            v53[2] = v51;
            sub_235847F28(v53 + 4);
            v311 = v53;
            v54 = v322;
            v55 = v344;
            v56 = *v344;
            v57 = v56 - 8;
            if (v56 == 8)
              goto LABEL_149;
            if (v56 == 64)
            {
              v59 = 0;
              v58 = 11;
              goto LABEL_197;
            }
            if (v56 == 16)
            {
LABEL_149:
              v58 = 19;
              v59 = 0;
              if (*v344 <= 0xFu)
              {
LABEL_150:
                if (!*v344)
                  goto LABEL_197;
                v60 = (uint64_t *)operator new(8uLL);
                *v60 = 13;
                goto LABEL_152;
              }
            }
            else
            {
              v58 = 9;
              v59 = 0;
              if (*v344 <= 0xFu)
                goto LABEL_150;
            }
            if (v56 == 16)
              goto LABEL_197;
            if (v346 != 8 || *(_BYTE *)v345)
            {
              v59 = 0;
              goto LABEL_197;
            }
            v60 = (uint64_t *)operator new(8uLL);
            v239 = 0;
            v240 = 0;
            *v60 = 0;
            v241 = v60;
            do
            {
              v243 = 1 << v239;
              if (byte_2358809D5[v240])
                v242 = *v241 | v243;
              else
                v242 = *v241 & ~v243;
              *v241 = v242;
              ++v240;
              v241 += v239 == 63;
              if (v239 == 63)
                v239 = 0;
              else
                ++v239;
            }
            while (v240 != 45);
LABEL_152:
            v61 = *v55;
            v59 = 1;
            if (v61 <= 0xF)
            {
              if (!*v55)
                goto LABEL_196;
              v70 = (uint64_t *)operator new(8uLL);
              *v70 = 13;
              v59 = -5;
            }
            else
            {
              if (v61 == 16 || v61 == 64)
                goto LABEL_196;
              if (v346 != 8 || *(_BYTE *)v345)
              {
                v59 = 1;
LABEL_196:
                operator delete(v60);
LABEL_197:
                v71 = 8;
                if ((v57 & 0xF7) == 0)
                  v71 = 5;
                v72 = v59 + v58 * (unint64_t)v71;
                v73 = (void *)(v54 + 8 * (v72 >> 6));
                v74 = v72 & 0x3F;
                memset(v310, 0, sizeof(v310));
                v75 = v72 & 0x3F;
                *(_QWORD *)&__src[0] = v322;
                DWORD2(__src[0]) = 0;
                v360[0] = v73;
                LODWORD(v360[1]) = v74;
                sub_23585200C(v310, (uint64_t)__src, (uint64_t)v360, v75 + 8 * (uint64_t)((uint64_t)v73 - v322));
                memset(v309, 0, sizeof(v309));
                *(_QWORD *)&__src[0] = v73;
                DWORD2(__src[0]) = v74;
                v360[0] = (void *)(v322 + 8 * (*((_QWORD *)&v322 + 1) >> 6));
                LODWORD(v360[1]) = BYTE8(v322) & 0x3F;
                sub_23585200C(v309, (uint64_t)__src, (uint64_t)v360, (BYTE8(v322) & 0x3F) - v75 + 8 * ((char *)v360[0] - (char *)v73));
                v76 = *v344;
                if (v76 <= 0xF)
                {
                  if (*v344)
                  {
                    *(_QWORD *)__dst = operator new(8uLL);
                    *(_OWORD *)&__dst[8] = xmmword_23587FE40;
                    **(_QWORD **)__dst = 13;
LABEL_214:
                    sub_23587BB04((uint64_t)v310, (uint64_t *)__dst, v360);
                    sub_235853864((uint64_t *)v360[0], 0, (uint64_t *)v360[0] + ((unint64_t)v360[1] >> 6), (uint64_t)v360[1] & 0x3F, (uint64_t *)v310, (uint64_t **)__src);
                    if (v360[0])
                      operator delete(v360[0]);
                    if (*(_QWORD *)__dst)
                      operator delete(*(void **)__dst);
                  }
                }
                else if (v76 != 16 && v76 != 64 && v346 == 8 && !*(_BYTE *)v345)
                {
                  v77 = operator new(8uLL);
                  v78 = 0;
                  v79 = 0;
                  *(_QWORD *)__dst = v77;
                  *(_OWORD *)&__dst[8] = xmmword_23587FE30;
                  *v77 = 0;
                  do
                  {
                    v81 = 1 << v78;
                    if (byte_2358809D5[v79])
                      v80 = *v77 | v81;
                    else
                      v80 = *v77 & ~v81;
                    *v77 = v80;
                    ++v79;
                    v77 += v78 == 63;
                    if (v78 == 63)
                      v78 = 0;
                    else
                      ++v78;
                  }
                  while (v79 != 45);
                  goto LABEL_214;
                }
                if (*v344 == 8)
                {
                  *(_QWORD *)__dst = operator new(8uLL);
                  *(_OWORD *)&__dst[8] = xmmword_23587FE50;
                  **(_QWORD **)__dst = 109;
                  sub_23587BB04((uint64_t)v309, (uint64_t *)__dst, v360);
                  sub_235853864((uint64_t *)v360[0], 0, (uint64_t *)v360[0] + ((unint64_t)v360[1] >> 6), (uint64_t)v360[1] & 0x3F, (uint64_t *)v309, (uint64_t **)__src);
                  if (v360[0])
                    operator delete(v360[0]);
                  if (*(_QWORD *)__dst)
                    operator delete(*(void **)__dst);
                }
                v82 = *v2;
                switch(v82)
                {
                  case 8:
                    goto LABEL_226;
                  case 64:
                    v83 = 11;
                    goto LABEL_231;
                  case 16:
LABEL_226:
                    v83 = 19;
                    if (v82 == 16)
                      goto LABEL_231;
                    break;
                  default:
                    v83 = 9;
                    break;
                }
                if (v82 != 8)
                {
                  v84 = 4;
                  goto LABEL_233;
                }
LABEL_231:
                v84 = 2;
LABEL_233:
                v85 = v84 + v83;
                v86 = 4 * (v84 + v83);
                v87 = (char *)operator new(v86);
                v88 = &v87[4 * v85];
                v306 = v87;
                v308 = v88;
                bzero(v87, v86);
                if ((((_BYTE)v82 - 8) & 0xF7) != 0)
                  v89 = 8;
                else
                  v89 = 5;
                v307 = v88;
                if (v82 == 8 || v82 == 16)
                {
                  v90 = 19;
                }
                else if (v82 == 64)
                {
                  v90 = 11;
                }
                else
                {
                  v90 = 9;
                }
                v91 = operator new(4 * v90);
                bzero(v91, 4 * v90);
                v92 = 0;
                v93 = 0;
                v94 = (char *)v310[0];
                v95 = v89 & 0xC;
                do
                {
                  v96 = 0;
                  v97 = 0;
                  v98 = *((_DWORD *)v91 + v93);
                  v99 = -2;
                  do
                  {
                    v98 |= ((*(_QWORD *)&v94[((unint64_t)(v92 + v96) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v92 + v96)) & 1) << (v99 + v89 + 1);
                    v97 |= ((*(_QWORD *)&v94[((unint64_t)(v92 + v96 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v92 + v96 + 1)) & 1) << (v89 + (v96 ^ 0xFEu));
                    v96 += 2;
                    v99 -= 2;
                  }
                  while (v95 != v96);
                  v100 = v97 | v98;
                  v101 = (4 * ~(v89 >> 2)) | 3;
                  v102 = v89 & 0xC;
                  if (v89 != v95)
                  {
                    do
                    {
                      v100 |= ((*(_QWORD *)&v94[((unint64_t)(v92 + v102) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v92 + v102)) & 1) << (v89 + v101);
                      ++v102;
                      --v101;
                    }
                    while (v89 != v102);
                  }
                  *((_DWORD *)v91 + v93++) = v100;
                  v92 += v89;
                }
                while (v93 != v90);
                memcpy(v87, v91, 4 * v90);
                operator delete(v91);
                v103 = 4;
                v104 = *v2 - 8;
                if (v104 <= 0x38 && ((1 << v104) & 0x100000000000101) != 0)
                  v103 = 2;
                if ((sub_23587BD9C(&v312, (uint64_t)&v306, v103) & 1) == 0)
                {
                  sub_23584CE20((uint64_t)&v297, "Failed to compute parity for the gap portion of the payload");
                  v305 = 1;
                  sub_235850758((uint64_t)__src, 3u, &v297);
                  *(_OWORD *)v7 = __src[0];
                  *(_BYTE *)(v7 + 16) = 0;
                  *(_BYTE *)(v7 + 112) = 0;
                  if (LOBYTE(__src[7]))
                  {
                    *(_BYTE *)(v7 + 40) = 0;
                    v115 = BYTE8(__src[2]);
                    if (BYTE8(__src[2]))
                    {
                      *(_OWORD *)(v7 + 16) = __src[1];
                      *(_QWORD *)(v7 + 32) = *(_QWORD *)&__src[2];
                      memset(&__src[1], 0, 24);
                      *(_BYTE *)(v7 + 40) = 1;
                    }
                    *(_BYTE *)(v7 + 48) = 0;
                    *(_BYTE *)(v7 + 104) = 0;
                    if (BYTE8(__src[6]))
                    {
                      *(_OWORD *)(v7 + 48) = __src[3];
                      v116 = *((_QWORD *)&__src[4] + 1);
                      *(_QWORD *)(v7 + 64) = *(_QWORD *)&__src[4];
                      *(_QWORD *)(v7 + 72) = v116;
                      *(_OWORD *)(v7 + 80) = __src[5];
                      *(_QWORD *)(v7 + 96) = *(_QWORD *)&__src[6];
                      *(_BYTE *)(v7 + 104) = 1;
                    }
                    *(_BYTE *)(v7 + 112) = 1;
                    *(_BYTE *)(v7 + 120) = 0;
                    if (v115 && SBYTE7(__src[2]) < 0)
                      operator delete(*(void **)&__src[1]);
                  }
                  else
                  {
                    *(_BYTE *)(v7 + 120) = 0;
                  }
                  if (v305)
                  {
                    if (v304)
                    {
                      if (v303 < 0)
                        operator delete(v302);
                      if (v301 < 0)
                        operator delete(v300);
                    }
                    if (v299 && v298 < 0)
                    {
                      v127 = (void *)v297;
LABEL_504:
                      operator delete(v127);
                    }
                  }
LABEL_505:
                  if (v306)
                  {
                    v307 = v306;
                    operator delete(v306);
                  }
                  if (v309[0])
                    operator delete(v309[0]);
                  if (v310[0])
                    operator delete(v310[0]);
                  v244 = v311;
                  if (v311)
                  {
                    v245 = (void *)*((_QWORD *)v311 + 6);
                    if (v245)
                    {
                      *((_QWORD *)v311 + 7) = v245;
                      operator delete(v245);
                    }
                    v246 = (void *)*((_QWORD *)v244 + 3);
                    if (v246)
                    {
                      *((_QWORD *)v244 + 4) = v246;
                      operator delete(v246);
                    }
                    MEMORY[0x23B7D94C4](v244, 0x1010C40DA3B4497);
                  }
                  v247 = v312;
                  if (v312)
                  {
                    v248 = (void *)*((_QWORD *)v312 + 6);
                    if (v248)
                    {
                      *((_QWORD *)v312 + 7) = v248;
                      operator delete(v248);
                    }
                    v249 = (void *)*((_QWORD *)v247 + 3);
                    if (v249)
                    {
                      *((_QWORD *)v247 + 4) = v249;
                      operator delete(v249);
                    }
                    MEMORY[0x23B7D94C4](v247, 0x1010C40DA3B4497);
                  }
                  v69 = (void *)v322;
                  if ((_QWORD)v322)
                    goto LABEL_524;
                  goto LABEL_525;
                }
                if (((*v2 - 8) & 0xF7) != 0)
                  v105 = 8;
                else
                  v105 = 5;
                v106 = v307;
                v107 = v306;
                v108 = (v307 - (_BYTE *)v306) >> 2;
                v295 = 0;
                v296 = 0;
                v109 = v108 * v105;
                v294 = 0;
                v110 = (unint64_t)(v108 * v105) >> 6;
                if (v108 * v105)
                {
                  if ((v109 & 0x8000000000000000) != 0)
                    sub_235847D5C();
                  v111 = (v109 - 1) >> 6;
                  v112 = (int8x16_t *)operator new(8 * (v111 + 1));
                  v113 = v112;
                  v295 = v108 * v105;
                  v296 = v111 + 1;
                  v294 = v112;
                  if (v109 >= 0x41)
                    v114 = (v109 - 1) >> 6;
                  else
                    v114 = 0;
                  v112->i64[v114] = 0;
                  if (v109 >= 0x40)
                    bzero(v112, 8 * ((unint64_t)(v108 * v105) >> 6));
                  if ((v109 & 0x3F) != 0)
                    v113->i64[v110] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v109 & 0x3F));
                }
                else
                {
                  v113 = 0;
                }
                if (v106 != v107)
                {
                  v117 = 0;
                  v118 = -1;
                  do
                  {
                    v119 = 0;
                    v120 = v107[v117++];
                    v121 = v105;
                    do
                    {
                      while (1)
                      {
                        v122 = (unint64_t)(v118 + v121) >> 6;
                        v123 = 1 << (v118 + v121);
                        if (((v120 >> v119) & 1) != 0)
                          break;
                        v113->i64[v122] &= ~v123;
                        ++v119;
                        if (!--v121)
                          goto LABEL_276;
                      }
                      v113->i64[v122] |= v123;
                      ++v119;
                      --v121;
                    }
                    while (v121);
LABEL_276:
                    v118 += v105;
                  }
                  while (v117 != v108);
                }
                LOBYTE(v291) = 0;
                *(_QWORD *)&__src[0] = v113;
                DWORD2(__src[0]) = 0;
                v360[0] = (char *)v113 + 8 * v110;
                LODWORD(v360[1]) = v109 & 0x3F;
                v124 = sub_235852114((uint64_t)__src, (uint64_t)v360, &v291);
                if (v124 > 0x33)
                {
LABEL_303:
                  v132 = operator new(0x10uLL);
                  v292 = v132 + 2;
                  v293 = v132 + 2;
                  *v132 = 0;
                  v132[1] = 0;
                  v291 = v132;
                  v133 = *v2;
                  v134 = operator new(8uLL);
                  v135 = v133 & 0x7F;
                  if (v124 <= 0x33)
                    v135 = v133 | 0x80;
                  *v134 = __rbit32(v135) >> 28;
                  v134[1] = (v135 >> 3) & 4 | (v135 >> 1) & 8 | (v135 >> 5) & 2 | (v135 >> 7);
                  *v132 = *(_QWORD *)v134;
                  operator delete(v134);
                  if ((sub_23587BD9C(v264, (uint64_t)&v291, 2) & 1) != 0)
                  {
                    v136 = (char *)v291;
                    v280 = 0;
                    v281 = 0;
                    v279 = 0;
                    v137 = v292 - (_BYTE *)v291;
                    if (v292 != v291)
                    {
                      if ((v137 & 0x8000000000000000) != 0)
                        sub_235847D5C();
                      v138 = (v137 - 1) >> 6;
                      v139 = operator new(8 * (v138 + 1));
                      v140 = v139;
                      v280 = v137;
                      v281 = v138 + 1;
                      v279 = v139;
                      if (v137 >= 0x41)
                        v141 = (v137 - 1) >> 6;
                      else
                        v141 = 0;
                      v139[v141] = 0;
                      if (v137 >= 0x40)
                        bzero(v139, 8 * (v137 >> 6));
                      v142 = (uint64_t)v137 >> 2;
                      if ((v137 & 0x3F) != 0)
                        v140[v137 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v137 & 0x3F));
                      v143 = 0;
                      while (1)
                      {
                        v144 = *(_DWORD *)&v136[v143];
                        v145 = (v143 + 3) >> 6;
                        v146 = 1 << (v143 + 3);
                        if ((v144 & 1) != 0)
                        {
                          v140[v145] |= v146;
                          v147 = (v143 + 2) >> 6;
                          v148 = 1 << ((v143 + 2) & 0x3E);
                          if ((v144 & 2) == 0)
                            goto LABEL_323;
LABEL_319:
                          v140[v147] |= v148;
                          v149 = (v143 + 1) >> 6;
                          v150 = 1 << ((v143 + 1) & 0x3D);
                          if ((v144 & 4) != 0)
                            goto LABEL_320;
LABEL_324:
                          v140[v149] &= ~v150;
                          v151 = v143 >> 6;
                          v152 = 1 << (v143 & 0x3C);
                          if ((v144 & 8) == 0)
                            goto LABEL_316;
LABEL_325:
                          v140[v151] |= v152;
                          v143 += 4;
                          if (!--v142)
                            goto LABEL_336;
                        }
                        else
                        {
                          v140[v145] &= ~v146;
                          v147 = (v143 + 2) >> 6;
                          v148 = 1 << ((v143 + 2) & 0x3E);
                          if ((v144 & 2) != 0)
                            goto LABEL_319;
LABEL_323:
                          v140[v147] &= ~v148;
                          v149 = (v143 + 1) >> 6;
                          v150 = 1 << ((v143 + 1) & 0x3D);
                          if ((v144 & 4) == 0)
                            goto LABEL_324;
LABEL_320:
                          v140[v149] |= v150;
                          v151 = v143 >> 6;
                          v152 = 1 << (v143 & 0x3C);
                          if ((v144 & 8) != 0)
                            goto LABEL_325;
LABEL_316:
                          v140[v151] &= ~v152;
                          v143 += 4;
                          if (!--v142)
                            goto LABEL_336;
                        }
                      }
                    }
                    v140 = 0;
LABEL_336:
                    v155 = v294;
                    v265 = v295;
                    v156 = *v2;
                    if (v156 <= 0xF)
                    {
                      if (!*v2)
                        goto LABEL_340;
                    }
                    else if (v156 != 16)
                    {
LABEL_340:
                      v157 = operator new(8uLL);
                      *v157 = 42;
                      v158 = 8;
                      if (v156 > 15)
                        goto LABEL_341;
                      goto LABEL_346;
                    }
                    v157 = operator new(8uLL);
                    *v157 = 17;
                    v158 = 7;
                    if (v156 > 15)
                    {
LABEL_341:
                      if (v156 != 16)
                      {
                        if (v156 == 110)
                        {
                          v159 = &unk_235880650;
                          goto LABEL_354;
                        }
                        if (v156 != 64)
                          goto LABEL_355;
                        goto LABEL_350;
                      }
                      goto LABEL_348;
                    }
LABEL_346:
                    if (!v156)
                    {
LABEL_350:
                      v159 = &unk_23587FF50;
                      goto LABEL_354;
                    }
                    if (v156 != 8)
                    {
LABEL_355:
                      __src[4] = xmmword_23587FED0;
                      __src[5] = unk_23587FEE0;
                      __src[6] = xmmword_23587FEF0;
                      __src[7] = unk_23587FF00;
                      __src[0] = xmmword_23587FE90;
                      __src[1] = unk_23587FEA0;
                      __src[2] = xmmword_23587FEB0;
                      __src[3] = unk_23587FEC0;
                      memcpy(&__src[8], __dst, 0x380uLL);
                      memcpy(v360, __src, sizeof(v360));
                      __src[0] = 0uLL;
                      if (v137 > 0x3F || (v137 & 0x3F) != 0)
                      {
                        v160 = 0;
                        v161 = &v140[v137 >> 6];
                        v162 = v360;
                        do
                        {
                          v163 = (unint64_t)*v162++;
                          v164 = v163 >> 6;
                          v165 = 1 << v163;
                          if (((*v140 >> v160) & 1) != 0)
                            v166 = *((_QWORD *)__src + v164) | v165;
                          else
                            v166 = *((_QWORD *)__src + v164) & ~v165;
                          *((_QWORD *)__src + v164) = v166;
                          v140 += v160 == 63;
                          if (v160 == 63)
                            v160 = 0;
                          else
                            ++v160;
                        }
                        while (v160 != (v137 & 0x3F) || v140 != v161);
                      }
                      if (v265 > 0x3F || (v265 & 0x3F) != 0)
                      {
                        v167 = 0;
                        v168 = &v360[16];
                        v169 = v155;
                        do
                        {
                          v170 = (unint64_t)*v168++;
                          v171 = v170 >> 6;
                          v172 = 1 << v170;
                          if (((*v169 >> v167) & 1) != 0)
                            v173 = *((_QWORD *)__src + v171) | v172;
                          else
                            v173 = *((_QWORD *)__src + v171) & ~v172;
                          *((_QWORD *)__src + v171) = v173;
                          v169 += v167 == 63;
                          if (v167 == 63)
                            v167 = 0;
                          else
                            ++v167;
                        }
                        while (v167 != (v265 & 0x3F) || v169 != &v155[v265 >> 6]);
                      }
                      v174 = 0;
                      v175 = 8 * v265 + 128;
                      v176 = v157;
                      do
                      {
                        v177 = *(unint64_t *)((char *)v360 + v175);
                        v178 = v177 >> 6;
                        v179 = 1 << v177;
                        if (((*v176 >> v174) & 1) != 0)
                          v180 = *((_QWORD *)__src + v178) | v179;
                        else
                          v180 = *((_QWORD *)__src + v178) & ~v179;
                        *((_QWORD *)__src + v178) = v180;
                        v176 += v174 == 63;
                        if (v174 == 63)
                          v174 = 0;
                        else
                          ++v174;
                        v175 += 8;
                      }
                      while (v174 != v158 || v176 != v157);
                      operator delete(v157);
                      v278 = (int8x16_t)__src[0];
                      v181 = *v2;
                      if (v181 != 8)
                      {
                        if (v181 == 110)
                        {
                          v182 = 0;
                          goto LABEL_392;
                        }
                        if (v181 != 16)
                        {
                          v182 = 5;
                          goto LABEL_392;
                        }
                      }
                      v182 = 9;
LABEL_392:
                      v183 = v182 | (2 * (v181 != 110));
                      memset(__dst, 0, 24);
                      if (v183)
                      {
                        v184 = 4 * v183;
                        v185 = (char *)operator new(4 * v183);
                        v186 = &v185[4 * v183];
                        *(_QWORD *)__dst = v185;
                        *(_QWORD *)&__dst[16] = v186;
                        bzero(v185, v184);
                        *(_QWORD *)&__dst[8] = v186;
                      }
                      else
                      {
                        v185 = 0;
                      }
                      if (v181 == 8)
                        goto LABEL_398;
                      if (v181 == 110)
                        goto LABEL_409;
                      if (v181 == 16)
                      {
LABEL_398:
                        v187 = 1;
                        v188 = 6;
                      }
                      else
                      {
                        v187 = 0;
                        v188 = 8;
                      }
                      if (v181 == 8 || v181 == 16)
                        v189 = 9;
                      else
                        v189 = 5;
                      v190 = (char *)v309[0];
                      v191 = 4 * v189;
                      v192 = (char *)operator new(4 * v189);
                      bzero(v192, v191);
                      v193 = 0;
                      v194 = 0;
                      do
                      {
                        v195 = (((*(_QWORD *)&v190[((v193 + 5) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v193
                                                                                               + 5)) & 1) << (v188 - 6)) | (((*(_QWORD *)&v190[((v193 + 4) >> 3) & 0x1FFFFFFFFFFFFFF8] >> ((v193 + 4) & 0x3E)) & 1) << (v188 - 5)) | (((*(_QWORD *)&v190[((v193 + 3) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v193 + 3)) & 1) << (v188 - 4)) | (((*(_QWORD *)&v190[((v193 + 2) >> 3) & 0x1FFFFFFFFFFFFFF8] >> ((v193 + 2) & 0x3E)) & 1) << (v188 - 3)) | (((*(_QWORD *)&v190[(v193 >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v193 & 0x3E | 1)) & 1) << (v188 - 2)) | (((*(_QWORD *)&v190[(v193 >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v193 & 0x3E)) & 1) << (v188 - 1)) | *(_DWORD *)&v192[v194];
                        if (!v187)
                          v195 |= (((*(_QWORD *)&v190[((v193 + 7) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v193
                                                                                                  + 7)) & 1) << (v188 - 8)) | (((*(_QWORD *)&v190[((v193 + 6) >> 3) & 0x1FFFFFFFFFFFFFF8] >> ((v193 + 6) & 0x3E)) & 1) << (v188 - 7));
                        *(_DWORD *)&v192[v194] = v195;
                        v194 += 4;
                        v193 += v188;
                      }
                      while (v191 != v194);
                      memcpy(v185, v192, v191);
                      operator delete(v192);
                      if (*v2 == 110)
                        goto LABEL_409;
                      if ((sub_23587BD9C(&v311, (uint64_t)__dst, 2) & 1) == 0)
                      {
                        sub_23584CE20((uint64_t)v276, "Failed to compute parity for the arcs portion of the payload");
                        v277 = 1;
                        sub_235850758((uint64_t)__src, 5u, v276);
                        sub_2358506A8(v7, (uint64_t)__src);
                        sub_23584B630((uint64_t)__src);
                        sub_23584B774((uint64_t)v276);
                        goto LABEL_497;
                      }
                      v198 = *v2;
                      if (v198 == 8)
                        goto LABEL_474;
                      if (v198 != 110)
                      {
                        if (v198 != 16)
                        {
                          v263 = v155;
                          v197 = 0;
                          v196 = 8;
LABEL_410:
                          v199 = *(_QWORD *)&__dst[8];
                          v200 = *(_QWORD *)__dst;
                          v201 = (uint64_t)(*(_QWORD *)&__dst[8] - *(_QWORD *)__dst) >> 2;
                          v202 = v201 * v196;
                          v274 = 0;
                          v275 = 0;
                          v273 = 0;
                          if (v201 * v196)
                          {
                            v261 = v197;
                            v262 = v198;
                            if ((v202 & 0x8000000000000000) != 0)
                              sub_235847D5C();
                            v203 = (v202 - 1) >> 6;
                            v204 = operator new(8 * (v203 + 1));
                            v205 = v204;
                            v274 = v201 * v196;
                            v275 = v203 + 1;
                            v273 = v204;
                            if (v202 >= 0x41)
                              v206 = (v202 - 1) >> 6;
                            else
                              v206 = 0;
                            v204[v206] = 0;
                            if (v202 >= 0x40)
                              bzero(v204, 8 * (v202 >> 6));
                            v198 = v262;
                            if ((v202 & 0x3E) != 0)
                              v205[v202 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v202 & 0x3E));
                            v197 = v261;
                          }
                          else
                          {
                            v205 = 0;
                          }
                          if (v199 == v200)
                            v207 = 1;
                          else
                            v207 = v197;
                          if ((v207 & 1) == 0)
                          {
                            v208 = 0;
                            v209 = -1;
                            do
                            {
                              v210 = 0;
                              v211 = *(_DWORD *)(v200 + 4 * v208++);
                              v212 = v196;
                              do
                              {
                                while (1)
                                {
                                  v213 = (unint64_t)(v209 + v212) >> 6;
                                  v214 = 1 << (v209 + v212);
                                  if (((v211 >> v210) & 1) != 0)
                                    break;
                                  v205[v213] &= ~v214;
                                  ++v210;
                                  if (!--v212)
                                    goto LABEL_431;
                                }
                                v205[v213] |= v214;
                                ++v210;
                                --v212;
                              }
                              while (v212);
LABEL_431:
                              v209 += v196;
                            }
                            while (v208 != v201);
                          }
                          v270 = 0;
                          v271 = 0;
                          v272 = 0;
                          if (v198 <= 15)
                          {
                            if (!v198)
                            {
LABEL_455:
                              v230 = vaddvq_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v278)))));
                              sub_235850AF0((uint64_t)&v270, 129 - v230);
                              LOBYTE(__src[0]) = 0;
                              sub_235850A40((uint64_t *)&v270, __src);
                              sub_235850BF0((uint64_t *)v273, v274, (uint64_t *)&v270);
                              v231 = 128 - (v202 + v230);
                              if ((uint64_t)v265 < v231)
                                v231 = v265;
                              v232 = v231 - 63;
                              if (v231 - 63 < 0)
                                v232 = v231;
                              v233 = v232 >> 6;
                              if (v231 >= 0)
                                v233 = (unint64_t)v231 >> 6;
                              *(_QWORD *)&__src[0] = v263;
                              DWORD2(__src[0]) = 0;
                              *(_QWORD *)&__src[1] = &v263[v233];
                              DWORD2(__src[1]) = v231 & 0x3F;
                              sub_235850C30((uint64_t)__src, (uint64_t *)&v270);
LABEL_462:
                              v234 = operator new(0x10uLL);
                              v235 = 0;
                              v360[0] = v234;
                              *(_OWORD *)&v360[1] = xmmword_23587FE60;
                              *v234 = 0;
                              v234[1] = 0;
                              do
                              {
                                while (1)
                                {
                                  v236 = v235 >> 6;
                                  v237 = 1 << v235;
                                  if (((1 << v235) & v278.i64[v235 >> 6]) != 0)
                                    break;
                                  v234[v236] &= ~v237;
                                  if (++v235 == 128)
                                    goto LABEL_466;
                                }
                                v234[v236] |= v237;
                                ++v235;
                              }
                              while (v235 != 128);
LABEL_466:
                              sub_235853864((uint64_t *)v270, 0, (uint64_t *)v270 + (v271 >> 6), v271 & 0x3F, (uint64_t *)v360, (uint64_t **)__src);
                              *(void **)v7 = v360[0];
                              *(_OWORD *)(v7 + 8) = *(_OWORD *)&v360[1];
                              *(_BYTE *)(v7 + 120) = 1;
                              if (v270)
                                operator delete(v270);
                              if (v273)
                                operator delete(v273);
LABEL_497:
                              if (*(_QWORD *)__dst)
                              {
                                *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
                                operator delete(*(void **)__dst);
                              }
                              v238 = v279;
                              if (v279)
                                goto LABEL_500;
                              goto LABEL_501;
                            }
                            if (v198 != 8)
                              goto LABEL_462;
                          }
                          else if (v198 != 16)
                          {
                            if (v198 != 64 && v198 != 110)
                              goto LABEL_462;
                            goto LABEL_455;
                          }
                          v215 = v278;
                          sub_23585238C(&v268, (uint64_t)&v273);
                          LOBYTE(__src[0]) = 0;
                          sub_235850A40((uint64_t *)&v268, __src);
                          v216 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v215.i8);
                          v216.i16[0] = vaddlv_u8(v216);
                          v217 = v216.u32[0];
                          v218 = (uint8x8_t)vcnt_s8((int8x8_t)v215.u64[1]);
                          v218.i16[0] = vaddlv_u8(v218);
                          v219 = (v217 ^ 0x7F) - (v218.u32[0] + v202);
                          if ((uint64_t)v265 < v219)
                            v219 = v265;
                          v220 = v219 - 63;
                          if (v219 - 63 < 0)
                            v220 = v219;
                          v221 = v220 >> 6;
                          if (v219 >= 0)
                            v221 = (unint64_t)v219 >> 6;
                          *(_QWORD *)&__src[0] = v263;
                          DWORD2(__src[0]) = 0;
                          *(_QWORD *)&__src[1] = &v263[v221];
                          DWORD2(__src[1]) = v219 & 0x3F;
                          sub_235850C30((uint64_t)__src, (uint64_t *)&v268);
                          sub_235850D34((uint64_t)&v270, *(unint64_t *)v269, 0);
                          sub_235853E88((uint64_t)&v278, v360);
                          sub_235854D70(v360, &v360[3], v2, (uint64_t)__src);
                          if (!LOBYTE(__src[6]))
                            sub_23584B514();
                          sub_235850FAC((uint64_t)&v266, (uint64_t *)__src, (uint64_t **)&__src[4] + 1);
                          v222 = v266;
                          v223 = v267;
                          if (v266 != v267)
                          {
                            v224 = 0;
                            v225 = (char *)v268;
                            v226 = v270;
                            v227 = v266;
                            do
                            {
                              while (1)
                              {
                                v228 = *v227 >> 6;
                                v229 = 1 << *v227;
                                if (((*(_QWORD *)&v225[(v224 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v224) & 1) != 0)
                                  break;
                                v226[v228] &= ~v229;
                                ++v227;
                                ++v224;
                                if (v227 == v223)
                                  goto LABEL_451;
                              }
                              v226[v228] |= v229;
                              ++v227;
                              ++v224;
                            }
                            while (v227 != v223);
                          }
LABEL_451:
                          if (v222)
                            operator delete(v222);
                          sub_235851100((uint64_t)__src);
                          sub_235851148((uint64_t)v360);
                          if (v268)
                            operator delete(v268);
                          goto LABEL_462;
                        }
LABEL_474:
                        v263 = v155;
                        v197 = 0;
                        v196 = 6;
                        goto LABEL_410;
                      }
LABEL_409:
                      v263 = v155;
                      v196 = 0;
                      v197 = 1;
                      v198 = 110;
                      goto LABEL_410;
                    }
LABEL_348:
                    v159 = &unk_2358802D0;
LABEL_354:
                    memcpy(__dst, v159, sizeof(__dst));
                    goto LABEL_355;
                  }
                  sub_23584CE20((uint64_t)&v282, "Failed to compute parity for the metadata");
                  v290 = 1;
                  sub_235850758((uint64_t)__src, 1u, &v282);
                  *(_OWORD *)v7 = __src[0];
                  *(_BYTE *)(v7 + 16) = 0;
                  *(_BYTE *)(v7 + 112) = 0;
                  if (!LOBYTE(__src[7]))
                  {
                    *(_BYTE *)(v7 + 120) = 0;
                    goto LABEL_479;
                  }
                  *(_BYTE *)(v7 + 40) = 0;
                  v153 = BYTE8(__src[2]);
                  if (BYTE8(__src[2]))
                  {
                    *(_OWORD *)(v7 + 16) = __src[1];
                    *(_QWORD *)(v7 + 32) = *(_QWORD *)&__src[2];
                    memset(&__src[1], 0, 24);
                    *(_BYTE *)(v7 + 40) = 1;
                  }
                  *(_BYTE *)(v7 + 48) = 0;
                  *(_BYTE *)(v7 + 104) = 0;
                  if (!BYTE8(__src[6]))
                  {
                    *(_BYTE *)(v7 + 112) = 1;
                    *(_BYTE *)(v7 + 120) = 0;
                    if (!v153)
                      goto LABEL_479;
LABEL_477:
                    if (SBYTE7(__src[2]) < 0)
                      operator delete(*(void **)&__src[1]);
LABEL_479:
                    if (v290)
                    {
                      if (v289)
                      {
                        if (v288 < 0)
                          operator delete(v287);
                        if (v286 < 0)
                          operator delete(v285);
                      }
                      if (v284 && v283 < 0)
                      {
                        v238 = (void *)v282;
LABEL_500:
                        operator delete(v238);
                      }
                    }
LABEL_501:
                    if (v291)
                    {
                      v292 = v291;
                      operator delete(v291);
                    }
                    v127 = v294;
                    if (v294)
                      goto LABEL_504;
                    goto LABEL_505;
                  }
                  v154 = *((_QWORD *)&__src[4] + 1);
                  *(_QWORD *)(v7 + 64) = *(_QWORD *)&__src[4];
                  *(_OWORD *)(v7 + 48) = __src[3];
                  __src[3] = 0uLL;
                  *(_QWORD *)(v7 + 72) = v154;
                  *(_OWORD *)(v7 + 80) = __src[5];
                  *(_QWORD *)(v7 + 96) = *(_QWORD *)&__src[6];
                  *(_QWORD *)&__src[4] = 0;
                  memset(&__src[5], 0, 24);
                  *(_BYTE *)(v7 + 104) = 1;
                  *(_BYTE *)(v7 + 112) = 1;
                  *(_BYTE *)(v7 + 120) = 0;
                  if (SBYTE7(__src[6]) < 0)
                  {
                    operator delete(*(void **)&__src[5]);
                    if ((SBYTE7(__src[4]) & 0x80000000) == 0)
                    {
LABEL_333:
                      if (!v153)
                        goto LABEL_479;
                      goto LABEL_477;
                    }
                  }
                  else if ((SBYTE7(__src[4]) & 0x80000000) == 0)
                  {
                    goto LABEL_333;
                  }
                  operator delete(*(void **)&__src[3]);
                  if (!v153)
                    goto LABEL_479;
                  goto LABEL_477;
                }
                v125 = v109 - 64;
                if (v109 < 0x40)
                {
                  v126 = (uint64_t *)v113;
                  goto LABEL_301;
                }
                if (v125 >= 0xC0)
                {
                  v128 = (v125 >> 6) + 1;
                  v109 -= (v128 & 0x7FFFFFFFFFFFFFCLL) << 6;
                  v126 = &v113->i64[v128 & 0x7FFFFFFFFFFFFFCLL];
                  v129 = v113 + 1;
                  v130 = v128 & 0x7FFFFFFFFFFFFFCLL;
                  do
                  {
                    v131 = vmvnq_s8(*v129);
                    v129[-1] = vmvnq_s8(v129[-1]);
                    *v129 = v131;
                    v129 += 2;
                    v130 -= 4;
                  }
                  while (v130);
                  if (v128 == (v128 & 0x7FFFFFFFFFFFFFCLL))
                  {
LABEL_301:
                    if (v109)
                      *v126 ^= 0xFFFFFFFFFFFFFFFFLL >> -(char)v109;
                    goto LABEL_303;
                  }
                }
                else
                {
                  v126 = (uint64_t *)v113;
                }
                do
                {
                  *v126 = ~*v126;
                  ++v126;
                  v109 -= 64;
                }
                while (v109 > 0x3F);
                goto LABEL_301;
              }
              v70 = (uint64_t *)operator new(8uLL);
              v256 = 0;
              v257 = 0;
              *v70 = 0;
              v258 = v70;
              do
              {
                v260 = 1 << v256;
                if (byte_2358809D5[v257])
                  v259 = *v258 | v260;
                else
                  v259 = *v258 & ~v260;
                *v258 = v259;
                ++v257;
                v258 += v256 == 63;
                if (v256 == 63)
                  v256 = 0;
                else
                  ++v256;
              }
              while (v257 != 45);
              v59 = -44;
            }
            operator delete(v70);
            goto LABEL_196;
          }
          v50 = 285;
        }
        if (v49 == 8 || (v51 = 1, v49 == 16))
        {
          v52 = 6;
          v51 = 1;
        }
        else
        {
          v52 = 8;
        }
        goto LABEL_146;
      }
LABEL_38:
      v20 = 6;
      goto LABEL_39;
    }
    v20 = 0;
LABEL_43:
    v19 = 0;
    v21 = 0;
    goto LABEL_47;
  }
  __src[0] = v347;
  v15 = sub_23584B6BC(&__src[1], &v348);
  *(_OWORD *)v7 = __src[0];
  *(_BYTE *)(v7 + 16) = 0;
  *(_BYTE *)(v7 + 112) = 0;
  if (!LOBYTE(__src[7]))
  {
    *(_BYTE *)(v7 + 120) = 0;
    goto LABEL_529;
  }
  *(_BYTE *)(v7 + 40) = 0;
  v16 = BYTE8(__src[2]);
  if (BYTE8(__src[2]))
  {
    *(_OWORD *)(v7 + 16) = *(_OWORD *)v15;
    *(_QWORD *)(v7 + 32) = *((_QWORD *)v15 + 2);
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 2) = 0;
    *(_QWORD *)v15 = 0;
    *(_BYTE *)(v7 + 40) = 1;
  }
  *(_BYTE *)(v7 + 48) = 0;
  *(_BYTE *)(v7 + 104) = 0;
  if (BYTE8(__src[6]))
  {
    v17 = *((_QWORD *)&__src[4] + 1);
    *(_QWORD *)(v7 + 64) = *(_QWORD *)&__src[4];
    *(_OWORD *)(v7 + 48) = __src[3];
    __src[3] = 0uLL;
    *(_QWORD *)(v7 + 72) = v17;
    *(_OWORD *)(v7 + 80) = __src[5];
    *(_QWORD *)(v7 + 96) = *(_QWORD *)&__src[6];
    *(_QWORD *)&__src[4] = 0;
    memset(&__src[5], 0, 24);
    *(_BYTE *)(v7 + 104) = 1;
  }
  *(_BYTE *)(v7 + 112) = 1;
  *(_BYTE *)(v7 + 120) = 0;
  if (v16 && SBYTE7(__src[2]) < 0)
  {
    v18 = *(void **)&__src[1];
LABEL_528:
    operator delete(v18);
  }
LABEL_529:
  if (v357)
  {
    v250 = (void *)v347;
    if (!(_QWORD)v347)
      goto LABEL_542;
LABEL_541:
    operator delete(v250);
    goto LABEL_542;
  }
  if (v356)
  {
    if (v355)
    {
      if (v354 < 0)
        operator delete(v353);
      if (v352 < 0)
        operator delete(v351);
    }
    if (v350 && v349 < 0)
    {
      v250 = (void *)v348;
      goto LABEL_541;
    }
  }
LABEL_542:
  if (v358)
    operator delete(v358);
}

void sub_235850280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,void *a56,uint64_t a57,void *a58)
{
  void *v59;
  void *v60;

  sub_23584B774((uint64_t)&a24);
  v59 = (void *)STACK[0x890];
  if (STACK[0x890])
  {
    STACK[0x898] = (unint64_t)v59;
    operator delete(v59);
  }
  if (a39)
    operator delete(a39);
  if (a55)
  {
    a56 = a55;
    operator delete(a55);
  }
  if (a58)
    operator delete(a58);
  v60 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v60;
    operator delete(v60);
  }
  if (STACK[0x220])
    operator delete((void *)STACK[0x220]);
  if (STACK[0x238])
    operator delete((void *)STACK[0x238]);
  sub_23587BD38(&STACK[0x250]);
  sub_23587BD38(&STACK[0x258]);
  if (STACK[0x2D0])
    operator delete((void *)STACK[0x2D0]);
  if (STACK[0x3C0])
    operator delete((void *)STACK[0x3C0]);
  if (STACK[0x3E0])
    operator delete((void *)STACK[0x3E0]);
  sub_23584B214((uint64_t)&STACK[0x3F8]);
  if (!STACK[0x478])
    _Unwind_Resume(a1);
  operator delete((void *)STACK[0x478]);
  _Unwind_Resume(a1);
}

uint64_t sub_2358506A8(uint64_t result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)result = *(_OWORD *)a2;
  *(_BYTE *)(result + 16) = 0;
  *(_BYTE *)(result + 112) = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    *(_BYTE *)(result + 40) = 0;
    if (*(_BYTE *)(a2 + 40))
    {
      v2 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)(result + 16) = v2;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_BYTE *)(result + 40) = 1;
    }
    *(_BYTE *)(result + 48) = 0;
    *(_BYTE *)(result + 104) = 0;
    if (*(_BYTE *)(a2 + 104))
    {
      v3 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(result + 48) = v3;
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(result + 72) = *(_QWORD *)(a2 + 72);
      v4 = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(result + 96) = *(_QWORD *)(a2 + 96);
      *(_OWORD *)(result + 80) = v4;
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)(a2 + 80) = 0;
      *(_BYTE *)(result + 104) = 1;
    }
    *(_BYTE *)(result + 112) = 1;
  }
  *(_BYTE *)(result + 120) = 0;
  return result;
}

void sub_235850758(uint64_t a1, unsigned int a2, __int128 *a3)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  unsigned __int8 v9;
  uint64_t v10;
  int v11;
  void *v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  char v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  char v26;
  char v27;
  void *__p;
  __int128 v29;
  unsigned __int8 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  unsigned __int8 v36;
  char v37;
  _QWORD v38[2];
  _QWORD v39[2];
  _QWORD v40[4];

  v40[2] = *MEMORY[0x24BDAC8D0];
  sub_23584B6BC(__dst, a3);
  v9 = atomic_load((unsigned __int8 *)&qword_256306798);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_256306798))
  {
    __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_256306730, &dword_235841000);
    __cxa_guard_release(&qword_256306798);
  }
  sub_23584B6BC(&__p, (__int128 *)__dst);
  v10 = a2;
  if (!v37)
  {
    *(_QWORD *)a1 = a2;
    *(_QWORD *)(a1 + 8) = &off_256306730;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    goto LABEL_19;
  }
  v11 = v30;
  if (v30)
  {
    v12 = __p;
    v40[0] = v29;
    *(_QWORD *)((char *)v40 + 7) = *(_QWORD *)((char *)&v29 + 7);
    LOBYTE(a2) = HIBYTE(v29);
    v29 = 0uLL;
    __p = 0;
    v13 = v36;
    if (v36)
      goto LABEL_5;
  }
  else
  {
    v12 = 0;
    v13 = v36;
    if (v36)
    {
LABEL_5:
      v14 = v31;
      v39[0] = v32;
      *(_QWORD *)((char *)v39 + 7) = *(_QWORD *)((char *)&v32 + 7);
      v6 = HIBYTE(v32);
      v31 = 0;
      v32 = 0uLL;
      v5 = v33;
      v3 = v34;
      v38[0] = v35;
      *(_QWORD *)((char *)v38 + 7) = *(_QWORD *)((char *)&v35 + 7);
      v4 = HIBYTE(v35);
      v34 = 0;
      v35 = 0uLL;
      if (!v30)
        goto LABEL_12;
      goto LABEL_10;
    }
  }
  v14 = 0;
  if (!v30)
    goto LABEL_12;
LABEL_10:
  if (SHIBYTE(v29) < 0)
  {
    v18 = v10;
    operator delete(__p);
    *(_QWORD *)a1 = v18;
    *(_QWORD *)(a1 + 8) = &off_256306730;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    v15 = (_BYTE *)(a1 + 112);
    *(_BYTE *)(a1 + 40) = 0;
LABEL_13:
    v16 = v40[0];
    *(_QWORD *)(a1 + 16) = v12;
    *(_QWORD *)(a1 + 24) = v16;
    *(_QWORD *)(a1 + 31) = *(_QWORD *)((char *)v40 + 7);
    *(_BYTE *)(a1 + 39) = a2;
    v40[0] = 0;
    *(_QWORD *)((char *)v40 + 7) = 0;
    *(_BYTE *)(a1 + 40) = 1;
    LOBYTE(a2) = 0;
    v12 = 0;
    goto LABEL_14;
  }
LABEL_12:
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = &off_256306730;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  v15 = (_BYTE *)(a1 + 112);
  *(_BYTE *)(a1 + 40) = 0;
  if (v11)
    goto LABEL_13;
LABEL_14:
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (v13)
  {
    v17 = v39[0];
    *(_QWORD *)(a1 + 48) = v14;
    *(_QWORD *)(a1 + 56) = v17;
    *(_QWORD *)(a1 + 63) = *(_QWORD *)((char *)v39 + 7);
    *(_BYTE *)(a1 + 71) = v6;
    v39[0] = 0;
    *(_QWORD *)((char *)v39 + 7) = 0;
    *(_QWORD *)(a1 + 72) = v5;
    *(_QWORD *)(a1 + 80) = v3;
    *(_QWORD *)(a1 + 88) = v38[0];
    *(_QWORD *)(a1 + 95) = *(_QWORD *)((char *)v38 + 7);
    *(_BYTE *)(a1 + 103) = v4;
    v38[0] = 0;
    *(_QWORD *)((char *)v38 + 7) = 0;
    *(_BYTE *)(a1 + 104) = 1;
  }
  *v15 = 1;
  if (v11 && (a2 & 0x80) != 0)
    operator delete(v12);
LABEL_19:
  if (!v27)
    return;
  if (v26)
  {
    if ((v25 & 0x80000000) == 0)
    {
      if ((v23 & 0x80000000) == 0)
        goto LABEL_23;
LABEL_28:
      operator delete(v22);
      if (!v21)
        return;
      goto LABEL_24;
    }
    operator delete(v24);
    if (v23 < 0)
      goto LABEL_28;
  }
LABEL_23:
  if (!v21)
    return;
LABEL_24:
  if (v20 < 0)
    operator delete(__dst[0]);
}

void sub_235850A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23584B774((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_235850A40(uint64_t *a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a1[1];
  v5 = a1[2];
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0)
      sub_235847D5C();
    v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64)
      v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v4 <= 0x3FFFFFFFFFFFFFFELL)
      v7 = v6;
    else
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    sub_235850AF0((uint64_t)a1, v7);
    v4 = a1[1];
  }
  a1[1] = v4 + 1;
  v8 = *a1;
  v9 = v4 >> 6;
  v10 = 1 << v4;
  if (*a2)
    v11 = *(_QWORD *)(v8 + 8 * v9) | v10;
  else
    v11 = *(_QWORD *)(v8 + 8 * v9) & ~v10;
  *(_QWORD *)(v8 + 8 * v9) = v11;
}

void sub_235850AF0(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (a2 > *(_QWORD *)(a1 + 16) << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      sub_235847D5C();
    v3 = ((a2 - 1) >> 6) + 1;
    v4 = (uint64_t *)operator new(8 * v3);
    v5 = *(_QWORD **)a1;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = v6 & 0x3F;
    v8 = (v6 - 1) >> 6;
    if (v6 < 0x41)
      v8 = 0;
    v4[v8] = 0;
    if (v6 > 0x3F || (v6 & 0x3F) != 0)
    {
      v9 = 0;
      v10 = 0;
      v11 = &v5[v6 >> 6];
      v12 = v4;
      v13 = v5;
      do
      {
        v14 = 1 << v9;
        if (((*v13 >> v10) & 1) != 0)
          v15 = *v12 | v14;
        else
          v15 = *v12 & ~v14;
        *v12 = v15;
        v13 += v10 == 63;
        if (v10 == 63)
          v10 = 0;
        else
          ++v10;
        v12 += v9 == 63;
        if (v9 == 63)
          v9 = 0;
        else
          ++v9;
      }
      while (v10 != v7 || v13 != v11);
    }
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v3;
    if (v5)
      operator delete(v5);
  }
}

void sub_235850BF0(uint64_t *a1, unint64_t a2, uint64_t *a3)
{
  uint64_t *v3;

  sub_235853864(a1, 0, &a1[a2 >> 6], a2 & 0x3F, a3, &v3);
}

void sub_235850C30(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  int v3;
  uint64_t *v4;
  int v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(uint64_t **)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 24);
  if (*(uint64_t **)a1 != v4 || v3 != v5)
  {
    do
    {
      v8 = *v2;
      v9 = a2[1];
      v10 = a2[2];
      if (v9 == v10 << 6)
      {
        if ((uint64_t)(v9 + 1) < 0)
          sub_235847D5C();
        v11 = v10 << 7;
        if (v11 <= (v9 & 0xFFFFFFFFFFFFFFC0) + 64)
          v11 = (v9 & 0xFFFFFFFFFFFFFFC0) + 64;
        if (v9 <= 0x3FFFFFFFFFFFFFFELL)
          v12 = v11;
        else
          v12 = 0x7FFFFFFFFFFFFFFFLL;
        sub_235850AF0((uint64_t)a2, v12);
        v9 = a2[1];
      }
      a2[1] = v9 + 1;
      v13 = *a2;
      v14 = v9 >> 6;
      v15 = 1 << v9;
      if (((1 << v3) & v8) != 0)
        v16 = *(_QWORD *)(v13 + 8 * v14) | v15;
      else
        v16 = *(_QWORD *)(v13 + 8 * v14) & ~v15;
      *(_QWORD *)(v13 + 8 * v14) = v16;
      v2 += v3 == 63;
      if (v3 == 63)
        v3 = 0;
      else
        ++v3;
    }
    while (v2 != v4 || v3 != v5);
  }
}

void sub_235850D34(uint64_t a1, unint64_t a2, size_t __len)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *__dst;
  uint64_t v24;
  uint64_t v25;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = a2 - v4;
  if (a2 <= v4)
  {
    *(_QWORD *)(a1 + 8) = a2;
    return;
  }
  v6 = __len;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = v7 << 6;
  if (v7 << 6 < v5 || v4 > (v7 << 6) - v5)
  {
    __dst = 0;
    v24 = 0;
    v25 = 0;
    if ((a2 & 0x8000000000000000) != 0)
      sub_235847D5C();
    v10 = v7 << 7;
    if (v10 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
      v10 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
    if (v8 <= 0x3FFFFFFFFFFFFFFELL)
      v11 = v10;
    else
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    sub_235850AF0((uint64_t)&__dst, v11);
    v12 = *(void **)a1;
    v13 = *(_QWORD *)(a1 + 8);
    v14 = v13 + v5;
    v24 = v13 + v5;
    v15 = (char *)__dst;
    if (v13 < 1)
    {
      LODWORD(v17) = 0;
      v16 = (char *)__dst;
    }
    else
    {
      v17 = (unint64_t)v13 >> 6;
      if ((unint64_t)v13 >= 0x40)
        memmove(__dst, v12, 8 * v17);
      v16 = &v15[8 * v17];
      if ((v13 & 0x3F) != 0)
      {
        *(_QWORD *)v16 = *(_QWORD *)v16 & ~(0xFFFFFFFFFFFFFFFFLL >> -(v13 & 0x3F)) | *((_QWORD *)v12 + v17) & (0xFFFFFFFFFFFFFFFFLL >> -(v13 & 0x3F));
        LODWORD(v17) = v13 & 0x3F;
      }
      else
      {
        LODWORD(v17) = 0;
      }
      v12 = *(void **)a1;
      v13 = *(_QWORD *)(a1 + 8);
      v15 = (char *)__dst;
      v14 = v24;
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v14;
    __dst = v12;
    v24 = v13;
    v18 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    v25 = v18;
    if (v12)
      operator delete(v12);
  }
  else
  {
    v16 = (char *)(*(_QWORD *)a1 + 8 * (v4 >> 6));
    v17 = *(_QWORD *)(a1 + 8) & 0x3FLL;
    *(_QWORD *)(a1 + 8) = a2;
  }
  if (v5)
  {
    if (v6)
    {
      if ((_DWORD)v17)
      {
        if ((64 - v17) >= v5)
          v19 = v5;
        else
          v19 = (64 - v17);
        *(_QWORD *)v16 |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v17 - v19)) & (-1 << v17);
        v16 += 8;
        v5 -= v19;
      }
      v20 = 8 * (v5 >> 6);
      if (v5 >= 0x40)
        memset(v16, 255, 8 * (v5 >> 6));
      if ((v5 & 0x3F) != 0)
      {
        v21 = *(_QWORD *)&v16[v20] | (0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
LABEL_44:
        *(_QWORD *)&v16[v20] = v21;
      }
    }
    else
    {
      if ((_DWORD)v17)
      {
        if ((64 - v17) >= v5)
          v22 = v5;
        else
          v22 = (64 - v17);
        *(_QWORD *)v16 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v17 - v22)) & (-1 << v17));
        v16 += 8;
        v5 -= v22;
      }
      v20 = 8 * (v5 >> 6);
      if (v5 >= 0x40)
        bzero(v16, 8 * (v5 >> 6));
      if ((v5 & 0x3F) != 0)
      {
        v21 = *(_QWORD *)&v16[v20] & ~(0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
        goto LABEL_44;
      }
    }
  }
}

void sub_235850F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_235850FAC(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  int v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  double result;
  __int128 v22;
  uint64_t v23;
  __int128 *i;

  v6 = *a2;
  v7 = HIDWORD(*a2);
  v8 = *a2;
  v9 = *a3;
  v10 = a3[1];
  v11 = v10 - *a3;
  v23 = 0;
  v12 = v11 + v7 * (unint64_t)v8;
  v22 = 0uLL;
  if (v12)
  {
    if (v12 >> 61)
      sub_235847D5C();
    *(_QWORD *)&v22 = operator new(8 * v12);
    *((_QWORD *)&v22 + 1) = v22;
    v23 = v22 + 8 * v12;
  }
  v13 = a2[1];
  v14 = (uint64_t *)a2[5];
  i = &v22;
  if (HIDWORD(v13) * (_DWORD)v7)
  {
    v15 = 0;
    v16 = &v14[(HIDWORD(v13) * v7)];
    v17 = v13;
    v18 = HIDWORD(v13) + v13 - (v13 * v6);
    do
    {
      sub_235852494((uint64_t *)&i, *v14);
      v19 = v15 + 1;
      if (v15 + 1 == (_DWORD)v6)
        v15 = 0;
      else
        ++v15;
      if (v19 == (_DWORD)v6)
        v20 = v18;
      else
        v20 = v17;
      v14 += v20;
    }
    while (v14 != v16);
    v9 = *a3;
    v10 = a3[1];
  }
  for (i = &v22; v9 != v10; ++v9)
    sub_235852494((uint64_t *)&i, *v9);
  result = *(double *)&v22;
  *(_OWORD *)a1 = v22;
  *(_QWORD *)(a1 + 16) = v23;
  return result;
}

void sub_2358510DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_235851100(uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(a1 + 96))
  {
    v2 = *(void **)(a1 + 72);
    if (v2)
    {
      *(_QWORD *)(a1 + 80) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 40);
    if (v3)
      free(v3);
    *(_QWORD *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t sub_235851148(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      v5 = *(_QWORD *)(a1 + 32);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v4);
  }
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

__n128 sub_2358511CC@<Q0>(char *__s@<X1>, std::string *a2@<X0>, std::string *a3@<X8>)
{
  size_t v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::append(a2, __s, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

_QWORD **sub_235851228(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (_QWORD *)*v2;
    *v2 = 0;
    if (v3)
    {
      v4 = (void *)v3[6];
      if (v4)
      {
        v3[7] = v4;
        operator delete(v4);
      }
      v5 = (void *)v3[3];
      if (v5)
      {
        v3[4] = v5;
        operator delete(v5);
      }
      MEMORY[0x23B7D94C4](v3, 0x1010C40DA3B4497);
    }
    MEMORY[0x23B7D94C4](v2, 0x20C4093837F09);
  }
  return a1;
}

void sub_2358512B8(unsigned int __val@<W2>, char **a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v5;
  unint64_t size;
  void *v7;
  int v8;
  int v9;
  uint64_t v10;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  unint64_t v44;
  void *v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  size_t v63;
  std::string *v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  std::string v68;
  std::string v69;
  _DWORD v70[2];
  __int128 v71;
  _BYTE v72[7];
  char v73;
  char v74;
  void *v75;
  char v76;
  void *v77;
  char v78;
  char v79;
  char v80;
  std::string v81;
  __int128 __dst;
  _BYTE v83[7];
  char v84;
  char v85;
  void *v86;
  char v87;
  void *v88;
  char v89;
  char v90;
  char v91;
  _BYTE v92[32];
  uint64_t v93;
  unsigned __int8 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char v100;
  char v101;
  __int16 v102;
  _BYTE v103[24];
  int v104;
  std::string v105;
  std::string *v106;
  std::string *v107;
  _BYTE *v108;
  std::string *v109;
  std::string *v110;
  void **v111;

  if ((__val > 0x10 || ((1 << __val) & 0x10101) == 0) && __val != 110 && __val != 64)
  {
    v102 = 0;
LABEL_6:
    v104 = 0;
    std::to_string(&v105, __val);
    v106 = (std::string *)v103;
    v107 = &v105;
    v108 = v103;
    v109 = &v105;
    v110 = &v105;
    v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
    ((void (*)(std::string *, _BYTE *))sub_23584C654)(&v69, v103);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
    if (v104 == -1)
      sub_23584BC5C();
    v106 = &v105;
    ((void (*)(std::string *__return_ptr, std::string **, _BYTE *))off_2506DF418[v104])(&v81, &v106, v103);
    if (v104 != -1)
      ((void (*)(std::string **, _BYTE *))off_2506DF400[v104])(&v106, v103);
    v5 = std::string::insert(&v81, 0, "Got unsupported version id ", 0x1BuLL);
    v7 = (void *)v5->__r_.__value_.__r.__words[0];
    size = v5->__r_.__value_.__l.__size_;
    LODWORD(v68.__r_.__value_.__l.__data_) = v5->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v68.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v5->__r_.__value_.__r.__words[2] + 3);
    v8 = SHIBYTE(v5->__r_.__value_.__r.__words[2]);
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (v8 < 0)
    {
      sub_23584B488(&__dst, v7, size);
    }
    else
    {
      *(_QWORD *)&__dst = v7;
      *((_QWORD *)&__dst + 1) = size;
      *(_DWORD *)v83 = v68.__r_.__value_.__l.__data_;
      *(_DWORD *)&v83[3] = *(_DWORD *)((char *)v68.__r_.__value_.__r.__words + 3);
      v84 = v8;
    }
    v85 = 1;
    LOBYTE(v86) = 0;
    v90 = 0;
    v91 = 1;
    sub_23584CF48(0x2Du, &__dst, (uint64_t)v92);
    *(_OWORD *)a3 = *(_OWORD *)v92;
    *(_BYTE *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 112) = 0;
    if (v101)
    {
      *(_BYTE *)(a3 + 40) = 0;
      v9 = v94;
      if (v94)
      {
        *(_OWORD *)(a3 + 16) = *(_OWORD *)&v92[16];
        *(_QWORD *)(a3 + 32) = v93;
        *(_QWORD *)&v92[24] = 0;
        v93 = 0;
        *(_QWORD *)&v92[16] = 0;
        *(_BYTE *)(a3 + 40) = 1;
      }
      *(_BYTE *)(a3 + 48) = 0;
      *(_BYTE *)(a3 + 104) = 0;
      if (v100)
      {
        v10 = v97;
        *(_QWORD *)(a3 + 64) = v96;
        *(_OWORD *)(a3 + 48) = v95;
        v95 = 0uLL;
        *(_QWORD *)(a3 + 72) = v10;
        *(_OWORD *)(a3 + 80) = v98;
        *(_QWORD *)(a3 + 96) = v99;
        v96 = 0;
        v98 = 0uLL;
        v99 = 0;
        *(_BYTE *)(a3 + 104) = 1;
      }
      *(_BYTE *)(a3 + 112) = 1;
      *(_BYTE *)(a3 + 120) = 0;
      if (v9 && SHIBYTE(v93) < 0)
        operator delete(*(void **)&v92[16]);
      if (!v91)
        goto LABEL_31;
    }
    else
    {
      *(_BYTE *)(a3 + 120) = 0;
      if (!v91)
        goto LABEL_31;
    }
    if (!v90)
      goto LABEL_28;
    if (v89 < 0)
    {
      operator delete(v88);
      if ((v87 & 0x80000000) == 0)
      {
LABEL_28:
        if (v85)
          goto LABEL_29;
        goto LABEL_31;
      }
    }
    else if ((v87 & 0x80000000) == 0)
    {
      goto LABEL_28;
    }
    operator delete(v86);
    if (v85)
    {
LABEL_29:
      if (v84 < 0)
        operator delete((void *)__dst);
    }
LABEL_31:
    if (v8 < 0)
    {
      operator delete(v7);
      if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
    }
    else if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return;
    }
    v11 = (void *)v81.__r_.__value_.__r.__words[0];
    goto LABEL_107;
  }
  v102 = __val | 0x100;
  if ((__val | 0x100) <= 0xFF)
    goto LABEL_6;
  if (__val != 16)
  {
    sub_23584DAEC();
    return;
  }
  v12 = *a2;
  v13 = a2[1];
  v14 = (char *)(v13 - *a2);
  v15 = 8 * (_QWORD)v14;
  memset(&v81, 0, sizeof(v81));
  if (!(8 * (_QWORD)v14))
  {
    v18 = 0;
    if (v13 == v12)
      goto LABEL_70;
    goto LABEL_51;
  }
  if ((v15 & 0x8000000000000000) != 0)
    sub_235847D5C();
  v16 = (v15 - 1) >> 6;
  v17 = operator new(8 * (v16 + 1));
  v18 = v17;
  v81.__r_.__value_.__l.__size_ = 8 * (_QWORD)v14;
  v81.__r_.__value_.__r.__words[2] = v16 + 1;
  v81.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
  if (v15 >= 0x41)
    v19 = (v15 - 1) >> 6;
  else
    v19 = 0;
  v17[v19] = 0;
  if (v15 >= 0x40)
    bzero(v17, 8 * (v15 >> 6));
  if ((v15 & 0x38) != 0)
    v18[v15 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v15 & 0x38));
  if (v13 != v12)
  {
LABEL_51:
    v20 = 0;
    v21 = v14;
    while (1)
    {
      v25 = *v12++;
      v24 = v25;
      v26 = (v20 + 7) >> 6;
      v27 = 1 << (v20 + 7);
      if ((v25 & 1) != 0)
      {
        v18[v26] |= v27;
        v28 = (v20 + 6) >> 6;
        v29 = 1 << ((v20 + 6) & 0x3E);
        if ((v24 & 2) == 0)
          goto LABEL_63;
LABEL_56:
        v18[v28] |= v29;
        v30 = (v20 + 5) >> 6;
        v31 = 1 << ((v20 + 5) & 0x3D);
        if ((v24 & 4) != 0)
          goto LABEL_57;
LABEL_64:
        v18[v30] &= ~v31;
        v32 = (v20 + 4) >> 6;
        v33 = 1 << ((v20 + 4) & 0x3C);
        if ((v24 & 8) == 0)
          goto LABEL_65;
LABEL_58:
        v18[v32] |= v33;
        v34 = (v20 + 3) >> 6;
        v35 = 1 << ((v20 + 3) & 0x3B);
        if ((v24 & 0x10) != 0)
          goto LABEL_59;
LABEL_66:
        v18[v34] &= ~v35;
        v36 = (v20 + 2) >> 6;
        v37 = 1 << ((v20 + 2) & 0x3A);
        if ((v24 & 0x20) == 0)
          goto LABEL_67;
LABEL_60:
        v18[v36] |= v37;
        v38 = (v20 + 1) >> 6;
        v39 = 1 << ((v20 + 1) & 0x39);
        if ((v24 & 0x40) == 0)
          goto LABEL_52;
LABEL_68:
        v18[v38] |= v39;
        v22 = v20 >> 6;
        v23 = 1 << (v20 & 0x38);
        if (v24 < 0)
          goto LABEL_69;
LABEL_53:
        v18[v22] &= ~v23;
        v20 += 8;
        if (!--v21)
          break;
      }
      else
      {
        v18[v26] &= ~v27;
        v28 = (v20 + 6) >> 6;
        v29 = 1 << ((v20 + 6) & 0x3E);
        if ((v24 & 2) != 0)
          goto LABEL_56;
LABEL_63:
        v18[v28] &= ~v29;
        v30 = (v20 + 5) >> 6;
        v31 = 1 << ((v20 + 5) & 0x3D);
        if ((v24 & 4) == 0)
          goto LABEL_64;
LABEL_57:
        v18[v30] |= v31;
        v32 = (v20 + 4) >> 6;
        v33 = 1 << ((v20 + 4) & 0x3C);
        if ((v24 & 8) != 0)
          goto LABEL_58;
LABEL_65:
        v18[v32] &= ~v33;
        v34 = (v20 + 3) >> 6;
        v35 = 1 << ((v20 + 3) & 0x3B);
        if ((v24 & 0x10) == 0)
          goto LABEL_66;
LABEL_59:
        v18[v34] |= v35;
        v36 = (v20 + 2) >> 6;
        v37 = 1 << ((v20 + 2) & 0x3A);
        if ((v24 & 0x20) != 0)
          goto LABEL_60;
LABEL_67:
        v18[v36] &= ~v37;
        v38 = (v20 + 1) >> 6;
        v39 = 1 << ((v20 + 1) & 0x39);
        if ((v24 & 0x40) != 0)
          goto LABEL_68;
LABEL_52:
        v18[v38] &= ~v39;
        v22 = v20 >> 6;
        v23 = 1 << (v20 & 0x38);
        if ((v24 & 0x80) == 0)
          goto LABEL_53;
LABEL_69:
        v18[v22] |= v23;
        v20 += 8;
        if (!--v21)
          break;
      }
    }
  }
LABEL_70:
  v40 = v15 - 3;
  if (((*(_QWORD *)((char *)v18 + (((v15 - 3) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> ((v15 - 3) & 0x3D)) & 1) != 0
    || (v40 = v15 - 2,
        ((*(_QWORD *)((char *)v18 + (((v15 - 2) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> ((v15 - 2) & 0x3E)) & 1) != 0)
    || (v40 = v15 - 1,
        ((*(_QWORD *)((char *)v18 + (((v15 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v15 - 1)) & 1) != 0))
  {
    v104 = 0;
    std::to_string(&v105, v40);
    v106 = (std::string *)v103;
    v107 = &v105;
    v108 = v103;
    v109 = &v105;
    v110 = &v105;
    v111 = (void **)&v106;
    ((void (*)(void ***, _BYTE *))sub_23584C654)(&v111, v103);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
    if (v104 == -1)
      sub_23584BC5C();
    v106 = &v105;
    ((void (*)(std::string *__return_ptr, std::string **, _BYTE *))off_2506DF418[v104])(&v68, &v106, v103);
    if (v104 != -1)
      ((void (*)(std::string **, _BYTE *))off_2506DF400[v104])(&v106, v103);
    v41 = std::string::insert(&v68, 0, "The LSB padding bit at index ", 0x1DuLL);
    v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v69.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    v43 = std::string::append(&v69, " is not zero!", 0xDuLL);
    v45 = (void *)v43->__r_.__value_.__r.__words[0];
    v44 = v43->__r_.__value_.__l.__size_;
    v70[0] = v43->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v70 + 3) = *(_DWORD *)((char *)&v43->__r_.__value_.__r.__words[2] + 3);
    v46 = SHIBYTE(v43->__r_.__value_.__r.__words[2]);
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    if (v46 < 0)
    {
      sub_23584B488(&v71, v45, v44);
    }
    else
    {
      *(_QWORD *)&v71 = v45;
      *((_QWORD *)&v71 + 1) = v44;
      *(_DWORD *)v72 = v70[0];
      *(_DWORD *)&v72[3] = *(_DWORD *)((char *)v70 + 3);
      v73 = v46;
    }
    v74 = 1;
    LOBYTE(v75) = 0;
    v79 = 0;
    v80 = 1;
    sub_23584CF48(0x2Du, &v71, (uint64_t)v92);
    *(_OWORD *)a3 = *(_OWORD *)v92;
    *(_BYTE *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 112) = 0;
    if (v101)
    {
      *(_BYTE *)(a3 + 40) = 0;
      v47 = v94;
      if (v94)
      {
        *(_OWORD *)(a3 + 16) = *(_OWORD *)&v92[16];
        *(_QWORD *)(a3 + 32) = v93;
        *(_QWORD *)&v92[24] = 0;
        v93 = 0;
        *(_QWORD *)&v92[16] = 0;
        *(_BYTE *)(a3 + 40) = 1;
      }
      *(_BYTE *)(a3 + 48) = 0;
      *(_BYTE *)(a3 + 104) = 0;
      if (v100)
      {
        v48 = v97;
        *(_QWORD *)(a3 + 64) = v96;
        *(_OWORD *)(a3 + 48) = v95;
        v95 = 0uLL;
        *(_QWORD *)(a3 + 72) = v48;
        *(_OWORD *)(a3 + 80) = v98;
        *(_QWORD *)(a3 + 96) = v99;
        v96 = 0;
        v98 = 0uLL;
        v99 = 0;
        *(_BYTE *)(a3 + 104) = 1;
      }
      *(_BYTE *)(a3 + 112) = 1;
      *(_BYTE *)(a3 + 120) = 0;
      if (v47 && SHIBYTE(v93) < 0)
        operator delete(*(void **)&v92[16]);
    }
    else
    {
      *(_BYTE *)(a3 + 120) = 0;
    }
    if (v80)
    {
      if (v79)
      {
        if (v78 < 0)
          operator delete(v77);
        if (v76 < 0)
          operator delete(v75);
      }
      if (v74 && v73 < 0)
        operator delete((void *)v71);
    }
    if (v46 < 0)
    {
      operator delete(v45);
      if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_101:
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_105;
        goto LABEL_106;
      }
    }
    else if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_101;
    }
    operator delete(v69.__r_.__value_.__l.__data_);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
LABEL_105:
      operator delete(v68.__r_.__value_.__l.__data_);
LABEL_106:
    v11 = v18;
LABEL_107:
    operator delete(v11);
    return;
  }
  *(_QWORD *)v92 = operator new(8uLL);
  *(_OWORD *)&v92[8] = xmmword_23587FE80;
  sub_235852614(v92, 3uLL, 0);
  v49 = 0;
  if ((v14 & 7) != 0)
    v50 = 0;
  else
    v50 = -1;
  v51 = (uint64_t)&v18[(v15 >> 6) + v50];
  v67 = (v15 + 61) & 0x3D;
  v52 = v18;
  do
  {
    v53 = *v52;
    v54 = *(_QWORD *)&v92[8];
    if (*(_QWORD *)&v92[8] == *(_QWORD *)&v92[16] << 6)
    {
      if (*(_QWORD *)&v92[8] + 1 < 0)
        sub_235847D5C();
      v55 = *(_QWORD *)&v92[16] << 7;
      if (*(_QWORD *)&v92[16] << 7 <= (*(_QWORD *)&v92[8] & 0xFFFFFFFFFFFFFFC0) + 64)
        v55 = (*(_QWORD *)&v92[8] & 0xFFFFFFFFFFFFFFC0) + 64;
      if (*(_QWORD *)&v92[8] <= 0x3FFFFFFFFFFFFFFEuLL)
        v56 = v55;
      else
        v56 = 0x7FFFFFFFFFFFFFFFLL;
      sub_235850AF0((uint64_t)v92, v56);
      v54 = *(_QWORD *)&v92[8];
    }
    *(_QWORD *)&v92[8] = v54 + 1;
    v57 = *(_QWORD *)v92;
    v58 = v54 >> 6;
    v59 = 1 << v54;
    if (((1 << v49) & v53) != 0)
      v60 = *(_QWORD *)(*(_QWORD *)v92 + 8 * v58) | v59;
    else
      v60 = *(_QWORD *)(*(_QWORD *)v92 + 8 * v58) & ~v59;
    *(_QWORD *)(*(_QWORD *)v92 + 8 * v58) = v60;
    v52 += v49 == 63;
    if (v49 == 63)
      v49 = 0;
    else
      ++v49;
  }
  while (v52 != (uint64_t *)v51 || v49 != v67);
  v62 = *a2;
  v61 = a2[1];
  v107 = 0;
  v108 = 0;
  v106 = 0;
  v63 = v61 - v62;
  if (v61 != v62)
  {
    if ((v63 & 0x8000000000000000) != 0)
      sub_235847D5C();
    v64 = (std::string *)operator new(v61 - v62);
    v106 = v64;
    v108 = (char *)v64 + v63;
    bzero(v64, v63);
    v65 = 0;
    v107 = (std::string *)((char *)v64 + v63);
    do
    {
      v66 = *(_QWORD *)(v57 + ((v65 >> 3) & 0x1FFFFFFFFFFFFFF8));
      v64->__r_.__value_.__s.__data_[0] |= ((v66 >> (v65 & 0x38)) << 7) | (((v66 >> (v65 & 0x38 | 1)) & 1) << 6) | (32 * ((v66 >> (v65 & 0x38 | 2)) & 1)) | (16 * ((v66 >> (v65 & 0x38 | 3)) & 1)) | (8 * ((v66 >> (v65 & 0x38 | 4)) & 1)) | (4 * ((v66 >> (v65 & 0x38 | 5)) & 1)) | (2 * ((v66 >> (v65 & 0x38 | 6)) & 1)) | (v66 >> (v65 & 0x38 | 7)) & 1;
      v64 = (std::string *)((char *)v64 + 1);
      v65 += 8;
      --v63;
    }
    while (v63);
  }
  if (!HIBYTE(v102))
    sub_23584B514();
  sub_23584DAEC();
  if (v106)
  {
    v107 = v106;
    operator delete(v106);
  }
  if (*(_QWORD *)v92)
    operator delete(*(void **)v92);
  if (v18)
    goto LABEL_106;
}

void sub_235851E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p)
{
  void *v55;
  uint64_t v56;
  void *v58;
  void *v59;

  v58 = *(void **)(v56 - 144);
  if (v58)
  {
    *(_QWORD *)(v56 - 136) = v58;
    operator delete(v58);
    v59 = __p;
    if (!__p)
    {
LABEL_3:
      if (!v55)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(v55);
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    v59 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v59);
  if (!v55)
    goto LABEL_8;
  goto LABEL_7;
}

_QWORD *sub_23585200C(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  unint64_t v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  int v12;
  unint64_t v13;
  int v15;
  uint64_t v16;
  uint64_t v17;

  if (a4)
  {
    v5 = result;
    if ((a4 & 0x8000000000000000) != 0)
      sub_235847D5C();
    v8 = (a4 - 1) >> 6;
    result = operator new(8 * (v8 + 1));
    v5[2] = v8 + 1;
    v9 = *(_QWORD **)a2;
    v10 = *(_DWORD *)(a2 + 8);
    v11 = *(_QWORD **)a3;
    v12 = *(_DWORD *)(a3 + 8);
    *v5 = result;
    v5[1] = a4;
    if (a4 >= 0x41)
      v13 = (a4 - 1) >> 6;
    else
      v13 = 0;
    result[v13] = 0;
    if (v9 != v11 || v10 != v12)
    {
      v15 = 0;
      do
      {
        v16 = 1 << v15;
        if (((*v9 >> v10) & 1) != 0)
          v17 = *result | v16;
        else
          v17 = *result & ~v16;
        *result = v17;
        v9 += v10 == 63;
        if (v10 == 63)
          v10 = 0;
        else
          ++v10;
        result += v15 == 63;
        if (v15 == 63)
          v15 = 0;
        else
          ++v15;
      }
      while (v9 != v11 || v10 != v12);
    }
  }
  return result;
}

void sub_2358520FC(_Unwind_Exception *exception_object)
{
  void **v1;

  if (*v1)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_235852114(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  int8x16_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8x8_t v9;
  uint64_t result;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int8x16_t *v21;
  uint64_t v22;
  int8x8_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint64_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int8x16_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint8x8_t v32;
  uint8x8_t v33;

  v3 = *(int8x16_t **)a1;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(unsigned int *)(a2 + 8) - v4;
  v6 = v5 + 8 * (*(_QWORD *)a2 - *(_QWORD *)a1);
  if (*a3)
  {
    if ((_DWORD)v4)
    {
      if ((64 - v4) >= v6)
        v7 = v5 + 8 * (*(_QWORD *)a2 - *(_QWORD *)a1);
      else
        v7 = (64 - v4);
      v8 = v3->i64[0];
      v3 = (int8x16_t *)((char *)v3 + 8);
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v7)) & (-1 << v4) & v8));
      v9.i16[0] = vaddlv_u8(v9);
      result = v9.u32[0];
      v6 -= v7;
      v11 = v6 - 64;
      if (v6 >= 0x40)
        goto LABEL_7;
    }
    else
    {
      result = 0;
      v11 = v6 - 64;
      if (v6 >= 0x40)
      {
LABEL_7:
        if (v11 >= 0xC0)
        {
          v18 = (v11 >> 6) + 1;
          v12 = (int8x8_t *)v3 + (v18 & 0x7FFFFFFFFFFFFFCLL);
          v6 -= (v18 & 0x7FFFFFFFFFFFFFCLL) << 6;
          v19 = 0uLL;
          v20 = (int64x2_t)(unint64_t)result;
          v21 = v3 + 1;
          v22 = v18 & 0x7FFFFFFFFFFFFFCLL;
          do
          {
            v20 = (int64x2_t)vpadalq_u32((uint64x2_t)v20, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v21[-1]))));
            v19 = (int64x2_t)vpadalq_u32((uint64x2_t)v19, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*v21))));
            v21 += 2;
            v22 -= 4;
          }
          while (v22);
          result = vaddvq_s64(vaddq_s64(v19, v20));
          if (v18 == (v18 & 0x7FFFFFFFFFFFFFCLL))
            goto LABEL_22;
        }
        else
        {
          v12 = (int8x8_t *)v3;
        }
        do
        {
          v23 = *v12++;
          v24 = (uint8x8_t)vcnt_s8(v23);
          v24.i16[0] = vaddlv_u8(v24);
          result += v24.u32[0];
          v6 -= 64;
        }
        while (v6 > 0x3F);
LABEL_22:
        if (!v6)
          return result;
        v25 = *(_QWORD *)v12 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v6);
        goto LABEL_32;
      }
    }
    v12 = (int8x8_t *)v3;
    goto LABEL_22;
  }
  if ((_DWORD)v4)
  {
    if ((64 - v4) >= v6)
      v13 = v5 + 8 * (*(_QWORD *)a2 - *(_QWORD *)a1);
    else
      v13 = (64 - v4);
    v14 = v3->i64[0];
    v3 = (int8x16_t *)((char *)v3 + 8);
    v15 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v13)) & (-1 << v4) & ~v14));
    v15.i16[0] = vaddlv_u8(v15);
    result = v15.u32[0];
    v6 -= v13;
    v16 = v6 - 64;
    if (v6 >= 0x40)
      goto LABEL_14;
LABEL_25:
    v17 = (uint64_t *)v3;
    goto LABEL_30;
  }
  result = 0;
  v16 = v6 - 64;
  if (v6 < 0x40)
    goto LABEL_25;
LABEL_14:
  if (v16 >= 0xC0)
  {
    v26 = (v16 >> 6) + 1;
    v17 = &v3->i64[v26 & 0x7FFFFFFFFFFFFFCLL];
    v6 -= (v26 & 0x7FFFFFFFFFFFFFCLL) << 6;
    v27 = 0uLL;
    v28 = (int64x2_t)(unint64_t)result;
    v29 = v3 + 1;
    v30 = v26 & 0x7FFFFFFFFFFFFFCLL;
    do
    {
      v28 = (int64x2_t)vpadalq_u32((uint64x2_t)v28, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(vmvnq_s8(v29[-1])))));
      v27 = (int64x2_t)vpadalq_u32((uint64x2_t)v27, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(vmvnq_s8(*v29)))));
      v29 += 2;
      v30 -= 4;
    }
    while (v30);
    result = vaddvq_s64(vaddq_s64(v27, v28));
    if (v26 == (v26 & 0x7FFFFFFFFFFFFFCLL))
      goto LABEL_30;
  }
  else
  {
    v17 = (uint64_t *)v3;
  }
  do
  {
    v31 = *v17++;
    v32 = (uint8x8_t)vcnt_s8((int8x8_t)~v31);
    v32.i16[0] = vaddlv_u8(v32);
    result += v32.u32[0];
    v6 -= 64;
  }
  while (v6 > 0x3F);
LABEL_30:
  if (!v6)
    return result;
  v25 = (0xFFFFFFFFFFFFFFFFLL >> -(char)v6) & ~*v17;
LABEL_32:
  v33 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
  v33.i16[0] = vaddlv_u8(v33);
  result += v33.u32[0];
  return result;
}

_QWORD *sub_23585238C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    if (v3 < 0)
      sub_235847D5C();
    v5 = ((unint64_t)(v3 - 1) >> 6) + 1;
    v6 = operator new(8 * v5);
    *a1 = v6;
    a1[1] = 0;
    a1[2] = v5;
    v7 = *(_QWORD **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    a1[1] = v8;
    v9 = (v8 - 1) >> 6;
    if (v8 < 0x41)
      v9 = 0;
    v6[v9] = 0;
    v10 = v8 & 0x3F;
    if (v8 > 0x3F || (v8 & 0x3F) != 0)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = &v7[v8 >> 6];
      do
      {
        v15 = 1 << v11;
        if (((*v7 >> v13) & 1) != 0)
          v16 = *v6 | v15;
        else
          v16 = *v6 & ~v15;
        *v6 = v16;
        ++v13;
        v7 += v12 == 63;
        if (v12 == 63)
          v13 = 0;
        v6 += v11 == 63;
        if (v11 == 63)
          v11 = 0;
        else
          ++v11;
        v12 = v13;
      }
      while (v7 != v14 || v10 != v13);
    }
  }
  return a1;
}

uint64_t *sub_235852494(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v4 = *a1;
  v6 = *(char **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *(_QWORD *)v6 = a2;
    v8 = (uint64_t)(v6 + 8);
    goto LABEL_22;
  }
  v9 = *(char **)v4;
  v10 = (uint64_t)&v6[-*(_QWORD *)v4];
  v11 = v10 >> 3;
  v12 = (v10 >> 3) + 1;
  if (v12 >> 61)
    sub_235847D5C();
  v13 = v5 - (_QWORD)v9;
  if (v13 >> 2 > v12)
    v12 = v13 >> 2;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
    v14 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 61)
      sub_2358482F0();
    v15 = operator new(8 * v14);
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = a2;
    v8 = (uint64_t)(v16 + 1);
    v18 = v6 - v9;
    if (v6 == v9)
      goto LABEL_20;
    goto LABEL_14;
  }
  v15 = 0;
  v16 = (_QWORD *)(8 * v11);
  v17 = 0;
  *(_QWORD *)(8 * v11) = a2;
  v8 = 8 * v11 + 8;
  v18 = v6 - v9;
  if (v6 != v9)
  {
LABEL_14:
    v19 = v18 - 8;
    if (v19 < 0x58)
      goto LABEL_27;
    if ((unint64_t)(v6 - v15 - v10) < 0x20)
      goto LABEL_27;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = &v6[-v21];
    v16 = (_QWORD *)((char *)v16 - v21);
    v22 = &v15[8 * v11 - 16];
    v23 = v6 - 16;
    v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *v22 = v25;
      v22 -= 2;
      v23 -= 32;
      v24 -= 4;
    }
    while (v24);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        v26 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *--v16 = v26;
      }
      while (v7 != v9);
    }
  }
LABEL_20:
  *(_QWORD *)v4 = v16;
  *(_QWORD *)(v4 + 8) = v8;
  *(_QWORD *)(v4 + 16) = v17;
  if (v9)
    operator delete(v9);
LABEL_22:
  *(_QWORD *)(v4 + 8) = v8;
  return a1;
}

void sub_235852614(_QWORD *a1, unint64_t a2, int a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v3 = a2;
  v4 = a1[1];
  v5 = v4 + a2;
  a1[1] = v4 + a2;
  if (!v4)
  {
    v6 = v5 - 1;
LABEL_6:
    v7 = v6 >> 6;
    if (v5 >= 0x41)
      v8 = v7;
    else
      v8 = 0;
    *(_QWORD *)(*a1 + 8 * v8) = 0;
    if (!a2)
      return;
    goto LABEL_10;
  }
  v6 = v5 - 1;
  if (((v5 - 1) ^ (v4 - 1)) >= 0x40)
    goto LABEL_6;
  if (!a2)
    return;
LABEL_10:
  v9 = (_QWORD *)(*a1 + 8 * (v4 >> 6));
  v10 = v4 & 0x3F;
  if (a3)
  {
    if ((v4 & 0x3F) != 0)
    {
      v11 = (64 - v10);
      if (v11 >= a2)
        v12 = a2;
      else
        v12 = v11;
      *v9++ |= (0xFFFFFFFFFFFFFFFFLL >> (v11 - v12)) & (-1 << v4);
      v3 = a2 - v12;
    }
    if (v3 >= 0x40)
      memset(v9, 255, 8 * (v3 >> 6));
    if ((v3 & 0x3F) != 0)
      v9[v3 >> 6] |= 0xFFFFFFFFFFFFFFFFLL >> -(v3 & 0x3F);
  }
  else
  {
    if ((v4 & 0x3F) != 0)
    {
      v13 = (64 - v10);
      if (v13 >= a2)
        v14 = a2;
      else
        v14 = v13;
      *v9++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (v13 - v14)) & (-1 << v4));
      v3 = a2 - v14;
    }
    if (v3 >= 0x40)
      bzero(v9, 8 * (v3 >> 6));
    if ((v3 & 0x3F) != 0)
      v9[v3 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v3 & 0x3F));
  }
}

size_t sub_23585279C(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_2506DF400[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_23584B34C();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_235852888(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_23584B34C();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_2506DF400[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_23584BE28((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_235852A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_235847B00(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_235852A84(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_23584B34C();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_235847D5C();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_2358482F0();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_23584B34C();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_235852D14(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_235852D2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

size_t sub_235852D34(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_2506DF400[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_23584B34C();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_235852E20(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_23584B34C();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_2506DF400[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_23584BE28((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_235852FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_235847B00(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_23585301C(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_23584B34C();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_235847D5C();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_2358482F0();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_23584B34C();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_2358532AC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_2358532C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

size_t sub_2358532CC(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_2506DF400[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_23584B34C();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_2358533B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_23584B34C();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_2506DF400[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_23584BE28((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_235853570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_235847B00(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2358535B4(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_23584B34C();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_235847D5C();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_2358482F0();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_23584B34C();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_235853844(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_23585385C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_235853864(uint64_t *a1@<X1>, unint64_t a2@<X2>, uint64_t *a3@<X3>, int a4@<W4>, uint64_t *a5@<X5>, uint64_t **a6@<X8>)
{
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t **v21;

  v9 = a2;
  v10 = a1;
  LODWORD(v11) = a2;
  if (a1 != a3 || (_DWORD)a2 != a4)
  {
    v21 = a6;
    do
    {
      v12 = *v10;
      v13 = a5[1];
      v14 = a5[2];
      if (v13 == v14 << 6)
      {
        if ((uint64_t)(v13 + 1) < 0)
          sub_235847D5C();
        v15 = v14 << 7;
        if (v15 <= (v13 & 0xFFFFFFFFFFFFFFC0) + 64)
          v15 = (v13 & 0xFFFFFFFFFFFFFFC0) + 64;
        if (v13 <= 0x3FFFFFFFFFFFFFFELL)
          v16 = v15;
        else
          v16 = 0x7FFFFFFFFFFFFFFFLL;
        sub_235850AF0((uint64_t)a5, v16);
        v13 = a5[1];
      }
      a5[1] = v13 + 1;
      v17 = *a5;
      v18 = v13 >> 6;
      v19 = 1 << v13;
      if ((v12 & (1 << v9)) != 0)
        v20 = *(_QWORD *)(v17 + 8 * v18) | v19;
      else
        v20 = *(_QWORD *)(v17 + 8 * v18) & ~v19;
      *(_QWORD *)(v17 + 8 * v18) = v20;
      v10 += (_DWORD)v11 == 63;
      if ((_DWORD)v11 == 63)
        v11 = 0;
      else
        v11 = (v9 + 1);
      v9 = v11 | v9 & 0xFFFFFFFF00000000;
    }
    while (v10 != a3 || (_DWORD)v11 != a4);
    v10 = a3;
    a6 = v21;
  }
  *a6 = v10;
  a6[1] = (uint64_t *)v9;
  a6[2] = a5;
}

uint64_t sub_235853998@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;

  v4 = *(unint64_t **)result;
  v5 = *(unsigned int *)(result + 8);
  v6 = *(unsigned int *)(a2 + 8) + 8 * (*(_QWORD *)a2 - *(_QWORD *)result);
  v7 = v6 - v5;
  if (*a3)
  {
    if (!(_DWORD)v5)
      goto LABEL_9;
    v8 = (64 - v5);
    if (v8 >= v7)
      v9 = v6 - v5;
    else
      v9 = (64 - v5);
    v10 = (0xFFFFFFFFFFFFFFFFLL >> (64 - v5 - v9)) & (-1 << v5) & *v4;
    if (!v10)
    {
      if (v7 > v8)
      {
        v7 -= v9;
        ++v4;
LABEL_9:
        if (v7 >= 0x40)
        {
          do
          {
            v11 = *v4;
            if (*v4)
              goto LABEL_28;
            ++v4;
            v7 -= 64;
          }
          while (v7 > 0x3F);
        }
        if (!v7 || (v11 = *v4 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v7)) == 0)
        {
LABEL_14:
          *(_QWORD *)a4 = v4;
          *(_DWORD *)(a4 + 8) = v7;
          return result;
        }
LABEL_28:
        *(_QWORD *)a4 = v4;
        *(_DWORD *)(a4 + 8) = __clz(__rbit64(v11));
        return result;
      }
      goto LABEL_29;
    }
LABEL_20:
    *(_QWORD *)a4 = v4;
    *(_DWORD *)(a4 + 8) = __clz(__rbit64(v10));
    return result;
  }
  if ((_DWORD)v5)
  {
    v12 = (64 - v5);
    if (v12 >= v7)
      v13 = v6 - v5;
    else
      v13 = (64 - v5);
    v10 = (0xFFFFFFFFFFFFFFFFLL >> (64 - v5 - v13)) & (-1 << v5) & ~*v4;
    if (v10)
      goto LABEL_20;
    if (v7 <= v12)
    {
LABEL_29:
      *(_QWORD *)a4 = &v4[v6 >> 6];
      *(_DWORD *)(a4 + 8) = v6 & 0x3F;
      return result;
    }
    v7 -= v13;
    ++v4;
  }
  if (v7 < 0x40)
  {
LABEL_26:
    if (!v7)
      goto LABEL_14;
    v11 = (0xFFFFFFFFFFFFFFFFLL >> -(char)v7) & ~*v4;
    if (!v11)
      goto LABEL_14;
    goto LABEL_28;
  }
  while (*v4 == -1)
  {
    ++v4;
    v7 -= 64;
    if (v7 <= 0x3F)
      goto LABEL_26;
  }
  v14 = __clz(__rbit64(~*v4));
  *(_QWORD *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v14;
  return result;
}

void sub_235853B2C(int a1@<W1>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  __int128 v4;
  const char *v5;
  char *v6;
  __int128 v7;
  const char *v8;

  switch(a1)
  {
    case 0:
      *(_BYTE *)(a2 + 23) = 8;
      strcpy((char *)a2, "No error");
      return;
    case 1:
      v3 = operator new(0x20uLL);
      *(_QWORD *)a2 = v3;
      v4 = xmmword_23587FE70;
      v5 = "Error in metadata parity";
      goto LABEL_9;
    case 2:
      v6 = (char *)operator new(0x19uLL);
      *(_QWORD *)a2 = v6;
      v7 = xmmword_23587FF10;
      v8 = "Metadata low confidence";
      goto LABEL_11;
    case 3:
      v3 = operator new(0x20uLL);
      *(_QWORD *)a2 = v3;
      v4 = xmmword_23587FE70;
      v5 = "Error in gap bits parity";
      goto LABEL_9;
    case 4:
      v6 = (char *)operator new(0x19uLL);
      *(_QWORD *)a2 = v6;
      v7 = xmmword_23587FF10;
      v8 = "Gap bits low confidence";
      goto LABEL_11;
    case 5:
      v3 = operator new(0x20uLL);
      *(_QWORD *)a2 = v3;
      v4 = xmmword_23587FE70;
      v5 = "Error in arc bits parity";
LABEL_9:
      *(_OWORD *)(a2 + 8) = v4;
      *(_OWORD *)v3 = *(_OWORD *)v5;
      v3[2] = *((_QWORD *)v5 + 2);
      *((_BYTE *)v3 + 24) = 0;
      break;
    case 6:
      v6 = (char *)operator new(0x19uLL);
      *(_QWORD *)a2 = v6;
      v7 = xmmword_23587FF10;
      v8 = "Arc bits low confidence";
LABEL_11:
      *(_OWORD *)(a2 + 8) = v7;
      *(_OWORD *)v6 = *(_OWORD *)v8;
      *(_QWORD *)(v6 + 15) = *(_QWORD *)(v8 + 15);
      v6[23] = 0;
      break;
    case 7:
      *(_BYTE *)(a2 + 23) = 15;
      strcpy((char *)a2, "Not enough arcs");
      break;
    case 8:
      strcpy((char *)a2, "Bad redundant arc bits");
      *(_BYTE *)(a2 + 23) = 22;
      break;
    case 9:
      *(_BYTE *)(a2 + 23) = 14;
      strcpy((char *)a2, "Bad magic bits");
      break;
    default:
      *(_BYTE *)(a2 + 23) = 13;
      strcpy((char *)a2, "Unknown error");
      break;
  }
}

void sub_235853D48(std::error_category *a1)
{
  std::error_category::~error_category(a1);
  JUMPOUT(0x23B7D94C4);
}

const char *sub_235853D6C()
{
  return "App Clip Code Codec Error Category";
}

double sub_235853D78@<D0>(unsigned __int8 **a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (**a1 <= 0xFu)
  {
    if (**a1)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v9 = operator new(8uLL);
      *a2 = v9;
      *(_QWORD *)&result = 6;
      *(_OWORD *)(a2 + 1) = xmmword_23587FE40;
      *v9 = 13;
      return result;
    }
    goto LABEL_14;
  }
  if (**a1 != 110 || a1[2] != (unsigned __int8 *)8 || *a1[1])
  {
LABEL_14:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return result;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = operator new(8uLL);
  v4 = 0;
  v5 = 0;
  *a2 = v3;
  *(_QWORD *)&result = 45;
  *(_OWORD *)(a2 + 1) = xmmword_23587FE30;
  *v3 = 0;
  do
  {
    v8 = 1 << v4;
    if (byte_2358809D5[v5])
      v7 = *v3 | v8;
    else
      v7 = *v3 & ~v8;
    *v3 = v7;
    ++v5;
    v3 += v4 == 63;
    if (v4 == 63)
      v4 = 0;
    else
      ++v4;
  }
  while (v5 != 45);
  return result;
}

void sub_235853E88(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  unint64_t *v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  unint64_t *v35;
  uint64_t v36;
  __int128 v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  unint64_t *v48;
  int64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  unint64_t *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  unint64_t *v65;
  uint64_t v66;
  int64_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  unint64_t *v75;
  uint64_t v76;
  __int128 v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  unint64_t *v82;
  uint64_t v83;
  __int128 v84;
  _QWORD *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t *v89;
  char *v90;
  char *v91;
  uint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t *v101;
  char *v102;
  _QWORD *v103;
  unint64_t v104;
  _BYTE *v105;
  _QWORD *v106;
  uint64_t v107;
  int64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  _OWORD *v113;
  char *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  int64_t v121;
  unint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  _BYTE *v129;
  _BYTE *v130;
  int64_t v131;
  char *v132;
  char *v133;
  void *v134;
  void *v135;
  unint64_t *v136;
  unint64_t v138;
  uint64_t *v139;
  size_t __sz;
  size_t __sza;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  char *v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t *v151;
  unint64_t *v152;
  char *v153;
  unint64_t *v154;
  unint64_t *__p;

  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v152 = 0;
  v6 = 0;
  v7 = 0;
  v8 = &qword_235880A08;
  do
  {
    v9 = *v8;
    v10 = v8[1];
    v11 = v10 - *v8;
    v139 = v8;
    v142 = *v8;
    v143 = v5;
    v12 = *v8;
    if (v10 == *v8)
    {
LABEL_4:
      v11 = v12 - v9;
      v13 = v10 - 1;
      v10 = v12;
      if (v12 == v13)
      {
        v14 = v3;
        v149 = v6;
        if (v3 < v152)
          goto LABEL_48;
        goto LABEL_6;
      }
    }
    else
    {
      do
      {
        if (((*(_QWORD *)(a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
          goto LABEL_4;
        ++v12;
      }
      while (v10 != v12);
      v13 = v10 - 1;
    }
    __sz = v11;
    v14 = v3;
    v138 = v10;
    v19 = v3;
    v145 = v13;
    do
    {
      if (v14 < v152)
      {
        *v14++ = v6;
        goto LABEL_20;
      }
      v20 = v14 - v19;
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 61)
        sub_235847D5C();
      if (((char *)v152 - (char *)v19) >> 2 > v21)
        v21 = ((char *)v152 - (char *)v19) >> 2;
      if ((unint64_t)((char *)v152 - (char *)v19) >= 0x7FFFFFFFFFFFFFF8)
        v22 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      v150 = v6;
      if (v22)
      {
        if (v22 >> 61)
          sub_2358482F0();
        v23 = v22;
        v24 = operator new(8 * v22);
        v22 = v23;
        v25 = (unint64_t *)&v24[8 * v20];
        *v25 = v150;
        v26 = (uint64_t)(v25 + 1);
        v27 = (char *)v14 - (char *)v19;
        if (v14 == v19)
        {
LABEL_38:
          v152 = (unint64_t *)&v24[8 * v22];
          if (!v19)
            goto LABEL_36;
LABEL_35:
          operator delete(v19);
          goto LABEL_36;
        }
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t *)(8 * v20);
        *(_QWORD *)(8 * v20) = v150;
        v26 = 8 * v20 + 8;
        v27 = (char *)v14 - (char *)v19;
        if (v14 == v19)
          goto LABEL_38;
      }
      v28 = v27 - 8;
      if (v28 < 0x168
        || (v31 = ((char *)(v14 - 1) - (char *)v19) & 0xFFFFFFFFFFFFFFF8,
            &v24[(char *)v14 - (char *)v19 - 8 - v31] > &v24[(char *)v14 - (char *)v19 - 8])
        || (unint64_t *)((char *)v14 - v31 - 8) > v14 - 1
        || (unint64_t)((char *)v19 - v24) < 0x20)
      {
        v29 = v14;
        do
        {
LABEL_33:
          v30 = *--v29;
          *--v25 = v30;
        }
        while (v29 != v19);
        goto LABEL_34;
      }
      v32 = (v28 >> 3) + 1;
      v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
      v29 = &v14[v33 / 0xFFFFFFFFFFFFFFF8];
      v25 = (unint64_t *)((char *)v25 - v33);
      v34 = &v24[8 * v20 - 16];
      v35 = v14 - 2;
      v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v37 = *(_OWORD *)v35;
        *(v34 - 1) = *((_OWORD *)v35 - 1);
        *v34 = v37;
        v34 -= 2;
        v35 -= 4;
        v36 -= 4;
      }
      while (v36);
      if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_33;
LABEL_34:
      v152 = (unint64_t *)&v24[8 * v22];
      if (v19)
        goto LABEL_35;
LABEL_36:
      v19 = v25;
      v14 = (unint64_t *)v26;
      v6 = v150;
      v13 = v145;
LABEL_20:
      ++v10;
      v6 += (~*(_QWORD *)(a1 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1;
    }
    while (v10 != v13);
    v13 = v138;
    v3 = v19;
    v11 = __sz;
    v9 = v142;
    v149 = v6;
    if (v14 < v152)
    {
LABEL_48:
      *v14 = v6;
      __sza = (size_t)(v14 + 1);
      v5 = v143;
      if (v13 == v9)
        goto LABEL_58;
LABEL_88:
      v60 = 0;
      while (2)
      {
        while (v4 < v5)
        {
          *v4++ = v6;
          v2 = (uint64_t)v4;
          if (++v60 == v11)
            goto LABEL_58;
        }
        v61 = v4 - v7;
        v62 = v61 + 1;
        if ((unint64_t)(v61 + 1) >> 61)
          sub_235847D5C();
        if (((char *)v5 - (char *)v7) >> 2 > v62)
          v62 = ((char *)v5 - (char *)v7) >> 2;
        if ((unint64_t)((char *)v5 - (char *)v7) >= 0x7FFFFFFFFFFFFFF8)
          v63 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v63 = v62;
        if (v63)
        {
          if (v63 >> 61)
            sub_2358482F0();
          v64 = operator new(8 * v63);
          v65 = (unint64_t *)&v64[8 * v61];
          *v65 = v6;
          v66 = (uint64_t)(v65 + 1);
          v67 = (char *)v4 - (char *)v7;
          if (v4 != v7)
          {
LABEL_100:
            v68 = v67 - 8;
            if (v68 < 0x168
              || (v71 = ((char *)(v4 - 1) - (char *)v7) & 0xFFFFFFFFFFFFFFF8,
                  &v64[(char *)v4 - (char *)v7 - 8 - v71] > &v64[(char *)v4 - (char *)v7 - 8])
              || (unint64_t *)((char *)v4 - v71 - 8) > v4 - 1
              || (unint64_t)((char *)v7 - v64) < 0x20)
            {
              v69 = v4;
              v2 = v66;
            }
            else
            {
              v72 = (v68 >> 3) + 1;
              v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
              v69 = &v4[v73 / 0xFFFFFFFFFFFFFFF8];
              v65 = (unint64_t *)((char *)v65 - v73);
              v74 = &v64[8 * v61 - 16];
              v75 = v4 - 2;
              v76 = v72 & 0x3FFFFFFFFFFFFFFCLL;
              v2 = v66;
              do
              {
                v77 = *(_OWORD *)v75;
                *(v74 - 1) = *((_OWORD *)v75 - 1);
                *v74 = v77;
                v74 -= 2;
                v75 -= 4;
                v76 -= 4;
              }
              while (v76);
              if (v72 == (v72 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_103:
                v5 = (unint64_t *)&v64[8 * v63];
                if (v7)
                  goto LABEL_104;
                goto LABEL_105;
              }
            }
            do
            {
              v70 = *--v69;
              *--v65 = v70;
            }
            while (v69 != v7);
            goto LABEL_103;
          }
        }
        else
        {
          v64 = 0;
          v65 = (unint64_t *)(8 * v61);
          *(_QWORD *)(8 * v61) = v6;
          v66 = 8 * v61 + 8;
          v67 = (char *)v4 - (char *)v7;
          if (v4 != v7)
            goto LABEL_100;
        }
        v2 = v66;
        v5 = (unint64_t *)&v64[8 * v63];
        if (v7)
LABEL_104:
          operator delete(v7);
LABEL_105:
        v7 = v65;
        ++v60;
        v4 = (unint64_t *)v2;
        if (v60 == v11)
          goto LABEL_58;
        continue;
      }
    }
LABEL_6:
    v15 = v14 - v3;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      sub_235847D5C();
    if (((char *)v152 - (char *)v3) >> 2 > v16)
      v16 = ((char *)v152 - (char *)v3) >> 2;
    if ((unint64_t)((char *)v152 - (char *)v3) >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v144 = v13;
    if (v17)
    {
      if (v17 >> 61)
        sub_2358482F0();
      v18 = operator new(8 * v17);
    }
    else
    {
      v18 = 0;
    }
    v38 = (unint64_t *)&v18[8 * v15];
    *v38 = v149;
    __sza = (size_t)(v38 + 1);
    if (v14 != v3)
    {
      v39 = (char *)v14 - (char *)v3 - 8;
      if (v39 < 0x168
        || (v78 = ((char *)(v14 - 1) - (char *)v3) & 0xFFFFFFFFFFFFFFF8,
            &v18[(char *)v14 - (char *)v3 - 8 - v78] > &v18[(char *)v14 - (char *)v3 - 8])
        || (unint64_t *)((char *)v14 - v78 - 8) > v14 - 1
        || (unint64_t)((char *)v3 - v18) < 0x20)
      {
        v40 = v14;
        v6 = v149;
        v5 = v143;
      }
      else
      {
        v79 = (v39 >> 3) + 1;
        v80 = 8 * (v79 & 0x3FFFFFFFFFFFFFFCLL);
        v40 = &v14[v80 / 0xFFFFFFFFFFFFFFF8];
        v38 = (unint64_t *)((char *)v38 - v80);
        v81 = &v18[8 * v15 - 16];
        v82 = v14 - 2;
        v83 = v79 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v84 = *(_OWORD *)v82;
          *(v81 - 1) = *((_OWORD *)v82 - 1);
          *v81 = v84;
          v81 -= 2;
          v82 -= 4;
          v83 -= 4;
        }
        while (v83);
        v6 = v149;
        v5 = v143;
        if (v79 == (v79 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_55:
          v152 = (unint64_t *)&v18[8 * v17];
          if (v3)
            goto LABEL_56;
          goto LABEL_57;
        }
      }
      do
      {
        v41 = *--v40;
        *--v38 = v41;
      }
      while (v40 != v3);
      goto LABEL_55;
    }
    v6 = v149;
    v5 = v143;
    v152 = (unint64_t *)&v18[8 * v17];
    if (v3)
LABEL_56:
      operator delete(v3);
LABEL_57:
    v3 = v38;
    if (v144 != v142)
      goto LABEL_88;
LABEL_58:
    if (v3 != (unint64_t *)__sza)
    {
      v42 = v3;
      while (1)
      {
        while (v4 < v5)
        {
          v43 = *v42++;
          *v4++ = v43;
          v2 = (uint64_t)v4;
          if (v42 == (unint64_t *)__sza)
            goto LABEL_2;
        }
        v44 = v4 - v7;
        v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 61)
          sub_235847D5C();
        if (((char *)v5 - (char *)v7) >> 2 > v45)
          v45 = ((char *)v5 - (char *)v7) >> 2;
        v46 = (unint64_t)((char *)v5 - (char *)v7) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v45;
        if (v46)
        {
          if (v46 >> 61)
            sub_2358482F0();
          v47 = operator new(8 * v46);
          v48 = (unint64_t *)&v47[8 * v44];
          *v48 = *v42;
          v2 = (uint64_t)(v48 + 1);
          v49 = (char *)v4 - (char *)v7;
          if (v4 == v7)
          {
LABEL_79:
            v6 = v149;
            v5 = (unint64_t *)&v47[8 * v46];
            if (!v7)
              goto LABEL_76;
LABEL_75:
            operator delete(v7);
            goto LABEL_76;
          }
        }
        else
        {
          v47 = 0;
          v48 = (unint64_t *)(8 * v44);
          *(_QWORD *)(8 * v44) = *v42;
          v2 = 8 * v44 + 8;
          v49 = (char *)v4 - (char *)v7;
          if (v4 == v7)
            goto LABEL_79;
        }
        v50 = v49 - 8;
        if (v50 < 0x168)
          break;
        v53 = ((char *)(v4 - 1) - (char *)v7) & 0xFFFFFFFFFFFFFFF8;
        if (&v47[(char *)v4 - (char *)v7 - 8 - v53] > &v47[(char *)v4 - (char *)v7 - 8]
          || (unint64_t *)((char *)v4 - v53 - 8) > v4 - 1
          || (unint64_t)((char *)v7 - v47) < 0x20)
        {
          break;
        }
        v54 = (v50 >> 3) + 1;
        v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
        v51 = &v4[v55 / 0xFFFFFFFFFFFFFFF8];
        v48 = (unint64_t *)((char *)v48 - v55);
        v56 = &v47[8 * v44 - 16];
        v57 = v4 - 2;
        v58 = v54 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v59 = *(_OWORD *)v57;
          *(v56 - 1) = *((_OWORD *)v57 - 1);
          *v56 = v59;
          v56 -= 2;
          v57 -= 4;
          v58 -= 4;
        }
        while (v58);
        v6 = v149;
        if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_73;
LABEL_74:
        v5 = (unint64_t *)&v47[8 * v46];
        if (v7)
          goto LABEL_75;
LABEL_76:
        v7 = v48;
        ++v42;
        v4 = (unint64_t *)v2;
        if (v42 == (unint64_t *)__sza)
          goto LABEL_2;
      }
      v51 = v4;
      v6 = v149;
      do
      {
LABEL_73:
        v52 = *--v51;
        *--v48 = v52;
      }
      while (v51 != v7);
      goto LABEL_74;
    }
LABEL_2:
    ++v6;
    v8 = v139 + 2;
  }
  while (v139 + 2 != (uint64_t *)&unk_235880A58);
  v154 = v3;
  __p = v7;
  if (!v6)
  {
    v87 = 0;
    v86 = 0;
    v85 = a2;
    if (v7 != (unint64_t *)v2)
      goto LABEL_129;
LABEL_155:
    v119 = v86;
    v85[1] = 0;
    *v85 = 0;
    v85[2] = 0;
    goto LABEL_156;
  }
  if (v6 > 0xAAAAAAAAAAAAAAALL)
    sub_235847D5C();
  v85 = a2;
  v86 = (char *)operator new(24 * v6);
  bzero(v86, 24 * ((24 * v6 - 24) / 0x18) + 24);
  v87 = &v86[24 * ((24 * v6 - 24) / 0x18) + 24];
  if (v7 == (unint64_t *)v2)
    goto LABEL_155;
LABEL_129:
  v146 = v87;
  v148 = v86;
  v136 = v3;
  v88 = 0;
  v89 = v7;
  v151 = (unint64_t *)v2;
  do
  {
    while (1)
    {
      v90 = &v86[24 * *v89];
      v92 = (uint64_t *)(v90 + 8);
      v91 = (char *)*((_QWORD *)v90 + 1);
      v94 = v90 + 16;
      v93 = *((_QWORD *)v90 + 2);
      if ((unint64_t)v91 >= v93)
        break;
      *(_QWORD *)v91 = v88;
      v85 = a2;
      *v92 = (uint64_t)(v91 + 8);
      ++v89;
      ++v88;
      if (v89 == (unint64_t *)v2)
        goto LABEL_152;
    }
    v95 = *(char **)v90;
    v96 = (uint64_t)&v91[-*(_QWORD *)v90];
    v97 = v96 >> 3;
    v98 = (v96 >> 3) + 1;
    if (v98 >> 61)
      sub_235847D5C();
    v99 = v93 - (_QWORD)v95;
    if (v99 >> 2 > v98)
      v98 = v99 >> 2;
    if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8)
      v100 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v100 = v98;
    if (!v100)
    {
      v105 = 0;
      v106 = (_QWORD *)(8 * v97);
      *(_QWORD *)(8 * v97) = v88;
      v107 = 8 * v97 + 8;
      v108 = v91 - v95;
      if (v91 == v95)
        goto LABEL_149;
LABEL_143:
      v109 = v108 - 8;
      if (v109 < 0x58)
        goto LABEL_191;
      if ((unint64_t)(v91 - v105 - v96) < 0x20)
        goto LABEL_191;
      v110 = (v109 >> 3) + 1;
      v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
      v112 = &v91[-v111];
      v106 = (_QWORD *)((char *)v106 - v111);
      v113 = &v105[8 * v97 - 16];
      v114 = v91 - 16;
      v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v116 = *(_OWORD *)v114;
        *(v113 - 1) = *((_OWORD *)v114 - 1);
        *v113 = v116;
        v113 -= 2;
        v114 -= 32;
        v115 -= 4;
      }
      while (v115);
      v91 = v112;
      if (v110 != (v110 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_191:
        do
        {
          v117 = *((_QWORD *)v91 - 1);
          v91 -= 8;
          *--v106 = v117;
        }
        while (v91 != v95);
      }
      goto LABEL_149;
    }
    v153 = &v91[-*(_QWORD *)v90];
    if (v100 >> 61)
      sub_2358482F0();
    v101 = (uint64_t *)(v90 + 8);
    v102 = v90;
    v103 = v90 + 16;
    v104 = v100;
    v105 = operator new(8 * v100);
    v94 = v103;
    v100 = v104;
    v90 = v102;
    v92 = v101;
    v96 = (uint64_t)v153;
    v106 = &v105[8 * v97];
    *v106 = v88;
    v107 = (uint64_t)(v106 + 1);
    v108 = v91 - v95;
    if (v91 != v95)
      goto LABEL_143;
LABEL_149:
    *(_QWORD *)v90 = v106;
    *v92 = v107;
    *v94 = &v105[8 * v100];
    if (v95)
      operator delete(v95);
    v85 = a2;
    v86 = v148;
    v2 = (uint64_t)v151;
    *v92 = v107;
    ++v89;
    ++v88;
  }
  while (v89 != v151);
LABEL_152:
  v85[1] = 0;
  *v85 = 0;
  v85[2] = 0;
  if (v2 - (uint64_t)v7 < 0)
    sub_235847D5C();
  v118 = (char *)operator new(v2 - (_QWORD)v7);
  v3 = v136;
  v119 = v86;
  *v85 = v118;
  v85[1] = v118;
  v120 = &v118[8 * ((v2 - (uint64_t)v7) >> 3)];
  v85[2] = v120;
  memcpy(v118, v7, v2 - (_QWORD)v7);
  v85[1] = v120;
  v87 = v146;
LABEL_156:
  v85[3] = 0;
  v85[5] = 0;
  v85[4] = 0;
  v121 = v87 - v119;
  if (v87 == v119)
  {
    if (v87)
      goto LABEL_169;
  }
  else
  {
    v122 = 0xAAAAAAAAAAAAAAABLL * (v121 >> 3);
    if (v122 > 0xAAAAAAAAAAAAAAALL)
      sub_235847D5C();
    v123 = (char *)operator new(v121);
    v124 = 0;
    v85[3] = v123;
    v85[4] = v123;
    v85[5] = &v123[24 * v122];
    do
    {
      v126 = v87;
      v127 = &v123[v124];
      v128 = &v119[v124];
      *(_QWORD *)v127 = 0;
      *((_QWORD *)v127 + 1) = 0;
      *((_QWORD *)v127 + 2) = 0;
      v130 = *(_BYTE **)&v119[v124];
      v129 = *(_BYTE **)&v119[v124 + 8];
      v131 = v129 - v130;
      if (v129 != v130)
      {
        if (v131 < 0)
          sub_235847D5C();
        v132 = (char *)operator new(v129 - v130);
        *(_QWORD *)v127 = v132;
        *((_QWORD *)v127 + 1) = v132;
        v125 = &v132[8 * (v131 >> 3)];
        *((_QWORD *)v127 + 2) = v125;
        memcpy(v132, v130, v131);
        *((_QWORD *)v127 + 1) = v125;
        v85 = a2;
      }
      v124 += 24;
      v87 = v126;
    }
    while (v128 + 24 != v126);
    v85[4] = &v123[v124];
    if (v119)
    {
      v133 = v126;
      do
      {
        v135 = (void *)*((_QWORD *)v133 - 3);
        v133 -= 24;
        v134 = v135;
        if (v135)
        {
          *((_QWORD *)v87 - 2) = v134;
          operator delete(v134);
        }
        v87 = v133;
      }
      while (v133 != v119);
LABEL_169:
      operator delete(v119);
      v3 = v154;
    }
  }
  if (v3)
    operator delete(v3);
  if (__p)
    operator delete(__p);
}

void sub_235854B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29)
{
  void **v29;
  _QWORD *v30;
  void *v32;
  void *v33;

  v32 = *v29;
  if (*v29)
  {
    *v30 = v32;
    operator delete(v32);
  }
  sub_235854CFC(&a21);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
    v33 = a27;
    if (!a27)
LABEL_5:
      _Unwind_Resume(a1);
  }
  else
  {
    v33 = a27;
    if (!a27)
      goto LABEL_5;
  }
  a28 = (uint64_t)v33;
  operator delete(v33);
  _Unwind_Resume(a1);
}

void **sub_235854CFC(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_235854D70(_QWORD *a1@<X0>, _QWORD *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  _BOOL4 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  int v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  void **v28;
  char *v29;
  void *v30;
  uint64_t v31;
  uint64_t (***v32)();
  uint64_t (***v33)();
  uint64_t (****v34)();
  uint64_t (**v35)();
  uint64_t (***v36)();
  uint64_t v37;
  uint64_t (****v38)();
  uint64_t (***v39)();
  uint64_t v40;
  _QWORD *v41;
  uint64_t (****v42)();
  _QWORD *v43;
  uint64_t v44;
  void **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  _BYTE *v65;
  uint64_t v66;
  int64_t v67;
  _QWORD *v69;
  uint64_t v71;
  void *v72;
  void **v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  void **v88;
  uint64_t v89;
  uint64_t (***v90)();
  uint64_t v91;
  uint64_t (***v92)();
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t (***v119)();
  uint64_t v120;
  void **v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t (***v125)();
  uint64_t v126;
  uint64_t (***v127)();
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t i;
  uint64_t v132;
  uint64_t v133;
  _BYTE *v134;
  char *v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  _BYTE *v139;
  _BYTE *v140;
  int64_t v141;
  char *v142;
  char *v143;
  _BYTE *v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  unint64_t v151;
  unint64_t v152;
  int v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  int v161;
  char *v162;
  char *v163;
  int v164;
  char *j;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  unint64_t v172;
  unint64_t v173;
  int v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  int v182;
  _QWORD *v183;
  char *v184;
  int v185;
  _QWORD *k;
  int v187;
  char v188;
  void *v189;
  uint64_t *v190;
  int v191;
  uint64_t v192;
  int v193;
  unint64_t v194;
  char *v195;
  char *v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  char *v200;
  int64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  _BYTE *v206;
  unint64_t *v207;
  int64_t v208;
  unint64_t v209;
  char *v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _OWORD *v215;
  char *v216;
  uint64_t v217;
  __int128 v218;
  uint64_t (***v219)();
  uint64_t (****v220)();
  uint64_t (***v221)();
  char v222;
  uint64_t v223;
  uint64_t (***v224)();
  _QWORD *v225;
  uint64_t (**v226)();
  uint64_t (***v227)();
  uint64_t v228;
  uint64_t (****v229)();
  uint64_t v230;
  void **v231;
  void **v232;
  uint64_t (***v233)();
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t (***v237)();
  uint64_t v238;
  uint64_t v239;
  void **v240;
  uint64_t (***v241)();
  _QWORD *v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  char *v247;
  int64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  char *v253;
  char *v254;
  int64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  char *v260;
  char *v261;
  uint64_t v262;
  __int128 v263;
  uint64_t v264;
  char v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  void *v269;
  unint64_t v270;
  _QWORD *v271;
  int v272;
  int v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  BOOL v278;
  int v279;
  int v280;
  int v281;
  uint64_t v282;
  int v283;
  uint64_t *v284;
  uint64_t v285;
  int v286;
  size_t v287;
  _QWORD *v288;
  char *v289;
  int v290;
  uint64_t v291;
  int64_t v292;
  char *v293;
  char *v294;
  __int128 v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  _BOOL4 v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  void *v304;
  _BOOL8 v305;
  uint64_t v307;
  uint64_t v308;
  uint64_t *__src;
  unint64_t v311;
  uint64_t v313;
  _QWORD *v314;
  void *v315[2];
  __int128 v316;
  unint64_t v317;
  void *v318;
  char *v319;
  char *v320;
  __int16 v321;
  char v322;
  _BYTE v323[7];
  void *__p[2];
  void *v325[2];
  _BYTE v326[24];
  _QWORD v327[3];
  uint64_t (***v328)();
  uint64_t v329;
  void *v330[2];
  __int128 v331;
  _OWORD v332[3];
  _OWORD v333[3];
  void *memptr[4];
  __int128 v335;
  _OWORD v336[2];
  __int128 v337;
  __int128 v338;
  __int128 v339;
  uint64_t v340;
  _QWORD v341[3];
  _QWORD *v342;
  uint64_t v343;
  uint64_t v344;
  _QWORD v345[3];
  _QWORD *v346;
  uint64_t v347;
  uint64_t v348;
  _BYTE v349[24];
  _BYTE *v350;
  uint64_t v351;
  uint64_t v352;
  _BYTE v353[24];
  _BYTE *v354;
  uint64_t v355;
  uint64_t v356;
  _QWORD v357[3];
  _QWORD *v358;
  uint64_t v359;
  uint64_t v360;
  _QWORD v361[3];
  _QWORD *v362;
  uint64_t v363;
  uint64_t v364;
  _BYTE v365[24];
  _BYTE *v366;
  uint64_t v367;
  uint64_t v368;
  _BYTE v369[24];
  _BYTE *v370;
  uint64_t v371;
  uint64_t v372;
  _BYTE v373[24];
  _BYTE *v374;
  uint64_t v375;
  uint64_t v376;
  _BYTE v377[24];
  _BYTE *v378;
  uint64_t v379;
  uint64_t v380;
  _BYTE v381[24];
  _BYTE *v382;
  uint64_t v383;
  uint64_t v384;
  _BYTE v385[17];
  _BYTE *v386;
  uint64_t v387;
  uint64_t v388;
  _QWORD v389[3];
  _QWORD *v390;
  uint64_t v391;
  uint64_t v392;
  _QWORD v393[3];
  _QWORD *v394;
  uint64_t v395;
  uint64_t v396;
  _QWORD v397[3];
  _QWORD *v398;
  uint64_t v399;
  uint64_t v400;
  _QWORD v401[3];
  _QWORD *v402;
  uint64_t v403;
  char *v404;
  _QWORD v405[3];
  _QWORD *v406;
  __int128 v407;
  _QWORD v408[3];
  uint64_t (***v409)();
  uint64_t v410;
  uint64_t v411;
  uint64_t (**v412)();
  void **v413;
  uint64_t (***v414)();
  uint64_t v415;
  char *v416;
  uint64_t (**v417)();
  void **v418;
  uint64_t (***v419)();
  uint64_t v420;
  uint64_t v421;

  v421 = *MEMORY[0x24BDAC8D0];
  v5 = *a3;
  if (v5 == 8)
    goto LABEL_4;
  if (v5 == 110)
  {
    v313 = 0;
    v6 = 0;
    goto LABEL_11;
  }
  if (v5 == 16)
  {
LABEL_4:
    v313 = 6;
    if (v5 == 8)
      goto LABEL_9;
  }
  else
  {
    v313 = 8;
  }
  if (v5 == 16)
  {
LABEL_9:
    v6 = 9;
    goto LABEL_11;
  }
  v6 = 5;
LABEL_11:
  v7 = v6 | (2 * (v5 != 110));
  if (v7)
    v8 = v313 == 0;
  else
    v8 = 1;
  v307 = v6 | (2 * (v5 != 110));
  if (v8)
    v9 = 0;
  else
    v9 = v313 | (v7 << 32);
  if (HIDWORD(v9))
    v10 = v9 << 32;
  else
    v10 = 0;
  v311 = v9 & 0xF;
  v11 = (v9 & 0xF) == 0 || HIDWORD(v9) == 0;
  if (v11)
    v12 = 0;
  else
    v12 = v9;
  v13 = HIDWORD(v12) * (unint64_t)(v10 >> 29);
  v14 = 7;
  if (((v10 >> 29) & ((v10 >> 29) - 1)) == 0)
    v14 = (v10 >> 29) - 1;
  v15 = v14 | (v14 >> 1) | ((v14 | (v14 >> 1)) >> 2);
  v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8);
  v17 = v16 | (v16 >> 16) | ((v16 | (v16 >> 16)) >> 32);
  if (v17 + 1 > 8)
    v18 = v17 + 1;
  else
    v18 = 8;
  v302 = v18;
  v303 = v13 & 0x7FFFFFFF8;
  if ((v13 & 0x7FFFFFFF8) != 0)
  {
    memptr[0] = 0;
    v19 = malloc_type_posix_memalign(memptr, v18, v13 & 0x7FFFFFFF8, 0x1F88E90uLL);
    if (v19)
      sub_23587A660(v19, v302, v303);
    __src = (uint64_t *)memptr[0];
    v5 = *a3;
  }
  else
  {
    __src = 0;
  }
  v304 = (void *)v9;
  v305 = (v9 & 0xF) != 0;
  v299 = v11;
  v300 = v12;
  v301 = v10;
  v298 = HIDWORD(v12);
  v318 = 0;
  v319 = 0;
  v320 = 0;
  if (v5 <= 15)
  {
    if (!v5)
      goto LABEL_480;
    if (v5 != 8)
      goto LABEL_634;
  }
  else if (v5 != 16)
  {
    if (v5 == 110)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 96) = 0;
      goto LABEL_687;
    }
    if (v5 != 64)
      goto LABEL_634;
LABEL_480:
    v190 = __src;
    if (HIDWORD(v10) * HIDWORD(v9))
    {
      v191 = 0;
      v192 = 1;
      do
      {
        *v190 = v192;
        v193 = v191 + 1;
        if (v191 + 1 == (_DWORD)v9)
          v191 = 0;
        else
          ++v191;
        if (v193 == (_DWORD)v9)
          v194 = HIDWORD(v10) + v305 - v311;
        else
          v194 = (v9 & 0xF) != 0;
        v190 += v194;
        ++v192;
      }
      while (v190 != &__src[HIDWORD(v10) * HIDWORD(v9)]);
    }
    v195 = (char *)operator new(8uLL);
    *(_QWORD *)v195 = 0;
    v196 = v195 + 8;
    v319 = v195 + 8;
    v320 = v195 + 8;
    v318 = v195;
    v197 = v307 * (unint64_t)v313 + 1;
    v198 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
    if (v197 != v198)
    {
      while (v196 < v320)
      {
        *(_QWORD *)v196 = v197;
        v199 = (uint64_t)(v196 + 8);
LABEL_492:
        v319 = (char *)v199;
        ++v197;
        v196 = (char *)v199;
        if (v197 == v198)
          goto LABEL_634;
      }
      v200 = (char *)v318;
      v201 = v196 - (_BYTE *)v318;
      v202 = (v196 - (_BYTE *)v318) >> 3;
      v203 = v202 + 1;
      if ((unint64_t)(v202 + 1) >> 61)
        sub_235847D5C();
      v204 = v320 - (_BYTE *)v318;
      if ((v320 - (_BYTE *)v318) >> 2 > v203)
        v203 = v204 >> 2;
      if ((unint64_t)v204 >= 0x7FFFFFFFFFFFFFF8)
        v205 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v205 = v203;
      if (v205)
      {
        if (v205 >> 61)
          sub_2358482F0();
        v206 = operator new(8 * v205);
        v207 = (unint64_t *)&v206[8 * v202];
        *v207 = v197;
        v199 = (uint64_t)(v207 + 1);
        v208 = v196 - v200;
        if (v196 == v200)
          goto LABEL_508;
      }
      else
      {
        v206 = 0;
        v207 = (unint64_t *)(8 * v202);
        *(_QWORD *)(8 * v202) = v197;
        v199 = 8 * v202 + 8;
        v208 = v196 - v200;
        if (v196 == v200)
          goto LABEL_508;
      }
      v209 = v208 - 8;
      if (v209 >= 0x168)
      {
        v212 = (v196 - 8 - v200) & 0xFFFFFFFFFFFFFFF8;
        if (&v206[v201 - 8 - v212] > &v206[v201 - 8])
        {
          v210 = v196;
        }
        else if (&v196[-v212 - 8] > v196 - 8)
        {
          v210 = v196;
        }
        else if ((unint64_t)(v196 - v206 - v201) >= 0x20)
        {
          v213 = (v209 >> 3) + 1;
          v214 = 8 * (v213 & 0x3FFFFFFFFFFFFFFCLL);
          v210 = &v196[-v214];
          v207 = (unint64_t *)((char *)v207 - v214);
          v215 = &v206[8 * v202 - 16];
          v216 = v196 - 16;
          v217 = v213 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v218 = *(_OWORD *)v216;
            *(v215 - 1) = *((_OWORD *)v216 - 1);
            *v215 = v218;
            v215 -= 2;
            v216 -= 32;
            v217 -= 4;
          }
          while (v217);
          if (v213 == (v213 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_508:
            v318 = v207;
            v319 = (char *)v199;
            v320 = &v206[8 * v205];
            if (v200)
              operator delete(v200);
            goto LABEL_492;
          }
        }
        else
        {
          v210 = v196;
        }
      }
      else
      {
        v210 = v196;
      }
      do
      {
        v211 = *((_QWORD *)v210 - 1);
        v210 -= 8;
        *--v207 = v211;
      }
      while (v210 != v200);
      goto LABEL_508;
    }
LABEL_634:
    v270 = v301 | v305;
    memptr[0] = v304;
    memptr[1] = (void *)(v301 | v305);
    LOBYTE(memptr[2]) = 0;
    *(_DWORD *)((char *)&memptr[2] + 1) = *(_DWORD *)v323;
    HIDWORD(memptr[2]) = *(_DWORD *)&v323[3];
    LOBYTE(memptr[3]) = 0;
    *(_WORD *)((char *)&memptr[3] + 1) = v321;
    BYTE3(memptr[3]) = v322;
    v271 = (_QWORD *)v303;
    v335 = v303;
    *(_QWORD *)&v336[0] = v302;
    if (v303)
    {
      v330[0] = 0;
      v272 = malloc_type_posix_memalign(v330, v302, v303, 0x1F88E90uLL);
      if (v272)
        sub_23587A660(v272, v302, v303);
      v271 = v330[0];
      *((void **)&v335 + 1) = v330[0];
    }
    *((_QWORD *)&v336[0] + 1) = v300;
    *(_QWORD *)&v336[1] = 8 * v270;
    v273 = v299;
    if (!(_DWORD)v300)
      v273 = 1;
    if (v273)
      v274 = 0;
    else
      v274 = v300;
    v275 = HIDWORD(v274);
    v276 = (8 * v270) >> 35;
    v277 = HIDWORD(v274) * ((v270 >> 29) >> 3);
    if ((_DWORD)v277 == -1
      && sub_23587BF24("/Library/Caches/com.apple.xbs/Sources/ACCBaker/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 984, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_23587C380))
    {
      goto LABEL_674;
    }
    if (!(_DWORD)v274 || !HIDWORD(v274))
      goto LABEL_682;
    v278 = !(_DWORD)v298 || v300 == 0;
    v279 = v278 ? 0 : v298;
    if (v279 * (_DWORD)v276 == -1
      && sub_23587BF24("/Library/Caches/com.apple.xbs/Sources/ACCBaker/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 984, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_23587C380))
    {
      goto LABEL_674;
    }
    if (v311)
    {
      if ((_DWORD)v276 == (_DWORD)v274)
      {
        if ((_DWORD)v277 && !__src)
        {
          if (sub_23587BF24("/Library/Caches/com.apple.xbs/Sources/ACCBaker/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_23587C380))
          {
            goto LABEL_674;
          }
LABEL_676:
          memmove(v271, __src, 8 * v277);
          v337 = 0uLL;
          *((_QWORD *)&v336[1] + 1) = 0;
          v269 = v318;
          v292 = v319 - (_BYTE *)v318;
          if (v319 == v318)
          {
LABEL_677:
            v293 = 0;
            v294 = 0;
            goto LABEL_685;
          }
LABEL_683:
          if (v292 < 0)
            sub_235847D5C();
          v294 = (char *)operator new(v292);
          v293 = &v294[8 * (v292 >> 3)];
          memcpy(v294, v269, v292);
LABEL_685:
          v295 = v335;
          *(_OWORD *)a4 = *(_OWORD *)memptr;
          *(_OWORD *)(a4 + 12) = *(_OWORD *)((char *)&memptr[1] + 4);
          *(_OWORD *)(a4 + 32) = v295;
          *(_QWORD *)(a4 + 48) = *(_QWORD *)&v336[0];
          *(_OWORD *)(a4 + 56) = *(_OWORD *)((char *)v336 + 8);
          *(_QWORD *)(a4 + 72) = v294;
          *(_QWORD *)(a4 + 80) = v293;
          *(_QWORD *)(a4 + 88) = v293;
          *(_BYTE *)(a4 + 96) = 1;
          if (!v269)
            goto LABEL_687;
          goto LABEL_686;
        }
        if ((_DWORD)v277)
          goto LABEL_676;
LABEL_682:
        v337 = 0uLL;
        *((_QWORD *)&v336[1] + 1) = 0;
        v269 = v318;
        v292 = v319 - (_BYTE *)v318;
        if (v319 == v318)
          goto LABEL_677;
        goto LABEL_683;
      }
      if (!(_DWORD)v274)
        goto LABEL_682;
      v287 = 8 * v274;
      v288 = v271;
      v289 = (char *)__src;
      v290 = v275 - 1;
      if ((_DWORD)v275 != 1)
      {
        v291 = 0;
        do
        {
          if (!&__src[v291]
            && sub_23587BF24("/Library/Caches/com.apple.xbs/Sources/ACCBaker/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_23587C380))
          {
            goto LABEL_674;
          }
          memmove(&v271[v291], &__src[v291], v287);
          v291 += v276;
          --v290;
        }
        while (v290);
        v289 = (char *)&__src[v291];
        v288 = &v271[v291];
      }
      if (v289
        || !sub_23587BF24("/Library/Caches/com.apple.xbs/Sources/ACCBaker/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_23587C380))
      {
        memmove(v288, v289, v287);
        goto LABEL_682;
      }
LABEL_674:
      abort();
    }
    if (!(_DWORD)v274)
      goto LABEL_682;
    v280 = v274 - 1;
    v281 = HIDWORD(v274) - 1;
    if (HIDWORD(v274) == 1)
    {
      v284 = __src;
    }
    else
    {
      v282 = 8 * v276;
      if ((_DWORD)v274 == 1)
      {
        v297 = 0;
        do
        {
          *(_QWORD *)((char *)v271 + v297) = *(uint64_t *)((char *)__src + v297);
          v297 += v282;
          --v281;
        }
        while (v281);
        v284 = (uint64_t *)((char *)__src + v297);
        v271 = (_QWORD *)((char *)v271 + v297);
        goto LABEL_698;
      }
      v283 = 0;
      v284 = __src;
      do
      {
        v285 = 0;
        v286 = v274 - 1;
        do
        {
          v271[v285] = v284[v285];
          v285 += v305;
          --v286;
        }
        while (v286);
        v271[v285] = v284[v285];
        v284 = (uint64_t *)((char *)v284 + v282);
        v271 = (_QWORD *)((char *)v271 + v282);
        ++v283;
      }
      while (v283 != v281);
    }
    if ((_DWORD)v274 != 1)
    {
      v296 = 0;
      do
      {
        v271[v296] = v284[v296];
        v296 += v305;
        --v280;
      }
      while (v280);
      v284 = (uint64_t *)((char *)v284 + v296 * 8);
      v271 = (_QWORD *)((char *)v271 + v296 * 8);
    }
LABEL_698:
    *v271 = *v284;
    v337 = 0uLL;
    *((_QWORD *)&v336[1] + 1) = 0;
    v269 = v318;
    v292 = v319 - (_BYTE *)v318;
    if (v319 == v318)
      goto LABEL_677;
    goto LABEL_683;
  }
  v338 = 0u;
  v339 = 0u;
  v337 = 0u;
  v335 = 0u;
  memset(v336, 0, sizeof(v336));
  memset(memptr, 0, sizeof(memptr));
  *(_OWORD *)v315 = 0u;
  v316 = 0u;
  v20 = (char *)operator new(0x400uLL);
  v21 = v20 + 1024;
  v314 = v20;
  memcpy(v20, &unk_235880A58, 0x400uLL);
  sub_235850D34((uint64_t)&v315[1], 0x80uLL, 0);
  v317 = 0;
  if (v307)
  {
    v308 = 0;
    while (1)
    {
      if ((v317 & 0x8000000000000000) != 0)
      {
        v23 = v317 - 63;
        if ((uint64_t)(v317 - 63) < 0)
          v23 = v317;
        v22 = v23 >> 6;
      }
      else
      {
        v22 = v317 >> 6;
      }
      LOBYTE(v411) = 0;
      v404 = (char *)v315[1] + 8 * v22;
      LODWORD(v405[0]) = v317 & 0x3F;
      __p[0] = (char *)v315[1] + 8 * ((unint64_t)v316 >> 6);
      LODWORD(__p[1]) = v316 & 0x3F;
      sub_235853998((uint64_t)&v404, (uint64_t)__p, &v411, (uint64_t)v330);
      v24 = LODWORD(v330[1]) + 8 * ((char *)v330[0] - (char *)v315[1]);
      v317 = v24;
      if (v24 < 0)
      {
        v26 = v24 - 63;
        if (v24 - 63 < 0)
          v26 = LODWORD(v330[1]) + 8 * ((char *)v330[0] - (char *)v315[1]);
        v25 = v26 >> 6;
      }
      else
      {
        v25 = (unint64_t)v24 >> 6;
      }
      v27 = v314[v24];
      LOBYTE(v411) = 0;
      v404 = (char *)v315[1] + 8 * v25;
      LODWORD(v405[0]) = v24 & 0x3F;
      __p[0] = (char *)v315[1] + 8 * ((unint64_t)v316 >> 6);
      LODWORD(__p[1]) = v316 & 0x3F;
      sub_235853998((uint64_t)&v404, (uint64_t)__p, &v411, (uint64_t)v330);
      v317 = LODWORD(v330[1]) + 8 * ((char *)v330[0] - (char *)v315[1]);
      *(_QWORD *)((char *)v315[1] + ((v317 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v317;
      v28 = (void **)(&off_2506DF4F0 + 2 * v27);
      v29 = (char *)*v28;
      v30 = v28[1];
      v416 = v29;
      v417 = &off_2506DFD00;
      v31 = (uint64_t)&v29[8 * (_QWORD)v30];
      v418 = memptr;
      v32 = &v417;
      v419 = &v417;
      v420 = v31;
      if (v30)
      {
        while (!((unsigned int (*)(uint64_t (***)()))(*v32)[6])(v32))
        {
          v29 = v416 + 8;
          v416 = v29;
          if (v29 == (char *)v420)
            goto LABEL_61;
          v32 = v419;
          if (!v419)
            sub_23584A6A4();
        }
        v29 = v416;
LABEL_61:
        v33 = v419;
      }
      else
      {
        v33 = &v417;
      }
      v411 = v31;
      v412 = &off_2506DFD00;
      v413 = memptr;
      v414 = &v412;
      v415 = v31;
      v34 = (uint64_t (****)())v332;
      v330[0] = v29;
      if (!v33)
        goto LABEL_65;
      if (v33 != &v417)
        break;
      *(_QWORD *)&v332[0] = &v330[1];
      v417[3]();
      *((_QWORD *)&v332[0] + 1) = v420;
      *(_QWORD *)&v332[1] = v411;
      v38 = (uint64_t (****)())v333;
      if (v414)
      {
        if (v414 == &v412)
        {
          v35 = v412;
          goto LABEL_66;
        }
        *(_QWORD *)&v333[0] = v414;
        v38 = &v414;
      }
      *v38 = 0;
      v36 = v414;
      *((_QWORD *)&v333[0] + 1) = v415;
      if (v414 == &v412)
      {
LABEL_73:
        v36 = &v412;
        v37 = 4;
        goto LABEL_74;
      }
LABEL_67:
      if (!v36)
        goto LABEL_75;
      v37 = 5;
LABEL_74:
      (*v36)[v37]();
LABEL_75:
      v39 = v419;
      if (v419 == &v417)
      {
        v39 = &v417;
        v40 = 4;
      }
      else
      {
        if (!v419)
          goto LABEL_80;
        v40 = 5;
      }
      (*v39)[v40]();
LABEL_80:
      v404 = (char *)v330[0];
      v41 = &v406;
      if (!*(_QWORD *)&v332[0])
        goto LABEL_83;
      if (*(void ***)&v332[0] != &v330[1])
      {
        v406 = *(_QWORD **)&v332[0];
        v41 = v332;
LABEL_83:
        *v41 = 0;
        goto LABEL_85;
      }
      v406 = v405;
      (*((void (**)(void))v330[1] + 3))();
LABEL_85:
      v407 = *(_OWORD *)((char *)v332 + 8);
      v42 = &v409;
      if (!*(_QWORD *)&v333[0])
        goto LABEL_88;
      if (*(_OWORD **)&v333[0] != (_OWORD *)((char *)&v332[1] + 8))
      {
        v409 = *(uint64_t (****)())&v333[0];
        v42 = (uint64_t (****)())v333;
LABEL_88:
        *v42 = 0;
        goto LABEL_90;
      }
      v409 = (uint64_t (***)())v408;
      (*(void (**)(void))(*((_QWORD *)&v332[1] + 1) + 24))();
LABEL_90:
      v410 = *((_QWORD *)&v333[0] + 1);
      v43 = *(_QWORD **)&v333[0];
      if (*(_OWORD **)&v333[0] == (_OWORD *)((char *)&v332[1] + 8))
      {
        v43 = (_QWORD *)&v332[1] + 1;
        v44 = 4;
      }
      else
      {
        if (!*(_QWORD *)&v333[0])
          goto LABEL_95;
        v44 = 5;
      }
      (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_95:
      v45 = *(void ***)&v332[0];
      if (*(void ***)&v332[0] == &v330[1])
      {
        v45 = &v330[1];
        v46 = 4;
      }
      else
      {
        if (!*(_QWORD *)&v332[0])
          goto LABEL_100;
        v46 = 5;
      }
      (*((void (**)(void))*v45 + v46))();
LABEL_100:
      *(_OWORD *)__p = 0u;
      *(_OWORD *)v325 = 0u;
      *(_OWORD *)v326 = 0u;
      v47 = (uint64_t)v406;
      v344 = (uint64_t)v404;
      if (!v406)
        goto LABEL_103;
      if (v406 != v405)
      {
        v47 = (*(uint64_t (**)(void))(*v406 + 16))();
LABEL_103:
        v346 = (_QWORD *)v47;
        goto LABEL_105;
      }
      v346 = v345;
      (*(void (**)(_QWORD *, _QWORD *))(v405[0] + 24))(v405, v345);
LABEL_105:
      v340 = *((_QWORD *)&v407 + 1);
      v347 = v407;
      v48 = (uint64_t)v409;
      if (!v409)
        goto LABEL_108;
      if (v409 != v408)
      {
        v48 = (*v409)[2]();
LABEL_108:
        v342 = (_QWORD *)v48;
        goto LABEL_110;
      }
      v342 = v341;
      (*(void (**)(_QWORD *))(v408[0] + 24))(v408);
LABEL_110:
      v343 = v410;
      v49 = (uint64_t)v346;
      v360 = v344;
      if (!v346)
        goto LABEL_113;
      if (v346 != v345)
      {
        v49 = (*(uint64_t (**)(void))(*v346 + 16))();
LABEL_113:
        v362 = (_QWORD *)v49;
        goto LABEL_115;
      }
      v362 = v361;
      (*(void (**)(_QWORD *))(v345[0] + 24))(v345);
LABEL_115:
      v363 = v347;
      v50 = (uint64_t)v342;
      v356 = v340;
      if (!v342)
        goto LABEL_118;
      if (v342 != v341)
      {
        v50 = (*(uint64_t (**)(void))(*v342 + 16))();
LABEL_118:
        v358 = (_QWORD *)v50;
        goto LABEL_120;
      }
      v358 = v357;
      (*(void (**)(_QWORD *))(v341[0] + 24))(v341);
LABEL_120:
      v359 = v343;
      v51 = (uint64_t)v346;
      v352 = v344;
      if (!v346)
        goto LABEL_123;
      if (v346 != v345)
      {
        v51 = (*(uint64_t (**)(void))(*v346 + 16))();
LABEL_123:
        v354 = (_BYTE *)v51;
        goto LABEL_125;
      }
      v354 = v353;
      (*(void (**)(_QWORD *))(v345[0] + 24))(v345);
LABEL_125:
      v355 = v347;
      v52 = (uint64_t)v342;
      v348 = v340;
      if (!v342)
        goto LABEL_128;
      if (v342 != v341)
      {
        v52 = (*(uint64_t (**)(void))(*v342 + 16))();
LABEL_128:
        v350 = (_BYTE *)v52;
        goto LABEL_130;
      }
      v350 = v349;
      (*(void (**)(_QWORD *))(v341[0] + 24))(v341);
LABEL_130:
      v351 = v343;
      v53 = sub_23585982C(&v352, &v348);
      v54 = (uint64_t)v325[0];
      if (v53 > ((char *)v325[0] - (char *)__p[0]) >> 3)
      {
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
          v54 = 0;
          __p[0] = 0;
          __p[1] = 0;
          v325[0] = 0;
        }
        if (v53 >> 61)
          goto LABEL_704;
        v55 = v54 >> 2;
        if (v54 >> 2 <= v53)
          v55 = v53;
        v56 = (unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v55;
        if (v56 >> 61)
LABEL_704:
          sub_235847D5C();
        __p[0] = operator new(8 * v56);
        __p[1] = __p[0];
        v325[0] = (char *)__p[0] + 8 * v56;
        v57 = (uint64_t)v362;
        v368 = v360;
        if (v362)
        {
          if (v362 != v361)
          {
            v57 = (*(uint64_t (**)(void))(*v362 + 16))();
            goto LABEL_143;
          }
          v370 = v369;
          (*(void (**)(_QWORD *))(v361[0] + 24))(v361);
        }
        else
        {
LABEL_143:
          v370 = (_BYTE *)v57;
        }
        v371 = v363;
        v60 = (uint64_t)v358;
        v364 = v356;
        if (v358)
        {
          if (v358 != v357)
          {
            v61 = __src;
            v60 = (*(uint64_t (**)(void))(*v358 + 16))();
            goto LABEL_158;
          }
          v366 = v365;
          v61 = __src;
          (*(void (**)(_QWORD *))(v357[0] + 24))(v357);
        }
        else
        {
          v61 = __src;
LABEL_158:
          v366 = (_BYTE *)v60;
        }
        v367 = v359;
        sub_235859AB0((uint64_t)__p, &v368, &v364);
        v62 = v366;
        if (v366 == v365)
        {
          v62 = v365;
          v63 = 4;
LABEL_164:
          (*(void (**)(void))(*v62 + 8 * v63))();
        }
        else if (v366)
        {
          v63 = 5;
          goto LABEL_164;
        }
        v64 = v370;
        v65 = v369;
        if (v370 == v369)
          goto LABEL_282;
        goto LABEL_166;
      }
      if (v53 <= ((char *)__p[1] - (char *)__p[0]) >> 3)
      {
        v59 = (uint64_t)v362;
        v376 = v360;
        if (!v362)
          goto LABEL_152;
        if (v362 == v361)
        {
          v378 = v377;
          (*(void (**)(_QWORD *))(v361[0] + 24))(v361);
        }
        else
        {
          v59 = (*(uint64_t (**)(void))(*v362 + 16))();
LABEL_152:
          v378 = (_BYTE *)v59;
        }
        v379 = v363;
        v71 = (uint64_t)v358;
        v372 = v356;
        if (v358)
        {
          if (v358 != v357)
          {
            v71 = (*(uint64_t (**)(void))(*v358 + 16))();
            goto LABEL_189;
          }
          v374 = v373;
          (*(void (**)(_QWORD *))(v357[0] + 24))(v357);
        }
        else
        {
LABEL_189:
          v374 = (_BYTE *)v71;
        }
        v375 = v359;
        sub_23585A0B0(v330, &v376, &v372, (_QWORD *)__p[0]);
        v72 = *(void **)&v332[1];
        v73 = *(void ***)&v332[0];
        if (*(void ***)&v332[0] == &v330[1])
        {
          v73 = &v330[1];
          v74 = 4;
LABEL_195:
          (*((void (**)(void))*v73 + v74))();
        }
        else if (*(_QWORD *)&v332[0])
        {
          v74 = 5;
          goto LABEL_195;
        }
        v75 = v374;
        if (v374 == v373)
        {
          v75 = v373;
          v76 = 4;
LABEL_200:
          (*(void (**)(void))(*v75 + 8 * v76))();
        }
        else if (v374)
        {
          v76 = 5;
          goto LABEL_200;
        }
        v77 = v378;
        if (v378 == v377)
        {
          v77 = v377;
          v78 = 4;
LABEL_205:
          (*(void (**)(void))(*v77 + 8 * v78))();
        }
        else if (v378)
        {
          v78 = 5;
          goto LABEL_205;
        }
        __p[1] = v72;
        v61 = __src;
LABEL_207:
        v79 = v350;
        if (v350 == v349)
          goto LABEL_284;
        goto LABEL_208;
      }
      v58 = (uint64_t)v362;
      v396 = v360;
      if (!v362)
        goto LABEL_148;
      if (v362 != v361)
      {
        v58 = (*(uint64_t (**)(void))(*v362 + 16))();
LABEL_148:
        v398 = (_QWORD *)v58;
        goto LABEL_169;
      }
      v398 = v397;
      (*(void (**)(_QWORD *))(v361[0] + 24))(v361);
LABEL_169:
      v399 = v363;
      v67 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      if ((char *)__p[1] - (char *)__p[0] <= -8)
      {
        while (1)
        {
          v396 -= 8;
          if (!v398)
LABEL_701:
            sub_23584A6A4();
          if ((*(unsigned int (**)(_QWORD *))(*v398 + 48))(v398))
          {
            if (__CFADD__(v67++, 1))
              break;
          }
        }
      }
      else if (__p[1] != __p[0])
      {
        do
        {
          do
          {
            v396 += 8;
            if (v396 == v399)
              break;
            if (!v398)
              goto LABEL_701;
          }
          while (((*(uint64_t (**)(_QWORD *))(*v398 + 48))(v398) & 1) == 0);
        }
        while (v67-- > 1);
      }
      v400 = v396;
      v69 = &v402;
      v61 = __src;
      if (!v398)
        goto LABEL_179;
      if (v398 != v397)
      {
        v402 = v398;
        v69 = &v398;
LABEL_179:
        *v69 = 0;
        goto LABEL_211;
      }
      v402 = v401;
      (*(void (**)(void))(v397[0] + 24))();
LABEL_211:
      v81 = v398;
      v403 = v399;
      if (v398 == v397)
      {
        v81 = v397;
        v82 = 4;
      }
      else
      {
        if (!v398)
          goto LABEL_216;
        v82 = 5;
      }
      (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_216:
      v83 = (uint64_t)v362;
      v392 = v360;
      if (!v362)
        goto LABEL_219;
      if (v362 != v361)
      {
        v83 = (*(uint64_t (**)(void))(*v362 + 16))();
LABEL_219:
        v394 = (_QWORD *)v83;
        goto LABEL_221;
      }
      v394 = v393;
      (*(void (**)(_QWORD *))(v361[0] + 24))(v361);
LABEL_221:
      v395 = v363;
      v84 = (uint64_t)v402;
      v388 = v400;
      if (!v402)
        goto LABEL_224;
      if (v402 != v401)
      {
        v84 = (*(uint64_t (**)(void))(*v402 + 16))();
LABEL_224:
        v390 = (_QWORD *)v84;
        goto LABEL_226;
      }
      v390 = v389;
      (*(void (**)(_QWORD *))(v401[0] + 24))(v401);
LABEL_226:
      v391 = v403;
      v85 = __p[0];
      v86 = (uint64_t)v394;
      v416 = (char *)v392;
      if (!v394)
        goto LABEL_229;
      if (v394 != v393)
      {
        v86 = (*(uint64_t (**)(void))(*v394 + 16))();
LABEL_229:
        v419 = (uint64_t (***)())v86;
        goto LABEL_231;
      }
      v419 = &v417;
      (*(void (**)(_QWORD *))(v393[0] + 24))(v393);
LABEL_231:
      v420 = v395;
      v87 = (uint64_t)v390;
      v411 = v388;
      if (!v390)
        goto LABEL_234;
      if (v390 != v389)
      {
        v87 = (*(uint64_t (**)(void))(*v390 + 16))();
LABEL_234:
        v414 = (uint64_t (***)())v87;
        goto LABEL_236;
      }
      v414 = &v412;
      (*(void (**)(_QWORD *))(v389[0] + 24))(v389);
LABEL_236:
      v415 = v391;
      sub_23585A0B0(v330, (uint64_t *)&v416, &v411, v85);
      v88 = *(void ***)&v332[0];
      if (*(void ***)&v332[0] == &v330[1])
      {
        v88 = &v330[1];
        v89 = 4;
      }
      else
      {
        if (!*(_QWORD *)&v332[0])
          goto LABEL_241;
        v89 = 5;
      }
      (*((void (**)(void))*v88 + v89))();
LABEL_241:
      v90 = v414;
      if (v414 == &v412)
      {
        v90 = &v412;
        v91 = 4;
      }
      else
      {
        if (!v414)
          goto LABEL_246;
        v91 = 5;
      }
      (*v90)[v91]();
LABEL_246:
      v92 = v419;
      if (v419 == &v417)
      {
        v92 = &v417;
        v93 = 4;
      }
      else
      {
        if (!v419)
          goto LABEL_251;
        v93 = 5;
      }
      (*v92)[v93]();
LABEL_251:
      v94 = v390;
      if (v390 == v389)
      {
        v94 = v389;
        v95 = 4;
      }
      else
      {
        if (!v390)
          goto LABEL_256;
        v95 = 5;
      }
      (*(void (**)(void))(*v94 + 8 * v95))();
LABEL_256:
      v96 = v394;
      if (v394 == v393)
      {
        v96 = v393;
        v97 = 4;
      }
      else
      {
        if (!v394)
          goto LABEL_261;
        v97 = 5;
      }
      (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_261:
      v98 = (uint64_t)v402;
      v384 = v400;
      if (!v402)
        goto LABEL_264;
      if (v402 != v401)
      {
        v98 = (*(uint64_t (**)(void))(*v402 + 16))();
LABEL_264:
        v386 = (_BYTE *)v98;
        goto LABEL_266;
      }
      v386 = v385;
      (*(void (**)(_QWORD *))(v401[0] + 24))(v401);
LABEL_266:
      v387 = v403;
      v99 = (uint64_t)v358;
      v380 = v356;
      if (!v358)
        goto LABEL_269;
      if (v358 != v357)
      {
        v99 = (*(uint64_t (**)(void))(*v358 + 16))();
LABEL_269:
        v382 = (_BYTE *)v99;
        goto LABEL_271;
      }
      v382 = v381;
      (*(void (**)(_QWORD *))(v357[0] + 24))(v357);
LABEL_271:
      v383 = v359;
      sub_235859AB0((uint64_t)__p, &v384, &v380);
      v100 = v382;
      if (v382 == v381)
      {
        v100 = v381;
        v101 = 4;
      }
      else
      {
        if (!v382)
          goto LABEL_276;
        v101 = 5;
      }
      (*(void (**)(void))(*v100 + 8 * v101))();
LABEL_276:
      v102 = v386;
      if (v386 == v385)
      {
        v102 = v385;
        v103 = 4;
      }
      else
      {
        if (!v386)
          goto LABEL_281;
        v103 = 5;
      }
      (*(void (**)(void))(*v102 + 8 * v103))();
LABEL_281:
      v64 = v402;
      v65 = v401;
      if (v402 == v401)
      {
LABEL_282:
        v64 = v65;
        v66 = 4;
        goto LABEL_283;
      }
LABEL_166:
      if (!v64)
        goto LABEL_207;
      v66 = 5;
LABEL_283:
      (*(void (**)(void))(*v64 + 8 * v66))();
      v79 = v350;
      if (v350 == v349)
      {
LABEL_284:
        v79 = v349;
        v80 = 4;
        goto LABEL_285;
      }
LABEL_208:
      if (!v79)
        goto LABEL_286;
      v80 = 5;
LABEL_285:
      (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_286:
      v104 = v354;
      if (v354 == v353)
      {
        v104 = v353;
        v105 = 4;
      }
      else
      {
        if (!v354)
          goto LABEL_291;
        v105 = 5;
      }
      (*(void (**)(void))(*v104 + 8 * v105))();
LABEL_291:
      v106 = v358;
      if (v358 == v357)
      {
        v106 = v357;
        v107 = 4;
      }
      else
      {
        if (!v358)
          goto LABEL_296;
        v107 = 5;
      }
      (*(void (**)(void))(*v106 + 8 * v107))();
LABEL_296:
      v108 = v362;
      if (v362 == v361)
      {
        v108 = v361;
        v109 = 4;
      }
      else
      {
        if (!v362)
          goto LABEL_301;
        v109 = 5;
      }
      (*(void (**)(void))(*v108 + 8 * v109))();
LABEL_301:
      v110 = v342;
      if (v342 == v341)
      {
        v110 = v341;
        v111 = 4;
      }
      else
      {
        if (!v342)
          goto LABEL_306;
        v111 = 5;
      }
      (*(void (**)(void))(*v110 + 8 * v111))();
LABEL_306:
      v112 = v346;
      if (v346 == v345)
      {
        v112 = v345;
        v113 = 4;
      }
      else
      {
        if (!v346)
          goto LABEL_311;
        v113 = 5;
      }
      (*(void (**)(void))(*v112 + 8 * v113))();
LABEL_311:
      v114 = (uint64_t)v406;
      v411 = (uint64_t)v404;
      if (!v406)
        goto LABEL_314;
      if (v406 != v405)
      {
        v114 = (*(uint64_t (**)(void))(*v406 + 16))();
LABEL_314:
        v414 = (uint64_t (***)())v114;
        goto LABEL_316;
      }
      v414 = &v412;
      (*(void (**)(_QWORD *))(v405[0] + 24))(v405);
LABEL_316:
      v400 = *((_QWORD *)&v407 + 1);
      v415 = v407;
      v115 = (uint64_t)v409;
      if (!v409)
        goto LABEL_319;
      if (v409 != v408)
      {
        v115 = (*v409)[2]();
LABEL_319:
        v402 = (_QWORD *)v115;
        goto LABEL_321;
      }
      v402 = v401;
      (*(void (**)(_QWORD *))(v408[0] + 24))(v408);
LABEL_321:
      v403 = v410;
      v116 = (uint64_t)v414;
      v330[0] = (void *)v411;
      if (!v414)
        goto LABEL_324;
      if (v414 != &v412)
      {
        v116 = (*v414)[2]();
LABEL_324:
        *(_QWORD *)&v332[0] = v116;
        goto LABEL_326;
      }
      *(_QWORD *)&v332[0] = &v330[1];
      ((void (*)(uint64_t (***)()))v412[3])(&v412);
LABEL_326:
      *((_QWORD *)&v332[0] + 1) = v415;
      v117 = (uint64_t)v402;
      v416 = (char *)v400;
      if (!v402)
        goto LABEL_329;
      if (v402 != v401)
      {
        v117 = (*(uint64_t (**)(void))(*v402 + 16))();
LABEL_329:
        v419 = (uint64_t (***)())v117;
        goto LABEL_331;
      }
      v419 = &v417;
      (*(void (**)(_QWORD *))(v401[0] + 24))(v401);
LABEL_331:
      v420 = v403;
      v118 = sub_23585982C((uint64_t *)v330, (uint64_t *)&v416);
      v119 = v419;
      if (v419 == &v417)
      {
        v119 = &v417;
        v120 = 4;
      }
      else
      {
        if (!v419)
          goto LABEL_336;
        v120 = 5;
      }
      (*v119)[v120]();
LABEL_336:
      v121 = *(void ***)&v332[0];
      if (*(void ***)&v332[0] == &v330[1])
      {
        v121 = &v330[1];
        v122 = 4;
      }
      else
      {
        if (!*(_QWORD *)&v332[0])
          goto LABEL_341;
        v122 = 5;
      }
      (*((void (**)(void))*v121 + v122))();
LABEL_341:
      v123 = v402;
      if (v402 == v401)
      {
        v123 = v401;
        v124 = 4;
      }
      else
      {
        if (!v402)
          goto LABEL_346;
        v124 = 5;
      }
      (*(void (**)(void))(*v123 + 8 * v124))();
LABEL_346:
      v125 = v414;
      if (v414 == &v412)
      {
        v125 = &v412;
        v126 = 4;
      }
      else
      {
        if (!v414)
          goto LABEL_351;
        v126 = 5;
      }
      (*v125)[v126]();
LABEL_351:
      sub_235850D34((uint64_t)&v325[1], v118, 0);
      *(_QWORD *)&v326[16] = 0;
      v127 = v409;
      if (v409 == v408)
      {
        v127 = (uint64_t (***)())v408;
        v128 = 4;
      }
      else
      {
        if (!v409)
          goto LABEL_356;
        v128 = 5;
      }
      (*v127)[v128]();
LABEL_356:
      v129 = v406;
      if (v406 == v405)
      {
        v129 = v405;
        v130 = 4;
      }
      else
      {
        if (!v406)
          goto LABEL_361;
        v130 = 5;
      }
      (*(void (**)(void))(*v129 + 8 * v130))();
LABEL_361:
      if (!v313)
      {
        v187 = 0;
        v188 = 1;
        v189 = v325[1];
        if (!v325[1])
          goto LABEL_470;
        goto LABEL_469;
      }
      for (i = 0; i != v313; ++i)
      {
        if (*(_QWORD *)&v326[16] == *(_QWORD *)v326)
        {
          v188 = 0;
          *(_BYTE *)a4 = 0;
          *(_BYTE *)(a4 + 96) = 0;
          v187 = 1;
          v189 = v325[1];
          if (!v325[1])
            goto LABEL_470;
LABEL_469:
          operator delete(v189);
          goto LABEL_470;
        }
        v132 = *(_QWORD *)&v326[16] - 63;
        if (*(_QWORD *)&v326[16] - 63 < 0)
          v132 = *(_QWORD *)&v326[16];
        v133 = v132 >> 6;
        if (*(uint64_t *)&v326[16] >= 0)
          v133 = *(_QWORD *)&v326[16] >> 6;
        LOBYTE(v400) = 0;
        v404 = (char *)v325[1] + 8 * v133;
        LODWORD(v405[0]) = v326[16] & 0x3F;
        v416 = (char *)v325[1] + 8 * (*(_QWORD *)v326 >> 6);
        LODWORD(v417) = v326[0] & 0x3F;
        sub_235853998((uint64_t)&v404, (uint64_t)&v416, &v400, (uint64_t)v330);
        v134 = v325[1];
        v135 = (char *)__p[0];
        *(_QWORD *)&v326[16] = LODWORD(v330[1]) + 8 * ((char *)v330[0] - (char *)v325[1]);
        v136 = *(_QWORD *)(*a1 + 8 * *((_QWORD *)__p[0] + *(_QWORD *)&v326[16]));
        if (v311)
          v137 = i;
        else
          v137 = 0;
        v61[(v137 + v308 * HIDWORD(v10))] = v136;
        v138 = *a2 + 24 * v136;
        *(_QWORD *)&v331 = 0;
        v330[0] = 0;
        v330[1] = 0;
        v140 = *(_BYTE **)v138;
        v139 = *(_BYTE **)(v138 + 8);
        v141 = v139 - v140;
        if (v139 != v140)
        {
          if (v141 < 0)
            sub_235847D5C();
          v142 = (char *)operator new(v139 - v140);
          v330[0] = v142;
          memcpy(v142, v140, v141);
          v143 = (char *)__p[1];
          v144 = v315[1];
          v145 = (uint64_t *)v142;
          while (1)
          {
            v146 = *v145;
            *((_BYTE *)memptr + *v145) = 1;
            if ((*(_QWORD *)&v326[16] & 0x8000000000000000) != 0)
            {
              v148 = *(_QWORD *)&v326[16] - 63;
              if (*(_QWORD *)&v326[16] - 63 < 0)
                v148 = *(_QWORD *)&v326[16];
              v147 = v148 >> 6;
            }
            else
            {
              v147 = *(_QWORD *)&v326[16] >> 6;
            }
            v149 = &v134[8 * (*(_QWORD *)v326 >> 6)];
            v150 = &v134[8 * v147];
            v151 = (v326[0] & 0x3F) + 8 * (v149 - v150);
            v152 = v151 - (v326[16] & 0x3F);
            v153 = v326[16] & 0x3F;
            if ((v326[16] & 0x3F) != 0)
            {
              v154 = (64 - v153);
              if (v154 >= v152)
                v155 = v151 - (v326[16] & 0x3F);
              else
                v155 = (64 - v153);
              v156 = (0xFFFFFFFFFFFFFFFFLL >> (v154 - v155)) & (-1 << (v326[16] & 0x3F)) & ~*(_QWORD *)v150;
              if (v156)
              {
                v157 = __clz(__rbit64(v156)) + 8 * (v150 - v134);
                *(_QWORD *)&v326[16] = v157;
                if (v157 < 0)
                  goto LABEL_389;
                goto LABEL_404;
              }
              if (v152 <= v154)
              {
                v157 = (((_BYTE)v152 + v326[16]) & 0x3F) + 8 * (&v150[8 * (v151 >> 6)] - v134);
                *(_QWORD *)&v326[16] = v157;
                if (v157 < 0)
                  goto LABEL_389;
                goto LABEL_404;
              }
              v152 -= v155;
              v150 += 8;
            }
            if (v152 >= 0x40)
            {
              while (*(_QWORD *)v150 == -1)
              {
                v150 += 8;
                v152 -= 64;
                if (v152 <= 0x3F)
                  goto LABEL_397;
              }
              v152 = __clz(__rbit64(~*(_QWORD *)v150));
LABEL_403:
              v157 = v152 + 8 * (v150 - v134);
              *(_QWORD *)&v326[16] = v157;
              if (v157 < 0)
                goto LABEL_389;
              goto LABEL_404;
            }
LABEL_397:
            if (!v152)
              goto LABEL_403;
            v160 = __clz(__rbit64((0xFFFFFFFFFFFFFFFFLL >> -(char)v152) & ~*(_QWORD *)v150));
            if (((0xFFFFFFFFFFFFFFFFLL >> -(char)v152) & ~*(_QWORD *)v150) != 0)
              v152 = v160;
            v157 = v152 + 8 * (v150 - v134);
            *(_QWORD *)&v326[16] = v157;
            if (v157 < 0)
            {
LABEL_389:
              v158 = v157 - 63;
              if (v157 - 63 < 0)
                v158 = v157;
              v159 = v158 >> 6;
              goto LABEL_405;
            }
LABEL_404:
            v159 = (unint64_t)v157 >> 6;
LABEL_405:
            v161 = v326[0] & 0x3F;
            v162 = &v135[8 * v157];
            v163 = &v134[8 * v159];
            v164 = v157 & 0x3F;
            for (j = v162; ; j += 8)
            {
              if (v162 == v143 && v163 == v149 && v164 == v161)
              {
                j = v143;
                v164 = v326[0] & 0x3F;
                goto LABEL_419;
              }
              if (*(_QWORD *)v162 == v146 && ((*(_QWORD *)v163 >> v164) & 1) == 0)
                break;
              v162 += 8;
              v163 += 8 * (v164 == 63);
              if (v164 == 63)
                v164 = 0;
              else
                ++v164;
            }
            if (v162 != v143 || v163 != v149)
            {
LABEL_422:
              *(_QWORD *)&v134[((unint64_t)-((v135 - j) >> 3) >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << -((v135 - j) >> 3);
              v166 = v316;
              v167 = v317;
              if ((v317 & 0x8000000000000000) != 0)
                goto LABEL_423;
LABEL_421:
              v168 = v167 >> 6;
              goto LABEL_426;
            }
LABEL_419:
            if (v164 != v161)
              goto LABEL_422;
            v166 = v316;
            v167 = v317;
            if ((v317 & 0x8000000000000000) == 0)
              goto LABEL_421;
LABEL_423:
            v169 = v167 - 63;
            if ((uint64_t)(v167 - 63) < 0)
              v169 = v167;
            v168 = v169 >> 6;
LABEL_426:
            v170 = &v144[8 * (v166 >> 6)];
            v171 = &v144[8 * v168];
            v172 = (v166 & 0x3F) + 8 * (v170 - v171);
            v173 = v172 - (v167 & 0x3F);
            v174 = v167 & 0x3F;
            if ((v167 & 0x3F) != 0)
            {
              v175 = (64 - v174);
              if (v175 >= v173)
                v176 = v172 - (v167 & 0x3F);
              else
                v176 = (64 - v174);
              v177 = (0xFFFFFFFFFFFFFFFFLL >> (v175 - v176)) & (-1 << (v167 & 0x3F)) & ~*(_QWORD *)v171;
              if (v177)
              {
                v178 = __clz(__rbit64(v177)) + 8 * (v171 - v144);
                v317 = v178;
                if (v178 >= 0)
                  goto LABEL_447;
                goto LABEL_432;
              }
              if (v173 <= v175)
              {
                v178 = (((_BYTE)v173 + (_BYTE)v167) & 0x3F) + 8 * (&v171[8 * (v172 >> 6)] - v144);
                v317 = v178;
                if (v178 >= 0)
                  goto LABEL_447;
                goto LABEL_432;
              }
              v173 -= v176;
              v171 += 8;
            }
            if (v173 >= 0x40)
            {
              while (*(_QWORD *)v171 == -1)
              {
                v171 += 8;
                v173 -= 64;
                if (v173 <= 0x3F)
                  goto LABEL_440;
              }
              v173 = __clz(__rbit64(~*(_QWORD *)v171));
LABEL_446:
              v178 = v173 + 8 * (v171 - v144);
              v317 = v178;
              if (v178 >= 0)
                goto LABEL_447;
              goto LABEL_432;
            }
LABEL_440:
            if (!v173)
              goto LABEL_446;
            v181 = __clz(__rbit64((0xFFFFFFFFFFFFFFFFLL >> -(char)v173) & ~*(_QWORD *)v171));
            if (((0xFFFFFFFFFFFFFFFFLL >> -(char)v173) & ~*(_QWORD *)v171) != 0)
              v173 = v181;
            v178 = v173 + 8 * (v171 - v144);
            v317 = v178;
            if (v178 >= 0)
            {
LABEL_447:
              v180 = (unint64_t)v178 >> 6;
              goto LABEL_448;
            }
LABEL_432:
            v179 = v178 - 63;
            if (v178 - 63 < 0)
              v179 = v178;
            v180 = v179 >> 6;
LABEL_448:
            v182 = v166 & 0x3F;
            v183 = &v314[v178];
            v184 = &v144[8 * v180];
            v185 = v178 & 0x3F;
            for (k = v183; ; ++k)
            {
              if (v183 == v21 && v184 == v170 && v185 == v182)
              {
                k = v21;
                v185 = v182;
                goto LABEL_462;
              }
              if (*v183 == v146 && ((*(_QWORD *)v184 >> v185) & 1) == 0)
                break;
              ++v183;
              v184 += 8 * (v185 == 63);
              if (v185 == 63)
                v185 = 0;
              else
                ++v185;
            }
            if (v183 != v21 || v184 != v170)
              goto LABEL_376;
LABEL_462:
            if (v185 != v182)
LABEL_376:
              *(_QWORD *)&v144[((unint64_t)-(v314 - k) >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << -(v314 - k);
            if (++v145 == (uint64_t *)&v142[8 * (v141 >> 3)])
            {
              operator delete(v142);
              v61 = __src;
              break;
            }
          }
        }
      }
      v187 = 0;
      v188 = 1;
      v189 = v325[1];
      if (v325[1])
        goto LABEL_469;
LABEL_470:
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if ((v188 & 1) == 0)
        goto LABEL_627;
      if (++v308 == v307)
        goto LABEL_520;
    }
    *(_QWORD *)&v332[0] = v33;
    v34 = &v419;
LABEL_65:
    *v34 = 0;
    *((_QWORD *)&v332[0] + 1) = v420;
    *(_QWORD *)&v332[1] = v31;
    v35 = &off_2506DFD00;
LABEL_66:
    *(_QWORD *)&v333[0] = (char *)&v332[1] + 8;
    ((void (*)(uint64_t (***)()))v35[3])(&v412);
    v36 = v414;
    *((_QWORD *)&v333[0] + 1) = v415;
    if (v414 == &v412)
      goto LABEL_73;
    goto LABEL_67;
  }
LABEL_520:
  memset(v333, 0, sizeof(v333));
  memset(v332, 0, sizeof(v332));
  *(_OWORD *)v330 = 0u;
  v331 = 0u;
  v219 = &v417;
  v220 = &v419;
  v416 = 0;
  v417 = &off_2506DFD00;
  v418 = memptr;
  v419 = &v417;
  v420 = 128;
  v221 = &v417;
  v404 = 0;
  while (1)
  {
    v222 = ((uint64_t (*)(uint64_t (***)(), char **))(*v221)[6])(v221, &v404);
    v223 = (uint64_t)v416;
    if ((v222 & 1) != 0)
      break;
    v223 = (uint64_t)(v416 + 1);
    v416 = (char *)v223;
    if (v223 == v420)
      break;
    v221 = v419;
    v404 = (char *)v223;
    if (!v419)
      sub_23584A6A4();
  }
  v224 = &v412;
  v411 = 128;
  v412 = &off_2506DFD00;
  v413 = memptr;
  v414 = &v412;
  v415 = 128;
  v404 = (char *)v223;
  v225 = v405;
  if (!v419)
  {
    v220 = (uint64_t (****)())&v406;
    goto LABEL_530;
  }
  if (v419 != &v417)
  {
    v406 = v419;
LABEL_530:
    *v220 = 0;
    *(_QWORD *)&v407 = v420;
    *((_QWORD *)&v407 + 1) = 128;
    v226 = &off_2506DFD00;
    goto LABEL_531;
  }
  v406 = v405;
  ((void (*)(uint64_t (***)(), _QWORD *))v417[3])(&v417, v405);
  *(_QWORD *)&v407 = v420;
  *((_QWORD *)&v407 + 1) = v411;
  if (!v414)
  {
    v229 = &v409;
LABEL_538:
    *v229 = 0;
    v227 = v414;
    v410 = v415;
    if (v414 != &v412)
      goto LABEL_532;
LABEL_539:
    v228 = 4;
    goto LABEL_540;
  }
  if (v414 != &v412)
  {
    v229 = &v414;
    v409 = v414;
    goto LABEL_538;
  }
  v226 = v412;
LABEL_531:
  v409 = (uint64_t (***)())v408;
  ((void (*)(uint64_t (***)()))v226[3])(&v412);
  v227 = v414;
  v410 = v415;
  if (v414 == &v412)
    goto LABEL_539;
LABEL_532:
  if (!v227)
    goto LABEL_541;
  v228 = 5;
  v224 = v227;
LABEL_540:
  ((void (*)(uint64_t (***)()))(*v224)[v228])(v224);
LABEL_541:
  if (v419 == &v417)
  {
    v230 = 4;
  }
  else
  {
    if (!v419)
      goto LABEL_546;
    v230 = 5;
    v219 = v419;
  }
  ((void (*)(uint64_t (***)()))(*v219)[v230])(v219);
LABEL_546:
  __p[0] = v404;
  v231 = __p;
  if (!v406)
  {
LABEL_549:
    v231[4] = 0;
    goto LABEL_551;
  }
  if (v406 != v405)
  {
    v231 = (void **)&v404;
    *(_QWORD *)v326 = v406;
    goto LABEL_549;
  }
  *(_QWORD *)v326 = &__p[1];
  (*(void (**)(_QWORD *, void **))(v405[0] + 24))(v405, &__p[1]);
LABEL_551:
  *(_OWORD *)&v326[8] = v407;
  v232 = __p;
  if (!v409)
  {
LABEL_554:
    v232[10] = 0;
    goto LABEL_556;
  }
  v232 = (void **)&v404;
  if (v409 != v408)
  {
    v328 = v409;
    goto LABEL_554;
  }
  v328 = (uint64_t (***)())v327;
  (*(void (**)(void))(v408[0] + 24))();
LABEL_556:
  v233 = v409;
  v329 = v410;
  if (v409 == v408)
  {
    v234 = 4;
    v233 = (uint64_t (***)())v408;
  }
  else
  {
    if (!v409)
      goto LABEL_561;
    v234 = 5;
  }
  (*v233)[v234]();
LABEL_561:
  if (v406 == v405)
  {
    v235 = 4;
  }
  else
  {
    if (!v406)
      goto LABEL_566;
    v235 = 5;
    v225 = v406;
  }
  (*(void (**)(_QWORD *))(*v225 + 8 * v235))(v225);
LABEL_566:
  v236 = *(_QWORD *)v326;
  v404 = (char *)__p[0];
  if (!*(_QWORD *)v326)
  {
LABEL_569:
    v406 = (_QWORD *)v236;
    goto LABEL_571;
  }
  if (*(void ***)v326 != &__p[1])
  {
    v236 = (*(uint64_t (**)(void))(**(_QWORD **)v326 + 16))();
    goto LABEL_569;
  }
  v406 = v405;
  (*((void (**)(void **, _QWORD *))__p[1] + 3))(&__p[1], v405);
LABEL_571:
  *(_QWORD *)&v407 = *(_QWORD *)&v326[8];
  v416 = *(char **)&v326[16];
  v237 = &v417;
  v238 = (uint64_t)v328;
  if (!v328)
  {
LABEL_574:
    v419 = (uint64_t (***)())v238;
    goto LABEL_576;
  }
  if (v328 != v327)
  {
    v238 = (*v328)[2]();
    goto LABEL_574;
  }
  v419 = &v417;
  (*(void (**)(_QWORD *, uint64_t (***)()))(v327[0] + 24))(v327, &v417);
LABEL_576:
  v420 = v329;
  v239 = (uint64_t)v404;
  if (v404 != v416)
  {
    while (1)
    {
      v244 = *(_QWORD *)(*a1 + 8 * v239);
      if (*((_BYTE *)v330 + v244))
        goto LABEL_605;
      *((_BYTE *)v330 + v244) = 1;
      v245 = v319;
      if (v319 >= v320)
        break;
      *(_QWORD *)v319 = v244;
      v246 = (uint64_t)(v245 + 8);
LABEL_604:
      v319 = (char *)v246;
      v239 = (uint64_t)v404;
      do
      {
LABEL_605:
        v404 = (char *)++v239;
        if (v239 == (_QWORD)v407)
          break;
        v411 = v239;
        if (!v406)
          sub_23584A6A4();
        v265 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*v406 + 48))(v406, &v411);
        v239 = (uint64_t)v404;
      }
      while ((v265 & 1) == 0);
      if ((char *)v239 == v416)
        goto LABEL_577;
    }
    v247 = (char *)v318;
    v248 = v319 - (_BYTE *)v318;
    v249 = (v319 - (_BYTE *)v318) >> 3;
    v250 = v249 + 1;
    if ((unint64_t)(v249 + 1) >> 61)
      sub_235847D5C();
    v251 = v320 - (_BYTE *)v318;
    if ((v320 - (_BYTE *)v318) >> 2 > v250)
      v250 = v251 >> 2;
    if ((unint64_t)v251 >= 0x7FFFFFFFFFFFFFF8)
      v252 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v252 = v250;
    if (v252)
    {
      if (v252 >> 61)
        sub_2358482F0();
      v253 = (char *)operator new(8 * v252);
      v254 = &v253[8 * v249];
      *(_QWORD *)v254 = v244;
      v246 = (uint64_t)(v254 + 8);
      v255 = v245 - v247;
      if (v245 == v247)
        goto LABEL_602;
    }
    else
    {
      v253 = 0;
      v254 = (char *)(8 * v249);
      *(_QWORD *)(8 * v249) = v244;
      v246 = 8 * v249 + 8;
      v255 = v245 - v247;
      if (v245 == v247)
      {
LABEL_602:
        v318 = v254;
        v319 = (char *)v246;
        v320 = &v253[8 * v252];
        if (v247)
          operator delete(v247);
        goto LABEL_604;
      }
    }
    v256 = v255 - 8;
    if (v256 < 0x58)
      goto LABEL_714;
    if ((unint64_t)(v245 - v253 - v248) < 0x20)
      goto LABEL_714;
    v257 = (v256 >> 3) + 1;
    v258 = 8 * (v257 & 0x3FFFFFFFFFFFFFFCLL);
    v259 = &v245[-v258];
    v254 -= v258;
    v260 = &v253[8 * v249 - 16];
    v261 = v245 - 16;
    v262 = v257 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v263 = *(_OWORD *)v261;
      *((_OWORD *)v260 - 1) = *((_OWORD *)v261 - 1);
      *(_OWORD *)v260 = v263;
      v260 -= 32;
      v261 -= 32;
      v262 -= 4;
    }
    while (v262);
    v245 = v259;
    if (v257 != (v257 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_714:
      do
      {
        v264 = *((_QWORD *)v245 - 1);
        v245 -= 8;
        *((_QWORD *)v254 - 1) = v264;
        v254 -= 8;
      }
      while (v245 != v247);
    }
    goto LABEL_602;
  }
LABEL_577:
  if (v419 == &v417)
  {
    v243 = 4;
    v240 = &__p[1];
    v241 = (uint64_t (***)())v327;
    v242 = v405;
  }
  else
  {
    v240 = &__p[1];
    v241 = (uint64_t (***)())v327;
    v242 = v405;
    if (!v419)
      goto LABEL_611;
    v243 = 5;
    v237 = v419;
  }
  ((void (*)(uint64_t (***)()))(*v237)[v243])(v237);
LABEL_611:
  if (v406 == v405)
  {
    v266 = 4;
  }
  else
  {
    if (!v406)
      goto LABEL_616;
    v266 = 5;
    v242 = v406;
  }
  (*(void (**)(_QWORD *))(*v242 + 8 * v266))(v242);
LABEL_616:
  if (v328 == v327)
  {
    v267 = 4;
  }
  else
  {
    if (!v328)
      goto LABEL_621;
    v267 = 5;
    v241 = v328;
  }
  ((void (*)(uint64_t (***)()))(*v241)[v267])(v241);
LABEL_621:
  if (*(void ***)v326 == &__p[1])
  {
    v268 = 4;
    goto LABEL_625;
  }
  if (*(_QWORD *)v326)
  {
    v268 = 5;
    v240 = *(void ***)v326;
LABEL_625:
    (*((void (**)(void **))*v240 + v268))(v240);
  }
  v187 = 0;
LABEL_627:
  if (v315[1])
    operator delete(v315[1]);
  if (v314)
    operator delete(v314);
  if (!v187)
    goto LABEL_634;
  v269 = v318;
  if (v318)
  {
LABEL_686:
    v319 = (char *)v269;
    operator delete(v269);
  }
LABEL_687:
  if (__src)
    free(__src);
}

void sub_23585752C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_235847B00(a1);
  _Unwind_Resume(a1);
}

_QWORD *sub_235857CF4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 7;
  v3 = (_QWORD *)a1[10];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[4];
  if (v5 == a1 + 1)
  {
    v6 = 4;
    v5 = a1 + 1;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

uint64_t sub_235857D74(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
    operator delete(v2);
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

double sub_235857DB0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  int v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  uint64_t v20;
  __int128 v21;
  uint64_t *v22;

  v6 = *(_QWORD *)(a2 + 8) + *(_QWORD *)(a1 + 8);
  v21 = 0uLL;
  v20 = 0;
  sub_235850AF0((uint64_t)&v20, v6);
  sub_235853864(*(uint64_t **)a1, 0, (uint64_t *)(*(_QWORD *)a1 + 8 * (*(_QWORD *)(a1 + 8) >> 6)), *(_QWORD *)(a1 + 8) & 0x3F, &v20, &v22);
  v8 = *(uint64_t **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v9 = v7 & 0x3F;
  if (v7 > 0x3F || (v7 & 0x3F) != 0)
  {
    v10 = 0;
    v11 = &v8[v7 >> 6];
    do
    {
      v12 = *v8;
      v13 = v21;
      if ((_QWORD)v21 == *((_QWORD *)&v21 + 1) << 6)
      {
        if ((uint64_t)v21 + 1 < 0)
          sub_235847D5C();
        v14 = *((_QWORD *)&v21 + 1) << 7;
        if (*((_QWORD *)&v21 + 1) << 7 <= ((unint64_t)v21 & 0xFFFFFFFFFFFFFFC0) + 64)
          v14 = (v21 & 0xFFFFFFFFFFFFFFC0) + 64;
        if ((unint64_t)v21 <= 0x3FFFFFFFFFFFFFFELL)
          v15 = v14;
        else
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        sub_235850AF0((uint64_t)&v20, v15);
        v13 = v21;
      }
      *(_QWORD *)&v21 = v13 + 1;
      v16 = v13 >> 6;
      v17 = 1 << v13;
      if (((1 << v10) & v12) != 0)
        v18 = *(_QWORD *)(v20 + 8 * v16) | v17;
      else
        v18 = *(_QWORD *)(v20 + 8 * v16) & ~v17;
      *(_QWORD *)(v20 + 8 * v16) = v18;
      v8 += v10 == 63;
      if (v10 == 63)
        v10 = 0;
      else
        ++v10;
    }
    while (v8 != v11 || v10 != v9);
  }
  *(_QWORD *)a3 = v20;
  result = *(double *)&v21;
  *(_OWORD *)(a3 + 8) = v21;
  return result;
}

void sub_235857F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_235857F3C(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 **a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  int8x16_t *v36;
  int v37;
  char v38;
  size_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  unint64_t v52;
  void *v53;
  unsigned int v54;
  unsigned int v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t v63;
  size_t v64;
  int8x16_t *v65;
  int8x16_t *v66;
  unint64_t v67;
  uint64_t v68;
  int8x16_t *v69;
  char *v70;
  __int8 v71;
  unint64_t v72;
  int8x16_t *v73;
  unint64_t v74;
  unint64_t v75;
  int8x16_t *v76;
  int8x16_t v77;
  unint64_t v78;
  int8x16_t v79;
  int8x8_t *v80;
  unint64_t v81;
  int8x16_t *v82;
  int8x16_t *v83;
  unint64_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x8_t *v87;
  int8x8_t *v88;
  unint64_t v89;
  int8x8_t v90;
  unint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  unint64_t v94;
  unint64_t v95;
  int8x16_t *v96;
  char v97;
  __int8 v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  int64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int64_t v120;
  uint64_t v121;
  uint64_t *v122;
  void *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  void *__p;
  uint64_t v130;
  uint64_t v131;

  v8 = *(_QWORD *)(a2 + 8) + *(_QWORD *)(a1 + 8);
  v127 = 0;
  v128 = 0;
  v126 = 0;
  sub_235850AF0((uint64_t)&v126, v8);
  sub_235853864(*(uint64_t **)a1, 0, (uint64_t *)(*(_QWORD *)a1 + 8 * (*(_QWORD *)(a1 + 8) >> 6)), *(_QWORD *)(a1 + 8) & 0x3F, (uint64_t *)&v126, (uint64_t **)&__p);
  sub_235853864(*(uint64_t **)a2, 0, (uint64_t *)(*(_QWORD *)a2 + 8 * (*(_QWORD *)(a2 + 8) >> 6)), *(_QWORD *)(a2 + 8) & 0x3F, (uint64_t *)&v126, (uint64_t **)&__p);
  v9 = v127;
  v10 = v127 & 7;
  v124 = 0;
  v125 = 0;
  v122 = v126;
  v123 = 0;
  __p = v126;
  LODWORD(v130) = 0;
  LODWORD(v127) = v127 & 7;
  sub_23585200C(&v123, (uint64_t)&__p, (uint64_t)&v126, v10);
  if (v10)
  {
    v11 = v124;
    if (v124 == v125 << 6)
    {
      if ((uint64_t)(v124 + 1) < 0)
        goto LABEL_214;
      if (v124 > 0x3FFFFFFFFFFFFFFELL)
      {
        v12 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else if (v125 << 7 <= (v124 & 0xFFFFFFFFFFFFFFC0) + 64)
      {
        v12 = (v124 & 0xFFFFFFFFFFFFFFC0) + 64;
      }
      else
      {
        v12 = v125 << 7;
      }
      sub_235850AF0((uint64_t)&v123, v12);
      v11 = v124;
    }
    v124 = v11 + 1;
    *(_QWORD *)((char *)v123 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v11);
    if (v10 != 7)
    {
      v13 = v124;
      if (v124 == v125 << 6)
      {
        if ((uint64_t)(v124 + 1) < 0)
          goto LABEL_214;
        if (v124 > 0x3FFFFFFFFFFFFFFELL)
        {
          v14 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else if (v125 << 7 <= (v124 & 0xFFFFFFFFFFFFFFC0) + 64)
        {
          v14 = (v124 & 0xFFFFFFFFFFFFFFC0) + 64;
        }
        else
        {
          v14 = v125 << 7;
        }
        sub_235850AF0((uint64_t)&v123, v14);
        v13 = v124;
      }
      v124 = v13 + 1;
      *(_QWORD *)((char *)v123 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v13);
      if (v10 != 6)
      {
        v15 = v124;
        if (v124 == v125 << 6)
        {
          if ((uint64_t)(v124 + 1) < 0)
            goto LABEL_214;
          if (v124 > 0x3FFFFFFFFFFFFFFELL)
          {
            v16 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else if (v125 << 7 <= (v124 & 0xFFFFFFFFFFFFFFC0) + 64)
          {
            v16 = (v124 & 0xFFFFFFFFFFFFFFC0) + 64;
          }
          else
          {
            v16 = v125 << 7;
          }
          sub_235850AF0((uint64_t)&v123, v16);
          v15 = v124;
        }
        v124 = v15 + 1;
        *(_QWORD *)((char *)v123 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v15);
        if (v10 != 5)
        {
          v17 = v124;
          if (v124 == v125 << 6)
          {
            if ((uint64_t)(v124 + 1) < 0)
              goto LABEL_214;
            if (v124 > 0x3FFFFFFFFFFFFFFELL)
            {
              v18 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else if (v125 << 7 <= (v124 & 0xFFFFFFFFFFFFFFC0) + 64)
            {
              v18 = (v124 & 0xFFFFFFFFFFFFFFC0) + 64;
            }
            else
            {
              v18 = v125 << 7;
            }
            sub_235850AF0((uint64_t)&v123, v18);
            v17 = v124;
          }
          v124 = v17 + 1;
          *(_QWORD *)((char *)v123 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v17);
          if (v10 != 4)
          {
            v19 = v124;
            if (v124 == v125 << 6)
            {
              if ((uint64_t)(v124 + 1) < 0)
                goto LABEL_214;
              if (v124 > 0x3FFFFFFFFFFFFFFELL)
              {
                v20 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else if (v125 << 7 <= (v124 & 0xFFFFFFFFFFFFFFC0) + 64)
              {
                v20 = (v124 & 0xFFFFFFFFFFFFFFC0) + 64;
              }
              else
              {
                v20 = v125 << 7;
              }
              sub_235850AF0((uint64_t)&v123, v20);
              v19 = v124;
            }
            v124 = v19 + 1;
            *(_QWORD *)((char *)v123 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v19);
            if (v10 != 3)
            {
              v21 = v124;
              if (v124 == v125 << 6)
              {
                if ((uint64_t)(v124 + 1) < 0)
                  goto LABEL_214;
                if (v124 > 0x3FFFFFFFFFFFFFFELL)
                {
                  v22 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else if (v125 << 7 <= (v124 & 0xFFFFFFFFFFFFFFC0) + 64)
                {
                  v22 = (v124 & 0xFFFFFFFFFFFFFFC0) + 64;
                }
                else
                {
                  v22 = v125 << 7;
                }
                sub_235850AF0((uint64_t)&v123, v22);
                v21 = v124;
              }
              v124 = v21 + 1;
              *(_QWORD *)((char *)v123 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v21);
              if (v10 != 2)
              {
                v23 = v124;
                if (v124 != v125 << 6)
                {
LABEL_64:
                  v124 = v23 + 1;
                  *(_QWORD *)((char *)v123 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v23);
                  goto LABEL_65;
                }
                if ((uint64_t)(v124 + 1) >= 0)
                {
                  if (v124 > 0x3FFFFFFFFFFFFFFELL)
                  {
                    v24 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else if (v125 << 7 <= (v124 & 0xFFFFFFFFFFFFFFC0) + 64)
                  {
                    v24 = (v124 & 0xFFFFFFFFFFFFFFC0) + 64;
                  }
                  else
                  {
                    v24 = v125 << 7;
                  }
                  sub_235850AF0((uint64_t)&v123, v24);
                  v23 = v124;
                  goto LABEL_64;
                }
LABEL_214:
                sub_235847D5C();
              }
            }
          }
        }
      }
    }
  }
LABEL_65:
  v25 = v9 & 0x3F;
  if (v9 > 0x3F || v25 != (_DWORD)v10)
  {
    v26 = v122;
    v27 = &v122[v9 >> 6];
    do
    {
      v28 = *v26;
      v29 = v124;
      if (v124 == v125 << 6)
      {
        if ((uint64_t)(v124 + 1) < 0)
          sub_235847D5C();
        v30 = v125 << 7;
        if (v125 << 7 <= (v124 & 0xFFFFFFFFFFFFFFC0) + 64)
          v30 = (v124 & 0xFFFFFFFFFFFFFFC0) + 64;
        if (v124 <= 0x3FFFFFFFFFFFFFFELL)
          v31 = v30;
        else
          v31 = 0x7FFFFFFFFFFFFFFFLL;
        sub_235850AF0((uint64_t)&v123, v31);
        v29 = v124;
      }
      v124 = v29 + 1;
      v32 = v29 >> 6;
      v33 = 1 << v29;
      if (((1 << v10) & v28) != 0)
        v34 = *((_QWORD *)v123 + v32) | v33;
      else
        v34 = *((_QWORD *)v123 + v32) & ~v33;
      *((_QWORD *)v123 + v32) = v34;
      v26 += (_DWORD)v10 == 63;
      if ((_DWORD)v10 == 63)
        LODWORD(v10) = 0;
      else
        LODWORD(v10) = v10 + 1;
    }
    while (v26 != v27 || (_DWORD)v10 != v25);
  }
  if (v124 >= 8)
  {
    v39 = v124 >> 3;
    v35 = (unsigned __int8 *)operator new(v124 >> 3);
    bzero(v35, v39);
    v40 = 0;
    v41 = 0;
    v42 = (char *)v123;
    do
    {
      v43 = (v40 >> 3) & 0x1FFFFFFFFFFFFFF8;
      v44 = v35[v41] | ((*(_QWORD *)&v42[v43] >> (v40 & 0x38)) << 7);
      v35[v41] = v44;
      v45 = v44 | (((*(_QWORD *)&v42[v43] >> (v40 & 0x38 | 1)) & 1) << 6);
      v35[v41] = v45;
      v46 = v45 | (32 * ((*(_QWORD *)&v42[v43] >> (v40 & 0x38 | 2)) & 1));
      v35[v41] = v46;
      v47 = v46 | (16 * ((*(_QWORD *)&v42[v43] >> (v40 & 0x38 | 3)) & 1));
      v35[v41] = v47;
      v48 = v47 | (8 * ((*(_QWORD *)&v42[v43] >> (v40 & 0x38 | 4)) & 1));
      v35[v41] = v48;
      v49 = v48 | (4 * ((*(_QWORD *)&v42[v43] >> (v40 & 0x38 | 5)) & 1));
      v35[v41] = v49;
      v50 = v49 | (2 * ((*(_QWORD *)&v42[v43] >> (v40 & 0x38 | 6)) & 1));
      v35[v41] = v50;
      v35[v41++] = v50 | (*(_QWORD *)&v42[v43] >> (v40 & 0x38 | 7)) & 1;
      v40 += 8;
    }
    while (v39 != v41);
    v36 = (int8x16_t *)&v35[v39];
    v37 = **a3;
    v38 = v37 - 8;
    if (v37 == 8)
      goto LABEL_93;
  }
  else
  {
    v35 = 0;
    v36 = 0;
    v37 = **a3;
    v38 = v37 - 8;
    if (v37 == 8)
      goto LABEL_93;
  }
  if (v37 == 16)
  {
LABEL_93:
    v51 = 19;
    goto LABEL_95;
  }
  if (v37 == 64)
    v51 = 11;
  else
    v51 = 9;
LABEL_95:
  sub_235853D78(a3, &__p);
  if (v130)
  {
    sub_235853D78(a3, &v126);
    v52 = v127 - 1;
    if (v126)
      operator delete(v126);
    v53 = __p;
    if (!__p)
      goto LABEL_100;
  }
  else
  {
    v52 = 0;
    v53 = __p;
    if (!__p)
      goto LABEL_100;
  }
  operator delete(v53);
LABEL_100:
  v54 = 8;
  v55 = 5;
  if ((v38 & 0xF7) != 0)
    v55 = 8;
  v56 = v51 * (unint64_t)v55 - v52;
  v57 = **a3;
  switch(v57)
  {
    case 8:
      goto LABEL_105;
    case 110:
      v58 = v56;
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      if (!v56)
        goto LABEL_126;
      goto LABEL_113;
    case 16:
LABEL_105:
      v54 = 6;
      break;
  }
  if (v57 == 8)
  {
    v68 = -6;
LABEL_125:
    v58 = v68 + v56 + 9 * v54;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    if (!v58)
      goto LABEL_126;
LABEL_113:
    if ((v58 & 0x8000000000000000) != 0)
      sub_235847D5C();
    v59 = (v58 - 1) >> 6;
    v60 = operator new(8 * (v59 + 1));
    v61 = v60;
    a4[1] = v58;
    a4[2] = v59 + 1;
    *a4 = v60;
    if (v58 >= 0x41)
      v62 = (v58 - 1) >> 6;
    else
      v62 = 0;
    v60[v62] = 0;
    if (v58 >= 0x40)
      bzero(v60, 8 * (v58 >> 6));
    if ((v58 & 0x3F) != 0)
      v61[v58 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v58 & 0x3F));
    v63 = v58 + 7;
    v64 = (v58 + 7) >> 3;
    v65 = (int8x16_t *)operator new(v64);
    v66 = (int8x16_t *)((char *)v65 + v64);
    bzero(v65, v64);
    v67 = (char *)v36 - (char *)v35;
    if (v36 == (int8x16_t *)v35)
      goto LABEL_132;
    goto LABEL_127;
  }
  if (v57 == 16)
  {
    v68 = 0;
    goto LABEL_125;
  }
  v58 = v56 + 5 * v54;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (v58)
    goto LABEL_113;
LABEL_126:
  v64 = 0;
  v61 = 0;
  v66 = 0;
  v65 = 0;
  v63 = 7;
  v67 = (char *)v36 - (char *)v35;
  if (v36 == (int8x16_t *)v35)
    goto LABEL_132;
LABEL_127:
  if (v67 < 8 || v65 < v36 && v35 < &v65->u8[v67])
  {
    v69 = v65;
    v70 = (char *)v36;
    goto LABEL_131;
  }
  if (v67 >= 0x20)
  {
    v75 = v67 & 0xFFFFFFFFFFFFFFE0;
    v82 = v36 - 1;
    v83 = v65 + 1;
    v84 = v67 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v85 = vrev64q_s8(*v82);
      v86 = vrev64q_s8(v82[-1]);
      v83[-1] = vextq_s8(v85, v85, 8uLL);
      *v83 = vextq_s8(v86, v86, 8uLL);
      v82 -= 2;
      v83 += 2;
      v84 -= 32;
    }
    while (v84);
    if (v67 == v75)
      goto LABEL_132;
    if ((v67 & 0x18) == 0)
    {
      v70 = &v36->i8[-v75];
      v69 = (int8x16_t *)((char *)v65 + v75);
      do
      {
LABEL_131:
        v71 = *--v70;
        v69->i8[0] = v71;
        v69 = (int8x16_t *)((char *)v69 + 1);
      }
      while (v70 != (char *)v35);
      goto LABEL_132;
    }
  }
  else
  {
    v75 = 0;
  }
  v69 = (int8x16_t *)((char *)v65 + (v67 & 0xFFFFFFFFFFFFFFF8));
  v70 = &v36->i8[-(v67 & 0xFFFFFFFFFFFFFFF8)];
  v87 = (int8x8_t *)((char *)v36 - v75 - 8);
  v88 = (int8x8_t *)&v65->i8[v75];
  v89 = v75 - (v67 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v90 = *v87--;
    *v88++ = vrev64_s8(v90);
    v89 += 8;
  }
  while (v89);
  if (v67 != (v67 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_131;
LABEL_132:
  if (v65 == v66)
    goto LABEL_156;
  v72 = (char *)v66 - (char *)v65;
  v73 = v65;
  if ((unint64_t)((char *)v66 - (char *)v65) < 8)
    goto LABEL_155;
  if (v72 < 0x20)
  {
    v74 = 0;
    goto LABEL_142;
  }
  v74 = v72 & 0xFFFFFFFFFFFFFFE0;
  v76 = v65 + 1;
  v77.i64[0] = 0xA5A5A5A5A5A5A5A5;
  v77.i64[1] = 0xA5A5A5A5A5A5A5A5;
  v78 = v72 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v79 = veorq_s8(*v76, v77);
    v76[-1] = veorq_s8(v76[-1], v77);
    *v76 = v79;
    v76 += 2;
    v78 -= 32;
  }
  while (v78);
  if (v72 != v74)
  {
    if ((v72 & 0x18) == 0)
    {
      v73 = (int8x16_t *)((char *)v65 + v74);
      goto LABEL_155;
    }
LABEL_142:
    v73 = (int8x16_t *)((char *)v65 + (v72 & 0xFFFFFFFFFFFFFFF8));
    v80 = (int8x8_t *)&v65->i8[v74];
    v81 = v74 - (v72 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      *v80 = veor_s8(*v80, (int8x8_t)0xA5A5A5A5A5A5A5A5);
      ++v80;
      v81 += 8;
    }
    while (v81);
    if (v72 == (v72 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_156;
    do
    {
LABEL_155:
      v73->i8[0] ^= 0xA5u;
      v73 = (int8x16_t *)((char *)v73 + 1);
    }
    while (v73 != v66);
  }
LABEL_156:
  __p = 0;
  v130 = 0;
  v131 = 0;
  v91 = v63 & 0xFFFFFFFFFFFFFFF8;
  if ((v63 & 0xFFFFFFFFFFFFFFF8) == 0)
  {
    v93 = 0;
    if (!v58)
      goto LABEL_187;
    goto LABEL_168;
  }
  if ((v63 & 0x8000000000000000) != 0)
    sub_235847D5C();
  v92 = operator new(8 * ((v91 - 1) >> 6) + 8);
  v93 = v92;
  if (v91 >= 0x41)
    v94 = (v91 - 1) >> 6;
  else
    v94 = 0;
  v92[v94] = 0;
  if (v91 >= 0x40)
    bzero(v92, 8 * (v63 >> 6));
  if ((v63 & 0x38) != 0)
    v93[v63 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v63 & 0x38));
  if (v58)
  {
LABEL_168:
    v95 = 0;
    v96 = v65;
    while (1)
    {
      v98 = v96->i8[0];
      v96 = (int8x16_t *)((char *)v96 + 1);
      v97 = v98;
      v99 = (v95 + 7) >> 6;
      v100 = 1 << (v95 + 7);
      if ((v98 & 1) != 0)
      {
        v93[v99] |= v100;
        v101 = (v95 + 6) >> 6;
        v102 = 1 << ((v95 + 6) & 0x3E);
        if ((v97 & 2) == 0)
          goto LABEL_180;
LABEL_172:
        v93[v101] |= v102;
        v103 = (v95 + 5) >> 6;
        v104 = 1 << ((v95 + 5) & 0x3D);
        if ((v97 & 4) != 0)
          goto LABEL_173;
LABEL_181:
        v93[v103] &= ~v104;
        v105 = (v95 + 4) >> 6;
        v106 = 1 << ((v95 + 4) & 0x3C);
        if ((v97 & 8) == 0)
          goto LABEL_182;
LABEL_174:
        v93[v105] |= v106;
        v107 = (v95 + 3) >> 6;
        v108 = 1 << ((v95 + 3) & 0x3B);
        if ((v97 & 0x10) != 0)
          goto LABEL_175;
LABEL_183:
        v93[v107] &= ~v108;
        v109 = (v95 + 2) >> 6;
        v110 = 1 << ((v95 + 2) & 0x3A);
        if ((v97 & 0x20) == 0)
          goto LABEL_184;
LABEL_176:
        v93[v109] |= v110;
        v111 = (v95 + 1) >> 6;
        v112 = 1 << ((v95 + 1) & 0x39);
        if ((v97 & 0x40) != 0)
          goto LABEL_177;
LABEL_185:
        v93[v111] &= ~v112;
        v113 = v95 >> 6;
        v114 = 1 << (v95 & 0x38);
        if ((v97 & 0x80) == 0)
          goto LABEL_169;
LABEL_186:
        v93[v113] |= v114;
        v95 += 8;
        if (!--v64)
          break;
      }
      else
      {
        v93[v99] &= ~v100;
        v101 = (v95 + 6) >> 6;
        v102 = 1 << ((v95 + 6) & 0x3E);
        if ((v97 & 2) != 0)
          goto LABEL_172;
LABEL_180:
        v93[v101] &= ~v102;
        v103 = (v95 + 5) >> 6;
        v104 = 1 << ((v95 + 5) & 0x3D);
        if ((v97 & 4) == 0)
          goto LABEL_181;
LABEL_173:
        v93[v103] |= v104;
        v105 = (v95 + 4) >> 6;
        v106 = 1 << ((v95 + 4) & 0x3C);
        if ((v97 & 8) != 0)
          goto LABEL_174;
LABEL_182:
        v93[v105] &= ~v106;
        v107 = (v95 + 3) >> 6;
        v108 = 1 << ((v95 + 3) & 0x3B);
        if ((v97 & 0x10) == 0)
          goto LABEL_183;
LABEL_175:
        v93[v107] |= v108;
        v109 = (v95 + 2) >> 6;
        v110 = 1 << ((v95 + 2) & 0x3A);
        if ((v97 & 0x20) != 0)
          goto LABEL_176;
LABEL_184:
        v93[v109] &= ~v110;
        v111 = (v95 + 1) >> 6;
        v112 = 1 << ((v95 + 1) & 0x39);
        if ((v97 & 0x40) == 0)
          goto LABEL_185;
LABEL_177:
        v93[v111] |= v112;
        v113 = v95 >> 6;
        v114 = 1 << (v95 & 0x38);
        if (v97 < 0)
          goto LABEL_186;
LABEL_169:
        v93[v113] &= ~v114;
        v95 += 8;
        if (!--v64)
          break;
      }
    }
  }
LABEL_187:
  if ((uint64_t)v91 >= (uint64_t)v58)
    v115 = v58;
  else
    v115 = v63 & 0xFFFFFFFFFFFFFFF8;
  v116 = v115 - 63;
  if (v115 - 63 < 0)
    v116 = v115;
  v117 = v116 >> 6;
  v118 = (unint64_t)v115 >> 6;
  if (v115 < 0)
    v118 = v117;
  v119 = v115 & 0x3F | (v118 << 6);
  if (v119 < 1)
    goto LABEL_199;
  v120 = v115 & 0x3F;
  v121 = v118 & 0x3FFFFFFFFFFFFFFLL;
  if ((unint64_t)v119 >= 0x40)
    memcpy(v61, v93, 8 * (v118 & 0x3FFFFFFFFFFFFFFLL));
  if (v120)
  {
    v61[v121] = v61[v121] & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v120) | v93[v121] & (0xFFFFFFFFFFFFFFFFLL >> -(char)v120);
  }
  else
  {
LABEL_199:
    if (!v93)
      goto LABEL_201;
  }
  operator delete(v93);
LABEL_201:
  if (v65)
    operator delete(v65);
  if (v35)
    operator delete(v35);
  if (v123)
    operator delete(v123);
  if (v122)
    operator delete(v122);
}

void sub_235858C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  if (__p)
  {
    operator delete(__p);
    if (!a9)
      goto LABEL_6;
  }
  else if (!a9)
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  operator delete(a9);
  goto LABEL_6;
}

void sub_235858D60(char **a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  int v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[16];
  _QWORD *v41;
  int v42;
  _QWORD *v43;
  int v44;

  v4 = *a1;
  v5 = a1[1];
  v6 = (char *)(v5 - *a1);
  v7 = 8 * (_QWORD)v6;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (!(8 * (_QWORD)v6))
  {
    v11 = 0;
    if (v5 == v4)
      goto LABEL_32;
    goto LABEL_13;
  }
  if ((v7 & 0x8000000000000000) != 0)
    sub_235847D5C();
  v9 = (v7 - 1) >> 6;
  v10 = operator new(8 * (v9 + 1));
  v11 = v10;
  a3[1] = v7;
  a3[2] = v9 + 1;
  *a3 = v10;
  if (v7 >= 0x41)
    v12 = (v7 - 1) >> 6;
  else
    v12 = 0;
  v10[v12] = 0;
  if (v7 >= 0x40)
    bzero(v10, 8 * (v7 >> 6));
  if ((v7 & 0x38) != 0)
    v11[v7 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v7 & 0x38));
  if (v5 != v4)
  {
LABEL_13:
    v13 = 0;
    while (1)
    {
      v15 = *v4++;
      v14 = v15;
      v16 = (v13 + 7) >> 6;
      v17 = 1 << (v13 + 7);
      if ((v15 & 1) != 0)
      {
        v11[v16] |= v17;
        v18 = (v13 + 6) >> 6;
        v19 = 1 << ((v13 + 6) & 0x3E);
        if ((v14 & 2) == 0)
          goto LABEL_25;
LABEL_17:
        v11[v18] |= v19;
        v20 = (v13 + 5) >> 6;
        v21 = 1 << ((v13 + 5) & 0x3D);
        if ((v14 & 4) != 0)
          goto LABEL_18;
LABEL_26:
        v11[v20] &= ~v21;
        v22 = (v13 + 4) >> 6;
        v23 = 1 << ((v13 + 4) & 0x3C);
        if ((v14 & 8) == 0)
          goto LABEL_27;
LABEL_19:
        v11[v22] |= v23;
        v24 = (v13 + 3) >> 6;
        v25 = 1 << ((v13 + 3) & 0x3B);
        if ((v14 & 0x10) != 0)
          goto LABEL_20;
LABEL_28:
        v11[v24] &= ~v25;
        v26 = (v13 + 2) >> 6;
        v27 = 1 << ((v13 + 2) & 0x3A);
        if ((v14 & 0x20) == 0)
          goto LABEL_29;
LABEL_21:
        v11[v26] |= v27;
        v28 = (v13 + 1) >> 6;
        v29 = 1 << ((v13 + 1) & 0x39);
        if ((v14 & 0x40) != 0)
          goto LABEL_22;
LABEL_30:
        v11[v28] &= ~v29;
        v30 = v13 >> 6;
        v31 = 1 << (v13 & 0x38);
        if ((v14 & 0x80) == 0)
          goto LABEL_14;
LABEL_31:
        v11[v30] |= v31;
        v13 += 8;
        if (!--v6)
          break;
      }
      else
      {
        v11[v16] &= ~v17;
        v18 = (v13 + 6) >> 6;
        v19 = 1 << ((v13 + 6) & 0x3E);
        if ((v14 & 2) != 0)
          goto LABEL_17;
LABEL_25:
        v11[v18] &= ~v19;
        v20 = (v13 + 5) >> 6;
        v21 = 1 << ((v13 + 5) & 0x3D);
        if ((v14 & 4) == 0)
          goto LABEL_26;
LABEL_18:
        v11[v20] |= v21;
        v22 = (v13 + 4) >> 6;
        v23 = 1 << ((v13 + 4) & 0x3C);
        if ((v14 & 8) != 0)
          goto LABEL_19;
LABEL_27:
        v11[v22] &= ~v23;
        v24 = (v13 + 3) >> 6;
        v25 = 1 << ((v13 + 3) & 0x3B);
        if ((v14 & 0x10) == 0)
          goto LABEL_28;
LABEL_20:
        v11[v24] |= v25;
        v26 = (v13 + 2) >> 6;
        v27 = 1 << ((v13 + 2) & 0x3A);
        if ((v14 & 0x20) != 0)
          goto LABEL_21;
LABEL_29:
        v11[v26] &= ~v27;
        v28 = (v13 + 1) >> 6;
        v29 = 1 << ((v13 + 1) & 0x39);
        if ((v14 & 0x40) == 0)
          goto LABEL_30;
LABEL_22:
        v11[v28] |= v29;
        v30 = v13 >> 6;
        v31 = 1 << (v13 & 0x38);
        if (v14 < 0)
          goto LABEL_31;
LABEL_14:
        v11[v30] &= ~v31;
        v13 += 8;
        if (!--v6)
          break;
      }
    }
  }
LABEL_32:
  if (*a2 == 8)
  {
    v32 = operator new(8uLL);
    v33 = v32;
    v34 = 0;
    v35 = 0;
    *v32 = 0;
    v36 = v32;
    v37 = v11;
    do
    {
      v38 = 1 << v34;
      if (((*v37 >> v35) & 1) != 0)
        v39 = *v36 | v38;
      else
        v39 = *v36 & ~v38;
      *v36 = v39;
      v37 += v35 == 63;
      if (v35 == 63)
        v35 = 0;
      else
        ++v35;
      v36 += v34 == 63;
      if (v34 == 63)
        v34 = 0;
      else
        ++v34;
    }
    while (v35 != 16 || v37 != v11);
    v43 = v32;
    v44 = 0;
    v41 = v11;
    v42 = 6;
    sub_2358594D8((uint64_t)v40, (unsigned int *)&v43, (uint64_t)v32, 0xAu, (uint64_t)&v41);
    v43 = v33;
    v44 = 10;
    v41 = v11;
    v42 = 0;
    sub_2358594D8((uint64_t)v40, (unsigned int *)&v43, (uint64_t)v33, 0x10u, (uint64_t)&v41);
    operator delete(v33);
  }
}

void sub_23585916C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_235859184(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7[2];
  char v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  char v15;
  _BYTE v16[32];
  uint64_t v17;
  unsigned __int8 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  char v25;

  if (*a2 != 110)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
LABEL_13:
    *(_BYTE *)(a3 + 120) = 1;
    return;
  }
  if (*(_QWORD *)(a1 + 8) > 7uLL)
  {
    v6 = *(_QWORD **)a1;
    memset(v16, 0, 24);
    sub_23585971C(v16, v6, 0, v6, 8, 8uLL);
    *(_QWORD *)a3 = *(_QWORD *)v16;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)&v16[8];
    goto LABEL_13;
  }
  sub_23584CE20((uint64_t)v7, "Unable to extract expected number of header bits from given message");
  v15 = 1;
  sub_23584CF48(0x16u, (__int128 *)v7, (uint64_t)v16);
  *(_OWORD *)a3 = *(_OWORD *)v16;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v25)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v4 = v18;
    if (v18)
    {
      *(_OWORD *)(a3 + 16) = *(_OWORD *)&v16[16];
      *(_QWORD *)(a3 + 32) = v17;
      *(_QWORD *)&v16[24] = 0;
      v17 = 0;
      *(_QWORD *)&v16[16] = 0;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v24)
    {
      v5 = v21;
      *(_QWORD *)(a3 + 64) = v20;
      *(_OWORD *)(a3 + 48) = v19;
      v19 = 0uLL;
      *(_QWORD *)(a3 + 72) = v5;
      *(_OWORD *)(a3 + 80) = v22;
      *(_QWORD *)(a3 + 96) = v23;
      v20 = 0;
      v22 = 0uLL;
      v23 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (v4 && SHIBYTE(v17) < 0)
      operator delete(*(void **)&v16[16]);
  }
  else
  {
    *(_BYTE *)(a3 + 120) = 0;
  }
  if (v15)
  {
    if (v14)
    {
      if (v13 < 0)
        operator delete(v12);
      if (v11 < 0)
        operator delete(v10);
    }
    if (v9)
    {
      if (v8 < 0)
        operator delete(v7[0]);
    }
  }
}

void sub_235859360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23584B774((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_235859374(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    if (v3 != v4)
    {
      v5 = **(_QWORD **)(a1 + 16);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

void sub_2358593E4()
{
  JUMPOUT(0x23B7D94C4);
}

_QWORD *sub_2358593F8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2506DFD00;
  result[1] = v3;
  return result;
}

uint64_t sub_23585942C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2506DFD00;
  a2[1] = v2;
  return result;
}

BOOL sub_235859448(uint64_t a1, _QWORD *a2)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 8) + *a2) == 0;
}

uint64_t sub_235859460(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d7appcode5codec17FindClusteredArcsERKNSt3__16vectorImNS2_9allocatorImEEEERKNS3_IS6_NS4_IS6_EE"
                     "EERKNS1_6FormatEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d7appcode5codec17FindClusteredArcsERKNSt3__16vectorImNS2_9allocatorImEEEERKNS3_IS6"
                                "_NS4_IS6_EEEERKNS1_6FormatEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d7appcode5codec17FindClusteredArcsERKNSt3__16vectorImNS2_9allocatorImEEEERKNS3_IS6_NS4_IS6_EEEERKNS1_6FormatEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d7appcode5codec17FindClusteredArcsERKNSt3__16vectorImNS2_9allocatorImEEEERKNS3_IS6_NS4_IS6_EEEERKNS1_6FormatEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2358594CC()
{
  return &unk_2506DFD70;
}

uint64_t sub_2358594D8(uint64_t result, unsigned int *a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  BOOL v14;
  BOOL v15;
  int v16;
  unint64_t v17;
  unint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;

  v5 = *(unint64_t **)a2;
  v6 = a2[2];
  v7 = a4 - v6 + 8 * (a3 - *(_QWORD *)a2);
  if (v7 <= 0)
  {
    v21 = *(uint64_t **)a5;
    v19 = *(_DWORD *)(a5 + 8);
    goto LABEL_15;
  }
  if ((_DWORD)v6)
  {
    if (v7 >= (unint64_t)(64 - v6))
      v8 = (64 - v6);
    else
      v8 = a4 - v6 + 8 * (a3 - *(_QWORD *)a2);
    v7 -= v8;
    v9 = (0xFFFFFFFFFFFFFFFFLL >> (64 - v6 - v8)) & (-1 << v6) & *v5;
    v10 = *(unsigned int *)(a5 + 8);
    if (v8 >= (64 - v10))
      v11 = (64 - v10);
    else
      v11 = v8;
    v12 = *(uint64_t **)a5;
    v13 = v9 >> (v6 - v10);
    v14 = v10 >= v6;
    v16 = v10 - v6;
    v15 = v16 != 0 && v14;
    v17 = v9 << v16;
    if (!v15)
      v17 = v13;
    *v12 = **(_QWORD **)a5 & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v10 - v11)) & (-1 << v10)) | v17;
    v18 = (unint64_t *)((char *)v12 + (((v11 + v10) >> 3) & 0x3FFFFFF8));
    *(_QWORD *)a5 = v18;
    v19 = ((_BYTE)v10 + (_BYTE)v11) & 0x3F;
    *(_DWORD *)(a5 + 8) = v19;
    v20 = v8 - v11;
    if (v20 >= 1)
    {
      *v18 = (v9 >> (v11 + a2[2])) | *v18 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v20);
      *(_DWORD *)(a5 + 8) = v20;
      v19 = v20;
    }
    v5 = (unint64_t *)(*(_QWORD *)a2 + 8);
    *(_QWORD *)a2 = v5;
  }
  else
  {
    v19 = *(_DWORD *)(a5 + 8);
  }
  v22 = -1 << v19;
  if (v7 < 64)
  {
    v26 = v7;
    v21 = *(uint64_t **)a5;
    if (v26 >= 1)
      goto LABEL_22;
LABEL_15:
    *(_QWORD *)result = v21;
    *(_DWORD *)(result + 8) = v19;
    return result;
  }
  do
  {
    v23 = *v5;
    v24 = *(uint64_t **)a5;
    *v24 = **(_QWORD **)a5 & ~v22 | (v23 << v19);
    v25 = v24[1];
    *(_QWORD *)a5 = ++v24;
    *v24 = v25 & v22 | (v23 >> (64 - v19));
    v26 = v7 - 64;
    v5 = (unint64_t *)(*(_QWORD *)a2 + 8);
    *(_QWORD *)a2 = v5;
    v15 = (unint64_t)v7 > 0x7F;
    v7 -= 64;
  }
  while (v15);
  v21 = *(uint64_t **)a5;
  if (v26 < 1)
    goto LABEL_15;
LABEL_22:
  v27 = *v5 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v26);
  if (v26 >= (unint64_t)(64 - v19))
    v28 = 64 - v19;
  else
    v28 = v26;
  *v21 = *v21 & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v19 - v28)) & v22) | (v27 << v19);
  v21 = (uint64_t *)((char *)v21 + (((v28 + (unint64_t)v19) >> 3) & 0x3FFFFFF8));
  *(_QWORD *)a5 = v21;
  v19 = ((_BYTE)v19 + (_BYTE)v28) & 0x3F;
  *(_DWORD *)(a5 + 8) = v19;
  v29 = v26 - v28;
  if (v26 - v28 < 1)
    goto LABEL_15;
  *v21 = *v21 & ~(0xFFFFFFFFFFFFFFFFLL >> (v28 - v26)) | (v27 >> v28);
  *(_DWORD *)(a5 + 8) = v29;
  *(_QWORD *)result = v21;
  *(_DWORD *)(result + 8) = v29;
  return result;
}

_QWORD *sub_23585971C(_QWORD *result, _QWORD *a2, int a3, _QWORD *a4, int a5, unint64_t a6)
{
  _QWORD *v7;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  if (a6)
  {
    v7 = result;
    if ((a6 & 0x8000000000000000) != 0)
      sub_235847D5C();
    v12 = (a6 - 1) >> 6;
    result = operator new(8 * (v12 + 1));
    v7[1] = a6;
    v7[2] = v12 + 1;
    *v7 = result;
    if (a6 >= 0x41)
      v13 = (a6 - 1) >> 6;
    else
      v13 = 0;
    result[v13] = 0;
    if (a2 != a4 || a3 != a5)
    {
      v14 = 0;
      do
      {
        v15 = 1 << v14;
        if (((*a2 >> a3) & 1) != 0)
          v16 = *result | v15;
        else
          v16 = *result & ~v15;
        *result = v16;
        a2 += a3 == 63;
        if (a3 == 63)
          a3 = 0;
        else
          ++a3;
        result += v14 == 63;
        if (v14 == 63)
          v14 = 0;
        else
          ++v14;
      }
      while (a2 != a4 || a3 != a5);
    }
  }
  return result;
}

void sub_235859814(_Unwind_Exception *exception_object)
{
  void **v1;

  if (*v1)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23585982C(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v19 = *a1;
  v4 = v20;
  v5 = (uint64_t *)a1[4];
  if (v5)
  {
    if (v5 == a1 + 1)
    {
      v21 = v20;
      (*(void (**)(uint64_t *, _BYTE *))(*v5 + 24))(v5, v20);
    }
    else
    {
      v21 = (_BYTE *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
    }
  }
  else
  {
    v21 = 0;
  }
  v22 = a1[5];
  v15 = *a2;
  v6 = v16;
  v7 = a2[4];
  if (!v7)
    goto LABEL_9;
  if ((uint64_t *)v7 != a2 + 1)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
LABEL_9:
    v17 = (_BYTE *)v7;
    goto LABEL_11;
  }
  v17 = v16;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v7 + 24))(v7, v16);
LABEL_11:
  v18 = a2[5];
  v8 = v19;
  v9 = v15;
  if (v19 == v15)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      v8 += 8;
      v19 = v8;
      if (v8 != v22)
      {
        do
        {
          if (!v21)
            sub_23584A6A4();
          v11 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v21 + 48))(v21);
          v8 = v19;
          if ((v11 & 1) != 0)
            break;
          v8 = v19 + 8;
          v19 = v8;
        }
        while (v8 != v22);
        v9 = v15;
      }
      ++v10;
    }
    while (v8 != v9);
  }
  if (v17 == v16)
  {
    v12 = 4;
  }
  else
  {
    if (!v17)
      goto LABEL_26;
    v12 = 5;
    v6 = v17;
  }
  (*(void (**)(_QWORD *))(*v6 + 8 * v12))(v6);
LABEL_26:
  if (v21 == v20)
  {
    v13 = 4;
    goto LABEL_30;
  }
  if (v21)
  {
    v13 = 5;
    v4 = v21;
LABEL_30:
    (*(void (**)(_QWORD *))(*v4 + 8 * v13))(v4);
  }
  return v10;
}

void sub_235859A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  if (a20 == v20)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20);
    _Unwind_Resume(exception_object);
  }
  if (!a20)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a20 + 40))(a20);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_235859AB0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  _BYTE v43[24];
  _BYTE *v44;
  uint64_t v45;
  uint64_t *v46;
  _BYTE v47[24];
  _BYTE *v48;
  uint64_t *v49;
  uint64_t v50;
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[24];
  _BYTE *v56;
  uint64_t v57;
  uint64_t *v58;
  _BYTE v59[24];
  _BYTE *v60;
  uint64_t *v61;
  uint64_t *v62;
  _BYTE v63[24];
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD **)(a1 + 8);
  v38 = *a2;
  v7 = v39;
  v8 = a2[4];
  if (!v8)
    goto LABEL_4;
  if ((uint64_t *)v8 != a2 + 1)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
LABEL_4:
    v40 = (_QWORD *)v8;
    goto LABEL_6;
  }
  v40 = v39;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 24))(v8, v39);
LABEL_6:
  v41 = a2[5];
  v34 = *a3;
  v9 = v35;
  v10 = a3[4];
  if (!v10)
  {
LABEL_9:
    v36 = (_QWORD *)v10;
    goto LABEL_11;
  }
  if ((uint64_t *)v10 != a3 + 1)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    goto LABEL_9;
  }
  v36 = v35;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 24))(v10, v35);
LABEL_11:
  v37 = a3[5];
  v11 = (uint64_t)v40;
  v54 = v38;
  v12 = v55;
  if (!v40)
  {
LABEL_14:
    v56 = (_BYTE *)v11;
    goto LABEL_16;
  }
  if (v40 != v39)
  {
    v11 = (*(uint64_t (**)(_QWORD *))(*v40 + 16))(v40);
    goto LABEL_14;
  }
  v56 = v55;
  (*(void (**)(_QWORD *, _BYTE *))(v39[0] + 24))(v39, v55);
LABEL_16:
  v57 = v41;
  v13 = (uint64_t)v36;
  v50 = v34;
  v14 = v51;
  if (!v36)
  {
LABEL_19:
    v52 = (_BYTE *)v13;
    goto LABEL_21;
  }
  if (v36 != v35)
  {
    v13 = (*(uint64_t (**)(void))(*v36 + 16))();
    goto LABEL_19;
  }
  v52 = v51;
  (*(void (**)(_QWORD *, _BYTE *))(v35[0] + 24))(v35, v51);
LABEL_21:
  v53 = v37;
  sub_23585ADF4(&v58, &v54, &v50);
  if (v52 == v51)
  {
    v15 = 4;
  }
  else
  {
    if (!v52)
      goto LABEL_26;
    v15 = 5;
    v14 = v52;
  }
  (*(void (**)(_QWORD *))(*v14 + 8 * v15))(v14);
LABEL_26:
  if (v56 == v55)
  {
    v16 = 4;
  }
  else
  {
    if (!v56)
      goto LABEL_31;
    v16 = 5;
    v12 = v56;
  }
  (*(void (**)(_QWORD *))(*v12 + 8 * v16))(v12);
LABEL_31:
  v17 = (uint64_t)v60;
  v46 = v58;
  v18 = v47;
  if (!v60)
  {
LABEL_34:
    v48 = (_BYTE *)v17;
    goto LABEL_36;
  }
  if (v60 != v59)
  {
    v17 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v60 + 16))(v60);
    goto LABEL_34;
  }
  v48 = v47;
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v60 + 24))(v60, v47);
LABEL_36:
  v49 = v61;
  v42 = v62;
  v19 = v43;
  v20 = (uint64_t)v64;
  if (!v64)
  {
LABEL_39:
    v44 = (_BYTE *)v20;
    goto LABEL_41;
  }
  if (v64 != v63)
  {
    v20 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v64 + 16))(v64);
    goto LABEL_39;
  }
  v44 = v43;
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v64 + 24))(v64, v43);
LABEL_41:
  v45 = v65;
  v21 = v46;
  v22 = v42;
  if (v46 == v42)
  {
    v23 = v6;
  }
  else
  {
    v23 = v6;
    do
    {
      v24 = *v21++;
      *v23 = v24;
      v46 = v21;
      if (v21 != v49)
      {
        do
        {
          if (!v48)
            sub_23584A6A4();
          v25 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v48 + 48))(v48);
          v21 = v46;
          if ((v25 & 1) != 0)
            break;
          v21 = v46 + 1;
          v46 = v21;
        }
        while (v21 != v49);
        v22 = v42;
      }
      ++v23;
    }
    while (v21 != v22);
  }
  if (v44 == v43)
  {
    v26 = 4;
  }
  else
  {
    if (!v44)
      goto LABEL_56;
    v26 = 5;
    v19 = v44;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v26))(v19);
LABEL_56:
  if (v48 == v47)
  {
    v27 = 4;
  }
  else
  {
    if (!v48)
      goto LABEL_61;
    v27 = 5;
    v18 = v48;
  }
  (*(void (**)(_QWORD *))(*v18 + 8 * v27))(v18);
LABEL_61:
  v28 = v64;
  if (v64 == v63)
  {
    v29 = 4;
    v28 = v63;
  }
  else
  {
    if (!v64)
      goto LABEL_66;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_66:
  result = v60;
  if (v60 == v59)
  {
    v31 = 4;
    result = v59;
  }
  else
  {
    if (!v60)
      goto LABEL_71;
    v31 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v31))();
LABEL_71:
  if (v36 == v35)
  {
    v32 = 4;
  }
  else
  {
    if (!v36)
      goto LABEL_76;
    v32 = 5;
    v9 = v36;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 8 * v32))(v9);
LABEL_76:
  if (v40 == v39)
  {
    v33 = 4;
    goto LABEL_80;
  }
  if (v40)
  {
    v33 = 5;
    v7 = v40;
LABEL_80:
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 8 * v33))(v7);
  }
  *(_QWORD *)(a1 + 8) = v23;
  return result;
}

void sub_235859F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,_QWORD *a32)
{
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (a32 == v35)
  {
    v39 = 4;
  }
  else
  {
    if (!a32)
      goto LABEL_6;
    v39 = 5;
    v35 = a32;
  }
  (*(void (**)(_QWORD *))(*v35 + 8 * v39))(v35);
LABEL_6:
  sub_235857CF4((_QWORD *)(v37 - 168));
  if (a14 == v34)
  {
    v40 = 4;
  }
  else
  {
    if (!a14)
      goto LABEL_11;
    v40 = 5;
    v34 = a14;
  }
  (*(void (**)(_QWORD *))(*v34 + 8 * v40))(v34);
LABEL_11:
  if (a20 == v33)
  {
    v41 = 4;
  }
  else
  {
    if (!a20)
      goto LABEL_16;
    v41 = 5;
    v33 = a20;
  }
  (*(void (**)(_QWORD *))(*v33 + 8 * v41))(v33);
LABEL_16:
  *(_QWORD *)(v32 + 8) = v36;
  _Unwind_Resume(a1);
}

_QWORD *sub_23585A0B0(_QWORD *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  _QWORD *v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  _QWORD *v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *result;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD v78[3];
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[3];
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD v86[3];
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD v90[3];
  _QWORD *v91;
  uint64_t v92;
  uint64_t *v93;
  _QWORD v94[3];
  _QWORD *v95;
  uint64_t *v96;
  uint64_t v97;
  _QWORD v98[3];
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD v102[3];
  _QWORD *v103;
  _QWORD *v104;
  uint64_t *v105;
  _BYTE v106[24];
  _BYTE *v107;
  uint64_t v108;
  uint64_t *v109;
  _QWORD v110[3];
  _QWORD *v111;
  uint64_t *v112;
  uint64_t *v113;
  _QWORD v114[3];
  _QWORD *v115;
  uint64_t *v116;
  _QWORD *v117;
  uint64_t v118;
  _BYTE v119[24];
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE v123[24];
  _BYTE *v124;
  uint64_t v125;
  uint64_t *v126;
  _BYTE v127[24];
  _BYTE *v128;
  uint64_t *v129;
  uint64_t *v130;
  _BYTE v131[24];
  _BYTE *v132;
  uint64_t v133;
  uint64_t *v134;
  _QWORD v135[3];
  _QWORD *v136;
  uint64_t *v137;
  uint64_t v138;
  _QWORD v139[3];
  _QWORD *v140;
  uint64_t v141;
  uint64_t *v142;
  _QWORD v143[3];
  _QWORD *v144;
  uint64_t *v145;
  uint64_t v146;
  _QWORD v147[3];
  _QWORD *v148;
  uint64_t v149;
  uint64_t *v150;
  _QWORD v151[3];
  _QWORD *v152;
  uint64_t *v153;
  uint64_t v154;
  _BYTE v155[24];
  _BYTE *v156;
  uint64_t v157;
  uint64_t v158;

  v158 = *MEMORY[0x24BDAC8D0];
  v81 = *a2;
  v8 = (uint64_t *)a2[4];
  if (v8)
  {
    if (v8 == a2 + 1)
    {
      v83 = v82;
      (*(void (**)(uint64_t *, _QWORD *))(*v8 + 24))(v8, v82);
    }
    else
    {
      v83 = (_QWORD *)a2[4];
      a2[4] = 0;
    }
  }
  else
  {
    v83 = 0;
  }
  v84 = a2[5];
  v77 = *a3;
  v9 = (uint64_t *)a3[4];
  if (v9)
  {
    if (v9 == a3 + 1)
    {
      v79 = v78;
      (*(void (**)(uint64_t *, _QWORD *))(*v9 + 24))(v9, v78);
    }
    else
    {
      v79 = (_QWORD *)a3[4];
      a3[4] = 0;
    }
  }
  else
  {
    v79 = 0;
  }
  v80 = a3[5];
  v89 = v81;
  v10 = &v89;
  if (!v83)
    goto LABEL_14;
  if (v83 != v82)
  {
    v10 = &v81;
    v91 = v83;
LABEL_14:
    v10[4] = 0;
    goto LABEL_16;
  }
  v91 = v90;
  (*(void (**)(_QWORD *, _QWORD *))(v82[0] + 24))(v82, v90);
LABEL_16:
  v92 = v84;
  v85 = v77;
  v11 = &v85;
  if (!v79)
  {
LABEL_19:
    v11[4] = 0;
    goto LABEL_21;
  }
  if (v79 != v78)
  {
    v11 = &v77;
    v87 = v79;
    goto LABEL_19;
  }
  v87 = v86;
  (*(void (**)(_QWORD *, _QWORD *))(v78[0] + 24))(v78, v86);
LABEL_21:
  v88 = v80;
  v12 = (uint64_t)v91;
  v122 = v89;
  v13 = v123;
  if (!v91)
  {
LABEL_24:
    v124 = (_BYTE *)v12;
    goto LABEL_26;
  }
  if (v91 != v90)
  {
    v12 = (*(uint64_t (**)(void))(*v91 + 16))();
    goto LABEL_24;
  }
  v124 = v123;
  (*(void (**)(_QWORD *, _BYTE *))(v90[0] + 24))(v90, v123);
LABEL_26:
  v125 = v92;
  v118 = v85;
  v14 = &v118;
  v15 = v119;
  if (!v87)
  {
LABEL_29:
    v14[4] = 0;
    goto LABEL_31;
  }
  if (v87 != v86)
  {
    v14 = &v85;
    v120 = v87;
    goto LABEL_29;
  }
  v120 = v119;
  (*(void (**)(_QWORD *, _BYTE *))(v86[0] + 24))(v86, v119);
LABEL_31:
  v121 = v88;
  sub_23585ADF4(&v126, &v122, &v118);
  if (v120 == v119)
  {
    v16 = 4;
  }
  else
  {
    if (!v120)
      goto LABEL_36;
    v16 = 5;
    v15 = v120;
  }
  (*(void (**)(_QWORD *))(*v15 + 8 * v16))(v15);
LABEL_36:
  if (v124 == v123)
  {
    v17 = 4;
  }
  else
  {
    if (!v124)
      goto LABEL_41;
    v17 = 5;
    v13 = v124;
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v17))(v13);
LABEL_41:
  v109 = v126;
  v18 = &v109;
  v19 = v110;
  if (v128)
  {
    v18 = &v126;
    if (v128 == v127)
    {
      v111 = v110;
      (*(void (**)(void))(*(_QWORD *)v128 + 24))();
      goto LABEL_46;
    }
    v111 = v128;
  }
  v18[4] = 0;
LABEL_46:
  v20 = v130;
  v112 = v129;
  v105 = v130;
  v21 = v106;
  if (v132)
  {
    if (v132 == v131)
    {
      v107 = v106;
      (*(void (**)(void))(*(_QWORD *)v132 + 24))();
      v20 = v105;
    }
    else
    {
      v107 = v132;
      v132 = 0;
    }
  }
  else
  {
    v107 = 0;
  }
  v108 = v133;
  v22 = v109;
  while (v22 != v20)
  {
    v23 = *v22++;
    *a4 = v23;
    v109 = v22;
    if (v22 != v112)
    {
      do
      {
        if (!v111)
          sub_23584A6A4();
        v24 = (*(uint64_t (**)(_QWORD *))(*v111 + 48))(v111);
        v22 = v109;
        if ((v24 & 1) != 0)
          break;
        v22 = v109 + 1;
        v109 = v22;
      }
      while (v22 != v112);
      v20 = v105;
    }
    ++a4;
  }
  v113 = v20;
  v25 = &v113;
  if (!v111)
    goto LABEL_63;
  if (v111 != v110)
  {
    v25 = &v109;
    v115 = v111;
LABEL_63:
    v25[4] = 0;
    goto LABEL_65;
  }
  v115 = v114;
  (*(void (**)(_QWORD *, _QWORD *))(v110[0] + 24))(v110, v114);
LABEL_65:
  v116 = v112;
  v117 = a4;
  if (v107 == v106)
  {
    v26 = 4;
  }
  else
  {
    if (!v107)
      goto LABEL_70;
    v26 = 5;
    v21 = v107;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v26))(v21);
LABEL_70:
  if (v111 == v110)
  {
    v27 = 4;
  }
  else
  {
    if (!v111)
      goto LABEL_75;
    v27 = 5;
    v19 = v111;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v27))(v19);
LABEL_75:
  v97 = v89;
  v28 = &v97;
  if (!v91)
  {
LABEL_78:
    v28[4] = 0;
    goto LABEL_80;
  }
  if (v91 != v90)
  {
    v28 = &v89;
    v99 = v91;
    goto LABEL_78;
  }
  v99 = v98;
  (*(void (**)(_QWORD *, _QWORD *))(v90[0] + 24))(v90, v98);
LABEL_80:
  v100 = v92;
  v93 = v113;
  v29 = &v93;
  v30 = v94;
  v76 = a1;
  if (!v115)
  {
LABEL_83:
    v29[4] = 0;
    goto LABEL_85;
  }
  if (v115 != v114)
  {
    v29 = &v113;
    v95 = v115;
    goto LABEL_83;
  }
  v95 = v94;
  (*(void (**)(_QWORD *, _QWORD *))(v114[0] + 24))(v114, v94);
LABEL_85:
  v96 = v116;
  v138 = v97;
  v31 = &v138;
  v32 = v139;
  if (!v99)
  {
LABEL_88:
    v31[4] = 0;
    goto LABEL_90;
  }
  if (v99 != v98)
  {
    v31 = &v97;
    v140 = v99;
    goto LABEL_88;
  }
  v140 = v139;
  (*(void (**)(_QWORD *, _QWORD *))(v98[0] + 24))(v98, v139);
LABEL_90:
  v141 = v100;
  v134 = v93;
  v33 = (uint64_t *)&v134;
  v34 = v135;
  if (!v95)
  {
LABEL_93:
    v33[4] = 0;
    goto LABEL_95;
  }
  if (v95 != v94)
  {
    v33 = (uint64_t *)&v93;
    v136 = v95;
    goto LABEL_93;
  }
  v136 = v135;
  (*(void (**)(_QWORD *, _QWORD *))(v94[0] + 24))(v94, v135);
LABEL_95:
  v137 = v96;
  v146 = v138;
  v35 = &v146;
  v36 = v147;
  if (!v140)
  {
LABEL_98:
    v35[4] = 0;
    goto LABEL_100;
  }
  if (v140 != v139)
  {
    v35 = &v138;
    v148 = v140;
    goto LABEL_98;
  }
  v148 = v147;
  (*(void (**)(_QWORD *, _QWORD *))(v139[0] + 24))(v139, v147);
LABEL_100:
  v149 = v141;
  v142 = v134;
  v37 = v143;
  if (!v136)
  {
    v38 = &v144;
    goto LABEL_104;
  }
  if (v136 != v135)
  {
    v38 = &v136;
    v144 = v136;
LABEL_104:
    *v38 = 0;
    goto LABEL_106;
  }
  v144 = v143;
  (*(void (**)(_QWORD *, _QWORD *))(v135[0] + 24))(v135, v143);
LABEL_106:
  v145 = v137;
  v154 = v146;
  v39 = &v154;
  v40 = v155;
  if (!v148)
  {
LABEL_109:
    v39[4] = 0;
    goto LABEL_111;
  }
  if (v148 != v147)
  {
    v39 = &v146;
    v156 = v148;
    goto LABEL_109;
  }
  v156 = v155;
  (*(void (**)(_QWORD *, _BYTE *))(v147[0] + 24))(v147, v155);
LABEL_111:
  v157 = v149;
  v41 = v142;
  v150 = v142;
  v42 = (uint64_t *)&v150;
  v43 = v151;
  if (!v144)
  {
LABEL_114:
    v42[4] = 0;
    goto LABEL_116;
  }
  if (v144 != v143)
  {
    v42 = (uint64_t *)&v142;
    v152 = v144;
    goto LABEL_114;
  }
  v152 = v151;
  (*(void (**)(_QWORD *, _QWORD *))(v143[0] + 24))(v143, v151);
  v41 = v150;
LABEL_116:
  v44 = v145;
  v153 = v145;
  v101 = v41;
  v45 = (uint64_t *)&v101;
  v46 = v102;
  if (v152)
  {
    if (v152 == v151)
    {
      v103 = v102;
      (*(void (**)(_QWORD *, _QWORD *))(v151[0] + 24))(v151, v102);
      v104 = v153;
      v47 = v152;
      if (v152 != v151)
        goto LABEL_120;
LABEL_123:
      v48 = 4;
      goto LABEL_124;
    }
    v45 = (uint64_t *)&v150;
    v103 = v152;
  }
  v45[4] = 0;
  v104 = v44;
  v47 = v152;
  if (v152 == v151)
    goto LABEL_123;
LABEL_120:
  if (!v47)
    goto LABEL_125;
  v48 = 5;
  v43 = v47;
LABEL_124:
  (*(void (**)(_QWORD *))(*v43 + 8 * v48))(v43);
LABEL_125:
  if (v156 == v155)
  {
    v49 = 4;
  }
  else
  {
    if (!v156)
      goto LABEL_130;
    v49 = 5;
    v40 = v156;
  }
  (*(void (**)(_QWORD *))(*v40 + 8 * v49))(v40);
LABEL_130:
  if (v144 == v143)
  {
    v52 = 4;
    v50 = v82;
    v51 = v78;
  }
  else
  {
    v50 = v82;
    v51 = v78;
    if (!v144)
      goto LABEL_135;
    v52 = 5;
    v37 = v144;
  }
  (*(void (**)(_QWORD *))(*v37 + 8 * v52))(v37);
LABEL_135:
  if (v148 == v147)
  {
    v54 = 4;
    v53 = v90;
  }
  else
  {
    v53 = v90;
    if (!v148)
      goto LABEL_140;
    v54 = 5;
    v36 = v148;
  }
  (*(void (**)(_QWORD *))(*v36 + 8 * v54))(v36);
LABEL_140:
  if (v136 == v135)
  {
    v55 = 4;
  }
  else
  {
    if (!v136)
      goto LABEL_145;
    v55 = 5;
    v34 = v136;
  }
  (*(void (**)(_QWORD *))(*v34 + 8 * v55))(v34);
LABEL_145:
  if (v140 == v139)
  {
    v57 = 4;
    v56 = v86;
  }
  else
  {
    v56 = v86;
    if (!v140)
      goto LABEL_150;
    v57 = 5;
    v32 = v140;
  }
  (*(void (**)(_QWORD *))(*v32 + 8 * v57))(v32);
LABEL_150:
  v58 = v117;
  v59 = v103;
  *v76 = v101;
  v60 = v76 + 1;
  if (v59)
  {
    if (v59 == v102)
    {
      v76[4] = v60;
      (*(void (**)(_QWORD *))(v102[0] + 24))(v102);
    }
    else
    {
      v76[4] = v59;
      v103 = 0;
    }
  }
  else
  {
    v76[4] = 0;
  }
  v61 = v103;
  v76[5] = v104;
  v76[6] = v58;
  if (v61 == v102)
  {
    v63 = 4;
    v62 = v98;
  }
  else
  {
    v62 = v98;
    if (!v61)
      goto LABEL_160;
    v63 = 5;
    v46 = v61;
  }
  (*(void (**)(_QWORD *, _QWORD *))(*v46 + 8 * v63))(v46, v60);
LABEL_160:
  if (v95 == v94)
  {
    v65 = 4;
    v64 = v114;
  }
  else
  {
    v64 = v114;
    if (!v95)
      goto LABEL_165;
    v65 = 5;
    v30 = v95;
  }
  (*(void (**)(_QWORD *, _QWORD *))(*v30 + 8 * v65))(v30, v60);
LABEL_165:
  if (v99 == v98)
  {
    v66 = 4;
  }
  else
  {
    if (!v99)
      goto LABEL_170;
    v66 = 5;
    v62 = v99;
  }
  (*(void (**)(_QWORD *, _QWORD *))(*v62 + 8 * v66))(v62, v60);
LABEL_170:
  if (v115 == v114)
  {
    v67 = 4;
  }
  else
  {
    if (!v115)
      goto LABEL_175;
    v67 = 5;
    v64 = v115;
  }
  (*(void (**)(_QWORD *, _QWORD *))(*v64 + 8 * v67))(v64, v60);
LABEL_175:
  v68 = v132;
  if (v132 == v131)
  {
    v69 = 4;
    v68 = v131;
  }
  else
  {
    if (!v132)
      goto LABEL_180;
    v69 = 5;
  }
  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_180:
  result = v128;
  if (v128 == v127)
  {
    v71 = 4;
    result = v127;
  }
  else
  {
    if (!v128)
      goto LABEL_185;
    v71 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v71))();
LABEL_185:
  if (v87 == v86)
  {
    v72 = 4;
  }
  else
  {
    if (!v87)
      goto LABEL_190;
    v72 = 5;
    v56 = v87;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*v56 + 8 * v72))(v56, v60);
LABEL_190:
  if (v91 == v90)
  {
    v73 = 4;
  }
  else
  {
    if (!v91)
      goto LABEL_195;
    v73 = 5;
    v53 = v91;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*v53 + 8 * v73))(v53, v60);
LABEL_195:
  if (v79 == v78)
  {
    v74 = 4;
  }
  else
  {
    if (!v79)
      goto LABEL_200;
    v74 = 5;
    v51 = v79;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*v51 + 8 * v74))(v51, v60);
LABEL_200:
  if (v83 == v82)
  {
    v75 = 4;
  }
  else
  {
    if (!v83)
      return result;
    v75 = 5;
    v50 = v83;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*v50 + 8 * v75))(v50, v60);
}

void sub_23585ABF8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_235847B00(a1);
  _Unwind_Resume(a1);
}

_QWORD *sub_23585ADF4(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[3];
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[3];
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[3];
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[3];
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[3];
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[3];
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v42 = *a2;
  v6 = v43;
  v7 = (uint64_t *)a2[4];
  if (v7)
  {
    if (v7 == a2 + 1)
    {
      v44 = v43;
      (*(void (**)(uint64_t *, _QWORD *))(*v7 + 24))(v7, v43);
    }
    else
    {
      v44 = (_QWORD *)a2[4];
      a2[4] = 0;
    }
  }
  else
  {
    v44 = 0;
  }
  v45 = a2[5];
  v38 = *a3;
  v8 = v39;
  v9 = (uint64_t *)a3[4];
  if (v9)
  {
    if (v9 == a3 + 1)
    {
      v40 = v39;
      (*(void (**)(uint64_t *, _QWORD *))(*v9 + 24))(v9, v39);
    }
    else
    {
      v40 = (_QWORD *)a3[4];
      a3[4] = 0;
    }
  }
  else
  {
    v40 = 0;
  }
  v41 = a3[5];
  v10 = v42;
  v54 = v42;
  v11 = &v54;
  v12 = v55;
  if (!v44)
    goto LABEL_14;
  if (v44 != v43)
  {
    v11 = &v42;
    v56 = v44;
LABEL_14:
    v11[4] = 0;
    goto LABEL_16;
  }
  v56 = v55;
  (*(void (**)(_QWORD *, _QWORD *))(v43[0] + 24))(v43, v55);
  v10 = v54;
LABEL_16:
  v13 = v45;
  v57 = v45;
  v62 = v10;
  v14 = v63;
  if (!v56)
  {
    v64 = 0;
    v65 = v45;
    v58 = v10;
    goto LABEL_21;
  }
  if (v56 == v55)
  {
    v64 = v63;
    (*(void (**)(_QWORD *, _QWORD *))(v55[0] + 24))(v55, v63);
    v15 = v64;
    v13 = v57;
    v65 = v57;
    v58 = v62;
    if (!v64)
      goto LABEL_21;
LABEL_25:
    if (v15 == v63)
    {
      v60 = v59;
      (*(void (**)(_QWORD *))(v63[0] + 24))(v63);
      v16 = v64;
      v61 = v65;
      if (v64 != v63)
        goto LABEL_22;
    }
    else
    {
      v60 = v15;
      v61 = v13;
      v64 = 0;
      v16 = 0;
      if (v63)
        goto LABEL_22;
    }
LABEL_27:
    v17 = 4;
    goto LABEL_28;
  }
  v15 = (_QWORD *)(*(uint64_t (**)(void))(*v56 + 16))();
  v13 = v57;
  v64 = v15;
  v65 = v57;
  v58 = v62;
  if (v15)
    goto LABEL_25;
LABEL_21:
  v60 = 0;
  v61 = v13;
  v16 = v64;
  if (v64 == v63)
    goto LABEL_27;
LABEL_22:
  if (!v16)
    goto LABEL_29;
  v17 = 5;
  v14 = v16;
LABEL_28:
  (*(void (**)(_QWORD *))(*v14 + 8 * v17))(v14);
LABEL_29:
  v18 = v38;
  v46 = v38;
  v19 = &v46;
  v20 = v47;
  if (!v40)
  {
LABEL_32:
    v19[4] = 0;
    goto LABEL_34;
  }
  if (v40 != v39)
  {
    v19 = &v38;
    v48 = v40;
    goto LABEL_32;
  }
  v48 = v47;
  (*(void (**)(_QWORD *, _QWORD *))(v39[0] + 24))(v39, v47);
  v18 = v46;
LABEL_34:
  v21 = v41;
  v49 = v41;
  v62 = v18;
  v22 = v63;
  if (!v48)
  {
    v64 = 0;
    v65 = v41;
    v50 = v18;
    goto LABEL_39;
  }
  if (v48 == v47)
  {
    v64 = v63;
    (*(void (**)(_QWORD *, _QWORD *))(v47[0] + 24))(v47, v63);
    v23 = v64;
    v21 = v49;
    v65 = v49;
    v50 = v62;
    if (!v64)
      goto LABEL_39;
LABEL_43:
    if (v23 == v63)
    {
      v52 = v51;
      (*(void (**)(_QWORD *))(v63[0] + 24))(v63);
      v24 = v64;
      v53 = v65;
      if (v64 != v63)
        goto LABEL_40;
    }
    else
    {
      v52 = v23;
      v53 = v21;
      v64 = 0;
      v24 = 0;
      if (v63)
        goto LABEL_40;
    }
LABEL_45:
    v25 = 4;
    goto LABEL_46;
  }
  v23 = (_QWORD *)(*(uint64_t (**)(void))(*v48 + 16))();
  v21 = v49;
  v64 = v23;
  v65 = v49;
  v50 = v62;
  if (v23)
    goto LABEL_43;
LABEL_39:
  v52 = 0;
  v53 = v21;
  v24 = v64;
  if (v64 == v63)
    goto LABEL_45;
LABEL_40:
  if (!v24)
    goto LABEL_47;
  v25 = 5;
  v22 = v24;
LABEL_46:
  (*(void (**)(_QWORD *))(*v22 + 8 * v25))(v22);
LABEL_47:
  v26 = v60;
  *a1 = v58;
  v27 = a1 + 1;
  if (v26)
  {
    if (v26 == v59)
    {
      a1[4] = v27;
      (*(void (**)(void))(v59[0] + 24))();
    }
    else
    {
      a1[4] = v26;
      v60 = 0;
    }
  }
  else
  {
    a1[4] = 0;
  }
  v28 = v50;
  v29 = v52;
  a1[5] = v61;
  a1[6] = v28;
  if (v29)
  {
    if (v29 == v51)
    {
      a1[10] = a1 + 7;
      (*(void (**)(void))(v51[0] + 24))();
    }
    else
    {
      a1[10] = v29;
      v52 = 0;
    }
  }
  else
  {
    a1[10] = 0;
  }
  v30 = v52;
  a1[11] = v53;
  if (v30 == v51)
  {
    v31 = 4;
    v30 = v51;
  }
  else
  {
    if (!v30)
      goto LABEL_62;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_62:
  if (v48 == v47)
  {
    v32 = 4;
  }
  else
  {
    if (!v48)
      goto LABEL_67;
    v32 = 5;
    v20 = v48;
  }
  (*(void (**)(_QWORD *, _QWORD *))(*v20 + 8 * v32))(v20, v27);
LABEL_67:
  result = v60;
  if (v60 == v59)
  {
    v34 = 4;
    result = v59;
  }
  else
  {
    if (!v60)
      goto LABEL_72;
    v34 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v34))();
LABEL_72:
  if (v56 == v55)
  {
    v35 = 4;
  }
  else
  {
    if (!v56)
      goto LABEL_77;
    v35 = 5;
    v12 = v56;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*v12 + 8 * v35))(v12, v27);
LABEL_77:
  if (v40 == v39)
  {
    v36 = 4;
  }
  else
  {
    if (!v40)
      goto LABEL_82;
    v36 = 5;
    v8 = v40;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*v8 + 8 * v36))(v8, v27);
LABEL_82:
  if (v44 == v43)
  {
    v37 = 4;
  }
  else
  {
    if (!v44)
      return result;
    v37 = 5;
    v6 = v44;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*v6 + 8 * v37))(v6, v27);
}

void sub_23585B394(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_235847B00(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_23585B3E4(_QWORD *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  _BYTE *v11;
  size_t v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  char *v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  unsigned __int8 *v28;
  int v29;
  char v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t *v39;
  unsigned int v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  int v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  unsigned __int8 *v67;
  unint64_t v68;
  char *v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  size_t v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  size_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  _QWORD *v84;
  char *v85;
  char *v86;
  unint64_t v87;
  __int128 v88;
  char v89;
  int v90;
  int v91;
  char *v92;
  unint64_t v93;
  __int128 *v94;
  _OWORD *v95;
  unint64_t v96;
  __int128 v97;
  uint64_t *v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  char v102;
  unsigned __int8 *v104;
  uint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  char *v108;
  char *v109;
  size_t v110;
  void *__p;
  void *v112;
  uint64_t v113;
  void *v114[4];
  char v115;
  char v116;
  void *v117;
  char v118;
  void *v119;
  char v120;
  char v121;
  char v122;
  char v123;
  __int16 v124;
  char *v125;
  char *v126;
  char *v127;

  v7 = (_BYTE *)*a1;
  v6 = (_BYTE *)a1[1];
  if ((_BYTE *)*a1 != v6)
  {
    v8 = (_BYTE *)*a1;
    while (!*v8)
    {
      if (++v8 == v6)
      {
        v8 = (_BYTE *)a1[1];
        break;
      }
    }
    v104 = &a3[(_QWORD)a2];
    if (!a3)
      goto LABEL_22;
LABEL_9:
    v9 = 0;
    while (v9[(_QWORD)a2] != 8)
    {
      if (a3 == ++v9)
      {
        if ((unsigned __int8 *)(v104 - a2) == a3)
          goto LABEL_22;
        goto LABEL_15;
      }
    }
    if (v9 == a3)
      goto LABEL_22;
LABEL_15:
    v10 = 0;
    while (v10[(_QWORD)a2] != 110)
    {
      if (a3 == ++v10)
      {
        if ((unsigned __int8 *)(v104 - a2) == a3)
          goto LABEL_22;
        goto LABEL_19;
      }
    }
    if (v10 == a3)
      goto LABEL_22;
LABEL_19:
    v11 = v8;
    v125 = 0;
    v126 = 0;
    v127 = 0;
    v12 = v6 - v8;
    if (v6 != v8)
      goto LABEL_24;
    goto LABEL_26;
  }
  v8 = (_BYTE *)*a1;
  v104 = &a3[(_QWORD)a2];
  if (a3)
    goto LABEL_9;
LABEL_22:
  if (sub_23587BF24("/Library/Caches/com.apple.xbs/Sources/ACCBaker/library/AppCode/Codec/src/Version.cpp", 43, (uint64_t)"Contains(excluded, Version::kVersion2) && Contains(excluded, Version::kVersion4)", 80, (uint64_t)"", 0, (void (*)(void **))sub_23587C380))
  {
    abort();
  }
  v13 = (_BYTE *)a1[1];
  v11 = (_BYTE *)(*a1 + v8 - v7);
  v125 = 0;
  v126 = 0;
  v127 = 0;
  v12 = v13 - v11;
  if (v13 != v11)
  {
LABEL_24:
    if ((v12 & 0x8000000000000000) != 0)
      sub_235847D5C();
    v14 = (char *)operator new(v12);
    v15 = &v14[v12];
    v125 = v14;
    v127 = &v14[v12];
    memmove(v14, v11, v12);
    v126 = v15;
  }
LABEL_26:
  v108 = 0;
  v107 = a1;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = &byte_2358911AA;
  do
  {
    v21 = *v20;
    v22 = a2;
    v23 = a3;
    if (a3)
    {
      v22 = a2;
      while (*v22 != v21)
      {
        ++v22;
        if (!--v23)
        {
          v22 = v104;
          break;
        }
      }
      v23 = a3;
    }
    if ((unsigned __int8 *)(v22 - a2) == v23)
    {
      if (*v20 <= 0xFu)
      {
        if (!*v20)
        {
          v25 = *v20;
          goto LABEL_47;
        }
        v24 = byte_2358809D5;
        if (v21 == 8)
        {
          v25 = 2u;
          goto LABEL_47;
        }
      }
      else
      {
        if (v21 == 16)
        {
          v25 = 3u;
          goto LABEL_47;
        }
        if (v21 == 110)
        {
          v25 = 4u;
          goto LABEL_47;
        }
        v24 = byte_2358809D5;
        if (v21 == 64)
        {
          v25 = 1u;
LABEL_47:
          v24 = (char *)&unk_2358809D0 + v25;
        }
      }
      if (v24 - (char *)&unk_2358809D0 == 5)
        v26 = 0;
      else
        v26 = v21 | 0x100;
      v124 = v26;
      sub_235858D60((char **)v107, &v124, &__p);
      sub_235859184((uint64_t)&__p, &v124, (uint64_t)v114);
      if (__p)
        operator delete(__p);
      if (!v123)
        goto LABEL_112;
      if (!HIBYTE(v124))
        sub_23584B514();
      v27 = sub_23584B154((uint64_t)v114);
      __p = &v124;
      sub_23585238C(&v112, v27);
      v28 = (unsigned __int8 *)__p;
      v29 = *(unsigned __int8 *)__p;
      v30 = v29 - 8;
      switch(v29)
      {
        case 8:
          goto LABEL_58;
        case 64:
          v31 = 0;
          v35 = 0;
          v36 = 88;
          v37 = 5;
          v38 = 8;
          goto LABEL_91;
        case 16:
LABEL_58:
          v105 = 19;
          v31 = 0;
          if (*(unsigned __int8 *)__p <= 0xFu)
            goto LABEL_59;
          break;
        default:
          v105 = 9;
          v31 = 0;
          if (*(unsigned __int8 *)__p <= 0xFu)
          {
LABEL_59:
            if (*(_BYTE *)__p)
            {
              v32 = (uint64_t *)operator new(8uLL);
              *v32 = 13;
              goto LABEL_61;
            }
            goto LABEL_77;
          }
          break;
      }
      if (v29 != 16)
      {
        if (v113 != 8 || *(_BYTE *)v112)
        {
          v31 = 0;
          v38 = 0;
          v36 = 8 * v105;
          goto LABEL_87;
        }
        v32 = (uint64_t *)operator new(8uLL);
        v49 = 0;
        v50 = 0;
        *v32 = 0;
        v51 = v32;
        do
        {
          v53 = 1 << v49;
          if (byte_2358809D5[v50])
            v52 = *v51 | v53;
          else
            v52 = *v51 & ~v53;
          *v51 = v52;
          ++v50;
          v51 += v49 == 63;
          if (v49 == 63)
            v49 = 0;
          else
            ++v49;
        }
        while (v50 != 45);
LABEL_61:
        v33 = *v28;
        v34 = v32;
        v31 = 1;
        if (v33 <= 15)
        {
          if (!v33)
            goto LABEL_76;
          v39 = (uint64_t *)operator new(8uLL);
          *v39 = 13;
          v31 = -5;
        }
        else
        {
          if (v33 == 16 || v33 == 64)
            goto LABEL_76;
          if (v113 != 8 || *(_BYTE *)v112)
          {
            v31 = 1;
LABEL_76:
            operator delete(v34);
            v29 = *(unsigned __int8 *)__p;
            goto LABEL_77;
          }
          v39 = (uint64_t *)operator new(8uLL);
          v54 = 0;
          v55 = 0;
          *v39 = 0;
          v56 = v39;
          do
          {
            v58 = 1 << v54;
            if (byte_2358809D5[v55])
              v57 = *v56 | v58;
            else
              v57 = *v56 & ~v58;
            *v56 = v57;
            ++v55;
            v56 += v54 == 63;
            if (v54 == 63)
              v54 = 0;
            else
              ++v54;
          }
          while (v55 != 45);
          v31 = -44;
        }
        operator delete(v39);
        goto LABEL_76;
      }
LABEL_77:
      v40 = 8;
      if ((v30 & 0xF7) == 0)
        v40 = 5;
      v36 = v105 * (unint64_t)v40;
      if (v29 == 8)
        goto LABEL_82;
      if (v29 != 110)
      {
        v38 = 8;
        if (v29 != 16)
        {
LABEL_83:
          if (v29 == 8)
          {
            v35 = -6;
          }
          else
          {
            if (v29 != 16)
            {
              v35 = 0;
              v37 = 5;
              goto LABEL_91;
            }
            v35 = 0;
          }
          v37 = 9;
LABEL_91:
          v41 = (v31 + v36 + v35 + v38 * (unint64_t)v37 + 7) >> 3;
          if (v19 < v108)
          {
            *v19 = v21;
            *((_QWORD *)v19 + 1) = v41;
            v17 = v19 + 16;
            v42 = v112;
            if (!v112)
            {
LABEL_94:
              if (v123)
              {
                if (v114[0])
                  operator delete(v114[0]);
                v19 = v17;
                goto LABEL_28;
              }
              v19 = v17;
LABEL_112:
              if (!v122)
                goto LABEL_28;
              if (v121)
              {
                if ((v120 & 0x80000000) == 0)
                {
                  if ((v118 & 0x80000000) == 0)
                    goto LABEL_116;
LABEL_122:
                  operator delete(v117);
                  if (!v116)
                    goto LABEL_28;
                  goto LABEL_117;
                }
                operator delete(v119);
                if (v118 < 0)
                  goto LABEL_122;
              }
LABEL_116:
              if (!v116)
                goto LABEL_28;
LABEL_117:
              if (v115 < 0)
                operator delete(v114[2]);
              goto LABEL_28;
            }
LABEL_93:
            operator delete(v42);
            goto LABEL_94;
          }
          v43 = (v19 - v18) >> 4;
          v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 60)
            sub_235847D5C();
          if ((v108 - v18) >> 3 > v44)
            v44 = (v108 - v18) >> 3;
          if ((unint64_t)(v108 - v18) >= 0x7FFFFFFFFFFFFFF0)
            v45 = 0xFFFFFFFFFFFFFFFLL;
          else
            v45 = v44;
          if (v45 >> 60)
            sub_2358482F0();
          v46 = (char *)operator new(16 * v45);
          v47 = &v46[16 * v43];
          *v47 = v21;
          *((_QWORD *)v47 + 1) = v41;
          if (v19 == v18)
          {
            v16 = &v46[16 * v43];
            v108 = &v46[16 * v45];
            v17 = v47 + 16;
            if (v18)
LABEL_108:
              operator delete(v18);
          }
          else
          {
            v48 = &v46[16 * v43];
            do
            {
              v16 = v48 - 16;
              *((_OWORD *)v48 - 1) = *((_OWORD *)v19 - 1);
              v19 -= 16;
              v48 -= 16;
            }
            while (v19 != v18);
            v108 = &v46[16 * v45];
            v17 = v47 + 16;
            if (v18)
              goto LABEL_108;
          }
          v18 = v16;
          v42 = v112;
          if (!v112)
            goto LABEL_94;
          goto LABEL_93;
        }
LABEL_82:
        v38 = 6;
        goto LABEL_83;
      }
      v38 = 0;
LABEL_87:
      v35 = 0;
      v37 = 0;
      goto LABEL_91;
    }
LABEL_28:
    ++v20;
  }
  while (v20 != (char *)&unk_2358911AF);
  v59 = 126 - 2 * __clz((v19 - v16) >> 4);
  if (v19 == v16)
    v60 = 0;
  else
    v60 = v59;
  sub_23585BEA4(v16, v19, v60, 1);
  v62 = v125;
  v61 = v126;
  v63 = v126 - v125;
  v64 = v16;
  if (v17 != v16)
  {
    v65 = (v17 - v16) >> 4;
    v64 = v16;
    do
    {
      v66 = v65 >> 1;
      v67 = (unsigned __int8 *)&v64[16 * (v65 >> 1)];
      v68 = *((_QWORD *)v67 + 1);
      v69 = (char *)(v67 + 16);
      v65 += ~(v65 >> 1);
      if (v68 < v63)
        v64 = v69;
      else
        v65 = v66;
    }
    while (v65);
  }
  if (v64 == v17)
  {
    v90 = 0;
    v91 = 0;
    if (v16)
      goto LABEL_192;
    goto LABEL_193;
  }
  v70 = *((_QWORD *)v64 + 1);
  v72 = (char *)*v107;
  v71 = (char *)v107[1];
  v73 = &v71[-*v107];
  v74 = v70 - (_QWORD)v73;
  if (v70 > (unint64_t)v73)
  {
    v75 = v107[2];
    if (v75 - (uint64_t)v71 >= v74)
    {
      v82 = &v71[v74];
      bzero((void *)v107[1], v74);
      v107[1] = &v71[v74];
      goto LABEL_175;
    }
    if ((v70 & 0x8000000000000000) != 0)
      sub_235847D5C();
    v76 = &v71[-*v107];
    v77 = v75 - (_QWORD)v72;
    v78 = 2 * v77;
    if (2 * v77 <= v70)
      v78 = *((_QWORD *)v64 + 1);
    if (v77 >= 0x3FFFFFFFFFFFFFFFLL)
      v79 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v79 = v78;
    v110 = v79;
    v80 = (char *)operator new(v79);
    v106 = (unint64_t)v76;
    v81 = &v76[(_QWORD)v80];
    v109 = v80;
    bzero(v81, v74);
    v82 = &v109[v70];
    v83 = &v109[v110];
    if (v71 == v72)
    {
      v84 = v107;
      *v107 = v81;
      v107[1] = v82;
      v107[2] = v83;
      if (!v71)
        goto LABEL_175;
    }
    else
    {
      v84 = v107;
      if (v106 < 0x20)
        goto LABEL_204;
      if ((unint64_t)(v72 - v109) < 0x20)
        goto LABEL_204;
      v81 -= v106 & 0xFFFFFFFFFFFFFFE0;
      v85 = v71 - 16;
      v86 = &v109[v71 - 16 - v72];
      v87 = v106 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v88 = *(_OWORD *)v85;
        *((_OWORD *)v86 - 1) = *((_OWORD *)v85 - 1);
        *(_OWORD *)v86 = v88;
        v86 -= 32;
        v85 -= 32;
        v87 -= 32;
      }
      while (v87);
      v71 -= v106 & 0xFFFFFFFFFFFFFFE0;
      if (v106 != (v106 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_204:
        do
        {
          v89 = *--v71;
          *--v81 = v89;
        }
        while (v71 != v72);
      }
      v71 = (char *)*v107;
      *v107 = v81;
      v107[1] = v82;
      v107[2] = v83;
      if (!v71)
      {
LABEL_175:
        v71 = v82;
        goto LABEL_176;
      }
    }
    operator delete(v71);
    v82 = (char *)v84[1];
    goto LABEL_175;
  }
  if (v70 < (unint64_t)v73)
  {
    v71 = &v72[v70];
    v107[1] = &v72[v70];
  }
LABEL_176:
  if (v62 == v61)
    goto LABEL_191;
  v92 = &v71[v62 - v61];
  if (v63 < 8 || (unint64_t)(v71 - v61) < 0x20)
  {
    do
    {
LABEL_190:
      v102 = *v62++;
      *v92++ = v102;
    }
    while (v62 != v61);
    goto LABEL_191;
  }
  if (v63 >= 0x20)
  {
    v93 = v63 & 0xFFFFFFFFFFFFFFE0;
    v94 = (__int128 *)(v62 + 16);
    v95 = (_OWORD *)(&v62[(_QWORD)v71] - v61 + 16);
    v96 = v63 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v97 = *v94;
      *(v95 - 1) = *(v94 - 1);
      *v95 = v97;
      v94 += 2;
      v95 += 2;
      v96 -= 32;
    }
    while (v96);
    if (v63 == v93)
      goto LABEL_191;
    if ((v63 & 0x18) != 0)
      goto LABEL_185;
    v62 += v93;
    v92 += v93;
    goto LABEL_190;
  }
  v93 = 0;
LABEL_185:
  v92 += v63 & 0xFFFFFFFFFFFFFFF8;
  v98 = (uint64_t *)&v62[v93];
  v99 = (char *)(&v71[v93 + (_QWORD)v62] - v61);
  v100 = v93 - (v63 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v101 = *v98++;
    *(_QWORD *)v99 = v101;
    v99 += 8;
    v100 += 8;
  }
  while (v100);
  v62 += v63 & 0xFFFFFFFFFFFFFFF8;
  if (v63 != (v63 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_190;
LABEL_191:
  v90 = *v64;
  v91 = 1;
  if (v16)
LABEL_192:
    operator delete(v16);
LABEL_193:
  if (v125)
    operator delete(v125);
  return v90 | (v91 << 8);
}

void sub_23585BDFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  void *v20;
  uint64_t v21;
  void *v22;

  if (v20)
  {
    operator delete(v20);
    v22 = *(void **)(v21 - 112);
    if (!v22)
LABEL_4:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v22 = *(void **)(v21 - 112);
    if (!v22)
      goto LABEL_4;
  }
  operator delete(v22);
  goto LABEL_4;
}

char *sub_23585BEA4(char *result, char *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  char v59;
  char v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  unint64_t v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  unint64_t v83;
  char v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char v94;
  unint64_t v95;
  unint64_t v96;
  char v97;
  unint64_t v98;
  unint64_t v99;
  char v100;
  char v101;
  unint64_t v102;
  char v103;
  unint64_t v104;
  char v105;
  char *v106;
  BOOL v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  int64_t v117;
  int64_t v118;
  BOOL v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char v146;
  uint64_t v147;
  char v148;
  unint64_t v149;
  unint64_t v150;
  char v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  char v155;
  unint64_t *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;

  v7 = (uint64_t)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (uint64_t)&a2[-v8];
    v10 = (uint64_t)&a2[-v8] >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v88 = *((_QWORD *)a2 - 1);
        v89 = *(_QWORD *)(v8 + 8);
        if (v88 < v89)
        {
          v90 = *(_BYTE *)v8;
          *(_BYTE *)v8 = *(a2 - 16);
          *(a2 - 16) = v90;
          *(_QWORD *)(v8 + 8) = v88;
          *((_QWORD *)a2 - 1) = v89;
        }
        return result;
      case 3:
        v91 = *(_QWORD *)(v8 + 24);
        v92 = *(_QWORD *)(v8 + 8);
        v93 = *((_QWORD *)a2 - 1);
        if (v91 >= v92)
        {
          if (v93 < v91)
          {
            v148 = *(_BYTE *)(v8 + 16);
            *(_BYTE *)(v8 + 16) = *(a2 - 16);
            *(a2 - 16) = v148;
            *(_QWORD *)(v8 + 24) = v93;
            *((_QWORD *)a2 - 1) = v91;
            v149 = *(_QWORD *)(v8 + 24);
            v150 = *(_QWORD *)(v8 + 8);
            if (v149 < v150)
            {
              v151 = *(_BYTE *)v8;
              *(_BYTE *)v8 = *(_BYTE *)(v8 + 16);
              *(_BYTE *)(v8 + 16) = v151;
              *(_QWORD *)(v8 + 8) = v149;
              *(_QWORD *)(v8 + 24) = v150;
            }
          }
        }
        else
        {
          v94 = *(_BYTE *)v8;
          if (v93 >= v91)
          {
            *(_BYTE *)v8 = *(_BYTE *)(v8 + 16);
            *(_BYTE *)(v8 + 16) = v94;
            *(_QWORD *)(v8 + 8) = v91;
            *(_QWORD *)(v8 + 24) = v92;
            v159 = *((_QWORD *)a2 - 1);
            if (v159 >= v92)
              return result;
            *(_BYTE *)(v8 + 16) = *(a2 - 16);
            *(a2 - 16) = v94;
            *(_QWORD *)(v8 + 24) = v159;
          }
          else
          {
            *(_BYTE *)v8 = *(a2 - 16);
            *(a2 - 16) = v94;
            *(_QWORD *)(v8 + 8) = v93;
          }
          *((_QWORD *)a2 - 1) = v92;
        }
        return result;
      case 4:
        return sub_23585CE18((char *)v8, (char *)(v8 + 16), (char *)(v8 + 32), a2 - 16);
      case 5:
        result = sub_23585CE18((char *)v8, (char *)(v8 + 16), (char *)(v8 + 32), (char *)(v8 + 48));
        v95 = *((_QWORD *)a2 - 1);
        v96 = *(_QWORD *)(v8 + 56);
        if (v95 < v96)
        {
          v97 = *(_BYTE *)(v8 + 48);
          *(_BYTE *)(v8 + 48) = *(a2 - 16);
          *(a2 - 16) = v97;
          *(_QWORD *)(v8 + 56) = v95;
          *((_QWORD *)a2 - 1) = v96;
          v98 = *(_QWORD *)(v8 + 56);
          v99 = *(_QWORD *)(v8 + 40);
          if (v98 < v99)
          {
            v100 = *(_BYTE *)(v8 + 32);
            v101 = *(_BYTE *)(v8 + 48);
            *(_BYTE *)(v8 + 32) = v101;
            *(_BYTE *)(v8 + 48) = v100;
            *(_QWORD *)(v8 + 40) = v98;
            *(_QWORD *)(v8 + 56) = v99;
            v102 = *(_QWORD *)(v8 + 24);
            if (v98 < v102)
            {
              v103 = *(_BYTE *)(v8 + 16);
              *(_BYTE *)(v8 + 16) = v101;
              *(_BYTE *)(v8 + 32) = v103;
              *(_QWORD *)(v8 + 24) = v98;
              *(_QWORD *)(v8 + 40) = v102;
              v104 = *(_QWORD *)(v8 + 8);
              if (v98 < v104)
              {
                v105 = *(_BYTE *)v8;
                *(_BYTE *)v8 = v101;
                *(_BYTE *)(v8 + 16) = v105;
                *(_QWORD *)(v8 + 8) = v98;
                *(_QWORD *)(v8 + 24) = v104;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 383)
        {
          v106 = (char *)(v8 + 16);
          v108 = (char *)v8 == a2 || v106 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v108)
            {
              v109 = 0;
              v110 = (char *)v8;
              do
              {
                v112 = *((_QWORD *)v110 + 3);
                v113 = *((_QWORD *)v110 + 1);
                v110 = v106;
                if (v112 < v113)
                {
                  v114 = *v106;
                  v115 = v109;
                  do
                  {
                    v116 = v8 + v115;
                    *(_BYTE *)(v116 + 16) = *(_BYTE *)(v8 + v115);
                    *(_QWORD *)(v116 + 24) = *(_QWORD *)(v8 + v115 + 8);
                    if (!v115)
                    {
                      v111 = v8;
                      goto LABEL_121;
                    }
                    v115 -= 16;
                  }
                  while (v112 < *(_QWORD *)(v116 - 8));
                  v111 = v8 + v115 + 16;
LABEL_121:
                  *(_BYTE *)v111 = v114;
                  *(_QWORD *)(v111 + 8) = v112;
                }
                v106 = v110 + 16;
                v109 += 16;
              }
              while (v110 + 16 != a2);
            }
          }
          else if (!v108)
          {
            v152 = (unint64_t *)(v8 + 24);
            do
            {
              v153 = *(_QWORD *)(v7 + 24);
              v154 = *(_QWORD *)(v7 + 8);
              v7 = (uint64_t)v106;
              if (v153 < v154)
              {
                v155 = *v106;
                v156 = v152;
                do
                {
                  v157 = v156;
                  *((_BYTE *)v156 - 8) = *((_BYTE *)v156 - 24);
                  v158 = *(v156 - 2);
                  v156 -= 2;
                  *v157 = v158;
                }
                while (v153 < *(v157 - 4));
                *((_BYTE *)v156 - 8) = v155;
                *v156 = v153;
              }
              v106 = (char *)(v7 + 16);
              v152 += 2;
            }
            while ((char *)(v7 + 16) != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((char *)v8 != a2)
          {
            v117 = (unint64_t)(v10 - 2) >> 1;
            v118 = v117;
            do
            {
              if (v117 >= v118)
              {
                v120 = (2 * v118) | 1;
                v121 = v8 + 16 * v120;
                if (2 * v118 + 2 < v10)
                {
                  v122 = *(_QWORD *)(v121 + 8);
                  v123 = *(_QWORD *)(v121 + 24);
                  v121 += 16 * (v122 < v123);
                  if (v122 < v123)
                    v120 = 2 * v118 + 2;
                }
                v124 = v8 + 16 * v118;
                v125 = *(_QWORD *)(v124 + 8);
                if (*(_QWORD *)(v121 + 8) >= v125)
                {
                  v126 = *(_BYTE *)v124;
                  do
                  {
                    v127 = v124;
                    v124 = v121;
                    *(_BYTE *)v127 = *(_BYTE *)v121;
                    *(_QWORD *)(v127 + 8) = *(_QWORD *)(v121 + 8);
                    if (v117 < v120)
                      break;
                    v128 = (2 * v120) | 1;
                    v121 = v8 + 16 * v128;
                    v129 = 2 * v120 + 2;
                    if (v129 < v10)
                    {
                      v130 = *(_QWORD *)(v121 + 8);
                      v131 = *(_QWORD *)(v121 + 24);
                      v121 += 16 * (v130 < v131);
                      if (v130 < v131)
                        v128 = v129;
                    }
                    result = *(char **)(v121 + 8);
                    v120 = v128;
                  }
                  while ((unint64_t)result >= v125);
                  *(_BYTE *)v124 = v126;
                  *(_QWORD *)(v124 + 8) = v125;
                }
              }
              v119 = v118-- <= 0;
            }
            while (!v119);
            v132 = (unint64_t)v9 >> 4;
            do
            {
              v133 = 0;
              v134 = *(_BYTE *)v8;
              v135 = *(_QWORD *)(v8 + 8);
              v136 = v8;
              do
              {
                v137 = v136 + 16 * v133 + 16;
                v138 = (2 * v133) | 1;
                v139 = 2 * v133 + 2;
                if (v139 < v132)
                {
                  v140 = *(_QWORD *)(v137 + 8);
                  v141 = *(_QWORD *)(v137 + 24);
                  v137 += 16 * (v140 < v141);
                  if (v140 < v141)
                    v138 = v139;
                }
                *(_BYTE *)v136 = *(_BYTE *)v137;
                *(_QWORD *)(v136 + 8) = *(_QWORD *)(v137 + 8);
                v136 = v137;
                v133 = v138;
              }
              while (v138 <= (uint64_t)((unint64_t)(v132 - 2) >> 1));
              if ((char *)v137 == a2 - 16)
              {
                *(_BYTE *)v137 = v134;
                *(_QWORD *)(v137 + 8) = v135;
              }
              else
              {
                *(_BYTE *)v137 = *(a2 - 16);
                *(_QWORD *)(v137 + 8) = *((_QWORD *)a2 - 1);
                *(a2 - 16) = v134;
                *((_QWORD *)a2 - 1) = v135;
                v142 = v137 - v8 + 16;
                if (v142 >= 17)
                {
                  v143 = (((unint64_t)v142 >> 4) - 2) >> 1;
                  v144 = v8 + 16 * v143;
                  v145 = *(_QWORD *)(v137 + 8);
                  if (*(_QWORD *)(v144 + 8) < v145)
                  {
                    v146 = *(_BYTE *)v137;
                    do
                    {
                      v147 = v137;
                      v137 = v144;
                      *(_BYTE *)v147 = *(_BYTE *)v144;
                      *(_QWORD *)(v147 + 8) = *(_QWORD *)(v144 + 8);
                      if (!v143)
                        break;
                      v143 = (v143 - 1) >> 1;
                      v144 = v8 + 16 * v143;
                    }
                    while (*(_QWORD *)(v144 + 8) < v145);
                    *(_BYTE *)v137 = v146;
                    *(_QWORD *)(v137 + 8) = v145;
                  }
                }
              }
              a2 -= 16;
              v119 = v132-- <= 2;
            }
            while (!v119);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 16 * ((unint64_t)v10 >> 1);
        v13 = *((_QWORD *)a2 - 1);
        if ((unint64_t)v9 < 0x801)
        {
          v17 = *(_QWORD *)(v8 + 8);
          v18 = *(_QWORD *)(v12 + 8);
          if (v17 >= v18)
          {
            if (v13 < v17)
            {
              v24 = *(_BYTE *)v8;
              *(_BYTE *)v8 = *(a2 - 16);
              *(a2 - 16) = v24;
              *(_QWORD *)(v8 + 8) = v13;
              *((_QWORD *)a2 - 1) = v17;
              v25 = *(_QWORD *)(v8 + 8);
              v26 = *(_QWORD *)(v12 + 8);
              if (v25 < v26)
              {
                v27 = *(_BYTE *)v12;
                *(_BYTE *)v12 = *(_BYTE *)v8;
                *(_BYTE *)v8 = v27;
                *(_QWORD *)(v12 + 8) = v25;
                *(_QWORD *)(v8 + 8) = v26;
                --a3;
                if ((a4 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_57;
              }
            }
          }
          else
          {
            v19 = *(_BYTE *)v12;
            if (v13 >= v17)
            {
              *(_BYTE *)v12 = *(_BYTE *)v8;
              *(_BYTE *)v8 = v19;
              *(_QWORD *)(v12 + 8) = v17;
              *(_QWORD *)(v8 + 8) = v18;
              v39 = *((_QWORD *)a2 - 1);
              if (v39 >= v18)
                goto LABEL_32;
              *(_BYTE *)v8 = *(a2 - 16);
              *(a2 - 16) = v19;
              *(_QWORD *)(v8 + 8) = v39;
            }
            else
            {
              *(_BYTE *)v12 = *(a2 - 16);
              *(a2 - 16) = v19;
              *(_QWORD *)(v12 + 8) = v13;
            }
            *((_QWORD *)a2 - 1) = v18;
          }
LABEL_32:
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_33;
LABEL_57:
          v41 = *(_QWORD *)(v8 + 8);
          v40 = *(_BYTE *)v8;
          if (*(_QWORD *)(v8 - 8) < v41)
            goto LABEL_58;
          if (v41 >= *((_QWORD *)a2 - 1))
          {
            v79 = v8 + 16;
            do
            {
              v8 = v79;
              if (v79 >= (unint64_t)a2)
                break;
              v80 = *(_QWORD *)(v79 + 8);
              v79 += 16;
            }
            while (v41 >= v80);
          }
          else
          {
            v77 = v8;
            do
            {
              v8 = v77 + 16;
              v78 = *(_QWORD *)(v77 + 24);
              v77 += 16;
            }
            while (v41 >= v78);
          }
          v81 = a2;
          if (v8 < (unint64_t)a2)
          {
            v82 = a2;
            do
            {
              v81 = v82 - 16;
              v83 = *((_QWORD *)v82 - 1);
              v82 -= 16;
            }
            while (v41 < v83);
          }
          while (v8 < (unint64_t)v81)
          {
            v84 = *(_BYTE *)v8;
            *(_BYTE *)v8 = *v81;
            *v81 = v84;
            v85 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = *((_QWORD *)v81 + 1);
            *((_QWORD *)v81 + 1) = v85;
            do
            {
              v86 = *(_QWORD *)(v8 + 24);
              v8 += 16;
            }
            while (v41 >= v86);
            do
            {
              v87 = *((_QWORD *)v81 - 1);
              v81 -= 16;
            }
            while (v41 < v87);
          }
          if (v8 - 16 != v7)
          {
            *(_BYTE *)v7 = *(_BYTE *)(v8 - 16);
            *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 - 8);
          }
          a4 = 0;
          *(_BYTE *)(v8 - 16) = v40;
          *(_QWORD *)(v8 - 8) = v41;
          continue;
        }
        v14 = *(_QWORD *)(v12 + 8);
        v15 = *(_QWORD *)(v8 + 8);
        if (v14 >= v15)
        {
          if (v13 < v14)
          {
            v20 = *(_BYTE *)v12;
            *(_BYTE *)v12 = *(a2 - 16);
            *(a2 - 16) = v20;
            *(_QWORD *)(v12 + 8) = v13;
            *((_QWORD *)a2 - 1) = v14;
            v21 = *(_QWORD *)(v12 + 8);
            v22 = *(_QWORD *)(v8 + 8);
            if (v21 < v22)
            {
              v23 = *(_BYTE *)v8;
              *(_BYTE *)v8 = *(_BYTE *)v12;
              *(_BYTE *)v12 = v23;
              *(_QWORD *)(v8 + 8) = v21;
              *(_QWORD *)(v12 + 8) = v22;
            }
          }
        }
        else
        {
          v16 = *(_BYTE *)v8;
          if (v13 < v14)
          {
            *(_BYTE *)v8 = *(a2 - 16);
            *(a2 - 16) = v16;
            *(_QWORD *)(v8 + 8) = v13;
            goto LABEL_22;
          }
          *(_BYTE *)v8 = *(_BYTE *)v12;
          *(_BYTE *)v12 = v16;
          *(_QWORD *)(v8 + 8) = v14;
          *(_QWORD *)(v12 + 8) = v15;
          v28 = *((_QWORD *)a2 - 1);
          if (v28 < v15)
          {
            *(_BYTE *)v12 = *(a2 - 16);
            *(a2 - 16) = v16;
            *(_QWORD *)(v12 + 8) = v28;
LABEL_22:
            *((_QWORD *)a2 - 1) = v15;
          }
        }
        v29 = v8 + 16 * v11;
        v30 = v29 - 16;
        v31 = *(_QWORD *)(v29 - 8);
        v32 = *(_QWORD *)(v8 + 24);
        v33 = *((_QWORD *)a2 - 3);
        if (v31 >= v32)
        {
          if (v33 < v31)
          {
            v35 = *(_BYTE *)v30;
            *(_BYTE *)v30 = *(a2 - 32);
            *(a2 - 32) = v35;
            *(_QWORD *)(v30 + 8) = v33;
            *((_QWORD *)a2 - 3) = v31;
            v36 = *(_QWORD *)(v30 + 8);
            v37 = *(_QWORD *)(v8 + 24);
            if (v36 < v37)
            {
              v38 = *(_BYTE *)(v8 + 16);
              *(_BYTE *)(v8 + 16) = *(_BYTE *)v30;
              *(_BYTE *)v30 = v38;
              *(_QWORD *)(v8 + 24) = v36;
              *(_QWORD *)(v30 + 8) = v37;
            }
          }
        }
        else
        {
          v34 = *(_BYTE *)(v8 + 16);
          if (v33 < v31)
          {
            *(_BYTE *)(v8 + 16) = *(a2 - 32);
            *(a2 - 32) = v34;
            *(_QWORD *)(v8 + 24) = v33;
            goto LABEL_36;
          }
          *(_BYTE *)(v8 + 16) = *(_BYTE *)v30;
          *(_BYTE *)v30 = v34;
          *(_QWORD *)(v8 + 24) = v31;
          *(_QWORD *)(v30 + 8) = v32;
          v42 = *((_QWORD *)a2 - 3);
          if (v42 < v32)
          {
            *(_BYTE *)v30 = *(a2 - 32);
            *(a2 - 32) = v34;
            *(_QWORD *)(v30 + 8) = v42;
LABEL_36:
            *((_QWORD *)a2 - 3) = v32;
          }
        }
        v43 = v8 + 16 * v11;
        v44 = v43 + 16;
        v45 = *(_QWORD *)(v43 + 24);
        v46 = *(_QWORD *)(v8 + 40);
        v47 = *((_QWORD *)a2 - 5);
        if (v45 >= v46)
        {
          if (v47 < v45)
          {
            v49 = *(_BYTE *)v44;
            *(_BYTE *)v44 = *(a2 - 48);
            *(a2 - 48) = v49;
            *(_QWORD *)(v44 + 8) = v47;
            *((_QWORD *)a2 - 5) = v45;
            v50 = *(_QWORD *)(v44 + 8);
            v51 = *(_QWORD *)(v8 + 40);
            if (v50 < v51)
            {
              v52 = *(_BYTE *)(v8 + 32);
              *(_BYTE *)(v8 + 32) = *(_BYTE *)v44;
              *(_BYTE *)v44 = v52;
              *(_QWORD *)(v8 + 40) = v50;
              *(_QWORD *)(v44 + 8) = v51;
            }
          }
        }
        else
        {
          v48 = *(_BYTE *)(v8 + 32);
          if (v47 < v45)
          {
            *(_BYTE *)(v8 + 32) = *(a2 - 48);
            *(a2 - 48) = v48;
            *(_QWORD *)(v8 + 40) = v47;
            goto LABEL_45;
          }
          *(_BYTE *)(v8 + 32) = *(_BYTE *)v44;
          *(_BYTE *)v44 = v48;
          *(_QWORD *)(v8 + 40) = v45;
          *(_QWORD *)(v44 + 8) = v46;
          v53 = *((_QWORD *)a2 - 5);
          if (v53 < v46)
          {
            *(_BYTE *)v44 = *(a2 - 48);
            *(a2 - 48) = v48;
            *(_QWORD *)(v44 + 8) = v53;
LABEL_45:
            *((_QWORD *)a2 - 5) = v46;
          }
        }
        v54 = *(_QWORD *)(v12 + 8);
        v55 = *(_QWORD *)(v30 + 8);
        v56 = *(_QWORD *)(v44 + 8);
        if (v54 >= v55)
        {
          v57 = *(_BYTE *)v12;
          if (v56 >= v54)
          {
            v55 = *(_QWORD *)(v12 + 8);
          }
          else
          {
            v58 = *(_BYTE *)v44;
            *(_BYTE *)v12 = *(_BYTE *)v44;
            *(_BYTE *)v44 = v57;
            *(_QWORD *)(v12 + 8) = v56;
            *(_QWORD *)(v44 + 8) = v54;
            if (v56 >= v55)
            {
              v55 = v56;
              v57 = v58;
            }
            else
            {
              v57 = *(_BYTE *)v30;
              *(_BYTE *)v30 = v58;
              *(_BYTE *)v12 = v57;
              *(_QWORD *)(v30 + 8) = v56;
              *(_QWORD *)(v12 + 8) = v55;
            }
          }
        }
        else
        {
          v57 = *(_BYTE *)v30;
          if (v56 >= v54)
          {
            *(_BYTE *)v30 = *(_BYTE *)v12;
            *(_BYTE *)v12 = v57;
            *(_QWORD *)(v30 + 8) = v54;
            *(_QWORD *)(v12 + 8) = v55;
            if (v56 < v55)
            {
              v59 = *(_BYTE *)v44;
              *(_BYTE *)v12 = *(_BYTE *)v44;
              *(_BYTE *)v44 = v57;
              *(_QWORD *)(v12 + 8) = v56;
              *(_QWORD *)(v44 + 8) = v55;
              v55 = v56;
              v57 = v59;
            }
          }
          else
          {
            *(_BYTE *)v30 = *(_BYTE *)v44;
            *(_BYTE *)v44 = v57;
            *(_QWORD *)(v30 + 8) = v56;
            *(_QWORD *)(v44 + 8) = v55;
            v57 = *(_BYTE *)v12;
            v55 = v54;
          }
        }
        v60 = *(_BYTE *)v8;
        *(_BYTE *)v8 = v57;
        *(_BYTE *)v12 = v60;
        v61 = v8 + 16 * v11;
        v62 = *(_QWORD *)(v8 + 8);
        *(_QWORD *)(v8 + 8) = v55;
        *(_QWORD *)(v61 + 8) = v62;
        --a3;
        if ((a4 & 1) == 0)
          goto LABEL_57;
LABEL_33:
        v40 = *(_BYTE *)v8;
        v41 = *(_QWORD *)(v8 + 8);
LABEL_58:
        v63 = 0;
        do
        {
          v64 = *(_QWORD *)(v8 + v63 + 24);
          v63 += 16;
        }
        while (v64 < v41);
        v65 = v8 + v63;
        v66 = a2;
        if (v63 == 16)
        {
          v69 = a2;
          while (v65 < (unint64_t)v69)
          {
            v67 = v69 - 16;
            v70 = *((_QWORD *)v69 - 1);
            v69 -= 16;
            if (v70 < v41)
              goto LABEL_66;
          }
          v67 = v69;
          v8 = v65;
        }
        else
        {
          do
          {
            v67 = v66 - 16;
            v68 = *((_QWORD *)v66 - 1);
            v66 -= 16;
          }
          while (v68 >= v41);
LABEL_66:
          v8 = v65;
          if (v65 < (unint64_t)v67)
          {
            v71 = (unint64_t)v67;
            do
            {
              v72 = *(_BYTE *)v8;
              *(_BYTE *)v8 = *(_BYTE *)v71;
              *(_BYTE *)v71 = v72;
              v73 = *(_QWORD *)(v8 + 8);
              *(_QWORD *)(v8 + 8) = *(_QWORD *)(v71 + 8);
              *(_QWORD *)(v71 + 8) = v73;
              do
              {
                v74 = *(_QWORD *)(v8 + 24);
                v8 += 16;
              }
              while (v74 < v41);
              do
              {
                v75 = *(_QWORD *)(v71 - 8);
                v71 -= 16;
              }
              while (v75 >= v41);
            }
            while (v8 < v71);
          }
        }
        if (v8 - 16 != v7)
        {
          *(_BYTE *)v7 = *(_BYTE *)(v8 - 16);
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 - 8);
        }
        *(_BYTE *)(v8 - 16) = v40;
        *(_QWORD *)(v8 - 8) = v41;
        if (v65 < (unint64_t)v67)
        {
LABEL_77:
          result = (char *)sub_23585BEA4(v7, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v76 = sub_23585CA70(v7, (char *)(v8 - 16));
        result = (char *)sub_23585CA70(v8, a2);
        if (!(_DWORD)result)
        {
          if (v76)
            continue;
          goto LABEL_77;
        }
        a2 = (char *)(v8 - 16);
        if (!v76)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_23585CA70(uint64_t a1, char *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  char v35;
  char v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  int v40;
  char *v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v4 = (uint64_t)&a2[-a1] >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *((_QWORD *)a2 - 1);
      v7 = *(_QWORD *)(a1 + 8);
      if (v6 < v7)
      {
        v8 = *(_BYTE *)a1;
        *(_BYTE *)a1 = *(a2 - 16);
        *(a2 - 16) = v8;
        *(_QWORD *)(a1 + 8) = v6;
        *((_QWORD *)a2 - 1) = v7;
      }
      return result;
    case 3:
      v9 = *(_QWORD *)(a1 + 24);
      v10 = *(_QWORD *)(a1 + 8);
      v11 = *((_QWORD *)a2 - 1);
      if (v9 >= v10)
      {
        if (v11 < v9)
        {
          v30 = *(_BYTE *)(a1 + 16);
          *(_BYTE *)(a1 + 16) = *(a2 - 16);
          *(a2 - 16) = v30;
          *(_QWORD *)(a1 + 24) = v11;
          *((_QWORD *)a2 - 1) = v9;
          v31 = *(_QWORD *)(a1 + 24);
          v32 = *(_QWORD *)(a1 + 8);
          if (v31 < v32)
          {
            v33 = *(_BYTE *)a1;
            *(_BYTE *)a1 = *(_BYTE *)(a1 + 16);
            *(_BYTE *)(a1 + 16) = v33;
            *(_QWORD *)(a1 + 8) = v31;
            *(_QWORD *)(a1 + 24) = v32;
          }
        }
      }
      else
      {
        v12 = *(_BYTE *)a1;
        if (v11 >= v9)
        {
          *(_BYTE *)a1 = *(_BYTE *)(a1 + 16);
          *(_BYTE *)(a1 + 16) = v12;
          *(_QWORD *)(a1 + 8) = v9;
          *(_QWORD *)(a1 + 24) = v10;
          v37 = *((_QWORD *)a2 - 1);
          if (v37 < v10)
          {
            *(_BYTE *)(a1 + 16) = *(a2 - 16);
            *(a2 - 16) = v12;
            *(_QWORD *)(a1 + 24) = v37;
            *((_QWORD *)a2 - 1) = v10;
          }
        }
        else
        {
          *(_BYTE *)a1 = *(a2 - 16);
          *(a2 - 16) = v12;
          *(_QWORD *)(a1 + 8) = v11;
          *((_QWORD *)a2 - 1) = v10;
        }
      }
      return result;
    case 4:
      sub_23585CE18((char *)a1, (char *)(a1 + 16), (char *)(a1 + 32), a2 - 16);
      return 1;
    case 5:
      sub_23585CE18((char *)a1, (char *)(a1 + 16), (char *)(a1 + 32), (char *)(a1 + 48));
      v19 = *((_QWORD *)a2 - 1);
      v20 = *(_QWORD *)(a1 + 56);
      if (v19 >= v20)
        return 1;
      v21 = *(_BYTE *)(a1 + 48);
      *(_BYTE *)(a1 + 48) = *(a2 - 16);
      *(a2 - 16) = v21;
      *(_QWORD *)(a1 + 56) = v19;
      *((_QWORD *)a2 - 1) = v20;
      v22 = *(_QWORD *)(a1 + 56);
      v23 = *(_QWORD *)(a1 + 40);
      if (v22 >= v23)
        return 1;
      v24 = *(_BYTE *)(a1 + 32);
      v25 = *(_BYTE *)(a1 + 48);
      *(_BYTE *)(a1 + 32) = v25;
      *(_BYTE *)(a1 + 48) = v24;
      *(_QWORD *)(a1 + 40) = v22;
      *(_QWORD *)(a1 + 56) = v23;
      v26 = *(_QWORD *)(a1 + 24);
      if (v22 >= v26)
        return 1;
      v27 = *(_BYTE *)(a1 + 16);
      *(_BYTE *)(a1 + 16) = v25;
      *(_BYTE *)(a1 + 32) = v27;
      *(_QWORD *)(a1 + 24) = v22;
      *(_QWORD *)(a1 + 40) = v26;
      v28 = *(_QWORD *)(a1 + 8);
      if (v22 >= v28)
        return 1;
      v29 = *(_BYTE *)a1;
      *(_BYTE *)a1 = v25;
      *(_BYTE *)(a1 + 16) = v29;
      *(_QWORD *)(a1 + 8) = v22;
      *(_QWORD *)(a1 + 24) = v28;
      return 1;
    default:
      v13 = *(_QWORD *)(a1 + 8);
      v14 = (unint64_t *)(a1 + 24);
      v15 = *(_QWORD *)(a1 + 24);
      v16 = *(_QWORD *)(a1 + 40);
      if (v15 < v13)
      {
        v17 = *(_BYTE *)a1;
        if (v16 >= v15)
        {
          *(_BYTE *)a1 = *(_BYTE *)(a1 + 16);
          *(_BYTE *)(a1 + 16) = v17;
          *(_QWORD *)(a1 + 8) = v15;
          *(_QWORD *)(a1 + 24) = v13;
          if (v16 >= v13)
            goto LABEL_30;
          *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 32);
          *(_BYTE *)(a1 + 32) = v17;
          v18 = (unint64_t *)(a1 + 24);
        }
        else
        {
          *(_BYTE *)a1 = *(_BYTE *)(a1 + 32);
          *(_BYTE *)(a1 + 32) = v17;
          v18 = (unint64_t *)(a1 + 8);
        }
        v14 = (unint64_t *)(a1 + 40);
        goto LABEL_29;
      }
      if (v16 < v15)
      {
        v34 = *(_BYTE *)(a1 + 16);
        v35 = *(_BYTE *)(a1 + 32);
        *(_BYTE *)(a1 + 16) = v35;
        *(_BYTE *)(a1 + 32) = v34;
        *(_QWORD *)(a1 + 24) = v16;
        *(_QWORD *)(a1 + 40) = v15;
        if (v16 < v13)
        {
          v36 = *(_BYTE *)a1;
          *(_BYTE *)a1 = v35;
          *(_BYTE *)(a1 + 16) = v36;
          v18 = (unint64_t *)(a1 + 8);
LABEL_29:
          *v18 = v16;
          *v14 = v13;
        }
      }
LABEL_30:
      v38 = (char *)(a1 + 48);
      if ((char *)(a1 + 48) == a2)
        return 1;
      v39 = 0;
      v40 = 0;
      v41 = (char *)(a1 + 32);
      while (1)
      {
        v42 = *((_QWORD *)v38 + 1);
        if (v42 < *((_QWORD *)v41 + 1))
          break;
LABEL_39:
        v41 = v38;
        v39 += 16;
        v38 += 16;
        if (v38 == a2)
          return 1;
      }
      v43 = *v38;
      v44 = v39;
      do
      {
        v45 = a1 + v44;
        *(_BYTE *)(v45 + 48) = *(_BYTE *)(a1 + v44 + 32);
        *(_QWORD *)(v45 + 56) = *(_QWORD *)(a1 + v44 + 40);
        if (v44 == -32)
        {
          *(_BYTE *)a1 = v43;
          *(_QWORD *)(a1 + 8) = v42;
          if (++v40 != 8)
            goto LABEL_39;
          return v38 + 16 == a2;
        }
        v44 -= 16;
      }
      while (v42 < *(_QWORD *)(v45 + 24));
      v46 = a1 + v44;
      *(_BYTE *)(v46 + 48) = v43;
      *(_QWORD *)(v46 + 56) = v42;
      if (++v40 != 8)
        goto LABEL_39;
      return v38 + 16 == a2;
  }
}

char *sub_23585CE18(char *result, char *a2, char *a3, char *a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  char v19;

  v4 = *((_QWORD *)a2 + 1);
  v5 = *((_QWORD *)result + 1);
  v6 = *((_QWORD *)a3 + 1);
  if (v4 < v5)
  {
    v7 = *result;
    if (v6 >= v4)
    {
      *result = *a2;
      *a2 = v7;
      *((_QWORD *)result + 1) = v4;
      *((_QWORD *)a2 + 1) = v5;
      v4 = *((_QWORD *)a3 + 1);
      if (v4 >= v5)
        goto LABEL_11;
      *a2 = *a3;
      *a3 = v7;
      *((_QWORD *)a2 + 1) = v4;
    }
    else
    {
      *result = *a3;
      *a3 = v7;
      *((_QWORD *)result + 1) = v6;
    }
    *((_QWORD *)a3 + 1) = v5;
    v4 = v5;
LABEL_11:
    v12 = *((_QWORD *)a4 + 1);
    if (v12 >= v4)
      return result;
    goto LABEL_14;
  }
  if (v6 >= v4)
  {
    v4 = *((_QWORD *)a3 + 1);
    v12 = *((_QWORD *)a4 + 1);
    if (v12 >= v6)
      return result;
    goto LABEL_14;
  }
  v8 = *a2;
  *a2 = *a3;
  *a3 = v8;
  *((_QWORD *)a2 + 1) = v6;
  *((_QWORD *)a3 + 1) = v4;
  v9 = *((_QWORD *)a2 + 1);
  v10 = *((_QWORD *)result + 1);
  if (v9 >= v10)
    goto LABEL_11;
  v11 = *result;
  *result = *a2;
  *a2 = v11;
  *((_QWORD *)result + 1) = v9;
  *((_QWORD *)a2 + 1) = v10;
  v4 = *((_QWORD *)a3 + 1);
  v12 = *((_QWORD *)a4 + 1);
  if (v12 >= v4)
    return result;
LABEL_14:
  v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  *((_QWORD *)a3 + 1) = v12;
  *((_QWORD *)a4 + 1) = v4;
  v14 = *((_QWORD *)a3 + 1);
  v15 = *((_QWORD *)a2 + 1);
  if (v14 < v15)
  {
    v16 = *a2;
    *a2 = *a3;
    *a3 = v16;
    *((_QWORD *)a2 + 1) = v14;
    *((_QWORD *)a3 + 1) = v15;
    v17 = *((_QWORD *)a2 + 1);
    v18 = *((_QWORD *)result + 1);
    if (v17 < v18)
    {
      v19 = *result;
      *result = *a2;
      *a2 = v19;
      *((_QWORD *)result + 1) = v17;
      *((_QWORD *)a2 + 1) = v18;
    }
  }
  return result;
}

uint64_t sub_23585CF6C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _OWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  double v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  double *v12;
  double v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  double *v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  double *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  double *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = operator new();
  v3 = operator new(0x60uLL);
  *(_QWORD *)(v2 + 8) = v3;
  v3[7] = 0;
  v3[8] = v3 + 7;
  v3[9] = v3 + 7;
  v3[10] = v3 + 10;
  v3[11] = v3 + 10;
  *(_QWORD *)(v2 + 24) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 24) = v2;
  v36 = a1 + 56;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  v4 = operator new(0x28uLL);
  v5 = 0;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = (char *)v4 + 40;
  v35 = a1;
  *(_QWORD *)(a1 + 48) = (char *)v4 + 40;
  *v4 = xmmword_2358911B0;
  v4[1] = xmmword_2358911C0;
  *((_QWORD *)v4 + 4) = 0x4076CCCCCCCCCCCDLL;
  do
  {
    v37 = v5;
    v6 = *((_DWORD *)&unk_235891358 + v5 + 28);
    if (v6)
    {
      v7 = 0;
      v8 = 360.0 / (double)v6;
      v9 = v36 + 24 * v5;
      v10 = (_QWORD *)(v9 + 16);
      v11 = (_QWORD *)(v9 + 8);
      v12 = *(double **)(v9 + 8);
      v38 = *((_DWORD *)&unk_235891358 + v5 + 28);
      do
      {
        while (1)
        {
          v13 = v8 * (double)v7;
          if ((unint64_t)v12 >= *v10)
            break;
          *v12++ = v13;
          *v11 = v12;
          if (++v7 == v6)
            goto LABEL_2;
        }
        v14 = *(double **)v9;
        v15 = (uint64_t)v12 - *(_QWORD *)v9;
        v16 = v15 >> 3;
        v17 = (v15 >> 3) + 1;
        if (v17 >> 61)
          sub_235847D5C();
        v18 = *v10 - (_QWORD)v14;
        if (v18 >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          if (v19 >> 61)
            sub_2358482F0();
          v20 = operator new(8 * v19);
          v21 = (double *)&v20[8 * v16];
          *v21 = v13;
          v22 = (uint64_t)(v21 + 1);
          v23 = (char *)v12 - (char *)v14;
          if (v12 == v14)
            goto LABEL_21;
        }
        else
        {
          v20 = 0;
          v21 = (double *)(8 * v16);
          *(double *)(8 * v16) = v13;
          v22 = 8 * v16 + 8;
          v23 = (char *)v12 - (char *)v14;
          if (v12 == v14)
            goto LABEL_21;
        }
        v24 = v23 - 8;
        if (v24 >= 0x168)
        {
          v27 = ((char *)(v12 - 1) - (char *)v14) & 0xFFFFFFFFFFFFFFF8;
          if (&v20[v15 - 8 - v27] > &v20[v15 - 8])
          {
            v25 = v12;
          }
          else if ((double *)((char *)v12 - v27 - 8) > v12 - 1)
          {
            v25 = v12;
          }
          else if ((unint64_t)((char *)v12 - v20 - v15) >= 0x20)
          {
            v28 = (v24 >> 3) + 1;
            v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
            v25 = &v12[v29 / 0xFFFFFFFFFFFFFFF8];
            v21 = (double *)((char *)v21 - v29);
            v30 = &v20[8 * v16 - 16];
            v31 = v12 - 2;
            v32 = v28 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v33 = *(_OWORD *)v31;
              *(v30 - 1) = *((_OWORD *)v31 - 1);
              *v30 = v33;
              v30 -= 2;
              v31 -= 4;
              v32 -= 4;
            }
            while (v32);
            if (v28 == (v28 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_21;
          }
          else
          {
            v25 = v12;
          }
        }
        else
        {
          v25 = v12;
        }
        do
        {
          v26 = *((_QWORD *)v25-- - 1);
          *((_QWORD *)v21-- - 1) = v26;
        }
        while (v25 != v14);
LABEL_21:
        *(_QWORD *)v9 = v21;
        *v11 = v22;
        *v10 = &v20[8 * v19];
        if (v14)
          operator delete(v14);
        v6 = v38;
        *v11 = v22;
        ++v7;
        v12 = (double *)v22;
      }
      while (v7 != v38);
    }
LABEL_2:
    v5 = v37 + 1;
  }
  while (v37 != 4);
  return v35;
}

void sub_23585D284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  void *v14;

  sub_23585D300(a12);
  v14 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v12 + 40) = v14;
    operator delete(v14);
  }
  sub_23585D370(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_23585D300(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 + 80) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(_QWORD *)(a1 + 56) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(_QWORD *)(a1 + 32) = v5;
    operator delete(v5);
  }
  v6 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_23585D370(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(v2 + 8);
  v4 = v3[11];
  if (v4)
    v5 = (_QWORD *)(v4 - 80);
  else
    v5 = 0;
  if (v5 != v3)
  {
    do
    {
      v6 = v5[11];
      if (v6)
        v3 = (_QWORD *)(v6 - 80);
      else
        v3 = 0;
      sub_2358688CC((uint64_t)v5);
      operator delete(v5);
      v5 = v3;
    }
    while (v3 != *(_QWORD **)(v2 + 8));
  }
  operator delete(v3);
  MEMORY[0x23B7D94C4](v2, 0x1020C402FC1992ELL);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_23585D42C(_BYTE *a1)
{
  uint64_t *v2;
  uint64_t v3;
  const std::ios_base *v4;
  const std::locale::facet *v5;
  std::ios_base::fmtflags v6;
  uint64_t v7;
  const std::ios_base *v8;
  const std::locale::facet *v9;
  uint64_t v10;
  const std::ios_base *v11;
  const std::locale::facet *v12;
  size_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD v21[2];
  _QWORD v22[3];
  void *v23;
  uint64_t v24;
  void *__src;
  unint64_t v26;
  void *__p;
  char v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  sub_23584CC60((uint64_t)v21);
  v2 = sub_23584D1D8(v22, (uint64_t)"#", 1);
  v3 = *v2;
  *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 8) &= ~0x4000u;
  *(uint64_t *)((char *)v2 + *(_QWORD *)(v3 - 24) + 24) = 2;
  v4 = (const std::ios_base *)((char *)v2 + *(_QWORD *)(v3 - 24));
  if (v4[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v4);
    v5 = std::locale::use_facet(&v32, MEMORY[0x24BEDB350]);
    v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v32);
    v4[1].__fmtflags_ = v6;
    v3 = *v2;
  }
  v4[1].__fmtflags_ = 48;
  *(_DWORD *)((char *)v2 + *(_QWORD *)(v3 - 24) + 8) = *(_DWORD *)((_BYTE *)v2 + *(_QWORD *)(v3 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  v7 = v22[0];
  *(_DWORD *)((char *)&v22[1] + *(_QWORD *)(v22[0] - 24)) &= ~0x4000u;
  *(_QWORD *)((char *)&v22[3] + *(_QWORD *)(v7 - 24)) = 2;
  v8 = (const std::ios_base *)((char *)v22 + *(_QWORD *)(v7 - 24));
  if (v8[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v8);
    v9 = std::locale::use_facet(&v32, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 32);
    std::locale::~locale(&v32);
    v7 = v22[0];
  }
  v8[1].__fmtflags_ = 48;
  *(_DWORD *)((char *)&v22[1] + *(_QWORD *)(v7 - 24)) = *(_DWORD *)((_BYTE *)&v22[1] + *(_QWORD *)(v7 - 24)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  v10 = v22[0];
  *(_DWORD *)((char *)&v22[1] + *(_QWORD *)(v22[0] - 24)) &= ~0x4000u;
  *(_QWORD *)((char *)&v22[3] + *(_QWORD *)(v10 - 24)) = 2;
  v11 = (const std::ios_base *)((char *)v22 + *(_QWORD *)(v10 - 24));
  if (v11[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v11);
    v12 = std::locale::use_facet(&v32, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 32);
    std::locale::~locale(&v32);
    v10 = v22[0];
  }
  v11[1].__fmtflags_ = 48;
  *(_DWORD *)((char *)&v22[1] + *(_QWORD *)(v10 - 24)) = *(_DWORD *)((_BYTE *)&v22[1] + *(_QWORD *)(v10 - 24)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  if ((v30 & 0x10) != 0)
  {
    v14 = v29;
    if (v29 < v26)
    {
      v29 = v26;
      v14 = v26;
    }
    v15 = __src;
    v13 = v14 - (_QWORD)__src;
    if (v14 - (unint64_t)__src >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_24;
  }
  else
  {
    if ((v30 & 8) == 0)
    {
      v13 = 0;
      a1[23] = 0;
      goto LABEL_20;
    }
    v15 = v23;
    v13 = v24 - (_QWORD)v23;
    if ((unint64_t)(v24 - (_QWORD)v23) >= 0x7FFFFFFFFFFFFFF8)
LABEL_24:
      sub_23584B34C();
  }
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    v18 = operator new(v16 + 1);
    *((_QWORD *)a1 + 1) = v13;
    *((_QWORD *)a1 + 2) = v17 | 0x8000000000000000;
    *(_QWORD *)a1 = v18;
    a1 = v18;
    goto LABEL_19;
  }
  a1[23] = v13;
  if (v13)
LABEL_19:
    memmove(a1, v15, v13);
LABEL_20:
  a1[v13] = 0;
  v21[0] = *MEMORY[0x24BEDB7F0];
  v19 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v22[0] = v19;
  v22[1] = MEMORY[0x24BEDB848] + 16;
  if (v28 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x23B7D9458](&v31);
}

void sub_23585D7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::locale::~locale((std::locale *)(v9 - 72));
  sub_23584CD98((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23585D7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23584CD98((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23585D7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23584CD98((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23585D800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23584CD98((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23585D814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23584CD98((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_23585D828(uint64_t a1, uint64_t a2)
{
  _BOOL4 v4;
  __int128 *p_dst;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int8x16_t v9;
  uint64_t v10;
  const void *v11[3];
  std::runtime_error v12;
  __int128 __dst;
  uint64_t v14;
  char v15;
  char *v16;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_23584B488(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
    v4 = *(char *)(a2 + 23) < 0;
  }
  else
  {
    v4 = 0;
    __dst = *(_OWORD *)a2;
    v14 = *(_QWORD *)(a2 + 16);
  }
  v15 = *(_BYTE *)(a2 + 24);
  p_dst = &__dst;
  if (v14 < 0)
    p_dst = (__int128 *)__dst;
  if (v4)
    v6 = *(_QWORD *)a2;
  else
    v6 = a2;
  v16 = (char *)p_dst + *(_QWORD *)(a2 + 32) - v6;
  result = sub_235869118(a1, (uint64_t)&__dst);
  v8 = result;
  if (!result)
  {
    sub_23584AAE8(v11, "No such node");
    sub_235869D08(&v12, v11, a2);
    v9.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/C"
                         "ontents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/loca"
                         "l/include/boost/property_tree/detail/ptree_implementation.hpp";
    v9.i64[1] = (uint64_t)"basic_ptree<K, D, C> &boost::property_tree::basic_ptree<std::string, std::string>::get_child(co"
                         "nst path_type &) [Key = std::string, Data = std::string, KeyCompare = std::less<std::string>]";
    v10 = 576;
    sub_235869480(&v12, &v9);
  }
  if (SHIBYTE(v14) < 0)
  {
    operator delete((void *)__dst);
    return v8;
  }
  return result;
}

void sub_23585D950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::runtime_error a19, uint64_t a20)
{
  uint64_t v20;

  a19.__vftable = (std::runtime_error_vtbl *)&off_2506DFED0;
  if (a20)
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 8))(a20);
  std::runtime_error::~runtime_error(&a19);
  if (a18 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v20 - 41) & 0x80000000) == 0)
LABEL_5:
      _Unwind_Resume(a1);
  }
  else if ((*(char *)(v20 - 41) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v20 - 64));
  _Unwind_Resume(a1);
}

_QWORD *sub_23585D9D0(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  if (*((char *)a2 + 23) < 0)
  {
    sub_23584B488(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = operator new();
  v6 = *((_QWORD *)a2 + 3);
  *(_QWORD *)(v5 + 8) = operator new(0x60uLL);
  *(_QWORD *)(v5 + 24) = 0;
  sub_23586BE1C(v5, v6);
  __dst[3] = v5;
  return __dst;
}

void sub_23585DA64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  operator delete(*(void **)(v2 + 8));
  MEMORY[0x23B7D94C4](v2, 0x1020C402FC1992ELL);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void sub_23585DAB0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  const void **v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  std::string::size_type v20;
  std::string *p_dst;
  unint64_t v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  std::string *v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  uint64_t v35;
  unint64_t v36;
  double *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  _QWORD *v46;
  __double2 v47;
  __double2 v48;
  size_t size;
  std::string::size_type v50;
  std::string *v51;
  std::string::size_type v52;
  size_t v53;
  unint64_t v54;
  std::string *p_src;
  BOOL v56;
  uint64_t v57;
  char *v58;
  std::string::size_type v59;
  unint64_t v60;
  uint64_t v61;
  _WORD *v62;
  std::string::size_type v63;
  _BYTE *v64;
  std::string::size_type v65;
  std::string *v66;
  unint64_t v67;
  size_t v68;
  size_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  std::string::size_type v74;
  _BYTE *v75;
  std::string::size_type v76;
  std::string *v77;
  size_t v78;
  std::string::size_type v79;
  size_t v80;
  unint64_t v81;
  std::string *v82;
  size_t v83;
  unint64_t v84;
  std::string *v85;
  size_t v86;
  _BYTE *v87;
  unint64_t v88;
  uint64_t v89;
  void *v90;
  std::string::size_type v91;
  size_t v92;
  std::string::size_type v93;
  std::string *v94;
  std::string::size_type v95;
  size_t v96;
  unint64_t v97;
  std::string *v98;
  unint64_t v99;
  uint64_t v100;
  void *v101;
  std::string::size_type v102;
  std::string::size_type v103;
  _BYTE *v104;
  char *v105;
  size_t v106;
  std::string *v107;
  size_t v108;
  std::string::size_type v109;
  size_t v110;
  unint64_t v111;
  std::string *v112;
  size_t v113;
  unint64_t v114;
  std::string *v115;
  size_t v116;
  _BYTE *v117;
  unint64_t v118;
  uint64_t v119;
  void *v120;
  std::string::size_type v121;
  std::string::size_type v122;
  std::string *v123;
  unint64_t v124;
  size_t v125;
  size_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  std::string::size_type v131;
  _BYTE *v132;
  std::string::size_type v133;
  std::string *v134;
  size_t v135;
  std::string::size_type v136;
  size_t v137;
  unint64_t v138;
  std::string *v139;
  size_t v140;
  unint64_t v141;
  std::string *v142;
  size_t v143;
  _BYTE *v144;
  unint64_t v145;
  uint64_t v146;
  void *v147;
  std::string::size_type v148;
  size_t v149;
  std::string::size_type v150;
  std::string *v151;
  std::string::size_type v152;
  size_t v153;
  unint64_t v154;
  std::string *v155;
  unint64_t v156;
  uint64_t v157;
  void *v158;
  std::string::size_type v159;
  std::string::size_type v160;
  _BYTE *v161;
  char *v162;
  size_t v163;
  const char *v164;
  std::string::size_type v165;
  std::string *v166;
  unint64_t v167;
  size_t v168;
  size_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  std::string::size_type v174;
  _BYTE *v175;
  std::string::size_type v176;
  size_t locale;
  std::locale::__imp *v178;
  void *v179;
  unint64_t v180;
  size_t v181;
  unint64_t v182;
  char *v183;
  unint64_t v184;
  uint64_t v185;
  std::locale::__imp *v186;
  std::locale::__imp *v187;
  char *v188;
  char *v189;
  char *v190;
  size_t v191;
  std::string *v192;
  size_t v193;
  unint64_t v194;
  size_t v195;
  unint64_t v196;
  void *v197;
  size_t v198;
  unint64_t v199;
  char *v200;
  size_t v201;
  char *v202;
  unint64_t v203;
  uint64_t v204;
  std::locale::__imp *v205;
  std::locale::__imp *v206;
  uint64_t v207;
  _BYTE *v208;
  unint64_t v209;
  size_t v210;
  size_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _BYTE *v215;
  _BYTE *v216;
  _BYTE *v217;
  uint64_t v218;
  char v219;
  std::string *v220;
  size_t v221;
  unint64_t v222;
  size_t v223;
  unint64_t v224;
  void **v225;
  size_t v226;
  unint64_t v227;
  void **v228;
  size_t v229;
  char *v230;
  unint64_t v231;
  uint64_t v232;
  char *v233;
  char *v234;
  char *v235;
  const char *v236;
  _BOOL4 v237;
  void **v238;
  BOOL v239;
  _BYTE *v240;
  uint64_t v241;
  uint64_t v242;
  _QWORD *v243;
  _QWORD *v244;
  const void **v245;
  _QWORD *v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  size_t v250;
  std::string::size_type v251;
  std::string *v252;
  std::string::size_type v253;
  size_t v254;
  unint64_t v255;
  std::string *v256;
  BOOL v257;
  uint64_t v258;
  char *v259;
  unint64_t v260;
  uint64_t v261;
  char *v262;
  std::string::size_type v263;
  _BYTE *v264;
  size_t v265;
  size_t v266;
  std::string::size_type v267;
  std::string *v268;
  std::string::size_type v269;
  size_t v270;
  unint64_t v271;
  std::string *v272;
  size_t v273;
  unint64_t v274;
  uint64_t v275;
  void *v276;
  std::string::size_type v277;
  _BYTE *v278;
  size_t v279;
  std::locale::__imp *v280;
  void *v281;
  unint64_t v282;
  size_t v283;
  unint64_t v284;
  char *v285;
  unint64_t v286;
  uint64_t v287;
  std::locale::__imp *v288;
  std::locale::__imp *v289;
  char *v290;
  size_t v291;
  std::string *v292;
  size_t v293;
  unint64_t v294;
  size_t v295;
  unint64_t v296;
  void *v297;
  size_t v298;
  unint64_t v299;
  char *v300;
  size_t v301;
  char *v302;
  unint64_t v303;
  uint64_t v304;
  std::locale::__imp *v305;
  std::locale::__imp *v306;
  size_t v307;
  char *v308;
  void **v309;
  unint64_t v310;
  size_t v311;
  unint64_t v312;
  void **v313;
  char *v314;
  unint64_t v315;
  uint64_t v316;
  void *v317;
  void *v318;
  char *v319;
  uint64_t v320;
  uint64_t v321;
  __int128 v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  _QWORD *v326;
  uint64_t v327;
  _QWORD *v328;
  uint64_t v329;
  uint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  uint64_t v335;
  _QWORD *v336;
  uint64_t v337;
  _QWORD *v338;
  uint64_t v339;
  uint64_t v342;
  uint64_t v343;
  uint64_t v345;
  uint64_t v346;
  _QWORD *v347;
  _QWORD *v348;
  uint64_t v349;
  std::string v350;
  uint64_t v351;
  __int128 v352;
  uint64_t v353;
  uint64_t v354;
  void *__p[4];
  void **v356;
  const void *v357;
  uint64_t v358;
  const void *v359;
  unint64_t v360;
  void *v361;
  char v362;
  unint64_t v363;
  int v364;
  uint64_t v365;
  _BYTE v366[32];
  char *v367;
  std::string v368;
  std::string v369;
  std::string v370;
  std::string v371;
  std::string v372;
  std::string __src;
  std::string v374;
  std::string v375;
  std::string v376;
  std::string v377;
  std::string v378;
  std::string v379;
  std::string v380;
  std::string v381;
  std::locale v382[2];
  unint64_t v383;
  std::locale v384[2];
  int64_t v385;
  __int128 v386;
  void *v387;
  std::string __dst;
  uint64_t v389;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v8 = operator new();
  v9 = operator new(0x60uLL);
  *(_QWORD *)(v8 + 8) = v9;
  v9[7] = 0;
  v9[8] = v9 + 7;
  v9[9] = v9 + 7;
  v9[10] = v9 + 10;
  v9[11] = v9 + 10;
  *(_QWORD *)(v8 + 24) = 0;
  a1[3] = v8;
  *(_WORD *)((char *)&__p[2] + 7) = 11790;
  strcpy((char *)__p, "g.<xmlattr>.id");
  v356 = __p;
  MEMORY[0x23B7D93F8](&v350);
  std::locale::locale((std::locale *)&v352, (const std::locale *)&v350);
  v342 = (uint64_t)a1;
  sub_235868BC8((uint64_t *)&__dst, (uint64_t)a1, (uint64_t)__p);
  v10 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    std::locale::locale((std::locale *)v366, (const std::locale *)&v352);
    sub_23586D480(v10, (const std::locale *)v366);
  }
  else
  {
    memset(v366, 0, 24);
    v11 = operator new();
    v12 = operator new(0x60uLL);
    *(_QWORD *)(v11 + 8) = v12;
    v12[7] = 0;
    v12[8] = v12 + 7;
    v12[9] = v12 + 7;
    v12[10] = v12 + 10;
    v12[11] = v12 + 10;
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)&v366[24] = v11;
    v13 = sub_235868DE8((uint64_t)a1, (uint64_t)__p, (__int128 *)v366);
    v14 = *(_QWORD **)(v11 + 8);
    v15 = v14[11];
    if (v15)
      v16 = (_QWORD *)(v15 - 80);
    else
      v16 = 0;
    if (v16 != v14)
    {
      do
      {
        v17 = v16[11];
        if (v17)
          v14 = (_QWORD *)(v17 - 80);
        else
          v14 = 0;
        sub_2358688CC((uint64_t)v16);
        operator delete(v16);
        v16 = v14;
      }
      while (v14 != *(_QWORD **)(v11 + 8));
    }
    operator delete(v14);
    MEMORY[0x23B7D94C4](v11, 0x1020C402FC1992ELL);
    std::locale::locale((std::locale *)v366, (const std::locale *)&v352);
    sub_23586D480((uint64_t)v13, (const std::locale *)v366);
  }
  std::locale::~locale((std::locale *)v366);
  std::locale::~locale((std::locale *)&v352);
  std::locale::~locale((std::locale *)&v350);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if (!a6)
      goto LABEL_34;
LABEL_16:
    sub_23584CC60((uint64_t)__p);
    sub_23584D1D8(&__p[2], (uint64_t)"translate(", 10);
    v18 = (_QWORD *)std::ostream::operator<<();
    sub_23584D1D8(v18, (uint64_t)" ", 1);
    v19 = (_QWORD *)std::ostream::operator<<();
    sub_23584D1D8(v19, (uint64_t)")", 1);
    *(_WORD *)&v366[23] = 11797;
    strcpy(v366, "g.<xmlattr>.transform");
    v367 = v366;
    if ((v364 & 0x10) != 0)
    {
      v22 = v363;
      if (v363 < v360)
      {
        v363 = v360;
        v22 = v360;
      }
      v23 = v359;
      v20 = v22 - (_QWORD)v359;
      if (v22 - (unint64_t)v359 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_719;
    }
    else
    {
      if ((v364 & 8) == 0)
      {
        v20 = 0;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
        p_dst = &__dst;
        goto LABEL_29;
      }
      v23 = v357;
      v20 = v358 - (_QWORD)v357;
      if ((unint64_t)(v358 - (_QWORD)v357) > 0x7FFFFFFFFFFFFFF7)
LABEL_719:
        sub_23584B34C();
    }
    if (v20 >= 0x17)
    {
      v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v24 = v20 | 7;
      v25 = v24 + 1;
      p_dst = (std::string *)operator new(v24 + 1);
      __dst.__r_.__value_.__l.__size_ = v20;
      __dst.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v20;
      p_dst = &__dst;
      if (!v20)
      {
LABEL_29:
        p_dst->__r_.__value_.__s.__data_[v20] = 0;
        sub_235868A68((uint64_t)a1, (uint64_t)v366, (__int128 *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          if ((v366[23] & 0x80000000) == 0)
            goto LABEL_31;
        }
        else if ((v366[23] & 0x80000000) == 0)
        {
LABEL_31:
          __p[0] = *(void **)MEMORY[0x24BEDB7F0];
          v26 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
          *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
          __p[2] = v26;
          __p[3] = (void *)(MEMORY[0x24BEDB848] + 16);
          if (v362 < 0)
            operator delete(v361);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x23B7D9458](&v365);
          goto LABEL_34;
        }
        operator delete(*(void **)v366);
        goto LABEL_31;
      }
    }
    memmove(p_dst, v23, v20);
    goto LABEL_29;
  }
  operator delete(__p[0]);
  if (a6)
    goto LABEL_16;
LABEL_34:
  v27 = 0;
  do
  {
    v28 = *((_DWORD *)&unk_235891358 + v27 + 33);
    v352 = 0uLL;
    v353 = 0;
    v29 = operator new();
    v30 = operator new(0x60uLL);
    *(_QWORD *)(v29 + 8) = v30;
    v30[7] = 0;
    v30[8] = v30 + 7;
    v30[9] = v30 + 7;
    v30[10] = v30 + 10;
    v30[11] = v30 + 10;
    *(_QWORD *)(v29 + 24) = 0;
    *(_WORD *)((char *)&__p[2] + 7) = 11790;
    v354 = v29;
    strcpy((char *)__p, "<xmlattr>.name");
    v356 = __p;
    std::to_string(&__dst, v27 + 1);
    v31 = std::string::insert(&__dst, 0, "ring-", 5uLL);
    *(std::string *)v366 = *v31;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    sub_235868A68((uint64_t)&v352, (uint64_t)__p, (__int128 *)v366);
    if ((v366[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v366);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_709:
        operator delete(__dst.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
          goto LABEL_39;
        goto LABEL_710;
      }
    }
    else if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_709;
    }
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_39;
LABEL_710:
    operator delete(__p[0]);
LABEL_39:
    *(_WORD *)((char *)&__p[2] + 7) = 11795;
    strcpy((char *)__p, "<xmlattr>.transform");
    v356 = __p;
    std::to_string(&v350, v28 - 90);
    v32 = std::string::insert(&v350, 0, "rotate(", 7uLL);
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    v34 = std::string::append(&__dst, " 400 400)", 9uLL);
    *(std::string *)v366 = *v34;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    sub_235868A68((uint64_t)&v352, (uint64_t)__p, (__int128 *)v366);
    if ((v366[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v366);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_41:
        v343 = v27 + 1;
        if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_713;
        goto LABEL_42;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_41;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    v343 = v27 + 1;
    if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_713:
      operator delete(v350.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        goto LABEL_43;
      goto LABEL_714;
    }
LABEL_42:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_43;
LABEL_714:
    operator delete(__p[0]);
LABEL_43:
    v348 = (_QWORD *)(a3 + 24 * v27);
    v35 = v348[1] - *v348;
    if (v35)
    {
      v36 = 0;
      v345 = v35 >> 4;
      v346 = v27;
      v347 = (_QWORD *)(a4 + 24 * v27);
      while (1)
      {
        v37 = (double *)(*v348 + 16 * v36);
        v39 = *v37;
        v38 = v37[1];
        if (*v37 > v38)
          v39 = *v37 + -360.0;
        v40 = fabs(v39);
        if (vabdd_f64(v39, v38) <= fmax(v40, fabs(v38)) * 2.22044605e-16
          || vabdd_f64(v39, v38 + -360.0) <= fmax(v40, fabs(v38 + -360.0)) * 2.22044605e-16)
        {
          v43 = 360.0;
          v42 = 0.00001;
        }
        else
        {
          v41 = *((double *)&unk_235891358 + v27 + 19);
          v42 = v39 + v41;
          v43 = v38 - v41;
        }
        v349 = *(_QWORD *)(*v347 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8));
        v44 = *(double *)(*(_QWORD *)(a2 + 32) + 8 * v27);
        memset(&__dst, 0, sizeof(__dst));
        v45 = operator new();
        v46 = operator new(0x60uLL);
        *(_QWORD *)(v45 + 8) = v46;
        v46[7] = 0;
        v46[8] = v46 + 7;
        v46[9] = v46 + 7;
        v46[10] = v46 + 10;
        v46[11] = v46 + 10;
        *(_QWORD *)(v45 + 24) = 0;
        v389 = v45;
        v47 = __sincos_stret(v43 / 180.0 * 3.14159265);
        v48 = __sincos_stret(v42 / 180.0 * 3.14159265);
        std::to_string(&__src, v47.__cosval * v44 + 400.0);
        if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          break;
        size = __src.__r_.__value_.__l.__size_;
        v52 = (__src.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v52 - __src.__r_.__value_.__l.__size_ >= 2)
        {
          p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
          if (!__src.__r_.__value_.__l.__size_)
          {
LABEL_81:
            LOWORD(p_src->__r_.__value_.__l.__data_) = *(_WORD *)"M ";
            v59 = size + 2;
            if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_82;
LABEL_71:
            *((_BYTE *)&__src.__r_.__value_.__s + 23) = v59 & 0x7F;
LABEL_83:
            v64 = (char *)p_src + v59;
            goto LABEL_84;
          }
LABEL_64:
          v56 = (char *)p_src + size <= "M " || p_src > (std::string *)"M ";
          v57 = 2;
          if (v56)
            v57 = 0;
          v58 = &aM[v57];
          memmove(&p_src->__r_.__value_.__s.__data_[2], p_src, size);
          LOWORD(p_src->__r_.__value_.__l.__data_) = *(_WORD *)v58;
          v59 = size + 2;
          if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_71;
LABEL_82:
          __src.__r_.__value_.__l.__size_ = v59;
          goto LABEL_83;
        }
        v50 = __src.__r_.__value_.__l.__size_ + 2;
        if (0x7FFFFFFFFFFFFFF7 - (__src.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) < __src.__r_.__value_.__l.__size_
                                                                                                + 2
                                                                                                - v52)
LABEL_722:
          sub_23584B34C();
        v51 = (std::string *)__src.__r_.__value_.__r.__words[0];
        v53 = 0x7FFFFFFFFFFFFFF7;
        if (v52 < 0x3FFFFFFFFFFFFFF3)
          goto LABEL_59;
LABEL_75:
        v62 = operator new(v53);
        v63 = (std::string::size_type)v62;
        *v62 = 8269;
        if (size)
          memmove(v62 + 1, v51, size);
        if (v52 != 22)
          operator delete(v51);
        __src.__r_.__value_.__r.__words[2] = v53 | 0x8000000000000000;
        __src.__r_.__value_.__r.__words[0] = v63;
        __src.__r_.__value_.__l.__size_ = v50;
        v64 = (_BYTE *)(v63 + v50);
LABEL_84:
        *v64 = 0;
        v374 = __src;
        memset(&__src, 0, sizeof(__src));
        if ((SHIBYTE(v374.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          v65 = HIBYTE(v374.__r_.__value_.__r.__words[2]);
          v66 = &v374;
          if (HIBYTE(v374.__r_.__value_.__r.__words[2]) != 22)
            goto LABEL_103;
          v67 = 23;
          v68 = 22;
LABEL_90:
          v70 = 2 * v68;
          if (v67 > 2 * v68)
            v70 = v67;
          if (v70 >= 0x17)
          {
            v71 = (v70 & 0x7FFFFFFFFFFFFFF8) + 8;
            v72 = v70 | 7;
            if (v72 == 23)
              v72 = v71;
            v69 = v72 + 1;
          }
          else
          {
            v69 = 23;
          }
          goto LABEL_97;
        }
        v65 = v374.__r_.__value_.__l.__size_;
        v67 = v374.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL;
        v68 = (v374.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v68 != v374.__r_.__value_.__l.__size_)
        {
          v66 = (std::string *)v374.__r_.__value_.__r.__words[0];
LABEL_103:
          v66->__r_.__value_.__s.__data_[v65] = 32;
          v76 = v65 + 1;
          if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) < 0)
            v374.__r_.__value_.__l.__size_ = v76;
          else
            *((_BYTE *)&v374.__r_.__value_.__s + 23) = v76 & 0x7F;
          v75 = (char *)v66 + v76;
          goto LABEL_107;
        }
        if (v67 == 0x7FFFFFFFFFFFFFF7)
          sub_23584B34C();
        v66 = (std::string *)v374.__r_.__value_.__r.__words[0];
        v69 = 0x7FFFFFFFFFFFFFF7;
        if (v68 < 0x3FFFFFFFFFFFFFF3)
          goto LABEL_90;
LABEL_97:
        v73 = operator new(v69);
        v74 = (std::string::size_type)v73;
        if (v68)
          memmove(v73, v66, v68);
        *(_BYTE *)(v74 + v68) = 32;
        if (v68 != 22)
          operator delete(v66);
        v374.__r_.__value_.__r.__words[2] = v69 | 0x8000000000000000;
        v374.__r_.__value_.__r.__words[0] = v74;
        v374.__r_.__value_.__l.__size_ = v67;
        v75 = (_BYTE *)(v74 + v67);
LABEL_107:
        *v75 = 0;
        v375 = v374;
        memset(&v374, 0, sizeof(v374));
        std::to_string(&v372, v47.__sinval * v44 + 400.0);
        if ((v372.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v77 = &v372;
        else
          v77 = (std::string *)v372.__r_.__value_.__r.__words[0];
        if ((v372.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v78 = HIBYTE(v372.__r_.__value_.__r.__words[2]);
        else
          v78 = v372.__r_.__value_.__l.__size_;
        if ((v375.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v79 = 22;
        else
          v79 = (v375.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v375.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v80 = HIBYTE(v375.__r_.__value_.__r.__words[2]);
        else
          v80 = v375.__r_.__value_.__l.__size_;
        if (v79 - v80 >= v78)
        {
          if (!v78)
            goto LABEL_145;
          if ((v375.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v85 = &v375;
          else
            v85 = (std::string *)v375.__r_.__value_.__r.__words[0];
          memmove((char *)v85 + v80, v77, v78);
          v86 = v80 + v78;
          if (SHIBYTE(v375.__r_.__value_.__r.__words[2]) < 0)
            v375.__r_.__value_.__l.__size_ = v80 + v78;
          else
            *((_BYTE *)&v375.__r_.__value_.__s + 23) = v86 & 0x7F;
          v87 = (char *)v85 + v86;
        }
        else
        {
          v81 = v80 + v78;
          if (0x7FFFFFFFFFFFFFF6 - v79 < v80 + v78 - v79)
            sub_23584B34C();
          if ((v375.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v82 = &v375;
          else
            v82 = (std::string *)v375.__r_.__value_.__r.__words[0];
          v83 = 0x7FFFFFFFFFFFFFF7;
          if (v79 < 0x3FFFFFFFFFFFFFF3)
          {
            v84 = 2 * v79;
            if (v81 > 2 * v79)
              v84 = v80 + v78;
            if (v84 >= 0x17)
            {
              v88 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
              v89 = v84 | 7;
              if (v89 == 23)
                v89 = v88;
              v83 = v89 + 1;
            }
            else
            {
              v83 = 23;
            }
          }
          v90 = operator new(v83);
          v91 = (std::string::size_type)v90;
          if (v80)
            memmove(v90, v82, v80);
          memcpy((void *)(v91 + v80), v77, v78);
          if (v79 != 22)
            operator delete(v82);
          v375.__r_.__value_.__r.__words[2] = v83 | 0x8000000000000000;
          v375.__r_.__value_.__r.__words[0] = v91;
          v375.__r_.__value_.__l.__size_ = v80 + v78;
          v87 = (_BYTE *)(v91 + v81);
        }
        *v87 = 0;
LABEL_145:
        v376 = v375;
        memset(&v375, 0, sizeof(v375));
        if ((SHIBYTE(v376.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          v92 = HIBYTE(v376.__r_.__value_.__r.__words[2]);
          if ((unint64_t)HIBYTE(v376.__r_.__value_.__r.__words[2]) - 20 >= 3)
          {
            v98 = &v376;
LABEL_166:
            v105 = (char *)v98 + v92;
            v105[2] = 32;
            *(_WORD *)v105 = 16672;
            v106 = v92 + 3;
            if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
              v376.__r_.__value_.__l.__size_ = v92 + 3;
            else
              *((_BYTE *)&v376.__r_.__value_.__s + 23) = v106 & 0x7F;
            v104 = (char *)v98 + v106;
            goto LABEL_170;
          }
          if (HIBYTE(v376.__r_.__value_.__r.__words[2]) <= 0x12u)
            goto LABEL_720;
          v93 = HIBYTE(v376.__r_.__value_.__r.__words[2]) + 3;
          v94 = &v376;
          v95 = 22;
LABEL_152:
          v97 = 2 * v95;
          if (v93 > 2 * v95)
            v97 = v93;
          if (v97 >= 0x17)
          {
            v99 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
            v100 = v97 | 7;
            if (v100 == 23)
              v100 = v99;
            v96 = v100 + 1;
          }
          else
          {
            v96 = 23;
          }
          goto LABEL_160;
        }
        v92 = v376.__r_.__value_.__l.__size_;
        v95 = (v376.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v95 - v376.__r_.__value_.__l.__size_ >= 3)
        {
          v98 = (std::string *)v376.__r_.__value_.__r.__words[0];
          goto LABEL_166;
        }
        v93 = v376.__r_.__value_.__l.__size_ + 3;
        if (0x7FFFFFFFFFFFFFF7 - (v376.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) < v376.__r_.__value_.__l.__size_
                                                                                               + 3
                                                                                               - v95)
LABEL_720:
          sub_23584B34C();
        v94 = (std::string *)v376.__r_.__value_.__r.__words[0];
        v96 = 0x7FFFFFFFFFFFFFF7;
        if (v95 < 0x3FFFFFFFFFFFFFF3)
          goto LABEL_152;
LABEL_160:
        v101 = operator new(v96);
        v102 = (std::string::size_type)v101;
        if (v92)
          memmove(v101, v94, v92);
        v103 = v102 + v92;
        *(_BYTE *)(v103 + 2) = 32;
        *(_WORD *)v103 = 16672;
        if (v95 != 22)
          operator delete(v94);
        v376.__r_.__value_.__r.__words[2] = v96 | 0x8000000000000000;
        v376.__r_.__value_.__r.__words[0] = v102;
        v376.__r_.__value_.__l.__size_ = v93;
        v104 = (_BYTE *)(v102 + v93);
LABEL_170:
        *v104 = 0;
        v377 = v376;
        memset(&v376, 0, sizeof(v376));
        std::to_string(&v371, v44);
        if ((v371.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v107 = &v371;
        else
          v107 = (std::string *)v371.__r_.__value_.__r.__words[0];
        if ((v371.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v108 = HIBYTE(v371.__r_.__value_.__r.__words[2]);
        else
          v108 = v371.__r_.__value_.__l.__size_;
        if ((v377.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v109 = 22;
        else
          v109 = (v377.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v377.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v110 = HIBYTE(v377.__r_.__value_.__r.__words[2]);
        else
          v110 = v377.__r_.__value_.__l.__size_;
        if (v109 - v110 >= v108)
        {
          if (!v108)
            goto LABEL_208;
          if ((v377.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v115 = &v377;
          else
            v115 = (std::string *)v377.__r_.__value_.__r.__words[0];
          memmove((char *)v115 + v110, v107, v108);
          v116 = v110 + v108;
          if (SHIBYTE(v377.__r_.__value_.__r.__words[2]) < 0)
            v377.__r_.__value_.__l.__size_ = v110 + v108;
          else
            *((_BYTE *)&v377.__r_.__value_.__s + 23) = v116 & 0x7F;
          v117 = (char *)v115 + v116;
        }
        else
        {
          v111 = v110 + v108;
          if (0x7FFFFFFFFFFFFFF6 - v109 < v110 + v108 - v109)
            sub_23584B34C();
          if ((v377.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v112 = &v377;
          else
            v112 = (std::string *)v377.__r_.__value_.__r.__words[0];
          v113 = 0x7FFFFFFFFFFFFFF7;
          if (v109 < 0x3FFFFFFFFFFFFFF3)
          {
            v114 = 2 * v109;
            if (v111 > 2 * v109)
              v114 = v110 + v108;
            if (v114 >= 0x17)
            {
              v118 = (v114 & 0xFFFFFFFFFFFFFFF8) + 8;
              v119 = v114 | 7;
              if (v119 == 23)
                v119 = v118;
              v113 = v119 + 1;
            }
            else
            {
              v113 = 23;
            }
          }
          v120 = operator new(v113);
          v121 = (std::string::size_type)v120;
          if (v110)
            memmove(v120, v112, v110);
          memcpy((void *)(v121 + v110), v107, v108);
          if (v109 != 22)
            operator delete(v112);
          v377.__r_.__value_.__r.__words[2] = v113 | 0x8000000000000000;
          v377.__r_.__value_.__r.__words[0] = v121;
          v377.__r_.__value_.__l.__size_ = v110 + v108;
          v117 = (_BYTE *)(v121 + v111);
        }
        *v117 = 0;
LABEL_208:
        v378 = v377;
        memset(&v377, 0, sizeof(v377));
        if ((SHIBYTE(v378.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          v122 = HIBYTE(v378.__r_.__value_.__r.__words[2]);
          v123 = &v378;
          if (HIBYTE(v378.__r_.__value_.__r.__words[2]) != 22)
            goto LABEL_227;
          v124 = 23;
          v125 = 22;
LABEL_214:
          v127 = 2 * v125;
          if (v124 > 2 * v125)
            v127 = v124;
          if (v127 >= 0x17)
          {
            v128 = (v127 & 0x7FFFFFFFFFFFFFF8) + 8;
            v129 = v127 | 7;
            if (v129 == 23)
              v129 = v128;
            v126 = v129 + 1;
          }
          else
          {
            v126 = 23;
          }
          goto LABEL_221;
        }
        v122 = v378.__r_.__value_.__l.__size_;
        v124 = v378.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL;
        v125 = (v378.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v125 != v378.__r_.__value_.__l.__size_)
        {
          v123 = (std::string *)v378.__r_.__value_.__r.__words[0];
LABEL_227:
          v123->__r_.__value_.__s.__data_[v122] = 32;
          v133 = v122 + 1;
          if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0)
            v378.__r_.__value_.__l.__size_ = v133;
          else
            *((_BYTE *)&v378.__r_.__value_.__s + 23) = v133 & 0x7F;
          v132 = (char *)v123 + v133;
          goto LABEL_231;
        }
        if (v124 == 0x7FFFFFFFFFFFFFF7)
          sub_23584B34C();
        v123 = (std::string *)v378.__r_.__value_.__r.__words[0];
        v126 = 0x7FFFFFFFFFFFFFF7;
        if (v125 < 0x3FFFFFFFFFFFFFF3)
          goto LABEL_214;
LABEL_221:
        v130 = operator new(v126);
        v131 = (std::string::size_type)v130;
        if (v125)
          memmove(v130, v123, v125);
        *(_BYTE *)(v131 + v125) = 32;
        if (v125 != 22)
          operator delete(v123);
        v378.__r_.__value_.__r.__words[2] = v126 | 0x8000000000000000;
        v378.__r_.__value_.__r.__words[0] = v131;
        v378.__r_.__value_.__l.__size_ = v124;
        v132 = (_BYTE *)(v131 + v124);
LABEL_231:
        *v132 = 0;
        v379 = v378;
        memset(&v378, 0, sizeof(v378));
        std::to_string(&v370, v44);
        if ((v370.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v134 = &v370;
        else
          v134 = (std::string *)v370.__r_.__value_.__r.__words[0];
        if ((v370.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v135 = HIBYTE(v370.__r_.__value_.__r.__words[2]);
        else
          v135 = v370.__r_.__value_.__l.__size_;
        if ((v379.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v136 = 22;
        else
          v136 = (v379.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v379.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v137 = HIBYTE(v379.__r_.__value_.__r.__words[2]);
        else
          v137 = v379.__r_.__value_.__l.__size_;
        if (v136 - v137 >= v135)
        {
          if (!v135)
            goto LABEL_269;
          if ((v379.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v142 = &v379;
          else
            v142 = (std::string *)v379.__r_.__value_.__r.__words[0];
          memmove((char *)v142 + v137, v134, v135);
          v143 = v137 + v135;
          if (SHIBYTE(v379.__r_.__value_.__r.__words[2]) < 0)
            v379.__r_.__value_.__l.__size_ = v137 + v135;
          else
            *((_BYTE *)&v379.__r_.__value_.__s + 23) = v143 & 0x7F;
          v144 = (char *)v142 + v143;
        }
        else
        {
          v138 = v137 + v135;
          if (0x7FFFFFFFFFFFFFF6 - v136 < v137 + v135 - v136)
            sub_23584B34C();
          if ((v379.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v139 = &v379;
          else
            v139 = (std::string *)v379.__r_.__value_.__r.__words[0];
          v140 = 0x7FFFFFFFFFFFFFF7;
          if (v136 < 0x3FFFFFFFFFFFFFF3)
          {
            v141 = 2 * v136;
            if (v138 > 2 * v136)
              v141 = v137 + v135;
            if (v141 >= 0x17)
            {
              v145 = (v141 & 0xFFFFFFFFFFFFFFF8) + 8;
              v146 = v141 | 7;
              if (v146 == 23)
                v146 = v145;
              v140 = v146 + 1;
            }
            else
            {
              v140 = 23;
            }
          }
          v147 = operator new(v140);
          v148 = (std::string::size_type)v147;
          if (v137)
            memmove(v147, v139, v137);
          memcpy((void *)(v148 + v137), v134, v135);
          if (v136 != 22)
            operator delete(v139);
          v379.__r_.__value_.__r.__words[2] = v140 | 0x8000000000000000;
          v379.__r_.__value_.__r.__words[0] = v148;
          v379.__r_.__value_.__l.__size_ = v137 + v135;
          v144 = (_BYTE *)(v148 + v138);
        }
        *v144 = 0;
LABEL_269:
        v380 = v379;
        memset(&v379, 0, sizeof(v379));
        if ((SHIBYTE(v380.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          v149 = HIBYTE(v380.__r_.__value_.__r.__words[2]);
          if ((unint64_t)HIBYTE(v380.__r_.__value_.__r.__words[2]) - 20 >= 3)
          {
            v155 = &v380;
LABEL_290:
            v162 = (char *)v155 + v149;
            v162[2] = 32;
            *(_WORD *)v162 = 12320;
            v163 = v149 + 3;
            if (SHIBYTE(v380.__r_.__value_.__r.__words[2]) < 0)
              v380.__r_.__value_.__l.__size_ = v149 + 3;
            else
              *((_BYTE *)&v380.__r_.__value_.__s + 23) = v163 & 0x7F;
            v161 = (char *)v155 + v163;
            goto LABEL_294;
          }
          if (HIBYTE(v380.__r_.__value_.__r.__words[2]) <= 0x12u)
            goto LABEL_725;
          v150 = HIBYTE(v380.__r_.__value_.__r.__words[2]) + 3;
          v151 = &v380;
          v152 = 22;
LABEL_276:
          v154 = 2 * v152;
          if (v150 > 2 * v152)
            v154 = v150;
          if (v154 >= 0x17)
          {
            v156 = (v154 & 0xFFFFFFFFFFFFFFF8) + 8;
            v157 = v154 | 7;
            if (v157 == 23)
              v157 = v156;
            v153 = v157 + 1;
          }
          else
          {
            v153 = 23;
          }
          goto LABEL_284;
        }
        v149 = v380.__r_.__value_.__l.__size_;
        v152 = (v380.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v152 - v380.__r_.__value_.__l.__size_ >= 3)
        {
          v155 = (std::string *)v380.__r_.__value_.__r.__words[0];
          goto LABEL_290;
        }
        v150 = v380.__r_.__value_.__l.__size_ + 3;
        if (0x7FFFFFFFFFFFFFF7 - (v380.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) < v380.__r_.__value_.__l.__size_
                                                                                               + 3
                                                                                               - v152)
LABEL_725:
          sub_23584B34C();
        v151 = (std::string *)v380.__r_.__value_.__r.__words[0];
        v153 = 0x7FFFFFFFFFFFFFF7;
        if (v152 < 0x3FFFFFFFFFFFFFF3)
          goto LABEL_276;
LABEL_284:
        v158 = operator new(v153);
        v159 = (std::string::size_type)v158;
        if (v149)
          memmove(v158, v151, v149);
        v160 = v159 + v149;
        *(_BYTE *)(v160 + 2) = 32;
        *(_WORD *)v160 = 12320;
        if (v152 != 22)
          operator delete(v151);
        v380.__r_.__value_.__r.__words[2] = v153 | 0x8000000000000000;
        v380.__r_.__value_.__r.__words[0] = v159;
        v380.__r_.__value_.__l.__size_ = v150;
        v161 = (_BYTE *)(v159 + v150);
LABEL_294:
        *v161 = 0;
        v381 = v380;
        memset(&v380, 0, sizeof(v380));
        if (v43 - v42 <= 180.0)
          v164 = "0";
        else
          v164 = "1";
        if ((SHIBYTE(v381.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          v165 = HIBYTE(v381.__r_.__value_.__r.__words[2]);
          v166 = &v381;
          if (HIBYTE(v381.__r_.__value_.__r.__words[2]) != 22)
            goto LABEL_316;
          v167 = 23;
          v168 = 22;
LABEL_303:
          v170 = 2 * v168;
          if (v167 > 2 * v168)
            v170 = v167;
          if (v170 >= 0x17)
          {
            v171 = (v170 & 0x7FFFFFFFFFFFFFF8) + 8;
            v172 = v170 | 7;
            if (v172 == 23)
              v172 = v171;
            v169 = v172 + 1;
          }
          else
          {
            v169 = 23;
          }
          goto LABEL_310;
        }
        v165 = v381.__r_.__value_.__l.__size_;
        v167 = v381.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL;
        v168 = (v381.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v168 != v381.__r_.__value_.__l.__size_)
        {
          v166 = (std::string *)v381.__r_.__value_.__r.__words[0];
LABEL_316:
          v166->__r_.__value_.__s.__data_[v165] = *v164;
          v176 = v165 + 1;
          if (SHIBYTE(v381.__r_.__value_.__r.__words[2]) < 0)
            v381.__r_.__value_.__l.__size_ = v176;
          else
            *((_BYTE *)&v381.__r_.__value_.__s + 23) = v176 & 0x7F;
          v175 = (char *)v166 + v176;
          goto LABEL_320;
        }
        if (v167 == 0x7FFFFFFFFFFFFFF7)
          sub_23584B34C();
        v166 = (std::string *)v381.__r_.__value_.__r.__words[0];
        v169 = 0x7FFFFFFFFFFFFFF7;
        if (v168 < 0x3FFFFFFFFFFFFFF3)
          goto LABEL_303;
LABEL_310:
        v173 = operator new(v169);
        v174 = (std::string::size_type)v173;
        if (v168)
          memmove(v173, v166, v168);
        *(_BYTE *)(v174 + v168) = *v164;
        if (v168 != 22)
          operator delete(v166);
        v381.__r_.__value_.__r.__words[2] = v169 | 0x8000000000000000;
        v381.__r_.__value_.__r.__words[0] = v174;
        v381.__r_.__value_.__l.__size_ = v167;
        v175 = (_BYTE *)(v174 + v167);
LABEL_320:
        *v175 = 0;
        v383 = v381.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v382[0].__locale_ = *(_OWORD *)&v381.__r_.__value_.__l.__data_;
        memset(&v381, 0, sizeof(v381));
        if ((SHIBYTE(v383) & 0x80000000) == 0)
        {
          locale = HIBYTE(v383);
          if ((unint64_t)HIBYTE(v383) - 20 >= 3)
          {
            v183 = (char *)v382;
LABEL_341:
            v190 = &v183[locale];
            v190[2] = 32;
            *(_WORD *)v190 = 12320;
            v191 = locale + 3;
            if (SHIBYTE(v383) < 0)
              v382[1].__locale_ = (std::locale::__imp *)(locale + 3);
            else
              HIBYTE(v383) = v191 & 0x7F;
            v189 = &v183[v191];
            goto LABEL_345;
          }
          if (HIBYTE(v383) <= 0x12u)
            goto LABEL_729;
          v178 = (std::locale::__imp *)(HIBYTE(v383) + 3);
          v179 = v382;
          v180 = 22;
LABEL_327:
          v182 = 2 * v180;
          if ((unint64_t)v178 > 2 * v180)
            v182 = (unint64_t)v178;
          if (v182 >= 0x17)
          {
            v184 = (v182 & 0xFFFFFFFFFFFFFFF8) + 8;
            v185 = v182 | 7;
            if (v185 == 23)
              v185 = v184;
            v181 = v185 + 1;
          }
          else
          {
            v181 = 23;
          }
          goto LABEL_335;
        }
        locale = (size_t)v382[1].__locale_;
        v180 = (v383 & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v180 - (unint64_t)v382[1].__locale_ >= 3)
        {
          v183 = (char *)v382[0].__locale_;
          goto LABEL_341;
        }
        v178 = (std::locale::__imp *)((char *)v382[1].__locale_ + 3);
        if ((std::locale::__imp *)(0x7FFFFFFFFFFFFFF7 - (v383 & 0x7FFFFFFFFFFFFFFFLL)) < (std::locale::__imp *)((char *)v382[1].__locale_ - v180 + 3))
LABEL_729:
          sub_23584B34C();
        v179 = v382[0].__locale_;
        v181 = 0x7FFFFFFFFFFFFFF7;
        if (v180 < 0x3FFFFFFFFFFFFFF3)
          goto LABEL_327;
LABEL_335:
        v186 = (std::locale::__imp *)operator new(v181);
        v187 = v186;
        if (locale)
          memmove(v186, v179, locale);
        v188 = (char *)v187 + locale;
        v188[2] = 32;
        *(_WORD *)v188 = 12320;
        if (v180 != 22)
          operator delete(v179);
        v383 = v181 | 0x8000000000000000;
        v382[0].__locale_ = v187;
        v382[1].__locale_ = v178;
        v189 = (char *)v178 + (_QWORD)v187;
LABEL_345:
        *v189 = 0;
        *(_OWORD *)&v384[0].__locale_ = *(_OWORD *)&v382[0].__locale_;
        v385 = v383;
        v383 = 0;
        v382[0].__locale_ = 0;
        v382[1].__locale_ = 0;
        std::to_string(&v369, v48.__cosval * v44 + 400.0);
        if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v192 = &v369;
        else
          v192 = (std::string *)v369.__r_.__value_.__r.__words[0];
        if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v193 = HIBYTE(v369.__r_.__value_.__r.__words[2]);
        else
          v193 = v369.__r_.__value_.__l.__size_;
        if (v385 >= 0)
          v194 = 22;
        else
          v194 = (v385 & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v385 >= 0)
          v195 = HIBYTE(v385);
        else
          v195 = (size_t)v384[1].__locale_;
        if (v194 - v195 >= v193)
        {
          if (!v193)
            goto LABEL_383;
          if (v385 >= 0)
            v200 = (char *)v384;
          else
            v200 = (char *)v384[0].__locale_;
          memmove(&v200[v195], v192, v193);
          v201 = v195 + v193;
          if (SHIBYTE(v385) < 0)
            v384[1].__locale_ = (std::locale::__imp *)(v195 + v193);
          else
            HIBYTE(v385) = v201 & 0x7F;
          v202 = &v200[v201];
        }
        else
        {
          v196 = v195 + v193;
          if (0x7FFFFFFFFFFFFFF6 - v194 < v195 + v193 - v194)
            sub_23584B34C();
          if (v385 >= 0)
            v197 = v384;
          else
            v197 = v384[0].__locale_;
          v198 = 0x7FFFFFFFFFFFFFF7;
          if (v194 < 0x3FFFFFFFFFFFFFF3)
          {
            v199 = 2 * v194;
            if (v196 > 2 * v194)
              v199 = v195 + v193;
            if (v199 >= 0x17)
            {
              v203 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
              v204 = v199 | 7;
              if (v204 == 23)
                v204 = v203;
              v198 = v204 + 1;
            }
            else
            {
              v198 = 23;
            }
          }
          v205 = (std::locale::__imp *)operator new(v198);
          v206 = v205;
          if (v195)
            memmove(v205, v197, v195);
          memcpy((char *)v206 + v195, v192, v193);
          if (v194 != 22)
            operator delete(v197);
          v384[1].__locale_ = (std::locale::__imp *)(v195 + v193);
          v385 = v198 | 0x8000000000000000;
          v384[0].__locale_ = v206;
          v202 = (char *)v206 + v196;
        }
        *v202 = 0;
LABEL_383:
        *(_QWORD *)&v366[16] = v385;
        *(_OWORD *)v366 = *(_OWORD *)&v384[0].__locale_;
        v384[1].__locale_ = 0;
        v385 = 0;
        v384[0].__locale_ = 0;
        if ((v366[23] & 0x80000000) == 0)
        {
          v207 = v366[23];
          v208 = v366;
          if (v366[23] != 22)
            goto LABEL_402;
          v209 = 23;
          v210 = 22;
LABEL_389:
          v212 = 2 * v210;
          if (v209 > 2 * v210)
            v212 = v209;
          if (v212 >= 0x17)
          {
            v213 = (v212 & 0x7FFFFFFFFFFFFFF8) + 8;
            v214 = v212 | 7;
            if (v214 == 23)
              v214 = v213;
            v211 = v214 + 1;
          }
          else
          {
            v211 = 23;
          }
          goto LABEL_396;
        }
        v207 = *(_QWORD *)&v366[8];
        v209 = *(_QWORD *)&v366[16] & 0x7FFFFFFFFFFFFFFFLL;
        v210 = (*(_QWORD *)&v366[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v210 != *(_QWORD *)&v366[8])
        {
          v208 = *(_BYTE **)v366;
LABEL_402:
          v208[v207] = 32;
          v218 = v207 + 1;
          if ((v366[23] & 0x80000000) != 0)
            *(_QWORD *)&v366[8] = v218;
          else
            v366[23] = v218 & 0x7F;
          v217 = &v208[v218];
          goto LABEL_406;
        }
        if (v209 == 0x7FFFFFFFFFFFFFF7)
          sub_23584B34C();
        v208 = *(_BYTE **)v366;
        v211 = 0x7FFFFFFFFFFFFFF7;
        if (v210 < 0x3FFFFFFFFFFFFFF3)
          goto LABEL_389;
LABEL_396:
        v215 = operator new(v211);
        v216 = v215;
        if (v210)
          memmove(v215, v208, v210);
        v216[v210] = 32;
        if (v210 != 22)
          operator delete(v208);
        *(_QWORD *)&v366[8] = v209;
        *(_QWORD *)&v366[16] = v211 | 0x8000000000000000;
        *(_QWORD *)v366 = v216;
        v217 = &v216[v209];
LABEL_406:
        *v217 = 0;
        *(_OWORD *)__p = *(_OWORD *)v366;
        __p[2] = *(void **)&v366[16];
        memset(v366, 0, 24);
        std::to_string(&v368, v48.__sinval * v44 + 400.0);
        v219 = HIBYTE(v368.__r_.__value_.__r.__words[2]);
        if ((v368.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v220 = &v368;
        else
          v220 = (std::string *)v368.__r_.__value_.__r.__words[0];
        if ((v368.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v221 = HIBYTE(v368.__r_.__value_.__r.__words[2]);
        else
          v221 = v368.__r_.__value_.__l.__size_;
        if (SHIBYTE(__p[2]) >= 0)
          v222 = 22;
        else
          v222 = ((unint64_t)__p[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (SHIBYTE(__p[2]) >= 0)
          v223 = HIBYTE(__p[2]);
        else
          v223 = (size_t)__p[1];
        if (v222 - v223 < v221)
        {
          v224 = v223 + v221;
          if (0x7FFFFFFFFFFFFFF6 - v222 < v223 + v221 - v222)
            sub_23584B34C();
          if (SHIBYTE(__p[2]) >= 0)
            v225 = __p;
          else
            v225 = (void **)__p[0];
          v226 = 0x7FFFFFFFFFFFFFF7;
          if (v222 < 0x3FFFFFFFFFFFFFF3)
          {
            v227 = 2 * v222;
            if (v224 > 2 * v222)
              v227 = v223 + v221;
            if (v227 >= 0x17)
            {
              v231 = (v227 & 0xFFFFFFFFFFFFFFF8) + 8;
              v232 = v227 | 7;
              if (v232 == 23)
                v232 = v231;
              v226 = v232 + 1;
            }
            else
            {
              v226 = 23;
            }
          }
          v233 = (char *)operator new(v226);
          v234 = v233;
          if (v223)
            memmove(v233, v225, v223);
          memcpy(&v234[v223], v220, v221);
          if (v222 != 22)
            operator delete(v225);
          __p[1] = (void *)(v223 + v221);
          __p[2] = (void *)(v226 | 0x8000000000000000);
          __p[0] = v234;
          v230 = &v234[v224];
          goto LABEL_443;
        }
        if (v221)
        {
          if (SHIBYTE(__p[2]) >= 0)
            v228 = __p;
          else
            v228 = (void **)__p[0];
          memmove((char *)v228 + v223, v220, v221);
          v229 = v223 + v221;
          if (SHIBYTE(__p[2]) < 0)
            __p[1] = (void *)(v223 + v221);
          else
            HIBYTE(__p[2]) = v229 & 0x7F;
          v230 = (char *)v228 + v229;
LABEL_443:
          *v230 = 0;
          v219 = HIBYTE(v368.__r_.__value_.__r.__words[2]);
        }
        v386 = *(_OWORD *)__p;
        v387 = __p[2];
        memset(__p, 0, 24);
        if (v219 < 0 && (operator delete(v368.__r_.__value_.__l.__data_), SHIBYTE(__p[2]) < 0))
        {
          operator delete(__p[0]);
          if ((v366[23] & 0x80000000) == 0)
          {
LABEL_447:
            if ((SHIBYTE(v369.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_448;
            goto LABEL_599;
          }
        }
        else if ((v366[23] & 0x80000000) == 0)
        {
          goto LABEL_447;
        }
        operator delete(*(void **)v366);
        if ((SHIBYTE(v369.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_448:
          if ((SHIBYTE(v385) & 0x80000000) == 0)
            goto LABEL_449;
          goto LABEL_600;
        }
LABEL_599:
        operator delete(v369.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v385) & 0x80000000) == 0)
        {
LABEL_449:
          if ((SHIBYTE(v383) & 0x80000000) == 0)
            goto LABEL_450;
          goto LABEL_601;
        }
LABEL_600:
        operator delete(v384[0].__locale_);
        if ((SHIBYTE(v383) & 0x80000000) == 0)
        {
LABEL_450:
          if ((SHIBYTE(v381.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_451;
          goto LABEL_602;
        }
LABEL_601:
        operator delete(v382[0].__locale_);
        if ((SHIBYTE(v381.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_451:
          if ((SHIBYTE(v380.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_452;
          goto LABEL_603;
        }
LABEL_602:
        operator delete(v381.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v380.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_452:
          if ((SHIBYTE(v370.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_453;
          goto LABEL_604;
        }
LABEL_603:
        operator delete(v380.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v370.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_453:
          if ((SHIBYTE(v379.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_454;
          goto LABEL_605;
        }
LABEL_604:
        operator delete(v370.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v379.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_454:
          if ((SHIBYTE(v378.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_455;
          goto LABEL_606;
        }
LABEL_605:
        operator delete(v379.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v378.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_455:
          if ((SHIBYTE(v371.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_456;
          goto LABEL_607;
        }
LABEL_606:
        operator delete(v378.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v371.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_456:
          if ((SHIBYTE(v377.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_457;
          goto LABEL_608;
        }
LABEL_607:
        operator delete(v371.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v377.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_457:
          if ((SHIBYTE(v376.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_458;
          goto LABEL_609;
        }
LABEL_608:
        operator delete(v377.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v376.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_458:
          if ((SHIBYTE(v372.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_459;
          goto LABEL_610;
        }
LABEL_609:
        operator delete(v376.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v372.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_459:
          if ((SHIBYTE(v375.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_460;
          goto LABEL_611;
        }
LABEL_610:
        operator delete(v372.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v375.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_460:
          if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_612;
          goto LABEL_461;
        }
LABEL_611:
        operator delete(v375.__r_.__value_.__l.__data_);
        if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_612:
          operator delete(v374.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_462;
          goto LABEL_613;
        }
LABEL_461:
        if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_462;
LABEL_613:
        operator delete(__src.__r_.__value_.__l.__data_);
LABEL_462:
        *(_WORD *)((char *)&__p[2] + 7) = 11792;
        strcpy((char *)__p, "path.<xmlattr>.d");
        v356 = __p;
        sub_235868A68((uint64_t)&__dst, (uint64_t)__p, &v386);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        v235 = (char *)operator new(0x20uLL);
        *(_QWORD *)v366 = v235;
        *(_OWORD *)&v366[8] = xmmword_2358911D0;
        strcpy(v235, "path.<xmlattr>.data-color");
        v366[24] = 46;
        v367 = v235;
        if ((v349 & (1 << v36)) != 0)
          v236 = "1";
        else
          v236 = "0";
        MEMORY[0x23B7D93F8](v382);
        std::locale::locale(v384, v382);
        if ((v366[23] & 0x80000000) != 0)
        {
          sub_23584B488(__p, *(void **)v366, *(unint64_t *)&v366[8]);
          v237 = v366[23] < 0;
        }
        else
        {
          v237 = 0;
          *(_OWORD *)__p = *(_OWORD *)v366;
          __p[2] = *(void **)&v366[16];
        }
        LOBYTE(__p[3]) = v366[24];
        v238 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v238 = (void **)__p[0];
        v239 = !v237;
        v240 = v366;
        if (!v239)
          v240 = *(_BYTE **)v366;
        v356 = (void **)((char *)v238 + v367 - v240);
        v241 = sub_235869118((uint64_t)&__dst, (uint64_t)__p);
        v242 = v241;
        if (SHIBYTE(__p[2]) < 0)
        {
          operator delete(__p[0]);
          if (v242)
          {
LABEL_476:
            std::locale::locale((std::locale *)__p, v384);
            sub_23586B8E8(v242, v236, (const std::locale *)__p);
            goto LABEL_487;
          }
        }
        else if (v241)
        {
          goto LABEL_476;
        }
        memset(__p, 0, 24);
        v243 = (_QWORD *)operator new();
        v244 = operator new(0x60uLL);
        v243[1] = v244;
        v244[7] = 0;
        v244[8] = v244 + 7;
        v244[9] = v244 + 7;
        v244[10] = v244 + 10;
        v244[11] = v244 + 10;
        v243[3] = 0;
        __p[3] = v243;
        v245 = sub_235868DE8((uint64_t)&__dst, (uint64_t)v366, (__int128 *)__p);
        v246 = (_QWORD *)v243[1];
        v247 = v246[11];
        if (v247)
          v248 = (_QWORD *)(v247 - 80);
        else
          v248 = 0;
        if (v248 != v246)
        {
          do
          {
            v249 = v248[11];
            if (v249)
              v246 = (_QWORD *)(v249 - 80);
            else
              v246 = 0;
            sub_2358688CC((uint64_t)v248);
            operator delete(v248);
            v248 = v246;
          }
          while (v246 != (_QWORD *)v243[1]);
        }
        operator delete(v246);
        MEMORY[0x23B7D94C4](v243, 0x1020C402FC1992ELL);
        std::locale::locale((std::locale *)__p, v384);
        sub_23586B8E8((uint64_t)v245, v236, (const std::locale *)__p);
LABEL_487:
        std::locale::~locale((std::locale *)__p);
        std::locale::~locale(v384);
        std::locale::~locale(v382);
        if ((v366[23] & 0x80000000) != 0)
          operator delete(*(void **)v366);
        sub_23585D42C(&v380);
        if ((SHIBYTE(v380.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          v250 = HIBYTE(v380.__r_.__value_.__r.__words[2]);
          if ((unint64_t)HIBYTE(v380.__r_.__value_.__r.__words[2]) - 6 >= 0x11)
          {
            v256 = &v380;
            if (!*((_BYTE *)&v380.__r_.__value_.__s + 23))
              goto LABEL_517;
            goto LABEL_501;
          }
          if (HIBYTE(v380.__r_.__value_.__r.__words[2]) <= 4u)
            goto LABEL_732;
          v251 = HIBYTE(v380.__r_.__value_.__r.__words[2]) + 17;
          v252 = &v380;
          v253 = 22;
LABEL_496:
          v255 = 2 * v253;
          if (v251 > 2 * v253)
            v255 = v251;
          if (v255 >= 0x17)
          {
            v260 = (v255 & 0xFFFFFFFFFFFFFFF8) + 8;
            v261 = v255 | 7;
            if (v261 == 23)
              v261 = v260;
            v254 = v261 + 1;
          }
          else
          {
            v254 = 23;
          }
          goto LABEL_511;
        }
        v250 = v380.__r_.__value_.__l.__size_;
        v253 = (v380.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v253 - v380.__r_.__value_.__l.__size_ >= 0x11)
        {
          v256 = (std::string *)v380.__r_.__value_.__r.__words[0];
          if (!v380.__r_.__value_.__l.__size_)
          {
LABEL_517:
            v259 = "fill:none;stroke:";
LABEL_518:
            *(_OWORD *)&v256->__r_.__value_.__l.__data_ = *(_OWORD *)v259;
            v256->__r_.__value_.__s.__data_[16] = v259[16];
            v265 = v250 + 17;
            if (SHIBYTE(v380.__r_.__value_.__r.__words[2]) < 0)
              v380.__r_.__value_.__l.__size_ = v250 + 17;
            else
              *((_BYTE *)&v380.__r_.__value_.__s + 23) = v265 & 0x7F;
            v264 = (char *)v256 + v265;
            goto LABEL_522;
          }
LABEL_501:
          v257 = (char *)v256 + v250 <= "fill:none;stroke:" || v256 > (std::string *)"fill:none;stroke:";
          v258 = 17;
          if (v257)
            v258 = 0;
          v259 = &aFillNoneStroke[v258];
          memmove((char *)&v256->__r_.__value_.__r.__words[2] + 1, v256, v250);
          goto LABEL_518;
        }
        v251 = v380.__r_.__value_.__l.__size_ + 17;
        if (0x7FFFFFFFFFFFFFF7 - (v380.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) < v380.__r_.__value_.__l.__size_
                                                                                               + 17
                                                                                               - v253)
LABEL_732:
          sub_23584B34C();
        v252 = (std::string *)v380.__r_.__value_.__r.__words[0];
        v254 = 0x7FFFFFFFFFFFFFF7;
        if (v253 < 0x3FFFFFFFFFFFFFF3)
          goto LABEL_496;
LABEL_511:
        v262 = (char *)operator new(v254);
        v263 = (std::string::size_type)v262;
        v262[16] = 58;
        *(_OWORD *)v262 = *(_OWORD *)"fill:none;stroke:";
        if (v250)
          memmove(v262 + 17, v252, v250);
        if (v253 != 22)
          operator delete(v252);
        v380.__r_.__value_.__r.__words[2] = v254 | 0x8000000000000000;
        v380.__r_.__value_.__r.__words[0] = v263;
        v380.__r_.__value_.__l.__size_ = v251;
        v264 = (_BYTE *)(v263 + v251);
LABEL_522:
        *v264 = 0;
        v381 = v380;
        memset(&v380, 0, sizeof(v380));
        if ((SHIBYTE(v381.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          v266 = HIBYTE(v381.__r_.__value_.__r.__words[2]);
          if (HIBYTE(v381.__r_.__value_.__r.__words[2]) >= 0x17u)
          {
            v272 = &v381;
            qmemcpy((char *)&v381 + HIBYTE(v381.__r_.__value_.__r.__words[2]), ";stroke-linecap:round;stroke-miterlimit:10;",
              43);
            v273 = v266 + 43;
            *((_BYTE *)&v381.__r_.__value_.__s + 23) = (v266 + 43) & 0x7F;
LABEL_542:
            v278 = (char *)v272 + v273;
            goto LABEL_543;
          }
          v267 = HIBYTE(v381.__r_.__value_.__r.__words[2]) + 43;
          v268 = &v381;
          v269 = 22;
LABEL_528:
          v271 = 2 * v269;
          if (v267 > 2 * v269)
            v271 = v267;
          if (v271 >= 0x17)
          {
            v274 = (v271 & 0xFFFFFFFFFFFFFFF8) + 8;
            v275 = v271 | 7;
            if (v275 == 23)
              v275 = v274;
            v270 = v275 + 1;
          }
          else
          {
            v270 = 23;
          }
          goto LABEL_536;
        }
        v266 = v381.__r_.__value_.__l.__size_;
        v269 = (v381.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v269 - v381.__r_.__value_.__l.__size_ >= 0x2B)
        {
          v272 = (std::string *)v381.__r_.__value_.__r.__words[0];
          qmemcpy((void *)(v381.__r_.__value_.__r.__words[0] + v381.__r_.__value_.__l.__size_), ";stroke-linecap:round;stroke-miterlimit:10;",
            43);
          v273 = v266 + 43;
          v381.__r_.__value_.__l.__size_ = v266 + 43;
          goto LABEL_542;
        }
        v267 = v381.__r_.__value_.__l.__size_ + 43;
        if (0x7FFFFFFFFFFFFFF7 - (v381.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) < v381.__r_.__value_.__l.__size_
                                                                                               + 43
                                                                                               - v269)
          sub_23584B34C();
        v268 = (std::string *)v381.__r_.__value_.__r.__words[0];
        v270 = 0x7FFFFFFFFFFFFFF7;
        if (v269 < 0x3FFFFFFFFFFFFFF3)
          goto LABEL_528;
LABEL_536:
        v276 = operator new(v270);
        v277 = (std::string::size_type)v276;
        if (v266)
          memmove(v276, v268, v266);
        qmemcpy((void *)(v277 + v266), ";stroke-linecap:round;stroke-miterlimit:10;", 43);
        if (v269 != 22)
          operator delete(v268);
        v381.__r_.__value_.__r.__words[2] = v270 | 0x8000000000000000;
        v381.__r_.__value_.__r.__words[0] = v277;
        v381.__r_.__value_.__l.__size_ = v267;
        v278 = (_BYTE *)(v277 + v267);
LABEL_543:
        *v278 = 0;
        v383 = v381.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v382[0].__locale_ = *(_OWORD *)&v381.__r_.__value_.__l.__data_;
        memset(&v381, 0, sizeof(v381));
        if ((SHIBYTE(v383) & 0x80000000) == 0)
        {
          v279 = HIBYTE(v383);
          if ((unint64_t)HIBYTE(v383) - 10 >= 0xD)
          {
            v285 = (char *)v382;
LABEL_564:
            qmemcpy(&v285[v279], "stroke-width:", 13);
            v291 = v279 + 13;
            if (SHIBYTE(v383) < 0)
              v382[1].__locale_ = (std::locale::__imp *)(v279 + 13);
            else
              HIBYTE(v383) = v291 & 0x7F;
            v290 = &v285[v291];
            goto LABEL_568;
          }
          if (HIBYTE(v383) <= 8u)
            goto LABEL_723;
          v280 = (std::locale::__imp *)(HIBYTE(v383) + 13);
          v281 = v382;
          v282 = 22;
LABEL_550:
          v284 = 2 * v282;
          if ((unint64_t)v280 > 2 * v282)
            v284 = (unint64_t)v280;
          if (v284 >= 0x17)
          {
            v286 = (v284 & 0xFFFFFFFFFFFFFFF8) + 8;
            v287 = v284 | 7;
            if (v287 == 23)
              v287 = v286;
            v283 = v287 + 1;
          }
          else
          {
            v283 = 23;
          }
          goto LABEL_558;
        }
        v279 = (size_t)v382[1].__locale_;
        v282 = (v383 & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v282 - (unint64_t)v382[1].__locale_ >= 0xD)
        {
          v285 = (char *)v382[0].__locale_;
          goto LABEL_564;
        }
        v280 = (std::locale::__imp *)((char *)v382[1].__locale_ + 13);
        if ((std::locale::__imp *)(0x7FFFFFFFFFFFFFF7 - (v383 & 0x7FFFFFFFFFFFFFFFLL)) < (std::locale::__imp *)((char *)v382[1].__locale_ - v282 + 13))
LABEL_723:
          sub_23584B34C();
        v281 = v382[0].__locale_;
        v283 = 0x7FFFFFFFFFFFFFF7;
        if (v282 < 0x3FFFFFFFFFFFFFF3)
          goto LABEL_550;
LABEL_558:
        v288 = (std::locale::__imp *)operator new(v283);
        v289 = v288;
        if (v279)
          memmove(v288, v281, v279);
        qmemcpy((char *)v289 + v279, "stroke-width:", 13);
        if (v282 != 22)
          operator delete(v281);
        v383 = v283 | 0x8000000000000000;
        v382[0].__locale_ = v289;
        v382[1].__locale_ = v280;
        v290 = (char *)v280 + (_QWORD)v289;
LABEL_568:
        *v290 = 0;
        *(_OWORD *)&v384[0].__locale_ = *(_OWORD *)&v382[0].__locale_;
        v385 = v383;
        v383 = 0;
        v382[0].__locale_ = 0;
        v382[1].__locale_ = 0;
        std::to_string(&v379, 23.5);
        if ((v379.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v292 = &v379;
        else
          v292 = (std::string *)v379.__r_.__value_.__r.__words[0];
        if ((v379.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v293 = HIBYTE(v379.__r_.__value_.__r.__words[2]);
        else
          v293 = v379.__r_.__value_.__l.__size_;
        if (v385 >= 0)
          v294 = 22;
        else
          v294 = (v385 & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v385 >= 0)
          v295 = HIBYTE(v385);
        else
          v295 = (size_t)v384[1].__locale_;
        if (v294 - v295 >= v293)
        {
          if (!v293)
            goto LABEL_623;
          if (v385 >= 0)
            v300 = (char *)v384;
          else
            v300 = (char *)v384[0].__locale_;
          memmove(&v300[v295], v292, v293);
          v301 = v295 + v293;
          if (SHIBYTE(v385) < 0)
            v384[1].__locale_ = (std::locale::__imp *)(v295 + v293);
          else
            HIBYTE(v385) = v301 & 0x7F;
          v302 = &v300[v301];
        }
        else
        {
          v296 = v295 + v293;
          if (0x7FFFFFFFFFFFFFF6 - v294 < v295 + v293 - v294)
            sub_23584B34C();
          if (v385 >= 0)
            v297 = v384;
          else
            v297 = v384[0].__locale_;
          v298 = 0x7FFFFFFFFFFFFFF7;
          if (v294 < 0x3FFFFFFFFFFFFFF3)
          {
            v299 = 2 * v294;
            if (v296 > 2 * v294)
              v299 = v295 + v293;
            if (v299 >= 0x17)
            {
              v303 = (v299 & 0xFFFFFFFFFFFFFFF8) + 8;
              v304 = v299 | 7;
              if (v304 == 23)
                v304 = v303;
              v298 = v304 + 1;
            }
            else
            {
              v298 = 23;
            }
          }
          v305 = (std::locale::__imp *)operator new(v298);
          v306 = v305;
          if (v295)
            memmove(v305, v297, v295);
          memcpy((char *)v306 + v295, v292, v293);
          if (v294 != 22)
            operator delete(v297);
          v384[1].__locale_ = (std::locale::__imp *)(v295 + v293);
          v385 = v298 | 0x8000000000000000;
          v384[0].__locale_ = v306;
          v302 = (char *)v306 + v296;
        }
        *v302 = 0;
LABEL_623:
        __p[2] = (void *)v385;
        *(_OWORD *)__p = *(_OWORD *)&v384[0].__locale_;
        v384[1].__locale_ = 0;
        v385 = 0;
        v384[0].__locale_ = 0;
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        {
          v307 = HIBYTE(__p[2]);
          if ((unint64_t)HIBYTE(__p[2]) - 21 >= 2)
          {
            v313 = __p;
            *(_WORD *)((char *)__p + HIBYTE(__p[2])) = 30832;
            v314 = (char *)(v307 + 2);
            if (SHIBYTE(__p[2]) < 0)
              goto LABEL_645;
            goto LABEL_635;
          }
          if (HIBYTE(__p[2]) <= 0x13u)
            goto LABEL_724;
          v308 = (char *)(HIBYTE(__p[2]) + 2);
          v309 = __p;
          v310 = 22;
LABEL_630:
          v312 = 2 * v310;
          if ((unint64_t)v308 > 2 * v310)
            v312 = (unint64_t)v308;
          if (v312 >= 0x17)
          {
            v315 = (v312 & 0xFFFFFFFFFFFFFFF8) + 8;
            v316 = v312 | 7;
            if (v316 == 23)
              v316 = v315;
            v311 = v316 + 1;
          }
          else
          {
            v311 = 23;
          }
          goto LABEL_639;
        }
        v307 = (size_t)__p[1];
        v310 = ((unint64_t)__p[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v310 - (unint64_t)__p[1] >= 2)
        {
          v313 = (void **)__p[0];
          *(_WORD *)((char *)__p[0] + (unint64_t)__p[1]) = 30832;
          v314 = (char *)(v307 + 2);
          if (SHIBYTE(__p[2]) < 0)
          {
LABEL_645:
            __p[1] = v314;
            goto LABEL_646;
          }
LABEL_635:
          HIBYTE(__p[2]) = v314 & 0x7F;
LABEL_646:
          v27 = v346;
          v319 = &v314[(_QWORD)v313];
          goto LABEL_647;
        }
        v308 = (char *)__p[1] + 2;
        if ((void *)(0x7FFFFFFFFFFFFFF7 - ((unint64_t)__p[2] & 0x7FFFFFFFFFFFFFFFLL)) < (char *)__p[1]
                                                                                                - v310
                                                                                                + 2)
LABEL_724:
          sub_23584B34C();
        v309 = (void **)__p[0];
        v311 = 0x7FFFFFFFFFFFFFF7;
        if (v310 < 0x3FFFFFFFFFFFFFF3)
          goto LABEL_630;
LABEL_639:
        v317 = operator new(v311);
        v318 = v317;
        if (v307)
          memmove(v317, v309, v307);
        *(_WORD *)((char *)v318 + v307) = 30832;
        if (v310 != 22)
          operator delete(v309);
        __p[1] = v308;
        __p[2] = (void *)(v311 | 0x8000000000000000);
        __p[0] = v318;
        v319 = &v308[(_QWORD)v318];
        v27 = v346;
LABEL_647:
        *v319 = 0;
        *(_OWORD *)v366 = *(_OWORD *)__p;
        *(void **)&v366[16] = __p[2];
        memset(__p, 0, 24);
        if (SHIBYTE(v379.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v379.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v385) & 0x80000000) == 0)
          {
LABEL_649:
            if ((SHIBYTE(v383) & 0x80000000) == 0)
              goto LABEL_650;
            goto LABEL_658;
          }
        }
        else if ((SHIBYTE(v385) & 0x80000000) == 0)
        {
          goto LABEL_649;
        }
        operator delete(v384[0].__locale_);
        if ((SHIBYTE(v383) & 0x80000000) == 0)
        {
LABEL_650:
          if (SHIBYTE(v381.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_659;
          goto LABEL_651;
        }
LABEL_658:
        operator delete(v382[0].__locale_);
        if (SHIBYTE(v381.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_659:
          operator delete(v381.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v380.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_652;
          goto LABEL_660;
        }
LABEL_651:
        if ((SHIBYTE(v380.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_652;
LABEL_660:
        operator delete(v380.__r_.__value_.__l.__data_);
LABEL_652:
        *(_WORD *)((char *)&__p[2] + 7) = 11796;
        strcpy((char *)__p, "path.<xmlattr>.style");
        v356 = __p;
        sub_235868A68((uint64_t)&__dst, (uint64_t)__p, (__int128 *)v366);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        *(_WORD *)((char *)&__p[2] + 7) = 11780;
        strcpy((char *)__p, "path");
        v356 = __p;
        v320 = sub_23585D828((uint64_t)&__dst, (uint64_t)__p);
        v321 = v320;
        if (*(char *)(v320 + 23) < 0)
        {
          sub_23584B488(&v350, *(void **)v320, *(_QWORD *)(v320 + 8));
        }
        else
        {
          v322 = *(_OWORD *)v320;
          v350.__r_.__value_.__r.__words[2] = *(_QWORD *)(v320 + 16);
          *(_OWORD *)&v350.__r_.__value_.__l.__data_ = v322;
        }
        v323 = operator new();
        v324 = *(_QWORD *)(v321 + 24);
        *(_QWORD *)(v323 + 8) = operator new(0x60uLL);
        *(_QWORD *)(v323 + 24) = 0;
        sub_23586BE1C(v323, v324);
        v351 = v323;
        if (SHIBYTE(__p[2]) < 0)
        {
          operator delete(__p[0]);
          if ((v366[23] & 0x80000000) == 0)
          {
LABEL_664:
            if (SHIBYTE(v387) < 0)
              goto LABEL_689;
            goto LABEL_665;
          }
        }
        else if ((v366[23] & 0x80000000) == 0)
        {
          goto LABEL_664;
        }
        operator delete(*(void **)v366);
        if (SHIBYTE(v387) < 0)
LABEL_689:
          operator delete((void *)v386);
LABEL_665:
        v325 = v389;
        v326 = *(_QWORD **)(v389 + 8);
        v327 = v326[11];
        if (v327)
          v328 = (_QWORD *)(v327 - 80);
        else
          v328 = 0;
        if (v328 != v326)
        {
          do
          {
            v329 = v328[11];
            if (v329)
              v326 = (_QWORD *)(v329 - 80);
            else
              v326 = 0;
            sub_2358688CC((uint64_t)v328);
            operator delete(v328);
            v328 = v326;
          }
          while (v326 != *(_QWORD **)(v325 + 8));
        }
        operator delete(v326);
        MEMORY[0x23B7D94C4](v325, 0x1020C402FC1992ELL);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        *(_WORD *)((char *)&__p[2] + 7) = 11780;
        strcpy((char *)__p, "path");
        v356 = __p;
        sub_235860FA8((uint64_t)&v352, (uint64_t)__p, (__int128 *)&v350);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        v330 = v351;
        v331 = *(_QWORD **)(v351 + 8);
        v332 = v331[11];
        if (v332)
          v333 = (_QWORD *)(v332 - 80);
        else
          v333 = 0;
        if (v333 != v331)
        {
          do
          {
            v334 = v333[11];
            if (v334)
              v331 = (_QWORD *)(v334 - 80);
            else
              v331 = 0;
            sub_2358688CC((uint64_t)v333);
            operator delete(v333);
            v333 = v331;
          }
          while (v331 != *(_QWORD **)(v330 + 8));
        }
        operator delete(v331);
        MEMORY[0x23B7D94C4](v330, 0x1020C402FC1992ELL);
        if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v350.__r_.__value_.__l.__data_);
        if (++v36 == v345)
          goto LABEL_696;
      }
      size = HIBYTE(__src.__r_.__value_.__r.__words[2]);
      if ((unint64_t)HIBYTE(__src.__r_.__value_.__r.__words[2]) - 21 >= 2)
      {
        p_src = &__src;
        if (!*((_BYTE *)&__src.__r_.__value_.__s + 23))
          goto LABEL_81;
        goto LABEL_64;
      }
      if (HIBYTE(__src.__r_.__value_.__r.__words[2]) <= 0x13u)
        goto LABEL_722;
      v50 = HIBYTE(__src.__r_.__value_.__r.__words[2]) + 2;
      v51 = &__src;
      v52 = 22;
LABEL_59:
      v54 = 2 * v52;
      if (v50 > 2 * v52)
        v54 = v50;
      if (v54 >= 0x17)
      {
        v60 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
        v61 = v54 | 7;
        if (v61 == 23)
          v61 = v60;
        v53 = v61 + 1;
      }
      else
      {
        v53 = 23;
      }
      goto LABEL_75;
    }
LABEL_696:
    *(_WORD *)((char *)&__p[2] + 7) = 11779;
    LODWORD(__p[0]) = 6762087;
    v356 = __p;
    sub_235860FA8(v342, (uint64_t)__p, &v352);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    v335 = v354;
    v336 = *(_QWORD **)(v354 + 8);
    v337 = v336[11];
    if (v337)
      v338 = (_QWORD *)(v337 - 80);
    else
      v338 = 0;
    if (v338 != v336)
    {
      do
      {
        v339 = v338[11];
        if (v339)
          v336 = (_QWORD *)(v339 - 80);
        else
          v336 = 0;
        sub_2358688CC((uint64_t)v338);
        operator delete(v338);
        v338 = v336;
      }
      while (v336 != *(_QWORD **)(v335 + 8));
    }
    operator delete(v336);
    MEMORY[0x23B7D94C4](v335, 0x1020C402FC1992ELL);
    if (SHIBYTE(v353) < 0)
      operator delete((void *)v352);
    v27 = v343;
  }
  while (v343 != 5);
}

void sub_2358606BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::locale a27,uint64_t a28,uint64_t a29,uint64_t a30,std::locale a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::locale a72;

  std::locale::~locale(&a72);
  std::locale::~locale(&a31);
  std::locale::~locale(&a27);
  if (a40 < 0)
  {
    operator delete(__p);
    sub_23585D370(a12);
    _Unwind_Resume(a1);
  }
  sub_23585D370(a12);
  _Unwind_Resume(a1);
}

void sub_235860FA8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  int v6;
  void **v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23[2];
  uint64_t v24;
  void *__p;
  char v26;
  uint64_t v27;
  void *v28[2];
  uint64_t v29;
  void *__dst[2];
  uint64_t v31;
  char v32;
  char *v33;
  _QWORD *v34;

  v6 = *(char *)(a2 + 23);
  if (v6 < 0)
  {
    sub_23584B488(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
    LOBYTE(v6) = *(_BYTE *)(a2 + 23);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a2;
    v31 = *(_QWORD *)(a2 + 16);
  }
  v32 = *(_BYTE *)(a2 + 24);
  v7 = __dst;
  if (v31 < 0)
    v7 = (void **)__dst[0];
  if ((v6 & 0x80u) == 0)
    v8 = (void *)a2;
  else
    v8 = *(void **)a2;
  v33 = (char *)v7 + *(_QWORD *)(a2 + 32) - (_QWORD)v8;
  v9 = sub_23586AA4C(a1, (uint64_t)__dst);
  sub_2358691EC((uint64_t)v28, (uint64_t *)__dst);
  if (SHIBYTE(v29) < 0)
  {
    sub_23584B488(v23, v28[0], (unint64_t)v28[1]);
  }
  else
  {
    *(_OWORD *)v23 = *(_OWORD *)v28;
    v24 = v29;
  }
  sub_23585D9D0(&__p, a3);
  v10 = *(_QWORD *)(v9 + 24);
  v11 = *(_QWORD *)(v10 + 8);
  v34 = 0;
  v12 = sub_23586AE2C(v10 + 16, (const void **)v23, &v34);
  if (v12 == v34)
  {
    v13 = *(_QWORD **)(v10 + 8);
    v14 = v13[10];
    v13 += 10;
    v12[10] = v14;
    v12[11] = v13;
    v15 = v12 + 10;
    *v13 = v12 + 10;
    *(_QWORD *)(v12[10] + 8) = v12 + 10;
    ++*(_QWORD *)(v10 + 24);
    if (*(_QWORD *)(v10 + 8) != v11)
    {
      *(_QWORD *)(v12[10] + 8) = v12[11];
      *(_QWORD *)v12[11] = v12[10];
      v17 = *(_QWORD *)(v11 + 80);
      v16 = (_QWORD *)(v11 + 80);
      v12[10] = v17;
      v12[11] = v16;
      *v16 = v15;
      *(_QWORD *)(v12[10] + 8) = v15;
    }
  }
  v18 = v27;
  v19 = *(_QWORD **)(v27 + 8);
  v20 = v19[11];
  if (v20)
    v21 = (_QWORD *)(v20 - 80);
  else
    v21 = 0;
  if (v21 != v19)
  {
    do
    {
      v22 = v21[11];
      if (v22)
        v19 = (_QWORD *)(v22 - 80);
      else
        v19 = 0;
      sub_2358688CC((uint64_t)v21);
      operator delete(v21);
      v21 = v19;
    }
    while (v19 != *(_QWORD **)(v18 + 8));
  }
  operator delete(v19);
  MEMORY[0x23B7D94C4](v18, 0x1020C402FC1992ELL);
  if (v26 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v24) & 0x80000000) == 0)
    {
LABEL_25:
      if ((SHIBYTE(v29) & 0x80000000) == 0)
        goto LABEL_26;
      goto LABEL_30;
    }
  }
  else if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(v23[0]);
  if ((SHIBYTE(v29) & 0x80000000) == 0)
  {
LABEL_26:
    if ((SHIBYTE(v31) & 0x80000000) == 0)
      return;
LABEL_31:
    operator delete(__dst[0]);
    return;
  }
LABEL_30:
  operator delete(v28[0]);
  if (SHIBYTE(v31) < 0)
    goto LABEL_31;
}

void sub_2358611F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0)
  {
    operator delete(__p);
    if ((a30 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a30 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a25);
  _Unwind_Resume(exception_object);
}

void sub_235861290(uint64_t a1, uint64_t a2)
{
  std::string::size_type v3;
  __int128 v4;
  void *v5;
  int v6;
  size_t v7;
  unint64_t v8;
  std::string::value_type *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void **v13;
  int v14;
  __int128 v15;
  std::string *p_p;
  size_t size;
  int64_t v18;
  std::string *v19;
  std::string *v20;
  char *v21;
  int64_t v22;
  std::string *v23;
  char *v24;
  int64_t v26;
  std::string *v27;
  char *v28;
  int64_t v30;
  std::string *v31;
  char *v32;
  char *v34;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  int64_t v39;
  std::string *v40;
  char *v41;
  char *v43;
  std::string::size_type v45;
  std::string::size_type v46;
  void **v47;
  std::string v48;
  void *v49[2];
  __int16 v50;
  void **v51;
  void *v52[2];
  unsigned __int8 v53;
  __int128 *v54;
  char v55;
  std::string __p;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  sub_23585D42C(v52);
  v50 = 11790;
  strcpy((char *)v49, "<xmlattr>.fill");
  v51 = v49;
  sub_23586D9AC((uint64_t *)&v48, a2, (uint64_t)v49);
  v3 = v48.__r_.__value_.__r.__words[0];
  if (!v48.__r_.__value_.__r.__words[0])
    goto LABEL_6;
  v55 = 0;
  if (*(char *)(v48.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    sub_23584B488(&__p, *(void **)v48.__r_.__value_.__l.__data_, *(_QWORD *)(v48.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    v4 = *(_OWORD *)v48.__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v48.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v4;
  }
  v55 = 1;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_6:
    v55 = 0;
    if (((char)v50 & 0x80000000) == 0)
      goto LABEL_7;
LABEL_11:
    operator delete(v49[0]);
    if (v3)
      goto LABEL_8;
    goto LABEL_12;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  v55 = 0;
  if ((char)v50 < 0)
    goto LABEL_11;
LABEL_7:
  if (v3)
  {
LABEL_8:
    v50 = 11790;
    strcpy((char *)v49, "<xmlattr>.fill");
    v51 = v49;
    sub_235868A68(a2, (uint64_t)v49, (__int128 *)v52);
    if (((char)v50 & 0x80000000) == 0)
      goto LABEL_130;
    v5 = v49[0];
    goto LABEL_129;
  }
LABEL_12:
  v6 = (char)v53;
  if ((v53 & 0x80u) == 0)
    v7 = v53;
  else
    v7 = (size_t)v52[1];
  v8 = v7 + 5;
  if (v7 + 5 >= 0x7FFFFFFFFFFFFFF8)
    sub_23584B34C();
  if (v8 >= 0x17)
  {
    v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v10 = v8 | 7;
    v11 = v10 + 1;
    v12 = (char *)operator new(v10 + 1);
    v48.__r_.__value_.__l.__size_ = v7 + 5;
    v48.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    *(_DWORD *)v12 = 1819044198;
    v9 = v12 + 5;
    v12[4] = 58;
  }
  else
  {
    HIDWORD(v48.__r_.__value_.__r.__words[1]) = 0;
    v48.__r_.__value_.__r.__words[2] = 0;
    *((_BYTE *)&v48.__r_.__value_.__s + 23) = v7 + 5;
    *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 4) = 58;
    v9 = &v48.__r_.__value_.__s.__data_[5];
    LODWORD(v48.__r_.__value_.__l.__data_) = 1819044198;
    if (!v7)
      goto LABEL_26;
  }
  if (v6 >= 0)
    v13 = v52;
  else
    v13 = (void **)v52[0];
  memmove(v9, v13, v7);
LABEL_26:
  v9[v7] = 0;
  v50 = 11791;
  strcpy((char *)v49, "<xmlattr>.style");
  v51 = v49;
  sub_23586D9AC((uint64_t *)&v54, a2, (uint64_t)v49);
  v14 = (int)v54;
  if (v54)
  {
    v55 = 0;
    if (*((char *)v54 + 23) < 0)
    {
      sub_23584B488(&__p, *(void **)v54, *((_QWORD *)v54 + 1));
    }
    else
    {
      v15 = *v54;
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v54 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v15;
    }
    v14 = 1;
  }
  v55 = v14;
  if ((char)v50 < 0)
  {
    operator delete(v49[0]);
    if (!v55)
      goto LABEL_122;
  }
  else if (!v14)
  {
    goto LABEL_122;
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_23584BAC0((void **)&v48.__r_.__value_.__l.__data_, p_p, size);
  }
  else if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    sub_23584B9FC(&v48, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    v48 = __p;
  }
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
  else
    v18 = v48.__r_.__value_.__l.__size_;
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &v48;
  else
    v19 = (std::string *)v48.__r_.__value_.__r.__words[0];
  if (v18 >= 5)
  {
    v20 = v19;
    v21 = (char *)v19 + v18;
    v22 = v18;
    v23 = v19;
    while (1)
    {
      v24 = (char *)memchr(v23, 102, v22 - 4);
      if (!v24)
        goto LABEL_74;
      if (*(_DWORD *)v24 == 1819044198 && v24[4] == 58)
        break;
      v23 = (std::string *)(v24 + 1);
      v22 = v21 - (char *)v23;
      if (v21 - (char *)v23 < 5)
        goto LABEL_74;
    }
    if (v24 == v21 || v24 - (char *)v19 == -1)
      goto LABEL_74;
    if (v18 < 9)
      goto LABEL_83;
    v26 = v18;
    v27 = v19;
    while (1)
    {
      v28 = (char *)memchr(v27, 102, v26 - 8);
      if (!v28)
        goto LABEL_83;
      if (*(_QWORD *)v28 == 0x6E6F6E3A6C6C6966 && v28[8] == 101)
        break;
      v27 = (std::string *)(v28 + 1);
      v26 = v21 - (char *)v27;
      if (v21 - (char *)v27 < 9)
        goto LABEL_83;
    }
    if (v28 != v21 && v28 - (char *)v19 != -1)
    {
LABEL_74:
      if (v18 >= 7)
      {
        v30 = v18;
        v31 = v19;
        while (1)
        {
          v32 = (char *)memchr(v31, 115, v30 - 6);
          if (!v32)
            break;
          if (*(_DWORD *)v32 == 1869771891 && *(_DWORD *)(v32 + 3) == 979725167)
          {
            if (v32 == v21 || v32 - (char *)v19 == -1)
              goto LABEL_122;
            if (v18 < 11)
              goto LABEL_104;
            v39 = v18;
            v40 = v19;
            while (1)
            {
              v41 = (char *)memchr(v40, 115, v39 - 10);
              if (!v41)
                goto LABEL_104;
              if (*(_QWORD *)v41 == 0x6E3A656B6F727473 && *(_QWORD *)(v41 + 3) == 0x656E6F6E3A656B6FLL)
                break;
              v40 = (std::string *)(v41 + 1);
              v39 = v21 - (char *)v40;
              if (v21 - (char *)v40 < 11)
                goto LABEL_104;
            }
            if (v41 != v21 && v41 - (char *)v19 != -1)
              goto LABEL_122;
            do
            {
LABEL_104:
              v43 = (char *)memchr(v20, 115, v18 - 6);
              if (!v43)
                break;
              if (*(_DWORD *)v43 == 1869771891 && *(_DWORD *)(v43 + 3) == 979725167)
                goto LABEL_111;
              v20 = (std::string *)(v43 + 1);
              v18 = v21 - (v43 + 1);
            }
            while (v18 > 6);
            v43 = v21;
LABEL_111:
            v36 = v43 - (char *)v19 + 7;
            v37 = v43 == v21;
            v38 = 6;
            goto LABEL_112;
          }
          v31 = (std::string *)(v32 + 1);
          v30 = v21 - (char *)v31;
          if (v21 - (char *)v31 < 7)
            goto LABEL_122;
        }
      }
      goto LABEL_122;
    }
    do
    {
LABEL_83:
      v34 = (char *)memchr(v20, 102, v18 - 4);
      if (!v34)
        break;
      if (*(_DWORD *)v34 == 1819044198 && v34[4] == 58)
        goto LABEL_90;
      v20 = (std::string *)(v34 + 1);
      v18 = v21 - (v34 + 1);
    }
    while (v18 > 4);
    v34 = v21;
LABEL_90:
    v36 = v34 - (char *)v19 + 5;
    v37 = v34 == v21;
    v38 = 4;
LABEL_112:
    if (v37)
      v45 = v38;
    else
      v45 = v36;
    if ((v53 & 0x80u) == 0)
      v46 = v53;
    else
      v46 = (std::string::size_type)v52[1];
    if ((v53 & 0x80u) == 0)
      v47 = v52;
    else
      v47 = (void **)v52[0];
    std::string::replace(&v48, v45, v46, (const std::string::value_type *)v47, v46);
  }
LABEL_122:
  v50 = 11791;
  strcpy((char *)v49, "<xmlattr>.style");
  v51 = v49;
  sub_235868A68(a2, (uint64_t)v49, (__int128 *)&v48);
  if ((char)v50 < 0)
    operator delete(v49[0]);
  if (v55 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
  {
    v5 = (void *)v48.__r_.__value_.__r.__words[0];
LABEL_129:
    operator delete(v5);
  }
LABEL_130:
  if ((char)v53 < 0)
    operator delete(v52[0]);
}

void sub_2358618EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_objecta, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a31 && a37 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(exception_objecta);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t sub_235861980(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 96);
  if (v2)
    operator delete(v2);
  v3 = *(void **)(a1 + 72);
  if (v3)
    operator delete(v3);
  v4 = *(void **)(a1 + 48);
  if (v4)
    operator delete(v4);
  v5 = *(void **)(a1 + 24);
  if (v5)
    operator delete(v5);
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_2358619DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  _QWORD *v11;
  int v12;
  int v13;
  int v14;
  char *locale;
  uint64_t v16;
  uint64_t v17;
  std::locale::__imp *v18;
  _QWORD *v19;
  const void **v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  std::locale::__imp *v26;
  std::string::size_type size;
  size_t v28;
  unint64_t v29;
  std::string *v30;
  size_t v31;
  unint64_t v32;
  std::string *v33;
  std::string::size_type v34;
  _BYTE *v35;
  unint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  std::string::size_type v39;
  std::string *p_str;
  size_t v41;
  std::string::size_type v42;
  size_t v43;
  unint64_t v44;
  std::string *v45;
  size_t v46;
  unint64_t v47;
  std::string *v48;
  size_t v49;
  _BYTE *v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  std::string::size_type v54;
  size_t v55;
  std::string::size_type v56;
  unint64_t v57;
  std::string *v58;
  size_t v59;
  unint64_t v60;
  std::string *v61;
  std::string::size_type v62;
  _BYTE *v63;
  unint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  std::string::size_type v67;
  std::string *v68;
  size_t v69;
  std::string::size_type v70;
  size_t v71;
  unint64_t v72;
  std::string *v73;
  size_t v74;
  unint64_t v75;
  std::string *v76;
  size_t v77;
  _BYTE *v78;
  unint64_t v79;
  uint64_t v80;
  void *v81;
  std::string::size_type v82;
  size_t v83;
  std::locale::__imp *v84;
  unint64_t v85;
  void *v86;
  size_t v87;
  unint64_t v88;
  void *v89;
  std::locale::__imp *v90;
  _BYTE *v91;
  unint64_t v92;
  uint64_t v93;
  std::locale::__imp *v94;
  std::locale::__imp *v95;
  std::string *v96;
  size_t v97;
  unint64_t v98;
  size_t locale_high;
  unint64_t v100;
  void *v101;
  size_t v102;
  unint64_t v103;
  char *v104;
  size_t v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  std::locale::__imp *v109;
  std::locale::__imp *v110;
  _BOOL4 v111;
  char *v112;
  void **v113;
  uint64_t v114;
  uint64_t v115;
  std::locale::__imp *v116;
  _QWORD *v117;
  const void **v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  __int128 *v126;
  __int128 *v127;
  __int128 *v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  std::locale::__imp *v133;
  std::locale *v134;
  std::locale::__imp *v135;
  std::locale::__imp *v136;
  std::ios_base *v137;
  std::locale::__imp *v138;
  std::locale::__imp *v139;
  std::locale::__imp *v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  _QWORD *v146;
  std::ios_base *v147;
  __int128 *v148;
  char v149;
  uint64_t v150;
  unint64_t v151;
  __int128 *v152;
  unint64_t v153;
  unint64_t v154;
  size_t v155;
  unint64_t v156;
  size_t v157;
  unint64_t v158;
  __int128 *v159;
  size_t v160;
  unint64_t v161;
  _BYTE *v162;
  __int128 *v164;
  unint64_t v165;
  uint64_t v166;
  __int128 *v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  std::locale::__imp *v171;
  std::ios_base *v172;
  std::ios_base *v173;
  std::ios_base_vtbl *v174;
  void *v175;
  double *v176;
  double *v177;
  double *v178;
  unint64_t v179;
  double *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  const std::locale::facet *v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  unsigned __int8 *v188;
  unsigned __int8 v189;
  int v190;
  std::string *v191;
  size_t v192;
  size_t v193;
  unint64_t v194;
  uint64_t v195;
  std::string *v196;
  std::string *v197;
  unsigned __int8 *v198;
  _QWORD *v199;
  uint64_t v200;
  int v201;
  std::locale::__imp *v202;
  double v203;
  double v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  _BYTE *v208;
  double *v209;
  int64_t v210;
  unint64_t v211;
  double *v212;
  uint64_t v213;
  double *v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  __int128 v220;
  double *v221;
  double v222;
  double v223;
  double v224;
  double v225;
  char *v226;
  double v227;
  size_t v228;
  size_t v229;
  std::string::size_type v230;
  std::string *p_src;
  std::string::size_type v232;
  uint64_t v233;
  _QWORD *v234;
  size_t v235;
  unint64_t v236;
  std::string *v237;
  char *v238;
  BOOL v239;
  uint64_t v240;
  size_t v241;
  unint64_t v242;
  uint64_t v243;
  _WORD *v244;
  std::string::size_type v245;
  _BYTE *v246;
  std::string::size_type v247;
  std::string *v248;
  size_t v249;
  unint64_t v250;
  size_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  void *v255;
  std::string::size_type v256;
  _BYTE *v257;
  std::string::size_type v258;
  std::string *v259;
  size_t v260;
  std::string::size_type v261;
  size_t v262;
  unint64_t v263;
  std::string *v264;
  size_t v265;
  unint64_t v266;
  std::string *v267;
  size_t v268;
  _BYTE *v269;
  unint64_t v270;
  uint64_t v271;
  void *v272;
  std::string::size_type v273;
  size_t v274;
  std::string::size_type v275;
  std::string *v276;
  std::string::size_type v277;
  size_t v278;
  unint64_t v279;
  std::string *v280;
  unint64_t v281;
  uint64_t v282;
  void *v283;
  std::string::size_type v284;
  _BYTE *v285;
  size_t v286;
  std::string *v287;
  size_t v288;
  std::string::size_type v289;
  size_t v290;
  unint64_t v291;
  std::string *v292;
  size_t v293;
  unint64_t v294;
  std::string *v295;
  size_t v296;
  _BYTE *v297;
  unint64_t v298;
  uint64_t v299;
  void *v300;
  std::string::size_type v301;
  std::string::size_type v302;
  std::string *v303;
  size_t v304;
  unint64_t v305;
  size_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  void *v310;
  std::string::size_type v311;
  _BYTE *v312;
  std::string::size_type v313;
  std::string *v314;
  size_t v315;
  std::string::size_type v316;
  size_t v317;
  unint64_t v318;
  std::string *v319;
  size_t v320;
  unint64_t v321;
  std::string *v322;
  size_t v323;
  _BYTE *v324;
  unint64_t v325;
  uint64_t v326;
  void *v327;
  std::string::size_type v328;
  std::string::size_type v329;
  std::string *v330;
  size_t v331;
  unint64_t v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t v335;
  void *v336;
  std::string::size_type v337;
  _BYTE *v338;
  std::string::size_type v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  int v346;
  _DWORD *v347;
  uint64_t v348;
  __int128 v349;
  uint64_t v350;
  __int128 v351;
  uint64_t v352;
  __int128 v353;
  std::string::size_type v354;
  std::string *v355;
  std::string::size_type v356;
  int v357;
  BOOL v358;
  uint64_t v359;
  std::string::size_type v360;
  std::string *v361;
  unint64_t v362;
  unint64_t v363;
  int v364;
  std::string::size_type v365;
  std::string *v366;
  unsigned int v367;
  int v368;
  std::string *v369;
  int data;
  int v371;
  BOOL v372;
  uint64_t v373;
  uint64_t v374;
  __int128 v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  _QWORD *v379;
  uint64_t v380;
  _QWORD *v381;
  uint64_t v382;
  std::locale::__imp *v383;
  uint64_t v384;
  uint64_t v385;
  std::locale::__imp *v386;
  __int128 v387;
  std::locale::__imp *v388;
  _QWORD *v389;
  uint64_t v390;
  _QWORD *v391;
  uint64_t v392;
  uint64_t v393;
  _QWORD *v394;
  uint64_t v395;
  _QWORD *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  _QWORD *v400;
  uint64_t v401;
  _QWORD *v402;
  uint64_t v403;
  _QWORD *v404;
  uint64_t v405;
  uint64_t v406;
  _QWORD *v407;
  uint64_t v408;
  _QWORD *v409;
  uint64_t v410;
  uint64_t v411;
  _QWORD *v412;
  uint64_t v413;
  _QWORD *v414;
  uint64_t v415;
  uint64_t v416;
  double *v420;
  uint64_t v422;
  std::locale::__imp *v423;
  uint64_t v424;
  std::locale::__imp *v425;
  double *v426;
  std::locale::__imp *__val;
  int __vala[2];
  std::string v429;
  uint64_t v430;
  std::string v431;
  std::locale::__imp *v432;
  std::string v433;
  uint64_t v434;
  void *v435[2];
  uint64_t v436;
  uint64_t v437;
  std::string v438;
  std::string v439;
  std::string v440;
  std::string __src;
  std::string v442;
  std::string v443;
  std::string v444;
  std::string v445;
  std::string v446;
  std::string v447;
  std::string v448;
  std::string __str;
  void *__p[4];
  void **v451;
  __int128 *v452;
  __int128 *v453;
  char *v454;
  __int128 *v455;
  char *v456;
  char *v457;
  __int128 v458;
  __int128 v459;
  int v460;
  uint64_t v461[20];
  std::string v462;
  std::locale v463[2];
  int64_t v464;
  uint64_t v465;
  std::locale __dst[4];
  _QWORD v467[7];
  __int128 v468;
  __int128 v469;
  int v470;
  uint64_t v471[20];
  std::locale v472[8];

  v472[5] = *(std::locale *)MEMORY[0x24BDAC8D0];
  v435[0] = 0;
  v435[1] = 0;
  v436 = 0;
  v10 = operator new();
  v11 = operator new(0x60uLL);
  v11[7] = 0;
  *(_QWORD *)(v10 + 8) = v11;
  v11[8] = v11 + 7;
  v11[9] = v11 + 7;
  v11[10] = v11 + 10;
  v11[11] = v11 + 10;
  *(_QWORD *)(v10 + 24) = 0;
  v437 = v10;
  if (*(_QWORD *)(*(_QWORD *)(a6 + 24) + 24))
    v12 = -50;
  else
    v12 = 0;
  if (*(_QWORD *)(*(_QWORD *)(a6 + 24) + 24))
    v13 = 900;
  else
    v13 = 800;
  if (*(_QWORD *)(*(_QWORD *)(a6 + 24) + 24))
    v14 = 1100;
  else
    v14 = 800;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_2358911D0;
  strcpy((char *)__p[0], "svg.<xmlattr>.data-design");
  LOBYTE(__p[3]) = 46;
  v451 = (void **)__p[0];
  MEMORY[0x23B7D93F8](v463);
  std::locale::locale(v472, v463);
  sub_23584B488(__dst, __p[0], 0x19uLL);
  LOBYTE(__dst[3].__locale_) = 46;
  locale = (char *)__dst;
  if (SHIBYTE(__dst[2].__locale_) < 0)
    locale = (char *)__dst[0].__locale_;
  v467[0] = &locale[(char *)v451 - (char *)__p[0]];
  v16 = sub_235869118((uint64_t)v435, (uint64_t)__dst);
  v17 = v16;
  if (SHIBYTE(__dst[2].__locale_) < 0)
  {
    operator delete(__dst[0].__locale_);
    if (v17)
      goto LABEL_14;
  }
  else if (v16)
  {
LABEL_14:
    std::locale::locale(__dst, v472);
    sub_235876578(v17, __dst);
    goto LABEL_25;
  }
  memset(__dst, 0, 24);
  v18 = (std::locale::__imp *)operator new();
  v19 = operator new(0x60uLL);
  *((_QWORD *)v18 + 1) = v19;
  v19[7] = 0;
  v19[8] = v19 + 7;
  v19[9] = v19 + 7;
  v19[10] = v19 + 10;
  v19[11] = v19 + 10;
  *((_QWORD *)v18 + 3) = 0;
  __dst[3].__locale_ = v18;
  v20 = sub_235868DE8((uint64_t)v435, (uint64_t)__p, (__int128 *)__dst);
  v21 = (_QWORD *)*((_QWORD *)v18 + 1);
  v22 = v21[11];
  if (v22)
    v23 = (_QWORD *)(v22 - 80);
  else
    v23 = 0;
  if (v23 != v21)
  {
    do
    {
      v24 = v23[11];
      if (v24)
        v21 = (_QWORD *)(v24 - 80);
      else
        v21 = 0;
      sub_2358688CC((uint64_t)v23);
      operator delete(v23);
      v23 = v21;
    }
    while (v21 != *((_QWORD **)v18 + 1));
  }
  operator delete(v21);
  MEMORY[0x23B7D94C4](v18, 0x1020C402FC1992ELL);
  std::locale::locale(__dst, v472);
  sub_235876578((uint64_t)v20, __dst);
LABEL_25:
  std::locale::~locale(__dst);
  std::locale::~locale(v472);
  std::locale::~locale(v463);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    v25 = *(char *)(a7 + 23);
    if ((v25 & 0x80000000) == 0)
    {
LABEL_27:
      if (!(_BYTE)v25)
        goto LABEL_33;
      goto LABEL_31;
    }
  }
  else
  {
    v25 = *(char *)(a7 + 23);
    if ((v25 & 0x80000000) == 0)
      goto LABEL_27;
  }
  if (!*(_QWORD *)(a7 + 8))
    goto LABEL_33;
LABEL_31:
  v26 = (std::locale::__imp *)operator new(0x20uLL);
  __dst[0].__locale_ = v26;
  *(_OWORD *)&__dst[1].__locale_ = xmmword_2358911E0;
  strcpy((char *)v26, "svg.<xmlattr>.data-payload");
  LOBYTE(__dst[3].__locale_) = 46;
  v467[0] = v26;
  sub_235868A68((uint64_t)v435, (uint64_t)__dst, (__int128 *)a7);
  if (SHIBYTE(__dst[2].__locale_) < 0)
    operator delete(__dst[0].__locale_);
LABEL_33:
  *(_WORD *)((char *)&__dst[2].__locale_ + 7) = 11797;
  strcpy((char *)__dst, "svg.<xmlattr>.viewBox");
  v467[0] = __dst;
  std::to_string(&v462, v12);
  size = HIBYTE(v462.__r_.__value_.__r.__words[2]);
  if ((v462.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = 22;
  else
    v28 = (v462.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v462.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v462.__r_.__value_.__l.__size_;
  if (v28 == size)
  {
    if (v28 == 0x7FFFFFFFFFFFFFF6)
      sub_23584B34C();
    v29 = v28 + 1;
    if ((v462.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = &v462;
    else
      v30 = (std::string *)v462.__r_.__value_.__r.__words[0];
    v31 = 0x7FFFFFFFFFFFFFF7;
    if (v28 < 0x3FFFFFFFFFFFFFF3)
    {
      v32 = 2 * v28;
      if (v29 > 2 * v28)
        v32 = v28 + 1;
      if (v32 >= 0x17)
      {
        v36 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
        v37 = v32 | 7;
        if (v37 == 23)
          v37 = v36;
        v31 = v37 + 1;
      }
      else
      {
        v31 = 23;
      }
    }
    v38 = operator new(v31);
    v39 = (std::string::size_type)v38;
    if (v28)
    {
      memmove(v38, v30, v28);
      *(_BYTE *)(v39 + v28) = 32;
      if (v28 == 22)
        goto LABEL_62;
    }
    else
    {
      *v38 = 32;
    }
    operator delete(v30);
LABEL_62:
    v462.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
    v462.__r_.__value_.__r.__words[0] = v39;
    v462.__r_.__value_.__l.__size_ = v28 + 1;
    v35 = (_BYTE *)(v39 + v29);
    goto LABEL_63;
  }
  v33 = &v462;
  if ((v462.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v33 = (std::string *)v462.__r_.__value_.__r.__words[0];
  v33->__r_.__value_.__s.__data_[size] = 32;
  v34 = size + 1;
  if (SHIBYTE(v462.__r_.__value_.__r.__words[2]) < 0)
    v462.__r_.__value_.__l.__size_ = v34;
  else
    *((_BYTE *)&v462.__r_.__value_.__s + 23) = v34 & 0x7F;
  v35 = (char *)v33 + v34;
LABEL_63:
  v422 = a6;
  v424 = a2;
  *v35 = 0;
  v429 = v462;
  memset(&v462, 0, sizeof(v462));
  std::to_string(&__str, v12);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    v41 = __str.__r_.__value_.__l.__size_;
  if ((v429.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = 22;
  else
    v42 = (v429.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v429.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v43 = HIBYTE(v429.__r_.__value_.__r.__words[2]);
  else
    v43 = v429.__r_.__value_.__l.__size_;
  if (v42 - v43 >= v41)
  {
    if (!v41)
      goto LABEL_101;
    if ((v429.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = &v429;
    else
      v48 = (std::string *)v429.__r_.__value_.__r.__words[0];
    memmove((char *)v48 + v43, p_str, v41);
    v49 = v43 + v41;
    if (SHIBYTE(v429.__r_.__value_.__r.__words[2]) < 0)
      v429.__r_.__value_.__l.__size_ = v43 + v41;
    else
      *((_BYTE *)&v429.__r_.__value_.__s + 23) = v49 & 0x7F;
    v50 = (char *)v48 + v49;
  }
  else
  {
    v44 = v43 + v41;
    if (0x7FFFFFFFFFFFFFF6 - v42 < v43 + v41 - v42)
      sub_23584B34C();
    if ((v429.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = &v429;
    else
      v45 = (std::string *)v429.__r_.__value_.__r.__words[0];
    v46 = 0x7FFFFFFFFFFFFFF7;
    if (v42 < 0x3FFFFFFFFFFFFFF3)
    {
      v47 = 2 * v42;
      if (v44 > 2 * v42)
        v47 = v43 + v41;
      if (v47 >= 0x17)
      {
        v51 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
        v52 = v47 | 7;
        if (v52 == 23)
          v52 = v51;
        v46 = v52 + 1;
      }
      else
      {
        v46 = 23;
      }
    }
    v53 = operator new(v46);
    v54 = (std::string::size_type)v53;
    if (v43)
      memmove(v53, v45, v43);
    memcpy((void *)(v54 + v43), p_str, v41);
    if (v42 != 22)
      operator delete(v45);
    v429.__r_.__value_.__l.__size_ = v43 + v41;
    v429.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
    v429.__r_.__value_.__r.__words[0] = v54;
    v50 = (_BYTE *)(v54 + v44);
  }
  *v50 = 0;
LABEL_101:
  v431 = v429;
  memset(&v429, 0, sizeof(v429));
  if ((v431.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v55 = 22;
  else
    v55 = (v431.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v431.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v56 = HIBYTE(v431.__r_.__value_.__r.__words[2]);
  else
    v56 = v431.__r_.__value_.__l.__size_;
  if (v55 == v56)
  {
    if (v55 == 0x7FFFFFFFFFFFFFF6)
      sub_23584B34C();
    v57 = v55 + 1;
    if ((v431.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v58 = &v431;
    else
      v58 = (std::string *)v431.__r_.__value_.__r.__words[0];
    v59 = 0x7FFFFFFFFFFFFFF7;
    if (v55 < 0x3FFFFFFFFFFFFFF3)
    {
      v60 = 2 * v55;
      if (v57 > 2 * v55)
        v60 = v55 + 1;
      if (v60 >= 0x17)
      {
        v64 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
        v65 = v60 | 7;
        if (v65 == 23)
          v65 = v64;
        v59 = v65 + 1;
      }
      else
      {
        v59 = 23;
      }
    }
    v66 = operator new(v59);
    v67 = (std::string::size_type)v66;
    if (v55)
    {
      memmove(v66, v58, v55);
      *(_BYTE *)(v67 + v55) = 32;
      if (v55 == 22)
        goto LABEL_131;
    }
    else
    {
      *v66 = 32;
    }
    operator delete(v58);
LABEL_131:
    v431.__r_.__value_.__l.__size_ = v55 + 1;
    v431.__r_.__value_.__r.__words[2] = v59 | 0x8000000000000000;
    v431.__r_.__value_.__r.__words[0] = v67;
    v63 = (_BYTE *)(v67 + v57);
    goto LABEL_132;
  }
  v61 = &v431;
  if ((v431.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v61 = (std::string *)v431.__r_.__value_.__r.__words[0];
  v61->__r_.__value_.__s.__data_[v56] = 32;
  v62 = v56 + 1;
  if (SHIBYTE(v431.__r_.__value_.__r.__words[2]) < 0)
    v431.__r_.__value_.__l.__size_ = v62;
  else
    *((_BYTE *)&v431.__r_.__value_.__s + 23) = v62 & 0x7F;
  v63 = (char *)v61 + v62;
LABEL_132:
  *v63 = 0;
  v433 = v431;
  memset(&v431, 0, sizeof(v431));
  std::to_string(&v448, v13);
  if ((v448.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v68 = &v448;
  else
    v68 = (std::string *)v448.__r_.__value_.__r.__words[0];
  if ((v448.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v69 = HIBYTE(v448.__r_.__value_.__r.__words[2]);
  else
    v69 = v448.__r_.__value_.__l.__size_;
  if ((v433.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v70 = 22;
  else
    v70 = (v433.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v433.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v71 = HIBYTE(v433.__r_.__value_.__r.__words[2]);
  else
    v71 = v433.__r_.__value_.__l.__size_;
  if (v70 - v71 >= v69)
  {
    if (!v69)
      goto LABEL_170;
    if ((v433.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v76 = &v433;
    else
      v76 = (std::string *)v433.__r_.__value_.__r.__words[0];
    memmove((char *)v76 + v71, v68, v69);
    v77 = v71 + v69;
    if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
      v433.__r_.__value_.__l.__size_ = v71 + v69;
    else
      *((_BYTE *)&v433.__r_.__value_.__s + 23) = v77 & 0x7F;
    v78 = (char *)v76 + v77;
  }
  else
  {
    v72 = v71 + v69;
    if (0x7FFFFFFFFFFFFFF6 - v70 < v71 + v69 - v70)
      sub_23584B34C();
    if ((v433.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v73 = &v433;
    else
      v73 = (std::string *)v433.__r_.__value_.__r.__words[0];
    v74 = 0x7FFFFFFFFFFFFFF7;
    if (v70 < 0x3FFFFFFFFFFFFFF3)
    {
      v75 = 2 * v70;
      if (v72 > 2 * v70)
        v75 = v71 + v69;
      if (v75 >= 0x17)
      {
        v79 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
        v80 = v75 | 7;
        if (v80 == 23)
          v80 = v79;
        v74 = v80 + 1;
      }
      else
      {
        v74 = 23;
      }
    }
    v81 = operator new(v74);
    v82 = (std::string::size_type)v81;
    if (v71)
      memmove(v81, v73, v71);
    memcpy((void *)(v82 + v71), v68, v69);
    if (v70 != 22)
      operator delete(v73);
    v433.__r_.__value_.__l.__size_ = v71 + v69;
    v433.__r_.__value_.__r.__words[2] = v74 | 0x8000000000000000;
    v433.__r_.__value_.__r.__words[0] = v82;
    v78 = (_BYTE *)(v82 + v72);
  }
  *v78 = 0;
LABEL_170:
  v464 = v433.__r_.__value_.__r.__words[2];
  *(_OWORD *)&v463[0].__locale_ = *(_OWORD *)&v433.__r_.__value_.__l.__data_;
  memset(&v433, 0, sizeof(v433));
  if (v464 >= 0)
    v83 = 22;
  else
    v83 = (v464 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v464 >= 0)
    v84 = (std::locale::__imp *)HIBYTE(v464);
  else
    v84 = v463[1].__locale_;
  if ((std::locale::__imp *)v83 == v84)
  {
    if (v83 == 0x7FFFFFFFFFFFFFF6)
      sub_23584B34C();
    v85 = v83 + 1;
    if (v464 >= 0)
      v86 = v463;
    else
      v86 = v463[0].__locale_;
    v87 = 0x7FFFFFFFFFFFFFF7;
    if (v83 < 0x3FFFFFFFFFFFFFF3)
    {
      v88 = 2 * v83;
      if (v85 > 2 * v83)
        v88 = v83 + 1;
      if (v88 >= 0x17)
      {
        v92 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
        v93 = v88 | 7;
        if (v93 == 23)
          v93 = v92;
        v87 = v93 + 1;
      }
      else
      {
        v87 = 23;
      }
    }
    v94 = (std::locale::__imp *)operator new(v87);
    v95 = v94;
    if (v83)
    {
      memmove(v94, v86, v83);
      *((_BYTE *)v95 + v83) = 32;
      if (v83 == 22)
        goto LABEL_200;
    }
    else
    {
      *(_BYTE *)v94 = 32;
    }
    operator delete(v86);
LABEL_200:
    v464 = v87 | 0x8000000000000000;
    v463[0].__locale_ = v95;
    v463[1].__locale_ = (std::locale::__imp *)(v83 + 1);
    v91 = (char *)v95 + v85;
    goto LABEL_201;
  }
  v89 = v463;
  if (v464 < 0)
    v89 = v463[0].__locale_;
  *((_BYTE *)v84 + (_QWORD)v89) = 32;
  v90 = (std::locale::__imp *)((char *)v84 + 1);
  if (SHIBYTE(v464) < 0)
    v463[1].__locale_ = v90;
  else
    HIBYTE(v464) = v90 & 0x7F;
  v91 = (char *)v90 + (_QWORD)v89;
LABEL_201:
  *v91 = 0;
  *(_OWORD *)&v472[0].__locale_ = *(_OWORD *)&v463[0].__locale_;
  v472[2].__locale_ = (std::locale::__imp *)v464;
  v464 = 0;
  v463[0].__locale_ = 0;
  v463[1].__locale_ = 0;
  std::to_string(&v447, v14);
  if ((v447.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v96 = &v447;
  else
    v96 = (std::string *)v447.__r_.__value_.__r.__words[0];
  if ((v447.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v97 = HIBYTE(v447.__r_.__value_.__r.__words[2]);
  else
    v97 = v447.__r_.__value_.__l.__size_;
  if (SHIBYTE(v472[2].__locale_) >= 0)
    v98 = 22;
  else
    v98 = ((uint64_t)v472[2].__locale_ & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (SHIBYTE(v472[2].__locale_) >= 0)
    locale_high = HIBYTE(v472[2].__locale_);
  else
    locale_high = (size_t)v472[1].__locale_;
  if (v98 - locale_high >= v97)
  {
    if (!v97)
      goto LABEL_239;
    if (SHIBYTE(v472[2].__locale_) >= 0)
      v104 = (char *)v472;
    else
      v104 = (char *)v472[0].__locale_;
    memmove(&v104[locale_high], v96, v97);
    v105 = locale_high + v97;
    if (SHIBYTE(v472[2].__locale_) < 0)
      v472[1].__locale_ = (std::locale::__imp *)(locale_high + v97);
    else
      HIBYTE(v472[2].__locale_) = v105 & 0x7F;
    v106 = &v104[v105];
  }
  else
  {
    v100 = locale_high + v97;
    if (0x7FFFFFFFFFFFFFF6 - v98 < locale_high + v97 - v98)
      sub_23584B34C();
    if (SHIBYTE(v472[2].__locale_) >= 0)
      v101 = v472;
    else
      v101 = v472[0].__locale_;
    v102 = 0x7FFFFFFFFFFFFFF7;
    if (v98 < 0x3FFFFFFFFFFFFFF3)
    {
      v103 = 2 * v98;
      if (v100 > 2 * v98)
        v103 = locale_high + v97;
      if (v103 >= 0x17)
      {
        v107 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
        v108 = v103 | 7;
        if (v108 == 23)
          v108 = v107;
        v102 = v108 + 1;
      }
      else
      {
        v102 = 23;
      }
    }
    v109 = (std::locale::__imp *)operator new(v102);
    v110 = v109;
    if (locale_high)
      memmove(v109, v101, locale_high);
    memcpy((char *)v110 + locale_high, v96, v97);
    if (v98 != 22)
      operator delete(v101);
    v472[1].__locale_ = (std::locale::__imp *)(locale_high + v97);
    v472[2].__locale_ = (std::locale::__imp *)(v102 | 0x8000000000000000);
    v472[0].__locale_ = v110;
    v106 = (char *)v110 + v100;
  }
  *v106 = 0;
LABEL_239:
  *(_OWORD *)__p = *(_OWORD *)&v472[0].__locale_;
  __p[2] = v472[2].__locale_;
  memset(v472, 0, 24);
  sub_235868A68((uint64_t)v435, (uint64_t)__dst, (__int128 *)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v447.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_241:
      if ((SHIBYTE(v472[2].__locale_) & 0x80000000) == 0)
        goto LABEL_242;
      goto LABEL_254;
    }
  }
  else if ((SHIBYTE(v447.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_241;
  }
  operator delete(v447.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v472[2].__locale_) & 0x80000000) == 0)
  {
LABEL_242:
    if ((SHIBYTE(v464) & 0x80000000) == 0)
      goto LABEL_243;
    goto LABEL_255;
  }
LABEL_254:
  operator delete(v472[0].__locale_);
  if ((SHIBYTE(v464) & 0x80000000) == 0)
  {
LABEL_243:
    if ((SHIBYTE(v448.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_244;
    goto LABEL_256;
  }
LABEL_255:
  operator delete(v463[0].__locale_);
  if ((SHIBYTE(v448.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_244:
    if ((SHIBYTE(v433.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_245;
    goto LABEL_257;
  }
LABEL_256:
  operator delete(v448.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v433.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_245:
    if ((SHIBYTE(v431.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_246;
    goto LABEL_258;
  }
LABEL_257:
  operator delete(v433.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v431.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_246:
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_247;
    goto LABEL_259;
  }
LABEL_258:
  operator delete(v431.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_247:
    if ((SHIBYTE(v429.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_248;
    goto LABEL_260;
  }
LABEL_259:
  operator delete(__str.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v429.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_248:
    if ((SHIBYTE(v462.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_249;
LABEL_261:
    operator delete(v462.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst[2].__locale_) & 0x80000000) == 0)
      goto LABEL_250;
    goto LABEL_262;
  }
LABEL_260:
  operator delete(v429.__r_.__value_.__l.__data_);
  if (SHIBYTE(v462.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_261;
LABEL_249:
  if ((SHIBYTE(__dst[2].__locale_) & 0x80000000) == 0)
    goto LABEL_250;
LABEL_262:
  operator delete(__dst[0].__locale_);
LABEL_250:
  *(_WORD *)((char *)&__p[2] + 7) = 11795;
  strcpy((char *)__p, "svg.<xmlattr>.xmlns");
  v451 = __p;
  MEMORY[0x23B7D93F8](v463);
  std::locale::locale(v472, v463);
  if (SHIBYTE(__p[2]) < 0)
  {
    sub_23584B488(__dst, __p[0], (unint64_t)__p[1]);
    v111 = SHIBYTE(__p[2]) < 0;
  }
  else
  {
    v111 = 0;
    *(_OWORD *)&__dst[0].__locale_ = *(_OWORD *)__p;
    __dst[2] = (std::locale)__p[2];
  }
  LOBYTE(__dst[3].__locale_) = __p[3];
  v112 = (char *)__dst;
  if (SHIBYTE(__dst[2].__locale_) < 0)
    v112 = (char *)__dst[0].__locale_;
  v358 = !v111;
  v113 = __p;
  if (!v358)
    v113 = (void **)__p[0];
  v467[0] = &v112[(char *)v451 - (char *)v113];
  v114 = sub_235869118((uint64_t)v435, (uint64_t)__dst);
  v115 = v114;
  if (SHIBYTE(__dst[2].__locale_) < 0)
  {
    operator delete(__dst[0].__locale_);
    if (v115)
      goto LABEL_270;
  }
  else if (v114)
  {
LABEL_270:
    std::locale::locale(__dst, v472);
    sub_235876AA4(v115, __dst);
    goto LABEL_281;
  }
  memset(__dst, 0, 24);
  v116 = (std::locale::__imp *)operator new();
  v117 = operator new(0x60uLL);
  *((_QWORD *)v116 + 1) = v117;
  v117[7] = 0;
  v117[8] = v117 + 7;
  v117[9] = v117 + 7;
  v117[10] = v117 + 10;
  v117[11] = v117 + 10;
  *((_QWORD *)v116 + 3) = 0;
  __dst[3].__locale_ = v116;
  v118 = sub_235868DE8((uint64_t)v435, (uint64_t)__p, (__int128 *)__dst);
  v119 = (_QWORD *)*((_QWORD *)v116 + 1);
  v120 = v119[11];
  if (v120)
    v121 = (_QWORD *)(v120 - 80);
  else
    v121 = 0;
  if (v121 != v119)
  {
    do
    {
      v122 = v121[11];
      if (v122)
        v119 = (_QWORD *)(v122 - 80);
      else
        v119 = 0;
      sub_2358688CC((uint64_t)v121);
      operator delete(v121);
      v121 = v119;
    }
    while (v119 != *((_QWORD **)v116 + 1));
  }
  operator delete(v119);
  MEMORY[0x23B7D94C4](v116, 0x1020C402FC1992ELL);
  std::locale::locale(__dst, v472);
  sub_235876AA4((uint64_t)v118, __dst);
LABEL_281:
  std::locale::~locale(__dst);
  std::locale::~locale(v472);
  std::locale::~locale(v463);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  strcpy((char *)&v433, "App Clip Code");
  *((_BYTE *)&v433.__r_.__value_.__s + 23) = 13;
  v123 = operator new();
  v124 = operator new(0x60uLL);
  v124[7] = 0;
  *(_QWORD *)(v123 + 8) = v124;
  v124[8] = v124 + 7;
  v124[9] = v124 + 7;
  v124[10] = v124 + 10;
  v124[11] = v124 + 10;
  *(_QWORD *)(v123 + 24) = 0;
  v434 = v123;
  *(_WORD *)((char *)&__dst[2].__locale_ + 7) = 11785;
  strcpy((char *)__dst, "svg.title");
  v467[0] = __dst;
  sub_235860FA8((uint64_t)v435, (uint64_t)__dst, (__int128 *)&v433);
  if (SHIBYTE(__dst[2].__locale_) < 0)
  {
    operator delete(__dst[0].__locale_);
    v125 = *(_QWORD *)(*(_QWORD *)(v422 + 24) + 24);
    if (!v125)
      goto LABEL_289;
  }
  else
  {
    v125 = *(_QWORD *)(*(_QWORD *)(v422 + 24) + 24);
    if (!v125)
      goto LABEL_289;
  }
  *(_WORD *)((char *)&__dst[2].__locale_ + 7) = 11781;
  strcpy((char *)__dst, "svg.g");
  v467[0] = __dst;
  *(_WORD *)((char *)&__p[2] + 7) = 11777;
  LOWORD(__p[0]) = 103;
  v451 = __p;
  v126 = (__int128 *)sub_23585D828(v422, (uint64_t)__p);
  sub_235860FA8((uint64_t)v435, (uint64_t)__dst, v126);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(__dst[2].__locale_) & 0x80000000) == 0)
      goto LABEL_289;
  }
  else if ((SHIBYTE(__dst[2].__locale_) & 0x80000000) == 0)
  {
    goto LABEL_289;
  }
  operator delete(__dst[0].__locale_);
LABEL_289:
  *(_WORD *)((char *)&__dst[2].__locale_ + 7) = 11786;
  strcpy((char *)__dst, "svg.circle");
  v467[0] = __dst;
  *(_WORD *)((char *)&__p[2] + 7) = 11782;
  strcpy((char *)__p, "circle");
  v451 = __p;
  v127 = (__int128 *)sub_23585D828(v424, (uint64_t)__p);
  sub_235860FA8((uint64_t)v435, (uint64_t)__dst, v127);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(__dst[2].__locale_) & 0x80000000) == 0)
      goto LABEL_291;
  }
  else if ((SHIBYTE(__dst[2].__locale_) & 0x80000000) == 0)
  {
    goto LABEL_291;
  }
  operator delete(__dst[0].__locale_);
LABEL_291:
  *(_WORD *)((char *)&__dst[2].__locale_ + 7) = 11781;
  strcpy((char *)__dst, "svg.g");
  v467[0] = __dst;
  *(_WORD *)((char *)&__p[2] + 7) = 11777;
  LOWORD(__p[0]) = 103;
  v451 = __p;
  v128 = (__int128 *)sub_23585D828(a3, (uint64_t)__p);
  sub_235860FA8((uint64_t)v435, (uint64_t)__dst, v128);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(__dst[2].__locale_) & 0x80000000) == 0)
      goto LABEL_293;
  }
  else if ((SHIBYTE(__dst[2].__locale_) & 0x80000000) == 0)
  {
    goto LABEL_293;
  }
  operator delete(__dst[0].__locale_);
LABEL_293:
  memset(&v431, 0, sizeof(v431));
  v129 = operator new();
  v416 = v125;
  v130 = operator new(0x60uLL);
  *(_QWORD *)(v129 + 8) = v130;
  v130[7] = 0;
  v130[8] = v130 + 7;
  v130[9] = v130 + 7;
  v130[10] = v130 + 10;
  v130[11] = v130 + 10;
  *(_QWORD *)(v129 + 24) = 0;
  v432 = (std::locale::__imp *)v129;
  v131 = MEMORY[0x24BEDB858];
  v132 = MEMORY[0x24BEDB858] + 104;
  v471[0] = MEMORY[0x24BEDB858] + 104;
  v133 = (std::locale::__imp *)(MEMORY[0x24BEDB858] + 64);
  v134 = (std::locale *)MEMORY[0x24BEDB7F0];
  v136 = *(std::locale::__imp **)(MEMORY[0x24BEDB7F0] + 16);
  v135 = *(std::locale::__imp **)(MEMORY[0x24BEDB7F0] + 24);
  __dst[2].__locale_ = (std::locale::__imp *)(MEMORY[0x24BEDB858] + 64);
  __dst[0].__locale_ = v136;
  __val = v135;
  *(std::locale::__imp **)((char *)&__dst[0].__locale_ + *((_QWORD *)v136 - 3)) = v135;
  __dst[1].__locale_ = 0;
  v137 = (std::ios_base *)((char *)__dst + *((_QWORD *)__dst[0].__locale_ - 3));
  std::ios_base::init(v137, &__dst[3]);
  v137[1].__vftable = 0;
  v137[1].__fmtflags_ = -1;
  v138 = v134[5].__locale_;
  __dst[2] = v134[4];
  v423 = v138;
  v425 = __dst[2].__locale_;
  *(std::locale::__imp **)((char *)&__dst[2].__locale_ + *((_QWORD *)__dst[2].__locale_ - 3)) = v138;
  v139 = v134[1].__locale_;
  __dst[0].__locale_ = v139;
  v140 = v134[6].__locale_;
  *(std::locale::__imp **)((char *)&__dst[0].__locale_ + *((_QWORD *)v139 - 3)) = v140;
  v471[0] = v132;
  __dst[0].__locale_ = (std::locale::__imp *)(v131 + 24);
  __dst[2].__locale_ = v133;
  std::streambuf::basic_streambuf();
  __dst[3].__locale_ = (std::locale::__imp *)(MEMORY[0x24BEDB848] + 16);
  v468 = 0u;
  v469 = 0u;
  v470 = 24;
  v463[1].__locale_ = 0;
  v463[0].__locale_ = 0;
  v464 = 0;
  v141 = operator new();
  v142 = operator new(0x60uLL);
  *(_QWORD *)(v141 + 8) = v142;
  v142[7] = 0;
  v142[8] = v142 + 7;
  v142[9] = v142 + 7;
  v142[10] = v142 + 10;
  v142[11] = v142 + 10;
  *(_QWORD *)(v141 + 24) = 0;
  v465 = v141;
  if (a5 >= 4)
  {
    memset(&v429, 0, sizeof(v429));
    v145 = operator new();
    v146 = operator new(0x60uLL);
    *(_QWORD *)(v145 + 8) = v146;
    v146[7] = 0;
    v146[8] = v146 + 7;
    v146[9] = v146 + 7;
    v146[10] = v146 + 10;
    v146[11] = v146 + 10;
    *(_QWORD *)(v145 + 24) = 0;
    v430 = v145;
    goto LABEL_849;
  }
  sub_23584D1D8(&__dst[2].__locale_, (uint64_t)off_2506E0218[a5], *(_QWORD *)&aG[8 * a5]);
  memset(__p, 0, 24);
  sub_23586DAA4();
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  *(_WORD *)((char *)&__p[2] + 7) = 11797;
  strcpy((char *)__p, "svg.<xmlattr>.viewBox");
  v451 = __p;
  v143 = sub_23585D828((uint64_t)v463, (uint64_t)__p);
  LOBYTE(v472[0].__locale_) = 0;
  if (*(char *)(v143 + 23) < 0)
  {
    sub_23584B488(&v472[1], *(void **)v143, *(_QWORD *)(v143 + 8));
  }
  else
  {
    v144 = *(_OWORD *)v143;
    v472[3] = *(std::locale *)(v143 + 16);
    *(_OWORD *)&v472[1].__locale_ = v144;
  }
  LOBYTE(v472[0].__locale_) = 1;
  if (SHIBYTE(v472[3].__locale_) < 0)
  {
    sub_23584B488(&v462, v472[1].__locale_, (unint64_t)v472[2].__locale_);
    if (LOBYTE(v472[0].__locale_) && SHIBYTE(v472[3].__locale_) < 0)
      operator delete(v472[1].__locale_);
  }
  else
  {
    v462 = *(std::string *)&v472[1].__locale_;
  }
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v461[0] = v131 + 104;
  __p[2] = (void *)(v131 + 64);
  __p[0] = v136;
  *(void **)((char *)__p + *((_QWORD *)v136 - 3)) = __val;
  __p[1] = 0;
  v147 = (std::ios_base *)((char *)__p + *((_QWORD *)__p[0] - 3));
  std::ios_base::init(v147, &__p[3]);
  v147[1].__vftable = 0;
  v147[1].__fmtflags_ = -1;
  __p[2] = v425;
  *(void **)((char *)&__p[2] + *((_QWORD *)v425 - 3)) = v423;
  __p[0] = v139;
  *(void **)((char *)__p + *((_QWORD *)v139 - 3)) = v140;
  v461[0] = v131 + 104;
  __p[0] = (void *)(v131 + 24);
  __p[2] = (void *)(v131 + 64);
  std::streambuf::basic_streambuf();
  __p[3] = (void *)(MEMORY[0x24BEDB848] + 16);
  v148 = &v458;
  v458 = 0u;
  v459 = 0u;
  v460 = 24;
  if (SHIBYTE(v462.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_23584B9FC(&v458, v462.__r_.__value_.__l.__data_, v462.__r_.__value_.__l.__size_);
    v149 = v460;
  }
  else
  {
    v458 = *(_OWORD *)&v462.__r_.__value_.__l.__data_;
    *(_QWORD *)&v459 = *((_QWORD *)&v462.__r_.__value_.__l + 2);
    v149 = 24;
  }
  *((_QWORD *)&v459 + 1) = 0;
  v150 = BYTE7(v459);
  LOBYTE(v151) = BYTE7(v459);
  if ((SBYTE7(v459) & 0x80u) == 0)
    v152 = &v458;
  else
    v152 = (__int128 *)v458;
  if ((SBYTE7(v459) & 0x80u) == 0)
    v153 = BYTE7(v459);
  else
    v153 = *((_QWORD *)&v458 + 1);
  if ((v149 & 8) != 0)
  {
    v452 = v152;
    v453 = v152;
    *((_QWORD *)&v459 + 1) = (char *)v152 + v153;
    v454 = (char *)v152 + v153;
  }
  if ((v149 & 0x10) == 0)
    goto LABEL_378;
  *((_QWORD *)&v459 + 1) = (char *)v152 + v153;
  if (SBYTE7(v459) < 0)
  {
    v154 = (v459 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (*((_QWORD *)&v458 + 1) >= v154)
    {
      *((_QWORD *)&v458 + 1) = (v459 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      v148 = (__int128 *)v458;
      goto LABEL_351;
    }
    v151 = BYTE7(v459);
    v150 = *((_QWORD *)&v458 + 1);
  }
  else
  {
    v154 = 22;
    if (SBYTE7(v459) > 0x15)
    {
      BYTE7(v459) = 22;
LABEL_351:
      v162 = (char *)v148 + v154;
LABEL_370:
      *v162 = 0;
      goto LABEL_371;
    }
  }
  v155 = v154 - v150;
  if (v154 != v150)
  {
    if ((v151 & 0x80u) == 0)
      v156 = 22;
    else
      v156 = (v459 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v151 & 0x80u) == 0)
      v157 = v151;
    else
      v157 = *((_QWORD *)&v458 + 1);
    if (v156 - v157 >= v155)
    {
      if ((uint64_t)v459 < 0 && (v151 & 0x80u) != 0)
        v164 = (__int128 *)v458;
      else
        v164 = &v458;
      v158 = v157 + v155;
      bzero((char *)v164 + v157, v155);
      if (SBYTE7(v459) < 0)
      {
LABEL_368:
        *((_QWORD *)&v458 + 1) = v158;
        goto LABEL_369;
      }
    }
    else
    {
      v158 = v157 + v155;
      if (0x7FFFFFFFFFFFFFF7 - v156 < v157 + v155 - v156)
        sub_23584B34C();
      if ((v151 & 0x80u) == 0)
        v159 = &v458;
      else
        v159 = (__int128 *)v458;
      v160 = 0x7FFFFFFFFFFFFFF7;
      if (v156 < 0x3FFFFFFFFFFFFFF3)
      {
        v161 = 2 * v156;
        if (v158 > 2 * v156)
          v161 = v157 + v155;
        if (v161 >= 0x17)
        {
          v165 = (v161 & 0xFFFFFFFFFFFFFFF8) + 8;
          v166 = v161 | 7;
          if (v166 == 23)
            v166 = v165;
          v160 = v166 + 1;
        }
        else
        {
          v160 = 23;
        }
      }
      v167 = (__int128 *)operator new(v160);
      v164 = v167;
      if (v157)
        memmove(v167, v159, v157);
      if (v156 != 22)
        operator delete(v159);
      *(_QWORD *)&v459 = v160 | 0x8000000000000000;
      *(_QWORD *)&v458 = v164;
      *((_QWORD *)&v458 + 1) = v157;
      bzero((char *)v164 + v157, v155);
      if (SBYTE7(v459) < 0)
        goto LABEL_368;
    }
    BYTE7(v459) = v158 & 0x7F;
LABEL_369:
    v162 = (char *)v164 + v158;
    goto LABEL_370;
  }
LABEL_371:
  v168 = BYTE7(v459);
  if (SBYTE7(v459) < 0)
    v168 = *((_QWORD *)&v458 + 1);
  v456 = (char *)v152;
  v455 = v152;
  v457 = (char *)v152 + v168;
  if ((v460 & 3) != 0)
  {
    if (v153 >> 31)
    {
      v169 = ((v153 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
      v170 = 0x7FFFFFFF * ((v169 + ((v153 - 0x80000000 - v169) >> 1)) >> 30);
      v152 = (__int128 *)((char *)v152 + v170 + 0x7FFFFFFF);
      v153 = v153 - v170 - 0x7FFFFFFF;
      v456 = (char *)v152;
    }
    if (v153)
      v456 = (char *)v152 + v153;
  }
LABEL_378:
  v171 = __dst[1].__locale_;
  __dst[1] = (std::locale)__p[1];
  __p[1] = v171;
  v172 = (std::ios_base *)((char *)__dst + *((_QWORD *)__dst[0].__locale_ - 3));
  v173 = (std::ios_base *)((char *)__p + *((_QWORD *)__p[0] - 3));
  std::ios_base::swap(v172, v173);
  v174 = v172[1].__vftable;
  v172[1].__vftable = v173[1].__vftable;
  v173[1].__vftable = v174;
  LODWORD(v174) = v172[1].__fmtflags_;
  v172[1].__fmtflags_ = v173[1].__fmtflags_;
  v173[1].__fmtflags_ = v174;
  std::stringbuf::operator=();
  __p[0] = *(void **)MEMORY[0x24BEDB7F0];
  v175 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  __p[2] = v175;
  __p[3] = (void *)(MEMORY[0x24BEDB848] + 16);
  if (SBYTE7(v459) < 0)
    operator delete((void *)v458);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23B7D9458](v461);
  v176 = 0;
  v177 = 0;
  memset(&__str, 0, sizeof(__str));
  v426 = 0;
LABEL_381:
  v178 = v176;
  v179 = (char *)v177 - (char *)v176 - 8;
  v180 = v177;
  v420 = v176;
  while (2)
  {
    MEMORY[0x23B7D932C](v472, __dst, 0);
    if (!LOBYTE(v472[0].__locale_))
      goto LABEL_428;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      *__str.__r_.__value_.__l.__data_ = 0;
      __str.__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      __str.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
    }
    v181 = *((_QWORD *)__dst[0].__locale_ - 3);
    v182 = *(uint64_t *)((char *)&__dst[3].__locale_ + v181);
    if (v182 <= 1)
      v183 = 1;
    else
      v183 = *(uint64_t *)((char *)&__dst[3].__locale_ + v181);
    *(_QWORD *)__vala = v179;
    std::ios_base::getloc((const std::ios_base *)((char *)__dst + v181));
    v184 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
    std::locale::~locale((std::locale *)__p);
    v185 = 0;
    if (v182 >= 1)
      v186 = v183;
    else
      v186 = 0x7FFFFFFFFFFFFFF7;
    while (1)
    {
      v187 = *(_QWORD **)((char *)&v467[1] + *((_QWORD *)__dst[0].__locale_ - 3));
      v188 = (unsigned __int8 *)v187[3];
      if (v188 == (unsigned __int8 *)v187[4])
        break;
      v189 = *v188;
LABEL_397:
      if ((v189 & 0x80) == 0 && (*((_DWORD *)&v184[1].~facet + v189) & 0x4000) != 0)
      {
        v201 = 0;
        goto LABEL_425;
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        v192 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (__str.__r_.__value_.__l.__size_ == v192)
        {
          if ((__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
            sub_23584B34C();
          v191 = (std::string *)__str.__r_.__value_.__r.__words[0];
          v193 = 0x7FFFFFFFFFFFFFF7;
          if (v192 < 0x3FFFFFFFFFFFFFF3)
          {
LABEL_405:
            if (v192 + 1 > 2 * v192)
              v194 = v192 + 1;
            else
              v194 = 2 * v192;
            v195 = (v194 & 0x7FFFFFFFFFFFFFF8) + 8;
            if ((v194 | 7) != 0x17)
              v195 = v194 | 7;
            if (v194 >= 0x17)
              v193 = v195 + 1;
            else
              v193 = 23;
          }
          v196 = (std::string *)operator new(v193);
          v197 = v196;
          if (!v192 || (memmove(v196, v191, v192), v192 != 22))
            operator delete(v191);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v197;
          __str.__r_.__value_.__r.__words[2] = v193 | 0x8000000000000000;
        }
        else
        {
          v192 = __str.__r_.__value_.__l.__size_;
          v197 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        __str.__r_.__value_.__l.__size_ = v192 + 1;
        goto LABEL_420;
      }
      if (HIBYTE(__str.__r_.__value_.__r.__words[2]) == 22)
      {
        v191 = &__str;
        v192 = 22;
        goto LABEL_405;
      }
      v192 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      *((_BYTE *)&__str.__r_.__value_.__s + 23) = (*((_BYTE *)&__str.__r_.__value_.__s + 23) + 1) & 0x7F;
      v197 = &__str;
LABEL_420:
      v198 = (unsigned __int8 *)v197 + v192;
      *v198 = v189;
      v198[1] = 0;
      v199 = *(_QWORD **)((char *)&v467[1] + *((_QWORD *)__dst[0].__locale_ - 3));
      v200 = v199[3];
      if (v200 == v199[4])
        (*(void (**)(_QWORD *))(*v199 + 80))(v199);
      else
        v199[3] = v200 + 1;
      if (v186 == ++v185)
      {
        v201 = 0;
        v202 = __dst[0].__locale_;
        *(std::locale::__imp **)((char *)&__dst[3].__locale_ + *((_QWORD *)__dst[0].__locale_ - 3)) = 0;
        goto LABEL_427;
      }
    }
    v190 = (*(uint64_t (**)(_QWORD *))(*v187 + 72))(v187);
    v189 = v190;
    if (v190 != -1)
      goto LABEL_397;
    v201 = 2;
LABEL_425:
    v202 = __dst[0].__locale_;
    *(std::locale::__imp **)((char *)&__dst[3].__locale_ + *((_QWORD *)__dst[0].__locale_ - 3)) = 0;
    if (!v185)
      v201 |= 4u;
LABEL_427:
    v178 = v420;
    v179 = *(_QWORD *)__vala;
    std::ios_base::clear((std::ios_base *)((char *)__dst + *((_QWORD *)v202 - 3)), *(_DWORD *)((char *)&__dst[4].__locale_ + *((_QWORD *)v202 - 3)) | v201);
LABEL_428:
    if ((*((_BYTE *)v467 + *((_QWORD *)__dst[0].__locale_ - 3)) & 5) == 0)
    {
      v203 = std::stod(&__str, 0);
      v204 = v203;
      if (v180 < v426)
      {
        *v180++ = v203;
        v179 += 8;
        continue;
      }
      v205 = v180 - v178;
      v206 = v205 + 1;
      if ((unint64_t)(v205 + 1) >> 61)
        sub_235847D5C();
      if (((char *)v426 - (char *)v178) >> 2 > v206)
        v206 = ((char *)v426 - (char *)v178) >> 2;
      if ((unint64_t)((char *)v426 - (char *)v178) >= 0x7FFFFFFFFFFFFFF8)
        v207 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v207 = v206;
      if (v207)
      {
        if (v207 >> 61)
          sub_2358482F0();
        v208 = operator new(8 * v207);
        v209 = (double *)&v208[8 * v205];
        *v209 = v204;
        v177 = v209 + 1;
        v210 = (char *)v180 - (char *)v178;
        if (v180 != v178)
        {
LABEL_441:
          v211 = v210 - 8;
          if (v211 < 0x168
            || (v215 = ((char *)(v180 - 1) - (char *)v178) & 0xFFFFFFFFFFFFFFF8,
                &v208[(char *)v180 - (char *)v178 - 8 - v215] > &v208[(char *)v180 - (char *)v178 - 8])
            || (double *)((char *)v180 - v215 - 8) > v180 - 1
            || (unint64_t)((char *)v178 - v208) < 0x20)
          {
            v212 = v180;
            v176 = v209;
          }
          else
          {
            v216 = 0;
            v217 = (v211 >> 3) + 1;
            v218 = 8 * (v217 & 0x3FFFFFFFFFFFFFFCLL);
            v212 = &v180[v218 / 0xFFFFFFFFFFFFFFF8];
            v176 = &v209[v218 / 0xFFFFFFFFFFFFFFF8];
            v219 = ((v179 >> 3) + 1) & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v220 = *(_OWORD *)&v180[v216 - 2];
              v221 = &v209[v216];
              *((_OWORD *)v221 - 2) = *(_OWORD *)&v180[v216 - 4];
              *((_OWORD *)v221 - 1) = v220;
              v216 -= 4;
              v219 -= 4;
            }
            while (v219);
            if (v217 == (v217 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_444;
          }
          do
          {
            v213 = *((_QWORD *)v212-- - 1);
            *((_QWORD *)v176-- - 1) = v213;
          }
          while (v212 != v178);
LABEL_444:
          v426 = (double *)&v208[8 * v207];
          if (!v178)
            goto LABEL_381;
LABEL_448:
          operator delete(v178);
          goto LABEL_381;
        }
      }
      else
      {
        v208 = 0;
        v209 = (double *)(8 * v205);
        v214 = (double *)(8 * v205);
        *v214 = v203;
        v177 = v214 + 1;
        v210 = (char *)v180 - (char *)v178;
        if (v180 != v178)
          goto LABEL_441;
      }
      v176 = v209;
      v426 = (double *)&v208[8 * v207];
      if (!v178)
        goto LABEL_381;
      goto LABEL_448;
    }
    break;
  }
  if ((char *)v180 - (char *)v178 != 32)
  {
    memset(&v429, 0, sizeof(v429));
    v233 = operator new();
    v234 = operator new(0x60uLL);
    *(_QWORD *)(v233 + 8) = v234;
    v234[7] = 0;
    v234[8] = v234 + 7;
    v234[9] = v234 + 7;
    v234[10] = v234 + 10;
    v234[11] = v234 + 10;
    *(_QWORD *)(v233 + 24) = 0;
    v430 = v233;
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_846;
    goto LABEL_471;
  }
  v222 = *((double *)&unk_235891358 + (int)a5 + 24);
  v223 = v178[2];
  v224 = (800.0 - v222 * v178[3]) * 0.5;
  if (a5 == 3)
    v224 = v224 + -3.0;
  if (v416)
    v225 = v224 + -3.8;
  else
    v225 = v224;
  v226 = (char *)operator new(0x20uLL);
  v227 = (800.0 - v222 * v223) * 0.5;
  if (a5 == 3)
    v227 = v227 + 2.0;
  __p[0] = v226;
  *(_OWORD *)&__p[1] = xmmword_2358911D0;
  *(_OWORD *)v226 = *(_OWORD *)"svg.g.<xmlattr>.transform";
  if (v416)
    v227 = v227 + -0.99;
  strcpy(v226 + 9, "lattr>.transform");
  LOBYTE(__p[3]) = 46;
  v451 = (void **)v226;
  std::to_string(&__src, v227);
  v228 = 0x7FFFFFFFFFFFFFF7;
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
  {
    v229 = __src.__r_.__value_.__l.__size_;
    v232 = (__src.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v232 - __src.__r_.__value_.__l.__size_ >= 0xA)
    {
      v237 = (std::string *)__src.__r_.__value_.__r.__words[0];
      v238 = "translate(";
      if (__src.__r_.__value_.__l.__size_)
        goto LABEL_482;
      goto LABEL_489;
    }
    v230 = __src.__r_.__value_.__l.__size_ + 10;
    if (0x7FFFFFFFFFFFFFF7 - (__src.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) < __src.__r_.__value_.__l.__size_
                                                                                            + 10
                                                                                            - v232)
      goto LABEL_936;
    p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
    v235 = 0x7FFFFFFFFFFFFFF7;
    if (v232 < 0x3FFFFFFFFFFFFFF3)
    {
LABEL_477:
      v236 = 2 * v232;
      if (v230 > 2 * v232)
        v236 = v230;
      if (v236 >= 0x17)
      {
        v242 = (v236 & 0xFFFFFFFFFFFFFFF8) + 8;
        v243 = v236 | 7;
        if (v243 == 23)
          v243 = v242;
        v235 = v243 + 1;
      }
      else
      {
        v235 = 23;
      }
    }
    v244 = operator new(v235);
    v245 = (std::string::size_type)v244;
    v244[4] = 10341;
    *(_QWORD *)v244 = *(_QWORD *)"translate(";
    if (v229)
      memmove(v244 + 5, p_src, v229);
    if (v232 != 22)
      operator delete(p_src);
    __src.__r_.__value_.__l.__size_ = v230;
    __src.__r_.__value_.__r.__words[2] = v235 | 0x8000000000000000;
    __src.__r_.__value_.__r.__words[0] = v245;
    v246 = (_BYTE *)(v245 + v230);
  }
  else
  {
    v229 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    if ((unint64_t)HIBYTE(__src.__r_.__value_.__r.__words[2]) - 13 < 0xA)
    {
      if (HIBYTE(__src.__r_.__value_.__r.__words[2]) > 0xBu)
      {
        v230 = HIBYTE(__src.__r_.__value_.__r.__words[2]) + 10;
        p_src = &__src;
        v232 = 22;
        goto LABEL_477;
      }
LABEL_936:
      sub_23584B34C();
    }
    v237 = &__src;
    v238 = "translate(";
    if (*((_BYTE *)&__src.__r_.__value_.__s + 23))
    {
LABEL_482:
      v239 = (char *)v237 + v229 <= "translate(" || v237 > (std::string *)"translate(";
      v240 = 10;
      if (v239)
        v240 = 0;
      v238 = &aTranslate[v240];
      memmove((char *)&v237->__r_.__value_.__r.__words[1] + 2, v237, v229);
    }
LABEL_489:
    v237->__r_.__value_.__r.__words[0] = *(_QWORD *)v238;
    LOWORD(v237->__r_.__value_.__r.__words[1]) = *((_WORD *)v238 + 4);
    v241 = v229 + 10;
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      __src.__r_.__value_.__l.__size_ = v229 + 10;
    else
      *((_BYTE *)&__src.__r_.__value_.__s + 23) = v241 & 0x7F;
    v246 = (char *)v237 + v241;
  }
  *v246 = 0;
  v442 = __src;
  memset(&__src, 0, sizeof(__src));
  if (SHIBYTE(v442.__r_.__value_.__r.__words[2]) < 0)
  {
    v247 = v442.__r_.__value_.__l.__size_;
    v250 = v442.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL;
    v249 = (v442.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v249 != v442.__r_.__value_.__l.__size_)
    {
      v248 = (std::string *)v442.__r_.__value_.__r.__words[0];
      goto LABEL_522;
    }
    if (v250 == 0x7FFFFFFFFFFFFFF7)
      sub_23584B34C();
    v248 = (std::string *)v442.__r_.__value_.__r.__words[0];
    v251 = 0x7FFFFFFFFFFFFFF7;
    if (v249 < 0x3FFFFFFFFFFFFFF3)
    {
LABEL_509:
      v252 = 2 * v249;
      if (v250 > 2 * v249)
        v252 = v250;
      if (v252 >= 0x17)
      {
        v253 = (v252 & 0x7FFFFFFFFFFFFFF8) + 8;
        v254 = v252 | 7;
        if (v254 == 23)
          v254 = v253;
        v251 = v254 + 1;
      }
      else
      {
        v251 = 23;
      }
    }
    v255 = operator new(v251);
    v256 = (std::string::size_type)v255;
    if (v249)
      memmove(v255, v248, v249);
    *(_BYTE *)(v256 + v249) = 32;
    if (v249 != 22)
      operator delete(v248);
    v442.__r_.__value_.__l.__size_ = v250;
    v442.__r_.__value_.__r.__words[2] = v251 | 0x8000000000000000;
    v442.__r_.__value_.__r.__words[0] = v256;
    v257 = (_BYTE *)(v256 + v250);
  }
  else
  {
    v247 = HIBYTE(v442.__r_.__value_.__r.__words[2]);
    v248 = &v442;
    if (HIBYTE(v442.__r_.__value_.__r.__words[2]) == 22)
    {
      v249 = 22;
      v250 = 23;
      goto LABEL_509;
    }
LABEL_522:
    v248->__r_.__value_.__s.__data_[v247] = 32;
    v258 = v247 + 1;
    if (SHIBYTE(v442.__r_.__value_.__r.__words[2]) < 0)
      v442.__r_.__value_.__l.__size_ = v258;
    else
      *((_BYTE *)&v442.__r_.__value_.__s + 23) = v258 & 0x7F;
    v257 = (char *)v248 + v258;
  }
  *v257 = 0;
  v443 = v442;
  memset(&v442, 0, sizeof(v442));
  std::to_string(&v440, v225);
  if ((v440.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v259 = &v440;
  else
    v259 = (std::string *)v440.__r_.__value_.__r.__words[0];
  if ((v440.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v260 = HIBYTE(v440.__r_.__value_.__r.__words[2]);
  else
    v260 = v440.__r_.__value_.__l.__size_;
  if ((v443.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v261 = 22;
  else
    v261 = (v443.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v443.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v262 = HIBYTE(v443.__r_.__value_.__r.__words[2]);
  else
    v262 = v443.__r_.__value_.__l.__size_;
  if (v261 - v262 >= v260)
  {
    if (v260)
    {
      if ((v443.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v267 = &v443;
      else
        v267 = (std::string *)v443.__r_.__value_.__r.__words[0];
      memmove((char *)v267 + v262, v259, v260);
      v268 = v262 + v260;
      if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
        v443.__r_.__value_.__l.__size_ = v262 + v260;
      else
        *((_BYTE *)&v443.__r_.__value_.__s + 23) = v268 & 0x7F;
      v269 = (char *)v267 + v268;
      goto LABEL_563;
    }
  }
  else
  {
    v263 = v262 + v260;
    if (0x7FFFFFFFFFFFFFF6 - v261 < v262 + v260 - v261)
      sub_23584B34C();
    if ((v443.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v264 = &v443;
    else
      v264 = (std::string *)v443.__r_.__value_.__r.__words[0];
    v265 = 0x7FFFFFFFFFFFFFF7;
    if (v261 < 0x3FFFFFFFFFFFFFF3)
    {
      v266 = 2 * v261;
      if (v263 > 2 * v261)
        v266 = v262 + v260;
      if (v266 >= 0x17)
      {
        v270 = (v266 & 0xFFFFFFFFFFFFFFF8) + 8;
        v271 = v266 | 7;
        if (v271 == 23)
          v271 = v270;
        v265 = v271 + 1;
      }
      else
      {
        v265 = 23;
      }
    }
    v272 = operator new(v265);
    v273 = (std::string::size_type)v272;
    if (v262)
      memmove(v272, v264, v262);
    memcpy((void *)(v273 + v262), v259, v260);
    if (v261 != 22)
      operator delete(v264);
    v443.__r_.__value_.__l.__size_ = v262 + v260;
    v443.__r_.__value_.__r.__words[2] = v265 | 0x8000000000000000;
    v443.__r_.__value_.__r.__words[0] = v273;
    v269 = (_BYTE *)(v273 + v263);
    v228 = 0x7FFFFFFFFFFFFFF7;
LABEL_563:
    *v269 = 0;
  }
  v444 = v443;
  memset(&v443, 0, sizeof(v443));
  if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
  {
    v274 = v444.__r_.__value_.__l.__size_;
    v277 = (v444.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v277 - v444.__r_.__value_.__l.__size_ >= 8)
    {
      v280 = (std::string *)v444.__r_.__value_.__r.__words[0];
      goto LABEL_585;
    }
    v275 = v444.__r_.__value_.__l.__size_ + 8;
    if (0x7FFFFFFFFFFFFFF7 - (v444.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) < v444.__r_.__value_.__l.__size_
                                                                                           + 8
                                                                                           - v277)
      goto LABEL_938;
    v276 = (std::string *)v444.__r_.__value_.__r.__words[0];
    v278 = 0x7FFFFFFFFFFFFFF7;
    if (v277 < 0x3FFFFFFFFFFFFFF3)
    {
LABEL_571:
      v279 = 2 * v277;
      if (v275 > 2 * v277)
        v279 = v275;
      if (v279 >= 0x17)
      {
        v281 = (v279 & 0xFFFFFFFFFFFFFFF8) + 8;
        v282 = v279 | 7;
        if (v282 == 23)
          v282 = v281;
        v278 = v282 + 1;
      }
      else
      {
        v278 = 23;
      }
    }
    v283 = operator new(v278);
    v284 = (std::string::size_type)v283;
    if (v274)
      memmove(v283, v276, v274);
    *(_QWORD *)(v284 + v274) = 0x28656C6163732029;
    if (v277 != 22)
      operator delete(v276);
    v444.__r_.__value_.__l.__size_ = v275;
    v444.__r_.__value_.__r.__words[2] = v278 | 0x8000000000000000;
    v444.__r_.__value_.__r.__words[0] = v284;
    v285 = (_BYTE *)(v284 + v275);
  }
  else
  {
    v274 = HIBYTE(v444.__r_.__value_.__r.__words[2]);
    if ((unint64_t)HIBYTE(v444.__r_.__value_.__r.__words[2]) - 15 < 8)
    {
      if (HIBYTE(v444.__r_.__value_.__r.__words[2]) > 0xDu)
      {
        v275 = HIBYTE(v444.__r_.__value_.__r.__words[2]) + 8;
        v276 = &v444;
        v277 = 22;
        goto LABEL_571;
      }
LABEL_938:
      sub_23584B34C();
    }
    v280 = &v444;
LABEL_585:
    *(std::string::size_type *)((char *)v280->__r_.__value_.__r.__words + v274) = 0x28656C6163732029;
    v286 = v274 + 8;
    if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
      v444.__r_.__value_.__l.__size_ = v274 + 8;
    else
      *((_BYTE *)&v444.__r_.__value_.__s + 23) = v286 & 0x7F;
    v285 = (char *)v280 + v286;
  }
  *v285 = 0;
  v445 = v444;
  memset(&v444, 0, sizeof(v444));
  std::to_string(&v439, v222);
  if ((v439.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v287 = &v439;
  else
    v287 = (std::string *)v439.__r_.__value_.__r.__words[0];
  if ((v439.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v288 = HIBYTE(v439.__r_.__value_.__r.__words[2]);
  else
    v288 = v439.__r_.__value_.__l.__size_;
  if ((v445.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v289 = 22;
  else
    v289 = (v445.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v445.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v290 = HIBYTE(v445.__r_.__value_.__r.__words[2]);
  else
    v290 = v445.__r_.__value_.__l.__size_;
  if (v289 - v290 >= v288)
  {
    if (v288)
    {
      if ((v445.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v295 = &v445;
      else
        v295 = (std::string *)v445.__r_.__value_.__r.__words[0];
      memmove((char *)v295 + v290, v287, v288);
      v296 = v290 + v288;
      if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
        v445.__r_.__value_.__l.__size_ = v290 + v288;
      else
        *((_BYTE *)&v445.__r_.__value_.__s + 23) = v296 & 0x7F;
      v297 = (char *)v295 + v296;
      goto LABEL_626;
    }
  }
  else
  {
    v291 = v290 + v288;
    if (0x7FFFFFFFFFFFFFF6 - v289 < v290 + v288 - v289)
      sub_23584B34C();
    if ((v445.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v292 = &v445;
    else
      v292 = (std::string *)v445.__r_.__value_.__r.__words[0];
    v293 = 0x7FFFFFFFFFFFFFF7;
    if (v289 < 0x3FFFFFFFFFFFFFF3)
    {
      v294 = 2 * v289;
      if (v291 > 2 * v289)
        v294 = v290 + v288;
      if (v294 >= 0x17)
      {
        v298 = (v294 & 0xFFFFFFFFFFFFFFF8) + 8;
        v299 = v294 | 7;
        if (v299 == 23)
          v299 = v298;
        v293 = v299 + 1;
      }
      else
      {
        v293 = 23;
      }
    }
    v300 = operator new(v293);
    v301 = (std::string::size_type)v300;
    if (v290)
      memmove(v300, v292, v290);
    memcpy((void *)(v301 + v290), v287, v288);
    if (v289 != 22)
      operator delete(v292);
    v445.__r_.__value_.__l.__size_ = v290 + v288;
    v445.__r_.__value_.__r.__words[2] = v293 | 0x8000000000000000;
    v445.__r_.__value_.__r.__words[0] = v301;
    v297 = (_BYTE *)(v301 + v291);
    v228 = 0x7FFFFFFFFFFFFFF7;
LABEL_626:
    *v297 = 0;
  }
  v446 = v445;
  memset(&v445, 0, sizeof(v445));
  if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0)
  {
    v302 = v446.__r_.__value_.__l.__size_;
    v305 = v446.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL;
    v304 = (v446.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v304 != v446.__r_.__value_.__l.__size_)
    {
      v303 = (std::string *)v446.__r_.__value_.__r.__words[0];
      goto LABEL_646;
    }
    if (v305 == 0x7FFFFFFFFFFFFFF7)
      sub_23584B34C();
    v303 = (std::string *)v446.__r_.__value_.__r.__words[0];
    v306 = 0x7FFFFFFFFFFFFFF7;
    if (v304 < 0x3FFFFFFFFFFFFFF3)
    {
LABEL_633:
      v307 = 2 * v304;
      if (v305 > 2 * v304)
        v307 = v305;
      if (v307 >= 0x17)
      {
        v308 = (v307 & 0x7FFFFFFFFFFFFFF8) + 8;
        v309 = v307 | 7;
        if (v309 == 23)
          v309 = v308;
        v306 = v309 + 1;
      }
      else
      {
        v306 = 23;
      }
    }
    v310 = operator new(v306);
    v311 = (std::string::size_type)v310;
    if (v304)
      memmove(v310, v303, v304);
    *(_BYTE *)(v311 + v304) = 32;
    if (v304 != 22)
      operator delete(v303);
    v446.__r_.__value_.__r.__words[2] = v306 | 0x8000000000000000;
    v446.__r_.__value_.__r.__words[0] = v311;
    v446.__r_.__value_.__l.__size_ = v305;
    v312 = (_BYTE *)(v311 + v305);
  }
  else
  {
    v302 = HIBYTE(v446.__r_.__value_.__r.__words[2]);
    v303 = &v446;
    if (HIBYTE(v446.__r_.__value_.__r.__words[2]) == 22)
    {
      v304 = 22;
      v305 = 23;
      goto LABEL_633;
    }
LABEL_646:
    v303->__r_.__value_.__s.__data_[v302] = 32;
    v313 = v302 + 1;
    if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0)
      v446.__r_.__value_.__l.__size_ = v313;
    else
      *((_BYTE *)&v446.__r_.__value_.__s + 23) = v313 & 0x7F;
    v312 = (char *)v303 + v313;
  }
  *v312 = 0;
  v447 = v446;
  memset(&v446, 0, sizeof(v446));
  std::to_string(&v438, v222);
  if ((v438.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v314 = &v438;
  else
    v314 = (std::string *)v438.__r_.__value_.__r.__words[0];
  if ((v438.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v315 = HIBYTE(v438.__r_.__value_.__r.__words[2]);
  else
    v315 = v438.__r_.__value_.__l.__size_;
  if ((v447.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v316 = 22;
  else
    v316 = (v447.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v447.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v317 = HIBYTE(v447.__r_.__value_.__r.__words[2]);
  else
    v317 = v447.__r_.__value_.__l.__size_;
  if (v316 - v317 >= v315)
  {
    if (v315)
    {
      if ((v447.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v322 = &v447;
      else
        v322 = (std::string *)v447.__r_.__value_.__r.__words[0];
      memmove((char *)v322 + v317, v314, v315);
      v323 = v317 + v315;
      if (SHIBYTE(v447.__r_.__value_.__r.__words[2]) < 0)
        v447.__r_.__value_.__l.__size_ = v317 + v315;
      else
        *((_BYTE *)&v447.__r_.__value_.__s + 23) = v323 & 0x7F;
      v324 = (char *)v322 + v323;
      goto LABEL_687;
    }
  }
  else
  {
    v318 = v317 + v315;
    if (0x7FFFFFFFFFFFFFF6 - v316 < v317 + v315 - v316)
      sub_23584B34C();
    if ((v447.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v319 = &v447;
    else
      v319 = (std::string *)v447.__r_.__value_.__r.__words[0];
    v320 = 0x7FFFFFFFFFFFFFF7;
    if (v316 < 0x3FFFFFFFFFFFFFF3)
    {
      v321 = 2 * v316;
      if (v318 > 2 * v316)
        v321 = v317 + v315;
      if (v321 >= 0x17)
      {
        v325 = (v321 & 0xFFFFFFFFFFFFFFF8) + 8;
        v326 = v321 | 7;
        if (v326 == 23)
          v326 = v325;
        v320 = v326 + 1;
      }
      else
      {
        v320 = 23;
      }
    }
    v327 = operator new(v320);
    v328 = (std::string::size_type)v327;
    if (v317)
      memmove(v327, v319, v317);
    memcpy((void *)(v328 + v317), v314, v315);
    if (v316 != 22)
      operator delete(v319);
    v447.__r_.__value_.__r.__words[2] = v320 | 0x8000000000000000;
    v447.__r_.__value_.__r.__words[0] = v328;
    v447.__r_.__value_.__l.__size_ = v317 + v315;
    v324 = (_BYTE *)(v328 + v318);
    v228 = 0x7FFFFFFFFFFFFFF7;
LABEL_687:
    *v324 = 0;
  }
  v448 = v447;
  memset(&v447, 0, sizeof(v447));
  if (SHIBYTE(v448.__r_.__value_.__r.__words[2]) < 0)
  {
    v329 = v448.__r_.__value_.__l.__size_;
    v332 = v448.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL;
    v331 = (v448.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v331 != v448.__r_.__value_.__l.__size_)
    {
      v330 = (std::string *)v448.__r_.__value_.__r.__words[0];
      goto LABEL_707;
    }
    if (v332 == 0x7FFFFFFFFFFFFFF7)
      sub_23584B34C();
    v330 = (std::string *)v448.__r_.__value_.__r.__words[0];
    if (v331 < 0x3FFFFFFFFFFFFFF3)
    {
LABEL_694:
      v333 = 2 * v331;
      if (v332 > 2 * v331)
        v333 = v332;
      if (v333 >= 0x17)
      {
        v334 = (v333 & 0x7FFFFFFFFFFFFFF8) + 8;
        v335 = v333 | 7;
        if (v335 == 23)
          v335 = v334;
        v228 = v335 + 1;
      }
      else
      {
        v228 = 23;
      }
    }
    v336 = operator new(v228);
    v337 = (std::string::size_type)v336;
    if (v331)
      memmove(v336, v330, v331);
    *(_BYTE *)(v337 + v331) = 41;
    if (v331 != 22)
      operator delete(v330);
    v448.__r_.__value_.__r.__words[2] = v228 | 0x8000000000000000;
    v448.__r_.__value_.__r.__words[0] = v337;
    v448.__r_.__value_.__l.__size_ = v332;
    v338 = (_BYTE *)(v337 + v332);
  }
  else
  {
    v329 = HIBYTE(v448.__r_.__value_.__r.__words[2]);
    v330 = &v448;
    if (HIBYTE(v448.__r_.__value_.__r.__words[2]) == 22)
    {
      v331 = 22;
      v332 = 23;
      goto LABEL_694;
    }
LABEL_707:
    v330->__r_.__value_.__s.__data_[v329] = 41;
    v339 = v329 + 1;
    if (SHIBYTE(v448.__r_.__value_.__r.__words[2]) < 0)
      v448.__r_.__value_.__l.__size_ = v339;
    else
      *((_BYTE *)&v448.__r_.__value_.__s + 23) = v339 & 0x7F;
    v338 = (char *)v330 + v339;
  }
  *v338 = 0;
  *(std::string *)&v472[0].__locale_ = v448;
  memset(&v448, 0, sizeof(v448));
  sub_235868A68((uint64_t)v463, (uint64_t)__p, (__int128 *)v472);
  if (SHIBYTE(v472[2].__locale_) < 0)
  {
    operator delete(v472[0].__locale_);
    if (SHIBYTE(v448.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_831;
LABEL_713:
    if ((SHIBYTE(v438.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_714;
LABEL_832:
    operator delete(v438.__r_.__value_.__l.__data_);
    if (SHIBYTE(v447.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_833;
LABEL_715:
    if ((SHIBYTE(v446.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_716;
LABEL_834:
    operator delete(v446.__r_.__value_.__l.__data_);
    if (SHIBYTE(v439.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_835;
LABEL_717:
    if ((SHIBYTE(v445.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_718;
LABEL_836:
    operator delete(v445.__r_.__value_.__l.__data_);
    if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_837;
LABEL_719:
    if ((SHIBYTE(v440.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_720;
LABEL_838:
    operator delete(v440.__r_.__value_.__l.__data_);
    if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_839;
LABEL_721:
    if ((SHIBYTE(v442.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_722;
LABEL_840:
    operator delete(v442.__r_.__value_.__l.__data_);
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_841;
LABEL_723:
    if (SHIBYTE(__p[2]) < 0)
LABEL_842:
      operator delete(__p[0]);
  }
  else
  {
    if ((SHIBYTE(v448.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_713;
LABEL_831:
    operator delete(v448.__r_.__value_.__l.__data_);
    if (SHIBYTE(v438.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_832;
LABEL_714:
    if ((SHIBYTE(v447.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_715;
LABEL_833:
    operator delete(v447.__r_.__value_.__l.__data_);
    if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_834;
LABEL_716:
    if ((SHIBYTE(v439.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_717;
LABEL_835:
    operator delete(v439.__r_.__value_.__l.__data_);
    if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_836;
LABEL_718:
    if ((SHIBYTE(v444.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_719;
LABEL_837:
    operator delete(v444.__r_.__value_.__l.__data_);
    if (SHIBYTE(v440.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_838;
LABEL_720:
    if ((SHIBYTE(v443.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_721;
LABEL_839:
    operator delete(v443.__r_.__value_.__l.__data_);
    if (SHIBYTE(v442.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_840;
LABEL_722:
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_723;
LABEL_841:
    operator delete(__src.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p[2]) < 0)
      goto LABEL_842;
  }
  *(_WORD *)((char *)&__p[2] + 7) = 11781;
  strcpy((char *)__p, "svg.g");
  v451 = __p;
  v340 = sub_23585D828((uint64_t)v463, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v341 = *(_QWORD *)(*(_QWORD *)(v340 + 24) + 8);
  v342 = *(_QWORD *)(v341 + 88);
  if (v342)
    v343 = v342 - 80;
  else
    v343 = 0;
  if (v343 != v341)
  {
    while (2)
    {
      v345 = *(unsigned __int8 *)(v343 + 23);
      v346 = (char)v345;
      if ((v345 & 0x80u) != 0)
        v345 = *(_QWORD *)(v343 + 8);
      if (v345 != 4)
        goto LABEL_732;
      v347 = v346 >= 0 ? (_DWORD *)v343 : *(_DWORD **)v343;
      if (*v347 != 1752457584)
        goto LABEL_732;
      if (a5 != 1)
      {
        if (a5 != 2)
        {
          if (a5 == 3)
          {
            *(_WORD *)((char *)&__p[2] + 7) = 11788;
            strcpy((char *)__p, "<xmlattr>.id");
            v451 = __p;
            v348 = sub_23585D828(v343 + 24, (uint64_t)__p);
            LOBYTE(v472[0].__locale_) = 0;
            if (*(char *)(v348 + 23) < 0)
            {
              sub_23584B488(&v472[1], *(void **)v348, *(_QWORD *)(v348 + 8));
            }
            else
            {
              v349 = *(_OWORD *)v348;
              v472[3] = *(std::locale *)(v348 + 16);
              *(_OWORD *)&v472[1].__locale_ = v349;
            }
            LOBYTE(v472[0].__locale_) = 1;
            if (SHIBYTE(v472[3].__locale_) < 0)
            {
              sub_23584B488(&v448, v472[1].__locale_, (unint64_t)v472[2].__locale_);
              if (LOBYTE(v472[0].__locale_) && SHIBYTE(v472[3].__locale_) < 0)
                operator delete(v472[1].__locale_);
            }
            else
            {
              v448 = *(std::string *)&v472[1].__locale_;
            }
            if (SHIBYTE(__p[2]) < 0)
              operator delete(__p[0]);
            v365 = HIBYTE(v448.__r_.__value_.__r.__words[2]);
            if ((v448.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v365 = v448.__r_.__value_.__l.__size_;
            v359 = a4 + 3;
            if (v365 == 5)
            {
              v366 = &v448;
              if ((v448.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v366 = (std::string *)v448.__r_.__value_.__r.__words[0];
              v367 = bswap32(v366->__r_.__value_.__l.__data_);
              if (v367 == 1986622319)
              {
                v368 = v366->__r_.__value_.__s.__data_[4] - 114;
              }
              else if (v367 < 0x7669736F)
              {
                v368 = -1;
              }
              else
              {
                v368 = 1;
              }
              if (v368)
                v359 = a4 + 3;
              else
                v359 = a4 + 6;
            }
            goto LABEL_826;
          }
          sub_235861290(a4 + 3, v343 + 24);
LABEL_732:
          v344 = *(_QWORD *)(v343 + 88);
          if (v344)
            v343 = v344 - 80;
          else
            v343 = 0;
          if (v343 == v341)
            goto LABEL_828;
          continue;
        }
        *(_WORD *)((char *)&__p[2] + 7) = 11788;
        strcpy((char *)__p, "<xmlattr>.id");
        v451 = __p;
        v350 = sub_23585D828(v343 + 24, (uint64_t)__p);
        LOBYTE(v472[0].__locale_) = 0;
        if (*(char *)(v350 + 23) < 0)
        {
          sub_23584B488(&v472[1], *(void **)v350, *(_QWORD *)(v350 + 8));
        }
        else
        {
          v351 = *(_OWORD *)v350;
          v472[3] = *(std::locale *)(v350 + 16);
          *(_OWORD *)&v472[1].__locale_ = v351;
        }
        LOBYTE(v472[0].__locale_) = 1;
        if (SHIBYTE(v472[3].__locale_) < 0)
        {
          sub_23584B488(&v448, v472[1].__locale_, (unint64_t)v472[2].__locale_);
          if (LOBYTE(v472[0].__locale_) && SHIBYTE(v472[3].__locale_) < 0)
            operator delete(v472[1].__locale_);
        }
        else
        {
          v448 = *(std::string *)&v472[1].__locale_;
        }
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        v354 = HIBYTE(v448.__r_.__value_.__r.__words[2]);
        if ((v448.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v354 = v448.__r_.__value_.__l.__size_;
        if (v354 == 5)
        {
          v369 = &v448;
          if ((v448.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v369 = (std::string *)v448.__r_.__value_.__r.__words[0];
          data = (int)v369->__r_.__value_.__l.__data_;
          v371 = v369->__r_.__value_.__s.__data_[4];
          v372 = data == 1869834614 && v371 == 114;
          v359 = a4 + 6;
          if (!v372)
            goto LABEL_776;
        }
        else
        {
          if (v354 != 12)
            goto LABEL_776;
          v355 = &v448;
          if ((v448.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v355 = (std::string *)v448.__r_.__value_.__r.__words[0];
          v356 = v355->__r_.__value_.__r.__words[0];
          v357 = v355->__r_.__value_.__r.__words[1];
          v358 = v356 == 0x69635F726574756FLL && v357 == 1701602162;
          v359 = a4 + 3;
          if (!v358)
LABEL_776:
            v359 = a4;
        }
LABEL_826:
        sub_235861290(v359, v343 + 24);
        if (SHIBYTE(v448.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v448.__r_.__value_.__l.__data_);
        goto LABEL_732;
      }
      break;
    }
    *(_WORD *)((char *)&__p[2] + 7) = 11788;
    strcpy((char *)__p, "<xmlattr>.id");
    v451 = __p;
    v352 = sub_23585D828(v343 + 24, (uint64_t)__p);
    LOBYTE(v472[0].__locale_) = 0;
    if (*(char *)(v352 + 23) < 0)
    {
      sub_23584B488(&v472[1], *(void **)v352, *(_QWORD *)(v352 + 8));
    }
    else
    {
      v353 = *(_OWORD *)v352;
      v472[3] = *(std::locale *)(v352 + 16);
      *(_OWORD *)&v472[1].__locale_ = v353;
    }
    LOBYTE(v472[0].__locale_) = 1;
    if (SHIBYTE(v472[3].__locale_) < 0)
    {
      sub_23584B488(&v448, v472[1].__locale_, (unint64_t)v472[2].__locale_);
      if (LOBYTE(v472[0].__locale_) && SHIBYTE(v472[3].__locale_) < 0)
        operator delete(v472[1].__locale_);
    }
    else
    {
      v448 = *(std::string *)&v472[1].__locale_;
    }
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    v360 = HIBYTE(v448.__r_.__value_.__r.__words[2]);
    if ((v448.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v360 = v448.__r_.__value_.__l.__size_;
    v359 = a4 + 6;
    if (v360 != 12)
      goto LABEL_826;
    if ((v448.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v361 = &v448;
    else
      v361 = (std::string *)v448.__r_.__value_.__r.__words[0];
    v362 = 0x6F757465725F6369;
    v363 = bswap64(v361->__r_.__value_.__r.__words[0]);
    if (v363 == 0x6F757465725F6369)
    {
      v363 = bswap32(v361->__r_.__value_.__r.__words[1]);
      if ((_DWORD)v363 == 1919118437)
      {
        v364 = 0;
LABEL_823:
        if (v364)
          v359 = a4 + 6;
        else
          v359 = a4 + 3;
        goto LABEL_826;
      }
      v362 = 1919118437;
    }
    if (v363 < v362)
      v364 = -1;
    else
      v364 = 1;
    goto LABEL_823;
  }
LABEL_828:
  *(_WORD *)((char *)&__p[2] + 7) = 11781;
  strcpy((char *)__p, "svg.g");
  v451 = __p;
  v178 = v420;
  v373 = sub_23585D828((uint64_t)v463, (uint64_t)__p);
  v374 = v373;
  if (*(char *)(v373 + 23) < 0)
  {
    sub_23584B488(&v429, *(void **)v373, *(_QWORD *)(v373 + 8));
  }
  else
  {
    v375 = *(_OWORD *)v373;
    v429.__r_.__value_.__r.__words[2] = *(_QWORD *)(v373 + 16);
    *(_OWORD *)&v429.__r_.__value_.__l.__data_ = v375;
  }
  v376 = operator new();
  v377 = *(_QWORD *)(v374 + 24);
  *(_QWORD *)(v376 + 8) = operator new(0x60uLL);
  *(_QWORD *)(v376 + 24) = 0;
  sub_23586BE1C(v376, v377);
  v430 = v376;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_471;
LABEL_846:
    if (SHIBYTE(v462.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_472;
LABEL_847:
    if (!v178)
      goto LABEL_849;
    goto LABEL_848;
  }
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_846;
LABEL_471:
  operator delete(__str.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v462.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_847;
LABEL_472:
  operator delete(v462.__r_.__value_.__l.__data_);
  if (v178)
LABEL_848:
    operator delete(v178);
LABEL_849:
  v378 = v465;
  v379 = *(_QWORD **)(v465 + 8);
  v380 = v379[11];
  if (v380)
    v381 = (_QWORD *)(v380 - 80);
  else
    v381 = 0;
  if (v381 != v379)
  {
    do
    {
      v382 = v381[11];
      if (v382)
        v379 = (_QWORD *)(v382 - 80);
      else
        v379 = 0;
      sub_2358688CC((uint64_t)v381);
      operator delete(v381);
      v381 = v379;
    }
    while (v379 != *(_QWORD **)(v378 + 8));
  }
  operator delete(v379);
  MEMORY[0x23B7D94C4](v378, 0x1020C402FC1992ELL);
  if (SHIBYTE(v464) < 0)
    operator delete(v463[0].__locale_);
  __dst[0] = *(std::locale *)MEMORY[0x24BEDB7F0];
  v383 = *(std::locale::__imp **)(MEMORY[0x24BEDB7F0] + 72);
  *(std::locale *)((char *)__dst + *((_QWORD *)__dst[0].__locale_ - 3)) = *(std::locale *)(MEMORY[0x24BEDB7F0] + 64);
  __dst[2].__locale_ = v383;
  __dst[3].__locale_ = (std::locale::__imp *)(MEMORY[0x24BEDB848] + 16);
  if (SBYTE7(v469) < 0)
    operator delete((void *)v468);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23B7D9458](v471);
  if (SHIBYTE(v429.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_23584B488(__dst, v429.__r_.__value_.__l.__data_, v429.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&__dst[0].__locale_ = *(_OWORD *)&v429.__r_.__value_.__l.__data_;
    __dst[2] = (std::locale)v429.__r_.__value_.__r.__words[2];
  }
  v384 = operator new();
  v385 = v430;
  *(_QWORD *)(v384 + 8) = operator new(0x60uLL);
  *(_QWORD *)(v384 + 24) = 0;
  sub_23586BE1C(v384, v385);
  v386 = __dst[2].__locale_;
  v387 = *(_OWORD *)&__dst[0].__locale_;
  *(_OWORD *)&__dst[0].__locale_ = *(_OWORD *)&v431.__r_.__value_.__l.__data_;
  *(_OWORD *)&v431.__r_.__value_.__l.__data_ = v387;
  v388 = v432;
  __dst[2] = (std::locale)v431.__r_.__value_.__r.__words[2];
  __dst[3].__locale_ = v432;
  v431.__r_.__value_.__r.__words[2] = (std::string::size_type)v386;
  v432 = (std::locale::__imp *)v384;
  v389 = (_QWORD *)*((_QWORD *)__dst[3].__locale_ + 1);
  v390 = v389[11];
  if (v390)
    v391 = (_QWORD *)(v390 - 80);
  else
    v391 = 0;
  if (v391 != v389)
  {
    do
    {
      v392 = v391[11];
      if (v392)
        v389 = (_QWORD *)(v392 - 80);
      else
        v389 = 0;
      sub_2358688CC((uint64_t)v391);
      operator delete(v391);
      v391 = v389;
    }
    while (v389 != *((_QWORD **)v388 + 1));
  }
  operator delete(v389);
  MEMORY[0x23B7D94C4](v388, 0x1020C402FC1992ELL);
  if (SHIBYTE(__dst[2].__locale_) < 0)
    operator delete(__dst[0].__locale_);
  v393 = v430;
  v394 = *(_QWORD **)(v430 + 8);
  v395 = v394[11];
  if (v395)
    v396 = (_QWORD *)(v395 - 80);
  else
    v396 = 0;
  if (v396 != v394)
  {
    do
    {
      v397 = v396[11];
      if (v397)
        v394 = (_QWORD *)(v397 - 80);
      else
        v394 = 0;
      sub_2358688CC((uint64_t)v396);
      operator delete(v396);
      v396 = v394;
    }
    while (v394 != *(_QWORD **)(v393 + 8));
  }
  operator delete(v394);
  MEMORY[0x23B7D94C4](v393, 0x1020C402FC1992ELL);
  if (SHIBYTE(v429.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v429.__r_.__value_.__l.__data_);
    v398 = a1;
    if (!*(_QWORD *)(v384 + 24))
      goto LABEL_888;
LABEL_884:
    *(_WORD *)((char *)&__dst[2].__locale_ + 7) = 11781;
    strcpy((char *)__dst, "svg.g");
    v467[0] = __dst;
    sub_235860FA8((uint64_t)v435, (uint64_t)__dst, (__int128 *)&v431);
    if (SHIBYTE(__dst[2].__locale_) < 0)
    {
      operator delete(__dst[0].__locale_);
      if ((SHIBYTE(v436) & 0x80000000) == 0)
        goto LABEL_886;
    }
    else if ((SHIBYTE(v436) & 0x80000000) == 0)
    {
LABEL_886:
      *(_OWORD *)v398 = *(_OWORD *)v435;
      *(_QWORD *)(v398 + 16) = v436;
LABEL_891:
      v399 = operator new();
      v401 = v437;
      *(_QWORD *)(v399 + 8) = operator new(0x60uLL);
      *(_QWORD *)(v399 + 24) = 0;
      sub_23586BE1C(v399, v401);
      goto LABEL_892;
    }
    sub_23584B488((_BYTE *)v398, v435[0], (unint64_t)v435[1]);
    goto LABEL_891;
  }
  v398 = a1;
  if (*(_QWORD *)(v384 + 24))
    goto LABEL_884;
LABEL_888:
  *(_QWORD *)v398 = 0;
  *(_QWORD *)(v398 + 8) = 0;
  *(_QWORD *)(v398 + 16) = 0;
  v399 = operator new();
  v400 = operator new(0x60uLL);
  *(_QWORD *)(v399 + 8) = v400;
  v400[7] = 0;
  v400[8] = v400 + 7;
  v400[9] = v400 + 7;
  v400[10] = v400 + 10;
  v400[11] = v400 + 10;
  *(_QWORD *)(v399 + 24) = 0;
LABEL_892:
  *(_QWORD *)(v398 + 24) = v399;
  v402 = *(_QWORD **)(v384 + 8);
  v403 = v402[11];
  if (v403)
    v404 = (_QWORD *)(v403 - 80);
  else
    v404 = 0;
  if (v404 != v402)
  {
    do
    {
      v405 = v404[11];
      if (v405)
        v402 = (_QWORD *)(v405 - 80);
      else
        v402 = 0;
      sub_2358688CC((uint64_t)v404);
      operator delete(v404);
      v404 = v402;
    }
    while (v402 != *(_QWORD **)(v384 + 8));
  }
  operator delete(v402);
  MEMORY[0x23B7D94C4](v384, 0x1020C402FC1992ELL);
  if (SHIBYTE(v431.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v431.__r_.__value_.__l.__data_);
  v406 = v434;
  v407 = *(_QWORD **)(v434 + 8);
  v408 = v407[11];
  if (v408)
    v409 = (_QWORD *)(v408 - 80);
  else
    v409 = 0;
  if (v409 != v407)
  {
    do
    {
      v410 = v409[11];
      if (v410)
        v407 = (_QWORD *)(v410 - 80);
      else
        v407 = 0;
      sub_2358688CC((uint64_t)v409);
      operator delete(v409);
      v409 = v407;
    }
    while (v407 != *(_QWORD **)(v406 + 8));
  }
  operator delete(v407);
  MEMORY[0x23B7D94C4](v406, 0x1020C402FC1992ELL);
  if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v433.__r_.__value_.__l.__data_);
  v411 = v437;
  v412 = *(_QWORD **)(v437 + 8);
  v413 = v412[11];
  if (v413)
    v414 = (_QWORD *)(v413 - 80);
  else
    v414 = 0;
  if (v414 != v412)
  {
    do
    {
      v415 = v414[11];
      if (v415)
        v412 = (_QWORD *)(v415 - 80);
      else
        v412 = 0;
      sub_2358688CC((uint64_t)v414);
      operator delete(v414);
      v414 = v412;
    }
    while (v412 != *(_QWORD **)(v411 + 8));
  }
  operator delete(v412);
  MEMORY[0x23B7D94C4](v411, 0x1020C402FC1992ELL);
  if (SHIBYTE(v436) < 0)
    operator delete(v435[0]);
}

void sub_2358651A4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49)
{
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;

  __cxa_end_catch();
  if (SLOBYTE(STACK[0x26F]) < 0)
  {
    operator delete((void *)STACK[0x258]);
    if ((SLOBYTE(STACK[0x3A7]) & 0x80000000) == 0)
    {
LABEL_34:
      if (!a19)
      {
LABEL_39:
        sub_23585D370((uint64_t)&STACK[0x3B0]);
        sub_23584CD98((uint64_t)&STACK[0x3D0]);
        if (a2 == 1)
        {
          __cxa_begin_catch(a1);
          a17[1] = 0;
          a17[2] = 0;
          *a17 = 0;
          v63 = operator new();
          v64 = operator new(0x60uLL);
          *(_QWORD *)(v63 + 8) = v64;
          v64[7] = 0;
          v64[8] = v64 + 7;
          v64[9] = v64 + 7;
          v64[10] = v64 + 10;
          v64[11] = v64 + 10;
          *(_QWORD *)(v63 + 24) = 0;
          a17[3] = v63;
          __cxa_end_catch();
          JUMPOUT(0x235864EE0);
        }
        v51 = *(_QWORD **)(a35 + 8);
        v52 = v51[11];
        if (v52)
          v53 = (_QWORD *)(v52 - 80);
        else
          v53 = 0;
        if (v53 != v51)
        {
          do
          {
            v54 = v53[11];
            if (v54)
              v51 = (_QWORD *)(v54 - 80);
            else
              v51 = 0;
            sub_2358688CC((uint64_t)v53);
            operator delete(v53);
            v53 = v51;
          }
          while (v51 != *(_QWORD **)(a35 + 8));
        }
        operator delete(v51);
        MEMORY[0x23B7D94C4](a35, 0x1020C402FC1992ELL);
        if (a34 < 0)
          operator delete(__p);
        v55 = *(_QWORD **)(a42 + 8);
        v56 = v55[11];
        if (v56)
          v57 = (_QWORD *)(v56 - 80);
        else
          v57 = 0;
        if (v57 != v55)
        {
          do
          {
            v58 = v57[11];
            if (v58)
              v55 = (_QWORD *)(v58 - 80);
            else
              v55 = 0;
            sub_2358688CC((uint64_t)v57);
            operator delete(v57);
            v57 = v55;
          }
          while (v55 != *(_QWORD **)(a42 + 8));
        }
        operator delete(v55);
        MEMORY[0x23B7D94C4](a42, 0x1020C402FC1992ELL);
        if (a41 < 0)
          operator delete(a36);
        v59 = *(_QWORD **)(a49 + 8);
        v60 = v59[11];
        if (v60)
          v61 = (_QWORD *)(v60 - 80);
        else
          v61 = 0;
        if (v61 != v59)
        {
          do
          {
            v62 = v61[11];
            if (v62)
              v59 = (_QWORD *)(v62 - 80);
            else
              v59 = 0;
            sub_2358688CC((uint64_t)v61);
            operator delete(v61);
            v61 = v59;
          }
          while (v59 != *(_QWORD **)(a49 + 8));
        }
        operator delete(v59);
        MEMORY[0x23B7D94C4](a49, 0x1020C402FC1992ELL);
        if (a48 < 0)
        {
          operator delete(a43);
          _Unwind_Resume(a1);
        }
        _Unwind_Resume(a1);
      }
LABEL_38:
      operator delete(a19);
      goto LABEL_39;
    }
  }
  else if ((SLOBYTE(STACK[0x3A7]) & 0x80000000) == 0)
  {
    goto LABEL_34;
  }
  operator delete((void *)STACK[0x390]);
  if (!a19)
    goto LABEL_39;
  goto LABEL_38;
}

void sub_235865CD8()
{
  JUMPOUT(0x235865644);
}

void sub_235865CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  MEMORY[0x23B7D94C4](v17, 0x1020C402FC1992ELL);
  if (*(char *)(a17 + 23) < 0)
    operator delete(*(void **)a17);
  __cxa_end_catch();
  JUMPOUT(0x235865644);
}

uint64_t sub_235865D3C(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v13;
  uint64_t v14;

  sub_23585D9D0(__p, a2);
  v3 = *(_OWORD *)__p;
  *(_OWORD *)__p = *(_OWORD *)a1;
  *(_OWORD *)a1 = v3;
  v4 = v13;
  v5 = v14;
  v6 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = v6;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  v7 = *(_QWORD **)(v6 + 8);
  v8 = v7[11];
  if (v8)
    v9 = (_QWORD *)(v8 - 80);
  else
    v9 = 0;
  if (v9 != v7)
  {
    do
    {
      v10 = v9[11];
      if (v10)
        v7 = (_QWORD *)(v10 - 80);
      else
        v7 = 0;
      sub_2358688CC((uint64_t)v9);
      operator delete(v9);
      v9 = v7;
    }
    while (v7 != *(_QWORD **)(v6 + 8));
  }
  operator delete(v7);
  MEMORY[0x23B7D94C4](v6, 0x1020C402FC1992ELL);
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_235865E28(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, unsigned int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const void **v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::string *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  size_t v23;
  void *v24;
  unint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  const void **v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  std::string::size_type v49;
  void *v50;
  unint64_t v51;
  const void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const void **v58;
  char *v59;
  int v60;
  __int128 v61;
  std::string::size_type v62;
  std::string::size_type p_size;
  int v64;
  int v65;
  std::string::size_type *size;
  int v68;
  size_t v69;
  unint64_t v70;
  char *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  _WORD *v75;
  const void *v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  void *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  void **v106;
  uint64_t *v107;
  unint64_t *v108;
  int v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t *v116;
  _QWORD *v117;
  unint64_t v118;
  int v119;
  int v120;
  uint64_t *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void **v134;
  std::locale::__imp *v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t *v139;
  char **v140;
  _QWORD *v141;
  char *v142;
  unint64_t v143;
  _OWORD *v144;
  _BYTE *v145;
  unsigned int v146;
  BOOL v147;
  unsigned int v148;
  char *v149;
  char *v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  unint64_t v164;
  int v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t *v168;
  _QWORD **v169;
  _BYTE *v170;
  unint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  int v181;
  char *v182;
  char *v183;
  uint64_t v184;
  int v185;
  _BOOL4 v186;
  int v187;
  uint64_t *v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  char v192;
  unint64_t v193;
  uint64_t *v194;
  _QWORD *v195;
  unint64_t v196;
  int v197;
  int v198;
  uint64_t *v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  _QWORD *v207;
  _QWORD *v208;
  unint64_t v209;
  _QWORD *v210;
  _QWORD *v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  int v216;
  char *v217;
  char *v218;
  uint64_t v219;
  _OWORD *v220;
  int v221;
  _QWORD *v222;
  _BOOL4 v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t *v227;
  uint64_t v228;
  char v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  void **v239;
  __int128 v240;
  unint64_t *v241;
  uint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  void *v256;
  void *v257;
  std::ios_base *v258;
  uint64_t v259;
  char v260;
  size_t v261;
  void *v262;
  _BYTE *v263;
  const void *v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  uint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  uint64_t v283;
  uint64_t v284;
  uint64_t *v287;
  uint64_t v288;
  _QWORD **v289;
  unint64_t *v290;
  uint64_t v291;
  uint64_t *v292;
  unint64_t *v293;
  uint64_t *v294;
  void **v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t *v298;
  uint64_t *v299;
  void **v300;
  uint64_t v302;
  _QWORD *v303;
  void *v304[2];
  void *v305;
  void *v306[2];
  uint64_t v307;
  uint64_t v308;
  void *v309[2];
  uint64_t v310;
  uint64_t v311;
  void *v312[2];
  uint64_t v313;
  uint64_t v314;
  __int128 v315;
  uint64_t v316;
  uint64_t v317;
  __int128 v318;
  unint64_t v319;
  _BYTE v320[32];
  __int128 v321;
  void *v322[2];
  __int128 v323;
  __int128 v324;
  void *v325[2];
  unint64_t v326;
  int v327;
  uint64_t v328;
  std::locale v329[2];
  uint64_t v330;
  uint64_t v331;
  std::locale v332[2];
  uint64_t v333;
  uint64_t v334;
  void *__p[4];
  __int128 v336;
  void *v337[2];
  _QWORD v338[6];
  unint64_t v339;
  int v340;
  _BYTE v341[152];
  std::locale v342;
  _BYTE __dst[32];
  __int128 v344;
  void *v345[2];
  void *v346[2];
  __int128 v347;
  void *v348[2];
  uint64_t v349;
  std::string v350;
  uint64_t v351;
  uint64_t v352;

  v352 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) <= 0xB8uLL)
  {
    *(_DWORD *)a8 = 0;
    *(_BYTE *)(a8 + 24) = 0;
    return;
  }
  v9 = a1;
  v10 = *a1;
  *(_WORD *)((char *)&__p[2] + 7) = 11795;
  strcpy((char *)__p, "circle.<xmlattr>.cx");
  *(_QWORD *)&v336 = __p;
  std::to_string((std::string *)v320, 400.0);
  sub_235868A68(v10, (uint64_t)__p, (__int128 *)v320);
  if ((v320[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v320);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_5;
  }
  else if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p[0]);
LABEL_5:
  *(_WORD *)((char *)&__p[2] + 7) = 11795;
  strcpy((char *)__p, "circle.<xmlattr>.cy");
  *(_QWORD *)&v336 = __p;
  std::to_string((std::string *)v320, 400.0);
  sub_235868A68(v10, (uint64_t)__p, (__int128 *)v320);
  if ((v320[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v320);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_7;
  }
  else if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(__p[0]);
LABEL_7:
  v284 = a8;
  *(_WORD *)((char *)&__p[2] + 7) = 11795;
  strcpy((char *)__p, "circle.<xmlattr>.id");
  *(_QWORD *)&v336 = __p;
  MEMORY[0x23B7D93F8](v329);
  std::locale::locale(v332, v329);
  sub_235868BC8((uint64_t *)__dst, v10, (uint64_t)__p);
  v11 = *(_QWORD *)__dst;
  if (*(_QWORD *)__dst)
  {
    std::locale::locale((std::locale *)v320, v332);
    sub_23586B3BC(v11, (const std::locale *)v320);
  }
  else
  {
    memset(v320, 0, 24);
    v12 = operator new();
    v13 = operator new(0x60uLL);
    *(_QWORD *)(v12 + 8) = v13;
    v13[7] = 0;
    v13[8] = v13 + 7;
    v13[9] = v13 + 7;
    v13[10] = v13 + 10;
    v13[11] = v13 + 10;
    *(_QWORD *)(v12 + 24) = 0;
    *(_QWORD *)&v320[24] = v12;
    v14 = sub_235868DE8(v10, (uint64_t)__p, (__int128 *)v320);
    v15 = *(_QWORD **)(v12 + 8);
    v16 = v15[11];
    if (v16)
      v17 = (_QWORD *)(v16 - 80);
    else
      v17 = 0;
    if (v17 != v15)
    {
      do
      {
        v18 = v17[11];
        if (v18)
          v15 = (_QWORD *)(v18 - 80);
        else
          v15 = 0;
        sub_2358688CC((uint64_t)v17);
        operator delete(v17);
        v17 = v15;
      }
      while (v15 != *(_QWORD **)(v12 + 8));
    }
    operator delete(v15);
    MEMORY[0x23B7D94C4](v12, 0x1020C402FC1992ELL);
    std::locale::locale((std::locale *)v320, v332);
    sub_23586B3BC((uint64_t)v14, (const std::locale *)v320);
  }
  std::locale::~locale((std::locale *)v320);
  std::locale::~locale(v332);
  std::locale::~locale(v329);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  *(_WORD *)((char *)&__p[2] + 7) = 11794;
  strcpy((char *)__p, "circle.<xmlattr>.r");
  *(_QWORD *)&v336 = __p;
  std::to_string((std::string *)v320, 400.0);
  sub_235868A68(v10, (uint64_t)__p, (__int128 *)v320);
  if ((v320[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v320);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_26;
  }
  else if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(__p[0]);
LABEL_26:
  strcpy((char *)__p, "circle.<xmlattr>.style");
  HIBYTE(__p[2]) = 22;
  LOBYTE(__p[3]) = 46;
  *(_QWORD *)&v336 = __p;
  sub_23585D42C(__dst);
  v19 = std::string::insert((std::string *)__dst, 0, "fill:", 5uLL);
  *(std::string *)v320 = *v19;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  sub_235868A68(v10, (uint64_t)__p, (__int128 *)v320);
  if ((v320[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v320);
    if ((__dst[23] & 0x80000000) == 0)
    {
LABEL_28:
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        goto LABEL_29;
LABEL_35:
      operator delete(__p[0]);
      if (!a5)
        goto LABEL_54;
      goto LABEL_36;
    }
  }
  else if ((__dst[23] & 0x80000000) == 0)
  {
    goto LABEL_28;
  }
  operator delete(*(void **)__dst);
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_35;
LABEL_29:
  if (!a5)
    goto LABEL_54;
LABEL_36:
  sub_23584CC60((uint64_t)__p);
  sub_23584D1D8(&__p[2], (uint64_t)"translate(", 10);
  v20 = (_QWORD *)std::ostream::operator<<();
  sub_23584D1D8(v20, (uint64_t)" ", 1);
  v21 = (_QWORD *)std::ostream::operator<<();
  sub_23584D1D8(v21, (uint64_t)")", 1);
  v22 = (char *)operator new(0x20uLL);
  *(_QWORD *)v320 = v22;
  *(_OWORD *)&v320[8] = xmmword_2358911E0;
  strcpy(v22, "circle.<xmlattr>.transform");
  v320[24] = 46;
  *(_QWORD *)&v321 = v22;
  if ((v340 & 0x10) != 0)
  {
    v25 = v339;
    if (v339 < v338[1])
    {
      v339 = v338[1];
      v25 = v338[1];
    }
    v26 = (const void *)v338[0];
    v23 = v25 - v338[0];
    if (v25 - v338[0] > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_491;
  }
  else
  {
    if ((v340 & 8) == 0)
    {
      v23 = 0;
      __dst[23] = 0;
      v24 = __dst;
      goto LABEL_49;
    }
    v26 = (const void *)*((_QWORD *)&v336 + 1);
    v23 = (size_t)v337[1] - *((_QWORD *)&v336 + 1);
    if ((char *)v337[1] - *((_QWORD *)&v336 + 1) > (void *)0x7FFFFFFFFFFFFFF7)
LABEL_491:
      sub_23584B34C();
  }
  if (v23 >= 0x17)
  {
    v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v27 = v23 | 7;
    v28 = v27 + 1;
    v24 = operator new(v27 + 1);
    *(_QWORD *)&__dst[16] = v28 | 0x8000000000000000;
    *(_QWORD *)__dst = v24;
    *(_QWORD *)&__dst[8] = v23;
    goto LABEL_48;
  }
  __dst[23] = v23;
  v24 = __dst;
  if (v23)
LABEL_48:
    memmove(v24, v26, v23);
LABEL_49:
  *((_BYTE *)v24 + v23) = 0;
  sub_235868A68(v10, (uint64_t)v320, (__int128 *)__dst);
  if ((__dst[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__dst);
    if ((v320[23] & 0x80000000) == 0)
      goto LABEL_51;
LABEL_60:
    operator delete(*(void **)v320);
    goto LABEL_51;
  }
  if ((v320[23] & 0x80000000) != 0)
    goto LABEL_60;
LABEL_51:
  __p[0] = *(void **)MEMORY[0x24BEDB7F0];
  v29 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  __p[2] = v29;
  __p[3] = (void *)(MEMORY[0x24BEDB848] + 16);
  if (SHIBYTE(v338[5]) < 0)
    operator delete((void *)v338[3]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23B7D9458](v341);
LABEL_54:
  v315 = 0uLL;
  v316 = 0;
  v30 = operator new();
  v31 = operator new(0x60uLL);
  *(_QWORD *)(v30 + 8) = v31;
  v31[7] = 0;
  v31[8] = v31 + 7;
  v31[9] = v31 + 7;
  v31[10] = v31 + 10;
  v31[11] = v31 + 10;
  *(_QWORD *)(v30 + 24) = 0;
  v317 = v30;
  v287 = v9;
  if (!a5)
    goto LABEL_191;
  sub_23584CC60((uint64_t)__p);
  v332[1].__locale_ = 0;
  v332[0].__locale_ = 0;
  v333 = 0;
  v32 = operator new();
  v33 = operator new(0x60uLL);
  *(_QWORD *)(v32 + 8) = v33;
  v33[7] = 0;
  v33[8] = v33 + 7;
  v33[9] = v33 + 7;
  v33[10] = v33 + 10;
  v33[11] = v33 + 10;
  *(_QWORD *)(v32 + 24) = 0;
  v334 = v32;
  sub_23584D1D8(&__p[2], (uint64_t)aSvgVersion11Xm, 6682);
  memset(v320, 0, 24);
  sub_23586DAA4();
  if ((v320[23] & 0x80000000) != 0)
    operator delete(*(void **)v320);
  v329[1].__locale_ = 0;
  v329[0].__locale_ = 0;
  v330 = 0;
  v34 = operator new();
  v35 = operator new(0x60uLL);
  *(_QWORD *)(v34 + 8) = v35;
  v35[7] = 0;
  v35[8] = v35 + 7;
  v35[9] = v35 + 7;
  v35[10] = v35 + 10;
  v35[11] = v35 + 10;
  *(_QWORD *)(v34 + 24) = 0;
  v331 = v34;
  *(_WORD *)&v320[23] = 11790;
  strcpy(v320, "g.<xmlattr>.id");
  *(_QWORD *)&v321 = v320;
  MEMORY[0x23B7D93F8](&v342);
  std::locale::locale((std::locale *)&v318, &v342);
  sub_235868BC8((uint64_t *)&v350, (uint64_t)v329, (uint64_t)v320);
  v36 = v350.__r_.__value_.__r.__words[0];
  if (v350.__r_.__value_.__r.__words[0])
  {
    std::locale::locale((std::locale *)__dst, (const std::locale *)&v318);
    sub_23587604C(v36, (const std::locale *)__dst);
  }
  else
  {
    memset(__dst, 0, 24);
    v37 = operator new();
    v38 = operator new(0x60uLL);
    *(_QWORD *)(v37 + 8) = v38;
    v38[7] = 0;
    v38[8] = v38 + 7;
    v38[9] = v38 + 7;
    v38[10] = v38 + 10;
    v38[11] = v38 + 10;
    *(_QWORD *)(v37 + 24) = 0;
    *(_QWORD *)&__dst[24] = v37;
    v39 = sub_235868DE8((uint64_t)v329, (uint64_t)v320, (__int128 *)__dst);
    v40 = *(_QWORD **)(v37 + 8);
    v41 = v40[11];
    if (v41)
      v42 = (_QWORD *)(v41 - 80);
    else
      v42 = 0;
    if (v42 != v40)
    {
      do
      {
        v43 = v42[11];
        if (v43)
          v40 = (_QWORD *)(v43 - 80);
        else
          v40 = 0;
        sub_2358688CC((uint64_t)v42);
        operator delete(v42);
        v42 = v40;
      }
      while (v40 != *(_QWORD **)(v37 + 8));
    }
    operator delete(v40);
    MEMORY[0x23B7D94C4](v37, 0x1020C402FC1992ELL);
    std::locale::locale((std::locale *)__dst, (const std::locale *)&v318);
    sub_23587604C((uint64_t)v39, (const std::locale *)__dst);
  }
  std::locale::~locale((std::locale *)__dst);
  std::locale::~locale((std::locale *)&v318);
  std::locale::~locale(&v342);
  if ((v320[23] & 0x80000000) != 0)
    operator delete(*(void **)v320);
  sub_23584CC60((uint64_t)v320);
  sub_23584D1D8(&v320[16], (uint64_t)"translate(", 10);
  v44 = (_QWORD *)std::ostream::operator<<();
  sub_23584D1D8(v44, (uint64_t)" ", 1);
  v45 = (_QWORD *)std::ostream::operator<<();
  v46 = sub_23584D1D8(v45, (uint64_t)") ", 2);
  sub_23584D1D8(v46, (uint64_t)"scale(", 6);
  v47 = (_QWORD *)std::ostream::operator<<();
  sub_23584D1D8(v47, (uint64_t)" ", 1);
  v48 = (_QWORD *)std::ostream::operator<<();
  sub_23584D1D8(v48, (uint64_t)")", 1);
  *(_WORD *)&__dst[23] = 11797;
  strcpy(__dst, "g.<xmlattr>.transform");
  *(_QWORD *)&v344 = __dst;
  if ((v327 & 0x10) != 0)
  {
    v51 = v326;
    if (v326 < *((_QWORD *)&v323 + 1))
    {
      v326 = *((_QWORD *)&v323 + 1);
      v51 = *((_QWORD *)&v323 + 1);
    }
    v52 = (const void *)v323;
    v49 = v51 - v323;
    if (v51 - (unint64_t)v323 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_493;
  }
  else
  {
    if ((v327 & 8) == 0)
    {
      v49 = 0;
      *((_BYTE *)&v350.__r_.__value_.__s + 23) = 0;
      v50 = &v350;
      goto LABEL_85;
    }
    v52 = (const void *)*((_QWORD *)&v321 + 1);
    v49 = (std::string::size_type)v322[1] - *((_QWORD *)&v321 + 1);
    if ((char *)v322[1] - *((_QWORD *)&v321 + 1) > (void *)0x7FFFFFFFFFFFFFF7)
LABEL_493:
      sub_23584B34C();
  }
  if (v49 >= 0x17)
  {
    v53 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17)
      v53 = v49 | 7;
    v54 = v53 + 1;
    v50 = operator new(v53 + 1);
    v350.__r_.__value_.__l.__size_ = v49;
    v350.__r_.__value_.__r.__words[2] = v54 | 0x8000000000000000;
    v350.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
    goto LABEL_84;
  }
  *((_BYTE *)&v350.__r_.__value_.__s + 23) = v49;
  v50 = &v350;
  if (v49)
LABEL_84:
    memmove(v50, v52, v49);
LABEL_85:
  *((_BYTE *)v50 + v49) = 0;
  sub_235868A68((uint64_t)v329, (uint64_t)__dst, (__int128 *)&v350);
  if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v350.__r_.__value_.__l.__data_);
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_87;
LABEL_155:
    operator delete(*(void **)__dst);
    goto LABEL_87;
  }
  if ((__dst[23] & 0x80000000) != 0)
    goto LABEL_155;
LABEL_87:
  *(_WORD *)&__dst[23] = 11779;
  strcpy(__dst, "svg");
  *(_QWORD *)&v344 = __dst;
  v55 = sub_23585D828((uint64_t)v332, (uint64_t)__dst);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  v56 = *(_QWORD *)(*(_QWORD *)(v55 + 24) + 8);
  v57 = *(_QWORD *)(v56 + 88);
  if (v57)
    v58 = (const void **)(v57 - 80);
  else
    v58 = 0;
  while (v58 != (const void **)v56)
  {
    *(_WORD *)&__dst[23] = 11788;
    strcpy(__dst, "<xmlattr>.id");
    *(_QWORD *)&v344 = __dst;
    sub_23586D9AC((uint64_t *)&v318, (uint64_t)(v58 + 3), (uint64_t)__dst);
    v60 = v318;
    if ((_QWORD)v318)
    {
      v350.__r_.__value_.__s.__data_[0] = 0;
      if (*(char *)(v318 + 23) < 0)
      {
        sub_23584B488(&v350.__r_.__value_.__s.__data_[8], *(void **)v318, *(_QWORD *)(v318 + 8));
      }
      else
      {
        v61 = *(_OWORD *)v318;
        v351 = *(_QWORD *)(v318 + 16);
        *(_OWORD *)&v350.__r_.__value_.__r.__words[1] = v61;
      }
      v60 = 1;
    }
    v350.__r_.__value_.__s.__data_[0] = v60;
    if ((__dst[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__dst);
      if (!v350.__r_.__value_.__s.__data_[0])
        goto LABEL_94;
    }
    else if (!v60)
    {
      goto LABEL_94;
    }
    v62 = HIBYTE(v351);
    if (v351 < 0)
      v62 = v350.__r_.__value_.__r.__words[2];
    if (v62 == 4)
    {
      size = (std::string::size_type *)v350.__r_.__value_.__l.__size_;
      if (v351 >= 0)
        size = &v350.__r_.__value_.__l.__size_;
      if (*(_DWORD *)size != 1954047316)
      {
LABEL_122:
        if ((v351 & 0x8000000000000000) == 0)
          goto LABEL_94;
        goto LABEL_151;
      }
      __dst[0] = -byte_23589145D[((3856 * a3[1] + 30848) >> 12) & 0x1F0 | ((3856 * *a3
                                                                                        + 30848) >> 8) & 0x1F00 | ((3856 * a3[2] + 30848) >> 16)];
      __dst[1] = __dst[0];
      __dst[2] = __dst[0];
      sub_235861290((uint64_t)__dst, (uint64_t)(v58 + 3));
    }
    else
    {
      if (v62 != 5)
        goto LABEL_122;
      p_size = v350.__r_.__value_.__l.__size_;
      if (v351 >= 0)
        p_size = (std::string::size_type)&v350.__r_.__value_.__l.__size_;
      v64 = *(_DWORD *)p_size;
      v65 = *(unsigned __int8 *)(p_size + 4);
      if (v64 != 1734631746 || v65 != 101)
        goto LABEL_122;
      sub_235861290((uint64_t)a3, (uint64_t)(v58 + 3));
    }
    v68 = *((char *)v58 + 23);
    if (v68 >= 0)
      v69 = *((unsigned __int8 *)v58 + 23);
    else
      v69 = (size_t)v58[1];
    v70 = v69 + 2;
    if (v69 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_23584B34C();
    if (v70 >= 0x17)
    {
      v73 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v70 | 7) != 0x17)
        v73 = v70 | 7;
      v74 = v73 + 1;
      v75 = operator new(v73 + 1);
      *((_QWORD *)&v318 + 1) = v69 + 2;
      v319 = v74 | 0x8000000000000000;
      *(_QWORD *)&v318 = v75;
      *v75 = 11879;
      v71 = (char *)(v75 + 1);
    }
    else
    {
      v319 = 0;
      HIBYTE(v319) = v69 + 2;
      v71 = (char *)&v318 + 2;
      v318 = 0x2E67uLL;
      if (!v69)
      {
        BYTE2(v318) = 0;
        v72 = SHIBYTE(v319);
        if (SHIBYTE(v319) < 0)
          goto LABEL_140;
        goto LABEL_132;
      }
    }
    if (v68 >= 0)
      v76 = v58;
    else
      v76 = *v58;
    memmove(v71, v76, v69);
    v71[v69] = 0;
    v72 = SHIBYTE(v319);
    if (SHIBYTE(v319) < 0)
    {
LABEL_140:
      sub_23584B488(__dst, (void *)v318, *((unint64_t *)&v318 + 1));
      goto LABEL_141;
    }
LABEL_132:
    *(_OWORD *)__dst = v318;
    *(_QWORD *)&__dst[16] = v319;
LABEL_141:
    __dst[24] = 46;
    if (__dst[23] >= 0)
      v77 = __dst;
    else
      v77 = *(_BYTE **)__dst;
    *(_QWORD *)&v344 = v77;
    sub_235860FA8((uint64_t)v329, (uint64_t)__dst, (__int128 *)(v58 + 3));
    if ((__dst[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__dst);
      if ((v72 & 0x80000000) == 0)
      {
LABEL_146:
        if (!v350.__r_.__value_.__s.__data_[0])
          goto LABEL_94;
LABEL_150:
        if ((v351 & 0x8000000000000000) == 0)
          goto LABEL_94;
LABEL_151:
        operator delete((void *)v350.__r_.__value_.__l.__size_);
        goto LABEL_94;
      }
    }
    else if ((v72 & 0x80000000) == 0)
    {
      goto LABEL_146;
    }
    operator delete((void *)v318);
    if (v350.__r_.__value_.__s.__data_[0])
      goto LABEL_150;
LABEL_94:
    v59 = (char *)v58[11];
    if (v59)
      v58 = (const void **)(v59 - 80);
    else
      v58 = 0;
  }
  if (SHIBYTE(v330) < 0)
  {
    sub_23584B488(v312, v329[0].__locale_, (unint64_t)v329[1].__locale_);
  }
  else
  {
    *(_OWORD *)v312 = *(_OWORD *)&v329[0].__locale_;
    v313 = v330;
  }
  v78 = operator new();
  v79 = v331;
  *(_QWORD *)(v78 + 8) = operator new(0x60uLL);
  *(_QWORD *)(v78 + 24) = 0;
  sub_23586BE1C(v78, v79);
  v314 = v78;
  v80 = (_QWORD *)*MEMORY[0x24BEDB7F0];
  *(_QWORD *)v320 = v80;
  v82 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  v81 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)&v320[*(v80 - 3)] = v82;
  v83 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v320[16] = v81;
  *(_QWORD *)&v320[24] = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v325[1]) < 0)
    operator delete(*((void **)&v324 + 1));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23B7D9458](&v328);
  v84 = v331;
  v85 = *(_QWORD **)(v331 + 8);
  v86 = v85[11];
  if (v86)
    v87 = (_QWORD *)(v86 - 80);
  else
    v87 = 0;
  if (v87 != v85)
  {
    do
    {
      v88 = v87[11];
      if (v88)
        v85 = (_QWORD *)(v88 - 80);
      else
        v85 = 0;
      sub_2358688CC((uint64_t)v87);
      operator delete(v87);
      v87 = v85;
    }
    while (v85 != *(_QWORD **)(v84 + 8));
  }
  operator delete(v85);
  MEMORY[0x23B7D94C4](v84, 0x1020C402FC1992ELL);
  if (SHIBYTE(v330) < 0)
    operator delete(v329[0].__locale_);
  v89 = v334;
  v90 = *(_QWORD **)(v334 + 8);
  v91 = v90[11];
  if (v91)
    v92 = (_QWORD *)(v91 - 80);
  else
    v92 = 0;
  if (v92 != v90)
  {
    do
    {
      v93 = v92[11];
      if (v93)
        v90 = (_QWORD *)(v93 - 80);
      else
        v90 = 0;
      sub_2358688CC((uint64_t)v92);
      operator delete(v92);
      v92 = v90;
    }
    while (v90 != *(_QWORD **)(v89 + 8));
  }
  operator delete(v90);
  MEMORY[0x23B7D94C4](v89, 0x1020C402FC1992ELL);
  if (SHIBYTE(v333) < 0)
    operator delete(v332[0].__locale_);
  __p[0] = v80;
  *(void **)((char *)__p + *(v80 - 3)) = v82;
  __p[2] = v81;
  __p[3] = (void *)(v83 + 16);
  if (SHIBYTE(v338[5]) < 0)
    operator delete((void *)v338[3]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23B7D9458](v341);
  sub_235865D3C((uint64_t)&v315, (__int128 *)v312);
  v9 = v287;
  v94 = v314;
  v95 = *(_QWORD **)(v314 + 8);
  v96 = v95[11];
  if (v96)
    v97 = (_QWORD *)(v96 - 80);
  else
    v97 = 0;
  if (v97 != v95)
  {
    do
    {
      v98 = v97[11];
      if (v98)
        v95 = (_QWORD *)(v98 - 80);
      else
        v95 = 0;
      sub_2358688CC((uint64_t)v97);
      operator delete(v97);
      v97 = v95;
    }
    while (v95 != *(_QWORD **)(v94 + 8));
  }
  operator delete(v95);
  MEMORY[0x23B7D94C4](v94, 0x1020C402FC1992ELL);
  if (SHIBYTE(v313) < 0)
    operator delete(v312[0]);
LABEL_191:
  v99 = 0;
  v100 = 0;
  v101 = *v9;
  v102 = *(uint64_t **)a2;
  v339 = 0;
  *(_OWORD *)v337 = 0u;
  memset(v338, 0, sizeof(v338));
  v336 = 0u;
  v283 = v101;
  v288 = v101 + 56;
  memset(__p, 0, sizeof(__p));
  do
  {
    v103 = (uint64_t *)(v288 + 24 * v100);
    v105 = *v103;
    v104 = v103[1];
    v291 = v100;
    if (*v103 != v104)
    {
      v106 = &__p[3 * v100];
      v107 = (uint64_t *)(v106 + 1);
      v108 = (unint64_t *)(v106 + 2);
      v109 = v99;
      v295 = v106;
      v297 = v103[1];
      v293 = (unint64_t *)(v106 + 2);
      while (1)
      {
        if (v109 == 63)
          v99 = 0;
        else
          v99 = (v109 + 1);
        v110 = *v102;
        v111 = *v107;
        v112 = *v107 + 1;
        v113 = (unint64_t)*v107 >> 6;
        if (*v107 == *v108 << 6)
        {
          if (v112 < 0)
            goto LABEL_496;
          if (v111 <= 0x3FFFFFFFFFFFFFFELL)
          {
            v114 = *v108 << 7;
            if (v114 <= (v111 & 0xFFFFFFFFFFFFFFC0) + 64)
              v114 = (v111 & 0xFFFFFFFFFFFFFFC0) + 64;
            if (v111 >= v114)
              goto LABEL_226;
            if ((v114 & 0x8000000000000000) != 0)
LABEL_496:
              sub_235847D5C();
LABEL_208:
            v299 = v102;
            v302 = v99;
            v115 = ((v114 - 1) >> 6) + 1;
            v116 = (uint64_t *)operator new(8 * v115);
            v106 = v295;
            v117 = *v295;
            v118 = (v111 - 1) >> 6;
            if (v111 < 0x41)
              v118 = 0;
            v116[v118] = 0;
            if (v111 > 0x3F || (v111 & 0x3F) != 0)
            {
              v119 = 0;
              v120 = 0;
              v121 = v116;
              v122 = v117;
              do
              {
                v123 = 1 << v119;
                if (((*v122 >> v120) & 1) != 0)
                  v124 = *v121 | v123;
                else
                  v124 = *v121 & ~v123;
                *v121 = v124;
                v122 += v120 == 63;
                if (v120 == 63)
                  v120 = 0;
                else
                  ++v120;
                v121 += v119 == 63;
                if (v119 == 63)
                  v119 = 0;
                else
                  ++v119;
              }
              while (v120 != (v111 & 0x3F) || v122 != &v117[v113]);
            }
            *v295 = v116;
            v108 = v293;
            *v293 = v115;
            v102 = v299;
            v99 = v302;
            v104 = v297;
            if (v117)
            {
              operator delete(v117);
              v108 = v293;
              v106 = v295;
              v104 = v297;
              v99 = v302;
            }
            goto LABEL_226;
          }
          v114 = 0x7FFFFFFFFFFFFFFFLL;
          if (v111 < 0x7FFFFFFFFFFFFFFFLL)
            goto LABEL_208;
        }
LABEL_226:
        *v107 = v112;
        v125 = *v106;
        v126 = 1 << v111;
        if ((v110 & (1 << v109)) != 0)
        {
          v102 += v109 == 63;
          v125[v113] |= v126;
          v105 += 8;
          v109 = v99;
          if (v105 == v104)
            break;
        }
        else
        {
          v102 += v109 == 63;
          v125[v113] &= ~v126;
          v105 += 8;
          v109 = v99;
          if (v105 == v104)
            break;
        }
      }
    }
    v100 = v291 + 1;
  }
  while (v291 != 4);
  v127 = 0;
  v326 = 0;
  v324 = 0u;
  *(_OWORD *)v325 = 0u;
  *(_OWORD *)v322 = 0u;
  v323 = 0u;
  v321 = 0u;
  memset(v320, 0, sizeof(v320));
  *(_OWORD *)v348 = 0u;
  v347 = 0u;
  *(_OWORD *)v346 = 0u;
  *(_OWORD *)v345 = 0u;
  v344 = 0u;
  memset(__dst, 0, sizeof(__dst));
  v349 = 0;
  v128 = v287;
  while (2)
  {
    while (1)
    {
      v133 = v99;
      v134 = &__p[3 * v127];
      v135 = (std::locale::__imp *)*v134;
      v136 = (unint64_t)v134[1];
      LOBYTE(v318) = 1;
      v329[0].__locale_ = v135;
      LODWORD(v329[1].__locale_) = 0;
      v350.__r_.__value_.__r.__words[0] = (std::string::size_type)v135 + 8 * (v136 >> 6);
      LODWORD(v350.__r_.__value_.__r.__words[1]) = v136 & 0x3F;
      v137 = sub_235852114((uint64_t)v329, (uint64_t)&v350, &v318);
      v138 = (unint64_t)v134[1];
      v296 = v127;
      if (v137 != (int)v138)
        break;
      v139 = v102;
      v140 = (char **)&v320[24 * v127];
      v141 = v140 + 1;
      v142 = v140[1];
      v143 = (unint64_t)v140[2];
      if ((unint64_t)v142 < v143)
      {
        *(_OWORD *)v142 = xmmword_2358911F0;
        v144 = v142 + 16;
LABEL_342:
        v99 = v133;
        goto LABEL_343;
      }
      v151 = *v140;
      v152 = (v142 - *v140) >> 4;
      v153 = v152 + 1;
      if ((unint64_t)(v152 + 1) >> 60)
        sub_235847D5C();
      v154 = v143 - (_QWORD)v151;
      if (v154 >> 3 > v153)
        v153 = v154 >> 3;
      if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFF0)
        v155 = 0xFFFFFFFFFFFFFFFLL;
      else
        v155 = v153;
      if (!v155)
      {
        v99 = v133;
        v156 = 0;
        v157 = (char *)(16 * v152);
        v220 = (_OWORD *)(16 * v152);
        *v220 = xmmword_2358911F0;
        v144 = v220 + 1;
        if (v142 == v151)
          goto LABEL_340;
        do
        {
LABEL_338:
          *((_OWORD *)v157 - 1) = *((_OWORD *)v142 - 1);
          v157 -= 16;
          v142 -= 16;
        }
        while (v142 != v151);
        v142 = *v140;
        goto LABEL_340;
      }
      if (v155 >> 60)
        sub_2358482F0();
      v156 = (char *)operator new(16 * v155);
      v99 = v133;
      v157 = &v156[16 * v152];
      *(_OWORD *)v157 = xmmword_2358911F0;
      v144 = v157 + 16;
      if (v142 != v151)
        goto LABEL_338;
LABEL_340:
      *v140 = v157;
      *v141 = v144;
      v140[2] = &v156[16 * v155];
      if (v142)
      {
        operator delete(v142);
        goto LABEL_342;
      }
LABEL_343:
      *v141 = v144;
      v102 = v139;
      ++v127;
      if (v296 == 4)
        goto LABEL_361;
    }
    v145 = *v134;
    v146 = v138 & 0x3F;
    v147 = v138 <= 0x3F && v146 == 0;
    v148 = 0;
    if (v147)
    {
      v150 = (char *)*v134;
    }
    else
    {
      v149 = &v145[8 * (v138 >> 6)];
      v150 = (char *)*v134;
      while (((*(_QWORD *)v150 >> v148) & 1) != 0)
      {
        v150 += 8 * (v148 == 63);
        if (v148 == 63)
          v148 = 0;
        else
          ++v148;
        if (v148 == v146 && v150 == v149)
        {
          v150 = v149;
          v148 = v146;
          break;
        }
      }
    }
    v158 = 8 * (v150 - v145) + v148;
    v159 = (uint64_t *)(v288 + 24 * v296);
    v160 = *v159;
    v161 = *(_QWORD *)(*v159 + 8 * v158);
    v294 = v159;
    v162 = v159;
    v163 = v159[1];
    v292 = v162 + 1;
    if (v158 + 1 < (int)((unint64_t)(v163 - v160) >> 3))
      v164 = v158 + 1;
    else
      v164 = 0;
    v165 = v133;
    if (v164 == v158)
    {
      v166 = v102;
      v167 = v161;
      goto LABEL_324;
    }
    v168 = (uint64_t *)&v320[24 * v296];
    v169 = (_QWORD **)(v168 + 1);
    v303 = v168 + 2;
    v170 = &__dst[24 * v296];
    v171 = (unint64_t *)(v170 + 8);
    v300 = (void **)v170;
    v298 = (unint64_t *)(v170 + 16);
    v289 = (_QWORD **)(v168 + 1);
    v290 = (unint64_t *)(v170 + 8);
    while (2)
    {
      if (((*(_QWORD *)((char *)*v134 + ((v164 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v164) & 1) == 0)
      {
        v173 = *(_QWORD *)(v160 + 8 * v164);
        v174 = *v169;
        if ((unint64_t)*v169 < *v303)
        {
          *v174 = v161;
          v174[1] = v173;
          v175 = v174 + 2;
          goto LABEL_290;
        }
        v176 = (_QWORD *)*v168;
        v177 = ((uint64_t)v174 - *v168) >> 4;
        v178 = v177 + 1;
        if ((unint64_t)(v177 + 1) >> 60)
          sub_235847D5C();
        v179 = *v303 - (_QWORD)v176;
        if (v179 >> 3 > v178)
          v178 = v179 >> 3;
        if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFF0)
          v180 = 0xFFFFFFFFFFFFFFFLL;
        else
          v180 = v178;
        if (v180)
        {
          if (v180 >> 60)
            sub_2358482F0();
          v181 = v165;
          v182 = (char *)operator new(16 * v180);
          v165 = v181;
          v171 = v290;
          v183 = &v182[16 * v177];
          *(_QWORD *)v183 = v161;
          *((_QWORD *)v183 + 1) = v173;
          v184 = (uint64_t)v183;
          if (v174 == v176)
            goto LABEL_287;
          do
          {
LABEL_285:
            *(_OWORD *)(v184 - 16) = *((_OWORD *)v174 - 1);
            v184 -= 16;
            v174 -= 2;
          }
          while (v174 != v176);
          v174 = (_QWORD *)*v168;
        }
        else
        {
          v182 = 0;
          v183 = (char *)(16 * v177);
          *(_QWORD *)v183 = v161;
          *((_QWORD *)v183 + 1) = v173;
          v184 = 16 * v177;
          if (v174 != v176)
            goto LABEL_285;
        }
LABEL_287:
        v175 = v183 + 16;
        *v168 = v184;
        *v303 = &v182[16 * v180];
        if (v174)
        {
          v185 = v165;
          operator delete(v174);
          v171 = v290;
          v165 = v185;
        }
        v169 = v289;
LABEL_290:
        *v169 = v175;
        v186 = v165 == 63;
        if (v165 == 63)
          v187 = 0;
        else
          v187 = v165 + 1;
        v188 = v102;
        v189 = *v102;
        v190 = *v171;
        if (*v171 == *v298 << 6)
        {
          if ((uint64_t)(v190 + 1) < 0)
            goto LABEL_497;
          if (v190 > 0x3FFFFFFFFFFFFFFELL)
          {
            v191 = 0x7FFFFFFFFFFFFFFFLL;
            if (v190 < 0x7FFFFFFFFFFFFFFFLL)
              goto LABEL_302;
            v190 = -1;
          }
          else
          {
            v191 = *v298 << 7;
            if (v191 <= (v190 & 0xFFFFFFFFFFFFFFC0) + 64)
              v191 = (v190 & 0xFFFFFFFFFFFFFFC0) + 64;
            if (v190 < v191)
            {
              if ((v191 & 0x8000000000000000) != 0)
LABEL_497:
                sub_235847D5C();
LABEL_302:
              v192 = v165;
              v193 = ((v191 - 1) >> 6) + 1;
              v194 = (uint64_t *)operator new(8 * v193);
              v195 = *v300;
              v196 = (v190 - 1) >> 6;
              if (v190 < 0x41)
                v196 = 0;
              v194[v196] = 0;
              if (v190 > 0x3F || (v190 & 0x3F) != 0)
              {
                v197 = 0;
                v198 = 0;
                v199 = v194;
                v200 = v195;
                do
                {
                  v201 = 1 << v197;
                  if (((*v200 >> v198) & 1) != 0)
                    v202 = *v199 | v201;
                  else
                    v202 = *v199 & ~v201;
                  *v199 = v202;
                  v200 += v198 == 63;
                  if (v198 == 63)
                    v198 = 0;
                  else
                    ++v198;
                  v199 += v197 == 63;
                  if (v197 == 63)
                    v197 = 0;
                  else
                    ++v197;
                }
                while (v198 != (v190 & 0x3F) || v200 != &v195[v190 >> 6]);
              }
              *v300 = v194;
              *v298 = v193;
              LOBYTE(v165) = v192;
              v169 = v289;
              v171 = v290;
              if (v195)
              {
                operator delete(v195);
                v171 = v290;
                LOBYTE(v165) = v192;
                v190 = *v290;
              }
            }
          }
        }
        *v171 = v190 + 1;
        v203 = *v300;
        v204 = v190 >> 6;
        v205 = 1 << v190;
        if ((v189 & (1 << v165)) != 0)
          v172 = v203[v204] | v205;
        else
          v172 = v203[v204] & ~v205;
        v203[v204] = v172;
        v102 = &v188[v186];
        v160 = *v294;
        v161 = *(_QWORD *)(*v294 + 8 * v164);
        v163 = *v292;
        v165 = v187;
        v168 = (uint64_t *)&v320[24 * v296];
      }
      if ((uint64_t)(v164 + 1) < (int)((unint64_t)(v163 - v160) >> 3))
        ++v164;
      else
        v164 = 0;
      if (v164 != v158)
        continue;
      break;
    }
    v166 = v102;
    v167 = *(_QWORD *)(v160 + 8 * v158);
LABEL_324:
    v206 = (uint64_t *)&v320[24 * v296];
    v207 = v206 + 1;
    v208 = (_QWORD *)v206[1];
    v209 = v206[2];
    v128 = v287;
    if ((unint64_t)v208 < v209)
    {
      *v208 = v161;
      v208[1] = v167;
      v210 = v208 + 2;
      goto LABEL_350;
    }
    v211 = (_QWORD *)*v206;
    v212 = ((uint64_t)v208 - *v206) >> 4;
    v213 = v212 + 1;
    if ((unint64_t)(v212 + 1) >> 60)
      sub_235847D5C();
    v214 = v209 - (_QWORD)v211;
    if (v214 >> 3 > v213)
      v213 = v214 >> 3;
    if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFF0)
      v215 = 0xFFFFFFFFFFFFFFFLL;
    else
      v215 = v213;
    if (v215)
    {
      if (v215 >> 60)
        sub_2358482F0();
      v216 = v165;
      v217 = (char *)operator new(16 * v215);
      v165 = v216;
      v218 = &v217[16 * v212];
      *(_QWORD *)v218 = v161;
      *((_QWORD *)v218 + 1) = v167;
      v219 = (uint64_t)v218;
      if (v208 == v211)
        goto LABEL_348;
      do
      {
LABEL_346:
        *(_OWORD *)(v219 - 16) = *((_OWORD *)v208 - 1);
        v219 -= 16;
        v208 -= 2;
      }
      while (v208 != v211);
      v208 = (_QWORD *)*v206;
    }
    else
    {
      v217 = 0;
      v218 = (char *)(16 * v212);
      *(_QWORD *)v218 = v161;
      *((_QWORD *)v218 + 1) = v167;
      v219 = 16 * v212;
      if (v208 != v211)
        goto LABEL_346;
    }
LABEL_348:
    v210 = v218 + 16;
    *v206 = v219;
    v206[2] = (uint64_t)&v217[16 * v215];
    if (v208)
    {
      v221 = v165;
      operator delete(v208);
      v165 = v221;
    }
LABEL_350:
    *v207 = v210;
    v222 = &__dst[24 * v296];
    v223 = v165 == 63;
    if (v165 == 63)
      v224 = 0;
    else
      v224 = (v165 + 1);
    v225 = *v166;
    v227 = v222 + 1;
    v226 = v222[1];
    v228 = v222[2];
    if (v226 == v228 << 6)
    {
      if ((uint64_t)(v226 + 1) < 0)
        sub_235847D5C();
      v229 = v165;
      v230 = v228 << 7;
      if (v230 <= (v226 & 0xFFFFFFFFFFFFFFC0) + 64)
        v230 = (v226 & 0xFFFFFFFFFFFFFFC0) + 64;
      if (v226 <= 0x3FFFFFFFFFFFFFFELL)
        v231 = v230;
      else
        v231 = 0x7FFFFFFFFFFFFFFFLL;
      sub_235850AF0((uint64_t)v222, v231);
      v226 = *v227;
      LOBYTE(v165) = v229;
    }
    *v227 = v226 + 1;
    v129 = *v222;
    v130 = v226 >> 6;
    v131 = 1 << v226;
    v102 = &v166[v223];
    if ((v225 & (1 << v165)) != 0)
      v132 = *(_QWORD *)(v129 + 8 * v130) | v131;
    else
      v132 = *(_QWORD *)(v129 + 8 * v130) & ~v131;
    *(_QWORD *)(v129 + 8 * v130) = v132;
    v99 = v224;
    v127 = v296 + 1;
    if (v296 != 4)
      continue;
    break;
  }
LABEL_361:
  sub_23585DAB0(v332, v283, (uint64_t)v320, (uint64_t)__dst, (uint64_t)a3, a5);
  if (v348[0])
    operator delete(v348[0]);
  if (v346[1])
    operator delete(v346[1]);
  if (v345[0])
    operator delete(v345[0]);
  if (*(_QWORD *)&__dst[24])
    operator delete(*(void **)&__dst[24]);
  if (*(_QWORD *)__dst)
    operator delete(*(void **)__dst);
  if (v325[0])
    operator delete(v325[0]);
  if (*((_QWORD *)&v323 + 1))
    operator delete(*((void **)&v323 + 1));
  if (v322[0])
    operator delete(v322[0]);
  if (*(_QWORD *)&v320[24])
    operator delete(*(void **)&v320[24]);
  if (*(_QWORD *)v320)
    operator delete(*(void **)v320);
  if (v338[4])
    operator delete((void *)v338[4]);
  if (v338[1])
    operator delete((void *)v338[1]);
  if (v337[0])
    operator delete(v337[0]);
  if (__p[3])
    operator delete(__p[3]);
  if (__p[0])
    operator delete(__p[0]);
  v232 = v334;
  if (!*(_QWORD *)(v334 + 24))
  {
    *(_DWORD *)v284 = 1;
    *(_BYTE *)(v284 + 24) = 0;
    goto LABEL_469;
  }
  v233 = *v128;
  if (SHIBYTE(v333) < 0)
  {
    sub_23584B488(v309, v332[0].__locale_, (unint64_t)v332[1].__locale_);
  }
  else
  {
    *(_OWORD *)v309 = *(_OWORD *)&v332[0].__locale_;
    v310 = v333;
  }
  v234 = operator new();
  v235 = v334;
  *(_QWORD *)(v234 + 8) = operator new(0x60uLL);
  *(_QWORD *)(v234 + 24) = 0;
  sub_23586BE1C(v234, v235);
  v311 = v234;
  if (SHIBYTE(v316) < 0)
  {
    sub_23584B488(v306, (void *)v315, *((unint64_t *)&v315 + 1));
  }
  else
  {
    *(_OWORD *)v306 = v315;
    v307 = v316;
  }
  v236 = operator new();
  v237 = v317;
  *(_QWORD *)(v236 + 8) = operator new(0x60uLL);
  *(_QWORD *)(v236 + 24) = 0;
  sub_23586BE1C(v236, v237);
  v308 = v236;
  v238 = (char *)&__p[2] + 7;
  HIBYTE(__p[2]) = 0;
  LOBYTE(__p[0]) = 0;
  if (a7)
    v239 = (void **)a6;
  else
    v239 = __p;
  if (a7)
    v238 = (char *)(a6 + 23);
  if (*v238 < 0)
  {
    v241 = (unint64_t *)&__p[1];
    if (a7)
      v241 = (unint64_t *)(a6 + 8);
    sub_23584B488(v304, *v239, *v241);
  }
  else
  {
    v240 = *(_OWORD *)v239;
    v305 = v239[2];
    *(_OWORD *)v304 = v240;
  }
  sub_2358619DC((uint64_t)__dst, v233, (uint64_t)v309, (uint64_t)a3, a4, (uint64_t)v306, (uint64_t)v304);
  if (SHIBYTE(v305) < 0)
    operator delete(v304[0]);
  v242 = v308;
  v243 = *(_QWORD **)(v308 + 8);
  v244 = v243[11];
  if (v244)
    v245 = (_QWORD *)(v244 - 80);
  else
    v245 = 0;
  if (v245 != v243)
  {
    do
    {
      v246 = v245[11];
      if (v246)
        v243 = (_QWORD *)(v246 - 80);
      else
        v243 = 0;
      sub_2358688CC((uint64_t)v245);
      operator delete(v245);
      v245 = v243;
    }
    while (v243 != *(_QWORD **)(v242 + 8));
  }
  operator delete(v243);
  MEMORY[0x23B7D94C4](v242, 0x1020C402FC1992ELL);
  if (SHIBYTE(v307) < 0)
    operator delete(v306[0]);
  v247 = v311;
  v248 = *(_QWORD **)(v311 + 8);
  v249 = v248[11];
  if (v249)
    v250 = (_QWORD *)(v249 - 80);
  else
    v250 = 0;
  if (v250 != v248)
  {
    do
    {
      v251 = v250[11];
      if (v251)
        v248 = (_QWORD *)(v251 - 80);
      else
        v248 = 0;
      sub_2358688CC((uint64_t)v250);
      operator delete(v250);
      v250 = v248;
    }
    while (v248 != *(_QWORD **)(v247 + 8));
  }
  operator delete(v248);
  MEMORY[0x23B7D94C4](v247, 0x1020C402FC1992ELL);
  if (SHIBYTE(v310) < 0)
  {
    operator delete(v309[0]);
    v252 = *(_QWORD *)&__dst[24];
    if (!*(_QWORD *)(*(_QWORD *)&__dst[24] + 24))
      goto LABEL_434;
LABEL_431:
    v253 = MEMORY[0x24BEDB870];
    v254 = MEMORY[0x24BEDB870] + 64;
    v255 = MEMORY[0x24BEDB800];
    v256 = *(void **)(MEMORY[0x24BEDB800] + 8);
    v257 = *(void **)(MEMORY[0x24BEDB800] + 16);
    v339 = MEMORY[0x24BEDB870] + 64;
    __p[0] = v256;
    *(void **)((char *)__p + *((_QWORD *)v256 - 3)) = v257;
    v258 = (std::ios_base *)((char *)__p + *((_QWORD *)__p[0] - 3));
    std::ios_base::init(v258, &__p[1]);
    v258[1].__vftable = 0;
    v258[1].__fmtflags_ = -1;
    __p[0] = (void *)(v253 + 24);
    v339 = v254;
    std::streambuf::basic_streambuf();
    v259 = MEMORY[0x24BEDB848];
    __p[1] = (void *)(MEMORY[0x24BEDB848] + 16);
    memset(&v338[1], 0, 32);
    LODWORD(v338[5]) = 16;
    memset(&v350, 0, sizeof(v350));
    std::string::push_back(&v350, 117);
    std::string::push_back(&v350, 116);
    std::string::push_back(&v350, 102);
    std::string::push_back(&v350, 45);
    std::string::push_back(&v350, 56);
    v320[0] = 32;
    *(_QWORD *)&v320[8] = 4;
    if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_23584B488(&v320[16], v350.__r_.__value_.__l.__data_, v350.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v320[16] = *(_OWORD *)&v350.__r_.__value_.__l.__data_;
      *(_QWORD *)&v321 = *((_QWORD *)&v350.__r_.__value_.__l + 2);
    }
    v329[1].__locale_ = 0;
    v329[0].__locale_ = 0;
    v330 = 0;
    sub_2358770EC(__p, (uint64_t)__dst, (__int128 *)v329, (uint64_t)v320);
    if (SHIBYTE(v330) < 0)
    {
      operator delete(v329[0].__locale_);
      if ((SBYTE7(v321) & 0x80000000) == 0)
      {
LABEL_438:
        if ((SHIBYTE(v350.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_439;
        goto LABEL_444;
      }
    }
    else if ((SBYTE7(v321) & 0x80000000) == 0)
    {
      goto LABEL_438;
    }
    operator delete(*(void **)&v320[16]);
    if ((SHIBYTE(v350.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_439:
      v260 = v338[5];
      if ((v338[5] & 0x10) == 0)
        goto LABEL_440;
      goto LABEL_445;
    }
LABEL_444:
    operator delete(v350.__r_.__value_.__l.__data_);
    v260 = v338[5];
    if ((v338[5] & 0x10) == 0)
    {
LABEL_440:
      if ((v260 & 8) == 0)
      {
        v261 = 0;
        v320[23] = 0;
        v262 = v320;
        goto LABEL_455;
      }
      v264 = __p[3];
      v261 = *((_QWORD *)&v336 + 1) - (unint64_t)__p[3];
      if (*((_QWORD *)&v336 + 1) - (unint64_t)__p[3] > 0x7FFFFFFFFFFFFFF7)
LABEL_495:
        sub_23584B34C();
LABEL_448:
      if (v261 >= 0x17)
      {
        v265 = (v261 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v261 | 7) != 0x17)
          v265 = v261 | 7;
        v266 = v265 + 1;
        v262 = operator new(v265 + 1);
        *(_QWORD *)&v320[8] = v261;
        *(_QWORD *)&v320[16] = v266 | 0x8000000000000000;
        *(_QWORD *)v320 = v262;
      }
      else
      {
        v320[23] = v261;
        v262 = v320;
        if (!v261)
          goto LABEL_455;
      }
      memmove(v262, v264, v261);
LABEL_455:
      *((_BYTE *)v262 + v261) = 0;
      *(_OWORD *)v284 = *(_OWORD *)v320;
      *(_QWORD *)(v284 + 16) = *(_QWORD *)&v320[16];
      *(_BYTE *)(v284 + 24) = 1;
      __p[0] = *(void **)v255;
      *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(v255 + 24);
      __p[1] = (void *)(v259 + 16);
      if (SHIBYTE(v338[3]) < 0)
        operator delete((void *)v338[1]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x23B7D9458](&v339);
      v252 = *(_QWORD *)&__dst[24];
      goto LABEL_458;
    }
LABEL_445:
    v263 = (_BYTE *)v338[4];
    if ((void *)v338[4] < v337[1])
    {
      v338[4] = v337[1];
      v263 = v337[1];
    }
    v264 = v337[0];
    v261 = v263 - (char *)v337[0];
    if ((unint64_t)(v263 - (char *)v337[0]) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_495;
    goto LABEL_448;
  }
  v252 = *(_QWORD *)&__dst[24];
  if (*(_QWORD *)(*(_QWORD *)&__dst[24] + 24))
    goto LABEL_431;
LABEL_434:
  *(_DWORD *)v284 = 2;
  *(_BYTE *)(v284 + 24) = 0;
LABEL_458:
  v267 = *(_QWORD **)(v252 + 8);
  v268 = v267[11];
  if (v268)
    v269 = (_QWORD *)(v268 - 80);
  else
    v269 = 0;
  if (v269 != v267)
  {
    do
    {
      v270 = v269[11];
      if (v270)
        v267 = (_QWORD *)(v270 - 80);
      else
        v267 = 0;
      sub_2358688CC((uint64_t)v269);
      operator delete(v269);
      v269 = v267;
    }
    while (v267 != *(_QWORD **)(v252 + 8));
  }
  operator delete(v267);
  MEMORY[0x23B7D94C4](v252, 0x1020C402FC1992ELL);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  v232 = v334;
LABEL_469:
  v271 = *(_QWORD **)(v232 + 8);
  v272 = v271[11];
  if (v272)
    v273 = (_QWORD *)(v272 - 80);
  else
    v273 = 0;
  if (v273 != v271)
  {
    do
    {
      v274 = v273[11];
      if (v274)
        v271 = (_QWORD *)(v274 - 80);
      else
        v271 = 0;
      sub_2358688CC((uint64_t)v273);
      operator delete(v273);
      v273 = v271;
    }
    while (v271 != *(_QWORD **)(v232 + 8));
  }
  operator delete(v271);
  MEMORY[0x23B7D94C4](v232, 0x1020C402FC1992ELL);
  if (SHIBYTE(v333) < 0)
    operator delete(v332[0].__locale_);
  v275 = v317;
  v276 = *(_QWORD **)(v317 + 8);
  v277 = v276[11];
  if (v277)
    v278 = (_QWORD *)(v277 - 80);
  else
    v278 = 0;
  if (v278 != v276)
  {
    do
    {
      v279 = v278[11];
      if (v279)
        v276 = (_QWORD *)(v279 - 80);
      else
        v276 = 0;
      sub_2358688CC((uint64_t)v278);
      operator delete(v278);
      v278 = v276;
    }
    while (v276 != *(_QWORD **)(v275 + 8));
  }
  operator delete(v276);
  MEMORY[0x23B7D94C4](v275, 0x1020C402FC1992ELL);
  if (SHIBYTE(v316) < 0)
    operator delete((void *)v315);
}

void sub_235868210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48)
{
  uint64_t v48;

  if (*(char *)(v48 - 129) < 0)
    operator delete(*(void **)(v48 - 152));
  sub_235868848((uint64_t)&STACK[0x2D0]);
  sub_23585D370((uint64_t)&STACK[0x3F0]);
  sub_23585D370((uint64_t)&STACK[0x2B0]);
  sub_23585D370((uint64_t)&a48);
  _Unwind_Resume(a1);
}

void sub_235868774(_Unwind_Exception *a1)
{
  sub_23584CD98((uint64_t)&STACK[0x2D0]);
  _Unwind_Resume(a1);
}

void sub_235868790()
{
  JUMPOUT(0x2358687B4);
}

void sub_2358687FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  sub_235861980((uint64_t)&STACK[0x3F0]);
  sub_23585D300((uint64_t)&a55);
  sub_235861980((uint64_t)&STACK[0x2D0]);
  sub_23585D370((uint64_t)&a48);
  _Unwind_Resume(a1);
}

void sub_235868828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  sub_235861980((uint64_t)&STACK[0x2D0]);
  sub_23585D370((uint64_t)&a48);
  _Unwind_Resume(a1);
}

uint64_t sub_235868848(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x23B7D9458](a1 + 112);
  return a1;
}

void sub_2358688CC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD **)(v2 + 8);
  v4 = v3[11];
  if (v4)
    v5 = (_QWORD *)(v4 - 80);
  else
    v5 = 0;
  if (v5 != v3)
  {
    do
    {
      v6 = v5[11];
      if (v6)
        v3 = (_QWORD *)(v6 - 80);
      else
        v3 = 0;
      sub_2358688CC(v5);
      operator delete(v5);
      v5 = v3;
    }
    while (v3 != *(_QWORD **)(v2 + 8));
  }
  operator delete(v3);
  MEMORY[0x23B7D94C4](v2, 0x1020C402FC1992ELL);
  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return;
LABEL_13:
    operator delete(*(void **)a1);
    return;
  }
  operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    goto LABEL_13;
}

uint64_t sub_235868994(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD **)(v2 + 8);
  v4 = v3[11];
  if (v4)
    v5 = (_QWORD *)(v4 - 80);
  else
    v5 = 0;
  if (v5 != v3)
  {
    do
    {
      v6 = v5[11];
      if (v6)
        v3 = (_QWORD *)(v6 - 80);
      else
        v3 = 0;
      sub_2358688CC((uint64_t)v5);
      operator delete(v5);
      v5 = v3;
    }
    while (v3 != *(_QWORD **)(v2 + 8));
  }
  operator delete(v3);
  MEMORY[0x23B7D94C4](v2, 0x1020C402FC1992ELL);
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

void sub_235868A68(uint64_t a1, uint64_t a2, __int128 *a3)
{
  const void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16[2];

  sub_235868BC8((uint64_t *)v16, a1, a2);
  v6 = *(const void ***)v16;
  if (!*(_QWORD *)v16)
  {
    v13 = 0uLL;
    v14 = 0;
    v7 = operator new();
    v8 = operator new(0x60uLL);
    *(_QWORD *)(v7 + 8) = v8;
    v8[7] = 0;
    v8[8] = v8 + 7;
    v8[9] = v8 + 7;
    v8[10] = v8 + 10;
    v8[11] = v8 + 10;
    *(_QWORD *)(v7 + 24) = 0;
    v15 = v7;
    v6 = sub_235868DE8(a1, a2, &v13);
    v9 = *(_QWORD **)(v7 + 8);
    v10 = v9[11];
    if (v10)
      v11 = (_QWORD *)(v10 - 80);
    else
      v11 = 0;
    if (v11 != v9)
    {
      do
      {
        v12 = v11[11];
        if (v12)
          v9 = (_QWORD *)(v12 - 80);
        else
          v9 = 0;
        sub_2358688CC((uint64_t)v11);
        operator delete(v11);
        v11 = v9;
      }
      while (v9 != *(_QWORD **)(v7 + 8));
    }
    operator delete(v9);
    MEMORY[0x23B7D94C4](v7, 0x1020C402FC1992ELL);
  }
  sub_235868CC0((uint64_t)v6, a3);
}

void sub_235868B90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23585D370((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_235868BA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B7D94C4](v1, 0x1020C402FC1992ELL);
  _Unwind_Resume(a1);
}

void sub_235868BC8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _BOOL4 v6;
  void **v7;
  void *v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  char *v12;

  if (*(char *)(a3 + 23) < 0)
  {
    sub_23584B488(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
    v6 = *(char *)(a3 + 23) < 0;
  }
  else
  {
    v6 = 0;
    *(_OWORD *)__p = *(_OWORD *)a3;
    v10 = *(_QWORD *)(a3 + 16);
  }
  v11 = *(_BYTE *)(a3 + 24);
  v7 = __p;
  if (v10 < 0)
    v7 = (void **)__p[0];
  if (v6)
    v8 = *(void **)a3;
  else
    v8 = (void *)a3;
  v12 = (char *)v7 + *(_QWORD *)(a3 + 32) - (_QWORD)v8;
  *a1 = sub_235869118(a2, (uint64_t)__p);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
}

void sub_235868CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_235868CC0(uint64_t a1, __int128 *a2)
{
  __int128 *p_p;
  size_t v4;
  __int128 __p;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (*((char *)a2 + 23) < 0)
  {
    sub_23584B488(&__p, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    __p = *a2;
    v6 = *((_QWORD *)a2 + 2);
  }
  if (&__p != (__int128 *)a1)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      if (v6 >= 0)
        p_p = &__p;
      else
        p_p = (__int128 *)__p;
      if (v6 >= 0)
        v4 = HIBYTE(v6);
      else
        v4 = *((_QWORD *)&__p + 1);
      sub_23584BAC0((void **)a1, p_p, v4);
    }
    else if (v6 < 0)
    {
      sub_23584B9FC((_QWORD *)a1, (void *)__p, *((size_t *)&__p + 1));
    }
    else
    {
      *(_OWORD *)a1 = __p;
      *(_QWORD *)(a1 + 16) = v6;
    }
  }
  if (SHIBYTE(v6) < 0)
    operator delete((void *)__p);
}

void sub_235868DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10)
  {
    if (a16 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_235868DE8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  int v6;
  void **v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  const void **v11;
  const void **v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void *v28[2];
  uint64_t v29;
  void *__p;
  char v31;
  uint64_t v32;
  void *v33[2];
  uint64_t v34;
  void *__dst[2];
  uint64_t v36;
  char v37;
  char *v38;
  _QWORD *v39;

  v6 = *(char *)(a2 + 23);
  if (v6 < 0)
  {
    sub_23584B488(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
    LOBYTE(v6) = *(_BYTE *)(a2 + 23);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a2;
    v36 = *(_QWORD *)(a2 + 16);
  }
  v37 = *(_BYTE *)(a2 + 24);
  v7 = __dst;
  if (v36 < 0)
    v7 = (void **)__dst[0];
  if ((v6 & 0x80u) == 0)
    v8 = (void *)a2;
  else
    v8 = *(void **)a2;
  v38 = (char *)v7 + *(_QWORD *)(a2 + 32) - (_QWORD)v8;
  v9 = sub_23586AA4C(a1, (uint64_t)__dst);
  sub_2358691EC((uint64_t)v33, (uint64_t *)__dst);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 24) + 8);
  v11 = sub_23586A1C4(v10, (const void **)v33);
  if ((const void **)v10 != v11)
  {
    v12 = v11 + 3;
    sub_235865D3C((uint64_t)(v11 + 3), a3);
    goto LABEL_27;
  }
  if (SHIBYTE(v34) < 0)
  {
    sub_23584B488(v28, v33[0], (unint64_t)v33[1]);
  }
  else
  {
    *(_OWORD *)v28 = *(_OWORD *)v33;
    v29 = v34;
  }
  sub_23585D9D0(&__p, a3);
  v13 = *(_QWORD *)(v9 + 24);
  v14 = *(_QWORD *)(v13 + 8);
  v39 = 0;
  v15 = sub_23586AE2C(v13 + 16, (const void **)v28, &v39);
  v16 = v15;
  if (v15 == v39)
  {
    v17 = *(_QWORD **)(v13 + 8);
    v18 = v17[10];
    v17 += 10;
    v15[10] = v18;
    v15[11] = v17;
    v19 = v15 + 10;
    *v17 = v15 + 10;
    *(_QWORD *)(v15[10] + 8) = v15 + 10;
    ++*(_QWORD *)(v13 + 24);
    if (*(_QWORD *)(v13 + 8) != v14)
    {
      *(_QWORD *)(v15[10] + 8) = v15[11];
      *(_QWORD *)v15[11] = v15[10];
      v21 = *(_QWORD *)(v14 + 80);
      v20 = (_QWORD *)(v14 + 80);
      v15[10] = v21;
      v15[11] = v20;
      *v20 = v19;
      *(_QWORD *)(v15[10] + 8) = v19;
    }
  }
  v22 = v32;
  v23 = *(_QWORD **)(v32 + 8);
  v24 = v23[11];
  if (v24)
    v25 = (_QWORD *)(v24 - 80);
  else
    v25 = 0;
  if (v25 != v23)
  {
    do
    {
      v26 = v25[11];
      if (v26)
        v23 = (_QWORD *)(v26 - 80);
      else
        v23 = 0;
      sub_2358688CC((uint64_t)v25);
      operator delete(v25);
      v25 = v23;
    }
    while (v23 != *(_QWORD **)(v22 + 8));
  }
  operator delete(v23);
  MEMORY[0x23B7D94C4](v22, 0x1020C402FC1992ELL);
  if (v31 < 0)
  {
    operator delete(__p);
    v12 = (const void **)(v16 + 3);
    if ((SHIBYTE(v29) & 0x80000000) == 0)
    {
LABEL_27:
      if ((SHIBYTE(v34) & 0x80000000) == 0)
        goto LABEL_28;
LABEL_32:
      operator delete(v33[0]);
      if ((SHIBYTE(v36) & 0x80000000) == 0)
        return v12;
      goto LABEL_33;
    }
  }
  else
  {
    v12 = (const void **)(v16 + 3);
    if ((SHIBYTE(v29) & 0x80000000) == 0)
      goto LABEL_27;
  }
  operator delete(v28[0]);
  if (SHIBYTE(v34) < 0)
    goto LABEL_32;
LABEL_28:
  if ((SHIBYTE(v36) & 0x80000000) == 0)
    return v12;
LABEL_33:
  operator delete(__dst[0]);
  return v12;
}

void sub_235869078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0)
  {
    operator delete(__p);
    if (a30 < 0)
    {
LABEL_6:
      operator delete(a25);
      _Unwind_Resume(exception_object);
    }
  }
  else if (a30 < 0)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_235869118(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  const void **v7;
  void *__p[2];
  char v10;

  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = a2;
  else
    v4 = *(_QWORD *)a2;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a2 + 32) == v4 + v3)
    return a1;
  sub_2358691EC((uint64_t)__p, (uint64_t *)a2);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v7 = sub_23586A1C4(v6, (const void **)__p);
  if ((const void **)v6 == v7)
  {
    a1 = 0;
    if ((v10 & 0x80000000) == 0)
      return a1;
  }
  else
  {
    a1 = sub_235869118(v7 + 3, a2);
    if ((v10 & 0x80000000) == 0)
      return a1;
  }
  operator delete(__p[0]);
  return a1;
}

void sub_2358691D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2358691EC(uint64_t a1, uint64_t *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t *v6;
  char *v7;
  char *v8;
  char *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  _OWORD *v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  void *v22[2];
  unint64_t v23;
  char v24;
  __int128 __p;
  unint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)a2[4];
  if (*((char *)a2 + 23) < 0)
  {
    v6 = (uint64_t *)*a2;
    v5 = a2[1];
  }
  else
  {
    v5 = *((unsigned __int8 *)a2 + 23);
    v6 = a2;
  }
  v7 = (char *)v6 + v5;
  v8 = (char *)memchr(v4, *((char *)a2 + 24), (char *)v6 + v5 - v4);
  if (v8)
    v9 = v8;
  else
    v9 = v7;
  v10 = v9 - v4;
  if ((unint64_t)(v9 - v4) >= 0x7FFFFFFFFFFFFFF8)
    sub_23584B34C();
  if (v10 <= 0x16)
  {
    HIBYTE(v23) = (_BYTE)v9 - (_BYTE)v4;
    v11 = (char *)v22;
    if (v9 != v4)
      goto LABEL_10;
LABEL_19:
    v12 = v11;
    goto LABEL_22;
  }
  v18 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v10 | 7) != 0x17)
    v18 = v10 | 7;
  v19 = v18 + 1;
  v11 = (char *)operator new(v18 + 1);
  v22[1] = (void *)(v9 - v4);
  v23 = v19 | 0x8000000000000000;
  v22[0] = v11;
  if (v9 == v4)
    goto LABEL_19;
LABEL_10:
  if (v10 < 0x20 || (unint64_t)(v11 - v4) < 0x20)
  {
    v12 = v11;
    v13 = v4;
    do
    {
LABEL_21:
      v20 = *v13++;
      *v12++ = v20;
    }
    while (v13 != v9);
    goto LABEL_22;
  }
  v12 = &v11[v10 & 0xFFFFFFFFFFFFFFE0];
  v13 = &v4[v10 & 0xFFFFFFFFFFFFFFE0];
  v14 = (__int128 *)(v4 + 16);
  v15 = v11 + 16;
  v16 = v10 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v17 = *v14;
    *(v15 - 1) = *(v14 - 1);
    *v15 = v17;
    v14 += 2;
    v15 += 2;
    v16 -= 32;
  }
  while (v16);
  if (v10 != (v10 & 0xFFFFFFFFFFFFFFE0))
    goto LABEL_21;
LABEL_22:
  *v12 = 0;
  a2[4] = (uint64_t)v9;
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    if (v9 == (char *)a2 + *((unsigned __int8 *)a2 + 23))
      goto LABEL_25;
    goto LABEL_24;
  }
  if (v9 != (char *)(*a2 + a2[1]))
LABEL_24:
    a2[4] = (uint64_t)(v9 + 1);
LABEL_25:
  v24 = 0;
  v21 = SHIBYTE(v23);
  if (SHIBYTE(v23) < 0)
  {
    sub_23584B488(&__p, v22[0], (unint64_t)v22[1]);
  }
  else
  {
    __p = *(_OWORD *)v22;
    v26 = v23;
  }
  v24 = 1;
  if (SHIBYTE(v26) < 0)
  {
    sub_23584B488((_BYTE *)a1, (void *)__p, *((unint64_t *)&__p + 1));
    if (v24 && SHIBYTE(v26) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_OWORD *)a1 = __p;
    *(_QWORD *)(a1 + 16) = v26;
  }
  if (v21 < 0)
    operator delete(v22[0]);
}

void sub_23586942C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  int v18;

  if (a12 && a18 < 0)
    operator delete(__p);
  if (v18 < 0)
  {
    operator delete(a9);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_235869480(const std::runtime_error *a1, int8x16_t *a2)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  sub_23586951C((uint64_t)exception, a1, a2);
  __cxa_throw(exception, (struct type_info *)&unk_2506DFDD0, (void (*)(void *))sub_2358695CC);
}

void sub_2358694C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2358694DC(std::runtime_error *this)
{
  std::runtime_error_vtbl *v2;

  this->__vftable = (std::runtime_error_vtbl *)&off_2506DFED0;
  v2 = this[1].__vftable;
  if (v2)
    (*((void (**)(std::runtime_error_vtbl *))v2->~runtime_error + 1))(v2);
  std::runtime_error::~runtime_error(this);
}

uint64_t sub_23586951C(uint64_t a1, const std::runtime_error *a2, int8x16_t *a3)
{
  uint64_t v6;

  *(_QWORD *)a1 = &unk_2506DFEA0;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 8) = &off_2506DFED0;
  v6 = (uint64_t)a2[1].__vftable;
  if (v6)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  *(_QWORD *)a1 = &off_2506DFE28;
  *(_QWORD *)(a1 + 8) = &unk_2506DFE58;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = &unk_2506DFE80;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 64) = a3[1].i32[0];
  *(int8x16_t *)(a1 + 48) = vextq_s8(*a3, *a3, 8uLL);
  return a1;
}

void sub_2358695B8(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2358695CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 + 32) = &unk_2506DFF20;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 8) = &off_2506DFED0;
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t sub_235869644(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_2506DFEA0;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = &off_2506DFED0;
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_QWORD *)(v2 + 32) = &unk_2506DFF20;
  *(_QWORD *)(v2 + 24) = v3;
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 40) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_DWORD *)(v2 + 64) = *(_DWORD *)(a1 + 64);
  *(_QWORD *)v2 = &off_2506DFE28;
  *(_QWORD *)(v2 + 8) = &unk_2506DFE58;
  *(_QWORD *)(v2 + 32) = &unk_2506DFE80;
  sub_235869BD0(v2 + 32, a1 + 32);
  return v2;
}

void sub_23586972C(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::runtime_error *v2;
  uint64_t v3;
  uint64_t v5;

  *(_QWORD *)(v1 + 8) = v3;
  v5 = *(_QWORD *)(v1 + 24);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::runtime_error::~runtime_error(v2);
  MEMORY[0x23B7D94C4](v1, 0x10F1C403FF34BC6);
  _Unwind_Resume(a1);
}

void sub_235869778(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_235869794(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  sub_235869ADC((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_2506DFDD0, (void (*)(void *))sub_2358695CC);
}

void sub_2358697D0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2358697E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 + 32) = &unk_2506DFF20;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 8) = &off_2506DFED0;
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x23B7D94C4);
}

void sub_23586986C(std::runtime_error *this)
{
  std::runtime_error_vtbl *v2;
  std::runtime_error_vtbl *v3;

  this[1].__imp_.__imp_ = (const char *)&unk_2506DFF20;
  v2 = this[2].__vftable;
  if (v2 && (*((unsigned int (**)(std::runtime_error_vtbl *))v2->~runtime_error + 4))(v2))
    this[2].__vftable = 0;
  this->__vftable = (std::runtime_error_vtbl *)&off_2506DFED0;
  v3 = this[1].__vftable;
  if (v3)
    (*((void (**)(std::runtime_error_vtbl *))v3->~runtime_error + 1))(v3);
  std::runtime_error::~runtime_error(this);
}

void sub_2358698D8(std::runtime_error *this)
{
  std::runtime_error_vtbl *v2;
  std::runtime_error_vtbl *v3;

  this[1].__imp_.__imp_ = (const char *)&unk_2506DFF20;
  v2 = this[2].__vftable;
  if (v2 && (*((unsigned int (**)(std::runtime_error_vtbl *))v2->~runtime_error + 4))(v2))
    this[2].__vftable = 0;
  this->__vftable = (std::runtime_error_vtbl *)&off_2506DFED0;
  v3 = this[1].__vftable;
  if (v3)
    (*((void (**)(std::runtime_error_vtbl *))v3->~runtime_error + 1))(v3);
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x23B7D94C4);
}

void sub_235869960(_QWORD *a1)
{
  uint64_t v2;
  std::runtime_error *v3;
  std::runtime_error_vtbl *v4;

  *a1 = &unk_2506DFF20;
  v2 = a1[1];
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    a1[1] = 0;
  *(a1 - 3) = &off_2506DFED0;
  v3 = (std::runtime_error *)(a1 - 3);
  v4 = v3[1].__vftable;
  if (v4)
    (*((void (**)(std::runtime_error_vtbl *))v4->~runtime_error + 1))(v4);
  std::runtime_error::~runtime_error(v3);
}

void sub_2358699CC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_2506DFF20;
  v2 = a1[1];
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    a1[1] = 0;
  *(a1 - 3) = &off_2506DFED0;
  v3 = *(a1 - 1);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 - 3));
  JUMPOUT(0x23B7D94C4);
}

void sub_235869A60(std::runtime_error *this)
{
  std::runtime_error_vtbl *v2;

  this->__vftable = (std::runtime_error_vtbl *)&off_2506DFED0;
  v2 = this[1].__vftable;
  if (v2)
    (*((void (**)(std::runtime_error_vtbl *))v2->~runtime_error + 1))(v2);
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x23B7D94C4);
}

void sub_235869AB8(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x23B7D94C4);
}

uint64_t sub_235869ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)a1 = &unk_2506DFEA0;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &off_2506DFED0;
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = &unk_2506DFF20;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v6;
  *(_QWORD *)a1 = &off_2506DFE28;
  *(_QWORD *)(a1 + 8) = &unk_2506DFE58;
  *(_QWORD *)(a1 + 32) = &unk_2506DFE80;
  return a1;
}

void sub_235869B90(_Unwind_Exception *a1)
{
  std::runtime_error *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(_QWORD *)(v2 + 8) = v3;
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    std::runtime_error::~runtime_error(v1);
    _Unwind_Resume(a1);
  }
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_235869BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    v5 = 0;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    result = *(_QWORD *)(a1 + 8);
    if (!result)
      goto LABEL_9;
    goto LABEL_8;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 40))(&v7);
  v5 = v7;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  result = *(_QWORD *)(a1 + 8);
  if (result)
LABEL_8:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
LABEL_9:
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  return result;
}

void sub_235869CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  _Unwind_Resume(exception_object);
}

std::runtime_error *sub_235869D08(std::runtime_error *a1, const void **a2, uint64_t a3)
{
  int v3;
  size_t v4;
  unint64_t v5;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  void **v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  void *v22;
  std::string __p;
  void *v25[2];
  uint64_t v26;
  std::string __dst;
  std::string v28;

  v3 = *((char *)a2 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (size_t)a2[1];
  v5 = v4 + 2;
  if (v4 + 2 >= 0x7FFFFFFFFFFFFFF8)
    sub_23584B34C();
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 2;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_12:
    if (v3 >= 0)
      v12 = a2;
    else
      v12 = *a2;
    memmove(p_dst, v12, v4);
    strcpy((char *)p_dst + v4, " (");
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4 + 2;
  if (v4)
    goto LABEL_12;
  strcpy((char *)&__dst, " (");
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
LABEL_8:
    *(_OWORD *)v25 = *(_OWORD *)a3;
    v26 = *(_QWORD *)(a3 + 16);
    goto LABEL_17;
  }
LABEL_16:
  sub_23584B488(v25, *(void **)a3, *(_QWORD *)(a3 + 8));
LABEL_17:
  if (v26 >= 0)
    v13 = v25;
  else
    v13 = (void **)v25[0];
  if (v26 >= 0)
    v14 = HIBYTE(v26);
  else
    v14 = (std::string::size_type)v25[1];
  v15 = std::string::append(&__dst, (const std::string::value_type *)v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = std::string::append(&v28, ")", 1uLL);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v26) & 0x80000000) == 0)
      goto LABEL_25;
LABEL_31:
    operator delete(v25[0]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_32;
  }
  operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26) < 0)
    goto LABEL_31;
LABEL_25:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_26;
LABEL_32:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_26:
  std::runtime_error::runtime_error(a1, &__p);
  a1->__vftable = (std::runtime_error_vtbl *)&off_2506DFEF8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  a1->__vftable = (std::runtime_error_vtbl *)&off_2506DFED0;
  v19 = operator new();
  v20 = v19;
  *(_QWORD *)v19 = off_2506DFF40;
  v21 = (_OWORD *)(v19 + 8);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_23584B488((_BYTE *)(v19 + 8), *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *v21 = *(_OWORD *)a3;
    *(_QWORD *)(v19 + 24) = *(_QWORD *)(a3 + 16);
  }
  *(_BYTE *)(v20 + 32) = *(_BYTE *)(a3 + 24);
  if (*(char *)(v20 + 31) < 0)
    v21 = *(_OWORD **)v21;
  if (*(char *)(a3 + 23) >= 0)
    v22 = (void *)a3;
  else
    v22 = *(void **)a3;
  *(_QWORD *)(v20 + 40) = (char *)v21 + *(_QWORD *)(a3 + 32) - (_QWORD)v22;
  a1[1].__vftable = (std::runtime_error_vtbl *)v20;
  return a1;
}

void sub_235869F9C(_Unwind_Exception *a1)
{
  std::runtime_error *v1;
  uint64_t v2;

  MEMORY[0x23B7D94C4](v2, 0x1093C40E70F46F0);
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_235869FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23586A060(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_23586A0A0(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x23B7D94C4);
}

void *sub_23586A0E0()
{
  return &unk_2506DFF88;
}

uint64_t sub_23586A0EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;

  v2 = operator new();
  v3 = v2;
  *(_QWORD *)v2 = off_2506DFF40;
  v4 = (_OWORD *)(v2 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    sub_23584B488((_BYTE *)(v2 + 8), *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *v4 = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(v2 + 24) = *(_QWORD *)(a1 + 24);
  }
  *(_BYTE *)(v3 + 32) = *(_BYTE *)(a1 + 32);
  if (*(char *)(v3 + 31) < 0)
    v4 = *(_OWORD **)v4;
  if (*(char *)(a1 + 31) >= 0)
    v5 = a1 + 8;
  else
    v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v3 + 40) = (char *)v4 + *(_QWORD *)(a1 + 40) - v5;
  return v3;
}

void sub_23586A1A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B7D94C4](v1, 0x1093C40E70F46F0);
  _Unwind_Resume(a1);
}

const void **sub_23586A1C4(uint64_t a1, const void **a2)
{
  const void **v2;
  unint64_t v3;
  int v4;
  const void *v5;
  size_t v6;
  const void **v7;
  const void **v8;
  int v9;
  const void *v10;
  size_t v11;
  size_t v12;
  int v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;

  v2 = (const void **)a1;
  v3 = *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
  if (!v3)
    return v2;
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = (const void **)a1;
  do
  {
    while (1)
    {
      v8 = (const void **)(v3 - 56);
      v9 = *(char *)(v3 - 33);
      v10 = v9 >= 0 ? (const void *)(v3 - 56) : *(const void **)(v3 - 56);
      v11 = v9 >= 0 ? *(unsigned __int8 *)(v3 - 33) : *(_QWORD *)(v3 - 48);
      v12 = v6 >= v11 ? v11 : v6;
      v13 = memcmp(v10, v5, v12);
      if (v13)
        break;
      if (v11 < v6)
        goto LABEL_10;
LABEL_22:
      v3 = *(_QWORD *)(v3 + 8);
      v7 = v8;
      if (!v3)
        goto LABEL_25;
    }
    if ((v13 & 0x80000000) == 0)
      goto LABEL_22;
LABEL_10:
    v3 = *(_QWORD *)(v3 + 16);
  }
  while (v3);
  v8 = v7;
LABEL_25:
  if (v8 != v2)
  {
    v14 = *((char *)v8 + 23);
    if (v14 >= 0)
      v15 = v8;
    else
      v15 = *v8;
    if (v14 >= 0)
      v16 = *((unsigned __int8 *)v8 + 23);
    else
      v16 = (size_t)v8[1];
    if (v16 >= v6)
      v17 = v6;
    else
      v17 = v16;
    v18 = memcmp(v5, v15, v17);
    if (v18)
    {
      if ((v18 & 0x80000000) == 0)
        return v8;
    }
    else if (v6 >= v16)
    {
      return v8;
    }
  }
  return v2;
}

void sub_23586A2CC(const std::runtime_error *a1, int8x16_t *a2)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  sub_23586A3C8((uint64_t)exception, a1, a2);
  __cxa_throw(exception, (struct type_info *)&unk_2506DFFB0, (void (*)(void *))sub_23586A478);
}

void sub_23586A314(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_23586A328(std::runtime_error *a1, const std::string *a2, uint64_t *a3)
{
  uint64_t v5;

  std::runtime_error::runtime_error(a1, a2)->__vftable = (std::runtime_error_vtbl *)&off_2506E0080;
  v5 = *a3;
  if (*a3)
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  a1[1].__vftable = (std::runtime_error_vtbl *)v5;
  return a1;
}

void sub_23586A374(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_23586A388(std::runtime_error *this)
{
  std::runtime_error_vtbl *v2;

  this->__vftable = (std::runtime_error_vtbl *)&off_2506E0080;
  v2 = this[1].__vftable;
  if (v2)
    (*((void (**)(std::runtime_error_vtbl *))v2->~runtime_error + 1))(v2);
  std::runtime_error::~runtime_error(this);
}

uint64_t sub_23586A3C8(uint64_t a1, const std::runtime_error *a2, int8x16_t *a3)
{
  uint64_t v6;

  *(_QWORD *)a1 = &unk_2506DFEA0;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 8) = &off_2506E0080;
  v6 = (uint64_t)a2[1].__vftable;
  if (v6)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  *(_QWORD *)a1 = &off_2506E0008;
  *(_QWORD *)(a1 + 8) = &unk_2506E0038;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = &unk_2506E0060;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 64) = a3[1].i32[0];
  *(int8x16_t *)(a1 + 48) = vextq_s8(*a3, *a3, 8uLL);
  return a1;
}

void sub_23586A464(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23586A478(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 + 32) = &unk_2506DFF20;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 8) = &off_2506E0080;
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t sub_23586A4F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_2506DFEA0;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = &off_2506E0080;
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_QWORD *)(v2 + 32) = &unk_2506DFF20;
  *(_QWORD *)(v2 + 24) = v3;
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 40) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_DWORD *)(v2 + 64) = *(_DWORD *)(a1 + 64);
  *(_QWORD *)v2 = &off_2506E0008;
  *(_QWORD *)(v2 + 8) = &unk_2506E0038;
  *(_QWORD *)(v2 + 32) = &unk_2506E0060;
  sub_235869BD0(v2 + 32, a1 + 32);
  return v2;
}

void sub_23586A5D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::runtime_error *v2;
  uint64_t v3;
  uint64_t v5;

  *(_QWORD *)(v1 + 8) = v3;
  v5 = *(_QWORD *)(v1 + 24);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::runtime_error::~runtime_error(v2);
  MEMORY[0x23B7D94C4](v1, 0x10F1C403FF34BC6);
  _Unwind_Resume(a1);
}

void sub_23586A624(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_23586A640(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  sub_23586A958((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_2506DFFB0, (void (*)(void *))sub_23586A478);
}

void sub_23586A67C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_23586A690(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 + 32) = &unk_2506DFF20;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 8) = &off_2506E0080;
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x23B7D94C4);
}

void sub_23586A718(std::runtime_error *this)
{
  std::runtime_error_vtbl *v2;
  std::runtime_error_vtbl *v3;

  this[1].__imp_.__imp_ = (const char *)&unk_2506DFF20;
  v2 = this[2].__vftable;
  if (v2 && (*((unsigned int (**)(std::runtime_error_vtbl *))v2->~runtime_error + 4))(v2))
    this[2].__vftable = 0;
  this->__vftable = (std::runtime_error_vtbl *)&off_2506E0080;
  v3 = this[1].__vftable;
  if (v3)
    (*((void (**)(std::runtime_error_vtbl *))v3->~runtime_error + 1))(v3);
  std::runtime_error::~runtime_error(this);
}

void sub_23586A784(std::runtime_error *this)
{
  std::runtime_error_vtbl *v2;
  std::runtime_error_vtbl *v3;

  this[1].__imp_.__imp_ = (const char *)&unk_2506DFF20;
  v2 = this[2].__vftable;
  if (v2 && (*((unsigned int (**)(std::runtime_error_vtbl *))v2->~runtime_error + 4))(v2))
    this[2].__vftable = 0;
  this->__vftable = (std::runtime_error_vtbl *)&off_2506E0080;
  v3 = this[1].__vftable;
  if (v3)
    (*((void (**)(std::runtime_error_vtbl *))v3->~runtime_error + 1))(v3);
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x23B7D94C4);
}

void sub_23586A80C(_QWORD *a1)
{
  uint64_t v2;
  std::runtime_error *v3;
  std::runtime_error_vtbl *v4;

  *a1 = &unk_2506DFF20;
  v2 = a1[1];
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    a1[1] = 0;
  *(a1 - 3) = &off_2506E0080;
  v3 = (std::runtime_error *)(a1 - 3);
  v4 = v3[1].__vftable;
  if (v4)
    (*((void (**)(std::runtime_error_vtbl *))v4->~runtime_error + 1))(v4);
  std::runtime_error::~runtime_error(v3);
}

void sub_23586A878(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_2506DFF20;
  v2 = a1[1];
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    a1[1] = 0;
  *(a1 - 3) = &off_2506E0080;
  v3 = *(a1 - 1);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 - 3));
  JUMPOUT(0x23B7D94C4);
}

void sub_23586A904(std::runtime_error *this)
{
  std::runtime_error_vtbl *v2;

  this->__vftable = (std::runtime_error_vtbl *)&off_2506E0080;
  v2 = this[1].__vftable;
  if (v2)
    (*((void (**)(std::runtime_error_vtbl *))v2->~runtime_error + 1))(v2);
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x23B7D94C4);
}

uint64_t sub_23586A958(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)a1 = &unk_2506DFEA0;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &off_2506E0080;
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = &unk_2506DFF20;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v6;
  *(_QWORD *)a1 = &off_2506E0008;
  *(_QWORD *)(a1 + 8) = &unk_2506E0038;
  *(_QWORD *)(a1 + 32) = &unk_2506E0060;
  return a1;
}

void sub_23586AA0C(_Unwind_Exception *a1)
{
  std::runtime_error *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(_QWORD *)(v2 + 8) = v3;
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    std::runtime_error::~runtime_error(v1);
    _Unwind_Resume(a1);
  }
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23586AA4C(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  const void **v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void **v18;
  _QWORD *v19;
  const void *v20;
  _QWORD *v21;
  _QWORD *v22;
  const void *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void *__dst[2];
  uint64_t v35;
  void *__p[2];
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  const void **v41;

  v4 = *(_BYTE **)(a2 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    v8 = *(_QWORD *)a2;
    v5 = *(_QWORD *)(a2 + 8);
    v6 = (_BYTE *)(*(_QWORD *)a2 + v5);
    v7 = v6 - v4;
  }
  else
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
    v6 = (_BYTE *)(a2 + v5);
    v7 = a2 + v5 - (_QWORD)v4;
    v8 = a2;
  }
  v9 = memchr(v4, *(char *)(a2 + 24), v7);
  if (v9)
    v10 = v9;
  else
    v10 = v6;
  if (v10 == (void *)(v8 + v5))
    return a1;
  sub_2358691EC((uint64_t)&v39, (uint64_t *)a2);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v12 = sub_23586A1C4(v11, (const void **)&v39);
  if ((const void **)v11 == v12)
  {
    v13 = operator new();
    v14 = operator new(0x60uLL);
    *(_QWORD *)(v13 + 8) = v14;
    v14[7] = 0;
    v14[8] = v14 + 7;
    v14[9] = v14 + 7;
    v14[10] = v14 + 10;
    v14[11] = v14 + 10;
    *(_QWORD *)(v13 + 24) = 0;
    if (SHIBYTE(v40) < 0)
    {
      sub_23584B488(__dst, (void *)v39, *((unint64_t *)&v39 + 1));
    }
    else
    {
      *(_OWORD *)__dst = v39;
      v35 = v40;
    }
    *(_OWORD *)__p = 0uLL;
    v37 = 0;
    v15 = operator new();
    *(_QWORD *)(v15 + 8) = operator new(0x60uLL);
    *(_QWORD *)(v15 + 24) = 0;
    sub_23586BE1C(v15, v13);
    v38 = v15;
    v16 = *(_QWORD *)(a1 + 24);
    v17 = *(_QWORD *)(v16 + 8);
    v41 = 0;
    v18 = (const void **)sub_23586AE2C(v16 + 16, (const void **)__dst, &v41);
    v12 = v18;
    if (v18 == v41)
    {
      v19 = *(_QWORD **)(v16 + 8);
      v20 = (const void *)v19[10];
      v19 += 10;
      v18[10] = v20;
      v18[11] = v19;
      v21 = v18 + 10;
      *v19 = v18 + 10;
      *((_QWORD *)v18[10] + 1) = v18 + 10;
      ++*(_QWORD *)(v16 + 24);
      if (*(_QWORD *)(v16 + 8) != v17)
      {
        *((_QWORD *)v18[10] + 1) = v18[11];
        *(_QWORD *)v18[11] = v18[10];
        v23 = *(const void **)(v17 + 80);
        v22 = (_QWORD *)(v17 + 80);
        v18[10] = v23;
        v18[11] = v22;
        *v22 = v21;
        *((_QWORD *)v18[10] + 1) = v21;
      }
    }
    v24 = v38;
    v25 = *(_QWORD **)(v38 + 8);
    v26 = v25[11];
    if (v26)
      v27 = (_QWORD *)(v26 - 80);
    else
      v27 = 0;
    if (v27 != v25)
    {
      do
      {
        v28 = v27[11];
        if (v28)
          v25 = (_QWORD *)(v28 - 80);
        else
          v25 = 0;
        sub_2358688CC((uint64_t)v27);
        operator delete(v27);
        v27 = v25;
      }
      while (v25 != *(_QWORD **)(v24 + 8));
    }
    operator delete(v25);
    MEMORY[0x23B7D94C4](v24, 0x1020C402FC1992ELL);
    if (SHIBYTE(v37) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v35) & 0x80000000) == 0)
        goto LABEL_25;
    }
    else if ((SHIBYTE(v35) & 0x80000000) == 0)
    {
LABEL_25:
      v29 = *(_QWORD **)(v13 + 8);
      v30 = v29[11];
      if (v30)
        v31 = (_QWORD *)(v30 - 80);
      else
        v31 = 0;
      if (v31 != v29)
      {
        do
        {
          v32 = v31[11];
          if (v32)
            v29 = (_QWORD *)(v32 - 80);
          else
            v29 = 0;
          sub_2358688CC((uint64_t)v31);
          operator delete(v31);
          v31 = v29;
        }
        while (v29 != *(_QWORD **)(v13 + 8));
      }
      operator delete(v29);
      MEMORY[0x23B7D94C4](v13, 0x1020C402FC1992ELL);
      goto LABEL_34;
    }
    operator delete(__dst[0]);
    goto LABEL_25;
  }
LABEL_34:
  a1 = sub_23586AA4C(v12 + 3, a2);
  if (SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  return a1;
}

void sub_23586AD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  sub_23585D370((uint64_t)&a9);
  if (*(char *)(v24 - 57) < 0)
    operator delete(*(void **)(v24 - 80));
  _Unwind_Resume(a1);
}

_QWORD *sub_23586AE2C(uint64_t a1, const void **a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  int v8;
  const void *v9;
  size_t v10;
  int v11;
  const void *v12;
  int v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *result;
  unint64_t *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;

  v6 = *(_QWORD *)(a1 - 8);
  v7 = *(_QWORD *)(v6 + 56) & 0xFFFFFFFFFFFFFFFELL;
  if (v7)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    if (v8 >= 0)
      v10 = *((unsigned __int8 *)a2 + 23);
    else
      v10 = (size_t)a2[1];
    while (1)
    {
      v6 = v7 - 56;
      v12 = *(const void **)(v7 - 56);
      v13 = *(char *)(v6 + 23);
      if (v13 >= 0)
        v14 = (const void *)v6;
      else
        v14 = v12;
      if (v13 >= 0)
        v15 = *(unsigned __int8 *)(v6 + 23);
      else
        v15 = *(_QWORD *)(v6 + 8);
      if (v15 >= v10)
        v16 = v10;
      else
        v16 = v15;
      v17 = memcmp(v9, v14, v16);
      if (v17)
      {
        if (v17 < 0)
          goto LABEL_22;
LABEL_8:
        v11 = 0;
        v7 = *(_QWORD *)(v6 + 72);
        if (!v7)
          goto LABEL_23;
      }
      else
      {
        if (v10 >= v15)
          goto LABEL_8;
LABEL_22:
        v11 = 1;
        v7 = *(_QWORD *)(v6 + 64);
        if (!v7)
        {
LABEL_23:
          v18 = operator new(0x60uLL);
          *a3 = v18;
          if ((*((char *)a2 + 23) & 0x80000000) == 0)
            goto LABEL_24;
LABEL_26:
          sub_23584B488(v18, (void *)*a2, (unint64_t)a2[1]);
          goto LABEL_27;
        }
      }
    }
  }
  v11 = 1;
  v18 = operator new(0x60uLL);
  *a3 = v18;
  if (*((char *)a2 + 23) < 0)
    goto LABEL_26;
LABEL_24:
  *(_OWORD *)v18 = *(_OWORD *)a2;
  v18[2] = a2[2];
LABEL_27:
  sub_23585D9D0(v18 + 3, (__int128 *)(a2 + 3));
  v19 = v6 + 56;
  result = (_QWORD *)*a3;
  v21 = (unint64_t *)(*a3 + 56);
  v22 = *(_QWORD **)(a1 - 8);
  if (v11)
  {
    *(_QWORD *)(v6 + 64) = v21;
    if ((_QWORD *)v6 == v22)
    {
      *(_QWORD *)(v6 + 56) = *(_QWORD *)(v6 + 56) & 1 | (unint64_t)v21;
      v23 = (_QWORD *)(v6 + 72);
    }
    else
    {
      v23 = v22 + 8;
      if (v22[8] != v19)
        goto LABEL_35;
    }
  }
  else
  {
    *(_QWORD *)(v6 + 72) = v21;
    v23 = v22 + 9;
    if (v22[9] != v19)
      goto LABEL_35;
  }
  *v23 = v21;
LABEL_35:
  result[8] = 0;
  result[9] = 0;
  v24 = v19 & 0xFFFFFFFFFFFFFFFELL;
  result[7] = v19 & 0xFFFFFFFFFFFFFFFELL;
  if (v21 != (unint64_t *)(v22[7] & 0xFFFFFFFFFFFFFFFELL))
  {
    v25 = *(_QWORD *)v24;
    if ((*(_QWORD *)v24 & 1) == 0)
    {
      v26 = v19 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        v27 = v25 & 0xFFFFFFFFFFFFFFFELL;
        v28 = *(_BYTE **)((v25 & 0xFFFFFFFFFFFFFFFELL) + 8);
        if (v28 == (_BYTE *)v26)
        {
          v28 = *(_BYTE **)(v27 + 16);
          if (!v28 || (*v28 & 1) != 0)
          {
            if (v21 == *(unint64_t **)(v26 + 16))
            {
              *(_QWORD *)(v26 + 16) = v21[1];
              v35 = (unint64_t *)v21[1];
              if (v35)
              {
                *v35 = *v35 & 1 | v26;
                v24 = *v21;
                v27 = *(_QWORD *)v26 & 0xFFFFFFFFFFFFFFFELL;
              }
              *v21 = v24 & 1 | v27;
              if (v26 == (v22[7] & 0xFFFFFFFFFFFFFFFELL))
              {
                v22[7] = v22[7] & 1 | (unint64_t)v21;
                v36 = *(_QWORD *)v26;
              }
              else
              {
                v36 = *(_QWORD *)v26;
                v37 = *(_QWORD *)v26 & 0xFFFFFFFFFFFFFFFELL;
                if (*(_QWORD *)(v37 + 8) == v26)
                  *(_QWORD *)(v37 + 8) = v21;
                else
                  *(_QWORD *)(v37 + 16) = v21;
              }
              v21[1] = v26;
              *(_QWORD *)v26 = v36 & 1 | (unint64_t)v21;
              v31 = (_QWORD *)((unint64_t)v21 & 0xFFFFFFFFFFFFFFFELL);
              v25 = *(_QWORD *)((unint64_t)v21 & 0xFFFFFFFFFFFFFFFELL);
            }
            else
            {
              v31 = (_QWORD *)v26;
              v26 = (unint64_t)v21;
            }
            *v31 = v25 | 1;
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v26 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL) &= ~1uLL;
            v38 = *(_QWORD *)(*(_QWORD *)v26 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL;
            v39 = *(unint64_t **)(v38 + 8);
            *(_QWORD *)(v38 + 8) = v39[2];
            v43 = (unint64_t *)v39[2];
            if (v43)
              *v43 = *v43 & 1 | v38;
            *v39 = *(_QWORD *)v38 & 0xFFFFFFFFFFFFFFFELL | *v39 & 1;
            if ((v22[7] & 0xFFFFFFFFFFFFFFFELL) == v38)
            {
              v22[7] = v22[7] & 1 | (unint64_t)v39;
              v41 = *(_QWORD *)v38;
              v39[2] = v38;
            }
            else
            {
              v41 = *(_QWORD *)v38;
              v44 = *(_QWORD *)v38 & 0xFFFFFFFFFFFFFFFELL;
              if (*(_QWORD *)(v44 + 16) == v38)
                *(_QWORD *)(v44 + 16) = v39;
              else
                *(_QWORD *)(v44 + 8) = v39;
              v39[2] = v38;
            }
LABEL_70:
            *(_QWORD *)v38 = v41 & 1 | (unint64_t)v39;
            v21 = (unint64_t *)v26;
            v30 = v22[7] & 0xFFFFFFFFFFFFFFFELL;
            if (v26 == v30)
              goto LABEL_85;
            goto LABEL_71;
          }
        }
        else if (!v28 || (*v28 & 1) != 0)
        {
          if (v21 == *(unint64_t **)(v26 + 8))
          {
            *(_QWORD *)(v26 + 8) = v21[2];
            v32 = (unint64_t *)v21[2];
            if (v32)
            {
              *v32 = *v32 & 1 | v26;
              v24 = *v21;
              v27 = *(_QWORD *)v26 & 0xFFFFFFFFFFFFFFFELL;
            }
            *v21 = v24 & 1 | v27;
            if (v26 == (v22[7] & 0xFFFFFFFFFFFFFFFELL))
            {
              v22[7] = v22[7] & 1 | (unint64_t)v21;
              v33 = *(_QWORD *)v26;
            }
            else
            {
              v33 = *(_QWORD *)v26;
              v34 = *(_QWORD *)v26 & 0xFFFFFFFFFFFFFFFELL;
              if (*(_QWORD *)(v34 + 16) == v26)
                *(_QWORD *)(v34 + 16) = v21;
              else
                *(_QWORD *)(v34 + 8) = v21;
            }
            v21[2] = v26;
            *(_QWORD *)v26 = v33 & 1 | (unint64_t)v21;
            v29 = (_QWORD *)((unint64_t)v21 & 0xFFFFFFFFFFFFFFFELL);
            v25 = *(_QWORD *)((unint64_t)v21 & 0xFFFFFFFFFFFFFFFELL);
          }
          else
          {
            v29 = (_QWORD *)v26;
            v26 = (unint64_t)v21;
          }
          *v29 = v25 | 1;
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v26 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL) &= ~1uLL;
          v38 = *(_QWORD *)(*(_QWORD *)v26 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL;
          v39 = *(unint64_t **)(v38 + 16);
          *(_QWORD *)(v38 + 16) = v39[1];
          v40 = (unint64_t *)v39[1];
          if (v40)
            *v40 = *v40 & 1 | v38;
          *v39 = *(_QWORD *)v38 & 0xFFFFFFFFFFFFFFFELL | *v39 & 1;
          if ((v22[7] & 0xFFFFFFFFFFFFFFFELL) == v38)
          {
            v22[7] = v22[7] & 1 | (unint64_t)v39;
            v41 = *(_QWORD *)v38;
          }
          else
          {
            v41 = *(_QWORD *)v38;
            v42 = *(_QWORD *)v38 & 0xFFFFFFFFFFFFFFFELL;
            if (*(_QWORD *)(v42 + 8) == v38)
              *(_QWORD *)(v42 + 8) = v39;
            else
              *(_QWORD *)(v42 + 16) = v39;
          }
          v39[1] = v38;
          goto LABEL_70;
        }
        *(_QWORD *)v26 = v25 | 1;
        *(_QWORD *)v28 |= 1uLL;
        *(_QWORD *)(*(_QWORD *)(*v21 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL) &= ~1uLL;
        v21 = (unint64_t *)(*(_QWORD *)(*v21 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL);
        v30 = v22[7] & 0xFFFFFFFFFFFFFFFELL;
        if (v21 == (unint64_t *)v30)
          goto LABEL_85;
LABEL_71:
        v24 = *v21;
        v26 = *v21 & 0xFFFFFFFFFFFFFFFELL;
        v25 = *(_QWORD *)v26;
        if ((*(_QWORD *)v26 & 1) != 0)
        {
          v21 = (unint64_t *)v30;
          goto LABEL_85;
        }
      }
    }
    v21 = (unint64_t *)(v22[7] & 0xFFFFFFFFFFFFFFFELL);
LABEL_85:
    v24 = *v21;
  }
  *v21 = v24 | 1;
  return result;
}

void sub_23586B374(void *a1)
{
  void **v1;

  __cxa_begin_catch(a1);
  operator delete(*v1);
  __cxa_rethrow();
}

void sub_23586B3A8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_23586B3BC(uint64_t a1, const std::locale *a2)
{
  std::runtime_error_vtbl *v4;
  uint64_t v5;
  uint64_t v6;
  std::runtime_error_vtbl *v7;
  std::runtime_error_vtbl *v8;
  std::ios_base *v9;
  uint64_t v10;
  std::ios_base *v11;
  std::locale *rdbuf;
  std::locale *v13;
  int v14;
  std::string::size_type v15;
  std::string *p_dst;
  unint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  std::string *v21;
  size_t v22;
  int8x16_t v23;
  uint64_t v24;
  uint64_t v25;
  std::string v26;
  std::string v27;
  std::string __dst;
  std::runtime_error v29;
  const void *v30;
  _BYTE v31[8];
  uint64_t v32;
  const void *v33;
  unint64_t v34;
  __int128 __p;
  __int128 v36;
  int v37;
  uint64_t v38[19];
  char v39;
  std::string v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v4 = (std::runtime_error_vtbl *)MEMORY[0x24BEDB870];
  v5 = MEMORY[0x24BEDB870] + 64;
  v6 = MEMORY[0x24BEDB800];
  v7 = *(std::runtime_error_vtbl **)(MEMORY[0x24BEDB800] + 8);
  v8 = *(std::runtime_error_vtbl **)(MEMORY[0x24BEDB800] + 16);
  v38[0] = MEMORY[0x24BEDB870] + 64;
  v29.__vftable = v7;
  *(std::runtime_error_vtbl **)((char *)&v29.__vftable + (unint64_t)v7[-1].~runtime_error) = v8;
  v9 = (std::ios_base *)((char *)&v29 + (unint64_t)v29.__vftable[-1].~runtime_error);
  std::ios_base::init(v9, &v29.__imp_);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v29.__vftable = v4 + 1;
  v38[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x24BEDB848];
  v29.__imp_.__imp_ = (const char *)(MEMORY[0x24BEDB848] + 16);
  __p = 0u;
  v36 = 0u;
  v37 = 16;
  v11 = (std::ios_base *)((char *)&v29 + (unint64_t)v29.__vftable[-1].~runtime_error);
  std::ios_base::getloc(v11);
  std::ios_base::imbue(v11, a2);
  std::locale::~locale((std::locale *)&__dst);
  rdbuf = (std::locale *)v11->__rdbuf_;
  if (rdbuf)
  {
    (*((void (**)(std::locale *, const std::locale *))rdbuf->__locale_ + 2))(rdbuf, a2);
    v13 = rdbuf + 1;
    std::locale::locale((std::locale *)&v27, v13);
    std::locale::operator=(v13, a2);
    std::locale::~locale((std::locale *)&v27);
  }
  std::locale::~locale((std::locale *)&v26);
  sub_23584D1D8(&v29, (uint64_t)"Background", 10);
  v14 = *(_DWORD *)&v31[(unint64_t)v29.__vftable[-1].~runtime_error] & 5;
  if (v14)
  {
    v39 = 0;
    goto LABEL_19;
  }
  if ((v37 & 0x10) != 0)
  {
    v17 = *((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1) < v34)
    {
      *((_QWORD *)&v36 + 1) = v34;
      v17 = v34;
    }
    v18 = v33;
    v15 = v17 - (_QWORD)v33;
    if (v17 - (unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_39;
  }
  else
  {
    if ((v37 & 8) == 0)
    {
      v15 = 0;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
      goto LABEL_18;
    }
    v18 = v30;
    v15 = v32 - (_QWORD)v30;
    if ((unint64_t)(v32 - (_QWORD)v30) >= 0x7FFFFFFFFFFFFFF8)
LABEL_39:
      sub_23584B34C();
  }
  if (v15 >= 0x17)
  {
    v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v19 = v15 | 7;
    v20 = v19 + 1;
    p_dst = (std::string *)operator new(v19 + 1);
    __dst.__r_.__value_.__l.__size_ = v15;
    __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v15;
    p_dst = &__dst;
    if (!v15)
      goto LABEL_18;
  }
  memmove(p_dst, v18, v15);
LABEL_18:
  p_dst->__r_.__value_.__s.__data_[v15] = 0;
  v40 = __dst;
  v39 = 1;
LABEL_19:
  v29.__vftable = *(std::runtime_error_vtbl **)v6;
  *(std::runtime_error_vtbl **)((char *)&v29.__vftable + (unint64_t)v29.__vftable[-1].~runtime_error) = *(std::runtime_error_vtbl **)(v6 + 24);
  v29.__imp_.__imp_ = (const char *)(v10 + 16);
  if (SBYTE7(v36) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x23B7D9458](v38);
  if (v14)
  {
    sub_23584AAE8(&v26, "conversion of type \"");
    sub_2358511CC((char *)(0x80000002358A1685 & 0x7FFFFFFFFFFFFFFFLL), &v26, &v27);
    sub_2358511CC("\" to data failed", &v27, &__dst);
    v25 = 0;
    sub_23586A328(&v29, &__dst, &v25);
    v23.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/"
                          "Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/lo"
                          "cal/include/boost/property_tree/detail/ptree_implementation.hpp";
    v23.i64[1] = (uint64_t)"void boost::property_tree::basic_ptree<std::string, std::string>::put_value(const Type &, Tran"
                          "slator) [Key = std::string, Data = std::string, KeyCompare = std::less<std::string>, Type = ch"
                          "ar[11], Translator = boost::property_tree::stream_translator<char, std::char_traits<char>, std"
                          "::allocator<char>, char[11]>]";
    v24 = 828;
    sub_23586A2CC(&v29, &v23);
  }
  if (&v40 == (std::string *)a1)
    goto LABEL_35;
  if (*(char *)(a1 + 23) < 0)
  {
    v21 = (v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v40
        : (std::string *)v40.__r_.__value_.__r.__words[0];
    v22 = (v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v40.__r_.__value_.__r.__words[2])
        : v40.__r_.__value_.__l.__size_;
    sub_23584BAC0((void **)a1, v21, v22);
  }
  else if ((*((_BYTE *)&v40.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    sub_23584B9FC((_QWORD *)a1, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  }
  else
  {
    *(std::string *)a1 = v40;
  }
  if (v39)
  {
LABEL_35:
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
  }
}

void sub_23586B7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,std::runtime_error a31,uint64_t a32)
{
  a31.__vftable = (std::runtime_error_vtbl *)&off_2506E0080;
  if (a32)
    (*(void (**)(uint64_t))(*(_QWORD *)a32 + 8))(a32);
  std::runtime_error::~runtime_error(&a31);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a18 & 0x80000000) == 0)
LABEL_10:
        _Unwind_Resume(a1);
LABEL_9:
      operator delete(a13);
      _Unwind_Resume(a1);
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a19);
  if ((a18 & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_23586B8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  std::locale::~locale(&a13);
  sub_235868848((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_23586B8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_235868848((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23586B8E8(uint64_t a1, const char *a2, const std::locale *a3)
{
  std::runtime_error_vtbl *v6;
  uint64_t v7;
  uint64_t v8;
  std::runtime_error_vtbl *v9;
  std::runtime_error_vtbl *v10;
  std::ios_base *v11;
  uint64_t v12;
  std::ios_base *v13;
  std::locale *rdbuf;
  std::locale *v15;
  size_t v16;
  int v17;
  std::string::size_type v18;
  std::string *p_dst;
  unint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  std::string *v24;
  size_t v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t v28;
  std::string v29;
  std::string v30;
  std::string __dst;
  std::runtime_error v32;
  const void *v33;
  _BYTE v34[8];
  uint64_t v35;
  const void *v36;
  unint64_t v37;
  __int128 __p;
  __int128 v39;
  int v40;
  uint64_t v41[19];
  char v42;
  std::string v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v6 = (std::runtime_error_vtbl *)MEMORY[0x24BEDB870];
  v7 = MEMORY[0x24BEDB870] + 64;
  v8 = MEMORY[0x24BEDB800];
  v9 = *(std::runtime_error_vtbl **)(MEMORY[0x24BEDB800] + 8);
  v10 = *(std::runtime_error_vtbl **)(MEMORY[0x24BEDB800] + 16);
  v41[0] = MEMORY[0x24BEDB870] + 64;
  v32.__vftable = v9;
  *(std::runtime_error_vtbl **)((char *)&v32.__vftable + (unint64_t)v9[-1].~runtime_error) = v10;
  v11 = (std::ios_base *)((char *)&v32 + (unint64_t)v32.__vftable[-1].~runtime_error);
  std::ios_base::init(v11, &v32.__imp_);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v32.__vftable = v6 + 1;
  v41[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  v32.__imp_.__imp_ = (const char *)(MEMORY[0x24BEDB848] + 16);
  __p = 0u;
  v39 = 0u;
  v40 = 16;
  v13 = (std::ios_base *)((char *)&v32 + (unint64_t)v32.__vftable[-1].~runtime_error);
  std::ios_base::getloc(v13);
  std::ios_base::imbue(v13, a3);
  std::locale::~locale((std::locale *)&__dst);
  rdbuf = (std::locale *)v13->__rdbuf_;
  if (rdbuf)
  {
    (*((void (**)(std::locale *, const std::locale *))rdbuf->__locale_ + 2))(rdbuf, a3);
    v15 = rdbuf + 1;
    std::locale::locale((std::locale *)&v30, v15);
    std::locale::operator=(v15, a3);
    std::locale::~locale((std::locale *)&v30);
  }
  std::locale::~locale((std::locale *)&v29);
  v16 = strlen(a2);
  sub_23584D1D8(&v32, (uint64_t)a2, v16);
  v17 = *(_DWORD *)&v34[(unint64_t)v32.__vftable[-1].~runtime_error] & 5;
  if (v17)
  {
    v42 = 0;
    goto LABEL_19;
  }
  if ((v40 & 0x10) != 0)
  {
    v20 = *((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1) < v37)
    {
      *((_QWORD *)&v39 + 1) = v37;
      v20 = v37;
    }
    v21 = v36;
    v18 = v20 - (_QWORD)v36;
    if (v20 - (unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_39;
  }
  else
  {
    if ((v40 & 8) == 0)
    {
      v18 = 0;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
      goto LABEL_18;
    }
    v21 = v33;
    v18 = v35 - (_QWORD)v33;
    if ((unint64_t)(v35 - (_QWORD)v33) >= 0x7FFFFFFFFFFFFFF8)
LABEL_39:
      sub_23584B34C();
  }
  if (v18 >= 0x17)
  {
    v22 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v22 = v18 | 7;
    v23 = v22 + 1;
    p_dst = (std::string *)operator new(v22 + 1);
    __dst.__r_.__value_.__l.__size_ = v18;
    __dst.__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v18;
    p_dst = &__dst;
    if (!v18)
      goto LABEL_18;
  }
  memmove(p_dst, v21, v18);
LABEL_18:
  p_dst->__r_.__value_.__s.__data_[v18] = 0;
  v43 = __dst;
  v42 = 1;
LABEL_19:
  v32.__vftable = *(std::runtime_error_vtbl **)v8;
  *(std::runtime_error_vtbl **)((char *)&v32.__vftable + (unint64_t)v32.__vftable[-1].~runtime_error) = *(std::runtime_error_vtbl **)(v8 + 24);
  v32.__imp_.__imp_ = (const char *)(v12 + 16);
  if (SBYTE7(v39) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x23B7D9458](v41);
  if (v17)
  {
    sub_23584AAE8(&v29, "conversion of type \"");
    sub_2358511CC((char *)(0x80000002358A168BLL & 0x7FFFFFFFFFFFFFFFLL), &v29, &v30);
    sub_2358511CC("\" to data failed", &v30, &__dst);
    v28 = 0;
    sub_23586A328(&v32, &__dst, &v28);
    v26.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/"
                          "Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/lo"
                          "cal/include/boost/property_tree/detail/ptree_implementation.hpp";
    v26.i64[1] = (uint64_t)"void boost::property_tree::basic_ptree<std::string, std::string>::put_value(const Type &, Tran"
                          "slator) [Key = std::string, Data = std::string, KeyCompare = std::less<std::string>, Type = ch"
                          "ar[2], Translator = boost::property_tree::stream_translator<char, std::char_traits<char>, std:"
                          ":allocator<char>, char[2]>]";
    v27 = 828;
    sub_23586A2CC(&v32, &v26);
  }
  if (&v43 == (std::string *)a1)
    goto LABEL_35;
  if (*(char *)(a1 + 23) < 0)
  {
    v24 = (v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v43
        : (std::string *)v43.__r_.__value_.__r.__words[0];
    v25 = (v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v43.__r_.__value_.__r.__words[2])
        : v43.__r_.__value_.__l.__size_;
    sub_23584BAC0((void **)a1, v24, v25);
  }
  else if ((*((_BYTE *)&v43.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    sub_23584B9FC((_QWORD *)a1, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  }
  else
  {
    *(std::string *)a1 = v43;
  }
  if (v42)
  {
LABEL_35:
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
  }
}

void sub_23586BCE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,std::runtime_error a31,uint64_t a32)
{
  a31.__vftable = (std::runtime_error_vtbl *)&off_2506E0080;
  if (a32)
    (*(void (**)(uint64_t))(*(_QWORD *)a32 + 8))(a32);
  std::runtime_error::~runtime_error(&a31);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a18 & 0x80000000) == 0)
LABEL_10:
        _Unwind_Resume(a1);
LABEL_9:
      operator delete(a13);
      _Unwind_Resume(a1);
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a19);
  if ((a18 & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_23586BDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  std::locale::~locale(&a13);
  sub_235868848((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_23586BE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_235868848((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23586BE1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  __n128 *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  __int128 v17;
  __n128 v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  __n128 *v25;
  unint64_t v26;
  unint64_t v27;
  __n128 *v28;
  __n128 *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  __n128 *v41;
  unint64_t v42;
  unint64_t v43;
  __n128 *v44;
  __n128 *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t *v49;
  __n128 *v50;
  unint64_t v51;
  unint64_t v52;
  __n128 *v53;
  __n128 *v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t *v58;
  __n128 *v59;
  unint64_t v60;
  unint64_t v61;
  __n128 *v62;
  __n128 *v63;
  unint64_t v64;
  __n128 *i;
  _QWORD *v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  __n128 *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *n128_u64;
  __n128 *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char v84;

  v2 = a2;
  v3 = a1;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD **)(a2 + 8);
  v6 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    if (v4 >> 60)
      sub_2358482F0();
    v7 = (__n128 *)operator new(16 * v4);
  }
  else
  {
    v7 = 0;
  }
  v83 = v6;
  v84 = 0;
  v8 = v5[11];
  if (v8)
    v9 = v8 - 80;
  else
    v9 = 0;
  if ((_QWORD *)v9 == v5)
  {
    v20 = v3 + 16;
    v19 = v5;
    do
    {
LABEL_36:
      v31 = v19[11];
      if (v31)
        v19 = (_QWORD *)(v31 - 80);
      else
        v19 = 0;
      if (v5 == v19)
        v32 = &v83;
      else
        v32 = &v7->n128_u64[1];
      v33 = *v32;
      *(_QWORD *)(v6 + 88) = v33 + 80;
      *(_QWORD *)(v33 + 80) = v6 + 80;
      v6 = v33;
    }
    while (v19 != *(_QWORD **)(v2 + 8));
    v21 = 0;
    goto LABEL_44;
  }
  v80 = v2;
  v81 = v3;
  v10 = 0;
  v11 = 126 - 2 * __clz(v4);
  if (v4)
    v12 = v11;
  else
    v12 = 0;
  v13 = 1;
  do
  {
    v7[v10].n128_u64[0] = v9;
    v15 = operator new(0x60uLL);
    v16 = v15;
    v7[v10].n128_u64[1] = (unint64_t)v15;
    if (*(char *)(v9 + 23) < 0)
    {
      sub_23584B488(v15, *(void **)v9, *(_QWORD *)(v9 + 8));
    }
    else
    {
      v17 = *(_OWORD *)v9;
      v15[2] = *(_QWORD *)(v9 + 16);
      *(_OWORD *)v15 = v17;
    }
    sub_23585D9D0(v16 + 3);
    v82 = v13;
    if (v4 == v13)
      sub_23586C3F0(v7, &v7[v4], v12, 1, v18);
    v14 = *(_QWORD *)(v9 + 88);
    if (v14)
      v9 = v14 - 80;
    else
      v9 = 0;
    ++v13;
    ++v10;
  }
  while ((_QWORD *)v9 != v5);
  v2 = v80;
  v3 = v81;
  v19 = *(_QWORD **)(v80 + 8);
  v6 = *(_QWORD *)(v81 + 8);
  v20 = v81 + 16;
  v21 = v82;
  if (!v82)
    goto LABEL_36;
  do
  {
    v23 = v19[11];
    if (v23)
      v19 = (_QWORD *)(v23 - 80);
    else
      v19 = 0;
    v24 = &v83;
    if (v5 != v19)
    {
      v25 = v7;
      v26 = v82;
      do
      {
        v27 = v26 >> 1;
        v28 = &v25[v26 >> 1];
        v30 = v28->n128_u64[0];
        v29 = v28 + 1;
        v26 += ~(v26 >> 1);
        if (v30 < (unint64_t)v19)
          v25 = v29;
        else
          v26 = v27;
      }
      while (v26);
      v24 = &v25->n128_u64[1];
    }
    v22 = *v24;
    *(_QWORD *)(v6 + 88) = v22 + 80;
    *(_QWORD *)(v22 + 80) = v6 + 80;
    v6 = v22;
  }
  while (v19 != *(_QWORD **)(v80 + 8));
LABEL_44:
  v34 = v19[7];
  v35 = *(_QWORD *)(v20 - 8);
  v36 = (unint64_t *)(v35 + 56);
  if (v34 <= 1)
  {
    *(_QWORD *)(v35 + 56) = 0;
    *(_QWORD *)(v35 + 64) = v36;
    *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) = *(_QWORD *)(v20 - 8) + 56;
    goto LABEL_108;
  }
  *v36 = *v36 & 0xFFFFFFFFFFFFFFFELL | v19[7] & 1;
  v37 = v19[7];
  v38 = v34 & 1;
  if ((v37 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v39 = (v37 & 0xFFFFFFFFFFFFFFFELL) - 56;
  else
    v39 = 0;
  v40 = &v83;
  if (v5 != (_QWORD *)v39)
  {
    if (v21)
    {
      v41 = v7;
      v42 = v21;
      do
      {
        v43 = v42 >> 1;
        v44 = &v41[v42 >> 1];
        v46 = v44->n128_u64[0];
        v45 = v44 + 1;
        v42 += ~(v42 >> 1);
        if (v46 < v39)
          v41 = v45;
        else
          v42 = v43;
      }
      while (v42);
    }
    else
    {
      v41 = v7;
    }
    v40 = &v41->n128_u64[1];
  }
  *v36 = v38 | (*v40 + 56);
  v47 = v19[8];
  if (v47)
    v48 = (_QWORD *)(v47 - 56);
  else
    v48 = 0;
  v49 = &v83;
  if (v5 != v48)
  {
    if (v21)
    {
      v50 = v7;
      v51 = v21;
      do
      {
        v52 = v51 >> 1;
        v53 = &v50[v51 >> 1];
        v55 = v53->n128_u64[0];
        v54 = v53 + 1;
        v51 += ~(v51 >> 1);
        if (v55 < (unint64_t)v48)
          v50 = v54;
        else
          v51 = v52;
      }
      while (v51);
    }
    else
    {
      v50 = v7;
    }
    v49 = &v50->n128_u64[1];
  }
  *(_QWORD *)(v35 + 64) = *v49 + 56;
  v56 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 72);
  if (v56)
    v57 = (_QWORD *)(v56 - 56);
  else
    v57 = 0;
  v58 = &v83;
  if (v5 != v57)
  {
    if (v21)
    {
      v59 = v7;
      v60 = v21;
      do
      {
        v61 = v60 >> 1;
        v62 = &v59[v60 >> 1];
        v64 = v62->n128_u64[0];
        v63 = v62 + 1;
        v60 += ~(v60 >> 1);
        if (v64 < (unint64_t)v57)
          v59 = v63;
        else
          v60 = v61;
      }
      while (v60);
    }
    else
    {
      v59 = v7;
    }
    v58 = &v59->n128_u64[1];
  }
  *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) = *v58 + 56;
  if (v21)
  {
    for (i = v7; i != &v7[v21]; ++i)
    {
      v67 = i->n128_u64[0];
      v66 = (_QWORD *)i->n128_u64[1];
      v68 = (_QWORD *)(i->n128_u64[0] + 56);
      v69 = v66 + 7;
      v70 = *v68 & 1;
      v66[7] = v66[7] & 0xFFFFFFFFFFFFFFFELL | v70;
      v71 = *v68 & 0xFFFFFFFFFFFFFFFELL;
      if (v71)
      {
        v72 = &v83;
        if (v5 != (_QWORD *)(v71 - 56))
        {
          v73 = v7;
          v74 = v21;
          do
          {
            v75 = v74 >> 1;
            n128_u64 = v73[v74 >> 1].n128_u64;
            v78 = *n128_u64;
            v77 = (__n128 *)(n128_u64 + 2);
            v74 += ~(v74 >> 1);
            if (v78 < v71 - 56)
              v73 = v77;
            else
              v74 = v75;
          }
          while (v74);
          v72 = &v73->n128_u64[1];
        }
        v79 = *v72;
        *v69 = v70 | (*v72 + 56);
        if (*(_QWORD **)(v71 + 8) == v68)
        {
          *(_QWORD *)(v79 + 64) = v69;
          if (*(_QWORD *)(v67 + 64))
            goto LABEL_99;
        }
        else if (*(_QWORD **)(v71 + 16) == v68)
        {
          *(_QWORD *)(v79 + 72) = v69;
          if (*(_QWORD *)(v67 + 64))
          {
LABEL_99:
            if (!*(_QWORD *)(v67 + 72))
              goto LABEL_107;
            continue;
          }
        }
        else if (*(_QWORD *)(v67 + 64))
        {
          goto LABEL_99;
        }
      }
      else
      {
        *v69 = v70;
        if (*(_QWORD *)(v67 + 64))
          goto LABEL_99;
      }
      v66[8] = 0;
      if (!*(_QWORD *)(v67 + 72))
LABEL_107:
        v66[9] = 0;
    }
  }
LABEL_108:
  *(_QWORD *)(v3 + 24) = *(_QWORD *)(v2 + 24);
  if (v4)
    operator delete(v7);
}

void sub_23586C30C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v13;

  __cxa_begin_catch(a1);
  operator delete(*(void **)(v12 + v13 + 8));
  __cxa_rethrow();
}

void sub_23586C358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  __cxa_end_catch();
  sub_23586C374((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23586C374(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;

  if (!*(_BYTE *)(a1 + 64) && *(_QWORD *)(a1 + 40))
  {
    v2 = 0;
    v3 = 8;
    do
    {
      sub_2358688CC(*(_QWORD *)(*(_QWORD *)(a1 + 32) + v3));
      operator delete(*(void **)(*(_QWORD *)(a1 + 32) + v3));
      ++v2;
      v3 += 16;
    }
    while (v2 < *(_QWORD *)(a1 + 40));
  }
  if (*(_QWORD *)(a1 + 24))
    operator delete(*(void **)(a1 + 32));
  return a1;
}

__n128 sub_23586C3F0(__n128 *a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __n128 *v21;
  __n128 *v22;
  __n128 *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 *v30;
  __n128 *v31;
  __n128 *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  __n128 *v44;
  __n128 *v45;
  unint64_t v46;
  unint64_t v47;
  __n128 *v48;
  unint64_t v49;
  unint64_t v50;
  __n128 *v51;
  BOOL v52;
  __n128 v53;
  unint64_t v54;
  unint64_t n128_u64;
  __n128 *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  __n128 *v61;
  __n128 *v62;
  unint64_t v63;
  __n128 *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  __n128 *v69;
  unint64_t v70;
  __n128 *v71;
  BOOL v73;
  uint64_t v74;
  __n128 *v75;
  __n128 *v76;
  __n128 *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int64_t v82;
  int64_t v83;
  BOOL v84;
  uint64_t v85;
  __n128 *v86;
  unint64_t v87;
  BOOL v88;
  __n128 *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  __n128 *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __n128 *v97;
  __n128 *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  __n128 *v103;
  unint64_t v104;
  unint64_t v105;
  __n128 *v106;
  __n128 *v107;
  unint64_t v108;
  unint64_t v109;
  __n128 *v110;
  unint64_t v111;
  __n128 v112;
  __n128 v113;
  __n128 v114;
  __n128 v115;
  __n128 v116;
  __n128 v117;
  __n128 v118;
  __n128 v119;
  __n128 v120;
  __n128 v121;
  __n128 v122;
  __n128 v123;
  __n128 v124;
  __n128 v125;
  __n128 v126;
  __n128 v127;
  __n128 v128;
  __n128 v129;
  __n128 v130;
  __n128 v131;
  __n128 v132;
  __n128 v133;
  __n128 v134;
  __n128 v135;
  __n128 v136;
  __n128 v137;

LABEL_1:
  v9 = a2 - 1;
  v10 = a2 - 2;
  v11 = a2 - 3;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (char *)a2 - (char *)v12;
    v14 = a2 - v12;
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v63 = a2[-1].n128_u64[0];
        v62 = a2 - 1;
        if (v63 < v12->n128_u64[0])
          goto LABEL_101;
        return result;
      case 3:
        v64 = v12 + 1;
        v65 = v12[1].n128_u64[0];
        v67 = a2[-1].n128_u64[0];
        v62 = a2 - 1;
        v66 = v67;
        if (v65 >= v12->n128_u64[0])
        {
          if (v66 < v65)
          {
            result = *v64;
            *v64 = *v62;
            *v62 = result;
            goto LABEL_182;
          }
        }
        else if (v66 >= v65)
        {
          v135 = *v12;
          *v12 = *v64;
          result = v135;
          *v64 = v135;
          if (v62->n128_u64[0] < v12[1].n128_u64[0])
          {
            result = *v64;
            *v64 = *v62;
            *v62 = result;
          }
        }
        else
        {
LABEL_101:
          v131 = *v12;
          *v12 = *v62;
          result = v131;
          *v62 = v131;
        }
        return result;
      case 4:
        v64 = v12 + 1;
        v68 = v12[1].n128_u64[0];
        v69 = v12 + 2;
        v70 = v12[2].n128_u64[0];
        if (v68 >= v12->n128_u64[0])
        {
          if (v70 < v68)
          {
            result = *v64;
            *v64 = *v69;
            *v69 = result;
            if (v12[1].n128_u64[0] < v12->n128_u64[0])
            {
              v134 = *v12;
              *v12 = *v64;
              result = v134;
              *v64 = v134;
            }
          }
        }
        else
        {
          if (v70 >= v68)
          {
            v136 = *v12;
            *v12 = *v64;
            result = v136;
            *v64 = v136;
            if (v70 >= v12[1].n128_u64[0])
              goto LABEL_179;
            result = *v64;
            *v64 = *v69;
          }
          else
          {
            v132 = *v12;
            *v12 = *v69;
            result = v132;
          }
          *v69 = result;
        }
LABEL_179:
        if (v9->n128_u64[0] < v69->n128_u64[0])
        {
          result = *v69;
          *v69 = *v9;
          *v9 = result;
          if (v69->n128_u64[0] < v64->n128_u64[0])
          {
            result = *v64;
            *v64 = *v69;
            *v69 = result;
LABEL_182:
            if (v12[1].n128_u64[0] < v12->n128_u64[0])
            {
              v137 = *v12;
              *v12 = *v64;
              result = v137;
              *v64 = v137;
            }
          }
        }
        return result;
      case 5:
        result.n128_u64[0] = sub_23586D2FC(v12, v12 + 1, v12[2].n128_u64, (__n128 *)v12[3].n128_u64, (__n128 *)a2[-1].n128_u64, result).n128_u64[0];
        return result;
      default:
        if (v13 > 383)
        {
          if (!a3)
          {
            if (v12 == a2)
              return result;
            v82 = (unint64_t)(v14 - 2) >> 1;
            v83 = v82;
            while (1)
            {
              if (v82 >= v83)
              {
                v85 = (2 * v83) | 1;
                v86 = &v12[v85];
                if (2 * v83 + 2 >= v14)
                {
                  v89 = &v12[v83];
                  v90 = v89->n128_u64[0];
                  if (v86->n128_u64[0] >= v89->n128_u64[0])
                    goto LABEL_137;
                }
                else
                {
                  v87 = v86[1].n128_u64[0];
                  v88 = v86->n128_u64[0] >= v87;
                  if (v86->n128_u64[0] < v87)
                    ++v86;
                  else
                    v87 = v86->n128_u64[0];
                  if (!v88)
                    v85 = 2 * v83 + 2;
                  v89 = &v12[v83];
                  v90 = v89->n128_u64[0];
                  if (v87 >= v89->n128_u64[0])
                  {
LABEL_137:
                    v91 = v89->n128_i64[1];
                    while (1)
                    {
                      v93 = v89;
                      v89 = v86;
                      *v93 = *v86;
                      if (v82 < v85)
                        break;
                      v94 = (2 * v85) | 1;
                      v86 = &v12[v94];
                      v85 = 2 * v85 + 2;
                      if (v85 < v14)
                      {
                        v92 = v86->n128_u64[0];
                        if (v86->n128_u64[0] >= v86[1].n128_u64[0])
                        {
                          v85 = v94;
                        }
                        else
                        {
                          v92 = v86[1].n128_u64[0];
                          ++v86;
                        }
                        if (v92 < v90)
                          break;
                      }
                      else
                      {
                        v85 = v94;
                        if (v86->n128_u64[0] < v90)
                          break;
                      }
                    }
                    v89->n128_u64[0] = v90;
                    v89->n128_u64[1] = v91;
                  }
                }
              }
              v84 = v83-- <= 0;
              if (v84)
              {
                v95 = (unint64_t)v13 >> 4;
                do
                {
                  v96 = 0;
                  v133 = *v12;
                  v97 = v12;
                  do
                  {
                    v98 = &v97[v96 + 1];
                    v99 = (2 * v96) | 1;
                    v100 = 2 * v96 + 2;
                    if (v100 < v95 && v98->n128_u64[0] < v98[1].n128_u64[0])
                    {
                      ++v98;
                      v99 = v100;
                    }
                    *v97 = *v98;
                    v97 = v98;
                    v96 = v99;
                  }
                  while (v99 <= (uint64_t)((unint64_t)(v95 - 2) >> 1));
                  if (v98 == --a2)
                  {
                    result = v133;
                    *v98 = v133;
                  }
                  else
                  {
                    *v98 = *a2;
                    result = v133;
                    *a2 = v133;
                    v101 = (char *)v98 - (char *)v12 + 16;
                    if (v101 >= 17)
                    {
                      v102 = (((unint64_t)v101 >> 4) - 2) >> 1;
                      v103 = &v12[v102];
                      v104 = v98->n128_u64[0];
                      if (v103->n128_u64[0] < v98->n128_u64[0])
                      {
                        v105 = v98->n128_u64[1];
                        do
                        {
                          v106 = v98;
                          v98 = v103;
                          result = *v103;
                          *v106 = *v103;
                          if (!v102)
                            break;
                          v102 = (v102 - 1) >> 1;
                          v103 = &v12[v102];
                        }
                        while (v103->n128_u64[0] < v104);
                        v98->n128_u64[0] = v104;
                        v98->n128_u64[1] = v105;
                      }
                    }
                  }
                  v84 = v95-- <= 2;
                }
                while (!v84);
                return result;
              }
            }
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = &v12[(unint64_t)v14 >> 1];
          v17 = v9->n128_u64[0];
          if ((unint64_t)v13 < 0x801)
          {
            v19 = v12->n128_u64[0];
            if (v12->n128_u64[0] >= v16->n128_u64[0])
            {
              if (v17 < v19)
              {
                v116 = *v12;
                *v12 = *v9;
                result = v116;
                *v9 = v116;
                if (v12->n128_u64[0] < v16->n128_u64[0])
                {
                  v117 = *v16;
                  *v16 = *v12;
                  result = v117;
                  *v12 = v117;
                  --a3;
                  v20 = v12->n128_u64[0];
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_31;
            }
            if (v17 >= v19)
            {
              v120 = *v16;
              *v16 = *v12;
              result = v120;
              *v12 = v120;
              if (v9->n128_u64[0] >= v12->n128_u64[0])
                goto LABEL_31;
              v113 = *v12;
              *v12 = *v9;
            }
            else
            {
              v113 = *v16;
              *v16 = *v9;
            }
            result = v113;
            *v9 = v113;
LABEL_31:
            --a3;
            v20 = v12->n128_u64[0];
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v18 = v16->n128_u64[0];
          if (v16->n128_u64[0] >= v12->n128_u64[0])
          {
            if (v17 < v18)
            {
              v114 = *v16;
              *v16 = *v9;
              *v9 = v114;
              if (v16->n128_u64[0] < v12->n128_u64[0])
              {
                v115 = *v12;
                *v12 = *v16;
                *v16 = v115;
              }
            }
          }
          else
          {
            if (v17 >= v18)
            {
              v118 = *v12;
              *v12 = *v16;
              *v16 = v118;
              if (v9->n128_u64[0] >= v16->n128_u64[0])
                goto LABEL_22;
              v112 = *v16;
              *v16 = *v9;
            }
            else
            {
              v112 = *v12;
              *v12 = *v9;
            }
            *v9 = v112;
          }
LABEL_22:
          v21 = v12 + 1;
          v22 = &v12[v15];
          v25 = v22[-1].n128_u64[0];
          v23 = v22 - 1;
          v24 = v25;
          v26 = v10->n128_u64[0];
          if (v25 >= v12[1].n128_u64[0])
          {
            if (v26 < v24)
            {
              v119 = *v23;
              *v23 = *v10;
              *v10 = v119;
              if (v23->n128_u64[0] < v21->n128_u64[0])
              {
                v28 = *v21;
                *v21 = *v23;
                *v23 = v28;
              }
            }
          }
          else
          {
            if (v26 >= v24)
            {
              v29 = *v21;
              *v21 = *v23;
              *v23 = v29;
              if (v10->n128_u64[0] >= v23->n128_u64[0])
                goto LABEL_36;
              v121 = *v23;
              *v23 = *v10;
              v27 = v121;
            }
            else
            {
              v27 = *v21;
              *v21 = *v10;
            }
            *v10 = v27;
          }
LABEL_36:
          v30 = v12 + 2;
          v31 = &v12[v15];
          v34 = v31[1].n128_u64[0];
          v32 = v31 + 1;
          v33 = v34;
          v35 = v11->n128_u64[0];
          if (v34 >= v12[2].n128_u64[0])
          {
            if (v35 < v33)
            {
              v122 = *v32;
              *v32 = *v11;
              *v11 = v122;
              if (v32->n128_u64[0] < v30->n128_u64[0])
              {
                v37 = *v30;
                *v30 = *v32;
                *v32 = v37;
              }
            }
          }
          else
          {
            if (v35 >= v33)
            {
              v38 = *v30;
              *v30 = *v32;
              *v32 = v38;
              if (v11->n128_u64[0] >= v32->n128_u64[0])
                goto LABEL_45;
              v123 = *v32;
              *v32 = *v11;
              v36 = v123;
            }
            else
            {
              v36 = *v30;
              *v30 = *v11;
            }
            *v11 = v36;
          }
LABEL_45:
          v39 = v16->n128_u64[0];
          v40 = v32->n128_u64[0];
          if (v16->n128_u64[0] >= v23->n128_u64[0])
          {
            if (v40 < v39)
            {
              v125 = *v16;
              *v16 = *v32;
              *v32 = v125;
              if (v16->n128_u64[0] < v23->n128_u64[0])
              {
                v126 = *v23;
                *v23 = *v16;
                *v16 = v126;
              }
            }
          }
          else
          {
            if (v40 >= v39)
            {
              v127 = *v23;
              *v23 = *v16;
              *v16 = v127;
              if (v32->n128_u64[0] >= v16->n128_u64[0])
                goto LABEL_54;
              v124 = *v16;
              *v16 = *v32;
            }
            else
            {
              v124 = *v23;
              *v23 = *v32;
            }
            *v32 = v124;
          }
LABEL_54:
          v128 = *v12;
          *v12 = *v16;
          result = v128;
          *v16 = v128;
          --a3;
          v20 = v12->n128_u64[0];
          if ((a4 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (v12[-1].n128_u64[0] >= v20)
          {
            if (v20 >= v9->n128_u64[0])
            {
              n128_u64 = (unint64_t)v12[1].n128_u64;
              do
              {
                v12 = (__n128 *)n128_u64;
                if (n128_u64 >= (unint64_t)a2)
                  break;
                n128_u64 += 16;
              }
              while (v20 >= v12->n128_u64[0]);
            }
            else
            {
              do
              {
                v54 = v12[1].n128_u64[0];
                ++v12;
              }
              while (v20 >= v54);
            }
            v56 = a2;
            if (v12 < a2)
            {
              v56 = a2;
              do
              {
                v57 = v56[-1].n128_u64[0];
                --v56;
              }
              while (v20 < v57);
            }
            v58 = a1->n128_u64[1];
            while (v12 < v56)
            {
              v130 = *v12;
              *v12 = *v56;
              result = v130;
              *v56 = v130;
              do
              {
                v59 = v12[1].n128_u64[0];
                ++v12;
              }
              while (v20 >= v59);
              do
              {
                v60 = v56[-1].n128_u64[0];
                --v56;
              }
              while (v20 < v60);
            }
            v61 = v12 - 1;
            if (&v12[-1] != a1)
            {
              result = *v61;
              *a1 = *v61;
            }
            a4 = 0;
            v12[-1].n128_u64[0] = v20;
            v12[-1].n128_u64[1] = v58;
            continue;
          }
LABEL_56:
          v41 = 0;
          v42 = v12->n128_u64[1];
          do
            v43 = v12[++v41].n128_u64[0];
          while (v43 < v20);
          v44 = &v12[v41];
          v45 = a2;
          if (v41 == 1)
          {
            v45 = a2;
            do
            {
              if (v44 >= v45)
                break;
              v47 = v45[-1].n128_u64[0];
              --v45;
            }
            while (v47 >= v20);
          }
          else
          {
            do
            {
              v46 = v45[-1].n128_u64[0];
              --v45;
            }
            while (v46 >= v20);
          }
          v12 = (__n128 *)((char *)v12 + v41 * 16);
          if (v44 < v45)
          {
            v48 = v45;
            do
            {
              v129 = *v12;
              *v12 = *v48;
              result = v129;
              *v48 = v129;
              do
              {
                v49 = v12[1].n128_u64[0];
                ++v12;
              }
              while (v49 < v20);
              do
              {
                v50 = v48[-1].n128_u64[0];
                --v48;
              }
              while (v50 >= v20);
            }
            while (v12 < v48);
          }
          v51 = v12 - 1;
          if (&v12[-1] != a1)
          {
            result = *v51;
            *a1 = *v51;
          }
          v12[-1].n128_u64[0] = v20;
          v12[-1].n128_u64[1] = v42;
          if (v44 < v45)
            goto LABEL_75;
          v52 = sub_23586CF4C(a1, v12 - 1, result);
          if (!sub_23586CF4C(v12, a2, v53))
          {
            if (v52)
              continue;
LABEL_75:
            sub_23586C3F0(a1, &v12[-1], a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v12 - 1;
          if (v52)
            return result;
          goto LABEL_1;
        }
        v71 = v12 + 1;
        v73 = v12 == a2 || v71 == a2;
        if ((a4 & 1) != 0)
        {
          if (v73)
            return result;
          v74 = 0;
          v75 = v12;
          while (1)
          {
            v77 = v71;
            v78 = v75[1].n128_u64[0];
            if (v78 < v75->n128_u64[0])
            {
              v79 = v75[1].n128_i64[1];
              v80 = v74;
              do
              {
                result = *(__n128 *)((char *)v12 + v80);
                *(__n128 *)((char *)v12 + v80 + 16) = result;
                if (!v80)
                {
                  v76 = v12;
                  goto LABEL_116;
                }
                v81 = *(unint64_t *)((char *)v12[-1].n128_u64 + v80);
                v80 -= 16;
              }
              while (v78 < v81);
              v76 = (__n128 *)((char *)v12 + v80 + 16);
LABEL_116:
              v76->n128_u64[0] = v78;
              v76->n128_u64[1] = v79;
            }
            v71 = v77 + 1;
            v74 += 16;
            v75 = v77;
            if (&v77[1] == a2)
              return result;
          }
        }
        if (!v73)
        {
          do
          {
            v107 = v71;
            v108 = a1[1].n128_u64[0];
            if (v108 < a1->n128_u64[0])
            {
              v109 = a1[1].n128_u64[1];
              v110 = v107;
              do
              {
                result = v110[-1];
                *v110 = result;
                v111 = v110[-2].n128_u64[0];
                --v110;
              }
              while (v108 < v111);
              v110->n128_u64[0] = v108;
              v110->n128_u64[1] = v109;
            }
            v71 = v107 + 1;
            a1 = v107;
          }
          while (&v107[1] != a2);
        }
        return result;
    }
  }
}

BOOL sub_23586CF4C(__n128 *a1, __n128 *a2, __n128 a3)
{
  __n128 *v4;
  unint64_t v5;
  __n128 *v6;
  unint64_t v7;
  unint64_t v8;
  __n128 v9;
  __n128 *v10;
  unint64_t v11;
  __int128 *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __n128 v16;
  unint64_t v17;
  __int128 *v18;
  unint64_t v19;
  __n128 *v20;
  unint64_t v21;
  __int128 v22;
  __n128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __n128 v28;
  __n128 *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __n128 v39;
  __int128 v40;
  __int128 v41;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v11 = a2[-1].n128_u64[0];
      v10 = a2 - 1;
      if (v11 < a1->n128_u64[0])
        goto LABEL_10;
      return 1;
    case 3:
      v12 = (__int128 *)&a1[1];
      v13 = a1[1].n128_u64[0];
      v15 = a2[-1].n128_u64[0];
      v10 = a2 - 1;
      v14 = v15;
      if (v13 >= a1->n128_u64[0])
      {
        if (v14 < v13)
        {
          v25 = *v12;
          *v12 = (__int128)*v10;
          *v10 = (__n128)v25;
          if (a1[1].n128_u64[0] < a1->n128_u64[0])
          {
LABEL_46:
            v41 = (__int128)*a1;
            *a1 = (__n128)*v12;
            *v12 = v41;
            return 1;
          }
        }
      }
      else
      {
        if (v14 < v13)
        {
LABEL_10:
          v16 = *a1;
          *a1 = *v10;
LABEL_11:
          *v10 = v16;
          return 1;
        }
        v37 = (__int128)*a1;
        *a1 = (__n128)*v12;
        *v12 = v37;
        if (v10->n128_u64[0] < a1[1].n128_u64[0])
        {
          v16 = (__n128)*v12;
          *v12 = (__int128)*v10;
          goto LABEL_11;
        }
      }
      return 1;
    case 4:
      v12 = (__int128 *)&a1[1];
      v17 = a1[1].n128_u64[0];
      v18 = (__int128 *)&a1[2];
      v19 = a1[2].n128_u64[0];
      v20 = a2 - 1;
      v21 = a1->n128_u64[0];
      if (v17 >= a1->n128_u64[0])
      {
        if (v19 < v17)
        {
          v26 = *v12;
          *v12 = *v18;
          *v18 = v26;
          if (*(_QWORD *)v12 < v21)
          {
            v27 = (__int128)*a1;
            *a1 = (__n128)*v12;
            *v12 = v27;
          }
        }
      }
      else
      {
        if (v19 >= v17)
        {
          v38 = (__int128)*a1;
          *a1 = (__n128)*v12;
          *v12 = v38;
          if (v19 >= a1[1].n128_u64[0])
            goto LABEL_43;
          v22 = *v12;
          *v12 = *v18;
        }
        else
        {
          v22 = (__int128)*a1;
          *a1 = (__n128)*v18;
        }
        *v18 = v22;
      }
LABEL_43:
      if (v20->n128_u64[0] < *(_QWORD *)v18)
      {
        v39 = (__n128)*v18;
        *v18 = (__int128)*v20;
        *v20 = v39;
        if (*(_QWORD *)v18 < *(_QWORD *)v12)
        {
          v40 = *v12;
          *v12 = *v18;
          *v18 = v40;
          if (a1[1].n128_u64[0] < a1->n128_u64[0])
            goto LABEL_46;
        }
      }
      return 1;
    case 5:
      sub_23586D2FC(a1, a1 + 1, a1[2].n128_u64, (__n128 *)a1[3].n128_u64, (__n128 *)a2[-1].n128_u64, a3);
      return 1;
    default:
      v4 = a1 + 2;
      v5 = a1[2].n128_u64[0];
      v6 = a1 + 1;
      v7 = a1[1].n128_u64[0];
      v8 = a1->n128_u64[0];
      if (v7 >= a1->n128_u64[0])
      {
        if (v5 < v7)
        {
          v23 = *v6;
          *v6 = *v4;
          *v4 = v23;
          if (v6->n128_u64[0] < v8)
          {
            v24 = *a1;
            *a1 = *v6;
            *v6 = v24;
          }
        }
      }
      else
      {
        if (v5 >= v7)
        {
          v28 = *a1;
          *a1 = *v6;
          *v6 = v28;
          if (v5 >= a1[1].n128_u64[0])
            goto LABEL_28;
          v9 = *v6;
          *v6 = *v4;
        }
        else
        {
          v9 = *a1;
          *a1 = *v4;
        }
        *v4 = v9;
      }
LABEL_28:
      v29 = a1 + 3;
      if (&a1[3] == a2)
        return 1;
      v30 = 0;
      v31 = 0;
      while (1)
      {
        v32 = v29->n128_u64[0];
        if (v29->n128_u64[0] < v4->n128_u64[0])
          break;
LABEL_31:
        v4 = v29;
        v30 += 16;
        if (++v29 == a2)
          return 1;
      }
      v33 = v29->n128_i64[1];
      v34 = v30;
      do
      {
        *(__n128 *)((char *)a1 + v34 + 48) = *(__n128 *)((char *)a1 + v34 + 32);
        if (v34 == -32)
        {
          a1->n128_u64[0] = v32;
          a1->n128_u64[1] = v33;
          if (++v31 != 8)
            goto LABEL_31;
          return &v29[1] == a2;
        }
        v35 = *(unint64_t *)((char *)a1[1].n128_u64 + v34);
        v34 -= 16;
      }
      while (v32 < v35);
      v36 = (uint64_t)a1 + v34;
      *(_QWORD *)(v36 + 48) = v32;
      *(_QWORD *)(v36 + 56) = v33;
      if (++v31 != 8)
        goto LABEL_31;
      return &v29[1] == a2;
  }
}

__n128 sub_23586D2FC(__n128 *a1, __n128 *a2, unint64_t *a3, _OWORD *a4, _OWORD *a5, __n128 result)
{
  unint64_t v6;
  unint64_t v7;

  v6 = a2->n128_u64[0];
  v7 = *a3;
  if (a2->n128_u64[0] >= a1->n128_u64[0])
  {
    if (v7 < v6)
    {
      result = *a2;
      *a2 = *(__n128 *)a3;
      *(__n128 *)a3 = result;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  else
  {
    if (v7 < v6)
    {
      result = *a1;
      *a1 = *(__n128 *)a3;
LABEL_9:
      *(__n128 *)a3 = result;
      goto LABEL_10;
    }
    result = *a1;
    *a1 = *a2;
    *a2 = result;
    if (*a3 < a2->n128_u64[0])
    {
      result = *a2;
      *a2 = *(__n128 *)a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_QWORD *)a4 < *a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < a2->n128_u64[0])
    {
      result = *a2;
      *a2 = *(__n128 *)a3;
      *(__n128 *)a3 = result;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  if (*(_QWORD *)a5 < *(_QWORD *)a4)
  {
    result = *(__n128 *)a4;
    *a4 = *a5;
    *a5 = result;
    if (*(_QWORD *)a4 < *a3)
    {
      result = *(__n128 *)a3;
      *(_OWORD *)a3 = *a4;
      *a4 = result;
      if (*a3 < a2->n128_u64[0])
      {
        result = *a2;
        *a2 = *(__n128 *)a3;
        *(__n128 *)a3 = result;
        if (a2->n128_u64[0] < a1->n128_u64[0])
        {
          result = *a1;
          *a1 = *a2;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

void sub_23586D480(uint64_t a1, const std::locale *a2)
{
  std::runtime_error_vtbl *v4;
  uint64_t v5;
  uint64_t v6;
  std::runtime_error_vtbl *v7;
  std::runtime_error_vtbl *v8;
  std::ios_base *v9;
  uint64_t v10;
  std::ios_base *v11;
  std::locale *rdbuf;
  std::locale *v13;
  int v14;
  std::string::size_type v15;
  std::string *p_dst;
  unint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  std::string *v21;
  size_t v22;
  int8x16_t v23;
  uint64_t v24;
  uint64_t v25;
  std::string v26;
  std::string v27;
  std::string __dst;
  std::runtime_error v29;
  const void *v30;
  _BYTE v31[8];
  uint64_t v32;
  const void *v33;
  unint64_t v34;
  __int128 __p;
  __int128 v36;
  int v37;
  uint64_t v38[19];
  char v39;
  std::string v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v4 = (std::runtime_error_vtbl *)MEMORY[0x24BEDB870];
  v5 = MEMORY[0x24BEDB870] + 64;
  v6 = MEMORY[0x24BEDB800];
  v7 = *(std::runtime_error_vtbl **)(MEMORY[0x24BEDB800] + 8);
  v8 = *(std::runtime_error_vtbl **)(MEMORY[0x24BEDB800] + 16);
  v38[0] = MEMORY[0x24BEDB870] + 64;
  v29.__vftable = v7;
  *(std::runtime_error_vtbl **)((char *)&v29.__vftable + (unint64_t)v7[-1].~runtime_error) = v8;
  v9 = (std::ios_base *)((char *)&v29 + (unint64_t)v29.__vftable[-1].~runtime_error);
  std::ios_base::init(v9, &v29.__imp_);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v29.__vftable = v4 + 1;
  v38[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x24BEDB848];
  v29.__imp_.__imp_ = (const char *)(MEMORY[0x24BEDB848] + 16);
  __p = 0u;
  v36 = 0u;
  v37 = 16;
  v11 = (std::ios_base *)((char *)&v29 + (unint64_t)v29.__vftable[-1].~runtime_error);
  std::ios_base::getloc(v11);
  std::ios_base::imbue(v11, a2);
  std::locale::~locale((std::locale *)&__dst);
  rdbuf = (std::locale *)v11->__rdbuf_;
  if (rdbuf)
  {
    (*((void (**)(std::locale *, const std::locale *))rdbuf->__locale_ + 2))(rdbuf, a2);
    v13 = rdbuf + 1;
    std::locale::locale((std::locale *)&v27, v13);
    std::locale::operator=(v13, a2);
    std::locale::~locale((std::locale *)&v27);
  }
  std::locale::~locale((std::locale *)&v26);
  sub_23584D1D8(&v29, (uint64_t)"Markers", 7);
  v14 = *(_DWORD *)&v31[(unint64_t)v29.__vftable[-1].~runtime_error] & 5;
  if (v14)
  {
    v39 = 0;
    goto LABEL_19;
  }
  if ((v37 & 0x10) != 0)
  {
    v17 = *((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1) < v34)
    {
      *((_QWORD *)&v36 + 1) = v34;
      v17 = v34;
    }
    v18 = v33;
    v15 = v17 - (_QWORD)v33;
    if (v17 - (unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_39;
  }
  else
  {
    if ((v37 & 8) == 0)
    {
      v15 = 0;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
      goto LABEL_18;
    }
    v18 = v30;
    v15 = v32 - (_QWORD)v30;
    if ((unint64_t)(v32 - (_QWORD)v30) >= 0x7FFFFFFFFFFFFFF8)
LABEL_39:
      sub_23584B34C();
  }
  if (v15 >= 0x17)
  {
    v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v19 = v15 | 7;
    v20 = v19 + 1;
    p_dst = (std::string *)operator new(v19 + 1);
    __dst.__r_.__value_.__l.__size_ = v15;
    __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v15;
    p_dst = &__dst;
    if (!v15)
      goto LABEL_18;
  }
  memmove(p_dst, v18, v15);
LABEL_18:
  p_dst->__r_.__value_.__s.__data_[v15] = 0;
  v40 = __dst;
  v39 = 1;
LABEL_19:
  v29.__vftable = *(std::runtime_error_vtbl **)v6;
  *(std::runtime_error_vtbl **)((char *)&v29.__vftable + (unint64_t)v29.__vftable[-1].~runtime_error) = *(std::runtime_error_vtbl **)(v6 + 24);
  v29.__imp_.__imp_ = (const char *)(v10 + 16);
  if (SBYTE7(v36) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x23B7D9458](v38);
  if (v14)
  {
    sub_23584AAE8(&v26, "conversion of type \"");
    sub_2358511CC((char *)(0x80000002358A1690 & 0x7FFFFFFFFFFFFFFFLL), &v26, &v27);
    sub_2358511CC("\" to data failed", &v27, &__dst);
    v25 = 0;
    sub_23586A328(&v29, &__dst, &v25);
    v23.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/"
                          "Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/lo"
                          "cal/include/boost/property_tree/detail/ptree_implementation.hpp";
    v23.i64[1] = (uint64_t)"void boost::property_tree::basic_ptree<std::string, std::string>::put_value(const Type &, Tran"
                          "slator) [Key = std::string, Data = std::string, KeyCompare = std::less<std::string>, Type = ch"
                          "ar[8], Translator = boost::property_tree::stream_translator<char, std::char_traits<char>, std:"
                          ":allocator<char>, char[8]>]";
    v24 = 828;
    sub_23586A2CC(&v29, &v23);
  }
  if (&v40 == (std::string *)a1)
    goto LABEL_35;
  if (*(char *)(a1 + 23) < 0)
  {
    v21 = (v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v40
        : (std::string *)v40.__r_.__value_.__r.__words[0];
    v22 = (v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v40.__r_.__value_.__r.__words[2])
        : v40.__r_.__value_.__l.__size_;
    sub_23584BAC0((void **)a1, v21, v22);
  }
  else if ((*((_BYTE *)&v40.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    sub_23584B9FC((_QWORD *)a1, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  }
  else
  {
    *(std::string *)a1 = v40;
  }
  if (v39)
  {
LABEL_35:
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
  }
}

void sub_23586D878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,std::runtime_error a31,uint64_t a32)
{
  a31.__vftable = (std::runtime_error_vtbl *)&off_2506E0080;
  if (a32)
    (*(void (**)(uint64_t))(*(_QWORD *)a32 + 8))(a32);
  std::runtime_error::~runtime_error(&a31);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a18 & 0x80000000) == 0)
LABEL_10:
        _Unwind_Resume(a1);
LABEL_9:
      operator delete(a13);
      _Unwind_Resume(a1);
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a19);
  if ((a18 & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_23586D97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  std::locale::~locale(&a13);
  sub_235868848((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_23586D998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_235868848((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23586D9AC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _BOOL4 v6;
  void **v7;
  void *v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  char *v12;

  if (*(char *)(a3 + 23) < 0)
  {
    sub_23584B488(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
    v6 = *(char *)(a3 + 23) < 0;
  }
  else
  {
    v6 = 0;
    *(_OWORD *)__p = *(_OWORD *)a3;
    v10 = *(_QWORD *)(a3 + 16);
  }
  v11 = *(_BYTE *)(a3 + 24);
  v7 = __p;
  if (v10 < 0)
    v7 = (void **)__p[0];
  if (v6)
    v8 = *(void **)a3;
  else
    v8 = (void *)a3;
  v12 = (char *)v7 + *(_QWORD *)(a3 + 32) - (_QWORD)v8;
  *a1 = sub_235869118(a2, (uint64_t)__p);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
}

void sub_23586DA88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23586DAA4()
{
  _QWORD *v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  char v11;
  unsigned __int8 *v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  _BYTE *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  unint64_t v26;
  __int128 v27;
  _QWORD *v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  char *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  size_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unint64_t v44;
  char *v45;
  unsigned __int8 *v46;
  unint64_t v47;
  __int128 v48;
  char *v49;
  unsigned __int8 *v50;
  unint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned __int8 v54;
  unsigned __int8 *v55;
  unsigned __int8 v56;
  int v57;
  int v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t *v61;
  unsigned __int8 v62;
  int v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t *v66;
  unsigned __int8 v67;
  int v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t *v71;
  unsigned __int8 v72;
  int v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  __int128 v80;
  std::string::size_type v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _BYTE *v87;
  _BYTE *v88;
  _QWORD *exception;
  __int128 *v90;
  _QWORD *v91;
  __int128 *v92;
  std::string __p;
  uint64_t v94;
  int8x16_t v95;
  uint64_t v96;
  void *v97;
  unsigned __int8 *v98;
  unsigned __int8 *v99;
  unsigned __int8 *v100;
  std::runtime_error v101[2];
  uint64_t v102;
  int v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  _BYTE *v107;
  _BYTE *v108;
  __int128 *v109;
  _BYTE v110[65536];
  __int128 v111;
  uint64_t v112;

  v0 = (_QWORD *)MEMORY[0x24BDAC7A8]();
  v90 = (__int128 *)v3;
  v5 = v2;
  v6 = v1;
  v112 = *MEMORY[0x24BDAC8D0];
  v7 = *v0;
  *(_DWORD *)((char *)v0 + *(_QWORD *)(*v0 - 24) + 8) &= ~0x1000u;
  v8 = *(_QWORD *)(v7 - 24);
  v9 = *(_QWORD **)((char *)v0 + v8 + 40);
  v98 = 0;
  v99 = 0;
  v97 = 0;
  if (v9)
  {
    v91 = v0;
    v92 = v1;
    while (1)
    {
      v10 = (char *)v9[3];
      if (v10 != (char *)v9[4])
        goto LABEL_5;
      if ((*(unsigned int (**)(_QWORD *))(*v9 + 72))(v9) == -1)
      {
        v0 = v91;
        v6 = v92;
        v8 = *(_QWORD *)(*v91 - 24);
        break;
      }
      v10 = (char *)v9[3];
      if (v10 == (char *)v9[4])
      {
        v11 = (*(uint64_t (**)(_QWORD *))(*v9 + 72))(v9);
        v13 = v98;
        v12 = v99;
        if (v98 < v99)
        {
LABEL_6:
          *v13 = v11;
          v14 = (uint64_t)(v13 + 1);
          goto LABEL_25;
        }
      }
      else
      {
LABEL_5:
        v11 = *v10;
        v13 = v98;
        v12 = v99;
        if (v98 < v99)
          goto LABEL_6;
      }
      v15 = v97;
      v16 = v13 - (_BYTE *)v97;
      v17 = v13 - (_BYTE *)v97 + 1;
      if (v17 < 0)
        sub_235847D5C();
      v18 = v12 - (_BYTE *)v97;
      if (2 * v18 > v17)
        v17 = 2 * v18;
      if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
        v19 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        v20 = operator new(v19);
        v21 = &v20[v16];
        v20[v16] = v11;
        v14 = (uint64_t)&v20[v16 + 1];
        if (v13 != v15)
          goto LABEL_18;
      }
      else
      {
        v20 = 0;
        v21 = (char *)(v13 - (_BYTE *)v97);
        *(_BYTE *)v16 = v11;
        v14 = v16 + 1;
        if (v13 != v15)
        {
LABEL_18:
          if (v16 >= 8 && (unint64_t)(v15 - v20) >= 0x20)
          {
            if (v16 >= 0x20)
            {
              v22 = v16 & 0xFFFFFFFFFFFFFFE0;
              v24 = &v20[v16 - 16];
              v25 = (__int128 *)(v13 - 16);
              v26 = v16 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v27 = *v25;
                *(v24 - 1) = *(v25 - 1);
                *v24 = v27;
                v24 -= 2;
                v25 -= 2;
                v26 -= 32;
              }
              while (v26);
              if (v16 == v22)
                goto LABEL_38;
              if ((v16 & 0x18) != 0)
                goto LABEL_31;
              v21 -= v22;
              v13 -= v22;
            }
            else
            {
              v22 = 0;
LABEL_31:
              v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
              v28 = &v20[&v13[-v22] - v15 - 8];
              v29 = (uint64_t *)&v13[-v22 - 8];
              v30 = v22 - (v16 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v31 = *v29--;
                *v28-- = v31;
                v30 += 8;
              }
              while (v30);
              v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
              if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_38:
                v13 = v97;
                v97 = v20;
                v99 = &v20[v19];
                if (!v13)
                  goto LABEL_25;
LABEL_24:
                operator delete(v13);
                goto LABEL_25;
              }
            }
          }
          v32 = v21 - 1;
          do
          {
            v33 = *--v13;
            *v32-- = v33;
          }
          while (v13 != v15);
          goto LABEL_38;
        }
      }
      v97 = v21;
      v99 = &v20[v19];
      if (v13)
        goto LABEL_24;
LABEL_25:
      v98 = (unsigned __int8 *)v14;
      v23 = v9[3];
      if (v23 == v9[4])
        (*(void (**)(_QWORD *))(*v9 + 80))(v9);
      else
        v9[3] = v23 + 1;
    }
  }
  if (*(_DWORD *)((char *)v0 + v8 + 32))
  {
    sub_23584AAE8(&__p, "read error");
    sub_235870C54(v101, (void **)&__p.__r_.__value_.__l.__data_, v90, 0);
    v101[0].__vftable = (std::runtime_error_vtbl *)off_2506E01B0;
    v95.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/"
                          "Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/lo"
                          "cal/include/boost/property_tree/detail/xml_parser_read_rapidxml.hpp";
    v95.i64[1] = (uint64_t)"void boost::property_tree::xml_parser::read_xml_internal(std::basic_istream<typename Ptree::ke"
                          "y_type::value_type> &, Ptree &, int, const std::string &) [Ptree = boost::property_tree::basic"
                          "_ptree<std::string, std::string>]";
    v96 = 101;
    sub_23586E890((uint64_t)v101, &v95);
  }
  v34 = (char *)v98;
  if (v98 < v99)
  {
    *v98 = 0;
    v35 = (unsigned __int8 *)v97;
    v36 = (uint64_t)(v34 + 1);
    goto LABEL_72;
  }
  v37 = (char *)v97;
  v38 = v98 - (_BYTE *)v97;
  v39 = v98 - (_BYTE *)v97 + 1;
  if (v39 < 0)
    sub_235847D5C();
  v40 = v99 - (_BYTE *)v97;
  if (2 * (v99 - (_BYTE *)v97) > (unint64_t)v39)
    v39 = 2 * v40;
  if (v40 >= 0x3FFFFFFFFFFFFFFFLL)
    v41 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v41 = v39;
  if (v41)
  {
    v35 = (unsigned __int8 *)operator new(v41);
    v42 = &v35[v38];
    v43 = &v35[v41];
    v35[v38] = 0;
    v36 = (uint64_t)&v35[v38 + 1];
    if (v34 != v37)
    {
LABEL_52:
      if (v38 < 8 || (unint64_t)(v37 - (char *)v35) < 0x20)
        goto LABEL_68;
      if (v38 >= 0x20)
      {
        v44 = v38 & 0xFFFFFFFFFFFFFFE0;
        v45 = v34 - 16;
        v46 = &v35[v34 - 16 - v37];
        v47 = v38 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v48 = *(_OWORD *)v45;
          *((_OWORD *)v46 - 1) = *((_OWORD *)v45 - 1);
          *(_OWORD *)v46 = v48;
          v46 -= 32;
          v45 -= 32;
          v47 -= 32;
        }
        while (v47);
        if (v38 == v44)
        {
LABEL_70:
          v34 = (char *)v97;
          v97 = v35;
          v99 = v43;
          if (!v34)
            goto LABEL_72;
          goto LABEL_71;
        }
        if ((v38 & 0x18) == 0)
        {
          v42 -= v44;
          v34 -= v44;
          goto LABEL_68;
        }
      }
      else
      {
        v44 = 0;
      }
      v42 -= v38 & 0xFFFFFFFFFFFFFFF8;
      v49 = &v34[-v44 - 8];
      v50 = &v35[v49 - v37];
      v51 = v44 - (v38 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v52 = *(_QWORD *)v49;
        v49 -= 8;
        *(_QWORD *)v50 = v52;
        v50 -= 8;
        v51 += 8;
      }
      while (v51);
      v34 -= v38 & 0xFFFFFFFFFFFFFFF8;
      if (v38 == (v38 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_70;
LABEL_68:
      v53 = v42 - 1;
      do
      {
        v54 = *--v34;
        *v53-- = v54;
      }
      while (v34 != v37);
      goto LABEL_70;
    }
  }
  else
  {
    v35 = 0;
    v42 = (unsigned __int8 *)(v98 - (_BYTE *)v97);
    v43 = 0;
    *(_BYTE *)v38 = 0;
    v36 = v38 + 1;
    if (v34 != v37)
      goto LABEL_52;
  }
  v35 = v42;
  v97 = v42;
  v99 = v43;
  if (v34)
LABEL_71:
    operator delete(v34);
LABEL_72:
  v98 = (unsigned __int8 *)v36;
  v102 = 0;
  v101[0] = 0u;
  v103 = 0;
  v111 = 0u;
  v107 = v110;
  v108 = v110;
  v109 = &v111;
  if ((v5 & 2) != 0)
  {
    if ((v5 & 4) != 0)
    {
      v100 = v35;
      v104 = 0;
      v106 = 0;
      if (*v35 == 239 && v35[1] == 187 && v35[2] == 191)
      {
        v35 += 3;
        v100 = v35;
      }
      while (1)
      {
        do
        {
          v55 = v35;
          v73 = (char)*v35++;
          v72 = v73;
          if (v73 < 0)
            v72 = 122;
        }
        while (byte_2358A1773[v72]);
        v100 = v55;
        v58 = *v55;
        if (v58 != 60)
          break;
        v100 = v35;
        v74 = (_QWORD *)sub_235870FA0(v101, &v100);
        if (v74)
        {
          v75 = v105;
          if (v104)
            v76 = v105 + 11;
          else
            v76 = &v104;
          if (!v104)
            v75 = 0;
          *v76 = (uint64_t)v74;
          v105 = v74;
          v74[4] = v101;
          v74[10] = v75;
          v74[11] = 0;
        }
        v35 = v100;
      }
    }
    else
    {
      v100 = v35;
      v104 = 0;
      v106 = 0;
      if (*v35 == 239 && v35[1] == 187 && v35[2] == 191)
      {
        v35 += 3;
        v100 = v35;
      }
      while (1)
      {
        do
        {
          v55 = v35;
          v63 = (char)*v35++;
          v62 = v63;
          if (v63 < 0)
            v62 = 122;
        }
        while (byte_2358A1773[v62]);
        v100 = v55;
        v58 = *v55;
        if (v58 != 60)
          break;
        v100 = v35;
        v64 = (_QWORD *)sub_2358724A8(v101, &v100, v2, v3, v4);
        if (v64)
        {
          v65 = v105;
          if (v104)
            v66 = v105 + 11;
          else
            v66 = &v104;
          if (!v104)
            v65 = 0;
          *v66 = (uint64_t)v64;
          v105 = v64;
          v64[4] = v101;
          v64[10] = v65;
          v64[11] = 0;
        }
        v35 = v100;
      }
    }
  }
  else if ((v5 & 4) != 0)
  {
    v100 = v35;
    v104 = 0;
    v106 = 0;
    if (*v35 == 239 && v35[1] == 187 && v35[2] == 191)
    {
      v35 += 3;
      v100 = v35;
    }
    while (1)
    {
      do
      {
        v55 = v35;
        v68 = (char)*v35++;
        v67 = v68;
        if (v68 < 0)
          v67 = 122;
      }
      while (byte_2358A1773[v67]);
      v100 = v55;
      v58 = *v55;
      if (v58 != 60)
        break;
      v100 = v35;
      v69 = (_QWORD *)sub_2358736E8(v101, &v100);
      if (v69)
      {
        v70 = v105;
        if (v104)
          v71 = v105 + 11;
        else
          v71 = &v104;
        if (!v104)
          v70 = 0;
        *v71 = (uint64_t)v69;
        v105 = v69;
        v69[4] = v101;
        v69[10] = v70;
        v69[11] = 0;
      }
      v35 = v100;
    }
  }
  else
  {
    v100 = v35;
    v104 = 0;
    v106 = 0;
    if (*v35 == 239 && v35[1] == 187 && v35[2] == 191)
    {
      v35 += 3;
      v100 = v35;
    }
    while (1)
    {
      do
      {
        v55 = v35;
        v57 = (char)*v35++;
        v56 = v57;
        if (v57 < 0)
          v56 = 122;
      }
      while (byte_2358A1773[v56]);
      v100 = v55;
      v58 = *v55;
      if (v58 != 60)
        break;
      v100 = v35;
      v59 = (_QWORD *)sub_235874A4C(v101, &v100, v2, v3, v4);
      if (v59)
      {
        v60 = v105;
        if (v104)
          v61 = v105 + 11;
        else
          v61 = &v104;
        if (!v104)
          v60 = 0;
        *v61 = (uint64_t)v59;
        v105 = v59;
        v59[4] = v101;
        v59[10] = v60;
        v59[11] = 0;
      }
      v35 = v100;
    }
  }
  if (v58)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *exception = &off_2506E0200;
    exception[1] = "expected <";
    exception[2] = v55;
    __cxa_throw(exception, (struct type_info *)&unk_2506E0098, (void (*)(void *))std::exception::~exception);
  }
  memset(&__p, 0, sizeof(__p));
  v77 = operator new();
  v78 = operator new(0x60uLL);
  *(_QWORD *)(v77 + 8) = v78;
  v78[7] = 0;
  v78[8] = v78 + 7;
  v78[9] = v78 + 7;
  v78[10] = v78 + 10;
  v78[11] = v78 + 10;
  *(_QWORD *)(v77 + 24) = 0;
  v94 = v77;
  v79 = v104;
  if (v104)
  {
    do
    {
      sub_23586E950(v79, &__p, v5);
      v79 = *(_QWORD *)(v79 + 88);
    }
    while (v79);
    v77 = v94;
  }
  v80 = *v6;
  *v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v80;
  v81 = *((_QWORD *)v6 + 2);
  v82 = *((_QWORD *)v6 + 3);
  *((_QWORD *)v6 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  *((_QWORD *)v6 + 3) = v77;
  __p.__r_.__value_.__r.__words[2] = v81;
  v94 = v82;
  v83 = *(_QWORD **)(v82 + 8);
  v84 = v83[11];
  if (v84)
    v85 = (_QWORD *)(v84 - 80);
  else
    v85 = 0;
  if (v85 != v83)
  {
    do
    {
      v86 = v85[11];
      if (v86)
        v83 = (_QWORD *)(v86 - 80);
      else
        v83 = 0;
      sub_2358688CC((uint64_t)v85);
      operator delete(v85);
      v85 = v83;
    }
    while (v83 != *(_QWORD **)(v82 + 8));
  }
  operator delete(v83);
  MEMORY[0x23B7D94C4](v82, 0x1020C402FC1992ELL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v87 = v107;
    if (v107 == v110)
      goto LABEL_164;
  }
  else
  {
    v87 = v107;
    if (v107 == v110)
      goto LABEL_164;
  }
  do
  {
    v88 = *(_BYTE **)&v87[-(int)v87 & 7];
    if (*((_QWORD *)&v111 + 1))
      (*((void (**)(void))&v111 + 1))();
    else
      MEMORY[0x23B7D94AC]();
    v107 = v88;
    v87 = v88;
  }
  while (v88 != v110);
LABEL_164:
  if (v97)
  {
    v98 = (unsigned __int8 *)v97;
    operator delete(v97);
  }
}

void sub_23586E454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::runtime_error a31)
{
  sub_23586E8EC(&a31);
  if (a18 < 0)
    operator delete(__p);
  if (!a23)
    _Unwind_Resume(a1);
  operator delete(a23);
  _Unwind_Resume(a1);
}

void sub_23586E484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int128 *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, int8x16_t a20,uint64_t a21,int8x16_t *a22,int8x16_t *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::runtime_error a30)
{
  uint64_t v30;
  _QWORD *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unint64_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int8x8_t *v42;
  unint64_t v43;
  int8x16_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int8x8_t v47;
  uint16x8_t v48;
  uint32x4_t v49;
  int8x16_t v50;
  int64x2_t v51;
  int64x2_t v52;
  uint32x4_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int64x2_t v58;
  int8x16_t *v59;
  int64x2_t v60;
  unint64_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  uint8x16_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  uint32x4_t v78;
  int8x16_t v79;
  uint32x4_t v80;
  uint32x4_t v81;
  int8x16_t v82;
  uint32x4_t v83;
  int64x2_t v84;
  int64x2_t v85;
  uint8x16_t v86;
  uint16x8_t v87;
  uint16x8_t v88;
  uint32x4_t v89;
  uint32x4_t v90;
  uint32x4_t v91;
  uint32x4_t v92;
  int v93;
  char *v94;

  MEMORY[0x23B7D94C4](v30, 0x1020C402FC1992ELL);
  if (a18 < 0)
    operator delete(__p);
  sub_235870300(&a30);
  if (a2 != 1)
  {
    if (!a22)
      _Unwind_Resume(a1);
    a23 = a22;
    operator delete(a22);
    _Unwind_Resume(a1);
  }
  v33 = __cxa_begin_catch(a1);
  v34 = (unsigned __int8 *)v33[2];
  if (a22 == (int8x16_t *)v34)
  {
    v35 = 1;
    goto LABEL_23;
  }
  v36 = v34 - (unsigned __int8 *)a22;
  if ((unint64_t)(v34 - (unsigned __int8 *)a22) < 8)
  {
    v37 = 0;
    v38 = (unsigned __int8 *)a22;
    goto LABEL_19;
  }
  if (v36 >= 0x20)
  {
    v55 = 0uLL;
    v56.i64[0] = 0xA0A0A0A0A0A0A0ALL;
    v56.i64[1] = 0xA0A0A0A0A0A0A0ALL;
    v57 = (int8x16_t)vdupq_n_s64(1uLL);
    v39 = v36 & 0xFFFFFFFFFFFFFFE0;
    v58 = 0uLL;
    v59 = a22 + 1;
    v60 = 0uLL;
    v61 = v36 & 0xFFFFFFFFFFFFFFE0;
    v62 = 0uLL;
    v63 = 0uLL;
    v64 = 0uLL;
    v65 = 0uLL;
    v66 = 0uLL;
    v67 = 0uLL;
    v68 = 0uLL;
    v69 = 0uLL;
    v70 = 0uLL;
    v71 = 0uLL;
    v72 = 0uLL;
    v73 = 0uLL;
    v74 = 0uLL;
    do
    {
      v75 = (uint8x16_t)vceqq_s8(v59[-1], v56);
      v76 = vmovl_u8(*(uint8x8_t *)v75.i8);
      v77 = vmovl_high_u8(v75);
      v78 = vmovl_high_u16(v77);
      v79.i64[0] = v78.u32[2];
      v79.i64[1] = v78.u32[3];
      v66 = vaddq_s64(v66, (int64x2_t)vandq_s8(v79, v57));
      v80 = vmovl_high_u16(v76);
      v81 = vmovl_u16(*(uint16x4_t *)v77.i8);
      v79.i64[0] = v78.u32[0];
      v79.i64[1] = v78.u32[1];
      v65 = vaddq_s64(v65, (int64x2_t)vandq_s8(v79, v57));
      v79.i64[0] = v81.u32[2];
      v79.i64[1] = v81.u32[3];
      v64 = vaddq_s64(v64, (int64x2_t)vandq_s8(v79, v57));
      v79.i64[0] = v80.u32[2];
      v79.i64[1] = v80.u32[3];
      v62 = vaddq_s64(v62, (int64x2_t)vandq_s8(v79, v57));
      v82 = *v59;
      v59 += 2;
      v83 = vmovl_u16(*(uint16x4_t *)v76.i8);
      v79.i64[0] = v81.u32[0];
      v79.i64[1] = v81.u32[1];
      v63 = vaddq_s64(v63, (int64x2_t)vandq_s8(v79, v57));
      v79.i64[0] = v83.u32[0];
      v79.i64[1] = v83.u32[1];
      v84 = (int64x2_t)vandq_s8(v79, v57);
      v79.i64[0] = v83.u32[2];
      v79.i64[1] = v83.u32[3];
      v85 = (int64x2_t)vandq_s8(v79, v57);
      v79.i64[0] = v80.u32[0];
      v79.i64[1] = v80.u32[1];
      v86 = (uint8x16_t)vceqq_s8(v82, v56);
      v60 = vaddq_s64(v60, (int64x2_t)vandq_s8(v79, v57));
      v87 = vmovl_u8(*(uint8x8_t *)v86.i8);
      v88 = vmovl_high_u8(v86);
      v58 = vaddq_s64(v58, v85);
      v89 = vmovl_high_u16(v88);
      v55 = vaddq_s64(v55, v84);
      v79.i64[0] = v89.u32[2];
      v79.i64[1] = v89.u32[3];
      v74 = vaddq_s64(v74, (int64x2_t)vandq_s8(v79, v57));
      v90 = vmovl_high_u16(v87);
      v91 = vmovl_u16(*(uint16x4_t *)v88.i8);
      v79.i64[0] = v89.u32[0];
      v79.i64[1] = v89.u32[1];
      v73 = vaddq_s64(v73, (int64x2_t)vandq_s8(v79, v57));
      v79.i64[0] = v91.u32[2];
      v79.i64[1] = v91.u32[3];
      v72 = vaddq_s64(v72, (int64x2_t)vandq_s8(v79, v57));
      v79.i64[0] = v90.u32[2];
      v79.i64[1] = v90.u32[3];
      v70 = vaddq_s64(v70, (int64x2_t)vandq_s8(v79, v57));
      v79.i64[0] = v91.u32[0];
      v79.i64[1] = v91.u32[1];
      v71 = vaddq_s64(v71, (int64x2_t)vandq_s8(v79, v57));
      v92 = vmovl_u16(*(uint16x4_t *)v87.i8);
      v79.i64[0] = v90.u32[0];
      v79.i64[1] = v90.u32[1];
      v69 = vaddq_s64(v69, (int64x2_t)vandq_s8(v79, v57));
      v79.i64[0] = v92.u32[2];
      v79.i64[1] = v92.u32[3];
      v68 = vaddq_s64(v68, (int64x2_t)vandq_s8(v79, v57));
      v79.i64[0] = v92.u32[0];
      v79.i64[1] = v92.u32[1];
      v67 = vaddq_s64(v67, (int64x2_t)vandq_s8(v79, v57));
      v61 -= 32;
    }
    while (v61);
    v37 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v67, v55), vaddq_s64(v71, v63)), vaddq_s64(vaddq_s64(v69, v60), vaddq_s64(v73, v65))), vaddq_s64(vaddq_s64(vaddq_s64(v68, v58), vaddq_s64(v72, v64)), vaddq_s64(vaddq_s64(v70, v62), vaddq_s64(v74, v66)))));
    if (v36 == v39)
      goto LABEL_22;
    if ((v36 & 0x18) == 0)
    {
      v38 = &a22->u8[v39];
      do
      {
LABEL_19:
        v93 = *v38++;
        if (v93 == 10)
          ++v37;
      }
      while (v38 != v34);
      goto LABEL_22;
    }
  }
  else
  {
    v37 = 0;
    v39 = 0;
  }
  v38 = &a22->u8[v36 & 0xFFFFFFFFFFFFFFF8];
  v40 = 0uLL;
  v41 = (int64x2_t)(unint64_t)v37;
  v42 = (int8x8_t *)&a22->i8[v39];
  v43 = v39 - (v36 & 0xFFFFFFFFFFFFFFF8);
  v44 = (int8x16_t)vdupq_n_s64(1uLL);
  v45 = 0uLL;
  v46 = 0uLL;
  do
  {
    v47 = *v42++;
    v48 = vmovl_u8((uint8x8_t)vceq_s8(v47, (int8x8_t)0xA0A0A0A0A0A0A0ALL));
    v49 = vmovl_u16(*(uint16x4_t *)v48.i8);
    v50.i64[0] = v49.u32[0];
    v50.i64[1] = v49.u32[1];
    v51 = (int64x2_t)vandq_s8(v50, v44);
    v50.i64[0] = v49.u32[2];
    v50.i64[1] = v49.u32[3];
    v52 = (int64x2_t)vandq_s8(v50, v44);
    v53 = vmovl_high_u16(v48);
    v50.i64[0] = v53.u32[0];
    v50.i64[1] = v53.u32[1];
    v54 = (int64x2_t)vandq_s8(v50, v44);
    v50.i64[0] = v53.u32[2];
    v50.i64[1] = v53.u32[3];
    v46 = vaddq_s64(v46, (int64x2_t)vandq_s8(v50, v44));
    v45 = vaddq_s64(v45, v54);
    v40 = vaddq_s64(v40, v52);
    v41 = vaddq_s64(v41, v51);
    v43 += 8;
  }
  while (v43);
  v37 = vaddvq_s64(vaddq_s64(vaddq_s64(v41, v45), vaddq_s64(v40, v46)));
  if (v36 != (v36 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_19;
LABEL_22:
  v35 = v37 + 1;
LABEL_23:
  v94 = (char *)(*(uint64_t (**)(_QWORD *))(*v33 + 16))(v33);
  sub_23584AAE8(&__p, v94);
  sub_235870C54(&a30, &__p, a10, (std::runtime_error_vtbl *)v35);
  a30.__vftable = (std::runtime_error_vtbl *)off_2506E01B0;
  a20.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Co"
                        "ntents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/"
                        "include/boost/property_tree/detail/xml_parser_read_rapidxml.hpp";
  a20.i64[1] = (uint64_t)"void boost::property_tree::xml_parser::read_xml_internal(std::basic_istream<typename Ptree::key_"
                        "type::value_type> &, Ptree &, int, const std::string &) [Ptree = boost::property_tree::basic_ptr"
                        "ee<std::string, std::string>]";
  a21 = 138;
  sub_23586E890((uint64_t)&a30, &a20);
}

void sub_23586E824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::runtime_error a31)
{
  sub_23586E8EC(&a31);
  if (a18 < 0)
    operator delete(__p);
  __cxa_end_catch();
  if (!a23)
    _Unwind_Resume(a1);
  operator delete(a23);
  _Unwind_Resume(a1);
}

void sub_23586E890(uint64_t a1, int8x16_t *a2)
{
  void *exception;

  exception = __cxa_allocate_exception(0x78uLL);
  sub_2358703A4((uint64_t)exception, a1, a2);
  __cxa_throw(exception, (struct type_info *)&unk_2506E00E0, (void (*)(void *))sub_2358704CC);
}

void sub_23586E8D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_23586E8EC(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)off_2506E01D8;
  if (SHIBYTE(this[3].__imp_.__imp_) < 0)
  {
    operator delete((void *)this[2].__imp_.__imp_);
    if ((SHIBYTE(this[2].__vftable) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(this[1].__vftable);
    std::runtime_error::~runtime_error(this);
    return;
  }
  if (SHIBYTE(this[2].__vftable) < 0)
    goto LABEL_6;
LABEL_3:
  std::runtime_error::~runtime_error(this);
}

void sub_23586E950(uint64_t a1, std::string *a2, uint64_t a3)
{
  int v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  _QWORD *v12;
  std::string::pointer v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  _QWORD *v36;
  const void *v37;
  size_t v38;
  void *v39;
  unsigned __int8 v40;
  const void *v41;
  size_t v42;
  __int128 *v43;
  unsigned __int8 v44;
  const char *v45;
  size_t v46;
  size_t v47;
  __int128 *p_dst;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::string::pointer data;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void **v83;
  std::string::size_type v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  char **i;
  char *v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  char *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  char *v141;
  size_t v142;
  void *v143;
  void **v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t j;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  std::string::pointer v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  __int128 __dst;
  unint64_t v182;
  void *__p[3];
  void *v184[2];
  void *v185;
  uint64_t v186;
  void *v187[2];
  void *v188;
  uint64_t v189;
  void *v190[2];
  void *v191;
  __int128 v192;
  void *v193;
  uint64_t v194;
  _QWORD v195[2];

  v6 = *(_DWORD *)(a1 + 40);
  if ((v6 - 2) < 2)
  {
    if ((a3 & 1) == 0)
    {
      v37 = *(const void **)(a1 + 8);
      if (v37)
      {
        v38 = *(_QWORD *)(a1 + 24);
        if (v38 > 0x7FFFFFFFFFFFFFF7)
LABEL_281:
          sub_23584B34C();
        if (v38 >= 0x17)
        {
          v81 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v38 | 7) != 0x17)
            v81 = v38 | 7;
          v82 = v81 + 1;
          v39 = operator new(v81 + 1);
          v190[1] = (void *)v38;
          v191 = (void *)(v82 | 0x8000000000000000);
          v190[0] = v39;
        }
        else
        {
          HIBYTE(v191) = *(_QWORD *)(a1 + 24);
          v39 = v190;
          if (!v38)
            goto LABEL_122;
        }
        memmove(v39, v37, v38);
      }
      else
      {
        v38 = 0;
        HIBYTE(v191) = 0;
        v39 = v190;
      }
LABEL_122:
      *((_BYTE *)v39 + v38) = 0;
      if (SHIBYTE(v191) >= 0)
        v83 = v190;
      else
        v83 = (void **)v190[0];
      if (SHIBYTE(v191) >= 0)
        v84 = HIBYTE(v191);
      else
        v84 = (std::string::size_type)v190[1];
      std::string::append(a2, (const std::string::value_type *)v83, v84);
      if ((SHIBYTE(v191) & 0x80000000) == 0)
        return;
      v85 = v190[0];
LABEL_279:
      operator delete(v85);
      return;
    }
    v44 = atomic_load((unsigned __int8 *)&qword_2563067F8);
    if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_2563067F8))
    {
      sub_235875EEC((std::string *)&xmmword_256306820, "<xmltext>");
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_256306820, &dword_235841000);
      __cxa_guard_release(&qword_2563067F8);
    }
    if (*(_QWORD *)(a1 + 8))
      v45 = *(const char **)(a1 + 8);
    else
      v45 = &byte_2563067E8;
    v46 = strlen(v45);
    if (v46 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_282;
    v47 = v46;
    if (v46 >= 0x17)
    {
      v50 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v46 | 7) != 0x17)
        v50 = v46 | 7;
      v51 = v50 + 1;
      p_dst = (__int128 *)operator new(v50 + 1);
      *((_QWORD *)&__dst + 1) = v47;
      v182 = v51 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v182) = v46;
      p_dst = &__dst;
      if (!v46)
      {
        LOBYTE(__dst) = 0;
        v49 = SHIBYTE(v182);
        if ((SHIBYTE(v182) & 0x80000000) == 0)
        {
LABEL_62:
          *(_OWORD *)v187 = __dst;
          v188 = (void *)v182;
          goto LABEL_68;
        }
LABEL_67:
        sub_23584B488(v187, (void *)__dst, *((unint64_t *)&__dst + 1));
LABEL_68:
        v52 = operator new();
        v53 = operator new(0x60uLL);
        *(_QWORD *)(v52 + 8) = v53;
        v53[7] = 0;
        v53[8] = v53 + 7;
        v53[9] = v53 + 7;
        v53[10] = v53 + 10;
        v53[11] = v53 + 10;
        *(_QWORD *)(v52 + 24) = 0;
        v189 = v52;
        if (byte_256306837 < 0)
        {
          sub_23584B488(__p, (void *)xmmword_256306820, *((unint64_t *)&xmmword_256306820 + 1));
        }
        else
        {
          *(_OWORD *)__p = xmmword_256306820;
          __p[2] = (void *)unk_256306830;
        }
        if (SHIBYTE(v188) < 0)
        {
          sub_23584B488(v184, v187[0], (unint64_t)v187[1]);
        }
        else
        {
          *(_OWORD *)v184 = *(_OWORD *)v187;
          v185 = v188;
        }
        v54 = operator new();
        v55 = v189;
        *(_QWORD *)(v54 + 8) = operator new(0x60uLL);
        *(_QWORD *)(v54 + 24) = 0;
        sub_23586BE1C(v54, v55);
        *(_OWORD *)v190 = *(_OWORD *)__p;
        v191 = __p[2];
        memset(__p, 0, sizeof(__p));
        v186 = v54;
        if (SHIBYTE(v185) < 0)
        {
          sub_23584B488(&v192, v184[0], (unint64_t)v184[1]);
        }
        else
        {
          v192 = *(_OWORD *)v184;
          v193 = v185;
        }
        v56 = operator new();
        v57 = v186;
        *(_QWORD *)(v56 + 8) = operator new(0x60uLL);
        *(_QWORD *)(v56 + 24) = 0;
        sub_23586BE1C(v56, v57);
        v194 = v56;
        data = a2[1].__r_.__value_.__l.__data_;
        v59 = *((_QWORD *)data + 1);
        v195[0] = 0;
        v60 = sub_23586AE2C((uint64_t)(data + 16), (const void **)v190, v195);
        if (v60 == (_QWORD *)v195[0])
        {
          v61 = (_QWORD *)*((_QWORD *)data + 1);
          v62 = v61[10];
          v61 += 10;
          v60[10] = v62;
          v60[11] = v61;
          v63 = v60 + 10;
          *v61 = v60 + 10;
          *(_QWORD *)(v60[10] + 8) = v60 + 10;
          ++*((_QWORD *)data + 3);
          if (*((_QWORD *)data + 1) != v59)
          {
            *(_QWORD *)(v60[10] + 8) = v60[11];
            *(_QWORD *)v60[11] = v60[10];
            v65 = *(_QWORD *)(v59 + 80);
            v64 = (_QWORD *)(v59 + 80);
            v60[10] = v65;
            v60[11] = v64;
            *v64 = v63;
            *(_QWORD *)(v60[10] + 8) = v63;
          }
        }
        v66 = v194;
        v67 = *(_QWORD **)(v194 + 8);
        v68 = v67[11];
        if (v68)
          v69 = (_QWORD *)(v68 - 80);
        else
          v69 = 0;
        if (v69 != v67)
        {
          do
          {
            v70 = v69[11];
            if (v70)
              v67 = (_QWORD *)(v70 - 80);
            else
              v67 = 0;
            sub_2358688CC((uint64_t)v69);
            operator delete(v69);
            v69 = v67;
          }
          while (v67 != *(_QWORD **)(v66 + 8));
        }
        operator delete(v67);
        MEMORY[0x23B7D94C4](v66, 0x1020C402FC1992ELL);
        if (SHIBYTE(v193) < 0)
        {
          operator delete((void *)v192);
          if ((SHIBYTE(v191) & 0x80000000) == 0)
            goto LABEL_93;
        }
        else if ((SHIBYTE(v191) & 0x80000000) == 0)
        {
          goto LABEL_93;
        }
        operator delete(v190[0]);
LABEL_93:
        v71 = v186;
        v72 = *(_QWORD **)(v186 + 8);
        v73 = v72[11];
        if (v73)
          v74 = (_QWORD *)(v73 - 80);
        else
          v74 = 0;
        if (v74 != v72)
        {
          do
          {
            v75 = v74[11];
            if (v75)
              v72 = (_QWORD *)(v75 - 80);
            else
              v72 = 0;
            sub_2358688CC((uint64_t)v74);
            operator delete(v74);
            v74 = v72;
          }
          while (v72 != *(_QWORD **)(v71 + 8));
        }
        operator delete(v72);
        MEMORY[0x23B7D94C4](v71, 0x1020C402FC1992ELL);
        if (SHIBYTE(v185) < 0)
        {
          operator delete(v184[0]);
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
            goto LABEL_103;
        }
        else if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        {
          goto LABEL_103;
        }
        operator delete(__p[0]);
LABEL_103:
        v76 = v189;
        v77 = *(_QWORD **)(v189 + 8);
        v78 = v77[11];
        if (v78)
          v79 = (_QWORD *)(v78 - 80);
        else
          v79 = 0;
        if (v79 != v77)
        {
          do
          {
            v80 = v79[11];
            if (v80)
              v77 = (_QWORD *)(v80 - 80);
            else
              v77 = 0;
            sub_2358688CC((uint64_t)v79);
            operator delete(v79);
            v79 = v77;
          }
          while (v77 != *(_QWORD **)(v76 + 8));
        }
        operator delete(v77);
        MEMORY[0x23B7D94C4](v76, 0x1020C402FC1992ELL);
        if (SHIBYTE(v188) < 0)
        {
          operator delete(v187[0]);
          if ((v49 & 0x80000000) == 0)
            return;
LABEL_278:
          v85 = (void *)__dst;
          goto LABEL_279;
        }
LABEL_277:
        if ((v49 & 0x80000000) == 0)
          return;
        goto LABEL_278;
      }
    }
    memmove(p_dst, v45, v47);
    *((_BYTE *)p_dst + v47) = 0;
    v49 = SHIBYTE(v182);
    if ((SHIBYTE(v182) & 0x80000000) == 0)
      goto LABEL_62;
    goto LABEL_67;
  }
  if (v6 == 4)
  {
    if ((a3 & 2) != 0)
      return;
    v40 = atomic_load((unsigned __int8 *)&qword_256306800);
    if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_256306800))
    {
      sub_235875EEC((std::string *)&xmmword_256306838, "<xmlcomment>");
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_256306838, &dword_235841000);
      __cxa_guard_release(&qword_256306800);
    }
    v41 = *(const void **)(a1 + 8);
    if (!v41)
    {
      HIBYTE(v182) = 0;
      goto LABEL_224;
    }
    v42 = *(_QWORD *)(a1 + 24);
    if (v42 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v42 >= 0x17)
      {
        v148 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v42 | 7) != 0x17)
          v148 = v42 | 7;
        v149 = v148 + 1;
        v43 = (__int128 *)operator new(v148 + 1);
        *((_QWORD *)&__dst + 1) = v42;
        v182 = v149 | 0x8000000000000000;
        *(_QWORD *)&__dst = v43;
      }
      else
      {
        HIBYTE(v182) = *(_QWORD *)(a1 + 24);
        v43 = &__dst;
        if (!v42)
        {
LABEL_224:
          LOBYTE(__dst) = 0;
          v49 = SHIBYTE(v182);
          if ((SHIBYTE(v182) & 0x80000000) == 0)
          {
LABEL_225:
            *(_OWORD *)v187 = __dst;
            v188 = (void *)v182;
LABEL_231:
            v150 = operator new();
            v151 = operator new(0x60uLL);
            *(_QWORD *)(v150 + 8) = v151;
            v151[7] = 0;
            v151[8] = v151 + 7;
            v151[9] = v151 + 7;
            v151[10] = v151 + 10;
            v151[11] = v151 + 10;
            *(_QWORD *)(v150 + 24) = 0;
            v189 = v150;
            if (byte_25630684F < 0)
            {
              sub_23584B488(__p, (void *)xmmword_256306838, *((unint64_t *)&xmmword_256306838 + 1));
            }
            else
            {
              *(_OWORD *)__p = xmmword_256306838;
              __p[2] = (void *)unk_256306848;
            }
            if (SHIBYTE(v188) < 0)
            {
              sub_23584B488(v184, v187[0], (unint64_t)v187[1]);
            }
            else
            {
              *(_OWORD *)v184 = *(_OWORD *)v187;
              v185 = v188;
            }
            v152 = operator new();
            v153 = v189;
            *(_QWORD *)(v152 + 8) = operator new(0x60uLL);
            *(_QWORD *)(v152 + 24) = 0;
            sub_23586BE1C(v152, v153);
            *(_OWORD *)v190 = *(_OWORD *)__p;
            v191 = __p[2];
            memset(__p, 0, sizeof(__p));
            v186 = v152;
            if (SHIBYTE(v185) < 0)
            {
              sub_23584B488(&v192, v184[0], (unint64_t)v184[1]);
            }
            else
            {
              v192 = *(_OWORD *)v184;
              v193 = v185;
            }
            v154 = operator new();
            v155 = v186;
            *(_QWORD *)(v154 + 8) = operator new(0x60uLL);
            *(_QWORD *)(v154 + 24) = 0;
            sub_23586BE1C(v154, v155);
            v194 = v154;
            v156 = a2[1].__r_.__value_.__l.__data_;
            v157 = *((_QWORD *)v156 + 1);
            v195[0] = 0;
            v158 = sub_23586AE2C((uint64_t)(v156 + 16), (const void **)v190, v195);
            if (v158 == (_QWORD *)v195[0])
            {
              v159 = (_QWORD *)*((_QWORD *)v156 + 1);
              v160 = v159[10];
              v159 += 10;
              v158[10] = v160;
              v158[11] = v159;
              v161 = v158 + 10;
              *v159 = v158 + 10;
              *(_QWORD *)(v158[10] + 8) = v158 + 10;
              ++*((_QWORD *)v156 + 3);
              if (*((_QWORD *)v156 + 1) != v157)
              {
                *(_QWORD *)(v158[10] + 8) = v158[11];
                *(_QWORD *)v158[11] = v158[10];
                v163 = *(_QWORD *)(v157 + 80);
                v162 = (_QWORD *)(v157 + 80);
                v158[10] = v163;
                v158[11] = v162;
                *v162 = v161;
                *(_QWORD *)(v158[10] + 8) = v161;
              }
            }
            v164 = v194;
            v165 = *(_QWORD **)(v194 + 8);
            v166 = v165[11];
            if (v166)
              v167 = (_QWORD *)(v166 - 80);
            else
              v167 = 0;
            if (v167 != v165)
            {
              do
              {
                v168 = v167[11];
                if (v168)
                  v165 = (_QWORD *)(v168 - 80);
                else
                  v165 = 0;
                sub_2358688CC((uint64_t)v167);
                operator delete(v167);
                v167 = v165;
              }
              while (v165 != *(_QWORD **)(v164 + 8));
            }
            operator delete(v165);
            MEMORY[0x23B7D94C4](v164, 0x1020C402FC1992ELL);
            if (SHIBYTE(v193) < 0)
              operator delete((void *)v192);
            if (SHIBYTE(v191) < 0)
              operator delete(v190[0]);
            v169 = v186;
            v170 = *(_QWORD **)(v186 + 8);
            v171 = v170[11];
            if (v171)
              v172 = (_QWORD *)(v171 - 80);
            else
              v172 = 0;
            if (v172 != v170)
            {
              do
              {
                v173 = v172[11];
                if (v173)
                  v170 = (_QWORD *)(v173 - 80);
                else
                  v170 = 0;
                sub_2358688CC((uint64_t)v172);
                operator delete(v172);
                v172 = v170;
              }
              while (v170 != *(_QWORD **)(v169 + 8));
            }
            operator delete(v170);
            MEMORY[0x23B7D94C4](v169, 0x1020C402FC1992ELL);
            if (SHIBYTE(v185) < 0)
              operator delete(v184[0]);
            if (SHIBYTE(__p[2]) < 0)
              operator delete(__p[0]);
            v174 = v189;
            v175 = *(_QWORD **)(v189 + 8);
            v176 = v175[11];
            if (v176)
              v177 = (_QWORD *)(v176 - 80);
            else
              v177 = 0;
            if (v177 != v175)
            {
              do
              {
                v178 = v177[11];
                if (v178)
                  v175 = (_QWORD *)(v178 - 80);
                else
                  v175 = 0;
                sub_2358688CC((uint64_t)v177);
                operator delete(v177);
                v177 = v175;
              }
              while (v175 != *(_QWORD **)(v174 + 8));
            }
            operator delete(v175);
            MEMORY[0x23B7D94C4](v174, 0x1020C402FC1992ELL);
            if (SHIBYTE(v188) < 0)
              operator delete(v187[0]);
            goto LABEL_277;
          }
LABEL_230:
          sub_23584B488(v187, (void *)__dst, *((unint64_t *)&__dst + 1));
          goto LABEL_231;
        }
      }
      memmove(v43, v41, v42);
      *((_BYTE *)v43 + v42) = 0;
      v49 = SHIBYTE(v182);
      if ((SHIBYTE(v182) & 0x80000000) == 0)
        goto LABEL_225;
      goto LABEL_230;
    }
LABEL_282:
    sub_23584B34C();
  }
  if (v6 != 1)
    return;
  v7 = *(char **)a1;
  v187[0] = 0;
  v187[1] = 0;
  v188 = 0;
  v8 = operator new();
  v9 = operator new(0x60uLL);
  *(_QWORD *)(v8 + 8) = v9;
  v9[7] = 0;
  v10 = v9 + 7;
  v11 = &byte_2563067E8;
  if (v7)
    v11 = v7;
  v9[8] = v10;
  v9[9] = v10;
  v9[10] = v9 + 10;
  v9[11] = v9 + 10;
  *(_QWORD *)(v8 + 24) = 0;
  v189 = v8;
  __p[0] = v11;
  __p[1] = 0;
  __p[2] = 0;
  v184[0] = 0;
  v12 = (_QWORD *)operator new();
  v12[1] = operator new(0x60uLL);
  v12[3] = 0;
  sub_23586BE1C((uint64_t)v12, v8);
  v184[1] = v12;
  sub_235875E10(v190, (uint64_t)__p);
  v13 = a2[1].__r_.__value_.__l.__data_;
  v14 = *((_QWORD *)v13 + 1);
  *(_QWORD *)&__dst = 0;
  v15 = sub_23586AE2C((uint64_t)(v13 + 16), (const void **)v190, &__dst);
  v180 = a1;
  if (v15 == (_QWORD *)__dst)
  {
    v16 = (_QWORD *)*((_QWORD *)v13 + 1);
    v17 = v16[10];
    v16 += 10;
    v15[10] = v17;
    v15[11] = v16;
    v18 = v15 + 10;
    *v16 = v15 + 10;
    *(_QWORD *)(v15[10] + 8) = v15 + 10;
    ++*((_QWORD *)v13 + 3);
    if (*((_QWORD *)v13 + 1) != v14)
    {
      *(_QWORD *)(v15[10] + 8) = v15[11];
      *(_QWORD *)v15[11] = v15[10];
      v20 = *(_QWORD *)(v14 + 80);
      v19 = (_QWORD *)(v14 + 80);
      v15[10] = v20;
      v15[11] = v19;
      *v19 = v18;
      *(_QWORD *)(v15[10] + 8) = v18;
    }
  }
  v179 = v15;
  v21 = v194;
  v22 = *(_QWORD **)(v194 + 8);
  v23 = v22[11];
  if (v23)
    v24 = (_QWORD *)(v23 - 80);
  else
    v24 = 0;
  if (v24 != v22)
  {
    do
    {
      v25 = v24[11];
      if (v25)
        v22 = (_QWORD *)(v25 - 80);
      else
        v22 = 0;
      sub_2358688CC((uint64_t)v24);
      operator delete(v24);
      v24 = v22;
    }
    while (v22 != *(_QWORD **)(v21 + 8));
  }
  operator delete(v22);
  MEMORY[0x23B7D94C4](v21, 0x1020C402FC1992ELL);
  if (SHIBYTE(v193) < 0)
  {
    operator delete((void *)v192);
    if ((SHIBYTE(v191) & 0x80000000) == 0)
      goto LABEL_19;
LABEL_78:
    operator delete(v190[0]);
    goto LABEL_19;
  }
  if (SHIBYTE(v191) < 0)
    goto LABEL_78;
LABEL_19:
  v26 = (_QWORD *)v12[1];
  v27 = v26[11];
  if (v27)
    v28 = (_QWORD *)(v27 - 80);
  else
    v28 = 0;
  if (v28 != v26)
  {
    do
    {
      v29 = v28[11];
      if (v29)
        v26 = (_QWORD *)(v29 - 80);
      else
        v26 = 0;
      sub_2358688CC((uint64_t)v28);
      operator delete(v28);
      v28 = v26;
    }
    while (v26 != (_QWORD *)v12[1]);
  }
  operator delete(v26);
  MEMORY[0x23B7D94C4](v12, 0x1020C402FC1992ELL);
  if (SHIBYTE(v184[0]) < 0)
    operator delete(__p[1]);
  v30 = *(_QWORD **)(v8 + 8);
  v31 = v30[11];
  if (v31)
    v32 = (_QWORD *)(v31 - 80);
  else
    v32 = 0;
  if (v32 != v30)
  {
    do
    {
      v33 = v32[11];
      if (v33)
        v30 = (_QWORD *)(v33 - 80);
      else
        v30 = 0;
      sub_2358688CC((uint64_t)v32);
      operator delete(v32);
      v32 = v30;
    }
    while (v30 != *(_QWORD **)(v8 + 8));
  }
  operator delete(v30);
  MEMORY[0x23B7D94C4](v8, 0x1020C402FC1992ELL);
  if (*(_QWORD *)(v180 + 64))
  {
    v34 = atomic_load((unsigned __int8 *)&qword_2563067F0);
    if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_2563067F0))
    {
      sub_235875EEC((std::string *)&xmmword_256306808, "<xmlattr>");
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_256306808, &dword_235841000);
      __cxa_guard_release(&qword_2563067F0);
    }
    v187[0] = 0;
    v187[1] = 0;
    v188 = 0;
    v35 = operator new();
    v36 = operator new(0x60uLL);
    *(_QWORD *)(v35 + 8) = v36;
    v36[7] = 0;
    v36[8] = v36 + 7;
    v36[9] = v36 + 7;
    v36[10] = v36 + 10;
    v36[11] = v36 + 10;
    *(_QWORD *)(v35 + 24) = 0;
    v189 = v35;
    if (byte_25630681F < 0)
    {
      sub_23584B488(__p, (void *)xmmword_256306808, *((unint64_t *)&xmmword_256306808 + 1));
    }
    else
    {
      *(_OWORD *)__p = xmmword_256306808;
      __p[2] = (void *)unk_256306818;
    }
    *(_OWORD *)v184 = *(_OWORD *)v187;
    v185 = v188;
    v86 = operator new();
    *(_QWORD *)(v86 + 8) = operator new(0x60uLL);
    *(_QWORD *)(v86 + 24) = 0;
    sub_23586BE1C(v86, v35);
    *(_OWORD *)v190 = *(_OWORD *)__p;
    v191 = __p[2];
    memset(__p, 0, sizeof(__p));
    v186 = v86;
    if (SHIBYTE(v185) < 0)
    {
      sub_23584B488(&v192, v184[0], (unint64_t)v184[1]);
    }
    else
    {
      v192 = *(_OWORD *)v184;
      v193 = v185;
    }
    v87 = operator new();
    v88 = v186;
    *(_QWORD *)(v87 + 8) = operator new(0x60uLL);
    *(_QWORD *)(v87 + 24) = 0;
    sub_23586BE1C(v87, v88);
    v194 = v87;
    v89 = v179[6];
    v90 = *(_QWORD *)(v89 + 8);
    *(_QWORD *)&__dst = 0;
    v91 = sub_23586AE2C(v89 + 16, (const void **)v190, &__dst);
    v92 = v91;
    if (v91 == (_QWORD *)__dst)
    {
      v93 = *(_QWORD **)(v89 + 8);
      v94 = v93[10];
      v93 += 10;
      v91[10] = v94;
      v91[11] = v93;
      v95 = v91 + 10;
      *v93 = v91 + 10;
      *(_QWORD *)(v91[10] + 8) = v91 + 10;
      ++*(_QWORD *)(v89 + 24);
      if (*(_QWORD *)(v89 + 8) != v90)
      {
        *(_QWORD *)(v91[10] + 8) = v91[11];
        *(_QWORD *)v91[11] = v91[10];
        v97 = *(_QWORD *)(v90 + 80);
        v96 = (_QWORD *)(v90 + 80);
        v91[10] = v97;
        v91[11] = v96;
        *v96 = v95;
        *(_QWORD *)(v91[10] + 8) = v95;
      }
    }
    v98 = v194;
    v99 = *(_QWORD **)(v194 + 8);
    v100 = v99[11];
    if (v100)
      v101 = (_QWORD *)(v100 - 80);
    else
      v101 = 0;
    if (v101 != v99)
    {
      do
      {
        v102 = v101[11];
        if (v102)
          v99 = (_QWORD *)(v102 - 80);
        else
          v99 = 0;
        sub_2358688CC((uint64_t)v101);
        operator delete(v101);
        v101 = v99;
      }
      while (v99 != *(_QWORD **)(v98 + 8));
    }
    operator delete(v99);
    MEMORY[0x23B7D94C4](v98, 0x1020C402FC1992ELL);
    if (SHIBYTE(v193) < 0)
      operator delete((void *)v192);
    if (SHIBYTE(v191) < 0)
      operator delete(v190[0]);
    v103 = v186;
    v104 = *(_QWORD **)(v186 + 8);
    v105 = v104[11];
    if (v105)
      v106 = (_QWORD *)(v105 - 80);
    else
      v106 = 0;
    if (v106 != v104)
    {
      do
      {
        v107 = v106[11];
        if (v107)
          v104 = (_QWORD *)(v107 - 80);
        else
          v104 = 0;
        sub_2358688CC((uint64_t)v106);
        operator delete(v106);
        v106 = v104;
      }
      while (v104 != *(_QWORD **)(v103 + 8));
    }
    operator delete(v104);
    MEMORY[0x23B7D94C4](v103, 0x1020C402FC1992ELL);
    if (SHIBYTE(v185) < 0)
      operator delete(v184[0]);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    v108 = *(_QWORD **)(v35 + 8);
    v109 = v108[11];
    if (v109)
      v110 = (_QWORD *)(v109 - 80);
    else
      v110 = 0;
    if (v110 != v108)
    {
      do
      {
        v111 = v110[11];
        if (v111)
          v108 = (_QWORD *)(v111 - 80);
        else
          v108 = 0;
        sub_2358688CC((uint64_t)v110);
        operator delete(v110);
        v110 = v108;
      }
      while (v108 != *(_QWORD **)(v35 + 8));
    }
    operator delete(v108);
    MEMORY[0x23B7D94C4](v35, 0x1020C402FC1992ELL);
    for (i = *(char ***)(v180 + 64); i; i = (char **)i[6])
    {
      v113 = *i;
      v187[0] = 0;
      v187[1] = 0;
      v188 = 0;
      v114 = operator new();
      v115 = operator new(0x60uLL);
      *(_QWORD *)(v114 + 8) = v115;
      v115[7] = 0;
      v116 = v115 + 7;
      v117 = &byte_2563067E8;
      if (v113)
        v117 = v113;
      v115[8] = v116;
      v115[9] = v116;
      v115[10] = v115 + 10;
      v115[11] = v115 + 10;
      *(_QWORD *)(v114 + 24) = 0;
      v189 = v114;
      __p[0] = v117;
      *(_OWORD *)&__p[1] = *(_OWORD *)v187;
      v184[0] = v188;
      v118 = (_QWORD *)operator new();
      v118[1] = operator new(0x60uLL);
      v118[3] = 0;
      sub_23586BE1C((uint64_t)v118, v114);
      v184[1] = v118;
      sub_235875E10(v190, (uint64_t)__p);
      v119 = v92[6];
      v120 = *(_QWORD *)(v119 + 8);
      *(_QWORD *)&__dst = 0;
      v121 = sub_23586AE2C(v119 + 16, (const void **)v190, &__dst);
      v122 = v121;
      if (v121 == (_QWORD *)__dst)
      {
        v123 = *(_QWORD **)(v119 + 8);
        v124 = v123[10];
        v123 += 10;
        v121[10] = v124;
        v121[11] = v123;
        v125 = v121 + 10;
        *v123 = v121 + 10;
        *(_QWORD *)(v121[10] + 8) = v121 + 10;
        ++*(_QWORD *)(v119 + 24);
        if (*(_QWORD *)(v119 + 8) != v120)
        {
          *(_QWORD *)(v121[10] + 8) = v121[11];
          *(_QWORD *)v121[11] = v121[10];
          v127 = *(_QWORD *)(v120 + 80);
          v126 = (_QWORD *)(v120 + 80);
          v121[10] = v127;
          v121[11] = v126;
          *v126 = v125;
          *(_QWORD *)(v121[10] + 8) = v125;
        }
      }
      v128 = v194;
      v129 = *(_QWORD **)(v194 + 8);
      v130 = v129[11];
      if (v130)
        v131 = (_QWORD *)(v130 - 80);
      else
        v131 = 0;
      if (v131 != v129)
      {
        do
        {
          v132 = v131[11];
          if (v132)
            v129 = (_QWORD *)(v132 - 80);
          else
            v129 = 0;
          sub_2358688CC((uint64_t)v131);
          operator delete(v131);
          v131 = v129;
        }
        while (v129 != *(_QWORD **)(v128 + 8));
      }
      operator delete(v129);
      MEMORY[0x23B7D94C4](v128, 0x1020C402FC1992ELL);
      if (SHIBYTE(v193) < 0)
      {
        operator delete((void *)v192);
        if ((SHIBYTE(v191) & 0x80000000) == 0)
          goto LABEL_185;
      }
      else if ((SHIBYTE(v191) & 0x80000000) == 0)
      {
        goto LABEL_185;
      }
      operator delete(v190[0]);
LABEL_185:
      v133 = (_QWORD *)v118[1];
      v134 = v133[11];
      if (v134)
        v135 = (_QWORD *)(v134 - 80);
      else
        v135 = 0;
      if (v135 != v133)
      {
        do
        {
          v136 = v135[11];
          if (v136)
            v133 = (_QWORD *)(v136 - 80);
          else
            v133 = 0;
          sub_2358688CC((uint64_t)v135);
          operator delete(v135);
          v135 = v133;
        }
        while (v133 != (_QWORD *)v118[1]);
      }
      operator delete(v133);
      MEMORY[0x23B7D94C4](v118, 0x1020C402FC1992ELL);
      if (SHIBYTE(v184[0]) < 0)
        operator delete(__p[1]);
      v137 = *(_QWORD **)(v114 + 8);
      v138 = v137[11];
      if (v138)
        v139 = (_QWORD *)(v138 - 80);
      else
        v139 = 0;
      if (v139 != v137)
      {
        do
        {
          v140 = v139[11];
          if (v140)
            v137 = (_QWORD *)(v140 - 80);
          else
            v137 = 0;
          sub_2358688CC((uint64_t)v139);
          operator delete(v139);
          v139 = v137;
        }
        while (v137 != *(_QWORD **)(v114 + 8));
      }
      operator delete(v137);
      MEMORY[0x23B7D94C4](v114, 0x1020C402FC1992ELL);
      v141 = i[1];
      if (v141)
      {
        v142 = (size_t)i[3];
        if (v142 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_281;
        if (v142 >= 0x17)
        {
          v145 = (v142 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v142 | 7) != 0x17)
            v145 = v142 | 7;
          v146 = v145 + 1;
          v143 = operator new(v145 + 1);
          v190[1] = (void *)v142;
          v191 = (void *)(v146 | 0x8000000000000000);
          v190[0] = v143;
        }
        else
        {
          HIBYTE(v191) = i[3];
          v143 = v190;
          if (!v142)
          {
            v144 = (void **)(v122 + 3);
            LOBYTE(v190[0]) = 0;
            if (*((char *)v122 + 47) < 0)
              goto LABEL_218;
            goto LABEL_208;
          }
        }
        memmove(v143, v141, v142);
        v144 = (void **)(v122 + 3);
        *((_BYTE *)v143 + v142) = 0;
        if (*((char *)v122 + 47) < 0)
        {
LABEL_218:
          operator delete(*v144);
          *(_OWORD *)v144 = *(_OWORD *)v190;
          v144[2] = v191;
          if (!i[4])
            break;
          continue;
        }
      }
      else
      {
        HIBYTE(v191) = 0;
        v144 = (void **)(v122 + 3);
        LOBYTE(v190[0]) = 0;
        if (*((char *)v122 + 47) < 0)
          goto LABEL_218;
      }
LABEL_208:
      *(_OWORD *)v144 = *(_OWORD *)v190;
      v144[2] = v191;
      if (!i[4])
        break;
    }
  }
  for (j = *(_QWORD *)(v180 + 48); j; j = *(_QWORD *)(j + 88))
    sub_23586E950(j, v179 + 3, a3);
}

void sub_23586FEA8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256306800);
  _Unwind_Resume(a1);
}

void sub_23586FEC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2563067F0);
  _Unwind_Resume(a1);
}

void sub_23586FED8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2563067F8);
  _Unwind_Resume(a1);
}

void sub_23586FEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  int v47;

  if (a41 < 0)
    operator delete(__p);
  sub_235868994((uint64_t)&a15);
  sub_23585D370((uint64_t)&a29);
  if (v47 < 0)
  {
    operator delete(a12);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_235870300(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void (**v4)(void);
  _QWORD *v5;

  v2 = a1 + 15;
  v3 = (_QWORD *)a1[12];
  if (v3 != v2)
  {
    v4 = (void (**)(void))(a1 + 8208);
    do
    {
      v5 = *(_QWORD **)((char *)v3 + (-(int)v3 & 7));
      if (*v4)
        (*v4)();
      else
        MEMORY[0x23B7D94AC]();
      a1[12] = v5;
      v3 = v5;
    }
    while (v5 != v2);
  }
  a1[12] = v2;
  a1[13] = (char *)v2 + (-(int)v2 & 7);
  a1[14] = a1 + 8207;
  return a1;
}

uint64_t sub_2358703A4(uint64_t a1, uint64_t a2, int8x16_t *a3)
{
  __int128 v6;
  _BYTE *v7;
  __int128 v8;
  uint64_t v9;

  *(_QWORD *)a1 = &unk_2506DFEA0;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)a2);
  *(_QWORD *)(a1 + 8) = off_2506E01D8;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_23584B488((_BYTE *)(a1 + 24), *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 24) = v6;
  }
  v7 = (_BYTE *)(a1 + 48);
  if (*(char *)(a2 + 63) < 0)
  {
    sub_23584B488(v7, *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)v7 = v8;
  }
  *(_QWORD *)a1 = &off_2506E0138;
  *(_QWORD *)(a1 + 8) = &unk_2506E0168;
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 72) = v9;
  *(_QWORD *)(a1 + 80) = &unk_2506E0190;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 112) = a3[1].i32[0];
  *(int8x16_t *)(a1 + 96) = vextq_s8(*a3, *a3, 8uLL);
  return a1;
}

void sub_235870494(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::runtime_error *v2;
  void **v3;

  if (*(char *)(v1 + 47) < 0)
  {
    operator delete(*v3);
    std::runtime_error::~runtime_error(v2);
    _Unwind_Resume(a1);
  }
  std::runtime_error::~runtime_error(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_2358704CC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 80) = &unk_2506DFF20;
  v2 = *(_QWORD *)(a1 + 88);
  if (v2)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
      *(_QWORD *)(a1 + 88) = 0;
  }
  *(_QWORD *)(a1 + 8) = off_2506E01D8;
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
LABEL_6:
    std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
    return a1;
  }
  operator delete(*(void **)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

void sub_235870570(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)off_2506E01D8;
  if (SHIBYTE(this[3].__imp_.__imp_) < 0)
  {
    operator delete((void *)this[2].__imp_.__imp_);
    if ((SHIBYTE(this[2].__vftable) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(this[1].__vftable);
    std::runtime_error::~runtime_error(this);
    return;
  }
  if (SHIBYTE(this[2].__vftable) < 0)
    goto LABEL_6;
LABEL_3:
  std::runtime_error::~runtime_error(this);
}

uint64_t sub_2358705D4(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  sub_235870AFC(v2, a1);
  sub_235869BD0(v2 + 80, a1 + 80);
  return v2;
}

void sub_235870624(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_235870640(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B7D94C4](v1, 0x10F3C40678E5ABFLL);
  _Unwind_Resume(a1);
}

void sub_235870664(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x78uLL);
  sub_235870AF8(exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_2506E00E0, (void (*)(void *))sub_2358704CC);
}

void sub_2358706A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2358706B4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 80) = &unk_2506DFF20;
  v2 = *(_QWORD *)(a1 + 88);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 8) = off_2506E01D8;
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
LABEL_6:
    std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
    JUMPOUT(0x23B7D94C4);
  }
  operator delete(*(void **)(a1 + 24));
  goto LABEL_6;
}

void sub_235870754(std::runtime_error *this)
{
  std::runtime_error_vtbl *v2;

  this[4].__imp_.__imp_ = (const char *)&unk_2506DFF20;
  v2 = this[5].__vftable;
  if (v2)
  {
    if ((*((unsigned int (**)(std::runtime_error_vtbl *))v2->~runtime_error + 4))(v2))
      this[5].__vftable = 0;
  }
  this->__vftable = (std::runtime_error_vtbl *)off_2506E01D8;
  if (SHIBYTE(this[3].__imp_.__imp_) < 0)
  {
    operator delete((void *)this[2].__imp_.__imp_);
    if ((SHIBYTE(this[2].__vftable) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_9:
    operator delete(this[1].__vftable);
    std::runtime_error::~runtime_error(this);
    return;
  }
  if (SHIBYTE(this[2].__vftable) < 0)
    goto LABEL_9;
LABEL_6:
  std::runtime_error::~runtime_error(this);
}

void sub_2358707E4(std::runtime_error *this)
{
  std::runtime_error_vtbl *v2;

  this[4].__imp_.__imp_ = (const char *)&unk_2506DFF20;
  v2 = this[5].__vftable;
  if (v2 && (*((unsigned int (**)(std::runtime_error_vtbl *))v2->~runtime_error + 4))(v2))
    this[5].__vftable = 0;
  this->__vftable = (std::runtime_error_vtbl *)off_2506E01D8;
  if (SHIBYTE(this[3].__imp_.__imp_) < 0)
  {
    operator delete((void *)this[2].__imp_.__imp_);
    if ((SHIBYTE(this[2].__vftable) & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((SHIBYTE(this[2].__vftable) & 0x80000000) == 0)
  {
LABEL_6:
    std::runtime_error::~runtime_error(this);
    JUMPOUT(0x23B7D94C4);
  }
  operator delete(this[1].__vftable);
  goto LABEL_6;
}

void sub_235870884(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_2506DFF20;
  v2 = a1[1];
  if (v2)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
      a1[1] = 0;
  }
  *(a1 - 9) = off_2506E01D8;
  if (*((char *)a1 - 9) < 0)
  {
    operator delete((void *)*(a1 - 4));
    if ((*((char *)a1 - 33) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_9:
    operator delete((void *)*(a1 - 7));
    std::runtime_error::~runtime_error((std::runtime_error *)(a1 - 9));
    return;
  }
  if (*((char *)a1 - 33) < 0)
    goto LABEL_9;
LABEL_6:
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 - 9));
}

void sub_235870918(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_2506DFF20;
  v2 = a1[1];
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    a1[1] = 0;
  *(a1 - 9) = off_2506E01D8;
  if (*((char *)a1 - 9) < 0)
  {
    operator delete((void *)*(a1 - 4));
    if ((*((char *)a1 - 33) & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((*((char *)a1 - 33) & 0x80000000) == 0)
  {
LABEL_6:
    std::runtime_error::~runtime_error((std::runtime_error *)(a1 - 9));
    JUMPOUT(0x23B7D94C4);
  }
  operator delete((void *)*(a1 - 7));
  goto LABEL_6;
}

void sub_2358709BC(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)off_2506E01D8;
  if (SHIBYTE(this[3].__imp_.__imp_) < 0)
  {
    operator delete((void *)this[2].__imp_.__imp_);
    if ((SHIBYTE(this[2].__vftable) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((SHIBYTE(this[2].__vftable) & 0x80000000) == 0)
  {
LABEL_3:
    std::runtime_error::~runtime_error(this);
    JUMPOUT(0x23B7D94C4);
  }
  operator delete(this[1].__vftable);
  goto LABEL_3;
}

void sub_235870A28(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)off_2506E01D8;
  if (SHIBYTE(this[3].__imp_.__imp_) < 0)
  {
    operator delete((void *)this[2].__imp_.__imp_);
    if ((SHIBYTE(this[2].__vftable) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(this[1].__vftable);
    std::runtime_error::~runtime_error(this);
    return;
  }
  if (SHIBYTE(this[2].__vftable) < 0)
    goto LABEL_6;
LABEL_3:
  std::runtime_error::~runtime_error(this);
}

void sub_235870A8C(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)off_2506E01D8;
  if (SHIBYTE(this[3].__imp_.__imp_) < 0)
  {
    operator delete((void *)this[2].__imp_.__imp_);
    if ((SHIBYTE(this[2].__vftable) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((SHIBYTE(this[2].__vftable) & 0x80000000) == 0)
  {
LABEL_3:
    std::runtime_error::~runtime_error(this);
    JUMPOUT(0x23B7D94C4);
  }
  operator delete(this[1].__vftable);
  goto LABEL_3;
}

uint64_t sub_235870AFC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  *(_QWORD *)a1 = &unk_2506DFEA0;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = off_2506E01D8;
  if (*(char *)(a2 + 47) < 0)
  {
    sub_23584B488((_BYTE *)(a1 + 24), *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v4;
  }
  v5 = (_BYTE *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0)
  {
    sub_23584B488(v5, *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)v5 = v6;
  }
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 8) = off_2506E01B0;
  *(_QWORD *)(a1 + 72) = v7;
  *(_QWORD *)(a1 + 80) = &unk_2506DFF20;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v8;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  v9 = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v9;
  *(_QWORD *)a1 = &off_2506E0138;
  *(_QWORD *)(a1 + 8) = &unk_2506E0168;
  *(_QWORD *)(a1 + 80) = &unk_2506E0190;
  return a1;
}

void sub_235870C08(_Unwind_Exception *a1)
{
  std::runtime_error *v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 47) < 0)
  {
    operator delete(*v3);
    std::runtime_error::~runtime_error(v1);
    _Unwind_Resume(a1);
  }
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_235870C40(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  sub_235870570(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_235870C54(std::runtime_error *a1, void **a2, __int128 *a3, std::runtime_error_vtbl *a4)
{
  const char *v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  void *v13;
  uint64_t v14;
  std::string::size_type v15;
  std::string *p_dst;
  unint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::runtime_error *v22;
  std::runtime_error v23;
  std::__libcpp_refstring *p_imp;
  __int128 v25;
  std::string __dst;
  _QWORD v28[2];
  _QWORD v29[3];
  const void *v30;
  uint64_t v31;
  const void *v32;
  unint64_t v33;
  void *__p;
  char v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  char v39;

  sub_23584CC60((uint64_t)v28);
  if (*((char *)a3 + 23) < 0)
  {
    if (*((_QWORD *)a3 + 1))
      v8 = *(const char **)a3;
    else
      v8 = "<unspecified file>";
  }
  else if (*((_BYTE *)a3 + 23))
  {
    v8 = (const char *)a3;
  }
  else
  {
    v8 = "<unspecified file>";
  }
  v9 = strlen(v8);
  sub_23584D1D8(v29, (uint64_t)v8, v9);
  if (a4)
  {
    v39 = 40;
    sub_23584D1D8(v29, (uint64_t)&v39, 1);
    v10 = (_QWORD *)std::ostream::operator<<();
    v39 = 41;
    sub_23584D1D8(v10, (uint64_t)&v39, 1);
  }
  v11 = sub_23584D1D8(v29, (uint64_t)": ", 2);
  v12 = *((char *)a2 + 23);
  if (v12 >= 0)
    v13 = a2;
  else
    v13 = *a2;
  if (v12 >= 0)
    v14 = *((unsigned __int8 *)a2 + 23);
  else
    v14 = (uint64_t)a2[1];
  sub_23584D1D8(v11, (uint64_t)v13, v14);
  if ((v37 & 0x10) != 0)
  {
    v17 = v36;
    if (v36 < v33)
    {
      v36 = v33;
      v17 = v33;
    }
    v18 = v32;
    v15 = v17 - (_QWORD)v32;
    if (v17 - (unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_41;
  }
  else
  {
    if ((v37 & 8) == 0)
    {
      v15 = 0;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
      goto LABEL_29;
    }
    v18 = v30;
    v15 = v31 - (_QWORD)v30;
    if ((unint64_t)(v31 - (_QWORD)v30) >= 0x7FFFFFFFFFFFFFF8)
LABEL_41:
      sub_23584B34C();
  }
  if (v15 >= 0x17)
  {
    v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v19 = v15 | 7;
    v20 = v19 + 1;
    p_dst = (std::string *)operator new(v19 + 1);
    __dst.__r_.__value_.__l.__size_ = v15;
    __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_28;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v15;
  p_dst = &__dst;
  if (v15)
LABEL_28:
    memmove(p_dst, v18, v15);
LABEL_29:
  p_dst->__r_.__value_.__s.__data_[v15] = 0;
  v28[0] = *MEMORY[0x24BEDB7F0];
  v21 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v28 + *(_QWORD *)(v28[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v29[0] = v21;
  v29[1] = MEMORY[0x24BEDB848] + 16;
  if (v35 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23B7D9458](&v38);
  std::runtime_error::runtime_error(a1, &__dst);
  a1->__vftable = (std::runtime_error_vtbl *)&off_2506DFEF8;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    a1->__vftable = (std::runtime_error_vtbl *)off_2506E01D8;
    v22 = a1 + 1;
    if ((*((char *)a2 + 23) & 0x80000000) == 0)
      goto LABEL_33;
  }
  else
  {
    a1->__vftable = (std::runtime_error_vtbl *)off_2506E01D8;
    v22 = a1 + 1;
    if ((*((char *)a2 + 23) & 0x80000000) == 0)
    {
LABEL_33:
      v23 = *(std::runtime_error *)a2;
      v22[1].__vftable = (std::runtime_error_vtbl *)a2[2];
      *v22 = v23;
      goto LABEL_36;
    }
  }
  sub_23584B488(v22, *a2, (unint64_t)a2[1]);
LABEL_36:
  p_imp = &a1[2].__imp_;
  if (*((char *)a3 + 23) < 0)
  {
    sub_23584B488(p_imp, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v25 = *a3;
    a1[3].__imp_.__imp_ = (const char *)*((_QWORD *)a3 + 2);
    *(_OWORD *)&p_imp->__imp_ = v25;
  }
  a1[4].__vftable = a4;
  return a1;
}

void sub_235870F38(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
  {
    operator delete(*v2);
    std::runtime_error::~runtime_error((std::runtime_error *)v1);
    _Unwind_Resume(a1);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)v1);
  _Unwind_Resume(a1);
}

void sub_235870F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_235870FA0(_QWORD *a1, unsigned __int8 **a2)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  int v4;
  int v5;
  int v6;
  unsigned __int8 *i;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  unsigned __int8 *j;
  unsigned __int8 v15;
  unsigned __int8 *k;
  int v17;
  int v18;
  int v19;
  unsigned __int8 **v20;
  _QWORD *exception;
  unsigned __int8 *v22;
  const char *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  char ***v27;
  unsigned __int8 *v28;
  int v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 v32;
  int v33;
  int v34;
  unsigned __int8 v35;
  _BYTE *v36;
  uint64_t v37;
  int v38;
  char **v39;
  _BYTE *v40;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  char **v44;
  char ***v45;
  char *v46;
  unsigned __int8 v47;
  int v48;
  char *v49;
  unsigned __int8 *v50;
  char *v51;
  char *v52;
  unsigned __int8 v53;
  int v54;
  int v55;
  unsigned __int8 v56;
  int v57;
  char *v58;
  unsigned __int8 v59;
  int v60;
  int v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  char v69;
  unint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int v79;
  uint64_t v80;
  char v81;
  char v82;
  unint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  unsigned __int8 v89;
  int v90;
  unsigned __int8 v91;
  uint64_t v92;
  uint64_t *v93;
  unsigned __int8 *v94;
  unsigned __int8 v95;
  int v96;
  unsigned __int8 v97;
  unsigned __int8 *v98;
  char *v99;
  unsigned __int8 v100;
  int v101;
  char *v102;
  int v103;
  uint64_t v104;
  int v105;
  _BYTE *v106;
  unint64_t v107;
  unint64_t v108;
  unsigned int v109;
  uint64_t v110;
  char v111;
  char v112;
  unint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int8 v117;
  int v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t *v124;
  char *v125;
  unsigned __int8 *v126;
  int v127;
  char *v128;
  unsigned __int8 v129;
  int v130;
  unsigned __int8 v131;
  int v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  unsigned __int8 **v136;
  _QWORD *v137;
  const char *v138;
  unsigned __int8 **v139;
  unsigned __int8 **v140;
  _QWORD *v141;
  unsigned __int8 **v142;
  uint64_t (**v143)(uint64_t);
  uint64_t (**v144)(uint64_t);
  uint64_t *v145;
  uint64_t v146;
  unsigned __int8 **v148;

  v2 = a1;
  v3 = *a2;
  v4 = (char)**a2;
  if (v4 != 33)
  {
    if (v4 == 63)
    {
      *a2 = v3 + 1;
      v5 = v3[1];
      if ((v5 | 0x20) == 0x78 && (v3[2] | 0x20) == 0x6D && (v3[3] | 0x20) == 0x6C)
      {
        v6 = (char)v3[4];
        if (v6 < 0)
          LOBYTE(v6) = 122;
        if (byte_2358A1773[v6])
        {
          for (i = v3 + 5; ; ++i)
          {
            *a2 = i;
            if (*i == 63)
            {
              if (i[1] == 62)
              {
                v8 = 0;
                v9 = i + 2;
                goto LABEL_58;
              }
            }
            else if (!*i)
            {
              goto LABEL_55;
            }
          }
        }
      }
      for (j = v3 + 2; ; ++j)
      {
        if (v5 == 63)
        {
          if (*j == 62)
          {
            v8 = 0;
            v9 = j + 1;
            goto LABEL_58;
          }
        }
        else if (!(_BYTE)v5)
        {
          goto LABEL_55;
        }
        *a2 = j;
        v15 = *j;
        LOBYTE(v5) = v15;
      }
    }
    v8 = a1[13] + (-*((_BYTE *)a1 + 104) & 7);
    v148 = a2;
    if ((unint64_t)(v8 + 96) > a1[14])
    {
      v12 = (uint64_t (*)(uint64_t))a1[8207];
      if (v12)
        v13 = v12(65558);
      else
        v13 = operator new[]();
      v24 = (_QWORD *)(v13 + (-(int)v13 & 7));
      v2 = a1;
      a2 = v148;
      *v24 = a1[12];
      a1[12] = v13;
      a1[14] = v13 + 65558;
      v8 = (uint64_t)v24 + (-((_DWORD)v24 + 8) & 7) + 8;
    }
    v25 = 0;
    v2[13] = v8 + 96;
    *(_QWORD *)(v8 + 32) = 0;
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
    *(_DWORD *)(v8 + 40) = 1;
    *(_QWORD *)(v8 + 48) = 0;
    v26 = (uint64_t *)(v8 + 48);
    *(_QWORD *)(v8 + 64) = 0;
    v27 = (char ***)(v8 + 64);
    v28 = *a2;
    do
    {
      v29 = (char)v28[v25];
      if (v29 < 0)
        LOBYTE(v29) = 122;
      ++v25;
    }
    while (byte_2358A1873[v29]);
    *a2 = &v28[v25 - 1];
    v30 = v25 - 1;
    if (!v30)
    {
      v142 = a2;
      exception = __cxa_allocate_exception(0x18uLL);
      v22 = *v142;
      v23 = "expected element name";
      goto LABEL_56;
    }
    *(_QWORD *)v8 = v28;
    *(_QWORD *)(v8 + 16) = v30;
    v31 = *a2 - 1;
    do
    {
      v33 = (char)*++v31;
      v32 = v33;
      if (v33 < 0)
        v32 = 122;
    }
    while (byte_2358A1773[v32]);
    *a2 = v31;
    v34 = (char)*v31;
    if (v34 >= 0)
      v35 = *v31;
    else
      v35 = 122;
    v145 = (uint64_t *)(v8 + 48);
    v146 = v8;
    if (byte_2358A1973[v35])
    {
      v143 = (uint64_t (**)(uint64_t))(v2 + 8207);
      v36 = &unk_2358A1B73;
      while (1)
      {
        v37 = 0;
        *a2 = v31 + 1;
        do
        {
          v38 = (char)v31[v37 + 1];
          if (v38 < 0)
            LOBYTE(v38) = 122;
          ++v37;
        }
        while (byte_2358A1973[v38]);
        *a2 = &v31[v37];
        if (!v37)
        {
          v137 = __cxa_allocate_exception(0x18uLL);
          v138 = "expected attribute name";
          goto LABEL_331;
        }
        v39 = (char **)(v2[13] + (-*((_BYTE *)v2 + 104) & 7));
        if ((unint64_t)(v39 + 7) > v2[14])
        {
          v40 = v36;
          if (*v143)
            v41 = (*v143)(65558);
          else
            v41 = operator new[]();
          v42 = (_QWORD *)(v41 + (-(int)v41 & 7));
          v2 = a1;
          a2 = v148;
          *v42 = a1[12];
          a1[12] = v41;
          a1[14] = v41 + 65558;
          v39 = (char **)((char *)v42 + (-((_DWORD)v42 + 8) & 7) + 8);
          v26 = v145;
          v8 = v146;
          v36 = v40;
        }
        v2[13] = v39 + 7;
        v39[4] = 0;
        *v39 = 0;
        v39[1] = 0;
        v43 = (char *)(*a2 - v31);
        *v39 = (char *)v31;
        v39[2] = v43;
        v44 = *v27;
        if (*v27)
        {
          v44 = *(char ***)(v8 + 72);
          v45 = (char ***)(v44 + 6);
        }
        else
        {
          v45 = v27;
        }
        *v45 = v39;
        v39[5] = (char *)v44;
        *(_QWORD *)(v8 + 72) = v39;
        v39[4] = (char *)v8;
        v39[6] = 0;
        v46 = (char *)*a2;
        do
        {
          v48 = *v46++;
          v47 = v48;
          if (v48 < 0)
            v47 = 122;
        }
        while (byte_2358A1773[v47]);
        *a2 = (unsigned __int8 *)(v46 - 1);
        if (*(v46 - 1) != 61)
          break;
        *a2 = (unsigned __int8 *)v46;
        v49 = *v39;
        if (!*v39)
        {
          v49 = &byte_2563067E8;
          v43 = 0;
        }
        v43[(_QWORD)v49] = 0;
        v50 = *a2;
        v51 = (char *)*a2;
        do
        {
          v52 = v51;
          v54 = *v51++;
          v53 = v54;
          if (v54 < 0)
            v53 = 122;
          ++v50;
        }
        while (byte_2358A1773[v53]);
        *a2 = (unsigned __int8 *)(v51 - 1);
        v55 = *(v51 - 1);
        if (v55 != 34 && v55 != 39)
          goto LABEL_327;
        *a2 = (unsigned __int8 *)v51;
        if (v55 != 39)
        {
          do
          {
            v60 = *++v52;
            v59 = v60;
            if (v60 < 0)
              v59 = 122;
          }
          while (byte_2358A1C73[v59]);
          *a2 = (unsigned __int8 *)v52;
          v58 = v52;
          while (1)
          {
            while (1)
            {
LABEL_159:
              v74 = *v58;
              if ((v74 & 0x80u) == 0)
                v75 = *v58;
              else
                v75 = 122;
              if (!v75 || v75 == 34)
                goto LABEL_206;
              if (v74 == 38)
                break;
LABEL_158:
              ++v58;
              *v52++ = v74;
            }
            switch(v58[1])
            {
              case 'a':
                v76 = v58[2];
                if (v76 != 112)
                {
                  if (v76 == 109 && v58[3] == 112 && v58[4] == 59)
                  {
                    *v52++ = 38;
                    v58 += 5;
                    goto LABEL_159;
                  }
                  goto LABEL_158;
                }
                if (v58[3] != 111 || v58[4] != 115 || v58[5] != 59)
                  goto LABEL_158;
                v82 = 39;
LABEL_199:
                *v52++ = v82;
                v58 += 6;
                goto LABEL_159;
              case 'b':
              case 'c':
              case 'd':
              case 'e':
              case 'f':
              case 'h':
              case 'i':
              case 'j':
              case 'k':
              case 'm':
              case 'n':
              case 'o':
              case 'p':
                goto LABEL_158;
              case 'g':
                if (v58[2] != 116 || v58[3] != 59)
                  goto LABEL_158;
                v81 = 62;
                goto LABEL_183;
              case 'l':
                if (v58[2] != 116 || v58[3] != 59)
                  goto LABEL_158;
                v81 = 60;
LABEL_183:
                *v52++ = v81;
                v58 += 4;
                goto LABEL_159;
              case 'q':
                if (v58[2] != 117 || v58[3] != 111 || v58[4] != 116 || v58[5] != 59)
                  goto LABEL_158;
                v82 = 34;
                goto LABEL_199;
              default:
                if (v58[1] != 35)
                  goto LABEL_158;
                v31 = (unsigned __int8 *)(v58 + 2);
                if (v58[2] == 120)
                {
                  v77 = 0;
                  do
                  {
                    v78 = v77;
                    v79 = *++v31;
                    v80 = byte_2358A1A73[v79];
                    v77 = v80 + 16 * v77;
                  }
                  while (v80 != 255);
                  if (v78 <= 0x7F)
                    goto LABEL_192;
                }
                else
                {
                  v83 = 0;
                  v31 = (unsigned __int8 *)(v58 + 1);
                  do
                  {
                    v78 = v83;
                    v84 = *++v31;
                    v85 = byte_2358A1A73[v84];
                    v83 = v85 + 10 * v83;
                  }
                  while (v85 != 255);
                  if (v78 <= 0x7F)
                  {
LABEL_192:
                    v86 = 1;
                    goto LABEL_204;
                  }
                }
                if (v78 > 0x7FF)
                {
                  if (v78 >> 16)
                  {
                    if (v78 >> 16 > 0x10)
                    {
LABEL_333:
                      v141 = __cxa_allocate_exception(0x18uLL);
                      *v141 = &off_2506E0200;
                      v141[1] = "invalid numeric character entity";
                      v141[2] = v52;
                      __cxa_throw(v141, (struct type_info *)&unk_2506E0098, (void (*)(void *))std::exception::~exception);
                    }
                    v52[3] = v78 & 0x3F | 0x80;
                    v52[2] = (v78 >> 6) & 0x3F | 0x80;
                    v52[1] = (v78 >> 12) & 0x3F | 0x80;
                    LODWORD(v78) = (v78 >> 18) | 0xFFFFFFF0;
                    v86 = 4;
                  }
                  else
                  {
                    v52[2] = v78 & 0x3F | 0x80;
                    v52[1] = (v78 >> 6) & 0x3F | 0x80;
                    LODWORD(v78) = (v78 >> 12) | 0xFFFFFFE0;
                    v86 = 3;
                  }
                }
                else
                {
                  v52[1] = v78 & 0x3F | 0x80;
                  LODWORD(v78) = (v78 >> 6) | 0xFFFFFFC0;
                  v86 = 2;
                }
LABEL_204:
                *v52 = v78;
                if (*v31 != 59)
                {
LABEL_330:
                  v137 = __cxa_allocate_exception(0x18uLL);
                  v138 = "expected ;";
LABEL_331:
                  *v137 = &off_2506E0200;
                  v137[1] = v138;
                  v137[2] = v31;
                  __cxa_throw(v137, (struct type_info *)&unk_2506E0098, (void (*)(void *))std::exception::~exception);
                }
                v52 += v86;
                v58 = (char *)(v31 + 1);
                break;
            }
          }
        }
        do
        {
          v57 = *++v52;
          v56 = v57;
          if (v57 < 0)
            v56 = 122;
        }
        while (v36[v56]);
        *a2 = (unsigned __int8 *)v52;
        v58 = v52;
        while (1)
        {
          v61 = *v58;
          v62 = (v61 & 0x80u) == 0 ? *v58 : 122;
          if (!v62 || v62 == 39)
            break;
          if (v61 == 38)
          {
            switch(v58[1])
            {
              case 'a':
                v63 = v58[2];
                if (v63 != 112)
                {
                  if (v63 == 109 && v58[3] == 112 && v58[4] == 59)
                  {
                    *v52++ = 38;
                    v58 += 5;
                    continue;
                  }
                  goto LABEL_110;
                }
                if (v58[3] != 111 || v58[4] != 115 || v58[5] != 59)
                  goto LABEL_110;
                v69 = 39;
LABEL_151:
                *v52++ = v69;
                v58 += 6;
                continue;
              case 'b':
              case 'c':
              case 'd':
              case 'e':
              case 'f':
              case 'h':
              case 'i':
              case 'j':
              case 'k':
              case 'm':
              case 'n':
              case 'o':
              case 'p':
                goto LABEL_110;
              case 'g':
                if (v58[2] != 116 || v58[3] != 59)
                  goto LABEL_110;
                v68 = 62;
                goto LABEL_135;
              case 'l':
                if (v58[2] != 116 || v58[3] != 59)
                  goto LABEL_110;
                v68 = 60;
LABEL_135:
                *v52++ = v68;
                v58 += 4;
                continue;
              case 'q':
                if (v58[2] != 117 || v58[3] != 111 || v58[4] != 116 || v58[5] != 59)
                  goto LABEL_110;
                v69 = 34;
                goto LABEL_151;
              default:
                if (v58[1] != 35)
                  goto LABEL_110;
                v31 = (unsigned __int8 *)(v58 + 2);
                if (v58[2] == 120)
                {
                  v64 = 0;
                  do
                  {
                    v65 = v64;
                    v66 = *++v31;
                    v67 = byte_2358A1A73[v66];
                    v64 = v67 + 16 * v64;
                  }
                  while (v67 != 255);
                  if (v65 <= 0x7F)
                    goto LABEL_144;
                }
                else
                {
                  v70 = 0;
                  v31 = (unsigned __int8 *)(v58 + 1);
                  do
                  {
                    v65 = v70;
                    v71 = *++v31;
                    v72 = byte_2358A1A73[v71];
                    v70 = v72 + 10 * v70;
                  }
                  while (v72 != 255);
                  if (v65 <= 0x7F)
                  {
LABEL_144:
                    v73 = 1;
                    goto LABEL_156;
                  }
                }
                if (v65 > 0x7FF)
                {
                  if (v65 >> 16)
                  {
                    if (v65 >> 16 > 0x10)
                      goto LABEL_333;
                    v52[3] = v65 & 0x3F | 0x80;
                    v52[2] = (v65 >> 6) & 0x3F | 0x80;
                    v52[1] = (v65 >> 12) & 0x3F | 0x80;
                    LODWORD(v65) = (v65 >> 18) | 0xFFFFFFF0;
                    v73 = 4;
                  }
                  else
                  {
                    v52[2] = v65 & 0x3F | 0x80;
                    v52[1] = (v65 >> 6) & 0x3F | 0x80;
                    LODWORD(v65) = (v65 >> 12) | 0xFFFFFFE0;
                    v73 = 3;
                  }
                }
                else
                {
                  v52[1] = v65 & 0x3F | 0x80;
                  LODWORD(v65) = (v65 >> 6) | 0xFFFFFFC0;
                  v73 = 2;
                }
LABEL_156:
                *v52 = v65;
                if (*v31 != 59)
                  goto LABEL_330;
                v52 += v73;
                v58 = (char *)(v31 + 1);
                break;
            }
          }
          else
          {
LABEL_110:
            ++v58;
            *v52++ = v61;
          }
        }
LABEL_206:
        *a2 = (unsigned __int8 *)v58;
        v87 = (char *)(v52 - (char *)v50);
        v39[1] = v51;
        v39[3] = v87;
        if (**a2 != v55)
        {
LABEL_327:
          v136 = a2;
          exception = __cxa_allocate_exception(0x18uLL);
          v22 = *v136;
          v23 = "expected ' or \"";
          goto LABEL_56;
        }
        ++*a2;
        v88 = v39[1];
        if (!v88)
        {
          v88 = &byte_2563067E8;
          v87 = 0;
        }
        v87[(_QWORD)v88] = 0;
        v31 = *a2 - 1;
        do
        {
          v90 = (char)*++v31;
          v89 = v90;
          if (v90 < 0)
            v89 = 122;
        }
        while (byte_2358A1773[v89]);
        *a2 = v31;
        v34 = (char)*v31;
        if (v34 >= 0)
          v91 = *v31;
        else
          v91 = 122;
        if (!byte_2358A1973[v91])
          goto LABEL_217;
      }
      v139 = a2;
      exception = __cxa_allocate_exception(0x18uLL);
      v22 = *v139;
      v23 = "expected =";
LABEL_56:
      *exception = &off_2506E0200;
      exception[1] = v23;
      exception[2] = v22;
      __cxa_throw(exception, (struct type_info *)&unk_2506E0098, (void (*)(void *))std::exception::~exception);
    }
LABEL_217:
    if (v34 != 47)
    {
      if (v34 == 62)
      {
        *a2 = v31 + 1;
        v144 = (uint64_t (**)(uint64_t))(v2 + 8207);
        while (1)
        {
          v94 = *a2 - 1;
          do
          {
            v96 = (char)*++v94;
            v95 = v96;
            if (v96 < 0)
              v95 = 122;
          }
          while (byte_2358A1773[v95]);
          *a2 = v94;
          v97 = *v94;
          while (v97 != 60)
          {
            if (!v97)
              goto LABEL_55;
            v98 = *a2;
            v99 = (char *)(*a2 - 1);
            do
            {
              v101 = *++v99;
              v100 = v101;
              if (v101 < 0)
                v100 = 122;
            }
            while (byte_2358A1D73[v100]);
            *a2 = (unsigned __int8 *)v99;
            v102 = v99;
            while (1)
            {
              v103 = *v102;
              v104 = (v103 & 0x80u) == 0 ? *v102 : 122;
              if (!(_DWORD)v104 || (_DWORD)v104 == 60)
                break;
              if (v103 == 38)
              {
                switch(v102[1])
                {
                  case 'a':
                    v105 = v102[2];
                    if (v105 != 112)
                    {
                      if (v105 == 109 && v102[3] == 112 && v102[4] == 59)
                      {
                        *v99++ = 38;
                        v102 += 5;
                        continue;
                      }
                      goto LABEL_278;
                    }
                    if (v102[3] != 111 || v102[4] != 115 || v102[5] != 59)
                      goto LABEL_278;
                    v112 = 39;
LABEL_277:
                    *v99++ = v112;
                    v102 += 6;
                    continue;
                  case 'b':
                  case 'c':
                  case 'd':
                  case 'e':
                  case 'f':
                  case 'h':
                  case 'i':
                  case 'j':
                  case 'k':
                  case 'm':
                  case 'n':
                  case 'o':
                  case 'p':
                    goto LABEL_278;
                  case 'g':
                    if (v102[2] != 116 || v102[3] != 59)
                      goto LABEL_278;
                    v111 = 62;
                    goto LABEL_266;
                  case 'l':
                    if (v102[2] != 116 || v102[3] != 59)
                      goto LABEL_278;
                    v111 = 60;
LABEL_266:
                    *v99++ = v111;
                    v102 += 4;
                    continue;
                  case 'q':
                    if (v102[2] != 117 || v102[3] != 111 || v102[4] != 116 || v102[5] != 59)
                      goto LABEL_278;
                    v112 = 34;
                    goto LABEL_277;
                  default:
                    if (v102[1] != 35)
                      goto LABEL_278;
                    v106 = v102 + 2;
                    if (v102[2] == 120)
                    {
                      v107 = 0;
                      do
                      {
                        v108 = v107;
                        v109 = *++v106;
                        v110 = byte_2358A1A73[v109];
                        v107 = v110 + 16 * v107;
                      }
                      while (v110 != 255);
                      if (v108 <= 0x7F)
                        goto LABEL_270;
                    }
                    else
                    {
                      v113 = 0;
                      v106 = v102 + 1;
                      do
                      {
                        v108 = v113;
                        v114 = *++v106;
                        v115 = byte_2358A1A73[v114];
                        v113 = v115 + 10 * v113;
                      }
                      while (v115 != 255);
                      if (v108 <= 0x7F)
                      {
LABEL_270:
                        v116 = 1;
                        goto LABEL_288;
                      }
                    }
                    if (v108 > 0x7FF)
                    {
                      if (v108 >> 16)
                      {
                        if (v108 >> 16 > 0x10)
                        {
                          v135 = __cxa_allocate_exception(0x18uLL);
                          *v135 = &off_2506E0200;
                          v135[1] = "invalid numeric character entity";
                          v135[2] = v99;
                          __cxa_throw(v135, (struct type_info *)&unk_2506E0098, (void (*)(void *))std::exception::~exception);
                        }
                        v99[3] = v108 & 0x3F | 0x80;
                        v99[2] = (v108 >> 6) & 0x3F | 0x80;
                        v99[1] = (v108 >> 12) & 0x3F | 0x80;
                        LODWORD(v108) = (v108 >> 18) | 0xFFFFFFF0;
                        v116 = 4;
                      }
                      else
                      {
                        v99[2] = v108 & 0x3F | 0x80;
                        v99[1] = (v108 >> 6) & 0x3F | 0x80;
                        LODWORD(v108) = (v108 >> 12) | 0xFFFFFFE0;
                        v116 = 3;
                      }
                    }
                    else
                    {
                      v99[1] = v108 & 0x3F | 0x80;
                      LODWORD(v108) = (v108 >> 6) | 0xFFFFFFC0;
                      v116 = 2;
                    }
LABEL_288:
                    *v99 = v108;
                    if (*v106 != 59)
                    {
                      v134 = __cxa_allocate_exception(0x18uLL);
                      *v134 = &off_2506E0200;
                      v134[1] = "expected ;";
                      v134[2] = v106;
                      __cxa_throw(v134, (struct type_info *)&unk_2506E0098, (void (*)(void *))std::exception::~exception);
                    }
                    v99 += v116;
                    v102 = v106 + 1;
                    break;
                }
              }
              else
              {
LABEL_278:
                if (byte_2358A1773[v104])
                {
                  *v99 = 32;
                  do
                  {
                    v118 = *++v102;
                    v117 = v118;
                    if (v118 < 0)
                      v117 = 122;
                  }
                  while (byte_2358A1773[v117]);
                  ++v99;
                }
                else
                {
                  ++v102;
                  *v99++ = v103;
                }
              }
            }
            *a2 = (unsigned __int8 *)v102;
            if (*(v99 - 1) == 32)
              v119 = v99 - 1;
            else
              v119 = v99;
            v120 = v2[13] + (-*((_BYTE *)v2 + 104) & 7);
            if ((unint64_t)(v120 + 96) > v2[14])
            {
              if (*v144)
                v121 = (*v144)(65558);
              else
                v121 = operator new[]();
              v122 = (_QWORD *)(v121 + (-(int)v121 & 7));
              v2 = a1;
              a2 = v148;
              *v122 = a1[12];
              a1[12] = v121;
              a1[14] = v121 + 65558;
              v120 = (uint64_t)v122 + (-((_DWORD)v122 + 8) & 7) + 8;
              v26 = v145;
              v8 = v146;
            }
            v2[13] = v120 + 96;
            *(_DWORD *)(v120 + 40) = 2;
            *(_QWORD *)(v120 + 48) = 0;
            *(_QWORD *)(v120 + 64) = 0;
            *(_QWORD *)v120 = 0;
            *(_QWORD *)(v120 + 8) = v98;
            *(_QWORD *)(v120 + 24) = v119 - (char *)v98;
            v123 = *v26;
            if (*v26)
            {
              v123 = *(_QWORD *)(v8 + 56);
              v124 = (uint64_t *)(v123 + 88);
            }
            else
            {
              v124 = v26;
            }
            *v124 = v120;
            *(_QWORD *)(v120 + 80) = v123;
            *(_QWORD *)(v8 + 56) = v120;
            *(_QWORD *)(v120 + 32) = v8;
            *(_QWORD *)(v120 + 88) = 0;
            v125 = *(char **)(v8 + 8);
            if (!v125)
              v125 = &byte_2563067E8;
            if (!*v125)
            {
              *(_QWORD *)(v8 + 8) = v98;
              *(_QWORD *)(v8 + 24) = v119 - (char *)v98;
            }
            v97 = **a2;
            *v119 = 0;
          }
          v126 = *a2;
          v127 = (*a2)[1];
          if (v127 == 47)
          {
            *a2 = v126 + 2;
            v128 = (char *)(v126 + 1);
            do
            {
              v130 = *++v128;
              v129 = v130;
              if (v130 < 0)
                v129 = 122;
            }
            while (byte_2358A1873[v129]);
            *a2 = (unsigned __int8 *)v128;
            do
            {
              v132 = *v128++;
              v131 = v132;
              if (v132 < 0)
                v131 = 122;
            }
            while (byte_2358A1773[v131]);
            *a2 = (unsigned __int8 *)(v128 - 1);
            if (*(v128 - 1) != 62)
              goto LABEL_332;
            *a2 = (unsigned __int8 *)v128;
          }
          else
          {
            ++*a2;
            v133 = (_QWORD *)sub_235870FA0(v2, v148);
            v26 = v145;
            v8 = v146;
            v2 = a1;
            a2 = v148;
            if (v133)
            {
              v92 = *v145;
              if (*v145)
              {
                v92 = *(_QWORD *)(v146 + 56);
                v93 = (uint64_t *)(v92 + 88);
              }
              else
              {
                v93 = v145;
              }
              *v93 = (uint64_t)v133;
              v133[10] = v92;
              *(_QWORD *)(v146 + 56) = v133;
              v133[4] = v146;
              v133[11] = 0;
            }
          }
          if (v127 == 47)
            goto LABEL_321;
        }
      }
      goto LABEL_332;
    }
    *a2 = v31 + 1;
    if (v31[1] != 62)
    {
LABEL_332:
      v140 = a2;
      exception = __cxa_allocate_exception(0x18uLL);
      v22 = *v140;
      v23 = "expected >";
      goto LABEL_56;
    }
    *a2 = v31 + 2;
LABEL_321:
    if (*(_QWORD *)v8)
      *(_BYTE *)(*(_QWORD *)v8 + *(_QWORD *)(v8 + 16)) = 0;
    else
      byte_2563067E8 = 0;
    return v8;
  }
  v10 = (char)v3[1];
  if (v10 == 45)
  {
    if (v3[2] == 45)
    {
      for (k = v3 + 3; ; ++k)
      {
        *a2 = k;
        if (*k == 45)
        {
          if (k[1] == 45 && k[2] == 62)
          {
            v8 = 0;
            v9 = k + 3;
            goto LABEL_58;
          }
        }
        else if (!*k)
        {
LABEL_55:
          v20 = a2;
          exception = __cxa_allocate_exception(0x18uLL);
          v22 = *v20;
          v23 = "unexpected end of data";
          goto LABEL_56;
        }
      }
    }
    goto LABEL_52;
  }
  if (v10 != 68)
  {
    if (v10 == 91 && v3[2] == 67 && v3[3] == 68 && v3[4] == 65 && v3[5] == 84 && v3[6] == 65 && v3[7] == 91)
    {
      *a2 = v3 + 8;
      return sub_235872240(a1, a2);
    }
    goto LABEL_52;
  }
  if (v3[2] != 79 || v3[3] != 67 || v3[4] != 84 || v3[5] != 89 || v3[6] != 80 || v3[7] != 69)
    goto LABEL_52;
  v17 = (char)v3[8];
  if (v17 < 0)
    LOBYTE(v17) = 122;
  if (!byte_2358A1773[v17])
  {
LABEL_52:
    v9 = v3 + 1;
    while (1)
    {
      *a2 = v9;
      v19 = *v9++;
      v18 = v19;
      if (v19 == 62)
        break;
      if (!v18)
        goto LABEL_55;
    }
    v8 = 0;
LABEL_58:
    *a2 = v9;
    return v8;
  }
  *a2 = v3 + 9;
  sub_2358723A8((uint64_t *)a2);
  return 0;
}

uint64_t sub_235872240(_QWORD *a1, _QWORD *a2)
{
  _BYTE *v4;
  _BYTE *i;
  unint64_t v6;
  uint64_t result;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *exception;
  uint64_t v13;

  v4 = (_BYTE *)*a2;
  for (i = (_BYTE *)(*a2 + 1); *(i - 1) != 93; ++i)
  {
    if (!*(i - 1))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      v13 = *a2;
      *exception = &off_2506E0200;
      exception[1] = "unexpected end of data";
      exception[2] = v13;
      __cxa_throw(exception, (struct type_info *)&unk_2506E0098, (void (*)(void *))std::exception::~exception);
    }
LABEL_3:
    *a2 = i;
  }
  if (*i != 93 || i[1] != 62)
    goto LABEL_3;
  v6 = a1[14];
  result = a1[13] + (-*((_BYTE *)a1 + 104) & 7);
  if (result + 96 > v6)
  {
    v8 = (uint64_t (*)(uint64_t))a1[8207];
    if (v8)
      v9 = v8(65558);
    else
      v9 = operator new[]();
    v10 = (_QWORD *)(v9 + (-(int)v9 & 7));
    *v10 = a1[12];
    a1[12] = v9;
    a1[14] = v9 + 65558;
    result = (uint64_t)v10 + (-((_DWORD)v10 + 8) & 7) + 8;
  }
  a1[13] = result + 96;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 40) = 3;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 64) = 0;
  v11 = *a2 - (_QWORD)v4;
  *(_QWORD *)(result + 8) = v4;
  *(_QWORD *)(result + 24) = v11;
  *(_BYTE *)*a2 = 0;
  *a2 += 3;
  return result;
}

uint64_t *sub_2358723A8(uint64_t *result)
{
  _BYTE *v1;
  int v2;
  int v3;
  int v4;
  uint64_t *v5;
  _QWORD *exception;
  uint64_t v7;

  v1 = (_BYTE *)*result;
LABEL_2:
  while (1)
  {
    v2 = *v1;
    if (v2 == 62)
      break;
    if (*v1 == 91)
    {
      *result = (uint64_t)++v1;
      v3 = 1;
      while (1)
      {
        v4 = (char)*v1;
        if (v4 == 91)
        {
          ++v3;
        }
        else if (v4 == 93)
        {
          --v3;
        }
        else if (!*v1)
        {
          goto LABEL_15;
        }
        *result = (uint64_t)++v1;
        if (v3 <= 0)
          goto LABEL_2;
      }
    }
    if (!(_BYTE)v2)
    {
LABEL_15:
      v5 = result;
      exception = __cxa_allocate_exception(0x18uLL);
      v7 = *v5;
      *exception = &off_2506E0200;
      exception[1] = "unexpected end of data";
      exception[2] = v7;
      __cxa_throw(exception, (struct type_info *)&unk_2506E0098, (void (*)(void *))std::exception::~exception);
    }
    *result = (uint64_t)++v1;
  }
  *result = (uint64_t)(v1 + 1);
  return result;
}

void sub_23587247C(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x23B7D94C4);
}

uint64_t sub_2358724A0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_2358724A8(_QWORD *a1, unsigned __int8 **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  unsigned __int8 *i;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  unsigned __int8 *j;
  unsigned __int8 v18;
  unsigned __int8 *k;
  int v20;
  int v21;
  int v22;
  unsigned __int8 **v23;
  _QWORD *exception;
  unsigned __int8 *v25;
  const char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  char ***v30;
  unsigned __int8 *v31;
  int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 v35;
  int v36;
  int v37;
  unsigned __int8 v38;
  _BYTE *v39;
  uint64_t v40;
  int v41;
  char **v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  _QWORD *v46;
  char *v47;
  char **v48;
  char ***v49;
  char *v50;
  unsigned __int8 v51;
  int v52;
  char *v53;
  unsigned __int8 *v54;
  char *v55;
  char *v56;
  unsigned __int8 v57;
  int v58;
  int v59;
  unsigned __int8 v60;
  int v61;
  char *v62;
  unsigned __int8 v63;
  int v64;
  int v65;
  int v66;
  int v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  char v73;
  char v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  char v86;
  char v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  unsigned __int8 v94;
  int v95;
  unsigned __int8 v96;
  uint64_t v97;
  _QWORD *v98;
  unsigned __int8 *v99;
  unsigned __int8 v100;
  uint64_t v101;
  unsigned __int8 v102;
  int v103;
  char *v104;
  int v105;
  int v106;
  int v107;
  unint64_t v108;
  unint64_t v109;
  int v110;
  uint64_t v111;
  char v112;
  char v113;
  unint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t *v123;
  char *v124;
  unsigned __int8 *v125;
  int v126;
  char *v127;
  unsigned __int8 v128;
  int v129;
  unsigned __int8 v130;
  int v131;
  _QWORD *v132;
  _QWORD *v133;
  const char *v134;
  _QWORD *v135;
  const char *v136;
  unsigned __int8 **v137;
  unsigned __int8 **v138;
  unsigned __int8 **v139;
  _QWORD *v140;
  unsigned __int8 **v141;
  uint64_t (**v142)(uint64_t);
  uint64_t (**v143)(uint64_t);
  uint64_t *v144;
  unsigned __int8 **v145;

  v6 = *a2;
  v7 = (char)**a2;
  if (v7 != 33)
  {
    if (v7 == 63)
    {
      *a2 = v6 + 1;
      v8 = v6[1];
      if ((v8 | 0x20) == 0x78 && (v6[2] | 0x20) == 0x6D && (v6[3] | 0x20) == 0x6C)
      {
        v9 = (char)v6[4];
        if (v9 < 0)
          LOBYTE(v9) = 122;
        if (byte_2358A1773[v9])
        {
          for (i = v6 + 5; ; ++i)
          {
            *a2 = i;
            if (*i == 63)
            {
              if (i[1] == 62)
              {
                v11 = 0;
                v12 = i + 2;
                goto LABEL_58;
              }
            }
            else if (!*i)
            {
              goto LABEL_55;
            }
          }
        }
      }
      for (j = v6 + 2; ; ++j)
      {
        if (v8 == 63)
        {
          if (*j == 62)
          {
            v11 = 0;
            v12 = j + 1;
            goto LABEL_58;
          }
        }
        else if (!(_BYTE)v8)
        {
          goto LABEL_55;
        }
        *a2 = j;
        v18 = *j;
        LOBYTE(v8) = v18;
      }
    }
    v11 = a1[13] + (-*((_BYTE *)a1 + 104) & 7);
    v145 = a2;
    if ((unint64_t)(v11 + 96) > a1[14])
    {
      v15 = (uint64_t (*)(uint64_t))a1[8207];
      if (v15)
        v16 = v15(65558);
      else
        v16 = operator new[]();
      v27 = (_QWORD *)(v16 + (-(int)v16 & 7));
      *v27 = a1[12];
      a1[12] = v16;
      a1[14] = v16 + 65558;
      v11 = (uint64_t)v27 + (-((_DWORD)v27 + 8) & 7) + 8;
      a2 = v145;
    }
    v28 = 0;
    a1[13] = v11 + 96;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    *(_DWORD *)(v11 + 40) = 1;
    *(_QWORD *)(v11 + 48) = 0;
    v29 = (uint64_t *)(v11 + 48);
    *(_QWORD *)(v11 + 64) = 0;
    v30 = (char ***)(v11 + 64);
    v31 = *a2;
    do
    {
      v32 = (char)v31[v28];
      if (v32 < 0)
        LOBYTE(v32) = 122;
      ++v28;
    }
    while (byte_2358A1873[v32]);
    *a2 = &v31[v28 - 1];
    v33 = v28 - 1;
    if (!v33)
    {
      v141 = a2;
      exception = __cxa_allocate_exception(0x18uLL);
      v25 = *v141;
      v26 = "expected element name";
      goto LABEL_56;
    }
    *(_QWORD *)v11 = v31;
    *(_QWORD *)(v11 + 16) = v33;
    v34 = *a2 - 1;
    do
    {
      v36 = (char)*++v34;
      v35 = v36;
      if (v36 < 0)
        v35 = 122;
    }
    while (byte_2358A1773[v35]);
    *a2 = v34;
    v37 = (char)*v34;
    if (v37 >= 0)
      v38 = *v34;
    else
      v38 = 122;
    v144 = (uint64_t *)(v11 + 48);
    if (byte_2358A1973[v38])
    {
      v142 = (uint64_t (**)(uint64_t))(a1 + 8207);
      v39 = &unk_2358A1B73;
      while (1)
      {
        v40 = 0;
        *a2 = v34 + 1;
        do
        {
          v41 = (char)v34[v40 + 1];
          if (v41 < 0)
            LOBYTE(v41) = 122;
          ++v40;
        }
        while (byte_2358A1973[v41]);
        *a2 = &v34[v40];
        if (!v40)
        {
          v133 = __cxa_allocate_exception(0x18uLL);
          v134 = "expected attribute name";
LABEL_313:
          *v133 = &off_2506E0200;
          v133[1] = v134;
          v133[2] = v34;
          __cxa_throw(v133, (struct type_info *)&unk_2506E0098, (void (*)(void *))std::exception::~exception);
        }
        v42 = (char **)(a1[13] + (-*((_BYTE *)a1 + 104) & 7));
        if ((unint64_t)(v42 + 7) > a1[14])
        {
          v43 = a5;
          v44 = v39;
          if (*v142)
            v45 = (*v142)(65558);
          else
            v45 = operator new[]();
          v46 = (_QWORD *)(v45 + (-(int)v45 & 7));
          *v46 = a1[12];
          a1[12] = v45;
          a1[14] = v45 + 65558;
          v42 = (char **)((char *)v46 + (-((_DWORD)v46 + 8) & 7) + 8);
          v29 = (uint64_t *)(v11 + 48);
          a2 = v145;
          v39 = v44;
          a5 = v43;
          v30 = (char ***)(v11 + 64);
        }
        a1[13] = v42 + 7;
        v42[4] = 0;
        *v42 = 0;
        v42[1] = 0;
        v47 = (char *)(*a2 - v34);
        *v42 = (char *)v34;
        v42[2] = v47;
        v48 = *v30;
        if (*v30)
        {
          v48 = *(char ***)(v11 + 72);
          v49 = (char ***)(v48 + 6);
        }
        else
        {
          v49 = v30;
        }
        *v49 = v42;
        v42[5] = (char *)v48;
        *(_QWORD *)(v11 + 72) = v42;
        v42[4] = (char *)v11;
        v42[6] = 0;
        v50 = (char *)*a2;
        do
        {
          v52 = *v50++;
          v51 = v52;
          if (v52 < 0)
            v51 = 122;
        }
        while (byte_2358A1773[v51]);
        *a2 = (unsigned __int8 *)(v50 - 1);
        if (*(v50 - 1) != 61)
          break;
        *a2 = (unsigned __int8 *)v50;
        v53 = *v42;
        if (!*v42)
        {
          v53 = &byte_2563067E8;
          v47 = 0;
        }
        v47[(_QWORD)v53] = 0;
        v54 = *a2;
        v55 = (char *)*a2;
        do
        {
          v56 = v55;
          v58 = *v55++;
          v57 = v58;
          if (v58 < 0)
            v57 = 122;
          ++v54;
        }
        while (byte_2358A1773[v57]);
        *a2 = (unsigned __int8 *)(v55 - 1);
        v59 = *(v55 - 1);
        if (v59 != 34 && v59 != 39)
          goto LABEL_315;
        *a2 = (unsigned __int8 *)v55;
        if (v59 == 39)
        {
          do
          {
            v61 = *++v56;
            v60 = v61;
            if (v61 < 0)
              v60 = 122;
          }
          while (v39[v60]);
          *a2 = (unsigned __int8 *)v56;
          v62 = v56;
          while (1)
          {
            v65 = *v62;
            v66 = (v65 & 0x80u) == 0 ? *v62 : 122;
            if (!v66 || v66 == 39)
              break;
            if (v65 == 38)
            {
              switch(v62[1])
              {
                case 'a':
                  v67 = v62[2];
                  if (v67 != 112)
                  {
                    if (v67 == 109 && v62[3] == 112 && v62[4] == 59)
                    {
                      *v56++ = 38;
                      v62 += 5;
                      continue;
                    }
                    goto LABEL_110;
                  }
                  if (v62[3] != 111 || v62[4] != 115 || v62[5] != 59)
                    goto LABEL_110;
                  v74 = 39;
LABEL_151:
                  *v56++ = v74;
                  v62 += 6;
                  continue;
                case 'b':
                case 'c':
                case 'd':
                case 'e':
                case 'f':
                case 'h':
                case 'i':
                case 'j':
                case 'k':
                case 'm':
                case 'n':
                case 'o':
                case 'p':
                  goto LABEL_110;
                case 'g':
                  if (v62[2] != 116 || v62[3] != 59)
                    goto LABEL_110;
                  v73 = 62;
                  goto LABEL_135;
                case 'l':
                  if (v62[2] != 116 || v62[3] != 59)
                    goto LABEL_110;
                  v73 = 60;
LABEL_135:
                  *v56++ = v73;
                  v62 += 4;
                  continue;
                case 'q':
                  if (v62[2] != 117 || v62[3] != 111 || v62[4] != 116 || v62[5] != 59)
                    goto LABEL_110;
                  v74 = 34;
                  goto LABEL_151;
                default:
                  if (v62[1] != 35)
                    goto LABEL_110;
                  v68 = v62 + 2;
                  if (v62[2] == 120)
                  {
                    v69 = 0;
                    do
                    {
                      v70 = v69;
                      v71 = *++v68;
                      v72 = byte_2358A1A73[v71];
                      v69 = v72 + 16 * v69;
                    }
                    while (v72 != 255);
                    if (v70 <= 0x7F)
                      goto LABEL_144;
                  }
                  else
                  {
                    v75 = 0;
                    v68 = v62 + 1;
                    do
                    {
                      v70 = v75;
                      v76 = *++v68;
                      v77 = byte_2358A1A73[v76];
                      v75 = v77 + 10 * v75;
                    }
                    while (v77 != 255);
                    if (v70 <= 0x7F)
                    {
LABEL_144:
                      v78 = 1;
                      goto LABEL_156;
                    }
                  }
                  if (v70 > 0x7FF)
                  {
                    if (v70 >> 16)
                    {
                      if (v70 >> 16 > 0x10)
                        goto LABEL_321;
                      v56[3] = v70 & 0x3F | 0x80;
                      v56[2] = (v70 >> 6) & 0x3F | 0x80;
                      v56[1] = (v70 >> 12) & 0x3F | 0x80;
                      LODWORD(v70) = (v70 >> 18) | 0xFFFFFFF0;
                      v78 = 4;
                    }
                    else
                    {
                      v56[2] = v70 & 0x3F | 0x80;
                      v56[1] = (v70 >> 6) & 0x3F | 0x80;
                      LODWORD(v70) = (v70 >> 12) | 0xFFFFFFE0;
                      v78 = 3;
                    }
                  }
                  else
                  {
                    v56[1] = v70 & 0x3F | 0x80;
                    LODWORD(v70) = (v70 >> 6) | 0xFFFFFFC0;
                    v78 = 2;
                  }
LABEL_156:
                  *v56 = v70;
                  if (*v68 != 59)
                    goto LABEL_318;
                  v56 += v78;
                  v62 = v68 + 1;
                  break;
              }
            }
            else
            {
LABEL_110:
              ++v62;
              *v56++ = v65;
            }
          }
        }
        else
        {
          do
          {
            v64 = *++v56;
            v63 = v64;
            if (v64 < 0)
              v63 = 122;
          }
          while (byte_2358A1C73[v63]);
          *a2 = (unsigned __int8 *)v56;
          v62 = v56;
          while (1)
          {
            v79 = *v62;
            v80 = (v79 & 0x80u) == 0 ? *v62 : 122;
            if (!v80 || v80 == 34)
              break;
            if (v79 == 38)
            {
              switch(v62[1])
              {
                case 'a':
                  v81 = v62[2];
                  if (v81 != 112)
                  {
                    if (v81 == 109 && v62[3] == 112 && v62[4] == 59)
                    {
                      *v56++ = 38;
                      v62 += 5;
                      continue;
                    }
                    goto LABEL_158;
                  }
                  if (v62[3] != 111 || v62[4] != 115 || v62[5] != 59)
                    goto LABEL_158;
                  v87 = 39;
LABEL_199:
                  *v56++ = v87;
                  v62 += 6;
                  continue;
                case 'b':
                case 'c':
                case 'd':
                case 'e':
                case 'f':
                case 'h':
                case 'i':
                case 'j':
                case 'k':
                case 'm':
                case 'n':
                case 'o':
                case 'p':
                  goto LABEL_158;
                case 'g':
                  if (v62[2] != 116 || v62[3] != 59)
                    goto LABEL_158;
                  v86 = 62;
                  goto LABEL_183;
                case 'l':
                  if (v62[2] != 116 || v62[3] != 59)
                    goto LABEL_158;
                  v86 = 60;
LABEL_183:
                  *v56++ = v86;
                  v62 += 4;
                  continue;
                case 'q':
                  if (v62[2] != 117 || v62[3] != 111 || v62[4] != 116 || v62[5] != 59)
                    goto LABEL_158;
                  v87 = 34;
                  goto LABEL_199;
                default:
                  if (v62[1] != 35)
                    goto LABEL_158;
                  v68 = v62 + 2;
                  if (v62[2] == 120)
                  {
                    v82 = 0;
                    do
                    {
                      v83 = v82;
                      v84 = *++v68;
                      v85 = byte_2358A1A73[v84];
                      v82 = v85 + 16 * v82;
                    }
                    while (v85 != 255);
                    if (v83 <= 0x7F)
                      goto LABEL_192;
                  }
                  else
                  {
                    v88 = 0;
                    v68 = v62 + 1;
                    do
                    {
                      v83 = v88;
                      v89 = *++v68;
                      v90 = byte_2358A1A73[v89];
                      v88 = v90 + 10 * v88;
                    }
                    while (v90 != 255);
                    if (v83 <= 0x7F)
                    {
LABEL_192:
                      v91 = 1;
                      goto LABEL_204;
                    }
                  }
                  if (v83 > 0x7FF)
                  {
                    if (v83 >> 16)
                    {
                      if (v83 >> 16 > 0x10)
                      {
LABEL_321:
                        v140 = __cxa_allocate_exception(0x18uLL);
                        *v140 = &off_2506E0200;
                        v140[1] = "invalid numeric character entity";
                        v140[2] = v56;
                        __cxa_throw(v140, (struct type_info *)&unk_2506E0098, (void (*)(void *))std::exception::~exception);
                      }
                      v56[3] = v83 & 0x3F | 0x80;
                      v56[2] = (v83 >> 6) & 0x3F | 0x80;
                      v56[1] = (v83 >> 12) & 0x3F | 0x80;
                      LODWORD(v83) = (v83 >> 18) | 0xFFFFFFF0;
                      v91 = 4;
                    }
                    else
                    {
                      v56[2] = v83 & 0x3F | 0x80;
                      v56[1] = (v83 >> 6) & 0x3F | 0x80;
                      LODWORD(v83) = (v83 >> 12) | 0xFFFFFFE0;
                      v91 = 3;
                    }
                  }
                  else
                  {
                    v56[1] = v83 & 0x3F | 0x80;
                    LODWORD(v83) = (v83 >> 6) | 0xFFFFFFC0;
                    v91 = 2;
                  }
LABEL_204:
                  *v56 = v83;
                  if (*v68 != 59)
                  {
LABEL_318:
                    v135 = __cxa_allocate_exception(0x18uLL);
                    v136 = "expected ;";
LABEL_319:
                    *v135 = &off_2506E0200;
                    v135[1] = v136;
                    v135[2] = v68;
                    __cxa_throw(v135, (struct type_info *)&unk_2506E0098, (void (*)(void *))std::exception::~exception);
                  }
                  v56 += v91;
                  v62 = v68 + 1;
                  break;
              }
            }
            else
            {
LABEL_158:
              ++v62;
              *v56++ = v79;
            }
          }
        }
        *a2 = (unsigned __int8 *)v62;
        v92 = (char *)(v56 - (char *)v54);
        v42[1] = v55;
        v42[3] = v92;
        if (**a2 != v59)
        {
LABEL_315:
          v137 = a2;
          exception = __cxa_allocate_exception(0x18uLL);
          v25 = *v137;
          v26 = "expected ' or \"";
          goto LABEL_56;
        }
        ++*a2;
        v93 = v42[1];
        if (!v93)
        {
          v93 = &byte_2563067E8;
          v92 = 0;
        }
        v92[(_QWORD)v93] = 0;
        v34 = *a2 - 1;
        do
        {
          v95 = (char)*++v34;
          v94 = v95;
          if (v95 < 0)
            v94 = 122;
        }
        while (byte_2358A1773[v94]);
        *a2 = v34;
        v37 = (char)*v34;
        if (v37 >= 0)
          v96 = *v34;
        else
          v96 = 122;
        if (!byte_2358A1973[v96])
          goto LABEL_217;
      }
      v138 = a2;
      exception = __cxa_allocate_exception(0x18uLL);
      v25 = *v138;
      v26 = "expected =";
LABEL_56:
      *exception = &off_2506E0200;
      exception[1] = v26;
      exception[2] = v25;
      __cxa_throw(exception, (struct type_info *)&unk_2506E0098, (void (*)(void *))std::exception::~exception);
    }
LABEL_217:
    if (v37 != 47)
    {
      if (v37 == 62)
      {
        *a2 = v34 + 1;
        v143 = (uint64_t (**)(uint64_t))(a1 + 8207);
        while (1)
        {
          v99 = *a2;
          v101 = (uint64_t)(*a2 - 1);
          v100 = **a2;
          while (v100 != 60)
          {
            if (!v100)
              goto LABEL_55;
            *a2 = v99;
            v68 = (char *)v101;
            do
            {
              v103 = *++v68;
              v102 = v103;
              if (v103 < 0)
                v102 = 122;
            }
            while (byte_2358A1E73[v102]);
            *a2 = (unsigned __int8 *)v68;
            v104 = v68;
            while (1)
            {
              v105 = *v104;
              v106 = (v105 & 0x80u) == 0 ? *v104 : 122;
              if (!v106 || v106 == 60)
                break;
              if (v105 == 38)
              {
                switch(v104[1])
                {
                  case 'a':
                    v107 = v104[2];
                    if (v107 != 112)
                    {
                      if (v107 == 109 && v104[3] == 112 && v104[4] == 59)
                      {
                        *v68++ = 38;
                        v104 += 5;
                        continue;
                      }
                      goto LABEL_232;
                    }
                    if (v104[3] != 111 || v104[4] != 115 || v104[5] != 59)
                      goto LABEL_232;
                    v113 = 39;
LABEL_273:
                    *v68++ = v113;
                    v104 += 6;
                    continue;
                  case 'b':
                  case 'c':
                  case 'd':
                  case 'e':
                  case 'f':
                  case 'h':
                  case 'i':
                  case 'j':
                  case 'k':
                  case 'm':
                  case 'n':
                  case 'o':
                  case 'p':
                    goto LABEL_232;
                  case 'g':
                    if (v104[2] != 116 || v104[3] != 59)
                      goto LABEL_232;
                    v112 = 62;
                    goto LABEL_262;
                  case 'l':
                    if (v104[2] != 116 || v104[3] != 59)
                      goto LABEL_232;
                    v112 = 60;
LABEL_262:
                    *v68++ = v112;
                    v104 += 4;
                    continue;
                  case 'q':
                    if (v104[2] != 117 || v104[3] != 111 || v104[4] != 116 || v104[5] != 59)
                      goto LABEL_232;
                    v113 = 34;
                    goto LABEL_273;
                  default:
                    if (v104[1] != 35)
                      goto LABEL_232;
                    v34 = (unsigned __int8 *)(v104 + 2);
                    if (v104[2] == 120)
                    {
                      v108 = 0;
                      do
                      {
                        v109 = v108;
                        v110 = *++v34;
                        v111 = byte_2358A1A73[v110];
                        v108 = v111 + 16 * v108;
                      }
                      while (v111 != 255);
                      if (v109 <= 0x7F)
                        goto LABEL_266;
                    }
                    else
                    {
                      v114 = 0;
                      v34 = (unsigned __int8 *)(v104 + 1);
                      do
                      {
                        v109 = v114;
                        v115 = *++v34;
                        v116 = byte_2358A1A73[v115];
                        v114 = v116 + 10 * v114;
                      }
                      while (v116 != 255);
                      if (v109 <= 0x7F)
                      {
LABEL_266:
                        v117 = 1;
                        goto LABEL_278;
                      }
                    }
                    if (v109 > 0x7FF)
                    {
                      if (v109 >> 16)
                      {
                        if (v109 >> 16 > 0x10)
                        {
                          v135 = __cxa_allocate_exception(0x18uLL);
                          v136 = "invalid numeric character entity";
                          goto LABEL_319;
                        }
                        v68[3] = v109 & 0x3F | 0x80;
                        v68[2] = (v109 >> 6) & 0x3F | 0x80;
                        v68[1] = (v109 >> 12) & 0x3F | 0x80;
                        LODWORD(v109) = (v109 >> 18) | 0xFFFFFFF0;
                        v117 = 4;
                      }
                      else
                      {
                        v68[2] = v109 & 0x3F | 0x80;
                        v68[1] = (v109 >> 6) & 0x3F | 0x80;
                        LODWORD(v109) = (v109 >> 12) | 0xFFFFFFE0;
                        v117 = 3;
                      }
                    }
                    else
                    {
                      v68[1] = v109 & 0x3F | 0x80;
                      LODWORD(v109) = (v109 >> 6) | 0xFFFFFFC0;
                      v117 = 2;
                    }
LABEL_278:
                    *v68 = v109;
                    if (*v34 != 59)
                    {
                      v133 = __cxa_allocate_exception(0x18uLL);
                      v134 = "expected ;";
                      goto LABEL_313;
                    }
                    v68 += v117;
                    v104 = (char *)(v34 + 1);
                    break;
                }
              }
              else
              {
LABEL_232:
                ++v104;
                *v68++ = v105;
              }
            }
            *a2 = (unsigned __int8 *)v104;
            v118 = a1[13] + (-*((_BYTE *)a1 + 104) & 7);
            if ((unint64_t)(v118 + 96) > a1[14])
            {
              v119 = v101;
              if (*v143)
                v120 = (*v143)(65558);
              else
                v120 = operator new[]();
              v121 = (_QWORD *)(v120 + (-(int)v120 & 7));
              *v121 = a1[12];
              a1[12] = v120;
              a1[14] = v120 + 65558;
              v118 = (uint64_t)v121 + (-((_DWORD)v121 + 8) & 7) + 8;
              v29 = (uint64_t *)(v11 + 48);
              a2 = v145;
              v101 = v119;
            }
            a1[13] = v118 + 96;
            *(_DWORD *)(v118 + 40) = 2;
            *(_QWORD *)(v118 + 48) = 0;
            *(_QWORD *)(v118 + 64) = 0;
            *(_QWORD *)v118 = 0;
            *(_QWORD *)(v118 + 8) = v99;
            *(_QWORD *)(v118 + 24) = v68 - (char *)v99;
            v122 = *v29;
            if (*v29)
            {
              v122 = *(_QWORD *)(v11 + 56);
              v123 = (uint64_t *)(v122 + 88);
            }
            else
            {
              v123 = v29;
            }
            *v123 = v118;
            *(_QWORD *)(v118 + 80) = v122;
            *(_QWORD *)(v11 + 56) = v118;
            *(_QWORD *)(v118 + 32) = v11;
            *(_QWORD *)(v118 + 88) = 0;
            v124 = *(char **)(v11 + 8);
            if (!v124)
              v124 = &byte_2563067E8;
            if (!*v124)
            {
              *(_QWORD *)(v11 + 8) = v99;
              *(_QWORD *)(v11 + 24) = v68 - (char *)v99;
            }
            v100 = **a2;
            *v68 = 0;
          }
          v125 = *a2;
          v126 = (*a2)[1];
          if (v126 == 47)
          {
            *a2 = v125 + 2;
            v127 = (char *)(v125 + 1);
            do
            {
              v129 = *++v127;
              v128 = v129;
              if (v129 < 0)
                v128 = 122;
            }
            while (byte_2358A1873[v128]);
            *a2 = (unsigned __int8 *)v127;
            do
            {
              v131 = *v127++;
              v130 = v131;
              if (v131 < 0)
                v130 = 122;
            }
            while (byte_2358A1773[v130]);
            *a2 = (unsigned __int8 *)(v127 - 1);
            if (*(v127 - 1) != 62)
              goto LABEL_320;
            *a2 = (unsigned __int8 *)v127;
          }
          else
          {
            ++*a2;
            v132 = (_QWORD *)sub_2358724A8(a1, v145, &byte_2563067E8);
            v29 = (uint64_t *)(v11 + 48);
            a2 = v145;
            if (v132)
            {
              v97 = *v144;
              if (*v144)
              {
                v97 = *(_QWORD *)(v11 + 56);
                v98 = (_QWORD *)(v97 + 88);
              }
              else
              {
                v98 = (_QWORD *)(v11 + 48);
              }
              *v98 = v132;
              v132[10] = v97;
              *(_QWORD *)(v11 + 56) = v132;
              v132[4] = v11;
              v132[11] = 0;
            }
          }
          if (v126 == 47)
            goto LABEL_308;
        }
      }
      goto LABEL_320;
    }
    *a2 = v34 + 1;
    if (v34[1] != 62)
    {
LABEL_320:
      v139 = a2;
      exception = __cxa_allocate_exception(0x18uLL);
      v25 = *v139;
      v26 = "expected >";
      goto LABEL_56;
    }
    *a2 = v34 + 2;
LABEL_308:
    if (*(_QWORD *)v11)
      *(_BYTE *)(*(_QWORD *)v11 + *(_QWORD *)(v11 + 16)) = 0;
    else
      byte_2563067E8 = 0;
    return v11;
  }
  v13 = (char)v6[1];
  if (v13 == 45)
  {
    if (v6[2] == 45)
    {
      for (k = v6 + 3; ; ++k)
      {
        *a2 = k;
        if (*k == 45)
        {
          if (k[1] == 45 && k[2] == 62)
          {
            v11 = 0;
            v12 = k + 3;
            goto LABEL_58;
          }
        }
        else if (!*k)
        {
LABEL_55:
          v23 = a2;
          exception = __cxa_allocate_exception(0x18uLL);
          v25 = *v23;
          v26 = "unexpected end of data";
          goto LABEL_56;
        }
      }
    }
    goto LABEL_52;
  }
  if (v13 != 68)
  {
    if (v13 == 91 && v6[2] == 67 && v6[3] == 68 && v6[4] == 65 && v6[5] == 84 && v6[6] == 65 && v6[7] == 91)
    {
      *a2 = v6 + 8;
      return sub_235872240(a1, a2);
    }
    goto LABEL_52;
  }
  if (v6[2] != 79 || v6[3] != 67 || v6[4] != 84 || v6[5] != 89 || v6[6] != 80 || v6[7] != 69)
    goto LABEL_52;
  v20 = (char)v6[8];
  if (v20 < 0)
    LOBYTE(v20) = 122;
  if (!byte_2358A1773[v20])
  {
LABEL_52:
    v12 = v6 + 1;
    while (1)
    {
      *a2 = v12;
      v22 = *v12++;
      v21 = v22;
      if (v22 == 62)
        break;
      if (!v21)
        goto LABEL_55;
    }
    v11 = 0;
LABEL_58:
    *a2 = v12;
    return v11;
  }
  *a2 = v6 + 9;
  sub_2358723A8((uint64_t *)a2);
  return 0;
}

uint64_t sub_2358736E8(_QWORD *a1, unsigned __int8 **a2)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  int v4;
  int v5;
  int v6;
  unsigned __int8 *i;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  unsigned __int8 *j;
  unsigned __int8 v15;
  _BYTE *v16;
  unsigned __int8 *k;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  unsigned __int8 **v23;
  _QWORD *exception;
  unsigned __int8 *v25;
  const char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  char ***v30;
  unsigned __int8 *v31;
  int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 v35;
  int v36;
  int v37;
  unsigned __int8 v38;
  _BYTE *v39;
  uint64_t v40;
  int v41;
  char **v42;
  _BYTE *v43;
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  char **v47;
  char ***v48;
  char *v49;
  unsigned __int8 v50;
  int v51;
  char *v52;
  unsigned __int8 *v53;
  char *v54;
  char *v55;
  unsigned __int8 v56;
  int v57;
  int v58;
  unsigned __int8 v59;
  int v60;
  char *v61;
  unsigned __int8 v62;
  int v63;
  int v64;
  int v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  char v71;
  char v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  char v84;
  char v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  unsigned __int8 v92;
  int v93;
  unsigned __int8 v94;
  uint64_t v95;
  uint64_t *v96;
  unsigned __int8 *v97;
  unsigned __int8 v98;
  int v99;
  unsigned __int8 v100;
  unsigned __int8 *v101;
  char *v102;
  unsigned __int8 v103;
  int v104;
  char *v105;
  int v106;
  uint64_t v107;
  int v108;
  _BYTE *v109;
  unint64_t v110;
  unint64_t v111;
  int v112;
  uint64_t v113;
  char v114;
  char v115;
  unint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  unsigned __int8 v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t *v126;
  char *v127;
  unsigned __int8 *v128;
  int v129;
  char *v130;
  unsigned __int8 v131;
  int v132;
  unsigned __int8 v133;
  int v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  unsigned __int8 **v140;
  _QWORD *v141;
  const char *v142;
  unsigned __int8 **v143;
  unsigned __int8 **v144;
  _QWORD *v145;
  unsigned __int8 **v146;
  uint64_t (**v147)(uint64_t);
  uint64_t (**v148)(uint64_t);
  uint64_t *v149;
  uint64_t v150;
  unsigned __int8 **v152;

  v2 = a1;
  v3 = *a2;
  v4 = (char)**a2;
  v152 = a2;
  if (v4 != 33)
  {
    if (v4 == 63)
    {
      *a2 = v3 + 1;
      v5 = v3[1];
      if ((v5 | 0x20) == 0x78 && (v3[2] | 0x20) == 0x6D && (v3[3] | 0x20) == 0x6C)
      {
        v6 = (char)v3[4];
        if (v6 < 0)
          LOBYTE(v6) = 122;
        if (byte_2358A1773[v6])
        {
          for (i = v3 + 5; ; ++i)
          {
            *a2 = i;
            if (*i == 63)
            {
              if (i[1] == 62)
              {
                v8 = 0;
                v9 = i + 2;
                goto LABEL_60;
              }
            }
            else if (!*i)
            {
              goto LABEL_57;
            }
          }
        }
      }
      for (j = v3 + 2; ; ++j)
      {
        if (v5 == 63)
        {
          if (*j == 62)
          {
            v8 = 0;
            v9 = j + 1;
            goto LABEL_60;
          }
        }
        else if (!(_BYTE)v5)
        {
          goto LABEL_57;
        }
        *a2 = j;
        v15 = *j;
        LOBYTE(v5) = v15;
      }
    }
    v8 = a1[13] + (-*((_BYTE *)a1 + 104) & 7);
    if ((unint64_t)(v8 + 96) > a1[14])
    {
      v12 = (uint64_t (*)(uint64_t))a1[8207];
      if (v12)
        v13 = v12(65558);
      else
        v13 = operator new[]();
      v27 = (_QWORD *)(v13 + (-(int)v13 & 7));
      v2 = a1;
      a2 = v152;
      *v27 = a1[12];
      a1[12] = v13;
      a1[14] = v13 + 65558;
      v8 = (uint64_t)v27 + (-((_DWORD)v27 + 8) & 7) + 8;
    }
    v28 = 0;
    v2[13] = v8 + 96;
    *(_QWORD *)(v8 + 32) = 0;
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
    *(_DWORD *)(v8 + 40) = 1;
    *(_QWORD *)(v8 + 48) = 0;
    v29 = (uint64_t *)(v8 + 48);
    *(_QWORD *)(v8 + 64) = 0;
    v30 = (char ***)(v8 + 64);
    v31 = *a2;
    do
    {
      v32 = (char)v31[v28];
      if (v32 < 0)
        LOBYTE(v32) = 122;
      ++v28;
    }
    while (byte_2358A1873[v32]);
    *a2 = &v31[v28 - 1];
    v33 = v28 - 1;
    if (!v33)
    {
      v146 = a2;
      exception = __cxa_allocate_exception(0x18uLL);
      v25 = *v146;
      v26 = "expected element name";
      goto LABEL_58;
    }
    *(_QWORD *)v8 = v31;
    *(_QWORD *)(v8 + 16) = v33;
    v34 = *a2 - 1;
    do
    {
      v36 = (char)*++v34;
      v35 = v36;
      if (v36 < 0)
        v35 = 122;
    }
    while (byte_2358A1773[v35]);
    *a2 = v34;
    v37 = (char)*v34;
    if (v37 >= 0)
      v38 = *v34;
    else
      v38 = 122;
    v149 = (uint64_t *)(v8 + 48);
    v150 = v8;
    if (byte_2358A1973[v38])
    {
      v147 = (uint64_t (**)(uint64_t))(v2 + 8207);
      v39 = &unk_2358A1B73;
      while (1)
      {
        v40 = 0;
        *a2 = v34 + 1;
        do
        {
          v41 = (char)v34[v40 + 1];
          if (v41 < 0)
            LOBYTE(v41) = 122;
          ++v40;
        }
        while (byte_2358A1973[v41]);
        *a2 = &v34[v40];
        if (!v40)
        {
          v141 = __cxa_allocate_exception(0x18uLL);
          v142 = "expected attribute name";
          goto LABEL_335;
        }
        v42 = (char **)(v2[13] + (-*((_BYTE *)v2 + 104) & 7));
        if ((unint64_t)(v42 + 7) > v2[14])
        {
          v43 = v39;
          if (*v147)
            v44 = (*v147)(65558);
          else
            v44 = operator new[]();
          v45 = (_QWORD *)(v44 + (-(int)v44 & 7));
          v2 = a1;
          a2 = v152;
          *v45 = a1[12];
          a1[12] = v44;
          a1[14] = v44 + 65558;
          v42 = (char **)((char *)v45 + (-((_DWORD)v45 + 8) & 7) + 8);
          v29 = v149;
          v8 = v150;
          v39 = v43;
        }
        v2[13] = v42 + 7;
        v42[4] = 0;
        *v42 = 0;
        v42[1] = 0;
        v46 = (char *)(*a2 - v34);
        *v42 = (char *)v34;
        v42[2] = v46;
        v47 = *v30;
        if (*v30)
        {
          v47 = *(char ***)(v8 + 72);
          v48 = (char ***)(v47 + 6);
        }
        else
        {
          v48 = v30;
        }
        *v48 = v42;
        v42[5] = (char *)v47;
        *(_QWORD *)(v8 + 72) = v42;
        v42[4] = (char *)v8;
        v42[6] = 0;
        v49 = (char *)*a2;
        do
        {
          v51 = *v49++;
          v50 = v51;
          if (v51 < 0)
            v50 = 122;
        }
        while (byte_2358A1773[v50]);
        *a2 = (unsigned __int8 *)(v49 - 1);
        if (*(v49 - 1) != 61)
          break;
        *a2 = (unsigned __int8 *)v49;
        v52 = *v42;
        if (!*v42)
        {
          v52 = &byte_2563067E8;
          v46 = 0;
        }
        v46[(_QWORD)v52] = 0;
        v53 = *a2;
        v54 = (char *)*a2;
        do
        {
          v55 = v54;
          v57 = *v54++;
          v56 = v57;
          if (v57 < 0)
            v56 = 122;
          ++v53;
        }
        while (byte_2358A1773[v56]);
        *a2 = (unsigned __int8 *)(v54 - 1);
        v58 = *(v54 - 1);
        if (v58 != 34 && v58 != 39)
          goto LABEL_331;
        *a2 = (unsigned __int8 *)v54;
        if (v58 != 39)
        {
          do
          {
            v63 = *++v55;
            v62 = v63;
            if (v63 < 0)
              v62 = 122;
          }
          while (byte_2358A1C73[v62]);
          *a2 = (unsigned __int8 *)v55;
          v61 = v55;
          while (1)
          {
            while (1)
            {
LABEL_161:
              v77 = *v61;
              if ((v77 & 0x80u) == 0)
                v78 = *v61;
              else
                v78 = 122;
              if (!v78 || v78 == 34)
                goto LABEL_208;
              if (v77 == 38)
                break;
LABEL_160:
              ++v61;
              *v55++ = v77;
            }
            switch(v61[1])
            {
              case 'a':
                v79 = v61[2];
                if (v79 != 112)
                {
                  if (v79 == 109 && v61[3] == 112 && v61[4] == 59)
                  {
                    *v55++ = 38;
                    v61 += 5;
                    goto LABEL_161;
                  }
                  goto LABEL_160;
                }
                if (v61[3] != 111 || v61[4] != 115 || v61[5] != 59)
                  goto LABEL_160;
                v85 = 39;
LABEL_201:
                *v55++ = v85;
                v61 += 6;
                goto LABEL_161;
              case 'b':
              case 'c':
              case 'd':
              case 'e':
              case 'f':
              case 'h':
              case 'i':
              case 'j':
              case 'k':
              case 'm':
              case 'n':
              case 'o':
              case 'p':
                goto LABEL_160;
              case 'g':
                if (v61[2] != 116 || v61[3] != 59)
                  goto LABEL_160;
                v84 = 62;
                goto LABEL_185;
              case 'l':
                if (v61[2] != 116 || v61[3] != 59)
                  goto LABEL_160;
                v84 = 60;
LABEL_185:
                *v55++ = v84;
                v61 += 4;
                goto LABEL_161;
              case 'q':
                if (v61[2] != 117 || v61[3] != 111 || v61[4] != 116 || v61[5] != 59)
                  goto LABEL_160;
                v85 = 34;
                goto LABEL_201;
              default:
                if (v61[1] != 35)
                  goto LABEL_160;
                v34 = (unsigned __int8 *)(v61 + 2);
                if (v61[2] == 120)
                {
                  v80 = 0;
                  do
                  {
                    v81 = v80;
                    v82 = *++v34;
                    v83 = byte_2358A1A73[v82];
                    v80 = v83 + 16 * v80;
                  }
                  while (v83 != 255);
                  if (v81 <= 0x7F)
                    goto LABEL_194;
                }
                else
                {
                  v86 = 0;
                  v34 = (unsigned __int8 *)(v61 + 1);
                  do
                  {
                    v81 = v86;
                    v87 = *++v34;
                    v88 = byte_2358A1A73[v87];
                    v86 = v88 + 10 * v86;
                  }
                  while (v88 != 255);
                  if (v81 <= 0x7F)
                  {
LABEL_194:
                    v89 = 1;
                    goto LABEL_206;
                  }
                }
                if (v81 > 0x7FF)
                {
                  if (v81 >> 16)
                  {
                    if (v81 >> 16 > 0x10)
                    {
LABEL_337:
                      v145 = __cxa_allocate_exception(0x18uLL);
                      *v145 = &off_2506E0200;
                      v145[1] = "invalid numeric character entity";
                      v145[2] = v55;
                      __cxa_throw(v145, (struct type_info *)&unk_2506E0098, (void (*)(void *))std::exception::~exception);
                    }
                    v55[3] = v81 & 0x3F | 0x80;
                    v55[2] = (v81 >> 6) & 0x3F | 0x80;
                    v55[1] = (v81 >> 12) & 0x3F | 0x80;
                    LODWORD(v81) = (v81 >> 18) | 0xFFFFFFF0;
                    v89 = 4;
                  }
                  else
                  {
                    v55[2] = v81 & 0x3F | 0x80;
                    v55[1] = (v81 >> 6) & 0x3F | 0x80;
                    LODWORD(v81) = (v81 >> 12) | 0xFFFFFFE0;
                    v89 = 3;
                  }
                }
                else
                {
                  v55[1] = v81 & 0x3F | 0x80;
                  LODWORD(v81) = (v81 >> 6) | 0xFFFFFFC0;
                  v89 = 2;
                }
LABEL_206:
                *v55 = v81;
                if (*v34 != 59)
                {
LABEL_334:
                  v141 = __cxa_allocate_exception(0x18uLL);
                  v142 = "expected ;";
LABEL_335:
                  *v141 = &off_2506E0200;
                  v141[1] = v142;
                  v141[2] = v34;
                  __cxa_throw(v141, (struct type_info *)&unk_2506E0098, (void (*)(void *))std::exception::~exception);
                }
                v55 += v89;
                v61 = (char *)(v34 + 1);
                break;
            }
          }
        }
        do
        {
          v60 = *++v55;
          v59 = v60;
          if (v60 < 0)
            v59 = 122;
        }
        while (v39[v59]);
        *a2 = (unsigned __int8 *)v55;
        v61 = v55;
        while (1)
        {
          v64 = *v61;
          v65 = (v64 & 0x80u) == 0 ? *v61 : 122;
          if (!v65 || v65 == 39)
            break;
          if (v64 == 38)
          {
            switch(v61[1])
            {
              case 'a':
                v66 = v61[2];
                if (v66 != 112)
                {
                  if (v66 == 109 && v61[3] == 112 && v61[4] == 59)
                  {
                    *v55++ = 38;
                    v61 += 5;
                    continue;
                  }
                  goto LABEL_112;
                }
                if (v61[3] != 111 || v61[4] != 115 || v61[5] != 59)
                  goto LABEL_112;
                v72 = 39;
LABEL_153:
                *v55++ = v72;
                v61 += 6;
                continue;
              case 'b':
              case 'c':
              case 'd':
              case 'e':
              case 'f':
              case 'h':
              case 'i':
              case 'j':
              case 'k':
              case 'm':
              case 'n':
              case 'o':
              case 'p':
                goto LABEL_112;
              case 'g':
                if (v61[2] != 116 || v61[3] != 59)
                  goto LABEL_112;
                v71 = 62;
                goto LABEL_137;
              case 'l':
                if (v61[2] != 116 || v61[3] != 59)
                  goto LABEL_112;
                v71 = 60;
LABEL_137:
                *v55++ = v71;
                v61 += 4;
                continue;
              case 'q':
                if (v61[2] != 117 || v61[3] != 111 || v61[4] != 116 || v61[5] != 59)
                  goto LABEL_112;
                v72 = 34;
                goto LABEL_153;
              default:
                if (v61[1] != 35)
                  goto LABEL_112;
                v34 = (unsigned __int8 *)(v61 + 2);
                if (v61[2] == 120)
                {
                  v67 = 0;
                  do
                  {
                    v68 = v67;
                    v69 = *++v34;
                    v70 = byte_2358A1A73[v69];
                    v67 = v70 + 16 * v67;
                  }
                  while (v70 != 255);
                  if (v68 <= 0x7F)
                    goto LABEL_146;
                }
                else
                {
                  v73 = 0;
                  v34 = (unsigned __int8 *)(v61 + 1);
                  do
                  {
                    v68 = v73;
                    v74 = *++v34;
                    v75 = byte_2358A1A73[v74];
                    v73 = v75 + 10 * v73;
                  }
                  while (v75 != 255);
                  if (v68 <= 0x7F)
                  {
LABEL_146:
                    v76 = 1;
                    goto LABEL_158;
                  }
                }
                if (v68 > 0x7FF)
                {
                  if (v68 >> 16)
                  {
                    if (v68 >> 16 > 0x10)
                      goto LABEL_337;
                    v55[3] = v68 & 0x3F | 0x80;
                    v55[2] = (v68 >> 6) & 0x3F | 0x80;
                    v55[1] = (v68 >> 12) & 0x3F | 0x80;
                    LODWORD(v68) = (v68 >> 18) | 0xFFFFFFF0;
                    v76 = 4;
                  }
                  else
                  {
                    v55[2] = v68 & 0x3F | 0x80;
                    v55[1] = (v68 >> 6) & 0x3F | 0x80;
                    LODWORD(v68) = (v68 >> 12) | 0xFFFFFFE0;
                    v76 = 3;
                  }
                }
                else
                {
                  v55[1] = v68 & 0x3F | 0x80;
                  LODWORD(v68) = (v68 >> 6) | 0xFFFFFFC0;
                  v76 = 2;
                }
LABEL_158:
                *v55 = v68;
                if (*v34 != 59)
                  goto LABEL_334;
                v55 += v76;
                v61 = (char *)(v34 + 1);
                break;
            }
          }
          else
          {
LABEL_112:
            ++v61;
            *v55++ = v64;
          }
        }
LABEL_208:
        *a2 = (unsigned __int8 *)v61;
        v90 = (char *)(v55 - (char *)v53);
        v42[1] = v54;
        v42[3] = v90;
        if (**a2 != v58)
        {
LABEL_331:
          v140 = a2;
          exception = __cxa_allocate_exception(0x18uLL);
          v25 = *v140;
          v26 = "expected ' or \"";
          goto LABEL_58;
        }
        ++*a2;
        v91 = v42[1];
        if (!v91)
        {
          v91 = &byte_2563067E8;
          v90 = 0;
        }
        v90[(_QWORD)v91] = 0;
        v34 = *a2 - 1;
        do
        {
          v93 = (char)*++v34;
          v92 = v93;
          if (v93 < 0)
            v92 = 122;
        }
        while (byte_2358A1773[v92]);
        *a2 = v34;
        v37 = (char)*v34;
        if (v37 >= 0)
          v94 = *v34;
        else
          v94 = 122;
        if (!byte_2358A1973[v94])
          goto LABEL_219;
      }
      v143 = a2;
      exception = __cxa_allocate_exception(0x18uLL);
      v25 = *v143;
      v26 = "expected =";
LABEL_58:
      *exception = &off_2506E0200;
      exception[1] = v26;
      exception[2] = v25;
      __cxa_throw(exception, (struct type_info *)&unk_2506E0098, (void (*)(void *))std::exception::~exception);
    }
LABEL_219:
    if (v37 != 47)
    {
      if (v37 == 62)
      {
        *a2 = v34 + 1;
        v148 = (uint64_t (**)(uint64_t))(v2 + 8207);
        while (1)
        {
          v97 = *a2 - 1;
          do
          {
            v99 = (char)*++v97;
            v98 = v99;
            if (v99 < 0)
              v98 = 122;
          }
          while (byte_2358A1773[v98]);
          *a2 = v97;
          v100 = *v97;
          while (v100 != 60)
          {
            if (!v100)
              goto LABEL_57;
            v101 = *a2;
            v102 = (char *)(*a2 - 1);
            do
            {
              v104 = *++v102;
              v103 = v104;
              if (v104 < 0)
                v103 = 122;
            }
            while (byte_2358A1D73[v103]);
            *a2 = (unsigned __int8 *)v102;
            v105 = v102;
            while (1)
            {
              v106 = *v105;
              v107 = (v106 & 0x80u) == 0 ? *v105 : 122;
              if (!(_DWORD)v107 || (_DWORD)v107 == 60)
                break;
              if (v106 == 38)
              {
                switch(v105[1])
                {
                  case 'a':
                    v108 = v105[2];
                    if (v108 != 112)
                    {
                      if (v108 == 109 && v105[3] == 112 && v105[4] == 59)
                      {
                        *v102++ = 38;
                        v105 += 5;
                        continue;
                      }
                      goto LABEL_280;
                    }
                    if (v105[3] != 111 || v105[4] != 115 || v105[5] != 59)
                      goto LABEL_280;
                    v115 = 39;
LABEL_279:
                    *v102++ = v115;
                    v105 += 6;
                    continue;
                  case 'b':
                  case 'c':
                  case 'd':
                  case 'e':
                  case 'f':
                  case 'h':
                  case 'i':
                  case 'j':
                  case 'k':
                  case 'm':
                  case 'n':
                  case 'o':
                  case 'p':
                    goto LABEL_280;
                  case 'g':
                    if (v105[2] != 116 || v105[3] != 59)
                      goto LABEL_280;
                    v114 = 62;
                    goto LABEL_268;
                  case 'l':
                    if (v105[2] != 116 || v105[3] != 59)
                      goto LABEL_280;
                    v114 = 60;
LABEL_268:
                    *v102++ = v114;
                    v105 += 4;
                    continue;
                  case 'q':
                    if (v105[2] != 117 || v105[3] != 111 || v105[4] != 116 || v105[5] != 59)
                      goto LABEL_280;
                    v115 = 34;
                    goto LABEL_279;
                  default:
                    if (v105[1] != 35)
                      goto LABEL_280;
                    v109 = v105 + 2;
                    if (v105[2] == 120)
                    {
                      v110 = 0;
                      do
                      {
                        v111 = v110;
                        v112 = *++v109;
                        v113 = byte_2358A1A73[v112];
                        v110 = v113 + 16 * v110;
                      }
                      while (v113 != 255);
                      if (v111 <= 0x7F)
                        goto LABEL_272;
                    }
                    else
                    {
                      v116 = 0;
                      v109 = v105 + 1;
                      do
                      {
                        v111 = v116;
                        v117 = *++v109;
                        v118 = byte_2358A1A73[v117];
                        v116 = v118 + 10 * v116;
                      }
                      while (v118 != 255);
                      if (v111 <= 0x7F)
                      {
LABEL_272:
                        v119 = 1;
                        goto LABEL_290;
                      }
                    }
                    if (v111 > 0x7FF)
                    {
                      if (v111 >> 16)
                      {
                        if (v111 >> 16 > 0x10)
                        {
                          v139 = __cxa_allocate_exception(0x18uLL);
                          *v139 = &off_2506E0200;
                          v139[1] = "invalid numeric character entity";
                          v139[2] = v102;
                          __cxa_throw(v139, (struct type_info *)&unk_2506E0098, (void (*)(void *))std::exception::~exception);
                        }
                        v102[3] = v111 & 0x3F | 0x80;
                        v102[2] = (v111 >> 6) & 0x3F | 0x80;
                        v102[1] = (v111 >> 12) & 0x3F | 0x80;
                        LODWORD(v111) = (v111 >> 18) | 0xFFFFFFF0;
                        v119 = 4;
                      }
                      else
                      {
                        v102[2] = v111 & 0x3F | 0x80;
                        v102[1] = (v111 >> 6) & 0x3F | 0x80;
                        LODWORD(v111) = (v111 >> 12) | 0xFFFFFFE0;
                        v119 = 3;
                      }
                    }
                    else
                    {
                      v102[1] = v111 & 0x3F | 0x80;
                      LODWORD(v111) = (v111 >> 6) | 0xFFFFFFC0;
                      v119 = 2;
                    }
LABEL_290:
                    *v102 = v111;
                    if (*v109 != 59)
                    {
                      v138 = __cxa_allocate_exception(0x18uLL);
                      *v138 = &off_2506E0200;
                      v138[1] = "expected ;";
                      v138[2] = v109;
                      __cxa_throw(v138, (struct type_info *)&unk_2506E0098, (void (*)(void *))std::exception::~exception);
                    }
                    v102 += v119;
                    v105 = v109 + 1;
                    break;
                }
              }
              else
              {
LABEL_280:
                if (byte_2358A1773[v107])
                {
                  *v102 = 32;
                  do
                  {
                    v121 = *++v105;
                    v120 = v121;
                    if (v121 < 0)
                      v120 = 122;
                  }
                  while (byte_2358A1773[v120]);
                  ++v102;
                }
                else
                {
                  ++v105;
                  *v102++ = v106;
                }
              }
            }
            *a2 = (unsigned __int8 *)v105;
            if (*(v102 - 1) == 32)
              --v102;
            v122 = v2[13] + (-*((_BYTE *)v2 + 104) & 7);
            if ((unint64_t)(v122 + 96) > v2[14])
            {
              if (*v148)
                v123 = (*v148)(65558);
              else
                v123 = operator new[]();
              v124 = (_QWORD *)(v123 + (-(int)v123 & 7));
              v2 = a1;
              a2 = v152;
              *v124 = a1[12];
              a1[12] = v123;
              a1[14] = v123 + 65558;
              v122 = (uint64_t)v124 + (-((_DWORD)v124 + 8) & 7) + 8;
              v29 = v149;
              v8 = v150;
            }
            v2[13] = v122 + 96;
            *(_DWORD *)(v122 + 40) = 2;
            *(_QWORD *)(v122 + 48) = 0;
            *(_QWORD *)(v122 + 64) = 0;
            *(_QWORD *)v122 = 0;
            *(_QWORD *)(v122 + 8) = v101;
            *(_QWORD *)(v122 + 24) = v102 - (char *)v101;
            v125 = *v29;
            if (*v29)
            {
              v125 = *(_QWORD *)(v8 + 56);
              v126 = (uint64_t *)(v125 + 88);
            }
            else
            {
              v126 = v29;
            }
            *v126 = v122;
            *(_QWORD *)(v122 + 80) = v125;
            *(_QWORD *)(v8 + 56) = v122;
            *(_QWORD *)(v122 + 32) = v8;
            *(_QWORD *)(v122 + 88) = 0;
            v127 = *(char **)(v8 + 8);
            if (!v127)
              v127 = &byte_2563067E8;
            if (!*v127)
            {
              *(_QWORD *)(v8 + 8) = v101;
              *(_QWORD *)(v8 + 24) = v102 - (char *)v101;
            }
            v100 = **a2;
            *v102 = 0;
          }
          v128 = *a2;
          v129 = (*a2)[1];
          if (v129 == 47)
          {
            *a2 = v128 + 2;
            v130 = (char *)(v128 + 1);
            do
            {
              v132 = *++v130;
              v131 = v132;
              if (v132 < 0)
                v131 = 122;
            }
            while (byte_2358A1873[v131]);
            *a2 = (unsigned __int8 *)v130;
            do
            {
              v134 = *v130++;
              v133 = v134;
              if (v134 < 0)
                v133 = 122;
            }
            while (byte_2358A1773[v133]);
            *a2 = (unsigned __int8 *)(v130 - 1);
            if (*(v130 - 1) != 62)
              goto LABEL_336;
            *a2 = (unsigned __int8 *)v130;
          }
          else
          {
            ++*a2;
            v135 = (_QWORD *)sub_2358736E8(v2, v152);
            v29 = v149;
            v8 = v150;
            v2 = a1;
            a2 = v152;
            if (v135)
            {
              v95 = *v149;
              if (*v149)
              {
                v95 = *(_QWORD *)(v150 + 56);
                v96 = (uint64_t *)(v95 + 88);
              }
              else
              {
                v96 = v149;
              }
              *v96 = (uint64_t)v135;
              v135[10] = v95;
              *(_QWORD *)(v150 + 56) = v135;
              v135[4] = v150;
              v135[11] = 0;
            }
          }
          if (v129 == 47)
            goto LABEL_322;
        }
      }
      goto LABEL_336;
    }
    *a2 = v34 + 1;
    if (v34[1] != 62)
    {
LABEL_336:
      v144 = a2;
      exception = __cxa_allocate_exception(0x18uLL);
      v25 = *v144;
      v26 = "expected >";
      goto LABEL_58;
    }
    *a2 = v34 + 2;
LABEL_322:
    if (*(_QWORD *)v8)
      *(_BYTE *)(*(_QWORD *)v8 + *(_QWORD *)(v8 + 16)) = 0;
    else
      byte_2563067E8 = 0;
    return v8;
  }
  v10 = (char)v3[1];
  if (v10 == 45)
  {
    if (v3[2] == 45)
    {
      v16 = v3 + 3;
      for (k = v3 + 3; ; ++k)
      {
        *a2 = k;
        if (*k == 45)
        {
          if (k[1] == 45 && k[2] == 62)
          {
            v8 = a1[13] + (-*((_BYTE *)a1 + 104) & 7);
            if ((unint64_t)(v8 + 96) > a1[14])
            {
              v18 = (uint64_t (*)(uint64_t))a1[8207];
              if (v18)
                v19 = v18(65558);
              else
                v19 = operator new[]();
              v136 = (_QWORD *)(v19 + (-(int)v19 & 7));
              v2 = a1;
              a2 = v152;
              *v136 = a1[12];
              a1[12] = v19;
              a1[14] = v19 + 65558;
              v8 = (uint64_t)v136 + (-((_DWORD)v136 + 8) & 7) + 8;
            }
            v2[13] = v8 + 96;
            *(_QWORD *)(v8 + 32) = 0;
            *(_QWORD *)v8 = 0;
            *(_QWORD *)(v8 + 8) = 0;
            *(_DWORD *)(v8 + 40) = 4;
            *(_QWORD *)(v8 + 48) = 0;
            *(_QWORD *)(v8 + 64) = 0;
            v137 = *a2 - v16;
            *(_QWORD *)(v8 + 8) = v16;
            *(_QWORD *)(v8 + 24) = v137;
            **a2 = 0;
            v9 = *a2 + 3;
            goto LABEL_60;
          }
        }
        else if (!*k)
        {
LABEL_57:
          v23 = a2;
          exception = __cxa_allocate_exception(0x18uLL);
          v25 = *v23;
          v26 = "unexpected end of data";
          goto LABEL_58;
        }
      }
    }
    goto LABEL_54;
  }
  if (v10 != 68)
  {
    if (v10 == 91 && v3[2] == 67 && v3[3] == 68 && v3[4] == 65 && v3[5] == 84 && v3[6] == 65 && v3[7] == 91)
    {
      *a2 = v3 + 8;
      return sub_235872240(a1, a2);
    }
    goto LABEL_54;
  }
  if (v3[2] != 79 || v3[3] != 67 || v3[4] != 84 || v3[5] != 89 || v3[6] != 80 || v3[7] != 69)
    goto LABEL_54;
  v20 = (char)v3[8];
  if (v20 < 0)
    LOBYTE(v20) = 122;
  if (!byte_2358A1773[v20])
  {
LABEL_54:
    v9 = v3 + 1;
    while (1)
    {
      *a2 = v9;
      v22 = *v9++;
      v21 = v22;
      if (v22 == 62)
        break;
      if (!v21)
        goto LABEL_57;
    }
    v8 = 0;
LABEL_60:
    *a2 = v9;
    return v8;
  }
  *a2 = v3 + 9;
  sub_2358723A8((uint64_t *)a2);
  return 0;
}

uint64_t sub_235874A4C(_QWORD *a1, unsigned __int8 **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  unsigned __int8 *i;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  unsigned __int8 *j;
  unsigned __int8 v18;
  _BYTE *v19;
  unsigned __int8 *k;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  unsigned __int8 **v26;
  _QWORD *exception;
  unsigned __int8 *v28;
  const char *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  char ***v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 v38;
  int v39;
  int v40;
  unsigned __int8 v41;
  _BYTE *v42;
  uint64_t v43;
  int v44;
  char **v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  char **v51;
  char ***v52;
  char *v53;
  unsigned __int8 v54;
  int v55;
  char *v56;
  unsigned __int8 *v57;
  char *v58;
  char *v59;
  unsigned __int8 v60;
  int v61;
  int v62;
  unsigned __int8 v63;
  int v64;
  char *v65;
  unsigned __int8 v66;
  int v67;
  int v68;
  int v69;
  int v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  char v76;
  char v77;
  unint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  char v89;
  char v90;
  unint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  unsigned __int8 v97;
  int v98;
  unsigned __int8 v99;
  uint64_t v100;
  _QWORD *v101;
  unsigned __int8 *v102;
  unsigned __int8 v103;
  uint64_t v104;
  unsigned __int8 v105;
  int v106;
  char *v107;
  int v108;
  int v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  uint64_t v114;
  char v115;
  char v116;
  unint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t *v126;
  char *v127;
  unsigned __int8 *v128;
  int v129;
  char *v130;
  unsigned __int8 v131;
  int v132;
  unsigned __int8 v133;
  int v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  _QWORD *v138;
  const char *v139;
  _QWORD *v140;
  const char *v141;
  unsigned __int8 **v142;
  unsigned __int8 **v143;
  unsigned __int8 **v144;
  _QWORD *v145;
  unsigned __int8 **v146;
  uint64_t (**v147)(uint64_t);
  uint64_t (**v148)(uint64_t);
  uint64_t *v149;
  unsigned __int8 **v150;

  v6 = *a2;
  v7 = (char)**a2;
  v150 = a2;
  if (v7 != 33)
  {
    if (v7 == 63)
    {
      *a2 = v6 + 1;
      v8 = v6[1];
      if ((v8 | 0x20) == 0x78 && (v6[2] | 0x20) == 0x6D && (v6[3] | 0x20) == 0x6C)
      {
        v9 = (char)v6[4];
        if (v9 < 0)
          LOBYTE(v9) = 122;
        if (byte_2358A1773[v9])
        {
          for (i = v6 + 5; ; ++i)
          {
            *a2 = i;
            if (*i == 63)
            {
              if (i[1] == 62)
              {
                v11 = 0;
                v12 = i + 2;
                goto LABEL_60;
              }
            }
            else if (!*i)
            {
              goto LABEL_57;
            }
          }
        }
      }
      for (j = v6 + 2; ; ++j)
      {
        if (v8 == 63)
        {
          if (*j == 62)
          {
            v11 = 0;
            v12 = j + 1;
            goto LABEL_60;
          }
        }
        else if (!(_BYTE)v8)
        {
          goto LABEL_57;
        }
        *a2 = j;
        v18 = *j;
        LOBYTE(v8) = v18;
      }
    }
    v11 = a1[13] + (-*((_BYTE *)a1 + 104) & 7);
    if ((unint64_t)(v11 + 96) > a1[14])
    {
      v15 = (uint64_t (*)(uint64_t))a1[8207];
      if (v15)
        v16 = v15(65558);
      else
        v16 = operator new[]();
      v30 = (_QWORD *)(v16 + (-(int)v16 & 7));
      *v30 = a1[12];
      a1[12] = v16;
      a1[14] = v16 + 65558;
      v11 = (uint64_t)v30 + (-((_DWORD)v30 + 8) & 7) + 8;
      a2 = v150;
    }
    v31 = 0;
    a1[13] = v11 + 96;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    *(_DWORD *)(v11 + 40) = 1;
    *(_QWORD *)(v11 + 48) = 0;
    v32 = (uint64_t *)(v11 + 48);
    *(_QWORD *)(v11 + 64) = 0;
    v33 = (char ***)(v11 + 64);
    v34 = *a2;
    do
    {
      v35 = (char)v34[v31];
      if (v35 < 0)
        LOBYTE(v35) = 122;
      ++v31;
    }
    while (byte_2358A1873[v35]);
    *a2 = &v34[v31 - 1];
    v36 = v31 - 1;
    if (!v36)
    {
      v146 = a2;
      exception = __cxa_allocate_exception(0x18uLL);
      v28 = *v146;
      v29 = "expected element name";
      goto LABEL_58;
    }
    *(_QWORD *)v11 = v34;
    *(_QWORD *)(v11 + 16) = v36;
    v37 = *a2 - 1;
    do
    {
      v39 = (char)*++v37;
      v38 = v39;
      if (v39 < 0)
        v38 = 122;
    }
    while (byte_2358A1773[v38]);
    *a2 = v37;
    v40 = (char)*v37;
    if (v40 >= 0)
      v41 = *v37;
    else
      v41 = 122;
    v149 = (uint64_t *)(v11 + 48);
    if (byte_2358A1973[v41])
    {
      v147 = (uint64_t (**)(uint64_t))(a1 + 8207);
      v42 = &unk_2358A1B73;
      while (1)
      {
        v43 = 0;
        *a2 = v37 + 1;
        do
        {
          v44 = (char)v37[v43 + 1];
          if (v44 < 0)
            LOBYTE(v44) = 122;
          ++v43;
        }
        while (byte_2358A1973[v44]);
        *a2 = &v37[v43];
        if (!v43)
        {
          v138 = __cxa_allocate_exception(0x18uLL);
          v139 = "expected attribute name";
LABEL_318:
          *v138 = &off_2506E0200;
          v138[1] = v139;
          v138[2] = v37;
          __cxa_throw(v138, (struct type_info *)&unk_2506E0098, (void (*)(void *))std::exception::~exception);
        }
        v45 = (char **)(a1[13] + (-*((_BYTE *)a1 + 104) & 7));
        if ((unint64_t)(v45 + 7) > a1[14])
        {
          v46 = a5;
          v47 = v42;
          if (*v147)
            v48 = (*v147)(65558);
          else
            v48 = operator new[]();
          v49 = (_QWORD *)(v48 + (-(int)v48 & 7));
          *v49 = a1[12];
          a1[12] = v48;
          a1[14] = v48 + 65558;
          v45 = (char **)((char *)v49 + (-((_DWORD)v49 + 8) & 7) + 8);
          v32 = (uint64_t *)(v11 + 48);
          a2 = v150;
          v42 = v47;
          a5 = v46;
          v33 = (char ***)(v11 + 64);
        }
        a1[13] = v45 + 7;
        v45[4] = 0;
        *v45 = 0;
        v45[1] = 0;
        v50 = (char *)(*a2 - v37);
        *v45 = (char *)v37;
        v45[2] = v50;
        v51 = *v33;
        if (*v33)
        {
          v51 = *(char ***)(v11 + 72);
          v52 = (char ***)(v51 + 6);
        }
        else
        {
          v52 = v33;
        }
        *v52 = v45;
        v45[5] = (char *)v51;
        *(_QWORD *)(v11 + 72) = v45;
        v45[4] = (char *)v11;
        v45[6] = 0;
        v53 = (char *)*a2;
        do
        {
          v55 = *v53++;
          v54 = v55;
          if (v55 < 0)
            v54 = 122;
        }
        while (byte_2358A1773[v54]);
        *a2 = (unsigned __int8 *)(v53 - 1);
        if (*(v53 - 1) != 61)
          break;
        *a2 = (unsigned __int8 *)v53;
        v56 = *v45;
        if (!*v45)
        {
          v56 = &byte_2563067E8;
          v50 = 0;
        }
        v50[(_QWORD)v56] = 0;
        v57 = *a2;
        v58 = (char *)*a2;
        do
        {
          v59 = v58;
          v61 = *v58++;
          v60 = v61;
          if (v61 < 0)
            v60 = 122;
          ++v57;
        }
        while (byte_2358A1773[v60]);
        *a2 = (unsigned __int8 *)(v58 - 1);
        v62 = *(v58 - 1);
        if (v62 != 34 && v62 != 39)
          goto LABEL_320;
        *a2 = (unsigned __int8 *)v58;
        if (v62 == 39)
        {
          do
          {
            v64 = *++v59;
            v63 = v64;
            if (v64 < 0)
              v63 = 122;
          }
          while (v42[v63]);
          *a2 = (unsigned __int8 *)v59;
          v65 = v59;
          while (1)
          {
            v68 = *v65;
            v69 = (v68 & 0x80u) == 0 ? *v65 : 122;
            if (!v69 || v69 == 39)
              break;
            if (v68 == 38)
            {
              switch(v65[1])
              {
                case 'a':
                  v70 = v65[2];
                  if (v70 != 112)
                  {
                    if (v70 == 109 && v65[3] == 112 && v65[4] == 59)
                    {
                      *v59++ = 38;
                      v65 += 5;
                      continue;
                    }
                    goto LABEL_112;
                  }
                  if (v65[3] != 111 || v65[4] != 115 || v65[5] != 59)
                    goto LABEL_112;
                  v77 = 39;
LABEL_153:
                  *v59++ = v77;
                  v65 += 6;
                  continue;
                case 'b':
                case 'c':
                case 'd':
                case 'e':
                case 'f':
                case 'h':
                case 'i':
                case 'j':
                case 'k':
                case 'm':
                case 'n':
                case 'o':
                case 'p':
                  goto LABEL_112;
                case 'g':
                  if (v65[2] != 116 || v65[3] != 59)
                    goto LABEL_112;
                  v76 = 62;
                  goto LABEL_137;
                case 'l':
                  if (v65[2] != 116 || v65[3] != 59)
                    goto LABEL_112;
                  v76 = 60;
LABEL_137:
                  *v59++ = v76;
                  v65 += 4;
                  continue;
                case 'q':
                  if (v65[2] != 117 || v65[3] != 111 || v65[4] != 116 || v65[5] != 59)
                    goto LABEL_112;
                  v77 = 34;
                  goto LABEL_153;
                default:
                  if (v65[1] != 35)
                    goto LABEL_112;
                  v71 = v65 + 2;
                  if (v65[2] == 120)
                  {
                    v72 = 0;
                    do
                    {
                      v73 = v72;
                      v74 = *++v71;
                      v75 = byte_2358A1A73[v74];
                      v72 = v75 + 16 * v72;
                    }
                    while (v75 != 255);
                    if (v73 <= 0x7F)
                      goto LABEL_146;
                  }
                  else
                  {
                    v78 = 0;
                    v71 = v65 + 1;
                    do
                    {
                      v73 = v78;
                      v79 = *++v71;
                      v80 = byte_2358A1A73[v79];
                      v78 = v80 + 10 * v78;
                    }
                    while (v80 != 255);
                    if (v73 <= 0x7F)
                    {
LABEL_146:
                      v81 = 1;
                      goto LABEL_158;
                    }
                  }
                  if (v73 > 0x7FF)
                  {
                    if (v73 >> 16)
                    {
                      if (v73 >> 16 > 0x10)
                        goto LABEL_326;
                      v59[3] = v73 & 0x3F | 0x80;
                      v59[2] = (v73 >> 6) & 0x3F | 0x80;
                      v59[1] = (v73 >> 12) & 0x3F | 0x80;
                      LODWORD(v73) = (v73 >> 18) | 0xFFFFFFF0;
                      v81 = 4;
                    }
                    else
                    {
                      v59[2] = v73 & 0x3F | 0x80;
                      v59[1] = (v73 >> 6) & 0x3F | 0x80;
                      LODWORD(v73) = (v73 >> 12) | 0xFFFFFFE0;
                      v81 = 3;
                    }
                  }
                  else
                  {
                    v59[1] = v73 & 0x3F | 0x80;
                    LODWORD(v73) = (v73 >> 6) | 0xFFFFFFC0;
                    v81 = 2;
                  }
LABEL_158:
                  *v59 = v73;
                  if (*v71 != 59)
                    goto LABEL_323;
                  v59 += v81;
                  v65 = v71 + 1;
                  break;
              }
            }
            else
            {
LABEL_112:
              ++v65;
              *v59++ = v68;
            }
          }
        }
        else
        {
          do
          {
            v67 = *++v59;
            v66 = v67;
            if (v67 < 0)
              v66 = 122;
          }
          while (byte_2358A1C73[v66]);
          *a2 = (unsigned __int8 *)v59;
          v65 = v59;
          while (1)
          {
            v82 = *v65;
            v83 = (v82 & 0x80u) == 0 ? *v65 : 122;
            if (!v83 || v83 == 34)
              break;
            if (v82 == 38)
            {
              switch(v65[1])
              {
                case 'a':
                  v84 = v65[2];
                  if (v84 != 112)
                  {
                    if (v84 == 109 && v65[3] == 112 && v65[4] == 59)
                    {
                      *v59++ = 38;
                      v65 += 5;
                      continue;
                    }
                    goto LABEL_160;
                  }
                  if (v65[3] != 111 || v65[4] != 115 || v65[5] != 59)
                    goto LABEL_160;
                  v90 = 39;
LABEL_201:
                  *v59++ = v90;
                  v65 += 6;
                  continue;
                case 'b':
                case 'c':
                case 'd':
                case 'e':
                case 'f':
                case 'h':
                case 'i':
                case 'j':
                case 'k':
                case 'm':
                case 'n':
                case 'o':
                case 'p':
                  goto LABEL_160;
                case 'g':
                  if (v65[2] != 116 || v65[3] != 59)
                    goto LABEL_160;
                  v89 = 62;
                  goto LABEL_185;
                case 'l':
                  if (v65[2] != 116 || v65[3] != 59)
                    goto LABEL_160;
                  v89 = 60;
LABEL_185:
                  *v59++ = v89;
                  v65 += 4;
                  continue;
                case 'q':
                  if (v65[2] != 117 || v65[3] != 111 || v65[4] != 116 || v65[5] != 59)
                    goto LABEL_160;
                  v90 = 34;
                  goto LABEL_201;
                default:
                  if (v65[1] != 35)
                    goto LABEL_160;
                  v71 = v65 + 2;
                  if (v65[2] == 120)
                  {
                    v85 = 0;
                    do
                    {
                      v86 = v85;
                      v87 = *++v71;
                      v88 = byte_2358A1A73[v87];
                      v85 = v88 + 16 * v85;
                    }
                    while (v88 != 255);
                    if (v86 <= 0x7F)
                      goto LABEL_194;
                  }
                  else
                  {
                    v91 = 0;
                    v71 = v65 + 1;
                    do
                    {
                      v86 = v91;
                      v92 = *++v71;
                      v93 = byte_2358A1A73[v92];
                      v91 = v93 + 10 * v91;
                    }
                    while (v93 != 255);
                    if (v86 <= 0x7F)
                    {
LABEL_194:
                      v94 = 1;
                      goto LABEL_206;
                    }
                  }
                  if (v86 > 0x7FF)
                  {
                    if (v86 >> 16)
                    {
                      if (v86 >> 16 > 0x10)
                      {
LABEL_326:
                        v145 = __cxa_allocate_exception(0x18uLL);
                        *v145 = &off_2506E0200;
                        v145[1] = "invalid numeric character entity";
                        v145[2] = v59;
                        __cxa_throw(v145, (struct type_info *)&unk_2506E0098, (void (*)(void *))std::exception::~exception);
                      }
                      v59[3] = v86 & 0x3F | 0x80;
                      v59[2] = (v86 >> 6) & 0x3F | 0x80;
                      v59[1] = (v86 >> 12) & 0x3F | 0x80;
                      LODWORD(v86) = (v86 >> 18) | 0xFFFFFFF0;
                      v94 = 4;
                    }
                    else
                    {
                      v59[2] = v86 & 0x3F | 0x80;
                      v59[1] = (v86 >> 6) & 0x3F | 0x80;
                      LODWORD(v86) = (v86 >> 12) | 0xFFFFFFE0;
                      v94 = 3;
                    }
                  }
                  else
                  {
                    v59[1] = v86 & 0x3F | 0x80;
                    LODWORD(v86) = (v86 >> 6) | 0xFFFFFFC0;
                    v94 = 2;
                  }
LABEL_206:
                  *v59 = v86;
                  if (*v71 != 59)
                  {
LABEL_323:
                    v140 = __cxa_allocate_exception(0x18uLL);
                    v141 = "expected ;";
LABEL_324:
                    *v140 = &off_2506E0200;
                    v140[1] = v141;
                    v140[2] = v71;
                    __cxa_throw(v140, (struct type_info *)&unk_2506E0098, (void (*)(void *))std::exception::~exception);
                  }
                  v59 += v94;
                  v65 = v71 + 1;
                  break;
              }
            }
            else
            {
LABEL_160:
              ++v65;
              *v59++ = v82;
            }
          }
        }
        *a2 = (unsigned __int8 *)v65;
        v95 = (char *)(v59 - (char *)v57);
        v45[1] = v58;
        v45[3] = v95;
        if (**a2 != v62)
        {
LABEL_320:
          v142 = a2;
          exception = __cxa_allocate_exception(0x18uLL);
          v28 = *v142;
          v29 = "expected ' or \"";
          goto LABEL_58;
        }
        ++*a2;
        v96 = v45[1];
        if (!v96)
        {
          v96 = &byte_2563067E8;
          v95 = 0;
        }
        v95[(_QWORD)v96] = 0;
        v37 = *a2 - 1;
        do
        {
          v98 = (char)*++v37;
          v97 = v98;
          if (v98 < 0)
            v97 = 122;
        }
        while (byte_2358A1773[v97]);
        *a2 = v37;
        v40 = (char)*v37;
        if (v40 >= 0)
          v99 = *v37;
        else
          v99 = 122;
        if (!byte_2358A1973[v99])
          goto LABEL_219;
      }
      v143 = a2;
      exception = __cxa_allocate_exception(0x18uLL);
      v28 = *v143;
      v29 = "expected =";
LABEL_58:
      *exception = &off_2506E0200;
      exception[1] = v29;
      exception[2] = v28;
      __cxa_throw(exception, (struct type_info *)&unk_2506E0098, (void (*)(void *))std::exception::~exception);
    }
LABEL_219:
    if (v40 != 47)
    {
      if (v40 == 62)
      {
        *a2 = v37 + 1;
        v148 = (uint64_t (**)(uint64_t))(a1 + 8207);
        while (1)
        {
          v102 = *a2;
          v104 = (uint64_t)(*a2 - 1);
          v103 = **a2;
          while (v103 != 60)
          {
            if (!v103)
              goto LABEL_57;
            *a2 = v102;
            v71 = (char *)v104;
            do
            {
              v106 = *++v71;
              v105 = v106;
              if (v106 < 0)
                v105 = 122;
            }
            while (byte_2358A1E73[v105]);
            *a2 = (unsigned __int8 *)v71;
            v107 = v71;
            while (1)
            {
              v108 = *v107;
              v109 = (v108 & 0x80u) == 0 ? *v107 : 122;
              if (!v109 || v109 == 60)
                break;
              if (v108 == 38)
              {
                switch(v107[1])
                {
                  case 'a':
                    v110 = v107[2];
                    if (v110 != 112)
                    {
                      if (v110 == 109 && v107[3] == 112 && v107[4] == 59)
                      {
                        *v71++ = 38;
                        v107 += 5;
                        continue;
                      }
                      goto LABEL_234;
                    }
                    if (v107[3] != 111 || v107[4] != 115 || v107[5] != 59)
                      goto LABEL_234;
                    v116 = 39;
LABEL_275:
                    *v71++ = v116;
                    v107 += 6;
                    continue;
                  case 'b':
                  case 'c':
                  case 'd':
                  case 'e':
                  case 'f':
                  case 'h':
                  case 'i':
                  case 'j':
                  case 'k':
                  case 'm':
                  case 'n':
                  case 'o':
                  case 'p':
                    goto LABEL_234;
                  case 'g':
                    if (v107[2] != 116 || v107[3] != 59)
                      goto LABEL_234;
                    v115 = 62;
                    goto LABEL_264;
                  case 'l':
                    if (v107[2] != 116 || v107[3] != 59)
                      goto LABEL_234;
                    v115 = 60;
LABEL_264:
                    *v71++ = v115;
                    v107 += 4;
                    continue;
                  case 'q':
                    if (v107[2] != 117 || v107[3] != 111 || v107[4] != 116 || v107[5] != 59)
                      goto LABEL_234;
                    v116 = 34;
                    goto LABEL_275;
                  default:
                    if (v107[1] != 35)
                      goto LABEL_234;
                    v37 = (unsigned __int8 *)(v107 + 2);
                    if (v107[2] == 120)
                    {
                      v111 = 0;
                      do
                      {
                        v112 = v111;
                        v113 = *++v37;
                        v114 = byte_2358A1A73[v113];
                        v111 = v114 + 16 * v111;
                      }
                      while (v114 != 255);
                      if (v112 <= 0x7F)
                        goto LABEL_268;
                    }
                    else
                    {
                      v117 = 0;
                      v37 = (unsigned __int8 *)(v107 + 1);
                      do
                      {
                        v112 = v117;
                        v118 = *++v37;
                        v119 = byte_2358A1A73[v118];
                        v117 = v119 + 10 * v117;
                      }
                      while (v119 != 255);
                      if (v112 <= 0x7F)
                      {
LABEL_268:
                        v120 = 1;
                        goto LABEL_280;
                      }
                    }
                    if (v112 > 0x7FF)
                    {
                      if (v112 >> 16)
                      {
                        if (v112 >> 16 > 0x10)
                        {
                          v140 = __cxa_allocate_exception(0x18uLL);
                          v141 = "invalid numeric character entity";
                          goto LABEL_324;
                        }
                        v71[3] = v112 & 0x3F | 0x80;
                        v71[2] = (v112 >> 6) & 0x3F | 0x80;
                        v71[1] = (v112 >> 12) & 0x3F | 0x80;
                        LODWORD(v112) = (v112 >> 18) | 0xFFFFFFF0;
                        v120 = 4;
                      }
                      else
                      {
                        v71[2] = v112 & 0x3F | 0x80;
                        v71[1] = (v112 >> 6) & 0x3F | 0x80;
                        LODWORD(v112) = (v112 >> 12) | 0xFFFFFFE0;
                        v120 = 3;
                      }
                    }
                    else
                    {
                      v71[1] = v112 & 0x3F | 0x80;
                      LODWORD(v112) = (v112 >> 6) | 0xFFFFFFC0;
                      v120 = 2;
                    }
LABEL_280:
                    *v71 = v112;
                    if (*v37 != 59)
                    {
                      v138 = __cxa_allocate_exception(0x18uLL);
                      v139 = "expected ;";
                      goto LABEL_318;
                    }
                    v71 += v120;
                    v107 = (char *)(v37 + 1);
                    break;
                }
              }
              else
              {
LABEL_234:
                ++v107;
                *v71++ = v108;
              }
            }
            *a2 = (unsigned __int8 *)v107;
            v121 = a1[13] + (-*((_BYTE *)a1 + 104) & 7);
            if ((unint64_t)(v121 + 96) > a1[14])
            {
              v122 = v104;
              if (*v148)
                v123 = (*v148)(65558);
              else
                v123 = operator new[]();
              v124 = (_QWORD *)(v123 + (-(int)v123 & 7));
              *v124 = a1[12];
              a1[12] = v123;
              a1[14] = v123 + 65558;
              v121 = (uint64_t)v124 + (-((_DWORD)v124 + 8) & 7) + 8;
              v32 = (uint64_t *)(v11 + 48);
              a2 = v150;
              v104 = v122;
            }
            a1[13] = v121 + 96;
            *(_DWORD *)(v121 + 40) = 2;
            *(_QWORD *)(v121 + 48) = 0;
            *(_QWORD *)(v121 + 64) = 0;
            *(_QWORD *)v121 = 0;
            *(_QWORD *)(v121 + 8) = v102;
            *(_QWORD *)(v121 + 24) = v71 - (char *)v102;
            v125 = *v32;
            if (*v32)
            {
              v125 = *(_QWORD *)(v11 + 56);
              v126 = (uint64_t *)(v125 + 88);
            }
            else
            {
              v126 = v32;
            }
            *v126 = v121;
            *(_QWORD *)(v121 + 80) = v125;
            *(_QWORD *)(v11 + 56) = v121;
            *(_QWORD *)(v121 + 32) = v11;
            *(_QWORD *)(v121 + 88) = 0;
            v127 = *(char **)(v11 + 8);
            if (!v127)
              v127 = &byte_2563067E8;
            if (!*v127)
            {
              *(_QWORD *)(v11 + 8) = v102;
              *(_QWORD *)(v11 + 24) = v71 - (char *)v102;
            }
            v103 = **a2;
            *v71 = 0;
          }
          v128 = *a2;
          v129 = (*a2)[1];
          if (v129 == 47)
          {
            *a2 = v128 + 2;
            v130 = (char *)(v128 + 1);
            do
            {
              v132 = *++v130;
              v131 = v132;
              if (v132 < 0)
                v131 = 122;
            }
            while (byte_2358A1873[v131]);
            *a2 = (unsigned __int8 *)v130;
            do
            {
              v134 = *v130++;
              v133 = v134;
              if (v134 < 0)
                v133 = 122;
            }
            while (byte_2358A1773[v133]);
            *a2 = (unsigned __int8 *)(v130 - 1);
            if (*(v130 - 1) != 62)
              goto LABEL_325;
            *a2 = (unsigned __int8 *)v130;
          }
          else
          {
            ++*a2;
            v135 = (_QWORD *)sub_235874A4C(a1, v150, &byte_2563067E8);
            v32 = (uint64_t *)(v11 + 48);
            a2 = v150;
            if (v135)
            {
              v100 = *v149;
              if (*v149)
              {
                v100 = *(_QWORD *)(v11 + 56);
                v101 = (_QWORD *)(v100 + 88);
              }
              else
              {
                v101 = (_QWORD *)(v11 + 48);
              }
              *v101 = v135;
              v135[10] = v100;
              *(_QWORD *)(v11 + 56) = v135;
              v135[4] = v11;
              v135[11] = 0;
            }
          }
          if (v129 == 47)
            goto LABEL_310;
        }
      }
      goto LABEL_325;
    }
    *a2 = v37 + 1;
    if (v37[1] != 62)
    {
LABEL_325:
      v144 = a2;
      exception = __cxa_allocate_exception(0x18uLL);
      v28 = *v144;
      v29 = "expected >";
      goto LABEL_58;
    }
    *a2 = v37 + 2;
LABEL_310:
    if (*(_QWORD *)v11)
      *(_BYTE *)(*(_QWORD *)v11 + *(_QWORD *)(v11 + 16)) = 0;
    else
      byte_2563067E8 = 0;
    return v11;
  }
  v13 = (char)v6[1];
  if (v13 == 45)
  {
    if (v6[2] == 45)
    {
      v19 = v6 + 3;
      for (k = v6 + 3; ; ++k)
      {
        *a2 = k;
        if (*k == 45)
        {
          if (k[1] == 45 && k[2] == 62)
          {
            v11 = a1[13] + (-*((_BYTE *)a1 + 104) & 7);
            if ((unint64_t)(v11 + 96) > a1[14])
            {
              v21 = (uint64_t (*)(uint64_t))a1[8207];
              if (v21)
                v22 = v21(65558);
              else
                v22 = operator new[]();
              v136 = (_QWORD *)(v22 + (-(int)v22 & 7));
              *v136 = a1[12];
              a1[12] = v22;
              a1[14] = v22 + 65558;
              v11 = (uint64_t)v136 + (-((_DWORD)v136 + 8) & 7) + 8;
              a2 = v150;
            }
            a1[13] = v11 + 96;
            *(_QWORD *)(v11 + 32) = 0;
            *(_QWORD *)v11 = 0;
            *(_QWORD *)(v11 + 8) = 0;
            *(_DWORD *)(v11 + 40) = 4;
            *(_QWORD *)(v11 + 48) = 0;
            *(_QWORD *)(v11 + 64) = 0;
            v137 = *a2 - v19;
            *(_QWORD *)(v11 + 8) = v19;
            *(_QWORD *)(v11 + 24) = v137;
            **a2 = 0;
            v12 = *a2 + 3;
            goto LABEL_60;
          }
        }
        else if (!*k)
        {
LABEL_57:
          v26 = a2;
          exception = __cxa_allocate_exception(0x18uLL);
          v28 = *v26;
          v29 = "unexpected end of data";
          goto LABEL_58;
        }
      }
    }
    goto LABEL_54;
  }
  if (v13 != 68)
  {
    if (v13 == 91 && v6[2] == 67 && v6[3] == 68 && v6[4] == 65 && v6[5] == 84 && v6[6] == 65 && v6[7] == 91)
    {
      *a2 = v6 + 8;
      return sub_235872240(a1, a2);
    }
    goto LABEL_54;
  }
  if (v6[2] != 79 || v6[3] != 67 || v6[4] != 84 || v6[5] != 89 || v6[6] != 80 || v6[7] != 69)
    goto LABEL_54;
  v23 = (char)v6[8];
  if (v23 < 0)
    LOBYTE(v23) = 122;
  if (!byte_2358A1773[v23])
  {
LABEL_54:
    v12 = v6 + 1;
    while (1)
    {
      *a2 = v12;
      v25 = *v12++;
      v24 = v25;
      if (v25 == 62)
        break;
      if (!v24)
        goto LABEL_57;
    }
    v11 = 0;
LABEL_60:
    *a2 = v12;
    return v11;
  }
  *a2 = v6 + 9;
  sub_2358723A8((uint64_t *)a2);
  return 0;
}

uint64_t sub_235875D54(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(v2 + 8);
  v4 = v3[11];
  if (v4)
    v5 = (_QWORD *)(v4 - 80);
  else
    v5 = 0;
  if (v5 != v3)
  {
    do
    {
      v6 = v5[11];
      if (v6)
        v3 = (_QWORD *)(v6 - 80);
      else
        v3 = 0;
      sub_2358688CC((uint64_t)v5);
      operator delete(v5);
      v5 = v3;
    }
    while (v3 != *(_QWORD **)(v2 + 8));
  }
  operator delete(v3);
  MEMORY[0x23B7D94C4](v2, 0x1020C402FC1992ELL);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_235875E10(_QWORD *a1, uint64_t a2)
{
  const char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(const char **)a2;
  v5 = strlen(*(const char **)a2);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_23584B34C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    a1[1] = v6;
    a1[2] = v9 | 0x8000000000000000;
    *a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_9;
  }
  memmove(v7, v4, v6);
LABEL_9:
  *((_BYTE *)v7 + v6) = 0;
  sub_23585D9D0(a1 + 3, (__int128 *)(a2 + 8));
  return a1;
}

void sub_235875ED0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_235875EEC(std::string *this, std::string::value_type *a2)
{
  std::string::value_type v2;
  unsigned __int8 *v4;
  int v5;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v2 = *a2;
  if (*a2)
  {
    v4 = (unsigned __int8 *)(a2 + 1);
    do
    {
      std::string::push_back(this, v2);
      v5 = *v4++;
      v2 = v5;
    }
    while (v5);
  }
}

void sub_235875F30(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_235875F4C(_QWORD *__dst, __int128 *a2)
{
  __int128 __p;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (*((char *)a2 + 23) < 0)
  {
    sub_23584B488(&__p, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    __p = *a2;
    v4 = *((_QWORD *)a2 + 2);
  }
  if (SHIBYTE(v4) < 0)
  {
    sub_23584B488(__dst, (void *)__p, *((unint64_t *)&__p + 1));
    if (SHIBYTE(v4) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_OWORD *)__dst = __p;
    __dst[2] = v4;
  }
}

void sub_23587601C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10)
  {
    if (a16 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_23587604C(uint64_t a1, const std::locale *a2)
{
  std::runtime_error_vtbl *v4;
  uint64_t v5;
  uint64_t v6;
  std::runtime_error_vtbl *v7;
  std::runtime_error_vtbl *v8;
  std::ios_base *v9;
  uint64_t v10;
  std::ios_base *v11;
  std::locale *rdbuf;
  std::locale *v13;
  int v14;
  std::string::size_type v15;
  std::string *p_dst;
  unint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  std::string *v21;
  size_t v22;
  int8x16_t v23;
  uint64_t v24;
  uint64_t v25;
  std::string v26;
  std::string v27;
  std::string __dst;
  std::runtime_error v29;
  const void *v30;
  _BYTE v31[8];
  uint64_t v32;
  const void *v33;
  unint64_t v34;
  __int128 __p;
  __int128 v36;
  int v37;
  uint64_t v38[19];
  char v39;
  std::string v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v4 = (std::runtime_error_vtbl *)MEMORY[0x24BEDB870];
  v5 = MEMORY[0x24BEDB870] + 64;
  v6 = MEMORY[0x24BEDB800];
  v7 = *(std::runtime_error_vtbl **)(MEMORY[0x24BEDB800] + 8);
  v8 = *(std::runtime_error_vtbl **)(MEMORY[0x24BEDB800] + 16);
  v38[0] = MEMORY[0x24BEDB870] + 64;
  v29.__vftable = v7;
  *(std::runtime_error_vtbl **)((char *)&v29.__vftable + (unint64_t)v7[-1].~runtime_error) = v8;
  v9 = (std::ios_base *)((char *)&v29 + (unint64_t)v29.__vftable[-1].~runtime_error);
  std::ios_base::init(v9, &v29.__imp_);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v29.__vftable = v4 + 1;
  v38[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x24BEDB848];
  v29.__imp_.__imp_ = (const char *)(MEMORY[0x24BEDB848] + 16);
  __p = 0u;
  v36 = 0u;
  v37 = 16;
  v11 = (std::ios_base *)((char *)&v29 + (unint64_t)v29.__vftable[-1].~runtime_error);
  std::ios_base::getloc(v11);
  std::ios_base::imbue(v11, a2);
  std::locale::~locale((std::locale *)&__dst);
  rdbuf = (std::locale *)v11->__rdbuf_;
  if (rdbuf)
  {
    (*((void (**)(std::locale *, const std::locale *))rdbuf->__locale_ + 2))(rdbuf, a2);
    v13 = rdbuf + 1;
    std::locale::locale((std::locale *)&v27, v13);
    std::locale::operator=(v13, a2);
    std::locale::~locale((std::locale *)&v27);
  }
  std::locale::~locale((std::locale *)&v26);
  sub_23584D1D8(&v29, (uint64_t)"Lockup", 6);
  v14 = *(_DWORD *)&v31[(unint64_t)v29.__vftable[-1].~runtime_error] & 5;
  if (v14)
  {
    v39 = 0;
    goto LABEL_19;
  }
  if ((v37 & 0x10) != 0)
  {
    v17 = *((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1) < v34)
    {
      *((_QWORD *)&v36 + 1) = v34;
      v17 = v34;
    }
    v18 = v33;
    v15 = v17 - (_QWORD)v33;
    if (v17 - (unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_39;
  }
  else
  {
    if ((v37 & 8) == 0)
    {
      v15 = 0;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
      goto LABEL_18;
    }
    v18 = v30;
    v15 = v32 - (_QWORD)v30;
    if ((unint64_t)(v32 - (_QWORD)v30) >= 0x7FFFFFFFFFFFFFF8)
LABEL_39:
      sub_23584B34C();
  }
  if (v15 >= 0x17)
  {
    v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v19 = v15 | 7;
    v20 = v19 + 1;
    p_dst = (std::string *)operator new(v19 + 1);
    __dst.__r_.__value_.__l.__size_ = v15;
    __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v15;
    p_dst = &__dst;
    if (!v15)
      goto LABEL_18;
  }
  memmove(p_dst, v18, v15);
LABEL_18:
  p_dst->__r_.__value_.__s.__data_[v15] = 0;
  v40 = __dst;
  v39 = 1;
LABEL_19:
  v29.__vftable = *(std::runtime_error_vtbl **)v6;
  *(std::runtime_error_vtbl **)((char *)&v29.__vftable + (unint64_t)v29.__vftable[-1].~runtime_error) = *(std::runtime_error_vtbl **)(v6 + 24);
  v29.__imp_.__imp_ = (const char *)(v10 + 16);
  if (SBYTE7(v36) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x23B7D9458](v38);
  if (v14)
  {
    sub_23584AAE8(&v26, "conversion of type \"");
    sub_2358511CC((char *)(0x80000002358A1F73 & 0x7FFFFFFFFFFFFFFFLL), &v26, &v27);
    sub_2358511CC("\" to data failed", &v27, &__dst);
    v25 = 0;
    sub_23586A328(&v29, &__dst, &v25);
    v23.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/"
                          "Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/lo"
                          "cal/include/boost/property_tree/detail/ptree_implementation.hpp";
    v23.i64[1] = (uint64_t)"void boost::property_tree::basic_ptree<std::string, std::string>::put_value(const Type &, Tran"
                          "slator) [Key = std::string, Data = std::string, KeyCompare = std::less<std::string>, Type = ch"
                          "ar[7], Translator = boost::property_tree::stream_translator<char, std::char_traits<char>, std:"
                          ":allocator<char>, char[7]>]";
    v24 = 828;
    sub_23586A2CC(&v29, &v23);
  }
  if (&v40 == (std::string *)a1)
    goto LABEL_35;
  if (*(char *)(a1 + 23) < 0)
  {
    v21 = (v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v40
        : (std::string *)v40.__r_.__value_.__r.__words[0];
    v22 = (v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v40.__r_.__value_.__r.__words[2])
        : v40.__r_.__value_.__l.__size_;
    sub_23584BAC0((void **)a1, v21, v22);
  }
  else if ((*((_BYTE *)&v40.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    sub_23584B9FC((_QWORD *)a1, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  }
  else
  {
    *(std::string *)a1 = v40;
  }
  if (v39)
  {
LABEL_35:
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
  }
}

void sub_235876444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,std::runtime_error a31,uint64_t a32)
{
  a31.__vftable = (std::runtime_error_vtbl *)&off_2506E0080;
  if (a32)
    (*(void (**)(uint64_t))(*(_QWORD *)a32 + 8))(a32);
  std::runtime_error::~runtime_error(&a31);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a18 & 0x80000000) == 0)
LABEL_10:
        _Unwind_Resume(a1);
LABEL_9:
      operator delete(a13);
      _Unwind_Resume(a1);
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a19);
  if ((a18 & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_235876548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  std::locale::~locale(&a13);
  sub_235868848((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_235876564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_235868848((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_235876578(uint64_t a1, const std::locale *a2)
{
  std::runtime_error_vtbl *v4;
  uint64_t v5;
  uint64_t v6;
  std::runtime_error_vtbl *v7;
  std::runtime_error_vtbl *v8;
  std::ios_base *v9;
  uint64_t v10;
  std::ios_base *v11;
  std::locale *rdbuf;
  std::locale *v13;
  int v14;
  std::string::size_type v15;
  std::string *p_dst;
  unint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  std::string *v21;
  size_t v22;
  int8x16_t v23;
  uint64_t v24;
  uint64_t v25;
  std::string v26;
  std::string v27;
  std::string __dst;
  std::runtime_error v29;
  const void *v30;
  _BYTE v31[8];
  uint64_t v32;
  const void *v33;
  unint64_t v34;
  __int128 __p;
  __int128 v36;
  int v37;
  uint64_t v38[19];
  char v39;
  std::string v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v4 = (std::runtime_error_vtbl *)MEMORY[0x24BEDB870];
  v5 = MEMORY[0x24BEDB870] + 64;
  v6 = MEMORY[0x24BEDB800];
  v7 = *(std::runtime_error_vtbl **)(MEMORY[0x24BEDB800] + 8);
  v8 = *(std::runtime_error_vtbl **)(MEMORY[0x24BEDB800] + 16);
  v38[0] = MEMORY[0x24BEDB870] + 64;
  v29.__vftable = v7;
  *(std::runtime_error_vtbl **)((char *)&v29.__vftable + (unint64_t)v7[-1].~runtime_error) = v8;
  v9 = (std::ios_base *)((char *)&v29 + (unint64_t)v29.__vftable[-1].~runtime_error);
  std::ios_base::init(v9, &v29.__imp_);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v29.__vftable = v4 + 1;
  v38[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x24BEDB848];
  v29.__imp_.__imp_ = (const char *)(MEMORY[0x24BEDB848] + 16);
  __p = 0u;
  v36 = 0u;
  v37 = 16;
  v11 = (std::ios_base *)((char *)&v29 + (unint64_t)v29.__vftable[-1].~runtime_error);
  std::ios_base::getloc(v11);
  std::ios_base::imbue(v11, a2);
  std::locale::~locale((std::locale *)&__dst);
  rdbuf = (std::locale *)v11->__rdbuf_;
  if (rdbuf)
  {
    (*((void (**)(std::locale *, const std::locale *))rdbuf->__locale_ + 2))(rdbuf, a2);
    v13 = rdbuf + 1;
    std::locale::locale((std::locale *)&v27, v13);
    std::locale::operator=(v13, a2);
    std::locale::~locale((std::locale *)&v27);
  }
  std::locale::~locale((std::locale *)&v26);
  sub_23584D1D8(&v29, (uint64_t)"Fingerprint", 11);
  v14 = *(_DWORD *)&v31[(unint64_t)v29.__vftable[-1].~runtime_error] & 5;
  if (v14)
  {
    v39 = 0;
    goto LABEL_19;
  }
  if ((v37 & 0x10) != 0)
  {
    v17 = *((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1) < v34)
    {
      *((_QWORD *)&v36 + 1) = v34;
      v17 = v34;
    }
    v18 = v33;
    v15 = v17 - (_QWORD)v33;
    if (v17 - (unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_39;
  }
  else
  {
    if ((v37 & 8) == 0)
    {
      v15 = 0;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
      goto LABEL_18;
    }
    v18 = v30;
    v15 = v32 - (_QWORD)v30;
    if ((unint64_t)(v32 - (_QWORD)v30) >= 0x7FFFFFFFFFFFFFF8)
LABEL_39:
      sub_23584B34C();
  }
  if (v15 >= 0x17)
  {
    v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v19 = v15 | 7;
    v20 = v19 + 1;
    p_dst = (std::string *)operator new(v19 + 1);
    __dst.__r_.__value_.__l.__size_ = v15;
    __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v15;
    p_dst = &__dst;
    if (!v15)
      goto LABEL_18;
  }
  memmove(p_dst, v18, v15);
LABEL_18:
  p_dst->__r_.__value_.__s.__data_[v15] = 0;
  v40 = __dst;
  v39 = 1;
LABEL_19:
  v29.__vftable = *(std::runtime_error_vtbl **)v6;
  *(std::runtime_error_vtbl **)((char *)&v29.__vftable + (unint64_t)v29.__vftable[-1].~runtime_error) = *(std::runtime_error_vtbl **)(v6 + 24);
  v29.__imp_.__imp_ = (const char *)(v10 + 16);
  if (SBYTE7(v36) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x23B7D9458](v38);
  if (v14)
  {
    sub_23584AAE8(&v26, "conversion of type \"");
    sub_2358511CC((char *)(0x80000002358A1F78 & 0x7FFFFFFFFFFFFFFFLL), &v26, &v27);
    sub_2358511CC("\" to data failed", &v27, &__dst);
    v25 = 0;
    sub_23586A328(&v29, &__dst, &v25);
    v23.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/"
                          "Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/lo"
                          "cal/include/boost/property_tree/detail/ptree_implementation.hpp";
    v23.i64[1] = (uint64_t)"void boost::property_tree::basic_ptree<std::string, std::string>::put_value(const Type &, Tran"
                          "slator) [Key = std::string, Data = std::string, KeyCompare = std::less<std::string>, Type = ch"
                          "ar[12], Translator = boost::property_tree::stream_translator<char, std::char_traits<char>, std"
                          "::allocator<char>, char[12]>]";
    v24 = 828;
    sub_23586A2CC(&v29, &v23);
  }
  if (&v40 == (std::string *)a1)
    goto LABEL_35;
  if (*(char *)(a1 + 23) < 0)
  {
    v21 = (v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v40
        : (std::string *)v40.__r_.__value_.__r.__words[0];
    v22 = (v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v40.__r_.__value_.__r.__words[2])
        : v40.__r_.__value_.__l.__size_;
    sub_23584BAC0((void **)a1, v21, v22);
  }
  else if ((*((_BYTE *)&v40.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    sub_23584B9FC((_QWORD *)a1, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  }
  else
  {
    *(std::string *)a1 = v40;
  }
  if (v39)
  {
LABEL_35:
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
  }
}

void sub_235876970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,std::runtime_error a31,uint64_t a32)
{
  a31.__vftable = (std::runtime_error_vtbl *)&off_2506E0080;
  if (a32)
    (*(void (**)(uint64_t))(*(_QWORD *)a32 + 8))(a32);
  std::runtime_error::~runtime_error(&a31);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a18 & 0x80000000) == 0)
LABEL_10:
        _Unwind_Resume(a1);
LABEL_9:
      operator delete(a13);
      _Unwind_Resume(a1);
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a19);
  if ((a18 & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_235876A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  std::locale::~locale(&a13);
  sub_235868848((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_235876A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_235868848((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_235876AA4(uint64_t a1, const std::locale *a2)
{
  std::runtime_error_vtbl *v4;
  uint64_t v5;
  uint64_t v6;
  std::runtime_error_vtbl *v7;
  std::runtime_error_vtbl *v8;
  std::ios_base *v9;
  uint64_t v10;
  std::ios_base *v11;
  std::locale *rdbuf;
  std::locale *v13;
  int v14;
  std::string::size_type v15;
  std::string *p_dst;
  unint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  std::string *v21;
  size_t v22;
  int8x16_t v23;
  uint64_t v24;
  uint64_t v25;
  std::string v26;
  std::string v27;
  std::string __dst;
  std::runtime_error v29;
  const void *v30;
  _BYTE v31[8];
  uint64_t v32;
  const void *v33;
  unint64_t v34;
  __int128 __p;
  __int128 v36;
  int v37;
  uint64_t v38[19];
  char v39;
  std::string v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v4 = (std::runtime_error_vtbl *)MEMORY[0x24BEDB870];
  v5 = MEMORY[0x24BEDB870] + 64;
  v6 = MEMORY[0x24BEDB800];
  v7 = *(std::runtime_error_vtbl **)(MEMORY[0x24BEDB800] + 8);
  v8 = *(std::runtime_error_vtbl **)(MEMORY[0x24BEDB800] + 16);
  v38[0] = MEMORY[0x24BEDB870] + 64;
  v29.__vftable = v7;
  *(std::runtime_error_vtbl **)((char *)&v29.__vftable + (unint64_t)v7[-1].~runtime_error) = v8;
  v9 = (std::ios_base *)((char *)&v29 + (unint64_t)v29.__vftable[-1].~runtime_error);
  std::ios_base::init(v9, &v29.__imp_);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v29.__vftable = v4 + 1;
  v38[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x24BEDB848];
  v29.__imp_.__imp_ = (const char *)(MEMORY[0x24BEDB848] + 16);
  __p = 0u;
  v36 = 0u;
  v37 = 16;
  v11 = (std::ios_base *)((char *)&v29 + (unint64_t)v29.__vftable[-1].~runtime_error);
  std::ios_base::getloc(v11);
  std::ios_base::imbue(v11, a2);
  std::locale::~locale((std::locale *)&__dst);
  rdbuf = (std::locale *)v11->__rdbuf_;
  if (rdbuf)
  {
    (*((void (**)(std::locale *, const std::locale *))rdbuf->__locale_ + 2))(rdbuf, a2);
    v13 = rdbuf + 1;
    std::locale::locale((std::locale *)&v27, v13);
    std::locale::operator=(v13, a2);
    std::locale::~locale((std::locale *)&v27);
  }
  std::locale::~locale((std::locale *)&v26);
  sub_23584D1D8(&v29, (uint64_t)"http://www.w3.org/2000/svg", 26);
  v14 = *(_DWORD *)&v31[(unint64_t)v29.__vftable[-1].~runtime_error] & 5;
  if (v14)
  {
    v39 = 0;
    goto LABEL_19;
  }
  if ((v37 & 0x10) != 0)
  {
    v17 = *((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1) < v34)
    {
      *((_QWORD *)&v36 + 1) = v34;
      v17 = v34;
    }
    v18 = v33;
    v15 = v17 - (_QWORD)v33;
    if (v17 - (unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_39;
  }
  else
  {
    if ((v37 & 8) == 0)
    {
      v15 = 0;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
      goto LABEL_18;
    }
    v18 = v30;
    v15 = v32 - (_QWORD)v30;
    if ((unint64_t)(v32 - (_QWORD)v30) >= 0x7FFFFFFFFFFFFFF8)
LABEL_39:
      sub_23584B34C();
  }
  if (v15 >= 0x17)
  {
    v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v19 = v15 | 7;
    v20 = v19 + 1;
    p_dst = (std::string *)operator new(v19 + 1);
    __dst.__r_.__value_.__l.__size_ = v15;
    __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v15;
    p_dst = &__dst;
    if (!v15)
      goto LABEL_18;
  }
  memmove(p_dst, v18, v15);
LABEL_18:
  p_dst->__r_.__value_.__s.__data_[v15] = 0;
  v40 = __dst;
  v39 = 1;
LABEL_19:
  v29.__vftable = *(std::runtime_error_vtbl **)v6;
  *(std::runtime_error_vtbl **)((char *)&v29.__vftable + (unint64_t)v29.__vftable[-1].~runtime_error) = *(std::runtime_error_vtbl **)(v6 + 24);
  v29.__imp_.__imp_ = (const char *)(v10 + 16);
  if (SBYTE7(v36) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x23B7D9458](v38);
  if (v14)
  {
    sub_23584AAE8(&v26, "conversion of type \"");
    sub_2358511CC((char *)(0x80000002358A1F7ELL & 0x7FFFFFFFFFFFFFFFLL), &v26, &v27);
    sub_2358511CC("\" to data failed", &v27, &__dst);
    v25 = 0;
    sub_23586A328(&v29, &__dst, &v25);
    v23.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/"
                          "Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/lo"
                          "cal/include/boost/property_tree/detail/ptree_implementation.hpp";
    v23.i64[1] = (uint64_t)"void boost::property_tree::basic_ptree<std::string, std::string>::put_value(const Type &, Tran"
                          "slator) [Key = std::string, Data = std::string, KeyCompare = std::less<std::string>, Type = ch"
                          "ar[27], Translator = boost::property_tree::stream_translator<char, std::char_traits<char>, std"
                          "::allocator<char>, char[27]>]";
    v24 = 828;
    sub_23586A2CC(&v29, &v23);
  }
  if (&v40 == (std::string *)a1)
    goto LABEL_35;
  if (*(char *)(a1 + 23) < 0)
  {
    v21 = (v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v40
        : (std::string *)v40.__r_.__value_.__r.__words[0];
    v22 = (v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v40.__r_.__value_.__r.__words[2])
        : v40.__r_.__value_.__l.__size_;
    sub_23584BAC0((void **)a1, v21, v22);
  }
  else if ((*((_BYTE *)&v40.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    sub_23584B9FC((_QWORD *)a1, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  }
  else
  {
    *(std::string *)a1 = v40;
  }
  if (v39)
  {
LABEL_35:
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
  }
}

void sub_235876E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,std::runtime_error a31,uint64_t a32)
{
  a31.__vftable = (std::runtime_error_vtbl *)&off_2506E0080;
  if (a32)
    (*(void (**)(uint64_t))(*(_QWORD *)a32 + 8))(a32);
  std::runtime_error::~runtime_error(&a31);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a18 & 0x80000000) == 0)
LABEL_10:
        _Unwind_Resume(a1);
LABEL_9:
      operator delete(a13);
      _Unwind_Resume(a1);
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a19);
  if ((a18 & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_235876FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  std::locale::~locale(&a13);
  sub_235868848((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_235876FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_235868848((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_235876FD0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = *(void **)(a1 + 152);
  if (v2)
  {
    *(_QWORD *)(a1 + 160) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 128);
  if (v3)
  {
    *(_QWORD *)(a1 + 136) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 104);
  if (v4)
  {
    *(_QWORD *)(a1 + 112) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 80);
  if (v5)
  {
    *(_QWORD *)(a1 + 88) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 56);
  if (v6)
  {
    *(_QWORD *)(a1 + 64) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 32);
  if (v7)
  {
    *(_QWORD *)(a1 + 40) = v7;
    operator delete(v7);
  }
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD **)(v8 + 8);
  v10 = v9[11];
  if (v10)
    v11 = (_QWORD *)(v10 - 80);
  else
    v11 = 0;
  if (v11 != v9)
  {
    do
    {
      v12 = v11[11];
      if (v12)
        v9 = (_QWORD *)(v12 - 80);
      else
        v9 = 0;
      sub_2358688CC((uint64_t)v11);
      operator delete(v11);
      v11 = v9;
    }
    while (v9 != *(_QWORD **)(v8 + 8));
  }
  operator delete(v9);
  MEMORY[0x23B7D94C4](v8, 0x1020C402FC1992ELL);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_2358770EC(_QWORD *a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  std::string *v8;
  std::string::size_type size;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  std::string *v15;
  std::string::size_type v16;
  int8x16_t v17;
  uint64_t v18;
  std::string v19;
  std::string v20;

  memset(&v19, 0, sizeof(v19));
  std::string::push_back(&v19, 60);
  std::string::push_back(&v19, 63);
  std::string::push_back(&v19, 120);
  std::string::push_back(&v19, 109);
  std::string::push_back(&v19, 108);
  std::string::push_back(&v19, 32);
  std::string::push_back(&v19, 118);
  std::string::push_back(&v19, 101);
  std::string::push_back(&v19, 114);
  std::string::push_back(&v19, 115);
  std::string::push_back(&v19, 105);
  std::string::push_back(&v19, 111);
  std::string::push_back(&v19, 110);
  std::string::push_back(&v19, 61);
  std::string::push_back(&v19, 34);
  std::string::push_back(&v19, 49);
  std::string::push_back(&v19, 46);
  std::string::push_back(&v19, 48);
  std::string::push_back(&v19, 34);
  std::string::push_back(&v19, 32);
  std::string::push_back(&v19, 101);
  std::string::push_back(&v19, 110);
  std::string::push_back(&v19, 99);
  std::string::push_back(&v19, 111);
  std::string::push_back(&v19, 100);
  std::string::push_back(&v19, 105);
  std::string::push_back(&v19, 110);
  std::string::push_back(&v19, 103);
  std::string::push_back(&v19, 61);
  std::string::push_back(&v19, 34);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v19;
  else
    v8 = (std::string *)v19.__r_.__value_.__r.__words[0];
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  else
    size = v19.__r_.__value_.__l.__size_;
  v10 = sub_23584D1D8(a1, (uint64_t)v8, size);
  v11 = *(char *)(a4 + 39);
  if (v11 >= 0)
    v12 = a4 + 16;
  else
    v12 = *(_QWORD *)(a4 + 16);
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a4 + 39);
  else
    v13 = *(_QWORD *)(a4 + 24);
  v14 = sub_23584D1D8(v10, v12, v13);
  memset(&v20, 0, sizeof(v20));
  std::string::push_back(&v20, 34);
  std::string::push_back(&v20, 63);
  std::string::push_back(&v20, 62);
  std::string::push_back(&v20, 10);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v20;
  else
    v15 = (std::string *)v20.__r_.__value_.__r.__words[0];
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  else
    v16 = v20.__r_.__value_.__l.__size_;
  sub_23584D1D8(v14, (uint64_t)v15, v16);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v20.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_21;
  }
  else if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(v19.__r_.__value_.__l.__data_);
LABEL_21:
  memset(&v19, 0, sizeof(v19));
  sub_235877480(a1, (uint64_t)&v19, a2, -1, (unsigned __int8 *)a4);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    sub_23584AAE8(&v20, "write error");
    sub_235870C54((std::runtime_error *)&v19, (void **)&v20.__r_.__value_.__l.__data_, a3, 0);
    v19.__r_.__value_.__r.__words[0] = (std::string::size_type)off_2506E01B0;
    v17.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/"
                          "Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/lo"
                          "cal/include/boost/property_tree/detail/xml_parser_write.hpp";
    v17.i64[1] = (uint64_t)"void boost::property_tree::xml_parser::write_xml_internal(std::basic_ostream<typename Ptree::k"
                          "ey_type::value_type> &, const Ptree &, const std::string &, const xml_writer_settings<typename"
                          " Ptree::key_type> &) [Ptree = boost::property_tree::basic_ptree<std::string, std::string>]";
    v18 = 190;
    sub_23586E890((uint64_t)&v19, &v17);
  }
}

void sub_23587741C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  sub_23586E8EC(&a13);
  if (*(char *)(v17 - 49) < 0)
    operator delete(*(void **)(v17 - 72));
  _Unwind_Resume(a1);
}

void sub_235877480(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  void (*v12)(void *);
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unsigned __int8 *v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  unsigned __int8 *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  std::string *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  std::string *v47;
  std::string::size_type size;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  unsigned __int8 *v64;
  unsigned __int8 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  unsigned __int8 *v70;
  unsigned __int8 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 *v75;
  unsigned __int8 *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  std::string *v80;
  std::string::size_type v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  std::string *v87;
  std::string::size_type v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  int v93;
  std::string *p_p;
  uint64_t v95;
  _QWORD *v96;
  int v97;
  _QWORD *v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  int v103;
  int v104;
  BOOL v106;
  void *__dst[2];
  char v109;
  std::string __p;
  char v111;
  std::string *v112;
  uint64_t v113;
  char v114;

  v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a3 + 8);
  v106 = v7 == 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8);
  v9 = *(_QWORD *)(v8 + 88);
  v10 = *((_QWORD *)a5 + 1);
  if (v9)
    v11 = (unsigned __int8 *)(v9 - 80);
  else
    v11 = 0;
  if (v11 == (unsigned __int8 *)v8)
  {
    v26 = a4;
    v103 = 0;
    v28 = *(unsigned __int8 *)(a3 + 23);
    if ((v28 & 0x80u) != 0)
      v28 = *(_QWORD *)(a3 + 8);
    if (!v28)
      goto LABEL_61;
    goto LABEL_62;
  }
  v12 = (void (*)(void *))MEMORY[0x24BEDACF0];
  do
  {
    v14 = atomic_load((unsigned __int8 *)&qword_2563067F0);
    if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_2563067F0))
    {
      sub_235875EEC((std::string *)byte_256306808, "<xmlattr>");
      __cxa_atexit(v12, byte_256306808, &dword_235841000);
      __cxa_guard_release(&qword_2563067F0);
    }
    v15 = v11[23];
    if ((v15 & 0x80u) == 0)
      v16 = v11[23];
    else
      v16 = *((_QWORD *)v11 + 1);
    v17 = byte_256306808[23];
    if (byte_256306808[23] < 0)
      v17 = *(_QWORD *)&byte_256306808[8];
    if (v16 == v17)
    {
      if (byte_256306808[23] >= 0)
        v18 = byte_256306808;
      else
        v18 = *(char **)byte_256306808;
      if ((v15 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v11, v18, *((_QWORD *)v11 + 1)))
          goto LABEL_9;
      }
      else
      {
        if (!v11[23])
          goto LABEL_9;
        v19 = v11;
        while (*v19 == *v18)
        {
          ++v19;
          ++v18;
          if (!--v15)
            goto LABEL_9;
        }
      }
    }
    v20 = atomic_load((unsigned __int8 *)&qword_2563067F8);
    if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_2563067F8))
    {
      sub_235875EEC((std::string *)&xmmword_256306820, "<xmltext>");
      __cxa_atexit(v12, &xmmword_256306820, &dword_235841000);
      __cxa_guard_release(&qword_2563067F8);
    }
    v21 = v11[23];
    if ((v21 & 0x80u) == 0)
      v22 = v11[23];
    else
      v22 = *((_QWORD *)v11 + 1);
    v23 = byte_256306837;
    if (byte_256306837 < 0)
      v23 = *((_QWORD *)&xmmword_256306820 + 1);
    if (v22 != v23)
      goto LABEL_52;
    if (byte_256306837 >= 0)
      v24 = &xmmword_256306820;
    else
      v24 = (__int128 *)xmmword_256306820;
    if ((v21 & 0x80) != 0)
    {
      v106 = 0;
      if (memcmp(*(const void **)v11, v24, *((_QWORD *)v11 + 1)))
        goto LABEL_53;
    }
    else
    {
      if (v11[23])
      {
        v25 = v11;
        while (*v25 == *(unsigned __int8 *)v24)
        {
          ++v25;
          v24 = (__int128 *)((char *)v24 + 1);
          if (!--v21)
            goto LABEL_8;
        }
LABEL_52:
        v106 = 0;
LABEL_53:
        v103 = 1;
        goto LABEL_54;
      }
LABEL_8:
      v106 = 0;
    }
LABEL_9:
    v13 = *((_QWORD *)v11 + 11);
    if (v13)
      v11 = (unsigned __int8 *)(v13 - 80);
    else
      v11 = 0;
  }
  while (v11 != (unsigned __int8 *)v8);
  v103 = 0;
LABEL_54:
  v26 = a4;
  v27 = *(unsigned __int8 *)(a3 + 23);
  if ((v27 & 0x80u) != 0)
    v27 = *(_QWORD *)(a3 + 8);
  if (!v27)
  {
LABEL_61:
    if (*(_QWORD *)(*(_QWORD *)(a3 + 24) + 24))
      goto LABEL_62;
    if ((v26 & 0x80000000) == 0)
    {
      sub_2358781B8(a1, v26, *a5, *((_QWORD *)a5 + 1));
      __p.__r_.__value_.__s.__data_[0] = 60;
      v98 = sub_23584D1D8(a1, (uint64_t)&__p, 1);
      v99 = *(char *)(a2 + 23);
      if (v99 >= 0)
        v100 = a2;
      else
        v100 = *(_QWORD *)a2;
      if (v99 >= 0)
        v101 = *(unsigned __int8 *)(a2 + 23);
      else
        v101 = *(_QWORD *)(a2 + 8);
      v92 = sub_23584D1D8(v98, v100, v101);
      __p.__r_.__value_.__s.__data_[0] = 47;
      p_p = &__p;
      v95 = 1;
      goto LABEL_211;
    }
    return;
  }
LABEL_62:
  if ((v26 & 0x80000000) == 0)
  {
    sub_2358781B8(a1, v26, *a5, *((_QWORD *)a5 + 1));
    __p.__r_.__value_.__s.__data_[0] = 60;
    v29 = sub_23584D1D8(a1, (uint64_t)&__p, 1);
    v30 = *(char *)(a2 + 23);
    if (v30 >= 0)
      v31 = a2;
    else
      v31 = *(_QWORD *)a2;
    if (v30 >= 0)
      v32 = *(unsigned __int8 *)(a2 + 23);
    else
      v32 = *(_QWORD *)(a2 + 8);
    sub_23584D1D8(v29, v31, v32);
    v33 = atomic_load((unsigned __int8 *)&qword_2563067F0);
    if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_2563067F0))
    {
      sub_235875EEC((std::string *)byte_256306808, "<xmlattr>");
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_256306808, &dword_235841000);
      __cxa_guard_release(&qword_2563067F0);
    }
    if (byte_256306808[23] < 0)
      sub_23584B488(&__p, *(void **)byte_256306808, *(unint64_t *)&byte_256306808[8]);
    else
      __p = *(std::string *)byte_256306808;
    v111 = 46;
    v34 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v112 = v34;
    sub_23586D9AC(&v113, a3, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      v35 = v113;
      if (!v113)
        goto LABEL_105;
    }
    else
    {
      v35 = v113;
      if (!v113)
        goto LABEL_105;
    }
    v36 = *(_QWORD *)(*(_QWORD *)(v35 + 24) + 8);
    v37 = *(_QWORD *)(v36 + 88);
    if (v37)
      v38 = v37 - 80;
    else
      v38 = 0;
    if (v38 != v36)
    {
      while (2)
      {
        __p.__r_.__value_.__s.__data_[0] = 32;
        v40 = sub_23584D1D8(a1, (uint64_t)&__p, 1);
        v41 = *(char *)(v38 + 23);
        if (v41 >= 0)
          v42 = v38;
        else
          v42 = *(_QWORD *)v38;
        if (v41 >= 0)
          v43 = *(unsigned __int8 *)(v38 + 23);
        else
          v43 = *(_QWORD *)(v38 + 8);
        v44 = sub_23584D1D8(v40, v42, v43);
        __p.__r_.__value_.__s.__data_[0] = 61;
        v45 = sub_23584D1D8(v44, (uint64_t)&__p, 1);
        __p.__r_.__value_.__s.__data_[0] = 34;
        v46 = sub_23584D1D8(v45, (uint64_t)&__p, 1);
        sub_235875F4C(__dst, (__int128 *)(v38 + 24));
        sub_2358782D0(&__p, __dst);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v47 = &__p;
        else
          v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v49 = sub_23584D1D8(v46, (uint64_t)v47, size);
        v114 = 34;
        sub_23584D1D8(v49, (uint64_t)&v114, 1);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (v109 < 0)
            goto LABEL_104;
        }
        else if (v109 < 0)
        {
LABEL_104:
          operator delete(__dst[0]);
        }
        v39 = *(_QWORD *)(v38 + 88);
        if (v39)
          v38 = v39 - 80;
        else
          v38 = 0;
        if (v38 == *(_QWORD *)(*(_QWORD *)(v35 + 24) + 8))
          break;
        continue;
      }
    }
LABEL_105:
    if (v106)
    {
      __p.__r_.__value_.__s.__data_[0] = 47;
      v50 = sub_23584D1D8(a1, (uint64_t)&__p, 1);
      __p.__r_.__value_.__s.__data_[0] = 62;
      sub_23584D1D8(v50, (uint64_t)&__p, 1);
      v26 = a4;
      if (v10)
        goto LABEL_107;
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = 62;
      sub_23584D1D8(a1, (uint64_t)&__p, 1);
      v97 = v103;
      if (!v10)
        v97 = 0;
      v26 = a4;
      if (v97 == 1)
      {
LABEL_107:
        __p.__r_.__value_.__s.__data_[0] = 10;
        sub_23584D1D8(a1, (uint64_t)&__p, 1);
      }
    }
  }
  v51 = *(unsigned __int8 *)(a3 + 23);
  if ((v51 & 0x80u) != 0)
    v51 = *(_QWORD *)(a3 + 8);
  if (v51)
  {
    sub_235875F4C(&__p, (__int128 *)a3);
    v52 = v10 ? v103 : 0;
    sub_2358787DC(a1, (void **)&__p.__r_.__value_.__l.__data_, v26 + 1, v52, *a5, *((_QWORD *)a5 + 1));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v53 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8);
  v54 = *(_QWORD *)(v53 + 88);
  if (v54)
    v55 = (unsigned __int8 *)(v54 - 80);
  else
    v55 = 0;
  if (v55 != (unsigned __int8 *)v53)
  {
    v56 = (a4 + 1);
    v57 = v103;
    if (!v10)
      v57 = 0;
    v104 = v57;
    do
    {
      v59 = atomic_load((unsigned __int8 *)&qword_2563067F0);
      if ((v59 & 1) == 0 && __cxa_guard_acquire(&qword_2563067F0))
      {
        sub_235875EEC((std::string *)byte_256306808, "<xmlattr>");
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_256306808, &dword_235841000);
        __cxa_guard_release(&qword_2563067F0);
      }
      v60 = v55[23];
      if ((v60 & 0x80u) == 0)
        v61 = v55[23];
      else
        v61 = *((_QWORD *)v55 + 1);
      v62 = byte_256306808[23];
      if (byte_256306808[23] < 0)
        v62 = *(_QWORD *)&byte_256306808[8];
      if (v61 == v62)
      {
        if (byte_256306808[23] >= 0)
          v63 = byte_256306808;
        else
          v63 = *(char **)byte_256306808;
        if ((v60 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v55, v63, *((_QWORD *)v55 + 1)))
            goto LABEL_125;
        }
        else
        {
          if (!v55[23])
            goto LABEL_125;
          v64 = v55;
          while (*v64 == *v63)
          {
            ++v64;
            ++v63;
            if (!--v60)
              goto LABEL_125;
          }
        }
      }
      v65 = atomic_load((unsigned __int8 *)&qword_256306800);
      if ((v65 & 1) == 0 && __cxa_guard_acquire(&qword_256306800))
      {
        sub_235875EEC((std::string *)&xmmword_256306838, "<xmlcomment>");
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_256306838, &dword_235841000);
        __cxa_guard_release(&qword_256306800);
      }
      v66 = v55[23];
      if ((v66 & 0x80u) == 0)
        v67 = v55[23];
      else
        v67 = *((_QWORD *)v55 + 1);
      v68 = byte_25630684F;
      if (byte_25630684F < 0)
        v68 = *((_QWORD *)&xmmword_256306838 + 1);
      if (v67 == v68)
      {
        if (byte_25630684F >= 0)
          v69 = &xmmword_256306838;
        else
          v69 = (__int128 *)xmmword_256306838;
        if ((v66 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v55, v69, *((_QWORD *)v55 + 1)))
          {
LABEL_179:
            sub_235875F4C(&__p, (__int128 *)(v55 + 24));
            if (v10)
            {
              sub_2358781B8(a1, v56, *a5, *((_QWORD *)a5 + 1));
              LOBYTE(__dst[0]) = 60;
              v77 = sub_23584D1D8(a1, (uint64_t)__dst, 1);
              LOBYTE(__dst[0]) = 33;
              v78 = sub_23584D1D8(v77, (uint64_t)__dst, 1);
              LOBYTE(__dst[0]) = 45;
              v79 = sub_23584D1D8(v78, (uint64_t)__dst, 1);
              LOBYTE(__dst[0]) = 45;
              sub_23584D1D8(v79, (uint64_t)__dst, 1);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v80 = &__p;
              else
                v80 = (std::string *)__p.__r_.__value_.__r.__words[0];
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v81 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              else
                v81 = __p.__r_.__value_.__l.__size_;
              sub_23584D1D8(a1, (uint64_t)v80, v81);
              LOBYTE(__dst[0]) = 45;
              v82 = sub_23584D1D8(a1, (uint64_t)__dst, 1);
              LOBYTE(__dst[0]) = 45;
              v83 = sub_23584D1D8(v82, (uint64_t)__dst, 1);
              LOBYTE(__dst[0]) = 62;
              sub_23584D1D8(v83, (uint64_t)__dst, 1);
              LOBYTE(__dst[0]) = 10;
              sub_23584D1D8(a1, (uint64_t)__dst, 1);
            }
            else
            {
              LOBYTE(__dst[0]) = 60;
              v84 = sub_23584D1D8(a1, (uint64_t)__dst, 1);
              LOBYTE(__dst[0]) = 33;
              v85 = sub_23584D1D8(v84, (uint64_t)__dst, 1);
              LOBYTE(__dst[0]) = 45;
              v86 = sub_23584D1D8(v85, (uint64_t)__dst, 1);
              LOBYTE(__dst[0]) = 45;
              sub_23584D1D8(v86, (uint64_t)__dst, 1);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v87 = &__p;
              else
                v87 = (std::string *)__p.__r_.__value_.__r.__words[0];
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v88 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              else
                v88 = __p.__r_.__value_.__l.__size_;
              sub_23584D1D8(a1, (uint64_t)v87, v88);
              LOBYTE(__dst[0]) = 45;
              v89 = sub_23584D1D8(a1, (uint64_t)__dst, 1);
              LOBYTE(__dst[0]) = 45;
              v90 = sub_23584D1D8(v89, (uint64_t)__dst, 1);
              LOBYTE(__dst[0]) = 62;
              sub_23584D1D8(v90, (uint64_t)__dst, 1);
            }
LABEL_194:
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            goto LABEL_125;
          }
        }
        else
        {
          if (!v55[23])
            goto LABEL_179;
          v70 = v55;
          while (*v70 == *(unsigned __int8 *)v69)
          {
            ++v70;
            v69 = (__int128 *)((char *)v69 + 1);
            if (!--v66)
              goto LABEL_179;
          }
        }
      }
      v71 = atomic_load((unsigned __int8 *)&qword_2563067F8);
      if ((v71 & 1) == 0 && __cxa_guard_acquire(&qword_2563067F8))
      {
        sub_235875EEC((std::string *)&xmmword_256306820, "<xmltext>");
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_256306820, &dword_235841000);
        __cxa_guard_release(&qword_2563067F8);
      }
      v72 = v55[23];
      if ((v72 & 0x80u) == 0)
        v73 = v55[23];
      else
        v73 = *((_QWORD *)v55 + 1);
      v74 = byte_256306837;
      if (byte_256306837 < 0)
        v74 = *((_QWORD *)&xmmword_256306820 + 1);
      if (v73 == v74)
      {
        if (byte_256306837 >= 0)
          v75 = &xmmword_256306820;
        else
          v75 = (__int128 *)xmmword_256306820;
        if ((v72 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v55, v75, *((_QWORD *)v55 + 1)))
            goto LABEL_178;
        }
        else
        {
          if (!v55[23])
          {
LABEL_178:
            sub_235875F4C(&__p, (__int128 *)(v55 + 24));
            sub_2358787DC(a1, (void **)&__p.__r_.__value_.__l.__data_, v56, v104, *a5, *((_QWORD *)a5 + 1));
            goto LABEL_194;
          }
          v76 = v55;
          while (*v76 == *(unsigned __int8 *)v75)
          {
            ++v76;
            v75 = (__int128 *)((char *)v75 + 1);
            if (!--v72)
              goto LABEL_178;
          }
        }
      }
      sub_235877480(a1, v55, v55 + 24, v56, a5);
LABEL_125:
      v58 = *((_QWORD *)v55 + 11);
      if (v58)
        v55 = (unsigned __int8 *)(v58 - 80);
      else
        v55 = 0;
    }
    while (v55 != *(unsigned __int8 **)(*(_QWORD *)(a3 + 24) + 8));
  }
  if (a4 >= 0 && !v106)
  {
    if (v103)
      sub_2358781B8(a1, a4, *a5, *((_QWORD *)a5 + 1));
    __p.__r_.__value_.__s.__data_[0] = 60;
    v91 = sub_23584D1D8(a1, (uint64_t)&__p, 1);
    __p.__r_.__value_.__s.__data_[0] = 47;
    v92 = sub_23584D1D8(v91, (uint64_t)&__p, 1);
    v93 = *(char *)(a2 + 23);
    if (v93 >= 0)
      p_p = (std::string *)a2;
    else
      p_p = *(std::string **)a2;
    if (v93 >= 0)
      v95 = *(unsigned __int8 *)(a2 + 23);
    else
      v95 = *(_QWORD *)(a2 + 8);
LABEL_211:
    v96 = sub_23584D1D8(v92, (uint64_t)p_p, v95);
    __p.__r_.__value_.__s.__data_[0] = 62;
    sub_23584D1D8(v96, (uint64_t)&__p, 1);
    if (v10)
    {
      __p.__r_.__value_.__s.__data_[0] = 10;
      sub_23584D1D8(a1, (uint64_t)&__p, 1);
    }
  }
}

void sub_2358780D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2563067F0);
  _Unwind_Resume(a1);
}

void sub_2358780EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2563067F8);
  _Unwind_Resume(a1);
}

void sub_235878104(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2563067F0);
  _Unwind_Resume(a1);
}

void sub_23587811C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2563067F8);
  _Unwind_Resume(a1);
}

void sub_235878134(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256306800);
  _Unwind_Resume(a1);
}

void sub_23587814C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2563067F0);
  _Unwind_Resume(a1);
}

void sub_235878164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2358781B8(_QWORD *a1, int a2, int __c, uint64_t a4)
{
  size_t v4;
  void **p_b;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  void **__b;
  size_t v13;
  int64_t v14;

  v4 = a2 * a4;
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_23584B34C();
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    p_b = (void **)operator new(v8 + 1);
    v13 = v4;
    v14 = v9 | 0x8000000000000000;
    __b = p_b;
    goto LABEL_8;
  }
  HIBYTE(v14) = a2 * a4;
  p_b = (void **)&__b;
  if (v4)
LABEL_8:
    memset(p_b, __c, v4);
  *((_BYTE *)p_b + v4) = 0;
  if (v14 >= 0)
    v10 = (void **)&__b;
  else
    v10 = __b;
  if (v14 >= 0)
    v11 = HIBYTE(v14);
  else
    v11 = v13;
  sub_23584D1D8(a1, (uint64_t)v10, v11);
  if (SHIBYTE(v14) < 0)
    operator delete(__b);
}

void sub_2358782B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2358782D0(std::string *__dst, void **a2)
{
  char *v2;
  char *v4;
  _BYTE *v5;
  void *v6;
  uint64_t v7;
  int v8;
  char *v9;
  char *v10;
  std::string *v11;
  std::string::size_type v12;
  uint64_t v13;
  std::string::size_type v14;
  void *p_b;
  uint64_t v16;
  uint64_t v17;
  std::string *v18;
  std::string::size_type size;
  std::string __b;

  v2 = (char *)a2;
  v4 = (char *)*((unsigned __int8 *)a2 + 23);
  if (*((char *)a2 + 23) < 0)
  {
    v6 = a2[1];
    if (!v6)
    {
      sub_23584B488(__dst, *a2, 0);
      return;
    }
    __dst->__r_.__value_.__r.__words[0] = 0;
    __dst->__r_.__value_.__l.__size_ = 0;
    __dst->__r_.__value_.__r.__words[2] = 0;
    v5 = *a2;
  }
  else
  {
    if (!*((_BYTE *)a2 + 23))
    {
      *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      __dst->__r_.__value_.__r.__words[2] = (std::string::size_type)a2[2];
      return;
    }
    __dst->__r_.__value_.__r.__words[0] = 0;
    __dst->__r_.__value_.__l.__size_ = 0;
    v5 = a2;
    v6 = v4;
    __dst->__r_.__value_.__r.__words[2] = 0;
  }
  v7 = 0;
  while (v5[v7] == 32)
  {
    if (v6 == (void *)++v7)
      goto LABEL_53;
  }
  if (v7 == -1)
  {
LABEL_53:
    memset(&__b, 0, sizeof(__b));
    std::string::push_back(&__b, 38);
    std::string::push_back(&__b, 35);
    std::string::push_back(&__b, 51);
    std::string::push_back(&__b, 50);
    std::string::push_back(&__b, 59);
    if (SHIBYTE(__dst->__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst->__r_.__value_.__l.__data_);
    *__dst = __b;
    v13 = v2[23];
    if ((v13 & 0x80u) != 0)
      v13 = *((_QWORD *)v2 + 1);
    v14 = v13 - 1;
    if ((unint64_t)(v13 - 1) >= 0x7FFFFFFFFFFFFFF8)
      sub_23584B34C();
    if (v14 >= 0x17)
    {
      v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v16 = v14 | 7;
      v17 = v16 + 1;
      p_b = operator new(v16 + 1);
      __b.__r_.__value_.__l.__size_ = v14;
      __b.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    }
    else
    {
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = v13 - 1;
      p_b = &__b;
      if (v13 == 1)
        goto LABEL_67;
    }
    memset(p_b, 32, v14);
LABEL_67:
    *((_BYTE *)p_b + v14) = 0;
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &__b;
    else
      v18 = (std::string *)__b.__r_.__value_.__r.__words[0];
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__b.__r_.__value_.__r.__words[2]);
    else
      size = __b.__r_.__value_.__l.__size_;
    std::string::append(__dst, (const std::string::value_type *)v18, size);
    if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__b.__r_.__value_.__l.__data_);
    return;
  }
  v8 = (char)v4;
  v9 = &v4[(_QWORD)a2];
  if (v8 >= 0)
    v10 = v9;
  else
    v10 = (char *)a2[1] + (_QWORD)*a2;
  if (v8 < 0)
    v2 = (char *)*a2;
  for (; v2 != v10; ++v2)
  {
    switch(*v2)
    {
      case '"':
        memset(&__b, 0, sizeof(__b));
        std::string::push_back(&__b, 38);
        std::string::push_back(&__b, 113);
        std::string::push_back(&__b, 117);
        std::string::push_back(&__b, 111);
        std::string::push_back(&__b, 116);
        std::string::push_back(&__b, 59);
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = &__b;
        else
          v11 = (std::string *)__b.__r_.__value_.__r.__words[0];
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v12 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
        else
          v12 = __b.__r_.__value_.__l.__size_;
        goto LABEL_51;
      case '&':
        memset(&__b, 0, sizeof(__b));
        std::string::push_back(&__b, 38);
        std::string::push_back(&__b, 97);
        std::string::push_back(&__b, 109);
        std::string::push_back(&__b, 112);
        std::string::push_back(&__b, 59);
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = &__b;
        else
          v11 = (std::string *)__b.__r_.__value_.__r.__words[0];
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v12 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
        else
          v12 = __b.__r_.__value_.__l.__size_;
        goto LABEL_51;
      case '\'':
        memset(&__b, 0, sizeof(__b));
        std::string::push_back(&__b, 38);
        std::string::push_back(&__b, 97);
        std::string::push_back(&__b, 112);
        std::string::push_back(&__b, 111);
        std::string::push_back(&__b, 115);
        std::string::push_back(&__b, 59);
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = &__b;
        else
          v11 = (std::string *)__b.__r_.__value_.__r.__words[0];
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v12 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
        else
          v12 = __b.__r_.__value_.__l.__size_;
        goto LABEL_51;
      case '<':
        memset(&__b, 0, sizeof(__b));
        std::string::push_back(&__b, 38);
        std::string::push_back(&__b, 108);
        std::string::push_back(&__b, 116);
        std::string::push_back(&__b, 59);
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = &__b;
        else
          v11 = (std::string *)__b.__r_.__value_.__r.__words[0];
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v12 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
        else
          v12 = __b.__r_.__value_.__l.__size_;
        goto LABEL_51;
      case '>':
        memset(&__b, 0, sizeof(__b));
        std::string::push_back(&__b, 38);
        std::string::push_back(&__b, 103);
        std::string::push_back(&__b, 116);
        std::string::push_back(&__b, 59);
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = &__b;
        else
          v11 = (std::string *)__b.__r_.__value_.__r.__words[0];
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v12 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
        else
          v12 = __b.__r_.__value_.__l.__size_;
LABEL_51:
        std::string::append(__dst, (const std::string::value_type *)v11, v12);
        if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__b.__r_.__value_.__l.__data_);
        break;
      default:
        std::string::push_back(__dst, *v2);
        break;
    }
  }
}

void sub_235878760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v15 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v15 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void sub_2358787DC(_QWORD *a1, void **a2, int a3, int a4, int __c, uint64_t a6)
{
  std::string *p_p;
  std::string::size_type size;
  std::string __p;

  if (a4)
    sub_2358781B8(a1, a3, __c, a6);
  sub_2358782D0(&__p, a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  sub_23584D1D8(a1, (uint64_t)p_p, size);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!a4)
      return;
LABEL_13:
    __p.__r_.__value_.__s.__data_[0] = 10;
    sub_23584D1D8(a1, (uint64_t)&__p, 1);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (a4)
    goto LABEL_13;
}

void sub_23587889C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

sqlite3 **sub_2358788B8(sqlite3 **a1, char *filename)
{
  const char *v2;
  sqlite3 *v4;
  sqlite3 *ppDb;

  v2 = filename;
  *a1 = 0;
  ppDb = 0;
  if (filename[23] < 0)
  {
    if (!*((_QWORD *)filename + 1))
      return a1;
    v2 = *(const char **)filename;
  }
  else if (!filename[23])
  {
    return a1;
  }
  if (sqlite3_open_v2(v2, &ppDb, 65, 0))
  {
    if (ppDb)
      sqlite3_close_v2(ppDb);
  }
  else
  {
    v4 = *a1;
    *a1 = ppDb;
    if (v4)
      sqlite3_close_v2(v4);
  }
  return a1;
}

void sub_23587894C(_Unwind_Exception *a1)
{
  sqlite3 **v1;

  sub_235878960(v1);
  _Unwind_Resume(a1);
}

sqlite3 **sub_235878960(sqlite3 **a1)
{
  sqlite3 *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    sqlite3_close_v2(v2);
  return a1;
}

sqlite3 ***sub_235878994(sqlite3 ***a1)
{
  sqlite3 **v2;
  sqlite3 *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      sqlite3_close_v2(v3);
    MEMORY[0x23B7D94C4](v2, 0x20C4093837F09);
  }
  return a1;
}

void sub_2358789EC(int *a1@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t valuePtr;

  valuePtr = *a1;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberNSIntegerType, &valuePtr);
  v4 = (std::__shared_weak_count *)operator new();
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_2506E0248;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (CFNumberRef)v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_235878AC4(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_235878ADC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_235878AF0(uint64_t a1@<X0>, CFStringRef *a2@<X8>)
{
  int v3;
  const UInt8 *v4;
  CFIndex v5;
  CFStringRef v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v3 = *(char *)(a1 + 23);
  if (v3 >= 0)
    v4 = (const UInt8 *)a1;
  else
    v4 = *(const UInt8 **)a1;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 23);
  else
    v5 = *(_QWORD *)(a1 + 8);
  v6 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], v4, v5, 0x8000100u, 0);
  v7 = (std::__shared_weak_count *)operator new();
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_2506DF190;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a2 = v6;
  a2[1] = (CFStringRef)v7;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_235878BD0(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_235878BE8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

CFIndex sub_235878BFC@<X0>(CFIndex result@<X0>, std::string *a2@<X8>)
{
  const __CFString *v3;
  CFTypeID TypeID;
  CFIndex v5;
  CFIndex v6;
  std::string *v7;
  std::string v8;
  CFIndex usedBufLen;
  CFRange v10;
  CFRange v11;

  if (!result)
    goto LABEL_9;
  v3 = (const __CFString *)result;
  TypeID = CFStringGetTypeID();
  result = CFGetTypeID(v3);
  if (result != TypeID)
    goto LABEL_9;
  result = CFStringGetLength(v3);
  if (result)
  {
    v5 = result;
    usedBufLen = 0;
    v10.location = 0;
    v10.length = result;
    result = CFStringGetBytes(v3, v10, 0x8000100u, 0, 0, 0, 0, &usedBufLen);
    if (result > 0)
    {
      memset(&v8, 0, sizeof(v8));
      if (usedBufLen)
      {
        std::string::append(&v8, usedBufLen, 0);
        v6 = usedBufLen;
        if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v7 = &v8;
        else
          v7 = (std::string *)v8.__r_.__value_.__r.__words[0];
      }
      else
      {
        v6 = 0;
        v7 = &v8;
      }
      v11.location = 0;
      v11.length = v5;
      result = CFStringGetBytes(v3, v11, 0x8000100u, 0, 0, (UInt8 *)v7, v6, 0);
      *a2 = v8;
      goto LABEL_13;
    }
LABEL_9:
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
    return result;
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
LABEL_13:
  a2[1].__r_.__value_.__s.__data_[0] = 1;
  return result;
}

void sub_235878D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_235878D5C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B7D94C4);
}

void sub_235878D80(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_235878DA0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

std::__shared_weak_count_vtbl **sub_235878E10(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_235878F18(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_2506E0298;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_235878EEC(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_235878F04(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_235878F18(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_2506E0298;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_235878F78(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_235878F90(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_235878FA8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B7D94C4);
}

void sub_235878FCC(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_235878FEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_23587905C(const UInt8 *a1@<X0>, CFIndex a2@<X1>, _QWORD *a3@<X8>)
{
  const __CFAllocator *Default;
  __CFData *Mutable;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  Default = CFAllocatorGetDefault();
  Mutable = CFDataCreateMutable(Default, 0);
  v8 = (std::__shared_weak_count *)operator new();
  v9 = v8;
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_2506E02E8;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)Mutable;
  v21 = v8;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  CFDataAppendBytes(Mutable, a1, a2);
  sub_235879224(&v22, Mutable);
  v13 = v23;
  *a3 = v22;
  a3[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v16 = v23;
    if (v23)
    {
      v17 = (unint64_t *)&v23->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  if (v21)
  {
    v19 = (unint64_t *)&v21->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_2358791E4(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_2358791FC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_235879210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_235847A98((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_235879224(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_2506E02E8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_235879284(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_23587929C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2358792B4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B7D94C4);
}

void sub_2358792D8(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_2358792F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP8__CFDataEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP8__CFDataEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP8__CFDataEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP8__CFDataEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

std::__shared_weak_count_vtbl **sub_235879368(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2, int a3)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count_vtbl *v18;
  std::__shared_weak_count *v19;

  sub_235878E10(&v18, a2, a3);
  v4 = v18;
  v5 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *a1 = v4;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (std::__shared_weak_count *)a1[1];
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      do
        v12 = __ldaxr(v10);
      while (__stlxr(v12 - 1, v10));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *a1 = v18;
    a1[1] = 0;
  }
  v14 = v19;
  if (!v19)
    return a1;
  v15 = (unint64_t *)&v19->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
    return a1;
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  return a1;
}

void sub_23587949C(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_23587949C(a1, *(_QWORD *)a2);
    sub_23587949C(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void sub_235879500(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B7D94C4);
}

void sub_235879524(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_235879544(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK14__CFDictionaryEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK14__CFDictionaryEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK14__CFDictionaryEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK14__CFDictionaryEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_2358795B4(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count_vtbl *Mutable;
  std::__shared_weak_count *v5;
  CFMutableDictionaryRef v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  int *v11;
  int *v12;
  std::__shared_weak_count *v13;
  void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  int *v29;
  int *v30;
  BOOL v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  void *value;
  std::__shared_weak_count *v41;
  void *key;
  std::__shared_weak_count *v43;
  CFMutableDictionaryRef theDict[2];

  Mutable = (std::__shared_weak_count_vtbl *)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  sub_235878E10((std::__shared_weak_count_vtbl **)theDict, Mutable, 0);
  v6 = theDict[0];
  v5 = (std::__shared_weak_count *)theDict[1];
  if (!theDict[1])
    goto LABEL_6;
  v7 = (unint64_t *)((char *)theDict[1] + 8);
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  do
    v9 = __ldaxr(v7);
  while (__stlxr(v9 - 1, v7));
  if (v9)
  {
LABEL_6:
    if (v6)
      goto LABEL_7;
LABEL_41:
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_53;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v6)
    goto LABEL_41;
LABEL_7:
  v12 = (int *)*a1;
  v10 = (int *)(a1 + 1);
  v11 = v12;
  if (v12 == v10)
  {
LABEL_8:
    *(_OWORD *)a2 = *(_OWORD *)theDict;
    theDict[0] = 0;
    theDict[1] = 0;
    goto LABEL_53;
  }
  while (1)
  {
    sub_235878AF0((uint64_t)(v11 + 8), (CFStringRef *)&key);
    sub_2358789EC(v11 + 14, (CFNumberRef *)&value);
    v14 = key;
    v13 = v43;
    if (v43)
    {
      p_shared_owners = (unint64_t *)&v43->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v18 = v41;
    if (!v14)
      break;
    v19 = value;
    if (v41)
    {
      v20 = (unint64_t *)&v41->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (!v19)
    {
      v18 = v41;
      break;
    }
    CFDictionarySetValue(theDict[0], key, value);
    v23 = v41;
    if (!v41)
      goto LABEL_28;
    v24 = (unint64_t *)&v41->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      v26 = v43;
      if (v43)
      {
LABEL_29:
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
    else
    {
LABEL_28:
      v26 = v43;
      if (v43)
        goto LABEL_29;
    }
    v29 = (int *)*((_QWORD *)v11 + 1);
    if (v29)
    {
      do
      {
        v30 = v29;
        v29 = *(int **)v29;
      }
      while (v29);
    }
    else
    {
      do
      {
        v30 = (int *)*((_QWORD *)v11 + 2);
        v31 = *(_QWORD *)v30 == (_QWORD)v11;
        v11 = v30;
      }
      while (!v31);
    }
    v11 = v30;
    if (v30 == v10)
      goto LABEL_8;
  }
  *a2 = 0;
  a2[1] = 0;
  if (v18)
  {
    v32 = (unint64_t *)&v18->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v34 = v43;
  if (v43)
  {
    v35 = (unint64_t *)&v43->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
LABEL_53:
  v37 = (std::__shared_weak_count *)theDict[1];
  if (theDict[1])
  {
    v38 = (unint64_t *)((char *)theDict[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_2358798D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (a12)
  {
    v17 = (unint64_t *)&a12->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (a14)
  {
    v19 = (unint64_t *)&a14->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_235879998(_QWORD *a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count_vtbl *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::logic_error *exception;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  sub_2358795B4(a1, &v12);
  v4 = v12;
  v3 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (!v4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Given map is not compatible with this dictionary type");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_2506DEF18, MEMORY[0x24BEDAB88]);
  }
  sub_235879368(a2, v12, 1);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_235879AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_235847A98((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_235879AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_235847A98((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_235879AE8(uint64_t a1, const void *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
      return 0;
    }
  }
  if (!v7)
    return 0;
LABEL_7:
  sub_235878AF0(a3, (CFStringRef *)&value);
  v12 = value;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_13:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a1, a2, value);
LABEL_14:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_235879C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_235847A98((uint64_t)&a9);
  _Unwind_Resume(a1);
}

CFErrorRef *sub_235879C4C(CFErrorRef *a1, const std::error_condition *a2, void **a3, const __CFAllocator *a4)
{
  std::__shared_weak_count *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  const __CFDictionary *size;
  const __CFDictionary *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  const void **v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  const void *v34;
  const std::error_category *v35;
  const std::error_category *cat;
  CFIndex val;
  CFErrorRef v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  const char *v43;
  size_t v44;
  std::string::size_type v45;
  std::string *p_p;
  uint64_t v47;
  uint64_t v48;
  const __CFString *v49;
  CFIndex v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  std::string __p;
  char v63;
  CFDictionaryRef theDict[2];
  void *value[2];

  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
  sub_235879998(&__p, (std::__shared_weak_count_vtbl **)value);
  *(_OWORD *)theDict = *(_OWORD *)value;
  sub_23587949C((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
  v9 = *a3;
  v8 = (std::__shared_weak_count *)a3[1];
  if (!v8)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
LABEL_6:
    if (v9)
      goto LABEL_7;
LABEL_29:
    v18 = theDict[0];
    size = theDict[1];
    goto LABEL_30;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (!v9)
    goto LABEL_29;
LABEL_7:
  v13 = *a3;
  v14 = (unint64_t *)a3[1];
  value[0] = *a3;
  value[1] = v14;
  if (v14)
  {
    v15 = v14 + 1;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  sub_235878F18(&__p, v13);
  size = (const __CFDictionary *)__p.__r_.__value_.__l.__size_;
  v18 = (const __CFDictionary *)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v21 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v22 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  v24 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v25 = (unint64_t *)((char *)value[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)theDict[1];
  theDict[0] = v18;
  theDict[1] = size;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    goto LABEL_29;
  }
LABEL_30:
  v30 = (const void **)MEMORY[0x24BDBD378];
  if (size)
  {
    v31 = (unint64_t *)((char *)size + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
    do
      v33 = __ldaxr(v31);
    while (__stlxr(v33 - 1, v31));
    if (!v33)
    {
      (*(void (**)(const __CFDictionary *))(*(_QWORD *)size + 16))(size);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)size);
      v34 = *v30;
      if (v18)
        goto LABEL_36;
LABEL_41:
      std::error_condition::message(&__p, a2);
      sub_235879AE8((uint64_t)theDict, v34, (uint64_t)&__p);
      goto LABEL_42;
    }
  }
  v34 = *v30;
  if (!v18)
    goto LABEL_41;
LABEL_36:
  value[0] = 0;
  if (!v34)
    goto LABEL_41;
  if (!CFDictionaryGetValueIfPresent(theDict[0], v34, (const void **)value))
    goto LABEL_41;
  sub_235878BFC((CFIndex)value[0], &__p);
  if (!v63)
    goto LABEL_41;
LABEL_42:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    cat = a2->__cat_;
    if (cat != std::generic_category())
      goto LABEL_51;
  }
  else
  {
    v35 = a2->__cat_;
    if (v35 != std::generic_category())
      goto LABEL_51;
  }
  val = a2->__val_;
  if ((_DWORD)val)
  {
    sub_23587A438((std::__shared_weak_count_vtbl **)&__p, (std::__shared_weak_count_vtbl *)theDict[0], (std::__shared_weak_count *)theDict[1]);
    v38 = CFErrorCreate(a4, (CFErrorDomain)*MEMORY[0x24BDBD390], val, (CFDictionaryRef)__p.__r_.__value_.__l.__data_);
    v39 = (std::__shared_weak_count *)operator new();
    v39->__vftable = (std::__shared_weak_count_vtbl *)&off_2506E0388;
    v39->__shared_owners_ = 0;
    v39->__shared_weak_owners_ = 0;
    v39[1].__vftable = (std::__shared_weak_count_vtbl *)v38;
    v40 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_)
      goto LABEL_71;
    v41 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    goto LABEL_69;
  }
LABEL_51:
  v43 = (const char *)((uint64_t (*)(const std::error_category *))a2->__cat_->name)(a2->__cat_);
  v44 = strlen(v43);
  if (v44 >= 0x7FFFFFFFFFFFFFF8)
    sub_23584B34C();
  v45 = v44;
  if (v44 >= 0x17)
  {
    v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v47 = v44 | 7;
    v48 = v47 + 1;
    p_p = (std::string *)operator new(v47 + 1);
    __p.__r_.__value_.__l.__size_ = v45;
    __p.__r_.__value_.__r.__words[2] = v48 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_58;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v44;
  p_p = &__p;
  if (v44)
LABEL_58:
    memcpy(p_p, v43, v45);
  p_p->__r_.__value_.__s.__data_[v45] = 0;
  sub_235878AF0((uint64_t)&__p, (CFStringRef *)value);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v49 = (const __CFString *)value[0];
  v50 = a2->__val_;
  sub_23587A438((std::__shared_weak_count_vtbl **)&__p, (std::__shared_weak_count_vtbl *)theDict[0], (std::__shared_weak_count *)theDict[1]);
  v38 = CFErrorCreate(a4, v49, v50, (CFDictionaryRef)__p.__r_.__value_.__l.__data_);
  v39 = (std::__shared_weak_count *)operator new();
  v39->__vftable = (std::__shared_weak_count_vtbl *)&off_2506E0388;
  v39->__shared_owners_ = 0;
  v39->__shared_weak_owners_ = 0;
  v39[1].__vftable = (std::__shared_weak_count_vtbl *)v38;
  v51 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v52 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v40 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v54 = (unint64_t *)((char *)value[1] + 8);
    do
      v42 = __ldaxr(v54);
    while (__stlxr(v42 - 1, v54));
LABEL_69:
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_71:
  v55 = (std::__shared_weak_count *)theDict[1];
  if (theDict[1])
  {
    v56 = (unint64_t *)((char *)theDict[1] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  *a1 = v38;
  a1[1] = (CFErrorRef)v39;
  v58 = (unint64_t *)&v39->__shared_owners_;
  do
    v59 = __ldxr(v58);
  while (__stxr(v59 + 1, v58));
  do
    v60 = __ldaxr(v58);
  while (__stlxr(v60 - 1, v58));
  if (!v60)
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  return a1;
}

void sub_23587A15C()
{
  __break(1u);
}

void sub_23587A1DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  __cxa_end_catch();
  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (a16)
  {
    v18 = (unint64_t *)(a16 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    JUMPOUT(0x23587A244);
  }
  JUMPOUT(0x23587A2A4);
}

void sub_23587A268(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  JUMPOUT(0x23587A2A4);
}

void sub_23587A288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  sub_23587949C((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_23587A2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_23587A2E4(const void **a1, CFTypeRef *a2)
{
  const void *v4;

  if (a2)
  {
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v4 = *a1;
    if (v4)
      CFRetain(v4);
    *a2 = v4;
  }
}

void sub_23587A32C(const std::error_condition *a1@<X0>, uint64_t a2@<X1>, CFErrorRef *a3@<X8>)
{
  const __CFAllocator *Default;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  char **v11;
  char *v12[2];
  __int128 v13;

  v12[0] = 0;
  v12[1] = 0;
  v11 = v12;
  sub_235879998(&v11, (std::__shared_weak_count_vtbl **)&v13);
  v10 = v13;
  sub_23587949C((uint64_t)&v11, v12[0]);
  sub_235879AE8((uint64_t)&v10, (const void *)*MEMORY[0x24BDBD3A8], a2);
  Default = CFAllocatorGetDefault();
  sub_235879C4C(a3, a1, (void **)&v10, Default);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_23587A40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_23587949C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_23587A424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_235847A98((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_23587A438(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (cf)
    CFRetain(cf);
  v7 = (std::__shared_weak_count *)operator new();
  v8 = v7;
  v7->__shared_owners_ = 0;
  v9 = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_2506E0338;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = cf;
  *a1 = cf;
  a1[1] = (std::__shared_weak_count_vtbl *)v7;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 - 1, v9));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (!a3)
    return a1;
  v12 = (unint64_t *)&a3->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
  std::__shared_weak_count::__release_weak(a3);
  return a1;
}

void sub_23587A558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_235847A98((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23587A56C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_23587A584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  sub_235847A98((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23587A5A4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B7D94C4);
}

void sub_23587A5C8(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_23587A5E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP9__CFErrorEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP9__CFErrorEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP9__CFErrorEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP9__CFErrorEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_23587A660(int a1, unint64_t a2, unint64_t a3)
{
  const char *v3;
  std::string *v4;
  std::string::size_type size;
  const char *v6;
  std::string v7;
  unint64_t v8;
  unint64_t v9;
  int v10;

  v10 = a1;
  v9 = a2;
  v8 = a3;
  v3 = " (ENOMEM)";
  if (a1 != 12)
    v3 = (const char *)&unk_2358A7336;
  v6 = v3;
  sub_23587A72C("posix_memalign failed to allocate ", &v9, (std::string *)" bytes with alignment ", &v8, (std::string *)": error code ", &v10, (std::string *)&v6);
  if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v7;
  else
    v4 = (std::string *)v7.__r_.__value_.__r.__words[0];
  if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v7.__r_.__value_.__r.__words[2]);
  else
    size = v7.__r_.__value_.__l.__size_;
  sub_23587BF24("/Library/Caches/com.apple.xbs/Sources/ACCBaker/library/Essentials/Array/src/ArrayBuffer.cpp", 37, (uint64_t)&unk_2358A7336, 0, (uint64_t)v4, size, (void (*)(void **))sub_23587C380);
  std::string::~string(&v7);
  abort();
}

void sub_23587A710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23587A72C(const char *a1, unint64_t *a2, std::string *a3, unint64_t *a4, std::string *a5, int *a6, std::string *a7)
{
  size_t v14;
  size_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _QWORD __dst[2];
  unint64_t v21;
  int v22;
  std::string v23;
  std::string **v24;
  std::string *v25;
  std::string *v26;
  _QWORD *v27;
  std::string *v28;
  std::string *v29;

  v22 = -1;
  v14 = strlen(a1);
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    sub_23584B34C();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    __dst[1] = v15;
    v21 = v18 | 0x8000000000000000;
    __dst[0] = v16;
    goto LABEL_8;
  }
  HIBYTE(v21) = v14;
  v16 = __dst;
  if (v14)
LABEL_8:
    memcpy(v16, a1, v15);
  *((_BYTE *)v16 + v15) = 0;
  v22 = 1;
  std::to_string(&v23, *a2);
  v25 = (std::string *)__dst;
  v26 = &v23;
  v27 = __dst;
  v28 = &v23;
  v29 = &v23;
  if (v22 == -1)
    sub_23584BC5C();
  v24 = &v25;
  ((void (*)(std::string ***, _QWORD *))off_2506E03F8[v22])(&v24, __dst);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  v25 = (std::string *)__dst;
  v26 = a3;
  v27 = __dst;
  v28 = a3;
  v29 = a3;
  if (v22 == -1)
    sub_23584BC5C();
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  ((void (*)(std::string *, _QWORD *))off_2506E0410[v22])(&v23, __dst);
  std::to_string(&v23, *a4);
  v25 = (std::string *)__dst;
  v26 = &v23;
  v27 = __dst;
  v28 = &v23;
  v29 = &v23;
  if (v22 == -1)
    sub_23584BC5C();
  v24 = &v25;
  ((void (*)(std::string ***, _QWORD *))off_2506E03F8[v22])(&v24, __dst);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  v25 = (std::string *)__dst;
  v26 = a5;
  v27 = __dst;
  v28 = a5;
  v29 = a5;
  if (v22 == -1)
    sub_23584BC5C();
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  ((void (*)(std::string *, _QWORD *))off_2506E0428[v22])(&v23, __dst);
  std::to_string(&v23, *a6);
  v25 = (std::string *)__dst;
  v26 = &v23;
  v27 = __dst;
  v28 = &v23;
  v29 = &v23;
  if (v22 == -1)
    sub_23584BC5C();
  v24 = &v25;
  ((void (*)(std::string ***, _QWORD *))off_2506E03F8[v22])(&v24, __dst);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v23.__r_.__value_.__l.__data_);
    if (a7->__r_.__value_.__r.__words[0])
    {
LABEL_20:
      v25 = (std::string *)__dst;
      v26 = a7;
      v27 = __dst;
      v28 = a7;
      v29 = a7;
      if (v22 != -1)
      {
        v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
        ((void (*)(std::string *, _QWORD *))off_2506E0440[v22])(&v23, __dst);
        goto LABEL_25;
      }
LABEL_35:
      sub_23584BC5C();
    }
  }
  else if (a7->__r_.__value_.__r.__words[0])
  {
    goto LABEL_20;
  }
  v25 = (std::string *)__dst;
  v26 = (std::string *)"nullptr";
  v27 = __dst;
  v28 = (std::string *)"nullptr";
  v29 = (std::string *)"nullptr";
  if (v22 == -1)
    goto LABEL_35;
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  ((void (*)(std::string *, _QWORD *))off_2506E03E0[v22])(&v23, __dst);
LABEL_25:
  if (v22 == -1)
    sub_23584BC5C();
  v25 = &v23;
  result = ((uint64_t (*)(std::string **, _QWORD *))off_2506E0458[v22])(&v25, __dst);
  if (v22 != -1)
    return ((uint64_t (*)(std::string **, _QWORD *))off_2506E03C8[v22])(&v25, __dst);
  return result;
}

void sub_23587AAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_23584BC04((uint64_t)&a10);
  _Unwind_Resume(a1);
}

size_t sub_23587AB14(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_2506E03C8[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_23584B34C();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_23587AC00(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_23584B34C();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_2506E03C8[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_23584BE28((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_23587ADB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_235847B00(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_23587ADFC(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_23584B34C();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_235847D5C();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_2358482F0();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_23584B34C();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_23587B08C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_23587B0A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

size_t sub_23587B0AC(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_2506E03C8[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_23584B34C();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_23587B198(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_23584B34C();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_2506E03C8[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_23584BE28((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_23587B350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_235847B00(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_23587B394(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_23584B34C();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_235847D5C();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_2358482F0();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_23584B34C();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_23587B624(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_23587B63C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_DWORD *sub_23587B644(_DWORD ***a1)
{
  return sub_23584BC94(**a1, (const char **)(*a1)[1]);
}

void sub_23587B650(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = **(const char ***)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_23584B34C();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_2506E03C8[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_23584BE28((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_23587B80C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_235847B00(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_23587B850(uint64_t a1, void **a2)
{
  const char **v3;
  _BYTE *v4;
  _QWORD *v5;
  const char *v6;
  size_t v7;
  size_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  size_t v19;
  size_t v20;
  void *v21;
  char *v22;
  void **v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  void **v28;

  v3 = *(const char ***)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  v6 = *v3;
  if (v5 < (_QWORD *)v4)
  {
    v7 = strlen(*v3);
    if (v7 > 0x7FFFFFFFFFFFFFF7)
      sub_23584B34C();
    v8 = v7;
    if (v7 >= 0x17)
    {
      v15 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v15 = v7 | 7;
      v16 = v15 + 1;
      v9 = operator new(v15 + 1);
      v5[1] = v8;
      v5[2] = v16 | 0x8000000000000000;
      *v5 = v9;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v7;
      v9 = v5;
      if (!v7)
        goto LABEL_19;
    }
    memmove(v9, v6, v8);
LABEL_19:
    *((_BYTE *)v9 + v8) = 0;
    v17 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_235847D5C();
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v12 = 2 * v11;
  if (2 * v11 <= v10 + 1)
    v12 = v10 + 1;
  if (v11 >= 0x555555555555555)
    v13 = 0xAAAAAAAAAAAAAAALL;
  else
    v13 = v12;
  if (v13)
  {
    if (v13 > 0xAAAAAAAAAAAAAAALL)
      sub_2358482F0();
    v14 = (char *)operator new(24 * v13);
  }
  else
  {
    v14 = 0;
  }
  v18 = &v14[24 * v10];
  v19 = strlen(v6);
  if (v19 > 0x7FFFFFFFFFFFFFF7)
    sub_23584B34C();
  v20 = v19;
  if (v19 >= 0x17)
  {
    v25 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v25 = v19 | 7;
    v26 = v25 + 1;
    v21 = operator new(v25 + 1);
    *((_QWORD *)v18 + 1) = v20;
    *((_QWORD *)v18 + 2) = v26 | 0x8000000000000000;
    *(_QWORD *)v18 = v21;
  }
  else
  {
    v18[23] = v19;
    v21 = v18;
    if (!v19)
    {
      v22 = &v14[24 * v13];
      *v18 = 0;
      v17 = v18 + 24;
      v23 = (void **)*a2;
      v24 = (void **)a2[1];
      if (v24 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v27 = *(_OWORD *)(v24 - 3);
        *((_QWORD *)v18 - 1) = *(v24 - 1);
        *(_OWORD *)(v18 - 24) = v27;
        v18 -= 24;
        *(v24 - 2) = 0;
        *(v24 - 1) = 0;
        *(v24 - 3) = 0;
        v24 -= 3;
      }
      while (v24 != v23);
      v24 = (void **)*a2;
      v28 = (void **)a2[1];
      *a2 = v18;
      a2[1] = v17;
      a2[2] = v22;
      while (v28 != v24)
      {
        if (*((char *)v28 - 1) < 0)
          operator delete(*(v28 - 3));
        v28 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v21, v6, v20);
  v22 = &v14[24 * v13];
  *((_BYTE *)v21 + v20) = 0;
  v17 = v18 + 24;
  v23 = (void **)*a2;
  v24 = (void **)a2[1];
  if (v24 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v18;
  a2[1] = v17;
  a2[2] = v22;
LABEL_37:
  if (v24)
    operator delete(v24);
LABEL_39:
  a2[1] = v17;
}

void sub_23587BAE4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_23587BAFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_23587BB04(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void *__p;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  int64_t v36;
  char *v37;
  int v38;

  v6 = a2[1];
  __p = 0;
  v33 = 0;
  v34 = 0;
  v7 = v6 - 1;
  if (v6 != 1)
  {
    if ((v7 & 0x8000000000000000) != 0)
      sub_235847D5C();
    v8 = (unint64_t)(v6 - 2) >> 6;
    v9 = operator new(8 * (v8 + 1));
    v10 = v9;
    v33 = v7;
    v34 = v8 + 1;
    __p = v9;
    if (v7 >= 0x41)
      v11 = v8;
    else
      v11 = 0;
    v9[v11] = 0;
    if (v7 >= 0x40)
      bzero(v9, 8 * (v7 >> 6));
    if ((v7 & 0x3F) != 0)
      v10[v7 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v7 & 0x3F));
  }
  sub_235857DB0(a1, (uint64_t)&__p, (uint64_t)&v35);
  if (__p)
    operator delete(__p);
  v12 = *(_QWORD *)(a1 + 8);
  v13 = (char *)v35;
  if (v12)
  {
    v14 = 0;
    v15 = *a2;
    do
    {
      if (((*(_QWORD *)&v13[(v14 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v14) & 1) != 0)
      {
        v16 = a2[1];
        if (v16)
        {
          for (i = 0; i != v16; ++i)
          {
            v18 = ((v14 + i) >> 3) & 0x1FFFFFFFFFFFFFF8;
            v19 = 1 << (v14 + i);
            v20 = *(_QWORD *)&v13[v18];
            v21 = (v19 & v20) != 0;
            v22 = v20 & ~v19;
            v23 = v19 | v20;
            if ((((*(_QWORD *)(v15 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) ^ v21) & 1) == 0)
              v23 = v22;
            *(_QWORD *)&v13[v18] = v23;
          }
        }
      }
      ++v14;
    }
    while (v14 != v12);
  }
  v24 = v36;
  if (v36 >= (uint64_t)v7)
    v25 = v7;
  else
    v25 = v36;
  v26 = v36 - v25;
  if (v26 < 0)
  {
    v28 = v26 - 63;
    if (v26 - 63 < 0)
      v28 = v26;
    v27 = v28 >> 6;
  }
  else
  {
    v27 = (unint64_t)v26 >> 6;
  }
  v29 = &v13[8 * v27];
  v30 = &v13[8 * ((unint64_t)v36 >> 6)];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v31 = v26 & 0x3F;
  __p = v29;
  LODWORD(v33) = v31;
  v37 = v30;
  v38 = v24 & 0x3F;
  sub_23585200C(a3, (uint64_t)&__p, (uint64_t)&v37, (v24 & 0x3F) - v31 + 8 * (v30 - v29));
  if (v35)
    operator delete(v35);
}

void sub_23587BD10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23587BD28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a9)
    JUMPOUT(0x23587BD20);
  JUMPOUT(0x23587BD1CLL);
}

_QWORD *sub_23587BD38(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;

  v2 = (_QWORD *)*a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (void *)v2[6];
    if (v3)
    {
      v2[7] = v3;
      operator delete(v3);
    }
    v4 = (void *)v2[3];
    if (v4)
    {
      v2[4] = v4;
      operator delete(v4);
    }
    MEMORY[0x23B7D94C4](v2, 0x1010C40DA3B4497);
  }
  return a1;
}

uint64_t sub_23587BD9C(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v9;
  void *v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;

  sub_2358497E4(&v12, *a1 + 16);
  sub_235849B04(&v12, a2, a3);
  if (v15)
  {
    v5 = v13;
    v6 = v14;
    v7 = *v14;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v5 + 8) = v7;
    v15 = 0;
    if (v6 != &v13)
    {
      do
      {
        v9 = (uint64_t *)v6[1];
        v10 = (void *)v6[6];
        if (v10)
        {
          v6[7] = (uint64_t)v10;
          operator delete(v10);
        }
        v11 = (void *)v6[3];
        if (v11)
        {
          v6[4] = (uint64_t)v11;
          operator delete(v11);
        }
        operator delete(v6);
        v6 = v9;
      }
      while (v9 != &v13);
    }
  }
  return 1;
}

void sub_23587BE64(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (!a12)
    JUMPOUT(0x23587BE10);
  JUMPOUT(0x23587BDE8);
}

void sub_23587BE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23587BE90(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_23587BE90(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v7;
  void *v8;
  void *v9;

  if (a1[3])
  {
    v2 = a1 + 1;
    v3 = a1[1];
    v4 = (uint64_t *)a1[2];
    v5 = *v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    a1[3] = 0;
    if (v4 != a1 + 1)
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        v8 = (void *)v4[6];
        if (v8)
        {
          v4[7] = (uint64_t)v8;
          operator delete(v8);
        }
        v9 = (void *)v4[3];
        if (v9)
        {
          v4[4] = (uint64_t)v9;
          operator delete(v9);
        }
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  return a1;
}

BOOL sub_23587BF24(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void **))
{
  unsigned __int8 v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned __int8 v17;
  int v18;

  sub_23587C07C(a1, a2, a3, a4, a5, a6, a7);
  v11 = atomic_load((unsigned __int8 *)&qword_2563067D8);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_2563067D8))
  {
    __cxa_atexit((void (*)(void *))sub_23587C500, &qword_2563067A0, &dword_235841000);
    __cxa_guard_release(&qword_2563067D8);
  }
  if (byte_2563067C8)
    v12 = byte_2563067D0 == 0;
  else
    v12 = 0;
  if (!v12)
  {
    v13 = qword_2563067A0;
    v14 = unk_2563067A8;
    while (v13 != v14)
    {
      v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v13;
      v15 = *(_QWORD *)(v13 + 8);
      v13 += 16;
      v16(v15, a3, a4, a5, a6);
    }
  }
  v17 = atomic_load((unsigned __int8 *)&qword_2563067D8);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_2563067D8))
  {
    __cxa_atexit((void (*)(void *))sub_23587C500, &qword_2563067A0, &dword_235841000);
    __cxa_guard_release(&qword_2563067D8);
  }
  v18 = byte_2563067C8;
  if (byte_2563067C8)
    qword_2563067B8(unk_2563067C0, a3, a4, a5, a6);
  return v18 == 0;
}

void sub_23587C07C(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void **))
{
  unsigned __int8 v13;
  const char *v14;
  uint64_t v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  size_t v20;
  void *v21;
  unint64_t v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  void *v28[2];
  int64_t v29;
  _QWORD v30[2];
  _QWORD v31[3];
  const void *v32;
  uint64_t v33;
  const void *v34;
  unint64_t v35;
  void *__p;
  char v37;
  unint64_t v38;
  int v39;
  uint64_t v40;

  v13 = atomic_load((unsigned __int8 *)&qword_2563067D8);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_2563067D8))
  {
    __cxa_atexit((void (*)(void *))sub_23587C500, &qword_2563067A0, &dword_235841000);
    __cxa_guard_release(&qword_2563067D8);
  }
  if (!byte_2563067C8)
  {
    sub_23584CC60((uint64_t)v30);
    if (a4)
      v14 = "Assert: ";
    else
      v14 = "Abort: ";
    if (a4)
      v15 = 8;
    else
      v15 = 7;
    sub_23584D1D8(v31, (uint64_t)v14, v15);
    v16 = strlen(a1);
    v17 = sub_23584D1D8(v31, (uint64_t)a1, v16);
    sub_23584D1D8(v17, (uint64_t)":", 1);
    std::ostream::operator<<();
    if (a4)
    {
      v18 = sub_23584D1D8(v31, (uint64_t)" : ", 3);
      sub_23584D1D8(v18, a3, a4);
    }
    if (a6)
    {
      v19 = sub_23584D1D8(v31, (uint64_t)" : ", 3);
      sub_23584D1D8(v19, a5, a6);
    }
    sub_23584D1D8(v31, (uint64_t)"\n", 1);
    if ((v39 & 0x10) != 0)
    {
      v22 = v38;
      if (v38 < v35)
      {
        v38 = v35;
        v22 = v35;
      }
      v23 = v34;
      v20 = v22 - (_QWORD)v34;
      if (v22 - (unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_35;
    }
    else
    {
      if ((v39 & 8) == 0)
      {
        v20 = 0;
        HIBYTE(v29) = 0;
        v21 = v28;
        goto LABEL_26;
      }
      v23 = v32;
      v20 = v33 - (_QWORD)v32;
      if ((unint64_t)(v33 - (_QWORD)v32) >= 0x7FFFFFFFFFFFFFF8)
LABEL_35:
        sub_23584B34C();
    }
    if (v20 >= 0x17)
    {
      v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v24 = v20 | 7;
      v25 = v24 + 1;
      v21 = operator new(v24 + 1);
      v28[1] = (void *)v20;
      v29 = v25 | 0x8000000000000000;
      v28[0] = v21;
    }
    else
    {
      HIBYTE(v29) = v20;
      v21 = v28;
      if (!v20)
        goto LABEL_26;
    }
    memmove(v21, v23, v20);
LABEL_26:
    *((_BYTE *)v21 + v20) = 0;
    v30[0] = *MEMORY[0x24BEDB7F0];
    v26 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(_QWORD *)((char *)v30 + *(_QWORD *)(v30[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v31[0] = v26;
    v31[1] = MEMORY[0x24BEDB848] + 16;
    if (v37 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x23B7D9458](&v40);
    if (v29 >= 0)
      v27 = v28;
    else
      v27 = (void **)v28[0];
    a7(v27);
    if (SHIBYTE(v29) < 0)
      operator delete(v28[0]);
  }
}

void sub_23587C350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_23587C380(char *__s)
{
  unsigned __int8 v2;
  size_t v3;
  uint64_t *v4;
  unsigned __int8 v5;
  NSObject *v6;
  int v8;
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2563067E0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2563067E0))
  {
    __cxa_atexit((void (*)(void *))sub_23587C530, &off_256306738, &dword_235841000);
    __cxa_guard_release(&qword_2563067E0);
  }
  v3 = strlen(__s);
  sub_23587C5D8((void **)&qword_256306740, __s, v3);
  if (byte_256306757 >= 0)
    v4 = &qword_256306740;
  else
    v4 = (uint64_t *)qword_256306740;
  qword_256306760 = (uint64_t)v4;
  v5 = atomic_load((unsigned __int8 *)&qword_256306858);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_256306858))
  {
    qword_256306850 = (uint64_t)os_log_create("cv3d", "");
    __cxa_guard_release(&qword_256306858);
  }
  v6 = qword_256306850;
  if (os_log_type_enabled((os_log_t)qword_256306850, OS_LOG_TYPE_FAULT))
  {
    v8 = 136315138;
    v9 = __s;
    _os_log_impl(&dword_235841000, v6, OS_LOG_TYPE_FAULT, "%s", (uint8_t *)&v8, 0xCu);
  }
  return fputs(__s, (FILE *)*MEMORY[0x24BDAC8D8]);
}

uint64_t sub_23587C500(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_23587C530(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = off_2506E0480;
  qword_256306760 = 0;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_23587C584(uint64_t a1)
{
  *(_QWORD *)a1 = off_2506E0480;
  qword_256306760 = 0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x23B7D94C4);
}

void **sub_23587C5D8(void **__dst, void *__src, size_t __len)
{
  unint64_t v6;
  void *v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;

  LODWORD(v6) = *((char *)__dst + 23);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = (unint64_t)__dst[2];
    v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__len > v8)
    {
      v11 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) >= __len - v8)
      {
        v9 = *__dst;
        if (v8 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          v7 = operator new(v11);
          memcpy(v7, __src, __len);
          if (v8 != 22)
            operator delete(v9);
          __dst[2] = (void *)(v11 | 0x8000000000000000);
          *__dst = v7;
LABEL_23:
          __dst[1] = (void *)__len;
          goto LABEL_24;
        }
LABEL_8:
        v12 = 2 * v8;
        if (__len > 2 * v8)
          v12 = __len;
        v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v13 = v12 | 7;
        if (v12 >= 0x17)
          v11 = v13 + 1;
        else
          v11 = 23;
        goto LABEL_15;
      }
LABEL_25:
      sub_23584B34C();
    }
    v6 = HIBYTE(v10);
    v7 = *__dst;
  }
  else
  {
    v7 = __dst;
    if (__len > 0x16)
    {
      if (__len - 0x7FFFFFFFFFFFFFF7 >= 0x800000000000001FLL)
      {
        v8 = 22;
        v9 = __dst;
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = *((_BYTE *)__dst + 23);
  }
  if ((v6 & 0x80) != 0)
    goto LABEL_23;
  *((_BYTE *)__dst + 23) = __len & 0x7F;
LABEL_24:
  *((_BYTE *)v7 + __len) = 0;
  return __dst;
}

CFAllocatorRef CFAllocatorGetDefault(void)
{
  return (CFAllocatorRef)MEMORY[0x24BDBB7A8]();
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x24BDBB820](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x24BDBB860](theArray, idx);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
  MEMORY[0x24BDBBC88](theData, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x24BDBBCB0](allocator, capacity);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDBBDF0](allocator, capacity, keyCallBacks, valueCallBacks);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x24BDBBE38](theDict, key, value);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBE60](theDict, key, value);
}

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x24BDBBE88](allocator, domain, code, userInfo);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x24BDBBEF8](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x24BDBC0A0](allocator, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x24BDBC2A8](cf);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x24BDBC4D0](theString1, theString2, compareOptions);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x24BDBC510](alloc, theString, separatorString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x24BDBC558](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x24BDBC598](alloc, formatOptions, format);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x24BDBC5F8](theString, range.location, range.length, *(_QWORD *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x24BDBC618](theString, idx);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x24BDBC658](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x24BDBC698]();
}

CFStringRef CFURLCopyQueryString(CFURLRef anURL, CFStringRef charactersToLeaveEscaped)
{
  return (CFStringRef)MEMORY[0x24BDBC7C8](anURL, charactersToLeaveEscaped);
}

CFStringRef CFURLCreateStringByReplacingPercentEscapes(CFAllocatorRef allocator, CFStringRef originalString, CFStringRef charactersToLeaveEscaped)
{
  return (CFStringRef)MEMORY[0x24BDBC840](allocator, originalString, charactersToLeaveEscaped);
}

CFStringRef CFURLGetString(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x24BDBC8A8](anURL);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

std::string *__cdecl std::error_condition::message(std::string *__return_ptr retstr, const std::error_condition *this)
{
  return (std::string *)MEMORY[0x24BEDA9E8](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

const char *__cdecl std::exception::what(const std::exception *this)
{
  return (const char *)MEMORY[0x24BEDAA88](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB50](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB58](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
  MEMORY[0x24BEDAB68](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x24BEDAC50](this, __n, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC88](this, __pos, __s, __n);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x24BEDACA8](this, __pos, __n1, __s, __n2);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
  MEMORY[0x24BEDACB8](this, __requested_capacity);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x24BEDACC8](this, __c);
}

void std::string::~string(std::string *this)
{
  MEMORY[0x24BEDACF0](this);
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x24BEDAE50]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x24BEDAF10]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF30]();
}

{
  return MEMORY[0x24BEDAF48]();
}

{
  return MEMORY[0x24BEDAF60]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x24BEDB010]();
}

void std::error_category::~error_category(std::error_category *this)
{
  MEMORY[0x24BEDB028](this);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

uint64_t std::stringbuf::operator=()
{
  return MEMORY[0x24BEDB078]();
}

const std::error_category *std::generic_category(void)
{
  return (const std::error_category *)MEMORY[0x24BEDB0B8]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB180](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB190](this);
}

double std::stod(const std::string *__str, size_t *__idx)
{
  double result;

  MEMORY[0x24BEDB320](__str, __idx);
  return result;
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x24BEDB438](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x24BEDB440](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

const std::locale *__cdecl std::locale::operator=(std::locale *this, const std::locale *a2)
{
  return (const std::locale *)MEMORY[0x24BEDB450](this, a2);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::swap(std::ios_base *this, std::ios_base *a2)
{
  MEMORY[0x24BEDB528](this, a2);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

std::locale std::ios_base::imbue(std::ios_base *this, const std::locale *__loc)
{
  return (std::locale)MEMORY[0x24BEDB538](this, __loc);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, double __val)
{
  return (std::string *)MEMORY[0x24BEDB5F8](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, float __val)
{
  return (std::string *)MEMORY[0x24BEDB600](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x24BEDB608](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB620](retstr, __val);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

uint64_t operator delete[]()
{
  return off_2506DEF88();
}

void operator delete(void *__p)
{
  off_2506DEF90(__p);
}

uint64_t operator delete()
{
  return off_2506DEF98();
}

uint64_t operator new[]()
{
  return off_2506DEFA0();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_2506DEFA8(__sz);
}

uint64_t operator new()
{
  return off_2506DEFB0();
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x24BDAC7B0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x24BEDB940](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x24BEDB958]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x24BDAC890](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

void abort(void)
{
  MEMORY[0x24BDAD008]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x24BDAE440](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return MEMORY[0x24BDAED80](memptr, alignment, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE70](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

int sqlite3_close_v2(sqlite3 *a1)
{
  return MEMORY[0x24BEDE018](a1);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x24BEDE1C0](filename, ppDb, *(_QWORD *)&flags, zVfs);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x24BDB0000](__str, __endptr, *(_QWORD *)&__base);
}

